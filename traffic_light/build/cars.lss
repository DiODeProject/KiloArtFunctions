
build/cars.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	52 03       	mulsu	r21, r18
      6a:	ce 03       	fmulsu	r20, r22
      6c:	26 03       	mulsu	r18, r22
      6e:	1d 03       	fmul	r17, r21
      70:	23 03       	mulsu	r18, r19
      72:	b0 03       	fmuls	r19, r16
      74:	a5 03       	fmuls	r18, r21
      76:	30 0a       	sbc	r3, r16
      78:	0d 09       	sbc	r16, r13
      7a:	0d 09       	sbc	r16, r13
      7c:	2d 0a       	sbc	r2, r29
      7e:	39 0a       	sbc	r3, r25
      80:	29 0a       	sbc	r2, r25
      82:	40 0a       	sbc	r4, r16
      84:	3c 0a       	sbc	r3, r28
      86:	44 0a       	sbc	r4, r20
      88:	fc 09       	sbc	r31, r12
      8a:	ce 09       	sbc	r28, r14

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e3       	ldi	r30, 0x3C	; 60
      b8:	fd e1       	ldi	r31, 0x1D	; 29
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 31       	cpi	r26, 0x1A	; 26
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e1       	ldi	r26, 0x1A	; 26
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 38       	cpi	r26, 0x8E	; 142
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <main>
      da:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:
}


void setup()
{
    last_update = kilo_ticks;
      f4:	80 91 4d 01 	lds	r24, 0x014D
      f8:	90 91 4e 01 	lds	r25, 0x014E
      fc:	a0 91 4f 01 	lds	r26, 0x014F
     100:	b0 91 50 01 	lds	r27, 0x0150
     104:	80 93 26 01 	sts	0x0126, r24
     108:	90 93 27 01 	sts	0x0127, r25
     10c:	a0 93 28 01 	sts	0x0128, r26
     110:	b0 93 29 01 	sts	0x0129, r27
    mini_distance = 500;
     114:	84 ef       	ldi	r24, 0xF4	; 244
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	90 93 25 01 	sts	0x0125, r25
     11c:	80 93 24 01 	sts	0x0124, r24
     120:	08 95       	ret

00000122 <message_rx>:
        mini_distance = 500;
    }
}

void message_rx(message_t *m, distance_measurement_t *d)
{
     122:	cb 01       	movw	r24, r22
    new_message = 1;
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	30 93 1b 01 	sts	0x011B, r19
     12c:	20 93 1a 01 	sts	0x011A, r18
    distance = estimate_distance(d);
     130:	0e 94 4c 05 	call	0xa98	; 0xa98 <estimate_distance>
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	90 93 23 01 	sts	0x0123, r25
     13a:	80 93 22 01 	sts	0x0122, r24
     13e:	08 95       	ret

00000140 <loop>:
}

void loop()
{
    
    if (mini_distance > distance){
     140:	20 91 24 01 	lds	r18, 0x0124
     144:	30 91 25 01 	lds	r19, 0x0125
     148:	80 91 22 01 	lds	r24, 0x0122
     14c:	90 91 23 01 	lds	r25, 0x0123
     150:	82 17       	cp	r24, r18
     152:	93 07       	cpc	r25, r19
     154:	2c f4       	brge	.+10     	; 0x160 <loop+0x20>
        mini_distance = distance;
     156:	90 93 25 01 	sts	0x0125, r25
     15a:	80 93 24 01 	sts	0x0124, r24
     15e:	9c 01       	movw	r18, r24
    }
    // Update the motion if a message is received.
    if (kilo_ticks > (last_update+32)){
     160:	40 91 4d 01 	lds	r20, 0x014D
     164:	50 91 4e 01 	lds	r21, 0x014E
     168:	60 91 4f 01 	lds	r22, 0x014F
     16c:	70 91 50 01 	lds	r23, 0x0150
     170:	80 91 26 01 	lds	r24, 0x0126
     174:	90 91 27 01 	lds	r25, 0x0127
     178:	a0 91 28 01 	lds	r26, 0x0128
     17c:	b0 91 29 01 	lds	r27, 0x0129
     180:	80 96       	adiw	r24, 0x20	; 32
     182:	a1 1d       	adc	r26, r1
     184:	b1 1d       	adc	r27, r1
     186:	84 17       	cp	r24, r20
     188:	95 07       	cpc	r25, r21
     18a:	a6 07       	cpc	r26, r22
     18c:	b7 07       	cpc	r27, r23
     18e:	e0 f4       	brcc	.+56     	; 0x1c8 <loop+0x88>

        last_update = kilo_ticks;
     190:	80 91 4d 01 	lds	r24, 0x014D
     194:	90 91 4e 01 	lds	r25, 0x014E
     198:	a0 91 4f 01 	lds	r26, 0x014F
     19c:	b0 91 50 01 	lds	r27, 0x0150
     1a0:	80 93 26 01 	sts	0x0126, r24
     1a4:	90 93 27 01 	sts	0x0127, r25
     1a8:	a0 93 28 01 	sts	0x0128, r26
     1ac:	b0 93 29 01 	sts	0x0129, r27
	    if (new_message == 1)
     1b0:	80 91 1a 01 	lds	r24, 0x011A
     1b4:	90 91 1b 01 	lds	r25, 0x011B
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	39 f0       	breq	.+14     	; 0x1ca <loop+0x8a>
		        set_color(RGB(0, 0, 1));
		        set_motion(RIGHT);
                    }
	    }
       
        mini_distance = 500;
     1bc:	84 ef       	ldi	r24, 0xF4	; 244
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	90 93 25 01 	sts	0x0125, r25
     1c4:	80 93 24 01 	sts	0x0124, r24
     1c8:	08 95       	ret
    if (kilo_ticks > (last_update+32)){

        last_update = kilo_ticks;
	    if (new_message == 1)
	    {
		new_message = 0;
     1ca:	10 92 1b 01 	sts	0x011B, r1
     1ce:	10 92 1a 01 	sts	0x011A, r1
		
		
		    if (mini_distance > DESIRED_DISTANCE)
     1d2:	23 33       	cpi	r18, 0x33	; 51
     1d4:	31 05       	cpc	r19, r1
     1d6:	0c f4       	brge	.+2      	; 0x1da <loop+0x9a>
     1d8:	4a c0       	rjmp	.+148    	; 0x26e <loop+0x12e>
		    {
		        set_color(RGB(1, 0, 0));
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 87 08 	call	0x110e	; 0x110e <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1e0:	80 91 1c 01 	lds	r24, 0x011C
     1e4:	90 91 1d 01 	lds	r25, 0x011D
     1e8:	02 97       	sbiw	r24, 0x02	; 2
     1ea:	41 f3       	breq	.-48     	; 0x1bc <loop+0x7c>
    {
        current_motion = new_motion;
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	90 93 1d 01 	sts	0x011D, r25
     1f4:	80 93 1c 01 	sts	0x011C, r24
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            //spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     1f8:	60 91 86 01 	lds	r22, 0x0186
     1fc:	80 91 85 01 	lds	r24, 0x0185
     200:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     204:	84 ef       	ldi	r24, 0xF4	; 244
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(kilo_turn_left, 0);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	80 91 87 01 	lds	r24, 0x0187
     212:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     216:	88 ee       	ldi	r24, 0xE8	; 232
     218:	93 e0       	ldi	r25, 0x03	; 3
     21a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            spinup_motors();
     21e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     222:	60 91 86 01 	lds	r22, 0x0186
     226:	80 91 85 01 	lds	r24, 0x0185
     22a:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     22e:	88 ee       	ldi	r24, 0xE8	; 232
     230:	93 e0       	ldi	r25, 0x03	; 3
     232:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(0, kilo_turn_right);
     236:	60 91 73 01 	lds	r22, 0x0173
     23a:	80 e0       	ldi	r24, 0x00	; 0
            set_motors(0, kilo_turn_right);
            delay(1000);
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            delay(1000);
            set_motors(kilo_turn_left, 0);
     23c:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     240:	84 ef       	ldi	r24, 0xF4	; 244
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            spinup_motors();
     248:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     24c:	60 91 86 01 	lds	r22, 0x0186
     250:	80 91 85 01 	lds	r24, 0x0185
     254:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     258:	84 ef       	ldi	r24, 0xF4	; 244
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
		        set_color(RGB(0, 0, 1));
		        set_motion(RIGHT);
                    }
	    }
       
        mini_distance = 500;
     260:	84 ef       	ldi	r24, 0xF4	; 244
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	90 93 25 01 	sts	0x0125, r25
     268:	80 93 24 01 	sts	0x0124, r24
     26c:	ad cf       	rjmp	.-166    	; 0x1c8 <loop+0x88>
		        set_color(RGB(0, 0, 1));
		        set_motion(RIGHT);
                    }*/
		    else
		    {
		        set_color(RGB(0, 0, 1));
     26e:	80 e1       	ldi	r24, 0x10	; 16
     270:	0e 94 87 08 	call	0x110e	; 0x110e <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     274:	80 91 1c 01 	lds	r24, 0x011C
     278:	90 91 1d 01 	lds	r25, 0x011D
     27c:	03 97       	sbiw	r24, 0x03	; 3
     27e:	09 f4       	brne	.+2      	; 0x282 <loop+0x142>
     280:	9d cf       	rjmp	.-198    	; 0x1bc <loop+0x7c>
    {
        current_motion = new_motion;
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	90 93 1d 01 	sts	0x011D, r25
     28a:	80 93 1c 01 	sts	0x011C, r24
            delay(500);
        }
        else if (current_motion == RIGHT)
        {
            //spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     28e:	60 91 86 01 	lds	r22, 0x0186
     292:	80 91 85 01 	lds	r24, 0x0185
     296:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     29a:	84 ef       	ldi	r24, 0xF4	; 244
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(0, kilo_turn_right);
     2a2:	60 91 73 01 	lds	r22, 0x0173
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     2ac:	88 ee       	ldi	r24, 0xE8	; 232
     2ae:	93 e0       	ldi	r25, 0x03	; 3
     2b0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            spinup_motors();
     2b4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2b8:	60 91 86 01 	lds	r22, 0x0186
     2bc:	80 91 85 01 	lds	r24, 0x0185
     2c0:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     2c4:	88 ee       	ldi	r24, 0xE8	; 232
     2c6:	93 e0       	ldi	r25, 0x03	; 3
     2c8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(kilo_turn_left, 0);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 91 87 01 	lds	r24, 0x0187
     2d2:	b4 cf       	rjmp	.-152    	; 0x23c <loop+0xfc>

000002d4 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     2d4:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     2d6:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     2d8:	8c e0       	ldi	r24, 0x0C	; 12
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	90 93 c5 00 	sts	0x00C5, r25
     2e0:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     2e4:	e0 ec       	ldi	r30, 0xC0	; 192
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	8d 7f       	andi	r24, 0xFD	; 253
     2ec:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     2ee:	e2 ec       	ldi	r30, 0xC2	; 194
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	86 60       	ori	r24, 0x06	; 6
     2f6:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     2f8:	e1 ec       	ldi	r30, 0xC1	; 193
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	88 60       	ori	r24, 0x08	; 8
     300:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	90 93 8b 01 	sts	0x018B, r25
     30a:	80 93 8a 01 	sts	0x018A, r24
    sei();
     30e:	78 94       	sei
     310:	08 95       	ret

00000312 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     312:	20 91 1c 01 	lds	r18, 0x011C
     316:	30 91 1d 01 	lds	r19, 0x011D
     31a:	28 17       	cp	r18, r24
     31c:	39 07       	cpc	r19, r25
     31e:	81 f0       	breq	.+32     	; 0x340 <set_motion+0x2e>
    {
        current_motion = new_motion;
     320:	90 93 1d 01 	sts	0x011D, r25
     324:	80 93 1c 01 	sts	0x011C, r24
        
        if (current_motion == STOP)
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	f9 f1       	breq	.+126    	; 0x3aa <set_motion+0x98>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	91 05       	cpc	r25, r1
     330:	09 f4       	brne	.+2      	; 0x334 <set_motion+0x22>
     332:	3f c0       	rjmp	.+126    	; 0x3b2 <set_motion+0xa0>
        {
            //spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     334:	82 30       	cpi	r24, 0x02	; 2
     336:	91 05       	cpc	r25, r1
     338:	09 f4       	brne	.+2      	; 0x33c <set_motion+0x2a>
     33a:	41 c0       	rjmp	.+130    	; 0x3be <set_motion+0xac>
            delay(500);
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            delay(500);
        }
        else if (current_motion == RIGHT)
     33c:	03 97       	sbiw	r24, 0x03	; 3
     33e:	09 f0       	breq	.+2      	; 0x342 <set_motion+0x30>
     340:	08 95       	ret
        {
            //spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     342:	60 91 86 01 	lds	r22, 0x0186
     346:	80 91 85 01 	lds	r24, 0x0185
     34a:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     34e:	84 ef       	ldi	r24, 0xF4	; 244
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(0, kilo_turn_right);
     356:	60 91 73 01 	lds	r22, 0x0173
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     360:	88 ee       	ldi	r24, 0xE8	; 232
     362:	93 e0       	ldi	r25, 0x03	; 3
     364:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            spinup_motors();
     368:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     36c:	60 91 86 01 	lds	r22, 0x0186
     370:	80 91 85 01 	lds	r24, 0x0185
     374:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     378:	88 ee       	ldi	r24, 0xE8	; 232
     37a:	93 e0       	ldi	r25, 0x03	; 3
     37c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(kilo_turn_left, 0);
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	80 91 87 01 	lds	r24, 0x0187
     386:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     38a:	84 ef       	ldi	r24, 0xF4	; 244
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            spinup_motors();
     392:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     396:	60 91 86 01 	lds	r22, 0x0186
     39a:	80 91 85 01 	lds	r24, 0x0185
     39e:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     3a2:	84 ef       	ldi	r24, 0xF4	; 244
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <delay>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            //spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     3b2:	60 91 86 01 	lds	r22, 0x0186
     3b6:	80 91 85 01 	lds	r24, 0x0185
     3ba:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <set_motors>
        }
        else if (current_motion == LEFT)
        {
            //spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     3be:	60 91 86 01 	lds	r22, 0x0186
     3c2:	80 91 85 01 	lds	r24, 0x0185
     3c6:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(500);
     3ca:	84 ef       	ldi	r24, 0xF4	; 244
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(kilo_turn_left, 0);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	80 91 87 01 	lds	r24, 0x0187
     3d8:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     3dc:	88 ee       	ldi	r24, 0xE8	; 232
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            spinup_motors();
     3e4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     3e8:	60 91 86 01 	lds	r22, 0x0186
     3ec:	80 91 85 01 	lds	r24, 0x0185
     3f0:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_motors>
            delay(1000);
     3f4:	88 ee       	ldi	r24, 0xE8	; 232
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <delay>
            set_motors(0, kilo_turn_right);
     3fc:	60 91 73 01 	lds	r22, 0x0173
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	c1 cf       	rjmp	.-126    	; 0x386 <set_motion+0x74>

00000404 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     404:	08 95       	ret

00000406 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	08 95       	ret

0000040c <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     40c:	08 95       	ret

0000040e <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
    cli();
     41c:	f8 94       	cli

    ports_off();
     41e:	14 b8       	out	0x04, r1	; 4
     420:	17 b8       	out	0x07, r1	; 7
     422:	1a b8       	out	0x0a, r1	; 10
     424:	15 b8       	out	0x05, r1	; 5
     426:	18 b8       	out	0x08, r1	; 8
     428:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     42a:	52 9a       	sbi	0x0a, 2	; 10
     42c:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     42e:	14 bc       	out	0x24, r1	; 36
     430:	85 e0       	ldi	r24, 0x05	; 5
     432:	85 bd       	out	0x25, r24	; 37
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	87 bd       	out	0x27, r24	; 39
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     43e:	10 92 80 00 	sts	0x0080, r1
     442:	10 92 81 00 	sts	0x0081, r1
     446:	2f e8       	ldi	r18, 0x8F	; 143
     448:	3b e0       	ldi	r19, 0x0B	; 11
     44a:	30 93 89 00 	sts	0x0089, r19
     44e:	20 93 88 00 	sts	0x0088, r18
     452:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     456:	53 98       	cbi	0x0a, 3	; 10
     458:	23 98       	cbi	0x04, 3	; 4
     45a:	91 ea       	ldi	r25, 0xA1	; 161
     45c:	90 93 b0 00 	sts	0x00B0, r25
     460:	80 93 b1 00 	sts	0x00B1, r24
     464:	10 92 b4 00 	sts	0x00B4, r1
     468:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     46c:	8b e0       	ldi	r24, 0x0B	; 11
     46e:	80 bf       	out	0x30, r24	; 48
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     476:	86 e0       	ldi	r24, 0x06	; 6
     478:	80 93 7c 00 	sts	0x007C, r24
     47c:	83 e8       	ldi	r24, 0x83	; 131
     47e:	80 93 7a 00 	sts	0x007A, r24
     482:	80 91 7a 00 	lds	r24, 0x007A
     486:	80 64       	ori	r24, 0x40	; 64
     488:	80 93 7a 00 	sts	0x007A, r24
     48c:	80 91 7a 00 	lds	r24, 0x007A
     490:	86 fd       	sbrc	r24, 6
     492:	fc cf       	rjmp	.-8      	; 0x48c <kilo_init+0x7e>
    adc_trigger_high_gain();
     494:	10 92 7c 00 	sts	0x007C, r1
     498:	83 ea       	ldi	r24, 0xA3	; 163
     49a:	80 93 7a 00 	sts	0x007A, r24
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
    if (osccal != 0xFF)
     4ac:	8f 3f       	cpi	r24, 0xFF	; 255
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <kilo_init+0xa6>
        OSCCAL = osccal;
     4b0:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     4b4:	10 92 51 01 	sts	0x0151, r1
    rx_leadingbit = 1;
     4b8:	c1 e0       	ldi	r28, 0x01	; 1
     4ba:	c0 93 2a 01 	sts	0x012A, r28
    rx_leadingbyte = 1;
     4be:	c0 93 6e 01 	sts	0x016E, r28
    rx_byteindex = 0;
     4c2:	10 92 48 01 	sts	0x0148, r1
    rx_bytevalue = 0;
     4c6:	10 92 82 01 	sts	0x0182, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     4ca:	80 e9       	ldi	r24, 0x90	; 144
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     4d2:	80 93 47 01 	sts	0x0147, r24
    if (tx_mask & ~TX_MASK_MAX)
     4d6:	80 91 47 01 	lds	r24, 0x0147
     4da:	88 73       	andi	r24, 0x38	; 56
     4dc:	11 f0       	breq	.+4      	; 0x4e2 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     4de:	c0 93 47 01 	sts	0x0147, r28
    tx_clock = 0;
     4e2:	10 92 72 01 	sts	0x0172, r1
     4e6:	10 92 71 01 	sts	0x0171, r1
    tx_increment = 255;
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	90 93 70 01 	sts	0x0170, r25
     4f2:	80 93 6f 01 	sts	0x016F, r24
    kilo_ticks = 0;
     4f6:	10 92 4d 01 	sts	0x014D, r1
     4fa:	10 92 4e 01 	sts	0x014E, r1
     4fe:	10 92 4f 01 	sts	0x014F, r1
     502:	10 92 50 01 	sts	0x0150, r1
    kilo_state = IDLE;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 21 01 	sts	0x0121, r24
    kilo_tx_period = 3906;
     50c:	82 e4       	ldi	r24, 0x42	; 66
     50e:	9f e0       	ldi	r25, 0x0F	; 15
     510:	90 93 81 01 	sts	0x0181, r25
     514:	80 93 80 01 	sts	0x0180, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     518:	80 eb       	ldi	r24, 0xB0	; 176
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     520:	c8 2f       	mov	r28, r24
     522:	81 eb       	ldi	r24, 0xB1	; 177
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     52a:	2c 2f       	mov	r18, r28
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	38 2b       	or	r19, r24
     530:	30 93 84 01 	sts	0x0184, r19
     534:	20 93 83 01 	sts	0x0183, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     538:	85 e0       	ldi	r24, 0x05	; 5
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     540:	80 93 87 01 	sts	0x0187, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     544:	89 e0       	ldi	r24, 0x09	; 9
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     54c:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     550:	8c e0       	ldi	r24, 0x0C	; 12
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     558:	80 93 85 01 	sts	0x0185, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     55c:	84 e1       	ldi	r24, 0x14	; 20
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     564:	80 93 86 01 	sts	0x0186, r24
     568:	52 e5       	ldi	r21, 0x52	; 82
     56a:	e5 2e       	mov	r14, r21
     56c:	51 e0       	ldi	r21, 0x01	; 1
     56e:	f5 2e       	mov	r15, r21
     570:	0b e2       	ldi	r16, 0x2B	; 43
     572:	11 e0       	ldi	r17, 0x01	; 1
     574:	c0 e2       	ldi	r28, 0x20	; 32
     576:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     578:	ce 01       	movw	r24, r28
     57a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     57e:	d8 2e       	mov	r13, r24
     580:	ce 01       	movw	r24, r28
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     588:	2d 2d       	mov	r18, r13
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	32 2f       	mov	r19, r18
     58e:	22 27       	eor	r18, r18
     590:	28 2b       	or	r18, r24
     592:	f7 01       	movw	r30, r14
     594:	21 93       	st	Z+, r18
     596:	31 93       	st	Z+, r19
     598:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     59a:	ce 01       	movw	r24, r28
     59c:	c0 96       	adiw	r24, 0x30	; 48
     59e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     5a2:	d8 2e       	mov	r13, r24
     5a4:	ce 01       	movw	r24, r28
     5a6:	c1 96       	adiw	r24, 0x31	; 49
     5a8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     5ac:	2d 2d       	mov	r18, r13
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	32 2f       	mov	r19, r18
     5b2:	22 27       	eor	r18, r18
     5b4:	28 2b       	or	r18, r24
     5b6:	f8 01       	movw	r30, r16
     5b8:	21 93       	st	Z+, r18
     5ba:	31 93       	st	Z+, r19
     5bc:	8f 01       	movw	r16, r30
     5be:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5c0:	cc 33       	cpi	r28, 0x3C	; 60
     5c2:	d1 05       	cpc	r29, r1
     5c4:	c9 f6       	brne	.-78     	; 0x578 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     5c6:	78 94       	sei
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	08 95       	ret

000005d8 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	8f 93       	push	r24
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	a8 95       	wdr
     5ea:	80 91 60 00 	lds	r24, 0x0060
     5ee:	88 61       	ori	r24, 0x18	; 24
     5f0:	80 93 60 00 	sts	0x0060, r24
     5f4:	10 92 60 00 	sts	0x0060, r1
     5f8:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5fa:	8f 91       	pop	r24
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     606:	3c 01       	movw	r6, r24
     608:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     60a:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     60c:	99 24       	eor	r9, r9
     60e:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     614:	96 e0       	ldi	r25, 0x06	; 6
     616:	a9 2e       	mov	r10, r25
     618:	23 e8       	ldi	r18, 0x83	; 131
     61a:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     61c:	38 e1       	ldi	r19, 0x18	; 24
     61e:	d3 2e       	mov	r13, r19
     620:	49 e2       	ldi	r20, 0x29	; 41
     622:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     624:	90 91 21 01 	lds	r25, 0x0121
     628:	e9 2f       	mov	r30, r25
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	e7 30       	cpi	r30, 0x07	; 7
     62e:	f1 05       	cpc	r31, r1
     630:	c8 f7       	brcc	.-14     	; 0x624 <kilo_start+0x1e>
     632:	ec 5c       	subi	r30, 0xCC	; 204
     634:	ff 4f       	sbci	r31, 0xFF	; 255
     636:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     63a:	11 23       	and	r17, r17
     63c:	09 f4       	brne	.+2      	; 0x640 <kilo_start+0x3a>
     63e:	fc c0       	rjmp	.+504    	; 0x838 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     640:	c0 92 21 01 	sts	0x0121, r12
     644:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     646:	fe 01       	movw	r30, r28
     648:	09 95       	icall
                break;
     64a:	ec cf       	rjmp	.-40     	; 0x624 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     64c:	80 91 51 01 	lds	r24, 0x0151
     650:	81 11       	cpse	r24, r1
     652:	eb c0       	rjmp	.+470    	; 0x82a <kilo_start+0x224>
        cli();                                    // disable interrupts
     654:	f8 94       	cli
        adc_setup_conversion(6);
     656:	a0 92 7c 00 	sts	0x007C, r10
     65a:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     65e:	80 91 7a 00 	lds	r24, 0x007A
     662:	80 64       	ori	r24, 0x40	; 64
     664:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     668:	90 91 7a 00 	lds	r25, 0x007A
     66c:	96 fd       	sbrc	r25, 6
     66e:	fc cf       	rjmp	.-8      	; 0x668 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     670:	80 91 78 00 	lds	r24, 0x0078
     674:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     678:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     67a:	8b 3a       	cpi	r24, 0xAB	; 171
     67c:	e2 e0       	ldi	r30, 0x02	; 2
     67e:	9e 07       	cpc	r25, r30
     680:	0c f0       	brlt	.+2      	; 0x684 <kilo_start+0x7e>
     682:	ed c0       	rjmp	.+474    	; 0x85e <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     684:	89 38       	cpi	r24, 0x89	; 137
     686:	f2 e0       	ldi	r31, 0x02	; 2
     688:	9f 07       	cpc	r25, r31
     68a:	0c f0       	brlt	.+2      	; 0x68e <kilo_start+0x88>
     68c:	ef c0       	rjmp	.+478    	; 0x86c <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     68e:	87 36       	cpi	r24, 0x67	; 103
     690:	92 40       	sbci	r25, 0x02	; 2
     692:	0c f4       	brge	.+2      	; 0x696 <kilo_start+0x90>
     694:	ca c0       	rjmp	.+404    	; 0x82a <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     696:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     698:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     69a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     69c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     69e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6a0:	3c 98       	cbi	0x07, 4	; 7
     6a2:	c0 cf       	rjmp	.-128    	; 0x624 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     6a4:	f8 94       	cli
                acomp_off();
     6a6:	80 b7       	in	r24, 0x30	; 48
     6a8:	87 7f       	andi	r24, 0xF7	; 247
     6aa:	80 bf       	out	0x30, r24	; 48
                adc_off();
     6ac:	80 91 7a 00 	lds	r24, 0x007A
     6b0:	8f 77       	andi	r24, 0x7F	; 127
     6b2:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     6b6:	14 b8       	out	0x04, r1	; 4
     6b8:	17 b8       	out	0x07, r1	; 7
     6ba:	1a b8       	out	0x0a, r1	; 10
     6bc:	15 b8       	out	0x05, r1	; 5
     6be:	18 b8       	out	0x08, r1	; 8
     6c0:	1b b8       	out	0x0b, r1	; 11
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	a8 95       	wdr
     6c8:	d0 92 60 00 	sts	0x0060, r13
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     6d2:	80 91 60 00 	lds	r24, 0x0060
     6d6:	80 64       	ori	r24, 0x40	; 64
     6d8:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     6dc:	93 b7       	in	r25, 0x33	; 51
     6de:	91 7f       	andi	r25, 0xF1	; 241
     6e0:	94 60       	ori	r25, 0x04	; 4
     6e2:	93 bf       	out	0x33, r25	; 51
                cli();
     6e4:	f8 94       	cli
                sleep_enable();
     6e6:	83 b7       	in	r24, 0x33	; 51
     6e8:	81 60       	ori	r24, 0x01	; 1
     6ea:	83 bf       	out	0x33, r24	; 51
                sei();
     6ec:	78 94       	sei
                sleep_cpu();
     6ee:	88 95       	sleep
                sleep_disable();
     6f0:	83 b7       	in	r24, 0x33	; 51
     6f2:	8e 7f       	andi	r24, 0xFE	; 254
     6f4:	83 bf       	out	0x33, r24	; 51
                sei();
     6f6:	78 94       	sei
                rx_busy = 0;
     6f8:	10 92 51 01 	sts	0x0151, r1
                ports_on();
     6fc:	52 9a       	sbi	0x0a, 2	; 10
     6fe:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     700:	80 91 7a 00 	lds	r24, 0x007A
     704:	80 68       	ori	r24, 0x80	; 128
     706:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	87 e5       	ldi	r24, 0x57	; 87
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <kilo_start+0x108>
     712:	00 c0       	rjmp	.+0      	; 0x714 <kilo_start+0x10e>
     714:	00 00       	nop
                _delay_us(300);
                acomp_on();
     716:	80 b7       	in	r24, 0x30	; 48
     718:	88 61       	ori	r24, 0x18	; 24
     71a:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     71c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     71e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     720:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     722:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     724:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     726:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     728:	ef e1       	ldi	r30, 0x1F	; 31
     72a:	fe e4       	ldi	r31, 0x4E	; 78
     72c:	31 97       	sbiw	r30, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <kilo_start+0x126>
     730:	00 c0       	rjmp	.+0      	; 0x732 <kilo_start+0x12c>
     732:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     734:	80 91 51 01 	lds	r24, 0x0151
     738:	81 11       	cpse	r24, r1
     73a:	81 c0       	rjmp	.+258    	; 0x83e <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     73c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     73e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     740:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     742:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     744:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     746:	3c 98       	cbi	0x07, 4	; 7
     748:	6d cf       	rjmp	.-294    	; 0x624 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     74a:	80 91 1f 01 	lds	r24, 0x011F
     74e:	81 11       	cpse	r24, r1
     750:	41 c0       	rjmp	.+130    	; 0x7d4 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     752:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     756:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     75a:	10 92 20 01 	sts	0x0120, r1
     75e:	62 cf       	rjmp	.-316    	; 0x624 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     760:	48 99       	sbic	0x09, 0	; 9
     762:	ec cf       	rjmp	.-40     	; 0x73c <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     764:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     766:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     768:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     76a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     76c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     76e:	3c 98       	cbi	0x07, 4	; 7
     770:	8f ec       	ldi	r24, 0xCF	; 207
     772:	97 e0       	ldi	r25, 0x07	; 7
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <kilo_start+0x16e>
     778:	00 c0       	rjmp	.+0      	; 0x77a <kilo_start+0x174>
     77a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     77c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     77e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     780:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     782:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     784:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     786:	3c 98       	cbi	0x07, 4	; 7
     788:	9f ef       	ldi	r25, 0xFF	; 255
     78a:	e1 ee       	ldi	r30, 0xE1	; 225
     78c:	f4 e0       	ldi	r31, 0x04	; 4
     78e:	91 50       	subi	r25, 0x01	; 1
     790:	e0 40       	sbci	r30, 0x00	; 0
     792:	f0 40       	sbci	r31, 0x00	; 0
     794:	e1 f7       	brne	.-8      	; 0x78e <kilo_start+0x188>
     796:	00 c0       	rjmp	.+0      	; 0x798 <kilo_start+0x192>
     798:	00 00       	nop
     79a:	44 cf       	rjmp	.-376    	; 0x624 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     79c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     79e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7a0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7a2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7a4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7a6:	3c 98       	cbi	0x07, 4	; 7
     7a8:	ef ec       	ldi	r30, 0xCF	; 207
     7aa:	f7 e0       	ldi	r31, 0x07	; 7
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <kilo_start+0x1a6>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <kilo_start+0x1ac>
     7b2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7b4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7b6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7b8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7ba:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7bc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7be:	3c 98       	cbi	0x07, 4	; 7
     7c0:	ff ef       	ldi	r31, 0xFF	; 255
     7c2:	21 ee       	ldi	r18, 0xE1	; 225
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	f1 50       	subi	r31, 0x01	; 1
     7c8:	20 40       	sbci	r18, 0x00	; 0
     7ca:	80 40       	sbci	r24, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <kilo_start+0x1c0>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <kilo_start+0x1ca>
     7d0:	00 00       	nop
     7d2:	28 cf       	rjmp	.-432    	; 0x624 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     7d4:	90 91 1f 01 	lds	r25, 0x011F
     7d8:	80 91 20 01 	lds	r24, 0x0120
     7dc:	98 17       	cp	r25, r24
     7de:	09 f4       	brne	.+2      	; 0x7e2 <kilo_start+0x1dc>
     7e0:	21 cf       	rjmp	.-446    	; 0x624 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     7e2:	80 91 1f 01 	lds	r24, 0x011F
     7e6:	80 93 20 01 	sts	0x0120, r24
                        if (cur_motion == MOVE_LEFT) {
     7ea:	80 91 1f 01 	lds	r24, 0x011F
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <kilo_start+0x1ee>
     7f2:	50 c0       	rjmp	.+160    	; 0x894 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7f4:	80 91 1f 01 	lds	r24, 0x011F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7f8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7fc:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	d9 f1       	breq	.+118    	; 0x87a <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     804:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     808:	90 92 b4 00 	sts	0x00B4, r9
     80c:	8f e2       	ldi	r24, 0x2F	; 47
     80e:	95 e7       	ldi	r25, 0x75	; 117
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <kilo_start+0x20a>
     814:	00 c0       	rjmp	.+0      	; 0x816 <kilo_start+0x210>
     816:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     818:	80 91 86 01 	lds	r24, 0x0186
     81c:	90 91 85 01 	lds	r25, 0x0185
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     820:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     824:	80 93 b4 00 	sts	0x00B4, r24
     828:	fd ce       	rjmp	.-518    	; 0x624 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     82a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     82c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     82e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     830:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     832:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     834:	3c 98       	cbi	0x07, 4	; 7
     836:	f6 ce       	rjmp	.-532    	; 0x624 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     838:	f3 01       	movw	r30, r6
     83a:	09 95       	icall
     83c:	01 cf       	rjmp	.-510    	; 0x640 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     83e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     840:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     842:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     844:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     846:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     848:	3c 98       	cbi	0x07, 4	; 7
     84a:	ff ef       	ldi	r31, 0xFF	; 255
     84c:	20 e7       	ldi	r18, 0x70	; 112
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	f1 50       	subi	r31, 0x01	; 1
     852:	20 40       	sbci	r18, 0x00	; 0
     854:	80 40       	sbci	r24, 0x00	; 0
     856:	e1 f7       	brne	.-8      	; 0x850 <kilo_start+0x24a>
     858:	00 c0       	rjmp	.+0      	; 0x85a <kilo_start+0x254>
     85a:	00 00       	nop
     85c:	6f cf       	rjmp	.-290    	; 0x73c <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     85e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     860:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     862:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     864:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     866:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     868:	3c 98       	cbi	0x07, 4	; 7
     86a:	dc ce       	rjmp	.-584    	; 0x624 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     86c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     86e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     870:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     872:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     874:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     876:	3c 9a       	sbi	0x07, 4	; 7
     878:	d5 ce       	rjmp	.-598    	; 0x624 <kilo_start+0x1e>
     87a:	ef e2       	ldi	r30, 0x2F	; 47
     87c:	f5 e7       	ldi	r31, 0x75	; 117
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <kilo_start+0x278>
     882:	00 c0       	rjmp	.+0      	; 0x884 <kilo_start+0x27e>
     884:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     886:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     88a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     88e:	80 93 b4 00 	sts	0x00B4, r24
     892:	c8 ce       	rjmp	.-624    	; 0x624 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     894:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     898:	10 92 b4 00 	sts	0x00B4, r1
     89c:	8f e2       	ldi	r24, 0x2F	; 47
     89e:	95 e7       	ldi	r25, 0x75	; 117
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <kilo_start+0x29a>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <kilo_start+0x2a0>
     8a6:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     8a8:	80 91 87 01 	lds	r24, 0x0187
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8ac:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8b0:	10 92 b4 00 	sts	0x00B4, r1
     8b4:	b7 ce       	rjmp	.-658    	; 0x624 <kilo_start+0x1e>

000008b6 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <delay+0x10>
     8b8:	ef ec       	ldi	r30, 0xCF	; 207
     8ba:	f7 e0       	ldi	r31, 0x07	; 7
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <delay+0x6>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <delay+0xc>
     8c2:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     8c4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	b9 f7       	brne	.-18     	; 0x8b8 <delay+0x2>
     8ca:	08 95       	ret

000008cc <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8cc:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8d0:	60 93 b4 00 	sts	0x00B4, r22
     8d4:	08 95       	ret

000008d6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8dc:	80 93 b4 00 	sts	0x00B4, r24
     8e0:	8f e0       	ldi	r24, 0x0F	; 15
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	ef ec       	ldi	r30, 0xCF	; 207
     8e6:	f7 e0       	ldi	r31, 0x07	; 7
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <spinup_motors+0x12>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <spinup_motors+0x18>
     8ee:	00 00       	nop
     8f0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8f2:	c1 f7       	brne	.-16     	; 0x8e4 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     8f4:	08 95       	ret

000008f6 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     8f6:	80 91 51 01 	lds	r24, 0x0151
     8fa:	81 11       	cpse	r24, r1
     8fc:	1e c0       	rjmp	.+60     	; 0x93a <__stack+0x3b>
        cli();
     8fe:	f8 94       	cli
        adc_setup_conversion(7);
     900:	87 e0       	ldi	r24, 0x07	; 7
     902:	80 93 7c 00 	sts	0x007C, r24
     906:	83 e8       	ldi	r24, 0x83	; 131
     908:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     90c:	80 91 7a 00 	lds	r24, 0x007A
     910:	80 64       	ori	r24, 0x40	; 64
     912:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     916:	80 91 7a 00 	lds	r24, 0x007A
     91a:	86 fd       	sbrc	r24, 6
     91c:	fc cf       	rjmp	.-8      	; 0x916 <__stack+0x17>
        light = ADCW;                             // store AD result
     91e:	80 91 78 00 	lds	r24, 0x0078
     922:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     926:	10 92 7c 00 	sts	0x007C, r1
     92a:	23 ea       	ldi	r18, 0xA3	; 163
     92c:	20 93 7a 00 	sts	0x007A, r18
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     936:	78 94       	sei
     938:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     93e:	08 95       	ret

00000940 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     940:	80 91 51 01 	lds	r24, 0x0151
     944:	81 11       	cpse	r24, r1
     946:	1e c0       	rjmp	.+60     	; 0x984 <get_temperature+0x44>
        cli();
     948:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     94a:	88 ec       	ldi	r24, 0xC8	; 200
     94c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     950:	87 e8       	ldi	r24, 0x87	; 135
     952:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     956:	80 91 7a 00 	lds	r24, 0x007A
     95a:	80 64       	ori	r24, 0x40	; 64
     95c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     960:	80 91 7a 00 	lds	r24, 0x007A
     964:	86 fd       	sbrc	r24, 6
     966:	fc cf       	rjmp	.-8      	; 0x960 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     968:	80 91 78 00 	lds	r24, 0x0078
     96c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     970:	10 92 7c 00 	sts	0x007C, r1
     974:	23 ea       	ldi	r18, 0xA3	; 163
     976:	20 93 7a 00 	sts	0x007A, r18
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     980:	78 94       	sei
     982:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     988:	08 95       	ret

0000098a <rand_hard>:

uint8_t rand_hard() {
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	e0 e0       	ldi	r30, 0x00	; 0
     994:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     996:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     998:	03 ea       	ldi	r16, 0xA3	; 163
     99a:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     99c:	d6 e0       	ldi	r29, 0x06	; 6
     99e:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     9a0:	a1 e0       	ldi	r26, 0x01	; 1
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     9a4:	60 e8       	ldi	r22, 0x80	; 128
     9a6:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     9a8:	f8 94       	cli
            adc_setup_conversion(6);
     9aa:	d0 93 7c 00 	sts	0x007C, r29
     9ae:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     9b2:	90 91 7a 00 	lds	r25, 0x007A
     9b6:	90 64       	ori	r25, 0x40	; 64
     9b8:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9bc:	90 91 7a 00 	lds	r25, 0x007A
     9c0:	96 fd       	sbrc	r25, 6
     9c2:	fc cf       	rjmp	.-8      	; 0x9bc <rand_hard+0x32>
            a = ADCW&0x1;
     9c4:	20 91 78 00 	lds	r18, 0x0078
     9c8:	30 91 79 00 	lds	r19, 0x0079
     9cc:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     9ce:	90 91 7a 00 	lds	r25, 0x007A
     9d2:	90 64       	ori	r25, 0x40	; 64
     9d4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9d8:	90 91 7a 00 	lds	r25, 0x007A
     9dc:	96 fd       	sbrc	r25, 6
     9de:	fc cf       	rjmp	.-8      	; 0x9d8 <rand_hard+0x4e>
            b = ADCW&0x1;
     9e0:	40 91 78 00 	lds	r20, 0x0078
     9e4:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     9e8:	10 92 7c 00 	sts	0x007C, r1
     9ec:	00 93 7a 00 	sts	0x007A, r16
     9f0:	10 93 7b 00 	sts	0x007B, r17
            sei();
     9f4:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     9f6:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     9f8:	24 13       	cpse	r18, r20
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <rand_hard+0x78>
     9fc:	61 50       	subi	r22, 0x01	; 1
     9fe:	71 09       	sbc	r23, r1
     a00:	99 f6       	brne	.-90     	; 0x9a8 <rand_hard+0x1e>
        if (a)
     a02:	22 23       	and	r18, r18
     a04:	39 f0       	breq	.+14     	; 0xa14 <rand_hard+0x8a>
            num |= (1<<i);
     a06:	9d 01       	movw	r18, r26
     a08:	0e 2e       	mov	r0, r30
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <rand_hard+0x84>
     a0c:	22 0f       	add	r18, r18
     a0e:	0a 94       	dec	r0
     a10:	ea f7       	brpl	.-6      	; 0xa0c <rand_hard+0x82>
     a12:	82 2b       	or	r24, r18
     a14:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     a16:	e8 30       	cpi	r30, 0x08	; 8
     a18:	f1 05       	cpc	r31, r1
     a1a:	09 f0       	breq	.+2      	; 0xa1e <rand_hard+0x94>
     a1c:	c3 cf       	rjmp	.-122    	; 0x9a4 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a28:	80 91 0e 01 	lds	r24, 0x010E
     a2c:	98 2f       	mov	r25, r24
     a2e:	99 0f       	add	r25, r25
     a30:	99 0f       	add	r25, r25
     a32:	99 0f       	add	r25, r25
     a34:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a36:	90 91 1e 01 	lds	r25, 0x011E
     a3a:	21 e0       	ldi	r18, 0x01	; 1
     a3c:	29 0f       	add	r18, r25
     a3e:	20 93 1e 01 	sts	0x011E, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     a42:	28 2f       	mov	r18, r24
     a44:	22 95       	swap	r18
     a46:	26 95       	lsr	r18
     a48:	27 70       	andi	r18, 0x07	; 7
     a4a:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     a4c:	96 95       	lsr	r25
     a4e:	96 95       	lsr	r25
     a50:	89 27       	eor	r24, r25
     a52:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     a56:	08 95       	ret

00000a58 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a58:	80 93 0e 01 	sts	0x010E, r24
     a5c:	08 95       	ret

00000a5e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a5e:	80 91 51 01 	lds	r24, 0x0151
     a62:	81 11       	cpse	r24, r1
     a64:	16 c0       	rjmp	.+44     	; 0xa92 <get_voltage+0x34>
        cli();                                    // disable interrupts
     a66:	f8 94       	cli
        adc_setup_conversion(6);
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	80 93 7c 00 	sts	0x007C, r24
     a6e:	83 e8       	ldi	r24, 0x83	; 131
     a70:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a74:	80 91 7a 00 	lds	r24, 0x007A
     a78:	80 64       	ori	r24, 0x40	; 64
     a7a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a7e:	80 91 7a 00 	lds	r24, 0x007A
     a82:	86 fd       	sbrc	r24, 6
     a84:	fc cf       	rjmp	.-8      	; 0xa7e <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a86:	80 91 78 00 	lds	r24, 0x0078
     a8a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a8e:	78 94       	sei
     a90:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a96:	08 95       	ret

00000a98 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a98:	2f 92       	push	r2
     a9a:	3f 92       	push	r3
     a9c:	4f 92       	push	r4
     a9e:	5f 92       	push	r5
     aa0:	6f 92       	push	r6
     aa2:	7f 92       	push	r7
     aa4:	8f 92       	push	r8
     aa6:	9f 92       	push	r9
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	00 d0       	rcall	.+0      	; 0xabe <estimate_distance+0x26>
     abe:	00 d0       	rcall	.+0      	; 0xac0 <estimate_distance+0x28>
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <estimate_distance+0x2a>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     ac8:	dc 01       	movw	r26, r24
     aca:	12 96       	adiw	r26, 0x02	; 2
     acc:	0d 90       	ld	r0, X+
     ace:	bc 91       	ld	r27, X
     ad0:	a0 2d       	mov	r26, r0
     ad2:	be 83       	std	Y+6, r27	; 0x06
     ad4:	ad 83       	std	Y+5, r26	; 0x05
     ad6:	a4 38       	cpi	r26, 0x84	; 132
     ad8:	e3 e0       	ldi	r30, 0x03	; 3
     ada:	be 07       	cpc	r27, r30
     adc:	0c f0       	brlt	.+2      	; 0xae0 <estimate_distance+0x48>
     ade:	c9 c0       	rjmp	.+402    	; 0xc72 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     ae0:	80 91 2b 01 	lds	r24, 0x012B
     ae4:	90 91 2c 01 	lds	r25, 0x012C
     ae8:	8a 17       	cp	r24, r26
     aea:	9b 07       	cpc	r25, r27
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <estimate_distance+0x58>
     aee:	37 c1       	rjmp	.+622    	; 0xd5e <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     af0:	00 91 2d 01 	lds	r16, 0x012D
     af4:	10 91 2e 01 	lds	r17, 0x012E
     af8:	0a 17       	cp	r16, r26
     afa:	1b 07       	cpc	r17, r27
     afc:	08 f4       	brcc	.+2      	; 0xb00 <estimate_distance+0x68>
     afe:	2f c2       	rjmp	.+1118   	; 0xf5e <estimate_distance+0x4c6>
     b00:	00 91 2f 01 	lds	r16, 0x012F
     b04:	10 91 30 01 	lds	r17, 0x0130
     b08:	0a 17       	cp	r16, r26
     b0a:	1b 07       	cpc	r17, r27
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <estimate_distance+0x78>
     b0e:	2f c2       	rjmp	.+1118   	; 0xf6e <estimate_distance+0x4d6>
     b10:	00 91 31 01 	lds	r16, 0x0131
     b14:	10 91 32 01 	lds	r17, 0x0132
     b18:	0a 17       	cp	r16, r26
     b1a:	1b 07       	cpc	r17, r27
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <estimate_distance+0x88>
     b1e:	2f c2       	rjmp	.+1118   	; 0xf7e <estimate_distance+0x4e6>
     b20:	00 91 33 01 	lds	r16, 0x0133
     b24:	10 91 34 01 	lds	r17, 0x0134
     b28:	0a 17       	cp	r16, r26
     b2a:	1b 07       	cpc	r17, r27
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <estimate_distance+0x98>
     b2e:	2f c2       	rjmp	.+1118   	; 0xf8e <estimate_distance+0x4f6>
     b30:	00 91 35 01 	lds	r16, 0x0135
     b34:	10 91 36 01 	lds	r17, 0x0136
     b38:	0a 17       	cp	r16, r26
     b3a:	1b 07       	cpc	r17, r27
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <estimate_distance+0xa8>
     b3e:	ef c1       	rjmp	.+990    	; 0xf1e <estimate_distance+0x486>
     b40:	00 91 37 01 	lds	r16, 0x0137
     b44:	10 91 38 01 	lds	r17, 0x0138
     b48:	0a 17       	cp	r16, r26
     b4a:	1b 07       	cpc	r17, r27
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <estimate_distance+0xb8>
     b4e:	27 c2       	rjmp	.+1102   	; 0xf9e <estimate_distance+0x506>
     b50:	00 91 39 01 	lds	r16, 0x0139
     b54:	10 91 3a 01 	lds	r17, 0x013A
     b58:	0a 17       	cp	r16, r26
     b5a:	1b 07       	cpc	r17, r27
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <estimate_distance+0xc8>
     b5e:	27 c2       	rjmp	.+1102   	; 0xfae <estimate_distance+0x516>
     b60:	00 91 3b 01 	lds	r16, 0x013B
     b64:	10 91 3c 01 	lds	r17, 0x013C
     b68:	0a 17       	cp	r16, r26
     b6a:	1b 07       	cpc	r17, r27
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <estimate_distance+0xd8>
     b6e:	27 c2       	rjmp	.+1102   	; 0xfbe <estimate_distance+0x526>
     b70:	00 91 3d 01 	lds	r16, 0x013D
     b74:	10 91 3e 01 	lds	r17, 0x013E
     b78:	0a 17       	cp	r16, r26
     b7a:	1b 07       	cpc	r17, r27
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <estimate_distance+0xe8>
     b7e:	27 c2       	rjmp	.+1102   	; 0xfce <estimate_distance+0x536>
     b80:	00 91 3f 01 	lds	r16, 0x013F
     b84:	10 91 40 01 	lds	r17, 0x0140
     b88:	0a 17       	cp	r16, r26
     b8a:	1b 07       	cpc	r17, r27
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <estimate_distance+0xf8>
     b8e:	27 c2       	rjmp	.+1102   	; 0xfde <estimate_distance+0x546>
     b90:	00 91 41 01 	lds	r16, 0x0141
     b94:	10 91 42 01 	lds	r17, 0x0142
     b98:	0a 17       	cp	r16, r26
     b9a:	1b 07       	cpc	r17, r27
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <estimate_distance+0x108>
     b9e:	23 c2       	rjmp	.+1094   	; 0xfe6 <estimate_distance+0x54e>
     ba0:	00 91 43 01 	lds	r16, 0x0143
     ba4:	10 91 44 01 	lds	r17, 0x0144
     ba8:	0a 17       	cp	r16, r26
     baa:	1b 07       	cpc	r17, r27
     bac:	08 f4       	brcc	.+2      	; 0xbb0 <estimate_distance+0x118>
     bae:	23 c2       	rjmp	.+1094   	; 0xff6 <estimate_distance+0x55e>
     bb0:	00 91 45 01 	lds	r16, 0x0145
     bb4:	10 91 46 01 	lds	r17, 0x0146
     bb8:	0a 17       	cp	r16, r26
     bba:	1b 07       	cpc	r17, r27
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <estimate_distance+0x128>
     bbe:	23 c2       	rjmp	.+1094   	; 0x1006 <estimate_distance+0x56e>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	a0 ed       	ldi	r26, 0xD0	; 208
     bc6:	b0 e4       	ldi	r27, 0x40	; 64
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	ab 83       	std	Y+3, r26	; 0x03
     bce:	bc 83       	std	Y+4, r27	; 0x04
     bd0:	4c e0       	ldi	r20, 0x0C	; 12
     bd2:	e4 2e       	mov	r14, r20
     bd4:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bd6:	f7 01       	movw	r30, r14
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	e5 5d       	subi	r30, 0xD5	; 213
     bde:	fe 4f       	sbci	r31, 0xFE	; 254
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	b8 01       	movw	r22, r16
     be6:	68 1b       	sub	r22, r24
     be8:	79 0b       	sbc	r23, r25
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	0e 94 c7 0b 	call	0x178e	; 0x178e <__addsf3>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bfe:	ad 81       	ldd	r26, Y+5	; 0x05
     c00:	be 81       	ldd	r27, Y+6	; 0x06
     c02:	bd 01       	movw	r22, r26
     c04:	bb 0f       	add	r27, r27
     c06:	88 0b       	sbc	r24, r24
     c08:	99 0b       	sbc	r25, r25
     c0a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__floatsisf>
     c0e:	4b 01       	movw	r8, r22
     c10:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     c12:	b8 01       	movw	r22, r16
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     c1c:	2b 01       	movw	r4, r22
     c1e:	3c 01       	movw	r6, r24
     c20:	29 81       	ldd	r18, Y+1	; 0x01
     c22:	3a 81       	ldd	r19, Y+2	; 0x02
     c24:	4b 81       	ldd	r20, Y+3	; 0x03
     c26:	5c 81       	ldd	r21, Y+4	; 0x04
     c28:	c7 01       	movw	r24, r14
     c2a:	b6 01       	movw	r22, r12
     c2c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c3 01       	movw	r24, r6
     c36:	b2 01       	movw	r22, r4
     c38:	0e 94 c6 0b 	call	0x178c	; 0x178c <__subsf3>
     c3c:	9b 01       	movw	r18, r22
     c3e:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c40:	c5 01       	movw	r24, r10
     c42:	b4 01       	movw	r22, r8
     c44:	0e 94 c6 0b 	call	0x178c	; 0x178c <__subsf3>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e2       	ldi	r20, 0x20	; 32
     c4e:	51 e4       	ldi	r21, 0x41	; 65
     c50:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
            b=((int)((int)b/(int)slope));
     c54:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fixsfsi>
     c58:	8b 01       	movw	r16, r22
     c5a:	c7 01       	movw	r24, r14
     c5c:	b6 01       	movw	r22, r12
     c5e:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fixsfsi>
     c62:	ab 01       	movw	r20, r22
     c64:	bc 01       	movw	r22, r24
     c66:	c8 01       	movw	r24, r16
     c68:	ba 01       	movw	r22, r20
     c6a:	0e 94 89 0b 	call	0x1712	; 0x1712 <__divmodhi4>
            dist_high=b;
     c6e:	16 2f       	mov	r17, r22
     c70:	77 c0       	rjmp	.+238    	; 0xd60 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c72:	dc 01       	movw	r26, r24
     c74:	cd 90       	ld	r12, X+
     c76:	dc 90       	ld	r13, X
     c78:	80 91 52 01 	lds	r24, 0x0152
     c7c:	90 91 53 01 	lds	r25, 0x0153
     c80:	8c 15       	cp	r24, r12
     c82:	9d 05       	cpc	r25, r13
     c84:	08 f4       	brcc	.+2      	; 0xc88 <estimate_distance+0x1f0>
     c86:	8c c0       	rjmp	.+280    	; 0xda0 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c88:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c8a:	e0 90 54 01 	lds	r14, 0x0154
     c8e:	f0 90 55 01 	lds	r15, 0x0155
     c92:	ec 14       	cp	r14, r12
     c94:	fd 04       	cpc	r15, r13
     c96:	08 f4       	brcc	.+2      	; 0xc9a <estimate_distance+0x202>
     c98:	5e c1       	rjmp	.+700    	; 0xf56 <estimate_distance+0x4be>
     c9a:	e0 90 56 01 	lds	r14, 0x0156
     c9e:	f0 90 57 01 	lds	r15, 0x0157
     ca2:	ec 14       	cp	r14, r12
     ca4:	fd 04       	cpc	r15, r13
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <estimate_distance+0x212>
     ca8:	5e c1       	rjmp	.+700    	; 0xf66 <estimate_distance+0x4ce>
     caa:	e0 90 58 01 	lds	r14, 0x0158
     cae:	f0 90 59 01 	lds	r15, 0x0159
     cb2:	ec 14       	cp	r14, r12
     cb4:	fd 04       	cpc	r15, r13
     cb6:	08 f4       	brcc	.+2      	; 0xcba <estimate_distance+0x222>
     cb8:	5e c1       	rjmp	.+700    	; 0xf76 <estimate_distance+0x4de>
     cba:	e0 90 5a 01 	lds	r14, 0x015A
     cbe:	f0 90 5b 01 	lds	r15, 0x015B
     cc2:	ec 14       	cp	r14, r12
     cc4:	fd 04       	cpc	r15, r13
     cc6:	08 f4       	brcc	.+2      	; 0xcca <estimate_distance+0x232>
     cc8:	5e c1       	rjmp	.+700    	; 0xf86 <estimate_distance+0x4ee>
     cca:	e0 90 5c 01 	lds	r14, 0x015C
     cce:	f0 90 5d 01 	lds	r15, 0x015D
     cd2:	ec 14       	cp	r14, r12
     cd4:	fd 04       	cpc	r15, r13
     cd6:	08 f4       	brcc	.+2      	; 0xcda <estimate_distance+0x242>
     cd8:	c3 c0       	rjmp	.+390    	; 0xe60 <estimate_distance+0x3c8>
     cda:	e0 90 5e 01 	lds	r14, 0x015E
     cde:	f0 90 5f 01 	lds	r15, 0x015F
     ce2:	ec 14       	cp	r14, r12
     ce4:	fd 04       	cpc	r15, r13
     ce6:	08 f4       	brcc	.+2      	; 0xcea <estimate_distance+0x252>
     ce8:	56 c1       	rjmp	.+684    	; 0xf96 <estimate_distance+0x4fe>
     cea:	e0 90 60 01 	lds	r14, 0x0160
     cee:	f0 90 61 01 	lds	r15, 0x0161
     cf2:	ec 14       	cp	r14, r12
     cf4:	fd 04       	cpc	r15, r13
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <estimate_distance+0x262>
     cf8:	56 c1       	rjmp	.+684    	; 0xfa6 <estimate_distance+0x50e>
     cfa:	e0 90 62 01 	lds	r14, 0x0162
     cfe:	f0 90 63 01 	lds	r15, 0x0163
     d02:	ec 14       	cp	r14, r12
     d04:	fd 04       	cpc	r15, r13
     d06:	08 f4       	brcc	.+2      	; 0xd0a <estimate_distance+0x272>
     d08:	56 c1       	rjmp	.+684    	; 0xfb6 <estimate_distance+0x51e>
     d0a:	e0 90 64 01 	lds	r14, 0x0164
     d0e:	f0 90 65 01 	lds	r15, 0x0165
     d12:	ec 14       	cp	r14, r12
     d14:	fd 04       	cpc	r15, r13
     d16:	08 f4       	brcc	.+2      	; 0xd1a <estimate_distance+0x282>
     d18:	56 c1       	rjmp	.+684    	; 0xfc6 <estimate_distance+0x52e>
     d1a:	e0 90 66 01 	lds	r14, 0x0166
     d1e:	f0 90 67 01 	lds	r15, 0x0167
     d22:	ec 14       	cp	r14, r12
     d24:	fd 04       	cpc	r15, r13
     d26:	08 f4       	brcc	.+2      	; 0xd2a <estimate_distance+0x292>
     d28:	56 c1       	rjmp	.+684    	; 0xfd6 <estimate_distance+0x53e>
     d2a:	e0 90 68 01 	lds	r14, 0x0168
     d2e:	f0 90 69 01 	lds	r15, 0x0169
     d32:	ec 14       	cp	r14, r12
     d34:	fd 04       	cpc	r15, r13
     d36:	08 f4       	brcc	.+2      	; 0xd3a <estimate_distance+0x2a2>
     d38:	5a c1       	rjmp	.+692    	; 0xfee <estimate_distance+0x556>
     d3a:	e0 90 6a 01 	lds	r14, 0x016A
     d3e:	f0 90 6b 01 	lds	r15, 0x016B
     d42:	ec 14       	cp	r14, r12
     d44:	fd 04       	cpc	r15, r13
     d46:	08 f4       	brcc	.+2      	; 0xd4a <estimate_distance+0x2b2>
     d48:	5a c1       	rjmp	.+692    	; 0xffe <estimate_distance+0x566>
     d4a:	e0 90 6c 01 	lds	r14, 0x016C
     d4e:	f0 90 6d 01 	lds	r15, 0x016D
     d52:	ec 14       	cp	r14, r12
     d54:	fd 04       	cpc	r15, r13
     d56:	08 f4       	brcc	.+2      	; 0xd5a <estimate_distance+0x2c2>
     d58:	5a c1       	rjmp	.+692    	; 0x100e <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d5a:	0a e5       	ldi	r16, 0x5A	; 90
     d5c:	31 c0       	rjmp	.+98     	; 0xdc0 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     d5e:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     d60:	ed 81       	ldd	r30, Y+5	; 0x05
     d62:	fe 81       	ldd	r31, Y+6	; 0x06
     d64:	ed 3b       	cpi	r30, 0xBD	; 189
     d66:	f2 40       	sbci	r31, 0x02	; 2
     d68:	fc f4       	brge	.+62     	; 0xda8 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     d6a:	81 e2       	ldi	r24, 0x21	; 33
     d6c:	81 0f       	add	r24, r17
    }
}
     d6e:	26 96       	adiw	r28, 0x06	; 6
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	8f 90       	pop	r8
     d92:	7f 90       	pop	r7
     d94:	6f 90       	pop	r6
     d96:	5f 90       	pop	r5
     d98:	4f 90       	pop	r4
     d9a:	3f 90       	pop	r3
     d9c:	2f 90       	pop	r2
     d9e:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     da0:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     da2:	81 e2       	ldi	r24, 0x21	; 33
     da4:	80 0f       	add	r24, r16
     da6:	e3 cf       	rjmp	.-58     	; 0xd6e <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     da8:	d1 01       	movw	r26, r2
     daa:	cd 90       	ld	r12, X+
     dac:	dc 90       	ld	r13, X
     dae:	80 91 52 01 	lds	r24, 0x0152
     db2:	90 91 53 01 	lds	r25, 0x0153
     db6:	8c 15       	cp	r24, r12
     db8:	9d 05       	cpc	r25, r13
     dba:	08 f0       	brcs	.+2      	; 0xdbe <estimate_distance+0x326>
     dbc:	66 cf       	rjmp	.-308    	; 0xc8a <estimate_distance+0x1f2>
            dist_low=0;
     dbe:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     dc0:	1f 3f       	cpi	r17, 0xFF	; 255
     dc2:	79 f3       	breq	.-34     	; 0xda2 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     dc4:	ed 81       	ldd	r30, Y+5	; 0x05
     dc6:	fe 81       	ldd	r31, Y+6	; 0x06
     dc8:	bf 01       	movw	r22, r30
     dca:	ff 0f       	add	r31, r31
     dcc:	88 0b       	sbc	r24, r24
     dce:	99 0b       	sbc	r25, r25
     dd0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__floatsisf>
     dd4:	6b 01       	movw	r12, r22
     dd6:	7c 01       	movw	r14, r24
     dd8:	61 2f       	mov	r22, r17
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     de4:	4b 01       	movw	r8, r22
     de6:	5c 01       	movw	r10, r24
     de8:	a7 01       	movw	r20, r14
     dea:	96 01       	movw	r18, r12
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	81 e6       	ldi	r24, 0x61	; 97
     df2:	94 e4       	ldi	r25, 0x44	; 68
     df4:	0e 94 c6 0b 	call	0x178c	; 0x178c <__subsf3>
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
     dfc:	c5 01       	movw	r24, r10
     dfe:	b4 01       	movw	r22, r8
     e00:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     e04:	4b 01       	movw	r8, r22
     e06:	5c 01       	movw	r10, r24
     e08:	60 2f       	mov	r22, r16
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     e14:	2b 01       	movw	r4, r22
     e16:	3c 01       	movw	r6, r24
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	4f e2       	ldi	r20, 0x2F	; 47
     e1e:	54 e4       	ldi	r21, 0x44	; 68
     e20:	c7 01       	movw	r24, r14
     e22:	b6 01       	movw	r22, r12
     e24:	0e 94 c6 0b 	call	0x178c	; 0x178c <__subsf3>
     e28:	9b 01       	movw	r18, r22
     e2a:	ac 01       	movw	r20, r24
     e2c:	c3 01       	movw	r24, r6
     e2e:	b2 01       	movw	r22, r4
     e30:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c5 01       	movw	r24, r10
     e3a:	b4 01       	movw	r22, r8
     e3c:	0e 94 c7 0b 	call	0x178e	; 0x178e <__addsf3>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	48 e4       	ldi	r20, 0x48	; 72
     e46:	53 e4       	ldi	r21, 0x43	; 67
     e48:	0e 94 33 0c 	call	0x1866	; 0x1866 <__divsf3>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	44 e0       	ldi	r20, 0x04	; 4
     e52:	52 e4       	ldi	r21, 0x42	; 66
     e54:	0e 94 c7 0b 	call	0x178e	; 0x178e <__addsf3>
     e58:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     e5c:	86 2f       	mov	r24, r22
     e5e:	87 cf       	rjmp	.-242    	; 0xd6e <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e60:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	fc 01       	movw	r30, r24
     e6c:	e0 5b       	subi	r30, 0xB0	; 176
     e6e:	fe 4f       	sbci	r31, 0xFE	; 254
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	b7 01       	movw	r22, r14
     e76:	68 1b       	sub	r22, r24
     e78:	79 0b       	sbc	r23, r25
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	0e 94 c7 0b 	call	0x178e	; 0x178e <__addsf3>
     e8a:	4b 01       	movw	r8, r22
     e8c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e8e:	b6 01       	movw	r22, r12
     e90:	dd 0c       	add	r13, r13
     e92:	88 0b       	sbc	r24, r24
     e94:	99 0b       	sbc	r25, r25
     e96:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__floatsisf>
     e9a:	2b 01       	movw	r4, r22
     e9c:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e9e:	b7 01       	movw	r22, r14
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     ea8:	6b 01       	movw	r12, r22
     eaa:	7c 01       	movw	r14, r24
     eac:	60 2f       	mov	r22, r16
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	a9 01       	movw	r20, r18
     eca:	0e 94 c7 0b 	call	0x178e	; 0x178e <__addsf3>
     ece:	a5 01       	movw	r20, r10
     ed0:	94 01       	movw	r18, r8
     ed2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	c7 01       	movw	r24, r14
     edc:	b6 01       	movw	r22, r12
     ede:	0e 94 c6 0b 	call	0x178c	; 0x178c <__subsf3>
     ee2:	9b 01       	movw	r18, r22
     ee4:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ee6:	c3 01       	movw	r24, r6
     ee8:	b2 01       	movw	r22, r4
     eea:	0e 94 c6 0b 	call	0x178c	; 0x178c <__subsf3>
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e2       	ldi	r20, 0x20	; 32
     ef4:	51 e4       	ldi	r21, 0x41	; 65
     ef6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
                b=((int)((int)b/(int)slope));
     efa:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fixsfsi>
     efe:	7b 01       	movw	r14, r22
     f00:	c5 01       	movw	r24, r10
     f02:	b4 01       	movw	r22, r8
     f04:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fixsfsi>
     f08:	ab 01       	movw	r20, r22
     f0a:	bc 01       	movw	r22, r24
     f0c:	c7 01       	movw	r24, r14
     f0e:	ba 01       	movw	r22, r20
     f10:	0e 94 89 0b 	call	0x1712	; 0x1712 <__divmodhi4>
                dist_low=b;
     f14:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     f16:	6f 3f       	cpi	r22, 0xFF	; 255
     f18:	09 f0       	breq	.+2      	; 0xf1c <estimate_distance+0x484>
     f1a:	52 cf       	rjmp	.-348    	; 0xdc0 <estimate_distance+0x328>
     f1c:	26 cf       	rjmp	.-436    	; 0xd6a <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f1e:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     f20:	85 e0       	ldi	r24, 0x05	; 5
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	7c 01       	movw	r14, r24
     f26:	f1 e0       	ldi	r31, 0x01	; 1
     f28:	ef 1a       	sub	r14, r31
     f2a:	f1 08       	sbc	r15, r1
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	5f e3       	ldi	r21, 0x3F	; 63
     f3e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	a9 01       	movw	r20, r18
     f48:	0e 94 c7 0b 	call	0x178e	; 0x178e <__addsf3>
     f4c:	69 83       	std	Y+1, r22	; 0x01
     f4e:	7a 83       	std	Y+2, r23	; 0x02
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     f54:	40 ce       	rjmp	.-896    	; 0xbd6 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f56:	01 e0       	ldi	r16, 0x01	; 1
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	84 cf       	rjmp	.-248    	; 0xe66 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	df cf       	rjmp	.-66     	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f66:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	7c cf       	rjmp	.-264    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f6e:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	d7 cf       	rjmp	.-82     	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f76:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	74 cf       	rjmp	.-280    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f7e:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	cf cf       	rjmp	.-98     	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f86:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	6c cf       	rjmp	.-296    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f8e:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	c7 cf       	rjmp	.-114    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f96:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	64 cf       	rjmp	.-312    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f9e:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     fa0:	86 e0       	ldi	r24, 0x06	; 6
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	bf cf       	rjmp	.-130    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fa6:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     fa8:	87 e0       	ldi	r24, 0x07	; 7
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	5c cf       	rjmp	.-328    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fae:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     fb0:	87 e0       	ldi	r24, 0x07	; 7
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	b7 cf       	rjmp	.-146    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fb6:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     fb8:	88 e0       	ldi	r24, 0x08	; 8
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	54 cf       	rjmp	.-344    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fbe:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     fc0:	88 e0       	ldi	r24, 0x08	; 8
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	af cf       	rjmp	.-162    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fc6:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     fc8:	89 e0       	ldi	r24, 0x09	; 9
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	4c cf       	rjmp	.-360    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fce:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     fd0:	89 e0       	ldi	r24, 0x09	; 9
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a7 cf       	rjmp	.-178    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fd6:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     fd8:	8a e0       	ldi	r24, 0x0A	; 10
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	44 cf       	rjmp	.-376    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fde:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     fe0:	8a e0       	ldi	r24, 0x0A	; 10
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9f cf       	rjmp	.-194    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fe6:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     fe8:	8b e0       	ldi	r24, 0x0B	; 11
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9b cf       	rjmp	.-202    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fee:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     ff0:	8b e0       	ldi	r24, 0x0B	; 11
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	38 cf       	rjmp	.-400    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ff6:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     ff8:	8c e0       	ldi	r24, 0x0C	; 12
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	93 cf       	rjmp	.-218    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ffe:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    1000:	8c e0       	ldi	r24, 0x0C	; 12
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	30 cf       	rjmp	.-416    	; 0xe66 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1006:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1008:	8d e0       	ldi	r24, 0x0D	; 13
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	8b cf       	rjmp	.-234    	; 0xf24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    100e:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    1010:	8d e0       	ldi	r24, 0x0D	; 13
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	28 cf       	rjmp	.-432    	; 0xe66 <estimate_distance+0x3ce>

00001016 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    tx_clock += tx_increment;
    1038:	20 91 71 01 	lds	r18, 0x0171
    103c:	30 91 72 01 	lds	r19, 0x0172
    1040:	80 91 6f 01 	lds	r24, 0x016F
    1044:	90 91 70 01 	lds	r25, 0x0170
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	90 93 72 01 	sts	0x0172, r25
    1050:	80 93 71 01 	sts	0x0171, r24
    tx_increment = 0xFF;
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	90 93 70 01 	sts	0x0170, r25
    105c:	80 93 6f 01 	sts	0x016F, r24
    OCR0A = tx_increment;
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1064:	80 91 4d 01 	lds	r24, 0x014D
    1068:	90 91 4e 01 	lds	r25, 0x014E
    106c:	a0 91 4f 01 	lds	r26, 0x014F
    1070:	b0 91 50 01 	lds	r27, 0x0150
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	a1 1d       	adc	r26, r1
    1078:	b1 1d       	adc	r27, r1
    107a:	80 93 4d 01 	sts	0x014D, r24
    107e:	90 93 4e 01 	sts	0x014E, r25
    1082:	a0 93 4f 01 	sts	0x014F, r26
    1086:	b0 93 50 01 	sts	0x0150, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    108a:	80 91 51 01 	lds	r24, 0x0151
    108e:	81 11       	cpse	r24, r1
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <__vector_14+0x9a>
    1092:	80 91 80 01 	lds	r24, 0x0180
    1096:	90 91 81 01 	lds	r25, 0x0181
    109a:	20 91 71 01 	lds	r18, 0x0171
    109e:	30 91 72 01 	lds	r19, 0x0172
    10a2:	82 17       	cp	r24, r18
    10a4:	93 07       	cpc	r25, r19
    10a6:	20 f4       	brcc	.+8      	; 0x10b0 <__vector_14+0x9a>
    10a8:	80 91 21 01 	lds	r24, 0x0121
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	89 f0       	breq	.+34     	; 0x10d2 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    10d2:	e0 91 11 01 	lds	r30, 0x0111
    10d6:	f0 91 12 01 	lds	r31, 0x0112
    10da:	09 95       	icall
        if (msg) {
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	41 f3       	breq	.-48     	; 0x10b0 <__vector_14+0x9a>
            if (message_send(msg)) {
    10e0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <message_send>
    10e4:	81 11       	cpse	r24, r1
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    10e8:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <rand>
    10ec:	99 27       	eor	r25, r25
    10ee:	90 93 70 01 	sts	0x0170, r25
    10f2:	80 93 6f 01 	sts	0x016F, r24
                OCR0A = tx_increment;
    10f6:	87 bd       	out	0x27, r24	; 39
    10f8:	db cf       	rjmp	.-74     	; 0x10b0 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    10fa:	e0 91 0f 01 	lds	r30, 0x010F
    10fe:	f0 91 10 01 	lds	r31, 0x0110
    1102:	09 95       	icall
                tx_clock = 0;
    1104:	10 92 72 01 	sts	0x0172, r1
    1108:	10 92 71 01 	sts	0x0171, r1
    110c:	d1 cf       	rjmp	.-94     	; 0x10b0 <__vector_14+0x9a>

0000110e <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    110e:	80 ff       	sbrs	r24, 0
    1110:	11 c0       	rjmp	.+34     	; 0x1134 <set_color+0x26>
        DDRD |= (1<<5);
    1112:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1114:	81 ff       	sbrs	r24, 1
    1116:	11 c0       	rjmp	.+34     	; 0x113a <set_color+0x2c>
        DDRD |= (1<<4);
    1118:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    111a:	82 ff       	sbrs	r24, 2
    111c:	11 c0       	rjmp	.+34     	; 0x1140 <set_color+0x32>
        DDRC |= (1<<3);
    111e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1120:	83 ff       	sbrs	r24, 3
    1122:	11 c0       	rjmp	.+34     	; 0x1146 <set_color+0x38>
        DDRC |= (1<<2);
    1124:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1126:	84 ff       	sbrs	r24, 4
    1128:	11 c0       	rjmp	.+34     	; 0x114c <set_color+0x3e>
        DDRC |= (1<<5);
    112a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    112c:	85 fd       	sbrc	r24, 5
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1130:	3c 98       	cbi	0x07, 4	; 7
    1132:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1134:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1136:	81 fd       	sbrc	r24, 1
    1138:	ef cf       	rjmp	.-34     	; 0x1118 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    113a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    113c:	82 fd       	sbrc	r24, 2
    113e:	ef cf       	rjmp	.-34     	; 0x111e <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1140:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1142:	83 fd       	sbrc	r24, 3
    1144:	ef cf       	rjmp	.-34     	; 0x1124 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1146:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1148:	84 fd       	sbrc	r24, 4
    114a:	ef cf       	rjmp	.-34     	; 0x112a <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    114c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    114e:	85 ff       	sbrs	r24, 5
    1150:	ef cf       	rjmp	.-34     	; 0x1130 <set_color+0x22>
        DDRC |= (1<<4);
    1152:	3c 9a       	sbi	0x07, 4	; 7
    1154:	08 95       	ret

00001156 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    rx_timer_off();
    1164:	10 92 81 00 	sts	0x0081, r1
    1168:	10 92 85 00 	sts	0x0085, r1
    116c:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 2a 01 	sts	0x012A, r24
    rx_leadingbyte = 1;
    1176:	80 93 6e 01 	sts	0x016E, r24
    rx_busy = 0;
    117a:	10 92 51 01 	sts	0x0151, r1
    adc_trigger_high_gain();
    117e:	10 92 7c 00 	sts	0x007C, r1
    1182:	93 ea       	ldi	r25, 0xA3	; 163
    1184:	90 93 7a 00 	sts	0x007A, r25
    1188:	80 93 7b 00 	sts	0x007B, r24
}
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    11c0:	20 91 84 00 	lds	r18, 0x0084
    11c4:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	40 93 51 01 	sts	0x0151, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    11ce:	80 91 2a 01 	lds	r24, 0x012A
    11d2:	88 23       	and	r24, r24
    11d4:	a9 f1       	breq	.+106    	; 0x1240 <__vector_23+0xa6>
        rx_timer_on();
    11d6:	10 92 85 00 	sts	0x0085, r1
    11da:	10 92 84 00 	sts	0x0084, r1
    11de:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    11e2:	10 92 82 01 	sts	0x0182, r1
        rx_leadingbit = 0;
    11e6:	10 92 2a 01 	sts	0x012A, r1
        if (rx_leadingbyte) {
    11ea:	80 91 6e 01 	lds	r24, 0x016E
    11ee:	88 23       	and	r24, r24
    11f0:	a1 f0       	breq	.+40     	; 0x121a <__vector_23+0x80>
            adc_finish_conversion();
    11f2:	80 91 7a 00 	lds	r24, 0x007A
    11f6:	86 fd       	sbrc	r24, 6
    11f8:	fc cf       	rjmp	.-8      	; 0x11f2 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    11fa:	80 91 78 00 	lds	r24, 0x0078
    11fe:	90 91 79 00 	lds	r25, 0x0079
    1202:	90 93 4c 01 	sts	0x014C, r25
    1206:	80 93 4b 01 	sts	0x014B, r24
            adc_trigger_low_gain();
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 7c 00 	sts	0x007C, r24
    1210:	93 ea       	ldi	r25, 0xA3	; 163
    1212:	90 93 7a 00 	sts	0x007A, r25
    1216:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1240:	c9 01       	movw	r24, r18
    1242:	87 58       	subi	r24, 0x87	; 135
    1244:	91 09       	sbc	r25, r1
    1246:	84 37       	cpi	r24, 0x74	; 116
    1248:	99 40       	sbci	r25, 0x09	; 9
    124a:	08 f0       	brcs	.+2      	; 0x124e <__vector_23+0xb4>
    124c:	52 c0       	rjmp	.+164    	; 0x12f2 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    124e:	26 58       	subi	r18, 0x86	; 134
    1250:	31 09       	sbc	r19, r1
    1252:	a4 ef       	ldi	r26, 0xF4	; 244
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__umulhisi3>
    125a:	aa 27       	eor	r26, r26
    125c:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	91 05       	cpc	r25, r1
    1262:	a1 05       	cpc	r26, r1
    1264:	b1 05       	cpc	r27, r1
    1266:	08 f4       	brcc	.+2      	; 0x126a <__vector_23+0xd0>
    1268:	7b c0       	rjmp	.+246    	; 0x1360 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    126a:	40 93 2a 01 	sts	0x012A, r20
                if (rx_leadingbyte) {
    126e:	80 91 6e 01 	lds	r24, 0x016E
    1272:	81 11       	cpse	r24, r1
    1274:	52 c0       	rjmp	.+164    	; 0x131a <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1276:	80 91 48 01 	lds	r24, 0x0148
    127a:	e8 2f       	mov	r30, r24
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	ec 58       	subi	r30, 0x8C	; 140
    1280:	fe 4f       	sbci	r31, 0xFE	; 254
    1282:	90 91 82 01 	lds	r25, 0x0182
    1286:	90 83       	st	Z, r25
                    rx_byteindex++;
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	80 93 48 01 	sts	0x0148, r24
                    if (rx_byteindex == sizeof(message_t)) {
    128e:	8c 30       	cpi	r24, 0x0C	; 12
    1290:	21 f6       	brne	.-120    	; 0x121a <__vector_23+0x80>
                        rx_timer_off();
    1292:	10 92 81 00 	sts	0x0081, r1
    1296:	10 92 85 00 	sts	0x0085, r1
    129a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    129e:	40 93 6e 01 	sts	0x016E, r20
                        rx_busy = 0;
    12a2:	10 92 51 01 	sts	0x0151, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    12a6:	c0 91 7e 01 	lds	r28, 0x017E
    12aa:	d0 91 7f 01 	lds	r29, 0x017F
    12ae:	84 e7       	ldi	r24, 0x74	; 116
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <message_crc>
    12b6:	c8 17       	cp	r28, r24
    12b8:	d9 07       	cpc	r29, r25
    12ba:	09 f0       	breq	.+2      	; 0x12be <__vector_23+0x124>
    12bc:	ae cf       	rjmp	.-164    	; 0x121a <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    12be:	80 91 7d 01 	lds	r24, 0x017D
    12c2:	87 ff       	sbrs	r24, 7
    12c4:	61 c0       	rjmp	.+194    	; 0x1388 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12c6:	98 e7       	ldi	r25, 0x78	; 120
    12c8:	98 0f       	add	r25, r24
    12ca:	93 30       	cpi	r25, 0x03	; 3
    12cc:	30 f0       	brcs	.+12     	; 0x12da <__vector_23+0x140>
        motors_off();
    12ce:	53 98       	cbi	0x0a, 3	; 10
    12d0:	23 98       	cbi	0x04, 3	; 4
    12d2:	10 92 b4 00 	sts	0x00B4, r1
    12d6:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	fc 01       	movw	r30, r24
    12de:	e0 58       	subi	r30, 0x80	; 128
    12e0:	f1 09       	sbc	r31, r1
    12e2:	eb 30       	cpi	r30, 0x0B	; 11
    12e4:	f1 05       	cpc	r31, r1
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__vector_23+0x150>
    12e8:	98 cf       	rjmp	.-208    	; 0x121a <__vector_23+0x80>
    12ea:	e5 5c       	subi	r30, 0xC5	; 197
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    12f2:	10 92 81 00 	sts	0x0081, r1
    12f6:	10 92 85 00 	sts	0x0085, r1
    12fa:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    12fe:	40 93 2a 01 	sts	0x012A, r20
            rx_leadingbyte = 1;
    1302:	40 93 6e 01 	sts	0x016E, r20
            rx_busy = 0;
    1306:	10 92 51 01 	sts	0x0151, r1
            adc_trigger_high_gain();
    130a:	10 92 7c 00 	sts	0x007C, r1
    130e:	83 ea       	ldi	r24, 0xA3	; 163
    1310:	80 93 7a 00 	sts	0x007A, r24
    1314:	40 93 7b 00 	sts	0x007B, r20
    1318:	80 cf       	rjmp	.-256    	; 0x121a <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    131a:	80 91 7a 00 	lds	r24, 0x007A
    131e:	86 fd       	sbrc	r24, 6
    1320:	fc cf       	rjmp	.-8      	; 0x131a <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1322:	80 91 78 00 	lds	r24, 0x0078
    1326:	90 91 79 00 	lds	r25, 0x0079
    132a:	90 93 4a 01 	sts	0x014A, r25
    132e:	80 93 49 01 	sts	0x0149, r24
                    adc_trigger_high_gain();
    1332:	10 92 7c 00 	sts	0x007C, r1
    1336:	83 ea       	ldi	r24, 0xA3	; 163
    1338:	80 93 7a 00 	sts	0x007A, r24
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1342:	90 91 82 01 	lds	r25, 0x0182
    1346:	99 23       	and	r25, r25
    1348:	d1 f0       	breq	.+52     	; 0x137e <__vector_23+0x1e4>
                        rx_timer_off();
    134a:	10 92 81 00 	sts	0x0081, r1
    134e:	10 92 85 00 	sts	0x0085, r1
    1352:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1356:	80 93 6e 01 	sts	0x016E, r24
                        rx_busy = 0;
    135a:	10 92 51 01 	sts	0x0151, r1
    135e:	5d cf       	rjmp	.-326    	; 0x121a <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1360:	21 e0       	ldi	r18, 0x01	; 1
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	f9 01       	movw	r30, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <__vector_23+0x1d2>
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	8a 95       	dec	r24
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <__vector_23+0x1ce>
    1370:	cf 01       	movw	r24, r30
    1372:	90 91 82 01 	lds	r25, 0x0182
    1376:	89 2b       	or	r24, r25
    1378:	80 93 82 01 	sts	0x0182, r24
    137c:	4e cf       	rjmp	.-356    	; 0x121a <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    137e:	10 92 6e 01 	sts	0x016E, r1
                        rx_byteindex = 0;
    1382:	10 92 48 01 	sts	0x0148, r1
    1386:	49 cf       	rjmp	.-366    	; 0x121a <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1388:	e0 91 13 01 	lds	r30, 0x0113
    138c:	f0 91 14 01 	lds	r31, 0x0114
    1390:	69 e4       	ldi	r22, 0x49	; 73
    1392:	71 e0       	ldi	r23, 0x01	; 1
    1394:	84 e7       	ldi	r24, 0x74	; 116
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	09 95       	icall
    139a:	3f cf       	rjmp	.-386    	; 0x121a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    139c:	80 91 74 01 	lds	r24, 0x0174
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <__vector_23+0x20c>
    13a4:	dd c0       	rjmp	.+442    	; 0x1560 <__vector_23+0x3c6>
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <__vector_23+0x210>
    13a8:	ba c0       	rjmp	.+372    	; 0x151e <__vector_23+0x384>
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <__vector_23+0x216>
    13ae:	c6 c0       	rjmp	.+396    	; 0x153c <__vector_23+0x3a2>
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <__vector_23+0x21c>
    13b4:	b1 c0       	rjmp	.+354    	; 0x1518 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13b6:	80 91 1f 01 	lds	r24, 0x011F
    13ba:	90 91 7a 01 	lds	r25, 0x017A
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <__vector_23+0x22a>
    13c2:	e3 c0       	rjmp	.+454    	; 0x158a <__vector_23+0x3f0>
    13c4:	80 91 79 01 	lds	r24, 0x0179
                        prev_motion = MOVE_STOP;
    13c8:	10 92 20 01 	sts	0x0120, r1
                        cur_motion = MOVE_STRAIGHT;
    13cc:	23 e0       	ldi	r18, 0x03	; 3
    13ce:	20 93 1f 01 	sts	0x011F, r18
                        kilo_straight_left = calibmsg->straight_left;
    13d2:	80 93 85 01 	sts	0x0185, r24
                        kilo_straight_right = calibmsg->straight_right;
    13d6:	90 93 86 01 	sts	0x0186, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13da:	80 91 21 01 	lds	r24, 0x0121
    13de:	86 30       	cpi	r24, 0x06	; 6
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <__vector_23+0x24a>
    13e2:	1b cf       	rjmp	.-458    	; 0x121a <__vector_23+0x80>
                motors_on();
    13e4:	53 9a       	sbi	0x0a, 3	; 10
    13e6:	23 9a       	sbi	0x04, 3	; 4
    13e8:	10 92 b4 00 	sts	0x00B4, r1
    13ec:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    13f0:	86 e0       	ldi	r24, 0x06	; 6
    13f2:	80 93 21 01 	sts	0x0121, r24
    13f6:	11 cf       	rjmp	.-478    	; 0x121a <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    13f8:	80 91 21 01 	lds	r24, 0x0121
    13fc:	86 30       	cpi	r24, 0x06	; 6
    13fe:	99 f0       	breq	.+38     	; 0x1426 <__vector_23+0x28c>
                motors_on();
    1400:	53 9a       	sbi	0x0a, 3	; 10
    1402:	23 9a       	sbi	0x04, 3	; 4
    1404:	10 92 b4 00 	sts	0x00B4, r1
    1408:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    140c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    140e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1410:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1412:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1414:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1416:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1418:	10 92 1f 01 	sts	0x011F, r1
    141c:	10 92 20 01 	sts	0x0120, r1
                kilo_state = MOVING;
    1420:	86 e0       	ldi	r24, 0x06	; 6
    1422:	80 93 21 01 	sts	0x0121, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9c 01       	movw	r18, r24
    142c:	00 90 74 01 	lds	r0, 0x0174
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <__vector_23+0x29c>
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <__vector_23+0x298>
    143a:	80 91 83 01 	lds	r24, 0x0183
    143e:	90 91 84 01 	lds	r25, 0x0184
    1442:	82 23       	and	r24, r18
    1444:	93 23       	and	r25, r19
    1446:	89 2b       	or	r24, r25
    1448:	09 f0       	breq	.+2      	; 0x144c <__vector_23+0x2b2>
    144a:	86 c0       	rjmp	.+268    	; 0x1558 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    144c:	10 92 1f 01 	sts	0x011F, r1
    1450:	e4 ce       	rjmp	.-568    	; 0x121a <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 21 01 	sts	0x0121, r24
    1458:	e0 ce       	rjmp	.-576    	; 0x121a <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    145a:	e0 e0       	ldi	r30, 0x00	; 0
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1460:	80 91 6e 00 	lds	r24, 0x006E
    1464:	8d 7f       	andi	r24, 0xFD	; 253
    1466:	80 93 6e 00 	sts	0x006E, r24
    146a:	16 bc       	out	0x26, r1	; 38
            bootload();
    146c:	e0 e0       	ldi	r30, 0x00	; 0
    146e:	f0 e7       	ldi	r31, 0x70	; 112
    1470:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1472:	10 92 21 01 	sts	0x0121, r1
    1476:	d1 ce       	rjmp	.-606    	; 0x121a <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	80 93 21 01 	sts	0x0121, r24
    147e:	cd ce       	rjmp	.-614    	; 0x121a <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1480:	85 e0       	ldi	r24, 0x05	; 5
    1482:	80 93 21 01 	sts	0x0121, r24
    1486:	c9 ce       	rjmp	.-622    	; 0x121a <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1488:	80 91 21 01 	lds	r24, 0x0121
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	09 f4       	brne	.+2      	; 0x1492 <__vector_23+0x2f8>
    1490:	c4 ce       	rjmp	.-632    	; 0x121a <__vector_23+0x80>
    1492:	80 91 21 01 	lds	r24, 0x0121
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	09 f4       	brne	.+2      	; 0x149c <__vector_23+0x302>
    149a:	bf ce       	rjmp	.-642    	; 0x121a <__vector_23+0x80>
                motors_on();
    149c:	53 9a       	sbi	0x0a, 3	; 10
    149e:	23 9a       	sbi	0x04, 3	; 4
    14a0:	10 92 b4 00 	sts	0x00B4, r1
    14a4:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	80 93 21 01 	sts	0x0121, r24
    14ae:	b5 ce       	rjmp	.-662    	; 0x121a <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    14b0:	80 91 21 01 	lds	r24, 0x0121
    14b4:	86 30       	cpi	r24, 0x06	; 6
    14b6:	09 f0       	breq	.+2      	; 0x14ba <__vector_23+0x320>
    14b8:	b0 ce       	rjmp	.-672    	; 0x121a <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    14ba:	60 91 83 01 	lds	r22, 0x0183
    14be:	80 eb       	ldi	r24, 0xB0	; 176
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    14c6:	60 91 84 01 	lds	r22, 0x0184
    14ca:	81 eb       	ldi	r24, 0xB1	; 177
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    14d2:	60 91 87 01 	lds	r22, 0x0187
    14d6:	85 e0       	ldi	r24, 0x05	; 5
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    14de:	60 91 73 01 	lds	r22, 0x0173
    14e2:	89 e0       	ldi	r24, 0x09	; 9
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    14ea:	60 91 85 01 	lds	r22, 0x0185
    14ee:	8c e0       	ldi	r24, 0x0C	; 12
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    14f6:	60 91 86 01 	lds	r22, 0x0186
    14fa:	84 e1       	ldi	r24, 0x14	; 20
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <eeprom_write_byte>
                        motors_off();
    1502:	53 98       	cbi	0x0a, 3	; 10
    1504:	23 98       	cbi	0x04, 3	; 4
    1506:	10 92 b4 00 	sts	0x00B4, r1
    150a:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 21 01 	sts	0x0121, r24
    1514:	80 91 74 01 	lds	r24, 0x0174
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1518:	81 11       	cpse	r24, r1
    151a:	5f cf       	rjmp	.-322    	; 0x13da <__vector_23+0x240>
    151c:	7e ce       	rjmp	.-772    	; 0x121a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    151e:	88 23       	and	r24, r24
    1520:	39 f2       	breq	.-114    	; 0x14b0 <__vector_23+0x316>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	c9 f7       	brne	.-14     	; 0x1518 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1526:	80 91 75 01 	lds	r24, 0x0175
    152a:	90 91 76 01 	lds	r25, 0x0176
    152e:	90 93 84 01 	sts	0x0184, r25
    1532:	80 93 83 01 	sts	0x0183, r24
                    cur_motion = MOVE_STOP;
    1536:	10 92 1f 01 	sts	0x011F, r1
    153a:	4f cf       	rjmp	.-354    	; 0x13da <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    153c:	80 91 1f 01 	lds	r24, 0x011F
    1540:	82 30       	cpi	r24, 0x02	; 2
    1542:	71 f1       	breq	.+92     	; 0x15a0 <__vector_23+0x406>
    1544:	80 91 78 01 	lds	r24, 0x0178
                        prev_motion = MOVE_STOP;
    1548:	10 92 20 01 	sts	0x0120, r1
                        cur_motion = MOVE_RIGHT;
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	90 93 1f 01 	sts	0x011F, r25
                        kilo_turn_right = calibmsg->turn_right;
    1552:	80 93 73 01 	sts	0x0173, r24
    1556:	41 cf       	rjmp	.-382    	; 0x13da <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	80 93 1f 01 	sts	0x011F, r24
    155e:	5d ce       	rjmp	.-838    	; 0x121a <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1560:	80 91 1f 01 	lds	r24, 0x011F
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	51 f0       	breq	.+20     	; 0x157c <__vector_23+0x3e2>
    1568:	80 91 77 01 	lds	r24, 0x0177
                        prev_motion = MOVE_STOP;
    156c:	10 92 20 01 	sts	0x0120, r1
                        cur_motion = MOVE_LEFT;
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	90 93 1f 01 	sts	0x011F, r25
                        kilo_turn_left = calibmsg->turn_left;
    1576:	80 93 87 01 	sts	0x0187, r24
    157a:	2f cf       	rjmp	.-418    	; 0x13da <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    157c:	80 91 77 01 	lds	r24, 0x0177
    1580:	90 91 87 01 	lds	r25, 0x0187
    1584:	89 13       	cpse	r24, r25
    1586:	f2 cf       	rjmp	.-28     	; 0x156c <__vector_23+0x3d2>
    1588:	28 cf       	rjmp	.-432    	; 0x13da <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    158a:	80 91 86 01 	lds	r24, 0x0186
    158e:	98 13       	cpse	r25, r24
    1590:	19 cf       	rjmp	.-462    	; 0x13c4 <__vector_23+0x22a>
    1592:	80 91 79 01 	lds	r24, 0x0179
    1596:	20 91 85 01 	lds	r18, 0x0185
    159a:	82 13       	cpse	r24, r18
    159c:	15 cf       	rjmp	.-470    	; 0x13c8 <__vector_23+0x22e>
    159e:	1d cf       	rjmp	.-454    	; 0x13da <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    15a0:	80 91 78 01 	lds	r24, 0x0178
    15a4:	90 91 73 01 	lds	r25, 0x0173
    15a8:	89 13       	cpse	r24, r25
    15aa:	ce cf       	rjmp	.-100    	; 0x1548 <__vector_23+0x3ae>
    15ac:	16 cf       	rjmp	.-468    	; 0x13da <__vector_23+0x240>

000015ae <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    15ae:	fc 01       	movw	r30, r24
    15b0:	ac 01       	movw	r20, r24
    15b2:	46 5f       	subi	r20, 0xF6	; 246
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    15ba:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    15bc:	82 27       	eor	r24, r18
    15be:	08 2e       	mov	r0, r24
    15c0:	82 95       	swap	r24
    15c2:	80 7f       	andi	r24, 0xF0	; 240
    15c4:	80 25       	eor	r24, r0
    15c6:	09 2e       	mov	r0, r25
    15c8:	98 2f       	mov	r25, r24
    15ca:	82 95       	swap	r24
    15cc:	8f 70       	andi	r24, 0x0F	; 15
    15ce:	08 26       	eor	r0, r24
    15d0:	86 95       	lsr	r24
    15d2:	98 27       	eor	r25, r24
    15d4:	89 27       	eor	r24, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	88 0f       	add	r24, r24
    15da:	88 0f       	add	r24, r24
    15dc:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    15de:	e4 17       	cp	r30, r20
    15e0:	f5 07       	cpc	r31, r21
    15e2:	59 f7       	brne	.-42     	; 0x15ba <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    15e4:	08 95       	ret

000015e6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    15e6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    15e8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    15ea:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    15ec:	20 91 47 01 	lds	r18, 0x0147
    or tmpreg1, ddrreg
    15f0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    15f2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15f6:	30 91 47 01 	lds	r19, 0x0147
    15fa:	20 30       	cpi	r18, 0x00	; 0
    15fc:	29 f0       	breq	.+10     	; 0x1608 <message_send+0x22>
    15fe:	00 00       	nop
    1600:	25 b1       	in	r18, 0x05	; 5
    1602:	23 2b       	or	r18, r19
    1604:	25 b9       	out	0x05, r18	; 5
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <message_send+0x2a>
    1608:	00 00       	nop
    160a:	00 00       	nop
    160c:	00 00       	nop
    160e:	00 c0       	rjmp	.+0      	; 0x1610 <message_send+0x2a>
    1610:	00 00       	nop
    1612:	00 00       	nop
    1614:	00 00       	nop
    1616:	30 95       	com	r19
    1618:	25 b1       	in	r18, 0x05	; 5
    161a:	23 23       	and	r18, r19
    161c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    161e:	2e ea       	ldi	r18, 0xAE	; 174
    1620:	2a 95       	dec	r18
    1622:	f1 f7       	brne	.-4      	; 0x1620 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1624:	2b ee       	ldi	r18, 0xEB	; 235

00001626 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1626:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1628:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    162a:	0a c0       	rjmp	.+20     	; 0x1640 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    162c:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    162e:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    1632:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1634:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1636:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1638:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    163a:	0f be       	out	0x3f, r0	; 63
    return 0
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	08 95       	ret

00001640 <nocollision>:
nocollision:
    nop
    1640:	00 00       	nop
    dec tmpreg1
    1642:	2a 95       	dec	r18
    brne checkcollision
    1644:	81 f7       	brne	.-32     	; 0x1626 <checkcollision>

    ldi tmpreg1, 0x01
    1646:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1648:	30 91 47 01 	lds	r19, 0x0147
    164c:	20 30       	cpi	r18, 0x00	; 0
    164e:	29 f0       	breq	.+10     	; 0x165a <nocollision+0x1a>
    1650:	00 00       	nop
    1652:	25 b1       	in	r18, 0x05	; 5
    1654:	23 2b       	or	r18, r19
    1656:	25 b9       	out	0x05, r18	; 5
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <nocollision+0x22>
    165a:	00 00       	nop
    165c:	00 00       	nop
    165e:	00 00       	nop
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <nocollision+0x22>
    1662:	00 00       	nop
    1664:	00 00       	nop
    1666:	00 00       	nop
    1668:	30 95       	com	r19
    166a:	25 b1       	in	r18, 0x05	; 5
    166c:	23 23       	and	r18, r19
    166e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1670:	00 00       	nop
    1672:	24 e5       	ldi	r18, 0x54	; 84
    1674:	2a 95       	dec	r18
    1676:	f1 f7       	brne	.-4      	; 0x1674 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1678:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    167a:	8c e0       	ldi	r24, 0x0C	; 12

0000167c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    167c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    167e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1680:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1682:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1684:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1686:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1688:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    168a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    168c:	50 e0       	ldi	r21, 0x00	; 0

0000168e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    168e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1690:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1692:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1694:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1696:	30 91 47 01 	lds	r19, 0x0147
    169a:	20 30       	cpi	r18, 0x00	; 0
    169c:	29 f0       	breq	.+10     	; 0x16a8 <sendbit+0x1a>
    169e:	00 00       	nop
    16a0:	25 b1       	in	r18, 0x05	; 5
    16a2:	23 2b       	or	r18, r19
    16a4:	25 b9       	out	0x05, r18	; 5
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <sendbit+0x22>
    16a8:	00 00       	nop
    16aa:	00 00       	nop
    16ac:	00 00       	nop
    16ae:	00 c0       	rjmp	.+0      	; 0x16b0 <sendbit+0x22>
    16b0:	00 00       	nop
    16b2:	00 00       	nop
    16b4:	00 00       	nop
    16b6:	30 95       	com	r19
    16b8:	25 b1       	in	r18, 0x05	; 5
    16ba:	23 23       	and	r18, r19
    16bc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    16be:	00 00       	nop
    16c0:	21 e5       	ldi	r18, 0x51	; 81
    16c2:	2a 95       	dec	r18
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    16c6:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    16c8:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    16ca:	9a 95       	dec	r25
    brne sendbit
    16cc:	01 f7       	brne	.-64     	; 0x168e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    16ce:	8a 95       	dec	r24
    brne sendbyte
    16d0:	a9 f6       	brne	.-86     	; 0x167c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    16d2:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    16d4:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    16d6:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    16d8:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    16da:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    16de:	30 95       	com	r19
    in tmpreg1, IR_PORT
    16e0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    16e2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    16e4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    16e6:	0f be       	out	0x3f, r0	; 63
    return 1
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	08 95       	ret

000016ec <main>:
    //received_id = m->data[0];
}

int main()
{
    kilo_init();
    16ec:	0e 94 07 02 	call	0x40e	; 0x40e <kilo_init>
    debug_init();
    16f0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <debug_init>
    kilo_message_rx = message_rx;
    16f4:	81 e9       	ldi	r24, 0x91	; 145
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	90 93 14 01 	sts	0x0114, r25
    16fc:	80 93 13 01 	sts	0x0113, r24
    kilo_start(setup, loop);
    1700:	60 ea       	ldi	r22, 0xA0	; 160
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	8a e7       	ldi	r24, 0x7A	; 122
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 03 03 	call	0x606	; 0x606 <kilo_start>
    
    return 0;
}
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	08 95       	ret

00001712 <__divmodhi4>:
    1712:	97 fb       	bst	r25, 7
    1714:	07 2e       	mov	r0, r23
    1716:	16 f4       	brtc	.+4      	; 0x171c <__divmodhi4+0xa>
    1718:	00 94       	com	r0
    171a:	07 d0       	rcall	.+14     	; 0x172a <__divmodhi4_neg1>
    171c:	77 fd       	sbrc	r23, 7
    171e:	09 d0       	rcall	.+18     	; 0x1732 <__divmodhi4_neg2>
    1720:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__udivmodhi4>
    1724:	07 fc       	sbrc	r0, 7
    1726:	05 d0       	rcall	.+10     	; 0x1732 <__divmodhi4_neg2>
    1728:	3e f4       	brtc	.+14     	; 0x1738 <__divmodhi4_exit>

0000172a <__divmodhi4_neg1>:
    172a:	90 95       	com	r25
    172c:	81 95       	neg	r24
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	08 95       	ret

00001732 <__divmodhi4_neg2>:
    1732:	70 95       	com	r23
    1734:	61 95       	neg	r22
    1736:	7f 4f       	sbci	r23, 0xFF	; 255

00001738 <__divmodhi4_exit>:
    1738:	08 95       	ret

0000173a <__tablejump2__>:
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	05 90       	lpm	r0, Z+
    1740:	f4 91       	lpm	r31, Z
    1742:	e0 2d       	mov	r30, r0
    1744:	09 94       	ijmp

00001746 <__umulhisi3>:
    1746:	a2 9f       	mul	r26, r18
    1748:	b0 01       	movw	r22, r0
    174a:	b3 9f       	mul	r27, r19
    174c:	c0 01       	movw	r24, r0
    174e:	a3 9f       	mul	r26, r19
    1750:	70 0d       	add	r23, r0
    1752:	81 1d       	adc	r24, r1
    1754:	11 24       	eor	r1, r1
    1756:	91 1d       	adc	r25, r1
    1758:	b2 9f       	mul	r27, r18
    175a:	70 0d       	add	r23, r0
    175c:	81 1d       	adc	r24, r1
    175e:	11 24       	eor	r1, r1
    1760:	91 1d       	adc	r25, r1
    1762:	08 95       	ret

00001764 <__udivmodhi4>:
    1764:	aa 1b       	sub	r26, r26
    1766:	bb 1b       	sub	r27, r27
    1768:	51 e1       	ldi	r21, 0x11	; 17
    176a:	07 c0       	rjmp	.+14     	; 0x177a <__udivmodhi4_ep>

0000176c <__udivmodhi4_loop>:
    176c:	aa 1f       	adc	r26, r26
    176e:	bb 1f       	adc	r27, r27
    1770:	a6 17       	cp	r26, r22
    1772:	b7 07       	cpc	r27, r23
    1774:	10 f0       	brcs	.+4      	; 0x177a <__udivmodhi4_ep>
    1776:	a6 1b       	sub	r26, r22
    1778:	b7 0b       	sbc	r27, r23

0000177a <__udivmodhi4_ep>:
    177a:	88 1f       	adc	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	5a 95       	dec	r21
    1780:	a9 f7       	brne	.-22     	; 0x176c <__udivmodhi4_loop>
    1782:	80 95       	com	r24
    1784:	90 95       	com	r25
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	08 95       	ret

0000178c <__subsf3>:
    178c:	50 58       	subi	r21, 0x80	; 128

0000178e <__addsf3>:
    178e:	bb 27       	eor	r27, r27
    1790:	aa 27       	eor	r26, r26
    1792:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__addsf3x>
    1796:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__fp_round>
    179a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fp_pscA>
    179e:	38 f0       	brcs	.+14     	; 0x17ae <__addsf3+0x20>
    17a0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fp_pscB>
    17a4:	20 f0       	brcs	.+8      	; 0x17ae <__addsf3+0x20>
    17a6:	39 f4       	brne	.+14     	; 0x17b6 <__addsf3+0x28>
    17a8:	9f 3f       	cpi	r25, 0xFF	; 255
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <__addsf3+0x24>
    17ac:	26 f4       	brtc	.+8      	; 0x17b6 <__addsf3+0x28>
    17ae:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_nan>
    17b2:	0e f4       	brtc	.+2      	; 0x17b6 <__addsf3+0x28>
    17b4:	e0 95       	com	r30
    17b6:	e7 fb       	bst	r30, 7
    17b8:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_inf>

000017bc <__addsf3x>:
    17bc:	e9 2f       	mov	r30, r25
    17be:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_split3>
    17c2:	58 f3       	brcs	.-42     	; 0x179a <__addsf3+0xc>
    17c4:	ba 17       	cp	r27, r26
    17c6:	62 07       	cpc	r22, r18
    17c8:	73 07       	cpc	r23, r19
    17ca:	84 07       	cpc	r24, r20
    17cc:	95 07       	cpc	r25, r21
    17ce:	20 f0       	brcs	.+8      	; 0x17d8 <__addsf3x+0x1c>
    17d0:	79 f4       	brne	.+30     	; 0x17f0 <__addsf3x+0x34>
    17d2:	a6 f5       	brtc	.+104    	; 0x183c <__addsf3x+0x80>
    17d4:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__fp_zero>
    17d8:	0e f4       	brtc	.+2      	; 0x17dc <__addsf3x+0x20>
    17da:	e0 95       	com	r30
    17dc:	0b 2e       	mov	r0, r27
    17de:	ba 2f       	mov	r27, r26
    17e0:	a0 2d       	mov	r26, r0
    17e2:	0b 01       	movw	r0, r22
    17e4:	b9 01       	movw	r22, r18
    17e6:	90 01       	movw	r18, r0
    17e8:	0c 01       	movw	r0, r24
    17ea:	ca 01       	movw	r24, r20
    17ec:	a0 01       	movw	r20, r0
    17ee:	11 24       	eor	r1, r1
    17f0:	ff 27       	eor	r31, r31
    17f2:	59 1b       	sub	r21, r25
    17f4:	99 f0       	breq	.+38     	; 0x181c <__addsf3x+0x60>
    17f6:	59 3f       	cpi	r21, 0xF9	; 249
    17f8:	50 f4       	brcc	.+20     	; 0x180e <__addsf3x+0x52>
    17fa:	50 3e       	cpi	r21, 0xE0	; 224
    17fc:	68 f1       	brcs	.+90     	; 0x1858 <__addsf3x+0x9c>
    17fe:	1a 16       	cp	r1, r26
    1800:	f0 40       	sbci	r31, 0x00	; 0
    1802:	a2 2f       	mov	r26, r18
    1804:	23 2f       	mov	r18, r19
    1806:	34 2f       	mov	r19, r20
    1808:	44 27       	eor	r20, r20
    180a:	58 5f       	subi	r21, 0xF8	; 248
    180c:	f3 cf       	rjmp	.-26     	; 0x17f4 <__addsf3x+0x38>
    180e:	46 95       	lsr	r20
    1810:	37 95       	ror	r19
    1812:	27 95       	ror	r18
    1814:	a7 95       	ror	r26
    1816:	f0 40       	sbci	r31, 0x00	; 0
    1818:	53 95       	inc	r21
    181a:	c9 f7       	brne	.-14     	; 0x180e <__addsf3x+0x52>
    181c:	7e f4       	brtc	.+30     	; 0x183c <__addsf3x+0x80>
    181e:	1f 16       	cp	r1, r31
    1820:	ba 0b       	sbc	r27, r26
    1822:	62 0b       	sbc	r22, r18
    1824:	73 0b       	sbc	r23, r19
    1826:	84 0b       	sbc	r24, r20
    1828:	ba f0       	brmi	.+46     	; 0x1858 <__addsf3x+0x9c>
    182a:	91 50       	subi	r25, 0x01	; 1
    182c:	a1 f0       	breq	.+40     	; 0x1856 <__addsf3x+0x9a>
    182e:	ff 0f       	add	r31, r31
    1830:	bb 1f       	adc	r27, r27
    1832:	66 1f       	adc	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	c2 f7       	brpl	.-16     	; 0x182a <__addsf3x+0x6e>
    183a:	0e c0       	rjmp	.+28     	; 0x1858 <__addsf3x+0x9c>
    183c:	ba 0f       	add	r27, r26
    183e:	62 1f       	adc	r22, r18
    1840:	73 1f       	adc	r23, r19
    1842:	84 1f       	adc	r24, r20
    1844:	48 f4       	brcc	.+18     	; 0x1858 <__addsf3x+0x9c>
    1846:	87 95       	ror	r24
    1848:	77 95       	ror	r23
    184a:	67 95       	ror	r22
    184c:	b7 95       	ror	r27
    184e:	f7 95       	ror	r31
    1850:	9e 3f       	cpi	r25, 0xFE	; 254
    1852:	08 f0       	brcs	.+2      	; 0x1856 <__addsf3x+0x9a>
    1854:	b0 cf       	rjmp	.-160    	; 0x17b6 <__addsf3+0x28>
    1856:	93 95       	inc	r25
    1858:	88 0f       	add	r24, r24
    185a:	08 f0       	brcs	.+2      	; 0x185e <__addsf3x+0xa2>
    185c:	99 27       	eor	r25, r25
    185e:	ee 0f       	add	r30, r30
    1860:	97 95       	ror	r25
    1862:	87 95       	ror	r24
    1864:	08 95       	ret

00001866 <__divsf3>:
    1866:	0e 94 47 0c 	call	0x188e	; 0x188e <__divsf3x>
    186a:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__fp_round>
    186e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fp_pscB>
    1872:	58 f0       	brcs	.+22     	; 0x188a <__divsf3+0x24>
    1874:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fp_pscA>
    1878:	40 f0       	brcs	.+16     	; 0x188a <__divsf3+0x24>
    187a:	29 f4       	brne	.+10     	; 0x1886 <__divsf3+0x20>
    187c:	5f 3f       	cpi	r21, 0xFF	; 255
    187e:	29 f0       	breq	.+10     	; 0x188a <__divsf3+0x24>
    1880:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_inf>
    1884:	51 11       	cpse	r21, r1
    1886:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    188a:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_nan>

0000188e <__divsf3x>:
    188e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_split3>
    1892:	68 f3       	brcs	.-38     	; 0x186e <__divsf3+0x8>

00001894 <__divsf3_pse>:
    1894:	99 23       	and	r25, r25
    1896:	b1 f3       	breq	.-20     	; 0x1884 <__divsf3+0x1e>
    1898:	55 23       	and	r21, r21
    189a:	91 f3       	breq	.-28     	; 0x1880 <__divsf3+0x1a>
    189c:	95 1b       	sub	r25, r21
    189e:	55 0b       	sbc	r21, r21
    18a0:	bb 27       	eor	r27, r27
    18a2:	aa 27       	eor	r26, r26
    18a4:	62 17       	cp	r22, r18
    18a6:	73 07       	cpc	r23, r19
    18a8:	84 07       	cpc	r24, r20
    18aa:	38 f0       	brcs	.+14     	; 0x18ba <__divsf3_pse+0x26>
    18ac:	9f 5f       	subi	r25, 0xFF	; 255
    18ae:	5f 4f       	sbci	r21, 0xFF	; 255
    18b0:	22 0f       	add	r18, r18
    18b2:	33 1f       	adc	r19, r19
    18b4:	44 1f       	adc	r20, r20
    18b6:	aa 1f       	adc	r26, r26
    18b8:	a9 f3       	breq	.-22     	; 0x18a4 <__divsf3_pse+0x10>
    18ba:	35 d0       	rcall	.+106    	; 0x1926 <__divsf3_pse+0x92>
    18bc:	0e 2e       	mov	r0, r30
    18be:	3a f0       	brmi	.+14     	; 0x18ce <__divsf3_pse+0x3a>
    18c0:	e0 e8       	ldi	r30, 0x80	; 128
    18c2:	32 d0       	rcall	.+100    	; 0x1928 <__divsf3_pse+0x94>
    18c4:	91 50       	subi	r25, 0x01	; 1
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	e6 95       	lsr	r30
    18ca:	00 1c       	adc	r0, r0
    18cc:	ca f7       	brpl	.-14     	; 0x18c0 <__divsf3_pse+0x2c>
    18ce:	2b d0       	rcall	.+86     	; 0x1926 <__divsf3_pse+0x92>
    18d0:	fe 2f       	mov	r31, r30
    18d2:	29 d0       	rcall	.+82     	; 0x1926 <__divsf3_pse+0x92>
    18d4:	66 0f       	add	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	88 1f       	adc	r24, r24
    18da:	bb 1f       	adc	r27, r27
    18dc:	26 17       	cp	r18, r22
    18de:	37 07       	cpc	r19, r23
    18e0:	48 07       	cpc	r20, r24
    18e2:	ab 07       	cpc	r26, r27
    18e4:	b0 e8       	ldi	r27, 0x80	; 128
    18e6:	09 f0       	breq	.+2      	; 0x18ea <__divsf3_pse+0x56>
    18e8:	bb 0b       	sbc	r27, r27
    18ea:	80 2d       	mov	r24, r0
    18ec:	bf 01       	movw	r22, r30
    18ee:	ff 27       	eor	r31, r31
    18f0:	93 58       	subi	r25, 0x83	; 131
    18f2:	5f 4f       	sbci	r21, 0xFF	; 255
    18f4:	3a f0       	brmi	.+14     	; 0x1904 <__divsf3_pse+0x70>
    18f6:	9e 3f       	cpi	r25, 0xFE	; 254
    18f8:	51 05       	cpc	r21, r1
    18fa:	78 f0       	brcs	.+30     	; 0x191a <__divsf3_pse+0x86>
    18fc:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_inf>
    1900:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    1904:	5f 3f       	cpi	r21, 0xFF	; 255
    1906:	e4 f3       	brlt	.-8      	; 0x1900 <__divsf3_pse+0x6c>
    1908:	98 3e       	cpi	r25, 0xE8	; 232
    190a:	d4 f3       	brlt	.-12     	; 0x1900 <__divsf3_pse+0x6c>
    190c:	86 95       	lsr	r24
    190e:	77 95       	ror	r23
    1910:	67 95       	ror	r22
    1912:	b7 95       	ror	r27
    1914:	f7 95       	ror	r31
    1916:	9f 5f       	subi	r25, 0xFF	; 255
    1918:	c9 f7       	brne	.-14     	; 0x190c <__divsf3_pse+0x78>
    191a:	88 0f       	add	r24, r24
    191c:	91 1d       	adc	r25, r1
    191e:	96 95       	lsr	r25
    1920:	87 95       	ror	r24
    1922:	97 f9       	bld	r25, 7
    1924:	08 95       	ret
    1926:	e1 e0       	ldi	r30, 0x01	; 1
    1928:	66 0f       	add	r22, r22
    192a:	77 1f       	adc	r23, r23
    192c:	88 1f       	adc	r24, r24
    192e:	bb 1f       	adc	r27, r27
    1930:	62 17       	cp	r22, r18
    1932:	73 07       	cpc	r23, r19
    1934:	84 07       	cpc	r24, r20
    1936:	ba 07       	cpc	r27, r26
    1938:	20 f0       	brcs	.+8      	; 0x1942 <__divsf3_pse+0xae>
    193a:	62 1b       	sub	r22, r18
    193c:	73 0b       	sbc	r23, r19
    193e:	84 0b       	sbc	r24, r20
    1940:	ba 0b       	sbc	r27, r26
    1942:	ee 1f       	adc	r30, r30
    1944:	88 f7       	brcc	.-30     	; 0x1928 <__divsf3_pse+0x94>
    1946:	e0 95       	com	r30
    1948:	08 95       	ret

0000194a <__fixsfsi>:
    194a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
    194e:	68 94       	set
    1950:	b1 11       	cpse	r27, r1
    1952:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    1956:	08 95       	ret

00001958 <__fixunssfsi>:
    1958:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_splitA>
    195c:	88 f0       	brcs	.+34     	; 0x1980 <__fixunssfsi+0x28>
    195e:	9f 57       	subi	r25, 0x7F	; 127
    1960:	98 f0       	brcs	.+38     	; 0x1988 <__fixunssfsi+0x30>
    1962:	b9 2f       	mov	r27, r25
    1964:	99 27       	eor	r25, r25
    1966:	b7 51       	subi	r27, 0x17	; 23
    1968:	b0 f0       	brcs	.+44     	; 0x1996 <__fixunssfsi+0x3e>
    196a:	e1 f0       	breq	.+56     	; 0x19a4 <__fixunssfsi+0x4c>
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	1a f0       	brmi	.+6      	; 0x197c <__fixunssfsi+0x24>
    1976:	ba 95       	dec	r27
    1978:	c9 f7       	brne	.-14     	; 0x196c <__fixunssfsi+0x14>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <__fixunssfsi+0x4c>
    197c:	b1 30       	cpi	r27, 0x01	; 1
    197e:	91 f0       	breq	.+36     	; 0x19a4 <__fixunssfsi+0x4c>
    1980:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fp_zero>
    1984:	b1 e0       	ldi	r27, 0x01	; 1
    1986:	08 95       	ret
    1988:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__fp_zero>
    198c:	67 2f       	mov	r22, r23
    198e:	78 2f       	mov	r23, r24
    1990:	88 27       	eor	r24, r24
    1992:	b8 5f       	subi	r27, 0xF8	; 248
    1994:	39 f0       	breq	.+14     	; 0x19a4 <__fixunssfsi+0x4c>
    1996:	b9 3f       	cpi	r27, 0xF9	; 249
    1998:	cc f3       	brlt	.-14     	; 0x198c <__fixunssfsi+0x34>
    199a:	86 95       	lsr	r24
    199c:	77 95       	ror	r23
    199e:	67 95       	ror	r22
    19a0:	b3 95       	inc	r27
    19a2:	d9 f7       	brne	.-10     	; 0x199a <__fixunssfsi+0x42>
    19a4:	3e f4       	brtc	.+14     	; 0x19b4 <__fixunssfsi+0x5c>
    19a6:	90 95       	com	r25
    19a8:	80 95       	com	r24
    19aa:	70 95       	com	r23
    19ac:	61 95       	neg	r22
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	08 95       	ret

000019b6 <__floatunsisf>:
    19b6:	e8 94       	clt
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <__floatsisf+0x12>

000019ba <__floatsisf>:
    19ba:	97 fb       	bst	r25, 7
    19bc:	3e f4       	brtc	.+14     	; 0x19cc <__floatsisf+0x12>
    19be:	90 95       	com	r25
    19c0:	80 95       	com	r24
    19c2:	70 95       	com	r23
    19c4:	61 95       	neg	r22
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	99 23       	and	r25, r25
    19ce:	a9 f0       	breq	.+42     	; 0x19fa <__floatsisf+0x40>
    19d0:	f9 2f       	mov	r31, r25
    19d2:	96 e9       	ldi	r25, 0x96	; 150
    19d4:	bb 27       	eor	r27, r27
    19d6:	93 95       	inc	r25
    19d8:	f6 95       	lsr	r31
    19da:	87 95       	ror	r24
    19dc:	77 95       	ror	r23
    19de:	67 95       	ror	r22
    19e0:	b7 95       	ror	r27
    19e2:	f1 11       	cpse	r31, r1
    19e4:	f8 cf       	rjmp	.-16     	; 0x19d6 <__floatsisf+0x1c>
    19e6:	fa f4       	brpl	.+62     	; 0x1a26 <__floatsisf+0x6c>
    19e8:	bb 0f       	add	r27, r27
    19ea:	11 f4       	brne	.+4      	; 0x19f0 <__floatsisf+0x36>
    19ec:	60 ff       	sbrs	r22, 0
    19ee:	1b c0       	rjmp	.+54     	; 0x1a26 <__floatsisf+0x6c>
    19f0:	6f 5f       	subi	r22, 0xFF	; 255
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	8f 4f       	sbci	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	16 c0       	rjmp	.+44     	; 0x1a26 <__floatsisf+0x6c>
    19fa:	88 23       	and	r24, r24
    19fc:	11 f0       	breq	.+4      	; 0x1a02 <__floatsisf+0x48>
    19fe:	96 e9       	ldi	r25, 0x96	; 150
    1a00:	11 c0       	rjmp	.+34     	; 0x1a24 <__floatsisf+0x6a>
    1a02:	77 23       	and	r23, r23
    1a04:	21 f0       	breq	.+8      	; 0x1a0e <__floatsisf+0x54>
    1a06:	9e e8       	ldi	r25, 0x8E	; 142
    1a08:	87 2f       	mov	r24, r23
    1a0a:	76 2f       	mov	r23, r22
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <__floatsisf+0x5e>
    1a0e:	66 23       	and	r22, r22
    1a10:	71 f0       	breq	.+28     	; 0x1a2e <__floatsisf+0x74>
    1a12:	96 e8       	ldi	r25, 0x86	; 134
    1a14:	86 2f       	mov	r24, r22
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	2a f0       	brmi	.+10     	; 0x1a26 <__floatsisf+0x6c>
    1a1c:	9a 95       	dec	r25
    1a1e:	66 0f       	add	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	da f7       	brpl	.-10     	; 0x1a1c <__floatsisf+0x62>
    1a26:	88 0f       	add	r24, r24
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	97 f9       	bld	r25, 7
    1a2e:	08 95       	ret

00001a30 <__fp_inf>:
    1a30:	97 f9       	bld	r25, 7
    1a32:	9f 67       	ori	r25, 0x7F	; 127
    1a34:	80 e8       	ldi	r24, 0x80	; 128
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	08 95       	ret

00001a3c <__fp_nan>:
    1a3c:	9f ef       	ldi	r25, 0xFF	; 255
    1a3e:	80 ec       	ldi	r24, 0xC0	; 192
    1a40:	08 95       	ret

00001a42 <__fp_pscA>:
    1a42:	00 24       	eor	r0, r0
    1a44:	0a 94       	dec	r0
    1a46:	16 16       	cp	r1, r22
    1a48:	17 06       	cpc	r1, r23
    1a4a:	18 06       	cpc	r1, r24
    1a4c:	09 06       	cpc	r0, r25
    1a4e:	08 95       	ret

00001a50 <__fp_pscB>:
    1a50:	00 24       	eor	r0, r0
    1a52:	0a 94       	dec	r0
    1a54:	12 16       	cp	r1, r18
    1a56:	13 06       	cpc	r1, r19
    1a58:	14 06       	cpc	r1, r20
    1a5a:	05 06       	cpc	r0, r21
    1a5c:	08 95       	ret

00001a5e <__fp_round>:
    1a5e:	09 2e       	mov	r0, r25
    1a60:	03 94       	inc	r0
    1a62:	00 0c       	add	r0, r0
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <__fp_round+0xc>
    1a66:	88 23       	and	r24, r24
    1a68:	52 f0       	brmi	.+20     	; 0x1a7e <__fp_round+0x20>
    1a6a:	bb 0f       	add	r27, r27
    1a6c:	40 f4       	brcc	.+16     	; 0x1a7e <__fp_round+0x20>
    1a6e:	bf 2b       	or	r27, r31
    1a70:	11 f4       	brne	.+4      	; 0x1a76 <__fp_round+0x18>
    1a72:	60 ff       	sbrs	r22, 0
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <__fp_round+0x20>
    1a76:	6f 5f       	subi	r22, 0xFF	; 255
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7e:	08 95       	ret

00001a80 <__fp_split3>:
    1a80:	57 fd       	sbrc	r21, 7
    1a82:	90 58       	subi	r25, 0x80	; 128
    1a84:	44 0f       	add	r20, r20
    1a86:	55 1f       	adc	r21, r21
    1a88:	59 f0       	breq	.+22     	; 0x1aa0 <__fp_splitA+0x10>
    1a8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a8c:	71 f0       	breq	.+28     	; 0x1aaa <__fp_splitA+0x1a>
    1a8e:	47 95       	ror	r20

00001a90 <__fp_splitA>:
    1a90:	88 0f       	add	r24, r24
    1a92:	97 fb       	bst	r25, 7
    1a94:	99 1f       	adc	r25, r25
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <__fp_splitA+0x20>
    1a98:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9a:	79 f0       	breq	.+30     	; 0x1aba <__fp_splitA+0x2a>
    1a9c:	87 95       	ror	r24
    1a9e:	08 95       	ret
    1aa0:	12 16       	cp	r1, r18
    1aa2:	13 06       	cpc	r1, r19
    1aa4:	14 06       	cpc	r1, r20
    1aa6:	55 1f       	adc	r21, r21
    1aa8:	f2 cf       	rjmp	.-28     	; 0x1a8e <__fp_split3+0xe>
    1aaa:	46 95       	lsr	r20
    1aac:	f1 df       	rcall	.-30     	; 0x1a90 <__fp_splitA>
    1aae:	08 c0       	rjmp	.+16     	; 0x1ac0 <__fp_splitA+0x30>
    1ab0:	16 16       	cp	r1, r22
    1ab2:	17 06       	cpc	r1, r23
    1ab4:	18 06       	cpc	r1, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	f1 cf       	rjmp	.-30     	; 0x1a9c <__fp_splitA+0xc>
    1aba:	86 95       	lsr	r24
    1abc:	71 05       	cpc	r23, r1
    1abe:	61 05       	cpc	r22, r1
    1ac0:	08 94       	sec
    1ac2:	08 95       	ret

00001ac4 <__fp_zero>:
    1ac4:	e8 94       	clt

00001ac6 <__fp_szero>:
    1ac6:	bb 27       	eor	r27, r27
    1ac8:	66 27       	eor	r22, r22
    1aca:	77 27       	eor	r23, r23
    1acc:	cb 01       	movw	r24, r22
    1ace:	97 f9       	bld	r25, 7
    1ad0:	08 95       	ret

00001ad2 <__mulsf3>:
    1ad2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__mulsf3x>
    1ad6:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__fp_round>
    1ada:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fp_pscA>
    1ade:	38 f0       	brcs	.+14     	; 0x1aee <__mulsf3+0x1c>
    1ae0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fp_pscB>
    1ae4:	20 f0       	brcs	.+8      	; 0x1aee <__mulsf3+0x1c>
    1ae6:	95 23       	and	r25, r21
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <__mulsf3+0x1c>
    1aea:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_inf>
    1aee:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_nan>
    1af2:	11 24       	eor	r1, r1
    1af4:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>

00001af8 <__mulsf3x>:
    1af8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_split3>
    1afc:	70 f3       	brcs	.-36     	; 0x1ada <__mulsf3+0x8>

00001afe <__mulsf3_pse>:
    1afe:	95 9f       	mul	r25, r21
    1b00:	c1 f3       	breq	.-16     	; 0x1af2 <__mulsf3+0x20>
    1b02:	95 0f       	add	r25, r21
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	55 1f       	adc	r21, r21
    1b08:	62 9f       	mul	r22, r18
    1b0a:	f0 01       	movw	r30, r0
    1b0c:	72 9f       	mul	r23, r18
    1b0e:	bb 27       	eor	r27, r27
    1b10:	f0 0d       	add	r31, r0
    1b12:	b1 1d       	adc	r27, r1
    1b14:	63 9f       	mul	r22, r19
    1b16:	aa 27       	eor	r26, r26
    1b18:	f0 0d       	add	r31, r0
    1b1a:	b1 1d       	adc	r27, r1
    1b1c:	aa 1f       	adc	r26, r26
    1b1e:	64 9f       	mul	r22, r20
    1b20:	66 27       	eor	r22, r22
    1b22:	b0 0d       	add	r27, r0
    1b24:	a1 1d       	adc	r26, r1
    1b26:	66 1f       	adc	r22, r22
    1b28:	82 9f       	mul	r24, r18
    1b2a:	22 27       	eor	r18, r18
    1b2c:	b0 0d       	add	r27, r0
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	62 1f       	adc	r22, r18
    1b32:	73 9f       	mul	r23, r19
    1b34:	b0 0d       	add	r27, r0
    1b36:	a1 1d       	adc	r26, r1
    1b38:	62 1f       	adc	r22, r18
    1b3a:	83 9f       	mul	r24, r19
    1b3c:	a0 0d       	add	r26, r0
    1b3e:	61 1d       	adc	r22, r1
    1b40:	22 1f       	adc	r18, r18
    1b42:	74 9f       	mul	r23, r20
    1b44:	33 27       	eor	r19, r19
    1b46:	a0 0d       	add	r26, r0
    1b48:	61 1d       	adc	r22, r1
    1b4a:	23 1f       	adc	r18, r19
    1b4c:	84 9f       	mul	r24, r20
    1b4e:	60 0d       	add	r22, r0
    1b50:	21 1d       	adc	r18, r1
    1b52:	82 2f       	mov	r24, r18
    1b54:	76 2f       	mov	r23, r22
    1b56:	6a 2f       	mov	r22, r26
    1b58:	11 24       	eor	r1, r1
    1b5a:	9f 57       	subi	r25, 0x7F	; 127
    1b5c:	50 40       	sbci	r21, 0x00	; 0
    1b5e:	9a f0       	brmi	.+38     	; 0x1b86 <__mulsf3_pse+0x88>
    1b60:	f1 f0       	breq	.+60     	; 0x1b9e <__mulsf3_pse+0xa0>
    1b62:	88 23       	and	r24, r24
    1b64:	4a f0       	brmi	.+18     	; 0x1b78 <__mulsf3_pse+0x7a>
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	66 1f       	adc	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	91 50       	subi	r25, 0x01	; 1
    1b74:	50 40       	sbci	r21, 0x00	; 0
    1b76:	a9 f7       	brne	.-22     	; 0x1b62 <__mulsf3_pse+0x64>
    1b78:	9e 3f       	cpi	r25, 0xFE	; 254
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	80 f0       	brcs	.+32     	; 0x1b9e <__mulsf3_pse+0xa0>
    1b7e:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_inf>
    1b82:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    1b86:	5f 3f       	cpi	r21, 0xFF	; 255
    1b88:	e4 f3       	brlt	.-8      	; 0x1b82 <__mulsf3_pse+0x84>
    1b8a:	98 3e       	cpi	r25, 0xE8	; 232
    1b8c:	d4 f3       	brlt	.-12     	; 0x1b82 <__mulsf3_pse+0x84>
    1b8e:	86 95       	lsr	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b7 95       	ror	r27
    1b96:	f7 95       	ror	r31
    1b98:	e7 95       	ror	r30
    1b9a:	9f 5f       	subi	r25, 0xFF	; 255
    1b9c:	c1 f7       	brne	.-16     	; 0x1b8e <__mulsf3_pse+0x90>
    1b9e:	fe 2b       	or	r31, r30
    1ba0:	88 0f       	add	r24, r24
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	97 f9       	bld	r25, 7
    1baa:	08 95       	ret

00001bac <do_rand>:
    1bac:	8f 92       	push	r8
    1bae:	9f 92       	push	r9
    1bb0:	af 92       	push	r10
    1bb2:	bf 92       	push	r11
    1bb4:	cf 92       	push	r12
    1bb6:	df 92       	push	r13
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	ec 01       	movw	r28, r24
    1bc2:	68 81       	ld	r22, Y
    1bc4:	79 81       	ldd	r23, Y+1	; 0x01
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	61 15       	cp	r22, r1
    1bcc:	71 05       	cpc	r23, r1
    1bce:	81 05       	cpc	r24, r1
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	21 f4       	brne	.+8      	; 0x1bdc <do_rand+0x30>
    1bd4:	64 e2       	ldi	r22, 0x24	; 36
    1bd6:	79 ed       	ldi	r23, 0xD9	; 217
    1bd8:	8b e5       	ldi	r24, 0x5B	; 91
    1bda:	97 e0       	ldi	r25, 0x07	; 7
    1bdc:	2d e1       	ldi	r18, 0x1D	; 29
    1bde:	33 ef       	ldi	r19, 0xF3	; 243
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__divmodsi4>
    1be8:	49 01       	movw	r8, r18
    1bea:	5a 01       	movw	r10, r20
    1bec:	9b 01       	movw	r18, r22
    1bee:	ac 01       	movw	r20, r24
    1bf0:	a7 ea       	ldi	r26, 0xA7	; 167
    1bf2:	b1 e4       	ldi	r27, 0x41	; 65
    1bf4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__muluhisi3>
    1bf8:	6b 01       	movw	r12, r22
    1bfa:	7c 01       	movw	r14, r24
    1bfc:	ac ee       	ldi	r26, 0xEC	; 236
    1bfe:	b4 ef       	ldi	r27, 0xF4	; 244
    1c00:	a5 01       	movw	r20, r10
    1c02:	94 01       	movw	r18, r8
    1c04:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__mulohisi3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8c 0d       	add	r24, r12
    1c0e:	9d 1d       	adc	r25, r13
    1c10:	ae 1d       	adc	r26, r14
    1c12:	bf 1d       	adc	r27, r15
    1c14:	b7 ff       	sbrs	r27, 7
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <do_rand+0x72>
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	a1 09       	sbc	r26, r1
    1c1c:	b0 48       	sbci	r27, 0x80	; 128
    1c1e:	88 83       	st	Y, r24
    1c20:	99 83       	std	Y+1, r25	; 0x01
    1c22:	aa 83       	std	Y+2, r26	; 0x02
    1c24:	bb 83       	std	Y+3, r27	; 0x03
    1c26:	9f 77       	andi	r25, 0x7F	; 127
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	bf 90       	pop	r11
    1c36:	af 90       	pop	r10
    1c38:	9f 90       	pop	r9
    1c3a:	8f 90       	pop	r8
    1c3c:	08 95       	ret

00001c3e <rand_r>:
    1c3e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <do_rand>
    1c42:	08 95       	ret

00001c44 <rand>:
    1c44:	85 e1       	ldi	r24, 0x15	; 21
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <do_rand>
    1c4c:	08 95       	ret

00001c4e <srand>:
    1c4e:	a0 e0       	ldi	r26, 0x00	; 0
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	80 93 15 01 	sts	0x0115, r24
    1c56:	90 93 16 01 	sts	0x0116, r25
    1c5a:	a0 93 17 01 	sts	0x0117, r26
    1c5e:	b0 93 18 01 	sts	0x0118, r27
    1c62:	08 95       	ret

00001c64 <eeprom_read_byte>:
    1c64:	f9 99       	sbic	0x1f, 1	; 31
    1c66:	fe cf       	rjmp	.-4      	; 0x1c64 <eeprom_read_byte>
    1c68:	92 bd       	out	0x22, r25	; 34
    1c6a:	81 bd       	out	0x21, r24	; 33
    1c6c:	f8 9a       	sbi	0x1f, 0	; 31
    1c6e:	99 27       	eor	r25, r25
    1c70:	80 b5       	in	r24, 0x20	; 32
    1c72:	08 95       	ret

00001c74 <eeprom_write_byte>:
    1c74:	26 2f       	mov	r18, r22

00001c76 <eeprom_write_r18>:
    1c76:	f9 99       	sbic	0x1f, 1	; 31
    1c78:	fe cf       	rjmp	.-4      	; 0x1c76 <eeprom_write_r18>
    1c7a:	1f ba       	out	0x1f, r1	; 31
    1c7c:	92 bd       	out	0x22, r25	; 34
    1c7e:	81 bd       	out	0x21, r24	; 33
    1c80:	20 bd       	out	0x20, r18	; 32
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	fa 9a       	sbi	0x1f, 2	; 31
    1c88:	f9 9a       	sbi	0x1f, 1	; 31
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	08 95       	ret

00001c90 <__divmodsi4>:
    1c90:	05 2e       	mov	r0, r21
    1c92:	97 fb       	bst	r25, 7
    1c94:	1e f4       	brtc	.+6      	; 0x1c9c <__divmodsi4+0xc>
    1c96:	00 94       	com	r0
    1c98:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__negsi2>
    1c9c:	57 fd       	sbrc	r21, 7
    1c9e:	07 d0       	rcall	.+14     	; 0x1cae <__divmodsi4_neg2>
    1ca0:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodsi4>
    1ca4:	07 fc       	sbrc	r0, 7
    1ca6:	03 d0       	rcall	.+6      	; 0x1cae <__divmodsi4_neg2>
    1ca8:	4e f4       	brtc	.+18     	; 0x1cbc <__divmodsi4_exit>
    1caa:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__negsi2>

00001cae <__divmodsi4_neg2>:
    1cae:	50 95       	com	r21
    1cb0:	40 95       	com	r20
    1cb2:	30 95       	com	r19
    1cb4:	21 95       	neg	r18
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1cba:	5f 4f       	sbci	r21, 0xFF	; 255

00001cbc <__divmodsi4_exit>:
    1cbc:	08 95       	ret

00001cbe <__negsi2>:
    1cbe:	90 95       	com	r25
    1cc0:	80 95       	com	r24
    1cc2:	70 95       	com	r23
    1cc4:	61 95       	neg	r22
    1cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	08 95       	ret

00001cce <__muluhisi3>:
    1cce:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__umulhisi3>
    1cd2:	a5 9f       	mul	r26, r21
    1cd4:	90 0d       	add	r25, r0
    1cd6:	b4 9f       	mul	r27, r20
    1cd8:	90 0d       	add	r25, r0
    1cda:	a4 9f       	mul	r26, r20
    1cdc:	80 0d       	add	r24, r0
    1cde:	91 1d       	adc	r25, r1
    1ce0:	11 24       	eor	r1, r1
    1ce2:	08 95       	ret

00001ce4 <__mulshisi3>:
    1ce4:	b7 ff       	sbrs	r27, 7
    1ce6:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__muluhisi3>

00001cea <__mulohisi3>:
    1cea:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__muluhisi3>
    1cee:	82 1b       	sub	r24, r18
    1cf0:	93 0b       	sbc	r25, r19
    1cf2:	08 95       	ret

00001cf4 <__udivmodsi4>:
    1cf4:	a1 e2       	ldi	r26, 0x21	; 33
    1cf6:	1a 2e       	mov	r1, r26
    1cf8:	aa 1b       	sub	r26, r26
    1cfa:	bb 1b       	sub	r27, r27
    1cfc:	fd 01       	movw	r30, r26
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <__udivmodsi4_ep>

00001d00 <__udivmodsi4_loop>:
    1d00:	aa 1f       	adc	r26, r26
    1d02:	bb 1f       	adc	r27, r27
    1d04:	ee 1f       	adc	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	a2 17       	cp	r26, r18
    1d0a:	b3 07       	cpc	r27, r19
    1d0c:	e4 07       	cpc	r30, r20
    1d0e:	f5 07       	cpc	r31, r21
    1d10:	20 f0       	brcs	.+8      	; 0x1d1a <__udivmodsi4_ep>
    1d12:	a2 1b       	sub	r26, r18
    1d14:	b3 0b       	sbc	r27, r19
    1d16:	e4 0b       	sbc	r30, r20
    1d18:	f5 0b       	sbc	r31, r21

00001d1a <__udivmodsi4_ep>:
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	1a 94       	dec	r1
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <__udivmodsi4_loop>
    1d26:	60 95       	com	r22
    1d28:	70 95       	com	r23
    1d2a:	80 95       	com	r24
    1d2c:	90 95       	com	r25
    1d2e:	9b 01       	movw	r18, r22
    1d30:	ac 01       	movw	r20, r24
    1d32:	bd 01       	movw	r22, r26
    1d34:	cf 01       	movw	r24, r30
    1d36:	08 95       	ret

00001d38 <_exit>:
    1d38:	f8 94       	cli

00001d3a <__stop_program>:
    1d3a:	ff cf       	rjmp	.-2      	; 0x1d3a <__stop_program>
