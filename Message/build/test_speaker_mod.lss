
build/test_speaker_mod.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	37 02       	muls	r19, r23
      6a:	b3 02       	muls	r27, r19
      6c:	0b 02       	muls	r16, r27
      6e:	02 02       	muls	r16, r18
      70:	08 02       	muls	r16, r24
      72:	95 02       	muls	r25, r21
      74:	8a 02       	muls	r24, r26
      76:	15 09       	sbc	r17, r5
      78:	f2 07       	cpc	r31, r18
      7a:	f2 07       	cpc	r31, r18
      7c:	12 09       	sbc	r17, r2
      7e:	1e 09       	sbc	r17, r14
      80:	0e 09       	sbc	r16, r14
      82:	25 09       	sbc	r18, r5
      84:	21 09       	sbc	r18, r1
      86:	29 09       	sbc	r18, r9
      88:	e1 08       	sbc	r14, r1
      8a:	b3 08       	sbc	r11, r3

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee e0       	ldi	r30, 0x0E	; 14
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 38       	cpi	r26, 0x82	; 130
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <main>
      da:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
message_t message;
uint32_t message_last_changed = 0;
int odd = 0;

void setup()
{
      e2:	08 95       	ret

000000e4 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e4:	88 e1       	ldi	r24, 0x18	; 24
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	08 95       	ret

000000ea <message_tx_succes>:

void message_tx_succes()
{
    message_sent = 1;
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	90 93 13 01 	sts	0x0113, r25
      f2:	80 93 12 01 	sts	0x0112, r24
      f6:	08 95       	ret

000000f8 <loop>:
}

void loop()
{
    // Toggle even/odd message every 64 clock ticks (roughly 2 seconds).
    if (kilo_ticks > message_last_changed + 64)
      f8:	40 91 47 01 	lds	r20, 0x0147
      fc:	50 91 48 01 	lds	r21, 0x0148
     100:	60 91 49 01 	lds	r22, 0x0149
     104:	70 91 4a 01 	lds	r23, 0x014A
     108:	80 91 0e 01 	lds	r24, 0x010E
     10c:	90 91 0f 01 	lds	r25, 0x010F
     110:	a0 91 10 01 	lds	r26, 0x0110
     114:	b0 91 11 01 	lds	r27, 0x0111
     118:	80 5c       	subi	r24, 0xC0	; 192
     11a:	9f 4f       	sbci	r25, 0xFF	; 255
     11c:	af 4f       	sbci	r26, 0xFF	; 255
     11e:	bf 4f       	sbci	r27, 0xFF	; 255
     120:	84 17       	cp	r24, r20
     122:	95 07       	cpc	r25, r21
     124:	a6 07       	cpc	r26, r22
     126:	b7 07       	cpc	r27, r23
     128:	40 f5       	brcc	.+80     	; 0x17a <loop+0x82>
    {
        message_last_changed = kilo_ticks;
     12a:	80 91 47 01 	lds	r24, 0x0147
     12e:	90 91 48 01 	lds	r25, 0x0148
     132:	a0 91 49 01 	lds	r26, 0x0149
     136:	b0 91 4a 01 	lds	r27, 0x014A
     13a:	80 93 0e 01 	sts	0x010E, r24
     13e:	90 93 0f 01 	sts	0x010F, r25
     142:	a0 93 10 01 	sts	0x0110, r26
     146:	b0 93 11 01 	sts	0x0111, r27
        
        if (odd == 0)
     14a:	80 91 0c 01 	lds	r24, 0x010C
     14e:	90 91 0d 01 	lds	r25, 0x010D
        {
            message.type = NORMAL;
     152:	10 92 21 01 	sts	0x0121, r1
    // Toggle even/odd message every 64 clock ticks (roughly 2 seconds).
    if (kilo_ticks > message_last_changed + 64)
    {
        message_last_changed = kilo_ticks;
        
        if (odd == 0)
     156:	89 2b       	or	r24, r25
     158:	b9 f4       	brne	.+46     	; 0x188 <loop+0x90>
        {
            message.type = NORMAL;
            message.data[0] = 0;
     15a:	10 92 18 01 	sts	0x0118, r1
            message.crc = message_crc(&message);
     15e:	88 e1       	ldi	r24, 0x18	; 24
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	0e 94 bc 09 	call	0x1378	; 0x1378 <message_crc>
     166:	90 93 23 01 	sts	0x0123, r25
     16a:	80 93 22 01 	sts	0x0122, r24
            
            // Update odd for next time.
            odd = 1;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	90 93 0d 01 	sts	0x010D, r25
     176:	80 93 0c 01 	sts	0x010C, r24
            odd = 0;
        }
    }
    
    // Blink the LED magenta whenever a message is sent.
    if (message_sent)
     17a:	80 91 12 01 	lds	r24, 0x0112
     17e:	90 91 13 01 	lds	r25, 0x0113
     182:	89 2b       	or	r24, r25
     184:	b1 f4       	brne	.+44     	; 0x1b2 <loop+0xba>
     186:	08 95       	ret
            odd = 1;
        }
        else
        {
            message.type = NORMAL;
            message.data[0] = 1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	80 93 18 01 	sts	0x0118, r24
            message.crc = message_crc(&message);
     18e:	88 e1       	ldi	r24, 0x18	; 24
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 bc 09 	call	0x1378	; 0x1378 <message_crc>
     196:	90 93 23 01 	sts	0x0123, r25
     19a:	80 93 22 01 	sts	0x0122, r24
            
            // Update odd for next time.
            odd = 0;
     19e:	10 92 0d 01 	sts	0x010D, r1
     1a2:	10 92 0c 01 	sts	0x010C, r1
        }
    }
    
    // Blink the LED magenta whenever a message is sent.
    if (message_sent)
     1a6:	80 91 12 01 	lds	r24, 0x0112
     1aa:	90 91 13 01 	lds	r25, 0x0113
     1ae:	89 2b       	or	r24, r25
     1b0:	51 f3       	breq	.-44     	; 0x186 <loop+0x8e>
    {
        message_sent = 0;
     1b2:	10 92 13 01 	sts	0x0113, r1
     1b6:	10 92 12 01 	sts	0x0112, r1
        
        set_color(RGB(1, 0, 1));
     1ba:	81 e1       	ldi	r24, 0x11	; 17
     1bc:	0e 94 6c 07 	call	0xed8	; 0xed8 <set_color>
        delay(100);
     1c0:	84 e6       	ldi	r24, 0x64	; 100
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 40 03 	call	0x680	; 0x680 <delay>
        set_color(RGB(0, 0, 0));
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <set_color>

000001ce <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1ce:	08 95       	ret

000001d0 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 95       	ret

000001d6 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1d6:	08 95       	ret

000001d8 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
    cli();
     1e6:	f8 94       	cli

    ports_off();
     1e8:	14 b8       	out	0x04, r1	; 4
     1ea:	17 b8       	out	0x07, r1	; 7
     1ec:	1a b8       	out	0x0a, r1	; 10
     1ee:	15 b8       	out	0x05, r1	; 5
     1f0:	18 b8       	out	0x08, r1	; 8
     1f2:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1f4:	52 9a       	sbi	0x0a, 2	; 10
     1f6:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1f8:	14 bc       	out	0x24, r1	; 36
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	85 bd       	out	0x25, r24	; 37
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	87 bd       	out	0x27, r24	; 39
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     208:	10 92 80 00 	sts	0x0080, r1
     20c:	10 92 81 00 	sts	0x0081, r1
     210:	2f e8       	ldi	r18, 0x8F	; 143
     212:	3b e0       	ldi	r19, 0x0B	; 11
     214:	30 93 89 00 	sts	0x0089, r19
     218:	20 93 88 00 	sts	0x0088, r18
     21c:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     220:	53 98       	cbi	0x0a, 3	; 10
     222:	23 98       	cbi	0x04, 3	; 4
     224:	91 ea       	ldi	r25, 0xA1	; 161
     226:	90 93 b0 00 	sts	0x00B0, r25
     22a:	80 93 b1 00 	sts	0x00B1, r24
     22e:	10 92 b4 00 	sts	0x00B4, r1
     232:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     236:	8b e0       	ldi	r24, 0x0B	; 11
     238:	80 bf       	out	0x30, r24	; 48
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     240:	86 e0       	ldi	r24, 0x06	; 6
     242:	80 93 7c 00 	sts	0x007C, r24
     246:	83 e8       	ldi	r24, 0x83	; 131
     248:	80 93 7a 00 	sts	0x007A, r24
     24c:	80 91 7a 00 	lds	r24, 0x007A
     250:	80 64       	ori	r24, 0x40	; 64
     252:	80 93 7a 00 	sts	0x007A, r24
     256:	80 91 7a 00 	lds	r24, 0x007A
     25a:	86 fd       	sbrc	r24, 6
     25c:	fc cf       	rjmp	.-8      	; 0x256 <kilo_init+0x7e>
    adc_trigger_high_gain();
     25e:	10 92 7c 00 	sts	0x007C, r1
     262:	83 ea       	ldi	r24, 0xA3	; 163
     264:	80 93 7a 00 	sts	0x007A, r24
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
    if (osccal != 0xFF)
     276:	8f 3f       	cpi	r24, 0xFF	; 255
     278:	11 f0       	breq	.+4      	; 0x27e <kilo_init+0xa6>
        OSCCAL = osccal;
     27a:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     27e:	10 92 4b 01 	sts	0x014B, r1
    rx_leadingbit = 1;
     282:	c1 e0       	ldi	r28, 0x01	; 1
     284:	c0 93 24 01 	sts	0x0124, r28
    rx_leadingbyte = 1;
     288:	c0 93 68 01 	sts	0x0168, r28
    rx_byteindex = 0;
     28c:	10 92 42 01 	sts	0x0142, r1
    rx_bytevalue = 0;
     290:	10 92 7c 01 	sts	0x017C, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     294:	80 e9       	ldi	r24, 0x90	; 144
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     29c:	80 93 41 01 	sts	0x0141, r24
    if (tx_mask & ~TX_MASK_MAX)
     2a0:	80 91 41 01 	lds	r24, 0x0141
     2a4:	88 73       	andi	r24, 0x38	; 56
     2a6:	11 f0       	breq	.+4      	; 0x2ac <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2a8:	c0 93 41 01 	sts	0x0141, r28
    tx_clock = 0;
     2ac:	10 92 6c 01 	sts	0x016C, r1
     2b0:	10 92 6b 01 	sts	0x016B, r1
    tx_increment = 255;
     2b4:	8f ef       	ldi	r24, 0xFF	; 255
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 6a 01 	sts	0x016A, r25
     2bc:	80 93 69 01 	sts	0x0169, r24
    kilo_ticks = 0;
     2c0:	10 92 47 01 	sts	0x0147, r1
     2c4:	10 92 48 01 	sts	0x0148, r1
     2c8:	10 92 49 01 	sts	0x0149, r1
     2cc:	10 92 4a 01 	sts	0x014A, r1
    kilo_state = IDLE;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     2d6:	82 e4       	ldi	r24, 0x42	; 66
     2d8:	9f e0       	ldi	r25, 0x0F	; 15
     2da:	90 93 7b 01 	sts	0x017B, r25
     2de:	80 93 7a 01 	sts	0x017A, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2e2:	80 eb       	ldi	r24, 0xB0	; 176
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     2ea:	c8 2f       	mov	r28, r24
     2ec:	81 eb       	ldi	r24, 0xB1	; 177
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     2f4:	2c 2f       	mov	r18, r28
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	38 2b       	or	r19, r24
     2fa:	30 93 7e 01 	sts	0x017E, r19
     2fe:	20 93 7d 01 	sts	0x017D, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     302:	85 e0       	ldi	r24, 0x05	; 5
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     30a:	80 93 81 01 	sts	0x0181, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     30e:	89 e0       	ldi	r24, 0x09	; 9
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     316:	80 93 6d 01 	sts	0x016D, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     31a:	8c e0       	ldi	r24, 0x0C	; 12
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     322:	80 93 7f 01 	sts	0x017F, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     326:	84 e1       	ldi	r24, 0x14	; 20
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     32e:	80 93 80 01 	sts	0x0180, r24
     332:	5c e4       	ldi	r21, 0x4C	; 76
     334:	e5 2e       	mov	r14, r21
     336:	51 e0       	ldi	r21, 0x01	; 1
     338:	f5 2e       	mov	r15, r21
     33a:	05 e2       	ldi	r16, 0x25	; 37
     33c:	11 e0       	ldi	r17, 0x01	; 1
     33e:	c0 e2       	ldi	r28, 0x20	; 32
     340:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     342:	ce 01       	movw	r24, r28
     344:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     348:	d8 2e       	mov	r13, r24
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     352:	2d 2d       	mov	r18, r13
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	32 2f       	mov	r19, r18
     358:	22 27       	eor	r18, r18
     35a:	28 2b       	or	r18, r24
     35c:	f7 01       	movw	r30, r14
     35e:	21 93       	st	Z+, r18
     360:	31 93       	st	Z+, r19
     362:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     364:	ce 01       	movw	r24, r28
     366:	c0 96       	adiw	r24, 0x30	; 48
     368:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     36c:	d8 2e       	mov	r13, r24
     36e:	ce 01       	movw	r24, r28
     370:	c1 96       	adiw	r24, 0x31	; 49
     372:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <eeprom_read_byte>
     376:	2d 2d       	mov	r18, r13
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	32 2f       	mov	r19, r18
     37c:	22 27       	eor	r18, r18
     37e:	28 2b       	or	r18, r24
     380:	f8 01       	movw	r30, r16
     382:	21 93       	st	Z+, r18
     384:	31 93       	st	Z+, r19
     386:	8f 01       	movw	r16, r30
     388:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     38a:	cc 33       	cpi	r28, 0x3C	; 60
     38c:	d1 05       	cpc	r29, r1
     38e:	c9 f6       	brne	.-78     	; 0x342 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     390:	78 94       	sei
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	08 95       	ret

000003a2 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	a8 95       	wdr
     3b4:	80 91 60 00 	lds	r24, 0x0060
     3b8:	88 61       	ori	r24, 0x18	; 24
     3ba:	80 93 60 00 	sts	0x0060, r24
     3be:	10 92 60 00 	sts	0x0060, r1
     3c2:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3c4:	8f 91       	pop	r24
     3c6:	0f 90       	pop	r0
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	0f 90       	pop	r0
     3cc:	1f 90       	pop	r1
     3ce:	18 95       	reti

000003d0 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     3d0:	3c 01       	movw	r6, r24
     3d2:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     3d4:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     3d6:	99 24       	eor	r9, r9
     3d8:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     3de:	96 e0       	ldi	r25, 0x06	; 6
     3e0:	a9 2e       	mov	r10, r25
     3e2:	23 e8       	ldi	r18, 0x83	; 131
     3e4:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     3e6:	38 e1       	ldi	r19, 0x18	; 24
     3e8:	d3 2e       	mov	r13, r19
     3ea:	49 e2       	ldi	r20, 0x29	; 41
     3ec:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     3ee:	90 91 17 01 	lds	r25, 0x0117
     3f2:	e9 2f       	mov	r30, r25
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e7 30       	cpi	r30, 0x07	; 7
     3f8:	f1 05       	cpc	r31, r1
     3fa:	c8 f7       	brcc	.-14     	; 0x3ee <kilo_start+0x1e>
     3fc:	ec 5c       	subi	r30, 0xCC	; 204
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     404:	11 23       	and	r17, r17
     406:	09 f4       	brne	.+2      	; 0x40a <kilo_start+0x3a>
     408:	fc c0       	rjmp	.+504    	; 0x602 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     40a:	c0 92 17 01 	sts	0x0117, r12
     40e:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     410:	fe 01       	movw	r30, r28
     412:	09 95       	icall
                break;
     414:	ec cf       	rjmp	.-40     	; 0x3ee <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     416:	80 91 4b 01 	lds	r24, 0x014B
     41a:	81 11       	cpse	r24, r1
     41c:	eb c0       	rjmp	.+470    	; 0x5f4 <kilo_start+0x224>
        cli();                                    // disable interrupts
     41e:	f8 94       	cli
        adc_setup_conversion(6);
     420:	a0 92 7c 00 	sts	0x007C, r10
     424:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     428:	80 91 7a 00 	lds	r24, 0x007A
     42c:	80 64       	ori	r24, 0x40	; 64
     42e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     432:	90 91 7a 00 	lds	r25, 0x007A
     436:	96 fd       	sbrc	r25, 6
     438:	fc cf       	rjmp	.-8      	; 0x432 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     43a:	80 91 78 00 	lds	r24, 0x0078
     43e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     442:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     444:	8b 3a       	cpi	r24, 0xAB	; 171
     446:	e2 e0       	ldi	r30, 0x02	; 2
     448:	9e 07       	cpc	r25, r30
     44a:	0c f0       	brlt	.+2      	; 0x44e <kilo_start+0x7e>
     44c:	ed c0       	rjmp	.+474    	; 0x628 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     44e:	89 38       	cpi	r24, 0x89	; 137
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	9f 07       	cpc	r25, r31
     454:	0c f0       	brlt	.+2      	; 0x458 <kilo_start+0x88>
     456:	ef c0       	rjmp	.+478    	; 0x636 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     458:	87 36       	cpi	r24, 0x67	; 103
     45a:	92 40       	sbci	r25, 0x02	; 2
     45c:	0c f4       	brge	.+2      	; 0x460 <kilo_start+0x90>
     45e:	ca c0       	rjmp	.+404    	; 0x5f4 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     460:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     462:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     464:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     466:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     468:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     46a:	3c 98       	cbi	0x07, 4	; 7
     46c:	c0 cf       	rjmp	.-128    	; 0x3ee <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     46e:	f8 94       	cli
                acomp_off();
     470:	80 b7       	in	r24, 0x30	; 48
     472:	87 7f       	andi	r24, 0xF7	; 247
     474:	80 bf       	out	0x30, r24	; 48
                adc_off();
     476:	80 91 7a 00 	lds	r24, 0x007A
     47a:	8f 77       	andi	r24, 0x7F	; 127
     47c:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     480:	14 b8       	out	0x04, r1	; 4
     482:	17 b8       	out	0x07, r1	; 7
     484:	1a b8       	out	0x0a, r1	; 10
     486:	15 b8       	out	0x05, r1	; 5
     488:	18 b8       	out	0x08, r1	; 8
     48a:	1b b8       	out	0x0b, r1	; 11
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	a8 95       	wdr
     492:	d0 92 60 00 	sts	0x0060, r13
     496:	0f be       	out	0x3f, r0	; 63
     498:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     49c:	80 91 60 00 	lds	r24, 0x0060
     4a0:	80 64       	ori	r24, 0x40	; 64
     4a2:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     4a6:	93 b7       	in	r25, 0x33	; 51
     4a8:	91 7f       	andi	r25, 0xF1	; 241
     4aa:	94 60       	ori	r25, 0x04	; 4
     4ac:	93 bf       	out	0x33, r25	; 51
                cli();
     4ae:	f8 94       	cli
                sleep_enable();
     4b0:	83 b7       	in	r24, 0x33	; 51
     4b2:	81 60       	ori	r24, 0x01	; 1
     4b4:	83 bf       	out	0x33, r24	; 51
                sei();
     4b6:	78 94       	sei
                sleep_cpu();
     4b8:	88 95       	sleep
                sleep_disable();
     4ba:	83 b7       	in	r24, 0x33	; 51
     4bc:	8e 7f       	andi	r24, 0xFE	; 254
     4be:	83 bf       	out	0x33, r24	; 51
                sei();
     4c0:	78 94       	sei
                rx_busy = 0;
     4c2:	10 92 4b 01 	sts	0x014B, r1
                ports_on();
     4c6:	52 9a       	sbi	0x0a, 2	; 10
     4c8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     4ca:	80 91 7a 00 	lds	r24, 0x007A
     4ce:	80 68       	ori	r24, 0x80	; 128
     4d0:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d4:	87 e5       	ldi	r24, 0x57	; 87
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <kilo_start+0x108>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <kilo_start+0x10e>
     4de:	00 00       	nop
                _delay_us(300);
                acomp_on();
     4e0:	80 b7       	in	r24, 0x30	; 48
     4e2:	88 61       	ori	r24, 0x18	; 24
     4e4:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4e6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4e8:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4ea:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4ec:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     4ee:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     4f0:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f2:	ef e1       	ldi	r30, 0x1F	; 31
     4f4:	fe e4       	ldi	r31, 0x4E	; 78
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <kilo_start+0x126>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <kilo_start+0x12c>
     4fc:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     4fe:	80 91 4b 01 	lds	r24, 0x014B
     502:	81 11       	cpse	r24, r1
     504:	81 c0       	rjmp	.+258    	; 0x608 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     506:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     508:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     50a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     50c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     50e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     510:	3c 98       	cbi	0x07, 4	; 7
     512:	6d cf       	rjmp	.-294    	; 0x3ee <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     514:	80 91 15 01 	lds	r24, 0x0115
     518:	81 11       	cpse	r24, r1
     51a:	41 c0       	rjmp	.+130    	; 0x59e <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     51c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     520:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     524:	10 92 16 01 	sts	0x0116, r1
     528:	62 cf       	rjmp	.-316    	; 0x3ee <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     52a:	48 99       	sbic	0x09, 0	; 9
     52c:	ec cf       	rjmp	.-40     	; 0x506 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     52e:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     530:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     532:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     534:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     536:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     538:	3c 98       	cbi	0x07, 4	; 7
     53a:	8f ec       	ldi	r24, 0xCF	; 207
     53c:	97 e0       	ldi	r25, 0x07	; 7
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <kilo_start+0x16e>
     542:	00 c0       	rjmp	.+0      	; 0x544 <kilo_start+0x174>
     544:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     546:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     548:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     54a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     54c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     54e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     550:	3c 98       	cbi	0x07, 4	; 7
     552:	9f ef       	ldi	r25, 0xFF	; 255
     554:	e1 ee       	ldi	r30, 0xE1	; 225
     556:	f4 e0       	ldi	r31, 0x04	; 4
     558:	91 50       	subi	r25, 0x01	; 1
     55a:	e0 40       	sbci	r30, 0x00	; 0
     55c:	f0 40       	sbci	r31, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <kilo_start+0x188>
     560:	00 c0       	rjmp	.+0      	; 0x562 <kilo_start+0x192>
     562:	00 00       	nop
     564:	44 cf       	rjmp	.-376    	; 0x3ee <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     566:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     568:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     56a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     56c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     56e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     570:	3c 98       	cbi	0x07, 4	; 7
     572:	ef ec       	ldi	r30, 0xCF	; 207
     574:	f7 e0       	ldi	r31, 0x07	; 7
     576:	31 97       	sbiw	r30, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <kilo_start+0x1a6>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <kilo_start+0x1ac>
     57c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     57e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     580:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     582:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     584:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     586:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     588:	3c 98       	cbi	0x07, 4	; 7
     58a:	ff ef       	ldi	r31, 0xFF	; 255
     58c:	21 ee       	ldi	r18, 0xE1	; 225
     58e:	84 e0       	ldi	r24, 0x04	; 4
     590:	f1 50       	subi	r31, 0x01	; 1
     592:	20 40       	sbci	r18, 0x00	; 0
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <kilo_start+0x1c0>
     598:	00 c0       	rjmp	.+0      	; 0x59a <kilo_start+0x1ca>
     59a:	00 00       	nop
     59c:	28 cf       	rjmp	.-432    	; 0x3ee <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     59e:	90 91 15 01 	lds	r25, 0x0115
     5a2:	80 91 16 01 	lds	r24, 0x0116
     5a6:	98 17       	cp	r25, r24
     5a8:	09 f4       	brne	.+2      	; 0x5ac <kilo_start+0x1dc>
     5aa:	21 cf       	rjmp	.-446    	; 0x3ee <kilo_start+0x1e>
                        prev_motion = cur_motion;
     5ac:	80 91 15 01 	lds	r24, 0x0115
     5b0:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     5b4:	80 91 15 01 	lds	r24, 0x0115
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	09 f4       	brne	.+2      	; 0x5be <kilo_start+0x1ee>
     5bc:	50 c0       	rjmp	.+160    	; 0x65e <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5be:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5c6:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	d9 f1       	breq	.+118    	; 0x644 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ce:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5d2:	90 92 b4 00 	sts	0x00B4, r9
     5d6:	8f e2       	ldi	r24, 0x2F	; 47
     5d8:	95 e7       	ldi	r25, 0x75	; 117
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <kilo_start+0x20a>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <kilo_start+0x210>
     5e0:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     5e2:	80 91 80 01 	lds	r24, 0x0180
     5e6:	90 91 7f 01 	lds	r25, 0x017F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ea:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     5ee:	80 93 b4 00 	sts	0x00B4, r24
     5f2:	fd ce       	rjmp	.-518    	; 0x3ee <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5f4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5f6:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5f8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5fa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5fc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5fe:	3c 98       	cbi	0x07, 4	; 7
     600:	f6 ce       	rjmp	.-532    	; 0x3ee <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     602:	f3 01       	movw	r30, r6
     604:	09 95       	icall
     606:	01 cf       	rjmp	.-510    	; 0x40a <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     608:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     60a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     60c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     60e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     610:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     612:	3c 98       	cbi	0x07, 4	; 7
     614:	ff ef       	ldi	r31, 0xFF	; 255
     616:	20 e7       	ldi	r18, 0x70	; 112
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	f1 50       	subi	r31, 0x01	; 1
     61c:	20 40       	sbci	r18, 0x00	; 0
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <kilo_start+0x24a>
     622:	00 c0       	rjmp	.+0      	; 0x624 <kilo_start+0x254>
     624:	00 00       	nop
     626:	6f cf       	rjmp	.-290    	; 0x506 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     628:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     62a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     62c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     62e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     630:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     632:	3c 98       	cbi	0x07, 4	; 7
     634:	dc ce       	rjmp	.-584    	; 0x3ee <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     636:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     638:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     63a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     63c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     63e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     640:	3c 9a       	sbi	0x07, 4	; 7
     642:	d5 ce       	rjmp	.-598    	; 0x3ee <kilo_start+0x1e>
     644:	ef e2       	ldi	r30, 0x2F	; 47
     646:	f5 e7       	ldi	r31, 0x75	; 117
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <kilo_start+0x278>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <kilo_start+0x27e>
     64e:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     650:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     654:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     658:	80 93 b4 00 	sts	0x00B4, r24
     65c:	c8 ce       	rjmp	.-624    	; 0x3ee <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     65e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     662:	10 92 b4 00 	sts	0x00B4, r1
     666:	8f e2       	ldi	r24, 0x2F	; 47
     668:	95 e7       	ldi	r25, 0x75	; 117
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <kilo_start+0x29a>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <kilo_start+0x2a0>
     670:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     672:	80 91 81 01 	lds	r24, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     676:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     67a:	10 92 b4 00 	sts	0x00B4, r1
     67e:	b7 ce       	rjmp	.-658    	; 0x3ee <kilo_start+0x1e>

00000680 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     680:	07 c0       	rjmp	.+14     	; 0x690 <delay+0x10>
     682:	ef ec       	ldi	r30, 0xCF	; 207
     684:	f7 e0       	ldi	r31, 0x07	; 7
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <delay+0x6>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <delay+0xc>
     68c:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     68e:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	b9 f7       	brne	.-18     	; 0x682 <delay+0x2>
     694:	08 95       	ret

00000696 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     696:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     69a:	60 93 b4 00 	sts	0x00B4, r22
     69e:	08 95       	ret

000006a0 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6a6:	80 93 b4 00 	sts	0x00B4, r24
     6aa:	8f e0       	ldi	r24, 0x0F	; 15
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	ef ec       	ldi	r30, 0xCF	; 207
     6b0:	f7 e0       	ldi	r31, 0x07	; 7
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <spinup_motors+0x12>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <spinup_motors+0x18>
     6b8:	00 00       	nop
     6ba:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6bc:	c1 f7       	brne	.-16     	; 0x6ae <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     6be:	08 95       	ret

000006c0 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     6c0:	80 91 4b 01 	lds	r24, 0x014B
     6c4:	81 11       	cpse	r24, r1
     6c6:	1e c0       	rjmp	.+60     	; 0x704 <get_ambientlight+0x44>
        cli();
     6c8:	f8 94       	cli
        adc_setup_conversion(7);
     6ca:	87 e0       	ldi	r24, 0x07	; 7
     6cc:	80 93 7c 00 	sts	0x007C, r24
     6d0:	83 e8       	ldi	r24, 0x83	; 131
     6d2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6d6:	80 91 7a 00 	lds	r24, 0x007A
     6da:	80 64       	ori	r24, 0x40	; 64
     6dc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6e0:	80 91 7a 00 	lds	r24, 0x007A
     6e4:	86 fd       	sbrc	r24, 6
     6e6:	fc cf       	rjmp	.-8      	; 0x6e0 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     6e8:	80 91 78 00 	lds	r24, 0x0078
     6ec:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6f0:	10 92 7c 00 	sts	0x007C, r1
     6f4:	23 ea       	ldi	r18, 0xA3	; 163
     6f6:	20 93 7a 00 	sts	0x007A, r18
     6fa:	21 e0       	ldi	r18, 0x01	; 1
     6fc:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     700:	78 94       	sei
     702:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     708:	08 95       	ret

0000070a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     70a:	80 91 4b 01 	lds	r24, 0x014B
     70e:	81 11       	cpse	r24, r1
     710:	1e c0       	rjmp	.+60     	; 0x74e <get_temperature+0x44>
        cli();
     712:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     714:	88 ec       	ldi	r24, 0xC8	; 200
     716:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     71a:	87 e8       	ldi	r24, 0x87	; 135
     71c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     720:	80 91 7a 00 	lds	r24, 0x007A
     724:	80 64       	ori	r24, 0x40	; 64
     726:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     72a:	80 91 7a 00 	lds	r24, 0x007A
     72e:	86 fd       	sbrc	r24, 6
     730:	fc cf       	rjmp	.-8      	; 0x72a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     732:	80 91 78 00 	lds	r24, 0x0078
     736:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     73a:	10 92 7c 00 	sts	0x007C, r1
     73e:	23 ea       	ldi	r18, 0xA3	; 163
     740:	20 93 7a 00 	sts	0x007A, r18
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     74a:	78 94       	sei
     74c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     752:	08 95       	ret

00000754 <rand_hard>:

uint8_t rand_hard() {
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	e0 e0       	ldi	r30, 0x00	; 0
     75e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     760:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     762:	03 ea       	ldi	r16, 0xA3	; 163
     764:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     766:	d6 e0       	ldi	r29, 0x06	; 6
     768:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     76a:	a1 e0       	ldi	r26, 0x01	; 1
     76c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     76e:	60 e8       	ldi	r22, 0x80	; 128
     770:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     772:	f8 94       	cli
            adc_setup_conversion(6);
     774:	d0 93 7c 00 	sts	0x007C, r29
     778:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     77c:	90 91 7a 00 	lds	r25, 0x007A
     780:	90 64       	ori	r25, 0x40	; 64
     782:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     786:	90 91 7a 00 	lds	r25, 0x007A
     78a:	96 fd       	sbrc	r25, 6
     78c:	fc cf       	rjmp	.-8      	; 0x786 <rand_hard+0x32>
            a = ADCW&0x1;
     78e:	20 91 78 00 	lds	r18, 0x0078
     792:	30 91 79 00 	lds	r19, 0x0079
     796:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     798:	90 91 7a 00 	lds	r25, 0x007A
     79c:	90 64       	ori	r25, 0x40	; 64
     79e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7a2:	90 91 7a 00 	lds	r25, 0x007A
     7a6:	96 fd       	sbrc	r25, 6
     7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <rand_hard+0x4e>
            b = ADCW&0x1;
     7aa:	40 91 78 00 	lds	r20, 0x0078
     7ae:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     7b2:	10 92 7c 00 	sts	0x007C, r1
     7b6:	00 93 7a 00 	sts	0x007A, r16
     7ba:	10 93 7b 00 	sts	0x007B, r17
            sei();
     7be:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     7c0:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     7c2:	24 13       	cpse	r18, r20
     7c4:	03 c0       	rjmp	.+6      	; 0x7cc <rand_hard+0x78>
     7c6:	61 50       	subi	r22, 0x01	; 1
     7c8:	71 09       	sbc	r23, r1
     7ca:	99 f6       	brne	.-90     	; 0x772 <rand_hard+0x1e>
        if (a)
     7cc:	22 23       	and	r18, r18
     7ce:	39 f0       	breq	.+14     	; 0x7de <rand_hard+0x8a>
            num |= (1<<i);
     7d0:	9d 01       	movw	r18, r26
     7d2:	0e 2e       	mov	r0, r30
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <rand_hard+0x84>
     7d6:	22 0f       	add	r18, r18
     7d8:	0a 94       	dec	r0
     7da:	ea f7       	brpl	.-6      	; 0x7d6 <rand_hard+0x82>
     7dc:	82 2b       	or	r24, r18
     7de:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     7e0:	e8 30       	cpi	r30, 0x08	; 8
     7e2:	f1 05       	cpc	r31, r1
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <rand_hard+0x94>
     7e6:	c3 cf       	rjmp	.-122    	; 0x76e <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     7f2:	80 91 00 01 	lds	r24, 0x0100
     7f6:	98 2f       	mov	r25, r24
     7f8:	99 0f       	add	r25, r25
     7fa:	99 0f       	add	r25, r25
     7fc:	99 0f       	add	r25, r25
     7fe:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     800:	90 91 14 01 	lds	r25, 0x0114
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	29 0f       	add	r18, r25
     808:	20 93 14 01 	sts	0x0114, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     80c:	28 2f       	mov	r18, r24
     80e:	22 95       	swap	r18
     810:	26 95       	lsr	r18
     812:	27 70       	andi	r18, 0x07	; 7
     814:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     816:	96 95       	lsr	r25
     818:	96 95       	lsr	r25
     81a:	89 27       	eor	r24, r25
     81c:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     820:	08 95       	ret

00000822 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     822:	80 93 00 01 	sts	0x0100, r24
     826:	08 95       	ret

00000828 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     828:	80 91 4b 01 	lds	r24, 0x014B
     82c:	81 11       	cpse	r24, r1
     82e:	16 c0       	rjmp	.+44     	; 0x85c <get_voltage+0x34>
        cli();                                    // disable interrupts
     830:	f8 94       	cli
        adc_setup_conversion(6);
     832:	86 e0       	ldi	r24, 0x06	; 6
     834:	80 93 7c 00 	sts	0x007C, r24
     838:	83 e8       	ldi	r24, 0x83	; 131
     83a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     83e:	80 91 7a 00 	lds	r24, 0x007A
     842:	80 64       	ori	r24, 0x40	; 64
     844:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     848:	80 91 7a 00 	lds	r24, 0x007A
     84c:	86 fd       	sbrc	r24, 6
     84e:	fc cf       	rjmp	.-8      	; 0x848 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     850:	80 91 78 00 	lds	r24, 0x0078
     854:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     858:	78 94       	sei
     85a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     860:	08 95       	ret

00000862 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     862:	2f 92       	push	r2
     864:	3f 92       	push	r3
     866:	4f 92       	push	r4
     868:	5f 92       	push	r5
     86a:	6f 92       	push	r6
     86c:	7f 92       	push	r7
     86e:	8f 92       	push	r8
     870:	9f 92       	push	r9
     872:	af 92       	push	r10
     874:	bf 92       	push	r11
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <estimate_distance+0x26>
     888:	00 d0       	rcall	.+0      	; 0x88a <estimate_distance+0x28>
     88a:	00 d0       	rcall	.+0      	; 0x88c <estimate_distance+0x2a>
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     892:	dc 01       	movw	r26, r24
     894:	12 96       	adiw	r26, 0x02	; 2
     896:	0d 90       	ld	r0, X+
     898:	bc 91       	ld	r27, X
     89a:	a0 2d       	mov	r26, r0
     89c:	be 83       	std	Y+6, r27	; 0x06
     89e:	ad 83       	std	Y+5, r26	; 0x05
     8a0:	a4 38       	cpi	r26, 0x84	; 132
     8a2:	e3 e0       	ldi	r30, 0x03	; 3
     8a4:	be 07       	cpc	r27, r30
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <estimate_distance+0x48>
     8a8:	c9 c0       	rjmp	.+402    	; 0xa3c <__stack+0x13d>
        if (dist->high_gain > kilo_irhigh[0]) {
     8aa:	80 91 25 01 	lds	r24, 0x0125
     8ae:	90 91 26 01 	lds	r25, 0x0126
     8b2:	8a 17       	cp	r24, r26
     8b4:	9b 07       	cpc	r25, r27
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <estimate_distance+0x58>
     8b8:	37 c1       	rjmp	.+622    	; 0xb28 <__stack+0x229>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8ba:	00 91 27 01 	lds	r16, 0x0127
     8be:	10 91 28 01 	lds	r17, 0x0128
     8c2:	0a 17       	cp	r16, r26
     8c4:	1b 07       	cpc	r17, r27
     8c6:	08 f4       	brcc	.+2      	; 0x8ca <estimate_distance+0x68>
     8c8:	2f c2       	rjmp	.+1118   	; 0xd28 <__stack+0x429>
     8ca:	00 91 29 01 	lds	r16, 0x0129
     8ce:	10 91 2a 01 	lds	r17, 0x012A
     8d2:	0a 17       	cp	r16, r26
     8d4:	1b 07       	cpc	r17, r27
     8d6:	08 f4       	brcc	.+2      	; 0x8da <estimate_distance+0x78>
     8d8:	2f c2       	rjmp	.+1118   	; 0xd38 <__stack+0x439>
     8da:	00 91 2b 01 	lds	r16, 0x012B
     8de:	10 91 2c 01 	lds	r17, 0x012C
     8e2:	0a 17       	cp	r16, r26
     8e4:	1b 07       	cpc	r17, r27
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <estimate_distance+0x88>
     8e8:	2f c2       	rjmp	.+1118   	; 0xd48 <__stack+0x449>
     8ea:	00 91 2d 01 	lds	r16, 0x012D
     8ee:	10 91 2e 01 	lds	r17, 0x012E
     8f2:	0a 17       	cp	r16, r26
     8f4:	1b 07       	cpc	r17, r27
     8f6:	08 f4       	brcc	.+2      	; 0x8fa <estimate_distance+0x98>
     8f8:	2f c2       	rjmp	.+1118   	; 0xd58 <__stack+0x459>
     8fa:	00 91 2f 01 	lds	r16, 0x012F
     8fe:	10 91 30 01 	lds	r17, 0x0130
     902:	0a 17       	cp	r16, r26
     904:	1b 07       	cpc	r17, r27
     906:	08 f4       	brcc	.+2      	; 0x90a <__stack+0xb>
     908:	ef c1       	rjmp	.+990    	; 0xce8 <__stack+0x3e9>
     90a:	00 91 31 01 	lds	r16, 0x0131
     90e:	10 91 32 01 	lds	r17, 0x0132
     912:	0a 17       	cp	r16, r26
     914:	1b 07       	cpc	r17, r27
     916:	08 f4       	brcc	.+2      	; 0x91a <__stack+0x1b>
     918:	27 c2       	rjmp	.+1102   	; 0xd68 <__stack+0x469>
     91a:	00 91 33 01 	lds	r16, 0x0133
     91e:	10 91 34 01 	lds	r17, 0x0134
     922:	0a 17       	cp	r16, r26
     924:	1b 07       	cpc	r17, r27
     926:	08 f4       	brcc	.+2      	; 0x92a <__stack+0x2b>
     928:	27 c2       	rjmp	.+1102   	; 0xd78 <__stack+0x479>
     92a:	00 91 35 01 	lds	r16, 0x0135
     92e:	10 91 36 01 	lds	r17, 0x0136
     932:	0a 17       	cp	r16, r26
     934:	1b 07       	cpc	r17, r27
     936:	08 f4       	brcc	.+2      	; 0x93a <__stack+0x3b>
     938:	27 c2       	rjmp	.+1102   	; 0xd88 <__stack+0x489>
     93a:	00 91 37 01 	lds	r16, 0x0137
     93e:	10 91 38 01 	lds	r17, 0x0138
     942:	0a 17       	cp	r16, r26
     944:	1b 07       	cpc	r17, r27
     946:	08 f4       	brcc	.+2      	; 0x94a <__stack+0x4b>
     948:	27 c2       	rjmp	.+1102   	; 0xd98 <__stack+0x499>
     94a:	00 91 39 01 	lds	r16, 0x0139
     94e:	10 91 3a 01 	lds	r17, 0x013A
     952:	0a 17       	cp	r16, r26
     954:	1b 07       	cpc	r17, r27
     956:	08 f4       	brcc	.+2      	; 0x95a <__stack+0x5b>
     958:	27 c2       	rjmp	.+1102   	; 0xda8 <__stack+0x4a9>
     95a:	00 91 3b 01 	lds	r16, 0x013B
     95e:	10 91 3c 01 	lds	r17, 0x013C
     962:	0a 17       	cp	r16, r26
     964:	1b 07       	cpc	r17, r27
     966:	08 f4       	brcc	.+2      	; 0x96a <__stack+0x6b>
     968:	23 c2       	rjmp	.+1094   	; 0xdb0 <__stack+0x4b1>
     96a:	00 91 3d 01 	lds	r16, 0x013D
     96e:	10 91 3e 01 	lds	r17, 0x013E
     972:	0a 17       	cp	r16, r26
     974:	1b 07       	cpc	r17, r27
     976:	08 f4       	brcc	.+2      	; 0x97a <__stack+0x7b>
     978:	23 c2       	rjmp	.+1094   	; 0xdc0 <__stack+0x4c1>
     97a:	00 91 3f 01 	lds	r16, 0x013F
     97e:	10 91 40 01 	lds	r17, 0x0140
     982:	0a 17       	cp	r16, r26
     984:	1b 07       	cpc	r17, r27
     986:	08 f4       	brcc	.+2      	; 0x98a <__stack+0x8b>
     988:	23 c2       	rjmp	.+1094   	; 0xdd0 <__stack+0x4d1>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 ed       	ldi	r26, 0xD0	; 208
     990:	b0 e4       	ldi	r27, 0x40	; 64
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	9a 83       	std	Y+2, r25	; 0x02
     996:	ab 83       	std	Y+3, r26	; 0x03
     998:	bc 83       	std	Y+4, r27	; 0x04
     99a:	4c e0       	ldi	r20, 0x0C	; 12
     99c:	e4 2e       	mov	r14, r20
     99e:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9a0:	f7 01       	movw	r30, r14
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	eb 5d       	subi	r30, 0xDB	; 219
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	b8 01       	movw	r22, r16
     9b0:	68 1b       	sub	r22, r24
     9b2:	79 0b       	sbc	r23, r25
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__addsf3>
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9c8:	ad 81       	ldd	r26, Y+5	; 0x05
     9ca:	be 81       	ldd	r27, Y+6	; 0x06
     9cc:	bd 01       	movw	r22, r26
     9ce:	bb 0f       	add	r27, r27
     9d0:	88 0b       	sbc	r24, r24
     9d2:	99 0b       	sbc	r25, r25
     9d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <__floatsisf>
     9d8:	4b 01       	movw	r8, r22
     9da:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     9dc:	b8 01       	movw	r22, r16
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     9e6:	2b 01       	movw	r4, r22
     9e8:	3c 01       	movw	r6, r24
     9ea:	29 81       	ldd	r18, Y+1	; 0x01
     9ec:	3a 81       	ldd	r19, Y+2	; 0x02
     9ee:	4b 81       	ldd	r20, Y+3	; 0x03
     9f0:	5c 81       	ldd	r21, Y+4	; 0x04
     9f2:	c7 01       	movw	r24, r14
     9f4:	b6 01       	movw	r22, r12
     9f6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     9fa:	9b 01       	movw	r18, r22
     9fc:	ac 01       	movw	r20, r24
     9fe:	c3 01       	movw	r24, r6
     a00:	b2 01       	movw	r22, r4
     a02:	0e 94 af 0a 	call	0x155e	; 0x155e <__subsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 af 0a 	call	0x155e	; 0x155e <__subsf3>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e2       	ldi	r20, 0x20	; 32
     a18:	51 e4       	ldi	r21, 0x41	; 65
     a1a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
            b=((int)((int)b/(int)slope));
     a1e:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fixsfsi>
     a22:	8b 01       	movw	r16, r22
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fixsfsi>
     a2c:	ab 01       	movw	r20, r22
     a2e:	bc 01       	movw	r22, r24
     a30:	c8 01       	movw	r24, r16
     a32:	ba 01       	movw	r22, r20
     a34:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__divmodhi4>
            dist_high=b;
     a38:	16 2f       	mov	r17, r22
     a3a:	77 c0       	rjmp	.+238    	; 0xb2a <__stack+0x22b>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a3c:	dc 01       	movw	r26, r24
     a3e:	cd 90       	ld	r12, X+
     a40:	dc 90       	ld	r13, X
     a42:	80 91 4c 01 	lds	r24, 0x014C
     a46:	90 91 4d 01 	lds	r25, 0x014D
     a4a:	8c 15       	cp	r24, r12
     a4c:	9d 05       	cpc	r25, r13
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <__stack+0x153>
     a50:	8c c0       	rjmp	.+280    	; 0xb6a <__stack+0x26b>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a52:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a54:	e0 90 4e 01 	lds	r14, 0x014E
     a58:	f0 90 4f 01 	lds	r15, 0x014F
     a5c:	ec 14       	cp	r14, r12
     a5e:	fd 04       	cpc	r15, r13
     a60:	08 f4       	brcc	.+2      	; 0xa64 <__stack+0x165>
     a62:	5e c1       	rjmp	.+700    	; 0xd20 <__stack+0x421>
     a64:	e0 90 50 01 	lds	r14, 0x0150
     a68:	f0 90 51 01 	lds	r15, 0x0151
     a6c:	ec 14       	cp	r14, r12
     a6e:	fd 04       	cpc	r15, r13
     a70:	08 f4       	brcc	.+2      	; 0xa74 <__stack+0x175>
     a72:	5e c1       	rjmp	.+700    	; 0xd30 <__stack+0x431>
     a74:	e0 90 52 01 	lds	r14, 0x0152
     a78:	f0 90 53 01 	lds	r15, 0x0153
     a7c:	ec 14       	cp	r14, r12
     a7e:	fd 04       	cpc	r15, r13
     a80:	08 f4       	brcc	.+2      	; 0xa84 <__stack+0x185>
     a82:	5e c1       	rjmp	.+700    	; 0xd40 <__stack+0x441>
     a84:	e0 90 54 01 	lds	r14, 0x0154
     a88:	f0 90 55 01 	lds	r15, 0x0155
     a8c:	ec 14       	cp	r14, r12
     a8e:	fd 04       	cpc	r15, r13
     a90:	08 f4       	brcc	.+2      	; 0xa94 <__stack+0x195>
     a92:	5e c1       	rjmp	.+700    	; 0xd50 <__stack+0x451>
     a94:	e0 90 56 01 	lds	r14, 0x0156
     a98:	f0 90 57 01 	lds	r15, 0x0157
     a9c:	ec 14       	cp	r14, r12
     a9e:	fd 04       	cpc	r15, r13
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <__stack+0x1a5>
     aa2:	c3 c0       	rjmp	.+390    	; 0xc2a <__stack+0x32b>
     aa4:	e0 90 58 01 	lds	r14, 0x0158
     aa8:	f0 90 59 01 	lds	r15, 0x0159
     aac:	ec 14       	cp	r14, r12
     aae:	fd 04       	cpc	r15, r13
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <__stack+0x1b5>
     ab2:	56 c1       	rjmp	.+684    	; 0xd60 <__stack+0x461>
     ab4:	e0 90 5a 01 	lds	r14, 0x015A
     ab8:	f0 90 5b 01 	lds	r15, 0x015B
     abc:	ec 14       	cp	r14, r12
     abe:	fd 04       	cpc	r15, r13
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <__stack+0x1c5>
     ac2:	56 c1       	rjmp	.+684    	; 0xd70 <__stack+0x471>
     ac4:	e0 90 5c 01 	lds	r14, 0x015C
     ac8:	f0 90 5d 01 	lds	r15, 0x015D
     acc:	ec 14       	cp	r14, r12
     ace:	fd 04       	cpc	r15, r13
     ad0:	08 f4       	brcc	.+2      	; 0xad4 <__stack+0x1d5>
     ad2:	56 c1       	rjmp	.+684    	; 0xd80 <__stack+0x481>
     ad4:	e0 90 5e 01 	lds	r14, 0x015E
     ad8:	f0 90 5f 01 	lds	r15, 0x015F
     adc:	ec 14       	cp	r14, r12
     ade:	fd 04       	cpc	r15, r13
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	56 c1       	rjmp	.+684    	; 0xd90 <__stack+0x491>
     ae4:	e0 90 60 01 	lds	r14, 0x0160
     ae8:	f0 90 61 01 	lds	r15, 0x0161
     aec:	ec 14       	cp	r14, r12
     aee:	fd 04       	cpc	r15, r13
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <__stack+0x1f5>
     af2:	56 c1       	rjmp	.+684    	; 0xda0 <__stack+0x4a1>
     af4:	e0 90 62 01 	lds	r14, 0x0162
     af8:	f0 90 63 01 	lds	r15, 0x0163
     afc:	ec 14       	cp	r14, r12
     afe:	fd 04       	cpc	r15, r13
     b00:	08 f4       	brcc	.+2      	; 0xb04 <__stack+0x205>
     b02:	5a c1       	rjmp	.+692    	; 0xdb8 <__stack+0x4b9>
     b04:	e0 90 64 01 	lds	r14, 0x0164
     b08:	f0 90 65 01 	lds	r15, 0x0165
     b0c:	ec 14       	cp	r14, r12
     b0e:	fd 04       	cpc	r15, r13
     b10:	08 f4       	brcc	.+2      	; 0xb14 <__stack+0x215>
     b12:	5a c1       	rjmp	.+692    	; 0xdc8 <__stack+0x4c9>
     b14:	e0 90 66 01 	lds	r14, 0x0166
     b18:	f0 90 67 01 	lds	r15, 0x0167
     b1c:	ec 14       	cp	r14, r12
     b1e:	fd 04       	cpc	r15, r13
     b20:	08 f4       	brcc	.+2      	; 0xb24 <__stack+0x225>
     b22:	5a c1       	rjmp	.+692    	; 0xdd8 <__stack+0x4d9>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b24:	0a e5       	ldi	r16, 0x5A	; 90
     b26:	31 c0       	rjmp	.+98     	; 0xb8a <__stack+0x28b>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b28:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b2a:	ed 81       	ldd	r30, Y+5	; 0x05
     b2c:	fe 81       	ldd	r31, Y+6	; 0x06
     b2e:	ed 3b       	cpi	r30, 0xBD	; 189
     b30:	f2 40       	sbci	r31, 0x02	; 2
     b32:	fc f4       	brge	.+62     	; 0xb72 <__stack+0x273>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b34:	81 e2       	ldi	r24, 0x21	; 33
     b36:	81 0f       	add	r24, r17
    }
}
     b38:	26 96       	adiw	r28, 0x06	; 6
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	9f 90       	pop	r9
     b5a:	8f 90       	pop	r8
     b5c:	7f 90       	pop	r7
     b5e:	6f 90       	pop	r6
     b60:	5f 90       	pop	r5
     b62:	4f 90       	pop	r4
     b64:	3f 90       	pop	r3
     b66:	2f 90       	pop	r2
     b68:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b6a:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b6c:	81 e2       	ldi	r24, 0x21	; 33
     b6e:	80 0f       	add	r24, r16
     b70:	e3 cf       	rjmp	.-58     	; 0xb38 <__stack+0x239>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b72:	d1 01       	movw	r26, r2
     b74:	cd 90       	ld	r12, X+
     b76:	dc 90       	ld	r13, X
     b78:	80 91 4c 01 	lds	r24, 0x014C
     b7c:	90 91 4d 01 	lds	r25, 0x014D
     b80:	8c 15       	cp	r24, r12
     b82:	9d 05       	cpc	r25, r13
     b84:	08 f0       	brcs	.+2      	; 0xb88 <__stack+0x289>
     b86:	66 cf       	rjmp	.-308    	; 0xa54 <__stack+0x155>
            dist_low=0;
     b88:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b8a:	1f 3f       	cpi	r17, 0xFF	; 255
     b8c:	79 f3       	breq	.-34     	; 0xb6c <__stack+0x26d>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b8e:	ed 81       	ldd	r30, Y+5	; 0x05
     b90:	fe 81       	ldd	r31, Y+6	; 0x06
     b92:	bf 01       	movw	r22, r30
     b94:	ff 0f       	add	r31, r31
     b96:	88 0b       	sbc	r24, r24
     b98:	99 0b       	sbc	r25, r25
     b9a:	0e 94 c6 0b 	call	0x178c	; 0x178c <__floatsisf>
     b9e:	6b 01       	movw	r12, r22
     ba0:	7c 01       	movw	r14, r24
     ba2:	61 2f       	mov	r22, r17
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     bae:	4b 01       	movw	r8, r22
     bb0:	5c 01       	movw	r10, r24
     bb2:	a7 01       	movw	r20, r14
     bb4:	96 01       	movw	r18, r12
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	81 e6       	ldi	r24, 0x61	; 97
     bbc:	94 e4       	ldi	r25, 0x44	; 68
     bbe:	0e 94 af 0a 	call	0x155e	; 0x155e <__subsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	c5 01       	movw	r24, r10
     bc8:	b4 01       	movw	r22, r8
     bca:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     bce:	4b 01       	movw	r8, r22
     bd0:	5c 01       	movw	r10, r24
     bd2:	60 2f       	mov	r22, r16
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     bde:	2b 01       	movw	r4, r22
     be0:	3c 01       	movw	r6, r24
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	4f e2       	ldi	r20, 0x2F	; 47
     be8:	54 e4       	ldi	r21, 0x44	; 68
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	0e 94 af 0a 	call	0x155e	; 0x155e <__subsf3>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	c3 01       	movw	r24, r6
     bf8:	b2 01       	movw	r22, r4
     bfa:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c5 01       	movw	r24, r10
     c04:	b4 01       	movw	r22, r8
     c06:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__addsf3>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	48 e4       	ldi	r20, 0x48	; 72
     c10:	53 e4       	ldi	r21, 0x43	; 67
     c12:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__divsf3>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	44 e0       	ldi	r20, 0x04	; 4
     c1c:	52 e4       	ldi	r21, 0x42	; 66
     c1e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__addsf3>
     c22:	0e 94 95 0b 	call	0x172a	; 0x172a <__fixunssfsi>
     c26:	86 2f       	mov	r24, r22
     c28:	87 cf       	rjmp	.-242    	; 0xb38 <__stack+0x239>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c2a:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c2c:	85 e0       	ldi	r24, 0x05	; 5
     c2e:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	fc 01       	movw	r30, r24
     c36:	e6 5b       	subi	r30, 0xB6	; 182
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	80 81       	ld	r24, Z
     c3c:	91 81       	ldd	r25, Z+1	; 0x01
     c3e:	b7 01       	movw	r22, r14
     c40:	68 1b       	sub	r22, r24
     c42:	79 0b       	sbc	r23, r25
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     c4c:	9b 01       	movw	r18, r22
     c4e:	ac 01       	movw	r20, r24
     c50:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__addsf3>
     c54:	4b 01       	movw	r8, r22
     c56:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c58:	b6 01       	movw	r22, r12
     c5a:	dd 0c       	add	r13, r13
     c5c:	88 0b       	sbc	r24, r24
     c5e:	99 0b       	sbc	r25, r25
     c60:	0e 94 c6 0b 	call	0x178c	; 0x178c <__floatsisf>
     c64:	2b 01       	movw	r4, r22
     c66:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c68:	b7 01       	movw	r22, r14
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     c72:	6b 01       	movw	r12, r22
     c74:	7c 01       	movw	r14, r24
     c76:	60 2f       	mov	r22, r16
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	5f e3       	ldi	r21, 0x3F	; 63
     c8a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	a9 01       	movw	r20, r18
     c94:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__addsf3>
     c98:	a5 01       	movw	r20, r10
     c9a:	94 01       	movw	r18, r8
     c9c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     ca0:	9b 01       	movw	r18, r22
     ca2:	ac 01       	movw	r20, r24
     ca4:	c7 01       	movw	r24, r14
     ca6:	b6 01       	movw	r22, r12
     ca8:	0e 94 af 0a 	call	0x155e	; 0x155e <__subsf3>
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cb0:	c3 01       	movw	r24, r6
     cb2:	b2 01       	movw	r22, r4
     cb4:	0e 94 af 0a 	call	0x155e	; 0x155e <__subsf3>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e2       	ldi	r20, 0x20	; 32
     cbe:	51 e4       	ldi	r21, 0x41	; 65
     cc0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
                b=((int)((int)b/(int)slope));
     cc4:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fixsfsi>
     cc8:	7b 01       	movw	r14, r22
     cca:	c5 01       	movw	r24, r10
     ccc:	b4 01       	movw	r22, r8
     cce:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fixsfsi>
     cd2:	ab 01       	movw	r20, r22
     cd4:	bc 01       	movw	r22, r24
     cd6:	c7 01       	movw	r24, r14
     cd8:	ba 01       	movw	r22, r20
     cda:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__divmodhi4>
                dist_low=b;
     cde:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     ce0:	6f 3f       	cpi	r22, 0xFF	; 255
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__stack+0x3e7>
     ce4:	52 cf       	rjmp	.-348    	; 0xb8a <__stack+0x28b>
     ce6:	26 cf       	rjmp	.-436    	; 0xb34 <__stack+0x235>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce8:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     cea:	85 e0       	ldi	r24, 0x05	; 5
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	7c 01       	movw	r14, r24
     cf0:	f1 e0       	ldi	r31, 0x01	; 1
     cf2:	ef 1a       	sub	r14, r31
     cf4:	f1 08       	sbc	r15, r1
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__floatunsisf>
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	5f e3       	ldi	r21, 0x3F	; 63
     d08:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__mulsf3>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	a9 01       	movw	r20, r18
     d12:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__addsf3>
     d16:	69 83       	std	Y+1, r22	; 0x01
     d18:	7a 83       	std	Y+2, r23	; 0x02
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d1e:	40 ce       	rjmp	.-896    	; 0x9a0 <__stack+0xa1>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d20:	01 e0       	ldi	r16, 0x01	; 1
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	84 cf       	rjmp	.-248    	; 0xc30 <__stack+0x331>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	df cf       	rjmp	.-66     	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d30:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	7c cf       	rjmp	.-264    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d38:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	d7 cf       	rjmp	.-82     	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d40:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	74 cf       	rjmp	.-280    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d48:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	cf cf       	rjmp	.-98     	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d50:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	6c cf       	rjmp	.-296    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d58:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	c7 cf       	rjmp	.-114    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d60:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d62:	86 e0       	ldi	r24, 0x06	; 6
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	64 cf       	rjmp	.-312    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d68:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d6a:	86 e0       	ldi	r24, 0x06	; 6
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	bf cf       	rjmp	.-130    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d70:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d72:	87 e0       	ldi	r24, 0x07	; 7
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	5c cf       	rjmp	.-328    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d78:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d7a:	87 e0       	ldi	r24, 0x07	; 7
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	b7 cf       	rjmp	.-146    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d80:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d82:	88 e0       	ldi	r24, 0x08	; 8
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	54 cf       	rjmp	.-344    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d88:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d8a:	88 e0       	ldi	r24, 0x08	; 8
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	af cf       	rjmp	.-162    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d90:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d92:	89 e0       	ldi	r24, 0x09	; 9
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	4c cf       	rjmp	.-360    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d98:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d9a:	89 e0       	ldi	r24, 0x09	; 9
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a7 cf       	rjmp	.-178    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     da0:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     da2:	8a e0       	ldi	r24, 0x0A	; 10
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	44 cf       	rjmp	.-376    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da8:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     daa:	8a e0       	ldi	r24, 0x0A	; 10
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9f cf       	rjmp	.-194    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db0:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     db2:	8b e0       	ldi	r24, 0x0B	; 11
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9b cf       	rjmp	.-202    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     db8:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     dba:	8b e0       	ldi	r24, 0x0B	; 11
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	38 cf       	rjmp	.-400    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dc0:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     dc2:	8c e0       	ldi	r24, 0x0C	; 12
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	93 cf       	rjmp	.-218    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dc8:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     dca:	8c e0       	ldi	r24, 0x0C	; 12
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	30 cf       	rjmp	.-416    	; 0xc30 <__stack+0x331>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dd0:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     dd2:	8d e0       	ldi	r24, 0x0D	; 13
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	8b cf       	rjmp	.-234    	; 0xcee <__stack+0x3ef>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd8:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     dda:	8d e0       	ldi	r24, 0x0D	; 13
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	28 cf       	rjmp	.-432    	; 0xc30 <__stack+0x331>

00000de0 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
    tx_clock += tx_increment;
     e02:	20 91 6b 01 	lds	r18, 0x016B
     e06:	30 91 6c 01 	lds	r19, 0x016C
     e0a:	80 91 69 01 	lds	r24, 0x0169
     e0e:	90 91 6a 01 	lds	r25, 0x016A
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	90 93 6c 01 	sts	0x016C, r25
     e1a:	80 93 6b 01 	sts	0x016B, r24
    tx_increment = 0xFF;
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	90 93 6a 01 	sts	0x016A, r25
     e26:	80 93 69 01 	sts	0x0169, r24
    OCR0A = tx_increment;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e2e:	80 91 47 01 	lds	r24, 0x0147
     e32:	90 91 48 01 	lds	r25, 0x0148
     e36:	a0 91 49 01 	lds	r26, 0x0149
     e3a:	b0 91 4a 01 	lds	r27, 0x014A
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	a1 1d       	adc	r26, r1
     e42:	b1 1d       	adc	r27, r1
     e44:	80 93 47 01 	sts	0x0147, r24
     e48:	90 93 48 01 	sts	0x0148, r25
     e4c:	a0 93 49 01 	sts	0x0149, r26
     e50:	b0 93 4a 01 	sts	0x014A, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e54:	80 91 4b 01 	lds	r24, 0x014B
     e58:	81 11       	cpse	r24, r1
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <__vector_14+0x9a>
     e5c:	80 91 7a 01 	lds	r24, 0x017A
     e60:	90 91 7b 01 	lds	r25, 0x017B
     e64:	20 91 6b 01 	lds	r18, 0x016B
     e68:	30 91 6c 01 	lds	r19, 0x016C
     e6c:	82 17       	cp	r24, r18
     e6e:	93 07       	cpc	r25, r19
     e70:	20 f4       	brcc	.+8      	; 0xe7a <__vector_14+0x9a>
     e72:	80 91 17 01 	lds	r24, 0x0117
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	89 f0       	breq	.+34     	; 0xe9c <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e9c:	e0 91 03 01 	lds	r30, 0x0103
     ea0:	f0 91 04 01 	lds	r31, 0x0104
     ea4:	09 95       	icall
        if (msg) {
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	41 f3       	breq	.-48     	; 0xe7a <__vector_14+0x9a>
            if (message_send(msg)) {
     eaa:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <message_send>
     eae:	81 11       	cpse	r24, r1
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     eb2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <rand>
     eb6:	99 27       	eor	r25, r25
     eb8:	90 93 6a 01 	sts	0x016A, r25
     ebc:	80 93 69 01 	sts	0x0169, r24
                OCR0A = tx_increment;
     ec0:	87 bd       	out	0x27, r24	; 39
     ec2:	db cf       	rjmp	.-74     	; 0xe7a <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ec4:	e0 91 01 01 	lds	r30, 0x0101
     ec8:	f0 91 02 01 	lds	r31, 0x0102
     ecc:	09 95       	icall
                tx_clock = 0;
     ece:	10 92 6c 01 	sts	0x016C, r1
     ed2:	10 92 6b 01 	sts	0x016B, r1
     ed6:	d1 cf       	rjmp	.-94     	; 0xe7a <__vector_14+0x9a>

00000ed8 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     ed8:	80 ff       	sbrs	r24, 0
     eda:	11 c0       	rjmp	.+34     	; 0xefe <set_color+0x26>
        DDRD |= (1<<5);
     edc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     ede:	81 ff       	sbrs	r24, 1
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <set_color+0x2c>
        DDRD |= (1<<4);
     ee2:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     ee4:	82 ff       	sbrs	r24, 2
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <set_color+0x32>
        DDRC |= (1<<3);
     ee8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     eea:	83 ff       	sbrs	r24, 3
     eec:	11 c0       	rjmp	.+34     	; 0xf10 <set_color+0x38>
        DDRC |= (1<<2);
     eee:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     ef0:	84 ff       	sbrs	r24, 4
     ef2:	11 c0       	rjmp	.+34     	; 0xf16 <set_color+0x3e>
        DDRC |= (1<<5);
     ef4:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     ef6:	85 fd       	sbrc	r24, 5
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     efa:	3c 98       	cbi	0x07, 4	; 7
     efc:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     efe:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f00:	81 fd       	sbrc	r24, 1
     f02:	ef cf       	rjmp	.-34     	; 0xee2 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f04:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f06:	82 fd       	sbrc	r24, 2
     f08:	ef cf       	rjmp	.-34     	; 0xee8 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f0a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f0c:	83 fd       	sbrc	r24, 3
     f0e:	ef cf       	rjmp	.-34     	; 0xeee <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f10:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f12:	84 fd       	sbrc	r24, 4
     f14:	ef cf       	rjmp	.-34     	; 0xef4 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f16:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f18:	85 ff       	sbrs	r24, 5
     f1a:	ef cf       	rjmp	.-34     	; 0xefa <set_color+0x22>
        DDRC |= (1<<4);
     f1c:	3c 9a       	sbi	0x07, 4	; 7
     f1e:	08 95       	ret

00000f20 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	8f 93       	push	r24
     f2c:	9f 93       	push	r25
    rx_timer_off();
     f2e:	10 92 81 00 	sts	0x0081, r1
     f32:	10 92 85 00 	sts	0x0085, r1
     f36:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 24 01 	sts	0x0124, r24
    rx_leadingbyte = 1;
     f40:	80 93 68 01 	sts	0x0168, r24
    rx_busy = 0;
     f44:	10 92 4b 01 	sts	0x014B, r1
    adc_trigger_high_gain();
     f48:	10 92 7c 00 	sts	0x007C, r1
     f4c:	93 ea       	ldi	r25, 0xA3	; 163
     f4e:	90 93 7a 00 	sts	0x007A, r25
     f52:	80 93 7b 00 	sts	0x007B, r24
}
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f8a:	20 91 84 00 	lds	r18, 0x0084
     f8e:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	40 93 4b 01 	sts	0x014B, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f98:	80 91 24 01 	lds	r24, 0x0124
     f9c:	88 23       	and	r24, r24
     f9e:	a9 f1       	breq	.+106    	; 0x100a <__vector_23+0xa6>
        rx_timer_on();
     fa0:	10 92 85 00 	sts	0x0085, r1
     fa4:	10 92 84 00 	sts	0x0084, r1
     fa8:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     fac:	10 92 7c 01 	sts	0x017C, r1
        rx_leadingbit = 0;
     fb0:	10 92 24 01 	sts	0x0124, r1
        if (rx_leadingbyte) {
     fb4:	80 91 68 01 	lds	r24, 0x0168
     fb8:	88 23       	and	r24, r24
     fba:	a1 f0       	breq	.+40     	; 0xfe4 <__vector_23+0x80>
            adc_finish_conversion();
     fbc:	80 91 7a 00 	lds	r24, 0x007A
     fc0:	86 fd       	sbrc	r24, 6
     fc2:	fc cf       	rjmp	.-8      	; 0xfbc <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     fc4:	80 91 78 00 	lds	r24, 0x0078
     fc8:	90 91 79 00 	lds	r25, 0x0079
     fcc:	90 93 46 01 	sts	0x0146, r25
     fd0:	80 93 45 01 	sts	0x0145, r24
            adc_trigger_low_gain();
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 93 7c 00 	sts	0x007C, r24
     fda:	93 ea       	ldi	r25, 0xA3	; 163
     fdc:	90 93 7a 00 	sts	0x007A, r25
     fe0:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    100a:	c9 01       	movw	r24, r18
    100c:	87 58       	subi	r24, 0x87	; 135
    100e:	91 09       	sbc	r25, r1
    1010:	84 37       	cpi	r24, 0x74	; 116
    1012:	99 40       	sbci	r25, 0x09	; 9
    1014:	08 f0       	brcs	.+2      	; 0x1018 <__vector_23+0xb4>
    1016:	52 c0       	rjmp	.+164    	; 0x10bc <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1018:	26 58       	subi	r18, 0x86	; 134
    101a:	31 09       	sbc	r19, r1
    101c:	a4 ef       	ldi	r26, 0xF4	; 244
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__umulhisi3>
    1024:	aa 27       	eor	r26, r26
    1026:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	91 05       	cpc	r25, r1
    102c:	a1 05       	cpc	r26, r1
    102e:	b1 05       	cpc	r27, r1
    1030:	08 f4       	brcc	.+2      	; 0x1034 <__vector_23+0xd0>
    1032:	7b c0       	rjmp	.+246    	; 0x112a <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1034:	40 93 24 01 	sts	0x0124, r20
                if (rx_leadingbyte) {
    1038:	80 91 68 01 	lds	r24, 0x0168
    103c:	81 11       	cpse	r24, r1
    103e:	52 c0       	rjmp	.+164    	; 0x10e4 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1040:	80 91 42 01 	lds	r24, 0x0142
    1044:	e8 2f       	mov	r30, r24
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	e2 59       	subi	r30, 0x92	; 146
    104a:	fe 4f       	sbci	r31, 0xFE	; 254
    104c:	90 91 7c 01 	lds	r25, 0x017C
    1050:	90 83       	st	Z, r25
                    rx_byteindex++;
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	80 93 42 01 	sts	0x0142, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1058:	8c 30       	cpi	r24, 0x0C	; 12
    105a:	21 f6       	brne	.-120    	; 0xfe4 <__vector_23+0x80>
                        rx_timer_off();
    105c:	10 92 81 00 	sts	0x0081, r1
    1060:	10 92 85 00 	sts	0x0085, r1
    1064:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1068:	40 93 68 01 	sts	0x0168, r20
                        rx_busy = 0;
    106c:	10 92 4b 01 	sts	0x014B, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1070:	c0 91 78 01 	lds	r28, 0x0178
    1074:	d0 91 79 01 	lds	r29, 0x0179
    1078:	8e e6       	ldi	r24, 0x6E	; 110
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 bc 09 	call	0x1378	; 0x1378 <message_crc>
    1080:	c8 17       	cp	r28, r24
    1082:	d9 07       	cpc	r29, r25
    1084:	09 f0       	breq	.+2      	; 0x1088 <__vector_23+0x124>
    1086:	ae cf       	rjmp	.-164    	; 0xfe4 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1088:	80 91 77 01 	lds	r24, 0x0177
    108c:	87 ff       	sbrs	r24, 7
    108e:	61 c0       	rjmp	.+194    	; 0x1152 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1090:	98 e7       	ldi	r25, 0x78	; 120
    1092:	98 0f       	add	r25, r24
    1094:	93 30       	cpi	r25, 0x03	; 3
    1096:	30 f0       	brcs	.+12     	; 0x10a4 <__vector_23+0x140>
        motors_off();
    1098:	53 98       	cbi	0x0a, 3	; 10
    109a:	23 98       	cbi	0x04, 3	; 4
    109c:	10 92 b4 00 	sts	0x00B4, r1
    10a0:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	e0 58       	subi	r30, 0x80	; 128
    10aa:	f1 09       	sbc	r31, r1
    10ac:	eb 30       	cpi	r30, 0x0B	; 11
    10ae:	f1 05       	cpc	r31, r1
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <__vector_23+0x150>
    10b2:	98 cf       	rjmp	.-208    	; 0xfe4 <__vector_23+0x80>
    10b4:	e5 5c       	subi	r30, 0xC5	; 197
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    10bc:	10 92 81 00 	sts	0x0081, r1
    10c0:	10 92 85 00 	sts	0x0085, r1
    10c4:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    10c8:	40 93 24 01 	sts	0x0124, r20
            rx_leadingbyte = 1;
    10cc:	40 93 68 01 	sts	0x0168, r20
            rx_busy = 0;
    10d0:	10 92 4b 01 	sts	0x014B, r1
            adc_trigger_high_gain();
    10d4:	10 92 7c 00 	sts	0x007C, r1
    10d8:	83 ea       	ldi	r24, 0xA3	; 163
    10da:	80 93 7a 00 	sts	0x007A, r24
    10de:	40 93 7b 00 	sts	0x007B, r20
    10e2:	80 cf       	rjmp	.-256    	; 0xfe4 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    10e4:	80 91 7a 00 	lds	r24, 0x007A
    10e8:	86 fd       	sbrc	r24, 6
    10ea:	fc cf       	rjmp	.-8      	; 0x10e4 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    10ec:	80 91 78 00 	lds	r24, 0x0078
    10f0:	90 91 79 00 	lds	r25, 0x0079
    10f4:	90 93 44 01 	sts	0x0144, r25
    10f8:	80 93 43 01 	sts	0x0143, r24
                    adc_trigger_high_gain();
    10fc:	10 92 7c 00 	sts	0x007C, r1
    1100:	83 ea       	ldi	r24, 0xA3	; 163
    1102:	80 93 7a 00 	sts	0x007A, r24
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    110c:	90 91 7c 01 	lds	r25, 0x017C
    1110:	99 23       	and	r25, r25
    1112:	d1 f0       	breq	.+52     	; 0x1148 <__vector_23+0x1e4>
                        rx_timer_off();
    1114:	10 92 81 00 	sts	0x0081, r1
    1118:	10 92 85 00 	sts	0x0085, r1
    111c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1120:	80 93 68 01 	sts	0x0168, r24
                        rx_busy = 0;
    1124:	10 92 4b 01 	sts	0x014B, r1
    1128:	5d cf       	rjmp	.-326    	; 0xfe4 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    112a:	21 e0       	ldi	r18, 0x01	; 1
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <__vector_23+0x1d2>
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <__vector_23+0x1ce>
    113a:	cf 01       	movw	r24, r30
    113c:	90 91 7c 01 	lds	r25, 0x017C
    1140:	89 2b       	or	r24, r25
    1142:	80 93 7c 01 	sts	0x017C, r24
    1146:	4e cf       	rjmp	.-356    	; 0xfe4 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1148:	10 92 68 01 	sts	0x0168, r1
                        rx_byteindex = 0;
    114c:	10 92 42 01 	sts	0x0142, r1
    1150:	49 cf       	rjmp	.-366    	; 0xfe4 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1152:	e0 91 05 01 	lds	r30, 0x0105
    1156:	f0 91 06 01 	lds	r31, 0x0106
    115a:	63 e4       	ldi	r22, 0x43	; 67
    115c:	71 e0       	ldi	r23, 0x01	; 1
    115e:	8e e6       	ldi	r24, 0x6E	; 110
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	09 95       	icall
    1164:	3f cf       	rjmp	.-386    	; 0xfe4 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1166:	80 91 6e 01 	lds	r24, 0x016E
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	09 f4       	brne	.+2      	; 0x1170 <__vector_23+0x20c>
    116e:	dd c0       	rjmp	.+442    	; 0x132a <__vector_23+0x3c6>
    1170:	08 f4       	brcc	.+2      	; 0x1174 <__vector_23+0x210>
    1172:	ba c0       	rjmp	.+372    	; 0x12e8 <__vector_23+0x384>
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	09 f4       	brne	.+2      	; 0x117a <__vector_23+0x216>
    1178:	c6 c0       	rjmp	.+396    	; 0x1306 <__vector_23+0x3a2>
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	09 f0       	breq	.+2      	; 0x1180 <__vector_23+0x21c>
    117e:	b1 c0       	rjmp	.+354    	; 0x12e2 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1180:	80 91 15 01 	lds	r24, 0x0115
    1184:	90 91 74 01 	lds	r25, 0x0174
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	09 f4       	brne	.+2      	; 0x118e <__vector_23+0x22a>
    118c:	e3 c0       	rjmp	.+454    	; 0x1354 <__vector_23+0x3f0>
    118e:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    1192:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    1196:	23 e0       	ldi	r18, 0x03	; 3
    1198:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    119c:	80 93 7f 01 	sts	0x017F, r24
                        kilo_straight_right = calibmsg->straight_right;
    11a0:	90 93 80 01 	sts	0x0180, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11a4:	80 91 17 01 	lds	r24, 0x0117
    11a8:	86 30       	cpi	r24, 0x06	; 6
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__vector_23+0x24a>
    11ac:	1b cf       	rjmp	.-458    	; 0xfe4 <__vector_23+0x80>
                motors_on();
    11ae:	53 9a       	sbi	0x0a, 3	; 10
    11b0:	23 9a       	sbi	0x04, 3	; 4
    11b2:	10 92 b4 00 	sts	0x00B4, r1
    11b6:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    11ba:	86 e0       	ldi	r24, 0x06	; 6
    11bc:	80 93 17 01 	sts	0x0117, r24
    11c0:	11 cf       	rjmp	.-478    	; 0xfe4 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    11c2:	80 91 17 01 	lds	r24, 0x0117
    11c6:	86 30       	cpi	r24, 0x06	; 6
    11c8:	99 f0       	breq	.+38     	; 0x11f0 <__vector_23+0x28c>
                motors_on();
    11ca:	53 9a       	sbi	0x0a, 3	; 10
    11cc:	23 9a       	sbi	0x04, 3	; 4
    11ce:	10 92 b4 00 	sts	0x00B4, r1
    11d2:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    11d6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    11d8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    11da:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11dc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11de:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11e0:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    11e2:	10 92 15 01 	sts	0x0115, r1
    11e6:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    11ea:	86 e0       	ldi	r24, 0x06	; 6
    11ec:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 01       	movw	r18, r24
    11f6:	00 90 6e 01 	lds	r0, 0x016E
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <__vector_23+0x29c>
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <__vector_23+0x298>
    1204:	80 91 7d 01 	lds	r24, 0x017D
    1208:	90 91 7e 01 	lds	r25, 0x017E
    120c:	82 23       	and	r24, r18
    120e:	93 23       	and	r25, r19
    1210:	89 2b       	or	r24, r25
    1212:	09 f0       	breq	.+2      	; 0x1216 <__vector_23+0x2b2>
    1214:	86 c0       	rjmp	.+268    	; 0x1322 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1216:	10 92 15 01 	sts	0x0115, r1
    121a:	e4 ce       	rjmp	.-568    	; 0xfe4 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 17 01 	sts	0x0117, r24
    1222:	e0 ce       	rjmp	.-576    	; 0xfe4 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1224:	e0 e0       	ldi	r30, 0x00	; 0
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    122a:	80 91 6e 00 	lds	r24, 0x006E
    122e:	8d 7f       	andi	r24, 0xFD	; 253
    1230:	80 93 6e 00 	sts	0x006E, r24
    1234:	16 bc       	out	0x26, r1	; 38
            bootload();
    1236:	e0 e0       	ldi	r30, 0x00	; 0
    1238:	f0 e7       	ldi	r31, 0x70	; 112
    123a:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    123c:	10 92 17 01 	sts	0x0117, r1
    1240:	d1 ce       	rjmp	.-606    	; 0xfe4 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	80 93 17 01 	sts	0x0117, r24
    1248:	cd ce       	rjmp	.-614    	; 0xfe4 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    124a:	85 e0       	ldi	r24, 0x05	; 5
    124c:	80 93 17 01 	sts	0x0117, r24
    1250:	c9 ce       	rjmp	.-622    	; 0xfe4 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1252:	80 91 17 01 	lds	r24, 0x0117
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	09 f4       	brne	.+2      	; 0x125c <__vector_23+0x2f8>
    125a:	c4 ce       	rjmp	.-632    	; 0xfe4 <__vector_23+0x80>
    125c:	80 91 17 01 	lds	r24, 0x0117
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	09 f4       	brne	.+2      	; 0x1266 <__vector_23+0x302>
    1264:	bf ce       	rjmp	.-642    	; 0xfe4 <__vector_23+0x80>
                motors_on();
    1266:	53 9a       	sbi	0x0a, 3	; 10
    1268:	23 9a       	sbi	0x04, 3	; 4
    126a:	10 92 b4 00 	sts	0x00B4, r1
    126e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	80 93 17 01 	sts	0x0117, r24
    1278:	b5 ce       	rjmp	.-662    	; 0xfe4 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    127a:	80 91 17 01 	lds	r24, 0x0117
    127e:	86 30       	cpi	r24, 0x06	; 6
    1280:	09 f0       	breq	.+2      	; 0x1284 <__vector_23+0x320>
    1282:	b0 ce       	rjmp	.-672    	; 0xfe4 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1284:	60 91 7d 01 	lds	r22, 0x017D
    1288:	80 eb       	ldi	r24, 0xB0	; 176
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1290:	60 91 7e 01 	lds	r22, 0x017E
    1294:	81 eb       	ldi	r24, 0xB1	; 177
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    129c:	60 91 81 01 	lds	r22, 0x0181
    12a0:	85 e0       	ldi	r24, 0x05	; 5
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    12a8:	60 91 6d 01 	lds	r22, 0x016D
    12ac:	89 e0       	ldi	r24, 0x09	; 9
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    12b4:	60 91 7f 01 	lds	r22, 0x017F
    12b8:	8c e0       	ldi	r24, 0x0C	; 12
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    12c0:	60 91 80 01 	lds	r22, 0x0180
    12c4:	84 e1       	ldi	r24, 0x14	; 20
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <eeprom_write_byte>
                        motors_off();
    12cc:	53 98       	cbi	0x0a, 3	; 10
    12ce:	23 98       	cbi	0x04, 3	; 4
    12d0:	10 92 b4 00 	sts	0x00B4, r1
    12d4:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 17 01 	sts	0x0117, r24
    12de:	80 91 6e 01 	lds	r24, 0x016E
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12e2:	81 11       	cpse	r24, r1
    12e4:	5f cf       	rjmp	.-322    	; 0x11a4 <__vector_23+0x240>
    12e6:	7e ce       	rjmp	.-772    	; 0xfe4 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12e8:	88 23       	and	r24, r24
    12ea:	39 f2       	breq	.-114    	; 0x127a <__vector_23+0x316>
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	c9 f7       	brne	.-14     	; 0x12e2 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    12f0:	80 91 6f 01 	lds	r24, 0x016F
    12f4:	90 91 70 01 	lds	r25, 0x0170
    12f8:	90 93 7e 01 	sts	0x017E, r25
    12fc:	80 93 7d 01 	sts	0x017D, r24
                    cur_motion = MOVE_STOP;
    1300:	10 92 15 01 	sts	0x0115, r1
    1304:	4f cf       	rjmp	.-354    	; 0x11a4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1306:	80 91 15 01 	lds	r24, 0x0115
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	71 f1       	breq	.+92     	; 0x136a <__vector_23+0x406>
    130e:	80 91 72 01 	lds	r24, 0x0172
                        prev_motion = MOVE_STOP;
    1312:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    1316:	92 e0       	ldi	r25, 0x02	; 2
    1318:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    131c:	80 93 6d 01 	sts	0x016D, r24
    1320:	41 cf       	rjmp	.-382    	; 0x11a4 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 15 01 	sts	0x0115, r24
    1328:	5d ce       	rjmp	.-838    	; 0xfe4 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    132a:	80 91 15 01 	lds	r24, 0x0115
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	51 f0       	breq	.+20     	; 0x1346 <__vector_23+0x3e2>
    1332:	80 91 71 01 	lds	r24, 0x0171
                        prev_motion = MOVE_STOP;
    1336:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    1340:	80 93 81 01 	sts	0x0181, r24
    1344:	2f cf       	rjmp	.-418    	; 0x11a4 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1346:	80 91 71 01 	lds	r24, 0x0171
    134a:	90 91 81 01 	lds	r25, 0x0181
    134e:	89 13       	cpse	r24, r25
    1350:	f2 cf       	rjmp	.-28     	; 0x1336 <__vector_23+0x3d2>
    1352:	28 cf       	rjmp	.-432    	; 0x11a4 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1354:	80 91 80 01 	lds	r24, 0x0180
    1358:	98 13       	cpse	r25, r24
    135a:	19 cf       	rjmp	.-462    	; 0x118e <__vector_23+0x22a>
    135c:	80 91 73 01 	lds	r24, 0x0173
    1360:	20 91 7f 01 	lds	r18, 0x017F
    1364:	82 13       	cpse	r24, r18
    1366:	15 cf       	rjmp	.-470    	; 0x1192 <__vector_23+0x22e>
    1368:	1d cf       	rjmp	.-454    	; 0x11a4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    136a:	80 91 72 01 	lds	r24, 0x0172
    136e:	90 91 6d 01 	lds	r25, 0x016D
    1372:	89 13       	cpse	r24, r25
    1374:	ce cf       	rjmp	.-100    	; 0x1312 <__vector_23+0x3ae>
    1376:	16 cf       	rjmp	.-468    	; 0x11a4 <__vector_23+0x240>

00001378 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1378:	fc 01       	movw	r30, r24
    137a:	ac 01       	movw	r20, r24
    137c:	46 5f       	subi	r20, 0xF6	; 246
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1384:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1386:	82 27       	eor	r24, r18
    1388:	08 2e       	mov	r0, r24
    138a:	82 95       	swap	r24
    138c:	80 7f       	andi	r24, 0xF0	; 240
    138e:	80 25       	eor	r24, r0
    1390:	09 2e       	mov	r0, r25
    1392:	98 2f       	mov	r25, r24
    1394:	82 95       	swap	r24
    1396:	8f 70       	andi	r24, 0x0F	; 15
    1398:	08 26       	eor	r0, r24
    139a:	86 95       	lsr	r24
    139c:	98 27       	eor	r25, r24
    139e:	89 27       	eor	r24, r25
    13a0:	88 0f       	add	r24, r24
    13a2:	88 0f       	add	r24, r24
    13a4:	88 0f       	add	r24, r24
    13a6:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    13a8:	e4 17       	cp	r30, r20
    13aa:	f5 07       	cpc	r31, r21
    13ac:	59 f7       	brne	.-42     	; 0x1384 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    13ae:	08 95       	ret

000013b0 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    13b0:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    13b2:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    13b4:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    13b6:	20 91 41 01 	lds	r18, 0x0141
    or tmpreg1, ddrreg
    13ba:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    13bc:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    13be:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13c0:	30 91 41 01 	lds	r19, 0x0141
    13c4:	20 30       	cpi	r18, 0x00	; 0
    13c6:	29 f0       	breq	.+10     	; 0x13d2 <message_send+0x22>
    13c8:	00 00       	nop
    13ca:	25 b1       	in	r18, 0x05	; 5
    13cc:	23 2b       	or	r18, r19
    13ce:	25 b9       	out	0x05, r18	; 5
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <message_send+0x2a>
    13d2:	00 00       	nop
    13d4:	00 00       	nop
    13d6:	00 00       	nop
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <message_send+0x2a>
    13da:	00 00       	nop
    13dc:	00 00       	nop
    13de:	00 00       	nop
    13e0:	30 95       	com	r19
    13e2:	25 b1       	in	r18, 0x05	; 5
    13e4:	23 23       	and	r18, r19
    13e6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    13e8:	2e ea       	ldi	r18, 0xAE	; 174
    13ea:	2a 95       	dec	r18
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    13ee:	2b ee       	ldi	r18, 0xEB	; 235

000013f0 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    13f0:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    13f2:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    13f4:	0a c0       	rjmp	.+20     	; 0x140a <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13f6:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13f8:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    13fc:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13fe:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1400:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1402:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1404:	0f be       	out	0x3f, r0	; 63
    return 0
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	08 95       	ret

0000140a <nocollision>:
nocollision:
    nop
    140a:	00 00       	nop
    dec tmpreg1
    140c:	2a 95       	dec	r18
    brne checkcollision
    140e:	81 f7       	brne	.-32     	; 0x13f0 <checkcollision>

    ldi tmpreg1, 0x01
    1410:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1412:	30 91 41 01 	lds	r19, 0x0141
    1416:	20 30       	cpi	r18, 0x00	; 0
    1418:	29 f0       	breq	.+10     	; 0x1424 <nocollision+0x1a>
    141a:	00 00       	nop
    141c:	25 b1       	in	r18, 0x05	; 5
    141e:	23 2b       	or	r18, r19
    1420:	25 b9       	out	0x05, r18	; 5
    1422:	04 c0       	rjmp	.+8      	; 0x142c <nocollision+0x22>
    1424:	00 00       	nop
    1426:	00 00       	nop
    1428:	00 00       	nop
    142a:	00 c0       	rjmp	.+0      	; 0x142c <nocollision+0x22>
    142c:	00 00       	nop
    142e:	00 00       	nop
    1430:	00 00       	nop
    1432:	30 95       	com	r19
    1434:	25 b1       	in	r18, 0x05	; 5
    1436:	23 23       	and	r18, r19
    1438:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    143a:	00 00       	nop
    143c:	24 e5       	ldi	r18, 0x54	; 84
    143e:	2a 95       	dec	r18
    1440:	f1 f7       	brne	.-4      	; 0x143e <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1442:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1444:	8c e0       	ldi	r24, 0x0C	; 12

00001446 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1446:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1448:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    144a:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    144c:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    144e:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1450:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1452:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1454:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1456:	50 e0       	ldi	r21, 0x00	; 0

00001458 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1458:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    145a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    145c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    145e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1460:	30 91 41 01 	lds	r19, 0x0141
    1464:	20 30       	cpi	r18, 0x00	; 0
    1466:	29 f0       	breq	.+10     	; 0x1472 <sendbit+0x1a>
    1468:	00 00       	nop
    146a:	25 b1       	in	r18, 0x05	; 5
    146c:	23 2b       	or	r18, r19
    146e:	25 b9       	out	0x05, r18	; 5
    1470:	04 c0       	rjmp	.+8      	; 0x147a <sendbit+0x22>
    1472:	00 00       	nop
    1474:	00 00       	nop
    1476:	00 00       	nop
    1478:	00 c0       	rjmp	.+0      	; 0x147a <sendbit+0x22>
    147a:	00 00       	nop
    147c:	00 00       	nop
    147e:	00 00       	nop
    1480:	30 95       	com	r19
    1482:	25 b1       	in	r18, 0x05	; 5
    1484:	23 23       	and	r18, r19
    1486:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1488:	00 00       	nop
    148a:	21 e5       	ldi	r18, 0x51	; 81
    148c:	2a 95       	dec	r18
    148e:	f1 f7       	brne	.-4      	; 0x148c <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1490:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1492:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1494:	9a 95       	dec	r25
    brne sendbit
    1496:	01 f7       	brne	.-64     	; 0x1458 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1498:	8a 95       	dec	r24
    brne sendbyte
    149a:	a9 f6       	brne	.-86     	; 0x1446 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    149c:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    149e:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14a0:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14a2:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14a4:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    14a8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14aa:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14ac:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14ae:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14b0:	0f be       	out	0x3f, r0	; 63
    return 1
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	08 95       	ret

000014b6 <main>:
    message_sent = 1;
}

int main()
{
    kilo_init();
    14b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <kilo_init>
    kilo_message_tx = message_tx;
    14ba:	82 e7       	ldi	r24, 0x72	; 114
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	90 93 04 01 	sts	0x0104, r25
    14c2:	80 93 03 01 	sts	0x0103, r24
    kilo_message_tx_success = message_tx_succes;
    14c6:	85 e7       	ldi	r24, 0x75	; 117
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	90 93 02 01 	sts	0x0102, r25
    14ce:	80 93 01 01 	sts	0x0101, r24
    kilo_start(setup, loop);
    14d2:	6c e7       	ldi	r22, 0x7C	; 124
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	81 e7       	ldi	r24, 0x71	; 113
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <kilo_start>

    return 0;
}
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	08 95       	ret

000014e4 <__divmodhi4>:
    14e4:	97 fb       	bst	r25, 7
    14e6:	07 2e       	mov	r0, r23
    14e8:	16 f4       	brtc	.+4      	; 0x14ee <__divmodhi4+0xa>
    14ea:	00 94       	com	r0
    14ec:	07 d0       	rcall	.+14     	; 0x14fc <__divmodhi4_neg1>
    14ee:	77 fd       	sbrc	r23, 7
    14f0:	09 d0       	rcall	.+18     	; 0x1504 <__divmodhi4_neg2>
    14f2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__udivmodhi4>
    14f6:	07 fc       	sbrc	r0, 7
    14f8:	05 d0       	rcall	.+10     	; 0x1504 <__divmodhi4_neg2>
    14fa:	3e f4       	brtc	.+14     	; 0x150a <__divmodhi4_exit>

000014fc <__divmodhi4_neg1>:
    14fc:	90 95       	com	r25
    14fe:	81 95       	neg	r24
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	08 95       	ret

00001504 <__divmodhi4_neg2>:
    1504:	70 95       	com	r23
    1506:	61 95       	neg	r22
    1508:	7f 4f       	sbci	r23, 0xFF	; 255

0000150a <__divmodhi4_exit>:
    150a:	08 95       	ret

0000150c <__tablejump2__>:
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	05 90       	lpm	r0, Z+
    1512:	f4 91       	lpm	r31, Z
    1514:	e0 2d       	mov	r30, r0
    1516:	09 94       	ijmp

00001518 <__umulhisi3>:
    1518:	a2 9f       	mul	r26, r18
    151a:	b0 01       	movw	r22, r0
    151c:	b3 9f       	mul	r27, r19
    151e:	c0 01       	movw	r24, r0
    1520:	a3 9f       	mul	r26, r19
    1522:	70 0d       	add	r23, r0
    1524:	81 1d       	adc	r24, r1
    1526:	11 24       	eor	r1, r1
    1528:	91 1d       	adc	r25, r1
    152a:	b2 9f       	mul	r27, r18
    152c:	70 0d       	add	r23, r0
    152e:	81 1d       	adc	r24, r1
    1530:	11 24       	eor	r1, r1
    1532:	91 1d       	adc	r25, r1
    1534:	08 95       	ret

00001536 <__udivmodhi4>:
    1536:	aa 1b       	sub	r26, r26
    1538:	bb 1b       	sub	r27, r27
    153a:	51 e1       	ldi	r21, 0x11	; 17
    153c:	07 c0       	rjmp	.+14     	; 0x154c <__udivmodhi4_ep>

0000153e <__udivmodhi4_loop>:
    153e:	aa 1f       	adc	r26, r26
    1540:	bb 1f       	adc	r27, r27
    1542:	a6 17       	cp	r26, r22
    1544:	b7 07       	cpc	r27, r23
    1546:	10 f0       	brcs	.+4      	; 0x154c <__udivmodhi4_ep>
    1548:	a6 1b       	sub	r26, r22
    154a:	b7 0b       	sbc	r27, r23

0000154c <__udivmodhi4_ep>:
    154c:	88 1f       	adc	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	5a 95       	dec	r21
    1552:	a9 f7       	brne	.-22     	; 0x153e <__udivmodhi4_loop>
    1554:	80 95       	com	r24
    1556:	90 95       	com	r25
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	08 95       	ret

0000155e <__subsf3>:
    155e:	50 58       	subi	r21, 0x80	; 128

00001560 <__addsf3>:
    1560:	bb 27       	eor	r27, r27
    1562:	aa 27       	eor	r26, r26
    1564:	0e 94 c7 0a 	call	0x158e	; 0x158e <__addsf3x>
    1568:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_round>
    156c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_pscA>
    1570:	38 f0       	brcs	.+14     	; 0x1580 <__addsf3+0x20>
    1572:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_pscB>
    1576:	20 f0       	brcs	.+8      	; 0x1580 <__addsf3+0x20>
    1578:	39 f4       	brne	.+14     	; 0x1588 <__addsf3+0x28>
    157a:	9f 3f       	cpi	r25, 0xFF	; 255
    157c:	19 f4       	brne	.+6      	; 0x1584 <__addsf3+0x24>
    157e:	26 f4       	brtc	.+8      	; 0x1588 <__addsf3+0x28>
    1580:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__fp_nan>
    1584:	0e f4       	brtc	.+2      	; 0x1588 <__addsf3+0x28>
    1586:	e0 95       	com	r30
    1588:	e7 fb       	bst	r30, 7
    158a:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_inf>

0000158e <__addsf3x>:
    158e:	e9 2f       	mov	r30, r25
    1590:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fp_split3>
    1594:	58 f3       	brcs	.-42     	; 0x156c <__addsf3+0xc>
    1596:	ba 17       	cp	r27, r26
    1598:	62 07       	cpc	r22, r18
    159a:	73 07       	cpc	r23, r19
    159c:	84 07       	cpc	r24, r20
    159e:	95 07       	cpc	r25, r21
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <__addsf3x+0x1c>
    15a2:	79 f4       	brne	.+30     	; 0x15c2 <__addsf3x+0x34>
    15a4:	a6 f5       	brtc	.+104    	; 0x160e <__addsf3x+0x80>
    15a6:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__fp_zero>
    15aa:	0e f4       	brtc	.+2      	; 0x15ae <__addsf3x+0x20>
    15ac:	e0 95       	com	r30
    15ae:	0b 2e       	mov	r0, r27
    15b0:	ba 2f       	mov	r27, r26
    15b2:	a0 2d       	mov	r26, r0
    15b4:	0b 01       	movw	r0, r22
    15b6:	b9 01       	movw	r22, r18
    15b8:	90 01       	movw	r18, r0
    15ba:	0c 01       	movw	r0, r24
    15bc:	ca 01       	movw	r24, r20
    15be:	a0 01       	movw	r20, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	ff 27       	eor	r31, r31
    15c4:	59 1b       	sub	r21, r25
    15c6:	99 f0       	breq	.+38     	; 0x15ee <__addsf3x+0x60>
    15c8:	59 3f       	cpi	r21, 0xF9	; 249
    15ca:	50 f4       	brcc	.+20     	; 0x15e0 <__addsf3x+0x52>
    15cc:	50 3e       	cpi	r21, 0xE0	; 224
    15ce:	68 f1       	brcs	.+90     	; 0x162a <__addsf3x+0x9c>
    15d0:	1a 16       	cp	r1, r26
    15d2:	f0 40       	sbci	r31, 0x00	; 0
    15d4:	a2 2f       	mov	r26, r18
    15d6:	23 2f       	mov	r18, r19
    15d8:	34 2f       	mov	r19, r20
    15da:	44 27       	eor	r20, r20
    15dc:	58 5f       	subi	r21, 0xF8	; 248
    15de:	f3 cf       	rjmp	.-26     	; 0x15c6 <__addsf3x+0x38>
    15e0:	46 95       	lsr	r20
    15e2:	37 95       	ror	r19
    15e4:	27 95       	ror	r18
    15e6:	a7 95       	ror	r26
    15e8:	f0 40       	sbci	r31, 0x00	; 0
    15ea:	53 95       	inc	r21
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__addsf3x+0x52>
    15ee:	7e f4       	brtc	.+30     	; 0x160e <__addsf3x+0x80>
    15f0:	1f 16       	cp	r1, r31
    15f2:	ba 0b       	sbc	r27, r26
    15f4:	62 0b       	sbc	r22, r18
    15f6:	73 0b       	sbc	r23, r19
    15f8:	84 0b       	sbc	r24, r20
    15fa:	ba f0       	brmi	.+46     	; 0x162a <__addsf3x+0x9c>
    15fc:	91 50       	subi	r25, 0x01	; 1
    15fe:	a1 f0       	breq	.+40     	; 0x1628 <__addsf3x+0x9a>
    1600:	ff 0f       	add	r31, r31
    1602:	bb 1f       	adc	r27, r27
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	c2 f7       	brpl	.-16     	; 0x15fc <__addsf3x+0x6e>
    160c:	0e c0       	rjmp	.+28     	; 0x162a <__addsf3x+0x9c>
    160e:	ba 0f       	add	r27, r26
    1610:	62 1f       	adc	r22, r18
    1612:	73 1f       	adc	r23, r19
    1614:	84 1f       	adc	r24, r20
    1616:	48 f4       	brcc	.+18     	; 0x162a <__addsf3x+0x9c>
    1618:	87 95       	ror	r24
    161a:	77 95       	ror	r23
    161c:	67 95       	ror	r22
    161e:	b7 95       	ror	r27
    1620:	f7 95       	ror	r31
    1622:	9e 3f       	cpi	r25, 0xFE	; 254
    1624:	08 f0       	brcs	.+2      	; 0x1628 <__addsf3x+0x9a>
    1626:	b0 cf       	rjmp	.-160    	; 0x1588 <__addsf3+0x28>
    1628:	93 95       	inc	r25
    162a:	88 0f       	add	r24, r24
    162c:	08 f0       	brcs	.+2      	; 0x1630 <__addsf3x+0xa2>
    162e:	99 27       	eor	r25, r25
    1630:	ee 0f       	add	r30, r30
    1632:	97 95       	ror	r25
    1634:	87 95       	ror	r24
    1636:	08 95       	ret

00001638 <__divsf3>:
    1638:	0e 94 30 0b 	call	0x1660	; 0x1660 <__divsf3x>
    163c:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_round>
    1640:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_pscB>
    1644:	58 f0       	brcs	.+22     	; 0x165c <__divsf3+0x24>
    1646:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_pscA>
    164a:	40 f0       	brcs	.+16     	; 0x165c <__divsf3+0x24>
    164c:	29 f4       	brne	.+10     	; 0x1658 <__divsf3+0x20>
    164e:	5f 3f       	cpi	r21, 0xFF	; 255
    1650:	29 f0       	breq	.+10     	; 0x165c <__divsf3+0x24>
    1652:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_inf>
    1656:	51 11       	cpse	r21, r1
    1658:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__fp_szero>
    165c:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__fp_nan>

00001660 <__divsf3x>:
    1660:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fp_split3>
    1664:	68 f3       	brcs	.-38     	; 0x1640 <__divsf3+0x8>

00001666 <__divsf3_pse>:
    1666:	99 23       	and	r25, r25
    1668:	b1 f3       	breq	.-20     	; 0x1656 <__divsf3+0x1e>
    166a:	55 23       	and	r21, r21
    166c:	91 f3       	breq	.-28     	; 0x1652 <__divsf3+0x1a>
    166e:	95 1b       	sub	r25, r21
    1670:	55 0b       	sbc	r21, r21
    1672:	bb 27       	eor	r27, r27
    1674:	aa 27       	eor	r26, r26
    1676:	62 17       	cp	r22, r18
    1678:	73 07       	cpc	r23, r19
    167a:	84 07       	cpc	r24, r20
    167c:	38 f0       	brcs	.+14     	; 0x168c <__divsf3_pse+0x26>
    167e:	9f 5f       	subi	r25, 0xFF	; 255
    1680:	5f 4f       	sbci	r21, 0xFF	; 255
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	44 1f       	adc	r20, r20
    1688:	aa 1f       	adc	r26, r26
    168a:	a9 f3       	breq	.-22     	; 0x1676 <__divsf3_pse+0x10>
    168c:	35 d0       	rcall	.+106    	; 0x16f8 <__divsf3_pse+0x92>
    168e:	0e 2e       	mov	r0, r30
    1690:	3a f0       	brmi	.+14     	; 0x16a0 <__divsf3_pse+0x3a>
    1692:	e0 e8       	ldi	r30, 0x80	; 128
    1694:	32 d0       	rcall	.+100    	; 0x16fa <__divsf3_pse+0x94>
    1696:	91 50       	subi	r25, 0x01	; 1
    1698:	50 40       	sbci	r21, 0x00	; 0
    169a:	e6 95       	lsr	r30
    169c:	00 1c       	adc	r0, r0
    169e:	ca f7       	brpl	.-14     	; 0x1692 <__divsf3_pse+0x2c>
    16a0:	2b d0       	rcall	.+86     	; 0x16f8 <__divsf3_pse+0x92>
    16a2:	fe 2f       	mov	r31, r30
    16a4:	29 d0       	rcall	.+82     	; 0x16f8 <__divsf3_pse+0x92>
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	bb 1f       	adc	r27, r27
    16ae:	26 17       	cp	r18, r22
    16b0:	37 07       	cpc	r19, r23
    16b2:	48 07       	cpc	r20, r24
    16b4:	ab 07       	cpc	r26, r27
    16b6:	b0 e8       	ldi	r27, 0x80	; 128
    16b8:	09 f0       	breq	.+2      	; 0x16bc <__divsf3_pse+0x56>
    16ba:	bb 0b       	sbc	r27, r27
    16bc:	80 2d       	mov	r24, r0
    16be:	bf 01       	movw	r22, r30
    16c0:	ff 27       	eor	r31, r31
    16c2:	93 58       	subi	r25, 0x83	; 131
    16c4:	5f 4f       	sbci	r21, 0xFF	; 255
    16c6:	3a f0       	brmi	.+14     	; 0x16d6 <__divsf3_pse+0x70>
    16c8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ca:	51 05       	cpc	r21, r1
    16cc:	78 f0       	brcs	.+30     	; 0x16ec <__divsf3_pse+0x86>
    16ce:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_inf>
    16d2:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__fp_szero>
    16d6:	5f 3f       	cpi	r21, 0xFF	; 255
    16d8:	e4 f3       	brlt	.-8      	; 0x16d2 <__divsf3_pse+0x6c>
    16da:	98 3e       	cpi	r25, 0xE8	; 232
    16dc:	d4 f3       	brlt	.-12     	; 0x16d2 <__divsf3_pse+0x6c>
    16de:	86 95       	lsr	r24
    16e0:	77 95       	ror	r23
    16e2:	67 95       	ror	r22
    16e4:	b7 95       	ror	r27
    16e6:	f7 95       	ror	r31
    16e8:	9f 5f       	subi	r25, 0xFF	; 255
    16ea:	c9 f7       	brne	.-14     	; 0x16de <__divsf3_pse+0x78>
    16ec:	88 0f       	add	r24, r24
    16ee:	91 1d       	adc	r25, r1
    16f0:	96 95       	lsr	r25
    16f2:	87 95       	ror	r24
    16f4:	97 f9       	bld	r25, 7
    16f6:	08 95       	ret
    16f8:	e1 e0       	ldi	r30, 0x01	; 1
    16fa:	66 0f       	add	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	bb 1f       	adc	r27, r27
    1702:	62 17       	cp	r22, r18
    1704:	73 07       	cpc	r23, r19
    1706:	84 07       	cpc	r24, r20
    1708:	ba 07       	cpc	r27, r26
    170a:	20 f0       	brcs	.+8      	; 0x1714 <__divsf3_pse+0xae>
    170c:	62 1b       	sub	r22, r18
    170e:	73 0b       	sbc	r23, r19
    1710:	84 0b       	sbc	r24, r20
    1712:	ba 0b       	sbc	r27, r26
    1714:	ee 1f       	adc	r30, r30
    1716:	88 f7       	brcc	.-30     	; 0x16fa <__divsf3_pse+0x94>
    1718:	e0 95       	com	r30
    171a:	08 95       	ret

0000171c <__fixsfsi>:
    171c:	0e 94 95 0b 	call	0x172a	; 0x172a <__fixunssfsi>
    1720:	68 94       	set
    1722:	b1 11       	cpse	r27, r1
    1724:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__fp_szero>
    1728:	08 95       	ret

0000172a <__fixunssfsi>:
    172a:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fp_splitA>
    172e:	88 f0       	brcs	.+34     	; 0x1752 <__fixunssfsi+0x28>
    1730:	9f 57       	subi	r25, 0x7F	; 127
    1732:	98 f0       	brcs	.+38     	; 0x175a <__fixunssfsi+0x30>
    1734:	b9 2f       	mov	r27, r25
    1736:	99 27       	eor	r25, r25
    1738:	b7 51       	subi	r27, 0x17	; 23
    173a:	b0 f0       	brcs	.+44     	; 0x1768 <__fixunssfsi+0x3e>
    173c:	e1 f0       	breq	.+56     	; 0x1776 <__fixunssfsi+0x4c>
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	88 1f       	adc	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	1a f0       	brmi	.+6      	; 0x174e <__fixunssfsi+0x24>
    1748:	ba 95       	dec	r27
    174a:	c9 f7       	brne	.-14     	; 0x173e <__fixunssfsi+0x14>
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <__fixunssfsi+0x4c>
    174e:	b1 30       	cpi	r27, 0x01	; 1
    1750:	91 f0       	breq	.+36     	; 0x1776 <__fixunssfsi+0x4c>
    1752:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_zero>
    1756:	b1 e0       	ldi	r27, 0x01	; 1
    1758:	08 95       	ret
    175a:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__fp_zero>
    175e:	67 2f       	mov	r22, r23
    1760:	78 2f       	mov	r23, r24
    1762:	88 27       	eor	r24, r24
    1764:	b8 5f       	subi	r27, 0xF8	; 248
    1766:	39 f0       	breq	.+14     	; 0x1776 <__fixunssfsi+0x4c>
    1768:	b9 3f       	cpi	r27, 0xF9	; 249
    176a:	cc f3       	brlt	.-14     	; 0x175e <__fixunssfsi+0x34>
    176c:	86 95       	lsr	r24
    176e:	77 95       	ror	r23
    1770:	67 95       	ror	r22
    1772:	b3 95       	inc	r27
    1774:	d9 f7       	brne	.-10     	; 0x176c <__fixunssfsi+0x42>
    1776:	3e f4       	brtc	.+14     	; 0x1786 <__fixunssfsi+0x5c>
    1778:	90 95       	com	r25
    177a:	80 95       	com	r24
    177c:	70 95       	com	r23
    177e:	61 95       	neg	r22
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	8f 4f       	sbci	r24, 0xFF	; 255
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	08 95       	ret

00001788 <__floatunsisf>:
    1788:	e8 94       	clt
    178a:	09 c0       	rjmp	.+18     	; 0x179e <__floatsisf+0x12>

0000178c <__floatsisf>:
    178c:	97 fb       	bst	r25, 7
    178e:	3e f4       	brtc	.+14     	; 0x179e <__floatsisf+0x12>
    1790:	90 95       	com	r25
    1792:	80 95       	com	r24
    1794:	70 95       	com	r23
    1796:	61 95       	neg	r22
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	99 23       	and	r25, r25
    17a0:	a9 f0       	breq	.+42     	; 0x17cc <__floatsisf+0x40>
    17a2:	f9 2f       	mov	r31, r25
    17a4:	96 e9       	ldi	r25, 0x96	; 150
    17a6:	bb 27       	eor	r27, r27
    17a8:	93 95       	inc	r25
    17aa:	f6 95       	lsr	r31
    17ac:	87 95       	ror	r24
    17ae:	77 95       	ror	r23
    17b0:	67 95       	ror	r22
    17b2:	b7 95       	ror	r27
    17b4:	f1 11       	cpse	r31, r1
    17b6:	f8 cf       	rjmp	.-16     	; 0x17a8 <__floatsisf+0x1c>
    17b8:	fa f4       	brpl	.+62     	; 0x17f8 <__floatsisf+0x6c>
    17ba:	bb 0f       	add	r27, r27
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <__floatsisf+0x36>
    17be:	60 ff       	sbrs	r22, 0
    17c0:	1b c0       	rjmp	.+54     	; 0x17f8 <__floatsisf+0x6c>
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	16 c0       	rjmp	.+44     	; 0x17f8 <__floatsisf+0x6c>
    17cc:	88 23       	and	r24, r24
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <__floatsisf+0x48>
    17d0:	96 e9       	ldi	r25, 0x96	; 150
    17d2:	11 c0       	rjmp	.+34     	; 0x17f6 <__floatsisf+0x6a>
    17d4:	77 23       	and	r23, r23
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <__floatsisf+0x54>
    17d8:	9e e8       	ldi	r25, 0x8E	; 142
    17da:	87 2f       	mov	r24, r23
    17dc:	76 2f       	mov	r23, r22
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <__floatsisf+0x5e>
    17e0:	66 23       	and	r22, r22
    17e2:	71 f0       	breq	.+28     	; 0x1800 <__floatsisf+0x74>
    17e4:	96 e8       	ldi	r25, 0x86	; 134
    17e6:	86 2f       	mov	r24, r22
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	2a f0       	brmi	.+10     	; 0x17f8 <__floatsisf+0x6c>
    17ee:	9a 95       	dec	r25
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	88 1f       	adc	r24, r24
    17f6:	da f7       	brpl	.-10     	; 0x17ee <__floatsisf+0x62>
    17f8:	88 0f       	add	r24, r24
    17fa:	96 95       	lsr	r25
    17fc:	87 95       	ror	r24
    17fe:	97 f9       	bld	r25, 7
    1800:	08 95       	ret

00001802 <__fp_inf>:
    1802:	97 f9       	bld	r25, 7
    1804:	9f 67       	ori	r25, 0x7F	; 127
    1806:	80 e8       	ldi	r24, 0x80	; 128
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	08 95       	ret

0000180e <__fp_nan>:
    180e:	9f ef       	ldi	r25, 0xFF	; 255
    1810:	80 ec       	ldi	r24, 0xC0	; 192
    1812:	08 95       	ret

00001814 <__fp_pscA>:
    1814:	00 24       	eor	r0, r0
    1816:	0a 94       	dec	r0
    1818:	16 16       	cp	r1, r22
    181a:	17 06       	cpc	r1, r23
    181c:	18 06       	cpc	r1, r24
    181e:	09 06       	cpc	r0, r25
    1820:	08 95       	ret

00001822 <__fp_pscB>:
    1822:	00 24       	eor	r0, r0
    1824:	0a 94       	dec	r0
    1826:	12 16       	cp	r1, r18
    1828:	13 06       	cpc	r1, r19
    182a:	14 06       	cpc	r1, r20
    182c:	05 06       	cpc	r0, r21
    182e:	08 95       	ret

00001830 <__fp_round>:
    1830:	09 2e       	mov	r0, r25
    1832:	03 94       	inc	r0
    1834:	00 0c       	add	r0, r0
    1836:	11 f4       	brne	.+4      	; 0x183c <__fp_round+0xc>
    1838:	88 23       	and	r24, r24
    183a:	52 f0       	brmi	.+20     	; 0x1850 <__fp_round+0x20>
    183c:	bb 0f       	add	r27, r27
    183e:	40 f4       	brcc	.+16     	; 0x1850 <__fp_round+0x20>
    1840:	bf 2b       	or	r27, r31
    1842:	11 f4       	brne	.+4      	; 0x1848 <__fp_round+0x18>
    1844:	60 ff       	sbrs	r22, 0
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <__fp_round+0x20>
    1848:	6f 5f       	subi	r22, 0xFF	; 255
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	8f 4f       	sbci	r24, 0xFF	; 255
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	08 95       	ret

00001852 <__fp_split3>:
    1852:	57 fd       	sbrc	r21, 7
    1854:	90 58       	subi	r25, 0x80	; 128
    1856:	44 0f       	add	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	59 f0       	breq	.+22     	; 0x1872 <__fp_splitA+0x10>
    185c:	5f 3f       	cpi	r21, 0xFF	; 255
    185e:	71 f0       	breq	.+28     	; 0x187c <__fp_splitA+0x1a>
    1860:	47 95       	ror	r20

00001862 <__fp_splitA>:
    1862:	88 0f       	add	r24, r24
    1864:	97 fb       	bst	r25, 7
    1866:	99 1f       	adc	r25, r25
    1868:	61 f0       	breq	.+24     	; 0x1882 <__fp_splitA+0x20>
    186a:	9f 3f       	cpi	r25, 0xFF	; 255
    186c:	79 f0       	breq	.+30     	; 0x188c <__fp_splitA+0x2a>
    186e:	87 95       	ror	r24
    1870:	08 95       	ret
    1872:	12 16       	cp	r1, r18
    1874:	13 06       	cpc	r1, r19
    1876:	14 06       	cpc	r1, r20
    1878:	55 1f       	adc	r21, r21
    187a:	f2 cf       	rjmp	.-28     	; 0x1860 <__fp_split3+0xe>
    187c:	46 95       	lsr	r20
    187e:	f1 df       	rcall	.-30     	; 0x1862 <__fp_splitA>
    1880:	08 c0       	rjmp	.+16     	; 0x1892 <__fp_splitA+0x30>
    1882:	16 16       	cp	r1, r22
    1884:	17 06       	cpc	r1, r23
    1886:	18 06       	cpc	r1, r24
    1888:	99 1f       	adc	r25, r25
    188a:	f1 cf       	rjmp	.-30     	; 0x186e <__fp_splitA+0xc>
    188c:	86 95       	lsr	r24
    188e:	71 05       	cpc	r23, r1
    1890:	61 05       	cpc	r22, r1
    1892:	08 94       	sec
    1894:	08 95       	ret

00001896 <__fp_zero>:
    1896:	e8 94       	clt

00001898 <__fp_szero>:
    1898:	bb 27       	eor	r27, r27
    189a:	66 27       	eor	r22, r22
    189c:	77 27       	eor	r23, r23
    189e:	cb 01       	movw	r24, r22
    18a0:	97 f9       	bld	r25, 7
    18a2:	08 95       	ret

000018a4 <__mulsf3>:
    18a4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3x>
    18a8:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_round>
    18ac:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_pscA>
    18b0:	38 f0       	brcs	.+14     	; 0x18c0 <__mulsf3+0x1c>
    18b2:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_pscB>
    18b6:	20 f0       	brcs	.+8      	; 0x18c0 <__mulsf3+0x1c>
    18b8:	95 23       	and	r25, r21
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <__mulsf3+0x1c>
    18bc:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_inf>
    18c0:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__fp_nan>
    18c4:	11 24       	eor	r1, r1
    18c6:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__fp_szero>

000018ca <__mulsf3x>:
    18ca:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fp_split3>
    18ce:	70 f3       	brcs	.-36     	; 0x18ac <__mulsf3+0x8>

000018d0 <__mulsf3_pse>:
    18d0:	95 9f       	mul	r25, r21
    18d2:	c1 f3       	breq	.-16     	; 0x18c4 <__mulsf3+0x20>
    18d4:	95 0f       	add	r25, r21
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	55 1f       	adc	r21, r21
    18da:	62 9f       	mul	r22, r18
    18dc:	f0 01       	movw	r30, r0
    18de:	72 9f       	mul	r23, r18
    18e0:	bb 27       	eor	r27, r27
    18e2:	f0 0d       	add	r31, r0
    18e4:	b1 1d       	adc	r27, r1
    18e6:	63 9f       	mul	r22, r19
    18e8:	aa 27       	eor	r26, r26
    18ea:	f0 0d       	add	r31, r0
    18ec:	b1 1d       	adc	r27, r1
    18ee:	aa 1f       	adc	r26, r26
    18f0:	64 9f       	mul	r22, r20
    18f2:	66 27       	eor	r22, r22
    18f4:	b0 0d       	add	r27, r0
    18f6:	a1 1d       	adc	r26, r1
    18f8:	66 1f       	adc	r22, r22
    18fa:	82 9f       	mul	r24, r18
    18fc:	22 27       	eor	r18, r18
    18fe:	b0 0d       	add	r27, r0
    1900:	a1 1d       	adc	r26, r1
    1902:	62 1f       	adc	r22, r18
    1904:	73 9f       	mul	r23, r19
    1906:	b0 0d       	add	r27, r0
    1908:	a1 1d       	adc	r26, r1
    190a:	62 1f       	adc	r22, r18
    190c:	83 9f       	mul	r24, r19
    190e:	a0 0d       	add	r26, r0
    1910:	61 1d       	adc	r22, r1
    1912:	22 1f       	adc	r18, r18
    1914:	74 9f       	mul	r23, r20
    1916:	33 27       	eor	r19, r19
    1918:	a0 0d       	add	r26, r0
    191a:	61 1d       	adc	r22, r1
    191c:	23 1f       	adc	r18, r19
    191e:	84 9f       	mul	r24, r20
    1920:	60 0d       	add	r22, r0
    1922:	21 1d       	adc	r18, r1
    1924:	82 2f       	mov	r24, r18
    1926:	76 2f       	mov	r23, r22
    1928:	6a 2f       	mov	r22, r26
    192a:	11 24       	eor	r1, r1
    192c:	9f 57       	subi	r25, 0x7F	; 127
    192e:	50 40       	sbci	r21, 0x00	; 0
    1930:	9a f0       	brmi	.+38     	; 0x1958 <__mulsf3_pse+0x88>
    1932:	f1 f0       	breq	.+60     	; 0x1970 <__mulsf3_pse+0xa0>
    1934:	88 23       	and	r24, r24
    1936:	4a f0       	brmi	.+18     	; 0x194a <__mulsf3_pse+0x7a>
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	bb 1f       	adc	r27, r27
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	91 50       	subi	r25, 0x01	; 1
    1946:	50 40       	sbci	r21, 0x00	; 0
    1948:	a9 f7       	brne	.-22     	; 0x1934 <__mulsf3_pse+0x64>
    194a:	9e 3f       	cpi	r25, 0xFE	; 254
    194c:	51 05       	cpc	r21, r1
    194e:	80 f0       	brcs	.+32     	; 0x1970 <__mulsf3_pse+0xa0>
    1950:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_inf>
    1954:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__fp_szero>
    1958:	5f 3f       	cpi	r21, 0xFF	; 255
    195a:	e4 f3       	brlt	.-8      	; 0x1954 <__mulsf3_pse+0x84>
    195c:	98 3e       	cpi	r25, 0xE8	; 232
    195e:	d4 f3       	brlt	.-12     	; 0x1954 <__mulsf3_pse+0x84>
    1960:	86 95       	lsr	r24
    1962:	77 95       	ror	r23
    1964:	67 95       	ror	r22
    1966:	b7 95       	ror	r27
    1968:	f7 95       	ror	r31
    196a:	e7 95       	ror	r30
    196c:	9f 5f       	subi	r25, 0xFF	; 255
    196e:	c1 f7       	brne	.-16     	; 0x1960 <__mulsf3_pse+0x90>
    1970:	fe 2b       	or	r31, r30
    1972:	88 0f       	add	r24, r24
    1974:	91 1d       	adc	r25, r1
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	97 f9       	bld	r25, 7
    197c:	08 95       	ret

0000197e <do_rand>:
    197e:	8f 92       	push	r8
    1980:	9f 92       	push	r9
    1982:	af 92       	push	r10
    1984:	bf 92       	push	r11
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	ec 01       	movw	r28, r24
    1994:	68 81       	ld	r22, Y
    1996:	79 81       	ldd	r23, Y+1	; 0x01
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	61 15       	cp	r22, r1
    199e:	71 05       	cpc	r23, r1
    19a0:	81 05       	cpc	r24, r1
    19a2:	91 05       	cpc	r25, r1
    19a4:	21 f4       	brne	.+8      	; 0x19ae <do_rand+0x30>
    19a6:	64 e2       	ldi	r22, 0x24	; 36
    19a8:	79 ed       	ldi	r23, 0xD9	; 217
    19aa:	8b e5       	ldi	r24, 0x5B	; 91
    19ac:	97 e0       	ldi	r25, 0x07	; 7
    19ae:	2d e1       	ldi	r18, 0x1D	; 29
    19b0:	33 ef       	ldi	r19, 0xF3	; 243
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__divmodsi4>
    19ba:	49 01       	movw	r8, r18
    19bc:	5a 01       	movw	r10, r20
    19be:	9b 01       	movw	r18, r22
    19c0:	ac 01       	movw	r20, r24
    19c2:	a7 ea       	ldi	r26, 0xA7	; 167
    19c4:	b1 e4       	ldi	r27, 0x41	; 65
    19c6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__muluhisi3>
    19ca:	6b 01       	movw	r12, r22
    19cc:	7c 01       	movw	r14, r24
    19ce:	ac ee       	ldi	r26, 0xEC	; 236
    19d0:	b4 ef       	ldi	r27, 0xF4	; 244
    19d2:	a5 01       	movw	r20, r10
    19d4:	94 01       	movw	r18, r8
    19d6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulohisi3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8c 0d       	add	r24, r12
    19e0:	9d 1d       	adc	r25, r13
    19e2:	ae 1d       	adc	r26, r14
    19e4:	bf 1d       	adc	r27, r15
    19e6:	b7 ff       	sbrs	r27, 7
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <do_rand+0x72>
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	a1 09       	sbc	r26, r1
    19ee:	b0 48       	sbci	r27, 0x80	; 128
    19f0:	88 83       	st	Y, r24
    19f2:	99 83       	std	Y+1, r25	; 0x01
    19f4:	aa 83       	std	Y+2, r26	; 0x02
    19f6:	bb 83       	std	Y+3, r27	; 0x03
    19f8:	9f 77       	andi	r25, 0x7F	; 127
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	bf 90       	pop	r11
    1a08:	af 90       	pop	r10
    1a0a:	9f 90       	pop	r9
    1a0c:	8f 90       	pop	r8
    1a0e:	08 95       	ret

00001a10 <rand_r>:
    1a10:	0e 94 bf 0c 	call	0x197e	; 0x197e <do_rand>
    1a14:	08 95       	ret

00001a16 <rand>:
    1a16:	87 e0       	ldi	r24, 0x07	; 7
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	0e 94 bf 0c 	call	0x197e	; 0x197e <do_rand>
    1a1e:	08 95       	ret

00001a20 <srand>:
    1a20:	a0 e0       	ldi	r26, 0x00	; 0
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	80 93 07 01 	sts	0x0107, r24
    1a28:	90 93 08 01 	sts	0x0108, r25
    1a2c:	a0 93 09 01 	sts	0x0109, r26
    1a30:	b0 93 0a 01 	sts	0x010A, r27
    1a34:	08 95       	ret

00001a36 <eeprom_read_byte>:
    1a36:	f9 99       	sbic	0x1f, 1	; 31
    1a38:	fe cf       	rjmp	.-4      	; 0x1a36 <eeprom_read_byte>
    1a3a:	92 bd       	out	0x22, r25	; 34
    1a3c:	81 bd       	out	0x21, r24	; 33
    1a3e:	f8 9a       	sbi	0x1f, 0	; 31
    1a40:	99 27       	eor	r25, r25
    1a42:	80 b5       	in	r24, 0x20	; 32
    1a44:	08 95       	ret

00001a46 <eeprom_write_byte>:
    1a46:	26 2f       	mov	r18, r22

00001a48 <eeprom_write_r18>:
    1a48:	f9 99       	sbic	0x1f, 1	; 31
    1a4a:	fe cf       	rjmp	.-4      	; 0x1a48 <eeprom_write_r18>
    1a4c:	1f ba       	out	0x1f, r1	; 31
    1a4e:	92 bd       	out	0x22, r25	; 34
    1a50:	81 bd       	out	0x21, r24	; 33
    1a52:	20 bd       	out	0x20, r18	; 32
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	fa 9a       	sbi	0x1f, 2	; 31
    1a5a:	f9 9a       	sbi	0x1f, 1	; 31
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	08 95       	ret

00001a62 <__divmodsi4>:
    1a62:	05 2e       	mov	r0, r21
    1a64:	97 fb       	bst	r25, 7
    1a66:	1e f4       	brtc	.+6      	; 0x1a6e <__divmodsi4+0xc>
    1a68:	00 94       	com	r0
    1a6a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__negsi2>
    1a6e:	57 fd       	sbrc	r21, 7
    1a70:	07 d0       	rcall	.+14     	; 0x1a80 <__divmodsi4_neg2>
    1a72:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodsi4>
    1a76:	07 fc       	sbrc	r0, 7
    1a78:	03 d0       	rcall	.+6      	; 0x1a80 <__divmodsi4_neg2>
    1a7a:	4e f4       	brtc	.+18     	; 0x1a8e <__divmodsi4_exit>
    1a7c:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__negsi2>

00001a80 <__divmodsi4_neg2>:
    1a80:	50 95       	com	r21
    1a82:	40 95       	com	r20
    1a84:	30 95       	com	r19
    1a86:	21 95       	neg	r18
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a8e <__divmodsi4_exit>:
    1a8e:	08 95       	ret

00001a90 <__negsi2>:
    1a90:	90 95       	com	r25
    1a92:	80 95       	com	r24
    1a94:	70 95       	com	r23
    1a96:	61 95       	neg	r22
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	08 95       	ret

00001aa0 <__muluhisi3>:
    1aa0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__umulhisi3>
    1aa4:	a5 9f       	mul	r26, r21
    1aa6:	90 0d       	add	r25, r0
    1aa8:	b4 9f       	mul	r27, r20
    1aaa:	90 0d       	add	r25, r0
    1aac:	a4 9f       	mul	r26, r20
    1aae:	80 0d       	add	r24, r0
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	11 24       	eor	r1, r1
    1ab4:	08 95       	ret

00001ab6 <__mulshisi3>:
    1ab6:	b7 ff       	sbrs	r27, 7
    1ab8:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__muluhisi3>

00001abc <__mulohisi3>:
    1abc:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__muluhisi3>
    1ac0:	82 1b       	sub	r24, r18
    1ac2:	93 0b       	sbc	r25, r19
    1ac4:	08 95       	ret

00001ac6 <__udivmodsi4>:
    1ac6:	a1 e2       	ldi	r26, 0x21	; 33
    1ac8:	1a 2e       	mov	r1, r26
    1aca:	aa 1b       	sub	r26, r26
    1acc:	bb 1b       	sub	r27, r27
    1ace:	fd 01       	movw	r30, r26
    1ad0:	0d c0       	rjmp	.+26     	; 0x1aec <__udivmodsi4_ep>

00001ad2 <__udivmodsi4_loop>:
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	ee 1f       	adc	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	a2 17       	cp	r26, r18
    1adc:	b3 07       	cpc	r27, r19
    1ade:	e4 07       	cpc	r30, r20
    1ae0:	f5 07       	cpc	r31, r21
    1ae2:	20 f0       	brcs	.+8      	; 0x1aec <__udivmodsi4_ep>
    1ae4:	a2 1b       	sub	r26, r18
    1ae6:	b3 0b       	sbc	r27, r19
    1ae8:	e4 0b       	sbc	r30, r20
    1aea:	f5 0b       	sbc	r31, r21

00001aec <__udivmodsi4_ep>:
    1aec:	66 1f       	adc	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	1a 94       	dec	r1
    1af6:	69 f7       	brne	.-38     	; 0x1ad2 <__udivmodsi4_loop>
    1af8:	60 95       	com	r22
    1afa:	70 95       	com	r23
    1afc:	80 95       	com	r24
    1afe:	90 95       	com	r25
    1b00:	9b 01       	movw	r18, r22
    1b02:	ac 01       	movw	r20, r24
    1b04:	bd 01       	movw	r22, r26
    1b06:	cf 01       	movw	r24, r30
    1b08:	08 95       	ret

00001b0a <_exit>:
    1b0a:	f8 94       	cli

00001b0c <__stop_program>:
    1b0c:	ff cf       	rjmp	.-2      	; 0x1b0c <__stop_program>
