
build/test_listener_mod.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	10 02       	muls	r17, r16
      6a:	8c 02       	muls	r24, r28
      6c:	e4 01       	movw	r28, r8
      6e:	db 01       	movw	r26, r22
      70:	e1 01       	movw	r28, r2
      72:	6e 02       	muls	r22, r30
      74:	63 02       	muls	r22, r19
      76:	ee 08       	sbc	r14, r14
      78:	cb 07       	cpc	r28, r27
      7a:	cb 07       	cpc	r28, r27
      7c:	eb 08       	sbc	r14, r11
      7e:	f7 08       	sbc	r15, r7
      80:	e7 08       	sbc	r14, r7
      82:	fe 08       	sbc	r15, r14
      84:	fa 08       	sbc	r15, r10
      86:	02 09       	sbc	r16, r2
      88:	ba 08       	sbc	r11, r10
      8a:	8c 08       	sbc	r8, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 eb       	ldi	r30, 0xB4	; 180
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 37       	cpi	r26, 0x74	; 116
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 34 0a 	call	0x1468	; 0x1468 <main>
      da:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
int new_message = 0;
int distance = 0;
int odd = 0;

void setup()
{
      e2:	08 95       	ret

000000e4 <message_rx>:
        set_color(RGB(0, 0, 0));
    }
}

void message_rx(message_t *message, distance_measurement_t *distance_measurement)
{
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	ec 01       	movw	r28, r24
      ea:	cb 01       	movw	r24, r22
    // Set flag on message reception.
    new_message = 1;
      ec:	21 e0       	ldi	r18, 0x01	; 1
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	30 93 11 01 	sts	0x0111, r19
      f4:	20 93 10 01 	sts	0x0110, r18
    
    distance = estimate_distance(distance_measurement);
      f8:	0e 94 0a 04 	call	0x814	; 0x814 <estimate_distance>
      fc:	28 2f       	mov	r18, r24
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	30 93 0f 01 	sts	0x010F, r19
     104:	20 93 0e 01 	sts	0x010E, r18
    odd = message->data[0];
     108:	88 81       	ld	r24, Y
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	90 93 0d 01 	sts	0x010D, r25
     110:	80 93 0c 01 	sts	0x010C, r24
}
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <loop>:
{
}

void loop()
{
    if (new_message == 1)
     11a:	80 91 10 01 	lds	r24, 0x0110
     11e:	90 91 11 01 	lds	r25, 0x0111
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	09 f0       	breq	.+2      	; 0x128 <loop+0xe>
     126:	08 95       	ret
    {
        new_message = 0;
     128:	10 92 11 01 	sts	0x0111, r1
     12c:	10 92 10 01 	sts	0x0110, r1
        
        // Near ...
        if (distance <= 50)
     130:	80 91 0e 01 	lds	r24, 0x010E
     134:	90 91 0f 01 	lds	r25, 0x010F
     138:	c3 97       	sbiw	r24, 0x33	; 51
     13a:	84 f0       	brlt	.+32     	; 0x15c <loop+0x42>
        }
        // Far ...
        else
        {
            // ... and even: set the LED blue.
            if (odd == 0)
     13c:	80 91 0c 01 	lds	r24, 0x010C
     140:	90 91 0d 01 	lds	r25, 0x010D
     144:	89 2b       	or	r24, r25
     146:	a1 f4       	brne	.+40     	; 0x170 <loop+0x56>
            {
                set_color(RGB(0, 0, 1));
     148:	80 e1       	ldi	r24, 0x10	; 16
     14a:	0e 94 45 07 	call	0xe8a	; 0xe8a <set_color>
                set_color(RGB(1, 1, 0));
            }
        }
        
        // Wherever you are: set LED off after 100 ms to achieve blink effect.
        delay(100);
     14e:	84 e6       	ldi	r24, 0x64	; 100
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 19 03 	call	0x632	; 0x632 <delay>
        set_color(RGB(0, 0, 0));
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <set_color>
        
        // Near ...
        if (distance <= 50)
        {
            // ... and even: set the LED red.
            if (odd == 0)
     15c:	80 91 0c 01 	lds	r24, 0x010C
     160:	90 91 0d 01 	lds	r25, 0x010D
     164:	89 2b       	or	r24, r25
     166:	41 f4       	brne	.+16     	; 0x178 <loop+0x5e>
            {
                set_color(RGB(1, 0, 0));
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 45 07 	call	0xe8a	; 0xe8a <set_color>
     16e:	ef cf       	rjmp	.-34     	; 0x14e <loop+0x34>
                set_color(RGB(0, 0, 1));
            }
            // ... and odd: set the LED yellow.
            else
            {
                set_color(RGB(1, 1, 0));
     170:	85 e0       	ldi	r24, 0x05	; 5
     172:	0e 94 45 07 	call	0xe8a	; 0xe8a <set_color>
     176:	eb cf       	rjmp	.-42     	; 0x14e <loop+0x34>
                set_color(RGB(1, 0, 0));
            }
            // ... and odd: set the LED green.
            else
            {
                set_color(RGB(0, 1, 0));
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	0e 94 45 07 	call	0xe8a	; 0xe8a <set_color>
     17e:	e7 cf       	rjmp	.-50     	; 0x14e <loop+0x34>

00000180 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     180:	08 95       	ret

00000182 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret

00000188 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     188:	08 95       	ret

0000018a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
    cli();
     198:	f8 94       	cli

    ports_off();
     19a:	14 b8       	out	0x04, r1	; 4
     19c:	17 b8       	out	0x07, r1	; 7
     19e:	1a b8       	out	0x0a, r1	; 10
     1a0:	15 b8       	out	0x05, r1	; 5
     1a2:	18 b8       	out	0x08, r1	; 8
     1a4:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1a6:	52 9a       	sbi	0x0a, 2	; 10
     1a8:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1aa:	14 bc       	out	0x24, r1	; 36
     1ac:	85 e0       	ldi	r24, 0x05	; 5
     1ae:	85 bd       	out	0x25, r24	; 37
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	87 bd       	out	0x27, r24	; 39
     1b4:	82 e0       	ldi	r24, 0x02	; 2
     1b6:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     1ba:	10 92 80 00 	sts	0x0080, r1
     1be:	10 92 81 00 	sts	0x0081, r1
     1c2:	2f e8       	ldi	r18, 0x8F	; 143
     1c4:	3b e0       	ldi	r19, 0x0B	; 11
     1c6:	30 93 89 00 	sts	0x0089, r19
     1ca:	20 93 88 00 	sts	0x0088, r18
     1ce:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     1d2:	53 98       	cbi	0x0a, 3	; 10
     1d4:	23 98       	cbi	0x04, 3	; 4
     1d6:	91 ea       	ldi	r25, 0xA1	; 161
     1d8:	90 93 b0 00 	sts	0x00B0, r25
     1dc:	80 93 b1 00 	sts	0x00B1, r24
     1e0:	10 92 b4 00 	sts	0x00B4, r1
     1e4:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     1e8:	8b e0       	ldi	r24, 0x0B	; 11
     1ea:	80 bf       	out	0x30, r24	; 48
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     1f2:	86 e0       	ldi	r24, 0x06	; 6
     1f4:	80 93 7c 00 	sts	0x007C, r24
     1f8:	83 e8       	ldi	r24, 0x83	; 131
     1fa:	80 93 7a 00 	sts	0x007A, r24
     1fe:	80 91 7a 00 	lds	r24, 0x007A
     202:	80 64       	ori	r24, 0x40	; 64
     204:	80 93 7a 00 	sts	0x007A, r24
     208:	80 91 7a 00 	lds	r24, 0x007A
     20c:	86 fd       	sbrc	r24, 6
     20e:	fc cf       	rjmp	.-8      	; 0x208 <kilo_init+0x7e>
    adc_trigger_high_gain();
     210:	10 92 7c 00 	sts	0x007C, r1
     214:	83 ea       	ldi	r24, 0xA3	; 163
     216:	80 93 7a 00 	sts	0x007A, r24
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
    if (osccal != 0xFF)
     228:	8f 3f       	cpi	r24, 0xFF	; 255
     22a:	11 f0       	breq	.+4      	; 0x230 <kilo_init+0xa6>
        OSCCAL = osccal;
     22c:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     230:	10 92 3d 01 	sts	0x013D, r1
    rx_leadingbit = 1;
     234:	c1 e0       	ldi	r28, 0x01	; 1
     236:	c0 93 16 01 	sts	0x0116, r28
    rx_leadingbyte = 1;
     23a:	c0 93 5a 01 	sts	0x015A, r28
    rx_byteindex = 0;
     23e:	10 92 34 01 	sts	0x0134, r1
    rx_bytevalue = 0;
     242:	10 92 6e 01 	sts	0x016E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     246:	80 e9       	ldi	r24, 0x90	; 144
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     24e:	80 93 33 01 	sts	0x0133, r24
    if (tx_mask & ~TX_MASK_MAX)
     252:	80 91 33 01 	lds	r24, 0x0133
     256:	88 73       	andi	r24, 0x38	; 56
     258:	11 f0       	breq	.+4      	; 0x25e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     25a:	c0 93 33 01 	sts	0x0133, r28
    tx_clock = 0;
     25e:	10 92 5e 01 	sts	0x015E, r1
     262:	10 92 5d 01 	sts	0x015D, r1
    tx_increment = 255;
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 5c 01 	sts	0x015C, r25
     26e:	80 93 5b 01 	sts	0x015B, r24
    kilo_ticks = 0;
     272:	10 92 39 01 	sts	0x0139, r1
     276:	10 92 3a 01 	sts	0x013A, r1
     27a:	10 92 3b 01 	sts	0x013B, r1
     27e:	10 92 3c 01 	sts	0x013C, r1
    kilo_state = IDLE;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 15 01 	sts	0x0115, r24
    kilo_tx_period = 3906;
     288:	82 e4       	ldi	r24, 0x42	; 66
     28a:	9f e0       	ldi	r25, 0x0F	; 15
     28c:	90 93 6d 01 	sts	0x016D, r25
     290:	80 93 6c 01 	sts	0x016C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     294:	80 eb       	ldi	r24, 0xB0	; 176
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     29c:	c8 2f       	mov	r28, r24
     29e:	81 eb       	ldi	r24, 0xB1	; 177
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     2a6:	2c 2f       	mov	r18, r28
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	38 2b       	or	r19, r24
     2ac:	30 93 70 01 	sts	0x0170, r19
     2b0:	20 93 6f 01 	sts	0x016F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     2b4:	85 e0       	ldi	r24, 0x05	; 5
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     2bc:	80 93 73 01 	sts	0x0173, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     2c8:	80 93 5f 01 	sts	0x015F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     2cc:	8c e0       	ldi	r24, 0x0C	; 12
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     2d4:	80 93 71 01 	sts	0x0171, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2d8:	84 e1       	ldi	r24, 0x14	; 20
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     2e0:	80 93 72 01 	sts	0x0172, r24
     2e4:	5e e3       	ldi	r21, 0x3E	; 62
     2e6:	e5 2e       	mov	r14, r21
     2e8:	51 e0       	ldi	r21, 0x01	; 1
     2ea:	f5 2e       	mov	r15, r21
     2ec:	07 e1       	ldi	r16, 0x17	; 23
     2ee:	11 e0       	ldi	r17, 0x01	; 1
     2f0:	c0 e2       	ldi	r28, 0x20	; 32
     2f2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2f4:	ce 01       	movw	r24, r28
     2f6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     2fa:	d8 2e       	mov	r13, r24
     2fc:	ce 01       	movw	r24, r28
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     304:	2d 2d       	mov	r18, r13
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	32 2f       	mov	r19, r18
     30a:	22 27       	eor	r18, r18
     30c:	28 2b       	or	r18, r24
     30e:	f7 01       	movw	r30, r14
     310:	21 93       	st	Z+, r18
     312:	31 93       	st	Z+, r19
     314:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     316:	ce 01       	movw	r24, r28
     318:	c0 96       	adiw	r24, 0x30	; 48
     31a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     31e:	d8 2e       	mov	r13, r24
     320:	ce 01       	movw	r24, r28
     322:	c1 96       	adiw	r24, 0x31	; 49
     324:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <eeprom_read_byte>
     328:	2d 2d       	mov	r18, r13
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	32 2f       	mov	r19, r18
     32e:	22 27       	eor	r18, r18
     330:	28 2b       	or	r18, r24
     332:	f8 01       	movw	r30, r16
     334:	21 93       	st	Z+, r18
     336:	31 93       	st	Z+, r19
     338:	8f 01       	movw	r16, r30
     33a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     33c:	cc 33       	cpi	r28, 0x3C	; 60
     33e:	d1 05       	cpc	r29, r1
     340:	c9 f6       	brne	.-78     	; 0x2f4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     342:	78 94       	sei
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	08 95       	ret

00000354 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	8f 93       	push	r24
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	a8 95       	wdr
     366:	80 91 60 00 	lds	r24, 0x0060
     36a:	88 61       	ori	r24, 0x18	; 24
     36c:	80 93 60 00 	sts	0x0060, r24
     370:	10 92 60 00 	sts	0x0060, r1
     374:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     376:	8f 91       	pop	r24
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     382:	3c 01       	movw	r6, r24
     384:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     386:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     388:	99 24       	eor	r9, r9
     38a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     38c:	84 e0       	ldi	r24, 0x04	; 4
     38e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     390:	96 e0       	ldi	r25, 0x06	; 6
     392:	a9 2e       	mov	r10, r25
     394:	23 e8       	ldi	r18, 0x83	; 131
     396:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     398:	38 e1       	ldi	r19, 0x18	; 24
     39a:	d3 2e       	mov	r13, r19
     39c:	49 e2       	ldi	r20, 0x29	; 41
     39e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     3a0:	90 91 15 01 	lds	r25, 0x0115
     3a4:	e9 2f       	mov	r30, r25
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	e7 30       	cpi	r30, 0x07	; 7
     3aa:	f1 05       	cpc	r31, r1
     3ac:	c8 f7       	brcc	.-14     	; 0x3a0 <kilo_start+0x1e>
     3ae:	ec 5c       	subi	r30, 0xCC	; 204
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     3b6:	11 23       	and	r17, r17
     3b8:	09 f4       	brne	.+2      	; 0x3bc <kilo_start+0x3a>
     3ba:	fc c0       	rjmp	.+504    	; 0x5b4 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3bc:	c0 92 15 01 	sts	0x0115, r12
     3c0:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     3c2:	fe 01       	movw	r30, r28
     3c4:	09 95       	icall
                break;
     3c6:	ec cf       	rjmp	.-40     	; 0x3a0 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     3c8:	80 91 3d 01 	lds	r24, 0x013D
     3cc:	81 11       	cpse	r24, r1
     3ce:	eb c0       	rjmp	.+470    	; 0x5a6 <kilo_start+0x224>
        cli();                                    // disable interrupts
     3d0:	f8 94       	cli
        adc_setup_conversion(6);
     3d2:	a0 92 7c 00 	sts	0x007C, r10
     3d6:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     3da:	80 91 7a 00 	lds	r24, 0x007A
     3de:	80 64       	ori	r24, 0x40	; 64
     3e0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3e4:	90 91 7a 00 	lds	r25, 0x007A
     3e8:	96 fd       	sbrc	r25, 6
     3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     3ec:	80 91 78 00 	lds	r24, 0x0078
     3f0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3f4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3f6:	8b 3a       	cpi	r24, 0xAB	; 171
     3f8:	e2 e0       	ldi	r30, 0x02	; 2
     3fa:	9e 07       	cpc	r25, r30
     3fc:	0c f0       	brlt	.+2      	; 0x400 <kilo_start+0x7e>
     3fe:	ed c0       	rjmp	.+474    	; 0x5da <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     400:	89 38       	cpi	r24, 0x89	; 137
     402:	f2 e0       	ldi	r31, 0x02	; 2
     404:	9f 07       	cpc	r25, r31
     406:	0c f0       	brlt	.+2      	; 0x40a <kilo_start+0x88>
     408:	ef c0       	rjmp	.+478    	; 0x5e8 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     40a:	87 36       	cpi	r24, 0x67	; 103
     40c:	92 40       	sbci	r25, 0x02	; 2
     40e:	0c f4       	brge	.+2      	; 0x412 <kilo_start+0x90>
     410:	ca c0       	rjmp	.+404    	; 0x5a6 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     412:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     414:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     416:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     418:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     41a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     41c:	3c 98       	cbi	0x07, 4	; 7
     41e:	c0 cf       	rjmp	.-128    	; 0x3a0 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     420:	f8 94       	cli
                acomp_off();
     422:	80 b7       	in	r24, 0x30	; 48
     424:	87 7f       	andi	r24, 0xF7	; 247
     426:	80 bf       	out	0x30, r24	; 48
                adc_off();
     428:	80 91 7a 00 	lds	r24, 0x007A
     42c:	8f 77       	andi	r24, 0x7F	; 127
     42e:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     432:	14 b8       	out	0x04, r1	; 4
     434:	17 b8       	out	0x07, r1	; 7
     436:	1a b8       	out	0x0a, r1	; 10
     438:	15 b8       	out	0x05, r1	; 5
     43a:	18 b8       	out	0x08, r1	; 8
     43c:	1b b8       	out	0x0b, r1	; 11
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	a8 95       	wdr
     444:	d0 92 60 00 	sts	0x0060, r13
     448:	0f be       	out	0x3f, r0	; 63
     44a:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     44e:	80 91 60 00 	lds	r24, 0x0060
     452:	80 64       	ori	r24, 0x40	; 64
     454:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     458:	93 b7       	in	r25, 0x33	; 51
     45a:	91 7f       	andi	r25, 0xF1	; 241
     45c:	94 60       	ori	r25, 0x04	; 4
     45e:	93 bf       	out	0x33, r25	; 51
                cli();
     460:	f8 94       	cli
                sleep_enable();
     462:	83 b7       	in	r24, 0x33	; 51
     464:	81 60       	ori	r24, 0x01	; 1
     466:	83 bf       	out	0x33, r24	; 51
                sei();
     468:	78 94       	sei
                sleep_cpu();
     46a:	88 95       	sleep
                sleep_disable();
     46c:	83 b7       	in	r24, 0x33	; 51
     46e:	8e 7f       	andi	r24, 0xFE	; 254
     470:	83 bf       	out	0x33, r24	; 51
                sei();
     472:	78 94       	sei
                rx_busy = 0;
     474:	10 92 3d 01 	sts	0x013D, r1
                ports_on();
     478:	52 9a       	sbi	0x0a, 2	; 10
     47a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     47c:	80 91 7a 00 	lds	r24, 0x007A
     480:	80 68       	ori	r24, 0x80	; 128
     482:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     486:	87 e5       	ldi	r24, 0x57	; 87
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <kilo_start+0x108>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <kilo_start+0x10e>
     490:	00 00       	nop
                _delay_us(300);
                acomp_on();
     492:	80 b7       	in	r24, 0x30	; 48
     494:	88 61       	ori	r24, 0x18	; 24
     496:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     498:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     49a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     49c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     49e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     4a0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     4a2:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a4:	ef e1       	ldi	r30, 0x1F	; 31
     4a6:	fe e4       	ldi	r31, 0x4E	; 78
     4a8:	31 97       	sbiw	r30, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <kilo_start+0x126>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <kilo_start+0x12c>
     4ae:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     4b0:	80 91 3d 01 	lds	r24, 0x013D
     4b4:	81 11       	cpse	r24, r1
     4b6:	81 c0       	rjmp	.+258    	; 0x5ba <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4b8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4c2:	3c 98       	cbi	0x07, 4	; 7
     4c4:	6d cf       	rjmp	.-294    	; 0x3a0 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     4c6:	80 91 13 01 	lds	r24, 0x0113
     4ca:	81 11       	cpse	r24, r1
     4cc:	41 c0       	rjmp	.+130    	; 0x550 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4ce:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4d2:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     4d6:	10 92 14 01 	sts	0x0114, r1
     4da:	62 cf       	rjmp	.-316    	; 0x3a0 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     4dc:	48 99       	sbic	0x09, 0	; 9
     4de:	ec cf       	rjmp	.-40     	; 0x4b8 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4e0:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4e2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4e4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4e6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4e8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4ea:	3c 98       	cbi	0x07, 4	; 7
     4ec:	8f ec       	ldi	r24, 0xCF	; 207
     4ee:	97 e0       	ldi	r25, 0x07	; 7
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <kilo_start+0x16e>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <kilo_start+0x174>
     4f6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4f8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4fa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4fc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4fe:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     500:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     502:	3c 98       	cbi	0x07, 4	; 7
     504:	9f ef       	ldi	r25, 0xFF	; 255
     506:	e1 ee       	ldi	r30, 0xE1	; 225
     508:	f4 e0       	ldi	r31, 0x04	; 4
     50a:	91 50       	subi	r25, 0x01	; 1
     50c:	e0 40       	sbci	r30, 0x00	; 0
     50e:	f0 40       	sbci	r31, 0x00	; 0
     510:	e1 f7       	brne	.-8      	; 0x50a <kilo_start+0x188>
     512:	00 c0       	rjmp	.+0      	; 0x514 <kilo_start+0x192>
     514:	00 00       	nop
     516:	44 cf       	rjmp	.-376    	; 0x3a0 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     518:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     51a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     51c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     51e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     520:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     522:	3c 98       	cbi	0x07, 4	; 7
     524:	ef ec       	ldi	r30, 0xCF	; 207
     526:	f7 e0       	ldi	r31, 0x07	; 7
     528:	31 97       	sbiw	r30, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <kilo_start+0x1a6>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <kilo_start+0x1ac>
     52e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     530:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     532:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     534:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     536:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     538:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     53a:	3c 98       	cbi	0x07, 4	; 7
     53c:	ff ef       	ldi	r31, 0xFF	; 255
     53e:	21 ee       	ldi	r18, 0xE1	; 225
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	f1 50       	subi	r31, 0x01	; 1
     544:	20 40       	sbci	r18, 0x00	; 0
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <kilo_start+0x1c0>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <kilo_start+0x1ca>
     54c:	00 00       	nop
     54e:	28 cf       	rjmp	.-432    	; 0x3a0 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     550:	90 91 13 01 	lds	r25, 0x0113
     554:	80 91 14 01 	lds	r24, 0x0114
     558:	98 17       	cp	r25, r24
     55a:	09 f4       	brne	.+2      	; 0x55e <kilo_start+0x1dc>
     55c:	21 cf       	rjmp	.-446    	; 0x3a0 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     55e:	80 91 13 01 	lds	r24, 0x0113
     562:	80 93 14 01 	sts	0x0114, r24
                        if (cur_motion == MOVE_LEFT) {
     566:	80 91 13 01 	lds	r24, 0x0113
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	09 f4       	brne	.+2      	; 0x570 <kilo_start+0x1ee>
     56e:	50 c0       	rjmp	.+160    	; 0x610 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     570:	80 91 13 01 	lds	r24, 0x0113
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     574:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     578:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	d9 f1       	breq	.+118    	; 0x5f6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     580:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     584:	90 92 b4 00 	sts	0x00B4, r9
     588:	8f e2       	ldi	r24, 0x2F	; 47
     58a:	95 e7       	ldi	r25, 0x75	; 117
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <kilo_start+0x20a>
     590:	00 c0       	rjmp	.+0      	; 0x592 <kilo_start+0x210>
     592:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     594:	80 91 72 01 	lds	r24, 0x0172
     598:	90 91 71 01 	lds	r25, 0x0171
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     59c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     5a0:	80 93 b4 00 	sts	0x00B4, r24
     5a4:	fd ce       	rjmp	.-518    	; 0x3a0 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5a6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5a8:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5aa:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5ac:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5ae:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5b0:	3c 98       	cbi	0x07, 4	; 7
     5b2:	f6 ce       	rjmp	.-532    	; 0x3a0 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     5b4:	f3 01       	movw	r30, r6
     5b6:	09 95       	icall
     5b8:	01 cf       	rjmp	.-510    	; 0x3bc <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5ba:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5bc:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5be:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5c0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5c2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5c4:	3c 98       	cbi	0x07, 4	; 7
     5c6:	ff ef       	ldi	r31, 0xFF	; 255
     5c8:	20 e7       	ldi	r18, 0x70	; 112
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	f1 50       	subi	r31, 0x01	; 1
     5ce:	20 40       	sbci	r18, 0x00	; 0
     5d0:	80 40       	sbci	r24, 0x00	; 0
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <kilo_start+0x24a>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <kilo_start+0x254>
     5d6:	00 00       	nop
     5d8:	6f cf       	rjmp	.-290    	; 0x4b8 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5da:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5dc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5de:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5e0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5e2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5e4:	3c 98       	cbi	0x07, 4	; 7
     5e6:	dc ce       	rjmp	.-584    	; 0x3a0 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5e8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5ea:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5ec:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5ee:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5f0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5f2:	3c 9a       	sbi	0x07, 4	; 7
     5f4:	d5 ce       	rjmp	.-598    	; 0x3a0 <kilo_start+0x1e>
     5f6:	ef e2       	ldi	r30, 0x2F	; 47
     5f8:	f5 e7       	ldi	r31, 0x75	; 117
     5fa:	31 97       	sbiw	r30, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <kilo_start+0x278>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <kilo_start+0x27e>
     600:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     602:	80 91 5f 01 	lds	r24, 0x015F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     606:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     60a:	80 93 b4 00 	sts	0x00B4, r24
     60e:	c8 ce       	rjmp	.-624    	; 0x3a0 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     610:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     614:	10 92 b4 00 	sts	0x00B4, r1
     618:	8f e2       	ldi	r24, 0x2F	; 47
     61a:	95 e7       	ldi	r25, 0x75	; 117
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <kilo_start+0x29a>
     620:	00 c0       	rjmp	.+0      	; 0x622 <kilo_start+0x2a0>
     622:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     624:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     628:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     62c:	10 92 b4 00 	sts	0x00B4, r1
     630:	b7 ce       	rjmp	.-658    	; 0x3a0 <kilo_start+0x1e>

00000632 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     632:	07 c0       	rjmp	.+14     	; 0x642 <delay+0x10>
     634:	ef ec       	ldi	r30, 0xCF	; 207
     636:	f7 e0       	ldi	r31, 0x07	; 7
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <delay+0x6>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <delay+0xc>
     63e:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     640:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     642:	00 97       	sbiw	r24, 0x00	; 0
     644:	b9 f7       	brne	.-18     	; 0x634 <delay+0x2>
     646:	08 95       	ret

00000648 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     648:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     64c:	60 93 b4 00 	sts	0x00B4, r22
     650:	08 95       	ret

00000652 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     658:	80 93 b4 00 	sts	0x00B4, r24
     65c:	8f e0       	ldi	r24, 0x0F	; 15
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	ef ec       	ldi	r30, 0xCF	; 207
     662:	f7 e0       	ldi	r31, 0x07	; 7
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <spinup_motors+0x12>
     668:	00 c0       	rjmp	.+0      	; 0x66a <spinup_motors+0x18>
     66a:	00 00       	nop
     66c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     66e:	c1 f7       	brne	.-16     	; 0x660 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     670:	08 95       	ret

00000672 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     672:	80 91 3d 01 	lds	r24, 0x013D
     676:	81 11       	cpse	r24, r1
     678:	1e c0       	rjmp	.+60     	; 0x6b6 <get_ambientlight+0x44>
        cli();
     67a:	f8 94       	cli
        adc_setup_conversion(7);
     67c:	87 e0       	ldi	r24, 0x07	; 7
     67e:	80 93 7c 00 	sts	0x007C, r24
     682:	83 e8       	ldi	r24, 0x83	; 131
     684:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     688:	80 91 7a 00 	lds	r24, 0x007A
     68c:	80 64       	ori	r24, 0x40	; 64
     68e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     692:	80 91 7a 00 	lds	r24, 0x007A
     696:	86 fd       	sbrc	r24, 6
     698:	fc cf       	rjmp	.-8      	; 0x692 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     69a:	80 91 78 00 	lds	r24, 0x0078
     69e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6a2:	10 92 7c 00 	sts	0x007C, r1
     6a6:	23 ea       	ldi	r18, 0xA3	; 163
     6a8:	20 93 7a 00 	sts	0x007A, r18
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6b2:	78 94       	sei
     6b4:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     6ba:	08 95       	ret

000006bc <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     6bc:	80 91 3d 01 	lds	r24, 0x013D
     6c0:	81 11       	cpse	r24, r1
     6c2:	1e c0       	rjmp	.+60     	; 0x700 <get_temperature+0x44>
        cli();
     6c4:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     6c6:	88 ec       	ldi	r24, 0xC8	; 200
     6c8:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     6cc:	87 e8       	ldi	r24, 0x87	; 135
     6ce:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6d2:	80 91 7a 00 	lds	r24, 0x007A
     6d6:	80 64       	ori	r24, 0x40	; 64
     6d8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6dc:	80 91 7a 00 	lds	r24, 0x007A
     6e0:	86 fd       	sbrc	r24, 6
     6e2:	fc cf       	rjmp	.-8      	; 0x6dc <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6e4:	80 91 78 00 	lds	r24, 0x0078
     6e8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6ec:	10 92 7c 00 	sts	0x007C, r1
     6f0:	23 ea       	ldi	r18, 0xA3	; 163
     6f2:	20 93 7a 00 	sts	0x007A, r18
     6f6:	21 e0       	ldi	r18, 0x01	; 1
     6f8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6fc:	78 94       	sei
     6fe:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     704:	08 95       	ret

00000706 <rand_hard>:

uint8_t rand_hard() {
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	e0 e0       	ldi	r30, 0x00	; 0
     710:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     712:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     714:	03 ea       	ldi	r16, 0xA3	; 163
     716:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     718:	d6 e0       	ldi	r29, 0x06	; 6
     71a:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     71c:	a1 e0       	ldi	r26, 0x01	; 1
     71e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     720:	60 e8       	ldi	r22, 0x80	; 128
     722:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     724:	f8 94       	cli
            adc_setup_conversion(6);
     726:	d0 93 7c 00 	sts	0x007C, r29
     72a:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     72e:	90 91 7a 00 	lds	r25, 0x007A
     732:	90 64       	ori	r25, 0x40	; 64
     734:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     738:	90 91 7a 00 	lds	r25, 0x007A
     73c:	96 fd       	sbrc	r25, 6
     73e:	fc cf       	rjmp	.-8      	; 0x738 <rand_hard+0x32>
            a = ADCW&0x1;
     740:	20 91 78 00 	lds	r18, 0x0078
     744:	30 91 79 00 	lds	r19, 0x0079
     748:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     74a:	90 91 7a 00 	lds	r25, 0x007A
     74e:	90 64       	ori	r25, 0x40	; 64
     750:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     754:	90 91 7a 00 	lds	r25, 0x007A
     758:	96 fd       	sbrc	r25, 6
     75a:	fc cf       	rjmp	.-8      	; 0x754 <rand_hard+0x4e>
            b = ADCW&0x1;
     75c:	40 91 78 00 	lds	r20, 0x0078
     760:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     764:	10 92 7c 00 	sts	0x007C, r1
     768:	00 93 7a 00 	sts	0x007A, r16
     76c:	10 93 7b 00 	sts	0x007B, r17
            sei();
     770:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     772:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     774:	24 13       	cpse	r18, r20
     776:	03 c0       	rjmp	.+6      	; 0x77e <rand_hard+0x78>
     778:	61 50       	subi	r22, 0x01	; 1
     77a:	71 09       	sbc	r23, r1
     77c:	99 f6       	brne	.-90     	; 0x724 <rand_hard+0x1e>
        if (a)
     77e:	22 23       	and	r18, r18
     780:	39 f0       	breq	.+14     	; 0x790 <rand_hard+0x8a>
            num |= (1<<i);
     782:	9d 01       	movw	r18, r26
     784:	0e 2e       	mov	r0, r30
     786:	01 c0       	rjmp	.+2      	; 0x78a <rand_hard+0x84>
     788:	22 0f       	add	r18, r18
     78a:	0a 94       	dec	r0
     78c:	ea f7       	brpl	.-6      	; 0x788 <rand_hard+0x82>
     78e:	82 2b       	or	r24, r18
     790:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     792:	e8 30       	cpi	r30, 0x08	; 8
     794:	f1 05       	cpc	r31, r1
     796:	09 f0       	breq	.+2      	; 0x79a <rand_hard+0x94>
     798:	c3 cf       	rjmp	.-122    	; 0x720 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     7a4:	80 91 00 01 	lds	r24, 0x0100
     7a8:	98 2f       	mov	r25, r24
     7aa:	99 0f       	add	r25, r25
     7ac:	99 0f       	add	r25, r25
     7ae:	99 0f       	add	r25, r25
     7b0:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     7b2:	90 91 12 01 	lds	r25, 0x0112
     7b6:	21 e0       	ldi	r18, 0x01	; 1
     7b8:	29 0f       	add	r18, r25
     7ba:	20 93 12 01 	sts	0x0112, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     7be:	28 2f       	mov	r18, r24
     7c0:	22 95       	swap	r18
     7c2:	26 95       	lsr	r18
     7c4:	27 70       	andi	r18, 0x07	; 7
     7c6:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     7c8:	96 95       	lsr	r25
     7ca:	96 95       	lsr	r25
     7cc:	89 27       	eor	r24, r25
     7ce:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     7d2:	08 95       	ret

000007d4 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     7d4:	80 93 00 01 	sts	0x0100, r24
     7d8:	08 95       	ret

000007da <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     7da:	80 91 3d 01 	lds	r24, 0x013D
     7de:	81 11       	cpse	r24, r1
     7e0:	16 c0       	rjmp	.+44     	; 0x80e <get_voltage+0x34>
        cli();                                    // disable interrupts
     7e2:	f8 94       	cli
        adc_setup_conversion(6);
     7e4:	86 e0       	ldi	r24, 0x06	; 6
     7e6:	80 93 7c 00 	sts	0x007C, r24
     7ea:	83 e8       	ldi	r24, 0x83	; 131
     7ec:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7f0:	80 91 7a 00 	lds	r24, 0x007A
     7f4:	80 64       	ori	r24, 0x40	; 64
     7f6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7fa:	80 91 7a 00 	lds	r24, 0x007A
     7fe:	86 fd       	sbrc	r24, 6
     800:	fc cf       	rjmp	.-8      	; 0x7fa <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     802:	80 91 78 00 	lds	r24, 0x0078
     806:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     80a:	78 94       	sei
     80c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     812:	08 95       	ret

00000814 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     814:	2f 92       	push	r2
     816:	3f 92       	push	r3
     818:	4f 92       	push	r4
     81a:	5f 92       	push	r5
     81c:	6f 92       	push	r6
     81e:	7f 92       	push	r7
     820:	8f 92       	push	r8
     822:	9f 92       	push	r9
     824:	af 92       	push	r10
     826:	bf 92       	push	r11
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	00 d0       	rcall	.+0      	; 0x83a <estimate_distance+0x26>
     83a:	00 d0       	rcall	.+0      	; 0x83c <estimate_distance+0x28>
     83c:	00 d0       	rcall	.+0      	; 0x83e <estimate_distance+0x2a>
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     844:	dc 01       	movw	r26, r24
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	0d 90       	ld	r0, X+
     84a:	bc 91       	ld	r27, X
     84c:	a0 2d       	mov	r26, r0
     84e:	be 83       	std	Y+6, r27	; 0x06
     850:	ad 83       	std	Y+5, r26	; 0x05
     852:	a4 38       	cpi	r26, 0x84	; 132
     854:	e3 e0       	ldi	r30, 0x03	; 3
     856:	be 07       	cpc	r27, r30
     858:	0c f0       	brlt	.+2      	; 0x85c <estimate_distance+0x48>
     85a:	c9 c0       	rjmp	.+402    	; 0x9ee <__stack+0xef>
        if (dist->high_gain > kilo_irhigh[0]) {
     85c:	80 91 17 01 	lds	r24, 0x0117
     860:	90 91 18 01 	lds	r25, 0x0118
     864:	8a 17       	cp	r24, r26
     866:	9b 07       	cpc	r25, r27
     868:	08 f4       	brcc	.+2      	; 0x86c <estimate_distance+0x58>
     86a:	37 c1       	rjmp	.+622    	; 0xada <__stack+0x1db>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     86c:	00 91 19 01 	lds	r16, 0x0119
     870:	10 91 1a 01 	lds	r17, 0x011A
     874:	0a 17       	cp	r16, r26
     876:	1b 07       	cpc	r17, r27
     878:	08 f4       	brcc	.+2      	; 0x87c <estimate_distance+0x68>
     87a:	2f c2       	rjmp	.+1118   	; 0xcda <__stack+0x3db>
     87c:	00 91 1b 01 	lds	r16, 0x011B
     880:	10 91 1c 01 	lds	r17, 0x011C
     884:	0a 17       	cp	r16, r26
     886:	1b 07       	cpc	r17, r27
     888:	08 f4       	brcc	.+2      	; 0x88c <estimate_distance+0x78>
     88a:	2f c2       	rjmp	.+1118   	; 0xcea <__stack+0x3eb>
     88c:	00 91 1d 01 	lds	r16, 0x011D
     890:	10 91 1e 01 	lds	r17, 0x011E
     894:	0a 17       	cp	r16, r26
     896:	1b 07       	cpc	r17, r27
     898:	08 f4       	brcc	.+2      	; 0x89c <estimate_distance+0x88>
     89a:	2f c2       	rjmp	.+1118   	; 0xcfa <__stack+0x3fb>
     89c:	00 91 1f 01 	lds	r16, 0x011F
     8a0:	10 91 20 01 	lds	r17, 0x0120
     8a4:	0a 17       	cp	r16, r26
     8a6:	1b 07       	cpc	r17, r27
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <estimate_distance+0x98>
     8aa:	2f c2       	rjmp	.+1118   	; 0xd0a <__stack+0x40b>
     8ac:	00 91 21 01 	lds	r16, 0x0121
     8b0:	10 91 22 01 	lds	r17, 0x0122
     8b4:	0a 17       	cp	r16, r26
     8b6:	1b 07       	cpc	r17, r27
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <estimate_distance+0xa8>
     8ba:	ef c1       	rjmp	.+990    	; 0xc9a <__stack+0x39b>
     8bc:	00 91 23 01 	lds	r16, 0x0123
     8c0:	10 91 24 01 	lds	r17, 0x0124
     8c4:	0a 17       	cp	r16, r26
     8c6:	1b 07       	cpc	r17, r27
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <estimate_distance+0xb8>
     8ca:	27 c2       	rjmp	.+1102   	; 0xd1a <__stack+0x41b>
     8cc:	00 91 25 01 	lds	r16, 0x0125
     8d0:	10 91 26 01 	lds	r17, 0x0126
     8d4:	0a 17       	cp	r16, r26
     8d6:	1b 07       	cpc	r17, r27
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <estimate_distance+0xc8>
     8da:	27 c2       	rjmp	.+1102   	; 0xd2a <__stack+0x42b>
     8dc:	00 91 27 01 	lds	r16, 0x0127
     8e0:	10 91 28 01 	lds	r17, 0x0128
     8e4:	0a 17       	cp	r16, r26
     8e6:	1b 07       	cpc	r17, r27
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <estimate_distance+0xd8>
     8ea:	27 c2       	rjmp	.+1102   	; 0xd3a <__stack+0x43b>
     8ec:	00 91 29 01 	lds	r16, 0x0129
     8f0:	10 91 2a 01 	lds	r17, 0x012A
     8f4:	0a 17       	cp	r16, r26
     8f6:	1b 07       	cpc	r17, r27
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <estimate_distance+0xe8>
     8fa:	27 c2       	rjmp	.+1102   	; 0xd4a <__stack+0x44b>
     8fc:	00 91 2b 01 	lds	r16, 0x012B
     900:	10 91 2c 01 	lds	r17, 0x012C
     904:	0a 17       	cp	r16, r26
     906:	1b 07       	cpc	r17, r27
     908:	08 f4       	brcc	.+2      	; 0x90c <__stack+0xd>
     90a:	27 c2       	rjmp	.+1102   	; 0xd5a <__stack+0x45b>
     90c:	00 91 2d 01 	lds	r16, 0x012D
     910:	10 91 2e 01 	lds	r17, 0x012E
     914:	0a 17       	cp	r16, r26
     916:	1b 07       	cpc	r17, r27
     918:	08 f4       	brcc	.+2      	; 0x91c <__stack+0x1d>
     91a:	23 c2       	rjmp	.+1094   	; 0xd62 <__stack+0x463>
     91c:	00 91 2f 01 	lds	r16, 0x012F
     920:	10 91 30 01 	lds	r17, 0x0130
     924:	0a 17       	cp	r16, r26
     926:	1b 07       	cpc	r17, r27
     928:	08 f4       	brcc	.+2      	; 0x92c <__stack+0x2d>
     92a:	23 c2       	rjmp	.+1094   	; 0xd72 <__stack+0x473>
     92c:	00 91 31 01 	lds	r16, 0x0131
     930:	10 91 32 01 	lds	r17, 0x0132
     934:	0a 17       	cp	r16, r26
     936:	1b 07       	cpc	r17, r27
     938:	08 f4       	brcc	.+2      	; 0x93c <__stack+0x3d>
     93a:	23 c2       	rjmp	.+1094   	; 0xd82 <__stack+0x483>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	a0 ed       	ldi	r26, 0xD0	; 208
     942:	b0 e4       	ldi	r27, 0x40	; 64
     944:	89 83       	std	Y+1, r24	; 0x01
     946:	9a 83       	std	Y+2, r25	; 0x02
     948:	ab 83       	std	Y+3, r26	; 0x03
     94a:	bc 83       	std	Y+4, r27	; 0x04
     94c:	4c e0       	ldi	r20, 0x0C	; 12
     94e:	e4 2e       	mov	r14, r20
     950:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     952:	f7 01       	movw	r30, r14
     954:	ee 0f       	add	r30, r30
     956:	ff 1f       	adc	r31, r31
     958:	e9 5e       	subi	r30, 0xE9	; 233
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	80 81       	ld	r24, Z
     95e:	91 81       	ldd	r25, Z+1	; 0x01
     960:	b8 01       	movw	r22, r16
     962:	68 1b       	sub	r22, r24
     964:	79 0b       	sbc	r23, r25
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     976:	6b 01       	movw	r12, r22
     978:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     97a:	ad 81       	ldd	r26, Y+5	; 0x05
     97c:	be 81       	ldd	r27, Y+6	; 0x06
     97e:	bd 01       	movw	r22, r26
     980:	bb 0f       	add	r27, r27
     982:	88 0b       	sbc	r24, r24
     984:	99 0b       	sbc	r25, r25
     986:	0e 94 99 0b 	call	0x1732	; 0x1732 <__floatsisf>
     98a:	4b 01       	movw	r8, r22
     98c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     98e:	b8 01       	movw	r22, r16
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     998:	2b 01       	movw	r4, r22
     99a:	3c 01       	movw	r6, r24
     99c:	29 81       	ldd	r18, Y+1	; 0x01
     99e:	3a 81       	ldd	r19, Y+2	; 0x02
     9a0:	4b 81       	ldd	r20, Y+3	; 0x03
     9a2:	5c 81       	ldd	r21, Y+4	; 0x04
     9a4:	c7 01       	movw	r24, r14
     9a6:	b6 01       	movw	r22, r12
     9a8:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	c3 01       	movw	r24, r6
     9b2:	b2 01       	movw	r22, r4
     9b4:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     9b8:	9b 01       	movw	r18, r22
     9ba:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9bc:	c5 01       	movw	r24, r10
     9be:	b4 01       	movw	r22, r8
     9c0:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e2       	ldi	r20, 0x20	; 32
     9ca:	51 e4       	ldi	r21, 0x41	; 65
     9cc:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
            b=((int)((int)b/(int)slope));
     9d0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixsfsi>
     9d4:	8b 01       	movw	r16, r22
     9d6:	c7 01       	movw	r24, r14
     9d8:	b6 01       	movw	r22, r12
     9da:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixsfsi>
     9de:	ab 01       	movw	r20, r22
     9e0:	bc 01       	movw	r22, r24
     9e2:	c8 01       	movw	r24, r16
     9e4:	ba 01       	movw	r22, r20
     9e6:	0e 94 45 0a 	call	0x148a	; 0x148a <__divmodhi4>
            dist_high=b;
     9ea:	16 2f       	mov	r17, r22
     9ec:	77 c0       	rjmp	.+238    	; 0xadc <__stack+0x1dd>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9ee:	dc 01       	movw	r26, r24
     9f0:	cd 90       	ld	r12, X+
     9f2:	dc 90       	ld	r13, X
     9f4:	80 91 3e 01 	lds	r24, 0x013E
     9f8:	90 91 3f 01 	lds	r25, 0x013F
     9fc:	8c 15       	cp	r24, r12
     9fe:	9d 05       	cpc	r25, r13
     a00:	08 f4       	brcc	.+2      	; 0xa04 <__stack+0x105>
     a02:	8c c0       	rjmp	.+280    	; 0xb1c <__stack+0x21d>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a04:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a06:	e0 90 40 01 	lds	r14, 0x0140
     a0a:	f0 90 41 01 	lds	r15, 0x0141
     a0e:	ec 14       	cp	r14, r12
     a10:	fd 04       	cpc	r15, r13
     a12:	08 f4       	brcc	.+2      	; 0xa16 <__stack+0x117>
     a14:	5e c1       	rjmp	.+700    	; 0xcd2 <__stack+0x3d3>
     a16:	e0 90 42 01 	lds	r14, 0x0142
     a1a:	f0 90 43 01 	lds	r15, 0x0143
     a1e:	ec 14       	cp	r14, r12
     a20:	fd 04       	cpc	r15, r13
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x127>
     a24:	5e c1       	rjmp	.+700    	; 0xce2 <__stack+0x3e3>
     a26:	e0 90 44 01 	lds	r14, 0x0144
     a2a:	f0 90 45 01 	lds	r15, 0x0145
     a2e:	ec 14       	cp	r14, r12
     a30:	fd 04       	cpc	r15, r13
     a32:	08 f4       	brcc	.+2      	; 0xa36 <__stack+0x137>
     a34:	5e c1       	rjmp	.+700    	; 0xcf2 <__stack+0x3f3>
     a36:	e0 90 46 01 	lds	r14, 0x0146
     a3a:	f0 90 47 01 	lds	r15, 0x0147
     a3e:	ec 14       	cp	r14, r12
     a40:	fd 04       	cpc	r15, r13
     a42:	08 f4       	brcc	.+2      	; 0xa46 <__stack+0x147>
     a44:	5e c1       	rjmp	.+700    	; 0xd02 <__stack+0x403>
     a46:	e0 90 48 01 	lds	r14, 0x0148
     a4a:	f0 90 49 01 	lds	r15, 0x0149
     a4e:	ec 14       	cp	r14, r12
     a50:	fd 04       	cpc	r15, r13
     a52:	08 f4       	brcc	.+2      	; 0xa56 <__stack+0x157>
     a54:	c3 c0       	rjmp	.+390    	; 0xbdc <__stack+0x2dd>
     a56:	e0 90 4a 01 	lds	r14, 0x014A
     a5a:	f0 90 4b 01 	lds	r15, 0x014B
     a5e:	ec 14       	cp	r14, r12
     a60:	fd 04       	cpc	r15, r13
     a62:	08 f4       	brcc	.+2      	; 0xa66 <__stack+0x167>
     a64:	56 c1       	rjmp	.+684    	; 0xd12 <__stack+0x413>
     a66:	e0 90 4c 01 	lds	r14, 0x014C
     a6a:	f0 90 4d 01 	lds	r15, 0x014D
     a6e:	ec 14       	cp	r14, r12
     a70:	fd 04       	cpc	r15, r13
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__stack+0x177>
     a74:	56 c1       	rjmp	.+684    	; 0xd22 <__stack+0x423>
     a76:	e0 90 4e 01 	lds	r14, 0x014E
     a7a:	f0 90 4f 01 	lds	r15, 0x014F
     a7e:	ec 14       	cp	r14, r12
     a80:	fd 04       	cpc	r15, r13
     a82:	08 f4       	brcc	.+2      	; 0xa86 <__stack+0x187>
     a84:	56 c1       	rjmp	.+684    	; 0xd32 <__stack+0x433>
     a86:	e0 90 50 01 	lds	r14, 0x0150
     a8a:	f0 90 51 01 	lds	r15, 0x0151
     a8e:	ec 14       	cp	r14, r12
     a90:	fd 04       	cpc	r15, r13
     a92:	08 f4       	brcc	.+2      	; 0xa96 <__stack+0x197>
     a94:	56 c1       	rjmp	.+684    	; 0xd42 <__stack+0x443>
     a96:	e0 90 52 01 	lds	r14, 0x0152
     a9a:	f0 90 53 01 	lds	r15, 0x0153
     a9e:	ec 14       	cp	r14, r12
     aa0:	fd 04       	cpc	r15, r13
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__stack+0x1a7>
     aa4:	56 c1       	rjmp	.+684    	; 0xd52 <__stack+0x453>
     aa6:	e0 90 54 01 	lds	r14, 0x0154
     aaa:	f0 90 55 01 	lds	r15, 0x0155
     aae:	ec 14       	cp	r14, r12
     ab0:	fd 04       	cpc	r15, r13
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <__stack+0x1b7>
     ab4:	5a c1       	rjmp	.+692    	; 0xd6a <__stack+0x46b>
     ab6:	e0 90 56 01 	lds	r14, 0x0156
     aba:	f0 90 57 01 	lds	r15, 0x0157
     abe:	ec 14       	cp	r14, r12
     ac0:	fd 04       	cpc	r15, r13
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	5a c1       	rjmp	.+692    	; 0xd7a <__stack+0x47b>
     ac6:	e0 90 58 01 	lds	r14, 0x0158
     aca:	f0 90 59 01 	lds	r15, 0x0159
     ace:	ec 14       	cp	r14, r12
     ad0:	fd 04       	cpc	r15, r13
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	5a c1       	rjmp	.+692    	; 0xd8a <__stack+0x48b>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     ad6:	0a e5       	ldi	r16, 0x5A	; 90
     ad8:	31 c0       	rjmp	.+98     	; 0xb3c <__stack+0x23d>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     ada:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     adc:	ed 81       	ldd	r30, Y+5	; 0x05
     ade:	fe 81       	ldd	r31, Y+6	; 0x06
     ae0:	ed 3b       	cpi	r30, 0xBD	; 189
     ae2:	f2 40       	sbci	r31, 0x02	; 2
     ae4:	fc f4       	brge	.+62     	; 0xb24 <__stack+0x225>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     ae6:	81 e2       	ldi	r24, 0x21	; 33
     ae8:	81 0f       	add	r24, r17
    }
}
     aea:	26 96       	adiw	r28, 0x06	; 6
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	8f 90       	pop	r8
     b0e:	7f 90       	pop	r7
     b10:	6f 90       	pop	r6
     b12:	5f 90       	pop	r5
     b14:	4f 90       	pop	r4
     b16:	3f 90       	pop	r3
     b18:	2f 90       	pop	r2
     b1a:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b1c:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b1e:	81 e2       	ldi	r24, 0x21	; 33
     b20:	80 0f       	add	r24, r16
     b22:	e3 cf       	rjmp	.-58     	; 0xaea <__stack+0x1eb>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b24:	d1 01       	movw	r26, r2
     b26:	cd 90       	ld	r12, X+
     b28:	dc 90       	ld	r13, X
     b2a:	80 91 3e 01 	lds	r24, 0x013E
     b2e:	90 91 3f 01 	lds	r25, 0x013F
     b32:	8c 15       	cp	r24, r12
     b34:	9d 05       	cpc	r25, r13
     b36:	08 f0       	brcs	.+2      	; 0xb3a <__stack+0x23b>
     b38:	66 cf       	rjmp	.-308    	; 0xa06 <__stack+0x107>
            dist_low=0;
     b3a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b3c:	1f 3f       	cpi	r17, 0xFF	; 255
     b3e:	79 f3       	breq	.-34     	; 0xb1e <__stack+0x21f>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b40:	ed 81       	ldd	r30, Y+5	; 0x05
     b42:	fe 81       	ldd	r31, Y+6	; 0x06
     b44:	bf 01       	movw	r22, r30
     b46:	ff 0f       	add	r31, r31
     b48:	88 0b       	sbc	r24, r24
     b4a:	99 0b       	sbc	r25, r25
     b4c:	0e 94 99 0b 	call	0x1732	; 0x1732 <__floatsisf>
     b50:	6b 01       	movw	r12, r22
     b52:	7c 01       	movw	r14, r24
     b54:	61 2f       	mov	r22, r17
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     b60:	4b 01       	movw	r8, r22
     b62:	5c 01       	movw	r10, r24
     b64:	a7 01       	movw	r20, r14
     b66:	96 01       	movw	r18, r12
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	81 e6       	ldi	r24, 0x61	; 97
     b6e:	94 e4       	ldi	r25, 0x44	; 68
     b70:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c5 01       	movw	r24, r10
     b7a:	b4 01       	movw	r22, r8
     b7c:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
     b80:	4b 01       	movw	r8, r22
     b82:	5c 01       	movw	r10, r24
     b84:	60 2f       	mov	r22, r16
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     b90:	2b 01       	movw	r4, r22
     b92:	3c 01       	movw	r6, r24
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4f e2       	ldi	r20, 0x2F	; 47
     b9a:	54 e4       	ldi	r21, 0x44	; 68
     b9c:	c7 01       	movw	r24, r14
     b9e:	b6 01       	movw	r22, r12
     ba0:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	c3 01       	movw	r24, r6
     baa:	b2 01       	movw	r22, r4
     bac:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
     bb0:	9b 01       	movw	r18, r22
     bb2:	ac 01       	movw	r20, r24
     bb4:	c5 01       	movw	r24, r10
     bb6:	b4 01       	movw	r22, r8
     bb8:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	48 e4       	ldi	r20, 0x48	; 72
     bc2:	53 e4       	ldi	r21, 0x43	; 67
     bc4:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	44 e0       	ldi	r20, 0x04	; 4
     bce:	52 e4       	ldi	r21, 0x42	; 66
     bd0:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     bd4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__fixunssfsi>
     bd8:	86 2f       	mov	r24, r22
     bda:	87 cf       	rjmp	.-242    	; 0xaea <__stack+0x1eb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     bdc:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     bde:	85 e0       	ldi	r24, 0x05	; 5
     be0:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	fc 01       	movw	r30, r24
     be8:	e4 5c       	subi	r30, 0xC4	; 196
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	b7 01       	movw	r22, r14
     bf2:	68 1b       	sub	r22, r24
     bf4:	79 0b       	sbc	r23, r25
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     c06:	4b 01       	movw	r8, r22
     c08:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c0a:	b6 01       	movw	r22, r12
     c0c:	dd 0c       	add	r13, r13
     c0e:	88 0b       	sbc	r24, r24
     c10:	99 0b       	sbc	r25, r25
     c12:	0e 94 99 0b 	call	0x1732	; 0x1732 <__floatsisf>
     c16:	2b 01       	movw	r4, r22
     c18:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c1a:	b7 01       	movw	r22, r14
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     c24:	6b 01       	movw	r12, r22
     c26:	7c 01       	movw	r14, r24
     c28:	60 2f       	mov	r22, r16
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	5f e3       	ldi	r21, 0x3F	; 63
     c3c:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	a9 01       	movw	r20, r18
     c46:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     c4a:	a5 01       	movw	r20, r10
     c4c:	94 01       	movw	r18, r8
     c4e:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
     c52:	9b 01       	movw	r18, r22
     c54:	ac 01       	movw	r20, r24
     c56:	c7 01       	movw	r24, r14
     c58:	b6 01       	movw	r22, r12
     c5a:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     c5e:	9b 01       	movw	r18, r22
     c60:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c62:	c3 01       	movw	r24, r6
     c64:	b2 01       	movw	r22, r4
     c66:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
                b=((int)((int)b/(int)slope));
     c76:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixsfsi>
     c7a:	7b 01       	movw	r14, r22
     c7c:	c5 01       	movw	r24, r10
     c7e:	b4 01       	movw	r22, r8
     c80:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixsfsi>
     c84:	ab 01       	movw	r20, r22
     c86:	bc 01       	movw	r22, r24
     c88:	c7 01       	movw	r24, r14
     c8a:	ba 01       	movw	r22, r20
     c8c:	0e 94 45 0a 	call	0x148a	; 0x148a <__divmodhi4>
                dist_low=b;
     c90:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c92:	6f 3f       	cpi	r22, 0xFF	; 255
     c94:	09 f0       	breq	.+2      	; 0xc98 <__stack+0x399>
     c96:	52 cf       	rjmp	.-348    	; 0xb3c <__stack+0x23d>
     c98:	26 cf       	rjmp	.-436    	; 0xae6 <__stack+0x1e7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c9a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c9c:	85 e0       	ldi	r24, 0x05	; 5
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	7c 01       	movw	r14, r24
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	ef 1a       	sub	r14, r31
     ca6:	f1 08       	sbc	r15, r1
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 97 0b 	call	0x172e	; 0x172e <__floatunsisf>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	5f e3       	ldi	r21, 0x3F	; 63
     cba:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	a9 01       	movw	r20, r18
     cc4:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     cc8:	69 83       	std	Y+1, r22	; 0x01
     cca:	7a 83       	std	Y+2, r23	; 0x02
     ccc:	8b 83       	std	Y+3, r24	; 0x03
     cce:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     cd0:	40 ce       	rjmp	.-896    	; 0x952 <__stack+0x53>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     cd2:	01 e0       	ldi	r16, 0x01	; 1
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	84 cf       	rjmp	.-248    	; 0xbe2 <__stack+0x2e3>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	df cf       	rjmp	.-66     	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce2:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	7c cf       	rjmp	.-264    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cea:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	d7 cf       	rjmp	.-82     	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf2:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	74 cf       	rjmp	.-280    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cfa:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     cfc:	83 e0       	ldi	r24, 0x03	; 3
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	cf cf       	rjmp	.-98     	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d02:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	6c cf       	rjmp	.-296    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0a:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	c7 cf       	rjmp	.-114    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d12:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	64 cf       	rjmp	.-312    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d1c:	86 e0       	ldi	r24, 0x06	; 6
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	bf cf       	rjmp	.-130    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d22:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	5c cf       	rjmp	.-328    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d2a:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d2c:	87 e0       	ldi	r24, 0x07	; 7
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	b7 cf       	rjmp	.-146    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d32:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d34:	88 e0       	ldi	r24, 0x08	; 8
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	54 cf       	rjmp	.-344    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d3a:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	af cf       	rjmp	.-162    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d42:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d44:	89 e0       	ldi	r24, 0x09	; 9
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	4c cf       	rjmp	.-360    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d4a:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d4c:	89 e0       	ldi	r24, 0x09	; 9
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	a7 cf       	rjmp	.-178    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d52:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d54:	8a e0       	ldi	r24, 0x0A	; 10
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	44 cf       	rjmp	.-376    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d5a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9f cf       	rjmp	.-194    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d62:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d64:	8b e0       	ldi	r24, 0x0B	; 11
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9b cf       	rjmp	.-202    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d6a:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d6c:	8b e0       	ldi	r24, 0x0B	; 11
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	38 cf       	rjmp	.-400    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d72:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d74:	8c e0       	ldi	r24, 0x0C	; 12
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	93 cf       	rjmp	.-218    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d7a:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d7c:	8c e0       	ldi	r24, 0x0C	; 12
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	30 cf       	rjmp	.-416    	; 0xbe2 <__stack+0x2e3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d82:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d84:	8d e0       	ldi	r24, 0x0D	; 13
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	8b cf       	rjmp	.-234    	; 0xca0 <__stack+0x3a1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d8a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d8c:	8d e0       	ldi	r24, 0x0D	; 13
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	28 cf       	rjmp	.-432    	; 0xbe2 <__stack+0x2e3>

00000d92 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	4f 93       	push	r20
     da2:	5f 93       	push	r21
     da4:	6f 93       	push	r22
     da6:	7f 93       	push	r23
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
    tx_clock += tx_increment;
     db4:	20 91 5d 01 	lds	r18, 0x015D
     db8:	30 91 5e 01 	lds	r19, 0x015E
     dbc:	80 91 5b 01 	lds	r24, 0x015B
     dc0:	90 91 5c 01 	lds	r25, 0x015C
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	90 93 5e 01 	sts	0x015E, r25
     dcc:	80 93 5d 01 	sts	0x015D, r24
    tx_increment = 0xFF;
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 5c 01 	sts	0x015C, r25
     dd8:	80 93 5b 01 	sts	0x015B, r24
    OCR0A = tx_increment;
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     de0:	80 91 39 01 	lds	r24, 0x0139
     de4:	90 91 3a 01 	lds	r25, 0x013A
     de8:	a0 91 3b 01 	lds	r26, 0x013B
     dec:	b0 91 3c 01 	lds	r27, 0x013C
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	a1 1d       	adc	r26, r1
     df4:	b1 1d       	adc	r27, r1
     df6:	80 93 39 01 	sts	0x0139, r24
     dfa:	90 93 3a 01 	sts	0x013A, r25
     dfe:	a0 93 3b 01 	sts	0x013B, r26
     e02:	b0 93 3c 01 	sts	0x013C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e06:	80 91 3d 01 	lds	r24, 0x013D
     e0a:	81 11       	cpse	r24, r1
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <__vector_14+0x9a>
     e0e:	80 91 6c 01 	lds	r24, 0x016C
     e12:	90 91 6d 01 	lds	r25, 0x016D
     e16:	20 91 5d 01 	lds	r18, 0x015D
     e1a:	30 91 5e 01 	lds	r19, 0x015E
     e1e:	82 17       	cp	r24, r18
     e20:	93 07       	cpc	r25, r19
     e22:	20 f4       	brcc	.+8      	; 0xe2c <__vector_14+0x9a>
     e24:	80 91 15 01 	lds	r24, 0x0115
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	89 f0       	breq	.+34     	; 0xe4e <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e4e:	e0 91 03 01 	lds	r30, 0x0103
     e52:	f0 91 04 01 	lds	r31, 0x0104
     e56:	09 95       	icall
        if (msg) {
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	41 f3       	breq	.-48     	; 0xe2c <__vector_14+0x9a>
            if (message_send(msg)) {
     e5c:	0e 94 b1 09 	call	0x1362	; 0x1362 <message_send>
     e60:	81 11       	cpse	r24, r1
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e64:	0e 94 de 0c 	call	0x19bc	; 0x19bc <rand>
     e68:	99 27       	eor	r25, r25
     e6a:	90 93 5c 01 	sts	0x015C, r25
     e6e:	80 93 5b 01 	sts	0x015B, r24
                OCR0A = tx_increment;
     e72:	87 bd       	out	0x27, r24	; 39
     e74:	db cf       	rjmp	.-74     	; 0xe2c <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e76:	e0 91 01 01 	lds	r30, 0x0101
     e7a:	f0 91 02 01 	lds	r31, 0x0102
     e7e:	09 95       	icall
                tx_clock = 0;
     e80:	10 92 5e 01 	sts	0x015E, r1
     e84:	10 92 5d 01 	sts	0x015D, r1
     e88:	d1 cf       	rjmp	.-94     	; 0xe2c <__vector_14+0x9a>

00000e8a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e8a:	80 ff       	sbrs	r24, 0
     e8c:	11 c0       	rjmp	.+34     	; 0xeb0 <set_color+0x26>
        DDRD |= (1<<5);
     e8e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e90:	81 ff       	sbrs	r24, 1
     e92:	11 c0       	rjmp	.+34     	; 0xeb6 <set_color+0x2c>
        DDRD |= (1<<4);
     e94:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e96:	82 ff       	sbrs	r24, 2
     e98:	11 c0       	rjmp	.+34     	; 0xebc <set_color+0x32>
        DDRC |= (1<<3);
     e9a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e9c:	83 ff       	sbrs	r24, 3
     e9e:	11 c0       	rjmp	.+34     	; 0xec2 <set_color+0x38>
        DDRC |= (1<<2);
     ea0:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     ea2:	84 ff       	sbrs	r24, 4
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <set_color+0x3e>
        DDRC |= (1<<5);
     ea6:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     ea8:	85 fd       	sbrc	r24, 5
     eaa:	11 c0       	rjmp	.+34     	; 0xece <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     eac:	3c 98       	cbi	0x07, 4	; 7
     eae:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     eb0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     eb2:	81 fd       	sbrc	r24, 1
     eb4:	ef cf       	rjmp	.-34     	; 0xe94 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     eb6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     eb8:	82 fd       	sbrc	r24, 2
     eba:	ef cf       	rjmp	.-34     	; 0xe9a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     ebc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     ebe:	83 fd       	sbrc	r24, 3
     ec0:	ef cf       	rjmp	.-34     	; 0xea0 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ec2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     ec4:	84 fd       	sbrc	r24, 4
     ec6:	ef cf       	rjmp	.-34     	; 0xea6 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     ec8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     eca:	85 ff       	sbrs	r24, 5
     ecc:	ef cf       	rjmp	.-34     	; 0xeac <set_color+0x22>
        DDRC |= (1<<4);
     ece:	3c 9a       	sbi	0x07, 4	; 7
     ed0:	08 95       	ret

00000ed2 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
    rx_timer_off();
     ee0:	10 92 81 00 	sts	0x0081, r1
     ee4:	10 92 85 00 	sts	0x0085, r1
     ee8:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 16 01 	sts	0x0116, r24
    rx_leadingbyte = 1;
     ef2:	80 93 5a 01 	sts	0x015A, r24
    rx_busy = 0;
     ef6:	10 92 3d 01 	sts	0x013D, r1
    adc_trigger_high_gain();
     efa:	10 92 7c 00 	sts	0x007C, r1
     efe:	93 ea       	ldi	r25, 0xA3	; 163
     f00:	90 93 7a 00 	sts	0x007A, r25
     f04:	80 93 7b 00 	sts	0x007B, r24
}
     f08:	9f 91       	pop	r25
     f0a:	8f 91       	pop	r24
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	ef 93       	push	r30
     f3a:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f3c:	20 91 84 00 	lds	r18, 0x0084
     f40:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	40 93 3d 01 	sts	0x013D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f4a:	80 91 16 01 	lds	r24, 0x0116
     f4e:	88 23       	and	r24, r24
     f50:	a9 f1       	breq	.+106    	; 0xfbc <__vector_23+0xa6>
        rx_timer_on();
     f52:	10 92 85 00 	sts	0x0085, r1
     f56:	10 92 84 00 	sts	0x0084, r1
     f5a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f5e:	10 92 6e 01 	sts	0x016E, r1
        rx_leadingbit = 0;
     f62:	10 92 16 01 	sts	0x0116, r1
        if (rx_leadingbyte) {
     f66:	80 91 5a 01 	lds	r24, 0x015A
     f6a:	88 23       	and	r24, r24
     f6c:	a1 f0       	breq	.+40     	; 0xf96 <__vector_23+0x80>
            adc_finish_conversion();
     f6e:	80 91 7a 00 	lds	r24, 0x007A
     f72:	86 fd       	sbrc	r24, 6
     f74:	fc cf       	rjmp	.-8      	; 0xf6e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f76:	80 91 78 00 	lds	r24, 0x0078
     f7a:	90 91 79 00 	lds	r25, 0x0079
     f7e:	90 93 38 01 	sts	0x0138, r25
     f82:	80 93 37 01 	sts	0x0137, r24
            adc_trigger_low_gain();
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 7c 00 	sts	0x007C, r24
     f8c:	93 ea       	ldi	r25, 0xA3	; 163
     f8e:	90 93 7a 00 	sts	0x007A, r25
     f92:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     fbc:	c9 01       	movw	r24, r18
     fbe:	87 58       	subi	r24, 0x87	; 135
     fc0:	91 09       	sbc	r25, r1
     fc2:	84 37       	cpi	r24, 0x74	; 116
     fc4:	99 40       	sbci	r25, 0x09	; 9
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__vector_23+0xb4>
     fc8:	52 c0       	rjmp	.+164    	; 0x106e <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     fca:	26 58       	subi	r18, 0x86	; 134
     fcc:	31 09       	sbc	r19, r1
     fce:	a4 ef       	ldi	r26, 0xF4	; 244
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	0e 94 5f 0a 	call	0x14be	; 0x14be <__umulhisi3>
     fd6:	aa 27       	eor	r26, r26
     fd8:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	91 05       	cpc	r25, r1
     fde:	a1 05       	cpc	r26, r1
     fe0:	b1 05       	cpc	r27, r1
     fe2:	08 f4       	brcc	.+2      	; 0xfe6 <__vector_23+0xd0>
     fe4:	7b c0       	rjmp	.+246    	; 0x10dc <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     fe6:	40 93 16 01 	sts	0x0116, r20
                if (rx_leadingbyte) {
     fea:	80 91 5a 01 	lds	r24, 0x015A
     fee:	81 11       	cpse	r24, r1
     ff0:	52 c0       	rjmp	.+164    	; 0x1096 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     ff2:	80 91 34 01 	lds	r24, 0x0134
     ff6:	e8 2f       	mov	r30, r24
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	e0 5a       	subi	r30, 0xA0	; 160
     ffc:	fe 4f       	sbci	r31, 0xFE	; 254
     ffe:	90 91 6e 01 	lds	r25, 0x016E
    1002:	90 83       	st	Z, r25
                    rx_byteindex++;
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	80 93 34 01 	sts	0x0134, r24
                    if (rx_byteindex == sizeof(message_t)) {
    100a:	8c 30       	cpi	r24, 0x0C	; 12
    100c:	21 f6       	brne	.-120    	; 0xf96 <__vector_23+0x80>
                        rx_timer_off();
    100e:	10 92 81 00 	sts	0x0081, r1
    1012:	10 92 85 00 	sts	0x0085, r1
    1016:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    101a:	40 93 5a 01 	sts	0x015A, r20
                        rx_busy = 0;
    101e:	10 92 3d 01 	sts	0x013D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1022:	c0 91 6a 01 	lds	r28, 0x016A
    1026:	d0 91 6b 01 	lds	r29, 0x016B
    102a:	80 e6       	ldi	r24, 0x60	; 96
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 95 09 	call	0x132a	; 0x132a <message_crc>
    1032:	c8 17       	cp	r28, r24
    1034:	d9 07       	cpc	r29, r25
    1036:	09 f0       	breq	.+2      	; 0x103a <__vector_23+0x124>
    1038:	ae cf       	rjmp	.-164    	; 0xf96 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    103a:	80 91 69 01 	lds	r24, 0x0169
    103e:	87 ff       	sbrs	r24, 7
    1040:	61 c0       	rjmp	.+194    	; 0x1104 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1042:	98 e7       	ldi	r25, 0x78	; 120
    1044:	98 0f       	add	r25, r24
    1046:	93 30       	cpi	r25, 0x03	; 3
    1048:	30 f0       	brcs	.+12     	; 0x1056 <__vector_23+0x140>
        motors_off();
    104a:	53 98       	cbi	0x0a, 3	; 10
    104c:	23 98       	cbi	0x04, 3	; 4
    104e:	10 92 b4 00 	sts	0x00B4, r1
    1052:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	fc 01       	movw	r30, r24
    105a:	e0 58       	subi	r30, 0x80	; 128
    105c:	f1 09       	sbc	r31, r1
    105e:	eb 30       	cpi	r30, 0x0B	; 11
    1060:	f1 05       	cpc	r31, r1
    1062:	08 f0       	brcs	.+2      	; 0x1066 <__vector_23+0x150>
    1064:	98 cf       	rjmp	.-208    	; 0xf96 <__vector_23+0x80>
    1066:	e5 5c       	subi	r30, 0xC5	; 197
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    106e:	10 92 81 00 	sts	0x0081, r1
    1072:	10 92 85 00 	sts	0x0085, r1
    1076:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    107a:	40 93 16 01 	sts	0x0116, r20
            rx_leadingbyte = 1;
    107e:	40 93 5a 01 	sts	0x015A, r20
            rx_busy = 0;
    1082:	10 92 3d 01 	sts	0x013D, r1
            adc_trigger_high_gain();
    1086:	10 92 7c 00 	sts	0x007C, r1
    108a:	83 ea       	ldi	r24, 0xA3	; 163
    108c:	80 93 7a 00 	sts	0x007A, r24
    1090:	40 93 7b 00 	sts	0x007B, r20
    1094:	80 cf       	rjmp	.-256    	; 0xf96 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1096:	80 91 7a 00 	lds	r24, 0x007A
    109a:	86 fd       	sbrc	r24, 6
    109c:	fc cf       	rjmp	.-8      	; 0x1096 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    109e:	80 91 78 00 	lds	r24, 0x0078
    10a2:	90 91 79 00 	lds	r25, 0x0079
    10a6:	90 93 36 01 	sts	0x0136, r25
    10aa:	80 93 35 01 	sts	0x0135, r24
                    adc_trigger_high_gain();
    10ae:	10 92 7c 00 	sts	0x007C, r1
    10b2:	83 ea       	ldi	r24, 0xA3	; 163
    10b4:	80 93 7a 00 	sts	0x007A, r24
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    10be:	90 91 6e 01 	lds	r25, 0x016E
    10c2:	99 23       	and	r25, r25
    10c4:	d1 f0       	breq	.+52     	; 0x10fa <__vector_23+0x1e4>
                        rx_timer_off();
    10c6:	10 92 81 00 	sts	0x0081, r1
    10ca:	10 92 85 00 	sts	0x0085, r1
    10ce:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10d2:	80 93 5a 01 	sts	0x015A, r24
                        rx_busy = 0;
    10d6:	10 92 3d 01 	sts	0x013D, r1
    10da:	5d cf       	rjmp	.-326    	; 0xf96 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	f9 01       	movw	r30, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <__vector_23+0x1d2>
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <__vector_23+0x1ce>
    10ec:	cf 01       	movw	r24, r30
    10ee:	90 91 6e 01 	lds	r25, 0x016E
    10f2:	89 2b       	or	r24, r25
    10f4:	80 93 6e 01 	sts	0x016E, r24
    10f8:	4e cf       	rjmp	.-356    	; 0xf96 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10fa:	10 92 5a 01 	sts	0x015A, r1
                        rx_byteindex = 0;
    10fe:	10 92 34 01 	sts	0x0134, r1
    1102:	49 cf       	rjmp	.-366    	; 0xf96 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1104:	e0 91 05 01 	lds	r30, 0x0105
    1108:	f0 91 06 01 	lds	r31, 0x0106
    110c:	65 e3       	ldi	r22, 0x35	; 53
    110e:	71 e0       	ldi	r23, 0x01	; 1
    1110:	80 e6       	ldi	r24, 0x60	; 96
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	09 95       	icall
    1116:	3f cf       	rjmp	.-386    	; 0xf96 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1118:	80 91 60 01 	lds	r24, 0x0160
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	09 f4       	brne	.+2      	; 0x1122 <__vector_23+0x20c>
    1120:	dd c0       	rjmp	.+442    	; 0x12dc <__vector_23+0x3c6>
    1122:	08 f4       	brcc	.+2      	; 0x1126 <__vector_23+0x210>
    1124:	ba c0       	rjmp	.+372    	; 0x129a <__vector_23+0x384>
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	09 f4       	brne	.+2      	; 0x112c <__vector_23+0x216>
    112a:	c6 c0       	rjmp	.+396    	; 0x12b8 <__vector_23+0x3a2>
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	09 f0       	breq	.+2      	; 0x1132 <__vector_23+0x21c>
    1130:	b1 c0       	rjmp	.+354    	; 0x1294 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1132:	80 91 13 01 	lds	r24, 0x0113
    1136:	90 91 66 01 	lds	r25, 0x0166
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	09 f4       	brne	.+2      	; 0x1140 <__vector_23+0x22a>
    113e:	e3 c0       	rjmp	.+454    	; 0x1306 <__vector_23+0x3f0>
    1140:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    1144:	10 92 14 01 	sts	0x0114, r1
                        cur_motion = MOVE_STRAIGHT;
    1148:	23 e0       	ldi	r18, 0x03	; 3
    114a:	20 93 13 01 	sts	0x0113, r18
                        kilo_straight_left = calibmsg->straight_left;
    114e:	80 93 71 01 	sts	0x0171, r24
                        kilo_straight_right = calibmsg->straight_right;
    1152:	90 93 72 01 	sts	0x0172, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1156:	80 91 15 01 	lds	r24, 0x0115
    115a:	86 30       	cpi	r24, 0x06	; 6
    115c:	09 f4       	brne	.+2      	; 0x1160 <__vector_23+0x24a>
    115e:	1b cf       	rjmp	.-458    	; 0xf96 <__vector_23+0x80>
                motors_on();
    1160:	53 9a       	sbi	0x0a, 3	; 10
    1162:	23 9a       	sbi	0x04, 3	; 4
    1164:	10 92 b4 00 	sts	0x00B4, r1
    1168:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	80 93 15 01 	sts	0x0115, r24
    1172:	11 cf       	rjmp	.-478    	; 0xf96 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1174:	80 91 15 01 	lds	r24, 0x0115
    1178:	86 30       	cpi	r24, 0x06	; 6
    117a:	99 f0       	breq	.+38     	; 0x11a2 <__vector_23+0x28c>
                motors_on();
    117c:	53 9a       	sbi	0x0a, 3	; 10
    117e:	23 9a       	sbi	0x04, 3	; 4
    1180:	10 92 b4 00 	sts	0x00B4, r1
    1184:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1188:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    118a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    118c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    118e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1190:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1192:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1194:	10 92 13 01 	sts	0x0113, r1
    1198:	10 92 14 01 	sts	0x0114, r1
                kilo_state = MOVING;
    119c:	86 e0       	ldi	r24, 0x06	; 6
    119e:	80 93 15 01 	sts	0x0115, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9c 01       	movw	r18, r24
    11a8:	00 90 60 01 	lds	r0, 0x0160
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <__vector_23+0x29c>
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <__vector_23+0x298>
    11b6:	80 91 6f 01 	lds	r24, 0x016F
    11ba:	90 91 70 01 	lds	r25, 0x0170
    11be:	82 23       	and	r24, r18
    11c0:	93 23       	and	r25, r19
    11c2:	89 2b       	or	r24, r25
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <__vector_23+0x2b2>
    11c6:	86 c0       	rjmp	.+268    	; 0x12d4 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    11c8:	10 92 13 01 	sts	0x0113, r1
    11cc:	e4 ce       	rjmp	.-568    	; 0xf96 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 15 01 	sts	0x0115, r24
    11d4:	e0 ce       	rjmp	.-576    	; 0xf96 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    11d6:	e0 e0       	ldi	r30, 0x00	; 0
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    11dc:	80 91 6e 00 	lds	r24, 0x006E
    11e0:	8d 7f       	andi	r24, 0xFD	; 253
    11e2:	80 93 6e 00 	sts	0x006E, r24
    11e6:	16 bc       	out	0x26, r1	; 38
            bootload();
    11e8:	e0 e0       	ldi	r30, 0x00	; 0
    11ea:	f0 e7       	ldi	r31, 0x70	; 112
    11ec:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11ee:	10 92 15 01 	sts	0x0115, r1
    11f2:	d1 ce       	rjmp	.-606    	; 0xf96 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	80 93 15 01 	sts	0x0115, r24
    11fa:	cd ce       	rjmp	.-614    	; 0xf96 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11fc:	85 e0       	ldi	r24, 0x05	; 5
    11fe:	80 93 15 01 	sts	0x0115, r24
    1202:	c9 ce       	rjmp	.-622    	; 0xf96 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1204:	80 91 15 01 	lds	r24, 0x0115
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	09 f4       	brne	.+2      	; 0x120e <__vector_23+0x2f8>
    120c:	c4 ce       	rjmp	.-632    	; 0xf96 <__vector_23+0x80>
    120e:	80 91 15 01 	lds	r24, 0x0115
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	09 f4       	brne	.+2      	; 0x1218 <__vector_23+0x302>
    1216:	bf ce       	rjmp	.-642    	; 0xf96 <__vector_23+0x80>
                motors_on();
    1218:	53 9a       	sbi	0x0a, 3	; 10
    121a:	23 9a       	sbi	0x04, 3	; 4
    121c:	10 92 b4 00 	sts	0x00B4, r1
    1220:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	80 93 15 01 	sts	0x0115, r24
    122a:	b5 ce       	rjmp	.-662    	; 0xf96 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    122c:	80 91 15 01 	lds	r24, 0x0115
    1230:	86 30       	cpi	r24, 0x06	; 6
    1232:	09 f0       	breq	.+2      	; 0x1236 <__vector_23+0x320>
    1234:	b0 ce       	rjmp	.-672    	; 0xf96 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1236:	60 91 6f 01 	lds	r22, 0x016F
    123a:	80 eb       	ldi	r24, 0xB0	; 176
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1242:	60 91 70 01 	lds	r22, 0x0170
    1246:	81 eb       	ldi	r24, 0xB1	; 177
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    124e:	60 91 73 01 	lds	r22, 0x0173
    1252:	85 e0       	ldi	r24, 0x05	; 5
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    125a:	60 91 5f 01 	lds	r22, 0x015F
    125e:	89 e0       	ldi	r24, 0x09	; 9
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1266:	60 91 71 01 	lds	r22, 0x0171
    126a:	8c e0       	ldi	r24, 0x0C	; 12
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1272:	60 91 72 01 	lds	r22, 0x0172
    1276:	84 e1       	ldi	r24, 0x14	; 20
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <eeprom_write_byte>
                        motors_off();
    127e:	53 98       	cbi	0x0a, 3	; 10
    1280:	23 98       	cbi	0x04, 3	; 4
    1282:	10 92 b4 00 	sts	0x00B4, r1
    1286:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 15 01 	sts	0x0115, r24
    1290:	80 91 60 01 	lds	r24, 0x0160
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1294:	81 11       	cpse	r24, r1
    1296:	5f cf       	rjmp	.-322    	; 0x1156 <__vector_23+0x240>
    1298:	7e ce       	rjmp	.-772    	; 0xf96 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    129a:	88 23       	and	r24, r24
    129c:	39 f2       	breq	.-114    	; 0x122c <__vector_23+0x316>
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	c9 f7       	brne	.-14     	; 0x1294 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    12a2:	80 91 61 01 	lds	r24, 0x0161
    12a6:	90 91 62 01 	lds	r25, 0x0162
    12aa:	90 93 70 01 	sts	0x0170, r25
    12ae:	80 93 6f 01 	sts	0x016F, r24
                    cur_motion = MOVE_STOP;
    12b2:	10 92 13 01 	sts	0x0113, r1
    12b6:	4f cf       	rjmp	.-354    	; 0x1156 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12b8:	80 91 13 01 	lds	r24, 0x0113
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	71 f1       	breq	.+92     	; 0x131c <__vector_23+0x406>
    12c0:	80 91 64 01 	lds	r24, 0x0164
                        prev_motion = MOVE_STOP;
    12c4:	10 92 14 01 	sts	0x0114, r1
                        cur_motion = MOVE_RIGHT;
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	90 93 13 01 	sts	0x0113, r25
                        kilo_turn_right = calibmsg->turn_right;
    12ce:	80 93 5f 01 	sts	0x015F, r24
    12d2:	41 cf       	rjmp	.-382    	; 0x1156 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 13 01 	sts	0x0113, r24
    12da:	5d ce       	rjmp	.-838    	; 0xf96 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12dc:	80 91 13 01 	lds	r24, 0x0113
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	51 f0       	breq	.+20     	; 0x12f8 <__vector_23+0x3e2>
    12e4:	80 91 63 01 	lds	r24, 0x0163
                        prev_motion = MOVE_STOP;
    12e8:	10 92 14 01 	sts	0x0114, r1
                        cur_motion = MOVE_LEFT;
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	90 93 13 01 	sts	0x0113, r25
                        kilo_turn_left = calibmsg->turn_left;
    12f2:	80 93 73 01 	sts	0x0173, r24
    12f6:	2f cf       	rjmp	.-418    	; 0x1156 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12f8:	80 91 63 01 	lds	r24, 0x0163
    12fc:	90 91 73 01 	lds	r25, 0x0173
    1300:	89 13       	cpse	r24, r25
    1302:	f2 cf       	rjmp	.-28     	; 0x12e8 <__vector_23+0x3d2>
    1304:	28 cf       	rjmp	.-432    	; 0x1156 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1306:	80 91 72 01 	lds	r24, 0x0172
    130a:	98 13       	cpse	r25, r24
    130c:	19 cf       	rjmp	.-462    	; 0x1140 <__vector_23+0x22a>
    130e:	80 91 65 01 	lds	r24, 0x0165
    1312:	20 91 71 01 	lds	r18, 0x0171
    1316:	82 13       	cpse	r24, r18
    1318:	15 cf       	rjmp	.-470    	; 0x1144 <__vector_23+0x22e>
    131a:	1d cf       	rjmp	.-454    	; 0x1156 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    131c:	80 91 64 01 	lds	r24, 0x0164
    1320:	90 91 5f 01 	lds	r25, 0x015F
    1324:	89 13       	cpse	r24, r25
    1326:	ce cf       	rjmp	.-100    	; 0x12c4 <__vector_23+0x3ae>
    1328:	16 cf       	rjmp	.-468    	; 0x1156 <__vector_23+0x240>

0000132a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    132a:	fc 01       	movw	r30, r24
    132c:	ac 01       	movw	r20, r24
    132e:	46 5f       	subi	r20, 0xF6	; 246
    1330:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1336:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1338:	82 27       	eor	r24, r18
    133a:	08 2e       	mov	r0, r24
    133c:	82 95       	swap	r24
    133e:	80 7f       	andi	r24, 0xF0	; 240
    1340:	80 25       	eor	r24, r0
    1342:	09 2e       	mov	r0, r25
    1344:	98 2f       	mov	r25, r24
    1346:	82 95       	swap	r24
    1348:	8f 70       	andi	r24, 0x0F	; 15
    134a:	08 26       	eor	r0, r24
    134c:	86 95       	lsr	r24
    134e:	98 27       	eor	r25, r24
    1350:	89 27       	eor	r24, r25
    1352:	88 0f       	add	r24, r24
    1354:	88 0f       	add	r24, r24
    1356:	88 0f       	add	r24, r24
    1358:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    135a:	e4 17       	cp	r30, r20
    135c:	f5 07       	cpc	r31, r21
    135e:	59 f7       	brne	.-42     	; 0x1336 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1360:	08 95       	ret

00001362 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1362:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1364:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1366:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1368:	20 91 33 01 	lds	r18, 0x0133
    or tmpreg1, ddrreg
    136c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    136e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1370:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1372:	30 91 33 01 	lds	r19, 0x0133
    1376:	20 30       	cpi	r18, 0x00	; 0
    1378:	29 f0       	breq	.+10     	; 0x1384 <message_send+0x22>
    137a:	00 00       	nop
    137c:	25 b1       	in	r18, 0x05	; 5
    137e:	23 2b       	or	r18, r19
    1380:	25 b9       	out	0x05, r18	; 5
    1382:	04 c0       	rjmp	.+8      	; 0x138c <message_send+0x2a>
    1384:	00 00       	nop
    1386:	00 00       	nop
    1388:	00 00       	nop
    138a:	00 c0       	rjmp	.+0      	; 0x138c <message_send+0x2a>
    138c:	00 00       	nop
    138e:	00 00       	nop
    1390:	00 00       	nop
    1392:	30 95       	com	r19
    1394:	25 b1       	in	r18, 0x05	; 5
    1396:	23 23       	and	r18, r19
    1398:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    139a:	2e ea       	ldi	r18, 0xAE	; 174
    139c:	2a 95       	dec	r18
    139e:	f1 f7       	brne	.-4      	; 0x139c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    13a0:	2b ee       	ldi	r18, 0xEB	; 235

000013a2 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    13a2:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    13a4:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    13a6:	0a c0       	rjmp	.+20     	; 0x13bc <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13a8:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13aa:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    13ae:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13b0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    13b2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13b4:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13b6:	0f be       	out	0x3f, r0	; 63
    return 0
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	08 95       	ret

000013bc <nocollision>:
nocollision:
    nop
    13bc:	00 00       	nop
    dec tmpreg1
    13be:	2a 95       	dec	r18
    brne checkcollision
    13c0:	81 f7       	brne	.-32     	; 0x13a2 <checkcollision>

    ldi tmpreg1, 0x01
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13c4:	30 91 33 01 	lds	r19, 0x0133
    13c8:	20 30       	cpi	r18, 0x00	; 0
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <nocollision+0x1a>
    13cc:	00 00       	nop
    13ce:	25 b1       	in	r18, 0x05	; 5
    13d0:	23 2b       	or	r18, r19
    13d2:	25 b9       	out	0x05, r18	; 5
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <nocollision+0x22>
    13d6:	00 00       	nop
    13d8:	00 00       	nop
    13da:	00 00       	nop
    13dc:	00 c0       	rjmp	.+0      	; 0x13de <nocollision+0x22>
    13de:	00 00       	nop
    13e0:	00 00       	nop
    13e2:	00 00       	nop
    13e4:	30 95       	com	r19
    13e6:	25 b1       	in	r18, 0x05	; 5
    13e8:	23 23       	and	r18, r19
    13ea:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    13ec:	00 00       	nop
    13ee:	24 e5       	ldi	r18, 0x54	; 84
    13f0:	2a 95       	dec	r18
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13f4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13f6:	8c e0       	ldi	r24, 0x0C	; 12

000013f8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13f8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13fc:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13fe:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1400:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1402:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1404:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1406:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1408:	50 e0       	ldi	r21, 0x00	; 0

0000140a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    140a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    140c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    140e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1410:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1412:	30 91 33 01 	lds	r19, 0x0133
    1416:	20 30       	cpi	r18, 0x00	; 0
    1418:	29 f0       	breq	.+10     	; 0x1424 <sendbit+0x1a>
    141a:	00 00       	nop
    141c:	25 b1       	in	r18, 0x05	; 5
    141e:	23 2b       	or	r18, r19
    1420:	25 b9       	out	0x05, r18	; 5
    1422:	04 c0       	rjmp	.+8      	; 0x142c <sendbit+0x22>
    1424:	00 00       	nop
    1426:	00 00       	nop
    1428:	00 00       	nop
    142a:	00 c0       	rjmp	.+0      	; 0x142c <sendbit+0x22>
    142c:	00 00       	nop
    142e:	00 00       	nop
    1430:	00 00       	nop
    1432:	30 95       	com	r19
    1434:	25 b1       	in	r18, 0x05	; 5
    1436:	23 23       	and	r18, r19
    1438:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    143a:	00 00       	nop
    143c:	21 e5       	ldi	r18, 0x51	; 81
    143e:	2a 95       	dec	r18
    1440:	f1 f7       	brne	.-4      	; 0x143e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1442:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1444:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1446:	9a 95       	dec	r25
    brne sendbit
    1448:	01 f7       	brne	.-64     	; 0x140a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    144a:	8a 95       	dec	r24
    brne sendbyte
    144c:	a9 f6       	brne	.-86     	; 0x13f8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    144e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1450:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1452:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1454:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1456:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    145a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    145c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    145e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1460:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1462:	0f be       	out	0x3f, r0	; 63
    return 1
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	08 95       	ret

00001468 <main>:
    odd = message->data[0];
}

int main()
{
    kilo_init();
    1468:	0e 94 c5 00 	call	0x18a	; 0x18a <kilo_init>
    kilo_message_rx = message_rx;
    146c:	82 e7       	ldi	r24, 0x72	; 114
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	90 93 06 01 	sts	0x0106, r25
    1474:	80 93 05 01 	sts	0x0105, r24
    kilo_start(setup, loop);
    1478:	6d e8       	ldi	r22, 0x8D	; 141
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	81 e7       	ldi	r24, 0x71	; 113
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 c1 01 	call	0x382	; 0x382 <kilo_start>
    
    return 0;
}
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	08 95       	ret

0000148a <__divmodhi4>:
    148a:	97 fb       	bst	r25, 7
    148c:	07 2e       	mov	r0, r23
    148e:	16 f4       	brtc	.+4      	; 0x1494 <__divmodhi4+0xa>
    1490:	00 94       	com	r0
    1492:	07 d0       	rcall	.+14     	; 0x14a2 <__divmodhi4_neg1>
    1494:	77 fd       	sbrc	r23, 7
    1496:	09 d0       	rcall	.+18     	; 0x14aa <__divmodhi4_neg2>
    1498:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__udivmodhi4>
    149c:	07 fc       	sbrc	r0, 7
    149e:	05 d0       	rcall	.+10     	; 0x14aa <__divmodhi4_neg2>
    14a0:	3e f4       	brtc	.+14     	; 0x14b0 <__divmodhi4_exit>

000014a2 <__divmodhi4_neg1>:
    14a2:	90 95       	com	r25
    14a4:	81 95       	neg	r24
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	08 95       	ret

000014aa <__divmodhi4_neg2>:
    14aa:	70 95       	com	r23
    14ac:	61 95       	neg	r22
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255

000014b0 <__divmodhi4_exit>:
    14b0:	08 95       	ret

000014b2 <__tablejump2__>:
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	05 90       	lpm	r0, Z+
    14b8:	f4 91       	lpm	r31, Z
    14ba:	e0 2d       	mov	r30, r0
    14bc:	09 94       	ijmp

000014be <__umulhisi3>:
    14be:	a2 9f       	mul	r26, r18
    14c0:	b0 01       	movw	r22, r0
    14c2:	b3 9f       	mul	r27, r19
    14c4:	c0 01       	movw	r24, r0
    14c6:	a3 9f       	mul	r26, r19
    14c8:	70 0d       	add	r23, r0
    14ca:	81 1d       	adc	r24, r1
    14cc:	11 24       	eor	r1, r1
    14ce:	91 1d       	adc	r25, r1
    14d0:	b2 9f       	mul	r27, r18
    14d2:	70 0d       	add	r23, r0
    14d4:	81 1d       	adc	r24, r1
    14d6:	11 24       	eor	r1, r1
    14d8:	91 1d       	adc	r25, r1
    14da:	08 95       	ret

000014dc <__udivmodhi4>:
    14dc:	aa 1b       	sub	r26, r26
    14de:	bb 1b       	sub	r27, r27
    14e0:	51 e1       	ldi	r21, 0x11	; 17
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <__udivmodhi4_ep>

000014e4 <__udivmodhi4_loop>:
    14e4:	aa 1f       	adc	r26, r26
    14e6:	bb 1f       	adc	r27, r27
    14e8:	a6 17       	cp	r26, r22
    14ea:	b7 07       	cpc	r27, r23
    14ec:	10 f0       	brcs	.+4      	; 0x14f2 <__udivmodhi4_ep>
    14ee:	a6 1b       	sub	r26, r22
    14f0:	b7 0b       	sbc	r27, r23

000014f2 <__udivmodhi4_ep>:
    14f2:	88 1f       	adc	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	5a 95       	dec	r21
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__udivmodhi4_loop>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	08 95       	ret

00001504 <__subsf3>:
    1504:	50 58       	subi	r21, 0x80	; 128

00001506 <__addsf3>:
    1506:	bb 27       	eor	r27, r27
    1508:	aa 27       	eor	r26, r26
    150a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__addsf3x>
    150e:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_round>
    1512:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscA>
    1516:	38 f0       	brcs	.+14     	; 0x1526 <__addsf3+0x20>
    1518:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__fp_pscB>
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__addsf3+0x20>
    151e:	39 f4       	brne	.+14     	; 0x152e <__addsf3+0x28>
    1520:	9f 3f       	cpi	r25, 0xFF	; 255
    1522:	19 f4       	brne	.+6      	; 0x152a <__addsf3+0x24>
    1524:	26 f4       	brtc	.+8      	; 0x152e <__addsf3+0x28>
    1526:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_nan>
    152a:	0e f4       	brtc	.+2      	; 0x152e <__addsf3+0x28>
    152c:	e0 95       	com	r30
    152e:	e7 fb       	bst	r30, 7
    1530:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_inf>

00001534 <__addsf3x>:
    1534:	e9 2f       	mov	r30, r25
    1536:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_split3>
    153a:	58 f3       	brcs	.-42     	; 0x1512 <__addsf3+0xc>
    153c:	ba 17       	cp	r27, r26
    153e:	62 07       	cpc	r22, r18
    1540:	73 07       	cpc	r23, r19
    1542:	84 07       	cpc	r24, r20
    1544:	95 07       	cpc	r25, r21
    1546:	20 f0       	brcs	.+8      	; 0x1550 <__addsf3x+0x1c>
    1548:	79 f4       	brne	.+30     	; 0x1568 <__addsf3x+0x34>
    154a:	a6 f5       	brtc	.+104    	; 0x15b4 <__addsf3x+0x80>
    154c:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__fp_zero>
    1550:	0e f4       	brtc	.+2      	; 0x1554 <__addsf3x+0x20>
    1552:	e0 95       	com	r30
    1554:	0b 2e       	mov	r0, r27
    1556:	ba 2f       	mov	r27, r26
    1558:	a0 2d       	mov	r26, r0
    155a:	0b 01       	movw	r0, r22
    155c:	b9 01       	movw	r22, r18
    155e:	90 01       	movw	r18, r0
    1560:	0c 01       	movw	r0, r24
    1562:	ca 01       	movw	r24, r20
    1564:	a0 01       	movw	r20, r0
    1566:	11 24       	eor	r1, r1
    1568:	ff 27       	eor	r31, r31
    156a:	59 1b       	sub	r21, r25
    156c:	99 f0       	breq	.+38     	; 0x1594 <__addsf3x+0x60>
    156e:	59 3f       	cpi	r21, 0xF9	; 249
    1570:	50 f4       	brcc	.+20     	; 0x1586 <__addsf3x+0x52>
    1572:	50 3e       	cpi	r21, 0xE0	; 224
    1574:	68 f1       	brcs	.+90     	; 0x15d0 <__addsf3x+0x9c>
    1576:	1a 16       	cp	r1, r26
    1578:	f0 40       	sbci	r31, 0x00	; 0
    157a:	a2 2f       	mov	r26, r18
    157c:	23 2f       	mov	r18, r19
    157e:	34 2f       	mov	r19, r20
    1580:	44 27       	eor	r20, r20
    1582:	58 5f       	subi	r21, 0xF8	; 248
    1584:	f3 cf       	rjmp	.-26     	; 0x156c <__addsf3x+0x38>
    1586:	46 95       	lsr	r20
    1588:	37 95       	ror	r19
    158a:	27 95       	ror	r18
    158c:	a7 95       	ror	r26
    158e:	f0 40       	sbci	r31, 0x00	; 0
    1590:	53 95       	inc	r21
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__addsf3x+0x52>
    1594:	7e f4       	brtc	.+30     	; 0x15b4 <__addsf3x+0x80>
    1596:	1f 16       	cp	r1, r31
    1598:	ba 0b       	sbc	r27, r26
    159a:	62 0b       	sbc	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	ba f0       	brmi	.+46     	; 0x15d0 <__addsf3x+0x9c>
    15a2:	91 50       	subi	r25, 0x01	; 1
    15a4:	a1 f0       	breq	.+40     	; 0x15ce <__addsf3x+0x9a>
    15a6:	ff 0f       	add	r31, r31
    15a8:	bb 1f       	adc	r27, r27
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	c2 f7       	brpl	.-16     	; 0x15a2 <__addsf3x+0x6e>
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <__addsf3x+0x9c>
    15b4:	ba 0f       	add	r27, r26
    15b6:	62 1f       	adc	r22, r18
    15b8:	73 1f       	adc	r23, r19
    15ba:	84 1f       	adc	r24, r20
    15bc:	48 f4       	brcc	.+18     	; 0x15d0 <__addsf3x+0x9c>
    15be:	87 95       	ror	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b7 95       	ror	r27
    15c6:	f7 95       	ror	r31
    15c8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <__addsf3x+0x9a>
    15cc:	b0 cf       	rjmp	.-160    	; 0x152e <__addsf3+0x28>
    15ce:	93 95       	inc	r25
    15d0:	88 0f       	add	r24, r24
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <__addsf3x+0xa2>
    15d4:	99 27       	eor	r25, r25
    15d6:	ee 0f       	add	r30, r30
    15d8:	97 95       	ror	r25
    15da:	87 95       	ror	r24
    15dc:	08 95       	ret

000015de <__divsf3>:
    15de:	0e 94 03 0b 	call	0x1606	; 0x1606 <__divsf3x>
    15e2:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_round>
    15e6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__fp_pscB>
    15ea:	58 f0       	brcs	.+22     	; 0x1602 <__divsf3+0x24>
    15ec:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscA>
    15f0:	40 f0       	brcs	.+16     	; 0x1602 <__divsf3+0x24>
    15f2:	29 f4       	brne	.+10     	; 0x15fe <__divsf3+0x20>
    15f4:	5f 3f       	cpi	r21, 0xFF	; 255
    15f6:	29 f0       	breq	.+10     	; 0x1602 <__divsf3+0x24>
    15f8:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_inf>
    15fc:	51 11       	cpse	r21, r1
    15fe:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__fp_szero>
    1602:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_nan>

00001606 <__divsf3x>:
    1606:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_split3>
    160a:	68 f3       	brcs	.-38     	; 0x15e6 <__divsf3+0x8>

0000160c <__divsf3_pse>:
    160c:	99 23       	and	r25, r25
    160e:	b1 f3       	breq	.-20     	; 0x15fc <__divsf3+0x1e>
    1610:	55 23       	and	r21, r21
    1612:	91 f3       	breq	.-28     	; 0x15f8 <__divsf3+0x1a>
    1614:	95 1b       	sub	r25, r21
    1616:	55 0b       	sbc	r21, r21
    1618:	bb 27       	eor	r27, r27
    161a:	aa 27       	eor	r26, r26
    161c:	62 17       	cp	r22, r18
    161e:	73 07       	cpc	r23, r19
    1620:	84 07       	cpc	r24, r20
    1622:	38 f0       	brcs	.+14     	; 0x1632 <__divsf3_pse+0x26>
    1624:	9f 5f       	subi	r25, 0xFF	; 255
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	44 1f       	adc	r20, r20
    162e:	aa 1f       	adc	r26, r26
    1630:	a9 f3       	breq	.-22     	; 0x161c <__divsf3_pse+0x10>
    1632:	35 d0       	rcall	.+106    	; 0x169e <__divsf3_pse+0x92>
    1634:	0e 2e       	mov	r0, r30
    1636:	3a f0       	brmi	.+14     	; 0x1646 <__divsf3_pse+0x3a>
    1638:	e0 e8       	ldi	r30, 0x80	; 128
    163a:	32 d0       	rcall	.+100    	; 0x16a0 <__divsf3_pse+0x94>
    163c:	91 50       	subi	r25, 0x01	; 1
    163e:	50 40       	sbci	r21, 0x00	; 0
    1640:	e6 95       	lsr	r30
    1642:	00 1c       	adc	r0, r0
    1644:	ca f7       	brpl	.-14     	; 0x1638 <__divsf3_pse+0x2c>
    1646:	2b d0       	rcall	.+86     	; 0x169e <__divsf3_pse+0x92>
    1648:	fe 2f       	mov	r31, r30
    164a:	29 d0       	rcall	.+82     	; 0x169e <__divsf3_pse+0x92>
    164c:	66 0f       	add	r22, r22
    164e:	77 1f       	adc	r23, r23
    1650:	88 1f       	adc	r24, r24
    1652:	bb 1f       	adc	r27, r27
    1654:	26 17       	cp	r18, r22
    1656:	37 07       	cpc	r19, r23
    1658:	48 07       	cpc	r20, r24
    165a:	ab 07       	cpc	r26, r27
    165c:	b0 e8       	ldi	r27, 0x80	; 128
    165e:	09 f0       	breq	.+2      	; 0x1662 <__divsf3_pse+0x56>
    1660:	bb 0b       	sbc	r27, r27
    1662:	80 2d       	mov	r24, r0
    1664:	bf 01       	movw	r22, r30
    1666:	ff 27       	eor	r31, r31
    1668:	93 58       	subi	r25, 0x83	; 131
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	3a f0       	brmi	.+14     	; 0x167c <__divsf3_pse+0x70>
    166e:	9e 3f       	cpi	r25, 0xFE	; 254
    1670:	51 05       	cpc	r21, r1
    1672:	78 f0       	brcs	.+30     	; 0x1692 <__divsf3_pse+0x86>
    1674:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_inf>
    1678:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__fp_szero>
    167c:	5f 3f       	cpi	r21, 0xFF	; 255
    167e:	e4 f3       	brlt	.-8      	; 0x1678 <__divsf3_pse+0x6c>
    1680:	98 3e       	cpi	r25, 0xE8	; 232
    1682:	d4 f3       	brlt	.-12     	; 0x1678 <__divsf3_pse+0x6c>
    1684:	86 95       	lsr	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b7 95       	ror	r27
    168c:	f7 95       	ror	r31
    168e:	9f 5f       	subi	r25, 0xFF	; 255
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__divsf3_pse+0x78>
    1692:	88 0f       	add	r24, r24
    1694:	91 1d       	adc	r25, r1
    1696:	96 95       	lsr	r25
    1698:	87 95       	ror	r24
    169a:	97 f9       	bld	r25, 7
    169c:	08 95       	ret
    169e:	e1 e0       	ldi	r30, 0x01	; 1
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	bb 1f       	adc	r27, r27
    16a8:	62 17       	cp	r22, r18
    16aa:	73 07       	cpc	r23, r19
    16ac:	84 07       	cpc	r24, r20
    16ae:	ba 07       	cpc	r27, r26
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <__divsf3_pse+0xae>
    16b2:	62 1b       	sub	r22, r18
    16b4:	73 0b       	sbc	r23, r19
    16b6:	84 0b       	sbc	r24, r20
    16b8:	ba 0b       	sbc	r27, r26
    16ba:	ee 1f       	adc	r30, r30
    16bc:	88 f7       	brcc	.-30     	; 0x16a0 <__divsf3_pse+0x94>
    16be:	e0 95       	com	r30
    16c0:	08 95       	ret

000016c2 <__fixsfsi>:
    16c2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__fixunssfsi>
    16c6:	68 94       	set
    16c8:	b1 11       	cpse	r27, r1
    16ca:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__fp_szero>
    16ce:	08 95       	ret

000016d0 <__fixunssfsi>:
    16d0:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_splitA>
    16d4:	88 f0       	brcs	.+34     	; 0x16f8 <__fixunssfsi+0x28>
    16d6:	9f 57       	subi	r25, 0x7F	; 127
    16d8:	98 f0       	brcs	.+38     	; 0x1700 <__fixunssfsi+0x30>
    16da:	b9 2f       	mov	r27, r25
    16dc:	99 27       	eor	r25, r25
    16de:	b7 51       	subi	r27, 0x17	; 23
    16e0:	b0 f0       	brcs	.+44     	; 0x170e <__fixunssfsi+0x3e>
    16e2:	e1 f0       	breq	.+56     	; 0x171c <__fixunssfsi+0x4c>
    16e4:	66 0f       	add	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	88 1f       	adc	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	1a f0       	brmi	.+6      	; 0x16f4 <__fixunssfsi+0x24>
    16ee:	ba 95       	dec	r27
    16f0:	c9 f7       	brne	.-14     	; 0x16e4 <__fixunssfsi+0x14>
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <__fixunssfsi+0x4c>
    16f4:	b1 30       	cpi	r27, 0x01	; 1
    16f6:	91 f0       	breq	.+36     	; 0x171c <__fixunssfsi+0x4c>
    16f8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__fp_zero>
    16fc:	b1 e0       	ldi	r27, 0x01	; 1
    16fe:	08 95       	ret
    1700:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__fp_zero>
    1704:	67 2f       	mov	r22, r23
    1706:	78 2f       	mov	r23, r24
    1708:	88 27       	eor	r24, r24
    170a:	b8 5f       	subi	r27, 0xF8	; 248
    170c:	39 f0       	breq	.+14     	; 0x171c <__fixunssfsi+0x4c>
    170e:	b9 3f       	cpi	r27, 0xF9	; 249
    1710:	cc f3       	brlt	.-14     	; 0x1704 <__fixunssfsi+0x34>
    1712:	86 95       	lsr	r24
    1714:	77 95       	ror	r23
    1716:	67 95       	ror	r22
    1718:	b3 95       	inc	r27
    171a:	d9 f7       	brne	.-10     	; 0x1712 <__fixunssfsi+0x42>
    171c:	3e f4       	brtc	.+14     	; 0x172c <__fixunssfsi+0x5c>
    171e:	90 95       	com	r25
    1720:	80 95       	com	r24
    1722:	70 95       	com	r23
    1724:	61 95       	neg	r22
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	8f 4f       	sbci	r24, 0xFF	; 255
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	08 95       	ret

0000172e <__floatunsisf>:
    172e:	e8 94       	clt
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <__floatsisf+0x12>

00001732 <__floatsisf>:
    1732:	97 fb       	bst	r25, 7
    1734:	3e f4       	brtc	.+14     	; 0x1744 <__floatsisf+0x12>
    1736:	90 95       	com	r25
    1738:	80 95       	com	r24
    173a:	70 95       	com	r23
    173c:	61 95       	neg	r22
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	8f 4f       	sbci	r24, 0xFF	; 255
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	99 23       	and	r25, r25
    1746:	a9 f0       	breq	.+42     	; 0x1772 <__floatsisf+0x40>
    1748:	f9 2f       	mov	r31, r25
    174a:	96 e9       	ldi	r25, 0x96	; 150
    174c:	bb 27       	eor	r27, r27
    174e:	93 95       	inc	r25
    1750:	f6 95       	lsr	r31
    1752:	87 95       	ror	r24
    1754:	77 95       	ror	r23
    1756:	67 95       	ror	r22
    1758:	b7 95       	ror	r27
    175a:	f1 11       	cpse	r31, r1
    175c:	f8 cf       	rjmp	.-16     	; 0x174e <__floatsisf+0x1c>
    175e:	fa f4       	brpl	.+62     	; 0x179e <__floatsisf+0x6c>
    1760:	bb 0f       	add	r27, r27
    1762:	11 f4       	brne	.+4      	; 0x1768 <__floatsisf+0x36>
    1764:	60 ff       	sbrs	r22, 0
    1766:	1b c0       	rjmp	.+54     	; 0x179e <__floatsisf+0x6c>
    1768:	6f 5f       	subi	r22, 0xFF	; 255
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	8f 4f       	sbci	r24, 0xFF	; 255
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	16 c0       	rjmp	.+44     	; 0x179e <__floatsisf+0x6c>
    1772:	88 23       	and	r24, r24
    1774:	11 f0       	breq	.+4      	; 0x177a <__floatsisf+0x48>
    1776:	96 e9       	ldi	r25, 0x96	; 150
    1778:	11 c0       	rjmp	.+34     	; 0x179c <__floatsisf+0x6a>
    177a:	77 23       	and	r23, r23
    177c:	21 f0       	breq	.+8      	; 0x1786 <__floatsisf+0x54>
    177e:	9e e8       	ldi	r25, 0x8E	; 142
    1780:	87 2f       	mov	r24, r23
    1782:	76 2f       	mov	r23, r22
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <__floatsisf+0x5e>
    1786:	66 23       	and	r22, r22
    1788:	71 f0       	breq	.+28     	; 0x17a6 <__floatsisf+0x74>
    178a:	96 e8       	ldi	r25, 0x86	; 134
    178c:	86 2f       	mov	r24, r22
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	2a f0       	brmi	.+10     	; 0x179e <__floatsisf+0x6c>
    1794:	9a 95       	dec	r25
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	da f7       	brpl	.-10     	; 0x1794 <__floatsisf+0x62>
    179e:	88 0f       	add	r24, r24
    17a0:	96 95       	lsr	r25
    17a2:	87 95       	ror	r24
    17a4:	97 f9       	bld	r25, 7
    17a6:	08 95       	ret

000017a8 <__fp_inf>:
    17a8:	97 f9       	bld	r25, 7
    17aa:	9f 67       	ori	r25, 0x7F	; 127
    17ac:	80 e8       	ldi	r24, 0x80	; 128
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	08 95       	ret

000017b4 <__fp_nan>:
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
    17b6:	80 ec       	ldi	r24, 0xC0	; 192
    17b8:	08 95       	ret

000017ba <__fp_pscA>:
    17ba:	00 24       	eor	r0, r0
    17bc:	0a 94       	dec	r0
    17be:	16 16       	cp	r1, r22
    17c0:	17 06       	cpc	r1, r23
    17c2:	18 06       	cpc	r1, r24
    17c4:	09 06       	cpc	r0, r25
    17c6:	08 95       	ret

000017c8 <__fp_pscB>:
    17c8:	00 24       	eor	r0, r0
    17ca:	0a 94       	dec	r0
    17cc:	12 16       	cp	r1, r18
    17ce:	13 06       	cpc	r1, r19
    17d0:	14 06       	cpc	r1, r20
    17d2:	05 06       	cpc	r0, r21
    17d4:	08 95       	ret

000017d6 <__fp_round>:
    17d6:	09 2e       	mov	r0, r25
    17d8:	03 94       	inc	r0
    17da:	00 0c       	add	r0, r0
    17dc:	11 f4       	brne	.+4      	; 0x17e2 <__fp_round+0xc>
    17de:	88 23       	and	r24, r24
    17e0:	52 f0       	brmi	.+20     	; 0x17f6 <__fp_round+0x20>
    17e2:	bb 0f       	add	r27, r27
    17e4:	40 f4       	brcc	.+16     	; 0x17f6 <__fp_round+0x20>
    17e6:	bf 2b       	or	r27, r31
    17e8:	11 f4       	brne	.+4      	; 0x17ee <__fp_round+0x18>
    17ea:	60 ff       	sbrs	r22, 0
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <__fp_round+0x20>
    17ee:	6f 5f       	subi	r22, 0xFF	; 255
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	8f 4f       	sbci	r24, 0xFF	; 255
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	08 95       	ret

000017f8 <__fp_split3>:
    17f8:	57 fd       	sbrc	r21, 7
    17fa:	90 58       	subi	r25, 0x80	; 128
    17fc:	44 0f       	add	r20, r20
    17fe:	55 1f       	adc	r21, r21
    1800:	59 f0       	breq	.+22     	; 0x1818 <__fp_splitA+0x10>
    1802:	5f 3f       	cpi	r21, 0xFF	; 255
    1804:	71 f0       	breq	.+28     	; 0x1822 <__fp_splitA+0x1a>
    1806:	47 95       	ror	r20

00001808 <__fp_splitA>:
    1808:	88 0f       	add	r24, r24
    180a:	97 fb       	bst	r25, 7
    180c:	99 1f       	adc	r25, r25
    180e:	61 f0       	breq	.+24     	; 0x1828 <__fp_splitA+0x20>
    1810:	9f 3f       	cpi	r25, 0xFF	; 255
    1812:	79 f0       	breq	.+30     	; 0x1832 <__fp_splitA+0x2a>
    1814:	87 95       	ror	r24
    1816:	08 95       	ret
    1818:	12 16       	cp	r1, r18
    181a:	13 06       	cpc	r1, r19
    181c:	14 06       	cpc	r1, r20
    181e:	55 1f       	adc	r21, r21
    1820:	f2 cf       	rjmp	.-28     	; 0x1806 <__fp_split3+0xe>
    1822:	46 95       	lsr	r20
    1824:	f1 df       	rcall	.-30     	; 0x1808 <__fp_splitA>
    1826:	08 c0       	rjmp	.+16     	; 0x1838 <__fp_splitA+0x30>
    1828:	16 16       	cp	r1, r22
    182a:	17 06       	cpc	r1, r23
    182c:	18 06       	cpc	r1, r24
    182e:	99 1f       	adc	r25, r25
    1830:	f1 cf       	rjmp	.-30     	; 0x1814 <__fp_splitA+0xc>
    1832:	86 95       	lsr	r24
    1834:	71 05       	cpc	r23, r1
    1836:	61 05       	cpc	r22, r1
    1838:	08 94       	sec
    183a:	08 95       	ret

0000183c <__fp_zero>:
    183c:	e8 94       	clt

0000183e <__fp_szero>:
    183e:	bb 27       	eor	r27, r27
    1840:	66 27       	eor	r22, r22
    1842:	77 27       	eor	r23, r23
    1844:	cb 01       	movw	r24, r22
    1846:	97 f9       	bld	r25, 7
    1848:	08 95       	ret

0000184a <__mulsf3>:
    184a:	0e 94 38 0c 	call	0x1870	; 0x1870 <__mulsf3x>
    184e:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_round>
    1852:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscA>
    1856:	38 f0       	brcs	.+14     	; 0x1866 <__mulsf3+0x1c>
    1858:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__fp_pscB>
    185c:	20 f0       	brcs	.+8      	; 0x1866 <__mulsf3+0x1c>
    185e:	95 23       	and	r25, r21
    1860:	11 f0       	breq	.+4      	; 0x1866 <__mulsf3+0x1c>
    1862:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_inf>
    1866:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_nan>
    186a:	11 24       	eor	r1, r1
    186c:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__fp_szero>

00001870 <__mulsf3x>:
    1870:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_split3>
    1874:	70 f3       	brcs	.-36     	; 0x1852 <__mulsf3+0x8>

00001876 <__mulsf3_pse>:
    1876:	95 9f       	mul	r25, r21
    1878:	c1 f3       	breq	.-16     	; 0x186a <__mulsf3+0x20>
    187a:	95 0f       	add	r25, r21
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	55 1f       	adc	r21, r21
    1880:	62 9f       	mul	r22, r18
    1882:	f0 01       	movw	r30, r0
    1884:	72 9f       	mul	r23, r18
    1886:	bb 27       	eor	r27, r27
    1888:	f0 0d       	add	r31, r0
    188a:	b1 1d       	adc	r27, r1
    188c:	63 9f       	mul	r22, r19
    188e:	aa 27       	eor	r26, r26
    1890:	f0 0d       	add	r31, r0
    1892:	b1 1d       	adc	r27, r1
    1894:	aa 1f       	adc	r26, r26
    1896:	64 9f       	mul	r22, r20
    1898:	66 27       	eor	r22, r22
    189a:	b0 0d       	add	r27, r0
    189c:	a1 1d       	adc	r26, r1
    189e:	66 1f       	adc	r22, r22
    18a0:	82 9f       	mul	r24, r18
    18a2:	22 27       	eor	r18, r18
    18a4:	b0 0d       	add	r27, r0
    18a6:	a1 1d       	adc	r26, r1
    18a8:	62 1f       	adc	r22, r18
    18aa:	73 9f       	mul	r23, r19
    18ac:	b0 0d       	add	r27, r0
    18ae:	a1 1d       	adc	r26, r1
    18b0:	62 1f       	adc	r22, r18
    18b2:	83 9f       	mul	r24, r19
    18b4:	a0 0d       	add	r26, r0
    18b6:	61 1d       	adc	r22, r1
    18b8:	22 1f       	adc	r18, r18
    18ba:	74 9f       	mul	r23, r20
    18bc:	33 27       	eor	r19, r19
    18be:	a0 0d       	add	r26, r0
    18c0:	61 1d       	adc	r22, r1
    18c2:	23 1f       	adc	r18, r19
    18c4:	84 9f       	mul	r24, r20
    18c6:	60 0d       	add	r22, r0
    18c8:	21 1d       	adc	r18, r1
    18ca:	82 2f       	mov	r24, r18
    18cc:	76 2f       	mov	r23, r22
    18ce:	6a 2f       	mov	r22, r26
    18d0:	11 24       	eor	r1, r1
    18d2:	9f 57       	subi	r25, 0x7F	; 127
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	9a f0       	brmi	.+38     	; 0x18fe <__mulsf3_pse+0x88>
    18d8:	f1 f0       	breq	.+60     	; 0x1916 <__mulsf3_pse+0xa0>
    18da:	88 23       	and	r24, r24
    18dc:	4a f0       	brmi	.+18     	; 0x18f0 <__mulsf3_pse+0x7a>
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	bb 1f       	adc	r27, r27
    18e4:	66 1f       	adc	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	91 50       	subi	r25, 0x01	; 1
    18ec:	50 40       	sbci	r21, 0x00	; 0
    18ee:	a9 f7       	brne	.-22     	; 0x18da <__mulsf3_pse+0x64>
    18f0:	9e 3f       	cpi	r25, 0xFE	; 254
    18f2:	51 05       	cpc	r21, r1
    18f4:	80 f0       	brcs	.+32     	; 0x1916 <__mulsf3_pse+0xa0>
    18f6:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_inf>
    18fa:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__fp_szero>
    18fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1900:	e4 f3       	brlt	.-8      	; 0x18fa <__mulsf3_pse+0x84>
    1902:	98 3e       	cpi	r25, 0xE8	; 232
    1904:	d4 f3       	brlt	.-12     	; 0x18fa <__mulsf3_pse+0x84>
    1906:	86 95       	lsr	r24
    1908:	77 95       	ror	r23
    190a:	67 95       	ror	r22
    190c:	b7 95       	ror	r27
    190e:	f7 95       	ror	r31
    1910:	e7 95       	ror	r30
    1912:	9f 5f       	subi	r25, 0xFF	; 255
    1914:	c1 f7       	brne	.-16     	; 0x1906 <__mulsf3_pse+0x90>
    1916:	fe 2b       	or	r31, r30
    1918:	88 0f       	add	r24, r24
    191a:	91 1d       	adc	r25, r1
    191c:	96 95       	lsr	r25
    191e:	87 95       	ror	r24
    1920:	97 f9       	bld	r25, 7
    1922:	08 95       	ret

00001924 <do_rand>:
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
    193a:	68 81       	ld	r22, Y
    193c:	79 81       	ldd	r23, Y+1	; 0x01
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	61 15       	cp	r22, r1
    1944:	71 05       	cpc	r23, r1
    1946:	81 05       	cpc	r24, r1
    1948:	91 05       	cpc	r25, r1
    194a:	21 f4       	brne	.+8      	; 0x1954 <do_rand+0x30>
    194c:	64 e2       	ldi	r22, 0x24	; 36
    194e:	79 ed       	ldi	r23, 0xD9	; 217
    1950:	8b e5       	ldi	r24, 0x5B	; 91
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	2d e1       	ldi	r18, 0x1D	; 29
    1956:	33 ef       	ldi	r19, 0xF3	; 243
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__divmodsi4>
    1960:	49 01       	movw	r8, r18
    1962:	5a 01       	movw	r10, r20
    1964:	9b 01       	movw	r18, r22
    1966:	ac 01       	movw	r20, r24
    1968:	a7 ea       	ldi	r26, 0xA7	; 167
    196a:	b1 e4       	ldi	r27, 0x41	; 65
    196c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__muluhisi3>
    1970:	6b 01       	movw	r12, r22
    1972:	7c 01       	movw	r14, r24
    1974:	ac ee       	ldi	r26, 0xEC	; 236
    1976:	b4 ef       	ldi	r27, 0xF4	; 244
    1978:	a5 01       	movw	r20, r10
    197a:	94 01       	movw	r18, r8
    197c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__mulohisi3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8c 0d       	add	r24, r12
    1986:	9d 1d       	adc	r25, r13
    1988:	ae 1d       	adc	r26, r14
    198a:	bf 1d       	adc	r27, r15
    198c:	b7 ff       	sbrs	r27, 7
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <do_rand+0x72>
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	a1 09       	sbc	r26, r1
    1994:	b0 48       	sbci	r27, 0x80	; 128
    1996:	88 83       	st	Y, r24
    1998:	99 83       	std	Y+1, r25	; 0x01
    199a:	aa 83       	std	Y+2, r26	; 0x02
    199c:	bb 83       	std	Y+3, r27	; 0x03
    199e:	9f 77       	andi	r25, 0x7F	; 127
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	9f 90       	pop	r9
    19b2:	8f 90       	pop	r8
    19b4:	08 95       	ret

000019b6 <rand_r>:
    19b6:	0e 94 92 0c 	call	0x1924	; 0x1924 <do_rand>
    19ba:	08 95       	ret

000019bc <rand>:
    19bc:	87 e0       	ldi	r24, 0x07	; 7
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	0e 94 92 0c 	call	0x1924	; 0x1924 <do_rand>
    19c4:	08 95       	ret

000019c6 <srand>:
    19c6:	a0 e0       	ldi	r26, 0x00	; 0
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	80 93 07 01 	sts	0x0107, r24
    19ce:	90 93 08 01 	sts	0x0108, r25
    19d2:	a0 93 09 01 	sts	0x0109, r26
    19d6:	b0 93 0a 01 	sts	0x010A, r27
    19da:	08 95       	ret

000019dc <eeprom_read_byte>:
    19dc:	f9 99       	sbic	0x1f, 1	; 31
    19de:	fe cf       	rjmp	.-4      	; 0x19dc <eeprom_read_byte>
    19e0:	92 bd       	out	0x22, r25	; 34
    19e2:	81 bd       	out	0x21, r24	; 33
    19e4:	f8 9a       	sbi	0x1f, 0	; 31
    19e6:	99 27       	eor	r25, r25
    19e8:	80 b5       	in	r24, 0x20	; 32
    19ea:	08 95       	ret

000019ec <eeprom_write_byte>:
    19ec:	26 2f       	mov	r18, r22

000019ee <eeprom_write_r18>:
    19ee:	f9 99       	sbic	0x1f, 1	; 31
    19f0:	fe cf       	rjmp	.-4      	; 0x19ee <eeprom_write_r18>
    19f2:	1f ba       	out	0x1f, r1	; 31
    19f4:	92 bd       	out	0x22, r25	; 34
    19f6:	81 bd       	out	0x21, r24	; 33
    19f8:	20 bd       	out	0x20, r18	; 32
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	fa 9a       	sbi	0x1f, 2	; 31
    1a00:	f9 9a       	sbi	0x1f, 1	; 31
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	08 95       	ret

00001a08 <__divmodsi4>:
    1a08:	05 2e       	mov	r0, r21
    1a0a:	97 fb       	bst	r25, 7
    1a0c:	1e f4       	brtc	.+6      	; 0x1a14 <__divmodsi4+0xc>
    1a0e:	00 94       	com	r0
    1a10:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__negsi2>
    1a14:	57 fd       	sbrc	r21, 7
    1a16:	07 d0       	rcall	.+14     	; 0x1a26 <__divmodsi4_neg2>
    1a18:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__udivmodsi4>
    1a1c:	07 fc       	sbrc	r0, 7
    1a1e:	03 d0       	rcall	.+6      	; 0x1a26 <__divmodsi4_neg2>
    1a20:	4e f4       	brtc	.+18     	; 0x1a34 <__divmodsi4_exit>
    1a22:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__negsi2>

00001a26 <__divmodsi4_neg2>:
    1a26:	50 95       	com	r21
    1a28:	40 95       	com	r20
    1a2a:	30 95       	com	r19
    1a2c:	21 95       	neg	r18
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	4f 4f       	sbci	r20, 0xFF	; 255
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255

00001a34 <__divmodsi4_exit>:
    1a34:	08 95       	ret

00001a36 <__negsi2>:
    1a36:	90 95       	com	r25
    1a38:	80 95       	com	r24
    1a3a:	70 95       	com	r23
    1a3c:	61 95       	neg	r22
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	8f 4f       	sbci	r24, 0xFF	; 255
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	08 95       	ret

00001a46 <__muluhisi3>:
    1a46:	0e 94 5f 0a 	call	0x14be	; 0x14be <__umulhisi3>
    1a4a:	a5 9f       	mul	r26, r21
    1a4c:	90 0d       	add	r25, r0
    1a4e:	b4 9f       	mul	r27, r20
    1a50:	90 0d       	add	r25, r0
    1a52:	a4 9f       	mul	r26, r20
    1a54:	80 0d       	add	r24, r0
    1a56:	91 1d       	adc	r25, r1
    1a58:	11 24       	eor	r1, r1
    1a5a:	08 95       	ret

00001a5c <__mulshisi3>:
    1a5c:	b7 ff       	sbrs	r27, 7
    1a5e:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__muluhisi3>

00001a62 <__mulohisi3>:
    1a62:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__muluhisi3>
    1a66:	82 1b       	sub	r24, r18
    1a68:	93 0b       	sbc	r25, r19
    1a6a:	08 95       	ret

00001a6c <__udivmodsi4>:
    1a6c:	a1 e2       	ldi	r26, 0x21	; 33
    1a6e:	1a 2e       	mov	r1, r26
    1a70:	aa 1b       	sub	r26, r26
    1a72:	bb 1b       	sub	r27, r27
    1a74:	fd 01       	movw	r30, r26
    1a76:	0d c0       	rjmp	.+26     	; 0x1a92 <__udivmodsi4_ep>

00001a78 <__udivmodsi4_loop>:
    1a78:	aa 1f       	adc	r26, r26
    1a7a:	bb 1f       	adc	r27, r27
    1a7c:	ee 1f       	adc	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	a2 17       	cp	r26, r18
    1a82:	b3 07       	cpc	r27, r19
    1a84:	e4 07       	cpc	r30, r20
    1a86:	f5 07       	cpc	r31, r21
    1a88:	20 f0       	brcs	.+8      	; 0x1a92 <__udivmodsi4_ep>
    1a8a:	a2 1b       	sub	r26, r18
    1a8c:	b3 0b       	sbc	r27, r19
    1a8e:	e4 0b       	sbc	r30, r20
    1a90:	f5 0b       	sbc	r31, r21

00001a92 <__udivmodsi4_ep>:
    1a92:	66 1f       	adc	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	88 1f       	adc	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	1a 94       	dec	r1
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <__udivmodsi4_loop>
    1a9e:	60 95       	com	r22
    1aa0:	70 95       	com	r23
    1aa2:	80 95       	com	r24
    1aa4:	90 95       	com	r25
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	bd 01       	movw	r22, r26
    1aac:	cf 01       	movw	r24, r30
    1aae:	08 95       	ret

00001ab0 <_exit>:
    1ab0:	f8 94       	cli

00001ab2 <__stop_program>:
    1ab2:	ff cf       	rjmp	.-2      	; 0x1ab2 <__stop_program>
