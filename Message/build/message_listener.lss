
build/message_listener.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	e6 01       	movw	r28, r12
      6a:	62 02       	muls	r22, r18
      6c:	ba 01       	movw	r22, r20
      6e:	b1 01       	movw	r22, r2
      70:	b7 01       	movw	r22, r14
      72:	44 02       	muls	r20, r20
      74:	39 02       	muls	r19, r25
      76:	c4 08       	sbc	r12, r4
      78:	a1 07       	cpc	r26, r17
      7a:	a1 07       	cpc	r26, r17
      7c:	c1 08       	sbc	r12, r1
      7e:	cd 08       	sbc	r12, r13
      80:	bd 08       	sbc	r11, r13
      82:	d4 08       	sbc	r13, r4
      84:	d0 08       	sbc	r13, r0
      86:	d8 08       	sbc	r13, r8
      88:	90 08       	sbc	r9, r0
      8a:	62 08       	sbc	r6, r2

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e6       	ldi	r30, 0x60	; 96
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 37       	cpi	r26, 0x7C	; 124
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 0a 0a 	call	0x1414	; 0x1414 <main>
      da:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:

message_t rcvd_message;
//Flag to keep track of message transmission.
int new_message = 0;

void message_rx(message_t *msg, distance_measurement_t *dist){
      e2:	fc 01       	movw	r30, r24
  rcvd_message = *msg; //store the incoming message
      e4:	9c e0       	ldi	r25, 0x0C	; 12
      e6:	a2 e1       	ldi	r26, 0x12	; 18
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	9a 95       	dec	r25
      f0:	e1 f7       	brne	.-8      	; 0xea <message_rx+0x8>
  new_message = 1;  //set flag to 1 indicating message recieved
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 0d 01 	sts	0x010D, r25
      fa:	80 93 0c 01 	sts	0x010C, r24
      fe:	08 95       	ret

00000100 <setup>:
}

void setup()
{
     100:	08 95       	ret

00000102 <loop>:
}

void loop()
{
  // blink the LED magenta whenever a message is sent.
  if (new_message == 1)
     102:	80 91 0c 01 	lds	r24, 0x010C
     106:	90 91 0d 01 	lds	r25, 0x010D
     10a:	01 97       	sbiw	r24, 0x01	; 1
     10c:	09 f0       	breq	.+2      	; 0x110 <loop+0xe>
     10e:	08 95       	ret
    {
      new_message = 0;
     110:	10 92 0d 01 	sts	0x010D, r1
     114:	10 92 0c 01 	sts	0x010C, r1
      
      set_color(RGB(1,1,0));
     118:	85 e0       	ldi	r24, 0x05	; 5
     11a:	0e 94 1b 07 	call	0xe36	; 0xe36 <set_color>
      delay(100);
     11e:	84 e6       	ldi	r24, 0x64	; 100
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 ef 02 	call	0x5de	; 0x5de <delay>
      set_color(RGB(0,0,0));
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <set_color>

0000012c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     12c:	08 95       	ret

0000012e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	08 95       	ret

00000134 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     134:	08 95       	ret

00000136 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
    cli();
     144:	f8 94       	cli

    ports_off();
     146:	14 b8       	out	0x04, r1	; 4
     148:	17 b8       	out	0x07, r1	; 7
     14a:	1a b8       	out	0x0a, r1	; 10
     14c:	15 b8       	out	0x05, r1	; 5
     14e:	18 b8       	out	0x08, r1	; 8
     150:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     152:	52 9a       	sbi	0x0a, 2	; 10
     154:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     156:	14 bc       	out	0x24, r1	; 36
     158:	85 e0       	ldi	r24, 0x05	; 5
     15a:	85 bd       	out	0x25, r24	; 37
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	87 bd       	out	0x27, r24	; 39
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     166:	10 92 80 00 	sts	0x0080, r1
     16a:	10 92 81 00 	sts	0x0081, r1
     16e:	2f e8       	ldi	r18, 0x8F	; 143
     170:	3b e0       	ldi	r19, 0x0B	; 11
     172:	30 93 89 00 	sts	0x0089, r19
     176:	20 93 88 00 	sts	0x0088, r18
     17a:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     17e:	53 98       	cbi	0x0a, 3	; 10
     180:	23 98       	cbi	0x04, 3	; 4
     182:	91 ea       	ldi	r25, 0xA1	; 161
     184:	90 93 b0 00 	sts	0x00B0, r25
     188:	80 93 b1 00 	sts	0x00B1, r24
     18c:	10 92 b4 00 	sts	0x00B4, r1
     190:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     194:	8b e0       	ldi	r24, 0x0B	; 11
     196:	80 bf       	out	0x30, r24	; 48
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     19e:	86 e0       	ldi	r24, 0x06	; 6
     1a0:	80 93 7c 00 	sts	0x007C, r24
     1a4:	83 e8       	ldi	r24, 0x83	; 131
     1a6:	80 93 7a 00 	sts	0x007A, r24
     1aa:	80 91 7a 00 	lds	r24, 0x007A
     1ae:	80 64       	ori	r24, 0x40	; 64
     1b0:	80 93 7a 00 	sts	0x007A, r24
     1b4:	80 91 7a 00 	lds	r24, 0x007A
     1b8:	86 fd       	sbrc	r24, 6
     1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1bc:	10 92 7c 00 	sts	0x007C, r1
     1c0:	83 ea       	ldi	r24, 0xA3	; 163
     1c2:	80 93 7a 00 	sts	0x007A, r24
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
    if (osccal != 0xFF)
     1d4:	8f 3f       	cpi	r24, 0xFF	; 255
     1d6:	11 f0       	breq	.+4      	; 0x1dc <kilo_init+0xa6>
        OSCCAL = osccal;
     1d8:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1dc:	10 92 45 01 	sts	0x0145, r1
    rx_leadingbit = 1;
     1e0:	c1 e0       	ldi	r28, 0x01	; 1
     1e2:	c0 93 1e 01 	sts	0x011E, r28
    rx_leadingbyte = 1;
     1e6:	c0 93 62 01 	sts	0x0162, r28
    rx_byteindex = 0;
     1ea:	10 92 3c 01 	sts	0x013C, r1
    rx_bytevalue = 0;
     1ee:	10 92 76 01 	sts	0x0176, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1f2:	80 e9       	ldi	r24, 0x90	; 144
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     1fa:	80 93 3b 01 	sts	0x013B, r24
    if (tx_mask & ~TX_MASK_MAX)
     1fe:	80 91 3b 01 	lds	r24, 0x013B
     202:	88 73       	andi	r24, 0x38	; 56
     204:	11 f0       	breq	.+4      	; 0x20a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     206:	c0 93 3b 01 	sts	0x013B, r28
    tx_clock = 0;
     20a:	10 92 66 01 	sts	0x0166, r1
     20e:	10 92 65 01 	sts	0x0165, r1
    tx_increment = 255;
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	90 93 64 01 	sts	0x0164, r25
     21a:	80 93 63 01 	sts	0x0163, r24
    kilo_ticks = 0;
     21e:	10 92 41 01 	sts	0x0141, r1
     222:	10 92 42 01 	sts	0x0142, r1
     226:	10 92 43 01 	sts	0x0143, r1
     22a:	10 92 44 01 	sts	0x0144, r1
    kilo_state = IDLE;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 11 01 	sts	0x0111, r24
    kilo_tx_period = 3906;
     234:	82 e4       	ldi	r24, 0x42	; 66
     236:	9f e0       	ldi	r25, 0x0F	; 15
     238:	90 93 75 01 	sts	0x0175, r25
     23c:	80 93 74 01 	sts	0x0174, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     240:	80 eb       	ldi	r24, 0xB0	; 176
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     248:	c8 2f       	mov	r28, r24
     24a:	81 eb       	ldi	r24, 0xB1	; 177
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     252:	2c 2f       	mov	r18, r28
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	38 2b       	or	r19, r24
     258:	30 93 78 01 	sts	0x0178, r19
     25c:	20 93 77 01 	sts	0x0177, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     268:	80 93 7b 01 	sts	0x017B, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     26c:	89 e0       	ldi	r24, 0x09	; 9
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     274:	80 93 67 01 	sts	0x0167, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     278:	8c e0       	ldi	r24, 0x0C	; 12
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     280:	80 93 79 01 	sts	0x0179, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     284:	84 e1       	ldi	r24, 0x14	; 20
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     28c:	80 93 7a 01 	sts	0x017A, r24
     290:	56 e4       	ldi	r21, 0x46	; 70
     292:	e5 2e       	mov	r14, r21
     294:	51 e0       	ldi	r21, 0x01	; 1
     296:	f5 2e       	mov	r15, r21
     298:	0f e1       	ldi	r16, 0x1F	; 31
     29a:	11 e0       	ldi	r17, 0x01	; 1
     29c:	c0 e2       	ldi	r28, 0x20	; 32
     29e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2a0:	ce 01       	movw	r24, r28
     2a2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     2a6:	d8 2e       	mov	r13, r24
     2a8:	ce 01       	movw	r24, r28
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     2b0:	2d 2d       	mov	r18, r13
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	32 2f       	mov	r19, r18
     2b6:	22 27       	eor	r18, r18
     2b8:	28 2b       	or	r18, r24
     2ba:	f7 01       	movw	r30, r14
     2bc:	21 93       	st	Z+, r18
     2be:	31 93       	st	Z+, r19
     2c0:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2c2:	ce 01       	movw	r24, r28
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     2ca:	d8 2e       	mov	r13, r24
     2cc:	ce 01       	movw	r24, r28
     2ce:	c1 96       	adiw	r24, 0x31	; 49
     2d0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_read_byte>
     2d4:	2d 2d       	mov	r18, r13
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	32 2f       	mov	r19, r18
     2da:	22 27       	eor	r18, r18
     2dc:	28 2b       	or	r18, r24
     2de:	f8 01       	movw	r30, r16
     2e0:	21 93       	st	Z+, r18
     2e2:	31 93       	st	Z+, r19
     2e4:	8f 01       	movw	r16, r30
     2e6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2e8:	cc 33       	cpi	r28, 0x3C	; 60
     2ea:	d1 05       	cpc	r29, r1
     2ec:	c9 f6       	brne	.-78     	; 0x2a0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2ee:	78 94       	sei
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	08 95       	ret

00000300 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	8f 93       	push	r24
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	a8 95       	wdr
     312:	80 91 60 00 	lds	r24, 0x0060
     316:	88 61       	ori	r24, 0x18	; 24
     318:	80 93 60 00 	sts	0x0060, r24
     31c:	10 92 60 00 	sts	0x0060, r1
     320:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     322:	8f 91       	pop	r24
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     32e:	3c 01       	movw	r6, r24
     330:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     332:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     334:	99 24       	eor	r9, r9
     336:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     33c:	96 e0       	ldi	r25, 0x06	; 6
     33e:	a9 2e       	mov	r10, r25
     340:	23 e8       	ldi	r18, 0x83	; 131
     342:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     344:	38 e1       	ldi	r19, 0x18	; 24
     346:	d3 2e       	mov	r13, r19
     348:	49 e2       	ldi	r20, 0x29	; 41
     34a:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     34c:	90 91 11 01 	lds	r25, 0x0111
     350:	e9 2f       	mov	r30, r25
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	e7 30       	cpi	r30, 0x07	; 7
     356:	f1 05       	cpc	r31, r1
     358:	c8 f7       	brcc	.-14     	; 0x34c <kilo_start+0x1e>
     35a:	ec 5c       	subi	r30, 0xCC	; 204
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     362:	11 23       	and	r17, r17
     364:	09 f4       	brne	.+2      	; 0x368 <kilo_start+0x3a>
     366:	fc c0       	rjmp	.+504    	; 0x560 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     368:	c0 92 11 01 	sts	0x0111, r12
     36c:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     36e:	fe 01       	movw	r30, r28
     370:	09 95       	icall
                break;
     372:	ec cf       	rjmp	.-40     	; 0x34c <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     374:	80 91 45 01 	lds	r24, 0x0145
     378:	81 11       	cpse	r24, r1
     37a:	eb c0       	rjmp	.+470    	; 0x552 <kilo_start+0x224>
        cli();                                    // disable interrupts
     37c:	f8 94       	cli
        adc_setup_conversion(6);
     37e:	a0 92 7c 00 	sts	0x007C, r10
     382:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     386:	80 91 7a 00 	lds	r24, 0x007A
     38a:	80 64       	ori	r24, 0x40	; 64
     38c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     390:	90 91 7a 00 	lds	r25, 0x007A
     394:	96 fd       	sbrc	r25, 6
     396:	fc cf       	rjmp	.-8      	; 0x390 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     398:	80 91 78 00 	lds	r24, 0x0078
     39c:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3a0:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3a2:	8b 3a       	cpi	r24, 0xAB	; 171
     3a4:	e2 e0       	ldi	r30, 0x02	; 2
     3a6:	9e 07       	cpc	r25, r30
     3a8:	0c f0       	brlt	.+2      	; 0x3ac <kilo_start+0x7e>
     3aa:	ed c0       	rjmp	.+474    	; 0x586 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3ac:	89 38       	cpi	r24, 0x89	; 137
     3ae:	f2 e0       	ldi	r31, 0x02	; 2
     3b0:	9f 07       	cpc	r25, r31
     3b2:	0c f0       	brlt	.+2      	; 0x3b6 <kilo_start+0x88>
     3b4:	ef c0       	rjmp	.+478    	; 0x594 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3b6:	87 36       	cpi	r24, 0x67	; 103
     3b8:	92 40       	sbci	r25, 0x02	; 2
     3ba:	0c f4       	brge	.+2      	; 0x3be <kilo_start+0x90>
     3bc:	ca c0       	rjmp	.+404    	; 0x552 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3be:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3c0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3c2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3c4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3c6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3c8:	3c 98       	cbi	0x07, 4	; 7
     3ca:	c0 cf       	rjmp	.-128    	; 0x34c <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3cc:	f8 94       	cli
                acomp_off();
     3ce:	80 b7       	in	r24, 0x30	; 48
     3d0:	87 7f       	andi	r24, 0xF7	; 247
     3d2:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3d4:	80 91 7a 00 	lds	r24, 0x007A
     3d8:	8f 77       	andi	r24, 0x7F	; 127
     3da:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3de:	14 b8       	out	0x04, r1	; 4
     3e0:	17 b8       	out	0x07, r1	; 7
     3e2:	1a b8       	out	0x0a, r1	; 10
     3e4:	15 b8       	out	0x05, r1	; 5
     3e6:	18 b8       	out	0x08, r1	; 8
     3e8:	1b b8       	out	0x0b, r1	; 11
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	a8 95       	wdr
     3f0:	d0 92 60 00 	sts	0x0060, r13
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     3fa:	80 91 60 00 	lds	r24, 0x0060
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     404:	93 b7       	in	r25, 0x33	; 51
     406:	91 7f       	andi	r25, 0xF1	; 241
     408:	94 60       	ori	r25, 0x04	; 4
     40a:	93 bf       	out	0x33, r25	; 51
                cli();
     40c:	f8 94       	cli
                sleep_enable();
     40e:	83 b7       	in	r24, 0x33	; 51
     410:	81 60       	ori	r24, 0x01	; 1
     412:	83 bf       	out	0x33, r24	; 51
                sei();
     414:	78 94       	sei
                sleep_cpu();
     416:	88 95       	sleep
                sleep_disable();
     418:	83 b7       	in	r24, 0x33	; 51
     41a:	8e 7f       	andi	r24, 0xFE	; 254
     41c:	83 bf       	out	0x33, r24	; 51
                sei();
     41e:	78 94       	sei
                rx_busy = 0;
     420:	10 92 45 01 	sts	0x0145, r1
                ports_on();
     424:	52 9a       	sbi	0x0a, 2	; 10
     426:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     428:	80 91 7a 00 	lds	r24, 0x007A
     42c:	80 68       	ori	r24, 0x80	; 128
     42e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     432:	87 e5       	ldi	r24, 0x57	; 87
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <kilo_start+0x108>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <kilo_start+0x10e>
     43c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     43e:	80 b7       	in	r24, 0x30	; 48
     440:	88 61       	ori	r24, 0x18	; 24
     442:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     444:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     446:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     448:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     44a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     44c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     44e:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     450:	ef e1       	ldi	r30, 0x1F	; 31
     452:	fe e4       	ldi	r31, 0x4E	; 78
     454:	31 97       	sbiw	r30, 0x01	; 1
     456:	f1 f7       	brne	.-4      	; 0x454 <kilo_start+0x126>
     458:	00 c0       	rjmp	.+0      	; 0x45a <kilo_start+0x12c>
     45a:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     45c:	80 91 45 01 	lds	r24, 0x0145
     460:	81 11       	cpse	r24, r1
     462:	81 c0       	rjmp	.+258    	; 0x566 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     464:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     466:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     468:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     46a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     46c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     46e:	3c 98       	cbi	0x07, 4	; 7
     470:	6d cf       	rjmp	.-294    	; 0x34c <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     472:	80 91 0f 01 	lds	r24, 0x010F
     476:	81 11       	cpse	r24, r1
     478:	41 c0       	rjmp	.+130    	; 0x4fc <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     47a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     47e:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     482:	10 92 10 01 	sts	0x0110, r1
     486:	62 cf       	rjmp	.-316    	; 0x34c <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     488:	48 99       	sbic	0x09, 0	; 9
     48a:	ec cf       	rjmp	.-40     	; 0x464 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     48c:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     48e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     490:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     492:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     494:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     496:	3c 98       	cbi	0x07, 4	; 7
     498:	8f ec       	ldi	r24, 0xCF	; 207
     49a:	97 e0       	ldi	r25, 0x07	; 7
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <kilo_start+0x16e>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <kilo_start+0x174>
     4a2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4a4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4a6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4a8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4aa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4ac:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4ae:	3c 98       	cbi	0x07, 4	; 7
     4b0:	9f ef       	ldi	r25, 0xFF	; 255
     4b2:	e1 ee       	ldi	r30, 0xE1	; 225
     4b4:	f4 e0       	ldi	r31, 0x04	; 4
     4b6:	91 50       	subi	r25, 0x01	; 1
     4b8:	e0 40       	sbci	r30, 0x00	; 0
     4ba:	f0 40       	sbci	r31, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <kilo_start+0x188>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <kilo_start+0x192>
     4c0:	00 00       	nop
     4c2:	44 cf       	rjmp	.-376    	; 0x34c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4c4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4c6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4c8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4ca:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4cc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4ce:	3c 98       	cbi	0x07, 4	; 7
     4d0:	ef ec       	ldi	r30, 0xCF	; 207
     4d2:	f7 e0       	ldi	r31, 0x07	; 7
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <kilo_start+0x1a6>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <kilo_start+0x1ac>
     4da:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4dc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4de:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4e4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4e6:	3c 98       	cbi	0x07, 4	; 7
     4e8:	ff ef       	ldi	r31, 0xFF	; 255
     4ea:	21 ee       	ldi	r18, 0xE1	; 225
     4ec:	84 e0       	ldi	r24, 0x04	; 4
     4ee:	f1 50       	subi	r31, 0x01	; 1
     4f0:	20 40       	sbci	r18, 0x00	; 0
     4f2:	80 40       	sbci	r24, 0x00	; 0
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <kilo_start+0x1c0>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <kilo_start+0x1ca>
     4f8:	00 00       	nop
     4fa:	28 cf       	rjmp	.-432    	; 0x34c <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4fc:	90 91 0f 01 	lds	r25, 0x010F
     500:	80 91 10 01 	lds	r24, 0x0110
     504:	98 17       	cp	r25, r24
     506:	09 f4       	brne	.+2      	; 0x50a <kilo_start+0x1dc>
     508:	21 cf       	rjmp	.-446    	; 0x34c <kilo_start+0x1e>
                        prev_motion = cur_motion;
     50a:	80 91 0f 01 	lds	r24, 0x010F
     50e:	80 93 10 01 	sts	0x0110, r24
                        if (cur_motion == MOVE_LEFT) {
     512:	80 91 0f 01 	lds	r24, 0x010F
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	09 f4       	brne	.+2      	; 0x51c <kilo_start+0x1ee>
     51a:	50 c0       	rjmp	.+160    	; 0x5bc <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     51c:	80 91 0f 01 	lds	r24, 0x010F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     520:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     524:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	d9 f1       	breq	.+118    	; 0x5a2 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     52c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     530:	90 92 b4 00 	sts	0x00B4, r9
     534:	8f e2       	ldi	r24, 0x2F	; 47
     536:	95 e7       	ldi	r25, 0x75	; 117
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <kilo_start+0x20a>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <kilo_start+0x210>
     53e:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     540:	80 91 7a 01 	lds	r24, 0x017A
     544:	90 91 79 01 	lds	r25, 0x0179
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     548:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     54c:	80 93 b4 00 	sts	0x00B4, r24
     550:	fd ce       	rjmp	.-518    	; 0x34c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     552:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     554:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     556:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     558:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     55a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     55c:	3c 98       	cbi	0x07, 4	; 7
     55e:	f6 ce       	rjmp	.-532    	; 0x34c <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     560:	f3 01       	movw	r30, r6
     562:	09 95       	icall
     564:	01 cf       	rjmp	.-510    	; 0x368 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     566:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     568:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     56a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     56c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     56e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     570:	3c 98       	cbi	0x07, 4	; 7
     572:	ff ef       	ldi	r31, 0xFF	; 255
     574:	20 e7       	ldi	r18, 0x70	; 112
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	f1 50       	subi	r31, 0x01	; 1
     57a:	20 40       	sbci	r18, 0x00	; 0
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <kilo_start+0x24a>
     580:	00 c0       	rjmp	.+0      	; 0x582 <kilo_start+0x254>
     582:	00 00       	nop
     584:	6f cf       	rjmp	.-290    	; 0x464 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     586:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     588:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     58a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     58c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     58e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     590:	3c 98       	cbi	0x07, 4	; 7
     592:	dc ce       	rjmp	.-584    	; 0x34c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     594:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     596:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     598:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     59a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     59c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     59e:	3c 9a       	sbi	0x07, 4	; 7
     5a0:	d5 ce       	rjmp	.-598    	; 0x34c <kilo_start+0x1e>
     5a2:	ef e2       	ldi	r30, 0x2F	; 47
     5a4:	f5 e7       	ldi	r31, 0x75	; 117
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <kilo_start+0x278>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <kilo_start+0x27e>
     5ac:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5ae:	80 91 67 01 	lds	r24, 0x0167
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5b2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5b6:	80 93 b4 00 	sts	0x00B4, r24
     5ba:	c8 ce       	rjmp	.-624    	; 0x34c <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5bc:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5c0:	10 92 b4 00 	sts	0x00B4, r1
     5c4:	8f e2       	ldi	r24, 0x2F	; 47
     5c6:	95 e7       	ldi	r25, 0x75	; 117
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <kilo_start+0x29a>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <kilo_start+0x2a0>
     5ce:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5d0:	80 91 7b 01 	lds	r24, 0x017B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5d8:	10 92 b4 00 	sts	0x00B4, r1
     5dc:	b7 ce       	rjmp	.-658    	; 0x34c <kilo_start+0x1e>

000005de <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5de:	07 c0       	rjmp	.+14     	; 0x5ee <delay+0x10>
     5e0:	ef ec       	ldi	r30, 0xCF	; 207
     5e2:	f7 e0       	ldi	r31, 0x07	; 7
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <delay+0x6>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <delay+0xc>
     5ea:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5ec:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	b9 f7       	brne	.-18     	; 0x5e0 <delay+0x2>
     5f2:	08 95       	ret

000005f4 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5f8:	60 93 b4 00 	sts	0x00B4, r22
     5fc:	08 95       	ret

000005fe <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     604:	80 93 b4 00 	sts	0x00B4, r24
     608:	8f e0       	ldi	r24, 0x0F	; 15
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	ef ec       	ldi	r30, 0xCF	; 207
     60e:	f7 e0       	ldi	r31, 0x07	; 7
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <spinup_motors+0x12>
     614:	00 c0       	rjmp	.+0      	; 0x616 <spinup_motors+0x18>
     616:	00 00       	nop
     618:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     61a:	c1 f7       	brne	.-16     	; 0x60c <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     61c:	08 95       	ret

0000061e <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     61e:	80 91 45 01 	lds	r24, 0x0145
     622:	81 11       	cpse	r24, r1
     624:	1e c0       	rjmp	.+60     	; 0x662 <get_ambientlight+0x44>
        cli();
     626:	f8 94       	cli
        adc_setup_conversion(7);
     628:	87 e0       	ldi	r24, 0x07	; 7
     62a:	80 93 7c 00 	sts	0x007C, r24
     62e:	83 e8       	ldi	r24, 0x83	; 131
     630:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     634:	80 91 7a 00 	lds	r24, 0x007A
     638:	80 64       	ori	r24, 0x40	; 64
     63a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     63e:	80 91 7a 00 	lds	r24, 0x007A
     642:	86 fd       	sbrc	r24, 6
     644:	fc cf       	rjmp	.-8      	; 0x63e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     646:	80 91 78 00 	lds	r24, 0x0078
     64a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     64e:	10 92 7c 00 	sts	0x007C, r1
     652:	23 ea       	ldi	r18, 0xA3	; 163
     654:	20 93 7a 00 	sts	0x007A, r18
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     65e:	78 94       	sei
     660:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     666:	08 95       	ret

00000668 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     668:	80 91 45 01 	lds	r24, 0x0145
     66c:	81 11       	cpse	r24, r1
     66e:	1e c0       	rjmp	.+60     	; 0x6ac <get_temperature+0x44>
        cli();
     670:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     672:	88 ec       	ldi	r24, 0xC8	; 200
     674:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     678:	87 e8       	ldi	r24, 0x87	; 135
     67a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     67e:	80 91 7a 00 	lds	r24, 0x007A
     682:	80 64       	ori	r24, 0x40	; 64
     684:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     688:	80 91 7a 00 	lds	r24, 0x007A
     68c:	86 fd       	sbrc	r24, 6
     68e:	fc cf       	rjmp	.-8      	; 0x688 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     690:	80 91 78 00 	lds	r24, 0x0078
     694:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     698:	10 92 7c 00 	sts	0x007C, r1
     69c:	23 ea       	ldi	r18, 0xA3	; 163
     69e:	20 93 7a 00 	sts	0x007A, r18
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6a8:	78 94       	sei
     6aa:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6b0:	08 95       	ret

000006b2 <rand_hard>:

uint8_t rand_hard() {
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	e0 e0       	ldi	r30, 0x00	; 0
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6be:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6c0:	03 ea       	ldi	r16, 0xA3	; 163
     6c2:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6c4:	d6 e0       	ldi	r29, 0x06	; 6
     6c6:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6c8:	a1 e0       	ldi	r26, 0x01	; 1
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6cc:	60 e8       	ldi	r22, 0x80	; 128
     6ce:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6d0:	f8 94       	cli
            adc_setup_conversion(6);
     6d2:	d0 93 7c 00 	sts	0x007C, r29
     6d6:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6da:	90 91 7a 00 	lds	r25, 0x007A
     6de:	90 64       	ori	r25, 0x40	; 64
     6e0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6e4:	90 91 7a 00 	lds	r25, 0x007A
     6e8:	96 fd       	sbrc	r25, 6
     6ea:	fc cf       	rjmp	.-8      	; 0x6e4 <rand_hard+0x32>
            a = ADCW&0x1;
     6ec:	20 91 78 00 	lds	r18, 0x0078
     6f0:	30 91 79 00 	lds	r19, 0x0079
     6f4:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     6f6:	90 91 7a 00 	lds	r25, 0x007A
     6fa:	90 64       	ori	r25, 0x40	; 64
     6fc:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     700:	90 91 7a 00 	lds	r25, 0x007A
     704:	96 fd       	sbrc	r25, 6
     706:	fc cf       	rjmp	.-8      	; 0x700 <rand_hard+0x4e>
            b = ADCW&0x1;
     708:	40 91 78 00 	lds	r20, 0x0078
     70c:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     710:	10 92 7c 00 	sts	0x007C, r1
     714:	00 93 7a 00 	sts	0x007A, r16
     718:	10 93 7b 00 	sts	0x007B, r17
            sei();
     71c:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     71e:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     720:	24 13       	cpse	r18, r20
     722:	03 c0       	rjmp	.+6      	; 0x72a <rand_hard+0x78>
     724:	61 50       	subi	r22, 0x01	; 1
     726:	71 09       	sbc	r23, r1
     728:	99 f6       	brne	.-90     	; 0x6d0 <rand_hard+0x1e>
        if (a)
     72a:	22 23       	and	r18, r18
     72c:	39 f0       	breq	.+14     	; 0x73c <rand_hard+0x8a>
            num |= (1<<i);
     72e:	9d 01       	movw	r18, r26
     730:	0e 2e       	mov	r0, r30
     732:	01 c0       	rjmp	.+2      	; 0x736 <rand_hard+0x84>
     734:	22 0f       	add	r18, r18
     736:	0a 94       	dec	r0
     738:	ea f7       	brpl	.-6      	; 0x734 <rand_hard+0x82>
     73a:	82 2b       	or	r24, r18
     73c:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     73e:	e8 30       	cpi	r30, 0x08	; 8
     740:	f1 05       	cpc	r31, r1
     742:	09 f0       	breq	.+2      	; 0x746 <rand_hard+0x94>
     744:	c3 cf       	rjmp	.-122    	; 0x6cc <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     750:	80 91 00 01 	lds	r24, 0x0100
     754:	98 2f       	mov	r25, r24
     756:	99 0f       	add	r25, r25
     758:	99 0f       	add	r25, r25
     75a:	99 0f       	add	r25, r25
     75c:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     75e:	90 91 0e 01 	lds	r25, 0x010E
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	29 0f       	add	r18, r25
     766:	20 93 0e 01 	sts	0x010E, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     76a:	28 2f       	mov	r18, r24
     76c:	22 95       	swap	r18
     76e:	26 95       	lsr	r18
     770:	27 70       	andi	r18, 0x07	; 7
     772:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     774:	96 95       	lsr	r25
     776:	96 95       	lsr	r25
     778:	89 27       	eor	r24, r25
     77a:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     77e:	08 95       	ret

00000780 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     780:	80 93 00 01 	sts	0x0100, r24
     784:	08 95       	ret

00000786 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     786:	80 91 45 01 	lds	r24, 0x0145
     78a:	81 11       	cpse	r24, r1
     78c:	16 c0       	rjmp	.+44     	; 0x7ba <get_voltage+0x34>
        cli();                                    // disable interrupts
     78e:	f8 94       	cli
        adc_setup_conversion(6);
     790:	86 e0       	ldi	r24, 0x06	; 6
     792:	80 93 7c 00 	sts	0x007C, r24
     796:	83 e8       	ldi	r24, 0x83	; 131
     798:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     79c:	80 91 7a 00 	lds	r24, 0x007A
     7a0:	80 64       	ori	r24, 0x40	; 64
     7a2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7a6:	80 91 7a 00 	lds	r24, 0x007A
     7aa:	86 fd       	sbrc	r24, 6
     7ac:	fc cf       	rjmp	.-8      	; 0x7a6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7ae:	80 91 78 00 	lds	r24, 0x0078
     7b2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7b6:	78 94       	sei
     7b8:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7be:	08 95       	ret

000007c0 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7c0:	2f 92       	push	r2
     7c2:	3f 92       	push	r3
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <estimate_distance+0x26>
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <estimate_distance+0x28>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <estimate_distance+0x2a>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7f0:	dc 01       	movw	r26, r24
     7f2:	12 96       	adiw	r26, 0x02	; 2
     7f4:	0d 90       	ld	r0, X+
     7f6:	bc 91       	ld	r27, X
     7f8:	a0 2d       	mov	r26, r0
     7fa:	be 83       	std	Y+6, r27	; 0x06
     7fc:	ad 83       	std	Y+5, r26	; 0x05
     7fe:	a4 38       	cpi	r26, 0x84	; 132
     800:	e3 e0       	ldi	r30, 0x03	; 3
     802:	be 07       	cpc	r27, r30
     804:	0c f0       	brlt	.+2      	; 0x808 <estimate_distance+0x48>
     806:	c9 c0       	rjmp	.+402    	; 0x99a <__stack+0x9b>
        if (dist->high_gain > kilo_irhigh[0]) {
     808:	80 91 1f 01 	lds	r24, 0x011F
     80c:	90 91 20 01 	lds	r25, 0x0120
     810:	8a 17       	cp	r24, r26
     812:	9b 07       	cpc	r25, r27
     814:	08 f4       	brcc	.+2      	; 0x818 <estimate_distance+0x58>
     816:	37 c1       	rjmp	.+622    	; 0xa86 <__stack+0x187>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     818:	00 91 21 01 	lds	r16, 0x0121
     81c:	10 91 22 01 	lds	r17, 0x0122
     820:	0a 17       	cp	r16, r26
     822:	1b 07       	cpc	r17, r27
     824:	08 f4       	brcc	.+2      	; 0x828 <estimate_distance+0x68>
     826:	2f c2       	rjmp	.+1118   	; 0xc86 <__stack+0x387>
     828:	00 91 23 01 	lds	r16, 0x0123
     82c:	10 91 24 01 	lds	r17, 0x0124
     830:	0a 17       	cp	r16, r26
     832:	1b 07       	cpc	r17, r27
     834:	08 f4       	brcc	.+2      	; 0x838 <estimate_distance+0x78>
     836:	2f c2       	rjmp	.+1118   	; 0xc96 <__stack+0x397>
     838:	00 91 25 01 	lds	r16, 0x0125
     83c:	10 91 26 01 	lds	r17, 0x0126
     840:	0a 17       	cp	r16, r26
     842:	1b 07       	cpc	r17, r27
     844:	08 f4       	brcc	.+2      	; 0x848 <estimate_distance+0x88>
     846:	2f c2       	rjmp	.+1118   	; 0xca6 <__stack+0x3a7>
     848:	00 91 27 01 	lds	r16, 0x0127
     84c:	10 91 28 01 	lds	r17, 0x0128
     850:	0a 17       	cp	r16, r26
     852:	1b 07       	cpc	r17, r27
     854:	08 f4       	brcc	.+2      	; 0x858 <estimate_distance+0x98>
     856:	2f c2       	rjmp	.+1118   	; 0xcb6 <__stack+0x3b7>
     858:	00 91 29 01 	lds	r16, 0x0129
     85c:	10 91 2a 01 	lds	r17, 0x012A
     860:	0a 17       	cp	r16, r26
     862:	1b 07       	cpc	r17, r27
     864:	08 f4       	brcc	.+2      	; 0x868 <estimate_distance+0xa8>
     866:	ef c1       	rjmp	.+990    	; 0xc46 <__stack+0x347>
     868:	00 91 2b 01 	lds	r16, 0x012B
     86c:	10 91 2c 01 	lds	r17, 0x012C
     870:	0a 17       	cp	r16, r26
     872:	1b 07       	cpc	r17, r27
     874:	08 f4       	brcc	.+2      	; 0x878 <estimate_distance+0xb8>
     876:	27 c2       	rjmp	.+1102   	; 0xcc6 <__stack+0x3c7>
     878:	00 91 2d 01 	lds	r16, 0x012D
     87c:	10 91 2e 01 	lds	r17, 0x012E
     880:	0a 17       	cp	r16, r26
     882:	1b 07       	cpc	r17, r27
     884:	08 f4       	brcc	.+2      	; 0x888 <estimate_distance+0xc8>
     886:	27 c2       	rjmp	.+1102   	; 0xcd6 <__stack+0x3d7>
     888:	00 91 2f 01 	lds	r16, 0x012F
     88c:	10 91 30 01 	lds	r17, 0x0130
     890:	0a 17       	cp	r16, r26
     892:	1b 07       	cpc	r17, r27
     894:	08 f4       	brcc	.+2      	; 0x898 <estimate_distance+0xd8>
     896:	27 c2       	rjmp	.+1102   	; 0xce6 <__stack+0x3e7>
     898:	00 91 31 01 	lds	r16, 0x0131
     89c:	10 91 32 01 	lds	r17, 0x0132
     8a0:	0a 17       	cp	r16, r26
     8a2:	1b 07       	cpc	r17, r27
     8a4:	08 f4       	brcc	.+2      	; 0x8a8 <estimate_distance+0xe8>
     8a6:	27 c2       	rjmp	.+1102   	; 0xcf6 <__stack+0x3f7>
     8a8:	00 91 33 01 	lds	r16, 0x0133
     8ac:	10 91 34 01 	lds	r17, 0x0134
     8b0:	0a 17       	cp	r16, r26
     8b2:	1b 07       	cpc	r17, r27
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <estimate_distance+0xf8>
     8b6:	27 c2       	rjmp	.+1102   	; 0xd06 <__stack+0x407>
     8b8:	00 91 35 01 	lds	r16, 0x0135
     8bc:	10 91 36 01 	lds	r17, 0x0136
     8c0:	0a 17       	cp	r16, r26
     8c2:	1b 07       	cpc	r17, r27
     8c4:	08 f4       	brcc	.+2      	; 0x8c8 <estimate_distance+0x108>
     8c6:	23 c2       	rjmp	.+1094   	; 0xd0e <__stack+0x40f>
     8c8:	00 91 37 01 	lds	r16, 0x0137
     8cc:	10 91 38 01 	lds	r17, 0x0138
     8d0:	0a 17       	cp	r16, r26
     8d2:	1b 07       	cpc	r17, r27
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <estimate_distance+0x118>
     8d6:	23 c2       	rjmp	.+1094   	; 0xd1e <__stack+0x41f>
     8d8:	00 91 39 01 	lds	r16, 0x0139
     8dc:	10 91 3a 01 	lds	r17, 0x013A
     8e0:	0a 17       	cp	r16, r26
     8e2:	1b 07       	cpc	r17, r27
     8e4:	08 f4       	brcc	.+2      	; 0x8e8 <estimate_distance+0x128>
     8e6:	23 c2       	rjmp	.+1094   	; 0xd2e <__stack+0x42f>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 ed       	ldi	r26, 0xD0	; 208
     8ee:	b0 e4       	ldi	r27, 0x40	; 64
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	ab 83       	std	Y+3, r26	; 0x03
     8f6:	bc 83       	std	Y+4, r27	; 0x04
     8f8:	4c e0       	ldi	r20, 0x0C	; 12
     8fa:	e4 2e       	mov	r14, r20
     8fc:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8fe:	f7 01       	movw	r30, r14
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	e1 5e       	subi	r30, 0xE1	; 225
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	b8 01       	movw	r22, r16
     90e:	68 1b       	sub	r22, r24
     910:	79 0b       	sbc	r23, r25
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__addsf3>
     922:	6b 01       	movw	r12, r22
     924:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     926:	ad 81       	ldd	r26, Y+5	; 0x05
     928:	be 81       	ldd	r27, Y+6	; 0x06
     92a:	bd 01       	movw	r22, r26
     92c:	bb 0f       	add	r27, r27
     92e:	88 0b       	sbc	r24, r24
     930:	99 0b       	sbc	r25, r25
     932:	0e 94 6f 0b 	call	0x16de	; 0x16de <__floatsisf>
     936:	4b 01       	movw	r8, r22
     938:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     93a:	b8 01       	movw	r22, r16
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     944:	2b 01       	movw	r4, r22
     946:	3c 01       	movw	r6, r24
     948:	29 81       	ldd	r18, Y+1	; 0x01
     94a:	3a 81       	ldd	r19, Y+2	; 0x02
     94c:	4b 81       	ldd	r20, Y+3	; 0x03
     94e:	5c 81       	ldd	r21, Y+4	; 0x04
     950:	c7 01       	movw	r24, r14
     952:	b6 01       	movw	r22, r12
     954:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
     958:	9b 01       	movw	r18, r22
     95a:	ac 01       	movw	r20, r24
     95c:	c3 01       	movw	r24, r6
     95e:	b2 01       	movw	r22, r4
     960:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__subsf3>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     968:	c5 01       	movw	r24, r10
     96a:	b4 01       	movw	r22, r8
     96c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__subsf3>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e2       	ldi	r20, 0x20	; 32
     976:	51 e4       	ldi	r21, 0x41	; 65
     978:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
            b=((int)((int)b/(int)slope));
     97c:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixsfsi>
     980:	8b 01       	movw	r16, r22
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixsfsi>
     98a:	ab 01       	movw	r20, r22
     98c:	bc 01       	movw	r22, r24
     98e:	c8 01       	movw	r24, r16
     990:	ba 01       	movw	r22, r20
     992:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divmodhi4>
            dist_high=b;
     996:	16 2f       	mov	r17, r22
     998:	77 c0       	rjmp	.+238    	; 0xa88 <__stack+0x189>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     99a:	dc 01       	movw	r26, r24
     99c:	cd 90       	ld	r12, X+
     99e:	dc 90       	ld	r13, X
     9a0:	80 91 46 01 	lds	r24, 0x0146
     9a4:	90 91 47 01 	lds	r25, 0x0147
     9a8:	8c 15       	cp	r24, r12
     9aa:	9d 05       	cpc	r25, r13
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <__stack+0xb1>
     9ae:	8c c0       	rjmp	.+280    	; 0xac8 <__stack+0x1c9>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9b0:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9b2:	e0 90 48 01 	lds	r14, 0x0148
     9b6:	f0 90 49 01 	lds	r15, 0x0149
     9ba:	ec 14       	cp	r14, r12
     9bc:	fd 04       	cpc	r15, r13
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	5e c1       	rjmp	.+700    	; 0xc7e <__stack+0x37f>
     9c2:	e0 90 4a 01 	lds	r14, 0x014A
     9c6:	f0 90 4b 01 	lds	r15, 0x014B
     9ca:	ec 14       	cp	r14, r12
     9cc:	fd 04       	cpc	r15, r13
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	5e c1       	rjmp	.+700    	; 0xc8e <__stack+0x38f>
     9d2:	e0 90 4c 01 	lds	r14, 0x014C
     9d6:	f0 90 4d 01 	lds	r15, 0x014D
     9da:	ec 14       	cp	r14, r12
     9dc:	fd 04       	cpc	r15, r13
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	5e c1       	rjmp	.+700    	; 0xc9e <__stack+0x39f>
     9e2:	e0 90 4e 01 	lds	r14, 0x014E
     9e6:	f0 90 4f 01 	lds	r15, 0x014F
     9ea:	ec 14       	cp	r14, r12
     9ec:	fd 04       	cpc	r15, r13
     9ee:	08 f4       	brcc	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	5e c1       	rjmp	.+700    	; 0xcae <__stack+0x3af>
     9f2:	e0 90 50 01 	lds	r14, 0x0150
     9f6:	f0 90 51 01 	lds	r15, 0x0151
     9fa:	ec 14       	cp	r14, r12
     9fc:	fd 04       	cpc	r15, r13
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <__stack+0x103>
     a00:	c3 c0       	rjmp	.+390    	; 0xb88 <__stack+0x289>
     a02:	e0 90 52 01 	lds	r14, 0x0152
     a06:	f0 90 53 01 	lds	r15, 0x0153
     a0a:	ec 14       	cp	r14, r12
     a0c:	fd 04       	cpc	r15, r13
     a0e:	08 f4       	brcc	.+2      	; 0xa12 <__stack+0x113>
     a10:	56 c1       	rjmp	.+684    	; 0xcbe <__stack+0x3bf>
     a12:	e0 90 54 01 	lds	r14, 0x0154
     a16:	f0 90 55 01 	lds	r15, 0x0155
     a1a:	ec 14       	cp	r14, r12
     a1c:	fd 04       	cpc	r15, r13
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <__stack+0x123>
     a20:	56 c1       	rjmp	.+684    	; 0xcce <__stack+0x3cf>
     a22:	e0 90 56 01 	lds	r14, 0x0156
     a26:	f0 90 57 01 	lds	r15, 0x0157
     a2a:	ec 14       	cp	r14, r12
     a2c:	fd 04       	cpc	r15, r13
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <__stack+0x133>
     a30:	56 c1       	rjmp	.+684    	; 0xcde <__stack+0x3df>
     a32:	e0 90 58 01 	lds	r14, 0x0158
     a36:	f0 90 59 01 	lds	r15, 0x0159
     a3a:	ec 14       	cp	r14, r12
     a3c:	fd 04       	cpc	r15, r13
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <__stack+0x143>
     a40:	56 c1       	rjmp	.+684    	; 0xcee <__stack+0x3ef>
     a42:	e0 90 5a 01 	lds	r14, 0x015A
     a46:	f0 90 5b 01 	lds	r15, 0x015B
     a4a:	ec 14       	cp	r14, r12
     a4c:	fd 04       	cpc	r15, r13
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <__stack+0x153>
     a50:	56 c1       	rjmp	.+684    	; 0xcfe <__stack+0x3ff>
     a52:	e0 90 5c 01 	lds	r14, 0x015C
     a56:	f0 90 5d 01 	lds	r15, 0x015D
     a5a:	ec 14       	cp	r14, r12
     a5c:	fd 04       	cpc	r15, r13
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <__stack+0x163>
     a60:	5a c1       	rjmp	.+692    	; 0xd16 <__stack+0x417>
     a62:	e0 90 5e 01 	lds	r14, 0x015E
     a66:	f0 90 5f 01 	lds	r15, 0x015F
     a6a:	ec 14       	cp	r14, r12
     a6c:	fd 04       	cpc	r15, r13
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <__stack+0x173>
     a70:	5a c1       	rjmp	.+692    	; 0xd26 <__stack+0x427>
     a72:	e0 90 60 01 	lds	r14, 0x0160
     a76:	f0 90 61 01 	lds	r15, 0x0161
     a7a:	ec 14       	cp	r14, r12
     a7c:	fd 04       	cpc	r15, r13
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <__stack+0x183>
     a80:	5a c1       	rjmp	.+692    	; 0xd36 <__stack+0x437>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a82:	0a e5       	ldi	r16, 0x5A	; 90
     a84:	31 c0       	rjmp	.+98     	; 0xae8 <__stack+0x1e9>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a86:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a88:	ed 81       	ldd	r30, Y+5	; 0x05
     a8a:	fe 81       	ldd	r31, Y+6	; 0x06
     a8c:	ed 3b       	cpi	r30, 0xBD	; 189
     a8e:	f2 40       	sbci	r31, 0x02	; 2
     a90:	fc f4       	brge	.+62     	; 0xad0 <__stack+0x1d1>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     a92:	81 e2       	ldi	r24, 0x21	; 33
     a94:	81 0f       	add	r24, r17
    }
}
     a96:	26 96       	adiw	r28, 0x06	; 6
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	7f 90       	pop	r7
     abc:	6f 90       	pop	r6
     abe:	5f 90       	pop	r5
     ac0:	4f 90       	pop	r4
     ac2:	3f 90       	pop	r3
     ac4:	2f 90       	pop	r2
     ac6:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     ac8:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     aca:	81 e2       	ldi	r24, 0x21	; 33
     acc:	80 0f       	add	r24, r16
     ace:	e3 cf       	rjmp	.-58     	; 0xa96 <__stack+0x197>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ad0:	d1 01       	movw	r26, r2
     ad2:	cd 90       	ld	r12, X+
     ad4:	dc 90       	ld	r13, X
     ad6:	80 91 46 01 	lds	r24, 0x0146
     ada:	90 91 47 01 	lds	r25, 0x0147
     ade:	8c 15       	cp	r24, r12
     ae0:	9d 05       	cpc	r25, r13
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	66 cf       	rjmp	.-308    	; 0x9b2 <__stack+0xb3>
            dist_low=0;
     ae6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     ae8:	1f 3f       	cpi	r17, 0xFF	; 255
     aea:	79 f3       	breq	.-34     	; 0xaca <__stack+0x1cb>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     aec:	ed 81       	ldd	r30, Y+5	; 0x05
     aee:	fe 81       	ldd	r31, Y+6	; 0x06
     af0:	bf 01       	movw	r22, r30
     af2:	ff 0f       	add	r31, r31
     af4:	88 0b       	sbc	r24, r24
     af6:	99 0b       	sbc	r25, r25
     af8:	0e 94 6f 0b 	call	0x16de	; 0x16de <__floatsisf>
     afc:	6b 01       	movw	r12, r22
     afe:	7c 01       	movw	r14, r24
     b00:	61 2f       	mov	r22, r17
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     b0c:	4b 01       	movw	r8, r22
     b0e:	5c 01       	movw	r10, r24
     b10:	a7 01       	movw	r20, r14
     b12:	96 01       	movw	r18, r12
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	81 e6       	ldi	r24, 0x61	; 97
     b1a:	94 e4       	ldi	r25, 0x44	; 68
     b1c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__subsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c5 01       	movw	r24, r10
     b26:	b4 01       	movw	r22, r8
     b28:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
     b2c:	4b 01       	movw	r8, r22
     b2e:	5c 01       	movw	r10, r24
     b30:	60 2f       	mov	r22, r16
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     b3c:	2b 01       	movw	r4, r22
     b3e:	3c 01       	movw	r6, r24
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	4f e2       	ldi	r20, 0x2F	; 47
     b46:	54 e4       	ldi	r21, 0x44	; 68
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__subsf3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	c3 01       	movw	r24, r6
     b56:	b2 01       	movw	r22, r4
     b58:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c5 01       	movw	r24, r10
     b62:	b4 01       	movw	r22, r8
     b64:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__addsf3>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	48 e4       	ldi	r20, 0x48	; 72
     b6e:	53 e4       	ldi	r21, 0x43	; 67
     b70:	0e 94 c5 0a 	call	0x158a	; 0x158a <__divsf3>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	44 e0       	ldi	r20, 0x04	; 4
     b7a:	52 e4       	ldi	r21, 0x42	; 66
     b7c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__addsf3>
     b80:	0e 94 3e 0b 	call	0x167c	; 0x167c <__fixunssfsi>
     b84:	86 2f       	mov	r24, r22
     b86:	87 cf       	rjmp	.-242    	; 0xa96 <__stack+0x197>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b88:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	fc 01       	movw	r30, r24
     b94:	ec 5b       	subi	r30, 0xBC	; 188
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	b7 01       	movw	r22, r14
     b9e:	68 1b       	sub	r22, r24
     ba0:	79 0b       	sbc	r23, r25
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
     bae:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__addsf3>
     bb2:	4b 01       	movw	r8, r22
     bb4:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bb6:	b6 01       	movw	r22, r12
     bb8:	dd 0c       	add	r13, r13
     bba:	88 0b       	sbc	r24, r24
     bbc:	99 0b       	sbc	r25, r25
     bbe:	0e 94 6f 0b 	call	0x16de	; 0x16de <__floatsisf>
     bc2:	2b 01       	movw	r4, r22
     bc4:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bc6:	b7 01       	movw	r22, r14
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     bd0:	6b 01       	movw	r12, r22
     bd2:	7c 01       	movw	r14, r24
     bd4:	60 2f       	mov	r22, r16
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	5f e3       	ldi	r21, 0x3F	; 63
     be8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	a9 01       	movw	r20, r18
     bf2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__addsf3>
     bf6:	a5 01       	movw	r20, r10
     bf8:	94 01       	movw	r18, r8
     bfa:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c7 01       	movw	r24, r14
     c04:	b6 01       	movw	r22, r12
     c06:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__subsf3>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c0e:	c3 01       	movw	r24, r6
     c10:	b2 01       	movw	r22, r4
     c12:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__subsf3>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e2       	ldi	r20, 0x20	; 32
     c1c:	51 e4       	ldi	r21, 0x41	; 65
     c1e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c22:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixsfsi>
     c26:	7b 01       	movw	r14, r22
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 37 0b 	call	0x166e	; 0x166e <__fixsfsi>
     c30:	ab 01       	movw	r20, r22
     c32:	bc 01       	movw	r22, r24
     c34:	c7 01       	movw	r24, r14
     c36:	ba 01       	movw	r22, r20
     c38:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divmodhi4>
                dist_low=b;
     c3c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c3e:	6f 3f       	cpi	r22, 0xFF	; 255
     c40:	09 f0       	breq	.+2      	; 0xc44 <__stack+0x345>
     c42:	52 cf       	rjmp	.-348    	; 0xae8 <__stack+0x1e9>
     c44:	26 cf       	rjmp	.-436    	; 0xa92 <__stack+0x193>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c46:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c48:	85 e0       	ldi	r24, 0x05	; 5
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	7c 01       	movw	r14, r24
     c4e:	f1 e0       	ldi	r31, 0x01	; 1
     c50:	ef 1a       	sub	r14, r31
     c52:	f1 08       	sbc	r15, r1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__floatunsisf>
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	5f e3       	ldi	r21, 0x3F	; 63
     c66:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	a9 01       	movw	r20, r18
     c70:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__addsf3>
     c74:	69 83       	std	Y+1, r22	; 0x01
     c76:	7a 83       	std	Y+2, r23	; 0x02
     c78:	8b 83       	std	Y+3, r24	; 0x03
     c7a:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     c7c:	40 ce       	rjmp	.-896    	; 0x8fe <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c7e:	01 e0       	ldi	r16, 0x01	; 1
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	84 cf       	rjmp	.-248    	; 0xb8e <__stack+0x28f>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	df cf       	rjmp	.-66     	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c8e:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	7c cf       	rjmp	.-264    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c96:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	d7 cf       	rjmp	.-82     	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c9e:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	74 cf       	rjmp	.-280    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ca6:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	cf cf       	rjmp	.-98     	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cae:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	6c cf       	rjmp	.-296    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb6:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	c7 cf       	rjmp	.-114    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cbe:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     cc0:	86 e0       	ldi	r24, 0x06	; 6
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	64 cf       	rjmp	.-312    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc6:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cc8:	86 e0       	ldi	r24, 0x06	; 6
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	bf cf       	rjmp	.-130    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cce:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     cd0:	87 e0       	ldi	r24, 0x07	; 7
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	5c cf       	rjmp	.-328    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd6:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cd8:	87 e0       	ldi	r24, 0x07	; 7
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	b7 cf       	rjmp	.-146    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cde:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     ce0:	88 e0       	ldi	r24, 0x08	; 8
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	54 cf       	rjmp	.-344    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     ce8:	88 e0       	ldi	r24, 0x08	; 8
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	af cf       	rjmp	.-162    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cee:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     cf0:	89 e0       	ldi	r24, 0x09	; 9
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	4c cf       	rjmp	.-360    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf6:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     cf8:	89 e0       	ldi	r24, 0x09	; 9
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a7 cf       	rjmp	.-178    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cfe:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d00:	8a e0       	ldi	r24, 0x0A	; 10
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	44 cf       	rjmp	.-376    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d06:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d08:	8a e0       	ldi	r24, 0x0A	; 10
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9f cf       	rjmp	.-194    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0e:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d10:	8b e0       	ldi	r24, 0x0B	; 11
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9b cf       	rjmp	.-202    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d16:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d18:	8b e0       	ldi	r24, 0x0B	; 11
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	38 cf       	rjmp	.-400    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d20:	8c e0       	ldi	r24, 0x0C	; 12
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	93 cf       	rjmp	.-218    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d26:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d28:	8c e0       	ldi	r24, 0x0C	; 12
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	30 cf       	rjmp	.-416    	; 0xb8e <__stack+0x28f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d2e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d30:	8d e0       	ldi	r24, 0x0D	; 13
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	8b cf       	rjmp	.-234    	; 0xc4c <__stack+0x34d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d36:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d38:	8d e0       	ldi	r24, 0x0D	; 13
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	28 cf       	rjmp	.-432    	; 0xb8e <__stack+0x28f>

00000d3e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
    tx_clock += tx_increment;
     d60:	20 91 65 01 	lds	r18, 0x0165
     d64:	30 91 66 01 	lds	r19, 0x0166
     d68:	80 91 63 01 	lds	r24, 0x0163
     d6c:	90 91 64 01 	lds	r25, 0x0164
     d70:	82 0f       	add	r24, r18
     d72:	93 1f       	adc	r25, r19
     d74:	90 93 66 01 	sts	0x0166, r25
     d78:	80 93 65 01 	sts	0x0165, r24
    tx_increment = 0xFF;
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	90 93 64 01 	sts	0x0164, r25
     d84:	80 93 63 01 	sts	0x0163, r24
    OCR0A = tx_increment;
     d88:	8f ef       	ldi	r24, 0xFF	; 255
     d8a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d8c:	80 91 41 01 	lds	r24, 0x0141
     d90:	90 91 42 01 	lds	r25, 0x0142
     d94:	a0 91 43 01 	lds	r26, 0x0143
     d98:	b0 91 44 01 	lds	r27, 0x0144
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	a1 1d       	adc	r26, r1
     da0:	b1 1d       	adc	r27, r1
     da2:	80 93 41 01 	sts	0x0141, r24
     da6:	90 93 42 01 	sts	0x0142, r25
     daa:	a0 93 43 01 	sts	0x0143, r26
     dae:	b0 93 44 01 	sts	0x0144, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     db2:	80 91 45 01 	lds	r24, 0x0145
     db6:	81 11       	cpse	r24, r1
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <__vector_14+0x9a>
     dba:	80 91 74 01 	lds	r24, 0x0174
     dbe:	90 91 75 01 	lds	r25, 0x0175
     dc2:	20 91 65 01 	lds	r18, 0x0165
     dc6:	30 91 66 01 	lds	r19, 0x0166
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	20 f4       	brcc	.+8      	; 0xdd8 <__vector_14+0x9a>
     dd0:	80 91 11 01 	lds	r24, 0x0111
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	89 f0       	breq	.+34     	; 0xdfa <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     dfa:	e0 91 03 01 	lds	r30, 0x0103
     dfe:	f0 91 04 01 	lds	r31, 0x0104
     e02:	09 95       	icall
        if (msg) {
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	41 f3       	breq	.-48     	; 0xdd8 <__vector_14+0x9a>
            if (message_send(msg)) {
     e08:	0e 94 87 09 	call	0x130e	; 0x130e <message_send>
     e0c:	81 11       	cpse	r24, r1
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e10:	0e 94 b4 0c 	call	0x1968	; 0x1968 <rand>
     e14:	99 27       	eor	r25, r25
     e16:	90 93 64 01 	sts	0x0164, r25
     e1a:	80 93 63 01 	sts	0x0163, r24
                OCR0A = tx_increment;
     e1e:	87 bd       	out	0x27, r24	; 39
     e20:	db cf       	rjmp	.-74     	; 0xdd8 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e22:	e0 91 01 01 	lds	r30, 0x0101
     e26:	f0 91 02 01 	lds	r31, 0x0102
     e2a:	09 95       	icall
                tx_clock = 0;
     e2c:	10 92 66 01 	sts	0x0166, r1
     e30:	10 92 65 01 	sts	0x0165, r1
     e34:	d1 cf       	rjmp	.-94     	; 0xdd8 <__vector_14+0x9a>

00000e36 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e36:	80 ff       	sbrs	r24, 0
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <set_color+0x26>
        DDRD |= (1<<5);
     e3a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e3c:	81 ff       	sbrs	r24, 1
     e3e:	11 c0       	rjmp	.+34     	; 0xe62 <set_color+0x2c>
        DDRD |= (1<<4);
     e40:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e42:	82 ff       	sbrs	r24, 2
     e44:	11 c0       	rjmp	.+34     	; 0xe68 <set_color+0x32>
        DDRC |= (1<<3);
     e46:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e48:	83 ff       	sbrs	r24, 3
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <set_color+0x38>
        DDRC |= (1<<2);
     e4c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e4e:	84 ff       	sbrs	r24, 4
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <set_color+0x3e>
        DDRC |= (1<<5);
     e52:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e54:	85 fd       	sbrc	r24, 5
     e56:	11 c0       	rjmp	.+34     	; 0xe7a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e58:	3c 98       	cbi	0x07, 4	; 7
     e5a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e5c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e5e:	81 fd       	sbrc	r24, 1
     e60:	ef cf       	rjmp	.-34     	; 0xe40 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e62:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e64:	82 fd       	sbrc	r24, 2
     e66:	ef cf       	rjmp	.-34     	; 0xe46 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e68:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e6a:	83 fd       	sbrc	r24, 3
     e6c:	ef cf       	rjmp	.-34     	; 0xe4c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e6e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e70:	84 fd       	sbrc	r24, 4
     e72:	ef cf       	rjmp	.-34     	; 0xe52 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e74:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e76:	85 ff       	sbrs	r24, 5
     e78:	ef cf       	rjmp	.-34     	; 0xe58 <set_color+0x22>
        DDRC |= (1<<4);
     e7a:	3c 9a       	sbi	0x07, 4	; 7
     e7c:	08 95       	ret

00000e7e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
    rx_timer_off();
     e8c:	10 92 81 00 	sts	0x0081, r1
     e90:	10 92 85 00 	sts	0x0085, r1
     e94:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 1e 01 	sts	0x011E, r24
    rx_leadingbyte = 1;
     e9e:	80 93 62 01 	sts	0x0162, r24
    rx_busy = 0;
     ea2:	10 92 45 01 	sts	0x0145, r1
    adc_trigger_high_gain();
     ea6:	10 92 7c 00 	sts	0x007C, r1
     eaa:	93 ea       	ldi	r25, 0xA3	; 163
     eac:	90 93 7a 00 	sts	0x007A, r25
     eb0:	80 93 7b 00 	sts	0x007B, r24
}
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	2f 93       	push	r18
     ece:	3f 93       	push	r19
     ed0:	4f 93       	push	r20
     ed2:	5f 93       	push	r21
     ed4:	6f 93       	push	r22
     ed6:	7f 93       	push	r23
     ed8:	8f 93       	push	r24
     eda:	9f 93       	push	r25
     edc:	af 93       	push	r26
     ede:	bf 93       	push	r27
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ee8:	20 91 84 00 	lds	r18, 0x0084
     eec:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	40 93 45 01 	sts	0x0145, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ef6:	80 91 1e 01 	lds	r24, 0x011E
     efa:	88 23       	and	r24, r24
     efc:	a9 f1       	breq	.+106    	; 0xf68 <__vector_23+0xa6>
        rx_timer_on();
     efe:	10 92 85 00 	sts	0x0085, r1
     f02:	10 92 84 00 	sts	0x0084, r1
     f06:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f0a:	10 92 76 01 	sts	0x0176, r1
        rx_leadingbit = 0;
     f0e:	10 92 1e 01 	sts	0x011E, r1
        if (rx_leadingbyte) {
     f12:	80 91 62 01 	lds	r24, 0x0162
     f16:	88 23       	and	r24, r24
     f18:	a1 f0       	breq	.+40     	; 0xf42 <__vector_23+0x80>
            adc_finish_conversion();
     f1a:	80 91 7a 00 	lds	r24, 0x007A
     f1e:	86 fd       	sbrc	r24, 6
     f20:	fc cf       	rjmp	.-8      	; 0xf1a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f22:	80 91 78 00 	lds	r24, 0x0078
     f26:	90 91 79 00 	lds	r25, 0x0079
     f2a:	90 93 40 01 	sts	0x0140, r25
     f2e:	80 93 3f 01 	sts	0x013F, r24
            adc_trigger_low_gain();
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 93 7c 00 	sts	0x007C, r24
     f38:	93 ea       	ldi	r25, 0xA3	; 163
     f3a:	90 93 7a 00 	sts	0x007A, r25
     f3e:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f68:	c9 01       	movw	r24, r18
     f6a:	87 58       	subi	r24, 0x87	; 135
     f6c:	91 09       	sbc	r25, r1
     f6e:	84 37       	cpi	r24, 0x74	; 116
     f70:	99 40       	sbci	r25, 0x09	; 9
     f72:	08 f0       	brcs	.+2      	; 0xf76 <__vector_23+0xb4>
     f74:	52 c0       	rjmp	.+164    	; 0x101a <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f76:	26 58       	subi	r18, 0x86	; 134
     f78:	31 09       	sbc	r19, r1
     f7a:	a4 ef       	ldi	r26, 0xF4	; 244
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	0e 94 35 0a 	call	0x146a	; 0x146a <__umulhisi3>
     f82:	aa 27       	eor	r26, r26
     f84:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	91 05       	cpc	r25, r1
     f8a:	a1 05       	cpc	r26, r1
     f8c:	b1 05       	cpc	r27, r1
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <__vector_23+0xd0>
     f90:	7b c0       	rjmp	.+246    	; 0x1088 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f92:	40 93 1e 01 	sts	0x011E, r20
                if (rx_leadingbyte) {
     f96:	80 91 62 01 	lds	r24, 0x0162
     f9a:	81 11       	cpse	r24, r1
     f9c:	52 c0       	rjmp	.+164    	; 0x1042 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f9e:	80 91 3c 01 	lds	r24, 0x013C
     fa2:	e8 2f       	mov	r30, r24
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	e8 59       	subi	r30, 0x98	; 152
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	90 91 76 01 	lds	r25, 0x0176
     fae:	90 83       	st	Z, r25
                    rx_byteindex++;
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 3c 01 	sts	0x013C, r24
                    if (rx_byteindex == sizeof(message_t)) {
     fb6:	8c 30       	cpi	r24, 0x0C	; 12
     fb8:	21 f6       	brne	.-120    	; 0xf42 <__vector_23+0x80>
                        rx_timer_off();
     fba:	10 92 81 00 	sts	0x0081, r1
     fbe:	10 92 85 00 	sts	0x0085, r1
     fc2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fc6:	40 93 62 01 	sts	0x0162, r20
                        rx_busy = 0;
     fca:	10 92 45 01 	sts	0x0145, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     fce:	c0 91 72 01 	lds	r28, 0x0172
     fd2:	d0 91 73 01 	lds	r29, 0x0173
     fd6:	88 e6       	ldi	r24, 0x68	; 104
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <message_crc>
     fde:	c8 17       	cp	r28, r24
     fe0:	d9 07       	cpc	r29, r25
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <__vector_23+0x124>
     fe4:	ae cf       	rjmp	.-164    	; 0xf42 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fe6:	80 91 71 01 	lds	r24, 0x0171
     fea:	87 ff       	sbrs	r24, 7
     fec:	61 c0       	rjmp	.+194    	; 0x10b0 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fee:	98 e7       	ldi	r25, 0x78	; 120
     ff0:	98 0f       	add	r25, r24
     ff2:	93 30       	cpi	r25, 0x03	; 3
     ff4:	30 f0       	brcs	.+12     	; 0x1002 <__vector_23+0x140>
        motors_off();
     ff6:	53 98       	cbi	0x0a, 3	; 10
     ff8:	23 98       	cbi	0x04, 3	; 4
     ffa:	10 92 b4 00 	sts	0x00B4, r1
     ffe:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	e0 58       	subi	r30, 0x80	; 128
    1008:	f1 09       	sbc	r31, r1
    100a:	eb 30       	cpi	r30, 0x0B	; 11
    100c:	f1 05       	cpc	r31, r1
    100e:	08 f0       	brcs	.+2      	; 0x1012 <__vector_23+0x150>
    1010:	98 cf       	rjmp	.-208    	; 0xf42 <__vector_23+0x80>
    1012:	e5 5c       	subi	r30, 0xC5	; 197
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    101a:	10 92 81 00 	sts	0x0081, r1
    101e:	10 92 85 00 	sts	0x0085, r1
    1022:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1026:	40 93 1e 01 	sts	0x011E, r20
            rx_leadingbyte = 1;
    102a:	40 93 62 01 	sts	0x0162, r20
            rx_busy = 0;
    102e:	10 92 45 01 	sts	0x0145, r1
            adc_trigger_high_gain();
    1032:	10 92 7c 00 	sts	0x007C, r1
    1036:	83 ea       	ldi	r24, 0xA3	; 163
    1038:	80 93 7a 00 	sts	0x007A, r24
    103c:	40 93 7b 00 	sts	0x007B, r20
    1040:	80 cf       	rjmp	.-256    	; 0xf42 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1042:	80 91 7a 00 	lds	r24, 0x007A
    1046:	86 fd       	sbrc	r24, 6
    1048:	fc cf       	rjmp	.-8      	; 0x1042 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    104a:	80 91 78 00 	lds	r24, 0x0078
    104e:	90 91 79 00 	lds	r25, 0x0079
    1052:	90 93 3e 01 	sts	0x013E, r25
    1056:	80 93 3d 01 	sts	0x013D, r24
                    adc_trigger_high_gain();
    105a:	10 92 7c 00 	sts	0x007C, r1
    105e:	83 ea       	ldi	r24, 0xA3	; 163
    1060:	80 93 7a 00 	sts	0x007A, r24
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    106a:	90 91 76 01 	lds	r25, 0x0176
    106e:	99 23       	and	r25, r25
    1070:	d1 f0       	breq	.+52     	; 0x10a6 <__vector_23+0x1e4>
                        rx_timer_off();
    1072:	10 92 81 00 	sts	0x0081, r1
    1076:	10 92 85 00 	sts	0x0085, r1
    107a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    107e:	80 93 62 01 	sts	0x0162, r24
                        rx_busy = 0;
    1082:	10 92 45 01 	sts	0x0145, r1
    1086:	5d cf       	rjmp	.-326    	; 0xf42 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	f9 01       	movw	r30, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <__vector_23+0x1d2>
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <__vector_23+0x1ce>
    1098:	cf 01       	movw	r24, r30
    109a:	90 91 76 01 	lds	r25, 0x0176
    109e:	89 2b       	or	r24, r25
    10a0:	80 93 76 01 	sts	0x0176, r24
    10a4:	4e cf       	rjmp	.-356    	; 0xf42 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10a6:	10 92 62 01 	sts	0x0162, r1
                        rx_byteindex = 0;
    10aa:	10 92 3c 01 	sts	0x013C, r1
    10ae:	49 cf       	rjmp	.-366    	; 0xf42 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10b0:	e0 91 05 01 	lds	r30, 0x0105
    10b4:	f0 91 06 01 	lds	r31, 0x0106
    10b8:	6d e3       	ldi	r22, 0x3D	; 61
    10ba:	71 e0       	ldi	r23, 0x01	; 1
    10bc:	88 e6       	ldi	r24, 0x68	; 104
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	09 95       	icall
    10c2:	3f cf       	rjmp	.-386    	; 0xf42 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10c4:	80 91 68 01 	lds	r24, 0x0168
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	09 f4       	brne	.+2      	; 0x10ce <__vector_23+0x20c>
    10cc:	dd c0       	rjmp	.+442    	; 0x1288 <__vector_23+0x3c6>
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <__vector_23+0x210>
    10d0:	ba c0       	rjmp	.+372    	; 0x1246 <__vector_23+0x384>
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <__vector_23+0x216>
    10d6:	c6 c0       	rjmp	.+396    	; 0x1264 <__vector_23+0x3a2>
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	09 f0       	breq	.+2      	; 0x10de <__vector_23+0x21c>
    10dc:	b1 c0       	rjmp	.+354    	; 0x1240 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10de:	80 91 0f 01 	lds	r24, 0x010F
    10e2:	90 91 6e 01 	lds	r25, 0x016E
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	09 f4       	brne	.+2      	; 0x10ec <__vector_23+0x22a>
    10ea:	e3 c0       	rjmp	.+454    	; 0x12b2 <__vector_23+0x3f0>
    10ec:	80 91 6d 01 	lds	r24, 0x016D
                        prev_motion = MOVE_STOP;
    10f0:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_STRAIGHT;
    10f4:	23 e0       	ldi	r18, 0x03	; 3
    10f6:	20 93 0f 01 	sts	0x010F, r18
                        kilo_straight_left = calibmsg->straight_left;
    10fa:	80 93 79 01 	sts	0x0179, r24
                        kilo_straight_right = calibmsg->straight_right;
    10fe:	90 93 7a 01 	sts	0x017A, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1102:	80 91 11 01 	lds	r24, 0x0111
    1106:	86 30       	cpi	r24, 0x06	; 6
    1108:	09 f4       	brne	.+2      	; 0x110c <__vector_23+0x24a>
    110a:	1b cf       	rjmp	.-458    	; 0xf42 <__vector_23+0x80>
                motors_on();
    110c:	53 9a       	sbi	0x0a, 3	; 10
    110e:	23 9a       	sbi	0x04, 3	; 4
    1110:	10 92 b4 00 	sts	0x00B4, r1
    1114:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1118:	86 e0       	ldi	r24, 0x06	; 6
    111a:	80 93 11 01 	sts	0x0111, r24
    111e:	11 cf       	rjmp	.-478    	; 0xf42 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1120:	80 91 11 01 	lds	r24, 0x0111
    1124:	86 30       	cpi	r24, 0x06	; 6
    1126:	99 f0       	breq	.+38     	; 0x114e <__vector_23+0x28c>
                motors_on();
    1128:	53 9a       	sbi	0x0a, 3	; 10
    112a:	23 9a       	sbi	0x04, 3	; 4
    112c:	10 92 b4 00 	sts	0x00B4, r1
    1130:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1134:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1136:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1138:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    113a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    113c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    113e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1140:	10 92 0f 01 	sts	0x010F, r1
    1144:	10 92 10 01 	sts	0x0110, r1
                kilo_state = MOVING;
    1148:	86 e0       	ldi	r24, 0x06	; 6
    114a:	80 93 11 01 	sts	0x0111, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 01       	movw	r18, r24
    1154:	00 90 68 01 	lds	r0, 0x0168
    1158:	02 c0       	rjmp	.+4      	; 0x115e <__vector_23+0x29c>
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <__vector_23+0x298>
    1162:	80 91 77 01 	lds	r24, 0x0177
    1166:	90 91 78 01 	lds	r25, 0x0178
    116a:	82 23       	and	r24, r18
    116c:	93 23       	and	r25, r19
    116e:	89 2b       	or	r24, r25
    1170:	09 f0       	breq	.+2      	; 0x1174 <__vector_23+0x2b2>
    1172:	86 c0       	rjmp	.+268    	; 0x1280 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1174:	10 92 0f 01 	sts	0x010F, r1
    1178:	e4 ce       	rjmp	.-568    	; 0xf42 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 11 01 	sts	0x0111, r24
    1180:	e0 ce       	rjmp	.-576    	; 0xf42 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1182:	e0 e0       	ldi	r30, 0x00	; 0
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1188:	80 91 6e 00 	lds	r24, 0x006E
    118c:	8d 7f       	andi	r24, 0xFD	; 253
    118e:	80 93 6e 00 	sts	0x006E, r24
    1192:	16 bc       	out	0x26, r1	; 38
            bootload();
    1194:	e0 e0       	ldi	r30, 0x00	; 0
    1196:	f0 e7       	ldi	r31, 0x70	; 112
    1198:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    119a:	10 92 11 01 	sts	0x0111, r1
    119e:	d1 ce       	rjmp	.-606    	; 0xf42 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	80 93 11 01 	sts	0x0111, r24
    11a6:	cd ce       	rjmp	.-614    	; 0xf42 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11a8:	85 e0       	ldi	r24, 0x05	; 5
    11aa:	80 93 11 01 	sts	0x0111, r24
    11ae:	c9 ce       	rjmp	.-622    	; 0xf42 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11b0:	80 91 11 01 	lds	r24, 0x0111
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__vector_23+0x2f8>
    11b8:	c4 ce       	rjmp	.-632    	; 0xf42 <__vector_23+0x80>
    11ba:	80 91 11 01 	lds	r24, 0x0111
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__vector_23+0x302>
    11c2:	bf ce       	rjmp	.-642    	; 0xf42 <__vector_23+0x80>
                motors_on();
    11c4:	53 9a       	sbi	0x0a, 3	; 10
    11c6:	23 9a       	sbi	0x04, 3	; 4
    11c8:	10 92 b4 00 	sts	0x00B4, r1
    11cc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	80 93 11 01 	sts	0x0111, r24
    11d6:	b5 ce       	rjmp	.-662    	; 0xf42 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11d8:	80 91 11 01 	lds	r24, 0x0111
    11dc:	86 30       	cpi	r24, 0x06	; 6
    11de:	09 f0       	breq	.+2      	; 0x11e2 <__vector_23+0x320>
    11e0:	b0 ce       	rjmp	.-672    	; 0xf42 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11e2:	60 91 77 01 	lds	r22, 0x0177
    11e6:	80 eb       	ldi	r24, 0xB0	; 176
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 cc 0c 	call	0x1998	; 0x1998 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11ee:	60 91 78 01 	lds	r22, 0x0178
    11f2:	81 eb       	ldi	r24, 0xB1	; 177
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    11fa:	60 91 7b 01 	lds	r22, 0x017B
    11fe:	85 e0       	ldi	r24, 0x05	; 5
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 cc 0c 	call	0x1998	; 0x1998 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1206:	60 91 67 01 	lds	r22, 0x0167
    120a:	89 e0       	ldi	r24, 0x09	; 9
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1212:	60 91 79 01 	lds	r22, 0x0179
    1216:	8c e0       	ldi	r24, 0x0C	; 12
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    121e:	60 91 7a 01 	lds	r22, 0x017A
    1222:	84 e1       	ldi	r24, 0x14	; 20
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 cc 0c 	call	0x1998	; 0x1998 <eeprom_write_byte>
                        motors_off();
    122a:	53 98       	cbi	0x0a, 3	; 10
    122c:	23 98       	cbi	0x04, 3	; 4
    122e:	10 92 b4 00 	sts	0x00B4, r1
    1232:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 11 01 	sts	0x0111, r24
    123c:	80 91 68 01 	lds	r24, 0x0168
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1240:	81 11       	cpse	r24, r1
    1242:	5f cf       	rjmp	.-322    	; 0x1102 <__vector_23+0x240>
    1244:	7e ce       	rjmp	.-772    	; 0xf42 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1246:	88 23       	and	r24, r24
    1248:	39 f2       	breq	.-114    	; 0x11d8 <__vector_23+0x316>
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	c9 f7       	brne	.-14     	; 0x1240 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    124e:	80 91 69 01 	lds	r24, 0x0169
    1252:	90 91 6a 01 	lds	r25, 0x016A
    1256:	90 93 78 01 	sts	0x0178, r25
    125a:	80 93 77 01 	sts	0x0177, r24
                    cur_motion = MOVE_STOP;
    125e:	10 92 0f 01 	sts	0x010F, r1
    1262:	4f cf       	rjmp	.-354    	; 0x1102 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1264:	80 91 0f 01 	lds	r24, 0x010F
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	71 f1       	breq	.+92     	; 0x12c8 <__vector_23+0x406>
    126c:	80 91 6c 01 	lds	r24, 0x016C
                        prev_motion = MOVE_STOP;
    1270:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_RIGHT;
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_right = calibmsg->turn_right;
    127a:	80 93 67 01 	sts	0x0167, r24
    127e:	41 cf       	rjmp	.-382    	; 0x1102 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 0f 01 	sts	0x010F, r24
    1286:	5d ce       	rjmp	.-838    	; 0xf42 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1288:	80 91 0f 01 	lds	r24, 0x010F
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	51 f0       	breq	.+20     	; 0x12a4 <__vector_23+0x3e2>
    1290:	80 91 6b 01 	lds	r24, 0x016B
                        prev_motion = MOVE_STOP;
    1294:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_LEFT;
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_left = calibmsg->turn_left;
    129e:	80 93 7b 01 	sts	0x017B, r24
    12a2:	2f cf       	rjmp	.-418    	; 0x1102 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12a4:	80 91 6b 01 	lds	r24, 0x016B
    12a8:	90 91 7b 01 	lds	r25, 0x017B
    12ac:	89 13       	cpse	r24, r25
    12ae:	f2 cf       	rjmp	.-28     	; 0x1294 <__vector_23+0x3d2>
    12b0:	28 cf       	rjmp	.-432    	; 0x1102 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12b2:	80 91 7a 01 	lds	r24, 0x017A
    12b6:	98 13       	cpse	r25, r24
    12b8:	19 cf       	rjmp	.-462    	; 0x10ec <__vector_23+0x22a>
    12ba:	80 91 6d 01 	lds	r24, 0x016D
    12be:	20 91 79 01 	lds	r18, 0x0179
    12c2:	82 13       	cpse	r24, r18
    12c4:	15 cf       	rjmp	.-470    	; 0x10f0 <__vector_23+0x22e>
    12c6:	1d cf       	rjmp	.-454    	; 0x1102 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12c8:	80 91 6c 01 	lds	r24, 0x016C
    12cc:	90 91 67 01 	lds	r25, 0x0167
    12d0:	89 13       	cpse	r24, r25
    12d2:	ce cf       	rjmp	.-100    	; 0x1270 <__vector_23+0x3ae>
    12d4:	16 cf       	rjmp	.-468    	; 0x1102 <__vector_23+0x240>

000012d6 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12d6:	fc 01       	movw	r30, r24
    12d8:	ac 01       	movw	r20, r24
    12da:	46 5f       	subi	r20, 0xF6	; 246
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12e2:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12e4:	82 27       	eor	r24, r18
    12e6:	08 2e       	mov	r0, r24
    12e8:	82 95       	swap	r24
    12ea:	80 7f       	andi	r24, 0xF0	; 240
    12ec:	80 25       	eor	r24, r0
    12ee:	09 2e       	mov	r0, r25
    12f0:	98 2f       	mov	r25, r24
    12f2:	82 95       	swap	r24
    12f4:	8f 70       	andi	r24, 0x0F	; 15
    12f6:	08 26       	eor	r0, r24
    12f8:	86 95       	lsr	r24
    12fa:	98 27       	eor	r25, r24
    12fc:	89 27       	eor	r24, r25
    12fe:	88 0f       	add	r24, r24
    1300:	88 0f       	add	r24, r24
    1302:	88 0f       	add	r24, r24
    1304:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1306:	e4 17       	cp	r30, r20
    1308:	f5 07       	cpc	r31, r21
    130a:	59 f7       	brne	.-42     	; 0x12e2 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    130c:	08 95       	ret

0000130e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    130e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1310:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1312:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1314:	20 91 3b 01 	lds	r18, 0x013B
    or tmpreg1, ddrreg
    1318:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    131a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    131c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    131e:	30 91 3b 01 	lds	r19, 0x013B
    1322:	20 30       	cpi	r18, 0x00	; 0
    1324:	29 f0       	breq	.+10     	; 0x1330 <message_send+0x22>
    1326:	00 00       	nop
    1328:	25 b1       	in	r18, 0x05	; 5
    132a:	23 2b       	or	r18, r19
    132c:	25 b9       	out	0x05, r18	; 5
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <message_send+0x2a>
    1330:	00 00       	nop
    1332:	00 00       	nop
    1334:	00 00       	nop
    1336:	00 c0       	rjmp	.+0      	; 0x1338 <message_send+0x2a>
    1338:	00 00       	nop
    133a:	00 00       	nop
    133c:	00 00       	nop
    133e:	30 95       	com	r19
    1340:	25 b1       	in	r18, 0x05	; 5
    1342:	23 23       	and	r18, r19
    1344:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1346:	2e ea       	ldi	r18, 0xAE	; 174
    1348:	2a 95       	dec	r18
    134a:	f1 f7       	brne	.-4      	; 0x1348 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    134c:	2b ee       	ldi	r18, 0xEB	; 235

0000134e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    134e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1350:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1352:	0a c0       	rjmp	.+20     	; 0x1368 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1354:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1356:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    135a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    135c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    135e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1360:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1362:	0f be       	out	0x3f, r0	; 63
    return 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	08 95       	ret

00001368 <nocollision>:
nocollision:
    nop
    1368:	00 00       	nop
    dec tmpreg1
    136a:	2a 95       	dec	r18
    brne checkcollision
    136c:	81 f7       	brne	.-32     	; 0x134e <checkcollision>

    ldi tmpreg1, 0x01
    136e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1370:	30 91 3b 01 	lds	r19, 0x013B
    1374:	20 30       	cpi	r18, 0x00	; 0
    1376:	29 f0       	breq	.+10     	; 0x1382 <nocollision+0x1a>
    1378:	00 00       	nop
    137a:	25 b1       	in	r18, 0x05	; 5
    137c:	23 2b       	or	r18, r19
    137e:	25 b9       	out	0x05, r18	; 5
    1380:	04 c0       	rjmp	.+8      	; 0x138a <nocollision+0x22>
    1382:	00 00       	nop
    1384:	00 00       	nop
    1386:	00 00       	nop
    1388:	00 c0       	rjmp	.+0      	; 0x138a <nocollision+0x22>
    138a:	00 00       	nop
    138c:	00 00       	nop
    138e:	00 00       	nop
    1390:	30 95       	com	r19
    1392:	25 b1       	in	r18, 0x05	; 5
    1394:	23 23       	and	r18, r19
    1396:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1398:	00 00       	nop
    139a:	24 e5       	ldi	r18, 0x54	; 84
    139c:	2a 95       	dec	r18
    139e:	f1 f7       	brne	.-4      	; 0x139c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13a0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13a2:	8c e0       	ldi	r24, 0x0C	; 12

000013a4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13a4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13a8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13aa:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    13ac:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    13ae:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13b0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13b4:	50 e0       	ldi	r21, 0x00	; 0

000013b6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13b6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13b8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13ba:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13bc:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13be:	30 91 3b 01 	lds	r19, 0x013B
    13c2:	20 30       	cpi	r18, 0x00	; 0
    13c4:	29 f0       	breq	.+10     	; 0x13d0 <sendbit+0x1a>
    13c6:	00 00       	nop
    13c8:	25 b1       	in	r18, 0x05	; 5
    13ca:	23 2b       	or	r18, r19
    13cc:	25 b9       	out	0x05, r18	; 5
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <sendbit+0x22>
    13d0:	00 00       	nop
    13d2:	00 00       	nop
    13d4:	00 00       	nop
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <sendbit+0x22>
    13d8:	00 00       	nop
    13da:	00 00       	nop
    13dc:	00 00       	nop
    13de:	30 95       	com	r19
    13e0:	25 b1       	in	r18, 0x05	; 5
    13e2:	23 23       	and	r18, r19
    13e4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    13e6:	00 00       	nop
    13e8:	21 e5       	ldi	r18, 0x51	; 81
    13ea:	2a 95       	dec	r18
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    13ee:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    13f0:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    13f2:	9a 95       	dec	r25
    brne sendbit
    13f4:	01 f7       	brne	.-64     	; 0x13b6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    13f6:	8a 95       	dec	r24
    brne sendbyte
    13f8:	a9 f6       	brne	.-86     	; 0x13a4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    13fa:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    13fc:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    13fe:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1400:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1402:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    1406:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1408:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    140a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    140c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    140e:	0f be       	out	0x3f, r0	; 63
    return 1
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	08 95       	ret

00001414 <main>:
}


int main()
{
  kilo_init();
    1414:	0e 94 9b 00 	call	0x136	; 0x136 <kilo_init>
  //register tx
  kilo_message_rx = message_rx;
    1418:	81 e7       	ldi	r24, 0x71	; 113
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	90 93 06 01 	sts	0x0106, r25
    1420:	80 93 05 01 	sts	0x0105, r24
  kilo_start(setup, loop);
    1424:	61 e8       	ldi	r22, 0x81	; 129
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e8       	ldi	r24, 0x80	; 128
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 97 01 	call	0x32e	; 0x32e <kilo_start>
    
  return 0;
}
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	08 95       	ret

00001436 <__divmodhi4>:
    1436:	97 fb       	bst	r25, 7
    1438:	07 2e       	mov	r0, r23
    143a:	16 f4       	brtc	.+4      	; 0x1440 <__divmodhi4+0xa>
    143c:	00 94       	com	r0
    143e:	07 d0       	rcall	.+14     	; 0x144e <__divmodhi4_neg1>
    1440:	77 fd       	sbrc	r23, 7
    1442:	09 d0       	rcall	.+18     	; 0x1456 <__divmodhi4_neg2>
    1444:	0e 94 44 0a 	call	0x1488	; 0x1488 <__udivmodhi4>
    1448:	07 fc       	sbrc	r0, 7
    144a:	05 d0       	rcall	.+10     	; 0x1456 <__divmodhi4_neg2>
    144c:	3e f4       	brtc	.+14     	; 0x145c <__divmodhi4_exit>

0000144e <__divmodhi4_neg1>:
    144e:	90 95       	com	r25
    1450:	81 95       	neg	r24
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	08 95       	ret

00001456 <__divmodhi4_neg2>:
    1456:	70 95       	com	r23
    1458:	61 95       	neg	r22
    145a:	7f 4f       	sbci	r23, 0xFF	; 255

0000145c <__divmodhi4_exit>:
    145c:	08 95       	ret

0000145e <__tablejump2__>:
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	05 90       	lpm	r0, Z+
    1464:	f4 91       	lpm	r31, Z
    1466:	e0 2d       	mov	r30, r0
    1468:	09 94       	ijmp

0000146a <__umulhisi3>:
    146a:	a2 9f       	mul	r26, r18
    146c:	b0 01       	movw	r22, r0
    146e:	b3 9f       	mul	r27, r19
    1470:	c0 01       	movw	r24, r0
    1472:	a3 9f       	mul	r26, r19
    1474:	70 0d       	add	r23, r0
    1476:	81 1d       	adc	r24, r1
    1478:	11 24       	eor	r1, r1
    147a:	91 1d       	adc	r25, r1
    147c:	b2 9f       	mul	r27, r18
    147e:	70 0d       	add	r23, r0
    1480:	81 1d       	adc	r24, r1
    1482:	11 24       	eor	r1, r1
    1484:	91 1d       	adc	r25, r1
    1486:	08 95       	ret

00001488 <__udivmodhi4>:
    1488:	aa 1b       	sub	r26, r26
    148a:	bb 1b       	sub	r27, r27
    148c:	51 e1       	ldi	r21, 0x11	; 17
    148e:	07 c0       	rjmp	.+14     	; 0x149e <__udivmodhi4_ep>

00001490 <__udivmodhi4_loop>:
    1490:	aa 1f       	adc	r26, r26
    1492:	bb 1f       	adc	r27, r27
    1494:	a6 17       	cp	r26, r22
    1496:	b7 07       	cpc	r27, r23
    1498:	10 f0       	brcs	.+4      	; 0x149e <__udivmodhi4_ep>
    149a:	a6 1b       	sub	r26, r22
    149c:	b7 0b       	sbc	r27, r23

0000149e <__udivmodhi4_ep>:
    149e:	88 1f       	adc	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	5a 95       	dec	r21
    14a4:	a9 f7       	brne	.-22     	; 0x1490 <__udivmodhi4_loop>
    14a6:	80 95       	com	r24
    14a8:	90 95       	com	r25
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	08 95       	ret

000014b0 <__subsf3>:
    14b0:	50 58       	subi	r21, 0x80	; 128

000014b2 <__addsf3>:
    14b2:	bb 27       	eor	r27, r27
    14b4:	aa 27       	eor	r26, r26
    14b6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3x>
    14ba:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_round>
    14be:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_pscA>
    14c2:	38 f0       	brcs	.+14     	; 0x14d2 <__addsf3+0x20>
    14c4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_pscB>
    14c8:	20 f0       	brcs	.+8      	; 0x14d2 <__addsf3+0x20>
    14ca:	39 f4       	brne	.+14     	; 0x14da <__addsf3+0x28>
    14cc:	9f 3f       	cpi	r25, 0xFF	; 255
    14ce:	19 f4       	brne	.+6      	; 0x14d6 <__addsf3+0x24>
    14d0:	26 f4       	brtc	.+8      	; 0x14da <__addsf3+0x28>
    14d2:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_nan>
    14d6:	0e f4       	brtc	.+2      	; 0x14da <__addsf3+0x28>
    14d8:	e0 95       	com	r30
    14da:	e7 fb       	bst	r30, 7
    14dc:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_inf>

000014e0 <__addsf3x>:
    14e0:	e9 2f       	mov	r30, r25
    14e2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__fp_split3>
    14e6:	58 f3       	brcs	.-42     	; 0x14be <__addsf3+0xc>
    14e8:	ba 17       	cp	r27, r26
    14ea:	62 07       	cpc	r22, r18
    14ec:	73 07       	cpc	r23, r19
    14ee:	84 07       	cpc	r24, r20
    14f0:	95 07       	cpc	r25, r21
    14f2:	20 f0       	brcs	.+8      	; 0x14fc <__addsf3x+0x1c>
    14f4:	79 f4       	brne	.+30     	; 0x1514 <__addsf3x+0x34>
    14f6:	a6 f5       	brtc	.+104    	; 0x1560 <__addsf3x+0x80>
    14f8:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__fp_zero>
    14fc:	0e f4       	brtc	.+2      	; 0x1500 <__addsf3x+0x20>
    14fe:	e0 95       	com	r30
    1500:	0b 2e       	mov	r0, r27
    1502:	ba 2f       	mov	r27, r26
    1504:	a0 2d       	mov	r26, r0
    1506:	0b 01       	movw	r0, r22
    1508:	b9 01       	movw	r22, r18
    150a:	90 01       	movw	r18, r0
    150c:	0c 01       	movw	r0, r24
    150e:	ca 01       	movw	r24, r20
    1510:	a0 01       	movw	r20, r0
    1512:	11 24       	eor	r1, r1
    1514:	ff 27       	eor	r31, r31
    1516:	59 1b       	sub	r21, r25
    1518:	99 f0       	breq	.+38     	; 0x1540 <__addsf3x+0x60>
    151a:	59 3f       	cpi	r21, 0xF9	; 249
    151c:	50 f4       	brcc	.+20     	; 0x1532 <__addsf3x+0x52>
    151e:	50 3e       	cpi	r21, 0xE0	; 224
    1520:	68 f1       	brcs	.+90     	; 0x157c <__addsf3x+0x9c>
    1522:	1a 16       	cp	r1, r26
    1524:	f0 40       	sbci	r31, 0x00	; 0
    1526:	a2 2f       	mov	r26, r18
    1528:	23 2f       	mov	r18, r19
    152a:	34 2f       	mov	r19, r20
    152c:	44 27       	eor	r20, r20
    152e:	58 5f       	subi	r21, 0xF8	; 248
    1530:	f3 cf       	rjmp	.-26     	; 0x1518 <__addsf3x+0x38>
    1532:	46 95       	lsr	r20
    1534:	37 95       	ror	r19
    1536:	27 95       	ror	r18
    1538:	a7 95       	ror	r26
    153a:	f0 40       	sbci	r31, 0x00	; 0
    153c:	53 95       	inc	r21
    153e:	c9 f7       	brne	.-14     	; 0x1532 <__addsf3x+0x52>
    1540:	7e f4       	brtc	.+30     	; 0x1560 <__addsf3x+0x80>
    1542:	1f 16       	cp	r1, r31
    1544:	ba 0b       	sbc	r27, r26
    1546:	62 0b       	sbc	r22, r18
    1548:	73 0b       	sbc	r23, r19
    154a:	84 0b       	sbc	r24, r20
    154c:	ba f0       	brmi	.+46     	; 0x157c <__addsf3x+0x9c>
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	a1 f0       	breq	.+40     	; 0x157a <__addsf3x+0x9a>
    1552:	ff 0f       	add	r31, r31
    1554:	bb 1f       	adc	r27, r27
    1556:	66 1f       	adc	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	88 1f       	adc	r24, r24
    155c:	c2 f7       	brpl	.-16     	; 0x154e <__addsf3x+0x6e>
    155e:	0e c0       	rjmp	.+28     	; 0x157c <__addsf3x+0x9c>
    1560:	ba 0f       	add	r27, r26
    1562:	62 1f       	adc	r22, r18
    1564:	73 1f       	adc	r23, r19
    1566:	84 1f       	adc	r24, r20
    1568:	48 f4       	brcc	.+18     	; 0x157c <__addsf3x+0x9c>
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f7 95       	ror	r31
    1574:	9e 3f       	cpi	r25, 0xFE	; 254
    1576:	08 f0       	brcs	.+2      	; 0x157a <__addsf3x+0x9a>
    1578:	b0 cf       	rjmp	.-160    	; 0x14da <__addsf3+0x28>
    157a:	93 95       	inc	r25
    157c:	88 0f       	add	r24, r24
    157e:	08 f0       	brcs	.+2      	; 0x1582 <__addsf3x+0xa2>
    1580:	99 27       	eor	r25, r25
    1582:	ee 0f       	add	r30, r30
    1584:	97 95       	ror	r25
    1586:	87 95       	ror	r24
    1588:	08 95       	ret

0000158a <__divsf3>:
    158a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__divsf3x>
    158e:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_round>
    1592:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_pscB>
    1596:	58 f0       	brcs	.+22     	; 0x15ae <__divsf3+0x24>
    1598:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_pscA>
    159c:	40 f0       	brcs	.+16     	; 0x15ae <__divsf3+0x24>
    159e:	29 f4       	brne	.+10     	; 0x15aa <__divsf3+0x20>
    15a0:	5f 3f       	cpi	r21, 0xFF	; 255
    15a2:	29 f0       	breq	.+10     	; 0x15ae <__divsf3+0x24>
    15a4:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_inf>
    15a8:	51 11       	cpse	r21, r1
    15aa:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__fp_szero>
    15ae:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_nan>

000015b2 <__divsf3x>:
    15b2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__fp_split3>
    15b6:	68 f3       	brcs	.-38     	; 0x1592 <__divsf3+0x8>

000015b8 <__divsf3_pse>:
    15b8:	99 23       	and	r25, r25
    15ba:	b1 f3       	breq	.-20     	; 0x15a8 <__divsf3+0x1e>
    15bc:	55 23       	and	r21, r21
    15be:	91 f3       	breq	.-28     	; 0x15a4 <__divsf3+0x1a>
    15c0:	95 1b       	sub	r25, r21
    15c2:	55 0b       	sbc	r21, r21
    15c4:	bb 27       	eor	r27, r27
    15c6:	aa 27       	eor	r26, r26
    15c8:	62 17       	cp	r22, r18
    15ca:	73 07       	cpc	r23, r19
    15cc:	84 07       	cpc	r24, r20
    15ce:	38 f0       	brcs	.+14     	; 0x15de <__divsf3_pse+0x26>
    15d0:	9f 5f       	subi	r25, 0xFF	; 255
    15d2:	5f 4f       	sbci	r21, 0xFF	; 255
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	44 1f       	adc	r20, r20
    15da:	aa 1f       	adc	r26, r26
    15dc:	a9 f3       	breq	.-22     	; 0x15c8 <__divsf3_pse+0x10>
    15de:	35 d0       	rcall	.+106    	; 0x164a <__divsf3_pse+0x92>
    15e0:	0e 2e       	mov	r0, r30
    15e2:	3a f0       	brmi	.+14     	; 0x15f2 <__divsf3_pse+0x3a>
    15e4:	e0 e8       	ldi	r30, 0x80	; 128
    15e6:	32 d0       	rcall	.+100    	; 0x164c <__divsf3_pse+0x94>
    15e8:	91 50       	subi	r25, 0x01	; 1
    15ea:	50 40       	sbci	r21, 0x00	; 0
    15ec:	e6 95       	lsr	r30
    15ee:	00 1c       	adc	r0, r0
    15f0:	ca f7       	brpl	.-14     	; 0x15e4 <__divsf3_pse+0x2c>
    15f2:	2b d0       	rcall	.+86     	; 0x164a <__divsf3_pse+0x92>
    15f4:	fe 2f       	mov	r31, r30
    15f6:	29 d0       	rcall	.+82     	; 0x164a <__divsf3_pse+0x92>
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	bb 1f       	adc	r27, r27
    1600:	26 17       	cp	r18, r22
    1602:	37 07       	cpc	r19, r23
    1604:	48 07       	cpc	r20, r24
    1606:	ab 07       	cpc	r26, r27
    1608:	b0 e8       	ldi	r27, 0x80	; 128
    160a:	09 f0       	breq	.+2      	; 0x160e <__divsf3_pse+0x56>
    160c:	bb 0b       	sbc	r27, r27
    160e:	80 2d       	mov	r24, r0
    1610:	bf 01       	movw	r22, r30
    1612:	ff 27       	eor	r31, r31
    1614:	93 58       	subi	r25, 0x83	; 131
    1616:	5f 4f       	sbci	r21, 0xFF	; 255
    1618:	3a f0       	brmi	.+14     	; 0x1628 <__divsf3_pse+0x70>
    161a:	9e 3f       	cpi	r25, 0xFE	; 254
    161c:	51 05       	cpc	r21, r1
    161e:	78 f0       	brcs	.+30     	; 0x163e <__divsf3_pse+0x86>
    1620:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_inf>
    1624:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__fp_szero>
    1628:	5f 3f       	cpi	r21, 0xFF	; 255
    162a:	e4 f3       	brlt	.-8      	; 0x1624 <__divsf3_pse+0x6c>
    162c:	98 3e       	cpi	r25, 0xE8	; 232
    162e:	d4 f3       	brlt	.-12     	; 0x1624 <__divsf3_pse+0x6c>
    1630:	86 95       	lsr	r24
    1632:	77 95       	ror	r23
    1634:	67 95       	ror	r22
    1636:	b7 95       	ror	r27
    1638:	f7 95       	ror	r31
    163a:	9f 5f       	subi	r25, 0xFF	; 255
    163c:	c9 f7       	brne	.-14     	; 0x1630 <__divsf3_pse+0x78>
    163e:	88 0f       	add	r24, r24
    1640:	91 1d       	adc	r25, r1
    1642:	96 95       	lsr	r25
    1644:	87 95       	ror	r24
    1646:	97 f9       	bld	r25, 7
    1648:	08 95       	ret
    164a:	e1 e0       	ldi	r30, 0x01	; 1
    164c:	66 0f       	add	r22, r22
    164e:	77 1f       	adc	r23, r23
    1650:	88 1f       	adc	r24, r24
    1652:	bb 1f       	adc	r27, r27
    1654:	62 17       	cp	r22, r18
    1656:	73 07       	cpc	r23, r19
    1658:	84 07       	cpc	r24, r20
    165a:	ba 07       	cpc	r27, r26
    165c:	20 f0       	brcs	.+8      	; 0x1666 <__divsf3_pse+0xae>
    165e:	62 1b       	sub	r22, r18
    1660:	73 0b       	sbc	r23, r19
    1662:	84 0b       	sbc	r24, r20
    1664:	ba 0b       	sbc	r27, r26
    1666:	ee 1f       	adc	r30, r30
    1668:	88 f7       	brcc	.-30     	; 0x164c <__divsf3_pse+0x94>
    166a:	e0 95       	com	r30
    166c:	08 95       	ret

0000166e <__fixsfsi>:
    166e:	0e 94 3e 0b 	call	0x167c	; 0x167c <__fixunssfsi>
    1672:	68 94       	set
    1674:	b1 11       	cpse	r27, r1
    1676:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__fp_szero>
    167a:	08 95       	ret

0000167c <__fixunssfsi>:
    167c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fp_splitA>
    1680:	88 f0       	brcs	.+34     	; 0x16a4 <__fixunssfsi+0x28>
    1682:	9f 57       	subi	r25, 0x7F	; 127
    1684:	98 f0       	brcs	.+38     	; 0x16ac <__fixunssfsi+0x30>
    1686:	b9 2f       	mov	r27, r25
    1688:	99 27       	eor	r25, r25
    168a:	b7 51       	subi	r27, 0x17	; 23
    168c:	b0 f0       	brcs	.+44     	; 0x16ba <__fixunssfsi+0x3e>
    168e:	e1 f0       	breq	.+56     	; 0x16c8 <__fixunssfsi+0x4c>
    1690:	66 0f       	add	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	88 1f       	adc	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	1a f0       	brmi	.+6      	; 0x16a0 <__fixunssfsi+0x24>
    169a:	ba 95       	dec	r27
    169c:	c9 f7       	brne	.-14     	; 0x1690 <__fixunssfsi+0x14>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <__fixunssfsi+0x4c>
    16a0:	b1 30       	cpi	r27, 0x01	; 1
    16a2:	91 f0       	breq	.+36     	; 0x16c8 <__fixunssfsi+0x4c>
    16a4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_zero>
    16a8:	b1 e0       	ldi	r27, 0x01	; 1
    16aa:	08 95       	ret
    16ac:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__fp_zero>
    16b0:	67 2f       	mov	r22, r23
    16b2:	78 2f       	mov	r23, r24
    16b4:	88 27       	eor	r24, r24
    16b6:	b8 5f       	subi	r27, 0xF8	; 248
    16b8:	39 f0       	breq	.+14     	; 0x16c8 <__fixunssfsi+0x4c>
    16ba:	b9 3f       	cpi	r27, 0xF9	; 249
    16bc:	cc f3       	brlt	.-14     	; 0x16b0 <__fixunssfsi+0x34>
    16be:	86 95       	lsr	r24
    16c0:	77 95       	ror	r23
    16c2:	67 95       	ror	r22
    16c4:	b3 95       	inc	r27
    16c6:	d9 f7       	brne	.-10     	; 0x16be <__fixunssfsi+0x42>
    16c8:	3e f4       	brtc	.+14     	; 0x16d8 <__fixunssfsi+0x5c>
    16ca:	90 95       	com	r25
    16cc:	80 95       	com	r24
    16ce:	70 95       	com	r23
    16d0:	61 95       	neg	r22
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	8f 4f       	sbci	r24, 0xFF	; 255
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	08 95       	ret

000016da <__floatunsisf>:
    16da:	e8 94       	clt
    16dc:	09 c0       	rjmp	.+18     	; 0x16f0 <__floatsisf+0x12>

000016de <__floatsisf>:
    16de:	97 fb       	bst	r25, 7
    16e0:	3e f4       	brtc	.+14     	; 0x16f0 <__floatsisf+0x12>
    16e2:	90 95       	com	r25
    16e4:	80 95       	com	r24
    16e6:	70 95       	com	r23
    16e8:	61 95       	neg	r22
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	99 23       	and	r25, r25
    16f2:	a9 f0       	breq	.+42     	; 0x171e <__floatsisf+0x40>
    16f4:	f9 2f       	mov	r31, r25
    16f6:	96 e9       	ldi	r25, 0x96	; 150
    16f8:	bb 27       	eor	r27, r27
    16fa:	93 95       	inc	r25
    16fc:	f6 95       	lsr	r31
    16fe:	87 95       	ror	r24
    1700:	77 95       	ror	r23
    1702:	67 95       	ror	r22
    1704:	b7 95       	ror	r27
    1706:	f1 11       	cpse	r31, r1
    1708:	f8 cf       	rjmp	.-16     	; 0x16fa <__floatsisf+0x1c>
    170a:	fa f4       	brpl	.+62     	; 0x174a <__floatsisf+0x6c>
    170c:	bb 0f       	add	r27, r27
    170e:	11 f4       	brne	.+4      	; 0x1714 <__floatsisf+0x36>
    1710:	60 ff       	sbrs	r22, 0
    1712:	1b c0       	rjmp	.+54     	; 0x174a <__floatsisf+0x6c>
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	8f 4f       	sbci	r24, 0xFF	; 255
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	16 c0       	rjmp	.+44     	; 0x174a <__floatsisf+0x6c>
    171e:	88 23       	and	r24, r24
    1720:	11 f0       	breq	.+4      	; 0x1726 <__floatsisf+0x48>
    1722:	96 e9       	ldi	r25, 0x96	; 150
    1724:	11 c0       	rjmp	.+34     	; 0x1748 <__floatsisf+0x6a>
    1726:	77 23       	and	r23, r23
    1728:	21 f0       	breq	.+8      	; 0x1732 <__floatsisf+0x54>
    172a:	9e e8       	ldi	r25, 0x8E	; 142
    172c:	87 2f       	mov	r24, r23
    172e:	76 2f       	mov	r23, r22
    1730:	05 c0       	rjmp	.+10     	; 0x173c <__floatsisf+0x5e>
    1732:	66 23       	and	r22, r22
    1734:	71 f0       	breq	.+28     	; 0x1752 <__floatsisf+0x74>
    1736:	96 e8       	ldi	r25, 0x86	; 134
    1738:	86 2f       	mov	r24, r22
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	2a f0       	brmi	.+10     	; 0x174a <__floatsisf+0x6c>
    1740:	9a 95       	dec	r25
    1742:	66 0f       	add	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	da f7       	brpl	.-10     	; 0x1740 <__floatsisf+0x62>
    174a:	88 0f       	add	r24, r24
    174c:	96 95       	lsr	r25
    174e:	87 95       	ror	r24
    1750:	97 f9       	bld	r25, 7
    1752:	08 95       	ret

00001754 <__fp_inf>:
    1754:	97 f9       	bld	r25, 7
    1756:	9f 67       	ori	r25, 0x7F	; 127
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	08 95       	ret

00001760 <__fp_nan>:
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	80 ec       	ldi	r24, 0xC0	; 192
    1764:	08 95       	ret

00001766 <__fp_pscA>:
    1766:	00 24       	eor	r0, r0
    1768:	0a 94       	dec	r0
    176a:	16 16       	cp	r1, r22
    176c:	17 06       	cpc	r1, r23
    176e:	18 06       	cpc	r1, r24
    1770:	09 06       	cpc	r0, r25
    1772:	08 95       	ret

00001774 <__fp_pscB>:
    1774:	00 24       	eor	r0, r0
    1776:	0a 94       	dec	r0
    1778:	12 16       	cp	r1, r18
    177a:	13 06       	cpc	r1, r19
    177c:	14 06       	cpc	r1, r20
    177e:	05 06       	cpc	r0, r21
    1780:	08 95       	ret

00001782 <__fp_round>:
    1782:	09 2e       	mov	r0, r25
    1784:	03 94       	inc	r0
    1786:	00 0c       	add	r0, r0
    1788:	11 f4       	brne	.+4      	; 0x178e <__fp_round+0xc>
    178a:	88 23       	and	r24, r24
    178c:	52 f0       	brmi	.+20     	; 0x17a2 <__fp_round+0x20>
    178e:	bb 0f       	add	r27, r27
    1790:	40 f4       	brcc	.+16     	; 0x17a2 <__fp_round+0x20>
    1792:	bf 2b       	or	r27, r31
    1794:	11 f4       	brne	.+4      	; 0x179a <__fp_round+0x18>
    1796:	60 ff       	sbrs	r22, 0
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <__fp_round+0x20>
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	08 95       	ret

000017a4 <__fp_split3>:
    17a4:	57 fd       	sbrc	r21, 7
    17a6:	90 58       	subi	r25, 0x80	; 128
    17a8:	44 0f       	add	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	59 f0       	breq	.+22     	; 0x17c4 <__fp_splitA+0x10>
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	71 f0       	breq	.+28     	; 0x17ce <__fp_splitA+0x1a>
    17b2:	47 95       	ror	r20

000017b4 <__fp_splitA>:
    17b4:	88 0f       	add	r24, r24
    17b6:	97 fb       	bst	r25, 7
    17b8:	99 1f       	adc	r25, r25
    17ba:	61 f0       	breq	.+24     	; 0x17d4 <__fp_splitA+0x20>
    17bc:	9f 3f       	cpi	r25, 0xFF	; 255
    17be:	79 f0       	breq	.+30     	; 0x17de <__fp_splitA+0x2a>
    17c0:	87 95       	ror	r24
    17c2:	08 95       	ret
    17c4:	12 16       	cp	r1, r18
    17c6:	13 06       	cpc	r1, r19
    17c8:	14 06       	cpc	r1, r20
    17ca:	55 1f       	adc	r21, r21
    17cc:	f2 cf       	rjmp	.-28     	; 0x17b2 <__fp_split3+0xe>
    17ce:	46 95       	lsr	r20
    17d0:	f1 df       	rcall	.-30     	; 0x17b4 <__fp_splitA>
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <__fp_splitA+0x30>
    17d4:	16 16       	cp	r1, r22
    17d6:	17 06       	cpc	r1, r23
    17d8:	18 06       	cpc	r1, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	f1 cf       	rjmp	.-30     	; 0x17c0 <__fp_splitA+0xc>
    17de:	86 95       	lsr	r24
    17e0:	71 05       	cpc	r23, r1
    17e2:	61 05       	cpc	r22, r1
    17e4:	08 94       	sec
    17e6:	08 95       	ret

000017e8 <__fp_zero>:
    17e8:	e8 94       	clt

000017ea <__fp_szero>:
    17ea:	bb 27       	eor	r27, r27
    17ec:	66 27       	eor	r22, r22
    17ee:	77 27       	eor	r23, r23
    17f0:	cb 01       	movw	r24, r22
    17f2:	97 f9       	bld	r25, 7
    17f4:	08 95       	ret

000017f6 <__mulsf3>:
    17f6:	0e 94 0e 0c 	call	0x181c	; 0x181c <__mulsf3x>
    17fa:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_round>
    17fe:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_pscA>
    1802:	38 f0       	brcs	.+14     	; 0x1812 <__mulsf3+0x1c>
    1804:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_pscB>
    1808:	20 f0       	brcs	.+8      	; 0x1812 <__mulsf3+0x1c>
    180a:	95 23       	and	r25, r21
    180c:	11 f0       	breq	.+4      	; 0x1812 <__mulsf3+0x1c>
    180e:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_inf>
    1812:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_nan>
    1816:	11 24       	eor	r1, r1
    1818:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__fp_szero>

0000181c <__mulsf3x>:
    181c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__fp_split3>
    1820:	70 f3       	brcs	.-36     	; 0x17fe <__mulsf3+0x8>

00001822 <__mulsf3_pse>:
    1822:	95 9f       	mul	r25, r21
    1824:	c1 f3       	breq	.-16     	; 0x1816 <__mulsf3+0x20>
    1826:	95 0f       	add	r25, r21
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	55 1f       	adc	r21, r21
    182c:	62 9f       	mul	r22, r18
    182e:	f0 01       	movw	r30, r0
    1830:	72 9f       	mul	r23, r18
    1832:	bb 27       	eor	r27, r27
    1834:	f0 0d       	add	r31, r0
    1836:	b1 1d       	adc	r27, r1
    1838:	63 9f       	mul	r22, r19
    183a:	aa 27       	eor	r26, r26
    183c:	f0 0d       	add	r31, r0
    183e:	b1 1d       	adc	r27, r1
    1840:	aa 1f       	adc	r26, r26
    1842:	64 9f       	mul	r22, r20
    1844:	66 27       	eor	r22, r22
    1846:	b0 0d       	add	r27, r0
    1848:	a1 1d       	adc	r26, r1
    184a:	66 1f       	adc	r22, r22
    184c:	82 9f       	mul	r24, r18
    184e:	22 27       	eor	r18, r18
    1850:	b0 0d       	add	r27, r0
    1852:	a1 1d       	adc	r26, r1
    1854:	62 1f       	adc	r22, r18
    1856:	73 9f       	mul	r23, r19
    1858:	b0 0d       	add	r27, r0
    185a:	a1 1d       	adc	r26, r1
    185c:	62 1f       	adc	r22, r18
    185e:	83 9f       	mul	r24, r19
    1860:	a0 0d       	add	r26, r0
    1862:	61 1d       	adc	r22, r1
    1864:	22 1f       	adc	r18, r18
    1866:	74 9f       	mul	r23, r20
    1868:	33 27       	eor	r19, r19
    186a:	a0 0d       	add	r26, r0
    186c:	61 1d       	adc	r22, r1
    186e:	23 1f       	adc	r18, r19
    1870:	84 9f       	mul	r24, r20
    1872:	60 0d       	add	r22, r0
    1874:	21 1d       	adc	r18, r1
    1876:	82 2f       	mov	r24, r18
    1878:	76 2f       	mov	r23, r22
    187a:	6a 2f       	mov	r22, r26
    187c:	11 24       	eor	r1, r1
    187e:	9f 57       	subi	r25, 0x7F	; 127
    1880:	50 40       	sbci	r21, 0x00	; 0
    1882:	9a f0       	brmi	.+38     	; 0x18aa <__mulsf3_pse+0x88>
    1884:	f1 f0       	breq	.+60     	; 0x18c2 <__mulsf3_pse+0xa0>
    1886:	88 23       	and	r24, r24
    1888:	4a f0       	brmi	.+18     	; 0x189c <__mulsf3_pse+0x7a>
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	bb 1f       	adc	r27, r27
    1890:	66 1f       	adc	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	88 1f       	adc	r24, r24
    1896:	91 50       	subi	r25, 0x01	; 1
    1898:	50 40       	sbci	r21, 0x00	; 0
    189a:	a9 f7       	brne	.-22     	; 0x1886 <__mulsf3_pse+0x64>
    189c:	9e 3f       	cpi	r25, 0xFE	; 254
    189e:	51 05       	cpc	r21, r1
    18a0:	80 f0       	brcs	.+32     	; 0x18c2 <__mulsf3_pse+0xa0>
    18a2:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_inf>
    18a6:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__fp_szero>
    18aa:	5f 3f       	cpi	r21, 0xFF	; 255
    18ac:	e4 f3       	brlt	.-8      	; 0x18a6 <__mulsf3_pse+0x84>
    18ae:	98 3e       	cpi	r25, 0xE8	; 232
    18b0:	d4 f3       	brlt	.-12     	; 0x18a6 <__mulsf3_pse+0x84>
    18b2:	86 95       	lsr	r24
    18b4:	77 95       	ror	r23
    18b6:	67 95       	ror	r22
    18b8:	b7 95       	ror	r27
    18ba:	f7 95       	ror	r31
    18bc:	e7 95       	ror	r30
    18be:	9f 5f       	subi	r25, 0xFF	; 255
    18c0:	c1 f7       	brne	.-16     	; 0x18b2 <__mulsf3_pse+0x90>
    18c2:	fe 2b       	or	r31, r30
    18c4:	88 0f       	add	r24, r24
    18c6:	91 1d       	adc	r25, r1
    18c8:	96 95       	lsr	r25
    18ca:	87 95       	ror	r24
    18cc:	97 f9       	bld	r25, 7
    18ce:	08 95       	ret

000018d0 <do_rand>:
    18d0:	8f 92       	push	r8
    18d2:	9f 92       	push	r9
    18d4:	af 92       	push	r10
    18d6:	bf 92       	push	r11
    18d8:	cf 92       	push	r12
    18da:	df 92       	push	r13
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	ec 01       	movw	r28, r24
    18e6:	68 81       	ld	r22, Y
    18e8:	79 81       	ldd	r23, Y+1	; 0x01
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	9b 81       	ldd	r25, Y+3	; 0x03
    18ee:	61 15       	cp	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	81 05       	cpc	r24, r1
    18f4:	91 05       	cpc	r25, r1
    18f6:	21 f4       	brne	.+8      	; 0x1900 <do_rand+0x30>
    18f8:	64 e2       	ldi	r22, 0x24	; 36
    18fa:	79 ed       	ldi	r23, 0xD9	; 217
    18fc:	8b e5       	ldi	r24, 0x5B	; 91
    18fe:	97 e0       	ldi	r25, 0x07	; 7
    1900:	2d e1       	ldi	r18, 0x1D	; 29
    1902:	33 ef       	ldi	r19, 0xF3	; 243
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__divmodsi4>
    190c:	49 01       	movw	r8, r18
    190e:	5a 01       	movw	r10, r20
    1910:	9b 01       	movw	r18, r22
    1912:	ac 01       	movw	r20, r24
    1914:	a7 ea       	ldi	r26, 0xA7	; 167
    1916:	b1 e4       	ldi	r27, 0x41	; 65
    1918:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__muluhisi3>
    191c:	6b 01       	movw	r12, r22
    191e:	7c 01       	movw	r14, r24
    1920:	ac ee       	ldi	r26, 0xEC	; 236
    1922:	b4 ef       	ldi	r27, 0xF4	; 244
    1924:	a5 01       	movw	r20, r10
    1926:	94 01       	movw	r18, r8
    1928:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__mulohisi3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8c 0d       	add	r24, r12
    1932:	9d 1d       	adc	r25, r13
    1934:	ae 1d       	adc	r26, r14
    1936:	bf 1d       	adc	r27, r15
    1938:	b7 ff       	sbrs	r27, 7
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <do_rand+0x72>
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	a1 09       	sbc	r26, r1
    1940:	b0 48       	sbci	r27, 0x80	; 128
    1942:	88 83       	st	Y, r24
    1944:	99 83       	std	Y+1, r25	; 0x01
    1946:	aa 83       	std	Y+2, r26	; 0x02
    1948:	bb 83       	std	Y+3, r27	; 0x03
    194a:	9f 77       	andi	r25, 0x7F	; 127
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	cf 90       	pop	r12
    1958:	bf 90       	pop	r11
    195a:	af 90       	pop	r10
    195c:	9f 90       	pop	r9
    195e:	8f 90       	pop	r8
    1960:	08 95       	ret

00001962 <rand_r>:
    1962:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <do_rand>
    1966:	08 95       	ret

00001968 <rand>:
    1968:	87 e0       	ldi	r24, 0x07	; 7
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <do_rand>
    1970:	08 95       	ret

00001972 <srand>:
    1972:	a0 e0       	ldi	r26, 0x00	; 0
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	80 93 07 01 	sts	0x0107, r24
    197a:	90 93 08 01 	sts	0x0108, r25
    197e:	a0 93 09 01 	sts	0x0109, r26
    1982:	b0 93 0a 01 	sts	0x010A, r27
    1986:	08 95       	ret

00001988 <eeprom_read_byte>:
    1988:	f9 99       	sbic	0x1f, 1	; 31
    198a:	fe cf       	rjmp	.-4      	; 0x1988 <eeprom_read_byte>
    198c:	92 bd       	out	0x22, r25	; 34
    198e:	81 bd       	out	0x21, r24	; 33
    1990:	f8 9a       	sbi	0x1f, 0	; 31
    1992:	99 27       	eor	r25, r25
    1994:	80 b5       	in	r24, 0x20	; 32
    1996:	08 95       	ret

00001998 <eeprom_write_byte>:
    1998:	26 2f       	mov	r18, r22

0000199a <eeprom_write_r18>:
    199a:	f9 99       	sbic	0x1f, 1	; 31
    199c:	fe cf       	rjmp	.-4      	; 0x199a <eeprom_write_r18>
    199e:	1f ba       	out	0x1f, r1	; 31
    19a0:	92 bd       	out	0x22, r25	; 34
    19a2:	81 bd       	out	0x21, r24	; 33
    19a4:	20 bd       	out	0x20, r18	; 32
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	fa 9a       	sbi	0x1f, 2	; 31
    19ac:	f9 9a       	sbi	0x1f, 1	; 31
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	08 95       	ret

000019b4 <__divmodsi4>:
    19b4:	05 2e       	mov	r0, r21
    19b6:	97 fb       	bst	r25, 7
    19b8:	1e f4       	brtc	.+6      	; 0x19c0 <__divmodsi4+0xc>
    19ba:	00 94       	com	r0
    19bc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__negsi2>
    19c0:	57 fd       	sbrc	r21, 7
    19c2:	07 d0       	rcall	.+14     	; 0x19d2 <__divmodsi4_neg2>
    19c4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__udivmodsi4>
    19c8:	07 fc       	sbrc	r0, 7
    19ca:	03 d0       	rcall	.+6      	; 0x19d2 <__divmodsi4_neg2>
    19cc:	4e f4       	brtc	.+18     	; 0x19e0 <__divmodsi4_exit>
    19ce:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__negsi2>

000019d2 <__divmodsi4_neg2>:
    19d2:	50 95       	com	r21
    19d4:	40 95       	com	r20
    19d6:	30 95       	com	r19
    19d8:	21 95       	neg	r18
    19da:	3f 4f       	sbci	r19, 0xFF	; 255
    19dc:	4f 4f       	sbci	r20, 0xFF	; 255
    19de:	5f 4f       	sbci	r21, 0xFF	; 255

000019e0 <__divmodsi4_exit>:
    19e0:	08 95       	ret

000019e2 <__negsi2>:
    19e2:	90 95       	com	r25
    19e4:	80 95       	com	r24
    19e6:	70 95       	com	r23
    19e8:	61 95       	neg	r22
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	8f 4f       	sbci	r24, 0xFF	; 255
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	08 95       	ret

000019f2 <__muluhisi3>:
    19f2:	0e 94 35 0a 	call	0x146a	; 0x146a <__umulhisi3>
    19f6:	a5 9f       	mul	r26, r21
    19f8:	90 0d       	add	r25, r0
    19fa:	b4 9f       	mul	r27, r20
    19fc:	90 0d       	add	r25, r0
    19fe:	a4 9f       	mul	r26, r20
    1a00:	80 0d       	add	r24, r0
    1a02:	91 1d       	adc	r25, r1
    1a04:	11 24       	eor	r1, r1
    1a06:	08 95       	ret

00001a08 <__mulshisi3>:
    1a08:	b7 ff       	sbrs	r27, 7
    1a0a:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__muluhisi3>

00001a0e <__mulohisi3>:
    1a0e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__muluhisi3>
    1a12:	82 1b       	sub	r24, r18
    1a14:	93 0b       	sbc	r25, r19
    1a16:	08 95       	ret

00001a18 <__udivmodsi4>:
    1a18:	a1 e2       	ldi	r26, 0x21	; 33
    1a1a:	1a 2e       	mov	r1, r26
    1a1c:	aa 1b       	sub	r26, r26
    1a1e:	bb 1b       	sub	r27, r27
    1a20:	fd 01       	movw	r30, r26
    1a22:	0d c0       	rjmp	.+26     	; 0x1a3e <__udivmodsi4_ep>

00001a24 <__udivmodsi4_loop>:
    1a24:	aa 1f       	adc	r26, r26
    1a26:	bb 1f       	adc	r27, r27
    1a28:	ee 1f       	adc	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	a2 17       	cp	r26, r18
    1a2e:	b3 07       	cpc	r27, r19
    1a30:	e4 07       	cpc	r30, r20
    1a32:	f5 07       	cpc	r31, r21
    1a34:	20 f0       	brcs	.+8      	; 0x1a3e <__udivmodsi4_ep>
    1a36:	a2 1b       	sub	r26, r18
    1a38:	b3 0b       	sbc	r27, r19
    1a3a:	e4 0b       	sbc	r30, r20
    1a3c:	f5 0b       	sbc	r31, r21

00001a3e <__udivmodsi4_ep>:
    1a3e:	66 1f       	adc	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	88 1f       	adc	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	1a 94       	dec	r1
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <__udivmodsi4_loop>
    1a4a:	60 95       	com	r22
    1a4c:	70 95       	com	r23
    1a4e:	80 95       	com	r24
    1a50:	90 95       	com	r25
    1a52:	9b 01       	movw	r18, r22
    1a54:	ac 01       	movw	r20, r24
    1a56:	bd 01       	movw	r22, r26
    1a58:	cf 01       	movw	r24, r30
    1a5a:	08 95       	ret

00001a5c <_exit>:
    1a5c:	f8 94       	cli

00001a5e <__stop_program>:
    1a5e:	ff cf       	rjmp	.-2      	; 0x1a5e <__stop_program>
