
build/test_listener.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	de 01       	movw	r26, r28
      6a:	5a 02       	muls	r21, r26
      6c:	b2 01       	movw	r22, r4
      6e:	a9 01       	movw	r20, r18
      70:	af 01       	movw	r20, r30
      72:	3c 02       	muls	r19, r28
      74:	31 02       	muls	r19, r17
      76:	bc 08       	sbc	r11, r12
      78:	99 07       	cpc	r25, r25
      7a:	99 07       	cpc	r25, r25
      7c:	b9 08       	sbc	r11, r9
      7e:	c5 08       	sbc	r12, r5
      80:	b5 08       	sbc	r11, r5
      82:	cc 08       	sbc	r12, r12
      84:	c8 08       	sbc	r12, r8
      86:	d0 08       	sbc	r13, r0
      88:	88 08       	sbc	r8, r8
      8a:	5a 08       	sbc	r5, r10

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e5       	ldi	r30, 0x50	; 80
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 37       	cpi	r26, 0x70	; 112
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 02 0a 	call	0x1404	; 0x1404 <main>
      da:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:

// Flag to keep track of new messages.
int new_message = 0;

void setup()
{
      e2:	08 95       	ret

000000e4 <message_rx>:
}

void message_rx(message_t *message, distance_measurement_t *distance)
{
    // Set the flag on message reception.
    new_message = 1;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	90 93 0d 01 	sts	0x010D, r25
      ec:	80 93 0c 01 	sts	0x010C, r24
      f0:	08 95       	ret

000000f2 <loop>:
}

void loop()
{
    // Blink the LED yellow whenever a message is received.
    if (new_message == 1)
      f2:	80 91 0c 01 	lds	r24, 0x010C
      f6:	90 91 0d 01 	lds	r25, 0x010D
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	09 f0       	breq	.+2      	; 0x100 <loop+0xe>
      fe:	08 95       	ret
    {
        // Reset the flag so the LED is only blinked once per message.
        new_message = 0;
     100:	10 92 0d 01 	sts	0x010D, r1
     104:	10 92 0c 01 	sts	0x010C, r1
        
        set_color(RGB(1, 1, 0));
     108:	85 e0       	ldi	r24, 0x05	; 5
     10a:	0e 94 13 07 	call	0xe26	; 0xe26 <set_color>
        delay(100);
     10e:	84 e6       	ldi	r24, 0x64	; 100
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 e7 02 	call	0x5ce	; 0x5ce <delay>
        set_color(RGB(0, 0, 0));
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0c 94 13 07 	jmp	0xe26	; 0xe26 <set_color>

0000011c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     11c:	08 95       	ret

0000011e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     124:	08 95       	ret

00000126 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
    cli();
     134:	f8 94       	cli

    ports_off();
     136:	14 b8       	out	0x04, r1	; 4
     138:	17 b8       	out	0x07, r1	; 7
     13a:	1a b8       	out	0x0a, r1	; 10
     13c:	15 b8       	out	0x05, r1	; 5
     13e:	18 b8       	out	0x08, r1	; 8
     140:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     142:	52 9a       	sbi	0x0a, 2	; 10
     144:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     146:	14 bc       	out	0x24, r1	; 36
     148:	85 e0       	ldi	r24, 0x05	; 5
     14a:	85 bd       	out	0x25, r24	; 37
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	87 bd       	out	0x27, r24	; 39
     150:	82 e0       	ldi	r24, 0x02	; 2
     152:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     156:	10 92 80 00 	sts	0x0080, r1
     15a:	10 92 81 00 	sts	0x0081, r1
     15e:	2f e8       	ldi	r18, 0x8F	; 143
     160:	3b e0       	ldi	r19, 0x0B	; 11
     162:	30 93 89 00 	sts	0x0089, r19
     166:	20 93 88 00 	sts	0x0088, r18
     16a:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     16e:	53 98       	cbi	0x0a, 3	; 10
     170:	23 98       	cbi	0x04, 3	; 4
     172:	91 ea       	ldi	r25, 0xA1	; 161
     174:	90 93 b0 00 	sts	0x00B0, r25
     178:	80 93 b1 00 	sts	0x00B1, r24
     17c:	10 92 b4 00 	sts	0x00B4, r1
     180:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     184:	8b e0       	ldi	r24, 0x0B	; 11
     186:	80 bf       	out	0x30, r24	; 48
     188:	83 e0       	ldi	r24, 0x03	; 3
     18a:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     18e:	86 e0       	ldi	r24, 0x06	; 6
     190:	80 93 7c 00 	sts	0x007C, r24
     194:	83 e8       	ldi	r24, 0x83	; 131
     196:	80 93 7a 00 	sts	0x007A, r24
     19a:	80 91 7a 00 	lds	r24, 0x007A
     19e:	80 64       	ori	r24, 0x40	; 64
     1a0:	80 93 7a 00 	sts	0x007A, r24
     1a4:	80 91 7a 00 	lds	r24, 0x007A
     1a8:	86 fd       	sbrc	r24, 6
     1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1ac:	10 92 7c 00 	sts	0x007C, r1
     1b0:	83 ea       	ldi	r24, 0xA3	; 163
     1b2:	80 93 7a 00 	sts	0x007A, r24
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
    if (osccal != 0xFF)
     1c4:	8f 3f       	cpi	r24, 0xFF	; 255
     1c6:	11 f0       	breq	.+4      	; 0x1cc <kilo_init+0xa6>
        OSCCAL = osccal;
     1c8:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1cc:	10 92 39 01 	sts	0x0139, r1
    rx_leadingbit = 1;
     1d0:	c1 e0       	ldi	r28, 0x01	; 1
     1d2:	c0 93 12 01 	sts	0x0112, r28
    rx_leadingbyte = 1;
     1d6:	c0 93 56 01 	sts	0x0156, r28
    rx_byteindex = 0;
     1da:	10 92 30 01 	sts	0x0130, r1
    rx_bytevalue = 0;
     1de:	10 92 6a 01 	sts	0x016A, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1e2:	80 e9       	ldi	r24, 0x90	; 144
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     1ea:	80 93 2f 01 	sts	0x012F, r24
    if (tx_mask & ~TX_MASK_MAX)
     1ee:	80 91 2f 01 	lds	r24, 0x012F
     1f2:	88 73       	andi	r24, 0x38	; 56
     1f4:	11 f0       	breq	.+4      	; 0x1fa <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1f6:	c0 93 2f 01 	sts	0x012F, r28
    tx_clock = 0;
     1fa:	10 92 5a 01 	sts	0x015A, r1
     1fe:	10 92 59 01 	sts	0x0159, r1
    tx_increment = 255;
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	90 93 58 01 	sts	0x0158, r25
     20a:	80 93 57 01 	sts	0x0157, r24
    kilo_ticks = 0;
     20e:	10 92 35 01 	sts	0x0135, r1
     212:	10 92 36 01 	sts	0x0136, r1
     216:	10 92 37 01 	sts	0x0137, r1
     21a:	10 92 38 01 	sts	0x0138, r1
    kilo_state = IDLE;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 11 01 	sts	0x0111, r24
    kilo_tx_period = 3906;
     224:	82 e4       	ldi	r24, 0x42	; 66
     226:	9f e0       	ldi	r25, 0x0F	; 15
     228:	90 93 69 01 	sts	0x0169, r25
     22c:	80 93 68 01 	sts	0x0168, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     230:	80 eb       	ldi	r24, 0xB0	; 176
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     238:	c8 2f       	mov	r28, r24
     23a:	81 eb       	ldi	r24, 0xB1	; 177
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     242:	2c 2f       	mov	r18, r28
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	38 2b       	or	r19, r24
     248:	30 93 6c 01 	sts	0x016C, r19
     24c:	20 93 6b 01 	sts	0x016B, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     250:	85 e0       	ldi	r24, 0x05	; 5
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     258:	80 93 6f 01 	sts	0x016F, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     25c:	89 e0       	ldi	r24, 0x09	; 9
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     264:	80 93 5b 01 	sts	0x015B, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     268:	8c e0       	ldi	r24, 0x0C	; 12
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     270:	80 93 6d 01 	sts	0x016D, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     274:	84 e1       	ldi	r24, 0x14	; 20
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     27c:	80 93 6e 01 	sts	0x016E, r24
     280:	5a e3       	ldi	r21, 0x3A	; 58
     282:	e5 2e       	mov	r14, r21
     284:	51 e0       	ldi	r21, 0x01	; 1
     286:	f5 2e       	mov	r15, r21
     288:	03 e1       	ldi	r16, 0x13	; 19
     28a:	11 e0       	ldi	r17, 0x01	; 1
     28c:	c0 e2       	ldi	r28, 0x20	; 32
     28e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     290:	ce 01       	movw	r24, r28
     292:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     296:	d8 2e       	mov	r13, r24
     298:	ce 01       	movw	r24, r28
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     2a0:	2d 2d       	mov	r18, r13
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	32 2f       	mov	r19, r18
     2a6:	22 27       	eor	r18, r18
     2a8:	28 2b       	or	r18, r24
     2aa:	f7 01       	movw	r30, r14
     2ac:	21 93       	st	Z+, r18
     2ae:	31 93       	st	Z+, r19
     2b0:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2b2:	ce 01       	movw	r24, r28
     2b4:	c0 96       	adiw	r24, 0x30	; 48
     2b6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     2ba:	d8 2e       	mov	r13, r24
     2bc:	ce 01       	movw	r24, r28
     2be:	c1 96       	adiw	r24, 0x31	; 49
     2c0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <eeprom_read_byte>
     2c4:	2d 2d       	mov	r18, r13
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	32 2f       	mov	r19, r18
     2ca:	22 27       	eor	r18, r18
     2cc:	28 2b       	or	r18, r24
     2ce:	f8 01       	movw	r30, r16
     2d0:	21 93       	st	Z+, r18
     2d2:	31 93       	st	Z+, r19
     2d4:	8f 01       	movw	r16, r30
     2d6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2d8:	cc 33       	cpi	r28, 0x3C	; 60
     2da:	d1 05       	cpc	r29, r1
     2dc:	c9 f6       	brne	.-78     	; 0x290 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2de:	78 94       	sei
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	08 95       	ret

000002f0 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	8f 93       	push	r24
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	a8 95       	wdr
     302:	80 91 60 00 	lds	r24, 0x0060
     306:	88 61       	ori	r24, 0x18	; 24
     308:	80 93 60 00 	sts	0x0060, r24
     30c:	10 92 60 00 	sts	0x0060, r1
     310:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     312:	8f 91       	pop	r24
     314:	0f 90       	pop	r0
     316:	0f be       	out	0x3f, r0	; 63
     318:	0f 90       	pop	r0
     31a:	1f 90       	pop	r1
     31c:	18 95       	reti

0000031e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     31e:	3c 01       	movw	r6, r24
     320:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     322:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     324:	99 24       	eor	r9, r9
     326:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     328:	84 e0       	ldi	r24, 0x04	; 4
     32a:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     32c:	96 e0       	ldi	r25, 0x06	; 6
     32e:	a9 2e       	mov	r10, r25
     330:	23 e8       	ldi	r18, 0x83	; 131
     332:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     334:	38 e1       	ldi	r19, 0x18	; 24
     336:	d3 2e       	mov	r13, r19
     338:	49 e2       	ldi	r20, 0x29	; 41
     33a:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     33c:	90 91 11 01 	lds	r25, 0x0111
     340:	e9 2f       	mov	r30, r25
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	e7 30       	cpi	r30, 0x07	; 7
     346:	f1 05       	cpc	r31, r1
     348:	c8 f7       	brcc	.-14     	; 0x33c <kilo_start+0x1e>
     34a:	ec 5c       	subi	r30, 0xCC	; 204
     34c:	ff 4f       	sbci	r31, 0xFF	; 255
     34e:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     352:	11 23       	and	r17, r17
     354:	09 f4       	brne	.+2      	; 0x358 <kilo_start+0x3a>
     356:	fc c0       	rjmp	.+504    	; 0x550 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     358:	c0 92 11 01 	sts	0x0111, r12
     35c:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     35e:	fe 01       	movw	r30, r28
     360:	09 95       	icall
                break;
     362:	ec cf       	rjmp	.-40     	; 0x33c <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     364:	80 91 39 01 	lds	r24, 0x0139
     368:	81 11       	cpse	r24, r1
     36a:	eb c0       	rjmp	.+470    	; 0x542 <kilo_start+0x224>
        cli();                                    // disable interrupts
     36c:	f8 94       	cli
        adc_setup_conversion(6);
     36e:	a0 92 7c 00 	sts	0x007C, r10
     372:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     376:	80 91 7a 00 	lds	r24, 0x007A
     37a:	80 64       	ori	r24, 0x40	; 64
     37c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     380:	90 91 7a 00 	lds	r25, 0x007A
     384:	96 fd       	sbrc	r25, 6
     386:	fc cf       	rjmp	.-8      	; 0x380 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     388:	80 91 78 00 	lds	r24, 0x0078
     38c:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     390:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     392:	8b 3a       	cpi	r24, 0xAB	; 171
     394:	e2 e0       	ldi	r30, 0x02	; 2
     396:	9e 07       	cpc	r25, r30
     398:	0c f0       	brlt	.+2      	; 0x39c <kilo_start+0x7e>
     39a:	ed c0       	rjmp	.+474    	; 0x576 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     39c:	89 38       	cpi	r24, 0x89	; 137
     39e:	f2 e0       	ldi	r31, 0x02	; 2
     3a0:	9f 07       	cpc	r25, r31
     3a2:	0c f0       	brlt	.+2      	; 0x3a6 <kilo_start+0x88>
     3a4:	ef c0       	rjmp	.+478    	; 0x584 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3a6:	87 36       	cpi	r24, 0x67	; 103
     3a8:	92 40       	sbci	r25, 0x02	; 2
     3aa:	0c f4       	brge	.+2      	; 0x3ae <kilo_start+0x90>
     3ac:	ca c0       	rjmp	.+404    	; 0x542 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3ae:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3b0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3b2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3b4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3b6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3b8:	3c 98       	cbi	0x07, 4	; 7
     3ba:	c0 cf       	rjmp	.-128    	; 0x33c <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3bc:	f8 94       	cli
                acomp_off();
     3be:	80 b7       	in	r24, 0x30	; 48
     3c0:	87 7f       	andi	r24, 0xF7	; 247
     3c2:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3c4:	80 91 7a 00 	lds	r24, 0x007A
     3c8:	8f 77       	andi	r24, 0x7F	; 127
     3ca:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3ce:	14 b8       	out	0x04, r1	; 4
     3d0:	17 b8       	out	0x07, r1	; 7
     3d2:	1a b8       	out	0x0a, r1	; 10
     3d4:	15 b8       	out	0x05, r1	; 5
     3d6:	18 b8       	out	0x08, r1	; 8
     3d8:	1b b8       	out	0x0b, r1	; 11
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	a8 95       	wdr
     3e0:	d0 92 60 00 	sts	0x0060, r13
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     3ea:	80 91 60 00 	lds	r24, 0x0060
     3ee:	80 64       	ori	r24, 0x40	; 64
     3f0:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     3f4:	93 b7       	in	r25, 0x33	; 51
     3f6:	91 7f       	andi	r25, 0xF1	; 241
     3f8:	94 60       	ori	r25, 0x04	; 4
     3fa:	93 bf       	out	0x33, r25	; 51
                cli();
     3fc:	f8 94       	cli
                sleep_enable();
     3fe:	83 b7       	in	r24, 0x33	; 51
     400:	81 60       	ori	r24, 0x01	; 1
     402:	83 bf       	out	0x33, r24	; 51
                sei();
     404:	78 94       	sei
                sleep_cpu();
     406:	88 95       	sleep
                sleep_disable();
     408:	83 b7       	in	r24, 0x33	; 51
     40a:	8e 7f       	andi	r24, 0xFE	; 254
     40c:	83 bf       	out	0x33, r24	; 51
                sei();
     40e:	78 94       	sei
                rx_busy = 0;
     410:	10 92 39 01 	sts	0x0139, r1
                ports_on();
     414:	52 9a       	sbi	0x0a, 2	; 10
     416:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     418:	80 91 7a 00 	lds	r24, 0x007A
     41c:	80 68       	ori	r24, 0x80	; 128
     41e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     422:	87 e5       	ldi	r24, 0x57	; 87
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <kilo_start+0x108>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <kilo_start+0x10e>
     42c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     42e:	80 b7       	in	r24, 0x30	; 48
     430:	88 61       	ori	r24, 0x18	; 24
     432:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     434:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     436:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     438:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     43a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     43c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     43e:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     440:	ef e1       	ldi	r30, 0x1F	; 31
     442:	fe e4       	ldi	r31, 0x4E	; 78
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <kilo_start+0x126>
     448:	00 c0       	rjmp	.+0      	; 0x44a <kilo_start+0x12c>
     44a:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     44c:	80 91 39 01 	lds	r24, 0x0139
     450:	81 11       	cpse	r24, r1
     452:	81 c0       	rjmp	.+258    	; 0x556 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     454:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     456:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     458:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     45a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     45c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     45e:	3c 98       	cbi	0x07, 4	; 7
     460:	6d cf       	rjmp	.-294    	; 0x33c <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     462:	80 91 0f 01 	lds	r24, 0x010F
     466:	81 11       	cpse	r24, r1
     468:	41 c0       	rjmp	.+130    	; 0x4ec <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     46a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     46e:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     472:	10 92 10 01 	sts	0x0110, r1
     476:	62 cf       	rjmp	.-316    	; 0x33c <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     478:	48 99       	sbic	0x09, 0	; 9
     47a:	ec cf       	rjmp	.-40     	; 0x454 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     47c:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     47e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     480:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     482:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     484:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     486:	3c 98       	cbi	0x07, 4	; 7
     488:	8f ec       	ldi	r24, 0xCF	; 207
     48a:	97 e0       	ldi	r25, 0x07	; 7
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <kilo_start+0x16e>
     490:	00 c0       	rjmp	.+0      	; 0x492 <kilo_start+0x174>
     492:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     494:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     496:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     498:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     49a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     49c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     49e:	3c 98       	cbi	0x07, 4	; 7
     4a0:	9f ef       	ldi	r25, 0xFF	; 255
     4a2:	e1 ee       	ldi	r30, 0xE1	; 225
     4a4:	f4 e0       	ldi	r31, 0x04	; 4
     4a6:	91 50       	subi	r25, 0x01	; 1
     4a8:	e0 40       	sbci	r30, 0x00	; 0
     4aa:	f0 40       	sbci	r31, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <kilo_start+0x188>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <kilo_start+0x192>
     4b0:	00 00       	nop
     4b2:	44 cf       	rjmp	.-376    	; 0x33c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4b4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4b6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4b8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4ba:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4bc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4be:	3c 98       	cbi	0x07, 4	; 7
     4c0:	ef ec       	ldi	r30, 0xCF	; 207
     4c2:	f7 e0       	ldi	r31, 0x07	; 7
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <kilo_start+0x1a6>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <kilo_start+0x1ac>
     4ca:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4cc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ce:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4d0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4d2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4d4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4d6:	3c 98       	cbi	0x07, 4	; 7
     4d8:	ff ef       	ldi	r31, 0xFF	; 255
     4da:	21 ee       	ldi	r18, 0xE1	; 225
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	f1 50       	subi	r31, 0x01	; 1
     4e0:	20 40       	sbci	r18, 0x00	; 0
     4e2:	80 40       	sbci	r24, 0x00	; 0
     4e4:	e1 f7       	brne	.-8      	; 0x4de <kilo_start+0x1c0>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <kilo_start+0x1ca>
     4e8:	00 00       	nop
     4ea:	28 cf       	rjmp	.-432    	; 0x33c <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4ec:	90 91 0f 01 	lds	r25, 0x010F
     4f0:	80 91 10 01 	lds	r24, 0x0110
     4f4:	98 17       	cp	r25, r24
     4f6:	09 f4       	brne	.+2      	; 0x4fa <kilo_start+0x1dc>
     4f8:	21 cf       	rjmp	.-446    	; 0x33c <kilo_start+0x1e>
                        prev_motion = cur_motion;
     4fa:	80 91 0f 01 	lds	r24, 0x010F
     4fe:	80 93 10 01 	sts	0x0110, r24
                        if (cur_motion == MOVE_LEFT) {
     502:	80 91 0f 01 	lds	r24, 0x010F
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	09 f4       	brne	.+2      	; 0x50c <kilo_start+0x1ee>
     50a:	50 c0       	rjmp	.+160    	; 0x5ac <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     50c:	80 91 0f 01 	lds	r24, 0x010F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     510:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     514:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	d9 f1       	breq	.+118    	; 0x592 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     51c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     520:	90 92 b4 00 	sts	0x00B4, r9
     524:	8f e2       	ldi	r24, 0x2F	; 47
     526:	95 e7       	ldi	r25, 0x75	; 117
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <kilo_start+0x20a>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <kilo_start+0x210>
     52e:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     530:	80 91 6e 01 	lds	r24, 0x016E
     534:	90 91 6d 01 	lds	r25, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     538:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     53c:	80 93 b4 00 	sts	0x00B4, r24
     540:	fd ce       	rjmp	.-518    	; 0x33c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     542:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     544:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     546:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     548:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     54a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     54c:	3c 98       	cbi	0x07, 4	; 7
     54e:	f6 ce       	rjmp	.-532    	; 0x33c <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     550:	f3 01       	movw	r30, r6
     552:	09 95       	icall
     554:	01 cf       	rjmp	.-510    	; 0x358 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     556:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     558:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     55a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     55c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     55e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     560:	3c 98       	cbi	0x07, 4	; 7
     562:	ff ef       	ldi	r31, 0xFF	; 255
     564:	20 e7       	ldi	r18, 0x70	; 112
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	f1 50       	subi	r31, 0x01	; 1
     56a:	20 40       	sbci	r18, 0x00	; 0
     56c:	80 40       	sbci	r24, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <kilo_start+0x24a>
     570:	00 c0       	rjmp	.+0      	; 0x572 <kilo_start+0x254>
     572:	00 00       	nop
     574:	6f cf       	rjmp	.-290    	; 0x454 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     576:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     578:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     57a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     57c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     57e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     580:	3c 98       	cbi	0x07, 4	; 7
     582:	dc ce       	rjmp	.-584    	; 0x33c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     584:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     586:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     588:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     58a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     58c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     58e:	3c 9a       	sbi	0x07, 4	; 7
     590:	d5 ce       	rjmp	.-598    	; 0x33c <kilo_start+0x1e>
     592:	ef e2       	ldi	r30, 0x2F	; 47
     594:	f5 e7       	ldi	r31, 0x75	; 117
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <kilo_start+0x278>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <kilo_start+0x27e>
     59c:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     59e:	80 91 5b 01 	lds	r24, 0x015B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5a2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5a6:	80 93 b4 00 	sts	0x00B4, r24
     5aa:	c8 ce       	rjmp	.-624    	; 0x33c <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ac:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5b0:	10 92 b4 00 	sts	0x00B4, r1
     5b4:	8f e2       	ldi	r24, 0x2F	; 47
     5b6:	95 e7       	ldi	r25, 0x75	; 117
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <kilo_start+0x29a>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <kilo_start+0x2a0>
     5be:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5c0:	80 91 6f 01 	lds	r24, 0x016F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5c8:	10 92 b4 00 	sts	0x00B4, r1
     5cc:	b7 ce       	rjmp	.-658    	; 0x33c <kilo_start+0x1e>

000005ce <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5ce:	07 c0       	rjmp	.+14     	; 0x5de <delay+0x10>
     5d0:	ef ec       	ldi	r30, 0xCF	; 207
     5d2:	f7 e0       	ldi	r31, 0x07	; 7
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <delay+0x6>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <delay+0xc>
     5da:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5dc:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	b9 f7       	brne	.-18     	; 0x5d0 <delay+0x2>
     5e2:	08 95       	ret

000005e4 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5e8:	60 93 b4 00 	sts	0x00B4, r22
     5ec:	08 95       	ret

000005ee <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5f4:	80 93 b4 00 	sts	0x00B4, r24
     5f8:	8f e0       	ldi	r24, 0x0F	; 15
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	ef ec       	ldi	r30, 0xCF	; 207
     5fe:	f7 e0       	ldi	r31, 0x07	; 7
     600:	31 97       	sbiw	r30, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <spinup_motors+0x12>
     604:	00 c0       	rjmp	.+0      	; 0x606 <spinup_motors+0x18>
     606:	00 00       	nop
     608:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     60a:	c1 f7       	brne	.-16     	; 0x5fc <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     60c:	08 95       	ret

0000060e <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     60e:	80 91 39 01 	lds	r24, 0x0139
     612:	81 11       	cpse	r24, r1
     614:	1e c0       	rjmp	.+60     	; 0x652 <get_ambientlight+0x44>
        cli();
     616:	f8 94       	cli
        adc_setup_conversion(7);
     618:	87 e0       	ldi	r24, 0x07	; 7
     61a:	80 93 7c 00 	sts	0x007C, r24
     61e:	83 e8       	ldi	r24, 0x83	; 131
     620:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     624:	80 91 7a 00 	lds	r24, 0x007A
     628:	80 64       	ori	r24, 0x40	; 64
     62a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     62e:	80 91 7a 00 	lds	r24, 0x007A
     632:	86 fd       	sbrc	r24, 6
     634:	fc cf       	rjmp	.-8      	; 0x62e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     636:	80 91 78 00 	lds	r24, 0x0078
     63a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     63e:	10 92 7c 00 	sts	0x007C, r1
     642:	23 ea       	ldi	r18, 0xA3	; 163
     644:	20 93 7a 00 	sts	0x007A, r18
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     64e:	78 94       	sei
     650:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     656:	08 95       	ret

00000658 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     658:	80 91 39 01 	lds	r24, 0x0139
     65c:	81 11       	cpse	r24, r1
     65e:	1e c0       	rjmp	.+60     	; 0x69c <get_temperature+0x44>
        cli();
     660:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     662:	88 ec       	ldi	r24, 0xC8	; 200
     664:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     668:	87 e8       	ldi	r24, 0x87	; 135
     66a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     66e:	80 91 7a 00 	lds	r24, 0x007A
     672:	80 64       	ori	r24, 0x40	; 64
     674:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     678:	80 91 7a 00 	lds	r24, 0x007A
     67c:	86 fd       	sbrc	r24, 6
     67e:	fc cf       	rjmp	.-8      	; 0x678 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     680:	80 91 78 00 	lds	r24, 0x0078
     684:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     688:	10 92 7c 00 	sts	0x007C, r1
     68c:	23 ea       	ldi	r18, 0xA3	; 163
     68e:	20 93 7a 00 	sts	0x007A, r18
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     698:	78 94       	sei
     69a:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6a0:	08 95       	ret

000006a2 <rand_hard>:

uint8_t rand_hard() {
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	e0 e0       	ldi	r30, 0x00	; 0
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6b0:	03 ea       	ldi	r16, 0xA3	; 163
     6b2:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6b4:	d6 e0       	ldi	r29, 0x06	; 6
     6b6:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6b8:	a1 e0       	ldi	r26, 0x01	; 1
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6bc:	60 e8       	ldi	r22, 0x80	; 128
     6be:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6c0:	f8 94       	cli
            adc_setup_conversion(6);
     6c2:	d0 93 7c 00 	sts	0x007C, r29
     6c6:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6ca:	90 91 7a 00 	lds	r25, 0x007A
     6ce:	90 64       	ori	r25, 0x40	; 64
     6d0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6d4:	90 91 7a 00 	lds	r25, 0x007A
     6d8:	96 fd       	sbrc	r25, 6
     6da:	fc cf       	rjmp	.-8      	; 0x6d4 <rand_hard+0x32>
            a = ADCW&0x1;
     6dc:	20 91 78 00 	lds	r18, 0x0078
     6e0:	30 91 79 00 	lds	r19, 0x0079
     6e4:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     6e6:	90 91 7a 00 	lds	r25, 0x007A
     6ea:	90 64       	ori	r25, 0x40	; 64
     6ec:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6f0:	90 91 7a 00 	lds	r25, 0x007A
     6f4:	96 fd       	sbrc	r25, 6
     6f6:	fc cf       	rjmp	.-8      	; 0x6f0 <rand_hard+0x4e>
            b = ADCW&0x1;
     6f8:	40 91 78 00 	lds	r20, 0x0078
     6fc:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     700:	10 92 7c 00 	sts	0x007C, r1
     704:	00 93 7a 00 	sts	0x007A, r16
     708:	10 93 7b 00 	sts	0x007B, r17
            sei();
     70c:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     70e:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     710:	24 13       	cpse	r18, r20
     712:	03 c0       	rjmp	.+6      	; 0x71a <rand_hard+0x78>
     714:	61 50       	subi	r22, 0x01	; 1
     716:	71 09       	sbc	r23, r1
     718:	99 f6       	brne	.-90     	; 0x6c0 <rand_hard+0x1e>
        if (a)
     71a:	22 23       	and	r18, r18
     71c:	39 f0       	breq	.+14     	; 0x72c <rand_hard+0x8a>
            num |= (1<<i);
     71e:	9d 01       	movw	r18, r26
     720:	0e 2e       	mov	r0, r30
     722:	01 c0       	rjmp	.+2      	; 0x726 <rand_hard+0x84>
     724:	22 0f       	add	r18, r18
     726:	0a 94       	dec	r0
     728:	ea f7       	brpl	.-6      	; 0x724 <rand_hard+0x82>
     72a:	82 2b       	or	r24, r18
     72c:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     72e:	e8 30       	cpi	r30, 0x08	; 8
     730:	f1 05       	cpc	r31, r1
     732:	09 f0       	breq	.+2      	; 0x736 <rand_hard+0x94>
     734:	c3 cf       	rjmp	.-122    	; 0x6bc <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     740:	80 91 00 01 	lds	r24, 0x0100
     744:	98 2f       	mov	r25, r24
     746:	99 0f       	add	r25, r25
     748:	99 0f       	add	r25, r25
     74a:	99 0f       	add	r25, r25
     74c:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     74e:	90 91 0e 01 	lds	r25, 0x010E
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	29 0f       	add	r18, r25
     756:	20 93 0e 01 	sts	0x010E, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     75a:	28 2f       	mov	r18, r24
     75c:	22 95       	swap	r18
     75e:	26 95       	lsr	r18
     760:	27 70       	andi	r18, 0x07	; 7
     762:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     764:	96 95       	lsr	r25
     766:	96 95       	lsr	r25
     768:	89 27       	eor	r24, r25
     76a:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     76e:	08 95       	ret

00000770 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     770:	80 93 00 01 	sts	0x0100, r24
     774:	08 95       	ret

00000776 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     776:	80 91 39 01 	lds	r24, 0x0139
     77a:	81 11       	cpse	r24, r1
     77c:	16 c0       	rjmp	.+44     	; 0x7aa <get_voltage+0x34>
        cli();                                    // disable interrupts
     77e:	f8 94       	cli
        adc_setup_conversion(6);
     780:	86 e0       	ldi	r24, 0x06	; 6
     782:	80 93 7c 00 	sts	0x007C, r24
     786:	83 e8       	ldi	r24, 0x83	; 131
     788:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     78c:	80 91 7a 00 	lds	r24, 0x007A
     790:	80 64       	ori	r24, 0x40	; 64
     792:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     796:	80 91 7a 00 	lds	r24, 0x007A
     79a:	86 fd       	sbrc	r24, 6
     79c:	fc cf       	rjmp	.-8      	; 0x796 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     79e:	80 91 78 00 	lds	r24, 0x0078
     7a2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7a6:	78 94       	sei
     7a8:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7ae:	08 95       	ret

000007b0 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7b0:	2f 92       	push	r2
     7b2:	3f 92       	push	r3
     7b4:	4f 92       	push	r4
     7b6:	5f 92       	push	r5
     7b8:	6f 92       	push	r6
     7ba:	7f 92       	push	r7
     7bc:	8f 92       	push	r8
     7be:	9f 92       	push	r9
     7c0:	af 92       	push	r10
     7c2:	bf 92       	push	r11
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <estimate_distance+0x26>
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <estimate_distance+0x28>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <estimate_distance+0x2a>
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7e0:	dc 01       	movw	r26, r24
     7e2:	12 96       	adiw	r26, 0x02	; 2
     7e4:	0d 90       	ld	r0, X+
     7e6:	bc 91       	ld	r27, X
     7e8:	a0 2d       	mov	r26, r0
     7ea:	be 83       	std	Y+6, r27	; 0x06
     7ec:	ad 83       	std	Y+5, r26	; 0x05
     7ee:	a4 38       	cpi	r26, 0x84	; 132
     7f0:	e3 e0       	ldi	r30, 0x03	; 3
     7f2:	be 07       	cpc	r27, r30
     7f4:	0c f0       	brlt	.+2      	; 0x7f8 <estimate_distance+0x48>
     7f6:	c9 c0       	rjmp	.+402    	; 0x98a <__stack+0x8b>
        if (dist->high_gain > kilo_irhigh[0]) {
     7f8:	80 91 13 01 	lds	r24, 0x0113
     7fc:	90 91 14 01 	lds	r25, 0x0114
     800:	8a 17       	cp	r24, r26
     802:	9b 07       	cpc	r25, r27
     804:	08 f4       	brcc	.+2      	; 0x808 <estimate_distance+0x58>
     806:	37 c1       	rjmp	.+622    	; 0xa76 <__stack+0x177>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     808:	00 91 15 01 	lds	r16, 0x0115
     80c:	10 91 16 01 	lds	r17, 0x0116
     810:	0a 17       	cp	r16, r26
     812:	1b 07       	cpc	r17, r27
     814:	08 f4       	brcc	.+2      	; 0x818 <estimate_distance+0x68>
     816:	2f c2       	rjmp	.+1118   	; 0xc76 <__stack+0x377>
     818:	00 91 17 01 	lds	r16, 0x0117
     81c:	10 91 18 01 	lds	r17, 0x0118
     820:	0a 17       	cp	r16, r26
     822:	1b 07       	cpc	r17, r27
     824:	08 f4       	brcc	.+2      	; 0x828 <estimate_distance+0x78>
     826:	2f c2       	rjmp	.+1118   	; 0xc86 <__stack+0x387>
     828:	00 91 19 01 	lds	r16, 0x0119
     82c:	10 91 1a 01 	lds	r17, 0x011A
     830:	0a 17       	cp	r16, r26
     832:	1b 07       	cpc	r17, r27
     834:	08 f4       	brcc	.+2      	; 0x838 <estimate_distance+0x88>
     836:	2f c2       	rjmp	.+1118   	; 0xc96 <__stack+0x397>
     838:	00 91 1b 01 	lds	r16, 0x011B
     83c:	10 91 1c 01 	lds	r17, 0x011C
     840:	0a 17       	cp	r16, r26
     842:	1b 07       	cpc	r17, r27
     844:	08 f4       	brcc	.+2      	; 0x848 <estimate_distance+0x98>
     846:	2f c2       	rjmp	.+1118   	; 0xca6 <__stack+0x3a7>
     848:	00 91 1d 01 	lds	r16, 0x011D
     84c:	10 91 1e 01 	lds	r17, 0x011E
     850:	0a 17       	cp	r16, r26
     852:	1b 07       	cpc	r17, r27
     854:	08 f4       	brcc	.+2      	; 0x858 <estimate_distance+0xa8>
     856:	ef c1       	rjmp	.+990    	; 0xc36 <__stack+0x337>
     858:	00 91 1f 01 	lds	r16, 0x011F
     85c:	10 91 20 01 	lds	r17, 0x0120
     860:	0a 17       	cp	r16, r26
     862:	1b 07       	cpc	r17, r27
     864:	08 f4       	brcc	.+2      	; 0x868 <estimate_distance+0xb8>
     866:	27 c2       	rjmp	.+1102   	; 0xcb6 <__stack+0x3b7>
     868:	00 91 21 01 	lds	r16, 0x0121
     86c:	10 91 22 01 	lds	r17, 0x0122
     870:	0a 17       	cp	r16, r26
     872:	1b 07       	cpc	r17, r27
     874:	08 f4       	brcc	.+2      	; 0x878 <estimate_distance+0xc8>
     876:	27 c2       	rjmp	.+1102   	; 0xcc6 <__stack+0x3c7>
     878:	00 91 23 01 	lds	r16, 0x0123
     87c:	10 91 24 01 	lds	r17, 0x0124
     880:	0a 17       	cp	r16, r26
     882:	1b 07       	cpc	r17, r27
     884:	08 f4       	brcc	.+2      	; 0x888 <estimate_distance+0xd8>
     886:	27 c2       	rjmp	.+1102   	; 0xcd6 <__stack+0x3d7>
     888:	00 91 25 01 	lds	r16, 0x0125
     88c:	10 91 26 01 	lds	r17, 0x0126
     890:	0a 17       	cp	r16, r26
     892:	1b 07       	cpc	r17, r27
     894:	08 f4       	brcc	.+2      	; 0x898 <estimate_distance+0xe8>
     896:	27 c2       	rjmp	.+1102   	; 0xce6 <__stack+0x3e7>
     898:	00 91 27 01 	lds	r16, 0x0127
     89c:	10 91 28 01 	lds	r17, 0x0128
     8a0:	0a 17       	cp	r16, r26
     8a2:	1b 07       	cpc	r17, r27
     8a4:	08 f4       	brcc	.+2      	; 0x8a8 <estimate_distance+0xf8>
     8a6:	27 c2       	rjmp	.+1102   	; 0xcf6 <__stack+0x3f7>
     8a8:	00 91 29 01 	lds	r16, 0x0129
     8ac:	10 91 2a 01 	lds	r17, 0x012A
     8b0:	0a 17       	cp	r16, r26
     8b2:	1b 07       	cpc	r17, r27
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <estimate_distance+0x108>
     8b6:	23 c2       	rjmp	.+1094   	; 0xcfe <__stack+0x3ff>
     8b8:	00 91 2b 01 	lds	r16, 0x012B
     8bc:	10 91 2c 01 	lds	r17, 0x012C
     8c0:	0a 17       	cp	r16, r26
     8c2:	1b 07       	cpc	r17, r27
     8c4:	08 f4       	brcc	.+2      	; 0x8c8 <estimate_distance+0x118>
     8c6:	23 c2       	rjmp	.+1094   	; 0xd0e <__stack+0x40f>
     8c8:	00 91 2d 01 	lds	r16, 0x012D
     8cc:	10 91 2e 01 	lds	r17, 0x012E
     8d0:	0a 17       	cp	r16, r26
     8d2:	1b 07       	cpc	r17, r27
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <estimate_distance+0x128>
     8d6:	23 c2       	rjmp	.+1094   	; 0xd1e <__stack+0x41f>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	a0 ed       	ldi	r26, 0xD0	; 208
     8de:	b0 e4       	ldi	r27, 0x40	; 64
     8e0:	89 83       	std	Y+1, r24	; 0x01
     8e2:	9a 83       	std	Y+2, r25	; 0x02
     8e4:	ab 83       	std	Y+3, r26	; 0x03
     8e6:	bc 83       	std	Y+4, r27	; 0x04
     8e8:	4c e0       	ldi	r20, 0x0C	; 12
     8ea:	e4 2e       	mov	r14, r20
     8ec:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8ee:	f7 01       	movw	r30, r14
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ed 5e       	subi	r30, 0xED	; 237
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	b8 01       	movw	r22, r16
     8fe:	68 1b       	sub	r22, r24
     900:	79 0b       	sbc	r23, r25
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     912:	6b 01       	movw	r12, r22
     914:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     916:	ad 81       	ldd	r26, Y+5	; 0x05
     918:	be 81       	ldd	r27, Y+6	; 0x06
     91a:	bd 01       	movw	r22, r26
     91c:	bb 0f       	add	r27, r27
     91e:	88 0b       	sbc	r24, r24
     920:	99 0b       	sbc	r25, r25
     922:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     926:	4b 01       	movw	r8, r22
     928:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     92a:	b8 01       	movw	r22, r16
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     934:	2b 01       	movw	r4, r22
     936:	3c 01       	movw	r6, r24
     938:	29 81       	ldd	r18, Y+1	; 0x01
     93a:	3a 81       	ldd	r19, Y+2	; 0x02
     93c:	4b 81       	ldd	r20, Y+3	; 0x03
     93e:	5c 81       	ldd	r21, Y+4	; 0x04
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	c3 01       	movw	r24, r6
     94e:	b2 01       	movw	r22, r4
     950:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     954:	9b 01       	movw	r18, r22
     956:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     958:	c5 01       	movw	r24, r10
     95a:	b4 01       	movw	r22, r8
     95c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e2       	ldi	r20, 0x20	; 32
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
            b=((int)((int)b/(int)slope));
     96c:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fixsfsi>
     970:	8b 01       	movw	r16, r22
     972:	c7 01       	movw	r24, r14
     974:	b6 01       	movw	r22, r12
     976:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fixsfsi>
     97a:	ab 01       	movw	r20, r22
     97c:	bc 01       	movw	r22, r24
     97e:	c8 01       	movw	r24, r16
     980:	ba 01       	movw	r22, r20
     982:	0e 94 13 0a 	call	0x1426	; 0x1426 <__divmodhi4>
            dist_high=b;
     986:	16 2f       	mov	r17, r22
     988:	77 c0       	rjmp	.+238    	; 0xa78 <__stack+0x179>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     98a:	dc 01       	movw	r26, r24
     98c:	cd 90       	ld	r12, X+
     98e:	dc 90       	ld	r13, X
     990:	80 91 3a 01 	lds	r24, 0x013A
     994:	90 91 3b 01 	lds	r25, 0x013B
     998:	8c 15       	cp	r24, r12
     99a:	9d 05       	cpc	r25, r13
     99c:	08 f4       	brcc	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	8c c0       	rjmp	.+280    	; 0xab8 <__stack+0x1b9>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9a0:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9a2:	e0 90 3c 01 	lds	r14, 0x013C
     9a6:	f0 90 3d 01 	lds	r15, 0x013D
     9aa:	ec 14       	cp	r14, r12
     9ac:	fd 04       	cpc	r15, r13
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	5e c1       	rjmp	.+700    	; 0xc6e <__stack+0x36f>
     9b2:	e0 90 3e 01 	lds	r14, 0x013E
     9b6:	f0 90 3f 01 	lds	r15, 0x013F
     9ba:	ec 14       	cp	r14, r12
     9bc:	fd 04       	cpc	r15, r13
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	5e c1       	rjmp	.+700    	; 0xc7e <__stack+0x37f>
     9c2:	e0 90 40 01 	lds	r14, 0x0140
     9c6:	f0 90 41 01 	lds	r15, 0x0141
     9ca:	ec 14       	cp	r14, r12
     9cc:	fd 04       	cpc	r15, r13
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	5e c1       	rjmp	.+700    	; 0xc8e <__stack+0x38f>
     9d2:	e0 90 42 01 	lds	r14, 0x0142
     9d6:	f0 90 43 01 	lds	r15, 0x0143
     9da:	ec 14       	cp	r14, r12
     9dc:	fd 04       	cpc	r15, r13
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	5e c1       	rjmp	.+700    	; 0xc9e <__stack+0x39f>
     9e2:	e0 90 44 01 	lds	r14, 0x0144
     9e6:	f0 90 45 01 	lds	r15, 0x0145
     9ea:	ec 14       	cp	r14, r12
     9ec:	fd 04       	cpc	r15, r13
     9ee:	08 f4       	brcc	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	c3 c0       	rjmp	.+390    	; 0xb78 <__stack+0x279>
     9f2:	e0 90 46 01 	lds	r14, 0x0146
     9f6:	f0 90 47 01 	lds	r15, 0x0147
     9fa:	ec 14       	cp	r14, r12
     9fc:	fd 04       	cpc	r15, r13
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <__stack+0x103>
     a00:	56 c1       	rjmp	.+684    	; 0xcae <__stack+0x3af>
     a02:	e0 90 48 01 	lds	r14, 0x0148
     a06:	f0 90 49 01 	lds	r15, 0x0149
     a0a:	ec 14       	cp	r14, r12
     a0c:	fd 04       	cpc	r15, r13
     a0e:	08 f4       	brcc	.+2      	; 0xa12 <__stack+0x113>
     a10:	56 c1       	rjmp	.+684    	; 0xcbe <__stack+0x3bf>
     a12:	e0 90 4a 01 	lds	r14, 0x014A
     a16:	f0 90 4b 01 	lds	r15, 0x014B
     a1a:	ec 14       	cp	r14, r12
     a1c:	fd 04       	cpc	r15, r13
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <__stack+0x123>
     a20:	56 c1       	rjmp	.+684    	; 0xcce <__stack+0x3cf>
     a22:	e0 90 4c 01 	lds	r14, 0x014C
     a26:	f0 90 4d 01 	lds	r15, 0x014D
     a2a:	ec 14       	cp	r14, r12
     a2c:	fd 04       	cpc	r15, r13
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <__stack+0x133>
     a30:	56 c1       	rjmp	.+684    	; 0xcde <__stack+0x3df>
     a32:	e0 90 4e 01 	lds	r14, 0x014E
     a36:	f0 90 4f 01 	lds	r15, 0x014F
     a3a:	ec 14       	cp	r14, r12
     a3c:	fd 04       	cpc	r15, r13
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <__stack+0x143>
     a40:	56 c1       	rjmp	.+684    	; 0xcee <__stack+0x3ef>
     a42:	e0 90 50 01 	lds	r14, 0x0150
     a46:	f0 90 51 01 	lds	r15, 0x0151
     a4a:	ec 14       	cp	r14, r12
     a4c:	fd 04       	cpc	r15, r13
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <__stack+0x153>
     a50:	5a c1       	rjmp	.+692    	; 0xd06 <__stack+0x407>
     a52:	e0 90 52 01 	lds	r14, 0x0152
     a56:	f0 90 53 01 	lds	r15, 0x0153
     a5a:	ec 14       	cp	r14, r12
     a5c:	fd 04       	cpc	r15, r13
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <__stack+0x163>
     a60:	5a c1       	rjmp	.+692    	; 0xd16 <__stack+0x417>
     a62:	e0 90 54 01 	lds	r14, 0x0154
     a66:	f0 90 55 01 	lds	r15, 0x0155
     a6a:	ec 14       	cp	r14, r12
     a6c:	fd 04       	cpc	r15, r13
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <__stack+0x173>
     a70:	5a c1       	rjmp	.+692    	; 0xd26 <__stack+0x427>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a72:	0a e5       	ldi	r16, 0x5A	; 90
     a74:	31 c0       	rjmp	.+98     	; 0xad8 <__stack+0x1d9>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a76:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a78:	ed 81       	ldd	r30, Y+5	; 0x05
     a7a:	fe 81       	ldd	r31, Y+6	; 0x06
     a7c:	ed 3b       	cpi	r30, 0xBD	; 189
     a7e:	f2 40       	sbci	r31, 0x02	; 2
     a80:	fc f4       	brge	.+62     	; 0xac0 <__stack+0x1c1>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     a82:	81 e2       	ldi	r24, 0x21	; 33
     a84:	81 0f       	add	r24, r17
    }
}
     a86:	26 96       	adiw	r28, 0x06	; 6
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	bf 90       	pop	r11
     aa4:	af 90       	pop	r10
     aa6:	9f 90       	pop	r9
     aa8:	8f 90       	pop	r8
     aaa:	7f 90       	pop	r7
     aac:	6f 90       	pop	r6
     aae:	5f 90       	pop	r5
     ab0:	4f 90       	pop	r4
     ab2:	3f 90       	pop	r3
     ab4:	2f 90       	pop	r2
     ab6:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     ab8:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     aba:	81 e2       	ldi	r24, 0x21	; 33
     abc:	80 0f       	add	r24, r16
     abe:	e3 cf       	rjmp	.-58     	; 0xa86 <__stack+0x187>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ac0:	d1 01       	movw	r26, r2
     ac2:	cd 90       	ld	r12, X+
     ac4:	dc 90       	ld	r13, X
     ac6:	80 91 3a 01 	lds	r24, 0x013A
     aca:	90 91 3b 01 	lds	r25, 0x013B
     ace:	8c 15       	cp	r24, r12
     ad0:	9d 05       	cpc	r25, r13
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	66 cf       	rjmp	.-308    	; 0x9a2 <__stack+0xa3>
            dist_low=0;
     ad6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     ad8:	1f 3f       	cpi	r17, 0xFF	; 255
     ada:	79 f3       	breq	.-34     	; 0xaba <__stack+0x1bb>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     adc:	ed 81       	ldd	r30, Y+5	; 0x05
     ade:	fe 81       	ldd	r31, Y+6	; 0x06
     ae0:	bf 01       	movw	r22, r30
     ae2:	ff 0f       	add	r31, r31
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     aec:	6b 01       	movw	r12, r22
     aee:	7c 01       	movw	r14, r24
     af0:	61 2f       	mov	r22, r17
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     afc:	4b 01       	movw	r8, r22
     afe:	5c 01       	movw	r10, r24
     b00:	a7 01       	movw	r20, r14
     b02:	96 01       	movw	r18, r12
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	81 e6       	ldi	r24, 0x61	; 97
     b0a:	94 e4       	ldi	r25, 0x44	; 68
     b0c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	c5 01       	movw	r24, r10
     b16:	b4 01       	movw	r22, r8
     b18:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     b1c:	4b 01       	movw	r8, r22
     b1e:	5c 01       	movw	r10, r24
     b20:	60 2f       	mov	r22, r16
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     b2c:	2b 01       	movw	r4, r22
     b2e:	3c 01       	movw	r6, r24
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	4f e2       	ldi	r20, 0x2F	; 47
     b36:	54 e4       	ldi	r21, 0x44	; 68
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
     b3c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	c3 01       	movw	r24, r6
     b46:	b2 01       	movw	r22, r4
     b48:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	c5 01       	movw	r24, r10
     b52:	b4 01       	movw	r22, r8
     b54:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	48 e4       	ldi	r20, 0x48	; 72
     b5e:	53 e4       	ldi	r21, 0x43	; 67
     b60:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divsf3>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	44 e0       	ldi	r20, 0x04	; 4
     b6a:	52 e4       	ldi	r21, 0x42	; 66
     b6c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     b70:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixunssfsi>
     b74:	86 2f       	mov	r24, r22
     b76:	87 cf       	rjmp	.-242    	; 0xa86 <__stack+0x187>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b78:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	fc 01       	movw	r30, r24
     b84:	e8 5c       	subi	r30, 0xC8	; 200
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	b7 01       	movw	r22, r14
     b8e:	68 1b       	sub	r22, r24
     b90:	79 0b       	sbc	r23, r25
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     ba2:	4b 01       	movw	r8, r22
     ba4:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ba6:	b6 01       	movw	r22, r12
     ba8:	dd 0c       	add	r13, r13
     baa:	88 0b       	sbc	r24, r24
     bac:	99 0b       	sbc	r25, r25
     bae:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     bb2:	2b 01       	movw	r4, r22
     bb4:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bb6:	b7 01       	movw	r22, r14
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     bc0:	6b 01       	movw	r12, r22
     bc2:	7c 01       	movw	r14, r24
     bc4:	60 2f       	mov	r22, r16
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	5f e3       	ldi	r21, 0x3F	; 63
     bd8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	a9 01       	movw	r20, r18
     be2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     be6:	a5 01       	movw	r20, r10
     be8:	94 01       	movw	r18, r8
     bea:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	c7 01       	movw	r24, r14
     bf4:	b6 01       	movw	r22, r12
     bf6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bfe:	c3 01       	movw	r24, r6
     c00:	b2 01       	movw	r22, r4
     c02:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e2       	ldi	r20, 0x20	; 32
     c0c:	51 e4       	ldi	r21, 0x41	; 65
     c0e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c12:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fixsfsi>
     c16:	7b 01       	movw	r14, r22
     c18:	c5 01       	movw	r24, r10
     c1a:	b4 01       	movw	r22, r8
     c1c:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fixsfsi>
     c20:	ab 01       	movw	r20, r22
     c22:	bc 01       	movw	r22, r24
     c24:	c7 01       	movw	r24, r14
     c26:	ba 01       	movw	r22, r20
     c28:	0e 94 13 0a 	call	0x1426	; 0x1426 <__divmodhi4>
                dist_low=b;
     c2c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c2e:	6f 3f       	cpi	r22, 0xFF	; 255
     c30:	09 f0       	breq	.+2      	; 0xc34 <__stack+0x335>
     c32:	52 cf       	rjmp	.-348    	; 0xad8 <__stack+0x1d9>
     c34:	26 cf       	rjmp	.-436    	; 0xa82 <__stack+0x183>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c36:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c38:	85 e0       	ldi	r24, 0x05	; 5
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	7c 01       	movw	r14, r24
     c3e:	f1 e0       	ldi	r31, 0x01	; 1
     c40:	ef 1a       	sub	r14, r31
     c42:	f1 08       	sbc	r15, r1
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__floatunsisf>
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	5f e3       	ldi	r21, 0x3F	; 63
     c56:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	a9 01       	movw	r20, r18
     c60:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     c64:	69 83       	std	Y+1, r22	; 0x01
     c66:	7a 83       	std	Y+2, r23	; 0x02
     c68:	8b 83       	std	Y+3, r24	; 0x03
     c6a:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     c6c:	40 ce       	rjmp	.-896    	; 0x8ee <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c6e:	01 e0       	ldi	r16, 0x01	; 1
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	84 cf       	rjmp	.-248    	; 0xb7e <__stack+0x27f>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	df cf       	rjmp	.-66     	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c7e:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	7c cf       	rjmp	.-264    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c86:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	d7 cf       	rjmp	.-82     	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c8e:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	74 cf       	rjmp	.-280    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c96:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	cf cf       	rjmp	.-98     	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c9e:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	6c cf       	rjmp	.-296    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ca6:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	c7 cf       	rjmp	.-114    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cae:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	64 cf       	rjmp	.-312    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb6:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cb8:	86 e0       	ldi	r24, 0x06	; 6
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	bf cf       	rjmp	.-130    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cbe:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     cc0:	87 e0       	ldi	r24, 0x07	; 7
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	5c cf       	rjmp	.-328    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc6:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	b7 cf       	rjmp	.-146    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cce:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     cd0:	88 e0       	ldi	r24, 0x08	; 8
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	54 cf       	rjmp	.-344    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	af cf       	rjmp	.-162    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cde:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     ce0:	89 e0       	ldi	r24, 0x09	; 9
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	4c cf       	rjmp	.-360    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce6:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     ce8:	89 e0       	ldi	r24, 0x09	; 9
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a7 cf       	rjmp	.-178    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cee:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	44 cf       	rjmp	.-376    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf6:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     cf8:	8a e0       	ldi	r24, 0x0A	; 10
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9f cf       	rjmp	.-194    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cfe:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d00:	8b e0       	ldi	r24, 0x0B	; 11
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9b cf       	rjmp	.-202    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d06:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d08:	8b e0       	ldi	r24, 0x0B	; 11
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	38 cf       	rjmp	.-400    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d10:	8c e0       	ldi	r24, 0x0C	; 12
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	93 cf       	rjmp	.-218    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d16:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d18:	8c e0       	ldi	r24, 0x0C	; 12
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	30 cf       	rjmp	.-416    	; 0xb7e <__stack+0x27f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d20:	8d e0       	ldi	r24, 0x0D	; 13
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	8b cf       	rjmp	.-234    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d26:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d28:	8d e0       	ldi	r24, 0x0D	; 13
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	28 cf       	rjmp	.-432    	; 0xb7e <__stack+0x27f>

00000d2e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
    tx_clock += tx_increment;
     d50:	20 91 59 01 	lds	r18, 0x0159
     d54:	30 91 5a 01 	lds	r19, 0x015A
     d58:	80 91 57 01 	lds	r24, 0x0157
     d5c:	90 91 58 01 	lds	r25, 0x0158
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	90 93 5a 01 	sts	0x015A, r25
     d68:	80 93 59 01 	sts	0x0159, r24
    tx_increment = 0xFF;
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	90 93 58 01 	sts	0x0158, r25
     d74:	80 93 57 01 	sts	0x0157, r24
    OCR0A = tx_increment;
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d7c:	80 91 35 01 	lds	r24, 0x0135
     d80:	90 91 36 01 	lds	r25, 0x0136
     d84:	a0 91 37 01 	lds	r26, 0x0137
     d88:	b0 91 38 01 	lds	r27, 0x0138
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	a1 1d       	adc	r26, r1
     d90:	b1 1d       	adc	r27, r1
     d92:	80 93 35 01 	sts	0x0135, r24
     d96:	90 93 36 01 	sts	0x0136, r25
     d9a:	a0 93 37 01 	sts	0x0137, r26
     d9e:	b0 93 38 01 	sts	0x0138, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     da2:	80 91 39 01 	lds	r24, 0x0139
     da6:	81 11       	cpse	r24, r1
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <__vector_14+0x9a>
     daa:	80 91 68 01 	lds	r24, 0x0168
     dae:	90 91 69 01 	lds	r25, 0x0169
     db2:	20 91 59 01 	lds	r18, 0x0159
     db6:	30 91 5a 01 	lds	r19, 0x015A
     dba:	82 17       	cp	r24, r18
     dbc:	93 07       	cpc	r25, r19
     dbe:	20 f4       	brcc	.+8      	; 0xdc8 <__vector_14+0x9a>
     dc0:	80 91 11 01 	lds	r24, 0x0111
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	89 f0       	breq	.+34     	; 0xdea <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     dea:	e0 91 03 01 	lds	r30, 0x0103
     dee:	f0 91 04 01 	lds	r31, 0x0104
     df2:	09 95       	icall
        if (msg) {
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	41 f3       	breq	.-48     	; 0xdc8 <__vector_14+0x9a>
            if (message_send(msg)) {
     df8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <message_send>
     dfc:	81 11       	cpse	r24, r1
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e00:	0e 94 ac 0c 	call	0x1958	; 0x1958 <rand>
     e04:	99 27       	eor	r25, r25
     e06:	90 93 58 01 	sts	0x0158, r25
     e0a:	80 93 57 01 	sts	0x0157, r24
                OCR0A = tx_increment;
     e0e:	87 bd       	out	0x27, r24	; 39
     e10:	db cf       	rjmp	.-74     	; 0xdc8 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e12:	e0 91 01 01 	lds	r30, 0x0101
     e16:	f0 91 02 01 	lds	r31, 0x0102
     e1a:	09 95       	icall
                tx_clock = 0;
     e1c:	10 92 5a 01 	sts	0x015A, r1
     e20:	10 92 59 01 	sts	0x0159, r1
     e24:	d1 cf       	rjmp	.-94     	; 0xdc8 <__vector_14+0x9a>

00000e26 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e26:	80 ff       	sbrs	r24, 0
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <set_color+0x26>
        DDRD |= (1<<5);
     e2a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e2c:	81 ff       	sbrs	r24, 1
     e2e:	11 c0       	rjmp	.+34     	; 0xe52 <set_color+0x2c>
        DDRD |= (1<<4);
     e30:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e32:	82 ff       	sbrs	r24, 2
     e34:	11 c0       	rjmp	.+34     	; 0xe58 <set_color+0x32>
        DDRC |= (1<<3);
     e36:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e38:	83 ff       	sbrs	r24, 3
     e3a:	11 c0       	rjmp	.+34     	; 0xe5e <set_color+0x38>
        DDRC |= (1<<2);
     e3c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e3e:	84 ff       	sbrs	r24, 4
     e40:	11 c0       	rjmp	.+34     	; 0xe64 <set_color+0x3e>
        DDRC |= (1<<5);
     e42:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e44:	85 fd       	sbrc	r24, 5
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e48:	3c 98       	cbi	0x07, 4	; 7
     e4a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e4c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e4e:	81 fd       	sbrc	r24, 1
     e50:	ef cf       	rjmp	.-34     	; 0xe30 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e52:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e54:	82 fd       	sbrc	r24, 2
     e56:	ef cf       	rjmp	.-34     	; 0xe36 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e58:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e5a:	83 fd       	sbrc	r24, 3
     e5c:	ef cf       	rjmp	.-34     	; 0xe3c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e5e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e60:	84 fd       	sbrc	r24, 4
     e62:	ef cf       	rjmp	.-34     	; 0xe42 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e64:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e66:	85 ff       	sbrs	r24, 5
     e68:	ef cf       	rjmp	.-34     	; 0xe48 <set_color+0x22>
        DDRC |= (1<<4);
     e6a:	3c 9a       	sbi	0x07, 4	; 7
     e6c:	08 95       	ret

00000e6e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
    rx_timer_off();
     e7c:	10 92 81 00 	sts	0x0081, r1
     e80:	10 92 85 00 	sts	0x0085, r1
     e84:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 12 01 	sts	0x0112, r24
    rx_leadingbyte = 1;
     e8e:	80 93 56 01 	sts	0x0156, r24
    rx_busy = 0;
     e92:	10 92 39 01 	sts	0x0139, r1
    adc_trigger_high_gain();
     e96:	10 92 7c 00 	sts	0x007C, r1
     e9a:	93 ea       	ldi	r25, 0xA3	; 163
     e9c:	90 93 7a 00 	sts	0x007A, r25
     ea0:	80 93 7b 00 	sts	0x007B, r24
}
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ed8:	20 91 84 00 	lds	r18, 0x0084
     edc:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	40 93 39 01 	sts	0x0139, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ee6:	80 91 12 01 	lds	r24, 0x0112
     eea:	88 23       	and	r24, r24
     eec:	a9 f1       	breq	.+106    	; 0xf58 <__vector_23+0xa6>
        rx_timer_on();
     eee:	10 92 85 00 	sts	0x0085, r1
     ef2:	10 92 84 00 	sts	0x0084, r1
     ef6:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     efa:	10 92 6a 01 	sts	0x016A, r1
        rx_leadingbit = 0;
     efe:	10 92 12 01 	sts	0x0112, r1
        if (rx_leadingbyte) {
     f02:	80 91 56 01 	lds	r24, 0x0156
     f06:	88 23       	and	r24, r24
     f08:	a1 f0       	breq	.+40     	; 0xf32 <__vector_23+0x80>
            adc_finish_conversion();
     f0a:	80 91 7a 00 	lds	r24, 0x007A
     f0e:	86 fd       	sbrc	r24, 6
     f10:	fc cf       	rjmp	.-8      	; 0xf0a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f12:	80 91 78 00 	lds	r24, 0x0078
     f16:	90 91 79 00 	lds	r25, 0x0079
     f1a:	90 93 34 01 	sts	0x0134, r25
     f1e:	80 93 33 01 	sts	0x0133, r24
            adc_trigger_low_gain();
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 7c 00 	sts	0x007C, r24
     f28:	93 ea       	ldi	r25, 0xA3	; 163
     f2a:	90 93 7a 00 	sts	0x007A, r25
     f2e:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f58:	c9 01       	movw	r24, r18
     f5a:	87 58       	subi	r24, 0x87	; 135
     f5c:	91 09       	sbc	r25, r1
     f5e:	84 37       	cpi	r24, 0x74	; 116
     f60:	99 40       	sbci	r25, 0x09	; 9
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__vector_23+0xb4>
     f64:	52 c0       	rjmp	.+164    	; 0x100a <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f66:	26 58       	subi	r18, 0x86	; 134
     f68:	31 09       	sbc	r19, r1
     f6a:	a4 ef       	ldi	r26, 0xF4	; 244
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	0e 94 2d 0a 	call	0x145a	; 0x145a <__umulhisi3>
     f72:	aa 27       	eor	r26, r26
     f74:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	91 05       	cpc	r25, r1
     f7a:	a1 05       	cpc	r26, r1
     f7c:	b1 05       	cpc	r27, r1
     f7e:	08 f4       	brcc	.+2      	; 0xf82 <__vector_23+0xd0>
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f82:	40 93 12 01 	sts	0x0112, r20
                if (rx_leadingbyte) {
     f86:	80 91 56 01 	lds	r24, 0x0156
     f8a:	81 11       	cpse	r24, r1
     f8c:	52 c0       	rjmp	.+164    	; 0x1032 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f8e:	80 91 30 01 	lds	r24, 0x0130
     f92:	e8 2f       	mov	r30, r24
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	e4 5a       	subi	r30, 0xA4	; 164
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	90 91 6a 01 	lds	r25, 0x016A
     f9e:	90 83       	st	Z, r25
                    rx_byteindex++;
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	80 93 30 01 	sts	0x0130, r24
                    if (rx_byteindex == sizeof(message_t)) {
     fa6:	8c 30       	cpi	r24, 0x0C	; 12
     fa8:	21 f6       	brne	.-120    	; 0xf32 <__vector_23+0x80>
                        rx_timer_off();
     faa:	10 92 81 00 	sts	0x0081, r1
     fae:	10 92 85 00 	sts	0x0085, r1
     fb2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fb6:	40 93 56 01 	sts	0x0156, r20
                        rx_busy = 0;
     fba:	10 92 39 01 	sts	0x0139, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     fbe:	c0 91 66 01 	lds	r28, 0x0166
     fc2:	d0 91 67 01 	lds	r29, 0x0167
     fc6:	8c e5       	ldi	r24, 0x5C	; 92
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 63 09 	call	0x12c6	; 0x12c6 <message_crc>
     fce:	c8 17       	cp	r28, r24
     fd0:	d9 07       	cpc	r29, r25
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <__vector_23+0x124>
     fd4:	ae cf       	rjmp	.-164    	; 0xf32 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fd6:	80 91 65 01 	lds	r24, 0x0165
     fda:	87 ff       	sbrs	r24, 7
     fdc:	61 c0       	rjmp	.+194    	; 0x10a0 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fde:	98 e7       	ldi	r25, 0x78	; 120
     fe0:	98 0f       	add	r25, r24
     fe2:	93 30       	cpi	r25, 0x03	; 3
     fe4:	30 f0       	brcs	.+12     	; 0xff2 <__vector_23+0x140>
        motors_off();
     fe6:	53 98       	cbi	0x0a, 3	; 10
     fe8:	23 98       	cbi	0x04, 3	; 4
     fea:	10 92 b4 00 	sts	0x00B4, r1
     fee:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	fc 01       	movw	r30, r24
     ff6:	e0 58       	subi	r30, 0x80	; 128
     ff8:	f1 09       	sbc	r31, r1
     ffa:	eb 30       	cpi	r30, 0x0B	; 11
     ffc:	f1 05       	cpc	r31, r1
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <__vector_23+0x150>
    1000:	98 cf       	rjmp	.-208    	; 0xf32 <__vector_23+0x80>
    1002:	e5 5c       	subi	r30, 0xC5	; 197
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    100a:	10 92 81 00 	sts	0x0081, r1
    100e:	10 92 85 00 	sts	0x0085, r1
    1012:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1016:	40 93 12 01 	sts	0x0112, r20
            rx_leadingbyte = 1;
    101a:	40 93 56 01 	sts	0x0156, r20
            rx_busy = 0;
    101e:	10 92 39 01 	sts	0x0139, r1
            adc_trigger_high_gain();
    1022:	10 92 7c 00 	sts	0x007C, r1
    1026:	83 ea       	ldi	r24, 0xA3	; 163
    1028:	80 93 7a 00 	sts	0x007A, r24
    102c:	40 93 7b 00 	sts	0x007B, r20
    1030:	80 cf       	rjmp	.-256    	; 0xf32 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1032:	80 91 7a 00 	lds	r24, 0x007A
    1036:	86 fd       	sbrc	r24, 6
    1038:	fc cf       	rjmp	.-8      	; 0x1032 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    103a:	80 91 78 00 	lds	r24, 0x0078
    103e:	90 91 79 00 	lds	r25, 0x0079
    1042:	90 93 32 01 	sts	0x0132, r25
    1046:	80 93 31 01 	sts	0x0131, r24
                    adc_trigger_high_gain();
    104a:	10 92 7c 00 	sts	0x007C, r1
    104e:	83 ea       	ldi	r24, 0xA3	; 163
    1050:	80 93 7a 00 	sts	0x007A, r24
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    105a:	90 91 6a 01 	lds	r25, 0x016A
    105e:	99 23       	and	r25, r25
    1060:	d1 f0       	breq	.+52     	; 0x1096 <__vector_23+0x1e4>
                        rx_timer_off();
    1062:	10 92 81 00 	sts	0x0081, r1
    1066:	10 92 85 00 	sts	0x0085, r1
    106a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    106e:	80 93 56 01 	sts	0x0156, r24
                        rx_busy = 0;
    1072:	10 92 39 01 	sts	0x0139, r1
    1076:	5d cf       	rjmp	.-326    	; 0xf32 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1078:	21 e0       	ldi	r18, 0x01	; 1
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	f9 01       	movw	r30, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <__vector_23+0x1d2>
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <__vector_23+0x1ce>
    1088:	cf 01       	movw	r24, r30
    108a:	90 91 6a 01 	lds	r25, 0x016A
    108e:	89 2b       	or	r24, r25
    1090:	80 93 6a 01 	sts	0x016A, r24
    1094:	4e cf       	rjmp	.-356    	; 0xf32 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1096:	10 92 56 01 	sts	0x0156, r1
                        rx_byteindex = 0;
    109a:	10 92 30 01 	sts	0x0130, r1
    109e:	49 cf       	rjmp	.-366    	; 0xf32 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10a0:	e0 91 05 01 	lds	r30, 0x0105
    10a4:	f0 91 06 01 	lds	r31, 0x0106
    10a8:	61 e3       	ldi	r22, 0x31	; 49
    10aa:	71 e0       	ldi	r23, 0x01	; 1
    10ac:	8c e5       	ldi	r24, 0x5C	; 92
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	09 95       	icall
    10b2:	3f cf       	rjmp	.-386    	; 0xf32 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10b4:	80 91 5c 01 	lds	r24, 0x015C
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	09 f4       	brne	.+2      	; 0x10be <__vector_23+0x20c>
    10bc:	dd c0       	rjmp	.+442    	; 0x1278 <__vector_23+0x3c6>
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <__vector_23+0x210>
    10c0:	ba c0       	rjmp	.+372    	; 0x1236 <__vector_23+0x384>
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__vector_23+0x216>
    10c6:	c6 c0       	rjmp	.+396    	; 0x1254 <__vector_23+0x3a2>
    10c8:	84 30       	cpi	r24, 0x04	; 4
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__vector_23+0x21c>
    10cc:	b1 c0       	rjmp	.+354    	; 0x1230 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10ce:	80 91 0f 01 	lds	r24, 0x010F
    10d2:	90 91 62 01 	lds	r25, 0x0162
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	09 f4       	brne	.+2      	; 0x10dc <__vector_23+0x22a>
    10da:	e3 c0       	rjmp	.+454    	; 0x12a2 <__vector_23+0x3f0>
    10dc:	80 91 61 01 	lds	r24, 0x0161
                        prev_motion = MOVE_STOP;
    10e0:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_STRAIGHT;
    10e4:	23 e0       	ldi	r18, 0x03	; 3
    10e6:	20 93 0f 01 	sts	0x010F, r18
                        kilo_straight_left = calibmsg->straight_left;
    10ea:	80 93 6d 01 	sts	0x016D, r24
                        kilo_straight_right = calibmsg->straight_right;
    10ee:	90 93 6e 01 	sts	0x016E, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10f2:	80 91 11 01 	lds	r24, 0x0111
    10f6:	86 30       	cpi	r24, 0x06	; 6
    10f8:	09 f4       	brne	.+2      	; 0x10fc <__vector_23+0x24a>
    10fa:	1b cf       	rjmp	.-458    	; 0xf32 <__vector_23+0x80>
                motors_on();
    10fc:	53 9a       	sbi	0x0a, 3	; 10
    10fe:	23 9a       	sbi	0x04, 3	; 4
    1100:	10 92 b4 00 	sts	0x00B4, r1
    1104:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1108:	86 e0       	ldi	r24, 0x06	; 6
    110a:	80 93 11 01 	sts	0x0111, r24
    110e:	11 cf       	rjmp	.-478    	; 0xf32 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1110:	80 91 11 01 	lds	r24, 0x0111
    1114:	86 30       	cpi	r24, 0x06	; 6
    1116:	99 f0       	breq	.+38     	; 0x113e <__vector_23+0x28c>
                motors_on();
    1118:	53 9a       	sbi	0x0a, 3	; 10
    111a:	23 9a       	sbi	0x04, 3	; 4
    111c:	10 92 b4 00 	sts	0x00B4, r1
    1120:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1124:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1126:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1128:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    112a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    112c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    112e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1130:	10 92 0f 01 	sts	0x010F, r1
    1134:	10 92 10 01 	sts	0x0110, r1
                kilo_state = MOVING;
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	80 93 11 01 	sts	0x0111, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 01       	movw	r18, r24
    1144:	00 90 5c 01 	lds	r0, 0x015C
    1148:	02 c0       	rjmp	.+4      	; 0x114e <__vector_23+0x29c>
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <__vector_23+0x298>
    1152:	80 91 6b 01 	lds	r24, 0x016B
    1156:	90 91 6c 01 	lds	r25, 0x016C
    115a:	82 23       	and	r24, r18
    115c:	93 23       	and	r25, r19
    115e:	89 2b       	or	r24, r25
    1160:	09 f0       	breq	.+2      	; 0x1164 <__vector_23+0x2b2>
    1162:	86 c0       	rjmp	.+268    	; 0x1270 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1164:	10 92 0f 01 	sts	0x010F, r1
    1168:	e4 ce       	rjmp	.-568    	; 0xf32 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 11 01 	sts	0x0111, r24
    1170:	e0 ce       	rjmp	.-576    	; 0xf32 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1172:	e0 e0       	ldi	r30, 0x00	; 0
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1178:	80 91 6e 00 	lds	r24, 0x006E
    117c:	8d 7f       	andi	r24, 0xFD	; 253
    117e:	80 93 6e 00 	sts	0x006E, r24
    1182:	16 bc       	out	0x26, r1	; 38
            bootload();
    1184:	e0 e0       	ldi	r30, 0x00	; 0
    1186:	f0 e7       	ldi	r31, 0x70	; 112
    1188:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    118a:	10 92 11 01 	sts	0x0111, r1
    118e:	d1 ce       	rjmp	.-606    	; 0xf32 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	80 93 11 01 	sts	0x0111, r24
    1196:	cd ce       	rjmp	.-614    	; 0xf32 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1198:	85 e0       	ldi	r24, 0x05	; 5
    119a:	80 93 11 01 	sts	0x0111, r24
    119e:	c9 ce       	rjmp	.-622    	; 0xf32 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11a0:	80 91 11 01 	lds	r24, 0x0111
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	09 f4       	brne	.+2      	; 0x11aa <__vector_23+0x2f8>
    11a8:	c4 ce       	rjmp	.-632    	; 0xf32 <__vector_23+0x80>
    11aa:	80 91 11 01 	lds	r24, 0x0111
    11ae:	84 30       	cpi	r24, 0x04	; 4
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <__vector_23+0x302>
    11b2:	bf ce       	rjmp	.-642    	; 0xf32 <__vector_23+0x80>
                motors_on();
    11b4:	53 9a       	sbi	0x0a, 3	; 10
    11b6:	23 9a       	sbi	0x04, 3	; 4
    11b8:	10 92 b4 00 	sts	0x00B4, r1
    11bc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	80 93 11 01 	sts	0x0111, r24
    11c6:	b5 ce       	rjmp	.-662    	; 0xf32 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11c8:	80 91 11 01 	lds	r24, 0x0111
    11cc:	86 30       	cpi	r24, 0x06	; 6
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <__vector_23+0x320>
    11d0:	b0 ce       	rjmp	.-672    	; 0xf32 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11d2:	60 91 6b 01 	lds	r22, 0x016B
    11d6:	80 eb       	ldi	r24, 0xB0	; 176
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11de:	60 91 6c 01 	lds	r22, 0x016C
    11e2:	81 eb       	ldi	r24, 0xB1	; 177
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    11ea:	60 91 6f 01 	lds	r22, 0x016F
    11ee:	85 e0       	ldi	r24, 0x05	; 5
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    11f6:	60 91 5b 01 	lds	r22, 0x015B
    11fa:	89 e0       	ldi	r24, 0x09	; 9
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1202:	60 91 6d 01 	lds	r22, 0x016D
    1206:	8c e0       	ldi	r24, 0x0C	; 12
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    120e:	60 91 6e 01 	lds	r22, 0x016E
    1212:	84 e1       	ldi	r24, 0x14	; 20
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 c4 0c 	call	0x1988	; 0x1988 <eeprom_write_byte>
                        motors_off();
    121a:	53 98       	cbi	0x0a, 3	; 10
    121c:	23 98       	cbi	0x04, 3	; 4
    121e:	10 92 b4 00 	sts	0x00B4, r1
    1222:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 11 01 	sts	0x0111, r24
    122c:	80 91 5c 01 	lds	r24, 0x015C
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1230:	81 11       	cpse	r24, r1
    1232:	5f cf       	rjmp	.-322    	; 0x10f2 <__vector_23+0x240>
    1234:	7e ce       	rjmp	.-772    	; 0xf32 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1236:	88 23       	and	r24, r24
    1238:	39 f2       	breq	.-114    	; 0x11c8 <__vector_23+0x316>
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	c9 f7       	brne	.-14     	; 0x1230 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    123e:	80 91 5d 01 	lds	r24, 0x015D
    1242:	90 91 5e 01 	lds	r25, 0x015E
    1246:	90 93 6c 01 	sts	0x016C, r25
    124a:	80 93 6b 01 	sts	0x016B, r24
                    cur_motion = MOVE_STOP;
    124e:	10 92 0f 01 	sts	0x010F, r1
    1252:	4f cf       	rjmp	.-354    	; 0x10f2 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1254:	80 91 0f 01 	lds	r24, 0x010F
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	71 f1       	breq	.+92     	; 0x12b8 <__vector_23+0x406>
    125c:	80 91 60 01 	lds	r24, 0x0160
                        prev_motion = MOVE_STOP;
    1260:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_RIGHT;
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_right = calibmsg->turn_right;
    126a:	80 93 5b 01 	sts	0x015B, r24
    126e:	41 cf       	rjmp	.-382    	; 0x10f2 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 0f 01 	sts	0x010F, r24
    1276:	5d ce       	rjmp	.-838    	; 0xf32 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1278:	80 91 0f 01 	lds	r24, 0x010F
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	51 f0       	breq	.+20     	; 0x1294 <__vector_23+0x3e2>
    1280:	80 91 5f 01 	lds	r24, 0x015F
                        prev_motion = MOVE_STOP;
    1284:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_LEFT;
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_left = calibmsg->turn_left;
    128e:	80 93 6f 01 	sts	0x016F, r24
    1292:	2f cf       	rjmp	.-418    	; 0x10f2 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1294:	80 91 5f 01 	lds	r24, 0x015F
    1298:	90 91 6f 01 	lds	r25, 0x016F
    129c:	89 13       	cpse	r24, r25
    129e:	f2 cf       	rjmp	.-28     	; 0x1284 <__vector_23+0x3d2>
    12a0:	28 cf       	rjmp	.-432    	; 0x10f2 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12a2:	80 91 6e 01 	lds	r24, 0x016E
    12a6:	98 13       	cpse	r25, r24
    12a8:	19 cf       	rjmp	.-462    	; 0x10dc <__vector_23+0x22a>
    12aa:	80 91 61 01 	lds	r24, 0x0161
    12ae:	20 91 6d 01 	lds	r18, 0x016D
    12b2:	82 13       	cpse	r24, r18
    12b4:	15 cf       	rjmp	.-470    	; 0x10e0 <__vector_23+0x22e>
    12b6:	1d cf       	rjmp	.-454    	; 0x10f2 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12b8:	80 91 60 01 	lds	r24, 0x0160
    12bc:	90 91 5b 01 	lds	r25, 0x015B
    12c0:	89 13       	cpse	r24, r25
    12c2:	ce cf       	rjmp	.-100    	; 0x1260 <__vector_23+0x3ae>
    12c4:	16 cf       	rjmp	.-468    	; 0x10f2 <__vector_23+0x240>

000012c6 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12c6:	fc 01       	movw	r30, r24
    12c8:	ac 01       	movw	r20, r24
    12ca:	46 5f       	subi	r20, 0xF6	; 246
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12d2:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12d4:	82 27       	eor	r24, r18
    12d6:	08 2e       	mov	r0, r24
    12d8:	82 95       	swap	r24
    12da:	80 7f       	andi	r24, 0xF0	; 240
    12dc:	80 25       	eor	r24, r0
    12de:	09 2e       	mov	r0, r25
    12e0:	98 2f       	mov	r25, r24
    12e2:	82 95       	swap	r24
    12e4:	8f 70       	andi	r24, 0x0F	; 15
    12e6:	08 26       	eor	r0, r24
    12e8:	86 95       	lsr	r24
    12ea:	98 27       	eor	r25, r24
    12ec:	89 27       	eor	r24, r25
    12ee:	88 0f       	add	r24, r24
    12f0:	88 0f       	add	r24, r24
    12f2:	88 0f       	add	r24, r24
    12f4:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    12f6:	e4 17       	cp	r30, r20
    12f8:	f5 07       	cpc	r31, r21
    12fa:	59 f7       	brne	.-42     	; 0x12d2 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    12fc:	08 95       	ret

000012fe <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    12fe:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1300:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1302:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1304:	20 91 2f 01 	lds	r18, 0x012F
    or tmpreg1, ddrreg
    1308:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    130a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    130c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    130e:	30 91 2f 01 	lds	r19, 0x012F
    1312:	20 30       	cpi	r18, 0x00	; 0
    1314:	29 f0       	breq	.+10     	; 0x1320 <message_send+0x22>
    1316:	00 00       	nop
    1318:	25 b1       	in	r18, 0x05	; 5
    131a:	23 2b       	or	r18, r19
    131c:	25 b9       	out	0x05, r18	; 5
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <message_send+0x2a>
    1320:	00 00       	nop
    1322:	00 00       	nop
    1324:	00 00       	nop
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <message_send+0x2a>
    1328:	00 00       	nop
    132a:	00 00       	nop
    132c:	00 00       	nop
    132e:	30 95       	com	r19
    1330:	25 b1       	in	r18, 0x05	; 5
    1332:	23 23       	and	r18, r19
    1334:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1336:	2e ea       	ldi	r18, 0xAE	; 174
    1338:	2a 95       	dec	r18
    133a:	f1 f7       	brne	.-4      	; 0x1338 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    133c:	2b ee       	ldi	r18, 0xEB	; 235

0000133e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    133e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1340:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1342:	0a c0       	rjmp	.+20     	; 0x1358 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1344:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1346:	30 91 2f 01 	lds	r19, 0x012F
    com tmpreg2
    134a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    134c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    134e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1350:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1352:	0f be       	out	0x3f, r0	; 63
    return 0
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	08 95       	ret

00001358 <nocollision>:
nocollision:
    nop
    1358:	00 00       	nop
    dec tmpreg1
    135a:	2a 95       	dec	r18
    brne checkcollision
    135c:	81 f7       	brne	.-32     	; 0x133e <checkcollision>

    ldi tmpreg1, 0x01
    135e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1360:	30 91 2f 01 	lds	r19, 0x012F
    1364:	20 30       	cpi	r18, 0x00	; 0
    1366:	29 f0       	breq	.+10     	; 0x1372 <nocollision+0x1a>
    1368:	00 00       	nop
    136a:	25 b1       	in	r18, 0x05	; 5
    136c:	23 2b       	or	r18, r19
    136e:	25 b9       	out	0x05, r18	; 5
    1370:	04 c0       	rjmp	.+8      	; 0x137a <nocollision+0x22>
    1372:	00 00       	nop
    1374:	00 00       	nop
    1376:	00 00       	nop
    1378:	00 c0       	rjmp	.+0      	; 0x137a <nocollision+0x22>
    137a:	00 00       	nop
    137c:	00 00       	nop
    137e:	00 00       	nop
    1380:	30 95       	com	r19
    1382:	25 b1       	in	r18, 0x05	; 5
    1384:	23 23       	and	r18, r19
    1386:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1388:	00 00       	nop
    138a:	24 e5       	ldi	r18, 0x54	; 84
    138c:	2a 95       	dec	r18
    138e:	f1 f7       	brne	.-4      	; 0x138c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1390:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1392:	8c e0       	ldi	r24, 0x0C	; 12

00001394 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1394:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1396:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1398:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    139a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    139c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    139e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13a0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13a4:	50 e0       	ldi	r21, 0x00	; 0

000013a6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13a6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13a8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13aa:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13ac:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13ae:	30 91 2f 01 	lds	r19, 0x012F
    13b2:	20 30       	cpi	r18, 0x00	; 0
    13b4:	29 f0       	breq	.+10     	; 0x13c0 <sendbit+0x1a>
    13b6:	00 00       	nop
    13b8:	25 b1       	in	r18, 0x05	; 5
    13ba:	23 2b       	or	r18, r19
    13bc:	25 b9       	out	0x05, r18	; 5
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <sendbit+0x22>
    13c0:	00 00       	nop
    13c2:	00 00       	nop
    13c4:	00 00       	nop
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <sendbit+0x22>
    13c8:	00 00       	nop
    13ca:	00 00       	nop
    13cc:	00 00       	nop
    13ce:	30 95       	com	r19
    13d0:	25 b1       	in	r18, 0x05	; 5
    13d2:	23 23       	and	r18, r19
    13d4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    13d6:	00 00       	nop
    13d8:	21 e5       	ldi	r18, 0x51	; 81
    13da:	2a 95       	dec	r18
    13dc:	f1 f7       	brne	.-4      	; 0x13da <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    13de:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    13e0:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    13e2:	9a 95       	dec	r25
    brne sendbit
    13e4:	01 f7       	brne	.-64     	; 0x13a6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    13e6:	8a 95       	dec	r24
    brne sendbyte
    13e8:	a9 f6       	brne	.-86     	; 0x1394 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    13ea:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    13ec:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    13ee:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13f0:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13f2:	30 91 2f 01 	lds	r19, 0x012F
    com tmpreg2
    13f6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13f8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    13fa:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13fc:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13fe:	0f be       	out	0x3f, r0	; 63
    return 1
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	08 95       	ret

00001404 <main>:
    new_message = 1;
}

int main()
{
    kilo_init();
    1404:	0e 94 93 00 	call	0x126	; 0x126 <kilo_init>
    // Register the message_rx callback function.
    kilo_message_rx = message_rx;
    1408:	82 e7       	ldi	r24, 0x72	; 114
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	90 93 06 01 	sts	0x0106, r25
    1410:	80 93 05 01 	sts	0x0105, r24
    kilo_start(setup, loop);
    1414:	69 e7       	ldi	r22, 0x79	; 121
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	81 e7       	ldi	r24, 0x71	; 113
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 8f 01 	call	0x31e	; 0x31e <kilo_start>
    
    return 0;
}
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	08 95       	ret

00001426 <__divmodhi4>:
    1426:	97 fb       	bst	r25, 7
    1428:	07 2e       	mov	r0, r23
    142a:	16 f4       	brtc	.+4      	; 0x1430 <__divmodhi4+0xa>
    142c:	00 94       	com	r0
    142e:	07 d0       	rcall	.+14     	; 0x143e <__divmodhi4_neg1>
    1430:	77 fd       	sbrc	r23, 7
    1432:	09 d0       	rcall	.+18     	; 0x1446 <__divmodhi4_neg2>
    1434:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__udivmodhi4>
    1438:	07 fc       	sbrc	r0, 7
    143a:	05 d0       	rcall	.+10     	; 0x1446 <__divmodhi4_neg2>
    143c:	3e f4       	brtc	.+14     	; 0x144c <__divmodhi4_exit>

0000143e <__divmodhi4_neg1>:
    143e:	90 95       	com	r25
    1440:	81 95       	neg	r24
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	08 95       	ret

00001446 <__divmodhi4_neg2>:
    1446:	70 95       	com	r23
    1448:	61 95       	neg	r22
    144a:	7f 4f       	sbci	r23, 0xFF	; 255

0000144c <__divmodhi4_exit>:
    144c:	08 95       	ret

0000144e <__tablejump2__>:
    144e:	ee 0f       	add	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	05 90       	lpm	r0, Z+
    1454:	f4 91       	lpm	r31, Z
    1456:	e0 2d       	mov	r30, r0
    1458:	09 94       	ijmp

0000145a <__umulhisi3>:
    145a:	a2 9f       	mul	r26, r18
    145c:	b0 01       	movw	r22, r0
    145e:	b3 9f       	mul	r27, r19
    1460:	c0 01       	movw	r24, r0
    1462:	a3 9f       	mul	r26, r19
    1464:	70 0d       	add	r23, r0
    1466:	81 1d       	adc	r24, r1
    1468:	11 24       	eor	r1, r1
    146a:	91 1d       	adc	r25, r1
    146c:	b2 9f       	mul	r27, r18
    146e:	70 0d       	add	r23, r0
    1470:	81 1d       	adc	r24, r1
    1472:	11 24       	eor	r1, r1
    1474:	91 1d       	adc	r25, r1
    1476:	08 95       	ret

00001478 <__udivmodhi4>:
    1478:	aa 1b       	sub	r26, r26
    147a:	bb 1b       	sub	r27, r27
    147c:	51 e1       	ldi	r21, 0x11	; 17
    147e:	07 c0       	rjmp	.+14     	; 0x148e <__udivmodhi4_ep>

00001480 <__udivmodhi4_loop>:
    1480:	aa 1f       	adc	r26, r26
    1482:	bb 1f       	adc	r27, r27
    1484:	a6 17       	cp	r26, r22
    1486:	b7 07       	cpc	r27, r23
    1488:	10 f0       	brcs	.+4      	; 0x148e <__udivmodhi4_ep>
    148a:	a6 1b       	sub	r26, r22
    148c:	b7 0b       	sbc	r27, r23

0000148e <__udivmodhi4_ep>:
    148e:	88 1f       	adc	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	5a 95       	dec	r21
    1494:	a9 f7       	brne	.-22     	; 0x1480 <__udivmodhi4_loop>
    1496:	80 95       	com	r24
    1498:	90 95       	com	r25
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	08 95       	ret

000014a0 <__subsf3>:
    14a0:	50 58       	subi	r21, 0x80	; 128

000014a2 <__addsf3>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	aa 27       	eor	r26, r26
    14a6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3x>
    14aa:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_round>
    14ae:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fp_pscA>
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <__addsf3+0x20>
    14b4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fp_pscB>
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__addsf3+0x20>
    14ba:	39 f4       	brne	.+14     	; 0x14ca <__addsf3+0x28>
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	19 f4       	brne	.+6      	; 0x14c6 <__addsf3+0x24>
    14c0:	26 f4       	brtc	.+8      	; 0x14ca <__addsf3+0x28>
    14c2:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_nan>
    14c6:	0e f4       	brtc	.+2      	; 0x14ca <__addsf3+0x28>
    14c8:	e0 95       	com	r30
    14ca:	e7 fb       	bst	r30, 7
    14cc:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_inf>

000014d0 <__addsf3x>:
    14d0:	e9 2f       	mov	r30, r25
    14d2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_split3>
    14d6:	58 f3       	brcs	.-42     	; 0x14ae <__addsf3+0xc>
    14d8:	ba 17       	cp	r27, r26
    14da:	62 07       	cpc	r22, r18
    14dc:	73 07       	cpc	r23, r19
    14de:	84 07       	cpc	r24, r20
    14e0:	95 07       	cpc	r25, r21
    14e2:	20 f0       	brcs	.+8      	; 0x14ec <__addsf3x+0x1c>
    14e4:	79 f4       	brne	.+30     	; 0x1504 <__addsf3x+0x34>
    14e6:	a6 f5       	brtc	.+104    	; 0x1550 <__addsf3x+0x80>
    14e8:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__fp_zero>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3x+0x20>
    14ee:	e0 95       	com	r30
    14f0:	0b 2e       	mov	r0, r27
    14f2:	ba 2f       	mov	r27, r26
    14f4:	a0 2d       	mov	r26, r0
    14f6:	0b 01       	movw	r0, r22
    14f8:	b9 01       	movw	r22, r18
    14fa:	90 01       	movw	r18, r0
    14fc:	0c 01       	movw	r0, r24
    14fe:	ca 01       	movw	r24, r20
    1500:	a0 01       	movw	r20, r0
    1502:	11 24       	eor	r1, r1
    1504:	ff 27       	eor	r31, r31
    1506:	59 1b       	sub	r21, r25
    1508:	99 f0       	breq	.+38     	; 0x1530 <__addsf3x+0x60>
    150a:	59 3f       	cpi	r21, 0xF9	; 249
    150c:	50 f4       	brcc	.+20     	; 0x1522 <__addsf3x+0x52>
    150e:	50 3e       	cpi	r21, 0xE0	; 224
    1510:	68 f1       	brcs	.+90     	; 0x156c <__addsf3x+0x9c>
    1512:	1a 16       	cp	r1, r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	a2 2f       	mov	r26, r18
    1518:	23 2f       	mov	r18, r19
    151a:	34 2f       	mov	r19, r20
    151c:	44 27       	eor	r20, r20
    151e:	58 5f       	subi	r21, 0xF8	; 248
    1520:	f3 cf       	rjmp	.-26     	; 0x1508 <__addsf3x+0x38>
    1522:	46 95       	lsr	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	a7 95       	ror	r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	53 95       	inc	r21
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__addsf3x+0x52>
    1530:	7e f4       	brtc	.+30     	; 0x1550 <__addsf3x+0x80>
    1532:	1f 16       	cp	r1, r31
    1534:	ba 0b       	sbc	r27, r26
    1536:	62 0b       	sbc	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba f0       	brmi	.+46     	; 0x156c <__addsf3x+0x9c>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	a1 f0       	breq	.+40     	; 0x156a <__addsf3x+0x9a>
    1542:	ff 0f       	add	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	c2 f7       	brpl	.-16     	; 0x153e <__addsf3x+0x6e>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <__addsf3x+0x9c>
    1550:	ba 0f       	add	r27, r26
    1552:	62 1f       	adc	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	48 f4       	brcc	.+18     	; 0x156c <__addsf3x+0x9c>
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x9a>
    1568:	b0 cf       	rjmp	.-160    	; 0x14ca <__addsf3+0x28>
    156a:	93 95       	inc	r25
    156c:	88 0f       	add	r24, r24
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0xa2>
    1570:	99 27       	eor	r25, r25
    1572:	ee 0f       	add	r30, r30
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	08 95       	ret

0000157a <__divsf3>:
    157a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__divsf3x>
    157e:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_round>
    1582:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fp_pscB>
    1586:	58 f0       	brcs	.+22     	; 0x159e <__divsf3+0x24>
    1588:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fp_pscA>
    158c:	40 f0       	brcs	.+16     	; 0x159e <__divsf3+0x24>
    158e:	29 f4       	brne	.+10     	; 0x159a <__divsf3+0x20>
    1590:	5f 3f       	cpi	r21, 0xFF	; 255
    1592:	29 f0       	breq	.+10     	; 0x159e <__divsf3+0x24>
    1594:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_inf>
    1598:	51 11       	cpse	r21, r1
    159a:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_szero>
    159e:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_nan>

000015a2 <__divsf3x>:
    15a2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_split3>
    15a6:	68 f3       	brcs	.-38     	; 0x1582 <__divsf3+0x8>

000015a8 <__divsf3_pse>:
    15a8:	99 23       	and	r25, r25
    15aa:	b1 f3       	breq	.-20     	; 0x1598 <__divsf3+0x1e>
    15ac:	55 23       	and	r21, r21
    15ae:	91 f3       	breq	.-28     	; 0x1594 <__divsf3+0x1a>
    15b0:	95 1b       	sub	r25, r21
    15b2:	55 0b       	sbc	r21, r21
    15b4:	bb 27       	eor	r27, r27
    15b6:	aa 27       	eor	r26, r26
    15b8:	62 17       	cp	r22, r18
    15ba:	73 07       	cpc	r23, r19
    15bc:	84 07       	cpc	r24, r20
    15be:	38 f0       	brcs	.+14     	; 0x15ce <__divsf3_pse+0x26>
    15c0:	9f 5f       	subi	r25, 0xFF	; 255
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	22 0f       	add	r18, r18
    15c6:	33 1f       	adc	r19, r19
    15c8:	44 1f       	adc	r20, r20
    15ca:	aa 1f       	adc	r26, r26
    15cc:	a9 f3       	breq	.-22     	; 0x15b8 <__divsf3_pse+0x10>
    15ce:	35 d0       	rcall	.+106    	; 0x163a <__divsf3_pse+0x92>
    15d0:	0e 2e       	mov	r0, r30
    15d2:	3a f0       	brmi	.+14     	; 0x15e2 <__divsf3_pse+0x3a>
    15d4:	e0 e8       	ldi	r30, 0x80	; 128
    15d6:	32 d0       	rcall	.+100    	; 0x163c <__divsf3_pse+0x94>
    15d8:	91 50       	subi	r25, 0x01	; 1
    15da:	50 40       	sbci	r21, 0x00	; 0
    15dc:	e6 95       	lsr	r30
    15de:	00 1c       	adc	r0, r0
    15e0:	ca f7       	brpl	.-14     	; 0x15d4 <__divsf3_pse+0x2c>
    15e2:	2b d0       	rcall	.+86     	; 0x163a <__divsf3_pse+0x92>
    15e4:	fe 2f       	mov	r31, r30
    15e6:	29 d0       	rcall	.+82     	; 0x163a <__divsf3_pse+0x92>
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	bb 1f       	adc	r27, r27
    15f0:	26 17       	cp	r18, r22
    15f2:	37 07       	cpc	r19, r23
    15f4:	48 07       	cpc	r20, r24
    15f6:	ab 07       	cpc	r26, r27
    15f8:	b0 e8       	ldi	r27, 0x80	; 128
    15fa:	09 f0       	breq	.+2      	; 0x15fe <__divsf3_pse+0x56>
    15fc:	bb 0b       	sbc	r27, r27
    15fe:	80 2d       	mov	r24, r0
    1600:	bf 01       	movw	r22, r30
    1602:	ff 27       	eor	r31, r31
    1604:	93 58       	subi	r25, 0x83	; 131
    1606:	5f 4f       	sbci	r21, 0xFF	; 255
    1608:	3a f0       	brmi	.+14     	; 0x1618 <__divsf3_pse+0x70>
    160a:	9e 3f       	cpi	r25, 0xFE	; 254
    160c:	51 05       	cpc	r21, r1
    160e:	78 f0       	brcs	.+30     	; 0x162e <__divsf3_pse+0x86>
    1610:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_inf>
    1614:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_szero>
    1618:	5f 3f       	cpi	r21, 0xFF	; 255
    161a:	e4 f3       	brlt	.-8      	; 0x1614 <__divsf3_pse+0x6c>
    161c:	98 3e       	cpi	r25, 0xE8	; 232
    161e:	d4 f3       	brlt	.-12     	; 0x1614 <__divsf3_pse+0x6c>
    1620:	86 95       	lsr	r24
    1622:	77 95       	ror	r23
    1624:	67 95       	ror	r22
    1626:	b7 95       	ror	r27
    1628:	f7 95       	ror	r31
    162a:	9f 5f       	subi	r25, 0xFF	; 255
    162c:	c9 f7       	brne	.-14     	; 0x1620 <__divsf3_pse+0x78>
    162e:	88 0f       	add	r24, r24
    1630:	91 1d       	adc	r25, r1
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	97 f9       	bld	r25, 7
    1638:	08 95       	ret
    163a:	e1 e0       	ldi	r30, 0x01	; 1
    163c:	66 0f       	add	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	bb 1f       	adc	r27, r27
    1644:	62 17       	cp	r22, r18
    1646:	73 07       	cpc	r23, r19
    1648:	84 07       	cpc	r24, r20
    164a:	ba 07       	cpc	r27, r26
    164c:	20 f0       	brcs	.+8      	; 0x1656 <__divsf3_pse+0xae>
    164e:	62 1b       	sub	r22, r18
    1650:	73 0b       	sbc	r23, r19
    1652:	84 0b       	sbc	r24, r20
    1654:	ba 0b       	sbc	r27, r26
    1656:	ee 1f       	adc	r30, r30
    1658:	88 f7       	brcc	.-30     	; 0x163c <__divsf3_pse+0x94>
    165a:	e0 95       	com	r30
    165c:	08 95       	ret

0000165e <__fixsfsi>:
    165e:	0e 94 36 0b 	call	0x166c	; 0x166c <__fixunssfsi>
    1662:	68 94       	set
    1664:	b1 11       	cpse	r27, r1
    1666:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_szero>
    166a:	08 95       	ret

0000166c <__fixunssfsi>:
    166c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__fp_splitA>
    1670:	88 f0       	brcs	.+34     	; 0x1694 <__fixunssfsi+0x28>
    1672:	9f 57       	subi	r25, 0x7F	; 127
    1674:	98 f0       	brcs	.+38     	; 0x169c <__fixunssfsi+0x30>
    1676:	b9 2f       	mov	r27, r25
    1678:	99 27       	eor	r25, r25
    167a:	b7 51       	subi	r27, 0x17	; 23
    167c:	b0 f0       	brcs	.+44     	; 0x16aa <__fixunssfsi+0x3e>
    167e:	e1 f0       	breq	.+56     	; 0x16b8 <__fixunssfsi+0x4c>
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	88 1f       	adc	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	1a f0       	brmi	.+6      	; 0x1690 <__fixunssfsi+0x24>
    168a:	ba 95       	dec	r27
    168c:	c9 f7       	brne	.-14     	; 0x1680 <__fixunssfsi+0x14>
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <__fixunssfsi+0x4c>
    1690:	b1 30       	cpi	r27, 0x01	; 1
    1692:	91 f0       	breq	.+36     	; 0x16b8 <__fixunssfsi+0x4c>
    1694:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_zero>
    1698:	b1 e0       	ldi	r27, 0x01	; 1
    169a:	08 95       	ret
    169c:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__fp_zero>
    16a0:	67 2f       	mov	r22, r23
    16a2:	78 2f       	mov	r23, r24
    16a4:	88 27       	eor	r24, r24
    16a6:	b8 5f       	subi	r27, 0xF8	; 248
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <__fixunssfsi+0x4c>
    16aa:	b9 3f       	cpi	r27, 0xF9	; 249
    16ac:	cc f3       	brlt	.-14     	; 0x16a0 <__fixunssfsi+0x34>
    16ae:	86 95       	lsr	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	b3 95       	inc	r27
    16b6:	d9 f7       	brne	.-10     	; 0x16ae <__fixunssfsi+0x42>
    16b8:	3e f4       	brtc	.+14     	; 0x16c8 <__fixunssfsi+0x5c>
    16ba:	90 95       	com	r25
    16bc:	80 95       	com	r24
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	8f 4f       	sbci	r24, 0xFF	; 255
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	08 95       	ret

000016ca <__floatunsisf>:
    16ca:	e8 94       	clt
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <__floatsisf+0x12>

000016ce <__floatsisf>:
    16ce:	97 fb       	bst	r25, 7
    16d0:	3e f4       	brtc	.+14     	; 0x16e0 <__floatsisf+0x12>
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	99 23       	and	r25, r25
    16e2:	a9 f0       	breq	.+42     	; 0x170e <__floatsisf+0x40>
    16e4:	f9 2f       	mov	r31, r25
    16e6:	96 e9       	ldi	r25, 0x96	; 150
    16e8:	bb 27       	eor	r27, r27
    16ea:	93 95       	inc	r25
    16ec:	f6 95       	lsr	r31
    16ee:	87 95       	ror	r24
    16f0:	77 95       	ror	r23
    16f2:	67 95       	ror	r22
    16f4:	b7 95       	ror	r27
    16f6:	f1 11       	cpse	r31, r1
    16f8:	f8 cf       	rjmp	.-16     	; 0x16ea <__floatsisf+0x1c>
    16fa:	fa f4       	brpl	.+62     	; 0x173a <__floatsisf+0x6c>
    16fc:	bb 0f       	add	r27, r27
    16fe:	11 f4       	brne	.+4      	; 0x1704 <__floatsisf+0x36>
    1700:	60 ff       	sbrs	r22, 0
    1702:	1b c0       	rjmp	.+54     	; 0x173a <__floatsisf+0x6c>
    1704:	6f 5f       	subi	r22, 0xFF	; 255
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	16 c0       	rjmp	.+44     	; 0x173a <__floatsisf+0x6c>
    170e:	88 23       	and	r24, r24
    1710:	11 f0       	breq	.+4      	; 0x1716 <__floatsisf+0x48>
    1712:	96 e9       	ldi	r25, 0x96	; 150
    1714:	11 c0       	rjmp	.+34     	; 0x1738 <__floatsisf+0x6a>
    1716:	77 23       	and	r23, r23
    1718:	21 f0       	breq	.+8      	; 0x1722 <__floatsisf+0x54>
    171a:	9e e8       	ldi	r25, 0x8E	; 142
    171c:	87 2f       	mov	r24, r23
    171e:	76 2f       	mov	r23, r22
    1720:	05 c0       	rjmp	.+10     	; 0x172c <__floatsisf+0x5e>
    1722:	66 23       	and	r22, r22
    1724:	71 f0       	breq	.+28     	; 0x1742 <__floatsisf+0x74>
    1726:	96 e8       	ldi	r25, 0x86	; 134
    1728:	86 2f       	mov	r24, r22
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	2a f0       	brmi	.+10     	; 0x173a <__floatsisf+0x6c>
    1730:	9a 95       	dec	r25
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	88 1f       	adc	r24, r24
    1738:	da f7       	brpl	.-10     	; 0x1730 <__floatsisf+0x62>
    173a:	88 0f       	add	r24, r24
    173c:	96 95       	lsr	r25
    173e:	87 95       	ror	r24
    1740:	97 f9       	bld	r25, 7
    1742:	08 95       	ret

00001744 <__fp_inf>:
    1744:	97 f9       	bld	r25, 7
    1746:	9f 67       	ori	r25, 0x7F	; 127
    1748:	80 e8       	ldi	r24, 0x80	; 128
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	08 95       	ret

00001750 <__fp_nan>:
    1750:	9f ef       	ldi	r25, 0xFF	; 255
    1752:	80 ec       	ldi	r24, 0xC0	; 192
    1754:	08 95       	ret

00001756 <__fp_pscA>:
    1756:	00 24       	eor	r0, r0
    1758:	0a 94       	dec	r0
    175a:	16 16       	cp	r1, r22
    175c:	17 06       	cpc	r1, r23
    175e:	18 06       	cpc	r1, r24
    1760:	09 06       	cpc	r0, r25
    1762:	08 95       	ret

00001764 <__fp_pscB>:
    1764:	00 24       	eor	r0, r0
    1766:	0a 94       	dec	r0
    1768:	12 16       	cp	r1, r18
    176a:	13 06       	cpc	r1, r19
    176c:	14 06       	cpc	r1, r20
    176e:	05 06       	cpc	r0, r21
    1770:	08 95       	ret

00001772 <__fp_round>:
    1772:	09 2e       	mov	r0, r25
    1774:	03 94       	inc	r0
    1776:	00 0c       	add	r0, r0
    1778:	11 f4       	brne	.+4      	; 0x177e <__fp_round+0xc>
    177a:	88 23       	and	r24, r24
    177c:	52 f0       	brmi	.+20     	; 0x1792 <__fp_round+0x20>
    177e:	bb 0f       	add	r27, r27
    1780:	40 f4       	brcc	.+16     	; 0x1792 <__fp_round+0x20>
    1782:	bf 2b       	or	r27, r31
    1784:	11 f4       	brne	.+4      	; 0x178a <__fp_round+0x18>
    1786:	60 ff       	sbrs	r22, 0
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <__fp_round+0x20>
    178a:	6f 5f       	subi	r22, 0xFF	; 255
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	8f 4f       	sbci	r24, 0xFF	; 255
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	08 95       	ret

00001794 <__fp_split3>:
    1794:	57 fd       	sbrc	r21, 7
    1796:	90 58       	subi	r25, 0x80	; 128
    1798:	44 0f       	add	r20, r20
    179a:	55 1f       	adc	r21, r21
    179c:	59 f0       	breq	.+22     	; 0x17b4 <__fp_splitA+0x10>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	71 f0       	breq	.+28     	; 0x17be <__fp_splitA+0x1a>
    17a2:	47 95       	ror	r20

000017a4 <__fp_splitA>:
    17a4:	88 0f       	add	r24, r24
    17a6:	97 fb       	bst	r25, 7
    17a8:	99 1f       	adc	r25, r25
    17aa:	61 f0       	breq	.+24     	; 0x17c4 <__fp_splitA+0x20>
    17ac:	9f 3f       	cpi	r25, 0xFF	; 255
    17ae:	79 f0       	breq	.+30     	; 0x17ce <__fp_splitA+0x2a>
    17b0:	87 95       	ror	r24
    17b2:	08 95       	ret
    17b4:	12 16       	cp	r1, r18
    17b6:	13 06       	cpc	r1, r19
    17b8:	14 06       	cpc	r1, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	f2 cf       	rjmp	.-28     	; 0x17a2 <__fp_split3+0xe>
    17be:	46 95       	lsr	r20
    17c0:	f1 df       	rcall	.-30     	; 0x17a4 <__fp_splitA>
    17c2:	08 c0       	rjmp	.+16     	; 0x17d4 <__fp_splitA+0x30>
    17c4:	16 16       	cp	r1, r22
    17c6:	17 06       	cpc	r1, r23
    17c8:	18 06       	cpc	r1, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	f1 cf       	rjmp	.-30     	; 0x17b0 <__fp_splitA+0xc>
    17ce:	86 95       	lsr	r24
    17d0:	71 05       	cpc	r23, r1
    17d2:	61 05       	cpc	r22, r1
    17d4:	08 94       	sec
    17d6:	08 95       	ret

000017d8 <__fp_zero>:
    17d8:	e8 94       	clt

000017da <__fp_szero>:
    17da:	bb 27       	eor	r27, r27
    17dc:	66 27       	eor	r22, r22
    17de:	77 27       	eor	r23, r23
    17e0:	cb 01       	movw	r24, r22
    17e2:	97 f9       	bld	r25, 7
    17e4:	08 95       	ret

000017e6 <__mulsf3>:
    17e6:	0e 94 06 0c 	call	0x180c	; 0x180c <__mulsf3x>
    17ea:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_round>
    17ee:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fp_pscA>
    17f2:	38 f0       	brcs	.+14     	; 0x1802 <__mulsf3+0x1c>
    17f4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fp_pscB>
    17f8:	20 f0       	brcs	.+8      	; 0x1802 <__mulsf3+0x1c>
    17fa:	95 23       	and	r25, r21
    17fc:	11 f0       	breq	.+4      	; 0x1802 <__mulsf3+0x1c>
    17fe:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_inf>
    1802:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_nan>
    1806:	11 24       	eor	r1, r1
    1808:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_szero>

0000180c <__mulsf3x>:
    180c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_split3>
    1810:	70 f3       	brcs	.-36     	; 0x17ee <__mulsf3+0x8>

00001812 <__mulsf3_pse>:
    1812:	95 9f       	mul	r25, r21
    1814:	c1 f3       	breq	.-16     	; 0x1806 <__mulsf3+0x20>
    1816:	95 0f       	add	r25, r21
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	55 1f       	adc	r21, r21
    181c:	62 9f       	mul	r22, r18
    181e:	f0 01       	movw	r30, r0
    1820:	72 9f       	mul	r23, r18
    1822:	bb 27       	eor	r27, r27
    1824:	f0 0d       	add	r31, r0
    1826:	b1 1d       	adc	r27, r1
    1828:	63 9f       	mul	r22, r19
    182a:	aa 27       	eor	r26, r26
    182c:	f0 0d       	add	r31, r0
    182e:	b1 1d       	adc	r27, r1
    1830:	aa 1f       	adc	r26, r26
    1832:	64 9f       	mul	r22, r20
    1834:	66 27       	eor	r22, r22
    1836:	b0 0d       	add	r27, r0
    1838:	a1 1d       	adc	r26, r1
    183a:	66 1f       	adc	r22, r22
    183c:	82 9f       	mul	r24, r18
    183e:	22 27       	eor	r18, r18
    1840:	b0 0d       	add	r27, r0
    1842:	a1 1d       	adc	r26, r1
    1844:	62 1f       	adc	r22, r18
    1846:	73 9f       	mul	r23, r19
    1848:	b0 0d       	add	r27, r0
    184a:	a1 1d       	adc	r26, r1
    184c:	62 1f       	adc	r22, r18
    184e:	83 9f       	mul	r24, r19
    1850:	a0 0d       	add	r26, r0
    1852:	61 1d       	adc	r22, r1
    1854:	22 1f       	adc	r18, r18
    1856:	74 9f       	mul	r23, r20
    1858:	33 27       	eor	r19, r19
    185a:	a0 0d       	add	r26, r0
    185c:	61 1d       	adc	r22, r1
    185e:	23 1f       	adc	r18, r19
    1860:	84 9f       	mul	r24, r20
    1862:	60 0d       	add	r22, r0
    1864:	21 1d       	adc	r18, r1
    1866:	82 2f       	mov	r24, r18
    1868:	76 2f       	mov	r23, r22
    186a:	6a 2f       	mov	r22, r26
    186c:	11 24       	eor	r1, r1
    186e:	9f 57       	subi	r25, 0x7F	; 127
    1870:	50 40       	sbci	r21, 0x00	; 0
    1872:	9a f0       	brmi	.+38     	; 0x189a <__mulsf3_pse+0x88>
    1874:	f1 f0       	breq	.+60     	; 0x18b2 <__mulsf3_pse+0xa0>
    1876:	88 23       	and	r24, r24
    1878:	4a f0       	brmi	.+18     	; 0x188c <__mulsf3_pse+0x7a>
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	bb 1f       	adc	r27, r27
    1880:	66 1f       	adc	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	50 40       	sbci	r21, 0x00	; 0
    188a:	a9 f7       	brne	.-22     	; 0x1876 <__mulsf3_pse+0x64>
    188c:	9e 3f       	cpi	r25, 0xFE	; 254
    188e:	51 05       	cpc	r21, r1
    1890:	80 f0       	brcs	.+32     	; 0x18b2 <__mulsf3_pse+0xa0>
    1892:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_inf>
    1896:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_szero>
    189a:	5f 3f       	cpi	r21, 0xFF	; 255
    189c:	e4 f3       	brlt	.-8      	; 0x1896 <__mulsf3_pse+0x84>
    189e:	98 3e       	cpi	r25, 0xE8	; 232
    18a0:	d4 f3       	brlt	.-12     	; 0x1896 <__mulsf3_pse+0x84>
    18a2:	86 95       	lsr	r24
    18a4:	77 95       	ror	r23
    18a6:	67 95       	ror	r22
    18a8:	b7 95       	ror	r27
    18aa:	f7 95       	ror	r31
    18ac:	e7 95       	ror	r30
    18ae:	9f 5f       	subi	r25, 0xFF	; 255
    18b0:	c1 f7       	brne	.-16     	; 0x18a2 <__mulsf3_pse+0x90>
    18b2:	fe 2b       	or	r31, r30
    18b4:	88 0f       	add	r24, r24
    18b6:	91 1d       	adc	r25, r1
    18b8:	96 95       	lsr	r25
    18ba:	87 95       	ror	r24
    18bc:	97 f9       	bld	r25, 7
    18be:	08 95       	ret

000018c0 <do_rand>:
    18c0:	8f 92       	push	r8
    18c2:	9f 92       	push	r9
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	ec 01       	movw	r28, r24
    18d6:	68 81       	ld	r22, Y
    18d8:	79 81       	ldd	r23, Y+1	; 0x01
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	61 15       	cp	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	81 05       	cpc	r24, r1
    18e4:	91 05       	cpc	r25, r1
    18e6:	21 f4       	brne	.+8      	; 0x18f0 <do_rand+0x30>
    18e8:	64 e2       	ldi	r22, 0x24	; 36
    18ea:	79 ed       	ldi	r23, 0xD9	; 217
    18ec:	8b e5       	ldi	r24, 0x5B	; 91
    18ee:	97 e0       	ldi	r25, 0x07	; 7
    18f0:	2d e1       	ldi	r18, 0x1D	; 29
    18f2:	33 ef       	ldi	r19, 0xF3	; 243
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__divmodsi4>
    18fc:	49 01       	movw	r8, r18
    18fe:	5a 01       	movw	r10, r20
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	a7 ea       	ldi	r26, 0xA7	; 167
    1906:	b1 e4       	ldi	r27, 0x41	; 65
    1908:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__muluhisi3>
    190c:	6b 01       	movw	r12, r22
    190e:	7c 01       	movw	r14, r24
    1910:	ac ee       	ldi	r26, 0xEC	; 236
    1912:	b4 ef       	ldi	r27, 0xF4	; 244
    1914:	a5 01       	movw	r20, r10
    1916:	94 01       	movw	r18, r8
    1918:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulohisi3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8c 0d       	add	r24, r12
    1922:	9d 1d       	adc	r25, r13
    1924:	ae 1d       	adc	r26, r14
    1926:	bf 1d       	adc	r27, r15
    1928:	b7 ff       	sbrs	r27, 7
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <do_rand+0x72>
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	a1 09       	sbc	r26, r1
    1930:	b0 48       	sbci	r27, 0x80	; 128
    1932:	88 83       	st	Y, r24
    1934:	99 83       	std	Y+1, r25	; 0x01
    1936:	aa 83       	std	Y+2, r26	; 0x02
    1938:	bb 83       	std	Y+3, r27	; 0x03
    193a:	9f 77       	andi	r25, 0x7F	; 127
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
    1948:	bf 90       	pop	r11
    194a:	af 90       	pop	r10
    194c:	9f 90       	pop	r9
    194e:	8f 90       	pop	r8
    1950:	08 95       	ret

00001952 <rand_r>:
    1952:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <do_rand>
    1956:	08 95       	ret

00001958 <rand>:
    1958:	87 e0       	ldi	r24, 0x07	; 7
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <do_rand>
    1960:	08 95       	ret

00001962 <srand>:
    1962:	a0 e0       	ldi	r26, 0x00	; 0
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	80 93 07 01 	sts	0x0107, r24
    196a:	90 93 08 01 	sts	0x0108, r25
    196e:	a0 93 09 01 	sts	0x0109, r26
    1972:	b0 93 0a 01 	sts	0x010A, r27
    1976:	08 95       	ret

00001978 <eeprom_read_byte>:
    1978:	f9 99       	sbic	0x1f, 1	; 31
    197a:	fe cf       	rjmp	.-4      	; 0x1978 <eeprom_read_byte>
    197c:	92 bd       	out	0x22, r25	; 34
    197e:	81 bd       	out	0x21, r24	; 33
    1980:	f8 9a       	sbi	0x1f, 0	; 31
    1982:	99 27       	eor	r25, r25
    1984:	80 b5       	in	r24, 0x20	; 32
    1986:	08 95       	ret

00001988 <eeprom_write_byte>:
    1988:	26 2f       	mov	r18, r22

0000198a <eeprom_write_r18>:
    198a:	f9 99       	sbic	0x1f, 1	; 31
    198c:	fe cf       	rjmp	.-4      	; 0x198a <eeprom_write_r18>
    198e:	1f ba       	out	0x1f, r1	; 31
    1990:	92 bd       	out	0x22, r25	; 34
    1992:	81 bd       	out	0x21, r24	; 33
    1994:	20 bd       	out	0x20, r18	; 32
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	fa 9a       	sbi	0x1f, 2	; 31
    199c:	f9 9a       	sbi	0x1f, 1	; 31
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	08 95       	ret

000019a4 <__divmodsi4>:
    19a4:	05 2e       	mov	r0, r21
    19a6:	97 fb       	bst	r25, 7
    19a8:	1e f4       	brtc	.+6      	; 0x19b0 <__divmodsi4+0xc>
    19aa:	00 94       	com	r0
    19ac:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__negsi2>
    19b0:	57 fd       	sbrc	r21, 7
    19b2:	07 d0       	rcall	.+14     	; 0x19c2 <__divmodsi4_neg2>
    19b4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__udivmodsi4>
    19b8:	07 fc       	sbrc	r0, 7
    19ba:	03 d0       	rcall	.+6      	; 0x19c2 <__divmodsi4_neg2>
    19bc:	4e f4       	brtc	.+18     	; 0x19d0 <__divmodsi4_exit>
    19be:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__negsi2>

000019c2 <__divmodsi4_neg2>:
    19c2:	50 95       	com	r21
    19c4:	40 95       	com	r20
    19c6:	30 95       	com	r19
    19c8:	21 95       	neg	r18
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	4f 4f       	sbci	r20, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255

000019d0 <__divmodsi4_exit>:
    19d0:	08 95       	ret

000019d2 <__negsi2>:
    19d2:	90 95       	com	r25
    19d4:	80 95       	com	r24
    19d6:	70 95       	com	r23
    19d8:	61 95       	neg	r22
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	08 95       	ret

000019e2 <__muluhisi3>:
    19e2:	0e 94 2d 0a 	call	0x145a	; 0x145a <__umulhisi3>
    19e6:	a5 9f       	mul	r26, r21
    19e8:	90 0d       	add	r25, r0
    19ea:	b4 9f       	mul	r27, r20
    19ec:	90 0d       	add	r25, r0
    19ee:	a4 9f       	mul	r26, r20
    19f0:	80 0d       	add	r24, r0
    19f2:	91 1d       	adc	r25, r1
    19f4:	11 24       	eor	r1, r1
    19f6:	08 95       	ret

000019f8 <__mulshisi3>:
    19f8:	b7 ff       	sbrs	r27, 7
    19fa:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__muluhisi3>

000019fe <__mulohisi3>:
    19fe:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__muluhisi3>
    1a02:	82 1b       	sub	r24, r18
    1a04:	93 0b       	sbc	r25, r19
    1a06:	08 95       	ret

00001a08 <__udivmodsi4>:
    1a08:	a1 e2       	ldi	r26, 0x21	; 33
    1a0a:	1a 2e       	mov	r1, r26
    1a0c:	aa 1b       	sub	r26, r26
    1a0e:	bb 1b       	sub	r27, r27
    1a10:	fd 01       	movw	r30, r26
    1a12:	0d c0       	rjmp	.+26     	; 0x1a2e <__udivmodsi4_ep>

00001a14 <__udivmodsi4_loop>:
    1a14:	aa 1f       	adc	r26, r26
    1a16:	bb 1f       	adc	r27, r27
    1a18:	ee 1f       	adc	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	a2 17       	cp	r26, r18
    1a1e:	b3 07       	cpc	r27, r19
    1a20:	e4 07       	cpc	r30, r20
    1a22:	f5 07       	cpc	r31, r21
    1a24:	20 f0       	brcs	.+8      	; 0x1a2e <__udivmodsi4_ep>
    1a26:	a2 1b       	sub	r26, r18
    1a28:	b3 0b       	sbc	r27, r19
    1a2a:	e4 0b       	sbc	r30, r20
    1a2c:	f5 0b       	sbc	r31, r21

00001a2e <__udivmodsi4_ep>:
    1a2e:	66 1f       	adc	r22, r22
    1a30:	77 1f       	adc	r23, r23
    1a32:	88 1f       	adc	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	1a 94       	dec	r1
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <__udivmodsi4_loop>
    1a3a:	60 95       	com	r22
    1a3c:	70 95       	com	r23
    1a3e:	80 95       	com	r24
    1a40:	90 95       	com	r25
    1a42:	9b 01       	movw	r18, r22
    1a44:	ac 01       	movw	r20, r24
    1a46:	bd 01       	movw	r22, r26
    1a48:	cf 01       	movw	r24, r30
    1a4a:	08 95       	ret

00001a4c <_exit>:
    1a4c:	f8 94       	cli

00001a4e <__stop_program>:
    1a4e:	ff cf       	rjmp	.-2      	; 0x1a4e <__stop_program>
