
build/blink_led.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	d7 01       	movw	r26, r14
      6a:	53 02       	muls	r21, r19
      6c:	ab 01       	movw	r20, r22
      6e:	a2 01       	movw	r20, r4
      70:	a8 01       	movw	r20, r16
      72:	35 02       	muls	r19, r21
      74:	2a 02       	muls	r18, r26
      76:	b5 08       	sbc	r11, r5
      78:	92 07       	cpc	r25, r18
      7a:	92 07       	cpc	r25, r18
      7c:	b2 08       	sbc	r11, r2
      7e:	be 08       	sbc	r11, r14
      80:	ae 08       	sbc	r10, r14
      82:	c5 08       	sbc	r12, r5
      84:	c1 08       	sbc	r12, r1
      86:	c9 08       	sbc	r12, r9
      88:	81 08       	sbc	r8, r1
      8a:	53 08       	sbc	r5, r3

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 e3       	ldi	r30, 0x36	; 54
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 36       	cpi	r26, 0x6E	; 110
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <main>
      da:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
#include <kilolib.h>

void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
void loop()
{
    // Put the main code here. This is run repeatedly.
    
    // Set the LED red.
    set_color(RGB(1, 1, 0));
      e4:	85 e0       	ldi	r24, 0x05	; 5
      e6:	0e 94 0c 07 	call	0xe18	; 0xe18 <set_color>
    // Wait half a second (500 ms).
    delay(500);
      ea:	84 ef       	ldi	r24, 0xF4	; 244
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delay>
    // Set the LED blue.
    set_color(RGB(0, 0, 0));
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 0c 07 	call	0xe18	; 0xe18 <set_color>
    // Wait half a second (500 ms).
    delay(500);
      f8:	84 ef       	ldi	r24, 0xF4	; 244
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delay>
    set_color(RGB(1, 1, 1));
     100:	85 e1       	ldi	r24, 0x15	; 21
     102:	0e 94 0c 07 	call	0xe18	; 0xe18 <set_color>
    delay(500);
     106:	84 ef       	ldi	r24, 0xF4	; 244
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <delay>

0000010e <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     10e:	08 95       	ret

00000110 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	08 95       	ret

00000116 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     116:	08 95       	ret

00000118 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     118:	df 92       	push	r13
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
    cli();
     126:	f8 94       	cli

    ports_off();
     128:	14 b8       	out	0x04, r1	; 4
     12a:	17 b8       	out	0x07, r1	; 7
     12c:	1a b8       	out	0x0a, r1	; 10
     12e:	15 b8       	out	0x05, r1	; 5
     130:	18 b8       	out	0x08, r1	; 8
     132:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     134:	52 9a       	sbi	0x0a, 2	; 10
     136:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     138:	14 bc       	out	0x24, r1	; 36
     13a:	85 e0       	ldi	r24, 0x05	; 5
     13c:	85 bd       	out	0x25, r24	; 37
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	87 bd       	out	0x27, r24	; 39
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     148:	10 92 80 00 	sts	0x0080, r1
     14c:	10 92 81 00 	sts	0x0081, r1
     150:	2f e8       	ldi	r18, 0x8F	; 143
     152:	3b e0       	ldi	r19, 0x0B	; 11
     154:	30 93 89 00 	sts	0x0089, r19
     158:	20 93 88 00 	sts	0x0088, r18
     15c:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     160:	53 98       	cbi	0x0a, 3	; 10
     162:	23 98       	cbi	0x04, 3	; 4
     164:	91 ea       	ldi	r25, 0xA1	; 161
     166:	90 93 b0 00 	sts	0x00B0, r25
     16a:	80 93 b1 00 	sts	0x00B1, r24
     16e:	10 92 b4 00 	sts	0x00B4, r1
     172:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     176:	8b e0       	ldi	r24, 0x0B	; 11
     178:	80 bf       	out	0x30, r24	; 48
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     180:	86 e0       	ldi	r24, 0x06	; 6
     182:	80 93 7c 00 	sts	0x007C, r24
     186:	83 e8       	ldi	r24, 0x83	; 131
     188:	80 93 7a 00 	sts	0x007A, r24
     18c:	80 91 7a 00 	lds	r24, 0x007A
     190:	80 64       	ori	r24, 0x40	; 64
     192:	80 93 7a 00 	sts	0x007A, r24
     196:	80 91 7a 00 	lds	r24, 0x007A
     19a:	86 fd       	sbrc	r24, 6
     19c:	fc cf       	rjmp	.-8      	; 0x196 <kilo_init+0x7e>
    adc_trigger_high_gain();
     19e:	10 92 7c 00 	sts	0x007C, r1
     1a2:	83 ea       	ldi	r24, 0xA3	; 163
     1a4:	80 93 7a 00 	sts	0x007A, r24
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
    if (osccal != 0xFF)
     1b6:	8f 3f       	cpi	r24, 0xFF	; 255
     1b8:	11 f0       	breq	.+4      	; 0x1be <kilo_init+0xa6>
        OSCCAL = osccal;
     1ba:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1be:	10 92 37 01 	sts	0x0137, r1
    rx_leadingbit = 1;
     1c2:	c1 e0       	ldi	r28, 0x01	; 1
     1c4:	c0 93 10 01 	sts	0x0110, r28
    rx_leadingbyte = 1;
     1c8:	c0 93 54 01 	sts	0x0154, r28
    rx_byteindex = 0;
     1cc:	10 92 2e 01 	sts	0x012E, r1
    rx_bytevalue = 0;
     1d0:	10 92 68 01 	sts	0x0168, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1d4:	80 e9       	ldi	r24, 0x90	; 144
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     1dc:	80 93 2d 01 	sts	0x012D, r24
    if (tx_mask & ~TX_MASK_MAX)
     1e0:	80 91 2d 01 	lds	r24, 0x012D
     1e4:	88 73       	andi	r24, 0x38	; 56
     1e6:	11 f0       	breq	.+4      	; 0x1ec <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1e8:	c0 93 2d 01 	sts	0x012D, r28
    tx_clock = 0;
     1ec:	10 92 58 01 	sts	0x0158, r1
     1f0:	10 92 57 01 	sts	0x0157, r1
    tx_increment = 255;
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	90 93 56 01 	sts	0x0156, r25
     1fc:	80 93 55 01 	sts	0x0155, r24
    kilo_ticks = 0;
     200:	10 92 33 01 	sts	0x0133, r1
     204:	10 92 34 01 	sts	0x0134, r1
     208:	10 92 35 01 	sts	0x0135, r1
     20c:	10 92 36 01 	sts	0x0136, r1
    kilo_state = IDLE;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     216:	82 e4       	ldi	r24, 0x42	; 66
     218:	9f e0       	ldi	r25, 0x0F	; 15
     21a:	90 93 67 01 	sts	0x0167, r25
     21e:	80 93 66 01 	sts	0x0166, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     222:	80 eb       	ldi	r24, 0xB0	; 176
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     22a:	c8 2f       	mov	r28, r24
     22c:	81 eb       	ldi	r24, 0xB1	; 177
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     234:	2c 2f       	mov	r18, r28
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	38 2b       	or	r19, r24
     23a:	30 93 6a 01 	sts	0x016A, r19
     23e:	20 93 69 01 	sts	0x0169, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     24a:	80 93 6d 01 	sts	0x016D, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     24e:	89 e0       	ldi	r24, 0x09	; 9
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     256:	80 93 59 01 	sts	0x0159, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     25a:	8c e0       	ldi	r24, 0x0C	; 12
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     262:	80 93 6b 01 	sts	0x016B, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     266:	84 e1       	ldi	r24, 0x14	; 20
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     26e:	80 93 6c 01 	sts	0x016C, r24
     272:	58 e3       	ldi	r21, 0x38	; 56
     274:	e5 2e       	mov	r14, r21
     276:	51 e0       	ldi	r21, 0x01	; 1
     278:	f5 2e       	mov	r15, r21
     27a:	01 e1       	ldi	r16, 0x11	; 17
     27c:	11 e0       	ldi	r17, 0x01	; 1
     27e:	c0 e2       	ldi	r28, 0x20	; 32
     280:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     282:	ce 01       	movw	r24, r28
     284:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     288:	d8 2e       	mov	r13, r24
     28a:	ce 01       	movw	r24, r28
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     292:	2d 2d       	mov	r18, r13
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	32 2f       	mov	r19, r18
     298:	22 27       	eor	r18, r18
     29a:	28 2b       	or	r18, r24
     29c:	f7 01       	movw	r30, r14
     29e:	21 93       	st	Z+, r18
     2a0:	31 93       	st	Z+, r19
     2a2:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2a4:	ce 01       	movw	r24, r28
     2a6:	c0 96       	adiw	r24, 0x30	; 48
     2a8:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     2ac:	d8 2e       	mov	r13, r24
     2ae:	ce 01       	movw	r24, r28
     2b0:	c1 96       	adiw	r24, 0x31	; 49
     2b2:	0e 94 af 0c 	call	0x195e	; 0x195e <eeprom_read_byte>
     2b6:	2d 2d       	mov	r18, r13
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	32 2f       	mov	r19, r18
     2bc:	22 27       	eor	r18, r18
     2be:	28 2b       	or	r18, r24
     2c0:	f8 01       	movw	r30, r16
     2c2:	21 93       	st	Z+, r18
     2c4:	31 93       	st	Z+, r19
     2c6:	8f 01       	movw	r16, r30
     2c8:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2ca:	cc 33       	cpi	r28, 0x3C	; 60
     2cc:	d1 05       	cpc	r29, r1
     2ce:	c9 f6       	brne	.-78     	; 0x282 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2d0:	78 94       	sei
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	df 90       	pop	r13
     2e0:	08 95       	ret

000002e2 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2e2:	1f 92       	push	r1
     2e4:	0f 92       	push	r0
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	0f 92       	push	r0
     2ea:	11 24       	eor	r1, r1
     2ec:	8f 93       	push	r24
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	a8 95       	wdr
     2f4:	80 91 60 00 	lds	r24, 0x0060
     2f8:	88 61       	ori	r24, 0x18	; 24
     2fa:	80 93 60 00 	sts	0x0060, r24
     2fe:	10 92 60 00 	sts	0x0060, r1
     302:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     304:	8f 91       	pop	r24
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     310:	3c 01       	movw	r6, r24
     312:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     314:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     316:	99 24       	eor	r9, r9
     318:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     31e:	96 e0       	ldi	r25, 0x06	; 6
     320:	a9 2e       	mov	r10, r25
     322:	23 e8       	ldi	r18, 0x83	; 131
     324:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     326:	38 e1       	ldi	r19, 0x18	; 24
     328:	d3 2e       	mov	r13, r19
     32a:	49 e2       	ldi	r20, 0x29	; 41
     32c:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     32e:	90 91 0f 01 	lds	r25, 0x010F
     332:	e9 2f       	mov	r30, r25
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	e7 30       	cpi	r30, 0x07	; 7
     338:	f1 05       	cpc	r31, r1
     33a:	c8 f7       	brcc	.-14     	; 0x32e <kilo_start+0x1e>
     33c:	ec 5c       	subi	r30, 0xCC	; 204
     33e:	ff 4f       	sbci	r31, 0xFF	; 255
     340:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     344:	11 23       	and	r17, r17
     346:	09 f4       	brne	.+2      	; 0x34a <kilo_start+0x3a>
     348:	fc c0       	rjmp	.+504    	; 0x542 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     34a:	c0 92 0f 01 	sts	0x010F, r12
     34e:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     350:	fe 01       	movw	r30, r28
     352:	09 95       	icall
                break;
     354:	ec cf       	rjmp	.-40     	; 0x32e <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     356:	80 91 37 01 	lds	r24, 0x0137
     35a:	81 11       	cpse	r24, r1
     35c:	eb c0       	rjmp	.+470    	; 0x534 <kilo_start+0x224>
        cli();                                    // disable interrupts
     35e:	f8 94       	cli
        adc_setup_conversion(6);
     360:	a0 92 7c 00 	sts	0x007C, r10
     364:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     368:	80 91 7a 00 	lds	r24, 0x007A
     36c:	80 64       	ori	r24, 0x40	; 64
     36e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     372:	90 91 7a 00 	lds	r25, 0x007A
     376:	96 fd       	sbrc	r25, 6
     378:	fc cf       	rjmp	.-8      	; 0x372 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     37a:	80 91 78 00 	lds	r24, 0x0078
     37e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     382:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     384:	8b 3a       	cpi	r24, 0xAB	; 171
     386:	e2 e0       	ldi	r30, 0x02	; 2
     388:	9e 07       	cpc	r25, r30
     38a:	0c f0       	brlt	.+2      	; 0x38e <kilo_start+0x7e>
     38c:	ed c0       	rjmp	.+474    	; 0x568 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     38e:	89 38       	cpi	r24, 0x89	; 137
     390:	f2 e0       	ldi	r31, 0x02	; 2
     392:	9f 07       	cpc	r25, r31
     394:	0c f0       	brlt	.+2      	; 0x398 <kilo_start+0x88>
     396:	ef c0       	rjmp	.+478    	; 0x576 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     398:	87 36       	cpi	r24, 0x67	; 103
     39a:	92 40       	sbci	r25, 0x02	; 2
     39c:	0c f4       	brge	.+2      	; 0x3a0 <kilo_start+0x90>
     39e:	ca c0       	rjmp	.+404    	; 0x534 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3a0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3a2:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3a4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3a6:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3a8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3aa:	3c 98       	cbi	0x07, 4	; 7
     3ac:	c0 cf       	rjmp	.-128    	; 0x32e <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3ae:	f8 94       	cli
                acomp_off();
     3b0:	80 b7       	in	r24, 0x30	; 48
     3b2:	87 7f       	andi	r24, 0xF7	; 247
     3b4:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3b6:	80 91 7a 00 	lds	r24, 0x007A
     3ba:	8f 77       	andi	r24, 0x7F	; 127
     3bc:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3c0:	14 b8       	out	0x04, r1	; 4
     3c2:	17 b8       	out	0x07, r1	; 7
     3c4:	1a b8       	out	0x0a, r1	; 10
     3c6:	15 b8       	out	0x05, r1	; 5
     3c8:	18 b8       	out	0x08, r1	; 8
     3ca:	1b b8       	out	0x0b, r1	; 11
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	a8 95       	wdr
     3d2:	d0 92 60 00 	sts	0x0060, r13
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     3dc:	80 91 60 00 	lds	r24, 0x0060
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     3e6:	93 b7       	in	r25, 0x33	; 51
     3e8:	91 7f       	andi	r25, 0xF1	; 241
     3ea:	94 60       	ori	r25, 0x04	; 4
     3ec:	93 bf       	out	0x33, r25	; 51
                cli();
     3ee:	f8 94       	cli
                sleep_enable();
     3f0:	83 b7       	in	r24, 0x33	; 51
     3f2:	81 60       	ori	r24, 0x01	; 1
     3f4:	83 bf       	out	0x33, r24	; 51
                sei();
     3f6:	78 94       	sei
                sleep_cpu();
     3f8:	88 95       	sleep
                sleep_disable();
     3fa:	83 b7       	in	r24, 0x33	; 51
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	83 bf       	out	0x33, r24	; 51
                sei();
     400:	78 94       	sei
                rx_busy = 0;
     402:	10 92 37 01 	sts	0x0137, r1
                ports_on();
     406:	52 9a       	sbi	0x0a, 2	; 10
     408:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     40a:	80 91 7a 00 	lds	r24, 0x007A
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     414:	87 e5       	ldi	r24, 0x57	; 87
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <kilo_start+0x108>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <kilo_start+0x10e>
     41e:	00 00       	nop
                _delay_us(300);
                acomp_on();
     420:	80 b7       	in	r24, 0x30	; 48
     422:	88 61       	ori	r24, 0x18	; 24
     424:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     426:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     428:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     42a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     42c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     42e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     430:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     432:	ef e1       	ldi	r30, 0x1F	; 31
     434:	fe e4       	ldi	r31, 0x4E	; 78
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <kilo_start+0x126>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <kilo_start+0x12c>
     43c:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     43e:	80 91 37 01 	lds	r24, 0x0137
     442:	81 11       	cpse	r24, r1
     444:	81 c0       	rjmp	.+258    	; 0x548 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     446:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     448:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     44a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     44c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     44e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     450:	3c 98       	cbi	0x07, 4	; 7
     452:	6d cf       	rjmp	.-294    	; 0x32e <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     454:	80 91 0d 01 	lds	r24, 0x010D
     458:	81 11       	cpse	r24, r1
     45a:	41 c0       	rjmp	.+130    	; 0x4de <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     45c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     460:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     464:	10 92 0e 01 	sts	0x010E, r1
     468:	62 cf       	rjmp	.-316    	; 0x32e <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     46a:	48 99       	sbic	0x09, 0	; 9
     46c:	ec cf       	rjmp	.-40     	; 0x446 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     46e:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     470:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     472:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     474:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     476:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     478:	3c 98       	cbi	0x07, 4	; 7
     47a:	8f ec       	ldi	r24, 0xCF	; 207
     47c:	97 e0       	ldi	r25, 0x07	; 7
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <kilo_start+0x16e>
     482:	00 c0       	rjmp	.+0      	; 0x484 <kilo_start+0x174>
     484:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     486:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     488:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     48a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     48c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     48e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     490:	3c 98       	cbi	0x07, 4	; 7
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	e1 ee       	ldi	r30, 0xE1	; 225
     496:	f4 e0       	ldi	r31, 0x04	; 4
     498:	91 50       	subi	r25, 0x01	; 1
     49a:	e0 40       	sbci	r30, 0x00	; 0
     49c:	f0 40       	sbci	r31, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <kilo_start+0x188>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <kilo_start+0x192>
     4a2:	00 00       	nop
     4a4:	44 cf       	rjmp	.-376    	; 0x32e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4a6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4a8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4aa:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4ac:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4ae:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4b0:	3c 98       	cbi	0x07, 4	; 7
     4b2:	ef ec       	ldi	r30, 0xCF	; 207
     4b4:	f7 e0       	ldi	r31, 0x07	; 7
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <kilo_start+0x1a6>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <kilo_start+0x1ac>
     4bc:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4be:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4c0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4c2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4c4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4c6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4c8:	3c 98       	cbi	0x07, 4	; 7
     4ca:	ff ef       	ldi	r31, 0xFF	; 255
     4cc:	21 ee       	ldi	r18, 0xE1	; 225
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	f1 50       	subi	r31, 0x01	; 1
     4d2:	20 40       	sbci	r18, 0x00	; 0
     4d4:	80 40       	sbci	r24, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <kilo_start+0x1c0>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <kilo_start+0x1ca>
     4da:	00 00       	nop
     4dc:	28 cf       	rjmp	.-432    	; 0x32e <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4de:	90 91 0d 01 	lds	r25, 0x010D
     4e2:	80 91 0e 01 	lds	r24, 0x010E
     4e6:	98 17       	cp	r25, r24
     4e8:	09 f4       	brne	.+2      	; 0x4ec <kilo_start+0x1dc>
     4ea:	21 cf       	rjmp	.-446    	; 0x32e <kilo_start+0x1e>
                        prev_motion = cur_motion;
     4ec:	80 91 0d 01 	lds	r24, 0x010D
     4f0:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     4f4:	80 91 0d 01 	lds	r24, 0x010D
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	09 f4       	brne	.+2      	; 0x4fe <kilo_start+0x1ee>
     4fc:	50 c0       	rjmp	.+160    	; 0x59e <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4fe:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     502:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     506:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     50a:	82 30       	cpi	r24, 0x02	; 2
     50c:	d9 f1       	breq	.+118    	; 0x584 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     50e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     512:	90 92 b4 00 	sts	0x00B4, r9
     516:	8f e2       	ldi	r24, 0x2F	; 47
     518:	95 e7       	ldi	r25, 0x75	; 117
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <kilo_start+0x20a>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <kilo_start+0x210>
     520:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     522:	80 91 6c 01 	lds	r24, 0x016C
     526:	90 91 6b 01 	lds	r25, 0x016B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     52a:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     52e:	80 93 b4 00 	sts	0x00B4, r24
     532:	fd ce       	rjmp	.-518    	; 0x32e <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     534:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     536:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     538:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     53a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     53c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     53e:	3c 98       	cbi	0x07, 4	; 7
     540:	f6 ce       	rjmp	.-532    	; 0x32e <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     542:	f3 01       	movw	r30, r6
     544:	09 95       	icall
     546:	01 cf       	rjmp	.-510    	; 0x34a <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     548:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     54a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     54c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     54e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     550:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     552:	3c 98       	cbi	0x07, 4	; 7
     554:	ff ef       	ldi	r31, 0xFF	; 255
     556:	20 e7       	ldi	r18, 0x70	; 112
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	f1 50       	subi	r31, 0x01	; 1
     55c:	20 40       	sbci	r18, 0x00	; 0
     55e:	80 40       	sbci	r24, 0x00	; 0
     560:	e1 f7       	brne	.-8      	; 0x55a <kilo_start+0x24a>
     562:	00 c0       	rjmp	.+0      	; 0x564 <kilo_start+0x254>
     564:	00 00       	nop
     566:	6f cf       	rjmp	.-290    	; 0x446 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     568:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     56a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     56c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     56e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     570:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     572:	3c 98       	cbi	0x07, 4	; 7
     574:	dc ce       	rjmp	.-584    	; 0x32e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     576:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     578:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     57a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     57c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     57e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     580:	3c 9a       	sbi	0x07, 4	; 7
     582:	d5 ce       	rjmp	.-598    	; 0x32e <kilo_start+0x1e>
     584:	ef e2       	ldi	r30, 0x2F	; 47
     586:	f5 e7       	ldi	r31, 0x75	; 117
     588:	31 97       	sbiw	r30, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <kilo_start+0x278>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <kilo_start+0x27e>
     58e:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     590:	80 91 59 01 	lds	r24, 0x0159
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     594:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     598:	80 93 b4 00 	sts	0x00B4, r24
     59c:	c8 ce       	rjmp	.-624    	; 0x32e <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     59e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5a2:	10 92 b4 00 	sts	0x00B4, r1
     5a6:	8f e2       	ldi	r24, 0x2F	; 47
     5a8:	95 e7       	ldi	r25, 0x75	; 117
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <kilo_start+0x29a>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <kilo_start+0x2a0>
     5b0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5b2:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5b6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5ba:	10 92 b4 00 	sts	0x00B4, r1
     5be:	b7 ce       	rjmp	.-658    	; 0x32e <kilo_start+0x1e>

000005c0 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <delay+0x10>
     5c2:	ef ec       	ldi	r30, 0xCF	; 207
     5c4:	f7 e0       	ldi	r31, 0x07	; 7
     5c6:	31 97       	sbiw	r30, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <delay+0x6>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <delay+0xc>
     5cc:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5ce:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	b9 f7       	brne	.-18     	; 0x5c2 <delay+0x2>
     5d4:	08 95       	ret

000005d6 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5da:	60 93 b4 00 	sts	0x00B4, r22
     5de:	08 95       	ret

000005e0 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5e6:	80 93 b4 00 	sts	0x00B4, r24
     5ea:	8f e0       	ldi	r24, 0x0F	; 15
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	ef ec       	ldi	r30, 0xCF	; 207
     5f0:	f7 e0       	ldi	r31, 0x07	; 7
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <spinup_motors+0x12>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <spinup_motors+0x18>
     5f8:	00 00       	nop
     5fa:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5fc:	c1 f7       	brne	.-16     	; 0x5ee <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     5fe:	08 95       	ret

00000600 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     600:	80 91 37 01 	lds	r24, 0x0137
     604:	81 11       	cpse	r24, r1
     606:	1e c0       	rjmp	.+60     	; 0x644 <get_ambientlight+0x44>
        cli();
     608:	f8 94       	cli
        adc_setup_conversion(7);
     60a:	87 e0       	ldi	r24, 0x07	; 7
     60c:	80 93 7c 00 	sts	0x007C, r24
     610:	83 e8       	ldi	r24, 0x83	; 131
     612:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     616:	80 91 7a 00 	lds	r24, 0x007A
     61a:	80 64       	ori	r24, 0x40	; 64
     61c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     620:	80 91 7a 00 	lds	r24, 0x007A
     624:	86 fd       	sbrc	r24, 6
     626:	fc cf       	rjmp	.-8      	; 0x620 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     628:	80 91 78 00 	lds	r24, 0x0078
     62c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     630:	10 92 7c 00 	sts	0x007C, r1
     634:	23 ea       	ldi	r18, 0xA3	; 163
     636:	20 93 7a 00 	sts	0x007A, r18
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     640:	78 94       	sei
     642:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     648:	08 95       	ret

0000064a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     64a:	80 91 37 01 	lds	r24, 0x0137
     64e:	81 11       	cpse	r24, r1
     650:	1e c0       	rjmp	.+60     	; 0x68e <get_temperature+0x44>
        cli();
     652:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     654:	88 ec       	ldi	r24, 0xC8	; 200
     656:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     65a:	87 e8       	ldi	r24, 0x87	; 135
     65c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     660:	80 91 7a 00 	lds	r24, 0x007A
     664:	80 64       	ori	r24, 0x40	; 64
     666:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     66a:	80 91 7a 00 	lds	r24, 0x007A
     66e:	86 fd       	sbrc	r24, 6
     670:	fc cf       	rjmp	.-8      	; 0x66a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     672:	80 91 78 00 	lds	r24, 0x0078
     676:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     67a:	10 92 7c 00 	sts	0x007C, r1
     67e:	23 ea       	ldi	r18, 0xA3	; 163
     680:	20 93 7a 00 	sts	0x007A, r18
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     68a:	78 94       	sei
     68c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     692:	08 95       	ret

00000694 <rand_hard>:

uint8_t rand_hard() {
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	e0 e0       	ldi	r30, 0x00	; 0
     69e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6a2:	03 ea       	ldi	r16, 0xA3	; 163
     6a4:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6a6:	d6 e0       	ldi	r29, 0x06	; 6
     6a8:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6aa:	a1 e0       	ldi	r26, 0x01	; 1
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6ae:	60 e8       	ldi	r22, 0x80	; 128
     6b0:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6b2:	f8 94       	cli
            adc_setup_conversion(6);
     6b4:	d0 93 7c 00 	sts	0x007C, r29
     6b8:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6bc:	90 91 7a 00 	lds	r25, 0x007A
     6c0:	90 64       	ori	r25, 0x40	; 64
     6c2:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6c6:	90 91 7a 00 	lds	r25, 0x007A
     6ca:	96 fd       	sbrc	r25, 6
     6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <rand_hard+0x32>
            a = ADCW&0x1;
     6ce:	20 91 78 00 	lds	r18, 0x0078
     6d2:	30 91 79 00 	lds	r19, 0x0079
     6d6:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     6d8:	90 91 7a 00 	lds	r25, 0x007A
     6dc:	90 64       	ori	r25, 0x40	; 64
     6de:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6e2:	90 91 7a 00 	lds	r25, 0x007A
     6e6:	96 fd       	sbrc	r25, 6
     6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <rand_hard+0x4e>
            b = ADCW&0x1;
     6ea:	40 91 78 00 	lds	r20, 0x0078
     6ee:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     6f2:	10 92 7c 00 	sts	0x007C, r1
     6f6:	00 93 7a 00 	sts	0x007A, r16
     6fa:	10 93 7b 00 	sts	0x007B, r17
            sei();
     6fe:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     700:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     702:	24 13       	cpse	r18, r20
     704:	03 c0       	rjmp	.+6      	; 0x70c <rand_hard+0x78>
     706:	61 50       	subi	r22, 0x01	; 1
     708:	71 09       	sbc	r23, r1
     70a:	99 f6       	brne	.-90     	; 0x6b2 <rand_hard+0x1e>
        if (a)
     70c:	22 23       	and	r18, r18
     70e:	39 f0       	breq	.+14     	; 0x71e <rand_hard+0x8a>
            num |= (1<<i);
     710:	9d 01       	movw	r18, r26
     712:	0e 2e       	mov	r0, r30
     714:	01 c0       	rjmp	.+2      	; 0x718 <rand_hard+0x84>
     716:	22 0f       	add	r18, r18
     718:	0a 94       	dec	r0
     71a:	ea f7       	brpl	.-6      	; 0x716 <rand_hard+0x82>
     71c:	82 2b       	or	r24, r18
     71e:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     720:	e8 30       	cpi	r30, 0x08	; 8
     722:	f1 05       	cpc	r31, r1
     724:	09 f0       	breq	.+2      	; 0x728 <rand_hard+0x94>
     726:	c3 cf       	rjmp	.-122    	; 0x6ae <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     732:	80 91 00 01 	lds	r24, 0x0100
     736:	98 2f       	mov	r25, r24
     738:	99 0f       	add	r25, r25
     73a:	99 0f       	add	r25, r25
     73c:	99 0f       	add	r25, r25
     73e:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     740:	90 91 0c 01 	lds	r25, 0x010C
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	29 0f       	add	r18, r25
     748:	20 93 0c 01 	sts	0x010C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     74c:	28 2f       	mov	r18, r24
     74e:	22 95       	swap	r18
     750:	26 95       	lsr	r18
     752:	27 70       	andi	r18, 0x07	; 7
     754:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     756:	96 95       	lsr	r25
     758:	96 95       	lsr	r25
     75a:	89 27       	eor	r24, r25
     75c:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     760:	08 95       	ret

00000762 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     762:	80 93 00 01 	sts	0x0100, r24
     766:	08 95       	ret

00000768 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     768:	80 91 37 01 	lds	r24, 0x0137
     76c:	81 11       	cpse	r24, r1
     76e:	16 c0       	rjmp	.+44     	; 0x79c <get_voltage+0x34>
        cli();                                    // disable interrupts
     770:	f8 94       	cli
        adc_setup_conversion(6);
     772:	86 e0       	ldi	r24, 0x06	; 6
     774:	80 93 7c 00 	sts	0x007C, r24
     778:	83 e8       	ldi	r24, 0x83	; 131
     77a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     77e:	80 91 7a 00 	lds	r24, 0x007A
     782:	80 64       	ori	r24, 0x40	; 64
     784:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     788:	80 91 7a 00 	lds	r24, 0x007A
     78c:	86 fd       	sbrc	r24, 6
     78e:	fc cf       	rjmp	.-8      	; 0x788 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     790:	80 91 78 00 	lds	r24, 0x0078
     794:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     798:	78 94       	sei
     79a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7a0:	08 95       	ret

000007a2 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7a2:	2f 92       	push	r2
     7a4:	3f 92       	push	r3
     7a6:	4f 92       	push	r4
     7a8:	5f 92       	push	r5
     7aa:	6f 92       	push	r6
     7ac:	7f 92       	push	r7
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <estimate_distance+0x26>
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <estimate_distance+0x28>
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <estimate_distance+0x2a>
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7d2:	dc 01       	movw	r26, r24
     7d4:	12 96       	adiw	r26, 0x02	; 2
     7d6:	0d 90       	ld	r0, X+
     7d8:	bc 91       	ld	r27, X
     7da:	a0 2d       	mov	r26, r0
     7dc:	be 83       	std	Y+6, r27	; 0x06
     7de:	ad 83       	std	Y+5, r26	; 0x05
     7e0:	a4 38       	cpi	r26, 0x84	; 132
     7e2:	e3 e0       	ldi	r30, 0x03	; 3
     7e4:	be 07       	cpc	r27, r30
     7e6:	0c f0       	brlt	.+2      	; 0x7ea <estimate_distance+0x48>
     7e8:	c9 c0       	rjmp	.+402    	; 0x97c <__stack+0x7d>
        if (dist->high_gain > kilo_irhigh[0]) {
     7ea:	80 91 11 01 	lds	r24, 0x0111
     7ee:	90 91 12 01 	lds	r25, 0x0112
     7f2:	8a 17       	cp	r24, r26
     7f4:	9b 07       	cpc	r25, r27
     7f6:	08 f4       	brcc	.+2      	; 0x7fa <estimate_distance+0x58>
     7f8:	37 c1       	rjmp	.+622    	; 0xa68 <__stack+0x169>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7fa:	00 91 13 01 	lds	r16, 0x0113
     7fe:	10 91 14 01 	lds	r17, 0x0114
     802:	0a 17       	cp	r16, r26
     804:	1b 07       	cpc	r17, r27
     806:	08 f4       	brcc	.+2      	; 0x80a <estimate_distance+0x68>
     808:	2f c2       	rjmp	.+1118   	; 0xc68 <__stack+0x369>
     80a:	00 91 15 01 	lds	r16, 0x0115
     80e:	10 91 16 01 	lds	r17, 0x0116
     812:	0a 17       	cp	r16, r26
     814:	1b 07       	cpc	r17, r27
     816:	08 f4       	brcc	.+2      	; 0x81a <estimate_distance+0x78>
     818:	2f c2       	rjmp	.+1118   	; 0xc78 <__stack+0x379>
     81a:	00 91 17 01 	lds	r16, 0x0117
     81e:	10 91 18 01 	lds	r17, 0x0118
     822:	0a 17       	cp	r16, r26
     824:	1b 07       	cpc	r17, r27
     826:	08 f4       	brcc	.+2      	; 0x82a <estimate_distance+0x88>
     828:	2f c2       	rjmp	.+1118   	; 0xc88 <__stack+0x389>
     82a:	00 91 19 01 	lds	r16, 0x0119
     82e:	10 91 1a 01 	lds	r17, 0x011A
     832:	0a 17       	cp	r16, r26
     834:	1b 07       	cpc	r17, r27
     836:	08 f4       	brcc	.+2      	; 0x83a <estimate_distance+0x98>
     838:	2f c2       	rjmp	.+1118   	; 0xc98 <__stack+0x399>
     83a:	00 91 1b 01 	lds	r16, 0x011B
     83e:	10 91 1c 01 	lds	r17, 0x011C
     842:	0a 17       	cp	r16, r26
     844:	1b 07       	cpc	r17, r27
     846:	08 f4       	brcc	.+2      	; 0x84a <estimate_distance+0xa8>
     848:	ef c1       	rjmp	.+990    	; 0xc28 <__stack+0x329>
     84a:	00 91 1d 01 	lds	r16, 0x011D
     84e:	10 91 1e 01 	lds	r17, 0x011E
     852:	0a 17       	cp	r16, r26
     854:	1b 07       	cpc	r17, r27
     856:	08 f4       	brcc	.+2      	; 0x85a <estimate_distance+0xb8>
     858:	27 c2       	rjmp	.+1102   	; 0xca8 <__stack+0x3a9>
     85a:	00 91 1f 01 	lds	r16, 0x011F
     85e:	10 91 20 01 	lds	r17, 0x0120
     862:	0a 17       	cp	r16, r26
     864:	1b 07       	cpc	r17, r27
     866:	08 f4       	brcc	.+2      	; 0x86a <estimate_distance+0xc8>
     868:	27 c2       	rjmp	.+1102   	; 0xcb8 <__stack+0x3b9>
     86a:	00 91 21 01 	lds	r16, 0x0121
     86e:	10 91 22 01 	lds	r17, 0x0122
     872:	0a 17       	cp	r16, r26
     874:	1b 07       	cpc	r17, r27
     876:	08 f4       	brcc	.+2      	; 0x87a <estimate_distance+0xd8>
     878:	27 c2       	rjmp	.+1102   	; 0xcc8 <__stack+0x3c9>
     87a:	00 91 23 01 	lds	r16, 0x0123
     87e:	10 91 24 01 	lds	r17, 0x0124
     882:	0a 17       	cp	r16, r26
     884:	1b 07       	cpc	r17, r27
     886:	08 f4       	brcc	.+2      	; 0x88a <estimate_distance+0xe8>
     888:	27 c2       	rjmp	.+1102   	; 0xcd8 <__stack+0x3d9>
     88a:	00 91 25 01 	lds	r16, 0x0125
     88e:	10 91 26 01 	lds	r17, 0x0126
     892:	0a 17       	cp	r16, r26
     894:	1b 07       	cpc	r17, r27
     896:	08 f4       	brcc	.+2      	; 0x89a <estimate_distance+0xf8>
     898:	27 c2       	rjmp	.+1102   	; 0xce8 <__stack+0x3e9>
     89a:	00 91 27 01 	lds	r16, 0x0127
     89e:	10 91 28 01 	lds	r17, 0x0128
     8a2:	0a 17       	cp	r16, r26
     8a4:	1b 07       	cpc	r17, r27
     8a6:	08 f4       	brcc	.+2      	; 0x8aa <estimate_distance+0x108>
     8a8:	23 c2       	rjmp	.+1094   	; 0xcf0 <__stack+0x3f1>
     8aa:	00 91 29 01 	lds	r16, 0x0129
     8ae:	10 91 2a 01 	lds	r17, 0x012A
     8b2:	0a 17       	cp	r16, r26
     8b4:	1b 07       	cpc	r17, r27
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <estimate_distance+0x118>
     8b8:	23 c2       	rjmp	.+1094   	; 0xd00 <__stack+0x401>
     8ba:	00 91 2b 01 	lds	r16, 0x012B
     8be:	10 91 2c 01 	lds	r17, 0x012C
     8c2:	0a 17       	cp	r16, r26
     8c4:	1b 07       	cpc	r17, r27
     8c6:	08 f4       	brcc	.+2      	; 0x8ca <estimate_distance+0x128>
     8c8:	23 c2       	rjmp	.+1094   	; 0xd10 <__stack+0x411>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	a0 ed       	ldi	r26, 0xD0	; 208
     8d0:	b0 e4       	ldi	r27, 0x40	; 64
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	ab 83       	std	Y+3, r26	; 0x03
     8d8:	bc 83       	std	Y+4, r27	; 0x04
     8da:	4c e0       	ldi	r20, 0x0C	; 12
     8dc:	e4 2e       	mov	r14, r20
     8de:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8e0:	f7 01       	movw	r30, r14
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ef 5e       	subi	r30, 0xEF	; 239
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	b8 01       	movw	r22, r16
     8f0:	68 1b       	sub	r22, r24
     8f2:	79 0b       	sbc	r23, r25
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	0e 94 44 0a 	call	0x1488	; 0x1488 <__addsf3>
     904:	6b 01       	movw	r12, r22
     906:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     908:	ad 81       	ldd	r26, Y+5	; 0x05
     90a:	be 81       	ldd	r27, Y+6	; 0x06
     90c:	bd 01       	movw	r22, r26
     90e:	bb 0f       	add	r27, r27
     910:	88 0b       	sbc	r24, r24
     912:	99 0b       	sbc	r25, r25
     914:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__floatsisf>
     918:	4b 01       	movw	r8, r22
     91a:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     91c:	b8 01       	movw	r22, r16
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     926:	2b 01       	movw	r4, r22
     928:	3c 01       	movw	r6, r24
     92a:	29 81       	ldd	r18, Y+1	; 0x01
     92c:	3a 81       	ldd	r19, Y+2	; 0x02
     92e:	4b 81       	ldd	r20, Y+3	; 0x03
     930:	5c 81       	ldd	r21, Y+4	; 0x04
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
     93a:	9b 01       	movw	r18, r22
     93c:	ac 01       	movw	r20, r24
     93e:	c3 01       	movw	r24, r6
     940:	b2 01       	movw	r22, r4
     942:	0e 94 43 0a 	call	0x1486	; 0x1486 <__subsf3>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     94a:	c5 01       	movw	r24, r10
     94c:	b4 01       	movw	r22, r8
     94e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__subsf3>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e2       	ldi	r20, 0x20	; 32
     958:	51 e4       	ldi	r21, 0x41	; 65
     95a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
            b=((int)((int)b/(int)slope));
     95e:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
     962:	8b 01       	movw	r16, r22
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
     96c:	ab 01       	movw	r20, r22
     96e:	bc 01       	movw	r22, r24
     970:	c8 01       	movw	r24, r16
     972:	ba 01       	movw	r22, r20
     974:	0e 94 06 0a 	call	0x140c	; 0x140c <__divmodhi4>
            dist_high=b;
     978:	16 2f       	mov	r17, r22
     97a:	77 c0       	rjmp	.+238    	; 0xa6a <__stack+0x16b>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     97c:	dc 01       	movw	r26, r24
     97e:	cd 90       	ld	r12, X+
     980:	dc 90       	ld	r13, X
     982:	80 91 38 01 	lds	r24, 0x0138
     986:	90 91 39 01 	lds	r25, 0x0139
     98a:	8c 15       	cp	r24, r12
     98c:	9d 05       	cpc	r25, r13
     98e:	08 f4       	brcc	.+2      	; 0x992 <__stack+0x93>
     990:	8c c0       	rjmp	.+280    	; 0xaaa <__stack+0x1ab>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     992:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     994:	e0 90 3a 01 	lds	r14, 0x013A
     998:	f0 90 3b 01 	lds	r15, 0x013B
     99c:	ec 14       	cp	r14, r12
     99e:	fd 04       	cpc	r15, r13
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	5e c1       	rjmp	.+700    	; 0xc60 <__stack+0x361>
     9a4:	e0 90 3c 01 	lds	r14, 0x013C
     9a8:	f0 90 3d 01 	lds	r15, 0x013D
     9ac:	ec 14       	cp	r14, r12
     9ae:	fd 04       	cpc	r15, r13
     9b0:	08 f4       	brcc	.+2      	; 0x9b4 <__stack+0xb5>
     9b2:	5e c1       	rjmp	.+700    	; 0xc70 <__stack+0x371>
     9b4:	e0 90 3e 01 	lds	r14, 0x013E
     9b8:	f0 90 3f 01 	lds	r15, 0x013F
     9bc:	ec 14       	cp	r14, r12
     9be:	fd 04       	cpc	r15, r13
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	5e c1       	rjmp	.+700    	; 0xc80 <__stack+0x381>
     9c4:	e0 90 40 01 	lds	r14, 0x0140
     9c8:	f0 90 41 01 	lds	r15, 0x0141
     9cc:	ec 14       	cp	r14, r12
     9ce:	fd 04       	cpc	r15, r13
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	5e c1       	rjmp	.+700    	; 0xc90 <__stack+0x391>
     9d4:	e0 90 42 01 	lds	r14, 0x0142
     9d8:	f0 90 43 01 	lds	r15, 0x0143
     9dc:	ec 14       	cp	r14, r12
     9de:	fd 04       	cpc	r15, r13
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <__stack+0xe5>
     9e2:	c3 c0       	rjmp	.+390    	; 0xb6a <__stack+0x26b>
     9e4:	e0 90 44 01 	lds	r14, 0x0144
     9e8:	f0 90 45 01 	lds	r15, 0x0145
     9ec:	ec 14       	cp	r14, r12
     9ee:	fd 04       	cpc	r15, r13
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <__stack+0xf5>
     9f2:	56 c1       	rjmp	.+684    	; 0xca0 <__stack+0x3a1>
     9f4:	e0 90 46 01 	lds	r14, 0x0146
     9f8:	f0 90 47 01 	lds	r15, 0x0147
     9fc:	ec 14       	cp	r14, r12
     9fe:	fd 04       	cpc	r15, r13
     a00:	08 f4       	brcc	.+2      	; 0xa04 <__stack+0x105>
     a02:	56 c1       	rjmp	.+684    	; 0xcb0 <__stack+0x3b1>
     a04:	e0 90 48 01 	lds	r14, 0x0148
     a08:	f0 90 49 01 	lds	r15, 0x0149
     a0c:	ec 14       	cp	r14, r12
     a0e:	fd 04       	cpc	r15, r13
     a10:	08 f4       	brcc	.+2      	; 0xa14 <__stack+0x115>
     a12:	56 c1       	rjmp	.+684    	; 0xcc0 <__stack+0x3c1>
     a14:	e0 90 4a 01 	lds	r14, 0x014A
     a18:	f0 90 4b 01 	lds	r15, 0x014B
     a1c:	ec 14       	cp	r14, r12
     a1e:	fd 04       	cpc	r15, r13
     a20:	08 f4       	brcc	.+2      	; 0xa24 <__stack+0x125>
     a22:	56 c1       	rjmp	.+684    	; 0xcd0 <__stack+0x3d1>
     a24:	e0 90 4c 01 	lds	r14, 0x014C
     a28:	f0 90 4d 01 	lds	r15, 0x014D
     a2c:	ec 14       	cp	r14, r12
     a2e:	fd 04       	cpc	r15, r13
     a30:	08 f4       	brcc	.+2      	; 0xa34 <__stack+0x135>
     a32:	56 c1       	rjmp	.+684    	; 0xce0 <__stack+0x3e1>
     a34:	e0 90 4e 01 	lds	r14, 0x014E
     a38:	f0 90 4f 01 	lds	r15, 0x014F
     a3c:	ec 14       	cp	r14, r12
     a3e:	fd 04       	cpc	r15, r13
     a40:	08 f4       	brcc	.+2      	; 0xa44 <__stack+0x145>
     a42:	5a c1       	rjmp	.+692    	; 0xcf8 <__stack+0x3f9>
     a44:	e0 90 50 01 	lds	r14, 0x0150
     a48:	f0 90 51 01 	lds	r15, 0x0151
     a4c:	ec 14       	cp	r14, r12
     a4e:	fd 04       	cpc	r15, r13
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__stack+0x155>
     a52:	5a c1       	rjmp	.+692    	; 0xd08 <__stack+0x409>
     a54:	e0 90 52 01 	lds	r14, 0x0152
     a58:	f0 90 53 01 	lds	r15, 0x0153
     a5c:	ec 14       	cp	r14, r12
     a5e:	fd 04       	cpc	r15, r13
     a60:	08 f4       	brcc	.+2      	; 0xa64 <__stack+0x165>
     a62:	5a c1       	rjmp	.+692    	; 0xd18 <__stack+0x419>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a64:	0a e5       	ldi	r16, 0x5A	; 90
     a66:	31 c0       	rjmp	.+98     	; 0xaca <__stack+0x1cb>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a68:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a6a:	ed 81       	ldd	r30, Y+5	; 0x05
     a6c:	fe 81       	ldd	r31, Y+6	; 0x06
     a6e:	ed 3b       	cpi	r30, 0xBD	; 189
     a70:	f2 40       	sbci	r31, 0x02	; 2
     a72:	fc f4       	brge	.+62     	; 0xab2 <__stack+0x1b3>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     a74:	81 e2       	ldi	r24, 0x21	; 33
     a76:	81 0f       	add	r24, r17
    }
}
     a78:	26 96       	adiw	r28, 0x06	; 6
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	9f 90       	pop	r9
     a9a:	8f 90       	pop	r8
     a9c:	7f 90       	pop	r7
     a9e:	6f 90       	pop	r6
     aa0:	5f 90       	pop	r5
     aa2:	4f 90       	pop	r4
     aa4:	3f 90       	pop	r3
     aa6:	2f 90       	pop	r2
     aa8:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     aaa:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     aac:	81 e2       	ldi	r24, 0x21	; 33
     aae:	80 0f       	add	r24, r16
     ab0:	e3 cf       	rjmp	.-58     	; 0xa78 <__stack+0x179>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ab2:	d1 01       	movw	r26, r2
     ab4:	cd 90       	ld	r12, X+
     ab6:	dc 90       	ld	r13, X
     ab8:	80 91 38 01 	lds	r24, 0x0138
     abc:	90 91 39 01 	lds	r25, 0x0139
     ac0:	8c 15       	cp	r24, r12
     ac2:	9d 05       	cpc	r25, r13
     ac4:	08 f0       	brcs	.+2      	; 0xac8 <__stack+0x1c9>
     ac6:	66 cf       	rjmp	.-308    	; 0x994 <__stack+0x95>
            dist_low=0;
     ac8:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     aca:	1f 3f       	cpi	r17, 0xFF	; 255
     acc:	79 f3       	breq	.-34     	; 0xaac <__stack+0x1ad>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     ace:	ed 81       	ldd	r30, Y+5	; 0x05
     ad0:	fe 81       	ldd	r31, Y+6	; 0x06
     ad2:	bf 01       	movw	r22, r30
     ad4:	ff 0f       	add	r31, r31
     ad6:	88 0b       	sbc	r24, r24
     ad8:	99 0b       	sbc	r25, r25
     ada:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__floatsisf>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	61 2f       	mov	r22, r17
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     aee:	4b 01       	movw	r8, r22
     af0:	5c 01       	movw	r10, r24
     af2:	a7 01       	movw	r20, r14
     af4:	96 01       	movw	r18, r12
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	81 e6       	ldi	r24, 0x61	; 97
     afc:	94 e4       	ldi	r25, 0x44	; 68
     afe:	0e 94 43 0a 	call	0x1486	; 0x1486 <__subsf3>
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	c5 01       	movw	r24, r10
     b08:	b4 01       	movw	r22, r8
     b0a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
     b0e:	4b 01       	movw	r8, r22
     b10:	5c 01       	movw	r10, r24
     b12:	60 2f       	mov	r22, r16
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     b1e:	2b 01       	movw	r4, r22
     b20:	3c 01       	movw	r6, r24
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	4f e2       	ldi	r20, 0x2F	; 47
     b28:	54 e4       	ldi	r21, 0x44	; 68
     b2a:	c7 01       	movw	r24, r14
     b2c:	b6 01       	movw	r22, r12
     b2e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__subsf3>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	c3 01       	movw	r24, r6
     b38:	b2 01       	movw	r22, r4
     b3a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c5 01       	movw	r24, r10
     b44:	b4 01       	movw	r22, r8
     b46:	0e 94 44 0a 	call	0x1488	; 0x1488 <__addsf3>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	48 e4       	ldi	r20, 0x48	; 72
     b50:	53 e4       	ldi	r21, 0x43	; 67
     b52:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	44 e0       	ldi	r20, 0x04	; 4
     b5c:	52 e4       	ldi	r21, 0x42	; 66
     b5e:	0e 94 44 0a 	call	0x1488	; 0x1488 <__addsf3>
     b62:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixunssfsi>
     b66:	86 2f       	mov	r24, r22
     b68:	87 cf       	rjmp	.-242    	; 0xa78 <__stack+0x179>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b6a:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	fc 01       	movw	r30, r24
     b76:	ea 5c       	subi	r30, 0xCA	; 202
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	b7 01       	movw	r22, r14
     b80:	68 1b       	sub	r22, r24
     b82:	79 0b       	sbc	r23, r25
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     b8c:	9b 01       	movw	r18, r22
     b8e:	ac 01       	movw	r20, r24
     b90:	0e 94 44 0a 	call	0x1488	; 0x1488 <__addsf3>
     b94:	4b 01       	movw	r8, r22
     b96:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     b98:	b6 01       	movw	r22, r12
     b9a:	dd 0c       	add	r13, r13
     b9c:	88 0b       	sbc	r24, r24
     b9e:	99 0b       	sbc	r25, r25
     ba0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__floatsisf>
     ba4:	2b 01       	movw	r4, r22
     ba6:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     ba8:	b7 01       	movw	r22, r14
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     bb2:	6b 01       	movw	r12, r22
     bb4:	7c 01       	movw	r14, r24
     bb6:	60 2f       	mov	r22, r16
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	a9 01       	movw	r20, r18
     bd4:	0e 94 44 0a 	call	0x1488	; 0x1488 <__addsf3>
     bd8:	a5 01       	movw	r20, r10
     bda:	94 01       	movw	r18, r8
     bdc:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	c7 01       	movw	r24, r14
     be6:	b6 01       	movw	r22, r12
     be8:	0e 94 43 0a 	call	0x1486	; 0x1486 <__subsf3>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bf0:	c3 01       	movw	r24, r6
     bf2:	b2 01       	movw	r22, r4
     bf4:	0e 94 43 0a 	call	0x1486	; 0x1486 <__subsf3>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e2       	ldi	r20, 0x20	; 32
     bfe:	51 e4       	ldi	r21, 0x41	; 65
     c00:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
                b=((int)((int)b/(int)slope));
     c04:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
     c08:	7b 01       	movw	r14, r22
     c0a:	c5 01       	movw	r24, r10
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
     c12:	ab 01       	movw	r20, r22
     c14:	bc 01       	movw	r22, r24
     c16:	c7 01       	movw	r24, r14
     c18:	ba 01       	movw	r22, r20
     c1a:	0e 94 06 0a 	call	0x140c	; 0x140c <__divmodhi4>
                dist_low=b;
     c1e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c20:	6f 3f       	cpi	r22, 0xFF	; 255
     c22:	09 f0       	breq	.+2      	; 0xc26 <__stack+0x327>
     c24:	52 cf       	rjmp	.-348    	; 0xaca <__stack+0x1cb>
     c26:	26 cf       	rjmp	.-436    	; 0xa74 <__stack+0x175>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c28:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c2a:	85 e0       	ldi	r24, 0x05	; 5
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	7c 01       	movw	r14, r24
     c30:	f1 e0       	ldi	r31, 0x01	; 1
     c32:	ef 1a       	sub	r14, r31
     c34:	f1 08       	sbc	r15, r1
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	5f e3       	ldi	r21, 0x3F	; 63
     c48:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__mulsf3>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	a9 01       	movw	r20, r18
     c52:	0e 94 44 0a 	call	0x1488	; 0x1488 <__addsf3>
     c56:	69 83       	std	Y+1, r22	; 0x01
     c58:	7a 83       	std	Y+2, r23	; 0x02
     c5a:	8b 83       	std	Y+3, r24	; 0x03
     c5c:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     c5e:	40 ce       	rjmp	.-896    	; 0x8e0 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c60:	01 e0       	ldi	r16, 0x01	; 1
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	84 cf       	rjmp	.-248    	; 0xb70 <__stack+0x271>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	df cf       	rjmp	.-66     	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c70:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	7c cf       	rjmp	.-264    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c78:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	d7 cf       	rjmp	.-82     	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c80:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	74 cf       	rjmp	.-280    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c88:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	cf cf       	rjmp	.-98     	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c90:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	6c cf       	rjmp	.-296    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c98:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     c9a:	84 e0       	ldi	r24, 0x04	; 4
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	c7 cf       	rjmp	.-114    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca0:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     ca2:	86 e0       	ldi	r24, 0x06	; 6
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	64 cf       	rjmp	.-312    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ca8:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	bf cf       	rjmp	.-130    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb0:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	5c cf       	rjmp	.-328    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb8:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cba:	87 e0       	ldi	r24, 0x07	; 7
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	b7 cf       	rjmp	.-146    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc0:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     cc2:	88 e0       	ldi	r24, 0x08	; 8
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	54 cf       	rjmp	.-344    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc8:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cca:	88 e0       	ldi	r24, 0x08	; 8
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	af cf       	rjmp	.-162    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd0:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     cd2:	89 e0       	ldi	r24, 0x09	; 9
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	4c cf       	rjmp	.-360    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd8:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     cda:	89 e0       	ldi	r24, 0x09	; 9
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a7 cf       	rjmp	.-178    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce0:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	44 cf       	rjmp	.-376    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce8:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     cea:	8a e0       	ldi	r24, 0x0A	; 10
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9f cf       	rjmp	.-194    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf0:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     cf2:	8b e0       	ldi	r24, 0x0B	; 11
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9b cf       	rjmp	.-202    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf8:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     cfa:	8b e0       	ldi	r24, 0x0B	; 11
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	38 cf       	rjmp	.-400    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d00:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d02:	8c e0       	ldi	r24, 0x0C	; 12
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	93 cf       	rjmp	.-218    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d08:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d0a:	8c e0       	ldi	r24, 0x0C	; 12
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	30 cf       	rjmp	.-416    	; 0xb70 <__stack+0x271>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d10:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d12:	8d e0       	ldi	r24, 0x0D	; 13
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	8b cf       	rjmp	.-234    	; 0xc2e <__stack+0x32f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d18:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d1a:	8d e0       	ldi	r24, 0x0D	; 13
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	28 cf       	rjmp	.-432    	; 0xb70 <__stack+0x271>

00000d20 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
    tx_clock += tx_increment;
     d42:	20 91 57 01 	lds	r18, 0x0157
     d46:	30 91 58 01 	lds	r19, 0x0158
     d4a:	80 91 55 01 	lds	r24, 0x0155
     d4e:	90 91 56 01 	lds	r25, 0x0156
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	90 93 58 01 	sts	0x0158, r25
     d5a:	80 93 57 01 	sts	0x0157, r24
    tx_increment = 0xFF;
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 56 01 	sts	0x0156, r25
     d66:	80 93 55 01 	sts	0x0155, r24
    OCR0A = tx_increment;
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d6e:	80 91 33 01 	lds	r24, 0x0133
     d72:	90 91 34 01 	lds	r25, 0x0134
     d76:	a0 91 35 01 	lds	r26, 0x0135
     d7a:	b0 91 36 01 	lds	r27, 0x0136
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	a1 1d       	adc	r26, r1
     d82:	b1 1d       	adc	r27, r1
     d84:	80 93 33 01 	sts	0x0133, r24
     d88:	90 93 34 01 	sts	0x0134, r25
     d8c:	a0 93 35 01 	sts	0x0135, r26
     d90:	b0 93 36 01 	sts	0x0136, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     d94:	80 91 37 01 	lds	r24, 0x0137
     d98:	81 11       	cpse	r24, r1
     d9a:	0f c0       	rjmp	.+30     	; 0xdba <__vector_14+0x9a>
     d9c:	80 91 66 01 	lds	r24, 0x0166
     da0:	90 91 67 01 	lds	r25, 0x0167
     da4:	20 91 57 01 	lds	r18, 0x0157
     da8:	30 91 58 01 	lds	r19, 0x0158
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	20 f4       	brcc	.+8      	; 0xdba <__vector_14+0x9a>
     db2:	80 91 0f 01 	lds	r24, 0x010F
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	89 f0       	breq	.+34     	; 0xddc <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ddc:	e0 91 03 01 	lds	r30, 0x0103
     de0:	f0 91 04 01 	lds	r31, 0x0104
     de4:	09 95       	icall
        if (msg) {
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	41 f3       	breq	.-48     	; 0xdba <__vector_14+0x9a>
            if (message_send(msg)) {
     dea:	0e 94 78 09 	call	0x12f0	; 0x12f0 <message_send>
     dee:	81 11       	cpse	r24, r1
     df0:	09 c0       	rjmp	.+18     	; 0xe04 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     df2:	0e 94 9f 0c 	call	0x193e	; 0x193e <rand>
     df6:	99 27       	eor	r25, r25
     df8:	90 93 56 01 	sts	0x0156, r25
     dfc:	80 93 55 01 	sts	0x0155, r24
                OCR0A = tx_increment;
     e00:	87 bd       	out	0x27, r24	; 39
     e02:	db cf       	rjmp	.-74     	; 0xdba <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e04:	e0 91 01 01 	lds	r30, 0x0101
     e08:	f0 91 02 01 	lds	r31, 0x0102
     e0c:	09 95       	icall
                tx_clock = 0;
     e0e:	10 92 58 01 	sts	0x0158, r1
     e12:	10 92 57 01 	sts	0x0157, r1
     e16:	d1 cf       	rjmp	.-94     	; 0xdba <__vector_14+0x9a>

00000e18 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e18:	80 ff       	sbrs	r24, 0
     e1a:	11 c0       	rjmp	.+34     	; 0xe3e <set_color+0x26>
        DDRD |= (1<<5);
     e1c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e1e:	81 ff       	sbrs	r24, 1
     e20:	11 c0       	rjmp	.+34     	; 0xe44 <set_color+0x2c>
        DDRD |= (1<<4);
     e22:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e24:	82 ff       	sbrs	r24, 2
     e26:	11 c0       	rjmp	.+34     	; 0xe4a <set_color+0x32>
        DDRC |= (1<<3);
     e28:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e2a:	83 ff       	sbrs	r24, 3
     e2c:	11 c0       	rjmp	.+34     	; 0xe50 <set_color+0x38>
        DDRC |= (1<<2);
     e2e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e30:	84 ff       	sbrs	r24, 4
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <set_color+0x3e>
        DDRC |= (1<<5);
     e34:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e36:	85 fd       	sbrc	r24, 5
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e3a:	3c 98       	cbi	0x07, 4	; 7
     e3c:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e3e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e40:	81 fd       	sbrc	r24, 1
     e42:	ef cf       	rjmp	.-34     	; 0xe22 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e44:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e46:	82 fd       	sbrc	r24, 2
     e48:	ef cf       	rjmp	.-34     	; 0xe28 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e4a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e4c:	83 fd       	sbrc	r24, 3
     e4e:	ef cf       	rjmp	.-34     	; 0xe2e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e50:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e52:	84 fd       	sbrc	r24, 4
     e54:	ef cf       	rjmp	.-34     	; 0xe34 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e56:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e58:	85 ff       	sbrs	r24, 5
     e5a:	ef cf       	rjmp	.-34     	; 0xe3a <set_color+0x22>
        DDRC |= (1<<4);
     e5c:	3c 9a       	sbi	0x07, 4	; 7
     e5e:	08 95       	ret

00000e60 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
    rx_timer_off();
     e6e:	10 92 81 00 	sts	0x0081, r1
     e72:	10 92 85 00 	sts	0x0085, r1
     e76:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 10 01 	sts	0x0110, r24
    rx_leadingbyte = 1;
     e80:	80 93 54 01 	sts	0x0154, r24
    rx_busy = 0;
     e84:	10 92 37 01 	sts	0x0137, r1
    adc_trigger_high_gain();
     e88:	10 92 7c 00 	sts	0x007C, r1
     e8c:	93 ea       	ldi	r25, 0xA3	; 163
     e8e:	90 93 7a 00 	sts	0x007A, r25
     e92:	80 93 7b 00 	sts	0x007B, r24
}
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	2f 93       	push	r18
     eb0:	3f 93       	push	r19
     eb2:	4f 93       	push	r20
     eb4:	5f 93       	push	r21
     eb6:	6f 93       	push	r22
     eb8:	7f 93       	push	r23
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	af 93       	push	r26
     ec0:	bf 93       	push	r27
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     eca:	20 91 84 00 	lds	r18, 0x0084
     ece:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	40 93 37 01 	sts	0x0137, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ed8:	80 91 10 01 	lds	r24, 0x0110
     edc:	88 23       	and	r24, r24
     ede:	a9 f1       	breq	.+106    	; 0xf4a <__vector_23+0xa6>
        rx_timer_on();
     ee0:	10 92 85 00 	sts	0x0085, r1
     ee4:	10 92 84 00 	sts	0x0084, r1
     ee8:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     eec:	10 92 68 01 	sts	0x0168, r1
        rx_leadingbit = 0;
     ef0:	10 92 10 01 	sts	0x0110, r1
        if (rx_leadingbyte) {
     ef4:	80 91 54 01 	lds	r24, 0x0154
     ef8:	88 23       	and	r24, r24
     efa:	a1 f0       	breq	.+40     	; 0xf24 <__vector_23+0x80>
            adc_finish_conversion();
     efc:	80 91 7a 00 	lds	r24, 0x007A
     f00:	86 fd       	sbrc	r24, 6
     f02:	fc cf       	rjmp	.-8      	; 0xefc <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f04:	80 91 78 00 	lds	r24, 0x0078
     f08:	90 91 79 00 	lds	r25, 0x0079
     f0c:	90 93 32 01 	sts	0x0132, r25
     f10:	80 93 31 01 	sts	0x0131, r24
            adc_trigger_low_gain();
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 7c 00 	sts	0x007C, r24
     f1a:	93 ea       	ldi	r25, 0xA3	; 163
     f1c:	90 93 7a 00 	sts	0x007A, r25
     f20:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f4a:	c9 01       	movw	r24, r18
     f4c:	87 58       	subi	r24, 0x87	; 135
     f4e:	91 09       	sbc	r25, r1
     f50:	84 37       	cpi	r24, 0x74	; 116
     f52:	99 40       	sbci	r25, 0x09	; 9
     f54:	08 f0       	brcs	.+2      	; 0xf58 <__vector_23+0xb4>
     f56:	52 c0       	rjmp	.+164    	; 0xffc <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f58:	26 58       	subi	r18, 0x86	; 134
     f5a:	31 09       	sbc	r19, r1
     f5c:	a4 ef       	ldi	r26, 0xF4	; 244
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	0e 94 20 0a 	call	0x1440	; 0x1440 <__umulhisi3>
     f64:	aa 27       	eor	r26, r26
     f66:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	91 05       	cpc	r25, r1
     f6c:	a1 05       	cpc	r26, r1
     f6e:	b1 05       	cpc	r27, r1
     f70:	08 f4       	brcc	.+2      	; 0xf74 <__vector_23+0xd0>
     f72:	7b c0       	rjmp	.+246    	; 0x106a <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f74:	40 93 10 01 	sts	0x0110, r20
                if (rx_leadingbyte) {
     f78:	80 91 54 01 	lds	r24, 0x0154
     f7c:	81 11       	cpse	r24, r1
     f7e:	52 c0       	rjmp	.+164    	; 0x1024 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f80:	80 91 2e 01 	lds	r24, 0x012E
     f84:	e8 2f       	mov	r30, r24
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	e6 5a       	subi	r30, 0xA6	; 166
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
     f8c:	90 91 68 01 	lds	r25, 0x0168
     f90:	90 83       	st	Z, r25
                    rx_byteindex++;
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	80 93 2e 01 	sts	0x012E, r24
                    if (rx_byteindex == sizeof(message_t)) {
     f98:	8c 30       	cpi	r24, 0x0C	; 12
     f9a:	21 f6       	brne	.-120    	; 0xf24 <__vector_23+0x80>
                        rx_timer_off();
     f9c:	10 92 81 00 	sts	0x0081, r1
     fa0:	10 92 85 00 	sts	0x0085, r1
     fa4:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fa8:	40 93 54 01 	sts	0x0154, r20
                        rx_busy = 0;
     fac:	10 92 37 01 	sts	0x0137, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     fb0:	c0 91 64 01 	lds	r28, 0x0164
     fb4:	d0 91 65 01 	lds	r29, 0x0165
     fb8:	8a e5       	ldi	r24, 0x5A	; 90
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <message_crc>
     fc0:	c8 17       	cp	r28, r24
     fc2:	d9 07       	cpc	r29, r25
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <__vector_23+0x124>
     fc6:	ae cf       	rjmp	.-164    	; 0xf24 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fc8:	80 91 63 01 	lds	r24, 0x0163
     fcc:	87 ff       	sbrs	r24, 7
     fce:	61 c0       	rjmp	.+194    	; 0x1092 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fd0:	98 e7       	ldi	r25, 0x78	; 120
     fd2:	98 0f       	add	r25, r24
     fd4:	93 30       	cpi	r25, 0x03	; 3
     fd6:	30 f0       	brcs	.+12     	; 0xfe4 <__vector_23+0x140>
        motors_off();
     fd8:	53 98       	cbi	0x0a, 3	; 10
     fda:	23 98       	cbi	0x04, 3	; 4
     fdc:	10 92 b4 00 	sts	0x00B4, r1
     fe0:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	e0 58       	subi	r30, 0x80	; 128
     fea:	f1 09       	sbc	r31, r1
     fec:	eb 30       	cpi	r30, 0x0B	; 11
     fee:	f1 05       	cpc	r31, r1
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <__vector_23+0x150>
     ff2:	98 cf       	rjmp	.-208    	; 0xf24 <__vector_23+0x80>
     ff4:	e5 5c       	subi	r30, 0xC5	; 197
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
     ffc:	10 92 81 00 	sts	0x0081, r1
    1000:	10 92 85 00 	sts	0x0085, r1
    1004:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1008:	40 93 10 01 	sts	0x0110, r20
            rx_leadingbyte = 1;
    100c:	40 93 54 01 	sts	0x0154, r20
            rx_busy = 0;
    1010:	10 92 37 01 	sts	0x0137, r1
            adc_trigger_high_gain();
    1014:	10 92 7c 00 	sts	0x007C, r1
    1018:	83 ea       	ldi	r24, 0xA3	; 163
    101a:	80 93 7a 00 	sts	0x007A, r24
    101e:	40 93 7b 00 	sts	0x007B, r20
    1022:	80 cf       	rjmp	.-256    	; 0xf24 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1024:	80 91 7a 00 	lds	r24, 0x007A
    1028:	86 fd       	sbrc	r24, 6
    102a:	fc cf       	rjmp	.-8      	; 0x1024 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    102c:	80 91 78 00 	lds	r24, 0x0078
    1030:	90 91 79 00 	lds	r25, 0x0079
    1034:	90 93 30 01 	sts	0x0130, r25
    1038:	80 93 2f 01 	sts	0x012F, r24
                    adc_trigger_high_gain();
    103c:	10 92 7c 00 	sts	0x007C, r1
    1040:	83 ea       	ldi	r24, 0xA3	; 163
    1042:	80 93 7a 00 	sts	0x007A, r24
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    104c:	90 91 68 01 	lds	r25, 0x0168
    1050:	99 23       	and	r25, r25
    1052:	d1 f0       	breq	.+52     	; 0x1088 <__vector_23+0x1e4>
                        rx_timer_off();
    1054:	10 92 81 00 	sts	0x0081, r1
    1058:	10 92 85 00 	sts	0x0085, r1
    105c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1060:	80 93 54 01 	sts	0x0154, r24
                        rx_busy = 0;
    1064:	10 92 37 01 	sts	0x0137, r1
    1068:	5d cf       	rjmp	.-326    	; 0xf24 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    106a:	21 e0       	ldi	r18, 0x01	; 1
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <__vector_23+0x1d2>
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	8a 95       	dec	r24
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <__vector_23+0x1ce>
    107a:	cf 01       	movw	r24, r30
    107c:	90 91 68 01 	lds	r25, 0x0168
    1080:	89 2b       	or	r24, r25
    1082:	80 93 68 01 	sts	0x0168, r24
    1086:	4e cf       	rjmp	.-356    	; 0xf24 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1088:	10 92 54 01 	sts	0x0154, r1
                        rx_byteindex = 0;
    108c:	10 92 2e 01 	sts	0x012E, r1
    1090:	49 cf       	rjmp	.-366    	; 0xf24 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1092:	e0 91 05 01 	lds	r30, 0x0105
    1096:	f0 91 06 01 	lds	r31, 0x0106
    109a:	6f e2       	ldi	r22, 0x2F	; 47
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	8a e5       	ldi	r24, 0x5A	; 90
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	09 95       	icall
    10a4:	3f cf       	rjmp	.-386    	; 0xf24 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10a6:	80 91 5a 01 	lds	r24, 0x015A
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <__vector_23+0x20c>
    10ae:	dd c0       	rjmp	.+442    	; 0x126a <__vector_23+0x3c6>
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <__vector_23+0x210>
    10b2:	ba c0       	rjmp	.+372    	; 0x1228 <__vector_23+0x384>
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	09 f4       	brne	.+2      	; 0x10ba <__vector_23+0x216>
    10b8:	c6 c0       	rjmp	.+396    	; 0x1246 <__vector_23+0x3a2>
    10ba:	84 30       	cpi	r24, 0x04	; 4
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__vector_23+0x21c>
    10be:	b1 c0       	rjmp	.+354    	; 0x1222 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10c0:	80 91 0d 01 	lds	r24, 0x010D
    10c4:	90 91 60 01 	lds	r25, 0x0160
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	09 f4       	brne	.+2      	; 0x10ce <__vector_23+0x22a>
    10cc:	e3 c0       	rjmp	.+454    	; 0x1294 <__vector_23+0x3f0>
    10ce:	80 91 5f 01 	lds	r24, 0x015F
                        prev_motion = MOVE_STOP;
    10d2:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    10d6:	23 e0       	ldi	r18, 0x03	; 3
    10d8:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    10dc:	80 93 6b 01 	sts	0x016B, r24
                        kilo_straight_right = calibmsg->straight_right;
    10e0:	90 93 6c 01 	sts	0x016C, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10e4:	80 91 0f 01 	lds	r24, 0x010F
    10e8:	86 30       	cpi	r24, 0x06	; 6
    10ea:	09 f4       	brne	.+2      	; 0x10ee <__vector_23+0x24a>
    10ec:	1b cf       	rjmp	.-458    	; 0xf24 <__vector_23+0x80>
                motors_on();
    10ee:	53 9a       	sbi	0x0a, 3	; 10
    10f0:	23 9a       	sbi	0x04, 3	; 4
    10f2:	10 92 b4 00 	sts	0x00B4, r1
    10f6:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    10fa:	86 e0       	ldi	r24, 0x06	; 6
    10fc:	80 93 0f 01 	sts	0x010F, r24
    1100:	11 cf       	rjmp	.-478    	; 0xf24 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1102:	80 91 0f 01 	lds	r24, 0x010F
    1106:	86 30       	cpi	r24, 0x06	; 6
    1108:	99 f0       	breq	.+38     	; 0x1130 <__vector_23+0x28c>
                motors_on();
    110a:	53 9a       	sbi	0x0a, 3	; 10
    110c:	23 9a       	sbi	0x04, 3	; 4
    110e:	10 92 b4 00 	sts	0x00B4, r1
    1112:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1116:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1118:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    111a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    111c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    111e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1120:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1122:	10 92 0d 01 	sts	0x010D, r1
    1126:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    112a:	86 e0       	ldi	r24, 0x06	; 6
    112c:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9c 01       	movw	r18, r24
    1136:	00 90 5a 01 	lds	r0, 0x015A
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <__vector_23+0x29c>
    113c:	22 0f       	add	r18, r18
    113e:	33 1f       	adc	r19, r19
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <__vector_23+0x298>
    1144:	80 91 69 01 	lds	r24, 0x0169
    1148:	90 91 6a 01 	lds	r25, 0x016A
    114c:	82 23       	and	r24, r18
    114e:	93 23       	and	r25, r19
    1150:	89 2b       	or	r24, r25
    1152:	09 f0       	breq	.+2      	; 0x1156 <__vector_23+0x2b2>
    1154:	86 c0       	rjmp	.+268    	; 0x1262 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1156:	10 92 0d 01 	sts	0x010D, r1
    115a:	e4 ce       	rjmp	.-568    	; 0xf24 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 0f 01 	sts	0x010F, r24
    1162:	e0 ce       	rjmp	.-576    	; 0xf24 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    116a:	80 91 6e 00 	lds	r24, 0x006E
    116e:	8d 7f       	andi	r24, 0xFD	; 253
    1170:	80 93 6e 00 	sts	0x006E, r24
    1174:	16 bc       	out	0x26, r1	; 38
            bootload();
    1176:	e0 e0       	ldi	r30, 0x00	; 0
    1178:	f0 e7       	ldi	r31, 0x70	; 112
    117a:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    117c:	10 92 0f 01 	sts	0x010F, r1
    1180:	d1 ce       	rjmp	.-606    	; 0xf24 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	80 93 0f 01 	sts	0x010F, r24
    1188:	cd ce       	rjmp	.-614    	; 0xf24 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	80 93 0f 01 	sts	0x010F, r24
    1190:	c9 ce       	rjmp	.-622    	; 0xf24 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1192:	80 91 0f 01 	lds	r24, 0x010F
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	09 f4       	brne	.+2      	; 0x119c <__vector_23+0x2f8>
    119a:	c4 ce       	rjmp	.-632    	; 0xf24 <__vector_23+0x80>
    119c:	80 91 0f 01 	lds	r24, 0x010F
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__vector_23+0x302>
    11a4:	bf ce       	rjmp	.-642    	; 0xf24 <__vector_23+0x80>
                motors_on();
    11a6:	53 9a       	sbi	0x0a, 3	; 10
    11a8:	23 9a       	sbi	0x04, 3	; 4
    11aa:	10 92 b4 00 	sts	0x00B4, r1
    11ae:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11b2:	83 e0       	ldi	r24, 0x03	; 3
    11b4:	80 93 0f 01 	sts	0x010F, r24
    11b8:	b5 ce       	rjmp	.-662    	; 0xf24 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11ba:	80 91 0f 01 	lds	r24, 0x010F
    11be:	86 30       	cpi	r24, 0x06	; 6
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <__vector_23+0x320>
    11c2:	b0 ce       	rjmp	.-672    	; 0xf24 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11c4:	60 91 69 01 	lds	r22, 0x0169
    11c8:	80 eb       	ldi	r24, 0xB0	; 176
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 b7 0c 	call	0x196e	; 0x196e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11d0:	60 91 6a 01 	lds	r22, 0x016A
    11d4:	81 eb       	ldi	r24, 0xB1	; 177
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 b7 0c 	call	0x196e	; 0x196e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    11dc:	60 91 6d 01 	lds	r22, 0x016D
    11e0:	85 e0       	ldi	r24, 0x05	; 5
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 b7 0c 	call	0x196e	; 0x196e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    11e8:	60 91 59 01 	lds	r22, 0x0159
    11ec:	89 e0       	ldi	r24, 0x09	; 9
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 b7 0c 	call	0x196e	; 0x196e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    11f4:	60 91 6b 01 	lds	r22, 0x016B
    11f8:	8c e0       	ldi	r24, 0x0C	; 12
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 b7 0c 	call	0x196e	; 0x196e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1200:	60 91 6c 01 	lds	r22, 0x016C
    1204:	84 e1       	ldi	r24, 0x14	; 20
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 b7 0c 	call	0x196e	; 0x196e <eeprom_write_byte>
                        motors_off();
    120c:	53 98       	cbi	0x0a, 3	; 10
    120e:	23 98       	cbi	0x04, 3	; 4
    1210:	10 92 b4 00 	sts	0x00B4, r1
    1214:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	80 93 0f 01 	sts	0x010F, r24
    121e:	80 91 5a 01 	lds	r24, 0x015A
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1222:	81 11       	cpse	r24, r1
    1224:	5f cf       	rjmp	.-322    	; 0x10e4 <__vector_23+0x240>
    1226:	7e ce       	rjmp	.-772    	; 0xf24 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1228:	88 23       	and	r24, r24
    122a:	39 f2       	breq	.-114    	; 0x11ba <__vector_23+0x316>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	c9 f7       	brne	.-14     	; 0x1222 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1230:	80 91 5b 01 	lds	r24, 0x015B
    1234:	90 91 5c 01 	lds	r25, 0x015C
    1238:	90 93 6a 01 	sts	0x016A, r25
    123c:	80 93 69 01 	sts	0x0169, r24
                    cur_motion = MOVE_STOP;
    1240:	10 92 0d 01 	sts	0x010D, r1
    1244:	4f cf       	rjmp	.-354    	; 0x10e4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1246:	80 91 0d 01 	lds	r24, 0x010D
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	71 f1       	breq	.+92     	; 0x12aa <__vector_23+0x406>
    124e:	80 91 5e 01 	lds	r24, 0x015E
                        prev_motion = MOVE_STOP;
    1252:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    1256:	92 e0       	ldi	r25, 0x02	; 2
    1258:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    125c:	80 93 59 01 	sts	0x0159, r24
    1260:	41 cf       	rjmp	.-382    	; 0x10e4 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 0d 01 	sts	0x010D, r24
    1268:	5d ce       	rjmp	.-838    	; 0xf24 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    126a:	80 91 0d 01 	lds	r24, 0x010D
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	51 f0       	breq	.+20     	; 0x1286 <__vector_23+0x3e2>
    1272:	80 91 5d 01 	lds	r24, 0x015D
                        prev_motion = MOVE_STOP;
    1276:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    1280:	80 93 6d 01 	sts	0x016D, r24
    1284:	2f cf       	rjmp	.-418    	; 0x10e4 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1286:	80 91 5d 01 	lds	r24, 0x015D
    128a:	90 91 6d 01 	lds	r25, 0x016D
    128e:	89 13       	cpse	r24, r25
    1290:	f2 cf       	rjmp	.-28     	; 0x1276 <__vector_23+0x3d2>
    1292:	28 cf       	rjmp	.-432    	; 0x10e4 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1294:	80 91 6c 01 	lds	r24, 0x016C
    1298:	98 13       	cpse	r25, r24
    129a:	19 cf       	rjmp	.-462    	; 0x10ce <__vector_23+0x22a>
    129c:	80 91 5f 01 	lds	r24, 0x015F
    12a0:	20 91 6b 01 	lds	r18, 0x016B
    12a4:	82 13       	cpse	r24, r18
    12a6:	15 cf       	rjmp	.-470    	; 0x10d2 <__vector_23+0x22e>
    12a8:	1d cf       	rjmp	.-454    	; 0x10e4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12aa:	80 91 5e 01 	lds	r24, 0x015E
    12ae:	90 91 59 01 	lds	r25, 0x0159
    12b2:	89 13       	cpse	r24, r25
    12b4:	ce cf       	rjmp	.-100    	; 0x1252 <__vector_23+0x3ae>
    12b6:	16 cf       	rjmp	.-468    	; 0x10e4 <__vector_23+0x240>

000012b8 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12b8:	fc 01       	movw	r30, r24
    12ba:	ac 01       	movw	r20, r24
    12bc:	46 5f       	subi	r20, 0xF6	; 246
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12c4:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12c6:	82 27       	eor	r24, r18
    12c8:	08 2e       	mov	r0, r24
    12ca:	82 95       	swap	r24
    12cc:	80 7f       	andi	r24, 0xF0	; 240
    12ce:	80 25       	eor	r24, r0
    12d0:	09 2e       	mov	r0, r25
    12d2:	98 2f       	mov	r25, r24
    12d4:	82 95       	swap	r24
    12d6:	8f 70       	andi	r24, 0x0F	; 15
    12d8:	08 26       	eor	r0, r24
    12da:	86 95       	lsr	r24
    12dc:	98 27       	eor	r25, r24
    12de:	89 27       	eor	r24, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	88 0f       	add	r24, r24
    12e4:	88 0f       	add	r24, r24
    12e6:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    12e8:	e4 17       	cp	r30, r20
    12ea:	f5 07       	cpc	r31, r21
    12ec:	59 f7       	brne	.-42     	; 0x12c4 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    12ee:	08 95       	ret

000012f0 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    12f0:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    12f2:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    12f4:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    12f6:	20 91 2d 01 	lds	r18, 0x012D
    or tmpreg1, ddrreg
    12fa:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    12fc:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1300:	30 91 2d 01 	lds	r19, 0x012D
    1304:	20 30       	cpi	r18, 0x00	; 0
    1306:	29 f0       	breq	.+10     	; 0x1312 <message_send+0x22>
    1308:	00 00       	nop
    130a:	25 b1       	in	r18, 0x05	; 5
    130c:	23 2b       	or	r18, r19
    130e:	25 b9       	out	0x05, r18	; 5
    1310:	04 c0       	rjmp	.+8      	; 0x131a <message_send+0x2a>
    1312:	00 00       	nop
    1314:	00 00       	nop
    1316:	00 00       	nop
    1318:	00 c0       	rjmp	.+0      	; 0x131a <message_send+0x2a>
    131a:	00 00       	nop
    131c:	00 00       	nop
    131e:	00 00       	nop
    1320:	30 95       	com	r19
    1322:	25 b1       	in	r18, 0x05	; 5
    1324:	23 23       	and	r18, r19
    1326:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1328:	2e ea       	ldi	r18, 0xAE	; 174
    132a:	2a 95       	dec	r18
    132c:	f1 f7       	brne	.-4      	; 0x132a <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    132e:	2b ee       	ldi	r18, 0xEB	; 235

00001330 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1330:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1332:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1334:	0a c0       	rjmp	.+20     	; 0x134a <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1336:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1338:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    133c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    133e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1340:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1342:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1344:	0f be       	out	0x3f, r0	; 63
    return 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	08 95       	ret

0000134a <nocollision>:
nocollision:
    nop
    134a:	00 00       	nop
    dec tmpreg1
    134c:	2a 95       	dec	r18
    brne checkcollision
    134e:	81 f7       	brne	.-32     	; 0x1330 <checkcollision>

    ldi tmpreg1, 0x01
    1350:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1352:	30 91 2d 01 	lds	r19, 0x012D
    1356:	20 30       	cpi	r18, 0x00	; 0
    1358:	29 f0       	breq	.+10     	; 0x1364 <nocollision+0x1a>
    135a:	00 00       	nop
    135c:	25 b1       	in	r18, 0x05	; 5
    135e:	23 2b       	or	r18, r19
    1360:	25 b9       	out	0x05, r18	; 5
    1362:	04 c0       	rjmp	.+8      	; 0x136c <nocollision+0x22>
    1364:	00 00       	nop
    1366:	00 00       	nop
    1368:	00 00       	nop
    136a:	00 c0       	rjmp	.+0      	; 0x136c <nocollision+0x22>
    136c:	00 00       	nop
    136e:	00 00       	nop
    1370:	00 00       	nop
    1372:	30 95       	com	r19
    1374:	25 b1       	in	r18, 0x05	; 5
    1376:	23 23       	and	r18, r19
    1378:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    137a:	00 00       	nop
    137c:	24 e5       	ldi	r18, 0x54	; 84
    137e:	2a 95       	dec	r18
    1380:	f1 f7       	brne	.-4      	; 0x137e <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1382:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1384:	8c e0       	ldi	r24, 0x0C	; 12

00001386 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1386:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1388:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    138a:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    138c:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    138e:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1390:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1392:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1394:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1396:	50 e0       	ldi	r21, 0x00	; 0

00001398 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1398:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    139a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    139c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    139e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13a0:	30 91 2d 01 	lds	r19, 0x012D
    13a4:	20 30       	cpi	r18, 0x00	; 0
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <sendbit+0x1a>
    13a8:	00 00       	nop
    13aa:	25 b1       	in	r18, 0x05	; 5
    13ac:	23 2b       	or	r18, r19
    13ae:	25 b9       	out	0x05, r18	; 5
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <sendbit+0x22>
    13b2:	00 00       	nop
    13b4:	00 00       	nop
    13b6:	00 00       	nop
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <sendbit+0x22>
    13ba:	00 00       	nop
    13bc:	00 00       	nop
    13be:	00 00       	nop
    13c0:	30 95       	com	r19
    13c2:	25 b1       	in	r18, 0x05	; 5
    13c4:	23 23       	and	r18, r19
    13c6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    13c8:	00 00       	nop
    13ca:	21 e5       	ldi	r18, 0x51	; 81
    13cc:	2a 95       	dec	r18
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    13d0:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    13d2:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    13d4:	9a 95       	dec	r25
    brne sendbit
    13d6:	01 f7       	brne	.-64     	; 0x1398 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    13d8:	8a 95       	dec	r24
    brne sendbyte
    13da:	a9 f6       	brne	.-86     	; 0x1386 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    13dc:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    13de:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    13e0:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13e2:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13e4:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    13e8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13ea:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    13ec:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13ee:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13f0:	0f be       	out	0x3f, r0	; 63
    return 1
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	08 95       	ret

000013f6 <main>:
}

int main()
{
    // Initialize the hardware.
    kilo_init();
    13f6:	0e 94 8c 00 	call	0x118	; 0x118 <kilo_init>
    // Register the program.
    kilo_start(setup, loop);
    13fa:	62 e7       	ldi	r22, 0x72	; 114
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	81 e7       	ldi	r24, 0x71	; 113
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 88 01 	call	0x310	; 0x310 <kilo_start>
    
    return 0;
}
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	08 95       	ret

0000140c <__divmodhi4>:
    140c:	97 fb       	bst	r25, 7
    140e:	07 2e       	mov	r0, r23
    1410:	16 f4       	brtc	.+4      	; 0x1416 <__divmodhi4+0xa>
    1412:	00 94       	com	r0
    1414:	07 d0       	rcall	.+14     	; 0x1424 <__divmodhi4_neg1>
    1416:	77 fd       	sbrc	r23, 7
    1418:	09 d0       	rcall	.+18     	; 0x142c <__divmodhi4_neg2>
    141a:	0e 94 2f 0a 	call	0x145e	; 0x145e <__udivmodhi4>
    141e:	07 fc       	sbrc	r0, 7
    1420:	05 d0       	rcall	.+10     	; 0x142c <__divmodhi4_neg2>
    1422:	3e f4       	brtc	.+14     	; 0x1432 <__divmodhi4_exit>

00001424 <__divmodhi4_neg1>:
    1424:	90 95       	com	r25
    1426:	81 95       	neg	r24
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	08 95       	ret

0000142c <__divmodhi4_neg2>:
    142c:	70 95       	com	r23
    142e:	61 95       	neg	r22
    1430:	7f 4f       	sbci	r23, 0xFF	; 255

00001432 <__divmodhi4_exit>:
    1432:	08 95       	ret

00001434 <__tablejump2__>:
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	05 90       	lpm	r0, Z+
    143a:	f4 91       	lpm	r31, Z
    143c:	e0 2d       	mov	r30, r0
    143e:	09 94       	ijmp

00001440 <__umulhisi3>:
    1440:	a2 9f       	mul	r26, r18
    1442:	b0 01       	movw	r22, r0
    1444:	b3 9f       	mul	r27, r19
    1446:	c0 01       	movw	r24, r0
    1448:	a3 9f       	mul	r26, r19
    144a:	70 0d       	add	r23, r0
    144c:	81 1d       	adc	r24, r1
    144e:	11 24       	eor	r1, r1
    1450:	91 1d       	adc	r25, r1
    1452:	b2 9f       	mul	r27, r18
    1454:	70 0d       	add	r23, r0
    1456:	81 1d       	adc	r24, r1
    1458:	11 24       	eor	r1, r1
    145a:	91 1d       	adc	r25, r1
    145c:	08 95       	ret

0000145e <__udivmodhi4>:
    145e:	aa 1b       	sub	r26, r26
    1460:	bb 1b       	sub	r27, r27
    1462:	51 e1       	ldi	r21, 0x11	; 17
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <__udivmodhi4_ep>

00001466 <__udivmodhi4_loop>:
    1466:	aa 1f       	adc	r26, r26
    1468:	bb 1f       	adc	r27, r27
    146a:	a6 17       	cp	r26, r22
    146c:	b7 07       	cpc	r27, r23
    146e:	10 f0       	brcs	.+4      	; 0x1474 <__udivmodhi4_ep>
    1470:	a6 1b       	sub	r26, r22
    1472:	b7 0b       	sbc	r27, r23

00001474 <__udivmodhi4_ep>:
    1474:	88 1f       	adc	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	5a 95       	dec	r21
    147a:	a9 f7       	brne	.-22     	; 0x1466 <__udivmodhi4_loop>
    147c:	80 95       	com	r24
    147e:	90 95       	com	r25
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	08 95       	ret

00001486 <__subsf3>:
    1486:	50 58       	subi	r21, 0x80	; 128

00001488 <__addsf3>:
    1488:	bb 27       	eor	r27, r27
    148a:	aa 27       	eor	r26, r26
    148c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__addsf3x>
    1490:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__fp_round>
    1494:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_pscA>
    1498:	38 f0       	brcs	.+14     	; 0x14a8 <__addsf3+0x20>
    149a:	0e 94 a5 0b 	call	0x174a	; 0x174a <__fp_pscB>
    149e:	20 f0       	brcs	.+8      	; 0x14a8 <__addsf3+0x20>
    14a0:	39 f4       	brne	.+14     	; 0x14b0 <__addsf3+0x28>
    14a2:	9f 3f       	cpi	r25, 0xFF	; 255
    14a4:	19 f4       	brne	.+6      	; 0x14ac <__addsf3+0x24>
    14a6:	26 f4       	brtc	.+8      	; 0x14b0 <__addsf3+0x28>
    14a8:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__fp_nan>
    14ac:	0e f4       	brtc	.+2      	; 0x14b0 <__addsf3+0x28>
    14ae:	e0 95       	com	r30
    14b0:	e7 fb       	bst	r30, 7
    14b2:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_inf>

000014b6 <__addsf3x>:
    14b6:	e9 2f       	mov	r30, r25
    14b8:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_split3>
    14bc:	58 f3       	brcs	.-42     	; 0x1494 <__addsf3+0xc>
    14be:	ba 17       	cp	r27, r26
    14c0:	62 07       	cpc	r22, r18
    14c2:	73 07       	cpc	r23, r19
    14c4:	84 07       	cpc	r24, r20
    14c6:	95 07       	cpc	r25, r21
    14c8:	20 f0       	brcs	.+8      	; 0x14d2 <__addsf3x+0x1c>
    14ca:	79 f4       	brne	.+30     	; 0x14ea <__addsf3x+0x34>
    14cc:	a6 f5       	brtc	.+104    	; 0x1536 <__addsf3x+0x80>
    14ce:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_zero>
    14d2:	0e f4       	brtc	.+2      	; 0x14d6 <__addsf3x+0x20>
    14d4:	e0 95       	com	r30
    14d6:	0b 2e       	mov	r0, r27
    14d8:	ba 2f       	mov	r27, r26
    14da:	a0 2d       	mov	r26, r0
    14dc:	0b 01       	movw	r0, r22
    14de:	b9 01       	movw	r22, r18
    14e0:	90 01       	movw	r18, r0
    14e2:	0c 01       	movw	r0, r24
    14e4:	ca 01       	movw	r24, r20
    14e6:	a0 01       	movw	r20, r0
    14e8:	11 24       	eor	r1, r1
    14ea:	ff 27       	eor	r31, r31
    14ec:	59 1b       	sub	r21, r25
    14ee:	99 f0       	breq	.+38     	; 0x1516 <__addsf3x+0x60>
    14f0:	59 3f       	cpi	r21, 0xF9	; 249
    14f2:	50 f4       	brcc	.+20     	; 0x1508 <__addsf3x+0x52>
    14f4:	50 3e       	cpi	r21, 0xE0	; 224
    14f6:	68 f1       	brcs	.+90     	; 0x1552 <__addsf3x+0x9c>
    14f8:	1a 16       	cp	r1, r26
    14fa:	f0 40       	sbci	r31, 0x00	; 0
    14fc:	a2 2f       	mov	r26, r18
    14fe:	23 2f       	mov	r18, r19
    1500:	34 2f       	mov	r19, r20
    1502:	44 27       	eor	r20, r20
    1504:	58 5f       	subi	r21, 0xF8	; 248
    1506:	f3 cf       	rjmp	.-26     	; 0x14ee <__addsf3x+0x38>
    1508:	46 95       	lsr	r20
    150a:	37 95       	ror	r19
    150c:	27 95       	ror	r18
    150e:	a7 95       	ror	r26
    1510:	f0 40       	sbci	r31, 0x00	; 0
    1512:	53 95       	inc	r21
    1514:	c9 f7       	brne	.-14     	; 0x1508 <__addsf3x+0x52>
    1516:	7e f4       	brtc	.+30     	; 0x1536 <__addsf3x+0x80>
    1518:	1f 16       	cp	r1, r31
    151a:	ba 0b       	sbc	r27, r26
    151c:	62 0b       	sbc	r22, r18
    151e:	73 0b       	sbc	r23, r19
    1520:	84 0b       	sbc	r24, r20
    1522:	ba f0       	brmi	.+46     	; 0x1552 <__addsf3x+0x9c>
    1524:	91 50       	subi	r25, 0x01	; 1
    1526:	a1 f0       	breq	.+40     	; 0x1550 <__addsf3x+0x9a>
    1528:	ff 0f       	add	r31, r31
    152a:	bb 1f       	adc	r27, r27
    152c:	66 1f       	adc	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	88 1f       	adc	r24, r24
    1532:	c2 f7       	brpl	.-16     	; 0x1524 <__addsf3x+0x6e>
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <__addsf3x+0x9c>
    1536:	ba 0f       	add	r27, r26
    1538:	62 1f       	adc	r22, r18
    153a:	73 1f       	adc	r23, r19
    153c:	84 1f       	adc	r24, r20
    153e:	48 f4       	brcc	.+18     	; 0x1552 <__addsf3x+0x9c>
    1540:	87 95       	ror	r24
    1542:	77 95       	ror	r23
    1544:	67 95       	ror	r22
    1546:	b7 95       	ror	r27
    1548:	f7 95       	ror	r31
    154a:	9e 3f       	cpi	r25, 0xFE	; 254
    154c:	08 f0       	brcs	.+2      	; 0x1550 <__addsf3x+0x9a>
    154e:	b0 cf       	rjmp	.-160    	; 0x14b0 <__addsf3+0x28>
    1550:	93 95       	inc	r25
    1552:	88 0f       	add	r24, r24
    1554:	08 f0       	brcs	.+2      	; 0x1558 <__addsf3x+0xa2>
    1556:	99 27       	eor	r25, r25
    1558:	ee 0f       	add	r30, r30
    155a:	97 95       	ror	r25
    155c:	87 95       	ror	r24
    155e:	08 95       	ret

00001560 <__divsf3>:
    1560:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divsf3x>
    1564:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__fp_round>
    1568:	0e 94 a5 0b 	call	0x174a	; 0x174a <__fp_pscB>
    156c:	58 f0       	brcs	.+22     	; 0x1584 <__divsf3+0x24>
    156e:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_pscA>
    1572:	40 f0       	brcs	.+16     	; 0x1584 <__divsf3+0x24>
    1574:	29 f4       	brne	.+10     	; 0x1580 <__divsf3+0x20>
    1576:	5f 3f       	cpi	r21, 0xFF	; 255
    1578:	29 f0       	breq	.+10     	; 0x1584 <__divsf3+0x24>
    157a:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_inf>
    157e:	51 11       	cpse	r21, r1
    1580:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_szero>
    1584:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__fp_nan>

00001588 <__divsf3x>:
    1588:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_split3>
    158c:	68 f3       	brcs	.-38     	; 0x1568 <__divsf3+0x8>

0000158e <__divsf3_pse>:
    158e:	99 23       	and	r25, r25
    1590:	b1 f3       	breq	.-20     	; 0x157e <__divsf3+0x1e>
    1592:	55 23       	and	r21, r21
    1594:	91 f3       	breq	.-28     	; 0x157a <__divsf3+0x1a>
    1596:	95 1b       	sub	r25, r21
    1598:	55 0b       	sbc	r21, r21
    159a:	bb 27       	eor	r27, r27
    159c:	aa 27       	eor	r26, r26
    159e:	62 17       	cp	r22, r18
    15a0:	73 07       	cpc	r23, r19
    15a2:	84 07       	cpc	r24, r20
    15a4:	38 f0       	brcs	.+14     	; 0x15b4 <__divsf3_pse+0x26>
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	44 1f       	adc	r20, r20
    15b0:	aa 1f       	adc	r26, r26
    15b2:	a9 f3       	breq	.-22     	; 0x159e <__divsf3_pse+0x10>
    15b4:	35 d0       	rcall	.+106    	; 0x1620 <__divsf3_pse+0x92>
    15b6:	0e 2e       	mov	r0, r30
    15b8:	3a f0       	brmi	.+14     	; 0x15c8 <__divsf3_pse+0x3a>
    15ba:	e0 e8       	ldi	r30, 0x80	; 128
    15bc:	32 d0       	rcall	.+100    	; 0x1622 <__divsf3_pse+0x94>
    15be:	91 50       	subi	r25, 0x01	; 1
    15c0:	50 40       	sbci	r21, 0x00	; 0
    15c2:	e6 95       	lsr	r30
    15c4:	00 1c       	adc	r0, r0
    15c6:	ca f7       	brpl	.-14     	; 0x15ba <__divsf3_pse+0x2c>
    15c8:	2b d0       	rcall	.+86     	; 0x1620 <__divsf3_pse+0x92>
    15ca:	fe 2f       	mov	r31, r30
    15cc:	29 d0       	rcall	.+82     	; 0x1620 <__divsf3_pse+0x92>
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	bb 1f       	adc	r27, r27
    15d6:	26 17       	cp	r18, r22
    15d8:	37 07       	cpc	r19, r23
    15da:	48 07       	cpc	r20, r24
    15dc:	ab 07       	cpc	r26, r27
    15de:	b0 e8       	ldi	r27, 0x80	; 128
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__divsf3_pse+0x56>
    15e2:	bb 0b       	sbc	r27, r27
    15e4:	80 2d       	mov	r24, r0
    15e6:	bf 01       	movw	r22, r30
    15e8:	ff 27       	eor	r31, r31
    15ea:	93 58       	subi	r25, 0x83	; 131
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	3a f0       	brmi	.+14     	; 0x15fe <__divsf3_pse+0x70>
    15f0:	9e 3f       	cpi	r25, 0xFE	; 254
    15f2:	51 05       	cpc	r21, r1
    15f4:	78 f0       	brcs	.+30     	; 0x1614 <__divsf3_pse+0x86>
    15f6:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_inf>
    15fa:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_szero>
    15fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1600:	e4 f3       	brlt	.-8      	; 0x15fa <__divsf3_pse+0x6c>
    1602:	98 3e       	cpi	r25, 0xE8	; 232
    1604:	d4 f3       	brlt	.-12     	; 0x15fa <__divsf3_pse+0x6c>
    1606:	86 95       	lsr	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	b7 95       	ror	r27
    160e:	f7 95       	ror	r31
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__divsf3_pse+0x78>
    1614:	88 0f       	add	r24, r24
    1616:	91 1d       	adc	r25, r1
    1618:	96 95       	lsr	r25
    161a:	87 95       	ror	r24
    161c:	97 f9       	bld	r25, 7
    161e:	08 95       	ret
    1620:	e1 e0       	ldi	r30, 0x01	; 1
    1622:	66 0f       	add	r22, r22
    1624:	77 1f       	adc	r23, r23
    1626:	88 1f       	adc	r24, r24
    1628:	bb 1f       	adc	r27, r27
    162a:	62 17       	cp	r22, r18
    162c:	73 07       	cpc	r23, r19
    162e:	84 07       	cpc	r24, r20
    1630:	ba 07       	cpc	r27, r26
    1632:	20 f0       	brcs	.+8      	; 0x163c <__divsf3_pse+0xae>
    1634:	62 1b       	sub	r22, r18
    1636:	73 0b       	sbc	r23, r19
    1638:	84 0b       	sbc	r24, r20
    163a:	ba 0b       	sbc	r27, r26
    163c:	ee 1f       	adc	r30, r30
    163e:	88 f7       	brcc	.-30     	; 0x1622 <__divsf3_pse+0x94>
    1640:	e0 95       	com	r30
    1642:	08 95       	ret

00001644 <__fixsfsi>:
    1644:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixunssfsi>
    1648:	68 94       	set
    164a:	b1 11       	cpse	r27, r1
    164c:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_szero>
    1650:	08 95       	ret

00001652 <__fixunssfsi>:
    1652:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fp_splitA>
    1656:	88 f0       	brcs	.+34     	; 0x167a <__fixunssfsi+0x28>
    1658:	9f 57       	subi	r25, 0x7F	; 127
    165a:	98 f0       	brcs	.+38     	; 0x1682 <__fixunssfsi+0x30>
    165c:	b9 2f       	mov	r27, r25
    165e:	99 27       	eor	r25, r25
    1660:	b7 51       	subi	r27, 0x17	; 23
    1662:	b0 f0       	brcs	.+44     	; 0x1690 <__fixunssfsi+0x3e>
    1664:	e1 f0       	breq	.+56     	; 0x169e <__fixunssfsi+0x4c>
    1666:	66 0f       	add	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	88 1f       	adc	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	1a f0       	brmi	.+6      	; 0x1676 <__fixunssfsi+0x24>
    1670:	ba 95       	dec	r27
    1672:	c9 f7       	brne	.-14     	; 0x1666 <__fixunssfsi+0x14>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <__fixunssfsi+0x4c>
    1676:	b1 30       	cpi	r27, 0x01	; 1
    1678:	91 f0       	breq	.+36     	; 0x169e <__fixunssfsi+0x4c>
    167a:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_zero>
    167e:	b1 e0       	ldi	r27, 0x01	; 1
    1680:	08 95       	ret
    1682:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_zero>
    1686:	67 2f       	mov	r22, r23
    1688:	78 2f       	mov	r23, r24
    168a:	88 27       	eor	r24, r24
    168c:	b8 5f       	subi	r27, 0xF8	; 248
    168e:	39 f0       	breq	.+14     	; 0x169e <__fixunssfsi+0x4c>
    1690:	b9 3f       	cpi	r27, 0xF9	; 249
    1692:	cc f3       	brlt	.-14     	; 0x1686 <__fixunssfsi+0x34>
    1694:	86 95       	lsr	r24
    1696:	77 95       	ror	r23
    1698:	67 95       	ror	r22
    169a:	b3 95       	inc	r27
    169c:	d9 f7       	brne	.-10     	; 0x1694 <__fixunssfsi+0x42>
    169e:	3e f4       	brtc	.+14     	; 0x16ae <__fixunssfsi+0x5c>
    16a0:	90 95       	com	r25
    16a2:	80 95       	com	r24
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	08 95       	ret

000016b0 <__floatunsisf>:
    16b0:	e8 94       	clt
    16b2:	09 c0       	rjmp	.+18     	; 0x16c6 <__floatsisf+0x12>

000016b4 <__floatsisf>:
    16b4:	97 fb       	bst	r25, 7
    16b6:	3e f4       	brtc	.+14     	; 0x16c6 <__floatsisf+0x12>
    16b8:	90 95       	com	r25
    16ba:	80 95       	com	r24
    16bc:	70 95       	com	r23
    16be:	61 95       	neg	r22
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	8f 4f       	sbci	r24, 0xFF	; 255
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	99 23       	and	r25, r25
    16c8:	a9 f0       	breq	.+42     	; 0x16f4 <__floatsisf+0x40>
    16ca:	f9 2f       	mov	r31, r25
    16cc:	96 e9       	ldi	r25, 0x96	; 150
    16ce:	bb 27       	eor	r27, r27
    16d0:	93 95       	inc	r25
    16d2:	f6 95       	lsr	r31
    16d4:	87 95       	ror	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b7 95       	ror	r27
    16dc:	f1 11       	cpse	r31, r1
    16de:	f8 cf       	rjmp	.-16     	; 0x16d0 <__floatsisf+0x1c>
    16e0:	fa f4       	brpl	.+62     	; 0x1720 <__floatsisf+0x6c>
    16e2:	bb 0f       	add	r27, r27
    16e4:	11 f4       	brne	.+4      	; 0x16ea <__floatsisf+0x36>
    16e6:	60 ff       	sbrs	r22, 0
    16e8:	1b c0       	rjmp	.+54     	; 0x1720 <__floatsisf+0x6c>
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	16 c0       	rjmp	.+44     	; 0x1720 <__floatsisf+0x6c>
    16f4:	88 23       	and	r24, r24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <__floatsisf+0x48>
    16f8:	96 e9       	ldi	r25, 0x96	; 150
    16fa:	11 c0       	rjmp	.+34     	; 0x171e <__floatsisf+0x6a>
    16fc:	77 23       	and	r23, r23
    16fe:	21 f0       	breq	.+8      	; 0x1708 <__floatsisf+0x54>
    1700:	9e e8       	ldi	r25, 0x8E	; 142
    1702:	87 2f       	mov	r24, r23
    1704:	76 2f       	mov	r23, r22
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <__floatsisf+0x5e>
    1708:	66 23       	and	r22, r22
    170a:	71 f0       	breq	.+28     	; 0x1728 <__floatsisf+0x74>
    170c:	96 e8       	ldi	r25, 0x86	; 134
    170e:	86 2f       	mov	r24, r22
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	2a f0       	brmi	.+10     	; 0x1720 <__floatsisf+0x6c>
    1716:	9a 95       	dec	r25
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	da f7       	brpl	.-10     	; 0x1716 <__floatsisf+0x62>
    1720:	88 0f       	add	r24, r24
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	97 f9       	bld	r25, 7
    1728:	08 95       	ret

0000172a <__fp_inf>:
    172a:	97 f9       	bld	r25, 7
    172c:	9f 67       	ori	r25, 0x7F	; 127
    172e:	80 e8       	ldi	r24, 0x80	; 128
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	08 95       	ret

00001736 <__fp_nan>:
    1736:	9f ef       	ldi	r25, 0xFF	; 255
    1738:	80 ec       	ldi	r24, 0xC0	; 192
    173a:	08 95       	ret

0000173c <__fp_pscA>:
    173c:	00 24       	eor	r0, r0
    173e:	0a 94       	dec	r0
    1740:	16 16       	cp	r1, r22
    1742:	17 06       	cpc	r1, r23
    1744:	18 06       	cpc	r1, r24
    1746:	09 06       	cpc	r0, r25
    1748:	08 95       	ret

0000174a <__fp_pscB>:
    174a:	00 24       	eor	r0, r0
    174c:	0a 94       	dec	r0
    174e:	12 16       	cp	r1, r18
    1750:	13 06       	cpc	r1, r19
    1752:	14 06       	cpc	r1, r20
    1754:	05 06       	cpc	r0, r21
    1756:	08 95       	ret

00001758 <__fp_round>:
    1758:	09 2e       	mov	r0, r25
    175a:	03 94       	inc	r0
    175c:	00 0c       	add	r0, r0
    175e:	11 f4       	brne	.+4      	; 0x1764 <__fp_round+0xc>
    1760:	88 23       	and	r24, r24
    1762:	52 f0       	brmi	.+20     	; 0x1778 <__fp_round+0x20>
    1764:	bb 0f       	add	r27, r27
    1766:	40 f4       	brcc	.+16     	; 0x1778 <__fp_round+0x20>
    1768:	bf 2b       	or	r27, r31
    176a:	11 f4       	brne	.+4      	; 0x1770 <__fp_round+0x18>
    176c:	60 ff       	sbrs	r22, 0
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <__fp_round+0x20>
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	08 95       	ret

0000177a <__fp_split3>:
    177a:	57 fd       	sbrc	r21, 7
    177c:	90 58       	subi	r25, 0x80	; 128
    177e:	44 0f       	add	r20, r20
    1780:	55 1f       	adc	r21, r21
    1782:	59 f0       	breq	.+22     	; 0x179a <__fp_splitA+0x10>
    1784:	5f 3f       	cpi	r21, 0xFF	; 255
    1786:	71 f0       	breq	.+28     	; 0x17a4 <__fp_splitA+0x1a>
    1788:	47 95       	ror	r20

0000178a <__fp_splitA>:
    178a:	88 0f       	add	r24, r24
    178c:	97 fb       	bst	r25, 7
    178e:	99 1f       	adc	r25, r25
    1790:	61 f0       	breq	.+24     	; 0x17aa <__fp_splitA+0x20>
    1792:	9f 3f       	cpi	r25, 0xFF	; 255
    1794:	79 f0       	breq	.+30     	; 0x17b4 <__fp_splitA+0x2a>
    1796:	87 95       	ror	r24
    1798:	08 95       	ret
    179a:	12 16       	cp	r1, r18
    179c:	13 06       	cpc	r1, r19
    179e:	14 06       	cpc	r1, r20
    17a0:	55 1f       	adc	r21, r21
    17a2:	f2 cf       	rjmp	.-28     	; 0x1788 <__fp_split3+0xe>
    17a4:	46 95       	lsr	r20
    17a6:	f1 df       	rcall	.-30     	; 0x178a <__fp_splitA>
    17a8:	08 c0       	rjmp	.+16     	; 0x17ba <__fp_splitA+0x30>
    17aa:	16 16       	cp	r1, r22
    17ac:	17 06       	cpc	r1, r23
    17ae:	18 06       	cpc	r1, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	f1 cf       	rjmp	.-30     	; 0x1796 <__fp_splitA+0xc>
    17b4:	86 95       	lsr	r24
    17b6:	71 05       	cpc	r23, r1
    17b8:	61 05       	cpc	r22, r1
    17ba:	08 94       	sec
    17bc:	08 95       	ret

000017be <__fp_zero>:
    17be:	e8 94       	clt

000017c0 <__fp_szero>:
    17c0:	bb 27       	eor	r27, r27
    17c2:	66 27       	eor	r22, r22
    17c4:	77 27       	eor	r23, r23
    17c6:	cb 01       	movw	r24, r22
    17c8:	97 f9       	bld	r25, 7
    17ca:	08 95       	ret

000017cc <__mulsf3>:
    17cc:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__mulsf3x>
    17d0:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__fp_round>
    17d4:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_pscA>
    17d8:	38 f0       	brcs	.+14     	; 0x17e8 <__mulsf3+0x1c>
    17da:	0e 94 a5 0b 	call	0x174a	; 0x174a <__fp_pscB>
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__mulsf3+0x1c>
    17e0:	95 23       	and	r25, r21
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <__mulsf3+0x1c>
    17e4:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_inf>
    17e8:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__fp_nan>
    17ec:	11 24       	eor	r1, r1
    17ee:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_szero>

000017f2 <__mulsf3x>:
    17f2:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_split3>
    17f6:	70 f3       	brcs	.-36     	; 0x17d4 <__mulsf3+0x8>

000017f8 <__mulsf3_pse>:
    17f8:	95 9f       	mul	r25, r21
    17fa:	c1 f3       	breq	.-16     	; 0x17ec <__mulsf3+0x20>
    17fc:	95 0f       	add	r25, r21
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	55 1f       	adc	r21, r21
    1802:	62 9f       	mul	r22, r18
    1804:	f0 01       	movw	r30, r0
    1806:	72 9f       	mul	r23, r18
    1808:	bb 27       	eor	r27, r27
    180a:	f0 0d       	add	r31, r0
    180c:	b1 1d       	adc	r27, r1
    180e:	63 9f       	mul	r22, r19
    1810:	aa 27       	eor	r26, r26
    1812:	f0 0d       	add	r31, r0
    1814:	b1 1d       	adc	r27, r1
    1816:	aa 1f       	adc	r26, r26
    1818:	64 9f       	mul	r22, r20
    181a:	66 27       	eor	r22, r22
    181c:	b0 0d       	add	r27, r0
    181e:	a1 1d       	adc	r26, r1
    1820:	66 1f       	adc	r22, r22
    1822:	82 9f       	mul	r24, r18
    1824:	22 27       	eor	r18, r18
    1826:	b0 0d       	add	r27, r0
    1828:	a1 1d       	adc	r26, r1
    182a:	62 1f       	adc	r22, r18
    182c:	73 9f       	mul	r23, r19
    182e:	b0 0d       	add	r27, r0
    1830:	a1 1d       	adc	r26, r1
    1832:	62 1f       	adc	r22, r18
    1834:	83 9f       	mul	r24, r19
    1836:	a0 0d       	add	r26, r0
    1838:	61 1d       	adc	r22, r1
    183a:	22 1f       	adc	r18, r18
    183c:	74 9f       	mul	r23, r20
    183e:	33 27       	eor	r19, r19
    1840:	a0 0d       	add	r26, r0
    1842:	61 1d       	adc	r22, r1
    1844:	23 1f       	adc	r18, r19
    1846:	84 9f       	mul	r24, r20
    1848:	60 0d       	add	r22, r0
    184a:	21 1d       	adc	r18, r1
    184c:	82 2f       	mov	r24, r18
    184e:	76 2f       	mov	r23, r22
    1850:	6a 2f       	mov	r22, r26
    1852:	11 24       	eor	r1, r1
    1854:	9f 57       	subi	r25, 0x7F	; 127
    1856:	50 40       	sbci	r21, 0x00	; 0
    1858:	9a f0       	brmi	.+38     	; 0x1880 <__mulsf3_pse+0x88>
    185a:	f1 f0       	breq	.+60     	; 0x1898 <__mulsf3_pse+0xa0>
    185c:	88 23       	and	r24, r24
    185e:	4a f0       	brmi	.+18     	; 0x1872 <__mulsf3_pse+0x7a>
    1860:	ee 0f       	add	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	bb 1f       	adc	r27, r27
    1866:	66 1f       	adc	r22, r22
    1868:	77 1f       	adc	r23, r23
    186a:	88 1f       	adc	r24, r24
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	50 40       	sbci	r21, 0x00	; 0
    1870:	a9 f7       	brne	.-22     	; 0x185c <__mulsf3_pse+0x64>
    1872:	9e 3f       	cpi	r25, 0xFE	; 254
    1874:	51 05       	cpc	r21, r1
    1876:	80 f0       	brcs	.+32     	; 0x1898 <__mulsf3_pse+0xa0>
    1878:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__fp_inf>
    187c:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_szero>
    1880:	5f 3f       	cpi	r21, 0xFF	; 255
    1882:	e4 f3       	brlt	.-8      	; 0x187c <__mulsf3_pse+0x84>
    1884:	98 3e       	cpi	r25, 0xE8	; 232
    1886:	d4 f3       	brlt	.-12     	; 0x187c <__mulsf3_pse+0x84>
    1888:	86 95       	lsr	r24
    188a:	77 95       	ror	r23
    188c:	67 95       	ror	r22
    188e:	b7 95       	ror	r27
    1890:	f7 95       	ror	r31
    1892:	e7 95       	ror	r30
    1894:	9f 5f       	subi	r25, 0xFF	; 255
    1896:	c1 f7       	brne	.-16     	; 0x1888 <__mulsf3_pse+0x90>
    1898:	fe 2b       	or	r31, r30
    189a:	88 0f       	add	r24, r24
    189c:	91 1d       	adc	r25, r1
    189e:	96 95       	lsr	r25
    18a0:	87 95       	ror	r24
    18a2:	97 f9       	bld	r25, 7
    18a4:	08 95       	ret

000018a6 <do_rand>:
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	ec 01       	movw	r28, r24
    18bc:	68 81       	ld	r22, Y
    18be:	79 81       	ldd	r23, Y+1	; 0x01
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	9b 81       	ldd	r25, Y+3	; 0x03
    18c4:	61 15       	cp	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	81 05       	cpc	r24, r1
    18ca:	91 05       	cpc	r25, r1
    18cc:	21 f4       	brne	.+8      	; 0x18d6 <do_rand+0x30>
    18ce:	64 e2       	ldi	r22, 0x24	; 36
    18d0:	79 ed       	ldi	r23, 0xD9	; 217
    18d2:	8b e5       	ldi	r24, 0x5B	; 91
    18d4:	97 e0       	ldi	r25, 0x07	; 7
    18d6:	2d e1       	ldi	r18, 0x1D	; 29
    18d8:	33 ef       	ldi	r19, 0xF3	; 243
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	0e 94 c5 0c 	call	0x198a	; 0x198a <__divmodsi4>
    18e2:	49 01       	movw	r8, r18
    18e4:	5a 01       	movw	r10, r20
    18e6:	9b 01       	movw	r18, r22
    18e8:	ac 01       	movw	r20, r24
    18ea:	a7 ea       	ldi	r26, 0xA7	; 167
    18ec:	b1 e4       	ldi	r27, 0x41	; 65
    18ee:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__muluhisi3>
    18f2:	6b 01       	movw	r12, r22
    18f4:	7c 01       	movw	r14, r24
    18f6:	ac ee       	ldi	r26, 0xEC	; 236
    18f8:	b4 ef       	ldi	r27, 0xF4	; 244
    18fa:	a5 01       	movw	r20, r10
    18fc:	94 01       	movw	r18, r8
    18fe:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__mulohisi3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	8c 0d       	add	r24, r12
    1908:	9d 1d       	adc	r25, r13
    190a:	ae 1d       	adc	r26, r14
    190c:	bf 1d       	adc	r27, r15
    190e:	b7 ff       	sbrs	r27, 7
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <do_rand+0x72>
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	a1 09       	sbc	r26, r1
    1916:	b0 48       	sbci	r27, 0x80	; 128
    1918:	88 83       	st	Y, r24
    191a:	99 83       	std	Y+1, r25	; 0x01
    191c:	aa 83       	std	Y+2, r26	; 0x02
    191e:	bb 83       	std	Y+3, r27	; 0x03
    1920:	9f 77       	andi	r25, 0x7F	; 127
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	9f 90       	pop	r9
    1934:	8f 90       	pop	r8
    1936:	08 95       	ret

00001938 <rand_r>:
    1938:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <do_rand>
    193c:	08 95       	ret

0000193e <rand>:
    193e:	87 e0       	ldi	r24, 0x07	; 7
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <do_rand>
    1946:	08 95       	ret

00001948 <srand>:
    1948:	a0 e0       	ldi	r26, 0x00	; 0
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	80 93 07 01 	sts	0x0107, r24
    1950:	90 93 08 01 	sts	0x0108, r25
    1954:	a0 93 09 01 	sts	0x0109, r26
    1958:	b0 93 0a 01 	sts	0x010A, r27
    195c:	08 95       	ret

0000195e <eeprom_read_byte>:
    195e:	f9 99       	sbic	0x1f, 1	; 31
    1960:	fe cf       	rjmp	.-4      	; 0x195e <eeprom_read_byte>
    1962:	92 bd       	out	0x22, r25	; 34
    1964:	81 bd       	out	0x21, r24	; 33
    1966:	f8 9a       	sbi	0x1f, 0	; 31
    1968:	99 27       	eor	r25, r25
    196a:	80 b5       	in	r24, 0x20	; 32
    196c:	08 95       	ret

0000196e <eeprom_write_byte>:
    196e:	26 2f       	mov	r18, r22

00001970 <eeprom_write_r18>:
    1970:	f9 99       	sbic	0x1f, 1	; 31
    1972:	fe cf       	rjmp	.-4      	; 0x1970 <eeprom_write_r18>
    1974:	1f ba       	out	0x1f, r1	; 31
    1976:	92 bd       	out	0x22, r25	; 34
    1978:	81 bd       	out	0x21, r24	; 33
    197a:	20 bd       	out	0x20, r18	; 32
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	fa 9a       	sbi	0x1f, 2	; 31
    1982:	f9 9a       	sbi	0x1f, 1	; 31
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	08 95       	ret

0000198a <__divmodsi4>:
    198a:	05 2e       	mov	r0, r21
    198c:	97 fb       	bst	r25, 7
    198e:	1e f4       	brtc	.+6      	; 0x1996 <__divmodsi4+0xc>
    1990:	00 94       	com	r0
    1992:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__negsi2>
    1996:	57 fd       	sbrc	r21, 7
    1998:	07 d0       	rcall	.+14     	; 0x19a8 <__divmodsi4_neg2>
    199a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__udivmodsi4>
    199e:	07 fc       	sbrc	r0, 7
    19a0:	03 d0       	rcall	.+6      	; 0x19a8 <__divmodsi4_neg2>
    19a2:	4e f4       	brtc	.+18     	; 0x19b6 <__divmodsi4_exit>
    19a4:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__negsi2>

000019a8 <__divmodsi4_neg2>:
    19a8:	50 95       	com	r21
    19aa:	40 95       	com	r20
    19ac:	30 95       	com	r19
    19ae:	21 95       	neg	r18
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	4f 4f       	sbci	r20, 0xFF	; 255
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255

000019b6 <__divmodsi4_exit>:
    19b6:	08 95       	ret

000019b8 <__negsi2>:
    19b8:	90 95       	com	r25
    19ba:	80 95       	com	r24
    19bc:	70 95       	com	r23
    19be:	61 95       	neg	r22
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	8f 4f       	sbci	r24, 0xFF	; 255
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	08 95       	ret

000019c8 <__muluhisi3>:
    19c8:	0e 94 20 0a 	call	0x1440	; 0x1440 <__umulhisi3>
    19cc:	a5 9f       	mul	r26, r21
    19ce:	90 0d       	add	r25, r0
    19d0:	b4 9f       	mul	r27, r20
    19d2:	90 0d       	add	r25, r0
    19d4:	a4 9f       	mul	r26, r20
    19d6:	80 0d       	add	r24, r0
    19d8:	91 1d       	adc	r25, r1
    19da:	11 24       	eor	r1, r1
    19dc:	08 95       	ret

000019de <__mulshisi3>:
    19de:	b7 ff       	sbrs	r27, 7
    19e0:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__muluhisi3>

000019e4 <__mulohisi3>:
    19e4:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__muluhisi3>
    19e8:	82 1b       	sub	r24, r18
    19ea:	93 0b       	sbc	r25, r19
    19ec:	08 95       	ret

000019ee <__udivmodsi4>:
    19ee:	a1 e2       	ldi	r26, 0x21	; 33
    19f0:	1a 2e       	mov	r1, r26
    19f2:	aa 1b       	sub	r26, r26
    19f4:	bb 1b       	sub	r27, r27
    19f6:	fd 01       	movw	r30, r26
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <__udivmodsi4_ep>

000019fa <__udivmodsi4_loop>:
    19fa:	aa 1f       	adc	r26, r26
    19fc:	bb 1f       	adc	r27, r27
    19fe:	ee 1f       	adc	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	a2 17       	cp	r26, r18
    1a04:	b3 07       	cpc	r27, r19
    1a06:	e4 07       	cpc	r30, r20
    1a08:	f5 07       	cpc	r31, r21
    1a0a:	20 f0       	brcs	.+8      	; 0x1a14 <__udivmodsi4_ep>
    1a0c:	a2 1b       	sub	r26, r18
    1a0e:	b3 0b       	sbc	r27, r19
    1a10:	e4 0b       	sbc	r30, r20
    1a12:	f5 0b       	sbc	r31, r21

00001a14 <__udivmodsi4_ep>:
    1a14:	66 1f       	adc	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	1a 94       	dec	r1
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <__udivmodsi4_loop>
    1a20:	60 95       	com	r22
    1a22:	70 95       	com	r23
    1a24:	80 95       	com	r24
    1a26:	90 95       	com	r25
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	bd 01       	movw	r22, r26
    1a2e:	cf 01       	movw	r24, r30
    1a30:	08 95       	ret

00001a32 <_exit>:
    1a32:	f8 94       	cli

00001a34 <__stop_program>:
    1a34:	ff cf       	rjmp	.-2      	; 0x1a34 <__stop_program>
