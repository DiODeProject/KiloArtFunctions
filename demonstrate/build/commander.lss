
build/commander.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	63 02       	muls	r22, r19
      6a:	df 02       	muls	r29, r31
      6c:	37 02       	muls	r19, r23
      6e:	2e 02       	muls	r18, r30
      70:	34 02       	muls	r19, r20
      72:	c1 02       	muls	r28, r17
      74:	b6 02       	muls	r27, r22
      76:	41 09       	sbc	r20, r1
      78:	1e 08       	sbc	r1, r14
      7a:	1e 08       	sbc	r1, r14
      7c:	3e 09       	sbc	r19, r14
      7e:	4a 09       	sbc	r20, r10
      80:	3a 09       	sbc	r19, r10
      82:	51 09       	sbc	r21, r1
      84:	4d 09       	sbc	r20, r13
      86:	55 09       	sbc	r21, r5
      88:	0d 09       	sbc	r16, r13
      8a:	df 08       	sbc	r13, r15

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 e6       	ldi	r30, 0x66	; 102
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 38       	cpi	r26, 0x82	; 130
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 87 0a 	call	0x150e	; 0x150e <main>
      da:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
message_t message;
uint32_t message_last_changed = 0;
int command = 0;

void setup()
{
      e2:	08 95       	ret

000000e4 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e4:	88 e1       	ldi	r24, 0x18	; 24
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	08 95       	ret

000000ea <message_tx_succes>:

void message_tx_succes()
{
    message_sent = 1;
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	90 93 13 01 	sts	0x0113, r25
      f2:	80 93 12 01 	sts	0x0112, r24
      f6:	08 95       	ret

000000f8 <loop>:
}

void loop()
{
    // Toggle even/odd message every 64 clock ticks (roughly 2 seconds).
    if (kilo_ticks > message_last_changed + 64)
      f8:	40 91 47 01 	lds	r20, 0x0147
      fc:	50 91 48 01 	lds	r21, 0x0148
     100:	60 91 49 01 	lds	r22, 0x0149
     104:	70 91 4a 01 	lds	r23, 0x014A
     108:	80 91 0e 01 	lds	r24, 0x010E
     10c:	90 91 0f 01 	lds	r25, 0x010F
     110:	a0 91 10 01 	lds	r26, 0x0110
     114:	b0 91 11 01 	lds	r27, 0x0111
     118:	80 5c       	subi	r24, 0xC0	; 192
     11a:	9f 4f       	sbci	r25, 0xFF	; 255
     11c:	af 4f       	sbci	r26, 0xFF	; 255
     11e:	bf 4f       	sbci	r27, 0xFF	; 255
     120:	84 17       	cp	r24, r20
     122:	95 07       	cpc	r25, r21
     124:	a6 07       	cpc	r26, r22
     126:	b7 07       	cpc	r27, r23
     128:	50 f5       	brcc	.+84     	; 0x17e <loop+0x86>
    {
        message_last_changed = kilo_ticks;
     12a:	80 91 47 01 	lds	r24, 0x0147
     12e:	90 91 48 01 	lds	r25, 0x0148
     132:	a0 91 49 01 	lds	r26, 0x0149
     136:	b0 91 4a 01 	lds	r27, 0x014A
     13a:	80 93 0e 01 	sts	0x010E, r24
     13e:	90 93 0f 01 	sts	0x010F, r25
     142:	a0 93 10 01 	sts	0x0110, r26
     146:	b0 93 11 01 	sts	0x0111, r27
        
        if (command == 0)
     14a:	80 91 0c 01 	lds	r24, 0x010C
     14e:	90 91 0d 01 	lds	r25, 0x010D
        {
            message.type = NORMAL;
     152:	10 92 21 01 	sts	0x0121, r1
    // Toggle even/odd message every 64 clock ticks (roughly 2 seconds).
    if (kilo_ticks > message_last_changed + 64)
    {
        message_last_changed = kilo_ticks;
        
        if (command == 0)
     156:	00 97       	sbiw	r24, 0x00	; 0
     158:	b9 f1       	breq	.+110    	; 0x1c8 <loop+0xd0>
            message.crc = message_crc(&message);
            
            // Update odd for next time.
            command = 1;
        }
        else if(command == 1)
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	09 f4       	brne	.+2      	; 0x160 <loop+0x68>
     15e:	45 c0       	rjmp	.+138    	; 0x1ea <loop+0xf2>
            command = 2;
        }
        else
        {
            message.type = NORMAL;
            message.data[0] = 2;
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 18 01 	sts	0x0118, r24
            message.crc = message_crc(&message);
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <message_crc>
     16e:	90 93 23 01 	sts	0x0123, r25
     172:	80 93 22 01 	sts	0x0122, r24
            
            // Update odd for next time.
            command = 0;
     176:	10 92 0d 01 	sts	0x010D, r1
     17a:	10 92 0c 01 	sts	0x010C, r1
        }

    }
    
    // Blink the LED magenta whenever a message is sent.
    if (message_sent)
     17e:	80 91 12 01 	lds	r24, 0x0112
     182:	90 91 13 01 	lds	r25, 0x0113
     186:	89 2b       	or	r24, r25
     188:	b1 f0       	breq	.+44     	; 0x1b6 <loop+0xbe>
    {
        message_sent = 0;
     18a:	10 92 13 01 	sts	0x0113, r1
     18e:	10 92 12 01 	sts	0x0112, r1
        if(command ==0){
     192:	80 91 0c 01 	lds	r24, 0x010C
     196:	90 91 0d 01 	lds	r25, 0x010D
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	69 f0       	breq	.+26     	; 0x1b8 <loop+0xc0>
            set_color(RGB(1, 0, 1));
        }
        else if(command ==1){
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	c9 f1       	breq	.+114    	; 0x216 <loop+0x11e>
            set_color(RGB(0, 1, 1));
        }
        if(command ==2){
     1a4:	02 97       	sbiw	r24, 0x02	; 2
     1a6:	99 f1       	breq	.+102    	; 0x20e <loop+0x116>
            set_color(RGB(1, 1, 1));
        }
        delay(100);
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <delay>
        set_color(RGB(0, 0, 0));
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0c 94 98 07 	jmp	0xf30	; 0xf30 <set_color>
     1b6:	08 95       	ret
    // Blink the LED magenta whenever a message is sent.
    if (message_sent)
    {
        message_sent = 0;
        if(command ==0){
            set_color(RGB(1, 0, 1));
     1b8:	81 e1       	ldi	r24, 0x11	; 17
     1ba:	0e 94 98 07 	call	0xf30	; 0xf30 <set_color>
     1be:	80 91 0c 01 	lds	r24, 0x010C
     1c2:	90 91 0d 01 	lds	r25, 0x010D
     1c6:	ee cf       	rjmp	.-36     	; 0x1a4 <loop+0xac>
        message_last_changed = kilo_ticks;
        
        if (command == 0)
        {
            message.type = NORMAL;
            message.data[0] = 0;
     1c8:	10 92 18 01 	sts	0x0118, r1
            message.crc = message_crc(&message);
     1cc:	88 e1       	ldi	r24, 0x18	; 24
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <message_crc>
     1d4:	90 93 23 01 	sts	0x0123, r25
     1d8:	80 93 22 01 	sts	0x0122, r24
            
            // Update odd for next time.
            command = 1;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 0d 01 	sts	0x010D, r25
     1e4:	80 93 0c 01 	sts	0x010C, r24
     1e8:	ca cf       	rjmp	.-108    	; 0x17e <loop+0x86>
        }
        else if(command == 1)
        {
            message.type = NORMAL;
            message.data[0] = 1;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	80 93 18 01 	sts	0x0118, r24
            message.crc = message_crc(&message);
     1f0:	88 e1       	ldi	r24, 0x18	; 24
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <message_crc>
     1f8:	90 93 23 01 	sts	0x0123, r25
     1fc:	80 93 22 01 	sts	0x0122, r24
            
            // Update odd for next time.
            command = 2;
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	90 93 0d 01 	sts	0x010D, r25
     208:	80 93 0c 01 	sts	0x010C, r24
     20c:	b8 cf       	rjmp	.-144    	; 0x17e <loop+0x86>
        }
        else if(command ==1){
            set_color(RGB(0, 1, 1));
        }
        if(command ==2){
            set_color(RGB(1, 1, 1));
     20e:	85 e1       	ldi	r24, 0x15	; 21
     210:	0e 94 98 07 	call	0xf30	; 0xf30 <set_color>
     214:	c9 cf       	rjmp	.-110    	; 0x1a8 <loop+0xb0>
        message_sent = 0;
        if(command ==0){
            set_color(RGB(1, 0, 1));
        }
        else if(command ==1){
            set_color(RGB(0, 1, 1));
     216:	84 e1       	ldi	r24, 0x14	; 20
     218:	0e 94 98 07 	call	0xf30	; 0xf30 <set_color>
     21c:	80 91 0c 01 	lds	r24, 0x010C
     220:	90 91 0d 01 	lds	r25, 0x010D
     224:	bf cf       	rjmp	.-130    	; 0x1a4 <loop+0xac>

00000226 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     226:	08 95       	ret

00000228 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	08 95       	ret

0000022e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     22e:	08 95       	ret

00000230 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
    cli();
     23e:	f8 94       	cli

    ports_off();
     240:	14 b8       	out	0x04, r1	; 4
     242:	17 b8       	out	0x07, r1	; 7
     244:	1a b8       	out	0x0a, r1	; 10
     246:	15 b8       	out	0x05, r1	; 5
     248:	18 b8       	out	0x08, r1	; 8
     24a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     24c:	52 9a       	sbi	0x0a, 2	; 10
     24e:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     250:	14 bc       	out	0x24, r1	; 36
     252:	85 e0       	ldi	r24, 0x05	; 5
     254:	85 bd       	out	0x25, r24	; 37
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	87 bd       	out	0x27, r24	; 39
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     260:	10 92 80 00 	sts	0x0080, r1
     264:	10 92 81 00 	sts	0x0081, r1
     268:	2f e8       	ldi	r18, 0x8F	; 143
     26a:	3b e0       	ldi	r19, 0x0B	; 11
     26c:	30 93 89 00 	sts	0x0089, r19
     270:	20 93 88 00 	sts	0x0088, r18
     274:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     278:	53 98       	cbi	0x0a, 3	; 10
     27a:	23 98       	cbi	0x04, 3	; 4
     27c:	91 ea       	ldi	r25, 0xA1	; 161
     27e:	90 93 b0 00 	sts	0x00B0, r25
     282:	80 93 b1 00 	sts	0x00B1, r24
     286:	10 92 b4 00 	sts	0x00B4, r1
     28a:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     28e:	8b e0       	ldi	r24, 0x0B	; 11
     290:	80 bf       	out	0x30, r24	; 48
     292:	83 e0       	ldi	r24, 0x03	; 3
     294:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     298:	86 e0       	ldi	r24, 0x06	; 6
     29a:	80 93 7c 00 	sts	0x007C, r24
     29e:	83 e8       	ldi	r24, 0x83	; 131
     2a0:	80 93 7a 00 	sts	0x007A, r24
     2a4:	80 91 7a 00 	lds	r24, 0x007A
     2a8:	80 64       	ori	r24, 0x40	; 64
     2aa:	80 93 7a 00 	sts	0x007A, r24
     2ae:	80 91 7a 00 	lds	r24, 0x007A
     2b2:	86 fd       	sbrc	r24, 6
     2b4:	fc cf       	rjmp	.-8      	; 0x2ae <kilo_init+0x7e>
    adc_trigger_high_gain();
     2b6:	10 92 7c 00 	sts	0x007C, r1
     2ba:	83 ea       	ldi	r24, 0xA3	; 163
     2bc:	80 93 7a 00 	sts	0x007A, r24
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
    if (osccal != 0xFF)
     2ce:	8f 3f       	cpi	r24, 0xFF	; 255
     2d0:	11 f0       	breq	.+4      	; 0x2d6 <kilo_init+0xa6>
        OSCCAL = osccal;
     2d2:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     2d6:	10 92 4b 01 	sts	0x014B, r1
    rx_leadingbit = 1;
     2da:	c1 e0       	ldi	r28, 0x01	; 1
     2dc:	c0 93 24 01 	sts	0x0124, r28
    rx_leadingbyte = 1;
     2e0:	c0 93 68 01 	sts	0x0168, r28
    rx_byteindex = 0;
     2e4:	10 92 42 01 	sts	0x0142, r1
    rx_bytevalue = 0;
     2e8:	10 92 7c 01 	sts	0x017C, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2ec:	80 e9       	ldi	r24, 0x90	; 144
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     2f4:	80 93 41 01 	sts	0x0141, r24
    if (tx_mask & ~TX_MASK_MAX)
     2f8:	80 91 41 01 	lds	r24, 0x0141
     2fc:	88 73       	andi	r24, 0x38	; 56
     2fe:	11 f0       	breq	.+4      	; 0x304 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     300:	c0 93 41 01 	sts	0x0141, r28
    tx_clock = 0;
     304:	10 92 6c 01 	sts	0x016C, r1
     308:	10 92 6b 01 	sts	0x016B, r1
    tx_increment = 255;
     30c:	8f ef       	ldi	r24, 0xFF	; 255
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	90 93 6a 01 	sts	0x016A, r25
     314:	80 93 69 01 	sts	0x0169, r24
    kilo_ticks = 0;
     318:	10 92 47 01 	sts	0x0147, r1
     31c:	10 92 48 01 	sts	0x0148, r1
     320:	10 92 49 01 	sts	0x0149, r1
     324:	10 92 4a 01 	sts	0x014A, r1
    kilo_state = IDLE;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     32e:	82 e4       	ldi	r24, 0x42	; 66
     330:	9f e0       	ldi	r25, 0x0F	; 15
     332:	90 93 7b 01 	sts	0x017B, r25
     336:	80 93 7a 01 	sts	0x017A, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     33a:	80 eb       	ldi	r24, 0xB0	; 176
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     342:	c8 2f       	mov	r28, r24
     344:	81 eb       	ldi	r24, 0xB1	; 177
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     34c:	2c 2f       	mov	r18, r28
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	38 2b       	or	r19, r24
     352:	30 93 7e 01 	sts	0x017E, r19
     356:	20 93 7d 01 	sts	0x017D, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     362:	80 93 81 01 	sts	0x0181, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     366:	89 e0       	ldi	r24, 0x09	; 9
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     36e:	80 93 6d 01 	sts	0x016D, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     372:	8c e0       	ldi	r24, 0x0C	; 12
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     37a:	80 93 7f 01 	sts	0x017F, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     37e:	84 e1       	ldi	r24, 0x14	; 20
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     386:	80 93 80 01 	sts	0x0180, r24
     38a:	5c e4       	ldi	r21, 0x4C	; 76
     38c:	e5 2e       	mov	r14, r21
     38e:	51 e0       	ldi	r21, 0x01	; 1
     390:	f5 2e       	mov	r15, r21
     392:	05 e2       	ldi	r16, 0x25	; 37
     394:	11 e0       	ldi	r17, 0x01	; 1
     396:	c0 e2       	ldi	r28, 0x20	; 32
     398:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     39a:	ce 01       	movw	r24, r28
     39c:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     3a0:	d8 2e       	mov	r13, r24
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     3aa:	2d 2d       	mov	r18, r13
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	32 2f       	mov	r19, r18
     3b0:	22 27       	eor	r18, r18
     3b2:	28 2b       	or	r18, r24
     3b4:	f7 01       	movw	r30, r14
     3b6:	21 93       	st	Z+, r18
     3b8:	31 93       	st	Z+, r19
     3ba:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     3bc:	ce 01       	movw	r24, r28
     3be:	c0 96       	adiw	r24, 0x30	; 48
     3c0:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     3c4:	d8 2e       	mov	r13, r24
     3c6:	ce 01       	movw	r24, r28
     3c8:	c1 96       	adiw	r24, 0x31	; 49
     3ca:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <eeprom_read_byte>
     3ce:	2d 2d       	mov	r18, r13
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	32 2f       	mov	r19, r18
     3d4:	22 27       	eor	r18, r18
     3d6:	28 2b       	or	r18, r24
     3d8:	f8 01       	movw	r30, r16
     3da:	21 93       	st	Z+, r18
     3dc:	31 93       	st	Z+, r19
     3de:	8f 01       	movw	r16, r30
     3e0:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3e2:	cc 33       	cpi	r28, 0x3C	; 60
     3e4:	d1 05       	cpc	r29, r1
     3e6:	c9 f6       	brne	.-78     	; 0x39a <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3e8:	78 94       	sei
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	08 95       	ret

000003fa <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	8f 93       	push	r24
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	a8 95       	wdr
     40c:	80 91 60 00 	lds	r24, 0x0060
     410:	88 61       	ori	r24, 0x18	; 24
     412:	80 93 60 00 	sts	0x0060, r24
     416:	10 92 60 00 	sts	0x0060, r1
     41a:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     41c:	8f 91       	pop	r24
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     428:	3c 01       	movw	r6, r24
     42a:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     42c:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     42e:	99 24       	eor	r9, r9
     430:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     432:	84 e0       	ldi	r24, 0x04	; 4
     434:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     436:	96 e0       	ldi	r25, 0x06	; 6
     438:	a9 2e       	mov	r10, r25
     43a:	23 e8       	ldi	r18, 0x83	; 131
     43c:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     43e:	38 e1       	ldi	r19, 0x18	; 24
     440:	d3 2e       	mov	r13, r19
     442:	49 e2       	ldi	r20, 0x29	; 41
     444:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     446:	90 91 17 01 	lds	r25, 0x0117
     44a:	e9 2f       	mov	r30, r25
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	e7 30       	cpi	r30, 0x07	; 7
     450:	f1 05       	cpc	r31, r1
     452:	c8 f7       	brcc	.-14     	; 0x446 <kilo_start+0x1e>
     454:	ec 5c       	subi	r30, 0xCC	; 204
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     45c:	11 23       	and	r17, r17
     45e:	09 f4       	brne	.+2      	; 0x462 <kilo_start+0x3a>
     460:	fc c0       	rjmp	.+504    	; 0x65a <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     462:	c0 92 17 01 	sts	0x0117, r12
     466:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     468:	fe 01       	movw	r30, r28
     46a:	09 95       	icall
                break;
     46c:	ec cf       	rjmp	.-40     	; 0x446 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     46e:	80 91 4b 01 	lds	r24, 0x014B
     472:	81 11       	cpse	r24, r1
     474:	eb c0       	rjmp	.+470    	; 0x64c <kilo_start+0x224>
        cli();                                    // disable interrupts
     476:	f8 94       	cli
        adc_setup_conversion(6);
     478:	a0 92 7c 00 	sts	0x007C, r10
     47c:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     480:	80 91 7a 00 	lds	r24, 0x007A
     484:	80 64       	ori	r24, 0x40	; 64
     486:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     48a:	90 91 7a 00 	lds	r25, 0x007A
     48e:	96 fd       	sbrc	r25, 6
     490:	fc cf       	rjmp	.-8      	; 0x48a <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     492:	80 91 78 00 	lds	r24, 0x0078
     496:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     49a:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     49c:	8b 3a       	cpi	r24, 0xAB	; 171
     49e:	e2 e0       	ldi	r30, 0x02	; 2
     4a0:	9e 07       	cpc	r25, r30
     4a2:	0c f0       	brlt	.+2      	; 0x4a6 <kilo_start+0x7e>
     4a4:	ed c0       	rjmp	.+474    	; 0x680 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     4a6:	89 38       	cpi	r24, 0x89	; 137
     4a8:	f2 e0       	ldi	r31, 0x02	; 2
     4aa:	9f 07       	cpc	r25, r31
     4ac:	0c f0       	brlt	.+2      	; 0x4b0 <kilo_start+0x88>
     4ae:	ef c0       	rjmp	.+478    	; 0x68e <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     4b0:	87 36       	cpi	r24, 0x67	; 103
     4b2:	92 40       	sbci	r25, 0x02	; 2
     4b4:	0c f4       	brge	.+2      	; 0x4b8 <kilo_start+0x90>
     4b6:	ca c0       	rjmp	.+404    	; 0x64c <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4b8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4ba:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4bc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4be:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4c2:	3c 98       	cbi	0x07, 4	; 7
     4c4:	c0 cf       	rjmp	.-128    	; 0x446 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     4c6:	f8 94       	cli
                acomp_off();
     4c8:	80 b7       	in	r24, 0x30	; 48
     4ca:	87 7f       	andi	r24, 0xF7	; 247
     4cc:	80 bf       	out	0x30, r24	; 48
                adc_off();
     4ce:	80 91 7a 00 	lds	r24, 0x007A
     4d2:	8f 77       	andi	r24, 0x7F	; 127
     4d4:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     4d8:	14 b8       	out	0x04, r1	; 4
     4da:	17 b8       	out	0x07, r1	; 7
     4dc:	1a b8       	out	0x0a, r1	; 10
     4de:	15 b8       	out	0x05, r1	; 5
     4e0:	18 b8       	out	0x08, r1	; 8
     4e2:	1b b8       	out	0x0b, r1	; 11
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	a8 95       	wdr
     4ea:	d0 92 60 00 	sts	0x0060, r13
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4f4:	80 91 60 00 	lds	r24, 0x0060
     4f8:	80 64       	ori	r24, 0x40	; 64
     4fa:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     4fe:	93 b7       	in	r25, 0x33	; 51
     500:	91 7f       	andi	r25, 0xF1	; 241
     502:	94 60       	ori	r25, 0x04	; 4
     504:	93 bf       	out	0x33, r25	; 51
                cli();
     506:	f8 94       	cli
                sleep_enable();
     508:	83 b7       	in	r24, 0x33	; 51
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	83 bf       	out	0x33, r24	; 51
                sei();
     50e:	78 94       	sei
                sleep_cpu();
     510:	88 95       	sleep
                sleep_disable();
     512:	83 b7       	in	r24, 0x33	; 51
     514:	8e 7f       	andi	r24, 0xFE	; 254
     516:	83 bf       	out	0x33, r24	; 51
                sei();
     518:	78 94       	sei
                rx_busy = 0;
     51a:	10 92 4b 01 	sts	0x014B, r1
                ports_on();
     51e:	52 9a       	sbi	0x0a, 2	; 10
     520:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     522:	80 91 7a 00 	lds	r24, 0x007A
     526:	80 68       	ori	r24, 0x80	; 128
     528:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52c:	87 e5       	ldi	r24, 0x57	; 87
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <kilo_start+0x108>
     534:	00 c0       	rjmp	.+0      	; 0x536 <kilo_start+0x10e>
     536:	00 00       	nop
                _delay_us(300);
                acomp_on();
     538:	80 b7       	in	r24, 0x30	; 48
     53a:	88 61       	ori	r24, 0x18	; 24
     53c:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     53e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     540:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     542:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     544:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     546:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     548:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54a:	ef e1       	ldi	r30, 0x1F	; 31
     54c:	fe e4       	ldi	r31, 0x4E	; 78
     54e:	31 97       	sbiw	r30, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <kilo_start+0x126>
     552:	00 c0       	rjmp	.+0      	; 0x554 <kilo_start+0x12c>
     554:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     556:	80 91 4b 01 	lds	r24, 0x014B
     55a:	81 11       	cpse	r24, r1
     55c:	81 c0       	rjmp	.+258    	; 0x660 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     55e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     560:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     562:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     564:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     566:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     568:	3c 98       	cbi	0x07, 4	; 7
     56a:	6d cf       	rjmp	.-294    	; 0x446 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     56c:	80 91 15 01 	lds	r24, 0x0115
     570:	81 11       	cpse	r24, r1
     572:	41 c0       	rjmp	.+130    	; 0x5f6 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     574:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     578:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     57c:	10 92 16 01 	sts	0x0116, r1
     580:	62 cf       	rjmp	.-316    	; 0x446 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     582:	48 99       	sbic	0x09, 0	; 9
     584:	ec cf       	rjmp	.-40     	; 0x55e <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     586:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     588:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     58a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     58c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     58e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     590:	3c 98       	cbi	0x07, 4	; 7
     592:	8f ec       	ldi	r24, 0xCF	; 207
     594:	97 e0       	ldi	r25, 0x07	; 7
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <kilo_start+0x16e>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <kilo_start+0x174>
     59c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     59e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5a0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5a2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5a4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5a6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5a8:	3c 98       	cbi	0x07, 4	; 7
     5aa:	9f ef       	ldi	r25, 0xFF	; 255
     5ac:	e1 ee       	ldi	r30, 0xE1	; 225
     5ae:	f4 e0       	ldi	r31, 0x04	; 4
     5b0:	91 50       	subi	r25, 0x01	; 1
     5b2:	e0 40       	sbci	r30, 0x00	; 0
     5b4:	f0 40       	sbci	r31, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <kilo_start+0x188>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <kilo_start+0x192>
     5ba:	00 00       	nop
     5bc:	44 cf       	rjmp	.-376    	; 0x446 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5be:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5c0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5c2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5c4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5c6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5c8:	3c 98       	cbi	0x07, 4	; 7
     5ca:	ef ec       	ldi	r30, 0xCF	; 207
     5cc:	f7 e0       	ldi	r31, 0x07	; 7
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <kilo_start+0x1a6>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <kilo_start+0x1ac>
     5d4:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5d6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5d8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5da:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5dc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5de:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5e0:	3c 98       	cbi	0x07, 4	; 7
     5e2:	ff ef       	ldi	r31, 0xFF	; 255
     5e4:	21 ee       	ldi	r18, 0xE1	; 225
     5e6:	84 e0       	ldi	r24, 0x04	; 4
     5e8:	f1 50       	subi	r31, 0x01	; 1
     5ea:	20 40       	sbci	r18, 0x00	; 0
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <kilo_start+0x1c0>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <kilo_start+0x1ca>
     5f2:	00 00       	nop
     5f4:	28 cf       	rjmp	.-432    	; 0x446 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     5f6:	90 91 15 01 	lds	r25, 0x0115
     5fa:	80 91 16 01 	lds	r24, 0x0116
     5fe:	98 17       	cp	r25, r24
     600:	09 f4       	brne	.+2      	; 0x604 <kilo_start+0x1dc>
     602:	21 cf       	rjmp	.-446    	; 0x446 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     604:	80 91 15 01 	lds	r24, 0x0115
     608:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     60c:	80 91 15 01 	lds	r24, 0x0115
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	09 f4       	brne	.+2      	; 0x616 <kilo_start+0x1ee>
     614:	50 c0       	rjmp	.+160    	; 0x6b6 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     616:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     61a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     61e:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	d9 f1       	breq	.+118    	; 0x69c <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     626:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     62a:	90 92 b4 00 	sts	0x00B4, r9
     62e:	8f e2       	ldi	r24, 0x2F	; 47
     630:	95 e7       	ldi	r25, 0x75	; 117
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <kilo_start+0x20a>
     636:	00 c0       	rjmp	.+0      	; 0x638 <kilo_start+0x210>
     638:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     63a:	80 91 80 01 	lds	r24, 0x0180
     63e:	90 91 7f 01 	lds	r25, 0x017F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     642:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     646:	80 93 b4 00 	sts	0x00B4, r24
     64a:	fd ce       	rjmp	.-518    	; 0x446 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     64c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     64e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     650:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     652:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     654:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     656:	3c 98       	cbi	0x07, 4	; 7
     658:	f6 ce       	rjmp	.-532    	; 0x446 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     65a:	f3 01       	movw	r30, r6
     65c:	09 95       	icall
     65e:	01 cf       	rjmp	.-510    	; 0x462 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     660:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     662:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     664:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     666:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     668:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     66a:	3c 98       	cbi	0x07, 4	; 7
     66c:	ff ef       	ldi	r31, 0xFF	; 255
     66e:	20 e7       	ldi	r18, 0x70	; 112
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	f1 50       	subi	r31, 0x01	; 1
     674:	20 40       	sbci	r18, 0x00	; 0
     676:	80 40       	sbci	r24, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <kilo_start+0x24a>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <kilo_start+0x254>
     67c:	00 00       	nop
     67e:	6f cf       	rjmp	.-290    	; 0x55e <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     680:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     682:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     684:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     686:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     688:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     68a:	3c 98       	cbi	0x07, 4	; 7
     68c:	dc ce       	rjmp	.-584    	; 0x446 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     68e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     690:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     692:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     694:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     696:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     698:	3c 9a       	sbi	0x07, 4	; 7
     69a:	d5 ce       	rjmp	.-598    	; 0x446 <kilo_start+0x1e>
     69c:	ef e2       	ldi	r30, 0x2F	; 47
     69e:	f5 e7       	ldi	r31, 0x75	; 117
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <kilo_start+0x278>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <kilo_start+0x27e>
     6a6:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     6a8:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6ac:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6b0:	80 93 b4 00 	sts	0x00B4, r24
     6b4:	c8 ce       	rjmp	.-624    	; 0x446 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6b6:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     6ba:	10 92 b4 00 	sts	0x00B4, r1
     6be:	8f e2       	ldi	r24, 0x2F	; 47
     6c0:	95 e7       	ldi	r25, 0x75	; 117
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <kilo_start+0x29a>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <kilo_start+0x2a0>
     6c8:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     6ca:	80 91 81 01 	lds	r24, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6ce:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6d2:	10 92 b4 00 	sts	0x00B4, r1
     6d6:	b7 ce       	rjmp	.-658    	; 0x446 <kilo_start+0x1e>

000006d8 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <delay+0x10>
     6da:	ef ec       	ldi	r30, 0xCF	; 207
     6dc:	f7 e0       	ldi	r31, 0x07	; 7
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <delay+0x6>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <delay+0xc>
     6e4:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     6e6:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	b9 f7       	brne	.-18     	; 0x6da <delay+0x2>
     6ec:	08 95       	ret

000006ee <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6ee:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6f2:	60 93 b4 00 	sts	0x00B4, r22
     6f6:	08 95       	ret

000006f8 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6fe:	80 93 b4 00 	sts	0x00B4, r24
     702:	8f e0       	ldi	r24, 0x0F	; 15
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	ef ec       	ldi	r30, 0xCF	; 207
     708:	f7 e0       	ldi	r31, 0x07	; 7
     70a:	31 97       	sbiw	r30, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <spinup_motors+0x12>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <spinup_motors+0x18>
     710:	00 00       	nop
     712:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     714:	c1 f7       	brne	.-16     	; 0x706 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     716:	08 95       	ret

00000718 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     718:	80 91 4b 01 	lds	r24, 0x014B
     71c:	81 11       	cpse	r24, r1
     71e:	1e c0       	rjmp	.+60     	; 0x75c <get_ambientlight+0x44>
        cli();
     720:	f8 94       	cli
        adc_setup_conversion(7);
     722:	87 e0       	ldi	r24, 0x07	; 7
     724:	80 93 7c 00 	sts	0x007C, r24
     728:	83 e8       	ldi	r24, 0x83	; 131
     72a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     72e:	80 91 7a 00 	lds	r24, 0x007A
     732:	80 64       	ori	r24, 0x40	; 64
     734:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     738:	80 91 7a 00 	lds	r24, 0x007A
     73c:	86 fd       	sbrc	r24, 6
     73e:	fc cf       	rjmp	.-8      	; 0x738 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     740:	80 91 78 00 	lds	r24, 0x0078
     744:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     748:	10 92 7c 00 	sts	0x007C, r1
     74c:	23 ea       	ldi	r18, 0xA3	; 163
     74e:	20 93 7a 00 	sts	0x007A, r18
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     758:	78 94       	sei
     75a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     760:	08 95       	ret

00000762 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     762:	80 91 4b 01 	lds	r24, 0x014B
     766:	81 11       	cpse	r24, r1
     768:	1e c0       	rjmp	.+60     	; 0x7a6 <get_temperature+0x44>
        cli();
     76a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     76c:	88 ec       	ldi	r24, 0xC8	; 200
     76e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     772:	87 e8       	ldi	r24, 0x87	; 135
     774:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     778:	80 91 7a 00 	lds	r24, 0x007A
     77c:	80 64       	ori	r24, 0x40	; 64
     77e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     782:	80 91 7a 00 	lds	r24, 0x007A
     786:	86 fd       	sbrc	r24, 6
     788:	fc cf       	rjmp	.-8      	; 0x782 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     78a:	80 91 78 00 	lds	r24, 0x0078
     78e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     792:	10 92 7c 00 	sts	0x007C, r1
     796:	23 ea       	ldi	r18, 0xA3	; 163
     798:	20 93 7a 00 	sts	0x007A, r18
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     7a2:	78 94       	sei
     7a4:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     7aa:	08 95       	ret

000007ac <rand_hard>:

uint8_t rand_hard() {
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	e0 e0       	ldi	r30, 0x00	; 0
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     7ba:	03 ea       	ldi	r16, 0xA3	; 163
     7bc:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     7be:	d6 e0       	ldi	r29, 0x06	; 6
     7c0:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     7c2:	a1 e0       	ldi	r26, 0x01	; 1
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     7c6:	60 e8       	ldi	r22, 0x80	; 128
     7c8:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     7ca:	f8 94       	cli
            adc_setup_conversion(6);
     7cc:	d0 93 7c 00 	sts	0x007C, r29
     7d0:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     7d4:	90 91 7a 00 	lds	r25, 0x007A
     7d8:	90 64       	ori	r25, 0x40	; 64
     7da:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7de:	90 91 7a 00 	lds	r25, 0x007A
     7e2:	96 fd       	sbrc	r25, 6
     7e4:	fc cf       	rjmp	.-8      	; 0x7de <rand_hard+0x32>
            a = ADCW&0x1;
     7e6:	20 91 78 00 	lds	r18, 0x0078
     7ea:	30 91 79 00 	lds	r19, 0x0079
     7ee:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     7f0:	90 91 7a 00 	lds	r25, 0x007A
     7f4:	90 64       	ori	r25, 0x40	; 64
     7f6:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7fa:	90 91 7a 00 	lds	r25, 0x007A
     7fe:	96 fd       	sbrc	r25, 6
     800:	fc cf       	rjmp	.-8      	; 0x7fa <rand_hard+0x4e>
            b = ADCW&0x1;
     802:	40 91 78 00 	lds	r20, 0x0078
     806:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     80a:	10 92 7c 00 	sts	0x007C, r1
     80e:	00 93 7a 00 	sts	0x007A, r16
     812:	10 93 7b 00 	sts	0x007B, r17
            sei();
     816:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     818:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     81a:	24 13       	cpse	r18, r20
     81c:	03 c0       	rjmp	.+6      	; 0x824 <rand_hard+0x78>
     81e:	61 50       	subi	r22, 0x01	; 1
     820:	71 09       	sbc	r23, r1
     822:	99 f6       	brne	.-90     	; 0x7ca <rand_hard+0x1e>
        if (a)
     824:	22 23       	and	r18, r18
     826:	39 f0       	breq	.+14     	; 0x836 <rand_hard+0x8a>
            num |= (1<<i);
     828:	9d 01       	movw	r18, r26
     82a:	0e 2e       	mov	r0, r30
     82c:	01 c0       	rjmp	.+2      	; 0x830 <rand_hard+0x84>
     82e:	22 0f       	add	r18, r18
     830:	0a 94       	dec	r0
     832:	ea f7       	brpl	.-6      	; 0x82e <rand_hard+0x82>
     834:	82 2b       	or	r24, r18
     836:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     838:	e8 30       	cpi	r30, 0x08	; 8
     83a:	f1 05       	cpc	r31, r1
     83c:	09 f0       	breq	.+2      	; 0x840 <rand_hard+0x94>
     83e:	c3 cf       	rjmp	.-122    	; 0x7c6 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     84a:	80 91 00 01 	lds	r24, 0x0100
     84e:	98 2f       	mov	r25, r24
     850:	99 0f       	add	r25, r25
     852:	99 0f       	add	r25, r25
     854:	99 0f       	add	r25, r25
     856:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     858:	90 91 14 01 	lds	r25, 0x0114
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	29 0f       	add	r18, r25
     860:	20 93 14 01 	sts	0x0114, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     864:	28 2f       	mov	r18, r24
     866:	22 95       	swap	r18
     868:	26 95       	lsr	r18
     86a:	27 70       	andi	r18, 0x07	; 7
     86c:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     86e:	96 95       	lsr	r25
     870:	96 95       	lsr	r25
     872:	89 27       	eor	r24, r25
     874:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     878:	08 95       	ret

0000087a <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     87a:	80 93 00 01 	sts	0x0100, r24
     87e:	08 95       	ret

00000880 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     880:	80 91 4b 01 	lds	r24, 0x014B
     884:	81 11       	cpse	r24, r1
     886:	16 c0       	rjmp	.+44     	; 0x8b4 <get_voltage+0x34>
        cli();                                    // disable interrupts
     888:	f8 94       	cli
        adc_setup_conversion(6);
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	80 93 7c 00 	sts	0x007C, r24
     890:	83 e8       	ldi	r24, 0x83	; 131
     892:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     896:	80 91 7a 00 	lds	r24, 0x007A
     89a:	80 64       	ori	r24, 0x40	; 64
     89c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8a0:	80 91 7a 00 	lds	r24, 0x007A
     8a4:	86 fd       	sbrc	r24, 6
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     8a8:	80 91 78 00 	lds	r24, 0x0078
     8ac:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     8b0:	78 94       	sei
     8b2:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     8b8:	08 95       	ret

000008ba <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     8ba:	2f 92       	push	r2
     8bc:	3f 92       	push	r3
     8be:	4f 92       	push	r4
     8c0:	5f 92       	push	r5
     8c2:	6f 92       	push	r6
     8c4:	7f 92       	push	r7
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <estimate_distance+0x26>
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <estimate_distance+0x28>
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <estimate_distance+0x2a>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     8ea:	dc 01       	movw	r26, r24
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	0d 90       	ld	r0, X+
     8f0:	bc 91       	ld	r27, X
     8f2:	a0 2d       	mov	r26, r0
     8f4:	be 83       	std	Y+6, r27	; 0x06
     8f6:	ad 83       	std	Y+5, r26	; 0x05
     8f8:	a4 38       	cpi	r26, 0x84	; 132
     8fa:	e3 e0       	ldi	r30, 0x03	; 3
     8fc:	be 07       	cpc	r27, r30
     8fe:	0c f0       	brlt	.+2      	; 0x902 <__stack+0x3>
     900:	c9 c0       	rjmp	.+402    	; 0xa94 <__stack+0x195>
        if (dist->high_gain > kilo_irhigh[0]) {
     902:	80 91 25 01 	lds	r24, 0x0125
     906:	90 91 26 01 	lds	r25, 0x0126
     90a:	8a 17       	cp	r24, r26
     90c:	9b 07       	cpc	r25, r27
     90e:	08 f4       	brcc	.+2      	; 0x912 <__stack+0x13>
     910:	37 c1       	rjmp	.+622    	; 0xb80 <__stack+0x281>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     912:	00 91 27 01 	lds	r16, 0x0127
     916:	10 91 28 01 	lds	r17, 0x0128
     91a:	0a 17       	cp	r16, r26
     91c:	1b 07       	cpc	r17, r27
     91e:	08 f4       	brcc	.+2      	; 0x922 <__stack+0x23>
     920:	2f c2       	rjmp	.+1118   	; 0xd80 <__stack+0x481>
     922:	00 91 29 01 	lds	r16, 0x0129
     926:	10 91 2a 01 	lds	r17, 0x012A
     92a:	0a 17       	cp	r16, r26
     92c:	1b 07       	cpc	r17, r27
     92e:	08 f4       	brcc	.+2      	; 0x932 <__stack+0x33>
     930:	2f c2       	rjmp	.+1118   	; 0xd90 <__stack+0x491>
     932:	00 91 2b 01 	lds	r16, 0x012B
     936:	10 91 2c 01 	lds	r17, 0x012C
     93a:	0a 17       	cp	r16, r26
     93c:	1b 07       	cpc	r17, r27
     93e:	08 f4       	brcc	.+2      	; 0x942 <__stack+0x43>
     940:	2f c2       	rjmp	.+1118   	; 0xda0 <__stack+0x4a1>
     942:	00 91 2d 01 	lds	r16, 0x012D
     946:	10 91 2e 01 	lds	r17, 0x012E
     94a:	0a 17       	cp	r16, r26
     94c:	1b 07       	cpc	r17, r27
     94e:	08 f4       	brcc	.+2      	; 0x952 <__stack+0x53>
     950:	2f c2       	rjmp	.+1118   	; 0xdb0 <__stack+0x4b1>
     952:	00 91 2f 01 	lds	r16, 0x012F
     956:	10 91 30 01 	lds	r17, 0x0130
     95a:	0a 17       	cp	r16, r26
     95c:	1b 07       	cpc	r17, r27
     95e:	08 f4       	brcc	.+2      	; 0x962 <__stack+0x63>
     960:	ef c1       	rjmp	.+990    	; 0xd40 <__stack+0x441>
     962:	00 91 31 01 	lds	r16, 0x0131
     966:	10 91 32 01 	lds	r17, 0x0132
     96a:	0a 17       	cp	r16, r26
     96c:	1b 07       	cpc	r17, r27
     96e:	08 f4       	brcc	.+2      	; 0x972 <__stack+0x73>
     970:	27 c2       	rjmp	.+1102   	; 0xdc0 <__stack+0x4c1>
     972:	00 91 33 01 	lds	r16, 0x0133
     976:	10 91 34 01 	lds	r17, 0x0134
     97a:	0a 17       	cp	r16, r26
     97c:	1b 07       	cpc	r17, r27
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x83>
     980:	27 c2       	rjmp	.+1102   	; 0xdd0 <__stack+0x4d1>
     982:	00 91 35 01 	lds	r16, 0x0135
     986:	10 91 36 01 	lds	r17, 0x0136
     98a:	0a 17       	cp	r16, r26
     98c:	1b 07       	cpc	r17, r27
     98e:	08 f4       	brcc	.+2      	; 0x992 <__stack+0x93>
     990:	27 c2       	rjmp	.+1102   	; 0xde0 <__stack+0x4e1>
     992:	00 91 37 01 	lds	r16, 0x0137
     996:	10 91 38 01 	lds	r17, 0x0138
     99a:	0a 17       	cp	r16, r26
     99c:	1b 07       	cpc	r17, r27
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <__stack+0xa3>
     9a0:	27 c2       	rjmp	.+1102   	; 0xdf0 <__stack+0x4f1>
     9a2:	00 91 39 01 	lds	r16, 0x0139
     9a6:	10 91 3a 01 	lds	r17, 0x013A
     9aa:	0a 17       	cp	r16, r26
     9ac:	1b 07       	cpc	r17, r27
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	27 c2       	rjmp	.+1102   	; 0xe00 <__stack+0x501>
     9b2:	00 91 3b 01 	lds	r16, 0x013B
     9b6:	10 91 3c 01 	lds	r17, 0x013C
     9ba:	0a 17       	cp	r16, r26
     9bc:	1b 07       	cpc	r17, r27
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	23 c2       	rjmp	.+1094   	; 0xe08 <__stack+0x509>
     9c2:	00 91 3d 01 	lds	r16, 0x013D
     9c6:	10 91 3e 01 	lds	r17, 0x013E
     9ca:	0a 17       	cp	r16, r26
     9cc:	1b 07       	cpc	r17, r27
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	23 c2       	rjmp	.+1094   	; 0xe18 <__stack+0x519>
     9d2:	00 91 3f 01 	lds	r16, 0x013F
     9d6:	10 91 40 01 	lds	r17, 0x0140
     9da:	0a 17       	cp	r16, r26
     9dc:	1b 07       	cpc	r17, r27
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	23 c2       	rjmp	.+1094   	; 0xe28 <__stack+0x529>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 ed       	ldi	r26, 0xD0	; 208
     9e8:	b0 e4       	ldi	r27, 0x40	; 64
     9ea:	89 83       	std	Y+1, r24	; 0x01
     9ec:	9a 83       	std	Y+2, r25	; 0x02
     9ee:	ab 83       	std	Y+3, r26	; 0x03
     9f0:	bc 83       	std	Y+4, r27	; 0x04
     9f2:	4c e0       	ldi	r20, 0x0C	; 12
     9f4:	e4 2e       	mov	r14, r20
     9f6:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9f8:	f7 01       	movw	r30, r14
     9fa:	ee 0f       	add	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	eb 5d       	subi	r30, 0xDB	; 219
     a00:	fe 4f       	sbci	r31, 0xFE	; 254
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	b8 01       	movw	r22, r16
     a08:	68 1b       	sub	r22, r24
     a0a:	79 0b       	sbc	r23, r25
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
     a1c:	6b 01       	movw	r12, r22
     a1e:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a20:	ad 81       	ldd	r26, Y+5	; 0x05
     a22:	be 81       	ldd	r27, Y+6	; 0x06
     a24:	bd 01       	movw	r22, r26
     a26:	bb 0f       	add	r27, r27
     a28:	88 0b       	sbc	r24, r24
     a2a:	99 0b       	sbc	r25, r25
     a2c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__floatsisf>
     a30:	4b 01       	movw	r8, r22
     a32:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     a34:	b8 01       	movw	r22, r16
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     a3e:	2b 01       	movw	r4, r22
     a40:	3c 01       	movw	r6, r24
     a42:	29 81       	ldd	r18, Y+1	; 0x01
     a44:	3a 81       	ldd	r19, Y+2	; 0x02
     a46:	4b 81       	ldd	r20, Y+3	; 0x03
     a48:	5c 81       	ldd	r21, Y+4	; 0x04
     a4a:	c7 01       	movw	r24, r14
     a4c:	b6 01       	movw	r22, r12
     a4e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c3 01       	movw	r24, r6
     a58:	b2 01       	movw	r22, r4
     a5a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__subsf3>
     a5e:	9b 01       	movw	r18, r22
     a60:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a62:	c5 01       	movw	r24, r10
     a64:	b4 01       	movw	r22, r8
     a66:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__subsf3>
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	40 e2       	ldi	r20, 0x20	; 32
     a70:	51 e4       	ldi	r21, 0x41	; 65
     a72:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
            b=((int)((int)b/(int)slope));
     a76:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fixsfsi>
     a7a:	8b 01       	movw	r16, r22
     a7c:	c7 01       	movw	r24, r14
     a7e:	b6 01       	movw	r22, r12
     a80:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fixsfsi>
     a84:	ab 01       	movw	r20, r22
     a86:	bc 01       	movw	r22, r24
     a88:	c8 01       	movw	r24, r16
     a8a:	ba 01       	movw	r22, r20
     a8c:	0e 94 9e 0a 	call	0x153c	; 0x153c <__divmodhi4>
            dist_high=b;
     a90:	16 2f       	mov	r17, r22
     a92:	77 c0       	rjmp	.+238    	; 0xb82 <__stack+0x283>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a94:	dc 01       	movw	r26, r24
     a96:	cd 90       	ld	r12, X+
     a98:	dc 90       	ld	r13, X
     a9a:	80 91 4c 01 	lds	r24, 0x014C
     a9e:	90 91 4d 01 	lds	r25, 0x014D
     aa2:	8c 15       	cp	r24, r12
     aa4:	9d 05       	cpc	r25, r13
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	8c c0       	rjmp	.+280    	; 0xbc2 <__stack+0x2c3>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     aaa:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     aac:	e0 90 4e 01 	lds	r14, 0x014E
     ab0:	f0 90 4f 01 	lds	r15, 0x014F
     ab4:	ec 14       	cp	r14, r12
     ab6:	fd 04       	cpc	r15, r13
     ab8:	08 f4       	brcc	.+2      	; 0xabc <__stack+0x1bd>
     aba:	5e c1       	rjmp	.+700    	; 0xd78 <__stack+0x479>
     abc:	e0 90 50 01 	lds	r14, 0x0150
     ac0:	f0 90 51 01 	lds	r15, 0x0151
     ac4:	ec 14       	cp	r14, r12
     ac6:	fd 04       	cpc	r15, r13
     ac8:	08 f4       	brcc	.+2      	; 0xacc <__stack+0x1cd>
     aca:	5e c1       	rjmp	.+700    	; 0xd88 <__stack+0x489>
     acc:	e0 90 52 01 	lds	r14, 0x0152
     ad0:	f0 90 53 01 	lds	r15, 0x0153
     ad4:	ec 14       	cp	r14, r12
     ad6:	fd 04       	cpc	r15, r13
     ad8:	08 f4       	brcc	.+2      	; 0xadc <__stack+0x1dd>
     ada:	5e c1       	rjmp	.+700    	; 0xd98 <__stack+0x499>
     adc:	e0 90 54 01 	lds	r14, 0x0154
     ae0:	f0 90 55 01 	lds	r15, 0x0155
     ae4:	ec 14       	cp	r14, r12
     ae6:	fd 04       	cpc	r15, r13
     ae8:	08 f4       	brcc	.+2      	; 0xaec <__stack+0x1ed>
     aea:	5e c1       	rjmp	.+700    	; 0xda8 <__stack+0x4a9>
     aec:	e0 90 56 01 	lds	r14, 0x0156
     af0:	f0 90 57 01 	lds	r15, 0x0157
     af4:	ec 14       	cp	r14, r12
     af6:	fd 04       	cpc	r15, r13
     af8:	08 f4       	brcc	.+2      	; 0xafc <__stack+0x1fd>
     afa:	c3 c0       	rjmp	.+390    	; 0xc82 <__stack+0x383>
     afc:	e0 90 58 01 	lds	r14, 0x0158
     b00:	f0 90 59 01 	lds	r15, 0x0159
     b04:	ec 14       	cp	r14, r12
     b06:	fd 04       	cpc	r15, r13
     b08:	08 f4       	brcc	.+2      	; 0xb0c <__stack+0x20d>
     b0a:	56 c1       	rjmp	.+684    	; 0xdb8 <__stack+0x4b9>
     b0c:	e0 90 5a 01 	lds	r14, 0x015A
     b10:	f0 90 5b 01 	lds	r15, 0x015B
     b14:	ec 14       	cp	r14, r12
     b16:	fd 04       	cpc	r15, r13
     b18:	08 f4       	brcc	.+2      	; 0xb1c <__stack+0x21d>
     b1a:	56 c1       	rjmp	.+684    	; 0xdc8 <__stack+0x4c9>
     b1c:	e0 90 5c 01 	lds	r14, 0x015C
     b20:	f0 90 5d 01 	lds	r15, 0x015D
     b24:	ec 14       	cp	r14, r12
     b26:	fd 04       	cpc	r15, r13
     b28:	08 f4       	brcc	.+2      	; 0xb2c <__stack+0x22d>
     b2a:	56 c1       	rjmp	.+684    	; 0xdd8 <__stack+0x4d9>
     b2c:	e0 90 5e 01 	lds	r14, 0x015E
     b30:	f0 90 5f 01 	lds	r15, 0x015F
     b34:	ec 14       	cp	r14, r12
     b36:	fd 04       	cpc	r15, r13
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__stack+0x23d>
     b3a:	56 c1       	rjmp	.+684    	; 0xde8 <__stack+0x4e9>
     b3c:	e0 90 60 01 	lds	r14, 0x0160
     b40:	f0 90 61 01 	lds	r15, 0x0161
     b44:	ec 14       	cp	r14, r12
     b46:	fd 04       	cpc	r15, r13
     b48:	08 f4       	brcc	.+2      	; 0xb4c <__stack+0x24d>
     b4a:	56 c1       	rjmp	.+684    	; 0xdf8 <__stack+0x4f9>
     b4c:	e0 90 62 01 	lds	r14, 0x0162
     b50:	f0 90 63 01 	lds	r15, 0x0163
     b54:	ec 14       	cp	r14, r12
     b56:	fd 04       	cpc	r15, r13
     b58:	08 f4       	brcc	.+2      	; 0xb5c <__stack+0x25d>
     b5a:	5a c1       	rjmp	.+692    	; 0xe10 <__stack+0x511>
     b5c:	e0 90 64 01 	lds	r14, 0x0164
     b60:	f0 90 65 01 	lds	r15, 0x0165
     b64:	ec 14       	cp	r14, r12
     b66:	fd 04       	cpc	r15, r13
     b68:	08 f4       	brcc	.+2      	; 0xb6c <__stack+0x26d>
     b6a:	5a c1       	rjmp	.+692    	; 0xe20 <__stack+0x521>
     b6c:	e0 90 66 01 	lds	r14, 0x0166
     b70:	f0 90 67 01 	lds	r15, 0x0167
     b74:	ec 14       	cp	r14, r12
     b76:	fd 04       	cpc	r15, r13
     b78:	08 f4       	brcc	.+2      	; 0xb7c <__stack+0x27d>
     b7a:	5a c1       	rjmp	.+692    	; 0xe30 <__stack+0x531>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b7c:	0a e5       	ldi	r16, 0x5A	; 90
     b7e:	31 c0       	rjmp	.+98     	; 0xbe2 <__stack+0x2e3>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b80:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b82:	ed 81       	ldd	r30, Y+5	; 0x05
     b84:	fe 81       	ldd	r31, Y+6	; 0x06
     b86:	ed 3b       	cpi	r30, 0xBD	; 189
     b88:	f2 40       	sbci	r31, 0x02	; 2
     b8a:	fc f4       	brge	.+62     	; 0xbca <__stack+0x2cb>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b8c:	81 e2       	ldi	r24, 0x21	; 33
     b8e:	81 0f       	add	r24, r17
    }
}
     b90:	26 96       	adiw	r28, 0x06	; 6
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	9f 90       	pop	r9
     bb2:	8f 90       	pop	r8
     bb4:	7f 90       	pop	r7
     bb6:	6f 90       	pop	r6
     bb8:	5f 90       	pop	r5
     bba:	4f 90       	pop	r4
     bbc:	3f 90       	pop	r3
     bbe:	2f 90       	pop	r2
     bc0:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     bc2:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     bc4:	81 e2       	ldi	r24, 0x21	; 33
     bc6:	80 0f       	add	r24, r16
     bc8:	e3 cf       	rjmp	.-58     	; 0xb90 <__stack+0x291>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bca:	d1 01       	movw	r26, r2
     bcc:	cd 90       	ld	r12, X+
     bce:	dc 90       	ld	r13, X
     bd0:	80 91 4c 01 	lds	r24, 0x014C
     bd4:	90 91 4d 01 	lds	r25, 0x014D
     bd8:	8c 15       	cp	r24, r12
     bda:	9d 05       	cpc	r25, r13
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <__stack+0x2e1>
     bde:	66 cf       	rjmp	.-308    	; 0xaac <__stack+0x1ad>
            dist_low=0;
     be0:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     be2:	1f 3f       	cpi	r17, 0xFF	; 255
     be4:	79 f3       	breq	.-34     	; 0xbc4 <__stack+0x2c5>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     be6:	ed 81       	ldd	r30, Y+5	; 0x05
     be8:	fe 81       	ldd	r31, Y+6	; 0x06
     bea:	bf 01       	movw	r22, r30
     bec:	ff 0f       	add	r31, r31
     bee:	88 0b       	sbc	r24, r24
     bf0:	99 0b       	sbc	r25, r25
     bf2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__floatsisf>
     bf6:	6b 01       	movw	r12, r22
     bf8:	7c 01       	movw	r14, r24
     bfa:	61 2f       	mov	r22, r17
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     c06:	4b 01       	movw	r8, r22
     c08:	5c 01       	movw	r10, r24
     c0a:	a7 01       	movw	r20, r14
     c0c:	96 01       	movw	r18, r12
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	81 e6       	ldi	r24, 0x61	; 97
     c14:	94 e4       	ldi	r25, 0x44	; 68
     c16:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__subsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	c5 01       	movw	r24, r10
     c20:	b4 01       	movw	r22, r8
     c22:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
     c26:	4b 01       	movw	r8, r22
     c28:	5c 01       	movw	r10, r24
     c2a:	60 2f       	mov	r22, r16
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     c36:	2b 01       	movw	r4, r22
     c38:	3c 01       	movw	r6, r24
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4f e2       	ldi	r20, 0x2F	; 47
     c40:	54 e4       	ldi	r21, 0x44	; 68
     c42:	c7 01       	movw	r24, r14
     c44:	b6 01       	movw	r22, r12
     c46:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__subsf3>
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	c3 01       	movw	r24, r6
     c50:	b2 01       	movw	r22, r4
     c52:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	c5 01       	movw	r24, r10
     c5c:	b4 01       	movw	r22, r8
     c5e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	48 e4       	ldi	r20, 0x48	; 72
     c68:	53 e4       	ldi	r21, 0x43	; 67
     c6a:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	44 e0       	ldi	r20, 0x04	; 4
     c74:	52 e4       	ldi	r21, 0x42	; 66
     c76:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
     c7a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     c7e:	86 2f       	mov	r24, r22
     c80:	87 cf       	rjmp	.-242    	; 0xb90 <__stack+0x291>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c82:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c84:	85 e0       	ldi	r24, 0x05	; 5
     c86:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	fc 01       	movw	r30, r24
     c8e:	e6 5b       	subi	r30, 0xB6	; 182
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	b7 01       	movw	r22, r14
     c98:	68 1b       	sub	r22, r24
     c9a:	79 0b       	sbc	r23, r25
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
     cac:	4b 01       	movw	r8, r22
     cae:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cb0:	b6 01       	movw	r22, r12
     cb2:	dd 0c       	add	r13, r13
     cb4:	88 0b       	sbc	r24, r24
     cb6:	99 0b       	sbc	r25, r25
     cb8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__floatsisf>
     cbc:	2b 01       	movw	r4, r22
     cbe:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     cc0:	b7 01       	movw	r22, r14
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     cca:	6b 01       	movw	r12, r22
     ccc:	7c 01       	movw	r14, r24
     cce:	60 2f       	mov	r22, r16
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	a9 01       	movw	r20, r18
     cec:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
     cf0:	a5 01       	movw	r20, r10
     cf2:	94 01       	movw	r18, r8
     cf4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	c7 01       	movw	r24, r14
     cfe:	b6 01       	movw	r22, r12
     d00:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__subsf3>
     d04:	9b 01       	movw	r18, r22
     d06:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d08:	c3 01       	movw	r24, r6
     d0a:	b2 01       	movw	r22, r4
     d0c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__subsf3>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e2       	ldi	r20, 0x20	; 32
     d16:	51 e4       	ldi	r21, 0x41	; 65
     d18:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
                b=((int)((int)b/(int)slope));
     d1c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fixsfsi>
     d20:	7b 01       	movw	r14, r22
     d22:	c5 01       	movw	r24, r10
     d24:	b4 01       	movw	r22, r8
     d26:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fixsfsi>
     d2a:	ab 01       	movw	r20, r22
     d2c:	bc 01       	movw	r22, r24
     d2e:	c7 01       	movw	r24, r14
     d30:	ba 01       	movw	r22, r20
     d32:	0e 94 9e 0a 	call	0x153c	; 0x153c <__divmodhi4>
                dist_low=b;
     d36:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     d38:	6f 3f       	cpi	r22, 0xFF	; 255
     d3a:	09 f0       	breq	.+2      	; 0xd3e <__stack+0x43f>
     d3c:	52 cf       	rjmp	.-348    	; 0xbe2 <__stack+0x2e3>
     d3e:	26 cf       	rjmp	.-436    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d40:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     d42:	85 e0       	ldi	r24, 0x05	; 5
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	7c 01       	movw	r14, r24
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	ef 1a       	sub	r14, r31
     d4c:	f1 08       	sbc	r15, r1
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3>
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	a9 01       	movw	r20, r18
     d6a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
     d6e:	69 83       	std	Y+1, r22	; 0x01
     d70:	7a 83       	std	Y+2, r23	; 0x02
     d72:	8b 83       	std	Y+3, r24	; 0x03
     d74:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d76:	40 ce       	rjmp	.-896    	; 0x9f8 <__stack+0xf9>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d78:	01 e0       	ldi	r16, 0x01	; 1
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	84 cf       	rjmp	.-248    	; 0xc88 <__stack+0x389>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	df cf       	rjmp	.-66     	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d88:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	7c cf       	rjmp	.-264    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d90:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	d7 cf       	rjmp	.-82     	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d98:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	74 cf       	rjmp	.-280    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da0:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	cf cf       	rjmp	.-98     	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     da8:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	6c cf       	rjmp	.-296    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db0:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	c7 cf       	rjmp	.-114    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     db8:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     dba:	86 e0       	ldi	r24, 0x06	; 6
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	64 cf       	rjmp	.-312    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dc0:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     dc2:	86 e0       	ldi	r24, 0x06	; 6
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	bf cf       	rjmp	.-130    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dc8:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     dca:	87 e0       	ldi	r24, 0x07	; 7
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	5c cf       	rjmp	.-328    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dd0:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     dd2:	87 e0       	ldi	r24, 0x07	; 7
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	b7 cf       	rjmp	.-146    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd8:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     dda:	88 e0       	ldi	r24, 0x08	; 8
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	54 cf       	rjmp	.-344    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     de0:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	af cf       	rjmp	.-162    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     de8:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     dea:	89 e0       	ldi	r24, 0x09	; 9
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	4c cf       	rjmp	.-360    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     df0:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a7 cf       	rjmp	.-178    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     df8:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     dfa:	8a e0       	ldi	r24, 0x0A	; 10
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	44 cf       	rjmp	.-376    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e00:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     e02:	8a e0       	ldi	r24, 0x0A	; 10
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9f cf       	rjmp	.-194    	; 0xd46 <__stack+0x447>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e08:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     e0a:	8b e0       	ldi	r24, 0x0B	; 11
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9b cf       	rjmp	.-202    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e10:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     e12:	8b e0       	ldi	r24, 0x0B	; 11
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	38 cf       	rjmp	.-400    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e18:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     e1a:	8c e0       	ldi	r24, 0x0C	; 12
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	93 cf       	rjmp	.-218    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e20:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     e22:	8c e0       	ldi	r24, 0x0C	; 12
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	30 cf       	rjmp	.-416    	; 0xc88 <__stack+0x389>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e28:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     e2a:	8d e0       	ldi	r24, 0x0D	; 13
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	8b cf       	rjmp	.-234    	; 0xd46 <__stack+0x447>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e30:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     e32:	8d e0       	ldi	r24, 0x0D	; 13
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	28 cf       	rjmp	.-432    	; 0xc88 <__stack+0x389>

00000e38 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
    tx_clock += tx_increment;
     e5a:	20 91 6b 01 	lds	r18, 0x016B
     e5e:	30 91 6c 01 	lds	r19, 0x016C
     e62:	80 91 69 01 	lds	r24, 0x0169
     e66:	90 91 6a 01 	lds	r25, 0x016A
     e6a:	82 0f       	add	r24, r18
     e6c:	93 1f       	adc	r25, r19
     e6e:	90 93 6c 01 	sts	0x016C, r25
     e72:	80 93 6b 01 	sts	0x016B, r24
    tx_increment = 0xFF;
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	90 93 6a 01 	sts	0x016A, r25
     e7e:	80 93 69 01 	sts	0x0169, r24
    OCR0A = tx_increment;
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e86:	80 91 47 01 	lds	r24, 0x0147
     e8a:	90 91 48 01 	lds	r25, 0x0148
     e8e:	a0 91 49 01 	lds	r26, 0x0149
     e92:	b0 91 4a 01 	lds	r27, 0x014A
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	a1 1d       	adc	r26, r1
     e9a:	b1 1d       	adc	r27, r1
     e9c:	80 93 47 01 	sts	0x0147, r24
     ea0:	90 93 48 01 	sts	0x0148, r25
     ea4:	a0 93 49 01 	sts	0x0149, r26
     ea8:	b0 93 4a 01 	sts	0x014A, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     eac:	80 91 4b 01 	lds	r24, 0x014B
     eb0:	81 11       	cpse	r24, r1
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <__vector_14+0x9a>
     eb4:	80 91 7a 01 	lds	r24, 0x017A
     eb8:	90 91 7b 01 	lds	r25, 0x017B
     ebc:	20 91 6b 01 	lds	r18, 0x016B
     ec0:	30 91 6c 01 	lds	r19, 0x016C
     ec4:	82 17       	cp	r24, r18
     ec6:	93 07       	cpc	r25, r19
     ec8:	20 f4       	brcc	.+8      	; 0xed2 <__vector_14+0x9a>
     eca:	80 91 17 01 	lds	r24, 0x0117
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	89 f0       	breq	.+34     	; 0xef4 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ef4:	e0 91 03 01 	lds	r30, 0x0103
     ef8:	f0 91 04 01 	lds	r31, 0x0104
     efc:	09 95       	icall
        if (msg) {
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	41 f3       	breq	.-48     	; 0xed2 <__vector_14+0x9a>
            if (message_send(msg)) {
     f02:	0e 94 04 0a 	call	0x1408	; 0x1408 <message_send>
     f06:	81 11       	cpse	r24, r1
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     f0a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <rand>
     f0e:	99 27       	eor	r25, r25
     f10:	90 93 6a 01 	sts	0x016A, r25
     f14:	80 93 69 01 	sts	0x0169, r24
                OCR0A = tx_increment;
     f18:	87 bd       	out	0x27, r24	; 39
     f1a:	db cf       	rjmp	.-74     	; 0xed2 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     f1c:	e0 91 01 01 	lds	r30, 0x0101
     f20:	f0 91 02 01 	lds	r31, 0x0102
     f24:	09 95       	icall
                tx_clock = 0;
     f26:	10 92 6c 01 	sts	0x016C, r1
     f2a:	10 92 6b 01 	sts	0x016B, r1
     f2e:	d1 cf       	rjmp	.-94     	; 0xed2 <__vector_14+0x9a>

00000f30 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     f30:	80 ff       	sbrs	r24, 0
     f32:	11 c0       	rjmp	.+34     	; 0xf56 <set_color+0x26>
        DDRD |= (1<<5);
     f34:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     f36:	81 ff       	sbrs	r24, 1
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <set_color+0x2c>
        DDRD |= (1<<4);
     f3a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     f3c:	82 ff       	sbrs	r24, 2
     f3e:	11 c0       	rjmp	.+34     	; 0xf62 <set_color+0x32>
        DDRC |= (1<<3);
     f40:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     f42:	83 ff       	sbrs	r24, 3
     f44:	11 c0       	rjmp	.+34     	; 0xf68 <set_color+0x38>
        DDRC |= (1<<2);
     f46:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     f48:	84 ff       	sbrs	r24, 4
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <set_color+0x3e>
        DDRC |= (1<<5);
     f4c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     f4e:	85 fd       	sbrc	r24, 5
     f50:	11 c0       	rjmp	.+34     	; 0xf74 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f52:	3c 98       	cbi	0x07, 4	; 7
     f54:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f56:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f58:	81 fd       	sbrc	r24, 1
     f5a:	ef cf       	rjmp	.-34     	; 0xf3a <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f5c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f5e:	82 fd       	sbrc	r24, 2
     f60:	ef cf       	rjmp	.-34     	; 0xf40 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f62:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f64:	83 fd       	sbrc	r24, 3
     f66:	ef cf       	rjmp	.-34     	; 0xf46 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f68:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f6a:	84 fd       	sbrc	r24, 4
     f6c:	ef cf       	rjmp	.-34     	; 0xf4c <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f6e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f70:	85 ff       	sbrs	r24, 5
     f72:	ef cf       	rjmp	.-34     	; 0xf52 <set_color+0x22>
        DDRC |= (1<<4);
     f74:	3c 9a       	sbi	0x07, 4	; 7
     f76:	08 95       	ret

00000f78 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f78:	1f 92       	push	r1
     f7a:	0f 92       	push	r0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	0f 92       	push	r0
     f80:	11 24       	eor	r1, r1
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
    rx_timer_off();
     f86:	10 92 81 00 	sts	0x0081, r1
     f8a:	10 92 85 00 	sts	0x0085, r1
     f8e:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 24 01 	sts	0x0124, r24
    rx_leadingbyte = 1;
     f98:	80 93 68 01 	sts	0x0168, r24
    rx_busy = 0;
     f9c:	10 92 4b 01 	sts	0x014B, r1
    adc_trigger_high_gain();
     fa0:	10 92 7c 00 	sts	0x007C, r1
     fa4:	93 ea       	ldi	r25, 0xA3	; 163
     fa6:	90 93 7a 00 	sts	0x007A, r25
     faa:	80 93 7b 00 	sts	0x007B, r24
}
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     fe2:	20 91 84 00 	lds	r18, 0x0084
     fe6:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	40 93 4b 01 	sts	0x014B, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ff0:	80 91 24 01 	lds	r24, 0x0124
     ff4:	88 23       	and	r24, r24
     ff6:	a9 f1       	breq	.+106    	; 0x1062 <__vector_23+0xa6>
        rx_timer_on();
     ff8:	10 92 85 00 	sts	0x0085, r1
     ffc:	10 92 84 00 	sts	0x0084, r1
    1000:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1004:	10 92 7c 01 	sts	0x017C, r1
        rx_leadingbit = 0;
    1008:	10 92 24 01 	sts	0x0124, r1
        if (rx_leadingbyte) {
    100c:	80 91 68 01 	lds	r24, 0x0168
    1010:	88 23       	and	r24, r24
    1012:	a1 f0       	breq	.+40     	; 0x103c <__vector_23+0x80>
            adc_finish_conversion();
    1014:	80 91 7a 00 	lds	r24, 0x007A
    1018:	86 fd       	sbrc	r24, 6
    101a:	fc cf       	rjmp	.-8      	; 0x1014 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    101c:	80 91 78 00 	lds	r24, 0x0078
    1020:	90 91 79 00 	lds	r25, 0x0079
    1024:	90 93 46 01 	sts	0x0146, r25
    1028:	80 93 45 01 	sts	0x0145, r24
            adc_trigger_low_gain();
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 7c 00 	sts	0x007C, r24
    1032:	93 ea       	ldi	r25, 0xA3	; 163
    1034:	90 93 7a 00 	sts	0x007A, r25
    1038:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1062:	c9 01       	movw	r24, r18
    1064:	87 58       	subi	r24, 0x87	; 135
    1066:	91 09       	sbc	r25, r1
    1068:	84 37       	cpi	r24, 0x74	; 116
    106a:	99 40       	sbci	r25, 0x09	; 9
    106c:	08 f0       	brcs	.+2      	; 0x1070 <__vector_23+0xb4>
    106e:	52 c0       	rjmp	.+164    	; 0x1114 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1070:	26 58       	subi	r18, 0x86	; 134
    1072:	31 09       	sbc	r19, r1
    1074:	a4 ef       	ldi	r26, 0xF4	; 244
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__umulhisi3>
    107c:	aa 27       	eor	r26, r26
    107e:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	91 05       	cpc	r25, r1
    1084:	a1 05       	cpc	r26, r1
    1086:	b1 05       	cpc	r27, r1
    1088:	08 f4       	brcc	.+2      	; 0x108c <__vector_23+0xd0>
    108a:	7b c0       	rjmp	.+246    	; 0x1182 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    108c:	40 93 24 01 	sts	0x0124, r20
                if (rx_leadingbyte) {
    1090:	80 91 68 01 	lds	r24, 0x0168
    1094:	81 11       	cpse	r24, r1
    1096:	52 c0       	rjmp	.+164    	; 0x113c <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1098:	80 91 42 01 	lds	r24, 0x0142
    109c:	e8 2f       	mov	r30, r24
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	e2 59       	subi	r30, 0x92	; 146
    10a2:	fe 4f       	sbci	r31, 0xFE	; 254
    10a4:	90 91 7c 01 	lds	r25, 0x017C
    10a8:	90 83       	st	Z, r25
                    rx_byteindex++;
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 42 01 	sts	0x0142, r24
                    if (rx_byteindex == sizeof(message_t)) {
    10b0:	8c 30       	cpi	r24, 0x0C	; 12
    10b2:	21 f6       	brne	.-120    	; 0x103c <__vector_23+0x80>
                        rx_timer_off();
    10b4:	10 92 81 00 	sts	0x0081, r1
    10b8:	10 92 85 00 	sts	0x0085, r1
    10bc:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10c0:	40 93 68 01 	sts	0x0168, r20
                        rx_busy = 0;
    10c4:	10 92 4b 01 	sts	0x014B, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    10c8:	c0 91 78 01 	lds	r28, 0x0178
    10cc:	d0 91 79 01 	lds	r29, 0x0179
    10d0:	8e e6       	ldi	r24, 0x6E	; 110
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <message_crc>
    10d8:	c8 17       	cp	r28, r24
    10da:	d9 07       	cpc	r29, r25
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <__vector_23+0x124>
    10de:	ae cf       	rjmp	.-164    	; 0x103c <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    10e0:	80 91 77 01 	lds	r24, 0x0177
    10e4:	87 ff       	sbrs	r24, 7
    10e6:	61 c0       	rjmp	.+194    	; 0x11aa <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    10e8:	98 e7       	ldi	r25, 0x78	; 120
    10ea:	98 0f       	add	r25, r24
    10ec:	93 30       	cpi	r25, 0x03	; 3
    10ee:	30 f0       	brcs	.+12     	; 0x10fc <__vector_23+0x140>
        motors_off();
    10f0:	53 98       	cbi	0x0a, 3	; 10
    10f2:	23 98       	cbi	0x04, 3	; 4
    10f4:	10 92 b4 00 	sts	0x00B4, r1
    10f8:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	fc 01       	movw	r30, r24
    1100:	e0 58       	subi	r30, 0x80	; 128
    1102:	f1 09       	sbc	r31, r1
    1104:	eb 30       	cpi	r30, 0x0B	; 11
    1106:	f1 05       	cpc	r31, r1
    1108:	08 f0       	brcs	.+2      	; 0x110c <__vector_23+0x150>
    110a:	98 cf       	rjmp	.-208    	; 0x103c <__vector_23+0x80>
    110c:	e5 5c       	subi	r30, 0xC5	; 197
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1114:	10 92 81 00 	sts	0x0081, r1
    1118:	10 92 85 00 	sts	0x0085, r1
    111c:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1120:	40 93 24 01 	sts	0x0124, r20
            rx_leadingbyte = 1;
    1124:	40 93 68 01 	sts	0x0168, r20
            rx_busy = 0;
    1128:	10 92 4b 01 	sts	0x014B, r1
            adc_trigger_high_gain();
    112c:	10 92 7c 00 	sts	0x007C, r1
    1130:	83 ea       	ldi	r24, 0xA3	; 163
    1132:	80 93 7a 00 	sts	0x007A, r24
    1136:	40 93 7b 00 	sts	0x007B, r20
    113a:	80 cf       	rjmp	.-256    	; 0x103c <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    113c:	80 91 7a 00 	lds	r24, 0x007A
    1140:	86 fd       	sbrc	r24, 6
    1142:	fc cf       	rjmp	.-8      	; 0x113c <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1144:	80 91 78 00 	lds	r24, 0x0078
    1148:	90 91 79 00 	lds	r25, 0x0079
    114c:	90 93 44 01 	sts	0x0144, r25
    1150:	80 93 43 01 	sts	0x0143, r24
                    adc_trigger_high_gain();
    1154:	10 92 7c 00 	sts	0x007C, r1
    1158:	83 ea       	ldi	r24, 0xA3	; 163
    115a:	80 93 7a 00 	sts	0x007A, r24
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1164:	90 91 7c 01 	lds	r25, 0x017C
    1168:	99 23       	and	r25, r25
    116a:	d1 f0       	breq	.+52     	; 0x11a0 <__vector_23+0x1e4>
                        rx_timer_off();
    116c:	10 92 81 00 	sts	0x0081, r1
    1170:	10 92 85 00 	sts	0x0085, r1
    1174:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1178:	80 93 68 01 	sts	0x0168, r24
                        rx_busy = 0;
    117c:	10 92 4b 01 	sts	0x014B, r1
    1180:	5d cf       	rjmp	.-326    	; 0x103c <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1182:	21 e0       	ldi	r18, 0x01	; 1
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	f9 01       	movw	r30, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <__vector_23+0x1d2>
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <__vector_23+0x1ce>
    1192:	cf 01       	movw	r24, r30
    1194:	90 91 7c 01 	lds	r25, 0x017C
    1198:	89 2b       	or	r24, r25
    119a:	80 93 7c 01 	sts	0x017C, r24
    119e:	4e cf       	rjmp	.-356    	; 0x103c <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    11a0:	10 92 68 01 	sts	0x0168, r1
                        rx_byteindex = 0;
    11a4:	10 92 42 01 	sts	0x0142, r1
    11a8:	49 cf       	rjmp	.-366    	; 0x103c <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    11aa:	e0 91 05 01 	lds	r30, 0x0105
    11ae:	f0 91 06 01 	lds	r31, 0x0106
    11b2:	63 e4       	ldi	r22, 0x43	; 67
    11b4:	71 e0       	ldi	r23, 0x01	; 1
    11b6:	8e e6       	ldi	r24, 0x6E	; 110
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	09 95       	icall
    11bc:	3f cf       	rjmp	.-386    	; 0x103c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    11be:	80 91 6e 01 	lds	r24, 0x016E
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <__vector_23+0x20c>
    11c6:	dd c0       	rjmp	.+442    	; 0x1382 <__vector_23+0x3c6>
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <__vector_23+0x210>
    11ca:	ba c0       	rjmp	.+372    	; 0x1340 <__vector_23+0x384>
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <__vector_23+0x216>
    11d0:	c6 c0       	rjmp	.+396    	; 0x135e <__vector_23+0x3a2>
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <__vector_23+0x21c>
    11d6:	b1 c0       	rjmp	.+354    	; 0x133a <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    11d8:	80 91 15 01 	lds	r24, 0x0115
    11dc:	90 91 74 01 	lds	r25, 0x0174
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <__vector_23+0x22a>
    11e4:	e3 c0       	rjmp	.+454    	; 0x13ac <__vector_23+0x3f0>
    11e6:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    11ea:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    11ee:	23 e0       	ldi	r18, 0x03	; 3
    11f0:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    11f4:	80 93 7f 01 	sts	0x017F, r24
                        kilo_straight_right = calibmsg->straight_right;
    11f8:	90 93 80 01 	sts	0x0180, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11fc:	80 91 17 01 	lds	r24, 0x0117
    1200:	86 30       	cpi	r24, 0x06	; 6
    1202:	09 f4       	brne	.+2      	; 0x1206 <__vector_23+0x24a>
    1204:	1b cf       	rjmp	.-458    	; 0x103c <__vector_23+0x80>
                motors_on();
    1206:	53 9a       	sbi	0x0a, 3	; 10
    1208:	23 9a       	sbi	0x04, 3	; 4
    120a:	10 92 b4 00 	sts	0x00B4, r1
    120e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1212:	86 e0       	ldi	r24, 0x06	; 6
    1214:	80 93 17 01 	sts	0x0117, r24
    1218:	11 cf       	rjmp	.-478    	; 0x103c <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    121a:	80 91 17 01 	lds	r24, 0x0117
    121e:	86 30       	cpi	r24, 0x06	; 6
    1220:	99 f0       	breq	.+38     	; 0x1248 <__vector_23+0x28c>
                motors_on();
    1222:	53 9a       	sbi	0x0a, 3	; 10
    1224:	23 9a       	sbi	0x04, 3	; 4
    1226:	10 92 b4 00 	sts	0x00B4, r1
    122a:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    122e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1230:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1232:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1234:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1236:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1238:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    123a:	10 92 15 01 	sts	0x0115, r1
    123e:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    1242:	86 e0       	ldi	r24, 0x06	; 6
    1244:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9c 01       	movw	r18, r24
    124e:	00 90 6e 01 	lds	r0, 0x016E
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <__vector_23+0x29c>
    1254:	22 0f       	add	r18, r18
    1256:	33 1f       	adc	r19, r19
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <__vector_23+0x298>
    125c:	80 91 7d 01 	lds	r24, 0x017D
    1260:	90 91 7e 01 	lds	r25, 0x017E
    1264:	82 23       	and	r24, r18
    1266:	93 23       	and	r25, r19
    1268:	89 2b       	or	r24, r25
    126a:	09 f0       	breq	.+2      	; 0x126e <__vector_23+0x2b2>
    126c:	86 c0       	rjmp	.+268    	; 0x137a <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    126e:	10 92 15 01 	sts	0x0115, r1
    1272:	e4 ce       	rjmp	.-568    	; 0x103c <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 17 01 	sts	0x0117, r24
    127a:	e0 ce       	rjmp	.-576    	; 0x103c <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    127c:	e0 e0       	ldi	r30, 0x00	; 0
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1282:	80 91 6e 00 	lds	r24, 0x006E
    1286:	8d 7f       	andi	r24, 0xFD	; 253
    1288:	80 93 6e 00 	sts	0x006E, r24
    128c:	16 bc       	out	0x26, r1	; 38
            bootload();
    128e:	e0 e0       	ldi	r30, 0x00	; 0
    1290:	f0 e7       	ldi	r31, 0x70	; 112
    1292:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1294:	10 92 17 01 	sts	0x0117, r1
    1298:	d1 ce       	rjmp	.-606    	; 0x103c <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	80 93 17 01 	sts	0x0117, r24
    12a0:	cd ce       	rjmp	.-614    	; 0x103c <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    12a2:	85 e0       	ldi	r24, 0x05	; 5
    12a4:	80 93 17 01 	sts	0x0117, r24
    12a8:	c9 ce       	rjmp	.-622    	; 0x103c <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    12aa:	80 91 17 01 	lds	r24, 0x0117
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <__vector_23+0x2f8>
    12b2:	c4 ce       	rjmp	.-632    	; 0x103c <__vector_23+0x80>
    12b4:	80 91 17 01 	lds	r24, 0x0117
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	09 f4       	brne	.+2      	; 0x12be <__vector_23+0x302>
    12bc:	bf ce       	rjmp	.-642    	; 0x103c <__vector_23+0x80>
                motors_on();
    12be:	53 9a       	sbi	0x0a, 3	; 10
    12c0:	23 9a       	sbi	0x04, 3	; 4
    12c2:	10 92 b4 00 	sts	0x00B4, r1
    12c6:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	80 93 17 01 	sts	0x0117, r24
    12d0:	b5 ce       	rjmp	.-662    	; 0x103c <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    12d2:	80 91 17 01 	lds	r24, 0x0117
    12d6:	86 30       	cpi	r24, 0x06	; 6
    12d8:	09 f0       	breq	.+2      	; 0x12dc <__vector_23+0x320>
    12da:	b0 ce       	rjmp	.-672    	; 0x103c <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    12dc:	60 91 7d 01 	lds	r22, 0x017D
    12e0:	80 eb       	ldi	r24, 0xB0	; 176
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    12e8:	60 91 7e 01 	lds	r22, 0x017E
    12ec:	81 eb       	ldi	r24, 0xB1	; 177
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12f4:	60 91 81 01 	lds	r22, 0x0181
    12f8:	85 e0       	ldi	r24, 0x05	; 5
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1300:	60 91 6d 01 	lds	r22, 0x016D
    1304:	89 e0       	ldi	r24, 0x09	; 9
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    130c:	60 91 7f 01 	lds	r22, 0x017F
    1310:	8c e0       	ldi	r24, 0x0C	; 12
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1318:	60 91 80 01 	lds	r22, 0x0180
    131c:	84 e1       	ldi	r24, 0x14	; 20
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <eeprom_write_byte>
                        motors_off();
    1324:	53 98       	cbi	0x0a, 3	; 10
    1326:	23 98       	cbi	0x04, 3	; 4
    1328:	10 92 b4 00 	sts	0x00B4, r1
    132c:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 17 01 	sts	0x0117, r24
    1336:	80 91 6e 01 	lds	r24, 0x016E
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    133a:	81 11       	cpse	r24, r1
    133c:	5f cf       	rjmp	.-322    	; 0x11fc <__vector_23+0x240>
    133e:	7e ce       	rjmp	.-772    	; 0x103c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1340:	88 23       	and	r24, r24
    1342:	39 f2       	breq	.-114    	; 0x12d2 <__vector_23+0x316>
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	c9 f7       	brne	.-14     	; 0x133a <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1348:	80 91 6f 01 	lds	r24, 0x016F
    134c:	90 91 70 01 	lds	r25, 0x0170
    1350:	90 93 7e 01 	sts	0x017E, r25
    1354:	80 93 7d 01 	sts	0x017D, r24
                    cur_motion = MOVE_STOP;
    1358:	10 92 15 01 	sts	0x0115, r1
    135c:	4f cf       	rjmp	.-354    	; 0x11fc <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    135e:	80 91 15 01 	lds	r24, 0x0115
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	71 f1       	breq	.+92     	; 0x13c2 <__vector_23+0x406>
    1366:	80 91 72 01 	lds	r24, 0x0172
                        prev_motion = MOVE_STOP;
    136a:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    1374:	80 93 6d 01 	sts	0x016D, r24
    1378:	41 cf       	rjmp	.-382    	; 0x11fc <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 15 01 	sts	0x0115, r24
    1380:	5d ce       	rjmp	.-838    	; 0x103c <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1382:	80 91 15 01 	lds	r24, 0x0115
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	51 f0       	breq	.+20     	; 0x139e <__vector_23+0x3e2>
    138a:	80 91 71 01 	lds	r24, 0x0171
                        prev_motion = MOVE_STOP;
    138e:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    1398:	80 93 81 01 	sts	0x0181, r24
    139c:	2f cf       	rjmp	.-418    	; 0x11fc <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    139e:	80 91 71 01 	lds	r24, 0x0171
    13a2:	90 91 81 01 	lds	r25, 0x0181
    13a6:	89 13       	cpse	r24, r25
    13a8:	f2 cf       	rjmp	.-28     	; 0x138e <__vector_23+0x3d2>
    13aa:	28 cf       	rjmp	.-432    	; 0x11fc <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13ac:	80 91 80 01 	lds	r24, 0x0180
    13b0:	98 13       	cpse	r25, r24
    13b2:	19 cf       	rjmp	.-462    	; 0x11e6 <__vector_23+0x22a>
    13b4:	80 91 73 01 	lds	r24, 0x0173
    13b8:	20 91 7f 01 	lds	r18, 0x017F
    13bc:	82 13       	cpse	r24, r18
    13be:	15 cf       	rjmp	.-470    	; 0x11ea <__vector_23+0x22e>
    13c0:	1d cf       	rjmp	.-454    	; 0x11fc <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    13c2:	80 91 72 01 	lds	r24, 0x0172
    13c6:	90 91 6d 01 	lds	r25, 0x016D
    13ca:	89 13       	cpse	r24, r25
    13cc:	ce cf       	rjmp	.-100    	; 0x136a <__vector_23+0x3ae>
    13ce:	16 cf       	rjmp	.-468    	; 0x11fc <__vector_23+0x240>

000013d0 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    13d0:	fc 01       	movw	r30, r24
    13d2:	ac 01       	movw	r20, r24
    13d4:	46 5f       	subi	r20, 0xF6	; 246
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    13dc:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    13de:	82 27       	eor	r24, r18
    13e0:	08 2e       	mov	r0, r24
    13e2:	82 95       	swap	r24
    13e4:	80 7f       	andi	r24, 0xF0	; 240
    13e6:	80 25       	eor	r24, r0
    13e8:	09 2e       	mov	r0, r25
    13ea:	98 2f       	mov	r25, r24
    13ec:	82 95       	swap	r24
    13ee:	8f 70       	andi	r24, 0x0F	; 15
    13f0:	08 26       	eor	r0, r24
    13f2:	86 95       	lsr	r24
    13f4:	98 27       	eor	r25, r24
    13f6:	89 27       	eor	r24, r25
    13f8:	88 0f       	add	r24, r24
    13fa:	88 0f       	add	r24, r24
    13fc:	88 0f       	add	r24, r24
    13fe:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1400:	e4 17       	cp	r30, r20
    1402:	f5 07       	cpc	r31, r21
    1404:	59 f7       	brne	.-42     	; 0x13dc <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1406:	08 95       	ret

00001408 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1408:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    140a:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    140c:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    140e:	20 91 41 01 	lds	r18, 0x0141
    or tmpreg1, ddrreg
    1412:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1414:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1416:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1418:	30 91 41 01 	lds	r19, 0x0141
    141c:	20 30       	cpi	r18, 0x00	; 0
    141e:	29 f0       	breq	.+10     	; 0x142a <message_send+0x22>
    1420:	00 00       	nop
    1422:	25 b1       	in	r18, 0x05	; 5
    1424:	23 2b       	or	r18, r19
    1426:	25 b9       	out	0x05, r18	; 5
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <message_send+0x2a>
    142a:	00 00       	nop
    142c:	00 00       	nop
    142e:	00 00       	nop
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <message_send+0x2a>
    1432:	00 00       	nop
    1434:	00 00       	nop
    1436:	00 00       	nop
    1438:	30 95       	com	r19
    143a:	25 b1       	in	r18, 0x05	; 5
    143c:	23 23       	and	r18, r19
    143e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1440:	2e ea       	ldi	r18, 0xAE	; 174
    1442:	2a 95       	dec	r18
    1444:	f1 f7       	brne	.-4      	; 0x1442 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1446:	2b ee       	ldi	r18, 0xEB	; 235

00001448 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1448:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    144a:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    144c:	0a c0       	rjmp	.+20     	; 0x1462 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    144e:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1450:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    1454:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1456:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1458:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    145a:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    145c:	0f be       	out	0x3f, r0	; 63
    return 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	08 95       	ret

00001462 <nocollision>:
nocollision:
    nop
    1462:	00 00       	nop
    dec tmpreg1
    1464:	2a 95       	dec	r18
    brne checkcollision
    1466:	81 f7       	brne	.-32     	; 0x1448 <checkcollision>

    ldi tmpreg1, 0x01
    1468:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    146a:	30 91 41 01 	lds	r19, 0x0141
    146e:	20 30       	cpi	r18, 0x00	; 0
    1470:	29 f0       	breq	.+10     	; 0x147c <nocollision+0x1a>
    1472:	00 00       	nop
    1474:	25 b1       	in	r18, 0x05	; 5
    1476:	23 2b       	or	r18, r19
    1478:	25 b9       	out	0x05, r18	; 5
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <nocollision+0x22>
    147c:	00 00       	nop
    147e:	00 00       	nop
    1480:	00 00       	nop
    1482:	00 c0       	rjmp	.+0      	; 0x1484 <nocollision+0x22>
    1484:	00 00       	nop
    1486:	00 00       	nop
    1488:	00 00       	nop
    148a:	30 95       	com	r19
    148c:	25 b1       	in	r18, 0x05	; 5
    148e:	23 23       	and	r18, r19
    1490:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1492:	00 00       	nop
    1494:	24 e5       	ldi	r18, 0x54	; 84
    1496:	2a 95       	dec	r18
    1498:	f1 f7       	brne	.-4      	; 0x1496 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    149a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    149c:	8c e0       	ldi	r24, 0x0C	; 12

0000149e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    149e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    14a2:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    14a4:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    14a6:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    14a8:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    14aa:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    14ae:	50 e0       	ldi	r21, 0x00	; 0

000014b0 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    14b0:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    14b2:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    14b4:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    14b6:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    14b8:	30 91 41 01 	lds	r19, 0x0141
    14bc:	20 30       	cpi	r18, 0x00	; 0
    14be:	29 f0       	breq	.+10     	; 0x14ca <sendbit+0x1a>
    14c0:	00 00       	nop
    14c2:	25 b1       	in	r18, 0x05	; 5
    14c4:	23 2b       	or	r18, r19
    14c6:	25 b9       	out	0x05, r18	; 5
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <sendbit+0x22>
    14ca:	00 00       	nop
    14cc:	00 00       	nop
    14ce:	00 00       	nop
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <sendbit+0x22>
    14d2:	00 00       	nop
    14d4:	00 00       	nop
    14d6:	00 00       	nop
    14d8:	30 95       	com	r19
    14da:	25 b1       	in	r18, 0x05	; 5
    14dc:	23 23       	and	r18, r19
    14de:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    14e0:	00 00       	nop
    14e2:	21 e5       	ldi	r18, 0x51	; 81
    14e4:	2a 95       	dec	r18
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    14e8:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    14ea:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    14ec:	9a 95       	dec	r25
    brne sendbit
    14ee:	01 f7       	brne	.-64     	; 0x14b0 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14f0:	8a 95       	dec	r24
    brne sendbyte
    14f2:	a9 f6       	brne	.-86     	; 0x149e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14f4:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14f6:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14f8:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14fa:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14fc:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    1500:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1502:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1504:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1506:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1508:	0f be       	out	0x3f, r0	; 63
    return 1
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	08 95       	ret

0000150e <main>:
    message_sent = 1;
}

int main()
{
    kilo_init();
    150e:	0e 94 18 01 	call	0x230	; 0x230 <kilo_init>
    kilo_message_tx = message_tx;
    1512:	82 e7       	ldi	r24, 0x72	; 114
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	90 93 04 01 	sts	0x0104, r25
    151a:	80 93 03 01 	sts	0x0103, r24
    kilo_message_tx_success = message_tx_succes;
    151e:	85 e7       	ldi	r24, 0x75	; 117
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	90 93 02 01 	sts	0x0102, r25
    1526:	80 93 01 01 	sts	0x0101, r24
    kilo_start(setup, loop);
    152a:	6c e7       	ldi	r22, 0x7C	; 124
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	81 e7       	ldi	r24, 0x71	; 113
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 14 02 	call	0x428	; 0x428 <kilo_start>

    return 0;
}
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	08 95       	ret

0000153c <__divmodhi4>:
    153c:	97 fb       	bst	r25, 7
    153e:	07 2e       	mov	r0, r23
    1540:	16 f4       	brtc	.+4      	; 0x1546 <__divmodhi4+0xa>
    1542:	00 94       	com	r0
    1544:	07 d0       	rcall	.+14     	; 0x1554 <__divmodhi4_neg1>
    1546:	77 fd       	sbrc	r23, 7
    1548:	09 d0       	rcall	.+18     	; 0x155c <__divmodhi4_neg2>
    154a:	0e 94 c7 0a 	call	0x158e	; 0x158e <__udivmodhi4>
    154e:	07 fc       	sbrc	r0, 7
    1550:	05 d0       	rcall	.+10     	; 0x155c <__divmodhi4_neg2>
    1552:	3e f4       	brtc	.+14     	; 0x1562 <__divmodhi4_exit>

00001554 <__divmodhi4_neg1>:
    1554:	90 95       	com	r25
    1556:	81 95       	neg	r24
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	08 95       	ret

0000155c <__divmodhi4_neg2>:
    155c:	70 95       	com	r23
    155e:	61 95       	neg	r22
    1560:	7f 4f       	sbci	r23, 0xFF	; 255

00001562 <__divmodhi4_exit>:
    1562:	08 95       	ret

00001564 <__tablejump2__>:
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	05 90       	lpm	r0, Z+
    156a:	f4 91       	lpm	r31, Z
    156c:	e0 2d       	mov	r30, r0
    156e:	09 94       	ijmp

00001570 <__umulhisi3>:
    1570:	a2 9f       	mul	r26, r18
    1572:	b0 01       	movw	r22, r0
    1574:	b3 9f       	mul	r27, r19
    1576:	c0 01       	movw	r24, r0
    1578:	a3 9f       	mul	r26, r19
    157a:	70 0d       	add	r23, r0
    157c:	81 1d       	adc	r24, r1
    157e:	11 24       	eor	r1, r1
    1580:	91 1d       	adc	r25, r1
    1582:	b2 9f       	mul	r27, r18
    1584:	70 0d       	add	r23, r0
    1586:	81 1d       	adc	r24, r1
    1588:	11 24       	eor	r1, r1
    158a:	91 1d       	adc	r25, r1
    158c:	08 95       	ret

0000158e <__udivmodhi4>:
    158e:	aa 1b       	sub	r26, r26
    1590:	bb 1b       	sub	r27, r27
    1592:	51 e1       	ldi	r21, 0x11	; 17
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <__udivmodhi4_ep>

00001596 <__udivmodhi4_loop>:
    1596:	aa 1f       	adc	r26, r26
    1598:	bb 1f       	adc	r27, r27
    159a:	a6 17       	cp	r26, r22
    159c:	b7 07       	cpc	r27, r23
    159e:	10 f0       	brcs	.+4      	; 0x15a4 <__udivmodhi4_ep>
    15a0:	a6 1b       	sub	r26, r22
    15a2:	b7 0b       	sbc	r27, r23

000015a4 <__udivmodhi4_ep>:
    15a4:	88 1f       	adc	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	5a 95       	dec	r21
    15aa:	a9 f7       	brne	.-22     	; 0x1596 <__udivmodhi4_loop>
    15ac:	80 95       	com	r24
    15ae:	90 95       	com	r25
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	08 95       	ret

000015b6 <__subsf3>:
    15b6:	50 58       	subi	r21, 0x80	; 128

000015b8 <__addsf3>:
    15b8:	bb 27       	eor	r27, r27
    15ba:	aa 27       	eor	r26, r26
    15bc:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__addsf3x>
    15c0:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_round>
    15c4:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_pscA>
    15c8:	38 f0       	brcs	.+14     	; 0x15d8 <__addsf3+0x20>
    15ca:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fp_pscB>
    15ce:	20 f0       	brcs	.+8      	; 0x15d8 <__addsf3+0x20>
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <__addsf3+0x28>
    15d2:	9f 3f       	cpi	r25, 0xFF	; 255
    15d4:	19 f4       	brne	.+6      	; 0x15dc <__addsf3+0x24>
    15d6:	26 f4       	brtc	.+8      	; 0x15e0 <__addsf3+0x28>
    15d8:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_nan>
    15dc:	0e f4       	brtc	.+2      	; 0x15e0 <__addsf3+0x28>
    15de:	e0 95       	com	r30
    15e0:	e7 fb       	bst	r30, 7
    15e2:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>

000015e6 <__addsf3x>:
    15e6:	e9 2f       	mov	r30, r25
    15e8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    15ec:	58 f3       	brcs	.-42     	; 0x15c4 <__addsf3+0xc>
    15ee:	ba 17       	cp	r27, r26
    15f0:	62 07       	cpc	r22, r18
    15f2:	73 07       	cpc	r23, r19
    15f4:	84 07       	cpc	r24, r20
    15f6:	95 07       	cpc	r25, r21
    15f8:	20 f0       	brcs	.+8      	; 0x1602 <__addsf3x+0x1c>
    15fa:	79 f4       	brne	.+30     	; 0x161a <__addsf3x+0x34>
    15fc:	a6 f5       	brtc	.+104    	; 0x1666 <__addsf3x+0x80>
    15fe:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_zero>
    1602:	0e f4       	brtc	.+2      	; 0x1606 <__addsf3x+0x20>
    1604:	e0 95       	com	r30
    1606:	0b 2e       	mov	r0, r27
    1608:	ba 2f       	mov	r27, r26
    160a:	a0 2d       	mov	r26, r0
    160c:	0b 01       	movw	r0, r22
    160e:	b9 01       	movw	r22, r18
    1610:	90 01       	movw	r18, r0
    1612:	0c 01       	movw	r0, r24
    1614:	ca 01       	movw	r24, r20
    1616:	a0 01       	movw	r20, r0
    1618:	11 24       	eor	r1, r1
    161a:	ff 27       	eor	r31, r31
    161c:	59 1b       	sub	r21, r25
    161e:	99 f0       	breq	.+38     	; 0x1646 <__addsf3x+0x60>
    1620:	59 3f       	cpi	r21, 0xF9	; 249
    1622:	50 f4       	brcc	.+20     	; 0x1638 <__addsf3x+0x52>
    1624:	50 3e       	cpi	r21, 0xE0	; 224
    1626:	68 f1       	brcs	.+90     	; 0x1682 <__addsf3x+0x9c>
    1628:	1a 16       	cp	r1, r26
    162a:	f0 40       	sbci	r31, 0x00	; 0
    162c:	a2 2f       	mov	r26, r18
    162e:	23 2f       	mov	r18, r19
    1630:	34 2f       	mov	r19, r20
    1632:	44 27       	eor	r20, r20
    1634:	58 5f       	subi	r21, 0xF8	; 248
    1636:	f3 cf       	rjmp	.-26     	; 0x161e <__addsf3x+0x38>
    1638:	46 95       	lsr	r20
    163a:	37 95       	ror	r19
    163c:	27 95       	ror	r18
    163e:	a7 95       	ror	r26
    1640:	f0 40       	sbci	r31, 0x00	; 0
    1642:	53 95       	inc	r21
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__addsf3x+0x52>
    1646:	7e f4       	brtc	.+30     	; 0x1666 <__addsf3x+0x80>
    1648:	1f 16       	cp	r1, r31
    164a:	ba 0b       	sbc	r27, r26
    164c:	62 0b       	sbc	r22, r18
    164e:	73 0b       	sbc	r23, r19
    1650:	84 0b       	sbc	r24, r20
    1652:	ba f0       	brmi	.+46     	; 0x1682 <__addsf3x+0x9c>
    1654:	91 50       	subi	r25, 0x01	; 1
    1656:	a1 f0       	breq	.+40     	; 0x1680 <__addsf3x+0x9a>
    1658:	ff 0f       	add	r31, r31
    165a:	bb 1f       	adc	r27, r27
    165c:	66 1f       	adc	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	c2 f7       	brpl	.-16     	; 0x1654 <__addsf3x+0x6e>
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <__addsf3x+0x9c>
    1666:	ba 0f       	add	r27, r26
    1668:	62 1f       	adc	r22, r18
    166a:	73 1f       	adc	r23, r19
    166c:	84 1f       	adc	r24, r20
    166e:	48 f4       	brcc	.+18     	; 0x1682 <__addsf3x+0x9c>
    1670:	87 95       	ror	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b7 95       	ror	r27
    1678:	f7 95       	ror	r31
    167a:	9e 3f       	cpi	r25, 0xFE	; 254
    167c:	08 f0       	brcs	.+2      	; 0x1680 <__addsf3x+0x9a>
    167e:	b0 cf       	rjmp	.-160    	; 0x15e0 <__addsf3+0x28>
    1680:	93 95       	inc	r25
    1682:	88 0f       	add	r24, r24
    1684:	08 f0       	brcs	.+2      	; 0x1688 <__addsf3x+0xa2>
    1686:	99 27       	eor	r25, r25
    1688:	ee 0f       	add	r30, r30
    168a:	97 95       	ror	r25
    168c:	87 95       	ror	r24
    168e:	08 95       	ret

00001690 <__divsf3>:
    1690:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3x>
    1694:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_round>
    1698:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fp_pscB>
    169c:	58 f0       	brcs	.+22     	; 0x16b4 <__divsf3+0x24>
    169e:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_pscA>
    16a2:	40 f0       	brcs	.+16     	; 0x16b4 <__divsf3+0x24>
    16a4:	29 f4       	brne	.+10     	; 0x16b0 <__divsf3+0x20>
    16a6:	5f 3f       	cpi	r21, 0xFF	; 255
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <__divsf3+0x24>
    16aa:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    16ae:	51 11       	cpse	r21, r1
    16b0:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    16b4:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_nan>

000016b8 <__divsf3x>:
    16b8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    16bc:	68 f3       	brcs	.-38     	; 0x1698 <__divsf3+0x8>

000016be <__divsf3_pse>:
    16be:	99 23       	and	r25, r25
    16c0:	b1 f3       	breq	.-20     	; 0x16ae <__divsf3+0x1e>
    16c2:	55 23       	and	r21, r21
    16c4:	91 f3       	breq	.-28     	; 0x16aa <__divsf3+0x1a>
    16c6:	95 1b       	sub	r25, r21
    16c8:	55 0b       	sbc	r21, r21
    16ca:	bb 27       	eor	r27, r27
    16cc:	aa 27       	eor	r26, r26
    16ce:	62 17       	cp	r22, r18
    16d0:	73 07       	cpc	r23, r19
    16d2:	84 07       	cpc	r24, r20
    16d4:	38 f0       	brcs	.+14     	; 0x16e4 <__divsf3_pse+0x26>
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	5f 4f       	sbci	r21, 0xFF	; 255
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	44 1f       	adc	r20, r20
    16e0:	aa 1f       	adc	r26, r26
    16e2:	a9 f3       	breq	.-22     	; 0x16ce <__divsf3_pse+0x10>
    16e4:	35 d0       	rcall	.+106    	; 0x1750 <__divsf3_pse+0x92>
    16e6:	0e 2e       	mov	r0, r30
    16e8:	3a f0       	brmi	.+14     	; 0x16f8 <__divsf3_pse+0x3a>
    16ea:	e0 e8       	ldi	r30, 0x80	; 128
    16ec:	32 d0       	rcall	.+100    	; 0x1752 <__divsf3_pse+0x94>
    16ee:	91 50       	subi	r25, 0x01	; 1
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	e6 95       	lsr	r30
    16f4:	00 1c       	adc	r0, r0
    16f6:	ca f7       	brpl	.-14     	; 0x16ea <__divsf3_pse+0x2c>
    16f8:	2b d0       	rcall	.+86     	; 0x1750 <__divsf3_pse+0x92>
    16fa:	fe 2f       	mov	r31, r30
    16fc:	29 d0       	rcall	.+82     	; 0x1750 <__divsf3_pse+0x92>
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	bb 1f       	adc	r27, r27
    1706:	26 17       	cp	r18, r22
    1708:	37 07       	cpc	r19, r23
    170a:	48 07       	cpc	r20, r24
    170c:	ab 07       	cpc	r26, r27
    170e:	b0 e8       	ldi	r27, 0x80	; 128
    1710:	09 f0       	breq	.+2      	; 0x1714 <__divsf3_pse+0x56>
    1712:	bb 0b       	sbc	r27, r27
    1714:	80 2d       	mov	r24, r0
    1716:	bf 01       	movw	r22, r30
    1718:	ff 27       	eor	r31, r31
    171a:	93 58       	subi	r25, 0x83	; 131
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	3a f0       	brmi	.+14     	; 0x172e <__divsf3_pse+0x70>
    1720:	9e 3f       	cpi	r25, 0xFE	; 254
    1722:	51 05       	cpc	r21, r1
    1724:	78 f0       	brcs	.+30     	; 0x1744 <__divsf3_pse+0x86>
    1726:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    172a:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    172e:	5f 3f       	cpi	r21, 0xFF	; 255
    1730:	e4 f3       	brlt	.-8      	; 0x172a <__divsf3_pse+0x6c>
    1732:	98 3e       	cpi	r25, 0xE8	; 232
    1734:	d4 f3       	brlt	.-12     	; 0x172a <__divsf3_pse+0x6c>
    1736:	86 95       	lsr	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	b7 95       	ror	r27
    173e:	f7 95       	ror	r31
    1740:	9f 5f       	subi	r25, 0xFF	; 255
    1742:	c9 f7       	brne	.-14     	; 0x1736 <__divsf3_pse+0x78>
    1744:	88 0f       	add	r24, r24
    1746:	91 1d       	adc	r25, r1
    1748:	96 95       	lsr	r25
    174a:	87 95       	ror	r24
    174c:	97 f9       	bld	r25, 7
    174e:	08 95       	ret
    1750:	e1 e0       	ldi	r30, 0x01	; 1
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	bb 1f       	adc	r27, r27
    175a:	62 17       	cp	r22, r18
    175c:	73 07       	cpc	r23, r19
    175e:	84 07       	cpc	r24, r20
    1760:	ba 07       	cpc	r27, r26
    1762:	20 f0       	brcs	.+8      	; 0x176c <__divsf3_pse+0xae>
    1764:	62 1b       	sub	r22, r18
    1766:	73 0b       	sbc	r23, r19
    1768:	84 0b       	sbc	r24, r20
    176a:	ba 0b       	sbc	r27, r26
    176c:	ee 1f       	adc	r30, r30
    176e:	88 f7       	brcc	.-30     	; 0x1752 <__divsf3_pse+0x94>
    1770:	e0 95       	com	r30
    1772:	08 95       	ret

00001774 <__fixsfsi>:
    1774:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    1778:	68 94       	set
    177a:	b1 11       	cpse	r27, r1
    177c:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    1780:	08 95       	ret

00001782 <__fixunssfsi>:
    1782:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_splitA>
    1786:	88 f0       	brcs	.+34     	; 0x17aa <__fixunssfsi+0x28>
    1788:	9f 57       	subi	r25, 0x7F	; 127
    178a:	98 f0       	brcs	.+38     	; 0x17b2 <__fixunssfsi+0x30>
    178c:	b9 2f       	mov	r27, r25
    178e:	99 27       	eor	r25, r25
    1790:	b7 51       	subi	r27, 0x17	; 23
    1792:	b0 f0       	brcs	.+44     	; 0x17c0 <__fixunssfsi+0x3e>
    1794:	e1 f0       	breq	.+56     	; 0x17ce <__fixunssfsi+0x4c>
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	1a f0       	brmi	.+6      	; 0x17a6 <__fixunssfsi+0x24>
    17a0:	ba 95       	dec	r27
    17a2:	c9 f7       	brne	.-14     	; 0x1796 <__fixunssfsi+0x14>
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <__fixunssfsi+0x4c>
    17a6:	b1 30       	cpi	r27, 0x01	; 1
    17a8:	91 f0       	breq	.+36     	; 0x17ce <__fixunssfsi+0x4c>
    17aa:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_zero>
    17ae:	b1 e0       	ldi	r27, 0x01	; 1
    17b0:	08 95       	ret
    17b2:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_zero>
    17b6:	67 2f       	mov	r22, r23
    17b8:	78 2f       	mov	r23, r24
    17ba:	88 27       	eor	r24, r24
    17bc:	b8 5f       	subi	r27, 0xF8	; 248
    17be:	39 f0       	breq	.+14     	; 0x17ce <__fixunssfsi+0x4c>
    17c0:	b9 3f       	cpi	r27, 0xF9	; 249
    17c2:	cc f3       	brlt	.-14     	; 0x17b6 <__fixunssfsi+0x34>
    17c4:	86 95       	lsr	r24
    17c6:	77 95       	ror	r23
    17c8:	67 95       	ror	r22
    17ca:	b3 95       	inc	r27
    17cc:	d9 f7       	brne	.-10     	; 0x17c4 <__fixunssfsi+0x42>
    17ce:	3e f4       	brtc	.+14     	; 0x17de <__fixunssfsi+0x5c>
    17d0:	90 95       	com	r25
    17d2:	80 95       	com	r24
    17d4:	70 95       	com	r23
    17d6:	61 95       	neg	r22
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	08 95       	ret

000017e0 <__floatunsisf>:
    17e0:	e8 94       	clt
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <__floatsisf+0x12>

000017e4 <__floatsisf>:
    17e4:	97 fb       	bst	r25, 7
    17e6:	3e f4       	brtc	.+14     	; 0x17f6 <__floatsisf+0x12>
    17e8:	90 95       	com	r25
    17ea:	80 95       	com	r24
    17ec:	70 95       	com	r23
    17ee:	61 95       	neg	r22
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	8f 4f       	sbci	r24, 0xFF	; 255
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	99 23       	and	r25, r25
    17f8:	a9 f0       	breq	.+42     	; 0x1824 <__floatsisf+0x40>
    17fa:	f9 2f       	mov	r31, r25
    17fc:	96 e9       	ldi	r25, 0x96	; 150
    17fe:	bb 27       	eor	r27, r27
    1800:	93 95       	inc	r25
    1802:	f6 95       	lsr	r31
    1804:	87 95       	ror	r24
    1806:	77 95       	ror	r23
    1808:	67 95       	ror	r22
    180a:	b7 95       	ror	r27
    180c:	f1 11       	cpse	r31, r1
    180e:	f8 cf       	rjmp	.-16     	; 0x1800 <__floatsisf+0x1c>
    1810:	fa f4       	brpl	.+62     	; 0x1850 <__floatsisf+0x6c>
    1812:	bb 0f       	add	r27, r27
    1814:	11 f4       	brne	.+4      	; 0x181a <__floatsisf+0x36>
    1816:	60 ff       	sbrs	r22, 0
    1818:	1b c0       	rjmp	.+54     	; 0x1850 <__floatsisf+0x6c>
    181a:	6f 5f       	subi	r22, 0xFF	; 255
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	8f 4f       	sbci	r24, 0xFF	; 255
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	16 c0       	rjmp	.+44     	; 0x1850 <__floatsisf+0x6c>
    1824:	88 23       	and	r24, r24
    1826:	11 f0       	breq	.+4      	; 0x182c <__floatsisf+0x48>
    1828:	96 e9       	ldi	r25, 0x96	; 150
    182a:	11 c0       	rjmp	.+34     	; 0x184e <__floatsisf+0x6a>
    182c:	77 23       	and	r23, r23
    182e:	21 f0       	breq	.+8      	; 0x1838 <__floatsisf+0x54>
    1830:	9e e8       	ldi	r25, 0x8E	; 142
    1832:	87 2f       	mov	r24, r23
    1834:	76 2f       	mov	r23, r22
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <__floatsisf+0x5e>
    1838:	66 23       	and	r22, r22
    183a:	71 f0       	breq	.+28     	; 0x1858 <__floatsisf+0x74>
    183c:	96 e8       	ldi	r25, 0x86	; 134
    183e:	86 2f       	mov	r24, r22
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	2a f0       	brmi	.+10     	; 0x1850 <__floatsisf+0x6c>
    1846:	9a 95       	dec	r25
    1848:	66 0f       	add	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	da f7       	brpl	.-10     	; 0x1846 <__floatsisf+0x62>
    1850:	88 0f       	add	r24, r24
    1852:	96 95       	lsr	r25
    1854:	87 95       	ror	r24
    1856:	97 f9       	bld	r25, 7
    1858:	08 95       	ret

0000185a <__fp_inf>:
    185a:	97 f9       	bld	r25, 7
    185c:	9f 67       	ori	r25, 0x7F	; 127
    185e:	80 e8       	ldi	r24, 0x80	; 128
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	08 95       	ret

00001866 <__fp_nan>:
    1866:	9f ef       	ldi	r25, 0xFF	; 255
    1868:	80 ec       	ldi	r24, 0xC0	; 192
    186a:	08 95       	ret

0000186c <__fp_pscA>:
    186c:	00 24       	eor	r0, r0
    186e:	0a 94       	dec	r0
    1870:	16 16       	cp	r1, r22
    1872:	17 06       	cpc	r1, r23
    1874:	18 06       	cpc	r1, r24
    1876:	09 06       	cpc	r0, r25
    1878:	08 95       	ret

0000187a <__fp_pscB>:
    187a:	00 24       	eor	r0, r0
    187c:	0a 94       	dec	r0
    187e:	12 16       	cp	r1, r18
    1880:	13 06       	cpc	r1, r19
    1882:	14 06       	cpc	r1, r20
    1884:	05 06       	cpc	r0, r21
    1886:	08 95       	ret

00001888 <__fp_round>:
    1888:	09 2e       	mov	r0, r25
    188a:	03 94       	inc	r0
    188c:	00 0c       	add	r0, r0
    188e:	11 f4       	brne	.+4      	; 0x1894 <__fp_round+0xc>
    1890:	88 23       	and	r24, r24
    1892:	52 f0       	brmi	.+20     	; 0x18a8 <__fp_round+0x20>
    1894:	bb 0f       	add	r27, r27
    1896:	40 f4       	brcc	.+16     	; 0x18a8 <__fp_round+0x20>
    1898:	bf 2b       	or	r27, r31
    189a:	11 f4       	brne	.+4      	; 0x18a0 <__fp_round+0x18>
    189c:	60 ff       	sbrs	r22, 0
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <__fp_round+0x20>
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	08 95       	ret

000018aa <__fp_split3>:
    18aa:	57 fd       	sbrc	r21, 7
    18ac:	90 58       	subi	r25, 0x80	; 128
    18ae:	44 0f       	add	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	59 f0       	breq	.+22     	; 0x18ca <__fp_splitA+0x10>
    18b4:	5f 3f       	cpi	r21, 0xFF	; 255
    18b6:	71 f0       	breq	.+28     	; 0x18d4 <__fp_splitA+0x1a>
    18b8:	47 95       	ror	r20

000018ba <__fp_splitA>:
    18ba:	88 0f       	add	r24, r24
    18bc:	97 fb       	bst	r25, 7
    18be:	99 1f       	adc	r25, r25
    18c0:	61 f0       	breq	.+24     	; 0x18da <__fp_splitA+0x20>
    18c2:	9f 3f       	cpi	r25, 0xFF	; 255
    18c4:	79 f0       	breq	.+30     	; 0x18e4 <__fp_splitA+0x2a>
    18c6:	87 95       	ror	r24
    18c8:	08 95       	ret
    18ca:	12 16       	cp	r1, r18
    18cc:	13 06       	cpc	r1, r19
    18ce:	14 06       	cpc	r1, r20
    18d0:	55 1f       	adc	r21, r21
    18d2:	f2 cf       	rjmp	.-28     	; 0x18b8 <__fp_split3+0xe>
    18d4:	46 95       	lsr	r20
    18d6:	f1 df       	rcall	.-30     	; 0x18ba <__fp_splitA>
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <__fp_splitA+0x30>
    18da:	16 16       	cp	r1, r22
    18dc:	17 06       	cpc	r1, r23
    18de:	18 06       	cpc	r1, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	f1 cf       	rjmp	.-30     	; 0x18c6 <__fp_splitA+0xc>
    18e4:	86 95       	lsr	r24
    18e6:	71 05       	cpc	r23, r1
    18e8:	61 05       	cpc	r22, r1
    18ea:	08 94       	sec
    18ec:	08 95       	ret

000018ee <__fp_zero>:
    18ee:	e8 94       	clt

000018f0 <__fp_szero>:
    18f0:	bb 27       	eor	r27, r27
    18f2:	66 27       	eor	r22, r22
    18f4:	77 27       	eor	r23, r23
    18f6:	cb 01       	movw	r24, r22
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <__mulsf3>:
    18fc:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3x>
    1900:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_round>
    1904:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_pscA>
    1908:	38 f0       	brcs	.+14     	; 0x1918 <__mulsf3+0x1c>
    190a:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fp_pscB>
    190e:	20 f0       	brcs	.+8      	; 0x1918 <__mulsf3+0x1c>
    1910:	95 23       	and	r25, r21
    1912:	11 f0       	breq	.+4      	; 0x1918 <__mulsf3+0x1c>
    1914:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    1918:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_nan>
    191c:	11 24       	eor	r1, r1
    191e:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>

00001922 <__mulsf3x>:
    1922:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    1926:	70 f3       	brcs	.-36     	; 0x1904 <__mulsf3+0x8>

00001928 <__mulsf3_pse>:
    1928:	95 9f       	mul	r25, r21
    192a:	c1 f3       	breq	.-16     	; 0x191c <__mulsf3+0x20>
    192c:	95 0f       	add	r25, r21
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	55 1f       	adc	r21, r21
    1932:	62 9f       	mul	r22, r18
    1934:	f0 01       	movw	r30, r0
    1936:	72 9f       	mul	r23, r18
    1938:	bb 27       	eor	r27, r27
    193a:	f0 0d       	add	r31, r0
    193c:	b1 1d       	adc	r27, r1
    193e:	63 9f       	mul	r22, r19
    1940:	aa 27       	eor	r26, r26
    1942:	f0 0d       	add	r31, r0
    1944:	b1 1d       	adc	r27, r1
    1946:	aa 1f       	adc	r26, r26
    1948:	64 9f       	mul	r22, r20
    194a:	66 27       	eor	r22, r22
    194c:	b0 0d       	add	r27, r0
    194e:	a1 1d       	adc	r26, r1
    1950:	66 1f       	adc	r22, r22
    1952:	82 9f       	mul	r24, r18
    1954:	22 27       	eor	r18, r18
    1956:	b0 0d       	add	r27, r0
    1958:	a1 1d       	adc	r26, r1
    195a:	62 1f       	adc	r22, r18
    195c:	73 9f       	mul	r23, r19
    195e:	b0 0d       	add	r27, r0
    1960:	a1 1d       	adc	r26, r1
    1962:	62 1f       	adc	r22, r18
    1964:	83 9f       	mul	r24, r19
    1966:	a0 0d       	add	r26, r0
    1968:	61 1d       	adc	r22, r1
    196a:	22 1f       	adc	r18, r18
    196c:	74 9f       	mul	r23, r20
    196e:	33 27       	eor	r19, r19
    1970:	a0 0d       	add	r26, r0
    1972:	61 1d       	adc	r22, r1
    1974:	23 1f       	adc	r18, r19
    1976:	84 9f       	mul	r24, r20
    1978:	60 0d       	add	r22, r0
    197a:	21 1d       	adc	r18, r1
    197c:	82 2f       	mov	r24, r18
    197e:	76 2f       	mov	r23, r22
    1980:	6a 2f       	mov	r22, r26
    1982:	11 24       	eor	r1, r1
    1984:	9f 57       	subi	r25, 0x7F	; 127
    1986:	50 40       	sbci	r21, 0x00	; 0
    1988:	9a f0       	brmi	.+38     	; 0x19b0 <__mulsf3_pse+0x88>
    198a:	f1 f0       	breq	.+60     	; 0x19c8 <__mulsf3_pse+0xa0>
    198c:	88 23       	and	r24, r24
    198e:	4a f0       	brmi	.+18     	; 0x19a2 <__mulsf3_pse+0x7a>
    1990:	ee 0f       	add	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	bb 1f       	adc	r27, r27
    1996:	66 1f       	adc	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	91 50       	subi	r25, 0x01	; 1
    199e:	50 40       	sbci	r21, 0x00	; 0
    19a0:	a9 f7       	brne	.-22     	; 0x198c <__mulsf3_pse+0x64>
    19a2:	9e 3f       	cpi	r25, 0xFE	; 254
    19a4:	51 05       	cpc	r21, r1
    19a6:	80 f0       	brcs	.+32     	; 0x19c8 <__mulsf3_pse+0xa0>
    19a8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    19ac:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    19b0:	5f 3f       	cpi	r21, 0xFF	; 255
    19b2:	e4 f3       	brlt	.-8      	; 0x19ac <__mulsf3_pse+0x84>
    19b4:	98 3e       	cpi	r25, 0xE8	; 232
    19b6:	d4 f3       	brlt	.-12     	; 0x19ac <__mulsf3_pse+0x84>
    19b8:	86 95       	lsr	r24
    19ba:	77 95       	ror	r23
    19bc:	67 95       	ror	r22
    19be:	b7 95       	ror	r27
    19c0:	f7 95       	ror	r31
    19c2:	e7 95       	ror	r30
    19c4:	9f 5f       	subi	r25, 0xFF	; 255
    19c6:	c1 f7       	brne	.-16     	; 0x19b8 <__mulsf3_pse+0x90>
    19c8:	fe 2b       	or	r31, r30
    19ca:	88 0f       	add	r24, r24
    19cc:	91 1d       	adc	r25, r1
    19ce:	96 95       	lsr	r25
    19d0:	87 95       	ror	r24
    19d2:	97 f9       	bld	r25, 7
    19d4:	08 95       	ret

000019d6 <do_rand>:
    19d6:	8f 92       	push	r8
    19d8:	9f 92       	push	r9
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	ec 01       	movw	r28, r24
    19ec:	68 81       	ld	r22, Y
    19ee:	79 81       	ldd	r23, Y+1	; 0x01
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	61 15       	cp	r22, r1
    19f6:	71 05       	cpc	r23, r1
    19f8:	81 05       	cpc	r24, r1
    19fa:	91 05       	cpc	r25, r1
    19fc:	21 f4       	brne	.+8      	; 0x1a06 <do_rand+0x30>
    19fe:	64 e2       	ldi	r22, 0x24	; 36
    1a00:	79 ed       	ldi	r23, 0xD9	; 217
    1a02:	8b e5       	ldi	r24, 0x5B	; 91
    1a04:	97 e0       	ldi	r25, 0x07	; 7
    1a06:	2d e1       	ldi	r18, 0x1D	; 29
    1a08:	33 ef       	ldi	r19, 0xF3	; 243
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divmodsi4>
    1a12:	49 01       	movw	r8, r18
    1a14:	5a 01       	movw	r10, r20
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	a7 ea       	ldi	r26, 0xA7	; 167
    1a1c:	b1 e4       	ldi	r27, 0x41	; 65
    1a1e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__muluhisi3>
    1a22:	6b 01       	movw	r12, r22
    1a24:	7c 01       	movw	r14, r24
    1a26:	ac ee       	ldi	r26, 0xEC	; 236
    1a28:	b4 ef       	ldi	r27, 0xF4	; 244
    1a2a:	a5 01       	movw	r20, r10
    1a2c:	94 01       	movw	r18, r8
    1a2e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__mulohisi3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8c 0d       	add	r24, r12
    1a38:	9d 1d       	adc	r25, r13
    1a3a:	ae 1d       	adc	r26, r14
    1a3c:	bf 1d       	adc	r27, r15
    1a3e:	b7 ff       	sbrs	r27, 7
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <do_rand+0x72>
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	a1 09       	sbc	r26, r1
    1a46:	b0 48       	sbci	r27, 0x80	; 128
    1a48:	88 83       	st	Y, r24
    1a4a:	99 83       	std	Y+1, r25	; 0x01
    1a4c:	aa 83       	std	Y+2, r26	; 0x02
    1a4e:	bb 83       	std	Y+3, r27	; 0x03
    1a50:	9f 77       	andi	r25, 0x7F	; 127
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	df 90       	pop	r13
    1a5c:	cf 90       	pop	r12
    1a5e:	bf 90       	pop	r11
    1a60:	af 90       	pop	r10
    1a62:	9f 90       	pop	r9
    1a64:	8f 90       	pop	r8
    1a66:	08 95       	ret

00001a68 <rand_r>:
    1a68:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <do_rand>
    1a6c:	08 95       	ret

00001a6e <rand>:
    1a6e:	87 e0       	ldi	r24, 0x07	; 7
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <do_rand>
    1a76:	08 95       	ret

00001a78 <srand>:
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	80 93 07 01 	sts	0x0107, r24
    1a80:	90 93 08 01 	sts	0x0108, r25
    1a84:	a0 93 09 01 	sts	0x0109, r26
    1a88:	b0 93 0a 01 	sts	0x010A, r27
    1a8c:	08 95       	ret

00001a8e <eeprom_read_byte>:
    1a8e:	f9 99       	sbic	0x1f, 1	; 31
    1a90:	fe cf       	rjmp	.-4      	; 0x1a8e <eeprom_read_byte>
    1a92:	92 bd       	out	0x22, r25	; 34
    1a94:	81 bd       	out	0x21, r24	; 33
    1a96:	f8 9a       	sbi	0x1f, 0	; 31
    1a98:	99 27       	eor	r25, r25
    1a9a:	80 b5       	in	r24, 0x20	; 32
    1a9c:	08 95       	ret

00001a9e <eeprom_write_byte>:
    1a9e:	26 2f       	mov	r18, r22

00001aa0 <eeprom_write_r18>:
    1aa0:	f9 99       	sbic	0x1f, 1	; 31
    1aa2:	fe cf       	rjmp	.-4      	; 0x1aa0 <eeprom_write_r18>
    1aa4:	1f ba       	out	0x1f, r1	; 31
    1aa6:	92 bd       	out	0x22, r25	; 34
    1aa8:	81 bd       	out	0x21, r24	; 33
    1aaa:	20 bd       	out	0x20, r18	; 32
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	fa 9a       	sbi	0x1f, 2	; 31
    1ab2:	f9 9a       	sbi	0x1f, 1	; 31
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	08 95       	ret

00001aba <__divmodsi4>:
    1aba:	05 2e       	mov	r0, r21
    1abc:	97 fb       	bst	r25, 7
    1abe:	1e f4       	brtc	.+6      	; 0x1ac6 <__divmodsi4+0xc>
    1ac0:	00 94       	com	r0
    1ac2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__negsi2>
    1ac6:	57 fd       	sbrc	r21, 7
    1ac8:	07 d0       	rcall	.+14     	; 0x1ad8 <__divmodsi4_neg2>
    1aca:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__udivmodsi4>
    1ace:	07 fc       	sbrc	r0, 7
    1ad0:	03 d0       	rcall	.+6      	; 0x1ad8 <__divmodsi4_neg2>
    1ad2:	4e f4       	brtc	.+18     	; 0x1ae6 <__divmodsi4_exit>
    1ad4:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__negsi2>

00001ad8 <__divmodsi4_neg2>:
    1ad8:	50 95       	com	r21
    1ada:	40 95       	com	r20
    1adc:	30 95       	com	r19
    1ade:	21 95       	neg	r18
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae6 <__divmodsi4_exit>:
    1ae6:	08 95       	ret

00001ae8 <__negsi2>:
    1ae8:	90 95       	com	r25
    1aea:	80 95       	com	r24
    1aec:	70 95       	com	r23
    1aee:	61 95       	neg	r22
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	8f 4f       	sbci	r24, 0xFF	; 255
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	08 95       	ret

00001af8 <__muluhisi3>:
    1af8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__umulhisi3>
    1afc:	a5 9f       	mul	r26, r21
    1afe:	90 0d       	add	r25, r0
    1b00:	b4 9f       	mul	r27, r20
    1b02:	90 0d       	add	r25, r0
    1b04:	a4 9f       	mul	r26, r20
    1b06:	80 0d       	add	r24, r0
    1b08:	91 1d       	adc	r25, r1
    1b0a:	11 24       	eor	r1, r1
    1b0c:	08 95       	ret

00001b0e <__mulshisi3>:
    1b0e:	b7 ff       	sbrs	r27, 7
    1b10:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__muluhisi3>

00001b14 <__mulohisi3>:
    1b14:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__muluhisi3>
    1b18:	82 1b       	sub	r24, r18
    1b1a:	93 0b       	sbc	r25, r19
    1b1c:	08 95       	ret

00001b1e <__udivmodsi4>:
    1b1e:	a1 e2       	ldi	r26, 0x21	; 33
    1b20:	1a 2e       	mov	r1, r26
    1b22:	aa 1b       	sub	r26, r26
    1b24:	bb 1b       	sub	r27, r27
    1b26:	fd 01       	movw	r30, r26
    1b28:	0d c0       	rjmp	.+26     	; 0x1b44 <__udivmodsi4_ep>

00001b2a <__udivmodsi4_loop>:
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	ee 1f       	adc	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	a2 17       	cp	r26, r18
    1b34:	b3 07       	cpc	r27, r19
    1b36:	e4 07       	cpc	r30, r20
    1b38:	f5 07       	cpc	r31, r21
    1b3a:	20 f0       	brcs	.+8      	; 0x1b44 <__udivmodsi4_ep>
    1b3c:	a2 1b       	sub	r26, r18
    1b3e:	b3 0b       	sbc	r27, r19
    1b40:	e4 0b       	sbc	r30, r20
    1b42:	f5 0b       	sbc	r31, r21

00001b44 <__udivmodsi4_ep>:
    1b44:	66 1f       	adc	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	88 1f       	adc	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	1a 94       	dec	r1
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <__udivmodsi4_loop>
    1b50:	60 95       	com	r22
    1b52:	70 95       	com	r23
    1b54:	80 95       	com	r24
    1b56:	90 95       	com	r25
    1b58:	9b 01       	movw	r18, r22
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	bd 01       	movw	r22, r26
    1b5e:	cf 01       	movw	r24, r30
    1b60:	08 95       	ret

00001b62 <_exit>:
    1b62:	f8 94       	cli

00001b64 <__stop_program>:
    1b64:	ff cf       	rjmp	.-2      	; 0x1b64 <__stop_program>
