
build/escape_light.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	e8 02       	muls	r30, r24
      6a:	64 03       	mulsu	r22, r20
      6c:	bc 02       	muls	r27, r28
      6e:	b3 02       	muls	r27, r19
      70:	b9 02       	muls	r27, r25
      72:	46 03       	mulsu	r20, r22
      74:	3b 03       	fmul	r19, r19
      76:	c6 09       	sbc	r28, r6
      78:	a3 08       	sbc	r10, r3
      7a:	a3 08       	sbc	r10, r3
      7c:	c3 09       	sbc	r28, r3
      7e:	cf 09       	sbc	r28, r15
      80:	bf 09       	sbc	r27, r15
      82:	d6 09       	sbc	r29, r6
      84:	d2 09       	sbc	r29, r2
      86:	da 09       	sbc	r29, r10
      88:	92 09       	sbc	r25, r2
      8a:	64 09       	sbc	r22, r4

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 ef       	ldi	r30, 0xF2	; 242
      b8:	f1 e2       	ldi	r31, 0x21	; 33
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a2 34       	cpi	r26, 0x42	; 66
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a2 e4       	ldi	r26, 0x42	; 66
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 3b       	cpi	r26, 0xB4	; 180
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <main>
      da:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
      f4:	80 91 46 01 	lds	r24, 0x0146
      f8:	90 91 47 01 	lds	r25, 0x0147
      fc:	02 97       	sbiw	r24, 0x02	; 2
      fe:	69 f0       	breq	.+26     	; 0x11a <setup+0x26>
    {
        current_motion = new_motion;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 47 01 	sts	0x0147, r25
     108:	80 93 46 01 	sts	0x0146, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     10c:	0e 94 01 04 	call	0x802	; 0x802 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	80 91 ad 01 	lds	r24, 0x01AD
     116:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <set_motors>

void setup()
{
    // This ensures that the robot starts moving.
    set_motion(LEFT);
    last_update = kilo_ticks;
     11a:	80 91 73 01 	lds	r24, 0x0173
     11e:	90 91 74 01 	lds	r25, 0x0174
     122:	a0 91 75 01 	lds	r26, 0x0175
     126:	b0 91 76 01 	lds	r27, 0x0176
     12a:	80 93 4c 01 	sts	0x014C, r24
     12e:	90 93 4d 01 	sts	0x014D, r25
     132:	a0 93 4e 01 	sts	0x014E, r26
     136:	b0 93 4f 01 	sts	0x014F, r27
     13a:	08 95       	ret

0000013c <loop>:
}

void loop()
{
    printf("light intensity: %d\n", get_ambientlight());
     13c:	0e 94 11 04 	call	0x822	; 0x822 <get_ambientlight>
     140:	9f 93       	push	r25
     142:	8f 93       	push	r24
     144:	89 e1       	ldi	r24, 0x19	; 25
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	9f 93       	push	r25
     14a:	8f 93       	push	r24
     14c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <printf>
    if (kilo_ticks > (last_update + 32))
     150:	40 91 73 01 	lds	r20, 0x0173
     154:	50 91 74 01 	lds	r21, 0x0174
     158:	60 91 75 01 	lds	r22, 0x0175
     15c:	70 91 76 01 	lds	r23, 0x0176
     160:	80 91 4c 01 	lds	r24, 0x014C
     164:	90 91 4d 01 	lds	r25, 0x014D
     168:	a0 91 4e 01 	lds	r26, 0x014E
     16c:	b0 91 4f 01 	lds	r27, 0x014F
     170:	80 96       	adiw	r24, 0x20	; 32
     172:	a1 1d       	adc	r26, r1
     174:	b1 1d       	adc	r27, r1
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	84 17       	cp	r24, r20
     180:	95 07       	cpc	r25, r21
     182:	a6 07       	cpc	r26, r22
     184:	b7 07       	cpc	r27, r23
     186:	30 f5       	brcc	.+76     	; 0x1d4 <loop+0x98>
    {
        last_update = kilo_ticks;
     188:	80 91 73 01 	lds	r24, 0x0173
     18c:	90 91 74 01 	lds	r25, 0x0174
     190:	a0 91 75 01 	lds	r26, 0x0175
     194:	b0 91 76 01 	lds	r27, 0x0176
     198:	80 93 4c 01 	sts	0x014C, r24
     19c:	90 93 4d 01 	sts	0x014D, r25
     1a0:	a0 93 4e 01 	sts	0x014E, r26
     1a4:	b0 93 4f 01 	sts	0x014F, r27
        if (current_light < (previous_light-DIFF_THRE))
     1a8:	80 91 42 01 	lds	r24, 0x0142
     1ac:	90 91 43 01 	lds	r25, 0x0143
     1b0:	20 91 44 01 	lds	r18, 0x0144
     1b4:	30 91 45 01 	lds	r19, 0x0145
     1b8:	ac 01       	movw	r20, r24
     1ba:	4c 53       	subi	r20, 0x3C	; 60
     1bc:	51 09       	sbc	r21, r1
     1be:	24 17       	cp	r18, r20
     1c0:	35 07       	cpc	r19, r21
     1c2:	4c f0       	brlt	.+18     	; 0x1d6 <loop+0x9a>
        {
            set_motion(RIGHT);
        }
        else if (current_light > (previous_light+DIFF_THRE))
     1c4:	cc 96       	adiw	r24, 0x3c	; 60
     1c6:	82 17       	cp	r24, r18
     1c8:	93 07       	cpc	r25, r19
     1ca:	ec f0       	brlt	.+58     	; 0x206 <loop+0xca>
        {
            set_motion(LEFT);
        }
        previous_light = current_light;
     1cc:	30 93 43 01 	sts	0x0143, r19
     1d0:	20 93 42 01 	sts	0x0142, r18
     1d4:	08 95       	ret

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1d6:	80 91 46 01 	lds	r24, 0x0146
     1da:	90 91 47 01 	lds	r25, 0x0147
     1de:	03 97       	sbiw	r24, 0x03	; 3
     1e0:	a9 f3       	breq	.-22     	; 0x1cc <loop+0x90>
    {
        current_motion = new_motion;
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	90 93 47 01 	sts	0x0147, r25
     1ea:	80 93 46 01 	sts	0x0146, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     1ee:	0e 94 01 04 	call	0x802	; 0x802 <spinup_motors>
            set_motors(0, kilo_turn_right);
     1f2:	60 91 99 01 	lds	r22, 0x0199
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <set_motors>
     1fc:	20 91 44 01 	lds	r18, 0x0144
     200:	30 91 45 01 	lds	r19, 0x0145
     204:	e3 cf       	rjmp	.-58     	; 0x1cc <loop+0x90>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     206:	80 91 46 01 	lds	r24, 0x0146
     20a:	90 91 47 01 	lds	r25, 0x0147
     20e:	02 97       	sbiw	r24, 0x02	; 2
     210:	e9 f2       	breq	.-70     	; 0x1cc <loop+0x90>
    {
        current_motion = new_motion;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	90 93 47 01 	sts	0x0147, r25
     21a:	80 93 46 01 	sts	0x0146, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     21e:	0e 94 01 04 	call	0x802	; 0x802 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	80 91 ad 01 	lds	r24, 0x01AD
     228:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <set_motors>
     22c:	20 91 44 01 	lds	r18, 0x0144
     230:	30 91 45 01 	lds	r19, 0x0145
     234:	cb cf       	rjmp	.-106    	; 0x1cc <loop+0x90>

00000236 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     236:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     238:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     23a:	8c e0       	ldi	r24, 0x0C	; 12
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	90 93 c5 00 	sts	0x00C5, r25
     242:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     246:	e0 ec       	ldi	r30, 0xC0	; 192
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8d 7f       	andi	r24, 0xFD	; 253
     24e:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     250:	e2 ec       	ldi	r30, 0xC2	; 194
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	86 60       	ori	r24, 0x06	; 6
     258:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     25a:	e1 ec       	ldi	r30, 0xC1	; 193
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 60       	ori	r24, 0x08	; 8
     262:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	90 93 b1 01 	sts	0x01B1, r25
     26c:	80 93 b0 01 	sts	0x01B0, r24
    sei();
     270:	78 94       	sei
     272:	08 95       	ret

00000274 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     274:	20 91 46 01 	lds	r18, 0x0146
     278:	30 91 47 01 	lds	r19, 0x0147
     27c:	28 17       	cp	r18, r24
     27e:	39 07       	cpc	r19, r25
     280:	71 f0       	breq	.+28     	; 0x29e <set_motion+0x2a>
    {
        current_motion = new_motion;
     282:	90 93 47 01 	sts	0x0147, r25
     286:	80 93 46 01 	sts	0x0146, r24
        
        if (current_motion == STOP)
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	81 f0       	breq	.+32     	; 0x2ae <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	91 05       	cpc	r25, r1
     292:	89 f0       	breq	.+34     	; 0x2b6 <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	91 05       	cpc	r25, r1
     298:	b1 f0       	breq	.+44     	; 0x2c6 <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     29a:	03 97       	sbiw	r24, 0x03	; 3
     29c:	09 f0       	breq	.+2      	; 0x2a0 <set_motion+0x2c>
     29e:	08 95       	ret
        {
            spinup_motors();
     2a0:	0e 94 01 04 	call	0x802	; 0x802 <spinup_motors>
            set_motors(0, kilo_turn_right);
     2a4:	60 91 99 01 	lds	r22, 0x0199
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2b6:	0e 94 01 04 	call	0x802	; 0x802 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2ba:	60 91 ac 01 	lds	r22, 0x01AC
     2be:	80 91 ab 01 	lds	r24, 0x01AB
     2c2:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     2c6:	0e 94 01 04 	call	0x802	; 0x802 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	80 91 ad 01 	lds	r24, 0x01AD
     2d0:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <set_motors>

000002d4 <sample_light>:
    }
}

// Function to sample light.
void sample_light()
{
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int sum = 0;
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	10 e0       	ldi	r17, 0x00	; 0
void sample_light()
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
     2e0:	c0 e0       	ldi	r28, 0x00	; 0
     2e2:	d0 e0       	ldi	r29, 0x00	; 0
    int sum = 0;


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     2e4:	0e 94 11 04 	call	0x822	; 0x822 <get_ambientlight>
        
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
     2e8:	8f 3f       	cpi	r24, 0xFF	; 255
     2ea:	2f ef       	ldi	r18, 0xFF	; 255
     2ec:	92 07       	cpc	r25, r18
     2ee:	19 f0       	breq	.+6      	; 0x2f6 <sample_light+0x22>
        {
            sum = sum + sample;
     2f0:	08 0f       	add	r16, r24
     2f2:	19 1f       	adc	r17, r25
            number_of_samples = number_of_samples + 1;
     2f4:	21 96       	adiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int sum = 0;


    while (number_of_samples < 300)
     2f6:	cc 32       	cpi	r28, 0x2C	; 44
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	d8 07       	cpc	r29, r24
     2fc:	9c f3       	brlt	.-26     	; 0x2e4 <sample_light+0x10>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    current_light = sum / number_of_samples;
     2fe:	c8 01       	movw	r24, r16
     300:	be 01       	movw	r22, r28
     302:	0e 94 19 0b 	call	0x1632	; 0x1632 <__divmodhi4>
     306:	60 93 44 01 	sts	0x0144, r22
     30a:	70 93 45 01 	sts	0x0145, r23

    printf("light sampled: %d\n",current_light);
     30e:	7f 93       	push	r23
     310:	6f 93       	push	r22
     312:	8e e2       	ldi	r24, 0x2E	; 46
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	9f 93       	push	r25
     318:	8f 93       	push	r24
     31a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <printf>
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	08 95       	ret

00000330 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     330:	08 95       	ret

00000332 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	08 95       	ret

00000338 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     338:	08 95       	ret

0000033a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
    cli();
     348:	f8 94       	cli

    ports_off();
     34a:	14 b8       	out	0x04, r1	; 4
     34c:	17 b8       	out	0x07, r1	; 7
     34e:	1a b8       	out	0x0a, r1	; 10
     350:	15 b8       	out	0x05, r1	; 5
     352:	18 b8       	out	0x08, r1	; 8
     354:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     356:	52 9a       	sbi	0x0a, 2	; 10
     358:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     35a:	14 bc       	out	0x24, r1	; 36
     35c:	85 e0       	ldi	r24, 0x05	; 5
     35e:	85 bd       	out	0x25, r24	; 37
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	87 bd       	out	0x27, r24	; 39
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     36a:	10 92 80 00 	sts	0x0080, r1
     36e:	10 92 81 00 	sts	0x0081, r1
     372:	2f e8       	ldi	r18, 0x8F	; 143
     374:	3b e0       	ldi	r19, 0x0B	; 11
     376:	30 93 89 00 	sts	0x0089, r19
     37a:	20 93 88 00 	sts	0x0088, r18
     37e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     382:	53 98       	cbi	0x0a, 3	; 10
     384:	23 98       	cbi	0x04, 3	; 4
     386:	91 ea       	ldi	r25, 0xA1	; 161
     388:	90 93 b0 00 	sts	0x00B0, r25
     38c:	80 93 b1 00 	sts	0x00B1, r24
     390:	10 92 b4 00 	sts	0x00B4, r1
     394:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     398:	8b e0       	ldi	r24, 0x0B	; 11
     39a:	80 bf       	out	0x30, r24	; 48
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     3a2:	86 e0       	ldi	r24, 0x06	; 6
     3a4:	80 93 7c 00 	sts	0x007C, r24
     3a8:	83 e8       	ldi	r24, 0x83	; 131
     3aa:	80 93 7a 00 	sts	0x007A, r24
     3ae:	80 91 7a 00 	lds	r24, 0x007A
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	80 93 7a 00 	sts	0x007A, r24
     3b8:	80 91 7a 00 	lds	r24, 0x007A
     3bc:	86 fd       	sbrc	r24, 6
     3be:	fc cf       	rjmp	.-8      	; 0x3b8 <kilo_init+0x7e>
    adc_trigger_high_gain();
     3c0:	10 92 7c 00 	sts	0x007C, r1
     3c4:	83 ea       	ldi	r24, 0xA3	; 163
     3c6:	80 93 7a 00 	sts	0x007A, r24
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
    if (osccal != 0xFF)
     3d8:	8f 3f       	cpi	r24, 0xFF	; 255
     3da:	11 f0       	breq	.+4      	; 0x3e0 <kilo_init+0xa6>
        OSCCAL = osccal;
     3dc:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     3e0:	10 92 77 01 	sts	0x0177, r1
    rx_leadingbit = 1;
     3e4:	c1 e0       	ldi	r28, 0x01	; 1
     3e6:	c0 93 50 01 	sts	0x0150, r28
    rx_leadingbyte = 1;
     3ea:	c0 93 94 01 	sts	0x0194, r28
    rx_byteindex = 0;
     3ee:	10 92 6e 01 	sts	0x016E, r1
    rx_bytevalue = 0;
     3f2:	10 92 a8 01 	sts	0x01A8, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3f6:	80 e9       	ldi	r24, 0x90	; 144
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     3fe:	80 93 6d 01 	sts	0x016D, r24
    if (tx_mask & ~TX_MASK_MAX)
     402:	80 91 6d 01 	lds	r24, 0x016D
     406:	88 73       	andi	r24, 0x38	; 56
     408:	11 f0       	breq	.+4      	; 0x40e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     40a:	c0 93 6d 01 	sts	0x016D, r28
    tx_clock = 0;
     40e:	10 92 98 01 	sts	0x0198, r1
     412:	10 92 97 01 	sts	0x0197, r1
    tx_increment = 255;
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 96 01 	sts	0x0196, r25
     41e:	80 93 95 01 	sts	0x0195, r24
    kilo_ticks = 0;
     422:	10 92 73 01 	sts	0x0173, r1
     426:	10 92 74 01 	sts	0x0174, r1
     42a:	10 92 75 01 	sts	0x0175, r1
     42e:	10 92 76 01 	sts	0x0176, r1
    kilo_state = IDLE;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 4b 01 	sts	0x014B, r24
    kilo_tx_period = 3906;
     438:	82 e4       	ldi	r24, 0x42	; 66
     43a:	9f e0       	ldi	r25, 0x0F	; 15
     43c:	90 93 a7 01 	sts	0x01A7, r25
     440:	80 93 a6 01 	sts	0x01A6, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     444:	80 eb       	ldi	r24, 0xB0	; 176
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     44c:	c8 2f       	mov	r28, r24
     44e:	81 eb       	ldi	r24, 0xB1	; 177
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     456:	2c 2f       	mov	r18, r28
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	38 2b       	or	r19, r24
     45c:	30 93 aa 01 	sts	0x01AA, r19
     460:	20 93 a9 01 	sts	0x01A9, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     464:	85 e0       	ldi	r24, 0x05	; 5
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     46c:	80 93 ad 01 	sts	0x01AD, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     470:	89 e0       	ldi	r24, 0x09	; 9
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     478:	80 93 99 01 	sts	0x0199, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     47c:	8c e0       	ldi	r24, 0x0C	; 12
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     484:	80 93 ab 01 	sts	0x01AB, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     488:	84 e1       	ldi	r24, 0x14	; 20
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     490:	80 93 ac 01 	sts	0x01AC, r24
     494:	58 e7       	ldi	r21, 0x78	; 120
     496:	e5 2e       	mov	r14, r21
     498:	51 e0       	ldi	r21, 0x01	; 1
     49a:	f5 2e       	mov	r15, r21
     49c:	01 e5       	ldi	r16, 0x51	; 81
     49e:	11 e0       	ldi	r17, 0x01	; 1
     4a0:	c0 e2       	ldi	r28, 0x20	; 32
     4a2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4a4:	ce 01       	movw	r24, r28
     4a6:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     4aa:	d8 2e       	mov	r13, r24
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     4b4:	2d 2d       	mov	r18, r13
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	32 2f       	mov	r19, r18
     4ba:	22 27       	eor	r18, r18
     4bc:	28 2b       	or	r18, r24
     4be:	f7 01       	movw	r30, r14
     4c0:	21 93       	st	Z+, r18
     4c2:	31 93       	st	Z+, r19
     4c4:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     4c6:	ce 01       	movw	r24, r28
     4c8:	c0 96       	adiw	r24, 0x30	; 48
     4ca:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     4ce:	d8 2e       	mov	r13, r24
     4d0:	ce 01       	movw	r24, r28
     4d2:	c1 96       	adiw	r24, 0x31	; 49
     4d4:	0e 94 56 10 	call	0x20ac	; 0x20ac <eeprom_read_byte>
     4d8:	2d 2d       	mov	r18, r13
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	32 2f       	mov	r19, r18
     4de:	22 27       	eor	r18, r18
     4e0:	28 2b       	or	r18, r24
     4e2:	f8 01       	movw	r30, r16
     4e4:	21 93       	st	Z+, r18
     4e6:	31 93       	st	Z+, r19
     4e8:	8f 01       	movw	r16, r30
     4ea:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4ec:	cc 33       	cpi	r28, 0x3C	; 60
     4ee:	d1 05       	cpc	r29, r1
     4f0:	c9 f6       	brne	.-78     	; 0x4a4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4f2:	78 94       	sei
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	08 95       	ret

00000504 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	11 24       	eor	r1, r1
     50e:	8f 93       	push	r24
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	a8 95       	wdr
     516:	80 91 60 00 	lds	r24, 0x0060
     51a:	88 61       	ori	r24, 0x18	; 24
     51c:	80 93 60 00 	sts	0x0060, r24
     520:	10 92 60 00 	sts	0x0060, r1
     524:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     526:	8f 91       	pop	r24
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     532:	3c 01       	movw	r6, r24
     534:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     536:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     538:	99 24       	eor	r9, r9
     53a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     53c:	84 e0       	ldi	r24, 0x04	; 4
     53e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     540:	96 e0       	ldi	r25, 0x06	; 6
     542:	a9 2e       	mov	r10, r25
     544:	23 e8       	ldi	r18, 0x83	; 131
     546:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     548:	38 e1       	ldi	r19, 0x18	; 24
     54a:	d3 2e       	mov	r13, r19
     54c:	49 e2       	ldi	r20, 0x29	; 41
     54e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     550:	90 91 4b 01 	lds	r25, 0x014B
     554:	e9 2f       	mov	r30, r25
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	e7 30       	cpi	r30, 0x07	; 7
     55a:	f1 05       	cpc	r31, r1
     55c:	c8 f7       	brcc	.-14     	; 0x550 <kilo_start+0x1e>
     55e:	ec 5c       	subi	r30, 0xCC	; 204
     560:	ff 4f       	sbci	r31, 0xFF	; 255
     562:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     566:	11 23       	and	r17, r17
     568:	09 f4       	brne	.+2      	; 0x56c <kilo_start+0x3a>
     56a:	fc c0       	rjmp	.+504    	; 0x764 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     56c:	c0 92 4b 01 	sts	0x014B, r12
     570:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     572:	fe 01       	movw	r30, r28
     574:	09 95       	icall
                break;
     576:	ec cf       	rjmp	.-40     	; 0x550 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     578:	80 91 77 01 	lds	r24, 0x0177
     57c:	81 11       	cpse	r24, r1
     57e:	eb c0       	rjmp	.+470    	; 0x756 <kilo_start+0x224>
        cli();                                    // disable interrupts
     580:	f8 94       	cli
        adc_setup_conversion(6);
     582:	a0 92 7c 00 	sts	0x007C, r10
     586:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     58a:	80 91 7a 00 	lds	r24, 0x007A
     58e:	80 64       	ori	r24, 0x40	; 64
     590:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     594:	90 91 7a 00 	lds	r25, 0x007A
     598:	96 fd       	sbrc	r25, 6
     59a:	fc cf       	rjmp	.-8      	; 0x594 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     59c:	80 91 78 00 	lds	r24, 0x0078
     5a0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5a4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     5a6:	8b 3a       	cpi	r24, 0xAB	; 171
     5a8:	e2 e0       	ldi	r30, 0x02	; 2
     5aa:	9e 07       	cpc	r25, r30
     5ac:	0c f0       	brlt	.+2      	; 0x5b0 <kilo_start+0x7e>
     5ae:	ed c0       	rjmp	.+474    	; 0x78a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     5b0:	89 38       	cpi	r24, 0x89	; 137
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	9f 07       	cpc	r25, r31
     5b6:	0c f0       	brlt	.+2      	; 0x5ba <kilo_start+0x88>
     5b8:	ef c0       	rjmp	.+478    	; 0x798 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     5ba:	87 36       	cpi	r24, 0x67	; 103
     5bc:	92 40       	sbci	r25, 0x02	; 2
     5be:	0c f4       	brge	.+2      	; 0x5c2 <kilo_start+0x90>
     5c0:	ca c0       	rjmp	.+404    	; 0x756 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5c2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5c4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5c6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5c8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5ca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5cc:	3c 98       	cbi	0x07, 4	; 7
     5ce:	c0 cf       	rjmp	.-128    	; 0x550 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     5d0:	f8 94       	cli
                acomp_off();
     5d2:	80 b7       	in	r24, 0x30	; 48
     5d4:	87 7f       	andi	r24, 0xF7	; 247
     5d6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     5d8:	80 91 7a 00 	lds	r24, 0x007A
     5dc:	8f 77       	andi	r24, 0x7F	; 127
     5de:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     5e2:	14 b8       	out	0x04, r1	; 4
     5e4:	17 b8       	out	0x07, r1	; 7
     5e6:	1a b8       	out	0x0a, r1	; 10
     5e8:	15 b8       	out	0x05, r1	; 5
     5ea:	18 b8       	out	0x08, r1	; 8
     5ec:	1b b8       	out	0x0b, r1	; 11
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	a8 95       	wdr
     5f4:	d0 92 60 00 	sts	0x0060, r13
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     5fe:	80 91 60 00 	lds	r24, 0x0060
     602:	80 64       	ori	r24, 0x40	; 64
     604:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     608:	93 b7       	in	r25, 0x33	; 51
     60a:	91 7f       	andi	r25, 0xF1	; 241
     60c:	94 60       	ori	r25, 0x04	; 4
     60e:	93 bf       	out	0x33, r25	; 51
                cli();
     610:	f8 94       	cli
                sleep_enable();
     612:	83 b7       	in	r24, 0x33	; 51
     614:	81 60       	ori	r24, 0x01	; 1
     616:	83 bf       	out	0x33, r24	; 51
                sei();
     618:	78 94       	sei
                sleep_cpu();
     61a:	88 95       	sleep
                sleep_disable();
     61c:	83 b7       	in	r24, 0x33	; 51
     61e:	8e 7f       	andi	r24, 0xFE	; 254
     620:	83 bf       	out	0x33, r24	; 51
                sei();
     622:	78 94       	sei
                rx_busy = 0;
     624:	10 92 77 01 	sts	0x0177, r1
                ports_on();
     628:	52 9a       	sbi	0x0a, 2	; 10
     62a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     62c:	80 91 7a 00 	lds	r24, 0x007A
     630:	80 68       	ori	r24, 0x80	; 128
     632:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     636:	87 e5       	ldi	r24, 0x57	; 87
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <kilo_start+0x108>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <kilo_start+0x10e>
     640:	00 00       	nop
                _delay_us(300);
                acomp_on();
     642:	80 b7       	in	r24, 0x30	; 48
     644:	88 61       	ori	r24, 0x18	; 24
     646:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     648:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     64a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     64c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     64e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     650:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     652:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     654:	ef e1       	ldi	r30, 0x1F	; 31
     656:	fe e4       	ldi	r31, 0x4E	; 78
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <kilo_start+0x126>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <kilo_start+0x12c>
     65e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     660:	80 91 77 01 	lds	r24, 0x0177
     664:	81 11       	cpse	r24, r1
     666:	81 c0       	rjmp	.+258    	; 0x76a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     668:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     66a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     66c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     66e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     670:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     672:	3c 98       	cbi	0x07, 4	; 7
     674:	6d cf       	rjmp	.-294    	; 0x550 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     676:	80 91 49 01 	lds	r24, 0x0149
     67a:	81 11       	cpse	r24, r1
     67c:	41 c0       	rjmp	.+130    	; 0x700 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     67e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     682:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     686:	10 92 4a 01 	sts	0x014A, r1
     68a:	62 cf       	rjmp	.-316    	; 0x550 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     68c:	48 99       	sbic	0x09, 0	; 9
     68e:	ec cf       	rjmp	.-40     	; 0x668 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     690:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     692:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     694:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     696:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     698:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     69a:	3c 98       	cbi	0x07, 4	; 7
     69c:	8f ec       	ldi	r24, 0xCF	; 207
     69e:	97 e0       	ldi	r25, 0x07	; 7
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <kilo_start+0x16e>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <kilo_start+0x174>
     6a6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6aa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6ac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6ae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6b0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6b2:	3c 98       	cbi	0x07, 4	; 7
     6b4:	9f ef       	ldi	r25, 0xFF	; 255
     6b6:	e1 ee       	ldi	r30, 0xE1	; 225
     6b8:	f4 e0       	ldi	r31, 0x04	; 4
     6ba:	91 50       	subi	r25, 0x01	; 1
     6bc:	e0 40       	sbci	r30, 0x00	; 0
     6be:	f0 40       	sbci	r31, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <kilo_start+0x188>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <kilo_start+0x192>
     6c4:	00 00       	nop
     6c6:	44 cf       	rjmp	.-376    	; 0x550 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6c8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6ca:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6cc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6ce:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6d0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6d2:	3c 98       	cbi	0x07, 4	; 7
     6d4:	ef ec       	ldi	r30, 0xCF	; 207
     6d6:	f7 e0       	ldi	r31, 0x07	; 7
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <kilo_start+0x1a6>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <kilo_start+0x1ac>
     6de:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6e0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6e2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6e4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6e6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6e8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6ea:	3c 98       	cbi	0x07, 4	; 7
     6ec:	ff ef       	ldi	r31, 0xFF	; 255
     6ee:	21 ee       	ldi	r18, 0xE1	; 225
     6f0:	84 e0       	ldi	r24, 0x04	; 4
     6f2:	f1 50       	subi	r31, 0x01	; 1
     6f4:	20 40       	sbci	r18, 0x00	; 0
     6f6:	80 40       	sbci	r24, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <kilo_start+0x1c0>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <kilo_start+0x1ca>
     6fc:	00 00       	nop
     6fe:	28 cf       	rjmp	.-432    	; 0x550 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     700:	90 91 49 01 	lds	r25, 0x0149
     704:	80 91 4a 01 	lds	r24, 0x014A
     708:	98 17       	cp	r25, r24
     70a:	09 f4       	brne	.+2      	; 0x70e <kilo_start+0x1dc>
     70c:	21 cf       	rjmp	.-446    	; 0x550 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     70e:	80 91 49 01 	lds	r24, 0x0149
     712:	80 93 4a 01 	sts	0x014A, r24
                        if (cur_motion == MOVE_LEFT) {
     716:	80 91 49 01 	lds	r24, 0x0149
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	09 f4       	brne	.+2      	; 0x720 <kilo_start+0x1ee>
     71e:	50 c0       	rjmp	.+160    	; 0x7c0 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     720:	80 91 49 01 	lds	r24, 0x0149
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     724:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     728:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	d9 f1       	breq	.+118    	; 0x7a6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     730:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     734:	90 92 b4 00 	sts	0x00B4, r9
     738:	8f e2       	ldi	r24, 0x2F	; 47
     73a:	95 e7       	ldi	r25, 0x75	; 117
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <kilo_start+0x20a>
     740:	00 c0       	rjmp	.+0      	; 0x742 <kilo_start+0x210>
     742:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     744:	80 91 ac 01 	lds	r24, 0x01AC
     748:	90 91 ab 01 	lds	r25, 0x01AB
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     74c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     750:	80 93 b4 00 	sts	0x00B4, r24
     754:	fd ce       	rjmp	.-518    	; 0x550 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     756:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     758:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     75a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     75c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     75e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     760:	3c 98       	cbi	0x07, 4	; 7
     762:	f6 ce       	rjmp	.-532    	; 0x550 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     764:	f3 01       	movw	r30, r6
     766:	09 95       	icall
     768:	01 cf       	rjmp	.-510    	; 0x56c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     76a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     76c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     76e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     770:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     772:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     774:	3c 98       	cbi	0x07, 4	; 7
     776:	ff ef       	ldi	r31, 0xFF	; 255
     778:	20 e7       	ldi	r18, 0x70	; 112
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	f1 50       	subi	r31, 0x01	; 1
     77e:	20 40       	sbci	r18, 0x00	; 0
     780:	80 40       	sbci	r24, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <kilo_start+0x24a>
     784:	00 c0       	rjmp	.+0      	; 0x786 <kilo_start+0x254>
     786:	00 00       	nop
     788:	6f cf       	rjmp	.-290    	; 0x668 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     78a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     78c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     78e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     790:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     792:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     794:	3c 98       	cbi	0x07, 4	; 7
     796:	dc ce       	rjmp	.-584    	; 0x550 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     798:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     79a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     79c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     79e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     7a0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     7a2:	3c 9a       	sbi	0x07, 4	; 7
     7a4:	d5 ce       	rjmp	.-598    	; 0x550 <kilo_start+0x1e>
     7a6:	ef e2       	ldi	r30, 0x2F	; 47
     7a8:	f5 e7       	ldi	r31, 0x75	; 117
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <kilo_start+0x278>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <kilo_start+0x27e>
     7b0:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     7b2:	80 91 99 01 	lds	r24, 0x0199
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7b6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7ba:	80 93 b4 00 	sts	0x00B4, r24
     7be:	c8 ce       	rjmp	.-624    	; 0x550 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7c0:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     7c4:	10 92 b4 00 	sts	0x00B4, r1
     7c8:	8f e2       	ldi	r24, 0x2F	; 47
     7ca:	95 e7       	ldi	r25, 0x75	; 117
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <kilo_start+0x29a>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <kilo_start+0x2a0>
     7d2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     7d4:	80 91 ad 01 	lds	r24, 0x01AD
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7d8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7dc:	10 92 b4 00 	sts	0x00B4, r1
     7e0:	b7 ce       	rjmp	.-658    	; 0x550 <kilo_start+0x1e>

000007e2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <delay+0x10>
     7e4:	ef ec       	ldi	r30, 0xCF	; 207
     7e6:	f7 e0       	ldi	r31, 0x07	; 7
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <delay+0x6>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <delay+0xc>
     7ee:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     7f0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	b9 f7       	brne	.-18     	; 0x7e4 <delay+0x2>
     7f6:	08 95       	ret

000007f8 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7f8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7fc:	60 93 b4 00 	sts	0x00B4, r22
     800:	08 95       	ret

00000802 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     808:	80 93 b4 00 	sts	0x00B4, r24
     80c:	8f e0       	ldi	r24, 0x0F	; 15
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	ef ec       	ldi	r30, 0xCF	; 207
     812:	f7 e0       	ldi	r31, 0x07	; 7
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <spinup_motors+0x12>
     818:	00 c0       	rjmp	.+0      	; 0x81a <spinup_motors+0x18>
     81a:	00 00       	nop
     81c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     81e:	c1 f7       	brne	.-16     	; 0x810 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     820:	08 95       	ret

00000822 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     822:	80 91 77 01 	lds	r24, 0x0177
     826:	81 11       	cpse	r24, r1
     828:	1e c0       	rjmp	.+60     	; 0x866 <get_ambientlight+0x44>
        cli();
     82a:	f8 94       	cli
        adc_setup_conversion(7);
     82c:	87 e0       	ldi	r24, 0x07	; 7
     82e:	80 93 7c 00 	sts	0x007C, r24
     832:	83 e8       	ldi	r24, 0x83	; 131
     834:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     838:	80 91 7a 00 	lds	r24, 0x007A
     83c:	80 64       	ori	r24, 0x40	; 64
     83e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     842:	80 91 7a 00 	lds	r24, 0x007A
     846:	86 fd       	sbrc	r24, 6
     848:	fc cf       	rjmp	.-8      	; 0x842 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     84a:	80 91 78 00 	lds	r24, 0x0078
     84e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     852:	10 92 7c 00 	sts	0x007C, r1
     856:	23 ea       	ldi	r18, 0xA3	; 163
     858:	20 93 7a 00 	sts	0x007A, r18
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     862:	78 94       	sei
     864:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     86a:	08 95       	ret

0000086c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     86c:	80 91 77 01 	lds	r24, 0x0177
     870:	81 11       	cpse	r24, r1
     872:	1e c0       	rjmp	.+60     	; 0x8b0 <get_temperature+0x44>
        cli();
     874:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     876:	88 ec       	ldi	r24, 0xC8	; 200
     878:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     87c:	87 e8       	ldi	r24, 0x87	; 135
     87e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     882:	80 91 7a 00 	lds	r24, 0x007A
     886:	80 64       	ori	r24, 0x40	; 64
     888:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     88c:	80 91 7a 00 	lds	r24, 0x007A
     890:	86 fd       	sbrc	r24, 6
     892:	fc cf       	rjmp	.-8      	; 0x88c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     894:	80 91 78 00 	lds	r24, 0x0078
     898:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     89c:	10 92 7c 00 	sts	0x007C, r1
     8a0:	23 ea       	ldi	r18, 0xA3	; 163
     8a2:	20 93 7a 00 	sts	0x007A, r18
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8ac:	78 94       	sei
     8ae:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     8b4:	08 95       	ret

000008b6 <rand_hard>:

uint8_t rand_hard() {
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	e0 e0       	ldi	r30, 0x00	; 0
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     8c4:	03 ea       	ldi	r16, 0xA3	; 163
     8c6:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     8c8:	d6 e0       	ldi	r29, 0x06	; 6
     8ca:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     8cc:	a1 e0       	ldi	r26, 0x01	; 1
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     8d0:	60 e8       	ldi	r22, 0x80	; 128
     8d2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     8d4:	f8 94       	cli
            adc_setup_conversion(6);
     8d6:	d0 93 7c 00 	sts	0x007C, r29
     8da:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     8de:	90 91 7a 00 	lds	r25, 0x007A
     8e2:	90 64       	ori	r25, 0x40	; 64
     8e4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8e8:	90 91 7a 00 	lds	r25, 0x007A
     8ec:	96 fd       	sbrc	r25, 6
     8ee:	fc cf       	rjmp	.-8      	; 0x8e8 <rand_hard+0x32>
            a = ADCW&0x1;
     8f0:	20 91 78 00 	lds	r18, 0x0078
     8f4:	30 91 79 00 	lds	r19, 0x0079
     8f8:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     8fa:	90 91 7a 00 	lds	r25, 0x007A
     8fe:	90 64       	ori	r25, 0x40	; 64
     900:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     904:	90 91 7a 00 	lds	r25, 0x007A
     908:	96 fd       	sbrc	r25, 6
     90a:	fc cf       	rjmp	.-8      	; 0x904 <__stack+0x5>
            b = ADCW&0x1;
     90c:	40 91 78 00 	lds	r20, 0x0078
     910:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     914:	10 92 7c 00 	sts	0x007C, r1
     918:	00 93 7a 00 	sts	0x007A, r16
     91c:	10 93 7b 00 	sts	0x007B, r17
            sei();
     920:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     922:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     924:	24 13       	cpse	r18, r20
     926:	03 c0       	rjmp	.+6      	; 0x92e <__stack+0x2f>
     928:	61 50       	subi	r22, 0x01	; 1
     92a:	71 09       	sbc	r23, r1
     92c:	99 f6       	brne	.-90     	; 0x8d4 <rand_hard+0x1e>
        if (a)
     92e:	22 23       	and	r18, r18
     930:	39 f0       	breq	.+14     	; 0x940 <__stack+0x41>
            num |= (1<<i);
     932:	9d 01       	movw	r18, r26
     934:	0e 2e       	mov	r0, r30
     936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
     938:	22 0f       	add	r18, r18
     93a:	0a 94       	dec	r0
     93c:	ea f7       	brpl	.-6      	; 0x938 <__stack+0x39>
     93e:	82 2b       	or	r24, r18
     940:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     942:	e8 30       	cpi	r30, 0x08	; 8
     944:	f1 05       	cpc	r31, r1
     946:	09 f0       	breq	.+2      	; 0x94a <__stack+0x4b>
     948:	c3 cf       	rjmp	.-122    	; 0x8d0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     954:	80 91 0e 01 	lds	r24, 0x010E
     958:	98 2f       	mov	r25, r24
     95a:	99 0f       	add	r25, r25
     95c:	99 0f       	add	r25, r25
     95e:	99 0f       	add	r25, r25
     960:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     962:	90 91 48 01 	lds	r25, 0x0148
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	29 0f       	add	r18, r25
     96a:	20 93 48 01 	sts	0x0148, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     96e:	28 2f       	mov	r18, r24
     970:	22 95       	swap	r18
     972:	26 95       	lsr	r18
     974:	27 70       	andi	r18, 0x07	; 7
     976:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     978:	96 95       	lsr	r25
     97a:	96 95       	lsr	r25
     97c:	89 27       	eor	r24, r25
     97e:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     982:	08 95       	ret

00000984 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     984:	80 93 0e 01 	sts	0x010E, r24
     988:	08 95       	ret

0000098a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     98a:	80 91 77 01 	lds	r24, 0x0177
     98e:	81 11       	cpse	r24, r1
     990:	16 c0       	rjmp	.+44     	; 0x9be <get_voltage+0x34>
        cli();                                    // disable interrupts
     992:	f8 94       	cli
        adc_setup_conversion(6);
     994:	86 e0       	ldi	r24, 0x06	; 6
     996:	80 93 7c 00 	sts	0x007C, r24
     99a:	83 e8       	ldi	r24, 0x83	; 131
     99c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9a0:	80 91 7a 00 	lds	r24, 0x007A
     9a4:	80 64       	ori	r24, 0x40	; 64
     9a6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9aa:	80 91 7a 00 	lds	r24, 0x007A
     9ae:	86 fd       	sbrc	r24, 6
     9b0:	fc cf       	rjmp	.-8      	; 0x9aa <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     9b2:	80 91 78 00 	lds	r24, 0x0078
     9b6:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     9ba:	78 94       	sei
     9bc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     9c2:	08 95       	ret

000009c4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     9c4:	2f 92       	push	r2
     9c6:	3f 92       	push	r3
     9c8:	4f 92       	push	r4
     9ca:	5f 92       	push	r5
     9cc:	6f 92       	push	r6
     9ce:	7f 92       	push	r7
     9d0:	8f 92       	push	r8
     9d2:	9f 92       	push	r9
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <estimate_distance+0x26>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <estimate_distance+0x28>
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <estimate_distance+0x2a>
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     9f4:	dc 01       	movw	r26, r24
     9f6:	12 96       	adiw	r26, 0x02	; 2
     9f8:	0d 90       	ld	r0, X+
     9fa:	bc 91       	ld	r27, X
     9fc:	a0 2d       	mov	r26, r0
     9fe:	be 83       	std	Y+6, r27	; 0x06
     a00:	ad 83       	std	Y+5, r26	; 0x05
     a02:	a4 38       	cpi	r26, 0x84	; 132
     a04:	e3 e0       	ldi	r30, 0x03	; 3
     a06:	be 07       	cpc	r27, r30
     a08:	0c f0       	brlt	.+2      	; 0xa0c <estimate_distance+0x48>
     a0a:	c9 c0       	rjmp	.+402    	; 0xb9e <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a0c:	80 91 51 01 	lds	r24, 0x0151
     a10:	90 91 52 01 	lds	r25, 0x0152
     a14:	8a 17       	cp	r24, r26
     a16:	9b 07       	cpc	r25, r27
     a18:	08 f4       	brcc	.+2      	; 0xa1c <estimate_distance+0x58>
     a1a:	37 c1       	rjmp	.+622    	; 0xc8a <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a1c:	00 91 53 01 	lds	r16, 0x0153
     a20:	10 91 54 01 	lds	r17, 0x0154
     a24:	0a 17       	cp	r16, r26
     a26:	1b 07       	cpc	r17, r27
     a28:	08 f4       	brcc	.+2      	; 0xa2c <estimate_distance+0x68>
     a2a:	2f c2       	rjmp	.+1118   	; 0xe8a <estimate_distance+0x4c6>
     a2c:	00 91 55 01 	lds	r16, 0x0155
     a30:	10 91 56 01 	lds	r17, 0x0156
     a34:	0a 17       	cp	r16, r26
     a36:	1b 07       	cpc	r17, r27
     a38:	08 f4       	brcc	.+2      	; 0xa3c <estimate_distance+0x78>
     a3a:	2f c2       	rjmp	.+1118   	; 0xe9a <estimate_distance+0x4d6>
     a3c:	00 91 57 01 	lds	r16, 0x0157
     a40:	10 91 58 01 	lds	r17, 0x0158
     a44:	0a 17       	cp	r16, r26
     a46:	1b 07       	cpc	r17, r27
     a48:	08 f4       	brcc	.+2      	; 0xa4c <estimate_distance+0x88>
     a4a:	2f c2       	rjmp	.+1118   	; 0xeaa <estimate_distance+0x4e6>
     a4c:	00 91 59 01 	lds	r16, 0x0159
     a50:	10 91 5a 01 	lds	r17, 0x015A
     a54:	0a 17       	cp	r16, r26
     a56:	1b 07       	cpc	r17, r27
     a58:	08 f4       	brcc	.+2      	; 0xa5c <estimate_distance+0x98>
     a5a:	2f c2       	rjmp	.+1118   	; 0xeba <estimate_distance+0x4f6>
     a5c:	00 91 5b 01 	lds	r16, 0x015B
     a60:	10 91 5c 01 	lds	r17, 0x015C
     a64:	0a 17       	cp	r16, r26
     a66:	1b 07       	cpc	r17, r27
     a68:	08 f4       	brcc	.+2      	; 0xa6c <estimate_distance+0xa8>
     a6a:	ef c1       	rjmp	.+990    	; 0xe4a <estimate_distance+0x486>
     a6c:	00 91 5d 01 	lds	r16, 0x015D
     a70:	10 91 5e 01 	lds	r17, 0x015E
     a74:	0a 17       	cp	r16, r26
     a76:	1b 07       	cpc	r17, r27
     a78:	08 f4       	brcc	.+2      	; 0xa7c <estimate_distance+0xb8>
     a7a:	27 c2       	rjmp	.+1102   	; 0xeca <estimate_distance+0x506>
     a7c:	00 91 5f 01 	lds	r16, 0x015F
     a80:	10 91 60 01 	lds	r17, 0x0160
     a84:	0a 17       	cp	r16, r26
     a86:	1b 07       	cpc	r17, r27
     a88:	08 f4       	brcc	.+2      	; 0xa8c <estimate_distance+0xc8>
     a8a:	27 c2       	rjmp	.+1102   	; 0xeda <estimate_distance+0x516>
     a8c:	00 91 61 01 	lds	r16, 0x0161
     a90:	10 91 62 01 	lds	r17, 0x0162
     a94:	0a 17       	cp	r16, r26
     a96:	1b 07       	cpc	r17, r27
     a98:	08 f4       	brcc	.+2      	; 0xa9c <estimate_distance+0xd8>
     a9a:	27 c2       	rjmp	.+1102   	; 0xeea <estimate_distance+0x526>
     a9c:	00 91 63 01 	lds	r16, 0x0163
     aa0:	10 91 64 01 	lds	r17, 0x0164
     aa4:	0a 17       	cp	r16, r26
     aa6:	1b 07       	cpc	r17, r27
     aa8:	08 f4       	brcc	.+2      	; 0xaac <estimate_distance+0xe8>
     aaa:	27 c2       	rjmp	.+1102   	; 0xefa <estimate_distance+0x536>
     aac:	00 91 65 01 	lds	r16, 0x0165
     ab0:	10 91 66 01 	lds	r17, 0x0166
     ab4:	0a 17       	cp	r16, r26
     ab6:	1b 07       	cpc	r17, r27
     ab8:	08 f4       	brcc	.+2      	; 0xabc <estimate_distance+0xf8>
     aba:	27 c2       	rjmp	.+1102   	; 0xf0a <estimate_distance+0x546>
     abc:	00 91 67 01 	lds	r16, 0x0167
     ac0:	10 91 68 01 	lds	r17, 0x0168
     ac4:	0a 17       	cp	r16, r26
     ac6:	1b 07       	cpc	r17, r27
     ac8:	08 f4       	brcc	.+2      	; 0xacc <estimate_distance+0x108>
     aca:	23 c2       	rjmp	.+1094   	; 0xf12 <estimate_distance+0x54e>
     acc:	00 91 69 01 	lds	r16, 0x0169
     ad0:	10 91 6a 01 	lds	r17, 0x016A
     ad4:	0a 17       	cp	r16, r26
     ad6:	1b 07       	cpc	r17, r27
     ad8:	08 f4       	brcc	.+2      	; 0xadc <estimate_distance+0x118>
     ada:	23 c2       	rjmp	.+1094   	; 0xf22 <estimate_distance+0x55e>
     adc:	00 91 6b 01 	lds	r16, 0x016B
     ae0:	10 91 6c 01 	lds	r17, 0x016C
     ae4:	0a 17       	cp	r16, r26
     ae6:	1b 07       	cpc	r17, r27
     ae8:	08 f4       	brcc	.+2      	; 0xaec <estimate_distance+0x128>
     aea:	23 c2       	rjmp	.+1094   	; 0xf32 <estimate_distance+0x56e>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 ed       	ldi	r26, 0xD0	; 208
     af2:	b0 e4       	ldi	r27, 0x40	; 64
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	9a 83       	std	Y+2, r25	; 0x02
     af8:	ab 83       	std	Y+3, r26	; 0x03
     afa:	bc 83       	std	Y+4, r27	; 0x04
     afc:	4c e0       	ldi	r20, 0x0C	; 12
     afe:	e4 2e       	mov	r14, r20
     b00:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     b02:	f7 01       	movw	r30, r14
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ef 5a       	subi	r30, 0xAF	; 175
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	b8 01       	movw	r22, r16
     b12:	68 1b       	sub	r22, r24
     b14:	79 0b       	sbc	r23, r25
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     b1e:	9b 01       	movw	r18, r22
     b20:	ac 01       	movw	r20, r24
     b22:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__addsf3>
     b26:	6b 01       	movw	r12, r22
     b28:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b2a:	ad 81       	ldd	r26, Y+5	; 0x05
     b2c:	be 81       	ldd	r27, Y+6	; 0x06
     b2e:	bd 01       	movw	r22, r26
     b30:	bb 0f       	add	r27, r27
     b32:	88 0b       	sbc	r24, r24
     b34:	99 0b       	sbc	r25, r25
     b36:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatsisf>
     b3a:	4b 01       	movw	r8, r22
     b3c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b3e:	b8 01       	movw	r22, r16
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     b48:	2b 01       	movw	r4, r22
     b4a:	3c 01       	movw	r6, r24
     b4c:	29 81       	ldd	r18, Y+1	; 0x01
     b4e:	3a 81       	ldd	r19, Y+2	; 0x02
     b50:	4b 81       	ldd	r20, Y+3	; 0x03
     b52:	5c 81       	ldd	r21, Y+4	; 0x04
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__subsf3>
     b68:	9b 01       	movw	r18, r22
     b6a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b6c:	c5 01       	movw	r24, r10
     b6e:	b4 01       	movw	r22, r8
     b70:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__subsf3>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e2       	ldi	r20, 0x20	; 32
     b7a:	51 e4       	ldi	r21, 0x41	; 65
     b7c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
            b=((int)((int)b/(int)slope));
     b80:	0e 94 35 0c 	call	0x186a	; 0x186a <__fixsfsi>
     b84:	8b 01       	movw	r16, r22
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	0e 94 35 0c 	call	0x186a	; 0x186a <__fixsfsi>
     b8e:	ab 01       	movw	r20, r22
     b90:	bc 01       	movw	r22, r24
     b92:	c8 01       	movw	r24, r16
     b94:	ba 01       	movw	r22, r20
     b96:	0e 94 19 0b 	call	0x1632	; 0x1632 <__divmodhi4>
            dist_high=b;
     b9a:	16 2f       	mov	r17, r22
     b9c:	77 c0       	rjmp	.+238    	; 0xc8c <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b9e:	dc 01       	movw	r26, r24
     ba0:	cd 90       	ld	r12, X+
     ba2:	dc 90       	ld	r13, X
     ba4:	80 91 78 01 	lds	r24, 0x0178
     ba8:	90 91 79 01 	lds	r25, 0x0179
     bac:	8c 15       	cp	r24, r12
     bae:	9d 05       	cpc	r25, r13
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <estimate_distance+0x1f0>
     bb2:	8c c0       	rjmp	.+280    	; 0xccc <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     bb4:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     bb6:	e0 90 7a 01 	lds	r14, 0x017A
     bba:	f0 90 7b 01 	lds	r15, 0x017B
     bbe:	ec 14       	cp	r14, r12
     bc0:	fd 04       	cpc	r15, r13
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <estimate_distance+0x202>
     bc4:	5e c1       	rjmp	.+700    	; 0xe82 <estimate_distance+0x4be>
     bc6:	e0 90 7c 01 	lds	r14, 0x017C
     bca:	f0 90 7d 01 	lds	r15, 0x017D
     bce:	ec 14       	cp	r14, r12
     bd0:	fd 04       	cpc	r15, r13
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <estimate_distance+0x212>
     bd4:	5e c1       	rjmp	.+700    	; 0xe92 <estimate_distance+0x4ce>
     bd6:	e0 90 7e 01 	lds	r14, 0x017E
     bda:	f0 90 7f 01 	lds	r15, 0x017F
     bde:	ec 14       	cp	r14, r12
     be0:	fd 04       	cpc	r15, r13
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <estimate_distance+0x222>
     be4:	5e c1       	rjmp	.+700    	; 0xea2 <estimate_distance+0x4de>
     be6:	e0 90 80 01 	lds	r14, 0x0180
     bea:	f0 90 81 01 	lds	r15, 0x0181
     bee:	ec 14       	cp	r14, r12
     bf0:	fd 04       	cpc	r15, r13
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <estimate_distance+0x232>
     bf4:	5e c1       	rjmp	.+700    	; 0xeb2 <estimate_distance+0x4ee>
     bf6:	e0 90 82 01 	lds	r14, 0x0182
     bfa:	f0 90 83 01 	lds	r15, 0x0183
     bfe:	ec 14       	cp	r14, r12
     c00:	fd 04       	cpc	r15, r13
     c02:	08 f4       	brcc	.+2      	; 0xc06 <estimate_distance+0x242>
     c04:	c3 c0       	rjmp	.+390    	; 0xd8c <estimate_distance+0x3c8>
     c06:	e0 90 84 01 	lds	r14, 0x0184
     c0a:	f0 90 85 01 	lds	r15, 0x0185
     c0e:	ec 14       	cp	r14, r12
     c10:	fd 04       	cpc	r15, r13
     c12:	08 f4       	brcc	.+2      	; 0xc16 <estimate_distance+0x252>
     c14:	56 c1       	rjmp	.+684    	; 0xec2 <estimate_distance+0x4fe>
     c16:	e0 90 86 01 	lds	r14, 0x0186
     c1a:	f0 90 87 01 	lds	r15, 0x0187
     c1e:	ec 14       	cp	r14, r12
     c20:	fd 04       	cpc	r15, r13
     c22:	08 f4       	brcc	.+2      	; 0xc26 <estimate_distance+0x262>
     c24:	56 c1       	rjmp	.+684    	; 0xed2 <estimate_distance+0x50e>
     c26:	e0 90 88 01 	lds	r14, 0x0188
     c2a:	f0 90 89 01 	lds	r15, 0x0189
     c2e:	ec 14       	cp	r14, r12
     c30:	fd 04       	cpc	r15, r13
     c32:	08 f4       	brcc	.+2      	; 0xc36 <estimate_distance+0x272>
     c34:	56 c1       	rjmp	.+684    	; 0xee2 <estimate_distance+0x51e>
     c36:	e0 90 8a 01 	lds	r14, 0x018A
     c3a:	f0 90 8b 01 	lds	r15, 0x018B
     c3e:	ec 14       	cp	r14, r12
     c40:	fd 04       	cpc	r15, r13
     c42:	08 f4       	brcc	.+2      	; 0xc46 <estimate_distance+0x282>
     c44:	56 c1       	rjmp	.+684    	; 0xef2 <estimate_distance+0x52e>
     c46:	e0 90 8c 01 	lds	r14, 0x018C
     c4a:	f0 90 8d 01 	lds	r15, 0x018D
     c4e:	ec 14       	cp	r14, r12
     c50:	fd 04       	cpc	r15, r13
     c52:	08 f4       	brcc	.+2      	; 0xc56 <estimate_distance+0x292>
     c54:	56 c1       	rjmp	.+684    	; 0xf02 <estimate_distance+0x53e>
     c56:	e0 90 8e 01 	lds	r14, 0x018E
     c5a:	f0 90 8f 01 	lds	r15, 0x018F
     c5e:	ec 14       	cp	r14, r12
     c60:	fd 04       	cpc	r15, r13
     c62:	08 f4       	brcc	.+2      	; 0xc66 <estimate_distance+0x2a2>
     c64:	5a c1       	rjmp	.+692    	; 0xf1a <estimate_distance+0x556>
     c66:	e0 90 90 01 	lds	r14, 0x0190
     c6a:	f0 90 91 01 	lds	r15, 0x0191
     c6e:	ec 14       	cp	r14, r12
     c70:	fd 04       	cpc	r15, r13
     c72:	08 f4       	brcc	.+2      	; 0xc76 <estimate_distance+0x2b2>
     c74:	5a c1       	rjmp	.+692    	; 0xf2a <estimate_distance+0x566>
     c76:	e0 90 92 01 	lds	r14, 0x0192
     c7a:	f0 90 93 01 	lds	r15, 0x0193
     c7e:	ec 14       	cp	r14, r12
     c80:	fd 04       	cpc	r15, r13
     c82:	08 f4       	brcc	.+2      	; 0xc86 <estimate_distance+0x2c2>
     c84:	5a c1       	rjmp	.+692    	; 0xf3a <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     c86:	0a e5       	ldi	r16, 0x5A	; 90
     c88:	31 c0       	rjmp	.+98     	; 0xcec <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     c8a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     c8c:	ed 81       	ldd	r30, Y+5	; 0x05
     c8e:	fe 81       	ldd	r31, Y+6	; 0x06
     c90:	ed 3b       	cpi	r30, 0xBD	; 189
     c92:	f2 40       	sbci	r31, 0x02	; 2
     c94:	fc f4       	brge	.+62     	; 0xcd4 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c96:	81 e2       	ldi	r24, 0x21	; 33
     c98:	81 0f       	add	r24, r17
    }
}
     c9a:	26 96       	adiw	r28, 0x06	; 6
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	cf 90       	pop	r12
     cb6:	bf 90       	pop	r11
     cb8:	af 90       	pop	r10
     cba:	9f 90       	pop	r9
     cbc:	8f 90       	pop	r8
     cbe:	7f 90       	pop	r7
     cc0:	6f 90       	pop	r6
     cc2:	5f 90       	pop	r5
     cc4:	4f 90       	pop	r4
     cc6:	3f 90       	pop	r3
     cc8:	2f 90       	pop	r2
     cca:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     ccc:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     cce:	81 e2       	ldi	r24, 0x21	; 33
     cd0:	80 0f       	add	r24, r16
     cd2:	e3 cf       	rjmp	.-58     	; 0xc9a <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     cd4:	d1 01       	movw	r26, r2
     cd6:	cd 90       	ld	r12, X+
     cd8:	dc 90       	ld	r13, X
     cda:	80 91 78 01 	lds	r24, 0x0178
     cde:	90 91 79 01 	lds	r25, 0x0179
     ce2:	8c 15       	cp	r24, r12
     ce4:	9d 05       	cpc	r25, r13
     ce6:	08 f0       	brcs	.+2      	; 0xcea <estimate_distance+0x326>
     ce8:	66 cf       	rjmp	.-308    	; 0xbb6 <estimate_distance+0x1f2>
            dist_low=0;
     cea:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     cec:	1f 3f       	cpi	r17, 0xFF	; 255
     cee:	79 f3       	breq	.-34     	; 0xcce <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     cf0:	ed 81       	ldd	r30, Y+5	; 0x05
     cf2:	fe 81       	ldd	r31, Y+6	; 0x06
     cf4:	bf 01       	movw	r22, r30
     cf6:	ff 0f       	add	r31, r31
     cf8:	88 0b       	sbc	r24, r24
     cfa:	99 0b       	sbc	r25, r25
     cfc:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatsisf>
     d00:	6b 01       	movw	r12, r22
     d02:	7c 01       	movw	r14, r24
     d04:	61 2f       	mov	r22, r17
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     d10:	4b 01       	movw	r8, r22
     d12:	5c 01       	movw	r10, r24
     d14:	a7 01       	movw	r20, r14
     d16:	96 01       	movw	r18, r12
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	81 e6       	ldi	r24, 0x61	; 97
     d1e:	94 e4       	ldi	r25, 0x44	; 68
     d20:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__subsf3>
     d24:	9b 01       	movw	r18, r22
     d26:	ac 01       	movw	r20, r24
     d28:	c5 01       	movw	r24, r10
     d2a:	b4 01       	movw	r22, r8
     d2c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
     d30:	4b 01       	movw	r8, r22
     d32:	5c 01       	movw	r10, r24
     d34:	60 2f       	mov	r22, r16
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     d40:	2b 01       	movw	r4, r22
     d42:	3c 01       	movw	r6, r24
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4f e2       	ldi	r20, 0x2F	; 47
     d4a:	54 e4       	ldi	r21, 0x44	; 68
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__subsf3>
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	c3 01       	movw	r24, r6
     d5a:	b2 01       	movw	r22, r4
     d5c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
     d60:	9b 01       	movw	r18, r22
     d62:	ac 01       	movw	r20, r24
     d64:	c5 01       	movw	r24, r10
     d66:	b4 01       	movw	r22, r8
     d68:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__addsf3>
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	48 e4       	ldi	r20, 0x48	; 72
     d72:	53 e4       	ldi	r21, 0x43	; 67
     d74:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__divsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	44 e0       	ldi	r20, 0x04	; 4
     d7e:	52 e4       	ldi	r21, 0x42	; 66
     d80:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__addsf3>
     d84:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixunssfsi>
     d88:	86 2f       	mov	r24, r22
     d8a:	87 cf       	rjmp	.-242    	; 0xc9a <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d8c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     d8e:	85 e0       	ldi	r24, 0x05	; 5
     d90:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	fc 01       	movw	r30, r24
     d98:	ea 58       	subi	r30, 0x8A	; 138
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	b7 01       	movw	r22, r14
     da2:	68 1b       	sub	r22, r24
     da4:	79 0b       	sbc	r23, r25
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__addsf3>
     db6:	4b 01       	movw	r8, r22
     db8:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     dba:	b6 01       	movw	r22, r12
     dbc:	dd 0c       	add	r13, r13
     dbe:	88 0b       	sbc	r24, r24
     dc0:	99 0b       	sbc	r25, r25
     dc2:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatsisf>
     dc6:	2b 01       	movw	r4, r22
     dc8:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     dca:	b7 01       	movw	r22, r14
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     dd4:	6b 01       	movw	r12, r22
     dd6:	7c 01       	movw	r14, r24
     dd8:	60 2f       	mov	r22, r16
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	a9 01       	movw	r20, r18
     df6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__addsf3>
     dfa:	a5 01       	movw	r20, r10
     dfc:	94 01       	movw	r18, r8
     dfe:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
     e02:	9b 01       	movw	r18, r22
     e04:	ac 01       	movw	r20, r24
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__subsf3>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e12:	c3 01       	movw	r24, r6
     e14:	b2 01       	movw	r22, r4
     e16:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__subsf3>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	51 e4       	ldi	r21, 0x41	; 65
     e22:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
                b=((int)((int)b/(int)slope));
     e26:	0e 94 35 0c 	call	0x186a	; 0x186a <__fixsfsi>
     e2a:	7b 01       	movw	r14, r22
     e2c:	c5 01       	movw	r24, r10
     e2e:	b4 01       	movw	r22, r8
     e30:	0e 94 35 0c 	call	0x186a	; 0x186a <__fixsfsi>
     e34:	ab 01       	movw	r20, r22
     e36:	bc 01       	movw	r22, r24
     e38:	c7 01       	movw	r24, r14
     e3a:	ba 01       	movw	r22, r20
     e3c:	0e 94 19 0b 	call	0x1632	; 0x1632 <__divmodhi4>
                dist_low=b;
     e40:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e42:	6f 3f       	cpi	r22, 0xFF	; 255
     e44:	09 f0       	breq	.+2      	; 0xe48 <estimate_distance+0x484>
     e46:	52 cf       	rjmp	.-348    	; 0xcec <estimate_distance+0x328>
     e48:	26 cf       	rjmp	.-436    	; 0xc96 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e4a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	7c 01       	movw	r14, r24
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	ef 1a       	sub	r14, r31
     e56:	f1 08       	sbc	r15, r1
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatunsisf>
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3>
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	a9 01       	movw	r20, r18
     e74:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__addsf3>
     e78:	69 83       	std	Y+1, r22	; 0x01
     e7a:	7a 83       	std	Y+2, r23	; 0x02
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     e80:	40 ce       	rjmp	.-896    	; 0xb02 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e82:	01 e0       	ldi	r16, 0x01	; 1
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	84 cf       	rjmp	.-248    	; 0xd92 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	df cf       	rjmp	.-66     	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e92:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	7c cf       	rjmp	.-264    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e9a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	d7 cf       	rjmp	.-82     	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ea2:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	74 cf       	rjmp	.-280    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eaa:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	cf cf       	rjmp	.-98     	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eb2:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	6c cf       	rjmp	.-296    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eba:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	c7 cf       	rjmp	.-114    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ec2:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     ec4:	86 e0       	ldi	r24, 0x06	; 6
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	64 cf       	rjmp	.-312    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eca:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     ecc:	86 e0       	ldi	r24, 0x06	; 6
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	bf cf       	rjmp	.-130    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ed2:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ed4:	87 e0       	ldi	r24, 0x07	; 7
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	5c cf       	rjmp	.-328    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eda:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     edc:	87 e0       	ldi	r24, 0x07	; 7
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	b7 cf       	rjmp	.-146    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ee2:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     ee4:	88 e0       	ldi	r24, 0x08	; 8
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	54 cf       	rjmp	.-344    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eea:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	af cf       	rjmp	.-162    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef2:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     ef4:	89 e0       	ldi	r24, 0x09	; 9
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	4c cf       	rjmp	.-360    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     efa:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     efc:	89 e0       	ldi	r24, 0x09	; 9
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a7 cf       	rjmp	.-178    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f02:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     f04:	8a e0       	ldi	r24, 0x0A	; 10
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	44 cf       	rjmp	.-376    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f0a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f0c:	8a e0       	ldi	r24, 0x0A	; 10
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9f cf       	rjmp	.-194    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f12:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f14:	8b e0       	ldi	r24, 0x0B	; 11
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9b cf       	rjmp	.-202    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f1a:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     f1c:	8b e0       	ldi	r24, 0x0B	; 11
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	38 cf       	rjmp	.-400    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f22:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     f24:	8c e0       	ldi	r24, 0x0C	; 12
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	93 cf       	rjmp	.-218    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f2a:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     f2c:	8c e0       	ldi	r24, 0x0C	; 12
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	30 cf       	rjmp	.-416    	; 0xd92 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f32:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f34:	8d e0       	ldi	r24, 0x0D	; 13
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	8b cf       	rjmp	.-234    	; 0xe50 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f3a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f3c:	8d e0       	ldi	r24, 0x0D	; 13
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	28 cf       	rjmp	.-432    	; 0xd92 <estimate_distance+0x3ce>

00000f42 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f42:	1f 92       	push	r1
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	2f 93       	push	r18
     f4e:	3f 93       	push	r19
     f50:	4f 93       	push	r20
     f52:	5f 93       	push	r21
     f54:	6f 93       	push	r22
     f56:	7f 93       	push	r23
     f58:	8f 93       	push	r24
     f5a:	9f 93       	push	r25
     f5c:	af 93       	push	r26
     f5e:	bf 93       	push	r27
     f60:	ef 93       	push	r30
     f62:	ff 93       	push	r31
    tx_clock += tx_increment;
     f64:	20 91 97 01 	lds	r18, 0x0197
     f68:	30 91 98 01 	lds	r19, 0x0198
     f6c:	80 91 95 01 	lds	r24, 0x0195
     f70:	90 91 96 01 	lds	r25, 0x0196
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	90 93 98 01 	sts	0x0198, r25
     f7c:	80 93 97 01 	sts	0x0197, r24
    tx_increment = 0xFF;
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	90 93 96 01 	sts	0x0196, r25
     f88:	80 93 95 01 	sts	0x0195, r24
    OCR0A = tx_increment;
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f90:	80 91 73 01 	lds	r24, 0x0173
     f94:	90 91 74 01 	lds	r25, 0x0174
     f98:	a0 91 75 01 	lds	r26, 0x0175
     f9c:	b0 91 76 01 	lds	r27, 0x0176
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	a1 1d       	adc	r26, r1
     fa4:	b1 1d       	adc	r27, r1
     fa6:	80 93 73 01 	sts	0x0173, r24
     faa:	90 93 74 01 	sts	0x0174, r25
     fae:	a0 93 75 01 	sts	0x0175, r26
     fb2:	b0 93 76 01 	sts	0x0176, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     fb6:	80 91 77 01 	lds	r24, 0x0177
     fba:	81 11       	cpse	r24, r1
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <__vector_14+0x9a>
     fbe:	80 91 a6 01 	lds	r24, 0x01A6
     fc2:	90 91 a7 01 	lds	r25, 0x01A7
     fc6:	20 91 97 01 	lds	r18, 0x0197
     fca:	30 91 98 01 	lds	r19, 0x0198
     fce:	82 17       	cp	r24, r18
     fd0:	93 07       	cpc	r25, r19
     fd2:	20 f4       	brcc	.+8      	; 0xfdc <__vector_14+0x9a>
     fd4:	80 91 4b 01 	lds	r24, 0x014B
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	89 f0       	breq	.+34     	; 0xffe <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ffe:	e0 91 11 01 	lds	r30, 0x0111
    1002:	f0 91 12 01 	lds	r31, 0x0112
    1006:	09 95       	icall
        if (msg) {
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	41 f3       	breq	.-48     	; 0xfdc <__vector_14+0x9a>
            if (message_send(msg)) {
    100c:	0e 94 89 0a 	call	0x1512	; 0x1512 <message_send>
    1010:	81 11       	cpse	r24, r1
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1014:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <rand>
    1018:	99 27       	eor	r25, r25
    101a:	90 93 96 01 	sts	0x0196, r25
    101e:	80 93 95 01 	sts	0x0195, r24
                OCR0A = tx_increment;
    1022:	87 bd       	out	0x27, r24	; 39
    1024:	db cf       	rjmp	.-74     	; 0xfdc <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1026:	e0 91 0f 01 	lds	r30, 0x010F
    102a:	f0 91 10 01 	lds	r31, 0x0110
    102e:	09 95       	icall
                tx_clock = 0;
    1030:	10 92 98 01 	sts	0x0198, r1
    1034:	10 92 97 01 	sts	0x0197, r1
    1038:	d1 cf       	rjmp	.-94     	; 0xfdc <__vector_14+0x9a>

0000103a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    103a:	80 ff       	sbrs	r24, 0
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <set_color+0x26>
        DDRD |= (1<<5);
    103e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1040:	81 ff       	sbrs	r24, 1
    1042:	11 c0       	rjmp	.+34     	; 0x1066 <set_color+0x2c>
        DDRD |= (1<<4);
    1044:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1046:	82 ff       	sbrs	r24, 2
    1048:	11 c0       	rjmp	.+34     	; 0x106c <set_color+0x32>
        DDRC |= (1<<3);
    104a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    104c:	83 ff       	sbrs	r24, 3
    104e:	11 c0       	rjmp	.+34     	; 0x1072 <set_color+0x38>
        DDRC |= (1<<2);
    1050:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1052:	84 ff       	sbrs	r24, 4
    1054:	11 c0       	rjmp	.+34     	; 0x1078 <set_color+0x3e>
        DDRC |= (1<<5);
    1056:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1058:	85 fd       	sbrc	r24, 5
    105a:	11 c0       	rjmp	.+34     	; 0x107e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    105c:	3c 98       	cbi	0x07, 4	; 7
    105e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1060:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1062:	81 fd       	sbrc	r24, 1
    1064:	ef cf       	rjmp	.-34     	; 0x1044 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1066:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1068:	82 fd       	sbrc	r24, 2
    106a:	ef cf       	rjmp	.-34     	; 0x104a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    106c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    106e:	83 fd       	sbrc	r24, 3
    1070:	ef cf       	rjmp	.-34     	; 0x1050 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1072:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1074:	84 fd       	sbrc	r24, 4
    1076:	ef cf       	rjmp	.-34     	; 0x1056 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1078:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    107a:	85 ff       	sbrs	r24, 5
    107c:	ef cf       	rjmp	.-34     	; 0x105c <set_color+0x22>
        DDRC |= (1<<4);
    107e:	3c 9a       	sbi	0x07, 4	; 7
    1080:	08 95       	ret

00001082 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    rx_timer_off();
    1090:	10 92 81 00 	sts	0x0081, r1
    1094:	10 92 85 00 	sts	0x0085, r1
    1098:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 50 01 	sts	0x0150, r24
    rx_leadingbyte = 1;
    10a2:	80 93 94 01 	sts	0x0194, r24
    rx_busy = 0;
    10a6:	10 92 77 01 	sts	0x0177, r1
    adc_trigger_high_gain();
    10aa:	10 92 7c 00 	sts	0x007C, r1
    10ae:	93 ea       	ldi	r25, 0xA3	; 163
    10b0:	90 93 7a 00 	sts	0x007A, r25
    10b4:	80 93 7b 00 	sts	0x007B, r24
}
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	2f 93       	push	r18
    10d2:	3f 93       	push	r19
    10d4:	4f 93       	push	r20
    10d6:	5f 93       	push	r21
    10d8:	6f 93       	push	r22
    10da:	7f 93       	push	r23
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	af 93       	push	r26
    10e2:	bf 93       	push	r27
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ef 93       	push	r30
    10ea:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    10ec:	20 91 84 00 	lds	r18, 0x0084
    10f0:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	40 93 77 01 	sts	0x0177, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    10fa:	80 91 50 01 	lds	r24, 0x0150
    10fe:	88 23       	and	r24, r24
    1100:	a9 f1       	breq	.+106    	; 0x116c <__vector_23+0xa6>
        rx_timer_on();
    1102:	10 92 85 00 	sts	0x0085, r1
    1106:	10 92 84 00 	sts	0x0084, r1
    110a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    110e:	10 92 a8 01 	sts	0x01A8, r1
        rx_leadingbit = 0;
    1112:	10 92 50 01 	sts	0x0150, r1
        if (rx_leadingbyte) {
    1116:	80 91 94 01 	lds	r24, 0x0194
    111a:	88 23       	and	r24, r24
    111c:	a1 f0       	breq	.+40     	; 0x1146 <__vector_23+0x80>
            adc_finish_conversion();
    111e:	80 91 7a 00 	lds	r24, 0x007A
    1122:	86 fd       	sbrc	r24, 6
    1124:	fc cf       	rjmp	.-8      	; 0x111e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1126:	80 91 78 00 	lds	r24, 0x0078
    112a:	90 91 79 00 	lds	r25, 0x0079
    112e:	90 93 72 01 	sts	0x0172, r25
    1132:	80 93 71 01 	sts	0x0171, r24
            adc_trigger_low_gain();
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	80 93 7c 00 	sts	0x007C, r24
    113c:	93 ea       	ldi	r25, 0xA3	; 163
    113e:	90 93 7a 00 	sts	0x007A, r25
    1142:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1146:	ff 91       	pop	r31
    1148:	ef 91       	pop	r30
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    116c:	c9 01       	movw	r24, r18
    116e:	87 58       	subi	r24, 0x87	; 135
    1170:	91 09       	sbc	r25, r1
    1172:	84 37       	cpi	r24, 0x74	; 116
    1174:	99 40       	sbci	r25, 0x09	; 9
    1176:	08 f0       	brcs	.+2      	; 0x117a <__vector_23+0xb4>
    1178:	52 c0       	rjmp	.+164    	; 0x121e <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    117a:	26 58       	subi	r18, 0x86	; 134
    117c:	31 09       	sbc	r19, r1
    117e:	a4 ef       	ldi	r26, 0xF4	; 244
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	0e 94 33 0b 	call	0x1666	; 0x1666 <__umulhisi3>
    1186:	aa 27       	eor	r26, r26
    1188:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    118a:	88 30       	cpi	r24, 0x08	; 8
    118c:	91 05       	cpc	r25, r1
    118e:	a1 05       	cpc	r26, r1
    1190:	b1 05       	cpc	r27, r1
    1192:	08 f4       	brcc	.+2      	; 0x1196 <__vector_23+0xd0>
    1194:	7b c0       	rjmp	.+246    	; 0x128c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1196:	40 93 50 01 	sts	0x0150, r20
                if (rx_leadingbyte) {
    119a:	80 91 94 01 	lds	r24, 0x0194
    119e:	81 11       	cpse	r24, r1
    11a0:	52 c0       	rjmp	.+164    	; 0x1246 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    11a2:	80 91 6e 01 	lds	r24, 0x016E
    11a6:	e8 2f       	mov	r30, r24
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	e6 56       	subi	r30, 0x66	; 102
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	90 91 a8 01 	lds	r25, 0x01A8
    11b2:	90 83       	st	Z, r25
                    rx_byteindex++;
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	80 93 6e 01 	sts	0x016E, r24
                    if (rx_byteindex == sizeof(message_t)) {
    11ba:	8c 30       	cpi	r24, 0x0C	; 12
    11bc:	21 f6       	brne	.-120    	; 0x1146 <__vector_23+0x80>
                        rx_timer_off();
    11be:	10 92 81 00 	sts	0x0081, r1
    11c2:	10 92 85 00 	sts	0x0085, r1
    11c6:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    11ca:	40 93 94 01 	sts	0x0194, r20
                        rx_busy = 0;
    11ce:	10 92 77 01 	sts	0x0177, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    11d2:	c0 91 a4 01 	lds	r28, 0x01A4
    11d6:	d0 91 a5 01 	lds	r29, 0x01A5
    11da:	8a e9       	ldi	r24, 0x9A	; 154
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	0e 94 6d 0a 	call	0x14da	; 0x14da <message_crc>
    11e2:	c8 17       	cp	r28, r24
    11e4:	d9 07       	cpc	r29, r25
    11e6:	09 f0       	breq	.+2      	; 0x11ea <__vector_23+0x124>
    11e8:	ae cf       	rjmp	.-164    	; 0x1146 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    11ea:	80 91 a3 01 	lds	r24, 0x01A3
    11ee:	87 ff       	sbrs	r24, 7
    11f0:	61 c0       	rjmp	.+194    	; 0x12b4 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    11f2:	98 e7       	ldi	r25, 0x78	; 120
    11f4:	98 0f       	add	r25, r24
    11f6:	93 30       	cpi	r25, 0x03	; 3
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__vector_23+0x140>
        motors_off();
    11fa:	53 98       	cbi	0x0a, 3	; 10
    11fc:	23 98       	cbi	0x04, 3	; 4
    11fe:	10 92 b4 00 	sts	0x00B4, r1
    1202:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	fc 01       	movw	r30, r24
    120a:	e0 58       	subi	r30, 0x80	; 128
    120c:	f1 09       	sbc	r31, r1
    120e:	eb 30       	cpi	r30, 0x0B	; 11
    1210:	f1 05       	cpc	r31, r1
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__vector_23+0x150>
    1214:	98 cf       	rjmp	.-208    	; 0x1146 <__vector_23+0x80>
    1216:	e5 5c       	subi	r30, 0xC5	; 197
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    121e:	10 92 81 00 	sts	0x0081, r1
    1222:	10 92 85 00 	sts	0x0085, r1
    1226:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    122a:	40 93 50 01 	sts	0x0150, r20
            rx_leadingbyte = 1;
    122e:	40 93 94 01 	sts	0x0194, r20
            rx_busy = 0;
    1232:	10 92 77 01 	sts	0x0177, r1
            adc_trigger_high_gain();
    1236:	10 92 7c 00 	sts	0x007C, r1
    123a:	83 ea       	ldi	r24, 0xA3	; 163
    123c:	80 93 7a 00 	sts	0x007A, r24
    1240:	40 93 7b 00 	sts	0x007B, r20
    1244:	80 cf       	rjmp	.-256    	; 0x1146 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1246:	80 91 7a 00 	lds	r24, 0x007A
    124a:	86 fd       	sbrc	r24, 6
    124c:	fc cf       	rjmp	.-8      	; 0x1246 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    124e:	80 91 78 00 	lds	r24, 0x0078
    1252:	90 91 79 00 	lds	r25, 0x0079
    1256:	90 93 70 01 	sts	0x0170, r25
    125a:	80 93 6f 01 	sts	0x016F, r24
                    adc_trigger_high_gain();
    125e:	10 92 7c 00 	sts	0x007C, r1
    1262:	83 ea       	ldi	r24, 0xA3	; 163
    1264:	80 93 7a 00 	sts	0x007A, r24
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    126e:	90 91 a8 01 	lds	r25, 0x01A8
    1272:	99 23       	and	r25, r25
    1274:	d1 f0       	breq	.+52     	; 0x12aa <__vector_23+0x1e4>
                        rx_timer_off();
    1276:	10 92 81 00 	sts	0x0081, r1
    127a:	10 92 85 00 	sts	0x0085, r1
    127e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1282:	80 93 94 01 	sts	0x0194, r24
                        rx_busy = 0;
    1286:	10 92 77 01 	sts	0x0177, r1
    128a:	5d cf       	rjmp	.-326    	; 0x1146 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <__vector_23+0x1d2>
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <__vector_23+0x1ce>
    129c:	cf 01       	movw	r24, r30
    129e:	90 91 a8 01 	lds	r25, 0x01A8
    12a2:	89 2b       	or	r24, r25
    12a4:	80 93 a8 01 	sts	0x01A8, r24
    12a8:	4e cf       	rjmp	.-356    	; 0x1146 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    12aa:	10 92 94 01 	sts	0x0194, r1
                        rx_byteindex = 0;
    12ae:	10 92 6e 01 	sts	0x016E, r1
    12b2:	49 cf       	rjmp	.-366    	; 0x1146 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    12b4:	e0 91 13 01 	lds	r30, 0x0113
    12b8:	f0 91 14 01 	lds	r31, 0x0114
    12bc:	6f e6       	ldi	r22, 0x6F	; 111
    12be:	71 e0       	ldi	r23, 0x01	; 1
    12c0:	8a e9       	ldi	r24, 0x9A	; 154
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	09 95       	icall
    12c6:	3f cf       	rjmp	.-386    	; 0x1146 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12c8:	80 91 9a 01 	lds	r24, 0x019A
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <__vector_23+0x20c>
    12d0:	dd c0       	rjmp	.+442    	; 0x148c <__vector_23+0x3c6>
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <__vector_23+0x210>
    12d4:	ba c0       	rjmp	.+372    	; 0x144a <__vector_23+0x384>
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	09 f4       	brne	.+2      	; 0x12dc <__vector_23+0x216>
    12da:	c6 c0       	rjmp	.+396    	; 0x1468 <__vector_23+0x3a2>
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__vector_23+0x21c>
    12e0:	b1 c0       	rjmp	.+354    	; 0x1444 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12e2:	80 91 49 01 	lds	r24, 0x0149
    12e6:	90 91 a0 01 	lds	r25, 0x01A0
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <__vector_23+0x22a>
    12ee:	e3 c0       	rjmp	.+454    	; 0x14b6 <__vector_23+0x3f0>
    12f0:	80 91 9f 01 	lds	r24, 0x019F
                        prev_motion = MOVE_STOP;
    12f4:	10 92 4a 01 	sts	0x014A, r1
                        cur_motion = MOVE_STRAIGHT;
    12f8:	23 e0       	ldi	r18, 0x03	; 3
    12fa:	20 93 49 01 	sts	0x0149, r18
                        kilo_straight_left = calibmsg->straight_left;
    12fe:	80 93 ab 01 	sts	0x01AB, r24
                        kilo_straight_right = calibmsg->straight_right;
    1302:	90 93 ac 01 	sts	0x01AC, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1306:	80 91 4b 01 	lds	r24, 0x014B
    130a:	86 30       	cpi	r24, 0x06	; 6
    130c:	09 f4       	brne	.+2      	; 0x1310 <__vector_23+0x24a>
    130e:	1b cf       	rjmp	.-458    	; 0x1146 <__vector_23+0x80>
                motors_on();
    1310:	53 9a       	sbi	0x0a, 3	; 10
    1312:	23 9a       	sbi	0x04, 3	; 4
    1314:	10 92 b4 00 	sts	0x00B4, r1
    1318:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    131c:	86 e0       	ldi	r24, 0x06	; 6
    131e:	80 93 4b 01 	sts	0x014B, r24
    1322:	11 cf       	rjmp	.-478    	; 0x1146 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1324:	80 91 4b 01 	lds	r24, 0x014B
    1328:	86 30       	cpi	r24, 0x06	; 6
    132a:	99 f0       	breq	.+38     	; 0x1352 <__vector_23+0x28c>
                motors_on();
    132c:	53 9a       	sbi	0x0a, 3	; 10
    132e:	23 9a       	sbi	0x04, 3	; 4
    1330:	10 92 b4 00 	sts	0x00B4, r1
    1334:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1338:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    133a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    133c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    133e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1340:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1342:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1344:	10 92 49 01 	sts	0x0149, r1
    1348:	10 92 4a 01 	sts	0x014A, r1
                kilo_state = MOVING;
    134c:	86 e0       	ldi	r24, 0x06	; 6
    134e:	80 93 4b 01 	sts	0x014B, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 01       	movw	r18, r24
    1358:	00 90 9a 01 	lds	r0, 0x019A
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <__vector_23+0x29c>
    135e:	22 0f       	add	r18, r18
    1360:	33 1f       	adc	r19, r19
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <__vector_23+0x298>
    1366:	80 91 a9 01 	lds	r24, 0x01A9
    136a:	90 91 aa 01 	lds	r25, 0x01AA
    136e:	82 23       	and	r24, r18
    1370:	93 23       	and	r25, r19
    1372:	89 2b       	or	r24, r25
    1374:	09 f0       	breq	.+2      	; 0x1378 <__vector_23+0x2b2>
    1376:	86 c0       	rjmp	.+268    	; 0x1484 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1378:	10 92 49 01 	sts	0x0149, r1
    137c:	e4 ce       	rjmp	.-568    	; 0x1146 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 4b 01 	sts	0x014B, r24
    1384:	e0 ce       	rjmp	.-576    	; 0x1146 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1386:	e0 e0       	ldi	r30, 0x00	; 0
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    138c:	80 91 6e 00 	lds	r24, 0x006E
    1390:	8d 7f       	andi	r24, 0xFD	; 253
    1392:	80 93 6e 00 	sts	0x006E, r24
    1396:	16 bc       	out	0x26, r1	; 38
            bootload();
    1398:	e0 e0       	ldi	r30, 0x00	; 0
    139a:	f0 e7       	ldi	r31, 0x70	; 112
    139c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    139e:	10 92 4b 01 	sts	0x014B, r1
    13a2:	d1 ce       	rjmp	.-606    	; 0x1146 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	80 93 4b 01 	sts	0x014B, r24
    13aa:	cd ce       	rjmp	.-614    	; 0x1146 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	80 93 4b 01 	sts	0x014B, r24
    13b2:	c9 ce       	rjmp	.-622    	; 0x1146 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    13b4:	80 91 4b 01 	lds	r24, 0x014B
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	09 f4       	brne	.+2      	; 0x13be <__vector_23+0x2f8>
    13bc:	c4 ce       	rjmp	.-632    	; 0x1146 <__vector_23+0x80>
    13be:	80 91 4b 01 	lds	r24, 0x014B
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <__vector_23+0x302>
    13c6:	bf ce       	rjmp	.-642    	; 0x1146 <__vector_23+0x80>
                motors_on();
    13c8:	53 9a       	sbi	0x0a, 3	; 10
    13ca:	23 9a       	sbi	0x04, 3	; 4
    13cc:	10 92 b4 00 	sts	0x00B4, r1
    13d0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	80 93 4b 01 	sts	0x014B, r24
    13da:	b5 ce       	rjmp	.-662    	; 0x1146 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    13dc:	80 91 4b 01 	lds	r24, 0x014B
    13e0:	86 30       	cpi	r24, 0x06	; 6
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <__vector_23+0x320>
    13e4:	b0 ce       	rjmp	.-672    	; 0x1146 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    13e6:	60 91 a9 01 	lds	r22, 0x01A9
    13ea:	80 eb       	ldi	r24, 0xB0	; 176
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    13f2:	60 91 aa 01 	lds	r22, 0x01AA
    13f6:	81 eb       	ldi	r24, 0xB1	; 177
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    13fe:	60 91 ad 01 	lds	r22, 0x01AD
    1402:	85 e0       	ldi	r24, 0x05	; 5
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    140a:	60 91 99 01 	lds	r22, 0x0199
    140e:	89 e0       	ldi	r24, 0x09	; 9
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1416:	60 91 ab 01 	lds	r22, 0x01AB
    141a:	8c e0       	ldi	r24, 0x0C	; 12
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1422:	60 91 ac 01 	lds	r22, 0x01AC
    1426:	84 e1       	ldi	r24, 0x14	; 20
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_write_byte>
                        motors_off();
    142e:	53 98       	cbi	0x0a, 3	; 10
    1430:	23 98       	cbi	0x04, 3	; 4
    1432:	10 92 b4 00 	sts	0x00B4, r1
    1436:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	80 93 4b 01 	sts	0x014B, r24
    1440:	80 91 9a 01 	lds	r24, 0x019A
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1444:	81 11       	cpse	r24, r1
    1446:	5f cf       	rjmp	.-322    	; 0x1306 <__vector_23+0x240>
    1448:	7e ce       	rjmp	.-772    	; 0x1146 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    144a:	88 23       	and	r24, r24
    144c:	39 f2       	breq	.-114    	; 0x13dc <__vector_23+0x316>
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1452:	80 91 9b 01 	lds	r24, 0x019B
    1456:	90 91 9c 01 	lds	r25, 0x019C
    145a:	90 93 aa 01 	sts	0x01AA, r25
    145e:	80 93 a9 01 	sts	0x01A9, r24
                    cur_motion = MOVE_STOP;
    1462:	10 92 49 01 	sts	0x0149, r1
    1466:	4f cf       	rjmp	.-354    	; 0x1306 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1468:	80 91 49 01 	lds	r24, 0x0149
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	71 f1       	breq	.+92     	; 0x14cc <__vector_23+0x406>
    1470:	80 91 9e 01 	lds	r24, 0x019E
                        prev_motion = MOVE_STOP;
    1474:	10 92 4a 01 	sts	0x014A, r1
                        cur_motion = MOVE_RIGHT;
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	90 93 49 01 	sts	0x0149, r25
                        kilo_turn_right = calibmsg->turn_right;
    147e:	80 93 99 01 	sts	0x0199, r24
    1482:	41 cf       	rjmp	.-382    	; 0x1306 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 49 01 	sts	0x0149, r24
    148a:	5d ce       	rjmp	.-838    	; 0x1146 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    148c:	80 91 49 01 	lds	r24, 0x0149
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	51 f0       	breq	.+20     	; 0x14a8 <__vector_23+0x3e2>
    1494:	80 91 9d 01 	lds	r24, 0x019D
                        prev_motion = MOVE_STOP;
    1498:	10 92 4a 01 	sts	0x014A, r1
                        cur_motion = MOVE_LEFT;
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	90 93 49 01 	sts	0x0149, r25
                        kilo_turn_left = calibmsg->turn_left;
    14a2:	80 93 ad 01 	sts	0x01AD, r24
    14a6:	2f cf       	rjmp	.-418    	; 0x1306 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14a8:	80 91 9d 01 	lds	r24, 0x019D
    14ac:	90 91 ad 01 	lds	r25, 0x01AD
    14b0:	89 13       	cpse	r24, r25
    14b2:	f2 cf       	rjmp	.-28     	; 0x1498 <__vector_23+0x3d2>
    14b4:	28 cf       	rjmp	.-432    	; 0x1306 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    14b6:	80 91 ac 01 	lds	r24, 0x01AC
    14ba:	98 13       	cpse	r25, r24
    14bc:	19 cf       	rjmp	.-462    	; 0x12f0 <__vector_23+0x22a>
    14be:	80 91 9f 01 	lds	r24, 0x019F
    14c2:	20 91 ab 01 	lds	r18, 0x01AB
    14c6:	82 13       	cpse	r24, r18
    14c8:	15 cf       	rjmp	.-470    	; 0x12f4 <__vector_23+0x22e>
    14ca:	1d cf       	rjmp	.-454    	; 0x1306 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14cc:	80 91 9e 01 	lds	r24, 0x019E
    14d0:	90 91 99 01 	lds	r25, 0x0199
    14d4:	89 13       	cpse	r24, r25
    14d6:	ce cf       	rjmp	.-100    	; 0x1474 <__vector_23+0x3ae>
    14d8:	16 cf       	rjmp	.-468    	; 0x1306 <__vector_23+0x240>

000014da <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    14da:	fc 01       	movw	r30, r24
    14dc:	ac 01       	movw	r20, r24
    14de:	46 5f       	subi	r20, 0xF6	; 246
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    14e6:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    14e8:	82 27       	eor	r24, r18
    14ea:	08 2e       	mov	r0, r24
    14ec:	82 95       	swap	r24
    14ee:	80 7f       	andi	r24, 0xF0	; 240
    14f0:	80 25       	eor	r24, r0
    14f2:	09 2e       	mov	r0, r25
    14f4:	98 2f       	mov	r25, r24
    14f6:	82 95       	swap	r24
    14f8:	8f 70       	andi	r24, 0x0F	; 15
    14fa:	08 26       	eor	r0, r24
    14fc:	86 95       	lsr	r24
    14fe:	98 27       	eor	r25, r24
    1500:	89 27       	eor	r24, r25
    1502:	88 0f       	add	r24, r24
    1504:	88 0f       	add	r24, r24
    1506:	88 0f       	add	r24, r24
    1508:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    150a:	e4 17       	cp	r30, r20
    150c:	f5 07       	cpc	r31, r21
    150e:	59 f7       	brne	.-42     	; 0x14e6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1510:	08 95       	ret

00001512 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1512:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1514:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1516:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1518:	20 91 6d 01 	lds	r18, 0x016D
    or tmpreg1, ddrreg
    151c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    151e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1520:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1522:	30 91 6d 01 	lds	r19, 0x016D
    1526:	20 30       	cpi	r18, 0x00	; 0
    1528:	29 f0       	breq	.+10     	; 0x1534 <message_send+0x22>
    152a:	00 00       	nop
    152c:	25 b1       	in	r18, 0x05	; 5
    152e:	23 2b       	or	r18, r19
    1530:	25 b9       	out	0x05, r18	; 5
    1532:	04 c0       	rjmp	.+8      	; 0x153c <message_send+0x2a>
    1534:	00 00       	nop
    1536:	00 00       	nop
    1538:	00 00       	nop
    153a:	00 c0       	rjmp	.+0      	; 0x153c <message_send+0x2a>
    153c:	00 00       	nop
    153e:	00 00       	nop
    1540:	00 00       	nop
    1542:	30 95       	com	r19
    1544:	25 b1       	in	r18, 0x05	; 5
    1546:	23 23       	and	r18, r19
    1548:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    154a:	2e ea       	ldi	r18, 0xAE	; 174
    154c:	2a 95       	dec	r18
    154e:	f1 f7       	brne	.-4      	; 0x154c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1550:	2b ee       	ldi	r18, 0xEB	; 235

00001552 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1552:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1554:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1556:	0a c0       	rjmp	.+20     	; 0x156c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1558:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    155a:	30 91 6d 01 	lds	r19, 0x016D
    com tmpreg2
    155e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1560:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1562:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1564:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1566:	0f be       	out	0x3f, r0	; 63
    return 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	08 95       	ret

0000156c <nocollision>:
nocollision:
    nop
    156c:	00 00       	nop
    dec tmpreg1
    156e:	2a 95       	dec	r18
    brne checkcollision
    1570:	81 f7       	brne	.-32     	; 0x1552 <checkcollision>

    ldi tmpreg1, 0x01
    1572:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1574:	30 91 6d 01 	lds	r19, 0x016D
    1578:	20 30       	cpi	r18, 0x00	; 0
    157a:	29 f0       	breq	.+10     	; 0x1586 <nocollision+0x1a>
    157c:	00 00       	nop
    157e:	25 b1       	in	r18, 0x05	; 5
    1580:	23 2b       	or	r18, r19
    1582:	25 b9       	out	0x05, r18	; 5
    1584:	04 c0       	rjmp	.+8      	; 0x158e <nocollision+0x22>
    1586:	00 00       	nop
    1588:	00 00       	nop
    158a:	00 00       	nop
    158c:	00 c0       	rjmp	.+0      	; 0x158e <nocollision+0x22>
    158e:	00 00       	nop
    1590:	00 00       	nop
    1592:	00 00       	nop
    1594:	30 95       	com	r19
    1596:	25 b1       	in	r18, 0x05	; 5
    1598:	23 23       	and	r18, r19
    159a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    159c:	00 00       	nop
    159e:	24 e5       	ldi	r18, 0x54	; 84
    15a0:	2a 95       	dec	r18
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    15a4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    15a6:	8c e0       	ldi	r24, 0x0C	; 12

000015a8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    15a8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    15ac:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    15ae:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    15b0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    15b2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    15b4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    15b8:	50 e0       	ldi	r21, 0x00	; 0

000015ba <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    15ba:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    15bc:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    15be:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    15c0:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    15c2:	30 91 6d 01 	lds	r19, 0x016D
    15c6:	20 30       	cpi	r18, 0x00	; 0
    15c8:	29 f0       	breq	.+10     	; 0x15d4 <sendbit+0x1a>
    15ca:	00 00       	nop
    15cc:	25 b1       	in	r18, 0x05	; 5
    15ce:	23 2b       	or	r18, r19
    15d0:	25 b9       	out	0x05, r18	; 5
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <sendbit+0x22>
    15d4:	00 00       	nop
    15d6:	00 00       	nop
    15d8:	00 00       	nop
    15da:	00 c0       	rjmp	.+0      	; 0x15dc <sendbit+0x22>
    15dc:	00 00       	nop
    15de:	00 00       	nop
    15e0:	00 00       	nop
    15e2:	30 95       	com	r19
    15e4:	25 b1       	in	r18, 0x05	; 5
    15e6:	23 23       	and	r18, r19
    15e8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    15ea:	00 00       	nop
    15ec:	21 e5       	ldi	r18, 0x51	; 81
    15ee:	2a 95       	dec	r18
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    15f2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    15f4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    15f6:	9a 95       	dec	r25
    brne sendbit
    15f8:	01 f7       	brne	.-64     	; 0x15ba <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    15fa:	8a 95       	dec	r24
    brne sendbyte
    15fc:	a9 f6       	brne	.-86     	; 0x15a8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    15fe:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1600:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1602:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1604:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1606:	30 91 6d 01 	lds	r19, 0x016D
    com tmpreg2
    160a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    160c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    160e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1610:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1612:	0f be       	out	0x3f, r0	; 63
    return 1
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	08 95       	ret

00001618 <main>:
    }
}

int main()
{
    kilo_init();
    1618:	0e 94 9d 01 	call	0x33a	; 0x33a <kilo_init>
    debug_init();
    161c:	0e 94 1b 01 	call	0x236	; 0x236 <debug_init>
    kilo_start(setup, loop);
    1620:	6e e9       	ldi	r22, 0x9E	; 158
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	8a e7       	ldi	r24, 0x7A	; 122
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 99 02 	call	0x532	; 0x532 <kilo_start>

    return 0;
}
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	08 95       	ret

00001632 <__divmodhi4>:
    1632:	97 fb       	bst	r25, 7
    1634:	07 2e       	mov	r0, r23
    1636:	16 f4       	brtc	.+4      	; 0x163c <__divmodhi4+0xa>
    1638:	00 94       	com	r0
    163a:	07 d0       	rcall	.+14     	; 0x164a <__divmodhi4_neg1>
    163c:	77 fd       	sbrc	r23, 7
    163e:	09 d0       	rcall	.+18     	; 0x1652 <__divmodhi4_neg2>
    1640:	0e 94 42 0b 	call	0x1684	; 0x1684 <__udivmodhi4>
    1644:	07 fc       	sbrc	r0, 7
    1646:	05 d0       	rcall	.+10     	; 0x1652 <__divmodhi4_neg2>
    1648:	3e f4       	brtc	.+14     	; 0x1658 <__divmodhi4_exit>

0000164a <__divmodhi4_neg1>:
    164a:	90 95       	com	r25
    164c:	81 95       	neg	r24
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	08 95       	ret

00001652 <__divmodhi4_neg2>:
    1652:	70 95       	com	r23
    1654:	61 95       	neg	r22
    1656:	7f 4f       	sbci	r23, 0xFF	; 255

00001658 <__divmodhi4_exit>:
    1658:	08 95       	ret

0000165a <__tablejump2__>:
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	05 90       	lpm	r0, Z+
    1660:	f4 91       	lpm	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	09 94       	ijmp

00001666 <__umulhisi3>:
    1666:	a2 9f       	mul	r26, r18
    1668:	b0 01       	movw	r22, r0
    166a:	b3 9f       	mul	r27, r19
    166c:	c0 01       	movw	r24, r0
    166e:	a3 9f       	mul	r26, r19
    1670:	70 0d       	add	r23, r0
    1672:	81 1d       	adc	r24, r1
    1674:	11 24       	eor	r1, r1
    1676:	91 1d       	adc	r25, r1
    1678:	b2 9f       	mul	r27, r18
    167a:	70 0d       	add	r23, r0
    167c:	81 1d       	adc	r24, r1
    167e:	11 24       	eor	r1, r1
    1680:	91 1d       	adc	r25, r1
    1682:	08 95       	ret

00001684 <__udivmodhi4>:
    1684:	aa 1b       	sub	r26, r26
    1686:	bb 1b       	sub	r27, r27
    1688:	51 e1       	ldi	r21, 0x11	; 17
    168a:	07 c0       	rjmp	.+14     	; 0x169a <__udivmodhi4_ep>

0000168c <__udivmodhi4_loop>:
    168c:	aa 1f       	adc	r26, r26
    168e:	bb 1f       	adc	r27, r27
    1690:	a6 17       	cp	r26, r22
    1692:	b7 07       	cpc	r27, r23
    1694:	10 f0       	brcs	.+4      	; 0x169a <__udivmodhi4_ep>
    1696:	a6 1b       	sub	r26, r22
    1698:	b7 0b       	sbc	r27, r23

0000169a <__udivmodhi4_ep>:
    169a:	88 1f       	adc	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	5a 95       	dec	r21
    16a0:	a9 f7       	brne	.-22     	; 0x168c <__udivmodhi4_loop>
    16a2:	80 95       	com	r24
    16a4:	90 95       	com	r25
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	08 95       	ret

000016ac <__subsf3>:
    16ac:	50 58       	subi	r21, 0x80	; 128

000016ae <__addsf3>:
    16ae:	bb 27       	eor	r27, r27
    16b0:	aa 27       	eor	r26, r26
    16b2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__addsf3x>
    16b6:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__fp_round>
    16ba:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__fp_pscA>
    16be:	38 f0       	brcs	.+14     	; 0x16ce <__addsf3+0x20>
    16c0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fp_pscB>
    16c4:	20 f0       	brcs	.+8      	; 0x16ce <__addsf3+0x20>
    16c6:	39 f4       	brne	.+14     	; 0x16d6 <__addsf3+0x28>
    16c8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ca:	19 f4       	brne	.+6      	; 0x16d2 <__addsf3+0x24>
    16cc:	26 f4       	brtc	.+8      	; 0x16d6 <__addsf3+0x28>
    16ce:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_nan>
    16d2:	0e f4       	brtc	.+2      	; 0x16d6 <__addsf3+0x28>
    16d4:	e0 95       	com	r30
    16d6:	e7 fb       	bst	r30, 7
    16d8:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__fp_inf>

000016dc <__addsf3x>:
    16dc:	e9 2f       	mov	r30, r25
    16de:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__fp_split3>
    16e2:	58 f3       	brcs	.-42     	; 0x16ba <__addsf3+0xc>
    16e4:	ba 17       	cp	r27, r26
    16e6:	62 07       	cpc	r22, r18
    16e8:	73 07       	cpc	r23, r19
    16ea:	84 07       	cpc	r24, r20
    16ec:	95 07       	cpc	r25, r21
    16ee:	20 f0       	brcs	.+8      	; 0x16f8 <__addsf3x+0x1c>
    16f0:	79 f4       	brne	.+30     	; 0x1710 <__addsf3x+0x34>
    16f2:	a6 f5       	brtc	.+104    	; 0x175c <__addsf3x+0x80>
    16f4:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__fp_zero>
    16f8:	0e f4       	brtc	.+2      	; 0x16fc <__addsf3x+0x20>
    16fa:	e0 95       	com	r30
    16fc:	0b 2e       	mov	r0, r27
    16fe:	ba 2f       	mov	r27, r26
    1700:	a0 2d       	mov	r26, r0
    1702:	0b 01       	movw	r0, r22
    1704:	b9 01       	movw	r22, r18
    1706:	90 01       	movw	r18, r0
    1708:	0c 01       	movw	r0, r24
    170a:	ca 01       	movw	r24, r20
    170c:	a0 01       	movw	r20, r0
    170e:	11 24       	eor	r1, r1
    1710:	ff 27       	eor	r31, r31
    1712:	59 1b       	sub	r21, r25
    1714:	99 f0       	breq	.+38     	; 0x173c <__addsf3x+0x60>
    1716:	59 3f       	cpi	r21, 0xF9	; 249
    1718:	50 f4       	brcc	.+20     	; 0x172e <__addsf3x+0x52>
    171a:	50 3e       	cpi	r21, 0xE0	; 224
    171c:	68 f1       	brcs	.+90     	; 0x1778 <__addsf3x+0x9c>
    171e:	1a 16       	cp	r1, r26
    1720:	f0 40       	sbci	r31, 0x00	; 0
    1722:	a2 2f       	mov	r26, r18
    1724:	23 2f       	mov	r18, r19
    1726:	34 2f       	mov	r19, r20
    1728:	44 27       	eor	r20, r20
    172a:	58 5f       	subi	r21, 0xF8	; 248
    172c:	f3 cf       	rjmp	.-26     	; 0x1714 <__addsf3x+0x38>
    172e:	46 95       	lsr	r20
    1730:	37 95       	ror	r19
    1732:	27 95       	ror	r18
    1734:	a7 95       	ror	r26
    1736:	f0 40       	sbci	r31, 0x00	; 0
    1738:	53 95       	inc	r21
    173a:	c9 f7       	brne	.-14     	; 0x172e <__addsf3x+0x52>
    173c:	7e f4       	brtc	.+30     	; 0x175c <__addsf3x+0x80>
    173e:	1f 16       	cp	r1, r31
    1740:	ba 0b       	sbc	r27, r26
    1742:	62 0b       	sbc	r22, r18
    1744:	73 0b       	sbc	r23, r19
    1746:	84 0b       	sbc	r24, r20
    1748:	ba f0       	brmi	.+46     	; 0x1778 <__addsf3x+0x9c>
    174a:	91 50       	subi	r25, 0x01	; 1
    174c:	a1 f0       	breq	.+40     	; 0x1776 <__addsf3x+0x9a>
    174e:	ff 0f       	add	r31, r31
    1750:	bb 1f       	adc	r27, r27
    1752:	66 1f       	adc	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	c2 f7       	brpl	.-16     	; 0x174a <__addsf3x+0x6e>
    175a:	0e c0       	rjmp	.+28     	; 0x1778 <__addsf3x+0x9c>
    175c:	ba 0f       	add	r27, r26
    175e:	62 1f       	adc	r22, r18
    1760:	73 1f       	adc	r23, r19
    1762:	84 1f       	adc	r24, r20
    1764:	48 f4       	brcc	.+18     	; 0x1778 <__addsf3x+0x9c>
    1766:	87 95       	ror	r24
    1768:	77 95       	ror	r23
    176a:	67 95       	ror	r22
    176c:	b7 95       	ror	r27
    176e:	f7 95       	ror	r31
    1770:	9e 3f       	cpi	r25, 0xFE	; 254
    1772:	08 f0       	brcs	.+2      	; 0x1776 <__addsf3x+0x9a>
    1774:	b0 cf       	rjmp	.-160    	; 0x16d6 <__addsf3+0x28>
    1776:	93 95       	inc	r25
    1778:	88 0f       	add	r24, r24
    177a:	08 f0       	brcs	.+2      	; 0x177e <__addsf3x+0xa2>
    177c:	99 27       	eor	r25, r25
    177e:	ee 0f       	add	r30, r30
    1780:	97 95       	ror	r25
    1782:	87 95       	ror	r24
    1784:	08 95       	ret

00001786 <__divsf3>:
    1786:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__divsf3x>
    178a:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__fp_round>
    178e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fp_pscB>
    1792:	58 f0       	brcs	.+22     	; 0x17aa <__divsf3+0x24>
    1794:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__fp_pscA>
    1798:	40 f0       	brcs	.+16     	; 0x17aa <__divsf3+0x24>
    179a:	29 f4       	brne	.+10     	; 0x17a6 <__divsf3+0x20>
    179c:	5f 3f       	cpi	r21, 0xFF	; 255
    179e:	29 f0       	breq	.+10     	; 0x17aa <__divsf3+0x24>
    17a0:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__fp_inf>
    17a4:	51 11       	cpse	r21, r1
    17a6:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_szero>
    17aa:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_nan>

000017ae <__divsf3x>:
    17ae:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__fp_split3>
    17b2:	68 f3       	brcs	.-38     	; 0x178e <__divsf3+0x8>

000017b4 <__divsf3_pse>:
    17b4:	99 23       	and	r25, r25
    17b6:	b1 f3       	breq	.-20     	; 0x17a4 <__divsf3+0x1e>
    17b8:	55 23       	and	r21, r21
    17ba:	91 f3       	breq	.-28     	; 0x17a0 <__divsf3+0x1a>
    17bc:	95 1b       	sub	r25, r21
    17be:	55 0b       	sbc	r21, r21
    17c0:	bb 27       	eor	r27, r27
    17c2:	aa 27       	eor	r26, r26
    17c4:	62 17       	cp	r22, r18
    17c6:	73 07       	cpc	r23, r19
    17c8:	84 07       	cpc	r24, r20
    17ca:	38 f0       	brcs	.+14     	; 0x17da <__divsf3_pse+0x26>
    17cc:	9f 5f       	subi	r25, 0xFF	; 255
    17ce:	5f 4f       	sbci	r21, 0xFF	; 255
    17d0:	22 0f       	add	r18, r18
    17d2:	33 1f       	adc	r19, r19
    17d4:	44 1f       	adc	r20, r20
    17d6:	aa 1f       	adc	r26, r26
    17d8:	a9 f3       	breq	.-22     	; 0x17c4 <__divsf3_pse+0x10>
    17da:	35 d0       	rcall	.+106    	; 0x1846 <__divsf3_pse+0x92>
    17dc:	0e 2e       	mov	r0, r30
    17de:	3a f0       	brmi	.+14     	; 0x17ee <__divsf3_pse+0x3a>
    17e0:	e0 e8       	ldi	r30, 0x80	; 128
    17e2:	32 d0       	rcall	.+100    	; 0x1848 <__divsf3_pse+0x94>
    17e4:	91 50       	subi	r25, 0x01	; 1
    17e6:	50 40       	sbci	r21, 0x00	; 0
    17e8:	e6 95       	lsr	r30
    17ea:	00 1c       	adc	r0, r0
    17ec:	ca f7       	brpl	.-14     	; 0x17e0 <__divsf3_pse+0x2c>
    17ee:	2b d0       	rcall	.+86     	; 0x1846 <__divsf3_pse+0x92>
    17f0:	fe 2f       	mov	r31, r30
    17f2:	29 d0       	rcall	.+82     	; 0x1846 <__divsf3_pse+0x92>
    17f4:	66 0f       	add	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	bb 1f       	adc	r27, r27
    17fc:	26 17       	cp	r18, r22
    17fe:	37 07       	cpc	r19, r23
    1800:	48 07       	cpc	r20, r24
    1802:	ab 07       	cpc	r26, r27
    1804:	b0 e8       	ldi	r27, 0x80	; 128
    1806:	09 f0       	breq	.+2      	; 0x180a <__divsf3_pse+0x56>
    1808:	bb 0b       	sbc	r27, r27
    180a:	80 2d       	mov	r24, r0
    180c:	bf 01       	movw	r22, r30
    180e:	ff 27       	eor	r31, r31
    1810:	93 58       	subi	r25, 0x83	; 131
    1812:	5f 4f       	sbci	r21, 0xFF	; 255
    1814:	3a f0       	brmi	.+14     	; 0x1824 <__divsf3_pse+0x70>
    1816:	9e 3f       	cpi	r25, 0xFE	; 254
    1818:	51 05       	cpc	r21, r1
    181a:	78 f0       	brcs	.+30     	; 0x183a <__divsf3_pse+0x86>
    181c:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__fp_inf>
    1820:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_szero>
    1824:	5f 3f       	cpi	r21, 0xFF	; 255
    1826:	e4 f3       	brlt	.-8      	; 0x1820 <__divsf3_pse+0x6c>
    1828:	98 3e       	cpi	r25, 0xE8	; 232
    182a:	d4 f3       	brlt	.-12     	; 0x1820 <__divsf3_pse+0x6c>
    182c:	86 95       	lsr	r24
    182e:	77 95       	ror	r23
    1830:	67 95       	ror	r22
    1832:	b7 95       	ror	r27
    1834:	f7 95       	ror	r31
    1836:	9f 5f       	subi	r25, 0xFF	; 255
    1838:	c9 f7       	brne	.-14     	; 0x182c <__divsf3_pse+0x78>
    183a:	88 0f       	add	r24, r24
    183c:	91 1d       	adc	r25, r1
    183e:	96 95       	lsr	r25
    1840:	87 95       	ror	r24
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret
    1846:	e1 e0       	ldi	r30, 0x01	; 1
    1848:	66 0f       	add	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	bb 1f       	adc	r27, r27
    1850:	62 17       	cp	r22, r18
    1852:	73 07       	cpc	r23, r19
    1854:	84 07       	cpc	r24, r20
    1856:	ba 07       	cpc	r27, r26
    1858:	20 f0       	brcs	.+8      	; 0x1862 <__divsf3_pse+0xae>
    185a:	62 1b       	sub	r22, r18
    185c:	73 0b       	sbc	r23, r19
    185e:	84 0b       	sbc	r24, r20
    1860:	ba 0b       	sbc	r27, r26
    1862:	ee 1f       	adc	r30, r30
    1864:	88 f7       	brcc	.-30     	; 0x1848 <__divsf3_pse+0x94>
    1866:	e0 95       	com	r30
    1868:	08 95       	ret

0000186a <__fixsfsi>:
    186a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixunssfsi>
    186e:	68 94       	set
    1870:	b1 11       	cpse	r27, r1
    1872:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_szero>
    1876:	08 95       	ret

00001878 <__fixunssfsi>:
    1878:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__fp_splitA>
    187c:	88 f0       	brcs	.+34     	; 0x18a0 <__fixunssfsi+0x28>
    187e:	9f 57       	subi	r25, 0x7F	; 127
    1880:	98 f0       	brcs	.+38     	; 0x18a8 <__fixunssfsi+0x30>
    1882:	b9 2f       	mov	r27, r25
    1884:	99 27       	eor	r25, r25
    1886:	b7 51       	subi	r27, 0x17	; 23
    1888:	b0 f0       	brcs	.+44     	; 0x18b6 <__fixunssfsi+0x3e>
    188a:	e1 f0       	breq	.+56     	; 0x18c4 <__fixunssfsi+0x4c>
    188c:	66 0f       	add	r22, r22
    188e:	77 1f       	adc	r23, r23
    1890:	88 1f       	adc	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	1a f0       	brmi	.+6      	; 0x189c <__fixunssfsi+0x24>
    1896:	ba 95       	dec	r27
    1898:	c9 f7       	brne	.-14     	; 0x188c <__fixunssfsi+0x14>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <__fixunssfsi+0x4c>
    189c:	b1 30       	cpi	r27, 0x01	; 1
    189e:	91 f0       	breq	.+36     	; 0x18c4 <__fixunssfsi+0x4c>
    18a0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__fp_zero>
    18a4:	b1 e0       	ldi	r27, 0x01	; 1
    18a6:	08 95       	ret
    18a8:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__fp_zero>
    18ac:	67 2f       	mov	r22, r23
    18ae:	78 2f       	mov	r23, r24
    18b0:	88 27       	eor	r24, r24
    18b2:	b8 5f       	subi	r27, 0xF8	; 248
    18b4:	39 f0       	breq	.+14     	; 0x18c4 <__fixunssfsi+0x4c>
    18b6:	b9 3f       	cpi	r27, 0xF9	; 249
    18b8:	cc f3       	brlt	.-14     	; 0x18ac <__fixunssfsi+0x34>
    18ba:	86 95       	lsr	r24
    18bc:	77 95       	ror	r23
    18be:	67 95       	ror	r22
    18c0:	b3 95       	inc	r27
    18c2:	d9 f7       	brne	.-10     	; 0x18ba <__fixunssfsi+0x42>
    18c4:	3e f4       	brtc	.+14     	; 0x18d4 <__fixunssfsi+0x5c>
    18c6:	90 95       	com	r25
    18c8:	80 95       	com	r24
    18ca:	70 95       	com	r23
    18cc:	61 95       	neg	r22
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	8f 4f       	sbci	r24, 0xFF	; 255
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	08 95       	ret

000018d6 <__floatunsisf>:
    18d6:	e8 94       	clt
    18d8:	09 c0       	rjmp	.+18     	; 0x18ec <__floatsisf+0x12>

000018da <__floatsisf>:
    18da:	97 fb       	bst	r25, 7
    18dc:	3e f4       	brtc	.+14     	; 0x18ec <__floatsisf+0x12>
    18de:	90 95       	com	r25
    18e0:	80 95       	com	r24
    18e2:	70 95       	com	r23
    18e4:	61 95       	neg	r22
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	99 23       	and	r25, r25
    18ee:	a9 f0       	breq	.+42     	; 0x191a <__floatsisf+0x40>
    18f0:	f9 2f       	mov	r31, r25
    18f2:	96 e9       	ldi	r25, 0x96	; 150
    18f4:	bb 27       	eor	r27, r27
    18f6:	93 95       	inc	r25
    18f8:	f6 95       	lsr	r31
    18fa:	87 95       	ror	r24
    18fc:	77 95       	ror	r23
    18fe:	67 95       	ror	r22
    1900:	b7 95       	ror	r27
    1902:	f1 11       	cpse	r31, r1
    1904:	f8 cf       	rjmp	.-16     	; 0x18f6 <__floatsisf+0x1c>
    1906:	fa f4       	brpl	.+62     	; 0x1946 <__floatsisf+0x6c>
    1908:	bb 0f       	add	r27, r27
    190a:	11 f4       	brne	.+4      	; 0x1910 <__floatsisf+0x36>
    190c:	60 ff       	sbrs	r22, 0
    190e:	1b c0       	rjmp	.+54     	; 0x1946 <__floatsisf+0x6c>
    1910:	6f 5f       	subi	r22, 0xFF	; 255
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	8f 4f       	sbci	r24, 0xFF	; 255
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	16 c0       	rjmp	.+44     	; 0x1946 <__floatsisf+0x6c>
    191a:	88 23       	and	r24, r24
    191c:	11 f0       	breq	.+4      	; 0x1922 <__floatsisf+0x48>
    191e:	96 e9       	ldi	r25, 0x96	; 150
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <__floatsisf+0x6a>
    1922:	77 23       	and	r23, r23
    1924:	21 f0       	breq	.+8      	; 0x192e <__floatsisf+0x54>
    1926:	9e e8       	ldi	r25, 0x8E	; 142
    1928:	87 2f       	mov	r24, r23
    192a:	76 2f       	mov	r23, r22
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <__floatsisf+0x5e>
    192e:	66 23       	and	r22, r22
    1930:	71 f0       	breq	.+28     	; 0x194e <__floatsisf+0x74>
    1932:	96 e8       	ldi	r25, 0x86	; 134
    1934:	86 2f       	mov	r24, r22
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	2a f0       	brmi	.+10     	; 0x1946 <__floatsisf+0x6c>
    193c:	9a 95       	dec	r25
    193e:	66 0f       	add	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	da f7       	brpl	.-10     	; 0x193c <__floatsisf+0x62>
    1946:	88 0f       	add	r24, r24
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	97 f9       	bld	r25, 7
    194e:	08 95       	ret

00001950 <__fp_inf>:
    1950:	97 f9       	bld	r25, 7
    1952:	9f 67       	ori	r25, 0x7F	; 127
    1954:	80 e8       	ldi	r24, 0x80	; 128
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	08 95       	ret

0000195c <__fp_nan>:
    195c:	9f ef       	ldi	r25, 0xFF	; 255
    195e:	80 ec       	ldi	r24, 0xC0	; 192
    1960:	08 95       	ret

00001962 <__fp_pscA>:
    1962:	00 24       	eor	r0, r0
    1964:	0a 94       	dec	r0
    1966:	16 16       	cp	r1, r22
    1968:	17 06       	cpc	r1, r23
    196a:	18 06       	cpc	r1, r24
    196c:	09 06       	cpc	r0, r25
    196e:	08 95       	ret

00001970 <__fp_pscB>:
    1970:	00 24       	eor	r0, r0
    1972:	0a 94       	dec	r0
    1974:	12 16       	cp	r1, r18
    1976:	13 06       	cpc	r1, r19
    1978:	14 06       	cpc	r1, r20
    197a:	05 06       	cpc	r0, r21
    197c:	08 95       	ret

0000197e <__fp_round>:
    197e:	09 2e       	mov	r0, r25
    1980:	03 94       	inc	r0
    1982:	00 0c       	add	r0, r0
    1984:	11 f4       	brne	.+4      	; 0x198a <__fp_round+0xc>
    1986:	88 23       	and	r24, r24
    1988:	52 f0       	brmi	.+20     	; 0x199e <__fp_round+0x20>
    198a:	bb 0f       	add	r27, r27
    198c:	40 f4       	brcc	.+16     	; 0x199e <__fp_round+0x20>
    198e:	bf 2b       	or	r27, r31
    1990:	11 f4       	brne	.+4      	; 0x1996 <__fp_round+0x18>
    1992:	60 ff       	sbrs	r22, 0
    1994:	04 c0       	rjmp	.+8      	; 0x199e <__fp_round+0x20>
    1996:	6f 5f       	subi	r22, 0xFF	; 255
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	08 95       	ret

000019a0 <__fp_split3>:
    19a0:	57 fd       	sbrc	r21, 7
    19a2:	90 58       	subi	r25, 0x80	; 128
    19a4:	44 0f       	add	r20, r20
    19a6:	55 1f       	adc	r21, r21
    19a8:	59 f0       	breq	.+22     	; 0x19c0 <__fp_splitA+0x10>
    19aa:	5f 3f       	cpi	r21, 0xFF	; 255
    19ac:	71 f0       	breq	.+28     	; 0x19ca <__fp_splitA+0x1a>
    19ae:	47 95       	ror	r20

000019b0 <__fp_splitA>:
    19b0:	88 0f       	add	r24, r24
    19b2:	97 fb       	bst	r25, 7
    19b4:	99 1f       	adc	r25, r25
    19b6:	61 f0       	breq	.+24     	; 0x19d0 <__fp_splitA+0x20>
    19b8:	9f 3f       	cpi	r25, 0xFF	; 255
    19ba:	79 f0       	breq	.+30     	; 0x19da <__fp_splitA+0x2a>
    19bc:	87 95       	ror	r24
    19be:	08 95       	ret
    19c0:	12 16       	cp	r1, r18
    19c2:	13 06       	cpc	r1, r19
    19c4:	14 06       	cpc	r1, r20
    19c6:	55 1f       	adc	r21, r21
    19c8:	f2 cf       	rjmp	.-28     	; 0x19ae <__fp_split3+0xe>
    19ca:	46 95       	lsr	r20
    19cc:	f1 df       	rcall	.-30     	; 0x19b0 <__fp_splitA>
    19ce:	08 c0       	rjmp	.+16     	; 0x19e0 <__fp_splitA+0x30>
    19d0:	16 16       	cp	r1, r22
    19d2:	17 06       	cpc	r1, r23
    19d4:	18 06       	cpc	r1, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	f1 cf       	rjmp	.-30     	; 0x19bc <__fp_splitA+0xc>
    19da:	86 95       	lsr	r24
    19dc:	71 05       	cpc	r23, r1
    19de:	61 05       	cpc	r22, r1
    19e0:	08 94       	sec
    19e2:	08 95       	ret

000019e4 <__fp_zero>:
    19e4:	e8 94       	clt

000019e6 <__fp_szero>:
    19e6:	bb 27       	eor	r27, r27
    19e8:	66 27       	eor	r22, r22
    19ea:	77 27       	eor	r23, r23
    19ec:	cb 01       	movw	r24, r22
    19ee:	97 f9       	bld	r25, 7
    19f0:	08 95       	ret

000019f2 <__mulsf3>:
    19f2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__mulsf3x>
    19f6:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__fp_round>
    19fa:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__fp_pscA>
    19fe:	38 f0       	brcs	.+14     	; 0x1a0e <__mulsf3+0x1c>
    1a00:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fp_pscB>
    1a04:	20 f0       	brcs	.+8      	; 0x1a0e <__mulsf3+0x1c>
    1a06:	95 23       	and	r25, r21
    1a08:	11 f0       	breq	.+4      	; 0x1a0e <__mulsf3+0x1c>
    1a0a:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__fp_inf>
    1a0e:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_nan>
    1a12:	11 24       	eor	r1, r1
    1a14:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_szero>

00001a18 <__mulsf3x>:
    1a18:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__fp_split3>
    1a1c:	70 f3       	brcs	.-36     	; 0x19fa <__mulsf3+0x8>

00001a1e <__mulsf3_pse>:
    1a1e:	95 9f       	mul	r25, r21
    1a20:	c1 f3       	breq	.-16     	; 0x1a12 <__mulsf3+0x20>
    1a22:	95 0f       	add	r25, r21
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	55 1f       	adc	r21, r21
    1a28:	62 9f       	mul	r22, r18
    1a2a:	f0 01       	movw	r30, r0
    1a2c:	72 9f       	mul	r23, r18
    1a2e:	bb 27       	eor	r27, r27
    1a30:	f0 0d       	add	r31, r0
    1a32:	b1 1d       	adc	r27, r1
    1a34:	63 9f       	mul	r22, r19
    1a36:	aa 27       	eor	r26, r26
    1a38:	f0 0d       	add	r31, r0
    1a3a:	b1 1d       	adc	r27, r1
    1a3c:	aa 1f       	adc	r26, r26
    1a3e:	64 9f       	mul	r22, r20
    1a40:	66 27       	eor	r22, r22
    1a42:	b0 0d       	add	r27, r0
    1a44:	a1 1d       	adc	r26, r1
    1a46:	66 1f       	adc	r22, r22
    1a48:	82 9f       	mul	r24, r18
    1a4a:	22 27       	eor	r18, r18
    1a4c:	b0 0d       	add	r27, r0
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	62 1f       	adc	r22, r18
    1a52:	73 9f       	mul	r23, r19
    1a54:	b0 0d       	add	r27, r0
    1a56:	a1 1d       	adc	r26, r1
    1a58:	62 1f       	adc	r22, r18
    1a5a:	83 9f       	mul	r24, r19
    1a5c:	a0 0d       	add	r26, r0
    1a5e:	61 1d       	adc	r22, r1
    1a60:	22 1f       	adc	r18, r18
    1a62:	74 9f       	mul	r23, r20
    1a64:	33 27       	eor	r19, r19
    1a66:	a0 0d       	add	r26, r0
    1a68:	61 1d       	adc	r22, r1
    1a6a:	23 1f       	adc	r18, r19
    1a6c:	84 9f       	mul	r24, r20
    1a6e:	60 0d       	add	r22, r0
    1a70:	21 1d       	adc	r18, r1
    1a72:	82 2f       	mov	r24, r18
    1a74:	76 2f       	mov	r23, r22
    1a76:	6a 2f       	mov	r22, r26
    1a78:	11 24       	eor	r1, r1
    1a7a:	9f 57       	subi	r25, 0x7F	; 127
    1a7c:	50 40       	sbci	r21, 0x00	; 0
    1a7e:	9a f0       	brmi	.+38     	; 0x1aa6 <__mulsf3_pse+0x88>
    1a80:	f1 f0       	breq	.+60     	; 0x1abe <__mulsf3_pse+0xa0>
    1a82:	88 23       	and	r24, r24
    1a84:	4a f0       	brmi	.+18     	; 0x1a98 <__mulsf3_pse+0x7a>
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	66 1f       	adc	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	91 50       	subi	r25, 0x01	; 1
    1a94:	50 40       	sbci	r21, 0x00	; 0
    1a96:	a9 f7       	brne	.-22     	; 0x1a82 <__mulsf3_pse+0x64>
    1a98:	9e 3f       	cpi	r25, 0xFE	; 254
    1a9a:	51 05       	cpc	r21, r1
    1a9c:	80 f0       	brcs	.+32     	; 0x1abe <__mulsf3_pse+0xa0>
    1a9e:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__fp_inf>
    1aa2:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_szero>
    1aa6:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa8:	e4 f3       	brlt	.-8      	; 0x1aa2 <__mulsf3_pse+0x84>
    1aaa:	98 3e       	cpi	r25, 0xE8	; 232
    1aac:	d4 f3       	brlt	.-12     	; 0x1aa2 <__mulsf3_pse+0x84>
    1aae:	86 95       	lsr	r24
    1ab0:	77 95       	ror	r23
    1ab2:	67 95       	ror	r22
    1ab4:	b7 95       	ror	r27
    1ab6:	f7 95       	ror	r31
    1ab8:	e7 95       	ror	r30
    1aba:	9f 5f       	subi	r25, 0xFF	; 255
    1abc:	c1 f7       	brne	.-16     	; 0x1aae <__mulsf3_pse+0x90>
    1abe:	fe 2b       	or	r31, r30
    1ac0:	88 0f       	add	r24, r24
    1ac2:	91 1d       	adc	r25, r1
    1ac4:	96 95       	lsr	r25
    1ac6:	87 95       	ror	r24
    1ac8:	97 f9       	bld	r25, 7
    1aca:	08 95       	ret

00001acc <do_rand>:
    1acc:	8f 92       	push	r8
    1ace:	9f 92       	push	r9
    1ad0:	af 92       	push	r10
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	ec 01       	movw	r28, r24
    1ae2:	68 81       	ld	r22, Y
    1ae4:	79 81       	ldd	r23, Y+1	; 0x01
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	61 15       	cp	r22, r1
    1aec:	71 05       	cpc	r23, r1
    1aee:	81 05       	cpc	r24, r1
    1af0:	91 05       	cpc	r25, r1
    1af2:	21 f4       	brne	.+8      	; 0x1afc <do_rand+0x30>
    1af4:	64 e2       	ldi	r22, 0x24	; 36
    1af6:	79 ed       	ldi	r23, 0xD9	; 217
    1af8:	8b e5       	ldi	r24, 0x5B	; 91
    1afa:	97 e0       	ldi	r25, 0x07	; 7
    1afc:	2d e1       	ldi	r18, 0x1D	; 29
    1afe:	33 ef       	ldi	r19, 0xF3	; 243
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divmodsi4>
    1b08:	49 01       	movw	r8, r18
    1b0a:	5a 01       	movw	r10, r20
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	ac 01       	movw	r20, r24
    1b10:	a7 ea       	ldi	r26, 0xA7	; 167
    1b12:	b1 e4       	ldi	r27, 0x41	; 65
    1b14:	0e 94 8b 10 	call	0x2116	; 0x2116 <__muluhisi3>
    1b18:	6b 01       	movw	r12, r22
    1b1a:	7c 01       	movw	r14, r24
    1b1c:	ac ee       	ldi	r26, 0xEC	; 236
    1b1e:	b4 ef       	ldi	r27, 0xF4	; 244
    1b20:	a5 01       	movw	r20, r10
    1b22:	94 01       	movw	r18, r8
    1b24:	0e 94 99 10 	call	0x2132	; 0x2132 <__mulohisi3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8c 0d       	add	r24, r12
    1b2e:	9d 1d       	adc	r25, r13
    1b30:	ae 1d       	adc	r26, r14
    1b32:	bf 1d       	adc	r27, r15
    1b34:	b7 ff       	sbrs	r27, 7
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <do_rand+0x72>
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	a1 09       	sbc	r26, r1
    1b3c:	b0 48       	sbci	r27, 0x80	; 128
    1b3e:	88 83       	st	Y, r24
    1b40:	99 83       	std	Y+1, r25	; 0x01
    1b42:	aa 83       	std	Y+2, r26	; 0x02
    1b44:	bb 83       	std	Y+3, r27	; 0x03
    1b46:	9f 77       	andi	r25, 0x7F	; 127
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	9f 90       	pop	r9
    1b5a:	8f 90       	pop	r8
    1b5c:	08 95       	ret

00001b5e <rand_r>:
    1b5e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <do_rand>
    1b62:	08 95       	ret

00001b64 <rand>:
    1b64:	85 e1       	ldi	r24, 0x15	; 21
    1b66:	91 e0       	ldi	r25, 0x01	; 1
    1b68:	0e 94 66 0d 	call	0x1acc	; 0x1acc <do_rand>
    1b6c:	08 95       	ret

00001b6e <srand>:
    1b6e:	a0 e0       	ldi	r26, 0x00	; 0
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	80 93 15 01 	sts	0x0115, r24
    1b76:	90 93 16 01 	sts	0x0116, r25
    1b7a:	a0 93 17 01 	sts	0x0117, r26
    1b7e:	b0 93 18 01 	sts	0x0118, r27
    1b82:	08 95       	ret

00001b84 <printf>:
    1b84:	a0 e0       	ldi	r26, 0x00	; 0
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e8 ec       	ldi	r30, 0xC8	; 200
    1b8a:	fd e0       	ldi	r31, 0x0D	; 13
    1b8c:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x20>
    1b90:	ae 01       	movw	r20, r28
    1b92:	4b 5f       	subi	r20, 0xFB	; 251
    1b94:	5f 4f       	sbci	r21, 0xFF	; 255
    1b96:	fa 01       	movw	r30, r20
    1b98:	61 91       	ld	r22, Z+
    1b9a:	71 91       	ld	r23, Z+
    1b9c:	af 01       	movw	r20, r30
    1b9e:	80 91 b0 01 	lds	r24, 0x01B0
    1ba2:	90 91 b1 01 	lds	r25, 0x01B1
    1ba6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <vfprintf>
    1baa:	e2 e0       	ldi	r30, 0x02	; 2
    1bac:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x20>

00001bb0 <vfprintf>:
    1bb0:	ac e0       	ldi	r26, 0x0C	; 12
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ee ed       	ldi	r30, 0xDE	; 222
    1bb6:	fd e0       	ldi	r31, 0x0D	; 13
    1bb8:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__prologue_saves__>
    1bbc:	7c 01       	movw	r14, r24
    1bbe:	6b 01       	movw	r12, r22
    1bc0:	8a 01       	movw	r16, r20
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	17 82       	std	Z+7, r1	; 0x07
    1bc6:	16 82       	std	Z+6, r1	; 0x06
    1bc8:	83 81       	ldd	r24, Z+3	; 0x03
    1bca:	81 ff       	sbrs	r24, 1
    1bcc:	bd c1       	rjmp	.+890    	; 0x1f48 <vfprintf+0x398>
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	4c 01       	movw	r8, r24
    1bd4:	f7 01       	movw	r30, r14
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	f6 01       	movw	r30, r12
    1bda:	93 fd       	sbrc	r25, 3
    1bdc:	85 91       	lpm	r24, Z+
    1bde:	93 ff       	sbrs	r25, 3
    1be0:	81 91       	ld	r24, Z+
    1be2:	6f 01       	movw	r12, r30
    1be4:	88 23       	and	r24, r24
    1be6:	09 f4       	brne	.+2      	; 0x1bea <vfprintf+0x3a>
    1be8:	ab c1       	rjmp	.+854    	; 0x1f40 <vfprintf+0x390>
    1bea:	85 32       	cpi	r24, 0x25	; 37
    1bec:	39 f4       	brne	.+14     	; 0x1bfc <vfprintf+0x4c>
    1bee:	93 fd       	sbrc	r25, 3
    1bf0:	85 91       	lpm	r24, Z+
    1bf2:	93 ff       	sbrs	r25, 3
    1bf4:	81 91       	ld	r24, Z+
    1bf6:	6f 01       	movw	r12, r30
    1bf8:	85 32       	cpi	r24, 0x25	; 37
    1bfa:	29 f4       	brne	.+10     	; 0x1c06 <vfprintf+0x56>
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1c04:	e7 cf       	rjmp	.-50     	; 0x1bd4 <vfprintf+0x24>
    1c06:	51 2c       	mov	r5, r1
    1c08:	31 2c       	mov	r3, r1
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	20 32       	cpi	r18, 0x20	; 32
    1c0e:	a0 f4       	brcc	.+40     	; 0x1c38 <vfprintf+0x88>
    1c10:	8b 32       	cpi	r24, 0x2B	; 43
    1c12:	69 f0       	breq	.+26     	; 0x1c2e <vfprintf+0x7e>
    1c14:	30 f4       	brcc	.+12     	; 0x1c22 <vfprintf+0x72>
    1c16:	80 32       	cpi	r24, 0x20	; 32
    1c18:	59 f0       	breq	.+22     	; 0x1c30 <vfprintf+0x80>
    1c1a:	83 32       	cpi	r24, 0x23	; 35
    1c1c:	69 f4       	brne	.+26     	; 0x1c38 <vfprintf+0x88>
    1c1e:	20 61       	ori	r18, 0x10	; 16
    1c20:	2c c0       	rjmp	.+88     	; 0x1c7a <vfprintf+0xca>
    1c22:	8d 32       	cpi	r24, 0x2D	; 45
    1c24:	39 f0       	breq	.+14     	; 0x1c34 <vfprintf+0x84>
    1c26:	80 33       	cpi	r24, 0x30	; 48
    1c28:	39 f4       	brne	.+14     	; 0x1c38 <vfprintf+0x88>
    1c2a:	21 60       	ori	r18, 0x01	; 1
    1c2c:	26 c0       	rjmp	.+76     	; 0x1c7a <vfprintf+0xca>
    1c2e:	22 60       	ori	r18, 0x02	; 2
    1c30:	24 60       	ori	r18, 0x04	; 4
    1c32:	23 c0       	rjmp	.+70     	; 0x1c7a <vfprintf+0xca>
    1c34:	28 60       	ori	r18, 0x08	; 8
    1c36:	21 c0       	rjmp	.+66     	; 0x1c7a <vfprintf+0xca>
    1c38:	27 fd       	sbrc	r18, 7
    1c3a:	27 c0       	rjmp	.+78     	; 0x1c8a <vfprintf+0xda>
    1c3c:	30 ed       	ldi	r19, 0xD0	; 208
    1c3e:	38 0f       	add	r19, r24
    1c40:	3a 30       	cpi	r19, 0x0A	; 10
    1c42:	78 f4       	brcc	.+30     	; 0x1c62 <vfprintf+0xb2>
    1c44:	26 ff       	sbrs	r18, 6
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <vfprintf+0xa4>
    1c48:	fa e0       	ldi	r31, 0x0A	; 10
    1c4a:	5f 9e       	mul	r5, r31
    1c4c:	30 0d       	add	r19, r0
    1c4e:	11 24       	eor	r1, r1
    1c50:	53 2e       	mov	r5, r19
    1c52:	13 c0       	rjmp	.+38     	; 0x1c7a <vfprintf+0xca>
    1c54:	8a e0       	ldi	r24, 0x0A	; 10
    1c56:	38 9e       	mul	r3, r24
    1c58:	30 0d       	add	r19, r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	33 2e       	mov	r3, r19
    1c5e:	20 62       	ori	r18, 0x20	; 32
    1c60:	0c c0       	rjmp	.+24     	; 0x1c7a <vfprintf+0xca>
    1c62:	8e 32       	cpi	r24, 0x2E	; 46
    1c64:	21 f4       	brne	.+8      	; 0x1c6e <vfprintf+0xbe>
    1c66:	26 fd       	sbrc	r18, 6
    1c68:	6b c1       	rjmp	.+726    	; 0x1f40 <vfprintf+0x390>
    1c6a:	20 64       	ori	r18, 0x40	; 64
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <vfprintf+0xca>
    1c6e:	8c 36       	cpi	r24, 0x6C	; 108
    1c70:	11 f4       	brne	.+4      	; 0x1c76 <vfprintf+0xc6>
    1c72:	20 68       	ori	r18, 0x80	; 128
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <vfprintf+0xca>
    1c76:	88 36       	cpi	r24, 0x68	; 104
    1c78:	41 f4       	brne	.+16     	; 0x1c8a <vfprintf+0xda>
    1c7a:	f6 01       	movw	r30, r12
    1c7c:	93 fd       	sbrc	r25, 3
    1c7e:	85 91       	lpm	r24, Z+
    1c80:	93 ff       	sbrs	r25, 3
    1c82:	81 91       	ld	r24, Z+
    1c84:	6f 01       	movw	r12, r30
    1c86:	81 11       	cpse	r24, r1
    1c88:	c1 cf       	rjmp	.-126    	; 0x1c0c <vfprintf+0x5c>
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	9f 7d       	andi	r25, 0xDF	; 223
    1c8e:	95 54       	subi	r25, 0x45	; 69
    1c90:	93 30       	cpi	r25, 0x03	; 3
    1c92:	28 f4       	brcc	.+10     	; 0x1c9e <vfprintf+0xee>
    1c94:	0c 5f       	subi	r16, 0xFC	; 252
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	ff e3       	ldi	r31, 0x3F	; 63
    1c9a:	f9 83       	std	Y+1, r31	; 0x01
    1c9c:	0d c0       	rjmp	.+26     	; 0x1cb8 <vfprintf+0x108>
    1c9e:	83 36       	cpi	r24, 0x63	; 99
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <vfprintf+0xfe>
    1ca2:	83 37       	cpi	r24, 0x73	; 115
    1ca4:	71 f0       	breq	.+28     	; 0x1cc2 <vfprintf+0x112>
    1ca6:	83 35       	cpi	r24, 0x53	; 83
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <vfprintf+0xfc>
    1caa:	5b c0       	rjmp	.+182    	; 0x1d62 <vfprintf+0x1b2>
    1cac:	22 c0       	rjmp	.+68     	; 0x1cf2 <vfprintf+0x142>
    1cae:	f8 01       	movw	r30, r16
    1cb0:	80 81       	ld	r24, Z
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	0e 5f       	subi	r16, 0xFE	; 254
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	44 24       	eor	r4, r4
    1cba:	43 94       	inc	r4
    1cbc:	51 2c       	mov	r5, r1
    1cbe:	54 01       	movw	r10, r8
    1cc0:	15 c0       	rjmp	.+42     	; 0x1cec <vfprintf+0x13c>
    1cc2:	38 01       	movw	r6, r16
    1cc4:	f2 e0       	ldi	r31, 0x02	; 2
    1cc6:	6f 0e       	add	r6, r31
    1cc8:	71 1c       	adc	r7, r1
    1cca:	f8 01       	movw	r30, r16
    1ccc:	a0 80       	ld	r10, Z
    1cce:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd0:	26 ff       	sbrs	r18, 6
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <vfprintf+0x12a>
    1cd4:	65 2d       	mov	r22, r5
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x12e>
    1cda:	6f ef       	ldi	r22, 0xFF	; 255
    1cdc:	7f ef       	ldi	r23, 0xFF	; 255
    1cde:	c5 01       	movw	r24, r10
    1ce0:	2c 87       	std	Y+12, r18	; 0x0c
    1ce2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <strnlen>
    1ce6:	2c 01       	movw	r4, r24
    1ce8:	83 01       	movw	r16, r6
    1cea:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cec:	2f 77       	andi	r18, 0x7F	; 127
    1cee:	22 2e       	mov	r2, r18
    1cf0:	17 c0       	rjmp	.+46     	; 0x1d20 <vfprintf+0x170>
    1cf2:	38 01       	movw	r6, r16
    1cf4:	f2 e0       	ldi	r31, 0x02	; 2
    1cf6:	6f 0e       	add	r6, r31
    1cf8:	71 1c       	adc	r7, r1
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	a0 80       	ld	r10, Z
    1cfe:	b1 80       	ldd	r11, Z+1	; 0x01
    1d00:	26 ff       	sbrs	r18, 6
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <vfprintf+0x15a>
    1d04:	65 2d       	mov	r22, r5
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <vfprintf+0x15e>
    1d0a:	6f ef       	ldi	r22, 0xFF	; 255
    1d0c:	7f ef       	ldi	r23, 0xFF	; 255
    1d0e:	c5 01       	movw	r24, r10
    1d10:	2c 87       	std	Y+12, r18	; 0x0c
    1d12:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <strnlen_P>
    1d16:	2c 01       	movw	r4, r24
    1d18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d1a:	20 68       	ori	r18, 0x80	; 128
    1d1c:	22 2e       	mov	r2, r18
    1d1e:	83 01       	movw	r16, r6
    1d20:	23 fc       	sbrc	r2, 3
    1d22:	1b c0       	rjmp	.+54     	; 0x1d5a <vfprintf+0x1aa>
    1d24:	83 2d       	mov	r24, r3
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	48 16       	cp	r4, r24
    1d2a:	59 06       	cpc	r5, r25
    1d2c:	b0 f4       	brcc	.+44     	; 0x1d5a <vfprintf+0x1aa>
    1d2e:	b7 01       	movw	r22, r14
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1d38:	3a 94       	dec	r3
    1d3a:	f4 cf       	rjmp	.-24     	; 0x1d24 <vfprintf+0x174>
    1d3c:	f5 01       	movw	r30, r10
    1d3e:	27 fc       	sbrc	r2, 7
    1d40:	85 91       	lpm	r24, Z+
    1d42:	27 fe       	sbrs	r2, 7
    1d44:	81 91       	ld	r24, Z+
    1d46:	5f 01       	movw	r10, r30
    1d48:	b7 01       	movw	r22, r14
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1d50:	31 10       	cpse	r3, r1
    1d52:	3a 94       	dec	r3
    1d54:	f1 e0       	ldi	r31, 0x01	; 1
    1d56:	4f 1a       	sub	r4, r31
    1d58:	51 08       	sbc	r5, r1
    1d5a:	41 14       	cp	r4, r1
    1d5c:	51 04       	cpc	r5, r1
    1d5e:	71 f7       	brne	.-36     	; 0x1d3c <vfprintf+0x18c>
    1d60:	e5 c0       	rjmp	.+458    	; 0x1f2c <vfprintf+0x37c>
    1d62:	84 36       	cpi	r24, 0x64	; 100
    1d64:	11 f0       	breq	.+4      	; 0x1d6a <vfprintf+0x1ba>
    1d66:	89 36       	cpi	r24, 0x69	; 105
    1d68:	39 f5       	brne	.+78     	; 0x1db8 <vfprintf+0x208>
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	27 ff       	sbrs	r18, 7
    1d6e:	07 c0       	rjmp	.+14     	; 0x1d7e <vfprintf+0x1ce>
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	0c 5f       	subi	r16, 0xFC	; 252
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <vfprintf+0x1de>
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	07 2e       	mov	r0, r23
    1d84:	00 0c       	add	r0, r0
    1d86:	88 0b       	sbc	r24, r24
    1d88:	99 0b       	sbc	r25, r25
    1d8a:	0e 5f       	subi	r16, 0xFE	; 254
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	2f 76       	andi	r18, 0x6F	; 111
    1d90:	72 2e       	mov	r7, r18
    1d92:	97 ff       	sbrs	r25, 7
    1d94:	09 c0       	rjmp	.+18     	; 0x1da8 <vfprintf+0x1f8>
    1d96:	90 95       	com	r25
    1d98:	80 95       	com	r24
    1d9a:	70 95       	com	r23
    1d9c:	61 95       	neg	r22
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	20 68       	ori	r18, 0x80	; 128
    1da6:	72 2e       	mov	r7, r18
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	a4 01       	movw	r20, r8
    1dae:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__ultoa_invert>
    1db2:	a8 2e       	mov	r10, r24
    1db4:	a8 18       	sub	r10, r8
    1db6:	44 c0       	rjmp	.+136    	; 0x1e40 <vfprintf+0x290>
    1db8:	85 37       	cpi	r24, 0x75	; 117
    1dba:	29 f4       	brne	.+10     	; 0x1dc6 <vfprintf+0x216>
    1dbc:	2f 7e       	andi	r18, 0xEF	; 239
    1dbe:	b2 2e       	mov	r11, r18
    1dc0:	2a e0       	ldi	r18, 0x0A	; 10
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	25 c0       	rjmp	.+74     	; 0x1e10 <vfprintf+0x260>
    1dc6:	f2 2f       	mov	r31, r18
    1dc8:	f9 7f       	andi	r31, 0xF9	; 249
    1dca:	bf 2e       	mov	r11, r31
    1dcc:	8f 36       	cpi	r24, 0x6F	; 111
    1dce:	c1 f0       	breq	.+48     	; 0x1e00 <vfprintf+0x250>
    1dd0:	18 f4       	brcc	.+6      	; 0x1dd8 <vfprintf+0x228>
    1dd2:	88 35       	cpi	r24, 0x58	; 88
    1dd4:	79 f0       	breq	.+30     	; 0x1df4 <vfprintf+0x244>
    1dd6:	b4 c0       	rjmp	.+360    	; 0x1f40 <vfprintf+0x390>
    1dd8:	80 37       	cpi	r24, 0x70	; 112
    1dda:	19 f0       	breq	.+6      	; 0x1de2 <vfprintf+0x232>
    1ddc:	88 37       	cpi	r24, 0x78	; 120
    1dde:	21 f0       	breq	.+8      	; 0x1de8 <vfprintf+0x238>
    1de0:	af c0       	rjmp	.+350    	; 0x1f40 <vfprintf+0x390>
    1de2:	2f 2f       	mov	r18, r31
    1de4:	20 61       	ori	r18, 0x10	; 16
    1de6:	b2 2e       	mov	r11, r18
    1de8:	b4 fe       	sbrs	r11, 4
    1dea:	0d c0       	rjmp	.+26     	; 0x1e06 <vfprintf+0x256>
    1dec:	8b 2d       	mov	r24, r11
    1dee:	84 60       	ori	r24, 0x04	; 4
    1df0:	b8 2e       	mov	r11, r24
    1df2:	09 c0       	rjmp	.+18     	; 0x1e06 <vfprintf+0x256>
    1df4:	24 ff       	sbrs	r18, 4
    1df6:	0a c0       	rjmp	.+20     	; 0x1e0c <vfprintf+0x25c>
    1df8:	9f 2f       	mov	r25, r31
    1dfa:	96 60       	ori	r25, 0x06	; 6
    1dfc:	b9 2e       	mov	r11, r25
    1dfe:	06 c0       	rjmp	.+12     	; 0x1e0c <vfprintf+0x25c>
    1e00:	28 e0       	ldi	r18, 0x08	; 8
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	05 c0       	rjmp	.+10     	; 0x1e10 <vfprintf+0x260>
    1e06:	20 e1       	ldi	r18, 0x10	; 16
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <vfprintf+0x260>
    1e0c:	20 e1       	ldi	r18, 0x10	; 16
    1e0e:	32 e0       	ldi	r19, 0x02	; 2
    1e10:	f8 01       	movw	r30, r16
    1e12:	b7 fe       	sbrs	r11, 7
    1e14:	07 c0       	rjmp	.+14     	; 0x1e24 <vfprintf+0x274>
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	0c 5f       	subi	r16, 0xFC	; 252
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <vfprintf+0x280>
    1e24:	60 81       	ld	r22, Z
    1e26:	71 81       	ldd	r23, Z+1	; 0x01
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 5f       	subi	r16, 0xFE	; 254
    1e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e30:	a4 01       	movw	r20, r8
    1e32:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__ultoa_invert>
    1e36:	a8 2e       	mov	r10, r24
    1e38:	a8 18       	sub	r10, r8
    1e3a:	fb 2d       	mov	r31, r11
    1e3c:	ff 77       	andi	r31, 0x7F	; 127
    1e3e:	7f 2e       	mov	r7, r31
    1e40:	76 fe       	sbrs	r7, 6
    1e42:	0b c0       	rjmp	.+22     	; 0x1e5a <vfprintf+0x2aa>
    1e44:	37 2d       	mov	r19, r7
    1e46:	3e 7f       	andi	r19, 0xFE	; 254
    1e48:	a5 14       	cp	r10, r5
    1e4a:	50 f4       	brcc	.+20     	; 0x1e60 <vfprintf+0x2b0>
    1e4c:	74 fe       	sbrs	r7, 4
    1e4e:	0a c0       	rjmp	.+20     	; 0x1e64 <vfprintf+0x2b4>
    1e50:	72 fc       	sbrc	r7, 2
    1e52:	08 c0       	rjmp	.+16     	; 0x1e64 <vfprintf+0x2b4>
    1e54:	37 2d       	mov	r19, r7
    1e56:	3e 7e       	andi	r19, 0xEE	; 238
    1e58:	05 c0       	rjmp	.+10     	; 0x1e64 <vfprintf+0x2b4>
    1e5a:	ba 2c       	mov	r11, r10
    1e5c:	37 2d       	mov	r19, r7
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <vfprintf+0x2b6>
    1e60:	ba 2c       	mov	r11, r10
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <vfprintf+0x2b6>
    1e64:	b5 2c       	mov	r11, r5
    1e66:	34 ff       	sbrs	r19, 4
    1e68:	0d c0       	rjmp	.+26     	; 0x1e84 <vfprintf+0x2d4>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ea 0d       	add	r30, r10
    1e6e:	f1 1d       	adc	r31, r1
    1e70:	80 81       	ld	r24, Z
    1e72:	80 33       	cpi	r24, 0x30	; 48
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <vfprintf+0x2ca>
    1e76:	39 7e       	andi	r19, 0xE9	; 233
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <vfprintf+0x2dc>
    1e7a:	32 ff       	sbrs	r19, 2
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <vfprintf+0x2da>
    1e7e:	b3 94       	inc	r11
    1e80:	b3 94       	inc	r11
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <vfprintf+0x2dc>
    1e84:	83 2f       	mov	r24, r19
    1e86:	86 78       	andi	r24, 0x86	; 134
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <vfprintf+0x2dc>
    1e8a:	b3 94       	inc	r11
    1e8c:	33 fd       	sbrc	r19, 3
    1e8e:	13 c0       	rjmp	.+38     	; 0x1eb6 <vfprintf+0x306>
    1e90:	30 ff       	sbrs	r19, 0
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <vfprintf+0x2f0>
    1e94:	5a 2c       	mov	r5, r10
    1e96:	b3 14       	cp	r11, r3
    1e98:	18 f4       	brcc	.+6      	; 0x1ea0 <vfprintf+0x2f0>
    1e9a:	53 0c       	add	r5, r3
    1e9c:	5b 18       	sub	r5, r11
    1e9e:	b3 2c       	mov	r11, r3
    1ea0:	b3 14       	cp	r11, r3
    1ea2:	68 f4       	brcc	.+26     	; 0x1ebe <vfprintf+0x30e>
    1ea4:	b7 01       	movw	r22, r14
    1ea6:	80 e2       	ldi	r24, 0x20	; 32
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	3c 87       	std	Y+12, r19	; 0x0c
    1eac:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1eb0:	b3 94       	inc	r11
    1eb2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1eb4:	f5 cf       	rjmp	.-22     	; 0x1ea0 <vfprintf+0x2f0>
    1eb6:	b3 14       	cp	r11, r3
    1eb8:	10 f4       	brcc	.+4      	; 0x1ebe <vfprintf+0x30e>
    1eba:	3b 18       	sub	r3, r11
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <vfprintf+0x310>
    1ebe:	31 2c       	mov	r3, r1
    1ec0:	34 ff       	sbrs	r19, 4
    1ec2:	12 c0       	rjmp	.+36     	; 0x1ee8 <vfprintf+0x338>
    1ec4:	b7 01       	movw	r22, r14
    1ec6:	80 e3       	ldi	r24, 0x30	; 48
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	3c 87       	std	Y+12, r19	; 0x0c
    1ecc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1ed0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ed2:	32 ff       	sbrs	r19, 2
    1ed4:	17 c0       	rjmp	.+46     	; 0x1f04 <vfprintf+0x354>
    1ed6:	31 fd       	sbrc	r19, 1
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <vfprintf+0x330>
    1eda:	88 e7       	ldi	r24, 0x78	; 120
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <vfprintf+0x334>
    1ee0:	88 e5       	ldi	r24, 0x58	; 88
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	b7 01       	movw	r22, r14
    1ee6:	0c c0       	rjmp	.+24     	; 0x1f00 <vfprintf+0x350>
    1ee8:	83 2f       	mov	r24, r19
    1eea:	86 78       	andi	r24, 0x86	; 134
    1eec:	59 f0       	breq	.+22     	; 0x1f04 <vfprintf+0x354>
    1eee:	31 ff       	sbrs	r19, 1
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <vfprintf+0x346>
    1ef2:	8b e2       	ldi	r24, 0x2B	; 43
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <vfprintf+0x348>
    1ef6:	80 e2       	ldi	r24, 0x20	; 32
    1ef8:	37 fd       	sbrc	r19, 7
    1efa:	8d e2       	ldi	r24, 0x2D	; 45
    1efc:	b7 01       	movw	r22, r14
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1f04:	a5 14       	cp	r10, r5
    1f06:	38 f4       	brcc	.+14     	; 0x1f16 <vfprintf+0x366>
    1f08:	b7 01       	movw	r22, r14
    1f0a:	80 e3       	ldi	r24, 0x30	; 48
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1f12:	5a 94       	dec	r5
    1f14:	f7 cf       	rjmp	.-18     	; 0x1f04 <vfprintf+0x354>
    1f16:	aa 94       	dec	r10
    1f18:	f4 01       	movw	r30, r8
    1f1a:	ea 0d       	add	r30, r10
    1f1c:	f1 1d       	adc	r31, r1
    1f1e:	80 81       	ld	r24, Z
    1f20:	b7 01       	movw	r22, r14
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1f28:	a1 10       	cpse	r10, r1
    1f2a:	f5 cf       	rjmp	.-22     	; 0x1f16 <vfprintf+0x366>
    1f2c:	33 20       	and	r3, r3
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <vfprintf+0x382>
    1f30:	51 ce       	rjmp	.-862    	; 0x1bd4 <vfprintf+0x24>
    1f32:	b7 01       	movw	r22, r14
    1f34:	80 e2       	ldi	r24, 0x20	; 32
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <fputc>
    1f3c:	3a 94       	dec	r3
    1f3e:	f6 cf       	rjmp	.-20     	; 0x1f2c <vfprintf+0x37c>
    1f40:	f7 01       	movw	r30, r14
    1f42:	86 81       	ldd	r24, Z+6	; 0x06
    1f44:	97 81       	ldd	r25, Z+7	; 0x07
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0x39c>
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	9f ef       	ldi	r25, 0xFF	; 255
    1f4c:	2c 96       	adiw	r28, 0x0c	; 12
    1f4e:	e2 e1       	ldi	r30, 0x12	; 18
    1f50:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__epilogue_restores__>

00001f54 <strnlen_P>:
    1f54:	fc 01       	movw	r30, r24
    1f56:	05 90       	lpm	r0, Z+
    1f58:	61 50       	subi	r22, 0x01	; 1
    1f5a:	70 40       	sbci	r23, 0x00	; 0
    1f5c:	01 10       	cpse	r0, r1
    1f5e:	d8 f7       	brcc	.-10     	; 0x1f56 <strnlen_P+0x2>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	8e 0f       	add	r24, r30
    1f66:	9f 1f       	adc	r25, r31
    1f68:	08 95       	ret

00001f6a <strnlen>:
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	61 50       	subi	r22, 0x01	; 1
    1f6e:	70 40       	sbci	r23, 0x00	; 0
    1f70:	01 90       	ld	r0, Z+
    1f72:	01 10       	cpse	r0, r1
    1f74:	d8 f7       	brcc	.-10     	; 0x1f6c <strnlen+0x2>
    1f76:	80 95       	com	r24
    1f78:	90 95       	com	r25
    1f7a:	8e 0f       	add	r24, r30
    1f7c:	9f 1f       	adc	r25, r31
    1f7e:	08 95       	ret

00001f80 <fputc>:
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	fb 01       	movw	r30, r22
    1f8a:	23 81       	ldd	r18, Z+3	; 0x03
    1f8c:	21 fd       	sbrc	r18, 1
    1f8e:	03 c0       	rjmp	.+6      	; 0x1f96 <fputc+0x16>
    1f90:	8f ef       	ldi	r24, 0xFF	; 255
    1f92:	9f ef       	ldi	r25, 0xFF	; 255
    1f94:	28 c0       	rjmp	.+80     	; 0x1fe6 <fputc+0x66>
    1f96:	22 ff       	sbrs	r18, 2
    1f98:	16 c0       	rjmp	.+44     	; 0x1fc6 <fputc+0x46>
    1f9a:	46 81       	ldd	r20, Z+6	; 0x06
    1f9c:	57 81       	ldd	r21, Z+7	; 0x07
    1f9e:	24 81       	ldd	r18, Z+4	; 0x04
    1fa0:	35 81       	ldd	r19, Z+5	; 0x05
    1fa2:	42 17       	cp	r20, r18
    1fa4:	53 07       	cpc	r21, r19
    1fa6:	44 f4       	brge	.+16     	; 0x1fb8 <fputc+0x38>
    1fa8:	a0 81       	ld	r26, Z
    1faa:	b1 81       	ldd	r27, Z+1	; 0x01
    1fac:	9d 01       	movw	r18, r26
    1fae:	2f 5f       	subi	r18, 0xFF	; 255
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	31 83       	std	Z+1, r19	; 0x01
    1fb4:	20 83       	st	Z, r18
    1fb6:	8c 93       	st	X, r24
    1fb8:	26 81       	ldd	r18, Z+6	; 0x06
    1fba:	37 81       	ldd	r19, Z+7	; 0x07
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	37 83       	std	Z+7, r19	; 0x07
    1fc2:	26 83       	std	Z+6, r18	; 0x06
    1fc4:	10 c0       	rjmp	.+32     	; 0x1fe6 <fputc+0x66>
    1fc6:	eb 01       	movw	r28, r22
    1fc8:	09 2f       	mov	r16, r25
    1fca:	18 2f       	mov	r17, r24
    1fcc:	00 84       	ldd	r0, Z+8	; 0x08
    1fce:	f1 85       	ldd	r31, Z+9	; 0x09
    1fd0:	e0 2d       	mov	r30, r0
    1fd2:	09 95       	icall
    1fd4:	89 2b       	or	r24, r25
    1fd6:	e1 f6       	brne	.-72     	; 0x1f90 <fputc+0x10>
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	9f 81       	ldd	r25, Y+7	; 0x07
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	9f 83       	std	Y+7, r25	; 0x07
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
    1fe2:	81 2f       	mov	r24, r17
    1fe4:	90 2f       	mov	r25, r16
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	08 95       	ret

00001ff0 <__ultoa_invert>:
    1ff0:	fa 01       	movw	r30, r20
    1ff2:	aa 27       	eor	r26, r26
    1ff4:	28 30       	cpi	r18, 0x08	; 8
    1ff6:	51 f1       	breq	.+84     	; 0x204c <__ultoa_invert+0x5c>
    1ff8:	20 31       	cpi	r18, 0x10	; 16
    1ffa:	81 f1       	breq	.+96     	; 0x205c <__ultoa_invert+0x6c>
    1ffc:	e8 94       	clt
    1ffe:	6f 93       	push	r22
    2000:	6e 7f       	andi	r22, 0xFE	; 254
    2002:	6e 5f       	subi	r22, 0xFE	; 254
    2004:	7f 4f       	sbci	r23, 0xFF	; 255
    2006:	8f 4f       	sbci	r24, 0xFF	; 255
    2008:	9f 4f       	sbci	r25, 0xFF	; 255
    200a:	af 4f       	sbci	r26, 0xFF	; 255
    200c:	b1 e0       	ldi	r27, 0x01	; 1
    200e:	3e d0       	rcall	.+124    	; 0x208c <__ultoa_invert+0x9c>
    2010:	b4 e0       	ldi	r27, 0x04	; 4
    2012:	3c d0       	rcall	.+120    	; 0x208c <__ultoa_invert+0x9c>
    2014:	67 0f       	add	r22, r23
    2016:	78 1f       	adc	r23, r24
    2018:	89 1f       	adc	r24, r25
    201a:	9a 1f       	adc	r25, r26
    201c:	a1 1d       	adc	r26, r1
    201e:	68 0f       	add	r22, r24
    2020:	79 1f       	adc	r23, r25
    2022:	8a 1f       	adc	r24, r26
    2024:	91 1d       	adc	r25, r1
    2026:	a1 1d       	adc	r26, r1
    2028:	6a 0f       	add	r22, r26
    202a:	71 1d       	adc	r23, r1
    202c:	81 1d       	adc	r24, r1
    202e:	91 1d       	adc	r25, r1
    2030:	a1 1d       	adc	r26, r1
    2032:	20 d0       	rcall	.+64     	; 0x2074 <__ultoa_invert+0x84>
    2034:	09 f4       	brne	.+2      	; 0x2038 <__ultoa_invert+0x48>
    2036:	68 94       	set
    2038:	3f 91       	pop	r19
    203a:	2a e0       	ldi	r18, 0x0A	; 10
    203c:	26 9f       	mul	r18, r22
    203e:	11 24       	eor	r1, r1
    2040:	30 19       	sub	r19, r0
    2042:	30 5d       	subi	r19, 0xD0	; 208
    2044:	31 93       	st	Z+, r19
    2046:	de f6       	brtc	.-74     	; 0x1ffe <__ultoa_invert+0xe>
    2048:	cf 01       	movw	r24, r30
    204a:	08 95       	ret
    204c:	46 2f       	mov	r20, r22
    204e:	47 70       	andi	r20, 0x07	; 7
    2050:	40 5d       	subi	r20, 0xD0	; 208
    2052:	41 93       	st	Z+, r20
    2054:	b3 e0       	ldi	r27, 0x03	; 3
    2056:	0f d0       	rcall	.+30     	; 0x2076 <__ultoa_invert+0x86>
    2058:	c9 f7       	brne	.-14     	; 0x204c <__ultoa_invert+0x5c>
    205a:	f6 cf       	rjmp	.-20     	; 0x2048 <__ultoa_invert+0x58>
    205c:	46 2f       	mov	r20, r22
    205e:	4f 70       	andi	r20, 0x0F	; 15
    2060:	40 5d       	subi	r20, 0xD0	; 208
    2062:	4a 33       	cpi	r20, 0x3A	; 58
    2064:	18 f0       	brcs	.+6      	; 0x206c <__ultoa_invert+0x7c>
    2066:	49 5d       	subi	r20, 0xD9	; 217
    2068:	31 fd       	sbrc	r19, 1
    206a:	40 52       	subi	r20, 0x20	; 32
    206c:	41 93       	st	Z+, r20
    206e:	02 d0       	rcall	.+4      	; 0x2074 <__ultoa_invert+0x84>
    2070:	a9 f7       	brne	.-22     	; 0x205c <__ultoa_invert+0x6c>
    2072:	ea cf       	rjmp	.-44     	; 0x2048 <__ultoa_invert+0x58>
    2074:	b4 e0       	ldi	r27, 0x04	; 4
    2076:	a6 95       	lsr	r26
    2078:	97 95       	ror	r25
    207a:	87 95       	ror	r24
    207c:	77 95       	ror	r23
    207e:	67 95       	ror	r22
    2080:	ba 95       	dec	r27
    2082:	c9 f7       	brne	.-14     	; 0x2076 <__ultoa_invert+0x86>
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	61 05       	cpc	r22, r1
    2088:	71 05       	cpc	r23, r1
    208a:	08 95       	ret
    208c:	9b 01       	movw	r18, r22
    208e:	ac 01       	movw	r20, r24
    2090:	0a 2e       	mov	r0, r26
    2092:	06 94       	lsr	r0
    2094:	57 95       	ror	r21
    2096:	47 95       	ror	r20
    2098:	37 95       	ror	r19
    209a:	27 95       	ror	r18
    209c:	ba 95       	dec	r27
    209e:	c9 f7       	brne	.-14     	; 0x2092 <__ultoa_invert+0xa2>
    20a0:	62 0f       	add	r22, r18
    20a2:	73 1f       	adc	r23, r19
    20a4:	84 1f       	adc	r24, r20
    20a6:	95 1f       	adc	r25, r21
    20a8:	a0 1d       	adc	r26, r0
    20aa:	08 95       	ret

000020ac <eeprom_read_byte>:
    20ac:	f9 99       	sbic	0x1f, 1	; 31
    20ae:	fe cf       	rjmp	.-4      	; 0x20ac <eeprom_read_byte>
    20b0:	92 bd       	out	0x22, r25	; 34
    20b2:	81 bd       	out	0x21, r24	; 33
    20b4:	f8 9a       	sbi	0x1f, 0	; 31
    20b6:	99 27       	eor	r25, r25
    20b8:	80 b5       	in	r24, 0x20	; 32
    20ba:	08 95       	ret

000020bc <eeprom_write_byte>:
    20bc:	26 2f       	mov	r18, r22

000020be <eeprom_write_r18>:
    20be:	f9 99       	sbic	0x1f, 1	; 31
    20c0:	fe cf       	rjmp	.-4      	; 0x20be <eeprom_write_r18>
    20c2:	1f ba       	out	0x1f, r1	; 31
    20c4:	92 bd       	out	0x22, r25	; 34
    20c6:	81 bd       	out	0x21, r24	; 33
    20c8:	20 bd       	out	0x20, r18	; 32
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	fa 9a       	sbi	0x1f, 2	; 31
    20d0:	f9 9a       	sbi	0x1f, 1	; 31
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	08 95       	ret

000020d8 <__divmodsi4>:
    20d8:	05 2e       	mov	r0, r21
    20da:	97 fb       	bst	r25, 7
    20dc:	1e f4       	brtc	.+6      	; 0x20e4 <__divmodsi4+0xc>
    20de:	00 94       	com	r0
    20e0:	0e 94 83 10 	call	0x2106	; 0x2106 <__negsi2>
    20e4:	57 fd       	sbrc	r21, 7
    20e6:	07 d0       	rcall	.+14     	; 0x20f6 <__divmodsi4_neg2>
    20e8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__udivmodsi4>
    20ec:	07 fc       	sbrc	r0, 7
    20ee:	03 d0       	rcall	.+6      	; 0x20f6 <__divmodsi4_neg2>
    20f0:	4e f4       	brtc	.+18     	; 0x2104 <__divmodsi4_exit>
    20f2:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__negsi2>

000020f6 <__divmodsi4_neg2>:
    20f6:	50 95       	com	r21
    20f8:	40 95       	com	r20
    20fa:	30 95       	com	r19
    20fc:	21 95       	neg	r18
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	4f 4f       	sbci	r20, 0xFF	; 255
    2102:	5f 4f       	sbci	r21, 0xFF	; 255

00002104 <__divmodsi4_exit>:
    2104:	08 95       	ret

00002106 <__negsi2>:
    2106:	90 95       	com	r25
    2108:	80 95       	com	r24
    210a:	70 95       	com	r23
    210c:	61 95       	neg	r22
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	8f 4f       	sbci	r24, 0xFF	; 255
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	08 95       	ret

00002116 <__muluhisi3>:
    2116:	0e 94 33 0b 	call	0x1666	; 0x1666 <__umulhisi3>
    211a:	a5 9f       	mul	r26, r21
    211c:	90 0d       	add	r25, r0
    211e:	b4 9f       	mul	r27, r20
    2120:	90 0d       	add	r25, r0
    2122:	a4 9f       	mul	r26, r20
    2124:	80 0d       	add	r24, r0
    2126:	91 1d       	adc	r25, r1
    2128:	11 24       	eor	r1, r1
    212a:	08 95       	ret

0000212c <__mulshisi3>:
    212c:	b7 ff       	sbrs	r27, 7
    212e:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__muluhisi3>

00002132 <__mulohisi3>:
    2132:	0e 94 8b 10 	call	0x2116	; 0x2116 <__muluhisi3>
    2136:	82 1b       	sub	r24, r18
    2138:	93 0b       	sbc	r25, r19
    213a:	08 95       	ret

0000213c <__prologue_saves__>:
    213c:	2f 92       	push	r2
    213e:	3f 92       	push	r3
    2140:	4f 92       	push	r4
    2142:	5f 92       	push	r5
    2144:	6f 92       	push	r6
    2146:	7f 92       	push	r7
    2148:	8f 92       	push	r8
    214a:	9f 92       	push	r9
    214c:	af 92       	push	r10
    214e:	bf 92       	push	r11
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	ca 1b       	sub	r28, r26
    2166:	db 0b       	sbc	r29, r27
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	09 94       	ijmp

00002174 <__epilogue_restores__>:
    2174:	2a 88       	ldd	r2, Y+18	; 0x12
    2176:	39 88       	ldd	r3, Y+17	; 0x11
    2178:	48 88       	ldd	r4, Y+16	; 0x10
    217a:	5f 84       	ldd	r5, Y+15	; 0x0f
    217c:	6e 84       	ldd	r6, Y+14	; 0x0e
    217e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2180:	8c 84       	ldd	r8, Y+12	; 0x0c
    2182:	9b 84       	ldd	r9, Y+11	; 0x0b
    2184:	aa 84       	ldd	r10, Y+10	; 0x0a
    2186:	b9 84       	ldd	r11, Y+9	; 0x09
    2188:	c8 84       	ldd	r12, Y+8	; 0x08
    218a:	df 80       	ldd	r13, Y+7	; 0x07
    218c:	ee 80       	ldd	r14, Y+6	; 0x06
    218e:	fd 80       	ldd	r15, Y+5	; 0x05
    2190:	0c 81       	ldd	r16, Y+4	; 0x04
    2192:	1b 81       	ldd	r17, Y+3	; 0x03
    2194:	aa 81       	ldd	r26, Y+2	; 0x02
    2196:	b9 81       	ldd	r27, Y+1	; 0x01
    2198:	ce 0f       	add	r28, r30
    219a:	d1 1d       	adc	r29, r1
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	ed 01       	movw	r28, r26
    21a8:	08 95       	ret

000021aa <__udivmodsi4>:
    21aa:	a1 e2       	ldi	r26, 0x21	; 33
    21ac:	1a 2e       	mov	r1, r26
    21ae:	aa 1b       	sub	r26, r26
    21b0:	bb 1b       	sub	r27, r27
    21b2:	fd 01       	movw	r30, r26
    21b4:	0d c0       	rjmp	.+26     	; 0x21d0 <__udivmodsi4_ep>

000021b6 <__udivmodsi4_loop>:
    21b6:	aa 1f       	adc	r26, r26
    21b8:	bb 1f       	adc	r27, r27
    21ba:	ee 1f       	adc	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	a2 17       	cp	r26, r18
    21c0:	b3 07       	cpc	r27, r19
    21c2:	e4 07       	cpc	r30, r20
    21c4:	f5 07       	cpc	r31, r21
    21c6:	20 f0       	brcs	.+8      	; 0x21d0 <__udivmodsi4_ep>
    21c8:	a2 1b       	sub	r26, r18
    21ca:	b3 0b       	sbc	r27, r19
    21cc:	e4 0b       	sbc	r30, r20
    21ce:	f5 0b       	sbc	r31, r21

000021d0 <__udivmodsi4_ep>:
    21d0:	66 1f       	adc	r22, r22
    21d2:	77 1f       	adc	r23, r23
    21d4:	88 1f       	adc	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	1a 94       	dec	r1
    21da:	69 f7       	brne	.-38     	; 0x21b6 <__udivmodsi4_loop>
    21dc:	60 95       	com	r22
    21de:	70 95       	com	r23
    21e0:	80 95       	com	r24
    21e2:	90 95       	com	r25
    21e4:	9b 01       	movw	r18, r22
    21e6:	ac 01       	movw	r20, r24
    21e8:	bd 01       	movw	r22, r26
    21ea:	cf 01       	movw	r24, r30
    21ec:	08 95       	ret

000021ee <_exit>:
    21ee:	f8 94       	cli

000021f0 <__stop_program>:
    21f0:	ff cf       	rjmp	.-2      	; 0x21f0 <__stop_program>
