
build/simple_movement.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	f8 01       	movw	r30, r16
      6a:	74 02       	muls	r23, r20
      6c:	cc 01       	movw	r24, r24
      6e:	c3 01       	movw	r24, r6
      70:	c9 01       	movw	r24, r18
      72:	56 02       	muls	r21, r22
      74:	4b 02       	muls	r20, r27
      76:	d6 08       	sbc	r13, r6
      78:	b3 07       	cpc	r27, r19
      7a:	b3 07       	cpc	r27, r19
      7c:	d3 08       	sbc	r13, r3
      7e:	df 08       	sbc	r13, r15
      80:	cf 08       	sbc	r12, r15
      82:	e6 08       	sbc	r14, r6
      84:	e2 08       	sbc	r14, r2
      86:	ea 08       	sbc	r14, r10
      88:	a2 08       	sbc	r10, r2
      8a:	74 08       	sbc	r7, r4

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e7       	ldi	r30, 0x78	; 120
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 36       	cpi	r26, 0x6E	; 110
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <main>
      da:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
#include <kilolib.h>

void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
}

void loop()
{
    // Set the LED green.
    set_color(RGB(0, 1, 0));
      e4:	84 e0       	ldi	r24, 0x04	; 4
      e6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <set_color>
    // Spinup the motors to overcome friction.
    spinup_motors();
      ea:	0e 94 11 03 	call	0x622	; 0x622 <spinup_motors>
    // Move straight for 2 seconds (2000 ms).
    set_motors(kilo_straight_left, kilo_straight_right);
      ee:	60 91 6c 01 	lds	r22, 0x016C
      f2:	80 91 6b 01 	lds	r24, 0x016B
      f6:	0e 94 0c 03 	call	0x618	; 0x618 <set_motors>
    delay(2000);
      fa:	80 ed       	ldi	r24, 0xD0	; 208
      fc:	97 e0       	ldi	r25, 0x07	; 7
      fe:	0e 94 01 03 	call	0x602	; 0x602 <delay>
    
    // Set the LED red.
    set_color(RGB(1, 0, 0));
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	0e 94 2d 07 	call	0xe5a	; 0xe5a <set_color>
    // Spinup the motors to overcome friction.
    spinup_motors();
     108:	0e 94 11 03 	call	0x622	; 0x622 <spinup_motors>
    // Turn left for 2 seconds (2000 ms).
    set_motors(kilo_turn_left, 0);
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	80 91 6d 01 	lds	r24, 0x016D
     112:	0e 94 0c 03 	call	0x618	; 0x618 <set_motors>
    delay(2000);
     116:	80 ed       	ldi	r24, 0xD0	; 208
     118:	97 e0       	ldi	r25, 0x07	; 7
     11a:	0e 94 01 03 	call	0x602	; 0x602 <delay>
    
    // Set the LED blue.
    set_color(RGB(0, 0, 1));
     11e:	80 e1       	ldi	r24, 0x10	; 16
     120:	0e 94 2d 07 	call	0xe5a	; 0xe5a <set_color>
    // Spinup the motors to overcome friction.
    spinup_motors();
     124:	0e 94 11 03 	call	0x622	; 0x622 <spinup_motors>
    // Turn right for 2 seconds (2000 ms).
    set_motors(0, kilo_turn_right);
     128:	60 91 59 01 	lds	r22, 0x0159
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 0c 03 	call	0x618	; 0x618 <set_motors>
    delay(2000);
     132:	80 ed       	ldi	r24, 0xD0	; 208
     134:	97 e0       	ldi	r25, 0x07	; 7
     136:	0e 94 01 03 	call	0x602	; 0x602 <delay>
    
    // Set the LED off.
    set_color(RGB(0, 0, 0));
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <set_color>
    // Stop for half a second (500 ms).
    set_motors(0, 0);
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 0c 03 	call	0x618	; 0x618 <set_motors>
    delay(500);
     148:	84 ef       	ldi	r24, 0xF4	; 244
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0c 94 01 03 	jmp	0x602	; 0x602 <delay>

00000150 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     150:	08 95       	ret

00000152 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	08 95       	ret

00000158 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     158:	08 95       	ret

0000015a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
    cli();
     168:	f8 94       	cli

    ports_off();
     16a:	14 b8       	out	0x04, r1	; 4
     16c:	17 b8       	out	0x07, r1	; 7
     16e:	1a b8       	out	0x0a, r1	; 10
     170:	15 b8       	out	0x05, r1	; 5
     172:	18 b8       	out	0x08, r1	; 8
     174:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     176:	52 9a       	sbi	0x0a, 2	; 10
     178:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     17a:	14 bc       	out	0x24, r1	; 36
     17c:	85 e0       	ldi	r24, 0x05	; 5
     17e:	85 bd       	out	0x25, r24	; 37
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	87 bd       	out	0x27, r24	; 39
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     18a:	10 92 80 00 	sts	0x0080, r1
     18e:	10 92 81 00 	sts	0x0081, r1
     192:	2f e8       	ldi	r18, 0x8F	; 143
     194:	3b e0       	ldi	r19, 0x0B	; 11
     196:	30 93 89 00 	sts	0x0089, r19
     19a:	20 93 88 00 	sts	0x0088, r18
     19e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     1a2:	53 98       	cbi	0x0a, 3	; 10
     1a4:	23 98       	cbi	0x04, 3	; 4
     1a6:	91 ea       	ldi	r25, 0xA1	; 161
     1a8:	90 93 b0 00 	sts	0x00B0, r25
     1ac:	80 93 b1 00 	sts	0x00B1, r24
     1b0:	10 92 b4 00 	sts	0x00B4, r1
     1b4:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     1b8:	8b e0       	ldi	r24, 0x0B	; 11
     1ba:	80 bf       	out	0x30, r24	; 48
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     1c2:	86 e0       	ldi	r24, 0x06	; 6
     1c4:	80 93 7c 00 	sts	0x007C, r24
     1c8:	83 e8       	ldi	r24, 0x83	; 131
     1ca:	80 93 7a 00 	sts	0x007A, r24
     1ce:	80 91 7a 00 	lds	r24, 0x007A
     1d2:	80 64       	ori	r24, 0x40	; 64
     1d4:	80 93 7a 00 	sts	0x007A, r24
     1d8:	80 91 7a 00 	lds	r24, 0x007A
     1dc:	86 fd       	sbrc	r24, 6
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1e0:	10 92 7c 00 	sts	0x007C, r1
     1e4:	83 ea       	ldi	r24, 0xA3	; 163
     1e6:	80 93 7a 00 	sts	0x007A, r24
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
    if (osccal != 0xFF)
     1f8:	8f 3f       	cpi	r24, 0xFF	; 255
     1fa:	11 f0       	breq	.+4      	; 0x200 <kilo_init+0xa6>
        OSCCAL = osccal;
     1fc:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     200:	10 92 37 01 	sts	0x0137, r1
    rx_leadingbit = 1;
     204:	c1 e0       	ldi	r28, 0x01	; 1
     206:	c0 93 10 01 	sts	0x0110, r28
    rx_leadingbyte = 1;
     20a:	c0 93 54 01 	sts	0x0154, r28
    rx_byteindex = 0;
     20e:	10 92 2e 01 	sts	0x012E, r1
    rx_bytevalue = 0;
     212:	10 92 68 01 	sts	0x0168, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     216:	80 e9       	ldi	r24, 0x90	; 144
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     21e:	80 93 2d 01 	sts	0x012D, r24
    if (tx_mask & ~TX_MASK_MAX)
     222:	80 91 2d 01 	lds	r24, 0x012D
     226:	88 73       	andi	r24, 0x38	; 56
     228:	11 f0       	breq	.+4      	; 0x22e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     22a:	c0 93 2d 01 	sts	0x012D, r28
    tx_clock = 0;
     22e:	10 92 58 01 	sts	0x0158, r1
     232:	10 92 57 01 	sts	0x0157, r1
    tx_increment = 255;
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 56 01 	sts	0x0156, r25
     23e:	80 93 55 01 	sts	0x0155, r24
    kilo_ticks = 0;
     242:	10 92 33 01 	sts	0x0133, r1
     246:	10 92 34 01 	sts	0x0134, r1
     24a:	10 92 35 01 	sts	0x0135, r1
     24e:	10 92 36 01 	sts	0x0136, r1
    kilo_state = IDLE;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     258:	82 e4       	ldi	r24, 0x42	; 66
     25a:	9f e0       	ldi	r25, 0x0F	; 15
     25c:	90 93 67 01 	sts	0x0167, r25
     260:	80 93 66 01 	sts	0x0166, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     264:	80 eb       	ldi	r24, 0xB0	; 176
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     26c:	c8 2f       	mov	r28, r24
     26e:	81 eb       	ldi	r24, 0xB1	; 177
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     276:	2c 2f       	mov	r18, r28
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	38 2b       	or	r19, r24
     27c:	30 93 6a 01 	sts	0x016A, r19
     280:	20 93 69 01 	sts	0x0169, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     28c:	80 93 6d 01 	sts	0x016D, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     290:	89 e0       	ldi	r24, 0x09	; 9
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     298:	80 93 59 01 	sts	0x0159, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     29c:	8c e0       	ldi	r24, 0x0C	; 12
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     2a4:	80 93 6b 01 	sts	0x016B, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2a8:	84 e1       	ldi	r24, 0x14	; 20
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     2b0:	80 93 6c 01 	sts	0x016C, r24
     2b4:	58 e3       	ldi	r21, 0x38	; 56
     2b6:	e5 2e       	mov	r14, r21
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	f5 2e       	mov	r15, r21
     2bc:	01 e1       	ldi	r16, 0x11	; 17
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	c0 e2       	ldi	r28, 0x20	; 32
     2c2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     2ca:	d8 2e       	mov	r13, r24
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     2d4:	2d 2d       	mov	r18, r13
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	32 2f       	mov	r19, r18
     2da:	22 27       	eor	r18, r18
     2dc:	28 2b       	or	r18, r24
     2de:	f7 01       	movw	r30, r14
     2e0:	21 93       	st	Z+, r18
     2e2:	31 93       	st	Z+, r19
     2e4:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2e6:	ce 01       	movw	r24, r28
     2e8:	c0 96       	adiw	r24, 0x30	; 48
     2ea:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     2ee:	d8 2e       	mov	r13, r24
     2f0:	ce 01       	movw	r24, r28
     2f2:	c1 96       	adiw	r24, 0x31	; 49
     2f4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_read_byte>
     2f8:	2d 2d       	mov	r18, r13
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	32 2f       	mov	r19, r18
     2fe:	22 27       	eor	r18, r18
     300:	28 2b       	or	r18, r24
     302:	f8 01       	movw	r30, r16
     304:	21 93       	st	Z+, r18
     306:	31 93       	st	Z+, r19
     308:	8f 01       	movw	r16, r30
     30a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     30c:	cc 33       	cpi	r28, 0x3C	; 60
     30e:	d1 05       	cpc	r29, r1
     310:	c9 f6       	brne	.-78     	; 0x2c4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     312:	78 94       	sei
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	df 90       	pop	r13
     322:	08 95       	ret

00000324 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	a8 95       	wdr
     336:	80 91 60 00 	lds	r24, 0x0060
     33a:	88 61       	ori	r24, 0x18	; 24
     33c:	80 93 60 00 	sts	0x0060, r24
     340:	10 92 60 00 	sts	0x0060, r1
     344:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     346:	8f 91       	pop	r24
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     352:	3c 01       	movw	r6, r24
     354:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     356:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     358:	99 24       	eor	r9, r9
     35a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     35c:	84 e0       	ldi	r24, 0x04	; 4
     35e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     360:	96 e0       	ldi	r25, 0x06	; 6
     362:	a9 2e       	mov	r10, r25
     364:	23 e8       	ldi	r18, 0x83	; 131
     366:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     368:	38 e1       	ldi	r19, 0x18	; 24
     36a:	d3 2e       	mov	r13, r19
     36c:	49 e2       	ldi	r20, 0x29	; 41
     36e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     370:	90 91 0f 01 	lds	r25, 0x010F
     374:	e9 2f       	mov	r30, r25
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	e7 30       	cpi	r30, 0x07	; 7
     37a:	f1 05       	cpc	r31, r1
     37c:	c8 f7       	brcc	.-14     	; 0x370 <kilo_start+0x1e>
     37e:	ec 5c       	subi	r30, 0xCC	; 204
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     386:	11 23       	and	r17, r17
     388:	09 f4       	brne	.+2      	; 0x38c <kilo_start+0x3a>
     38a:	fc c0       	rjmp	.+504    	; 0x584 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     38c:	c0 92 0f 01 	sts	0x010F, r12
     390:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     392:	fe 01       	movw	r30, r28
     394:	09 95       	icall
                break;
     396:	ec cf       	rjmp	.-40     	; 0x370 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     398:	80 91 37 01 	lds	r24, 0x0137
     39c:	81 11       	cpse	r24, r1
     39e:	eb c0       	rjmp	.+470    	; 0x576 <kilo_start+0x224>
        cli();                                    // disable interrupts
     3a0:	f8 94       	cli
        adc_setup_conversion(6);
     3a2:	a0 92 7c 00 	sts	0x007C, r10
     3a6:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     3aa:	80 91 7a 00 	lds	r24, 0x007A
     3ae:	80 64       	ori	r24, 0x40	; 64
     3b0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3b4:	90 91 7a 00 	lds	r25, 0x007A
     3b8:	96 fd       	sbrc	r25, 6
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     3bc:	80 91 78 00 	lds	r24, 0x0078
     3c0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3c4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3c6:	8b 3a       	cpi	r24, 0xAB	; 171
     3c8:	e2 e0       	ldi	r30, 0x02	; 2
     3ca:	9e 07       	cpc	r25, r30
     3cc:	0c f0       	brlt	.+2      	; 0x3d0 <kilo_start+0x7e>
     3ce:	ed c0       	rjmp	.+474    	; 0x5aa <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3d0:	89 38       	cpi	r24, 0x89	; 137
     3d2:	f2 e0       	ldi	r31, 0x02	; 2
     3d4:	9f 07       	cpc	r25, r31
     3d6:	0c f0       	brlt	.+2      	; 0x3da <kilo_start+0x88>
     3d8:	ef c0       	rjmp	.+478    	; 0x5b8 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3da:	87 36       	cpi	r24, 0x67	; 103
     3dc:	92 40       	sbci	r25, 0x02	; 2
     3de:	0c f4       	brge	.+2      	; 0x3e2 <kilo_start+0x90>
     3e0:	ca c0       	rjmp	.+404    	; 0x576 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3e2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3e4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3e6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3e8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3ea:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3ec:	3c 98       	cbi	0x07, 4	; 7
     3ee:	c0 cf       	rjmp	.-128    	; 0x370 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3f0:	f8 94       	cli
                acomp_off();
     3f2:	80 b7       	in	r24, 0x30	; 48
     3f4:	87 7f       	andi	r24, 0xF7	; 247
     3f6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3f8:	80 91 7a 00 	lds	r24, 0x007A
     3fc:	8f 77       	andi	r24, 0x7F	; 127
     3fe:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     402:	14 b8       	out	0x04, r1	; 4
     404:	17 b8       	out	0x07, r1	; 7
     406:	1a b8       	out	0x0a, r1	; 10
     408:	15 b8       	out	0x05, r1	; 5
     40a:	18 b8       	out	0x08, r1	; 8
     40c:	1b b8       	out	0x0b, r1	; 11
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	a8 95       	wdr
     414:	d0 92 60 00 	sts	0x0060, r13
     418:	0f be       	out	0x3f, r0	; 63
     41a:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     41e:	80 91 60 00 	lds	r24, 0x0060
     422:	80 64       	ori	r24, 0x40	; 64
     424:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     428:	93 b7       	in	r25, 0x33	; 51
     42a:	91 7f       	andi	r25, 0xF1	; 241
     42c:	94 60       	ori	r25, 0x04	; 4
     42e:	93 bf       	out	0x33, r25	; 51
                cli();
     430:	f8 94       	cli
                sleep_enable();
     432:	83 b7       	in	r24, 0x33	; 51
     434:	81 60       	ori	r24, 0x01	; 1
     436:	83 bf       	out	0x33, r24	; 51
                sei();
     438:	78 94       	sei
                sleep_cpu();
     43a:	88 95       	sleep
                sleep_disable();
     43c:	83 b7       	in	r24, 0x33	; 51
     43e:	8e 7f       	andi	r24, 0xFE	; 254
     440:	83 bf       	out	0x33, r24	; 51
                sei();
     442:	78 94       	sei
                rx_busy = 0;
     444:	10 92 37 01 	sts	0x0137, r1
                ports_on();
     448:	52 9a       	sbi	0x0a, 2	; 10
     44a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     44c:	80 91 7a 00 	lds	r24, 0x007A
     450:	80 68       	ori	r24, 0x80	; 128
     452:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	87 e5       	ldi	r24, 0x57	; 87
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <kilo_start+0x108>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <kilo_start+0x10e>
     460:	00 00       	nop
                _delay_us(300);
                acomp_on();
     462:	80 b7       	in	r24, 0x30	; 48
     464:	88 61       	ori	r24, 0x18	; 24
     466:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     468:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     46a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     46c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     46e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     470:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     472:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     474:	ef e1       	ldi	r30, 0x1F	; 31
     476:	fe e4       	ldi	r31, 0x4E	; 78
     478:	31 97       	sbiw	r30, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <kilo_start+0x126>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <kilo_start+0x12c>
     47e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     480:	80 91 37 01 	lds	r24, 0x0137
     484:	81 11       	cpse	r24, r1
     486:	81 c0       	rjmp	.+258    	; 0x58a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     488:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     48a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     48c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     48e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     490:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     492:	3c 98       	cbi	0x07, 4	; 7
     494:	6d cf       	rjmp	.-294    	; 0x370 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     496:	80 91 0d 01 	lds	r24, 0x010D
     49a:	81 11       	cpse	r24, r1
     49c:	41 c0       	rjmp	.+130    	; 0x520 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     49e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4a2:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     4a6:	10 92 0e 01 	sts	0x010E, r1
     4aa:	62 cf       	rjmp	.-316    	; 0x370 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     4ac:	48 99       	sbic	0x09, 0	; 9
     4ae:	ec cf       	rjmp	.-40     	; 0x488 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4b0:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4b2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4b4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4b6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4b8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4ba:	3c 98       	cbi	0x07, 4	; 7
     4bc:	8f ec       	ldi	r24, 0xCF	; 207
     4be:	97 e0       	ldi	r25, 0x07	; 7
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <kilo_start+0x16e>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <kilo_start+0x174>
     4c6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4c8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ca:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4cc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4ce:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4d0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4d2:	3c 98       	cbi	0x07, 4	; 7
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	e1 ee       	ldi	r30, 0xE1	; 225
     4d8:	f4 e0       	ldi	r31, 0x04	; 4
     4da:	91 50       	subi	r25, 0x01	; 1
     4dc:	e0 40       	sbci	r30, 0x00	; 0
     4de:	f0 40       	sbci	r31, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <kilo_start+0x188>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <kilo_start+0x192>
     4e4:	00 00       	nop
     4e6:	44 cf       	rjmp	.-376    	; 0x370 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4e8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ea:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4ec:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4ee:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4f0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4f2:	3c 98       	cbi	0x07, 4	; 7
     4f4:	ef ec       	ldi	r30, 0xCF	; 207
     4f6:	f7 e0       	ldi	r31, 0x07	; 7
     4f8:	31 97       	sbiw	r30, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <kilo_start+0x1a6>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <kilo_start+0x1ac>
     4fe:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     500:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     502:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     504:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     506:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     508:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     50a:	3c 98       	cbi	0x07, 4	; 7
     50c:	ff ef       	ldi	r31, 0xFF	; 255
     50e:	21 ee       	ldi	r18, 0xE1	; 225
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	f1 50       	subi	r31, 0x01	; 1
     514:	20 40       	sbci	r18, 0x00	; 0
     516:	80 40       	sbci	r24, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <kilo_start+0x1c0>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <kilo_start+0x1ca>
     51c:	00 00       	nop
     51e:	28 cf       	rjmp	.-432    	; 0x370 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     520:	90 91 0d 01 	lds	r25, 0x010D
     524:	80 91 0e 01 	lds	r24, 0x010E
     528:	98 17       	cp	r25, r24
     52a:	09 f4       	brne	.+2      	; 0x52e <kilo_start+0x1dc>
     52c:	21 cf       	rjmp	.-446    	; 0x370 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     52e:	80 91 0d 01 	lds	r24, 0x010D
     532:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     536:	80 91 0d 01 	lds	r24, 0x010D
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	09 f4       	brne	.+2      	; 0x540 <kilo_start+0x1ee>
     53e:	50 c0       	rjmp	.+160    	; 0x5e0 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     540:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     544:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     548:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	d9 f1       	breq	.+118    	; 0x5c6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     550:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     554:	90 92 b4 00 	sts	0x00B4, r9
     558:	8f e2       	ldi	r24, 0x2F	; 47
     55a:	95 e7       	ldi	r25, 0x75	; 117
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <kilo_start+0x20a>
     560:	00 c0       	rjmp	.+0      	; 0x562 <kilo_start+0x210>
     562:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     564:	80 91 6c 01 	lds	r24, 0x016C
     568:	90 91 6b 01 	lds	r25, 0x016B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     56c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     570:	80 93 b4 00 	sts	0x00B4, r24
     574:	fd ce       	rjmp	.-518    	; 0x370 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     576:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     578:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     57a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     57c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     57e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     580:	3c 98       	cbi	0x07, 4	; 7
     582:	f6 ce       	rjmp	.-532    	; 0x370 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     584:	f3 01       	movw	r30, r6
     586:	09 95       	icall
     588:	01 cf       	rjmp	.-510    	; 0x38c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     58a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     58c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     58e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     590:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     592:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     594:	3c 98       	cbi	0x07, 4	; 7
     596:	ff ef       	ldi	r31, 0xFF	; 255
     598:	20 e7       	ldi	r18, 0x70	; 112
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	f1 50       	subi	r31, 0x01	; 1
     59e:	20 40       	sbci	r18, 0x00	; 0
     5a0:	80 40       	sbci	r24, 0x00	; 0
     5a2:	e1 f7       	brne	.-8      	; 0x59c <kilo_start+0x24a>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <kilo_start+0x254>
     5a6:	00 00       	nop
     5a8:	6f cf       	rjmp	.-290    	; 0x488 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5aa:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5ac:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5ae:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5b0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5b2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5b4:	3c 98       	cbi	0x07, 4	; 7
     5b6:	dc ce       	rjmp	.-584    	; 0x370 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5b8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5c0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5c2:	3c 9a       	sbi	0x07, 4	; 7
     5c4:	d5 ce       	rjmp	.-598    	; 0x370 <kilo_start+0x1e>
     5c6:	ef e2       	ldi	r30, 0x2F	; 47
     5c8:	f5 e7       	ldi	r31, 0x75	; 117
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <kilo_start+0x278>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <kilo_start+0x27e>
     5d0:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5d2:	80 91 59 01 	lds	r24, 0x0159
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5da:	80 93 b4 00 	sts	0x00B4, r24
     5de:	c8 ce       	rjmp	.-624    	; 0x370 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e0:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5e4:	10 92 b4 00 	sts	0x00B4, r1
     5e8:	8f e2       	ldi	r24, 0x2F	; 47
     5ea:	95 e7       	ldi	r25, 0x75	; 117
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <kilo_start+0x29a>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <kilo_start+0x2a0>
     5f2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5f4:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5fc:	10 92 b4 00 	sts	0x00B4, r1
     600:	b7 ce       	rjmp	.-658    	; 0x370 <kilo_start+0x1e>

00000602 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     602:	07 c0       	rjmp	.+14     	; 0x612 <delay+0x10>
     604:	ef ec       	ldi	r30, 0xCF	; 207
     606:	f7 e0       	ldi	r31, 0x07	; 7
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <delay+0x6>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <delay+0xc>
     60e:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     610:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	b9 f7       	brne	.-18     	; 0x604 <delay+0x2>
     616:	08 95       	ret

00000618 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     618:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     61c:	60 93 b4 00 	sts	0x00B4, r22
     620:	08 95       	ret

00000622 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     628:	80 93 b4 00 	sts	0x00B4, r24
     62c:	8f e0       	ldi	r24, 0x0F	; 15
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	ef ec       	ldi	r30, 0xCF	; 207
     632:	f7 e0       	ldi	r31, 0x07	; 7
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <spinup_motors+0x12>
     638:	00 c0       	rjmp	.+0      	; 0x63a <spinup_motors+0x18>
     63a:	00 00       	nop
     63c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     63e:	c1 f7       	brne	.-16     	; 0x630 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     640:	08 95       	ret

00000642 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     642:	80 91 37 01 	lds	r24, 0x0137
     646:	81 11       	cpse	r24, r1
     648:	1e c0       	rjmp	.+60     	; 0x686 <get_ambientlight+0x44>
        cli();
     64a:	f8 94       	cli
        adc_setup_conversion(7);
     64c:	87 e0       	ldi	r24, 0x07	; 7
     64e:	80 93 7c 00 	sts	0x007C, r24
     652:	83 e8       	ldi	r24, 0x83	; 131
     654:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     658:	80 91 7a 00 	lds	r24, 0x007A
     65c:	80 64       	ori	r24, 0x40	; 64
     65e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     662:	80 91 7a 00 	lds	r24, 0x007A
     666:	86 fd       	sbrc	r24, 6
     668:	fc cf       	rjmp	.-8      	; 0x662 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     66a:	80 91 78 00 	lds	r24, 0x0078
     66e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     672:	10 92 7c 00 	sts	0x007C, r1
     676:	23 ea       	ldi	r18, 0xA3	; 163
     678:	20 93 7a 00 	sts	0x007A, r18
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     682:	78 94       	sei
     684:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     68a:	08 95       	ret

0000068c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     68c:	80 91 37 01 	lds	r24, 0x0137
     690:	81 11       	cpse	r24, r1
     692:	1e c0       	rjmp	.+60     	; 0x6d0 <get_temperature+0x44>
        cli();
     694:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     696:	88 ec       	ldi	r24, 0xC8	; 200
     698:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     69c:	87 e8       	ldi	r24, 0x87	; 135
     69e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6a2:	80 91 7a 00 	lds	r24, 0x007A
     6a6:	80 64       	ori	r24, 0x40	; 64
     6a8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6ac:	80 91 7a 00 	lds	r24, 0x007A
     6b0:	86 fd       	sbrc	r24, 6
     6b2:	fc cf       	rjmp	.-8      	; 0x6ac <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6b4:	80 91 78 00 	lds	r24, 0x0078
     6b8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6bc:	10 92 7c 00 	sts	0x007C, r1
     6c0:	23 ea       	ldi	r18, 0xA3	; 163
     6c2:	20 93 7a 00 	sts	0x007A, r18
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6cc:	78 94       	sei
     6ce:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6d4:	08 95       	ret

000006d6 <rand_hard>:

uint8_t rand_hard() {
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	e0 e0       	ldi	r30, 0x00	; 0
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6e4:	03 ea       	ldi	r16, 0xA3	; 163
     6e6:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6e8:	d6 e0       	ldi	r29, 0x06	; 6
     6ea:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6ec:	a1 e0       	ldi	r26, 0x01	; 1
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6f0:	60 e8       	ldi	r22, 0x80	; 128
     6f2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6f4:	f8 94       	cli
            adc_setup_conversion(6);
     6f6:	d0 93 7c 00 	sts	0x007C, r29
     6fa:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6fe:	90 91 7a 00 	lds	r25, 0x007A
     702:	90 64       	ori	r25, 0x40	; 64
     704:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     708:	90 91 7a 00 	lds	r25, 0x007A
     70c:	96 fd       	sbrc	r25, 6
     70e:	fc cf       	rjmp	.-8      	; 0x708 <rand_hard+0x32>
            a = ADCW&0x1;
     710:	20 91 78 00 	lds	r18, 0x0078
     714:	30 91 79 00 	lds	r19, 0x0079
     718:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     71a:	90 91 7a 00 	lds	r25, 0x007A
     71e:	90 64       	ori	r25, 0x40	; 64
     720:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     724:	90 91 7a 00 	lds	r25, 0x007A
     728:	96 fd       	sbrc	r25, 6
     72a:	fc cf       	rjmp	.-8      	; 0x724 <rand_hard+0x4e>
            b = ADCW&0x1;
     72c:	40 91 78 00 	lds	r20, 0x0078
     730:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     734:	10 92 7c 00 	sts	0x007C, r1
     738:	00 93 7a 00 	sts	0x007A, r16
     73c:	10 93 7b 00 	sts	0x007B, r17
            sei();
     740:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     742:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     744:	24 13       	cpse	r18, r20
     746:	03 c0       	rjmp	.+6      	; 0x74e <rand_hard+0x78>
     748:	61 50       	subi	r22, 0x01	; 1
     74a:	71 09       	sbc	r23, r1
     74c:	99 f6       	brne	.-90     	; 0x6f4 <rand_hard+0x1e>
        if (a)
     74e:	22 23       	and	r18, r18
     750:	39 f0       	breq	.+14     	; 0x760 <rand_hard+0x8a>
            num |= (1<<i);
     752:	9d 01       	movw	r18, r26
     754:	0e 2e       	mov	r0, r30
     756:	01 c0       	rjmp	.+2      	; 0x75a <rand_hard+0x84>
     758:	22 0f       	add	r18, r18
     75a:	0a 94       	dec	r0
     75c:	ea f7       	brpl	.-6      	; 0x758 <rand_hard+0x82>
     75e:	82 2b       	or	r24, r18
     760:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     762:	e8 30       	cpi	r30, 0x08	; 8
     764:	f1 05       	cpc	r31, r1
     766:	09 f0       	breq	.+2      	; 0x76a <rand_hard+0x94>
     768:	c3 cf       	rjmp	.-122    	; 0x6f0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     774:	80 91 00 01 	lds	r24, 0x0100
     778:	98 2f       	mov	r25, r24
     77a:	99 0f       	add	r25, r25
     77c:	99 0f       	add	r25, r25
     77e:	99 0f       	add	r25, r25
     780:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     782:	90 91 0c 01 	lds	r25, 0x010C
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	29 0f       	add	r18, r25
     78a:	20 93 0c 01 	sts	0x010C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     78e:	28 2f       	mov	r18, r24
     790:	22 95       	swap	r18
     792:	26 95       	lsr	r18
     794:	27 70       	andi	r18, 0x07	; 7
     796:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     798:	96 95       	lsr	r25
     79a:	96 95       	lsr	r25
     79c:	89 27       	eor	r24, r25
     79e:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     7a2:	08 95       	ret

000007a4 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     7a4:	80 93 00 01 	sts	0x0100, r24
     7a8:	08 95       	ret

000007aa <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     7aa:	80 91 37 01 	lds	r24, 0x0137
     7ae:	81 11       	cpse	r24, r1
     7b0:	16 c0       	rjmp	.+44     	; 0x7de <get_voltage+0x34>
        cli();                                    // disable interrupts
     7b2:	f8 94       	cli
        adc_setup_conversion(6);
     7b4:	86 e0       	ldi	r24, 0x06	; 6
     7b6:	80 93 7c 00 	sts	0x007C, r24
     7ba:	83 e8       	ldi	r24, 0x83	; 131
     7bc:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7c0:	80 91 7a 00 	lds	r24, 0x007A
     7c4:	80 64       	ori	r24, 0x40	; 64
     7c6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7ca:	80 91 7a 00 	lds	r24, 0x007A
     7ce:	86 fd       	sbrc	r24, 6
     7d0:	fc cf       	rjmp	.-8      	; 0x7ca <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7d2:	80 91 78 00 	lds	r24, 0x0078
     7d6:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7da:	78 94       	sei
     7dc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7e2:	08 95       	ret

000007e4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7e4:	2f 92       	push	r2
     7e6:	3f 92       	push	r3
     7e8:	4f 92       	push	r4
     7ea:	5f 92       	push	r5
     7ec:	6f 92       	push	r6
     7ee:	7f 92       	push	r7
     7f0:	8f 92       	push	r8
     7f2:	9f 92       	push	r9
     7f4:	af 92       	push	r10
     7f6:	bf 92       	push	r11
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	00 d0       	rcall	.+0      	; 0x80a <estimate_distance+0x26>
     80a:	00 d0       	rcall	.+0      	; 0x80c <estimate_distance+0x28>
     80c:	00 d0       	rcall	.+0      	; 0x80e <estimate_distance+0x2a>
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     814:	dc 01       	movw	r26, r24
     816:	12 96       	adiw	r26, 0x02	; 2
     818:	0d 90       	ld	r0, X+
     81a:	bc 91       	ld	r27, X
     81c:	a0 2d       	mov	r26, r0
     81e:	be 83       	std	Y+6, r27	; 0x06
     820:	ad 83       	std	Y+5, r26	; 0x05
     822:	a4 38       	cpi	r26, 0x84	; 132
     824:	e3 e0       	ldi	r30, 0x03	; 3
     826:	be 07       	cpc	r27, r30
     828:	0c f0       	brlt	.+2      	; 0x82c <estimate_distance+0x48>
     82a:	c9 c0       	rjmp	.+402    	; 0x9be <__stack+0xbf>
        if (dist->high_gain > kilo_irhigh[0]) {
     82c:	80 91 11 01 	lds	r24, 0x0111
     830:	90 91 12 01 	lds	r25, 0x0112
     834:	8a 17       	cp	r24, r26
     836:	9b 07       	cpc	r25, r27
     838:	08 f4       	brcc	.+2      	; 0x83c <estimate_distance+0x58>
     83a:	37 c1       	rjmp	.+622    	; 0xaaa <__stack+0x1ab>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     83c:	00 91 13 01 	lds	r16, 0x0113
     840:	10 91 14 01 	lds	r17, 0x0114
     844:	0a 17       	cp	r16, r26
     846:	1b 07       	cpc	r17, r27
     848:	08 f4       	brcc	.+2      	; 0x84c <estimate_distance+0x68>
     84a:	2f c2       	rjmp	.+1118   	; 0xcaa <__stack+0x3ab>
     84c:	00 91 15 01 	lds	r16, 0x0115
     850:	10 91 16 01 	lds	r17, 0x0116
     854:	0a 17       	cp	r16, r26
     856:	1b 07       	cpc	r17, r27
     858:	08 f4       	brcc	.+2      	; 0x85c <estimate_distance+0x78>
     85a:	2f c2       	rjmp	.+1118   	; 0xcba <__stack+0x3bb>
     85c:	00 91 17 01 	lds	r16, 0x0117
     860:	10 91 18 01 	lds	r17, 0x0118
     864:	0a 17       	cp	r16, r26
     866:	1b 07       	cpc	r17, r27
     868:	08 f4       	brcc	.+2      	; 0x86c <estimate_distance+0x88>
     86a:	2f c2       	rjmp	.+1118   	; 0xcca <__stack+0x3cb>
     86c:	00 91 19 01 	lds	r16, 0x0119
     870:	10 91 1a 01 	lds	r17, 0x011A
     874:	0a 17       	cp	r16, r26
     876:	1b 07       	cpc	r17, r27
     878:	08 f4       	brcc	.+2      	; 0x87c <estimate_distance+0x98>
     87a:	2f c2       	rjmp	.+1118   	; 0xcda <__stack+0x3db>
     87c:	00 91 1b 01 	lds	r16, 0x011B
     880:	10 91 1c 01 	lds	r17, 0x011C
     884:	0a 17       	cp	r16, r26
     886:	1b 07       	cpc	r17, r27
     888:	08 f4       	brcc	.+2      	; 0x88c <estimate_distance+0xa8>
     88a:	ef c1       	rjmp	.+990    	; 0xc6a <__stack+0x36b>
     88c:	00 91 1d 01 	lds	r16, 0x011D
     890:	10 91 1e 01 	lds	r17, 0x011E
     894:	0a 17       	cp	r16, r26
     896:	1b 07       	cpc	r17, r27
     898:	08 f4       	brcc	.+2      	; 0x89c <estimate_distance+0xb8>
     89a:	27 c2       	rjmp	.+1102   	; 0xcea <__stack+0x3eb>
     89c:	00 91 1f 01 	lds	r16, 0x011F
     8a0:	10 91 20 01 	lds	r17, 0x0120
     8a4:	0a 17       	cp	r16, r26
     8a6:	1b 07       	cpc	r17, r27
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <estimate_distance+0xc8>
     8aa:	27 c2       	rjmp	.+1102   	; 0xcfa <__stack+0x3fb>
     8ac:	00 91 21 01 	lds	r16, 0x0121
     8b0:	10 91 22 01 	lds	r17, 0x0122
     8b4:	0a 17       	cp	r16, r26
     8b6:	1b 07       	cpc	r17, r27
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <estimate_distance+0xd8>
     8ba:	27 c2       	rjmp	.+1102   	; 0xd0a <__stack+0x40b>
     8bc:	00 91 23 01 	lds	r16, 0x0123
     8c0:	10 91 24 01 	lds	r17, 0x0124
     8c4:	0a 17       	cp	r16, r26
     8c6:	1b 07       	cpc	r17, r27
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <estimate_distance+0xe8>
     8ca:	27 c2       	rjmp	.+1102   	; 0xd1a <__stack+0x41b>
     8cc:	00 91 25 01 	lds	r16, 0x0125
     8d0:	10 91 26 01 	lds	r17, 0x0126
     8d4:	0a 17       	cp	r16, r26
     8d6:	1b 07       	cpc	r17, r27
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <estimate_distance+0xf8>
     8da:	27 c2       	rjmp	.+1102   	; 0xd2a <__stack+0x42b>
     8dc:	00 91 27 01 	lds	r16, 0x0127
     8e0:	10 91 28 01 	lds	r17, 0x0128
     8e4:	0a 17       	cp	r16, r26
     8e6:	1b 07       	cpc	r17, r27
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <estimate_distance+0x108>
     8ea:	23 c2       	rjmp	.+1094   	; 0xd32 <__stack+0x433>
     8ec:	00 91 29 01 	lds	r16, 0x0129
     8f0:	10 91 2a 01 	lds	r17, 0x012A
     8f4:	0a 17       	cp	r16, r26
     8f6:	1b 07       	cpc	r17, r27
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <estimate_distance+0x118>
     8fa:	23 c2       	rjmp	.+1094   	; 0xd42 <__stack+0x443>
     8fc:	00 91 2b 01 	lds	r16, 0x012B
     900:	10 91 2c 01 	lds	r17, 0x012C
     904:	0a 17       	cp	r16, r26
     906:	1b 07       	cpc	r17, r27
     908:	08 f4       	brcc	.+2      	; 0x90c <__stack+0xd>
     90a:	23 c2       	rjmp	.+1094   	; 0xd52 <__stack+0x453>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	a0 ed       	ldi	r26, 0xD0	; 208
     912:	b0 e4       	ldi	r27, 0x40	; 64
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	9a 83       	std	Y+2, r25	; 0x02
     918:	ab 83       	std	Y+3, r26	; 0x03
     91a:	bc 83       	std	Y+4, r27	; 0x04
     91c:	4c e0       	ldi	r20, 0x0C	; 12
     91e:	e4 2e       	mov	r14, r20
     920:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     922:	f7 01       	movw	r30, r14
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	ef 5e       	subi	r30, 0xEF	; 239
     92a:	fe 4f       	sbci	r31, 0xFE	; 254
     92c:	80 81       	ld	r24, Z
     92e:	91 81       	ldd	r25, Z+1	; 0x01
     930:	b8 01       	movw	r22, r16
     932:	68 1b       	sub	r22, r24
     934:	79 0b       	sbc	r23, r25
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     93e:	9b 01       	movw	r18, r22
     940:	ac 01       	movw	r20, r24
     942:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__addsf3>
     946:	6b 01       	movw	r12, r22
     948:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     94a:	ad 81       	ldd	r26, Y+5	; 0x05
     94c:	be 81       	ldd	r27, Y+6	; 0x06
     94e:	bd 01       	movw	r22, r26
     950:	bb 0f       	add	r27, r27
     952:	88 0b       	sbc	r24, r24
     954:	99 0b       	sbc	r25, r25
     956:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatsisf>
     95a:	4b 01       	movw	r8, r22
     95c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     95e:	b8 01       	movw	r22, r16
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     968:	2b 01       	movw	r4, r22
     96a:	3c 01       	movw	r6, r24
     96c:	29 81       	ldd	r18, Y+1	; 0x01
     96e:	3a 81       	ldd	r19, Y+2	; 0x02
     970:	4b 81       	ldd	r20, Y+3	; 0x03
     972:	5c 81       	ldd	r21, Y+4	; 0x04
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	c3 01       	movw	r24, r6
     982:	b2 01       	movw	r22, r4
     984:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__subsf3>
     988:	9b 01       	movw	r18, r22
     98a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     98c:	c5 01       	movw	r24, r10
     98e:	b4 01       	movw	r22, r8
     990:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__subsf3>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e2       	ldi	r20, 0x20	; 32
     99a:	51 e4       	ldi	r21, 0x41	; 65
     99c:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
            b=((int)((int)b/(int)slope));
     9a0:	0e 94 43 0b 	call	0x1686	; 0x1686 <__fixsfsi>
     9a4:	8b 01       	movw	r16, r22
     9a6:	c7 01       	movw	r24, r14
     9a8:	b6 01       	movw	r22, r12
     9aa:	0e 94 43 0b 	call	0x1686	; 0x1686 <__fixsfsi>
     9ae:	ab 01       	movw	r20, r22
     9b0:	bc 01       	movw	r22, r24
     9b2:	c8 01       	movw	r24, r16
     9b4:	ba 01       	movw	r22, r20
     9b6:	0e 94 27 0a 	call	0x144e	; 0x144e <__divmodhi4>
            dist_high=b;
     9ba:	16 2f       	mov	r17, r22
     9bc:	77 c0       	rjmp	.+238    	; 0xaac <__stack+0x1ad>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9be:	dc 01       	movw	r26, r24
     9c0:	cd 90       	ld	r12, X+
     9c2:	dc 90       	ld	r13, X
     9c4:	80 91 38 01 	lds	r24, 0x0138
     9c8:	90 91 39 01 	lds	r25, 0x0139
     9cc:	8c 15       	cp	r24, r12
     9ce:	9d 05       	cpc	r25, r13
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	8c c0       	rjmp	.+280    	; 0xaec <__stack+0x1ed>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9d4:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9d6:	e0 90 3a 01 	lds	r14, 0x013A
     9da:	f0 90 3b 01 	lds	r15, 0x013B
     9de:	ec 14       	cp	r14, r12
     9e0:	fd 04       	cpc	r15, r13
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	5e c1       	rjmp	.+700    	; 0xca2 <__stack+0x3a3>
     9e6:	e0 90 3c 01 	lds	r14, 0x013C
     9ea:	f0 90 3d 01 	lds	r15, 0x013D
     9ee:	ec 14       	cp	r14, r12
     9f0:	fd 04       	cpc	r15, r13
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	5e c1       	rjmp	.+700    	; 0xcb2 <__stack+0x3b3>
     9f6:	e0 90 3e 01 	lds	r14, 0x013E
     9fa:	f0 90 3f 01 	lds	r15, 0x013F
     9fe:	ec 14       	cp	r14, r12
     a00:	fd 04       	cpc	r15, r13
     a02:	08 f4       	brcc	.+2      	; 0xa06 <__stack+0x107>
     a04:	5e c1       	rjmp	.+700    	; 0xcc2 <__stack+0x3c3>
     a06:	e0 90 40 01 	lds	r14, 0x0140
     a0a:	f0 90 41 01 	lds	r15, 0x0141
     a0e:	ec 14       	cp	r14, r12
     a10:	fd 04       	cpc	r15, r13
     a12:	08 f4       	brcc	.+2      	; 0xa16 <__stack+0x117>
     a14:	5e c1       	rjmp	.+700    	; 0xcd2 <__stack+0x3d3>
     a16:	e0 90 42 01 	lds	r14, 0x0142
     a1a:	f0 90 43 01 	lds	r15, 0x0143
     a1e:	ec 14       	cp	r14, r12
     a20:	fd 04       	cpc	r15, r13
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x127>
     a24:	c3 c0       	rjmp	.+390    	; 0xbac <__stack+0x2ad>
     a26:	e0 90 44 01 	lds	r14, 0x0144
     a2a:	f0 90 45 01 	lds	r15, 0x0145
     a2e:	ec 14       	cp	r14, r12
     a30:	fd 04       	cpc	r15, r13
     a32:	08 f4       	brcc	.+2      	; 0xa36 <__stack+0x137>
     a34:	56 c1       	rjmp	.+684    	; 0xce2 <__stack+0x3e3>
     a36:	e0 90 46 01 	lds	r14, 0x0146
     a3a:	f0 90 47 01 	lds	r15, 0x0147
     a3e:	ec 14       	cp	r14, r12
     a40:	fd 04       	cpc	r15, r13
     a42:	08 f4       	brcc	.+2      	; 0xa46 <__stack+0x147>
     a44:	56 c1       	rjmp	.+684    	; 0xcf2 <__stack+0x3f3>
     a46:	e0 90 48 01 	lds	r14, 0x0148
     a4a:	f0 90 49 01 	lds	r15, 0x0149
     a4e:	ec 14       	cp	r14, r12
     a50:	fd 04       	cpc	r15, r13
     a52:	08 f4       	brcc	.+2      	; 0xa56 <__stack+0x157>
     a54:	56 c1       	rjmp	.+684    	; 0xd02 <__stack+0x403>
     a56:	e0 90 4a 01 	lds	r14, 0x014A
     a5a:	f0 90 4b 01 	lds	r15, 0x014B
     a5e:	ec 14       	cp	r14, r12
     a60:	fd 04       	cpc	r15, r13
     a62:	08 f4       	brcc	.+2      	; 0xa66 <__stack+0x167>
     a64:	56 c1       	rjmp	.+684    	; 0xd12 <__stack+0x413>
     a66:	e0 90 4c 01 	lds	r14, 0x014C
     a6a:	f0 90 4d 01 	lds	r15, 0x014D
     a6e:	ec 14       	cp	r14, r12
     a70:	fd 04       	cpc	r15, r13
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__stack+0x177>
     a74:	56 c1       	rjmp	.+684    	; 0xd22 <__stack+0x423>
     a76:	e0 90 4e 01 	lds	r14, 0x014E
     a7a:	f0 90 4f 01 	lds	r15, 0x014F
     a7e:	ec 14       	cp	r14, r12
     a80:	fd 04       	cpc	r15, r13
     a82:	08 f4       	brcc	.+2      	; 0xa86 <__stack+0x187>
     a84:	5a c1       	rjmp	.+692    	; 0xd3a <__stack+0x43b>
     a86:	e0 90 50 01 	lds	r14, 0x0150
     a8a:	f0 90 51 01 	lds	r15, 0x0151
     a8e:	ec 14       	cp	r14, r12
     a90:	fd 04       	cpc	r15, r13
     a92:	08 f4       	brcc	.+2      	; 0xa96 <__stack+0x197>
     a94:	5a c1       	rjmp	.+692    	; 0xd4a <__stack+0x44b>
     a96:	e0 90 52 01 	lds	r14, 0x0152
     a9a:	f0 90 53 01 	lds	r15, 0x0153
     a9e:	ec 14       	cp	r14, r12
     aa0:	fd 04       	cpc	r15, r13
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__stack+0x1a7>
     aa4:	5a c1       	rjmp	.+692    	; 0xd5a <__stack+0x45b>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     aa6:	0a e5       	ldi	r16, 0x5A	; 90
     aa8:	31 c0       	rjmp	.+98     	; 0xb0c <__stack+0x20d>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     aaa:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     aac:	ed 81       	ldd	r30, Y+5	; 0x05
     aae:	fe 81       	ldd	r31, Y+6	; 0x06
     ab0:	ed 3b       	cpi	r30, 0xBD	; 189
     ab2:	f2 40       	sbci	r31, 0x02	; 2
     ab4:	fc f4       	brge	.+62     	; 0xaf4 <__stack+0x1f5>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     ab6:	81 e2       	ldi	r24, 0x21	; 33
     ab8:	81 0f       	add	r24, r17
    }
}
     aba:	26 96       	adiw	r28, 0x06	; 6
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	bf 90       	pop	r11
     ad8:	af 90       	pop	r10
     ada:	9f 90       	pop	r9
     adc:	8f 90       	pop	r8
     ade:	7f 90       	pop	r7
     ae0:	6f 90       	pop	r6
     ae2:	5f 90       	pop	r5
     ae4:	4f 90       	pop	r4
     ae6:	3f 90       	pop	r3
     ae8:	2f 90       	pop	r2
     aea:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     aec:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     aee:	81 e2       	ldi	r24, 0x21	; 33
     af0:	80 0f       	add	r24, r16
     af2:	e3 cf       	rjmp	.-58     	; 0xaba <__stack+0x1bb>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     af4:	d1 01       	movw	r26, r2
     af6:	cd 90       	ld	r12, X+
     af8:	dc 90       	ld	r13, X
     afa:	80 91 38 01 	lds	r24, 0x0138
     afe:	90 91 39 01 	lds	r25, 0x0139
     b02:	8c 15       	cp	r24, r12
     b04:	9d 05       	cpc	r25, r13
     b06:	08 f0       	brcs	.+2      	; 0xb0a <__stack+0x20b>
     b08:	66 cf       	rjmp	.-308    	; 0x9d6 <__stack+0xd7>
            dist_low=0;
     b0a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b0c:	1f 3f       	cpi	r17, 0xFF	; 255
     b0e:	79 f3       	breq	.-34     	; 0xaee <__stack+0x1ef>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b10:	ed 81       	ldd	r30, Y+5	; 0x05
     b12:	fe 81       	ldd	r31, Y+6	; 0x06
     b14:	bf 01       	movw	r22, r30
     b16:	ff 0f       	add	r31, r31
     b18:	88 0b       	sbc	r24, r24
     b1a:	99 0b       	sbc	r25, r25
     b1c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatsisf>
     b20:	6b 01       	movw	r12, r22
     b22:	7c 01       	movw	r14, r24
     b24:	61 2f       	mov	r22, r17
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     b30:	4b 01       	movw	r8, r22
     b32:	5c 01       	movw	r10, r24
     b34:	a7 01       	movw	r20, r14
     b36:	96 01       	movw	r18, r12
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	81 e6       	ldi	r24, 0x61	; 97
     b3e:	94 e4       	ldi	r25, 0x44	; 68
     b40:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__subsf3>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	c5 01       	movw	r24, r10
     b4a:	b4 01       	movw	r22, r8
     b4c:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     b50:	4b 01       	movw	r8, r22
     b52:	5c 01       	movw	r10, r24
     b54:	60 2f       	mov	r22, r16
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     b60:	2b 01       	movw	r4, r22
     b62:	3c 01       	movw	r6, r24
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	4f e2       	ldi	r20, 0x2F	; 47
     b6a:	54 e4       	ldi	r21, 0x44	; 68
     b6c:	c7 01       	movw	r24, r14
     b6e:	b6 01       	movw	r22, r12
     b70:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__subsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c3 01       	movw	r24, r6
     b7a:	b2 01       	movw	r22, r4
     b7c:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     b80:	9b 01       	movw	r18, r22
     b82:	ac 01       	movw	r20, r24
     b84:	c5 01       	movw	r24, r10
     b86:	b4 01       	movw	r22, r8
     b88:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__addsf3>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	48 e4       	ldi	r20, 0x48	; 72
     b92:	53 e4       	ldi	r21, 0x43	; 67
     b94:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__divsf3>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	44 e0       	ldi	r20, 0x04	; 4
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__addsf3>
     ba4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixunssfsi>
     ba8:	86 2f       	mov	r24, r22
     baa:	87 cf       	rjmp	.-242    	; 0xaba <__stack+0x1bb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     bac:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     bae:	85 e0       	ldi	r24, 0x05	; 5
     bb0:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	fc 01       	movw	r30, r24
     bb8:	ea 5c       	subi	r30, 0xCA	; 202
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	b7 01       	movw	r22, r14
     bc2:	68 1b       	sub	r22, r24
     bc4:	79 0b       	sbc	r23, r25
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__addsf3>
     bd6:	4b 01       	movw	r8, r22
     bd8:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bda:	b6 01       	movw	r22, r12
     bdc:	dd 0c       	add	r13, r13
     bde:	88 0b       	sbc	r24, r24
     be0:	99 0b       	sbc	r25, r25
     be2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatsisf>
     be6:	2b 01       	movw	r4, r22
     be8:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bea:	b7 01       	movw	r22, r14
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     bf4:	6b 01       	movw	r12, r22
     bf6:	7c 01       	movw	r14, r24
     bf8:	60 2f       	mov	r22, r16
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	a9 01       	movw	r20, r18
     c16:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__addsf3>
     c1a:	a5 01       	movw	r20, r10
     c1c:	94 01       	movw	r18, r8
     c1e:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	c7 01       	movw	r24, r14
     c28:	b6 01       	movw	r22, r12
     c2a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__subsf3>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c32:	c3 01       	movw	r24, r6
     c34:	b2 01       	movw	r22, r4
     c36:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__subsf3>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e2       	ldi	r20, 0x20	; 32
     c40:	51 e4       	ldi	r21, 0x41	; 65
     c42:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
                b=((int)((int)b/(int)slope));
     c46:	0e 94 43 0b 	call	0x1686	; 0x1686 <__fixsfsi>
     c4a:	7b 01       	movw	r14, r22
     c4c:	c5 01       	movw	r24, r10
     c4e:	b4 01       	movw	r22, r8
     c50:	0e 94 43 0b 	call	0x1686	; 0x1686 <__fixsfsi>
     c54:	ab 01       	movw	r20, r22
     c56:	bc 01       	movw	r22, r24
     c58:	c7 01       	movw	r24, r14
     c5a:	ba 01       	movw	r22, r20
     c5c:	0e 94 27 0a 	call	0x144e	; 0x144e <__divmodhi4>
                dist_low=b;
     c60:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c62:	6f 3f       	cpi	r22, 0xFF	; 255
     c64:	09 f0       	breq	.+2      	; 0xc68 <__stack+0x369>
     c66:	52 cf       	rjmp	.-348    	; 0xb0c <__stack+0x20d>
     c68:	26 cf       	rjmp	.-436    	; 0xab6 <__stack+0x1b7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c6a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	7c 01       	movw	r14, r24
     c72:	f1 e0       	ldi	r31, 0x01	; 1
     c74:	ef 1a       	sub	r14, r31
     c76:	f1 08       	sbc	r15, r1
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatunsisf>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	5f e3       	ldi	r21, 0x3F	; 63
     c8a:	0e 94 07 0c 	call	0x180e	; 0x180e <__mulsf3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	a9 01       	movw	r20, r18
     c94:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__addsf3>
     c98:	69 83       	std	Y+1, r22	; 0x01
     c9a:	7a 83       	std	Y+2, r23	; 0x02
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     ca0:	40 ce       	rjmp	.-896    	; 0x922 <__stack+0x23>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ca2:	01 e0       	ldi	r16, 0x01	; 1
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	84 cf       	rjmp	.-248    	; 0xbb2 <__stack+0x2b3>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	df cf       	rjmp	.-66     	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb2:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	7c cf       	rjmp	.-264    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cba:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	d7 cf       	rjmp	.-82     	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc2:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	74 cf       	rjmp	.-280    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cca:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	cf cf       	rjmp	.-98     	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd2:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	6c cf       	rjmp	.-296    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cda:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	c7 cf       	rjmp	.-114    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce2:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     ce4:	86 e0       	ldi	r24, 0x06	; 6
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	64 cf       	rjmp	.-312    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cea:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cec:	86 e0       	ldi	r24, 0x06	; 6
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	bf cf       	rjmp	.-130    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf2:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     cf4:	87 e0       	ldi	r24, 0x07	; 7
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	5c cf       	rjmp	.-328    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cfa:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cfc:	87 e0       	ldi	r24, 0x07	; 7
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	b7 cf       	rjmp	.-146    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d02:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d04:	88 e0       	ldi	r24, 0x08	; 8
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	54 cf       	rjmp	.-344    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0a:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d0c:	88 e0       	ldi	r24, 0x08	; 8
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	af cf       	rjmp	.-162    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d12:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d14:	89 e0       	ldi	r24, 0x09	; 9
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	4c cf       	rjmp	.-360    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1a:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d1c:	89 e0       	ldi	r24, 0x09	; 9
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a7 cf       	rjmp	.-178    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d22:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d24:	8a e0       	ldi	r24, 0x0A	; 10
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	44 cf       	rjmp	.-376    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d2a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d2c:	8a e0       	ldi	r24, 0x0A	; 10
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9f cf       	rjmp	.-194    	; 0xc70 <__stack+0x371>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d32:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d34:	8b e0       	ldi	r24, 0x0B	; 11
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9b cf       	rjmp	.-202    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d3a:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d3c:	8b e0       	ldi	r24, 0x0B	; 11
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	38 cf       	rjmp	.-400    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d42:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d44:	8c e0       	ldi	r24, 0x0C	; 12
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	93 cf       	rjmp	.-218    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d4a:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d4c:	8c e0       	ldi	r24, 0x0C	; 12
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	30 cf       	rjmp	.-416    	; 0xbb2 <__stack+0x2b3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d52:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d54:	8d e0       	ldi	r24, 0x0D	; 13
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	8b cf       	rjmp	.-234    	; 0xc70 <__stack+0x371>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d5a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d5c:	8d e0       	ldi	r24, 0x0D	; 13
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	28 cf       	rjmp	.-432    	; 0xbb2 <__stack+0x2b3>

00000d62 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
    tx_clock += tx_increment;
     d84:	20 91 57 01 	lds	r18, 0x0157
     d88:	30 91 58 01 	lds	r19, 0x0158
     d8c:	80 91 55 01 	lds	r24, 0x0155
     d90:	90 91 56 01 	lds	r25, 0x0156
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	90 93 58 01 	sts	0x0158, r25
     d9c:	80 93 57 01 	sts	0x0157, r24
    tx_increment = 0xFF;
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	90 93 56 01 	sts	0x0156, r25
     da8:	80 93 55 01 	sts	0x0155, r24
    OCR0A = tx_increment;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     db0:	80 91 33 01 	lds	r24, 0x0133
     db4:	90 91 34 01 	lds	r25, 0x0134
     db8:	a0 91 35 01 	lds	r26, 0x0135
     dbc:	b0 91 36 01 	lds	r27, 0x0136
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	80 93 33 01 	sts	0x0133, r24
     dca:	90 93 34 01 	sts	0x0134, r25
     dce:	a0 93 35 01 	sts	0x0135, r26
     dd2:	b0 93 36 01 	sts	0x0136, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     dd6:	80 91 37 01 	lds	r24, 0x0137
     dda:	81 11       	cpse	r24, r1
     ddc:	0f c0       	rjmp	.+30     	; 0xdfc <__vector_14+0x9a>
     dde:	80 91 66 01 	lds	r24, 0x0166
     de2:	90 91 67 01 	lds	r25, 0x0167
     de6:	20 91 57 01 	lds	r18, 0x0157
     dea:	30 91 58 01 	lds	r19, 0x0158
     dee:	82 17       	cp	r24, r18
     df0:	93 07       	cpc	r25, r19
     df2:	20 f4       	brcc	.+8      	; 0xdfc <__vector_14+0x9a>
     df4:	80 91 0f 01 	lds	r24, 0x010F
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	89 f0       	breq	.+34     	; 0xe1e <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e1e:	e0 91 03 01 	lds	r30, 0x0103
     e22:	f0 91 04 01 	lds	r31, 0x0104
     e26:	09 95       	icall
        if (msg) {
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	41 f3       	breq	.-48     	; 0xdfc <__vector_14+0x9a>
            if (message_send(msg)) {
     e2c:	0e 94 99 09 	call	0x1332	; 0x1332 <message_send>
     e30:	81 11       	cpse	r24, r1
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e34:	0e 94 c0 0c 	call	0x1980	; 0x1980 <rand>
     e38:	99 27       	eor	r25, r25
     e3a:	90 93 56 01 	sts	0x0156, r25
     e3e:	80 93 55 01 	sts	0x0155, r24
                OCR0A = tx_increment;
     e42:	87 bd       	out	0x27, r24	; 39
     e44:	db cf       	rjmp	.-74     	; 0xdfc <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e46:	e0 91 01 01 	lds	r30, 0x0101
     e4a:	f0 91 02 01 	lds	r31, 0x0102
     e4e:	09 95       	icall
                tx_clock = 0;
     e50:	10 92 58 01 	sts	0x0158, r1
     e54:	10 92 57 01 	sts	0x0157, r1
     e58:	d1 cf       	rjmp	.-94     	; 0xdfc <__vector_14+0x9a>

00000e5a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e5a:	80 ff       	sbrs	r24, 0
     e5c:	11 c0       	rjmp	.+34     	; 0xe80 <set_color+0x26>
        DDRD |= (1<<5);
     e5e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e60:	81 ff       	sbrs	r24, 1
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <set_color+0x2c>
        DDRD |= (1<<4);
     e64:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e66:	82 ff       	sbrs	r24, 2
     e68:	11 c0       	rjmp	.+34     	; 0xe8c <set_color+0x32>
        DDRC |= (1<<3);
     e6a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e6c:	83 ff       	sbrs	r24, 3
     e6e:	11 c0       	rjmp	.+34     	; 0xe92 <set_color+0x38>
        DDRC |= (1<<2);
     e70:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e72:	84 ff       	sbrs	r24, 4
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <set_color+0x3e>
        DDRC |= (1<<5);
     e76:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e78:	85 fd       	sbrc	r24, 5
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e7c:	3c 98       	cbi	0x07, 4	; 7
     e7e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e80:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e82:	81 fd       	sbrc	r24, 1
     e84:	ef cf       	rjmp	.-34     	; 0xe64 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e86:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e88:	82 fd       	sbrc	r24, 2
     e8a:	ef cf       	rjmp	.-34     	; 0xe6a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e8c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e8e:	83 fd       	sbrc	r24, 3
     e90:	ef cf       	rjmp	.-34     	; 0xe70 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e92:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e94:	84 fd       	sbrc	r24, 4
     e96:	ef cf       	rjmp	.-34     	; 0xe76 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e98:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e9a:	85 ff       	sbrs	r24, 5
     e9c:	ef cf       	rjmp	.-34     	; 0xe7c <set_color+0x22>
        DDRC |= (1<<4);
     e9e:	3c 9a       	sbi	0x07, 4	; 7
     ea0:	08 95       	ret

00000ea2 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
    rx_timer_off();
     eb0:	10 92 81 00 	sts	0x0081, r1
     eb4:	10 92 85 00 	sts	0x0085, r1
     eb8:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 10 01 	sts	0x0110, r24
    rx_leadingbyte = 1;
     ec2:	80 93 54 01 	sts	0x0154, r24
    rx_busy = 0;
     ec6:	10 92 37 01 	sts	0x0137, r1
    adc_trigger_high_gain();
     eca:	10 92 7c 00 	sts	0x007C, r1
     ece:	93 ea       	ldi	r25, 0xA3	; 163
     ed0:	90 93 7a 00 	sts	0x007A, r25
     ed4:	80 93 7b 00 	sts	0x007B, r24
}
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f0c:	20 91 84 00 	lds	r18, 0x0084
     f10:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	40 93 37 01 	sts	0x0137, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f1a:	80 91 10 01 	lds	r24, 0x0110
     f1e:	88 23       	and	r24, r24
     f20:	a9 f1       	breq	.+106    	; 0xf8c <__vector_23+0xa6>
        rx_timer_on();
     f22:	10 92 85 00 	sts	0x0085, r1
     f26:	10 92 84 00 	sts	0x0084, r1
     f2a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f2e:	10 92 68 01 	sts	0x0168, r1
        rx_leadingbit = 0;
     f32:	10 92 10 01 	sts	0x0110, r1
        if (rx_leadingbyte) {
     f36:	80 91 54 01 	lds	r24, 0x0154
     f3a:	88 23       	and	r24, r24
     f3c:	a1 f0       	breq	.+40     	; 0xf66 <__vector_23+0x80>
            adc_finish_conversion();
     f3e:	80 91 7a 00 	lds	r24, 0x007A
     f42:	86 fd       	sbrc	r24, 6
     f44:	fc cf       	rjmp	.-8      	; 0xf3e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f46:	80 91 78 00 	lds	r24, 0x0078
     f4a:	90 91 79 00 	lds	r25, 0x0079
     f4e:	90 93 32 01 	sts	0x0132, r25
     f52:	80 93 31 01 	sts	0x0131, r24
            adc_trigger_low_gain();
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 7c 00 	sts	0x007C, r24
     f5c:	93 ea       	ldi	r25, 0xA3	; 163
     f5e:	90 93 7a 00 	sts	0x007A, r25
     f62:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f66:	ff 91       	pop	r31
     f68:	ef 91       	pop	r30
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f8c:	c9 01       	movw	r24, r18
     f8e:	87 58       	subi	r24, 0x87	; 135
     f90:	91 09       	sbc	r25, r1
     f92:	84 37       	cpi	r24, 0x74	; 116
     f94:	99 40       	sbci	r25, 0x09	; 9
     f96:	08 f0       	brcs	.+2      	; 0xf9a <__vector_23+0xb4>
     f98:	52 c0       	rjmp	.+164    	; 0x103e <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f9a:	26 58       	subi	r18, 0x86	; 134
     f9c:	31 09       	sbc	r19, r1
     f9e:	a4 ef       	ldi	r26, 0xF4	; 244
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	0e 94 41 0a 	call	0x1482	; 0x1482 <__umulhisi3>
     fa6:	aa 27       	eor	r26, r26
     fa8:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     faa:	88 30       	cpi	r24, 0x08	; 8
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <__vector_23+0xd0>
     fb4:	7b c0       	rjmp	.+246    	; 0x10ac <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     fb6:	40 93 10 01 	sts	0x0110, r20
                if (rx_leadingbyte) {
     fba:	80 91 54 01 	lds	r24, 0x0154
     fbe:	81 11       	cpse	r24, r1
     fc0:	52 c0       	rjmp	.+164    	; 0x1066 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     fc2:	80 91 2e 01 	lds	r24, 0x012E
     fc6:	e8 2f       	mov	r30, r24
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	e6 5a       	subi	r30, 0xA6	; 166
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	90 91 68 01 	lds	r25, 0x0168
     fd2:	90 83       	st	Z, r25
                    rx_byteindex++;
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	80 93 2e 01 	sts	0x012E, r24
                    if (rx_byteindex == sizeof(message_t)) {
     fda:	8c 30       	cpi	r24, 0x0C	; 12
     fdc:	21 f6       	brne	.-120    	; 0xf66 <__vector_23+0x80>
                        rx_timer_off();
     fde:	10 92 81 00 	sts	0x0081, r1
     fe2:	10 92 85 00 	sts	0x0085, r1
     fe6:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fea:	40 93 54 01 	sts	0x0154, r20
                        rx_busy = 0;
     fee:	10 92 37 01 	sts	0x0137, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     ff2:	c0 91 64 01 	lds	r28, 0x0164
     ff6:	d0 91 65 01 	lds	r29, 0x0165
     ffa:	8a e5       	ldi	r24, 0x5A	; 90
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 7d 09 	call	0x12fa	; 0x12fa <message_crc>
    1002:	c8 17       	cp	r28, r24
    1004:	d9 07       	cpc	r29, r25
    1006:	09 f0       	breq	.+2      	; 0x100a <__vector_23+0x124>
    1008:	ae cf       	rjmp	.-164    	; 0xf66 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    100a:	80 91 63 01 	lds	r24, 0x0163
    100e:	87 ff       	sbrs	r24, 7
    1010:	61 c0       	rjmp	.+194    	; 0x10d4 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1012:	98 e7       	ldi	r25, 0x78	; 120
    1014:	98 0f       	add	r25, r24
    1016:	93 30       	cpi	r25, 0x03	; 3
    1018:	30 f0       	brcs	.+12     	; 0x1026 <__vector_23+0x140>
        motors_off();
    101a:	53 98       	cbi	0x0a, 3	; 10
    101c:	23 98       	cbi	0x04, 3	; 4
    101e:	10 92 b4 00 	sts	0x00B4, r1
    1022:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	fc 01       	movw	r30, r24
    102a:	e0 58       	subi	r30, 0x80	; 128
    102c:	f1 09       	sbc	r31, r1
    102e:	eb 30       	cpi	r30, 0x0B	; 11
    1030:	f1 05       	cpc	r31, r1
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__vector_23+0x150>
    1034:	98 cf       	rjmp	.-208    	; 0xf66 <__vector_23+0x80>
    1036:	e5 5c       	subi	r30, 0xC5	; 197
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    103e:	10 92 81 00 	sts	0x0081, r1
    1042:	10 92 85 00 	sts	0x0085, r1
    1046:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    104a:	40 93 10 01 	sts	0x0110, r20
            rx_leadingbyte = 1;
    104e:	40 93 54 01 	sts	0x0154, r20
            rx_busy = 0;
    1052:	10 92 37 01 	sts	0x0137, r1
            adc_trigger_high_gain();
    1056:	10 92 7c 00 	sts	0x007C, r1
    105a:	83 ea       	ldi	r24, 0xA3	; 163
    105c:	80 93 7a 00 	sts	0x007A, r24
    1060:	40 93 7b 00 	sts	0x007B, r20
    1064:	80 cf       	rjmp	.-256    	; 0xf66 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1066:	80 91 7a 00 	lds	r24, 0x007A
    106a:	86 fd       	sbrc	r24, 6
    106c:	fc cf       	rjmp	.-8      	; 0x1066 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    106e:	80 91 78 00 	lds	r24, 0x0078
    1072:	90 91 79 00 	lds	r25, 0x0079
    1076:	90 93 30 01 	sts	0x0130, r25
    107a:	80 93 2f 01 	sts	0x012F, r24
                    adc_trigger_high_gain();
    107e:	10 92 7c 00 	sts	0x007C, r1
    1082:	83 ea       	ldi	r24, 0xA3	; 163
    1084:	80 93 7a 00 	sts	0x007A, r24
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    108e:	90 91 68 01 	lds	r25, 0x0168
    1092:	99 23       	and	r25, r25
    1094:	d1 f0       	breq	.+52     	; 0x10ca <__vector_23+0x1e4>
                        rx_timer_off();
    1096:	10 92 81 00 	sts	0x0081, r1
    109a:	10 92 85 00 	sts	0x0085, r1
    109e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10a2:	80 93 54 01 	sts	0x0154, r24
                        rx_busy = 0;
    10a6:	10 92 37 01 	sts	0x0137, r1
    10aa:	5d cf       	rjmp	.-326    	; 0xf66 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    10ac:	21 e0       	ldi	r18, 0x01	; 1
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	f9 01       	movw	r30, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <__vector_23+0x1d2>
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <__vector_23+0x1ce>
    10bc:	cf 01       	movw	r24, r30
    10be:	90 91 68 01 	lds	r25, 0x0168
    10c2:	89 2b       	or	r24, r25
    10c4:	80 93 68 01 	sts	0x0168, r24
    10c8:	4e cf       	rjmp	.-356    	; 0xf66 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10ca:	10 92 54 01 	sts	0x0154, r1
                        rx_byteindex = 0;
    10ce:	10 92 2e 01 	sts	0x012E, r1
    10d2:	49 cf       	rjmp	.-366    	; 0xf66 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10d4:	e0 91 05 01 	lds	r30, 0x0105
    10d8:	f0 91 06 01 	lds	r31, 0x0106
    10dc:	6f e2       	ldi	r22, 0x2F	; 47
    10de:	71 e0       	ldi	r23, 0x01	; 1
    10e0:	8a e5       	ldi	r24, 0x5A	; 90
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	09 95       	icall
    10e6:	3f cf       	rjmp	.-386    	; 0xf66 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10e8:	80 91 5a 01 	lds	r24, 0x015A
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <__vector_23+0x20c>
    10f0:	dd c0       	rjmp	.+442    	; 0x12ac <__vector_23+0x3c6>
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <__vector_23+0x210>
    10f4:	ba c0       	rjmp	.+372    	; 0x126a <__vector_23+0x384>
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	09 f4       	brne	.+2      	; 0x10fc <__vector_23+0x216>
    10fa:	c6 c0       	rjmp	.+396    	; 0x1288 <__vector_23+0x3a2>
    10fc:	84 30       	cpi	r24, 0x04	; 4
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__vector_23+0x21c>
    1100:	b1 c0       	rjmp	.+354    	; 0x1264 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1102:	80 91 0d 01 	lds	r24, 0x010D
    1106:	90 91 60 01 	lds	r25, 0x0160
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	09 f4       	brne	.+2      	; 0x1110 <__vector_23+0x22a>
    110e:	e3 c0       	rjmp	.+454    	; 0x12d6 <__vector_23+0x3f0>
    1110:	80 91 5f 01 	lds	r24, 0x015F
                        prev_motion = MOVE_STOP;
    1114:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    1118:	23 e0       	ldi	r18, 0x03	; 3
    111a:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    111e:	80 93 6b 01 	sts	0x016B, r24
                        kilo_straight_right = calibmsg->straight_right;
    1122:	90 93 6c 01 	sts	0x016C, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1126:	80 91 0f 01 	lds	r24, 0x010F
    112a:	86 30       	cpi	r24, 0x06	; 6
    112c:	09 f4       	brne	.+2      	; 0x1130 <__vector_23+0x24a>
    112e:	1b cf       	rjmp	.-458    	; 0xf66 <__vector_23+0x80>
                motors_on();
    1130:	53 9a       	sbi	0x0a, 3	; 10
    1132:	23 9a       	sbi	0x04, 3	; 4
    1134:	10 92 b4 00 	sts	0x00B4, r1
    1138:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    113c:	86 e0       	ldi	r24, 0x06	; 6
    113e:	80 93 0f 01 	sts	0x010F, r24
    1142:	11 cf       	rjmp	.-478    	; 0xf66 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1144:	80 91 0f 01 	lds	r24, 0x010F
    1148:	86 30       	cpi	r24, 0x06	; 6
    114a:	99 f0       	breq	.+38     	; 0x1172 <__vector_23+0x28c>
                motors_on();
    114c:	53 9a       	sbi	0x0a, 3	; 10
    114e:	23 9a       	sbi	0x04, 3	; 4
    1150:	10 92 b4 00 	sts	0x00B4, r1
    1154:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1158:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    115a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    115c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    115e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1160:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1162:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1164:	10 92 0d 01 	sts	0x010D, r1
    1168:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9c 01       	movw	r18, r24
    1178:	00 90 5a 01 	lds	r0, 0x015A
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <__vector_23+0x29c>
    117e:	22 0f       	add	r18, r18
    1180:	33 1f       	adc	r19, r19
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <__vector_23+0x298>
    1186:	80 91 69 01 	lds	r24, 0x0169
    118a:	90 91 6a 01 	lds	r25, 0x016A
    118e:	82 23       	and	r24, r18
    1190:	93 23       	and	r25, r19
    1192:	89 2b       	or	r24, r25
    1194:	09 f0       	breq	.+2      	; 0x1198 <__vector_23+0x2b2>
    1196:	86 c0       	rjmp	.+268    	; 0x12a4 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1198:	10 92 0d 01 	sts	0x010D, r1
    119c:	e4 ce       	rjmp	.-568    	; 0xf66 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 0f 01 	sts	0x010F, r24
    11a4:	e0 ce       	rjmp	.-576    	; 0xf66 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    11a6:	e0 e0       	ldi	r30, 0x00	; 0
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    11ac:	80 91 6e 00 	lds	r24, 0x006E
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	80 93 6e 00 	sts	0x006E, r24
    11b6:	16 bc       	out	0x26, r1	; 38
            bootload();
    11b8:	e0 e0       	ldi	r30, 0x00	; 0
    11ba:	f0 e7       	ldi	r31, 0x70	; 112
    11bc:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11be:	10 92 0f 01 	sts	0x010F, r1
    11c2:	d1 ce       	rjmp	.-606    	; 0xf66 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	80 93 0f 01 	sts	0x010F, r24
    11ca:	cd ce       	rjmp	.-614    	; 0xf66 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11cc:	85 e0       	ldi	r24, 0x05	; 5
    11ce:	80 93 0f 01 	sts	0x010F, r24
    11d2:	c9 ce       	rjmp	.-622    	; 0xf66 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11d4:	80 91 0f 01 	lds	r24, 0x010F
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	09 f4       	brne	.+2      	; 0x11de <__vector_23+0x2f8>
    11dc:	c4 ce       	rjmp	.-632    	; 0xf66 <__vector_23+0x80>
    11de:	80 91 0f 01 	lds	r24, 0x010F
    11e2:	84 30       	cpi	r24, 0x04	; 4
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <__vector_23+0x302>
    11e6:	bf ce       	rjmp	.-642    	; 0xf66 <__vector_23+0x80>
                motors_on();
    11e8:	53 9a       	sbi	0x0a, 3	; 10
    11ea:	23 9a       	sbi	0x04, 3	; 4
    11ec:	10 92 b4 00 	sts	0x00B4, r1
    11f0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	80 93 0f 01 	sts	0x010F, r24
    11fa:	b5 ce       	rjmp	.-662    	; 0xf66 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11fc:	80 91 0f 01 	lds	r24, 0x010F
    1200:	86 30       	cpi	r24, 0x06	; 6
    1202:	09 f0       	breq	.+2      	; 0x1206 <__vector_23+0x320>
    1204:	b0 ce       	rjmp	.-672    	; 0xf66 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1206:	60 91 69 01 	lds	r22, 0x0169
    120a:	80 eb       	ldi	r24, 0xB0	; 176
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1212:	60 91 6a 01 	lds	r22, 0x016A
    1216:	81 eb       	ldi	r24, 0xB1	; 177
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    121e:	60 91 6d 01 	lds	r22, 0x016D
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    122a:	60 91 59 01 	lds	r22, 0x0159
    122e:	89 e0       	ldi	r24, 0x09	; 9
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1236:	60 91 6b 01 	lds	r22, 0x016B
    123a:	8c e0       	ldi	r24, 0x0C	; 12
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1242:	60 91 6c 01 	lds	r22, 0x016C
    1246:	84 e1       	ldi	r24, 0x14	; 20
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <eeprom_write_byte>
                        motors_off();
    124e:	53 98       	cbi	0x0a, 3	; 10
    1250:	23 98       	cbi	0x04, 3	; 4
    1252:	10 92 b4 00 	sts	0x00B4, r1
    1256:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 0f 01 	sts	0x010F, r24
    1260:	80 91 5a 01 	lds	r24, 0x015A
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1264:	81 11       	cpse	r24, r1
    1266:	5f cf       	rjmp	.-322    	; 0x1126 <__vector_23+0x240>
    1268:	7e ce       	rjmp	.-772    	; 0xf66 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    126a:	88 23       	and	r24, r24
    126c:	39 f2       	breq	.-114    	; 0x11fc <__vector_23+0x316>
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1272:	80 91 5b 01 	lds	r24, 0x015B
    1276:	90 91 5c 01 	lds	r25, 0x015C
    127a:	90 93 6a 01 	sts	0x016A, r25
    127e:	80 93 69 01 	sts	0x0169, r24
                    cur_motion = MOVE_STOP;
    1282:	10 92 0d 01 	sts	0x010D, r1
    1286:	4f cf       	rjmp	.-354    	; 0x1126 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1288:	80 91 0d 01 	lds	r24, 0x010D
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	71 f1       	breq	.+92     	; 0x12ec <__vector_23+0x406>
    1290:	80 91 5e 01 	lds	r24, 0x015E
                        prev_motion = MOVE_STOP;
    1294:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    129e:	80 93 59 01 	sts	0x0159, r24
    12a2:	41 cf       	rjmp	.-382    	; 0x1126 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 0d 01 	sts	0x010D, r24
    12aa:	5d ce       	rjmp	.-838    	; 0xf66 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12ac:	80 91 0d 01 	lds	r24, 0x010D
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	51 f0       	breq	.+20     	; 0x12c8 <__vector_23+0x3e2>
    12b4:	80 91 5d 01 	lds	r24, 0x015D
                        prev_motion = MOVE_STOP;
    12b8:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    12c2:	80 93 6d 01 	sts	0x016D, r24
    12c6:	2f cf       	rjmp	.-418    	; 0x1126 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12c8:	80 91 5d 01 	lds	r24, 0x015D
    12cc:	90 91 6d 01 	lds	r25, 0x016D
    12d0:	89 13       	cpse	r24, r25
    12d2:	f2 cf       	rjmp	.-28     	; 0x12b8 <__vector_23+0x3d2>
    12d4:	28 cf       	rjmp	.-432    	; 0x1126 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12d6:	80 91 6c 01 	lds	r24, 0x016C
    12da:	98 13       	cpse	r25, r24
    12dc:	19 cf       	rjmp	.-462    	; 0x1110 <__vector_23+0x22a>
    12de:	80 91 5f 01 	lds	r24, 0x015F
    12e2:	20 91 6b 01 	lds	r18, 0x016B
    12e6:	82 13       	cpse	r24, r18
    12e8:	15 cf       	rjmp	.-470    	; 0x1114 <__vector_23+0x22e>
    12ea:	1d cf       	rjmp	.-454    	; 0x1126 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12ec:	80 91 5e 01 	lds	r24, 0x015E
    12f0:	90 91 59 01 	lds	r25, 0x0159
    12f4:	89 13       	cpse	r24, r25
    12f6:	ce cf       	rjmp	.-100    	; 0x1294 <__vector_23+0x3ae>
    12f8:	16 cf       	rjmp	.-468    	; 0x1126 <__vector_23+0x240>

000012fa <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12fa:	fc 01       	movw	r30, r24
    12fc:	ac 01       	movw	r20, r24
    12fe:	46 5f       	subi	r20, 0xF6	; 246
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1306:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1308:	82 27       	eor	r24, r18
    130a:	08 2e       	mov	r0, r24
    130c:	82 95       	swap	r24
    130e:	80 7f       	andi	r24, 0xF0	; 240
    1310:	80 25       	eor	r24, r0
    1312:	09 2e       	mov	r0, r25
    1314:	98 2f       	mov	r25, r24
    1316:	82 95       	swap	r24
    1318:	8f 70       	andi	r24, 0x0F	; 15
    131a:	08 26       	eor	r0, r24
    131c:	86 95       	lsr	r24
    131e:	98 27       	eor	r25, r24
    1320:	89 27       	eor	r24, r25
    1322:	88 0f       	add	r24, r24
    1324:	88 0f       	add	r24, r24
    1326:	88 0f       	add	r24, r24
    1328:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    132a:	e4 17       	cp	r30, r20
    132c:	f5 07       	cpc	r31, r21
    132e:	59 f7       	brne	.-42     	; 0x1306 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1330:	08 95       	ret

00001332 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1332:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1334:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1336:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1338:	20 91 2d 01 	lds	r18, 0x012D
    or tmpreg1, ddrreg
    133c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    133e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1340:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1342:	30 91 2d 01 	lds	r19, 0x012D
    1346:	20 30       	cpi	r18, 0x00	; 0
    1348:	29 f0       	breq	.+10     	; 0x1354 <message_send+0x22>
    134a:	00 00       	nop
    134c:	25 b1       	in	r18, 0x05	; 5
    134e:	23 2b       	or	r18, r19
    1350:	25 b9       	out	0x05, r18	; 5
    1352:	04 c0       	rjmp	.+8      	; 0x135c <message_send+0x2a>
    1354:	00 00       	nop
    1356:	00 00       	nop
    1358:	00 00       	nop
    135a:	00 c0       	rjmp	.+0      	; 0x135c <message_send+0x2a>
    135c:	00 00       	nop
    135e:	00 00       	nop
    1360:	00 00       	nop
    1362:	30 95       	com	r19
    1364:	25 b1       	in	r18, 0x05	; 5
    1366:	23 23       	and	r18, r19
    1368:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    136a:	2e ea       	ldi	r18, 0xAE	; 174
    136c:	2a 95       	dec	r18
    136e:	f1 f7       	brne	.-4      	; 0x136c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1370:	2b ee       	ldi	r18, 0xEB	; 235

00001372 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1372:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1374:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1376:	0a c0       	rjmp	.+20     	; 0x138c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1378:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    137a:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    137e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1380:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1382:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1384:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1386:	0f be       	out	0x3f, r0	; 63
    return 0
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	08 95       	ret

0000138c <nocollision>:
nocollision:
    nop
    138c:	00 00       	nop
    dec tmpreg1
    138e:	2a 95       	dec	r18
    brne checkcollision
    1390:	81 f7       	brne	.-32     	; 0x1372 <checkcollision>

    ldi tmpreg1, 0x01
    1392:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1394:	30 91 2d 01 	lds	r19, 0x012D
    1398:	20 30       	cpi	r18, 0x00	; 0
    139a:	29 f0       	breq	.+10     	; 0x13a6 <nocollision+0x1a>
    139c:	00 00       	nop
    139e:	25 b1       	in	r18, 0x05	; 5
    13a0:	23 2b       	or	r18, r19
    13a2:	25 b9       	out	0x05, r18	; 5
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <nocollision+0x22>
    13a6:	00 00       	nop
    13a8:	00 00       	nop
    13aa:	00 00       	nop
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <nocollision+0x22>
    13ae:	00 00       	nop
    13b0:	00 00       	nop
    13b2:	00 00       	nop
    13b4:	30 95       	com	r19
    13b6:	25 b1       	in	r18, 0x05	; 5
    13b8:	23 23       	and	r18, r19
    13ba:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    13bc:	00 00       	nop
    13be:	24 e5       	ldi	r18, 0x54	; 84
    13c0:	2a 95       	dec	r18
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13c4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13c6:	8c e0       	ldi	r24, 0x0C	; 12

000013c8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13c8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13cc:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13ce:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    13d0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    13d2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13d4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13d8:	50 e0       	ldi	r21, 0x00	; 0

000013da <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13da:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13dc:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13de:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13e0:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13e2:	30 91 2d 01 	lds	r19, 0x012D
    13e6:	20 30       	cpi	r18, 0x00	; 0
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <sendbit+0x1a>
    13ea:	00 00       	nop
    13ec:	25 b1       	in	r18, 0x05	; 5
    13ee:	23 2b       	or	r18, r19
    13f0:	25 b9       	out	0x05, r18	; 5
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <sendbit+0x22>
    13f4:	00 00       	nop
    13f6:	00 00       	nop
    13f8:	00 00       	nop
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <sendbit+0x22>
    13fc:	00 00       	nop
    13fe:	00 00       	nop
    1400:	00 00       	nop
    1402:	30 95       	com	r19
    1404:	25 b1       	in	r18, 0x05	; 5
    1406:	23 23       	and	r18, r19
    1408:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    140a:	00 00       	nop
    140c:	21 e5       	ldi	r18, 0x51	; 81
    140e:	2a 95       	dec	r18
    1410:	f1 f7       	brne	.-4      	; 0x140e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1412:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1414:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1416:	9a 95       	dec	r25
    brne sendbit
    1418:	01 f7       	brne	.-64     	; 0x13da <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    141a:	8a 95       	dec	r24
    brne sendbyte
    141c:	a9 f6       	brne	.-86     	; 0x13c8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    141e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1420:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1422:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1424:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1426:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    142a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    142c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    142e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1430:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1432:	0f be       	out	0x3f, r0	; 63
    return 1
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	08 95       	ret

00001438 <main>:
}

int main()
{
    kilo_init();
    1438:	0e 94 ad 00 	call	0x15a	; 0x15a <kilo_init>
    kilo_start(setup, loop);
    143c:	62 e7       	ldi	r22, 0x72	; 114
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	81 e7       	ldi	r24, 0x71	; 113
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 a9 01 	call	0x352	; 0x352 <kilo_start>
    
    return 0;
}
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	08 95       	ret

0000144e <__divmodhi4>:
    144e:	97 fb       	bst	r25, 7
    1450:	07 2e       	mov	r0, r23
    1452:	16 f4       	brtc	.+4      	; 0x1458 <__divmodhi4+0xa>
    1454:	00 94       	com	r0
    1456:	07 d0       	rcall	.+14     	; 0x1466 <__divmodhi4_neg1>
    1458:	77 fd       	sbrc	r23, 7
    145a:	09 d0       	rcall	.+18     	; 0x146e <__divmodhi4_neg2>
    145c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__udivmodhi4>
    1460:	07 fc       	sbrc	r0, 7
    1462:	05 d0       	rcall	.+10     	; 0x146e <__divmodhi4_neg2>
    1464:	3e f4       	brtc	.+14     	; 0x1474 <__divmodhi4_exit>

00001466 <__divmodhi4_neg1>:
    1466:	90 95       	com	r25
    1468:	81 95       	neg	r24
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	08 95       	ret

0000146e <__divmodhi4_neg2>:
    146e:	70 95       	com	r23
    1470:	61 95       	neg	r22
    1472:	7f 4f       	sbci	r23, 0xFF	; 255

00001474 <__divmodhi4_exit>:
    1474:	08 95       	ret

00001476 <__tablejump2__>:
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	05 90       	lpm	r0, Z+
    147c:	f4 91       	lpm	r31, Z
    147e:	e0 2d       	mov	r30, r0
    1480:	09 94       	ijmp

00001482 <__umulhisi3>:
    1482:	a2 9f       	mul	r26, r18
    1484:	b0 01       	movw	r22, r0
    1486:	b3 9f       	mul	r27, r19
    1488:	c0 01       	movw	r24, r0
    148a:	a3 9f       	mul	r26, r19
    148c:	70 0d       	add	r23, r0
    148e:	81 1d       	adc	r24, r1
    1490:	11 24       	eor	r1, r1
    1492:	91 1d       	adc	r25, r1
    1494:	b2 9f       	mul	r27, r18
    1496:	70 0d       	add	r23, r0
    1498:	81 1d       	adc	r24, r1
    149a:	11 24       	eor	r1, r1
    149c:	91 1d       	adc	r25, r1
    149e:	08 95       	ret

000014a0 <__udivmodhi4>:
    14a0:	aa 1b       	sub	r26, r26
    14a2:	bb 1b       	sub	r27, r27
    14a4:	51 e1       	ldi	r21, 0x11	; 17
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <__udivmodhi4_ep>

000014a8 <__udivmodhi4_loop>:
    14a8:	aa 1f       	adc	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	a6 17       	cp	r26, r22
    14ae:	b7 07       	cpc	r27, r23
    14b0:	10 f0       	brcs	.+4      	; 0x14b6 <__udivmodhi4_ep>
    14b2:	a6 1b       	sub	r26, r22
    14b4:	b7 0b       	sbc	r27, r23

000014b6 <__udivmodhi4_ep>:
    14b6:	88 1f       	adc	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	5a 95       	dec	r21
    14bc:	a9 f7       	brne	.-22     	; 0x14a8 <__udivmodhi4_loop>
    14be:	80 95       	com	r24
    14c0:	90 95       	com	r25
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	08 95       	ret

000014c8 <__subsf3>:
    14c8:	50 58       	subi	r21, 0x80	; 128

000014ca <__addsf3>:
    14ca:	bb 27       	eor	r27, r27
    14cc:	aa 27       	eor	r26, r26
    14ce:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__addsf3x>
    14d2:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_round>
    14d6:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fp_pscA>
    14da:	38 f0       	brcs	.+14     	; 0x14ea <__addsf3+0x20>
    14dc:	0e 94 c6 0b 	call	0x178c	; 0x178c <__fp_pscB>
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <__addsf3+0x20>
    14e2:	39 f4       	brne	.+14     	; 0x14f2 <__addsf3+0x28>
    14e4:	9f 3f       	cpi	r25, 0xFF	; 255
    14e6:	19 f4       	brne	.+6      	; 0x14ee <__addsf3+0x24>
    14e8:	26 f4       	brtc	.+8      	; 0x14f2 <__addsf3+0x28>
    14ea:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_nan>
    14ee:	0e f4       	brtc	.+2      	; 0x14f2 <__addsf3+0x28>
    14f0:	e0 95       	com	r30
    14f2:	e7 fb       	bst	r30, 7
    14f4:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_inf>

000014f8 <__addsf3x>:
    14f8:	e9 2f       	mov	r30, r25
    14fa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__fp_split3>
    14fe:	58 f3       	brcs	.-42     	; 0x14d6 <__addsf3+0xc>
    1500:	ba 17       	cp	r27, r26
    1502:	62 07       	cpc	r22, r18
    1504:	73 07       	cpc	r23, r19
    1506:	84 07       	cpc	r24, r20
    1508:	95 07       	cpc	r25, r21
    150a:	20 f0       	brcs	.+8      	; 0x1514 <__addsf3x+0x1c>
    150c:	79 f4       	brne	.+30     	; 0x152c <__addsf3x+0x34>
    150e:	a6 f5       	brtc	.+104    	; 0x1578 <__addsf3x+0x80>
    1510:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_zero>
    1514:	0e f4       	brtc	.+2      	; 0x1518 <__addsf3x+0x20>
    1516:	e0 95       	com	r30
    1518:	0b 2e       	mov	r0, r27
    151a:	ba 2f       	mov	r27, r26
    151c:	a0 2d       	mov	r26, r0
    151e:	0b 01       	movw	r0, r22
    1520:	b9 01       	movw	r22, r18
    1522:	90 01       	movw	r18, r0
    1524:	0c 01       	movw	r0, r24
    1526:	ca 01       	movw	r24, r20
    1528:	a0 01       	movw	r20, r0
    152a:	11 24       	eor	r1, r1
    152c:	ff 27       	eor	r31, r31
    152e:	59 1b       	sub	r21, r25
    1530:	99 f0       	breq	.+38     	; 0x1558 <__addsf3x+0x60>
    1532:	59 3f       	cpi	r21, 0xF9	; 249
    1534:	50 f4       	brcc	.+20     	; 0x154a <__addsf3x+0x52>
    1536:	50 3e       	cpi	r21, 0xE0	; 224
    1538:	68 f1       	brcs	.+90     	; 0x1594 <__addsf3x+0x9c>
    153a:	1a 16       	cp	r1, r26
    153c:	f0 40       	sbci	r31, 0x00	; 0
    153e:	a2 2f       	mov	r26, r18
    1540:	23 2f       	mov	r18, r19
    1542:	34 2f       	mov	r19, r20
    1544:	44 27       	eor	r20, r20
    1546:	58 5f       	subi	r21, 0xF8	; 248
    1548:	f3 cf       	rjmp	.-26     	; 0x1530 <__addsf3x+0x38>
    154a:	46 95       	lsr	r20
    154c:	37 95       	ror	r19
    154e:	27 95       	ror	r18
    1550:	a7 95       	ror	r26
    1552:	f0 40       	sbci	r31, 0x00	; 0
    1554:	53 95       	inc	r21
    1556:	c9 f7       	brne	.-14     	; 0x154a <__addsf3x+0x52>
    1558:	7e f4       	brtc	.+30     	; 0x1578 <__addsf3x+0x80>
    155a:	1f 16       	cp	r1, r31
    155c:	ba 0b       	sbc	r27, r26
    155e:	62 0b       	sbc	r22, r18
    1560:	73 0b       	sbc	r23, r19
    1562:	84 0b       	sbc	r24, r20
    1564:	ba f0       	brmi	.+46     	; 0x1594 <__addsf3x+0x9c>
    1566:	91 50       	subi	r25, 0x01	; 1
    1568:	a1 f0       	breq	.+40     	; 0x1592 <__addsf3x+0x9a>
    156a:	ff 0f       	add	r31, r31
    156c:	bb 1f       	adc	r27, r27
    156e:	66 1f       	adc	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	c2 f7       	brpl	.-16     	; 0x1566 <__addsf3x+0x6e>
    1576:	0e c0       	rjmp	.+28     	; 0x1594 <__addsf3x+0x9c>
    1578:	ba 0f       	add	r27, r26
    157a:	62 1f       	adc	r22, r18
    157c:	73 1f       	adc	r23, r19
    157e:	84 1f       	adc	r24, r20
    1580:	48 f4       	brcc	.+18     	; 0x1594 <__addsf3x+0x9c>
    1582:	87 95       	ror	r24
    1584:	77 95       	ror	r23
    1586:	67 95       	ror	r22
    1588:	b7 95       	ror	r27
    158a:	f7 95       	ror	r31
    158c:	9e 3f       	cpi	r25, 0xFE	; 254
    158e:	08 f0       	brcs	.+2      	; 0x1592 <__addsf3x+0x9a>
    1590:	b0 cf       	rjmp	.-160    	; 0x14f2 <__addsf3+0x28>
    1592:	93 95       	inc	r25
    1594:	88 0f       	add	r24, r24
    1596:	08 f0       	brcs	.+2      	; 0x159a <__addsf3x+0xa2>
    1598:	99 27       	eor	r25, r25
    159a:	ee 0f       	add	r30, r30
    159c:	97 95       	ror	r25
    159e:	87 95       	ror	r24
    15a0:	08 95       	ret

000015a2 <__divsf3>:
    15a2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__divsf3x>
    15a6:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_round>
    15aa:	0e 94 c6 0b 	call	0x178c	; 0x178c <__fp_pscB>
    15ae:	58 f0       	brcs	.+22     	; 0x15c6 <__divsf3+0x24>
    15b0:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fp_pscA>
    15b4:	40 f0       	brcs	.+16     	; 0x15c6 <__divsf3+0x24>
    15b6:	29 f4       	brne	.+10     	; 0x15c2 <__divsf3+0x20>
    15b8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ba:	29 f0       	breq	.+10     	; 0x15c6 <__divsf3+0x24>
    15bc:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_inf>
    15c0:	51 11       	cpse	r21, r1
    15c2:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_szero>
    15c6:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_nan>

000015ca <__divsf3x>:
    15ca:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__fp_split3>
    15ce:	68 f3       	brcs	.-38     	; 0x15aa <__divsf3+0x8>

000015d0 <__divsf3_pse>:
    15d0:	99 23       	and	r25, r25
    15d2:	b1 f3       	breq	.-20     	; 0x15c0 <__divsf3+0x1e>
    15d4:	55 23       	and	r21, r21
    15d6:	91 f3       	breq	.-28     	; 0x15bc <__divsf3+0x1a>
    15d8:	95 1b       	sub	r25, r21
    15da:	55 0b       	sbc	r21, r21
    15dc:	bb 27       	eor	r27, r27
    15de:	aa 27       	eor	r26, r26
    15e0:	62 17       	cp	r22, r18
    15e2:	73 07       	cpc	r23, r19
    15e4:	84 07       	cpc	r24, r20
    15e6:	38 f0       	brcs	.+14     	; 0x15f6 <__divsf3_pse+0x26>
    15e8:	9f 5f       	subi	r25, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	22 0f       	add	r18, r18
    15ee:	33 1f       	adc	r19, r19
    15f0:	44 1f       	adc	r20, r20
    15f2:	aa 1f       	adc	r26, r26
    15f4:	a9 f3       	breq	.-22     	; 0x15e0 <__divsf3_pse+0x10>
    15f6:	35 d0       	rcall	.+106    	; 0x1662 <__divsf3_pse+0x92>
    15f8:	0e 2e       	mov	r0, r30
    15fa:	3a f0       	brmi	.+14     	; 0x160a <__divsf3_pse+0x3a>
    15fc:	e0 e8       	ldi	r30, 0x80	; 128
    15fe:	32 d0       	rcall	.+100    	; 0x1664 <__divsf3_pse+0x94>
    1600:	91 50       	subi	r25, 0x01	; 1
    1602:	50 40       	sbci	r21, 0x00	; 0
    1604:	e6 95       	lsr	r30
    1606:	00 1c       	adc	r0, r0
    1608:	ca f7       	brpl	.-14     	; 0x15fc <__divsf3_pse+0x2c>
    160a:	2b d0       	rcall	.+86     	; 0x1662 <__divsf3_pse+0x92>
    160c:	fe 2f       	mov	r31, r30
    160e:	29 d0       	rcall	.+82     	; 0x1662 <__divsf3_pse+0x92>
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	bb 1f       	adc	r27, r27
    1618:	26 17       	cp	r18, r22
    161a:	37 07       	cpc	r19, r23
    161c:	48 07       	cpc	r20, r24
    161e:	ab 07       	cpc	r26, r27
    1620:	b0 e8       	ldi	r27, 0x80	; 128
    1622:	09 f0       	breq	.+2      	; 0x1626 <__divsf3_pse+0x56>
    1624:	bb 0b       	sbc	r27, r27
    1626:	80 2d       	mov	r24, r0
    1628:	bf 01       	movw	r22, r30
    162a:	ff 27       	eor	r31, r31
    162c:	93 58       	subi	r25, 0x83	; 131
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	3a f0       	brmi	.+14     	; 0x1640 <__divsf3_pse+0x70>
    1632:	9e 3f       	cpi	r25, 0xFE	; 254
    1634:	51 05       	cpc	r21, r1
    1636:	78 f0       	brcs	.+30     	; 0x1656 <__divsf3_pse+0x86>
    1638:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_inf>
    163c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_szero>
    1640:	5f 3f       	cpi	r21, 0xFF	; 255
    1642:	e4 f3       	brlt	.-8      	; 0x163c <__divsf3_pse+0x6c>
    1644:	98 3e       	cpi	r25, 0xE8	; 232
    1646:	d4 f3       	brlt	.-12     	; 0x163c <__divsf3_pse+0x6c>
    1648:	86 95       	lsr	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	b7 95       	ror	r27
    1650:	f7 95       	ror	r31
    1652:	9f 5f       	subi	r25, 0xFF	; 255
    1654:	c9 f7       	brne	.-14     	; 0x1648 <__divsf3_pse+0x78>
    1656:	88 0f       	add	r24, r24
    1658:	91 1d       	adc	r25, r1
    165a:	96 95       	lsr	r25
    165c:	87 95       	ror	r24
    165e:	97 f9       	bld	r25, 7
    1660:	08 95       	ret
    1662:	e1 e0       	ldi	r30, 0x01	; 1
    1664:	66 0f       	add	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	88 1f       	adc	r24, r24
    166a:	bb 1f       	adc	r27, r27
    166c:	62 17       	cp	r22, r18
    166e:	73 07       	cpc	r23, r19
    1670:	84 07       	cpc	r24, r20
    1672:	ba 07       	cpc	r27, r26
    1674:	20 f0       	brcs	.+8      	; 0x167e <__divsf3_pse+0xae>
    1676:	62 1b       	sub	r22, r18
    1678:	73 0b       	sbc	r23, r19
    167a:	84 0b       	sbc	r24, r20
    167c:	ba 0b       	sbc	r27, r26
    167e:	ee 1f       	adc	r30, r30
    1680:	88 f7       	brcc	.-30     	; 0x1664 <__divsf3_pse+0x94>
    1682:	e0 95       	com	r30
    1684:	08 95       	ret

00001686 <__fixsfsi>:
    1686:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixunssfsi>
    168a:	68 94       	set
    168c:	b1 11       	cpse	r27, r1
    168e:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_szero>
    1692:	08 95       	ret

00001694 <__fixunssfsi>:
    1694:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fp_splitA>
    1698:	88 f0       	brcs	.+34     	; 0x16bc <__fixunssfsi+0x28>
    169a:	9f 57       	subi	r25, 0x7F	; 127
    169c:	98 f0       	brcs	.+38     	; 0x16c4 <__fixunssfsi+0x30>
    169e:	b9 2f       	mov	r27, r25
    16a0:	99 27       	eor	r25, r25
    16a2:	b7 51       	subi	r27, 0x17	; 23
    16a4:	b0 f0       	brcs	.+44     	; 0x16d2 <__fixunssfsi+0x3e>
    16a6:	e1 f0       	breq	.+56     	; 0x16e0 <__fixunssfsi+0x4c>
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	1a f0       	brmi	.+6      	; 0x16b8 <__fixunssfsi+0x24>
    16b2:	ba 95       	dec	r27
    16b4:	c9 f7       	brne	.-14     	; 0x16a8 <__fixunssfsi+0x14>
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <__fixunssfsi+0x4c>
    16b8:	b1 30       	cpi	r27, 0x01	; 1
    16ba:	91 f0       	breq	.+36     	; 0x16e0 <__fixunssfsi+0x4c>
    16bc:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fp_zero>
    16c0:	b1 e0       	ldi	r27, 0x01	; 1
    16c2:	08 95       	ret
    16c4:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_zero>
    16c8:	67 2f       	mov	r22, r23
    16ca:	78 2f       	mov	r23, r24
    16cc:	88 27       	eor	r24, r24
    16ce:	b8 5f       	subi	r27, 0xF8	; 248
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <__fixunssfsi+0x4c>
    16d2:	b9 3f       	cpi	r27, 0xF9	; 249
    16d4:	cc f3       	brlt	.-14     	; 0x16c8 <__fixunssfsi+0x34>
    16d6:	86 95       	lsr	r24
    16d8:	77 95       	ror	r23
    16da:	67 95       	ror	r22
    16dc:	b3 95       	inc	r27
    16de:	d9 f7       	brne	.-10     	; 0x16d6 <__fixunssfsi+0x42>
    16e0:	3e f4       	brtc	.+14     	; 0x16f0 <__fixunssfsi+0x5c>
    16e2:	90 95       	com	r25
    16e4:	80 95       	com	r24
    16e6:	70 95       	com	r23
    16e8:	61 95       	neg	r22
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <__floatunsisf>:
    16f2:	e8 94       	clt
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <__floatsisf+0x12>

000016f6 <__floatsisf>:
    16f6:	97 fb       	bst	r25, 7
    16f8:	3e f4       	brtc	.+14     	; 0x1708 <__floatsisf+0x12>
    16fa:	90 95       	com	r25
    16fc:	80 95       	com	r24
    16fe:	70 95       	com	r23
    1700:	61 95       	neg	r22
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	99 23       	and	r25, r25
    170a:	a9 f0       	breq	.+42     	; 0x1736 <__floatsisf+0x40>
    170c:	f9 2f       	mov	r31, r25
    170e:	96 e9       	ldi	r25, 0x96	; 150
    1710:	bb 27       	eor	r27, r27
    1712:	93 95       	inc	r25
    1714:	f6 95       	lsr	r31
    1716:	87 95       	ror	r24
    1718:	77 95       	ror	r23
    171a:	67 95       	ror	r22
    171c:	b7 95       	ror	r27
    171e:	f1 11       	cpse	r31, r1
    1720:	f8 cf       	rjmp	.-16     	; 0x1712 <__floatsisf+0x1c>
    1722:	fa f4       	brpl	.+62     	; 0x1762 <__floatsisf+0x6c>
    1724:	bb 0f       	add	r27, r27
    1726:	11 f4       	brne	.+4      	; 0x172c <__floatsisf+0x36>
    1728:	60 ff       	sbrs	r22, 0
    172a:	1b c0       	rjmp	.+54     	; 0x1762 <__floatsisf+0x6c>
    172c:	6f 5f       	subi	r22, 0xFF	; 255
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <__floatsisf+0x6c>
    1736:	88 23       	and	r24, r24
    1738:	11 f0       	breq	.+4      	; 0x173e <__floatsisf+0x48>
    173a:	96 e9       	ldi	r25, 0x96	; 150
    173c:	11 c0       	rjmp	.+34     	; 0x1760 <__floatsisf+0x6a>
    173e:	77 23       	and	r23, r23
    1740:	21 f0       	breq	.+8      	; 0x174a <__floatsisf+0x54>
    1742:	9e e8       	ldi	r25, 0x8E	; 142
    1744:	87 2f       	mov	r24, r23
    1746:	76 2f       	mov	r23, r22
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <__floatsisf+0x5e>
    174a:	66 23       	and	r22, r22
    174c:	71 f0       	breq	.+28     	; 0x176a <__floatsisf+0x74>
    174e:	96 e8       	ldi	r25, 0x86	; 134
    1750:	86 2f       	mov	r24, r22
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	2a f0       	brmi	.+10     	; 0x1762 <__floatsisf+0x6c>
    1758:	9a 95       	dec	r25
    175a:	66 0f       	add	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	da f7       	brpl	.-10     	; 0x1758 <__floatsisf+0x62>
    1762:	88 0f       	add	r24, r24
    1764:	96 95       	lsr	r25
    1766:	87 95       	ror	r24
    1768:	97 f9       	bld	r25, 7
    176a:	08 95       	ret

0000176c <__fp_inf>:
    176c:	97 f9       	bld	r25, 7
    176e:	9f 67       	ori	r25, 0x7F	; 127
    1770:	80 e8       	ldi	r24, 0x80	; 128
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	08 95       	ret

00001778 <__fp_nan>:
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	80 ec       	ldi	r24, 0xC0	; 192
    177c:	08 95       	ret

0000177e <__fp_pscA>:
    177e:	00 24       	eor	r0, r0
    1780:	0a 94       	dec	r0
    1782:	16 16       	cp	r1, r22
    1784:	17 06       	cpc	r1, r23
    1786:	18 06       	cpc	r1, r24
    1788:	09 06       	cpc	r0, r25
    178a:	08 95       	ret

0000178c <__fp_pscB>:
    178c:	00 24       	eor	r0, r0
    178e:	0a 94       	dec	r0
    1790:	12 16       	cp	r1, r18
    1792:	13 06       	cpc	r1, r19
    1794:	14 06       	cpc	r1, r20
    1796:	05 06       	cpc	r0, r21
    1798:	08 95       	ret

0000179a <__fp_round>:
    179a:	09 2e       	mov	r0, r25
    179c:	03 94       	inc	r0
    179e:	00 0c       	add	r0, r0
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <__fp_round+0xc>
    17a2:	88 23       	and	r24, r24
    17a4:	52 f0       	brmi	.+20     	; 0x17ba <__fp_round+0x20>
    17a6:	bb 0f       	add	r27, r27
    17a8:	40 f4       	brcc	.+16     	; 0x17ba <__fp_round+0x20>
    17aa:	bf 2b       	or	r27, r31
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <__fp_round+0x18>
    17ae:	60 ff       	sbrs	r22, 0
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__fp_round+0x20>
    17b2:	6f 5f       	subi	r22, 0xFF	; 255
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	08 95       	ret

000017bc <__fp_split3>:
    17bc:	57 fd       	sbrc	r21, 7
    17be:	90 58       	subi	r25, 0x80	; 128
    17c0:	44 0f       	add	r20, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	59 f0       	breq	.+22     	; 0x17dc <__fp_splitA+0x10>
    17c6:	5f 3f       	cpi	r21, 0xFF	; 255
    17c8:	71 f0       	breq	.+28     	; 0x17e6 <__fp_splitA+0x1a>
    17ca:	47 95       	ror	r20

000017cc <__fp_splitA>:
    17cc:	88 0f       	add	r24, r24
    17ce:	97 fb       	bst	r25, 7
    17d0:	99 1f       	adc	r25, r25
    17d2:	61 f0       	breq	.+24     	; 0x17ec <__fp_splitA+0x20>
    17d4:	9f 3f       	cpi	r25, 0xFF	; 255
    17d6:	79 f0       	breq	.+30     	; 0x17f6 <__fp_splitA+0x2a>
    17d8:	87 95       	ror	r24
    17da:	08 95       	ret
    17dc:	12 16       	cp	r1, r18
    17de:	13 06       	cpc	r1, r19
    17e0:	14 06       	cpc	r1, r20
    17e2:	55 1f       	adc	r21, r21
    17e4:	f2 cf       	rjmp	.-28     	; 0x17ca <__fp_split3+0xe>
    17e6:	46 95       	lsr	r20
    17e8:	f1 df       	rcall	.-30     	; 0x17cc <__fp_splitA>
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <__fp_splitA+0x30>
    17ec:	16 16       	cp	r1, r22
    17ee:	17 06       	cpc	r1, r23
    17f0:	18 06       	cpc	r1, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	f1 cf       	rjmp	.-30     	; 0x17d8 <__fp_splitA+0xc>
    17f6:	86 95       	lsr	r24
    17f8:	71 05       	cpc	r23, r1
    17fa:	61 05       	cpc	r22, r1
    17fc:	08 94       	sec
    17fe:	08 95       	ret

00001800 <__fp_zero>:
    1800:	e8 94       	clt

00001802 <__fp_szero>:
    1802:	bb 27       	eor	r27, r27
    1804:	66 27       	eor	r22, r22
    1806:	77 27       	eor	r23, r23
    1808:	cb 01       	movw	r24, r22
    180a:	97 f9       	bld	r25, 7
    180c:	08 95       	ret

0000180e <__mulsf3>:
    180e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__mulsf3x>
    1812:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_round>
    1816:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fp_pscA>
    181a:	38 f0       	brcs	.+14     	; 0x182a <__mulsf3+0x1c>
    181c:	0e 94 c6 0b 	call	0x178c	; 0x178c <__fp_pscB>
    1820:	20 f0       	brcs	.+8      	; 0x182a <__mulsf3+0x1c>
    1822:	95 23       	and	r25, r21
    1824:	11 f0       	breq	.+4      	; 0x182a <__mulsf3+0x1c>
    1826:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_inf>
    182a:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_nan>
    182e:	11 24       	eor	r1, r1
    1830:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_szero>

00001834 <__mulsf3x>:
    1834:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__fp_split3>
    1838:	70 f3       	brcs	.-36     	; 0x1816 <__mulsf3+0x8>

0000183a <__mulsf3_pse>:
    183a:	95 9f       	mul	r25, r21
    183c:	c1 f3       	breq	.-16     	; 0x182e <__mulsf3+0x20>
    183e:	95 0f       	add	r25, r21
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	55 1f       	adc	r21, r21
    1844:	62 9f       	mul	r22, r18
    1846:	f0 01       	movw	r30, r0
    1848:	72 9f       	mul	r23, r18
    184a:	bb 27       	eor	r27, r27
    184c:	f0 0d       	add	r31, r0
    184e:	b1 1d       	adc	r27, r1
    1850:	63 9f       	mul	r22, r19
    1852:	aa 27       	eor	r26, r26
    1854:	f0 0d       	add	r31, r0
    1856:	b1 1d       	adc	r27, r1
    1858:	aa 1f       	adc	r26, r26
    185a:	64 9f       	mul	r22, r20
    185c:	66 27       	eor	r22, r22
    185e:	b0 0d       	add	r27, r0
    1860:	a1 1d       	adc	r26, r1
    1862:	66 1f       	adc	r22, r22
    1864:	82 9f       	mul	r24, r18
    1866:	22 27       	eor	r18, r18
    1868:	b0 0d       	add	r27, r0
    186a:	a1 1d       	adc	r26, r1
    186c:	62 1f       	adc	r22, r18
    186e:	73 9f       	mul	r23, r19
    1870:	b0 0d       	add	r27, r0
    1872:	a1 1d       	adc	r26, r1
    1874:	62 1f       	adc	r22, r18
    1876:	83 9f       	mul	r24, r19
    1878:	a0 0d       	add	r26, r0
    187a:	61 1d       	adc	r22, r1
    187c:	22 1f       	adc	r18, r18
    187e:	74 9f       	mul	r23, r20
    1880:	33 27       	eor	r19, r19
    1882:	a0 0d       	add	r26, r0
    1884:	61 1d       	adc	r22, r1
    1886:	23 1f       	adc	r18, r19
    1888:	84 9f       	mul	r24, r20
    188a:	60 0d       	add	r22, r0
    188c:	21 1d       	adc	r18, r1
    188e:	82 2f       	mov	r24, r18
    1890:	76 2f       	mov	r23, r22
    1892:	6a 2f       	mov	r22, r26
    1894:	11 24       	eor	r1, r1
    1896:	9f 57       	subi	r25, 0x7F	; 127
    1898:	50 40       	sbci	r21, 0x00	; 0
    189a:	9a f0       	brmi	.+38     	; 0x18c2 <__mulsf3_pse+0x88>
    189c:	f1 f0       	breq	.+60     	; 0x18da <__mulsf3_pse+0xa0>
    189e:	88 23       	and	r24, r24
    18a0:	4a f0       	brmi	.+18     	; 0x18b4 <__mulsf3_pse+0x7a>
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	bb 1f       	adc	r27, r27
    18a8:	66 1f       	adc	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	91 50       	subi	r25, 0x01	; 1
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	a9 f7       	brne	.-22     	; 0x189e <__mulsf3_pse+0x64>
    18b4:	9e 3f       	cpi	r25, 0xFE	; 254
    18b6:	51 05       	cpc	r21, r1
    18b8:	80 f0       	brcs	.+32     	; 0x18da <__mulsf3_pse+0xa0>
    18ba:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_inf>
    18be:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_szero>
    18c2:	5f 3f       	cpi	r21, 0xFF	; 255
    18c4:	e4 f3       	brlt	.-8      	; 0x18be <__mulsf3_pse+0x84>
    18c6:	98 3e       	cpi	r25, 0xE8	; 232
    18c8:	d4 f3       	brlt	.-12     	; 0x18be <__mulsf3_pse+0x84>
    18ca:	86 95       	lsr	r24
    18cc:	77 95       	ror	r23
    18ce:	67 95       	ror	r22
    18d0:	b7 95       	ror	r27
    18d2:	f7 95       	ror	r31
    18d4:	e7 95       	ror	r30
    18d6:	9f 5f       	subi	r25, 0xFF	; 255
    18d8:	c1 f7       	brne	.-16     	; 0x18ca <__mulsf3_pse+0x90>
    18da:	fe 2b       	or	r31, r30
    18dc:	88 0f       	add	r24, r24
    18de:	91 1d       	adc	r25, r1
    18e0:	96 95       	lsr	r25
    18e2:	87 95       	ror	r24
    18e4:	97 f9       	bld	r25, 7
    18e6:	08 95       	ret

000018e8 <do_rand>:
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	68 81       	ld	r22, Y
    1900:	79 81       	ldd	r23, Y+1	; 0x01
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	9b 81       	ldd	r25, Y+3	; 0x03
    1906:	61 15       	cp	r22, r1
    1908:	71 05       	cpc	r23, r1
    190a:	81 05       	cpc	r24, r1
    190c:	91 05       	cpc	r25, r1
    190e:	21 f4       	brne	.+8      	; 0x1918 <do_rand+0x30>
    1910:	64 e2       	ldi	r22, 0x24	; 36
    1912:	79 ed       	ldi	r23, 0xD9	; 217
    1914:	8b e5       	ldi	r24, 0x5B	; 91
    1916:	97 e0       	ldi	r25, 0x07	; 7
    1918:	2d e1       	ldi	r18, 0x1D	; 29
    191a:	33 ef       	ldi	r19, 0xF3	; 243
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__divmodsi4>
    1924:	49 01       	movw	r8, r18
    1926:	5a 01       	movw	r10, r20
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	a7 ea       	ldi	r26, 0xA7	; 167
    192e:	b1 e4       	ldi	r27, 0x41	; 65
    1930:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__muluhisi3>
    1934:	6b 01       	movw	r12, r22
    1936:	7c 01       	movw	r14, r24
    1938:	ac ee       	ldi	r26, 0xEC	; 236
    193a:	b4 ef       	ldi	r27, 0xF4	; 244
    193c:	a5 01       	movw	r20, r10
    193e:	94 01       	movw	r18, r8
    1940:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulohisi3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8c 0d       	add	r24, r12
    194a:	9d 1d       	adc	r25, r13
    194c:	ae 1d       	adc	r26, r14
    194e:	bf 1d       	adc	r27, r15
    1950:	b7 ff       	sbrs	r27, 7
    1952:	03 c0       	rjmp	.+6      	; 0x195a <do_rand+0x72>
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	a1 09       	sbc	r26, r1
    1958:	b0 48       	sbci	r27, 0x80	; 128
    195a:	88 83       	st	Y, r24
    195c:	99 83       	std	Y+1, r25	; 0x01
    195e:	aa 83       	std	Y+2, r26	; 0x02
    1960:	bb 83       	std	Y+3, r27	; 0x03
    1962:	9f 77       	andi	r25, 0x7F	; 127
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	9f 90       	pop	r9
    1976:	8f 90       	pop	r8
    1978:	08 95       	ret

0000197a <rand_r>:
    197a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <do_rand>
    197e:	08 95       	ret

00001980 <rand>:
    1980:	87 e0       	ldi	r24, 0x07	; 7
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <do_rand>
    1988:	08 95       	ret

0000198a <srand>:
    198a:	a0 e0       	ldi	r26, 0x00	; 0
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	80 93 07 01 	sts	0x0107, r24
    1992:	90 93 08 01 	sts	0x0108, r25
    1996:	a0 93 09 01 	sts	0x0109, r26
    199a:	b0 93 0a 01 	sts	0x010A, r27
    199e:	08 95       	ret

000019a0 <eeprom_read_byte>:
    19a0:	f9 99       	sbic	0x1f, 1	; 31
    19a2:	fe cf       	rjmp	.-4      	; 0x19a0 <eeprom_read_byte>
    19a4:	92 bd       	out	0x22, r25	; 34
    19a6:	81 bd       	out	0x21, r24	; 33
    19a8:	f8 9a       	sbi	0x1f, 0	; 31
    19aa:	99 27       	eor	r25, r25
    19ac:	80 b5       	in	r24, 0x20	; 32
    19ae:	08 95       	ret

000019b0 <eeprom_write_byte>:
    19b0:	26 2f       	mov	r18, r22

000019b2 <eeprom_write_r18>:
    19b2:	f9 99       	sbic	0x1f, 1	; 31
    19b4:	fe cf       	rjmp	.-4      	; 0x19b2 <eeprom_write_r18>
    19b6:	1f ba       	out	0x1f, r1	; 31
    19b8:	92 bd       	out	0x22, r25	; 34
    19ba:	81 bd       	out	0x21, r24	; 33
    19bc:	20 bd       	out	0x20, r18	; 32
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	fa 9a       	sbi	0x1f, 2	; 31
    19c4:	f9 9a       	sbi	0x1f, 1	; 31
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	08 95       	ret

000019cc <__divmodsi4>:
    19cc:	05 2e       	mov	r0, r21
    19ce:	97 fb       	bst	r25, 7
    19d0:	1e f4       	brtc	.+6      	; 0x19d8 <__divmodsi4+0xc>
    19d2:	00 94       	com	r0
    19d4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__negsi2>
    19d8:	57 fd       	sbrc	r21, 7
    19da:	07 d0       	rcall	.+14     	; 0x19ea <__divmodsi4_neg2>
    19dc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__udivmodsi4>
    19e0:	07 fc       	sbrc	r0, 7
    19e2:	03 d0       	rcall	.+6      	; 0x19ea <__divmodsi4_neg2>
    19e4:	4e f4       	brtc	.+18     	; 0x19f8 <__divmodsi4_exit>
    19e6:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__negsi2>

000019ea <__divmodsi4_neg2>:
    19ea:	50 95       	com	r21
    19ec:	40 95       	com	r20
    19ee:	30 95       	com	r19
    19f0:	21 95       	neg	r18
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	4f 4f       	sbci	r20, 0xFF	; 255
    19f6:	5f 4f       	sbci	r21, 0xFF	; 255

000019f8 <__divmodsi4_exit>:
    19f8:	08 95       	ret

000019fa <__negsi2>:
    19fa:	90 95       	com	r25
    19fc:	80 95       	com	r24
    19fe:	70 95       	com	r23
    1a00:	61 95       	neg	r22
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	8f 4f       	sbci	r24, 0xFF	; 255
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	08 95       	ret

00001a0a <__muluhisi3>:
    1a0a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__umulhisi3>
    1a0e:	a5 9f       	mul	r26, r21
    1a10:	90 0d       	add	r25, r0
    1a12:	b4 9f       	mul	r27, r20
    1a14:	90 0d       	add	r25, r0
    1a16:	a4 9f       	mul	r26, r20
    1a18:	80 0d       	add	r24, r0
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	11 24       	eor	r1, r1
    1a1e:	08 95       	ret

00001a20 <__mulshisi3>:
    1a20:	b7 ff       	sbrs	r27, 7
    1a22:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__muluhisi3>

00001a26 <__mulohisi3>:
    1a26:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__muluhisi3>
    1a2a:	82 1b       	sub	r24, r18
    1a2c:	93 0b       	sbc	r25, r19
    1a2e:	08 95       	ret

00001a30 <__udivmodsi4>:
    1a30:	a1 e2       	ldi	r26, 0x21	; 33
    1a32:	1a 2e       	mov	r1, r26
    1a34:	aa 1b       	sub	r26, r26
    1a36:	bb 1b       	sub	r27, r27
    1a38:	fd 01       	movw	r30, r26
    1a3a:	0d c0       	rjmp	.+26     	; 0x1a56 <__udivmodsi4_ep>

00001a3c <__udivmodsi4_loop>:
    1a3c:	aa 1f       	adc	r26, r26
    1a3e:	bb 1f       	adc	r27, r27
    1a40:	ee 1f       	adc	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	a2 17       	cp	r26, r18
    1a46:	b3 07       	cpc	r27, r19
    1a48:	e4 07       	cpc	r30, r20
    1a4a:	f5 07       	cpc	r31, r21
    1a4c:	20 f0       	brcs	.+8      	; 0x1a56 <__udivmodsi4_ep>
    1a4e:	a2 1b       	sub	r26, r18
    1a50:	b3 0b       	sbc	r27, r19
    1a52:	e4 0b       	sbc	r30, r20
    1a54:	f5 0b       	sbc	r31, r21

00001a56 <__udivmodsi4_ep>:
    1a56:	66 1f       	adc	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	1a 94       	dec	r1
    1a60:	69 f7       	brne	.-38     	; 0x1a3c <__udivmodsi4_loop>
    1a62:	60 95       	com	r22
    1a64:	70 95       	com	r23
    1a66:	80 95       	com	r24
    1a68:	90 95       	com	r25
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	bd 01       	movw	r22, r26
    1a70:	cf 01       	movw	r24, r30
    1a72:	08 95       	ret

00001a74 <_exit>:
    1a74:	f8 94       	cli

00001a76 <__stop_program>:
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <__stop_program>
