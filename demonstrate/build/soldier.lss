
build/soldier.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	68 02       	muls	r22, r24
      6a:	e4 02       	muls	r30, r20
      6c:	3c 02       	muls	r19, r28
      6e:	33 02       	muls	r19, r19
      70:	39 02       	muls	r19, r25
      72:	c6 02       	muls	r28, r22
      74:	bb 02       	muls	r27, r27
      76:	46 09       	sbc	r20, r6
      78:	23 08       	sbc	r2, r3
      7a:	23 08       	sbc	r2, r3
      7c:	43 09       	sbc	r20, r3
      7e:	4f 09       	sbc	r20, r15
      80:	3f 09       	sbc	r19, r15
      82:	56 09       	sbc	r21, r6
      84:	52 09       	sbc	r21, r2
      86:	5a 09       	sbc	r21, r10
      88:	12 09       	sbc	r17, r2
      8a:	e4 08       	sbc	r14, r4

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e6       	ldi	r30, 0x64	; 100
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a6 37       	cpi	r26, 0x76	; 118
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <main>
      da:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
    }
}


void setup()
{
      e2:	08 95       	ret

000000e4 <message_rx>:
}

void message_rx(message_t *message, distance_measurement_t *distance_measurement)
{
    // Set flag on message reception.
    new_message = 1;
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	30 93 13 01 	sts	0x0113, r19
      ec:	20 93 12 01 	sts	0x0112, r18
    
    order = message->data[0];
      f0:	fc 01       	movw	r30, r24
      f2:	80 81       	ld	r24, Z
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 0f 01 	sts	0x010F, r25
      fa:	80 93 0e 01 	sts	0x010E, r24
      fe:	08 95       	ret

00000100 <loop>:
void setup()
{
}

void loop()
{
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
    if (new_message == 1)
     104:	c0 91 12 01 	lds	r28, 0x0112
     108:	d0 91 13 01 	lds	r29, 0x0113
     10c:	c1 30       	cpi	r28, 0x01	; 1
     10e:	d1 05       	cpc	r29, r1
     110:	19 f0       	breq	.+6      	; 0x118 <loop+0x18>
        }
        // Wherever you are: set LED off after 100 ms to achieve blink effect.
        delay(100);
        set_color(RGB(0, 0, 0));
    }
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

void loop()
{
    if (new_message == 1)
    {
        new_message = 0;
     118:	10 92 13 01 	sts	0x0113, r1
     11c:	10 92 12 01 	sts	0x0112, r1
        

        if (order == 0)
     120:	80 91 0e 01 	lds	r24, 0x010E
     124:	90 91 0f 01 	lds	r25, 0x010F
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	71 f0       	breq	.+28     	; 0x148 <loop+0x48>
        {
            set_color(RGB(1, 0, 0));
            set_motion(LEFT);

        }
        else if(order == 1)
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	91 05       	cpc	r25, r1
     130:	c1 f1       	breq	.+112    	; 0x1a2 <loop+0xa2>
        {
            set_color(RGB(0, 0, 1));
            set_motion(RIGHT);
        }
        else if(order == 2)
     132:	02 97       	sbiw	r24, 0x02	; 2
     134:	01 f1       	breq	.+64     	; 0x176 <loop+0x76>
        {
            set_color(RGB(0, 1, 0));
            set_motion(FORWARD);
        }
        // Wherever you are: set LED off after 100 ms to achieve blink effect.
        delay(100);
     136:	84 e6       	ldi	r24, 0x64	; 100
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <delay>
        set_color(RGB(0, 0, 0));
     13e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
            set_color(RGB(0, 1, 0));
            set_motion(FORWARD);
        }
        // Wherever you are: set LED off after 100 ms to achieve blink effect.
        delay(100);
        set_color(RGB(0, 0, 0));
     144:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <set_color>
        new_message = 0;
        

        if (order == 0)
        {
            set_color(RGB(1, 0, 0));
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     14e:	80 91 0c 01 	lds	r24, 0x010C
     152:	90 91 0d 01 	lds	r25, 0x010D
     156:	02 97       	sbiw	r24, 0x02	; 2
     158:	71 f3       	breq	.-36     	; 0x136 <loop+0x36>
    {
        current_motion = new_motion;
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	90 93 0d 01 	sts	0x010D, r25
     162:	80 93 0c 01 	sts	0x010C, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     166:	0e 94 81 03 	call	0x702	; 0x702 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	80 91 75 01 	lds	r24, 0x0175
     170:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <set_motors>
     174:	e0 cf       	rjmp	.-64     	; 0x136 <loop+0x36>
            set_color(RGB(0, 0, 1));
            set_motion(RIGHT);
        }
        else if(order == 2)
        {
            set_color(RGB(0, 1, 0));
     176:	84 e0       	ldi	r24, 0x04	; 4
     178:	0e 94 9d 07 	call	0xf3a	; 0xf3a <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     17c:	80 91 0c 01 	lds	r24, 0x010C
     180:	90 91 0d 01 	lds	r25, 0x010D
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	b9 f2       	breq	.-82     	; 0x136 <loop+0x36>
    {
        current_motion = new_motion;
     188:	d0 93 0d 01 	sts	0x010D, r29
     18c:	c0 93 0c 01 	sts	0x010C, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     190:	0e 94 81 03 	call	0x702	; 0x702 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     194:	60 91 74 01 	lds	r22, 0x0174
     198:	80 91 73 01 	lds	r24, 0x0173
     19c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <set_motors>
     1a0:	ca cf       	rjmp	.-108    	; 0x136 <loop+0x36>
            set_motion(LEFT);

        }
        else if(order == 1)
        {
            set_color(RGB(0, 0, 1));
     1a2:	80 e1       	ldi	r24, 0x10	; 16
     1a4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1a8:	80 91 0c 01 	lds	r24, 0x010C
     1ac:	90 91 0d 01 	lds	r25, 0x010D
     1b0:	03 97       	sbiw	r24, 0x03	; 3
     1b2:	09 f2       	breq	.-126    	; 0x136 <loop+0x36>
    {
        current_motion = new_motion;
     1b4:	83 e0       	ldi	r24, 0x03	; 3
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	90 93 0d 01 	sts	0x010D, r25
     1bc:	80 93 0c 01 	sts	0x010C, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     1c0:	0e 94 81 03 	call	0x702	; 0x702 <spinup_motors>
            set_motors(0, kilo_turn_right);
     1c4:	60 91 61 01 	lds	r22, 0x0161
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <set_motors>
     1ce:	b3 cf       	rjmp	.-154    	; 0x136 <loop+0x36>

000001d0 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1d0:	20 91 0c 01 	lds	r18, 0x010C
     1d4:	30 91 0d 01 	lds	r19, 0x010D
     1d8:	28 17       	cp	r18, r24
     1da:	39 07       	cpc	r19, r25
     1dc:	71 f0       	breq	.+28     	; 0x1fa <set_motion+0x2a>
    {
        current_motion = new_motion;
     1de:	90 93 0d 01 	sts	0x010D, r25
     1e2:	80 93 0c 01 	sts	0x010C, r24
        
        if (current_motion == STOP)
     1e6:	00 97       	sbiw	r24, 0x00	; 0
     1e8:	81 f0       	breq	.+32     	; 0x20a <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	91 05       	cpc	r25, r1
     1ee:	89 f0       	breq	.+34     	; 0x212 <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	91 05       	cpc	r25, r1
     1f4:	b1 f0       	breq	.+44     	; 0x222 <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     1f6:	03 97       	sbiw	r24, 0x03	; 3
     1f8:	09 f0       	breq	.+2      	; 0x1fc <set_motion+0x2c>
     1fa:	08 95       	ret
        {
            spinup_motors();
     1fc:	0e 94 81 03 	call	0x702	; 0x702 <spinup_motors>
            set_motors(0, kilo_turn_right);
     200:	60 91 61 01 	lds	r22, 0x0161
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     212:	0e 94 81 03 	call	0x702	; 0x702 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     216:	60 91 74 01 	lds	r22, 0x0174
     21a:	80 91 73 01 	lds	r24, 0x0173
     21e:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     222:	0e 94 81 03 	call	0x702	; 0x702 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	80 91 75 01 	lds	r24, 0x0175
     22c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <set_motors>

00000230 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     230:	08 95       	ret

00000232 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	08 95       	ret

00000238 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     238:	08 95       	ret

0000023a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     23a:	df 92       	push	r13
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
    cli();
     248:	f8 94       	cli

    ports_off();
     24a:	14 b8       	out	0x04, r1	; 4
     24c:	17 b8       	out	0x07, r1	; 7
     24e:	1a b8       	out	0x0a, r1	; 10
     250:	15 b8       	out	0x05, r1	; 5
     252:	18 b8       	out	0x08, r1	; 8
     254:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     256:	52 9a       	sbi	0x0a, 2	; 10
     258:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     25a:	14 bc       	out	0x24, r1	; 36
     25c:	85 e0       	ldi	r24, 0x05	; 5
     25e:	85 bd       	out	0x25, r24	; 37
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	87 bd       	out	0x27, r24	; 39
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     26a:	10 92 80 00 	sts	0x0080, r1
     26e:	10 92 81 00 	sts	0x0081, r1
     272:	2f e8       	ldi	r18, 0x8F	; 143
     274:	3b e0       	ldi	r19, 0x0B	; 11
     276:	30 93 89 00 	sts	0x0089, r19
     27a:	20 93 88 00 	sts	0x0088, r18
     27e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     282:	53 98       	cbi	0x0a, 3	; 10
     284:	23 98       	cbi	0x04, 3	; 4
     286:	91 ea       	ldi	r25, 0xA1	; 161
     288:	90 93 b0 00 	sts	0x00B0, r25
     28c:	80 93 b1 00 	sts	0x00B1, r24
     290:	10 92 b4 00 	sts	0x00B4, r1
     294:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     298:	8b e0       	ldi	r24, 0x0B	; 11
     29a:	80 bf       	out	0x30, r24	; 48
     29c:	83 e0       	ldi	r24, 0x03	; 3
     29e:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     2a2:	86 e0       	ldi	r24, 0x06	; 6
     2a4:	80 93 7c 00 	sts	0x007C, r24
     2a8:	83 e8       	ldi	r24, 0x83	; 131
     2aa:	80 93 7a 00 	sts	0x007A, r24
     2ae:	80 91 7a 00 	lds	r24, 0x007A
     2b2:	80 64       	ori	r24, 0x40	; 64
     2b4:	80 93 7a 00 	sts	0x007A, r24
     2b8:	80 91 7a 00 	lds	r24, 0x007A
     2bc:	86 fd       	sbrc	r24, 6
     2be:	fc cf       	rjmp	.-8      	; 0x2b8 <kilo_init+0x7e>
    adc_trigger_high_gain();
     2c0:	10 92 7c 00 	sts	0x007C, r1
     2c4:	83 ea       	ldi	r24, 0xA3	; 163
     2c6:	80 93 7a 00 	sts	0x007A, r24
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
    if (osccal != 0xFF)
     2d8:	8f 3f       	cpi	r24, 0xFF	; 255
     2da:	11 f0       	breq	.+4      	; 0x2e0 <kilo_init+0xa6>
        OSCCAL = osccal;
     2dc:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     2e0:	10 92 3f 01 	sts	0x013F, r1
    rx_leadingbit = 1;
     2e4:	c1 e0       	ldi	r28, 0x01	; 1
     2e6:	c0 93 18 01 	sts	0x0118, r28
    rx_leadingbyte = 1;
     2ea:	c0 93 5c 01 	sts	0x015C, r28
    rx_byteindex = 0;
     2ee:	10 92 36 01 	sts	0x0136, r1
    rx_bytevalue = 0;
     2f2:	10 92 70 01 	sts	0x0170, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2f6:	80 e9       	ldi	r24, 0x90	; 144
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     2fe:	80 93 35 01 	sts	0x0135, r24
    if (tx_mask & ~TX_MASK_MAX)
     302:	80 91 35 01 	lds	r24, 0x0135
     306:	88 73       	andi	r24, 0x38	; 56
     308:	11 f0       	breq	.+4      	; 0x30e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     30a:	c0 93 35 01 	sts	0x0135, r28
    tx_clock = 0;
     30e:	10 92 60 01 	sts	0x0160, r1
     312:	10 92 5f 01 	sts	0x015F, r1
    tx_increment = 255;
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 5e 01 	sts	0x015E, r25
     31e:	80 93 5d 01 	sts	0x015D, r24
    kilo_ticks = 0;
     322:	10 92 3b 01 	sts	0x013B, r1
     326:	10 92 3c 01 	sts	0x013C, r1
     32a:	10 92 3d 01 	sts	0x013D, r1
     32e:	10 92 3e 01 	sts	0x013E, r1
    kilo_state = IDLE;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     338:	82 e4       	ldi	r24, 0x42	; 66
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	90 93 6f 01 	sts	0x016F, r25
     340:	80 93 6e 01 	sts	0x016E, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     344:	80 eb       	ldi	r24, 0xB0	; 176
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     34c:	c8 2f       	mov	r28, r24
     34e:	81 eb       	ldi	r24, 0xB1	; 177
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     356:	2c 2f       	mov	r18, r28
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	38 2b       	or	r19, r24
     35c:	30 93 72 01 	sts	0x0172, r19
     360:	20 93 71 01 	sts	0x0171, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     364:	85 e0       	ldi	r24, 0x05	; 5
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     36c:	80 93 75 01 	sts	0x0175, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     370:	89 e0       	ldi	r24, 0x09	; 9
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     378:	80 93 61 01 	sts	0x0161, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     37c:	8c e0       	ldi	r24, 0x0C	; 12
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     384:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     388:	84 e1       	ldi	r24, 0x14	; 20
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     390:	80 93 74 01 	sts	0x0174, r24
     394:	50 e4       	ldi	r21, 0x40	; 64
     396:	e5 2e       	mov	r14, r21
     398:	51 e0       	ldi	r21, 0x01	; 1
     39a:	f5 2e       	mov	r15, r21
     39c:	09 e1       	ldi	r16, 0x19	; 25
     39e:	11 e0       	ldi	r17, 0x01	; 1
     3a0:	c0 e2       	ldi	r28, 0x20	; 32
     3a2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     3a4:	ce 01       	movw	r24, r28
     3a6:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     3aa:	d8 2e       	mov	r13, r24
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     3b4:	2d 2d       	mov	r18, r13
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	32 2f       	mov	r19, r18
     3ba:	22 27       	eor	r18, r18
     3bc:	28 2b       	or	r18, r24
     3be:	f7 01       	movw	r30, r14
     3c0:	21 93       	st	Z+, r18
     3c2:	31 93       	st	Z+, r19
     3c4:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     3c6:	ce 01       	movw	r24, r28
     3c8:	c0 96       	adiw	r24, 0x30	; 48
     3ca:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     3ce:	d8 2e       	mov	r13, r24
     3d0:	ce 01       	movw	r24, r28
     3d2:	c1 96       	adiw	r24, 0x31	; 49
     3d4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_read_byte>
     3d8:	2d 2d       	mov	r18, r13
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	32 2f       	mov	r19, r18
     3de:	22 27       	eor	r18, r18
     3e0:	28 2b       	or	r18, r24
     3e2:	f8 01       	movw	r30, r16
     3e4:	21 93       	st	Z+, r18
     3e6:	31 93       	st	Z+, r19
     3e8:	8f 01       	movw	r16, r30
     3ea:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3ec:	cc 33       	cpi	r28, 0x3C	; 60
     3ee:	d1 05       	cpc	r29, r1
     3f0:	c9 f6       	brne	.-78     	; 0x3a4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3f2:	78 94       	sei
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	df 90       	pop	r13
     402:	08 95       	ret

00000404 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	8f 93       	push	r24
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	a8 95       	wdr
     416:	80 91 60 00 	lds	r24, 0x0060
     41a:	88 61       	ori	r24, 0x18	; 24
     41c:	80 93 60 00 	sts	0x0060, r24
     420:	10 92 60 00 	sts	0x0060, r1
     424:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     426:	8f 91       	pop	r24
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0
     42e:	1f 90       	pop	r1
     430:	18 95       	reti

00000432 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     432:	3c 01       	movw	r6, r24
     434:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     436:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     438:	99 24       	eor	r9, r9
     43a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     43c:	84 e0       	ldi	r24, 0x04	; 4
     43e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     440:	96 e0       	ldi	r25, 0x06	; 6
     442:	a9 2e       	mov	r10, r25
     444:	23 e8       	ldi	r18, 0x83	; 131
     446:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     448:	38 e1       	ldi	r19, 0x18	; 24
     44a:	d3 2e       	mov	r13, r19
     44c:	49 e2       	ldi	r20, 0x29	; 41
     44e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     450:	90 91 17 01 	lds	r25, 0x0117
     454:	e9 2f       	mov	r30, r25
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	e7 30       	cpi	r30, 0x07	; 7
     45a:	f1 05       	cpc	r31, r1
     45c:	c8 f7       	brcc	.-14     	; 0x450 <kilo_start+0x1e>
     45e:	ec 5c       	subi	r30, 0xCC	; 204
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     466:	11 23       	and	r17, r17
     468:	09 f4       	brne	.+2      	; 0x46c <kilo_start+0x3a>
     46a:	fc c0       	rjmp	.+504    	; 0x664 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     46c:	c0 92 17 01 	sts	0x0117, r12
     470:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     472:	fe 01       	movw	r30, r28
     474:	09 95       	icall
                break;
     476:	ec cf       	rjmp	.-40     	; 0x450 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     478:	80 91 3f 01 	lds	r24, 0x013F
     47c:	81 11       	cpse	r24, r1
     47e:	eb c0       	rjmp	.+470    	; 0x656 <kilo_start+0x224>
        cli();                                    // disable interrupts
     480:	f8 94       	cli
        adc_setup_conversion(6);
     482:	a0 92 7c 00 	sts	0x007C, r10
     486:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     48a:	80 91 7a 00 	lds	r24, 0x007A
     48e:	80 64       	ori	r24, 0x40	; 64
     490:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     494:	90 91 7a 00 	lds	r25, 0x007A
     498:	96 fd       	sbrc	r25, 6
     49a:	fc cf       	rjmp	.-8      	; 0x494 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     49c:	80 91 78 00 	lds	r24, 0x0078
     4a0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     4a4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     4a6:	8b 3a       	cpi	r24, 0xAB	; 171
     4a8:	e2 e0       	ldi	r30, 0x02	; 2
     4aa:	9e 07       	cpc	r25, r30
     4ac:	0c f0       	brlt	.+2      	; 0x4b0 <kilo_start+0x7e>
     4ae:	ed c0       	rjmp	.+474    	; 0x68a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     4b0:	89 38       	cpi	r24, 0x89	; 137
     4b2:	f2 e0       	ldi	r31, 0x02	; 2
     4b4:	9f 07       	cpc	r25, r31
     4b6:	0c f0       	brlt	.+2      	; 0x4ba <kilo_start+0x88>
     4b8:	ef c0       	rjmp	.+478    	; 0x698 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     4ba:	87 36       	cpi	r24, 0x67	; 103
     4bc:	92 40       	sbci	r25, 0x02	; 2
     4be:	0c f4       	brge	.+2      	; 0x4c2 <kilo_start+0x90>
     4c0:	ca c0       	rjmp	.+404    	; 0x656 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4c2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4c4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4c6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4c8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4ca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4cc:	3c 98       	cbi	0x07, 4	; 7
     4ce:	c0 cf       	rjmp	.-128    	; 0x450 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     4d0:	f8 94       	cli
                acomp_off();
     4d2:	80 b7       	in	r24, 0x30	; 48
     4d4:	87 7f       	andi	r24, 0xF7	; 247
     4d6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     4d8:	80 91 7a 00 	lds	r24, 0x007A
     4dc:	8f 77       	andi	r24, 0x7F	; 127
     4de:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     4e2:	14 b8       	out	0x04, r1	; 4
     4e4:	17 b8       	out	0x07, r1	; 7
     4e6:	1a b8       	out	0x0a, r1	; 10
     4e8:	15 b8       	out	0x05, r1	; 5
     4ea:	18 b8       	out	0x08, r1	; 8
     4ec:	1b b8       	out	0x0b, r1	; 11
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	a8 95       	wdr
     4f4:	d0 92 60 00 	sts	0x0060, r13
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4fe:	80 91 60 00 	lds	r24, 0x0060
     502:	80 64       	ori	r24, 0x40	; 64
     504:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     508:	93 b7       	in	r25, 0x33	; 51
     50a:	91 7f       	andi	r25, 0xF1	; 241
     50c:	94 60       	ori	r25, 0x04	; 4
     50e:	93 bf       	out	0x33, r25	; 51
                cli();
     510:	f8 94       	cli
                sleep_enable();
     512:	83 b7       	in	r24, 0x33	; 51
     514:	81 60       	ori	r24, 0x01	; 1
     516:	83 bf       	out	0x33, r24	; 51
                sei();
     518:	78 94       	sei
                sleep_cpu();
     51a:	88 95       	sleep
                sleep_disable();
     51c:	83 b7       	in	r24, 0x33	; 51
     51e:	8e 7f       	andi	r24, 0xFE	; 254
     520:	83 bf       	out	0x33, r24	; 51
                sei();
     522:	78 94       	sei
                rx_busy = 0;
     524:	10 92 3f 01 	sts	0x013F, r1
                ports_on();
     528:	52 9a       	sbi	0x0a, 2	; 10
     52a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     52c:	80 91 7a 00 	lds	r24, 0x007A
     530:	80 68       	ori	r24, 0x80	; 128
     532:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     536:	87 e5       	ldi	r24, 0x57	; 87
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <kilo_start+0x108>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <kilo_start+0x10e>
     540:	00 00       	nop
                _delay_us(300);
                acomp_on();
     542:	80 b7       	in	r24, 0x30	; 48
     544:	88 61       	ori	r24, 0x18	; 24
     546:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     548:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     54a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     54c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     54e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     550:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     552:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     554:	ef e1       	ldi	r30, 0x1F	; 31
     556:	fe e4       	ldi	r31, 0x4E	; 78
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <kilo_start+0x126>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <kilo_start+0x12c>
     55e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     560:	80 91 3f 01 	lds	r24, 0x013F
     564:	81 11       	cpse	r24, r1
     566:	81 c0       	rjmp	.+258    	; 0x66a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     568:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     56a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     56c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     56e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     570:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     572:	3c 98       	cbi	0x07, 4	; 7
     574:	6d cf       	rjmp	.-294    	; 0x450 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     576:	80 91 15 01 	lds	r24, 0x0115
     57a:	81 11       	cpse	r24, r1
     57c:	41 c0       	rjmp	.+130    	; 0x600 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     57e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     582:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     586:	10 92 16 01 	sts	0x0116, r1
     58a:	62 cf       	rjmp	.-316    	; 0x450 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     58c:	48 99       	sbic	0x09, 0	; 9
     58e:	ec cf       	rjmp	.-40     	; 0x568 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     590:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     592:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     594:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     596:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     598:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     59a:	3c 98       	cbi	0x07, 4	; 7
     59c:	8f ec       	ldi	r24, 0xCF	; 207
     59e:	97 e0       	ldi	r25, 0x07	; 7
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <kilo_start+0x16e>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <kilo_start+0x174>
     5a6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5aa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5ac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5ae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5b0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5b2:	3c 98       	cbi	0x07, 4	; 7
     5b4:	9f ef       	ldi	r25, 0xFF	; 255
     5b6:	e1 ee       	ldi	r30, 0xE1	; 225
     5b8:	f4 e0       	ldi	r31, 0x04	; 4
     5ba:	91 50       	subi	r25, 0x01	; 1
     5bc:	e0 40       	sbci	r30, 0x00	; 0
     5be:	f0 40       	sbci	r31, 0x00	; 0
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <kilo_start+0x188>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <kilo_start+0x192>
     5c4:	00 00       	nop
     5c6:	44 cf       	rjmp	.-376    	; 0x450 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5c8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5ca:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5cc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5ce:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5d0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5d2:	3c 98       	cbi	0x07, 4	; 7
     5d4:	ef ec       	ldi	r30, 0xCF	; 207
     5d6:	f7 e0       	ldi	r31, 0x07	; 7
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <kilo_start+0x1a6>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <kilo_start+0x1ac>
     5de:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5e0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5e2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5e4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5e6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5e8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5ea:	3c 98       	cbi	0x07, 4	; 7
     5ec:	ff ef       	ldi	r31, 0xFF	; 255
     5ee:	21 ee       	ldi	r18, 0xE1	; 225
     5f0:	84 e0       	ldi	r24, 0x04	; 4
     5f2:	f1 50       	subi	r31, 0x01	; 1
     5f4:	20 40       	sbci	r18, 0x00	; 0
     5f6:	80 40       	sbci	r24, 0x00	; 0
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <kilo_start+0x1c0>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <kilo_start+0x1ca>
     5fc:	00 00       	nop
     5fe:	28 cf       	rjmp	.-432    	; 0x450 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     600:	90 91 15 01 	lds	r25, 0x0115
     604:	80 91 16 01 	lds	r24, 0x0116
     608:	98 17       	cp	r25, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <kilo_start+0x1dc>
     60c:	21 cf       	rjmp	.-446    	; 0x450 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     60e:	80 91 15 01 	lds	r24, 0x0115
     612:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     616:	80 91 15 01 	lds	r24, 0x0115
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	09 f4       	brne	.+2      	; 0x620 <kilo_start+0x1ee>
     61e:	50 c0       	rjmp	.+160    	; 0x6c0 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     620:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     624:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     628:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     62c:	82 30       	cpi	r24, 0x02	; 2
     62e:	d9 f1       	breq	.+118    	; 0x6a6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     630:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     634:	90 92 b4 00 	sts	0x00B4, r9
     638:	8f e2       	ldi	r24, 0x2F	; 47
     63a:	95 e7       	ldi	r25, 0x75	; 117
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <kilo_start+0x20a>
     640:	00 c0       	rjmp	.+0      	; 0x642 <kilo_start+0x210>
     642:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     644:	80 91 74 01 	lds	r24, 0x0174
     648:	90 91 73 01 	lds	r25, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     64c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     650:	80 93 b4 00 	sts	0x00B4, r24
     654:	fd ce       	rjmp	.-518    	; 0x450 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     656:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     658:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     65a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     65c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     65e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     660:	3c 98       	cbi	0x07, 4	; 7
     662:	f6 ce       	rjmp	.-532    	; 0x450 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     664:	f3 01       	movw	r30, r6
     666:	09 95       	icall
     668:	01 cf       	rjmp	.-510    	; 0x46c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     66a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     66c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     66e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     670:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     672:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     674:	3c 98       	cbi	0x07, 4	; 7
     676:	ff ef       	ldi	r31, 0xFF	; 255
     678:	20 e7       	ldi	r18, 0x70	; 112
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	f1 50       	subi	r31, 0x01	; 1
     67e:	20 40       	sbci	r18, 0x00	; 0
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <kilo_start+0x24a>
     684:	00 c0       	rjmp	.+0      	; 0x686 <kilo_start+0x254>
     686:	00 00       	nop
     688:	6f cf       	rjmp	.-290    	; 0x568 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     68a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     68c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     68e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     690:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     692:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     694:	3c 98       	cbi	0x07, 4	; 7
     696:	dc ce       	rjmp	.-584    	; 0x450 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     698:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     69a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     69c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     69e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     6a0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     6a2:	3c 9a       	sbi	0x07, 4	; 7
     6a4:	d5 ce       	rjmp	.-598    	; 0x450 <kilo_start+0x1e>
     6a6:	ef e2       	ldi	r30, 0x2F	; 47
     6a8:	f5 e7       	ldi	r31, 0x75	; 117
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <kilo_start+0x278>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <kilo_start+0x27e>
     6b0:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     6b2:	80 91 61 01 	lds	r24, 0x0161
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6b6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6ba:	80 93 b4 00 	sts	0x00B4, r24
     6be:	c8 ce       	rjmp	.-624    	; 0x450 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6c0:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     6c4:	10 92 b4 00 	sts	0x00B4, r1
     6c8:	8f e2       	ldi	r24, 0x2F	; 47
     6ca:	95 e7       	ldi	r25, 0x75	; 117
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <kilo_start+0x29a>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <kilo_start+0x2a0>
     6d2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     6d4:	80 91 75 01 	lds	r24, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6d8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6dc:	10 92 b4 00 	sts	0x00B4, r1
     6e0:	b7 ce       	rjmp	.-658    	; 0x450 <kilo_start+0x1e>

000006e2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <delay+0x10>
     6e4:	ef ec       	ldi	r30, 0xCF	; 207
     6e6:	f7 e0       	ldi	r31, 0x07	; 7
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <delay+0x6>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <delay+0xc>
     6ee:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     6f0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	b9 f7       	brne	.-18     	; 0x6e4 <delay+0x2>
     6f6:	08 95       	ret

000006f8 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6f8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6fc:	60 93 b4 00 	sts	0x00B4, r22
     700:	08 95       	ret

00000702 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     708:	80 93 b4 00 	sts	0x00B4, r24
     70c:	8f e0       	ldi	r24, 0x0F	; 15
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	ef ec       	ldi	r30, 0xCF	; 207
     712:	f7 e0       	ldi	r31, 0x07	; 7
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <spinup_motors+0x12>
     718:	00 c0       	rjmp	.+0      	; 0x71a <spinup_motors+0x18>
     71a:	00 00       	nop
     71c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     71e:	c1 f7       	brne	.-16     	; 0x710 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     720:	08 95       	ret

00000722 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     722:	80 91 3f 01 	lds	r24, 0x013F
     726:	81 11       	cpse	r24, r1
     728:	1e c0       	rjmp	.+60     	; 0x766 <get_ambientlight+0x44>
        cli();
     72a:	f8 94       	cli
        adc_setup_conversion(7);
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	80 93 7c 00 	sts	0x007C, r24
     732:	83 e8       	ldi	r24, 0x83	; 131
     734:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     738:	80 91 7a 00 	lds	r24, 0x007A
     73c:	80 64       	ori	r24, 0x40	; 64
     73e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     742:	80 91 7a 00 	lds	r24, 0x007A
     746:	86 fd       	sbrc	r24, 6
     748:	fc cf       	rjmp	.-8      	; 0x742 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     74a:	80 91 78 00 	lds	r24, 0x0078
     74e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     752:	10 92 7c 00 	sts	0x007C, r1
     756:	23 ea       	ldi	r18, 0xA3	; 163
     758:	20 93 7a 00 	sts	0x007A, r18
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     762:	78 94       	sei
     764:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     76a:	08 95       	ret

0000076c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     76c:	80 91 3f 01 	lds	r24, 0x013F
     770:	81 11       	cpse	r24, r1
     772:	1e c0       	rjmp	.+60     	; 0x7b0 <get_temperature+0x44>
        cli();
     774:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     776:	88 ec       	ldi	r24, 0xC8	; 200
     778:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     77c:	87 e8       	ldi	r24, 0x87	; 135
     77e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     782:	80 91 7a 00 	lds	r24, 0x007A
     786:	80 64       	ori	r24, 0x40	; 64
     788:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     78c:	80 91 7a 00 	lds	r24, 0x007A
     790:	86 fd       	sbrc	r24, 6
     792:	fc cf       	rjmp	.-8      	; 0x78c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     794:	80 91 78 00 	lds	r24, 0x0078
     798:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     79c:	10 92 7c 00 	sts	0x007C, r1
     7a0:	23 ea       	ldi	r18, 0xA3	; 163
     7a2:	20 93 7a 00 	sts	0x007A, r18
     7a6:	21 e0       	ldi	r18, 0x01	; 1
     7a8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     7ac:	78 94       	sei
     7ae:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     7b4:	08 95       	ret

000007b6 <rand_hard>:

uint8_t rand_hard() {
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	e0 e0       	ldi	r30, 0x00	; 0
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     7c4:	03 ea       	ldi	r16, 0xA3	; 163
     7c6:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     7c8:	d6 e0       	ldi	r29, 0x06	; 6
     7ca:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     7cc:	a1 e0       	ldi	r26, 0x01	; 1
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     7d0:	60 e8       	ldi	r22, 0x80	; 128
     7d2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     7d4:	f8 94       	cli
            adc_setup_conversion(6);
     7d6:	d0 93 7c 00 	sts	0x007C, r29
     7da:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     7de:	90 91 7a 00 	lds	r25, 0x007A
     7e2:	90 64       	ori	r25, 0x40	; 64
     7e4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7e8:	90 91 7a 00 	lds	r25, 0x007A
     7ec:	96 fd       	sbrc	r25, 6
     7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <rand_hard+0x32>
            a = ADCW&0x1;
     7f0:	20 91 78 00 	lds	r18, 0x0078
     7f4:	30 91 79 00 	lds	r19, 0x0079
     7f8:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     7fa:	90 91 7a 00 	lds	r25, 0x007A
     7fe:	90 64       	ori	r25, 0x40	; 64
     800:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     804:	90 91 7a 00 	lds	r25, 0x007A
     808:	96 fd       	sbrc	r25, 6
     80a:	fc cf       	rjmp	.-8      	; 0x804 <rand_hard+0x4e>
            b = ADCW&0x1;
     80c:	40 91 78 00 	lds	r20, 0x0078
     810:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     814:	10 92 7c 00 	sts	0x007C, r1
     818:	00 93 7a 00 	sts	0x007A, r16
     81c:	10 93 7b 00 	sts	0x007B, r17
            sei();
     820:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     822:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     824:	24 13       	cpse	r18, r20
     826:	03 c0       	rjmp	.+6      	; 0x82e <rand_hard+0x78>
     828:	61 50       	subi	r22, 0x01	; 1
     82a:	71 09       	sbc	r23, r1
     82c:	99 f6       	brne	.-90     	; 0x7d4 <rand_hard+0x1e>
        if (a)
     82e:	22 23       	and	r18, r18
     830:	39 f0       	breq	.+14     	; 0x840 <rand_hard+0x8a>
            num |= (1<<i);
     832:	9d 01       	movw	r18, r26
     834:	0e 2e       	mov	r0, r30
     836:	01 c0       	rjmp	.+2      	; 0x83a <rand_hard+0x84>
     838:	22 0f       	add	r18, r18
     83a:	0a 94       	dec	r0
     83c:	ea f7       	brpl	.-6      	; 0x838 <rand_hard+0x82>
     83e:	82 2b       	or	r24, r18
     840:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     842:	e8 30       	cpi	r30, 0x08	; 8
     844:	f1 05       	cpc	r31, r1
     846:	09 f0       	breq	.+2      	; 0x84a <rand_hard+0x94>
     848:	c3 cf       	rjmp	.-122    	; 0x7d0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	08 95       	ret

00000854 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     854:	80 91 00 01 	lds	r24, 0x0100
     858:	98 2f       	mov	r25, r24
     85a:	99 0f       	add	r25, r25
     85c:	99 0f       	add	r25, r25
     85e:	99 0f       	add	r25, r25
     860:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     862:	90 91 14 01 	lds	r25, 0x0114
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	29 0f       	add	r18, r25
     86a:	20 93 14 01 	sts	0x0114, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     86e:	28 2f       	mov	r18, r24
     870:	22 95       	swap	r18
     872:	26 95       	lsr	r18
     874:	27 70       	andi	r18, 0x07	; 7
     876:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     878:	96 95       	lsr	r25
     87a:	96 95       	lsr	r25
     87c:	89 27       	eor	r24, r25
     87e:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     882:	08 95       	ret

00000884 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     884:	80 93 00 01 	sts	0x0100, r24
     888:	08 95       	ret

0000088a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     88a:	80 91 3f 01 	lds	r24, 0x013F
     88e:	81 11       	cpse	r24, r1
     890:	16 c0       	rjmp	.+44     	; 0x8be <get_voltage+0x34>
        cli();                                    // disable interrupts
     892:	f8 94       	cli
        adc_setup_conversion(6);
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	80 93 7c 00 	sts	0x007C, r24
     89a:	83 e8       	ldi	r24, 0x83	; 131
     89c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8a0:	80 91 7a 00 	lds	r24, 0x007A
     8a4:	80 64       	ori	r24, 0x40	; 64
     8a6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8aa:	80 91 7a 00 	lds	r24, 0x007A
     8ae:	86 fd       	sbrc	r24, 6
     8b0:	fc cf       	rjmp	.-8      	; 0x8aa <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     8b2:	80 91 78 00 	lds	r24, 0x0078
     8b6:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     8ba:	78 94       	sei
     8bc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     8c2:	08 95       	ret

000008c4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     8c4:	2f 92       	push	r2
     8c6:	3f 92       	push	r3
     8c8:	4f 92       	push	r4
     8ca:	5f 92       	push	r5
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <estimate_distance+0x26>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <estimate_distance+0x28>
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <estimate_distance+0x2a>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     8f4:	dc 01       	movw	r26, r24
     8f6:	12 96       	adiw	r26, 0x02	; 2
     8f8:	0d 90       	ld	r0, X+
     8fa:	bc 91       	ld	r27, X
     8fc:	a0 2d       	mov	r26, r0
     8fe:	be 83       	std	Y+6, r27	; 0x06
     900:	ad 83       	std	Y+5, r26	; 0x05
     902:	a4 38       	cpi	r26, 0x84	; 132
     904:	e3 e0       	ldi	r30, 0x03	; 3
     906:	be 07       	cpc	r27, r30
     908:	0c f0       	brlt	.+2      	; 0x90c <__stack+0xd>
     90a:	c9 c0       	rjmp	.+402    	; 0xa9e <__stack+0x19f>
        if (dist->high_gain > kilo_irhigh[0]) {
     90c:	80 91 19 01 	lds	r24, 0x0119
     910:	90 91 1a 01 	lds	r25, 0x011A
     914:	8a 17       	cp	r24, r26
     916:	9b 07       	cpc	r25, r27
     918:	08 f4       	brcc	.+2      	; 0x91c <__stack+0x1d>
     91a:	37 c1       	rjmp	.+622    	; 0xb8a <__stack+0x28b>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     91c:	00 91 1b 01 	lds	r16, 0x011B
     920:	10 91 1c 01 	lds	r17, 0x011C
     924:	0a 17       	cp	r16, r26
     926:	1b 07       	cpc	r17, r27
     928:	08 f4       	brcc	.+2      	; 0x92c <__stack+0x2d>
     92a:	2f c2       	rjmp	.+1118   	; 0xd8a <__stack+0x48b>
     92c:	00 91 1d 01 	lds	r16, 0x011D
     930:	10 91 1e 01 	lds	r17, 0x011E
     934:	0a 17       	cp	r16, r26
     936:	1b 07       	cpc	r17, r27
     938:	08 f4       	brcc	.+2      	; 0x93c <__stack+0x3d>
     93a:	2f c2       	rjmp	.+1118   	; 0xd9a <__stack+0x49b>
     93c:	00 91 1f 01 	lds	r16, 0x011F
     940:	10 91 20 01 	lds	r17, 0x0120
     944:	0a 17       	cp	r16, r26
     946:	1b 07       	cpc	r17, r27
     948:	08 f4       	brcc	.+2      	; 0x94c <__stack+0x4d>
     94a:	2f c2       	rjmp	.+1118   	; 0xdaa <__stack+0x4ab>
     94c:	00 91 21 01 	lds	r16, 0x0121
     950:	10 91 22 01 	lds	r17, 0x0122
     954:	0a 17       	cp	r16, r26
     956:	1b 07       	cpc	r17, r27
     958:	08 f4       	brcc	.+2      	; 0x95c <__stack+0x5d>
     95a:	2f c2       	rjmp	.+1118   	; 0xdba <__stack+0x4bb>
     95c:	00 91 23 01 	lds	r16, 0x0123
     960:	10 91 24 01 	lds	r17, 0x0124
     964:	0a 17       	cp	r16, r26
     966:	1b 07       	cpc	r17, r27
     968:	08 f4       	brcc	.+2      	; 0x96c <__stack+0x6d>
     96a:	ef c1       	rjmp	.+990    	; 0xd4a <__stack+0x44b>
     96c:	00 91 25 01 	lds	r16, 0x0125
     970:	10 91 26 01 	lds	r17, 0x0126
     974:	0a 17       	cp	r16, r26
     976:	1b 07       	cpc	r17, r27
     978:	08 f4       	brcc	.+2      	; 0x97c <__stack+0x7d>
     97a:	27 c2       	rjmp	.+1102   	; 0xdca <__stack+0x4cb>
     97c:	00 91 27 01 	lds	r16, 0x0127
     980:	10 91 28 01 	lds	r17, 0x0128
     984:	0a 17       	cp	r16, r26
     986:	1b 07       	cpc	r17, r27
     988:	08 f4       	brcc	.+2      	; 0x98c <__stack+0x8d>
     98a:	27 c2       	rjmp	.+1102   	; 0xdda <__stack+0x4db>
     98c:	00 91 29 01 	lds	r16, 0x0129
     990:	10 91 2a 01 	lds	r17, 0x012A
     994:	0a 17       	cp	r16, r26
     996:	1b 07       	cpc	r17, r27
     998:	08 f4       	brcc	.+2      	; 0x99c <__stack+0x9d>
     99a:	27 c2       	rjmp	.+1102   	; 0xdea <__stack+0x4eb>
     99c:	00 91 2b 01 	lds	r16, 0x012B
     9a0:	10 91 2c 01 	lds	r17, 0x012C
     9a4:	0a 17       	cp	r16, r26
     9a6:	1b 07       	cpc	r17, r27
     9a8:	08 f4       	brcc	.+2      	; 0x9ac <__stack+0xad>
     9aa:	27 c2       	rjmp	.+1102   	; 0xdfa <__stack+0x4fb>
     9ac:	00 91 2d 01 	lds	r16, 0x012D
     9b0:	10 91 2e 01 	lds	r17, 0x012E
     9b4:	0a 17       	cp	r16, r26
     9b6:	1b 07       	cpc	r17, r27
     9b8:	08 f4       	brcc	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	27 c2       	rjmp	.+1102   	; 0xe0a <__stack+0x50b>
     9bc:	00 91 2f 01 	lds	r16, 0x012F
     9c0:	10 91 30 01 	lds	r17, 0x0130
     9c4:	0a 17       	cp	r16, r26
     9c6:	1b 07       	cpc	r17, r27
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	23 c2       	rjmp	.+1094   	; 0xe12 <__stack+0x513>
     9cc:	00 91 31 01 	lds	r16, 0x0131
     9d0:	10 91 32 01 	lds	r17, 0x0132
     9d4:	0a 17       	cp	r16, r26
     9d6:	1b 07       	cpc	r17, r27
     9d8:	08 f4       	brcc	.+2      	; 0x9dc <__stack+0xdd>
     9da:	23 c2       	rjmp	.+1094   	; 0xe22 <__stack+0x523>
     9dc:	00 91 33 01 	lds	r16, 0x0133
     9e0:	10 91 34 01 	lds	r17, 0x0134
     9e4:	0a 17       	cp	r16, r26
     9e6:	1b 07       	cpc	r17, r27
     9e8:	08 f4       	brcc	.+2      	; 0x9ec <__stack+0xed>
     9ea:	23 c2       	rjmp	.+1094   	; 0xe32 <__stack+0x533>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	a0 ed       	ldi	r26, 0xD0	; 208
     9f2:	b0 e4       	ldi	r27, 0x40	; 64
     9f4:	89 83       	std	Y+1, r24	; 0x01
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	ab 83       	std	Y+3, r26	; 0x03
     9fa:	bc 83       	std	Y+4, r27	; 0x04
     9fc:	4c e0       	ldi	r20, 0x0C	; 12
     9fe:	e4 2e       	mov	r14, r20
     a00:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     a02:	f7 01       	movw	r30, r14
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	e7 5e       	subi	r30, 0xE7	; 231
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 81       	ld	r24, Z
     a0e:	91 81       	ldd	r25, Z+1	; 0x01
     a10:	b8 01       	movw	r22, r16
     a12:	68 1b       	sub	r22, r24
     a14:	79 0b       	sbc	r23, r25
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     a1e:	9b 01       	movw	r18, r22
     a20:	ac 01       	movw	r20, r24
     a22:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__addsf3>
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a2a:	ad 81       	ldd	r26, Y+5	; 0x05
     a2c:	be 81       	ldd	r27, Y+6	; 0x06
     a2e:	bd 01       	movw	r22, r26
     a30:	bb 0f       	add	r27, r27
     a32:	88 0b       	sbc	r24, r24
     a34:	99 0b       	sbc	r25, r25
     a36:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__floatsisf>
     a3a:	4b 01       	movw	r8, r22
     a3c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     a3e:	b8 01       	movw	r22, r16
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     a48:	2b 01       	movw	r4, r22
     a4a:	3c 01       	movw	r6, r24
     a4c:	29 81       	ldd	r18, Y+1	; 0x01
     a4e:	3a 81       	ldd	r19, Y+2	; 0x02
     a50:	4b 81       	ldd	r20, Y+3	; 0x03
     a52:	5c 81       	ldd	r21, Y+4	; 0x04
     a54:	c7 01       	movw	r24, r14
     a56:	b6 01       	movw	r22, r12
     a58:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	c3 01       	movw	r24, r6
     a62:	b2 01       	movw	r22, r4
     a64:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__subsf3>
     a68:	9b 01       	movw	r18, r22
     a6a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a6c:	c5 01       	movw	r24, r10
     a6e:	b4 01       	movw	r22, r8
     a70:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__subsf3>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 e2       	ldi	r20, 0x20	; 32
     a7a:	51 e4       	ldi	r21, 0x41	; 65
     a7c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
            b=((int)((int)b/(int)slope));
     a80:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fixsfsi>
     a84:	8b 01       	movw	r16, r22
     a86:	c7 01       	movw	r24, r14
     a88:	b6 01       	movw	r22, r12
     a8a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fixsfsi>
     a8e:	ab 01       	movw	r20, r22
     a90:	bc 01       	movw	r22, r24
     a92:	c8 01       	movw	r24, r16
     a94:	ba 01       	movw	r22, r20
     a96:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>
            dist_high=b;
     a9a:	16 2f       	mov	r17, r22
     a9c:	77 c0       	rjmp	.+238    	; 0xb8c <__stack+0x28d>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a9e:	dc 01       	movw	r26, r24
     aa0:	cd 90       	ld	r12, X+
     aa2:	dc 90       	ld	r13, X
     aa4:	80 91 40 01 	lds	r24, 0x0140
     aa8:	90 91 41 01 	lds	r25, 0x0141
     aac:	8c 15       	cp	r24, r12
     aae:	9d 05       	cpc	r25, r13
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <__stack+0x1b5>
     ab2:	8c c0       	rjmp	.+280    	; 0xbcc <__stack+0x2cd>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     ab4:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ab6:	e0 90 42 01 	lds	r14, 0x0142
     aba:	f0 90 43 01 	lds	r15, 0x0143
     abe:	ec 14       	cp	r14, r12
     ac0:	fd 04       	cpc	r15, r13
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	5e c1       	rjmp	.+700    	; 0xd82 <__stack+0x483>
     ac6:	e0 90 44 01 	lds	r14, 0x0144
     aca:	f0 90 45 01 	lds	r15, 0x0145
     ace:	ec 14       	cp	r14, r12
     ad0:	fd 04       	cpc	r15, r13
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	5e c1       	rjmp	.+700    	; 0xd92 <__stack+0x493>
     ad6:	e0 90 46 01 	lds	r14, 0x0146
     ada:	f0 90 47 01 	lds	r15, 0x0147
     ade:	ec 14       	cp	r14, r12
     ae0:	fd 04       	cpc	r15, r13
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	5e c1       	rjmp	.+700    	; 0xda2 <__stack+0x4a3>
     ae6:	e0 90 48 01 	lds	r14, 0x0148
     aea:	f0 90 49 01 	lds	r15, 0x0149
     aee:	ec 14       	cp	r14, r12
     af0:	fd 04       	cpc	r15, r13
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <__stack+0x1f7>
     af4:	5e c1       	rjmp	.+700    	; 0xdb2 <__stack+0x4b3>
     af6:	e0 90 4a 01 	lds	r14, 0x014A
     afa:	f0 90 4b 01 	lds	r15, 0x014B
     afe:	ec 14       	cp	r14, r12
     b00:	fd 04       	cpc	r15, r13
     b02:	08 f4       	brcc	.+2      	; 0xb06 <__stack+0x207>
     b04:	c3 c0       	rjmp	.+390    	; 0xc8c <__stack+0x38d>
     b06:	e0 90 4c 01 	lds	r14, 0x014C
     b0a:	f0 90 4d 01 	lds	r15, 0x014D
     b0e:	ec 14       	cp	r14, r12
     b10:	fd 04       	cpc	r15, r13
     b12:	08 f4       	brcc	.+2      	; 0xb16 <__stack+0x217>
     b14:	56 c1       	rjmp	.+684    	; 0xdc2 <__stack+0x4c3>
     b16:	e0 90 4e 01 	lds	r14, 0x014E
     b1a:	f0 90 4f 01 	lds	r15, 0x014F
     b1e:	ec 14       	cp	r14, r12
     b20:	fd 04       	cpc	r15, r13
     b22:	08 f4       	brcc	.+2      	; 0xb26 <__stack+0x227>
     b24:	56 c1       	rjmp	.+684    	; 0xdd2 <__stack+0x4d3>
     b26:	e0 90 50 01 	lds	r14, 0x0150
     b2a:	f0 90 51 01 	lds	r15, 0x0151
     b2e:	ec 14       	cp	r14, r12
     b30:	fd 04       	cpc	r15, r13
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__stack+0x237>
     b34:	56 c1       	rjmp	.+684    	; 0xde2 <__stack+0x4e3>
     b36:	e0 90 52 01 	lds	r14, 0x0152
     b3a:	f0 90 53 01 	lds	r15, 0x0153
     b3e:	ec 14       	cp	r14, r12
     b40:	fd 04       	cpc	r15, r13
     b42:	08 f4       	brcc	.+2      	; 0xb46 <__stack+0x247>
     b44:	56 c1       	rjmp	.+684    	; 0xdf2 <__stack+0x4f3>
     b46:	e0 90 54 01 	lds	r14, 0x0154
     b4a:	f0 90 55 01 	lds	r15, 0x0155
     b4e:	ec 14       	cp	r14, r12
     b50:	fd 04       	cpc	r15, r13
     b52:	08 f4       	brcc	.+2      	; 0xb56 <__stack+0x257>
     b54:	56 c1       	rjmp	.+684    	; 0xe02 <__stack+0x503>
     b56:	e0 90 56 01 	lds	r14, 0x0156
     b5a:	f0 90 57 01 	lds	r15, 0x0157
     b5e:	ec 14       	cp	r14, r12
     b60:	fd 04       	cpc	r15, r13
     b62:	08 f4       	brcc	.+2      	; 0xb66 <__stack+0x267>
     b64:	5a c1       	rjmp	.+692    	; 0xe1a <__stack+0x51b>
     b66:	e0 90 58 01 	lds	r14, 0x0158
     b6a:	f0 90 59 01 	lds	r15, 0x0159
     b6e:	ec 14       	cp	r14, r12
     b70:	fd 04       	cpc	r15, r13
     b72:	08 f4       	brcc	.+2      	; 0xb76 <__stack+0x277>
     b74:	5a c1       	rjmp	.+692    	; 0xe2a <__stack+0x52b>
     b76:	e0 90 5a 01 	lds	r14, 0x015A
     b7a:	f0 90 5b 01 	lds	r15, 0x015B
     b7e:	ec 14       	cp	r14, r12
     b80:	fd 04       	cpc	r15, r13
     b82:	08 f4       	brcc	.+2      	; 0xb86 <__stack+0x287>
     b84:	5a c1       	rjmp	.+692    	; 0xe3a <__stack+0x53b>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b86:	0a e5       	ldi	r16, 0x5A	; 90
     b88:	31 c0       	rjmp	.+98     	; 0xbec <__stack+0x2ed>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b8a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b8c:	ed 81       	ldd	r30, Y+5	; 0x05
     b8e:	fe 81       	ldd	r31, Y+6	; 0x06
     b90:	ed 3b       	cpi	r30, 0xBD	; 189
     b92:	f2 40       	sbci	r31, 0x02	; 2
     b94:	fc f4       	brge	.+62     	; 0xbd4 <__stack+0x2d5>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b96:	81 e2       	ldi	r24, 0x21	; 33
     b98:	81 0f       	add	r24, r17
    }
}
     b9a:	26 96       	adiw	r28, 0x06	; 6
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	bf 90       	pop	r11
     bb8:	af 90       	pop	r10
     bba:	9f 90       	pop	r9
     bbc:	8f 90       	pop	r8
     bbe:	7f 90       	pop	r7
     bc0:	6f 90       	pop	r6
     bc2:	5f 90       	pop	r5
     bc4:	4f 90       	pop	r4
     bc6:	3f 90       	pop	r3
     bc8:	2f 90       	pop	r2
     bca:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     bcc:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     bce:	81 e2       	ldi	r24, 0x21	; 33
     bd0:	80 0f       	add	r24, r16
     bd2:	e3 cf       	rjmp	.-58     	; 0xb9a <__stack+0x29b>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bd4:	d1 01       	movw	r26, r2
     bd6:	cd 90       	ld	r12, X+
     bd8:	dc 90       	ld	r13, X
     bda:	80 91 40 01 	lds	r24, 0x0140
     bde:	90 91 41 01 	lds	r25, 0x0141
     be2:	8c 15       	cp	r24, r12
     be4:	9d 05       	cpc	r25, r13
     be6:	08 f0       	brcs	.+2      	; 0xbea <__stack+0x2eb>
     be8:	66 cf       	rjmp	.-308    	; 0xab6 <__stack+0x1b7>
            dist_low=0;
     bea:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     bec:	1f 3f       	cpi	r17, 0xFF	; 255
     bee:	79 f3       	breq	.-34     	; 0xbce <__stack+0x2cf>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     bf0:	ed 81       	ldd	r30, Y+5	; 0x05
     bf2:	fe 81       	ldd	r31, Y+6	; 0x06
     bf4:	bf 01       	movw	r22, r30
     bf6:	ff 0f       	add	r31, r31
     bf8:	88 0b       	sbc	r24, r24
     bfa:	99 0b       	sbc	r25, r25
     bfc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__floatsisf>
     c00:	6b 01       	movw	r12, r22
     c02:	7c 01       	movw	r14, r24
     c04:	61 2f       	mov	r22, r17
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     c10:	4b 01       	movw	r8, r22
     c12:	5c 01       	movw	r10, r24
     c14:	a7 01       	movw	r20, r14
     c16:	96 01       	movw	r18, r12
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	81 e6       	ldi	r24, 0x61	; 97
     c1e:	94 e4       	ldi	r25, 0x44	; 68
     c20:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__subsf3>
     c24:	9b 01       	movw	r18, r22
     c26:	ac 01       	movw	r20, r24
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
     c30:	4b 01       	movw	r8, r22
     c32:	5c 01       	movw	r10, r24
     c34:	60 2f       	mov	r22, r16
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     c40:	2b 01       	movw	r4, r22
     c42:	3c 01       	movw	r6, r24
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	4f e2       	ldi	r20, 0x2F	; 47
     c4a:	54 e4       	ldi	r21, 0x44	; 68
     c4c:	c7 01       	movw	r24, r14
     c4e:	b6 01       	movw	r22, r12
     c50:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__subsf3>
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
     c58:	c3 01       	movw	r24, r6
     c5a:	b2 01       	movw	r22, r4
     c5c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
     c64:	c5 01       	movw	r24, r10
     c66:	b4 01       	movw	r22, r8
     c68:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__addsf3>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	48 e4       	ldi	r20, 0x48	; 72
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	0e 94 47 0b 	call	0x168e	; 0x168e <__divsf3>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	44 e0       	ldi	r20, 0x04	; 4
     c7e:	52 e4       	ldi	r21, 0x42	; 66
     c80:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__addsf3>
     c84:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__fixunssfsi>
     c88:	86 2f       	mov	r24, r22
     c8a:	87 cf       	rjmp	.-242    	; 0xb9a <__stack+0x29b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c8c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c8e:	85 e0       	ldi	r24, 0x05	; 5
     c90:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	fc 01       	movw	r30, r24
     c98:	e2 5c       	subi	r30, 0xC2	; 194
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	b7 01       	movw	r22, r14
     ca2:	68 1b       	sub	r22, r24
     ca4:	79 0b       	sbc	r23, r25
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     cae:	9b 01       	movw	r18, r22
     cb0:	ac 01       	movw	r20, r24
     cb2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__addsf3>
     cb6:	4b 01       	movw	r8, r22
     cb8:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cba:	b6 01       	movw	r22, r12
     cbc:	dd 0c       	add	r13, r13
     cbe:	88 0b       	sbc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__floatsisf>
     cc6:	2b 01       	movw	r4, r22
     cc8:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     cca:	b7 01       	movw	r22, r14
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     cd4:	6b 01       	movw	r12, r22
     cd6:	7c 01       	movw	r14, r24
     cd8:	60 2f       	mov	r22, r16
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	5f e3       	ldi	r21, 0x3F	; 63
     cec:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	a9 01       	movw	r20, r18
     cf6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__addsf3>
     cfa:	a5 01       	movw	r20, r10
     cfc:	94 01       	movw	r18, r8
     cfe:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
     d02:	9b 01       	movw	r18, r22
     d04:	ac 01       	movw	r20, r24
     d06:	c7 01       	movw	r24, r14
     d08:	b6 01       	movw	r22, r12
     d0a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__subsf3>
     d0e:	9b 01       	movw	r18, r22
     d10:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d12:	c3 01       	movw	r24, r6
     d14:	b2 01       	movw	r22, r4
     d16:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__subsf3>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e2       	ldi	r20, 0x20	; 32
     d20:	51 e4       	ldi	r21, 0x41	; 65
     d22:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
                b=((int)((int)b/(int)slope));
     d26:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fixsfsi>
     d2a:	7b 01       	movw	r14, r22
     d2c:	c5 01       	movw	r24, r10
     d2e:	b4 01       	movw	r22, r8
     d30:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fixsfsi>
     d34:	ab 01       	movw	r20, r22
     d36:	bc 01       	movw	r22, r24
     d38:	c7 01       	movw	r24, r14
     d3a:	ba 01       	movw	r22, r20
     d3c:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>
                dist_low=b;
     d40:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     d42:	6f 3f       	cpi	r22, 0xFF	; 255
     d44:	09 f0       	breq	.+2      	; 0xd48 <__stack+0x449>
     d46:	52 cf       	rjmp	.-348    	; 0xbec <__stack+0x2ed>
     d48:	26 cf       	rjmp	.-436    	; 0xb96 <__stack+0x297>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d4a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	7c 01       	movw	r14, r24
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	ef 1a       	sub	r14, r31
     d56:	f1 08       	sbc	r15, r1
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatunsisf>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	5f e3       	ldi	r21, 0x3F	; 63
     d6a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsf3>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	a9 01       	movw	r20, r18
     d74:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__addsf3>
     d78:	69 83       	std	Y+1, r22	; 0x01
     d7a:	7a 83       	std	Y+2, r23	; 0x02
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d80:	40 ce       	rjmp	.-896    	; 0xa02 <__stack+0x103>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d82:	01 e0       	ldi	r16, 0x01	; 1
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	84 cf       	rjmp	.-248    	; 0xc92 <__stack+0x393>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	df cf       	rjmp	.-66     	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d92:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	7c cf       	rjmp	.-264    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d9a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	d7 cf       	rjmp	.-82     	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     da2:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	74 cf       	rjmp	.-280    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     daa:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	cf cf       	rjmp	.-98     	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     db2:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     db4:	84 e0       	ldi	r24, 0x04	; 4
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	6c cf       	rjmp	.-296    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dba:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	c7 cf       	rjmp	.-114    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dc2:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	64 cf       	rjmp	.-312    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dca:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     dcc:	86 e0       	ldi	r24, 0x06	; 6
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	bf cf       	rjmp	.-130    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd2:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     dd4:	87 e0       	ldi	r24, 0x07	; 7
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	5c cf       	rjmp	.-328    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dda:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     ddc:	87 e0       	ldi	r24, 0x07	; 7
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	b7 cf       	rjmp	.-146    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     de2:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     de4:	88 e0       	ldi	r24, 0x08	; 8
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	54 cf       	rjmp	.-344    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dea:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	af cf       	rjmp	.-162    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     df2:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     df4:	89 e0       	ldi	r24, 0x09	; 9
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	4c cf       	rjmp	.-360    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dfa:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     dfc:	89 e0       	ldi	r24, 0x09	; 9
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a7 cf       	rjmp	.-178    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e02:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     e04:	8a e0       	ldi	r24, 0x0A	; 10
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	44 cf       	rjmp	.-376    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e0a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9f cf       	rjmp	.-194    	; 0xd50 <__stack+0x451>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e12:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     e14:	8b e0       	ldi	r24, 0x0B	; 11
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9b cf       	rjmp	.-202    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e1a:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     e1c:	8b e0       	ldi	r24, 0x0B	; 11
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	38 cf       	rjmp	.-400    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e22:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     e24:	8c e0       	ldi	r24, 0x0C	; 12
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	93 cf       	rjmp	.-218    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e2a:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	30 cf       	rjmp	.-416    	; 0xc92 <__stack+0x393>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e32:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     e34:	8d e0       	ldi	r24, 0x0D	; 13
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	8b cf       	rjmp	.-234    	; 0xd50 <__stack+0x451>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e3a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     e3c:	8d e0       	ldi	r24, 0x0D	; 13
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	28 cf       	rjmp	.-432    	; 0xc92 <__stack+0x393>

00000e42 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
    tx_clock += tx_increment;
     e64:	20 91 5f 01 	lds	r18, 0x015F
     e68:	30 91 60 01 	lds	r19, 0x0160
     e6c:	80 91 5d 01 	lds	r24, 0x015D
     e70:	90 91 5e 01 	lds	r25, 0x015E
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	90 93 60 01 	sts	0x0160, r25
     e7c:	80 93 5f 01 	sts	0x015F, r24
    tx_increment = 0xFF;
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	90 93 5e 01 	sts	0x015E, r25
     e88:	80 93 5d 01 	sts	0x015D, r24
    OCR0A = tx_increment;
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e90:	80 91 3b 01 	lds	r24, 0x013B
     e94:	90 91 3c 01 	lds	r25, 0x013C
     e98:	a0 91 3d 01 	lds	r26, 0x013D
     e9c:	b0 91 3e 01 	lds	r27, 0x013E
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	a1 1d       	adc	r26, r1
     ea4:	b1 1d       	adc	r27, r1
     ea6:	80 93 3b 01 	sts	0x013B, r24
     eaa:	90 93 3c 01 	sts	0x013C, r25
     eae:	a0 93 3d 01 	sts	0x013D, r26
     eb2:	b0 93 3e 01 	sts	0x013E, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     eb6:	80 91 3f 01 	lds	r24, 0x013F
     eba:	81 11       	cpse	r24, r1
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <__vector_14+0x9a>
     ebe:	80 91 6e 01 	lds	r24, 0x016E
     ec2:	90 91 6f 01 	lds	r25, 0x016F
     ec6:	20 91 5f 01 	lds	r18, 0x015F
     eca:	30 91 60 01 	lds	r19, 0x0160
     ece:	82 17       	cp	r24, r18
     ed0:	93 07       	cpc	r25, r19
     ed2:	20 f4       	brcc	.+8      	; 0xedc <__vector_14+0x9a>
     ed4:	80 91 17 01 	lds	r24, 0x0117
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	89 f0       	breq	.+34     	; 0xefe <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     efe:	e0 91 03 01 	lds	r30, 0x0103
     f02:	f0 91 04 01 	lds	r31, 0x0104
     f06:	09 95       	icall
        if (msg) {
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	41 f3       	breq	.-48     	; 0xedc <__vector_14+0x9a>
            if (message_send(msg)) {
     f0c:	0e 94 09 0a 	call	0x1412	; 0x1412 <message_send>
     f10:	81 11       	cpse	r24, r1
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     f14:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <rand>
     f18:	99 27       	eor	r25, r25
     f1a:	90 93 5e 01 	sts	0x015E, r25
     f1e:	80 93 5d 01 	sts	0x015D, r24
                OCR0A = tx_increment;
     f22:	87 bd       	out	0x27, r24	; 39
     f24:	db cf       	rjmp	.-74     	; 0xedc <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     f26:	e0 91 01 01 	lds	r30, 0x0101
     f2a:	f0 91 02 01 	lds	r31, 0x0102
     f2e:	09 95       	icall
                tx_clock = 0;
     f30:	10 92 60 01 	sts	0x0160, r1
     f34:	10 92 5f 01 	sts	0x015F, r1
     f38:	d1 cf       	rjmp	.-94     	; 0xedc <__vector_14+0x9a>

00000f3a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     f3a:	80 ff       	sbrs	r24, 0
     f3c:	11 c0       	rjmp	.+34     	; 0xf60 <set_color+0x26>
        DDRD |= (1<<5);
     f3e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     f40:	81 ff       	sbrs	r24, 1
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <set_color+0x2c>
        DDRD |= (1<<4);
     f44:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     f46:	82 ff       	sbrs	r24, 2
     f48:	11 c0       	rjmp	.+34     	; 0xf6c <set_color+0x32>
        DDRC |= (1<<3);
     f4a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     f4c:	83 ff       	sbrs	r24, 3
     f4e:	11 c0       	rjmp	.+34     	; 0xf72 <set_color+0x38>
        DDRC |= (1<<2);
     f50:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     f52:	84 ff       	sbrs	r24, 4
     f54:	11 c0       	rjmp	.+34     	; 0xf78 <set_color+0x3e>
        DDRC |= (1<<5);
     f56:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     f58:	85 fd       	sbrc	r24, 5
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f5c:	3c 98       	cbi	0x07, 4	; 7
     f5e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f60:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f62:	81 fd       	sbrc	r24, 1
     f64:	ef cf       	rjmp	.-34     	; 0xf44 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f66:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f68:	82 fd       	sbrc	r24, 2
     f6a:	ef cf       	rjmp	.-34     	; 0xf4a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f6c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f6e:	83 fd       	sbrc	r24, 3
     f70:	ef cf       	rjmp	.-34     	; 0xf50 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f72:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f74:	84 fd       	sbrc	r24, 4
     f76:	ef cf       	rjmp	.-34     	; 0xf56 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f78:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f7a:	85 ff       	sbrs	r24, 5
     f7c:	ef cf       	rjmp	.-34     	; 0xf5c <set_color+0x22>
        DDRC |= (1<<4);
     f7e:	3c 9a       	sbi	0x07, 4	; 7
     f80:	08 95       	ret

00000f82 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
    rx_timer_off();
     f90:	10 92 81 00 	sts	0x0081, r1
     f94:	10 92 85 00 	sts	0x0085, r1
     f98:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 18 01 	sts	0x0118, r24
    rx_leadingbyte = 1;
     fa2:	80 93 5c 01 	sts	0x015C, r24
    rx_busy = 0;
     fa6:	10 92 3f 01 	sts	0x013F, r1
    adc_trigger_high_gain();
     faa:	10 92 7c 00 	sts	0x007C, r1
     fae:	93 ea       	ldi	r25, 0xA3	; 163
     fb0:	90 93 7a 00 	sts	0x007A, r25
     fb4:	80 93 7b 00 	sts	0x007B, r24
}
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     fec:	20 91 84 00 	lds	r18, 0x0084
     ff0:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	40 93 3f 01 	sts	0x013F, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ffa:	80 91 18 01 	lds	r24, 0x0118
     ffe:	88 23       	and	r24, r24
    1000:	a9 f1       	breq	.+106    	; 0x106c <__vector_23+0xa6>
        rx_timer_on();
    1002:	10 92 85 00 	sts	0x0085, r1
    1006:	10 92 84 00 	sts	0x0084, r1
    100a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    100e:	10 92 70 01 	sts	0x0170, r1
        rx_leadingbit = 0;
    1012:	10 92 18 01 	sts	0x0118, r1
        if (rx_leadingbyte) {
    1016:	80 91 5c 01 	lds	r24, 0x015C
    101a:	88 23       	and	r24, r24
    101c:	a1 f0       	breq	.+40     	; 0x1046 <__vector_23+0x80>
            adc_finish_conversion();
    101e:	80 91 7a 00 	lds	r24, 0x007A
    1022:	86 fd       	sbrc	r24, 6
    1024:	fc cf       	rjmp	.-8      	; 0x101e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1026:	80 91 78 00 	lds	r24, 0x0078
    102a:	90 91 79 00 	lds	r25, 0x0079
    102e:	90 93 3a 01 	sts	0x013A, r25
    1032:	80 93 39 01 	sts	0x0139, r24
            adc_trigger_low_gain();
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	80 93 7c 00 	sts	0x007C, r24
    103c:	93 ea       	ldi	r25, 0xA3	; 163
    103e:	90 93 7a 00 	sts	0x007A, r25
    1042:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	7f 91       	pop	r23
    1058:	6f 91       	pop	r22
    105a:	5f 91       	pop	r21
    105c:	4f 91       	pop	r20
    105e:	3f 91       	pop	r19
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    106c:	c9 01       	movw	r24, r18
    106e:	87 58       	subi	r24, 0x87	; 135
    1070:	91 09       	sbc	r25, r1
    1072:	84 37       	cpi	r24, 0x74	; 116
    1074:	99 40       	sbci	r25, 0x09	; 9
    1076:	08 f0       	brcs	.+2      	; 0x107a <__vector_23+0xb4>
    1078:	52 c0       	rjmp	.+164    	; 0x111e <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    107a:	26 58       	subi	r18, 0x86	; 134
    107c:	31 09       	sbc	r19, r1
    107e:	a4 ef       	ldi	r26, 0xF4	; 244
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	0e 94 b7 0a 	call	0x156e	; 0x156e <__umulhisi3>
    1086:	aa 27       	eor	r26, r26
    1088:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	91 05       	cpc	r25, r1
    108e:	a1 05       	cpc	r26, r1
    1090:	b1 05       	cpc	r27, r1
    1092:	08 f4       	brcc	.+2      	; 0x1096 <__vector_23+0xd0>
    1094:	7b c0       	rjmp	.+246    	; 0x118c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1096:	40 93 18 01 	sts	0x0118, r20
                if (rx_leadingbyte) {
    109a:	80 91 5c 01 	lds	r24, 0x015C
    109e:	81 11       	cpse	r24, r1
    10a0:	52 c0       	rjmp	.+164    	; 0x1146 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    10a2:	80 91 36 01 	lds	r24, 0x0136
    10a6:	e8 2f       	mov	r30, r24
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	ee 59       	subi	r30, 0x9E	; 158
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	90 91 70 01 	lds	r25, 0x0170
    10b2:	90 83       	st	Z, r25
                    rx_byteindex++;
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	80 93 36 01 	sts	0x0136, r24
                    if (rx_byteindex == sizeof(message_t)) {
    10ba:	8c 30       	cpi	r24, 0x0C	; 12
    10bc:	21 f6       	brne	.-120    	; 0x1046 <__vector_23+0x80>
                        rx_timer_off();
    10be:	10 92 81 00 	sts	0x0081, r1
    10c2:	10 92 85 00 	sts	0x0085, r1
    10c6:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10ca:	40 93 5c 01 	sts	0x015C, r20
                        rx_busy = 0;
    10ce:	10 92 3f 01 	sts	0x013F, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    10d2:	c0 91 6c 01 	lds	r28, 0x016C
    10d6:	d0 91 6d 01 	lds	r29, 0x016D
    10da:	82 e6       	ldi	r24, 0x62	; 98
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 ed 09 	call	0x13da	; 0x13da <message_crc>
    10e2:	c8 17       	cp	r28, r24
    10e4:	d9 07       	cpc	r29, r25
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__vector_23+0x124>
    10e8:	ae cf       	rjmp	.-164    	; 0x1046 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    10ea:	80 91 6b 01 	lds	r24, 0x016B
    10ee:	87 ff       	sbrs	r24, 7
    10f0:	61 c0       	rjmp	.+194    	; 0x11b4 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    10f2:	98 e7       	ldi	r25, 0x78	; 120
    10f4:	98 0f       	add	r25, r24
    10f6:	93 30       	cpi	r25, 0x03	; 3
    10f8:	30 f0       	brcs	.+12     	; 0x1106 <__vector_23+0x140>
        motors_off();
    10fa:	53 98       	cbi	0x0a, 3	; 10
    10fc:	23 98       	cbi	0x04, 3	; 4
    10fe:	10 92 b4 00 	sts	0x00B4, r1
    1102:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	fc 01       	movw	r30, r24
    110a:	e0 58       	subi	r30, 0x80	; 128
    110c:	f1 09       	sbc	r31, r1
    110e:	eb 30       	cpi	r30, 0x0B	; 11
    1110:	f1 05       	cpc	r31, r1
    1112:	08 f0       	brcs	.+2      	; 0x1116 <__vector_23+0x150>
    1114:	98 cf       	rjmp	.-208    	; 0x1046 <__vector_23+0x80>
    1116:	e5 5c       	subi	r30, 0xC5	; 197
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    111e:	10 92 81 00 	sts	0x0081, r1
    1122:	10 92 85 00 	sts	0x0085, r1
    1126:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    112a:	40 93 18 01 	sts	0x0118, r20
            rx_leadingbyte = 1;
    112e:	40 93 5c 01 	sts	0x015C, r20
            rx_busy = 0;
    1132:	10 92 3f 01 	sts	0x013F, r1
            adc_trigger_high_gain();
    1136:	10 92 7c 00 	sts	0x007C, r1
    113a:	83 ea       	ldi	r24, 0xA3	; 163
    113c:	80 93 7a 00 	sts	0x007A, r24
    1140:	40 93 7b 00 	sts	0x007B, r20
    1144:	80 cf       	rjmp	.-256    	; 0x1046 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1146:	80 91 7a 00 	lds	r24, 0x007A
    114a:	86 fd       	sbrc	r24, 6
    114c:	fc cf       	rjmp	.-8      	; 0x1146 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    114e:	80 91 78 00 	lds	r24, 0x0078
    1152:	90 91 79 00 	lds	r25, 0x0079
    1156:	90 93 38 01 	sts	0x0138, r25
    115a:	80 93 37 01 	sts	0x0137, r24
                    adc_trigger_high_gain();
    115e:	10 92 7c 00 	sts	0x007C, r1
    1162:	83 ea       	ldi	r24, 0xA3	; 163
    1164:	80 93 7a 00 	sts	0x007A, r24
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    116e:	90 91 70 01 	lds	r25, 0x0170
    1172:	99 23       	and	r25, r25
    1174:	d1 f0       	breq	.+52     	; 0x11aa <__vector_23+0x1e4>
                        rx_timer_off();
    1176:	10 92 81 00 	sts	0x0081, r1
    117a:	10 92 85 00 	sts	0x0085, r1
    117e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1182:	80 93 5c 01 	sts	0x015C, r24
                        rx_busy = 0;
    1186:	10 92 3f 01 	sts	0x013F, r1
    118a:	5d cf       	rjmp	.-326    	; 0x1046 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	f9 01       	movw	r30, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <__vector_23+0x1d2>
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <__vector_23+0x1ce>
    119c:	cf 01       	movw	r24, r30
    119e:	90 91 70 01 	lds	r25, 0x0170
    11a2:	89 2b       	or	r24, r25
    11a4:	80 93 70 01 	sts	0x0170, r24
    11a8:	4e cf       	rjmp	.-356    	; 0x1046 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    11aa:	10 92 5c 01 	sts	0x015C, r1
                        rx_byteindex = 0;
    11ae:	10 92 36 01 	sts	0x0136, r1
    11b2:	49 cf       	rjmp	.-366    	; 0x1046 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    11b4:	e0 91 05 01 	lds	r30, 0x0105
    11b8:	f0 91 06 01 	lds	r31, 0x0106
    11bc:	67 e3       	ldi	r22, 0x37	; 55
    11be:	71 e0       	ldi	r23, 0x01	; 1
    11c0:	82 e6       	ldi	r24, 0x62	; 98
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	09 95       	icall
    11c6:	3f cf       	rjmp	.-386    	; 0x1046 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    11c8:	80 91 62 01 	lds	r24, 0x0162
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <__vector_23+0x20c>
    11d0:	dd c0       	rjmp	.+442    	; 0x138c <__vector_23+0x3c6>
    11d2:	08 f4       	brcc	.+2      	; 0x11d6 <__vector_23+0x210>
    11d4:	ba c0       	rjmp	.+372    	; 0x134a <__vector_23+0x384>
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	09 f4       	brne	.+2      	; 0x11dc <__vector_23+0x216>
    11da:	c6 c0       	rjmp	.+396    	; 0x1368 <__vector_23+0x3a2>
    11dc:	84 30       	cpi	r24, 0x04	; 4
    11de:	09 f0       	breq	.+2      	; 0x11e2 <__vector_23+0x21c>
    11e0:	b1 c0       	rjmp	.+354    	; 0x1344 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    11e2:	80 91 15 01 	lds	r24, 0x0115
    11e6:	90 91 68 01 	lds	r25, 0x0168
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <__vector_23+0x22a>
    11ee:	e3 c0       	rjmp	.+454    	; 0x13b6 <__vector_23+0x3f0>
    11f0:	80 91 67 01 	lds	r24, 0x0167
                        prev_motion = MOVE_STOP;
    11f4:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    11f8:	23 e0       	ldi	r18, 0x03	; 3
    11fa:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    11fe:	80 93 73 01 	sts	0x0173, r24
                        kilo_straight_right = calibmsg->straight_right;
    1202:	90 93 74 01 	sts	0x0174, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1206:	80 91 17 01 	lds	r24, 0x0117
    120a:	86 30       	cpi	r24, 0x06	; 6
    120c:	09 f4       	brne	.+2      	; 0x1210 <__vector_23+0x24a>
    120e:	1b cf       	rjmp	.-458    	; 0x1046 <__vector_23+0x80>
                motors_on();
    1210:	53 9a       	sbi	0x0a, 3	; 10
    1212:	23 9a       	sbi	0x04, 3	; 4
    1214:	10 92 b4 00 	sts	0x00B4, r1
    1218:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	80 93 17 01 	sts	0x0117, r24
    1222:	11 cf       	rjmp	.-478    	; 0x1046 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1224:	80 91 17 01 	lds	r24, 0x0117
    1228:	86 30       	cpi	r24, 0x06	; 6
    122a:	99 f0       	breq	.+38     	; 0x1252 <__vector_23+0x28c>
                motors_on();
    122c:	53 9a       	sbi	0x0a, 3	; 10
    122e:	23 9a       	sbi	0x04, 3	; 4
    1230:	10 92 b4 00 	sts	0x00B4, r1
    1234:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1238:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    123a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    123c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    123e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1240:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1242:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1244:	10 92 15 01 	sts	0x0115, r1
    1248:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    124c:	86 e0       	ldi	r24, 0x06	; 6
    124e:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9c 01       	movw	r18, r24
    1258:	00 90 62 01 	lds	r0, 0x0162
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <__vector_23+0x29c>
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <__vector_23+0x298>
    1266:	80 91 71 01 	lds	r24, 0x0171
    126a:	90 91 72 01 	lds	r25, 0x0172
    126e:	82 23       	and	r24, r18
    1270:	93 23       	and	r25, r19
    1272:	89 2b       	or	r24, r25
    1274:	09 f0       	breq	.+2      	; 0x1278 <__vector_23+0x2b2>
    1276:	86 c0       	rjmp	.+268    	; 0x1384 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1278:	10 92 15 01 	sts	0x0115, r1
    127c:	e4 ce       	rjmp	.-568    	; 0x1046 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 17 01 	sts	0x0117, r24
    1284:	e0 ce       	rjmp	.-576    	; 0x1046 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1286:	e0 e0       	ldi	r30, 0x00	; 0
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    128c:	80 91 6e 00 	lds	r24, 0x006E
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	80 93 6e 00 	sts	0x006E, r24
    1296:	16 bc       	out	0x26, r1	; 38
            bootload();
    1298:	e0 e0       	ldi	r30, 0x00	; 0
    129a:	f0 e7       	ldi	r31, 0x70	; 112
    129c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    129e:	10 92 17 01 	sts	0x0117, r1
    12a2:	d1 ce       	rjmp	.-606    	; 0x1046 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	80 93 17 01 	sts	0x0117, r24
    12aa:	cd ce       	rjmp	.-614    	; 0x1046 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    12ac:	85 e0       	ldi	r24, 0x05	; 5
    12ae:	80 93 17 01 	sts	0x0117, r24
    12b2:	c9 ce       	rjmp	.-622    	; 0x1046 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    12b4:	80 91 17 01 	lds	r24, 0x0117
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	09 f4       	brne	.+2      	; 0x12be <__vector_23+0x2f8>
    12bc:	c4 ce       	rjmp	.-632    	; 0x1046 <__vector_23+0x80>
    12be:	80 91 17 01 	lds	r24, 0x0117
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <__vector_23+0x302>
    12c6:	bf ce       	rjmp	.-642    	; 0x1046 <__vector_23+0x80>
                motors_on();
    12c8:	53 9a       	sbi	0x0a, 3	; 10
    12ca:	23 9a       	sbi	0x04, 3	; 4
    12cc:	10 92 b4 00 	sts	0x00B4, r1
    12d0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    12d4:	83 e0       	ldi	r24, 0x03	; 3
    12d6:	80 93 17 01 	sts	0x0117, r24
    12da:	b5 ce       	rjmp	.-662    	; 0x1046 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    12dc:	80 91 17 01 	lds	r24, 0x0117
    12e0:	86 30       	cpi	r24, 0x06	; 6
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <__vector_23+0x320>
    12e4:	b0 ce       	rjmp	.-672    	; 0x1046 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    12e6:	60 91 71 01 	lds	r22, 0x0171
    12ea:	80 eb       	ldi	r24, 0xB0	; 176
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    12f2:	60 91 72 01 	lds	r22, 0x0172
    12f6:	81 eb       	ldi	r24, 0xB1	; 177
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12fe:	60 91 75 01 	lds	r22, 0x0175
    1302:	85 e0       	ldi	r24, 0x05	; 5
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    130a:	60 91 61 01 	lds	r22, 0x0161
    130e:	89 e0       	ldi	r24, 0x09	; 9
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1316:	60 91 73 01 	lds	r22, 0x0173
    131a:	8c e0       	ldi	r24, 0x0C	; 12
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1322:	60 91 74 01 	lds	r22, 0x0174
    1326:	84 e1       	ldi	r24, 0x14	; 20
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <eeprom_write_byte>
                        motors_off();
    132e:	53 98       	cbi	0x0a, 3	; 10
    1330:	23 98       	cbi	0x04, 3	; 4
    1332:	10 92 b4 00 	sts	0x00B4, r1
    1336:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 17 01 	sts	0x0117, r24
    1340:	80 91 62 01 	lds	r24, 0x0162
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1344:	81 11       	cpse	r24, r1
    1346:	5f cf       	rjmp	.-322    	; 0x1206 <__vector_23+0x240>
    1348:	7e ce       	rjmp	.-772    	; 0x1046 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    134a:	88 23       	and	r24, r24
    134c:	39 f2       	breq	.-114    	; 0x12dc <__vector_23+0x316>
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	c9 f7       	brne	.-14     	; 0x1344 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1352:	80 91 63 01 	lds	r24, 0x0163
    1356:	90 91 64 01 	lds	r25, 0x0164
    135a:	90 93 72 01 	sts	0x0172, r25
    135e:	80 93 71 01 	sts	0x0171, r24
                    cur_motion = MOVE_STOP;
    1362:	10 92 15 01 	sts	0x0115, r1
    1366:	4f cf       	rjmp	.-354    	; 0x1206 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1368:	80 91 15 01 	lds	r24, 0x0115
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	71 f1       	breq	.+92     	; 0x13cc <__vector_23+0x406>
    1370:	80 91 66 01 	lds	r24, 0x0166
                        prev_motion = MOVE_STOP;
    1374:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    137e:	80 93 61 01 	sts	0x0161, r24
    1382:	41 cf       	rjmp	.-382    	; 0x1206 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 15 01 	sts	0x0115, r24
    138a:	5d ce       	rjmp	.-838    	; 0x1046 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    138c:	80 91 15 01 	lds	r24, 0x0115
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	51 f0       	breq	.+20     	; 0x13a8 <__vector_23+0x3e2>
    1394:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    1398:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    13a2:	80 93 75 01 	sts	0x0175, r24
    13a6:	2f cf       	rjmp	.-418    	; 0x1206 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    13a8:	80 91 65 01 	lds	r24, 0x0165
    13ac:	90 91 75 01 	lds	r25, 0x0175
    13b0:	89 13       	cpse	r24, r25
    13b2:	f2 cf       	rjmp	.-28     	; 0x1398 <__vector_23+0x3d2>
    13b4:	28 cf       	rjmp	.-432    	; 0x1206 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13b6:	80 91 74 01 	lds	r24, 0x0174
    13ba:	98 13       	cpse	r25, r24
    13bc:	19 cf       	rjmp	.-462    	; 0x11f0 <__vector_23+0x22a>
    13be:	80 91 67 01 	lds	r24, 0x0167
    13c2:	20 91 73 01 	lds	r18, 0x0173
    13c6:	82 13       	cpse	r24, r18
    13c8:	15 cf       	rjmp	.-470    	; 0x11f4 <__vector_23+0x22e>
    13ca:	1d cf       	rjmp	.-454    	; 0x1206 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    13cc:	80 91 66 01 	lds	r24, 0x0166
    13d0:	90 91 61 01 	lds	r25, 0x0161
    13d4:	89 13       	cpse	r24, r25
    13d6:	ce cf       	rjmp	.-100    	; 0x1374 <__vector_23+0x3ae>
    13d8:	16 cf       	rjmp	.-468    	; 0x1206 <__vector_23+0x240>

000013da <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    13da:	fc 01       	movw	r30, r24
    13dc:	ac 01       	movw	r20, r24
    13de:	46 5f       	subi	r20, 0xF6	; 246
    13e0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    13e2:	8f ef       	ldi	r24, 0xFF	; 255
    13e4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    13e6:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    13e8:	82 27       	eor	r24, r18
    13ea:	08 2e       	mov	r0, r24
    13ec:	82 95       	swap	r24
    13ee:	80 7f       	andi	r24, 0xF0	; 240
    13f0:	80 25       	eor	r24, r0
    13f2:	09 2e       	mov	r0, r25
    13f4:	98 2f       	mov	r25, r24
    13f6:	82 95       	swap	r24
    13f8:	8f 70       	andi	r24, 0x0F	; 15
    13fa:	08 26       	eor	r0, r24
    13fc:	86 95       	lsr	r24
    13fe:	98 27       	eor	r25, r24
    1400:	89 27       	eor	r24, r25
    1402:	88 0f       	add	r24, r24
    1404:	88 0f       	add	r24, r24
    1406:	88 0f       	add	r24, r24
    1408:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    140a:	e4 17       	cp	r30, r20
    140c:	f5 07       	cpc	r31, r21
    140e:	59 f7       	brne	.-42     	; 0x13e6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1410:	08 95       	ret

00001412 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1412:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1414:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1416:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1418:	20 91 35 01 	lds	r18, 0x0135
    or tmpreg1, ddrreg
    141c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    141e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1420:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1422:	30 91 35 01 	lds	r19, 0x0135
    1426:	20 30       	cpi	r18, 0x00	; 0
    1428:	29 f0       	breq	.+10     	; 0x1434 <message_send+0x22>
    142a:	00 00       	nop
    142c:	25 b1       	in	r18, 0x05	; 5
    142e:	23 2b       	or	r18, r19
    1430:	25 b9       	out	0x05, r18	; 5
    1432:	04 c0       	rjmp	.+8      	; 0x143c <message_send+0x2a>
    1434:	00 00       	nop
    1436:	00 00       	nop
    1438:	00 00       	nop
    143a:	00 c0       	rjmp	.+0      	; 0x143c <message_send+0x2a>
    143c:	00 00       	nop
    143e:	00 00       	nop
    1440:	00 00       	nop
    1442:	30 95       	com	r19
    1444:	25 b1       	in	r18, 0x05	; 5
    1446:	23 23       	and	r18, r19
    1448:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    144a:	2e ea       	ldi	r18, 0xAE	; 174
    144c:	2a 95       	dec	r18
    144e:	f1 f7       	brne	.-4      	; 0x144c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1450:	2b ee       	ldi	r18, 0xEB	; 235

00001452 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1452:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1454:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1456:	0a c0       	rjmp	.+20     	; 0x146c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1458:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    145a:	30 91 35 01 	lds	r19, 0x0135
    com tmpreg2
    145e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1460:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1462:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1464:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1466:	0f be       	out	0x3f, r0	; 63
    return 0
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	08 95       	ret

0000146c <nocollision>:
nocollision:
    nop
    146c:	00 00       	nop
    dec tmpreg1
    146e:	2a 95       	dec	r18
    brne checkcollision
    1470:	81 f7       	brne	.-32     	; 0x1452 <checkcollision>

    ldi tmpreg1, 0x01
    1472:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1474:	30 91 35 01 	lds	r19, 0x0135
    1478:	20 30       	cpi	r18, 0x00	; 0
    147a:	29 f0       	breq	.+10     	; 0x1486 <nocollision+0x1a>
    147c:	00 00       	nop
    147e:	25 b1       	in	r18, 0x05	; 5
    1480:	23 2b       	or	r18, r19
    1482:	25 b9       	out	0x05, r18	; 5
    1484:	04 c0       	rjmp	.+8      	; 0x148e <nocollision+0x22>
    1486:	00 00       	nop
    1488:	00 00       	nop
    148a:	00 00       	nop
    148c:	00 c0       	rjmp	.+0      	; 0x148e <nocollision+0x22>
    148e:	00 00       	nop
    1490:	00 00       	nop
    1492:	00 00       	nop
    1494:	30 95       	com	r19
    1496:	25 b1       	in	r18, 0x05	; 5
    1498:	23 23       	and	r18, r19
    149a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    149c:	00 00       	nop
    149e:	24 e5       	ldi	r18, 0x54	; 84
    14a0:	2a 95       	dec	r18
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    14a4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    14a6:	8c e0       	ldi	r24, 0x0C	; 12

000014a8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    14a8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    14ac:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    14ae:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    14b0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    14b2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    14b4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    14b6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    14b8:	50 e0       	ldi	r21, 0x00	; 0

000014ba <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    14ba:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    14bc:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    14be:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    14c0:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    14c2:	30 91 35 01 	lds	r19, 0x0135
    14c6:	20 30       	cpi	r18, 0x00	; 0
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <sendbit+0x1a>
    14ca:	00 00       	nop
    14cc:	25 b1       	in	r18, 0x05	; 5
    14ce:	23 2b       	or	r18, r19
    14d0:	25 b9       	out	0x05, r18	; 5
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <sendbit+0x22>
    14d4:	00 00       	nop
    14d6:	00 00       	nop
    14d8:	00 00       	nop
    14da:	00 c0       	rjmp	.+0      	; 0x14dc <sendbit+0x22>
    14dc:	00 00       	nop
    14de:	00 00       	nop
    14e0:	00 00       	nop
    14e2:	30 95       	com	r19
    14e4:	25 b1       	in	r18, 0x05	; 5
    14e6:	23 23       	and	r18, r19
    14e8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    14ea:	00 00       	nop
    14ec:	21 e5       	ldi	r18, 0x51	; 81
    14ee:	2a 95       	dec	r18
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    14f2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    14f4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    14f6:	9a 95       	dec	r25
    brne sendbit
    14f8:	01 f7       	brne	.-64     	; 0x14ba <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14fa:	8a 95       	dec	r24
    brne sendbyte
    14fc:	a9 f6       	brne	.-86     	; 0x14a8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14fe:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1500:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1502:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1504:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1506:	30 91 35 01 	lds	r19, 0x0135
    com tmpreg2
    150a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    150c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    150e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1510:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1512:	0f be       	out	0x3f, r0	; 63
    return 1
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	08 95       	ret

00001518 <main>:
    order = message->data[0];
}

int main()
{
    kilo_init();
    1518:	0e 94 1d 01 	call	0x23a	; 0x23a <kilo_init>
    kilo_message_rx = message_rx;
    151c:	82 e7       	ldi	r24, 0x72	; 114
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	90 93 06 01 	sts	0x0106, r25
    1524:	80 93 05 01 	sts	0x0105, r24
    kilo_start(setup, loop);
    1528:	60 e8       	ldi	r22, 0x80	; 128
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	81 e7       	ldi	r24, 0x71	; 113
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 19 02 	call	0x432	; 0x432 <kilo_start>
    
    return 0;
}
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	08 95       	ret

0000153a <__divmodhi4>:
    153a:	97 fb       	bst	r25, 7
    153c:	07 2e       	mov	r0, r23
    153e:	16 f4       	brtc	.+4      	; 0x1544 <__divmodhi4+0xa>
    1540:	00 94       	com	r0
    1542:	07 d0       	rcall	.+14     	; 0x1552 <__divmodhi4_neg1>
    1544:	77 fd       	sbrc	r23, 7
    1546:	09 d0       	rcall	.+18     	; 0x155a <__divmodhi4_neg2>
    1548:	0e 94 c6 0a 	call	0x158c	; 0x158c <__udivmodhi4>
    154c:	07 fc       	sbrc	r0, 7
    154e:	05 d0       	rcall	.+10     	; 0x155a <__divmodhi4_neg2>
    1550:	3e f4       	brtc	.+14     	; 0x1560 <__divmodhi4_exit>

00001552 <__divmodhi4_neg1>:
    1552:	90 95       	com	r25
    1554:	81 95       	neg	r24
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__divmodhi4_neg2>:
    155a:	70 95       	com	r23
    155c:	61 95       	neg	r22
    155e:	7f 4f       	sbci	r23, 0xFF	; 255

00001560 <__divmodhi4_exit>:
    1560:	08 95       	ret

00001562 <__tablejump2__>:
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	05 90       	lpm	r0, Z+
    1568:	f4 91       	lpm	r31, Z
    156a:	e0 2d       	mov	r30, r0
    156c:	09 94       	ijmp

0000156e <__umulhisi3>:
    156e:	a2 9f       	mul	r26, r18
    1570:	b0 01       	movw	r22, r0
    1572:	b3 9f       	mul	r27, r19
    1574:	c0 01       	movw	r24, r0
    1576:	a3 9f       	mul	r26, r19
    1578:	70 0d       	add	r23, r0
    157a:	81 1d       	adc	r24, r1
    157c:	11 24       	eor	r1, r1
    157e:	91 1d       	adc	r25, r1
    1580:	b2 9f       	mul	r27, r18
    1582:	70 0d       	add	r23, r0
    1584:	81 1d       	adc	r24, r1
    1586:	11 24       	eor	r1, r1
    1588:	91 1d       	adc	r25, r1
    158a:	08 95       	ret

0000158c <__udivmodhi4>:
    158c:	aa 1b       	sub	r26, r26
    158e:	bb 1b       	sub	r27, r27
    1590:	51 e1       	ldi	r21, 0x11	; 17
    1592:	07 c0       	rjmp	.+14     	; 0x15a2 <__udivmodhi4_ep>

00001594 <__udivmodhi4_loop>:
    1594:	aa 1f       	adc	r26, r26
    1596:	bb 1f       	adc	r27, r27
    1598:	a6 17       	cp	r26, r22
    159a:	b7 07       	cpc	r27, r23
    159c:	10 f0       	brcs	.+4      	; 0x15a2 <__udivmodhi4_ep>
    159e:	a6 1b       	sub	r26, r22
    15a0:	b7 0b       	sbc	r27, r23

000015a2 <__udivmodhi4_ep>:
    15a2:	88 1f       	adc	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	5a 95       	dec	r21
    15a8:	a9 f7       	brne	.-22     	; 0x1594 <__udivmodhi4_loop>
    15aa:	80 95       	com	r24
    15ac:	90 95       	com	r25
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	08 95       	ret

000015b4 <__subsf3>:
    15b4:	50 58       	subi	r21, 0x80	; 128

000015b6 <__addsf3>:
    15b6:	bb 27       	eor	r27, r27
    15b8:	aa 27       	eor	r26, r26
    15ba:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__addsf3x>
    15be:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__fp_round>
    15c2:	0e 94 35 0c 	call	0x186a	; 0x186a <__fp_pscA>
    15c6:	38 f0       	brcs	.+14     	; 0x15d6 <__addsf3+0x20>
    15c8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fp_pscB>
    15cc:	20 f0       	brcs	.+8      	; 0x15d6 <__addsf3+0x20>
    15ce:	39 f4       	brne	.+14     	; 0x15de <__addsf3+0x28>
    15d0:	9f 3f       	cpi	r25, 0xFF	; 255
    15d2:	19 f4       	brne	.+6      	; 0x15da <__addsf3+0x24>
    15d4:	26 f4       	brtc	.+8      	; 0x15de <__addsf3+0x28>
    15d6:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__fp_nan>
    15da:	0e f4       	brtc	.+2      	; 0x15de <__addsf3+0x28>
    15dc:	e0 95       	com	r30
    15de:	e7 fb       	bst	r30, 7
    15e0:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_inf>

000015e4 <__addsf3x>:
    15e4:	e9 2f       	mov	r30, r25
    15e6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_split3>
    15ea:	58 f3       	brcs	.-42     	; 0x15c2 <__addsf3+0xc>
    15ec:	ba 17       	cp	r27, r26
    15ee:	62 07       	cpc	r22, r18
    15f0:	73 07       	cpc	r23, r19
    15f2:	84 07       	cpc	r24, r20
    15f4:	95 07       	cpc	r25, r21
    15f6:	20 f0       	brcs	.+8      	; 0x1600 <__addsf3x+0x1c>
    15f8:	79 f4       	brne	.+30     	; 0x1618 <__addsf3x+0x34>
    15fa:	a6 f5       	brtc	.+104    	; 0x1664 <__addsf3x+0x80>
    15fc:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_zero>
    1600:	0e f4       	brtc	.+2      	; 0x1604 <__addsf3x+0x20>
    1602:	e0 95       	com	r30
    1604:	0b 2e       	mov	r0, r27
    1606:	ba 2f       	mov	r27, r26
    1608:	a0 2d       	mov	r26, r0
    160a:	0b 01       	movw	r0, r22
    160c:	b9 01       	movw	r22, r18
    160e:	90 01       	movw	r18, r0
    1610:	0c 01       	movw	r0, r24
    1612:	ca 01       	movw	r24, r20
    1614:	a0 01       	movw	r20, r0
    1616:	11 24       	eor	r1, r1
    1618:	ff 27       	eor	r31, r31
    161a:	59 1b       	sub	r21, r25
    161c:	99 f0       	breq	.+38     	; 0x1644 <__addsf3x+0x60>
    161e:	59 3f       	cpi	r21, 0xF9	; 249
    1620:	50 f4       	brcc	.+20     	; 0x1636 <__addsf3x+0x52>
    1622:	50 3e       	cpi	r21, 0xE0	; 224
    1624:	68 f1       	brcs	.+90     	; 0x1680 <__addsf3x+0x9c>
    1626:	1a 16       	cp	r1, r26
    1628:	f0 40       	sbci	r31, 0x00	; 0
    162a:	a2 2f       	mov	r26, r18
    162c:	23 2f       	mov	r18, r19
    162e:	34 2f       	mov	r19, r20
    1630:	44 27       	eor	r20, r20
    1632:	58 5f       	subi	r21, 0xF8	; 248
    1634:	f3 cf       	rjmp	.-26     	; 0x161c <__addsf3x+0x38>
    1636:	46 95       	lsr	r20
    1638:	37 95       	ror	r19
    163a:	27 95       	ror	r18
    163c:	a7 95       	ror	r26
    163e:	f0 40       	sbci	r31, 0x00	; 0
    1640:	53 95       	inc	r21
    1642:	c9 f7       	brne	.-14     	; 0x1636 <__addsf3x+0x52>
    1644:	7e f4       	brtc	.+30     	; 0x1664 <__addsf3x+0x80>
    1646:	1f 16       	cp	r1, r31
    1648:	ba 0b       	sbc	r27, r26
    164a:	62 0b       	sbc	r22, r18
    164c:	73 0b       	sbc	r23, r19
    164e:	84 0b       	sbc	r24, r20
    1650:	ba f0       	brmi	.+46     	; 0x1680 <__addsf3x+0x9c>
    1652:	91 50       	subi	r25, 0x01	; 1
    1654:	a1 f0       	breq	.+40     	; 0x167e <__addsf3x+0x9a>
    1656:	ff 0f       	add	r31, r31
    1658:	bb 1f       	adc	r27, r27
    165a:	66 1f       	adc	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	88 1f       	adc	r24, r24
    1660:	c2 f7       	brpl	.-16     	; 0x1652 <__addsf3x+0x6e>
    1662:	0e c0       	rjmp	.+28     	; 0x1680 <__addsf3x+0x9c>
    1664:	ba 0f       	add	r27, r26
    1666:	62 1f       	adc	r22, r18
    1668:	73 1f       	adc	r23, r19
    166a:	84 1f       	adc	r24, r20
    166c:	48 f4       	brcc	.+18     	; 0x1680 <__addsf3x+0x9c>
    166e:	87 95       	ror	r24
    1670:	77 95       	ror	r23
    1672:	67 95       	ror	r22
    1674:	b7 95       	ror	r27
    1676:	f7 95       	ror	r31
    1678:	9e 3f       	cpi	r25, 0xFE	; 254
    167a:	08 f0       	brcs	.+2      	; 0x167e <__addsf3x+0x9a>
    167c:	b0 cf       	rjmp	.-160    	; 0x15de <__addsf3+0x28>
    167e:	93 95       	inc	r25
    1680:	88 0f       	add	r24, r24
    1682:	08 f0       	brcs	.+2      	; 0x1686 <__addsf3x+0xa2>
    1684:	99 27       	eor	r25, r25
    1686:	ee 0f       	add	r30, r30
    1688:	97 95       	ror	r25
    168a:	87 95       	ror	r24
    168c:	08 95       	ret

0000168e <__divsf3>:
    168e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3x>
    1692:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__fp_round>
    1696:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fp_pscB>
    169a:	58 f0       	brcs	.+22     	; 0x16b2 <__divsf3+0x24>
    169c:	0e 94 35 0c 	call	0x186a	; 0x186a <__fp_pscA>
    16a0:	40 f0       	brcs	.+16     	; 0x16b2 <__divsf3+0x24>
    16a2:	29 f4       	brne	.+10     	; 0x16ae <__divsf3+0x20>
    16a4:	5f 3f       	cpi	r21, 0xFF	; 255
    16a6:	29 f0       	breq	.+10     	; 0x16b2 <__divsf3+0x24>
    16a8:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_inf>
    16ac:	51 11       	cpse	r21, r1
    16ae:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_szero>
    16b2:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__fp_nan>

000016b6 <__divsf3x>:
    16b6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_split3>
    16ba:	68 f3       	brcs	.-38     	; 0x1696 <__divsf3+0x8>

000016bc <__divsf3_pse>:
    16bc:	99 23       	and	r25, r25
    16be:	b1 f3       	breq	.-20     	; 0x16ac <__divsf3+0x1e>
    16c0:	55 23       	and	r21, r21
    16c2:	91 f3       	breq	.-28     	; 0x16a8 <__divsf3+0x1a>
    16c4:	95 1b       	sub	r25, r21
    16c6:	55 0b       	sbc	r21, r21
    16c8:	bb 27       	eor	r27, r27
    16ca:	aa 27       	eor	r26, r26
    16cc:	62 17       	cp	r22, r18
    16ce:	73 07       	cpc	r23, r19
    16d0:	84 07       	cpc	r24, r20
    16d2:	38 f0       	brcs	.+14     	; 0x16e2 <__divsf3_pse+0x26>
    16d4:	9f 5f       	subi	r25, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	44 1f       	adc	r20, r20
    16de:	aa 1f       	adc	r26, r26
    16e0:	a9 f3       	breq	.-22     	; 0x16cc <__divsf3_pse+0x10>
    16e2:	35 d0       	rcall	.+106    	; 0x174e <__divsf3_pse+0x92>
    16e4:	0e 2e       	mov	r0, r30
    16e6:	3a f0       	brmi	.+14     	; 0x16f6 <__divsf3_pse+0x3a>
    16e8:	e0 e8       	ldi	r30, 0x80	; 128
    16ea:	32 d0       	rcall	.+100    	; 0x1750 <__divsf3_pse+0x94>
    16ec:	91 50       	subi	r25, 0x01	; 1
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	e6 95       	lsr	r30
    16f2:	00 1c       	adc	r0, r0
    16f4:	ca f7       	brpl	.-14     	; 0x16e8 <__divsf3_pse+0x2c>
    16f6:	2b d0       	rcall	.+86     	; 0x174e <__divsf3_pse+0x92>
    16f8:	fe 2f       	mov	r31, r30
    16fa:	29 d0       	rcall	.+82     	; 0x174e <__divsf3_pse+0x92>
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	bb 1f       	adc	r27, r27
    1704:	26 17       	cp	r18, r22
    1706:	37 07       	cpc	r19, r23
    1708:	48 07       	cpc	r20, r24
    170a:	ab 07       	cpc	r26, r27
    170c:	b0 e8       	ldi	r27, 0x80	; 128
    170e:	09 f0       	breq	.+2      	; 0x1712 <__divsf3_pse+0x56>
    1710:	bb 0b       	sbc	r27, r27
    1712:	80 2d       	mov	r24, r0
    1714:	bf 01       	movw	r22, r30
    1716:	ff 27       	eor	r31, r31
    1718:	93 58       	subi	r25, 0x83	; 131
    171a:	5f 4f       	sbci	r21, 0xFF	; 255
    171c:	3a f0       	brmi	.+14     	; 0x172c <__divsf3_pse+0x70>
    171e:	9e 3f       	cpi	r25, 0xFE	; 254
    1720:	51 05       	cpc	r21, r1
    1722:	78 f0       	brcs	.+30     	; 0x1742 <__divsf3_pse+0x86>
    1724:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_inf>
    1728:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_szero>
    172c:	5f 3f       	cpi	r21, 0xFF	; 255
    172e:	e4 f3       	brlt	.-8      	; 0x1728 <__divsf3_pse+0x6c>
    1730:	98 3e       	cpi	r25, 0xE8	; 232
    1732:	d4 f3       	brlt	.-12     	; 0x1728 <__divsf3_pse+0x6c>
    1734:	86 95       	lsr	r24
    1736:	77 95       	ror	r23
    1738:	67 95       	ror	r22
    173a:	b7 95       	ror	r27
    173c:	f7 95       	ror	r31
    173e:	9f 5f       	subi	r25, 0xFF	; 255
    1740:	c9 f7       	brne	.-14     	; 0x1734 <__divsf3_pse+0x78>
    1742:	88 0f       	add	r24, r24
    1744:	91 1d       	adc	r25, r1
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	97 f9       	bld	r25, 7
    174c:	08 95       	ret
    174e:	e1 e0       	ldi	r30, 0x01	; 1
    1750:	66 0f       	add	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	88 1f       	adc	r24, r24
    1756:	bb 1f       	adc	r27, r27
    1758:	62 17       	cp	r22, r18
    175a:	73 07       	cpc	r23, r19
    175c:	84 07       	cpc	r24, r20
    175e:	ba 07       	cpc	r27, r26
    1760:	20 f0       	brcs	.+8      	; 0x176a <__divsf3_pse+0xae>
    1762:	62 1b       	sub	r22, r18
    1764:	73 0b       	sbc	r23, r19
    1766:	84 0b       	sbc	r24, r20
    1768:	ba 0b       	sbc	r27, r26
    176a:	ee 1f       	adc	r30, r30
    176c:	88 f7       	brcc	.-30     	; 0x1750 <__divsf3_pse+0x94>
    176e:	e0 95       	com	r30
    1770:	08 95       	ret

00001772 <__fixsfsi>:
    1772:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__fixunssfsi>
    1776:	68 94       	set
    1778:	b1 11       	cpse	r27, r1
    177a:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_szero>
    177e:	08 95       	ret

00001780 <__fixunssfsi>:
    1780:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__fp_splitA>
    1784:	88 f0       	brcs	.+34     	; 0x17a8 <__fixunssfsi+0x28>
    1786:	9f 57       	subi	r25, 0x7F	; 127
    1788:	98 f0       	brcs	.+38     	; 0x17b0 <__fixunssfsi+0x30>
    178a:	b9 2f       	mov	r27, r25
    178c:	99 27       	eor	r25, r25
    178e:	b7 51       	subi	r27, 0x17	; 23
    1790:	b0 f0       	brcs	.+44     	; 0x17be <__fixunssfsi+0x3e>
    1792:	e1 f0       	breq	.+56     	; 0x17cc <__fixunssfsi+0x4c>
    1794:	66 0f       	add	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	1a f0       	brmi	.+6      	; 0x17a4 <__fixunssfsi+0x24>
    179e:	ba 95       	dec	r27
    17a0:	c9 f7       	brne	.-14     	; 0x1794 <__fixunssfsi+0x14>
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <__fixunssfsi+0x4c>
    17a4:	b1 30       	cpi	r27, 0x01	; 1
    17a6:	91 f0       	breq	.+36     	; 0x17cc <__fixunssfsi+0x4c>
    17a8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__fp_zero>
    17ac:	b1 e0       	ldi	r27, 0x01	; 1
    17ae:	08 95       	ret
    17b0:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_zero>
    17b4:	67 2f       	mov	r22, r23
    17b6:	78 2f       	mov	r23, r24
    17b8:	88 27       	eor	r24, r24
    17ba:	b8 5f       	subi	r27, 0xF8	; 248
    17bc:	39 f0       	breq	.+14     	; 0x17cc <__fixunssfsi+0x4c>
    17be:	b9 3f       	cpi	r27, 0xF9	; 249
    17c0:	cc f3       	brlt	.-14     	; 0x17b4 <__fixunssfsi+0x34>
    17c2:	86 95       	lsr	r24
    17c4:	77 95       	ror	r23
    17c6:	67 95       	ror	r22
    17c8:	b3 95       	inc	r27
    17ca:	d9 f7       	brne	.-10     	; 0x17c2 <__fixunssfsi+0x42>
    17cc:	3e f4       	brtc	.+14     	; 0x17dc <__fixunssfsi+0x5c>
    17ce:	90 95       	com	r25
    17d0:	80 95       	com	r24
    17d2:	70 95       	com	r23
    17d4:	61 95       	neg	r22
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	08 95       	ret

000017de <__floatunsisf>:
    17de:	e8 94       	clt
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <__floatsisf+0x12>

000017e2 <__floatsisf>:
    17e2:	97 fb       	bst	r25, 7
    17e4:	3e f4       	brtc	.+14     	; 0x17f4 <__floatsisf+0x12>
    17e6:	90 95       	com	r25
    17e8:	80 95       	com	r24
    17ea:	70 95       	com	r23
    17ec:	61 95       	neg	r22
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8f 4f       	sbci	r24, 0xFF	; 255
    17f2:	9f 4f       	sbci	r25, 0xFF	; 255
    17f4:	99 23       	and	r25, r25
    17f6:	a9 f0       	breq	.+42     	; 0x1822 <__floatsisf+0x40>
    17f8:	f9 2f       	mov	r31, r25
    17fa:	96 e9       	ldi	r25, 0x96	; 150
    17fc:	bb 27       	eor	r27, r27
    17fe:	93 95       	inc	r25
    1800:	f6 95       	lsr	r31
    1802:	87 95       	ror	r24
    1804:	77 95       	ror	r23
    1806:	67 95       	ror	r22
    1808:	b7 95       	ror	r27
    180a:	f1 11       	cpse	r31, r1
    180c:	f8 cf       	rjmp	.-16     	; 0x17fe <__floatsisf+0x1c>
    180e:	fa f4       	brpl	.+62     	; 0x184e <__floatsisf+0x6c>
    1810:	bb 0f       	add	r27, r27
    1812:	11 f4       	brne	.+4      	; 0x1818 <__floatsisf+0x36>
    1814:	60 ff       	sbrs	r22, 0
    1816:	1b c0       	rjmp	.+54     	; 0x184e <__floatsisf+0x6c>
    1818:	6f 5f       	subi	r22, 0xFF	; 255
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	8f 4f       	sbci	r24, 0xFF	; 255
    181e:	9f 4f       	sbci	r25, 0xFF	; 255
    1820:	16 c0       	rjmp	.+44     	; 0x184e <__floatsisf+0x6c>
    1822:	88 23       	and	r24, r24
    1824:	11 f0       	breq	.+4      	; 0x182a <__floatsisf+0x48>
    1826:	96 e9       	ldi	r25, 0x96	; 150
    1828:	11 c0       	rjmp	.+34     	; 0x184c <__floatsisf+0x6a>
    182a:	77 23       	and	r23, r23
    182c:	21 f0       	breq	.+8      	; 0x1836 <__floatsisf+0x54>
    182e:	9e e8       	ldi	r25, 0x8E	; 142
    1830:	87 2f       	mov	r24, r23
    1832:	76 2f       	mov	r23, r22
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <__floatsisf+0x5e>
    1836:	66 23       	and	r22, r22
    1838:	71 f0       	breq	.+28     	; 0x1856 <__floatsisf+0x74>
    183a:	96 e8       	ldi	r25, 0x86	; 134
    183c:	86 2f       	mov	r24, r22
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	2a f0       	brmi	.+10     	; 0x184e <__floatsisf+0x6c>
    1844:	9a 95       	dec	r25
    1846:	66 0f       	add	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	da f7       	brpl	.-10     	; 0x1844 <__floatsisf+0x62>
    184e:	88 0f       	add	r24, r24
    1850:	96 95       	lsr	r25
    1852:	87 95       	ror	r24
    1854:	97 f9       	bld	r25, 7
    1856:	08 95       	ret

00001858 <__fp_inf>:
    1858:	97 f9       	bld	r25, 7
    185a:	9f 67       	ori	r25, 0x7F	; 127
    185c:	80 e8       	ldi	r24, 0x80	; 128
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	08 95       	ret

00001864 <__fp_nan>:
    1864:	9f ef       	ldi	r25, 0xFF	; 255
    1866:	80 ec       	ldi	r24, 0xC0	; 192
    1868:	08 95       	ret

0000186a <__fp_pscA>:
    186a:	00 24       	eor	r0, r0
    186c:	0a 94       	dec	r0
    186e:	16 16       	cp	r1, r22
    1870:	17 06       	cpc	r1, r23
    1872:	18 06       	cpc	r1, r24
    1874:	09 06       	cpc	r0, r25
    1876:	08 95       	ret

00001878 <__fp_pscB>:
    1878:	00 24       	eor	r0, r0
    187a:	0a 94       	dec	r0
    187c:	12 16       	cp	r1, r18
    187e:	13 06       	cpc	r1, r19
    1880:	14 06       	cpc	r1, r20
    1882:	05 06       	cpc	r0, r21
    1884:	08 95       	ret

00001886 <__fp_round>:
    1886:	09 2e       	mov	r0, r25
    1888:	03 94       	inc	r0
    188a:	00 0c       	add	r0, r0
    188c:	11 f4       	brne	.+4      	; 0x1892 <__fp_round+0xc>
    188e:	88 23       	and	r24, r24
    1890:	52 f0       	brmi	.+20     	; 0x18a6 <__fp_round+0x20>
    1892:	bb 0f       	add	r27, r27
    1894:	40 f4       	brcc	.+16     	; 0x18a6 <__fp_round+0x20>
    1896:	bf 2b       	or	r27, r31
    1898:	11 f4       	brne	.+4      	; 0x189e <__fp_round+0x18>
    189a:	60 ff       	sbrs	r22, 0
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <__fp_round+0x20>
    189e:	6f 5f       	subi	r22, 0xFF	; 255
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255
    18a2:	8f 4f       	sbci	r24, 0xFF	; 255
    18a4:	9f 4f       	sbci	r25, 0xFF	; 255
    18a6:	08 95       	ret

000018a8 <__fp_split3>:
    18a8:	57 fd       	sbrc	r21, 7
    18aa:	90 58       	subi	r25, 0x80	; 128
    18ac:	44 0f       	add	r20, r20
    18ae:	55 1f       	adc	r21, r21
    18b0:	59 f0       	breq	.+22     	; 0x18c8 <__fp_splitA+0x10>
    18b2:	5f 3f       	cpi	r21, 0xFF	; 255
    18b4:	71 f0       	breq	.+28     	; 0x18d2 <__fp_splitA+0x1a>
    18b6:	47 95       	ror	r20

000018b8 <__fp_splitA>:
    18b8:	88 0f       	add	r24, r24
    18ba:	97 fb       	bst	r25, 7
    18bc:	99 1f       	adc	r25, r25
    18be:	61 f0       	breq	.+24     	; 0x18d8 <__fp_splitA+0x20>
    18c0:	9f 3f       	cpi	r25, 0xFF	; 255
    18c2:	79 f0       	breq	.+30     	; 0x18e2 <__fp_splitA+0x2a>
    18c4:	87 95       	ror	r24
    18c6:	08 95       	ret
    18c8:	12 16       	cp	r1, r18
    18ca:	13 06       	cpc	r1, r19
    18cc:	14 06       	cpc	r1, r20
    18ce:	55 1f       	adc	r21, r21
    18d0:	f2 cf       	rjmp	.-28     	; 0x18b6 <__fp_split3+0xe>
    18d2:	46 95       	lsr	r20
    18d4:	f1 df       	rcall	.-30     	; 0x18b8 <__fp_splitA>
    18d6:	08 c0       	rjmp	.+16     	; 0x18e8 <__fp_splitA+0x30>
    18d8:	16 16       	cp	r1, r22
    18da:	17 06       	cpc	r1, r23
    18dc:	18 06       	cpc	r1, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	f1 cf       	rjmp	.-30     	; 0x18c4 <__fp_splitA+0xc>
    18e2:	86 95       	lsr	r24
    18e4:	71 05       	cpc	r23, r1
    18e6:	61 05       	cpc	r22, r1
    18e8:	08 94       	sec
    18ea:	08 95       	ret

000018ec <__fp_zero>:
    18ec:	e8 94       	clt

000018ee <__fp_szero>:
    18ee:	bb 27       	eor	r27, r27
    18f0:	66 27       	eor	r22, r22
    18f2:	77 27       	eor	r23, r23
    18f4:	cb 01       	movw	r24, r22
    18f6:	97 f9       	bld	r25, 7
    18f8:	08 95       	ret

000018fa <__mulsf3>:
    18fa:	0e 94 90 0c 	call	0x1920	; 0x1920 <__mulsf3x>
    18fe:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__fp_round>
    1902:	0e 94 35 0c 	call	0x186a	; 0x186a <__fp_pscA>
    1906:	38 f0       	brcs	.+14     	; 0x1916 <__mulsf3+0x1c>
    1908:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fp_pscB>
    190c:	20 f0       	brcs	.+8      	; 0x1916 <__mulsf3+0x1c>
    190e:	95 23       	and	r25, r21
    1910:	11 f0       	breq	.+4      	; 0x1916 <__mulsf3+0x1c>
    1912:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_inf>
    1916:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__fp_nan>
    191a:	11 24       	eor	r1, r1
    191c:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_szero>

00001920 <__mulsf3x>:
    1920:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_split3>
    1924:	70 f3       	brcs	.-36     	; 0x1902 <__mulsf3+0x8>

00001926 <__mulsf3_pse>:
    1926:	95 9f       	mul	r25, r21
    1928:	c1 f3       	breq	.-16     	; 0x191a <__mulsf3+0x20>
    192a:	95 0f       	add	r25, r21
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	55 1f       	adc	r21, r21
    1930:	62 9f       	mul	r22, r18
    1932:	f0 01       	movw	r30, r0
    1934:	72 9f       	mul	r23, r18
    1936:	bb 27       	eor	r27, r27
    1938:	f0 0d       	add	r31, r0
    193a:	b1 1d       	adc	r27, r1
    193c:	63 9f       	mul	r22, r19
    193e:	aa 27       	eor	r26, r26
    1940:	f0 0d       	add	r31, r0
    1942:	b1 1d       	adc	r27, r1
    1944:	aa 1f       	adc	r26, r26
    1946:	64 9f       	mul	r22, r20
    1948:	66 27       	eor	r22, r22
    194a:	b0 0d       	add	r27, r0
    194c:	a1 1d       	adc	r26, r1
    194e:	66 1f       	adc	r22, r22
    1950:	82 9f       	mul	r24, r18
    1952:	22 27       	eor	r18, r18
    1954:	b0 0d       	add	r27, r0
    1956:	a1 1d       	adc	r26, r1
    1958:	62 1f       	adc	r22, r18
    195a:	73 9f       	mul	r23, r19
    195c:	b0 0d       	add	r27, r0
    195e:	a1 1d       	adc	r26, r1
    1960:	62 1f       	adc	r22, r18
    1962:	83 9f       	mul	r24, r19
    1964:	a0 0d       	add	r26, r0
    1966:	61 1d       	adc	r22, r1
    1968:	22 1f       	adc	r18, r18
    196a:	74 9f       	mul	r23, r20
    196c:	33 27       	eor	r19, r19
    196e:	a0 0d       	add	r26, r0
    1970:	61 1d       	adc	r22, r1
    1972:	23 1f       	adc	r18, r19
    1974:	84 9f       	mul	r24, r20
    1976:	60 0d       	add	r22, r0
    1978:	21 1d       	adc	r18, r1
    197a:	82 2f       	mov	r24, r18
    197c:	76 2f       	mov	r23, r22
    197e:	6a 2f       	mov	r22, r26
    1980:	11 24       	eor	r1, r1
    1982:	9f 57       	subi	r25, 0x7F	; 127
    1984:	50 40       	sbci	r21, 0x00	; 0
    1986:	9a f0       	brmi	.+38     	; 0x19ae <__mulsf3_pse+0x88>
    1988:	f1 f0       	breq	.+60     	; 0x19c6 <__mulsf3_pse+0xa0>
    198a:	88 23       	and	r24, r24
    198c:	4a f0       	brmi	.+18     	; 0x19a0 <__mulsf3_pse+0x7a>
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	bb 1f       	adc	r27, r27
    1994:	66 1f       	adc	r22, r22
    1996:	77 1f       	adc	r23, r23
    1998:	88 1f       	adc	r24, r24
    199a:	91 50       	subi	r25, 0x01	; 1
    199c:	50 40       	sbci	r21, 0x00	; 0
    199e:	a9 f7       	brne	.-22     	; 0x198a <__mulsf3_pse+0x64>
    19a0:	9e 3f       	cpi	r25, 0xFE	; 254
    19a2:	51 05       	cpc	r21, r1
    19a4:	80 f0       	brcs	.+32     	; 0x19c6 <__mulsf3_pse+0xa0>
    19a6:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_inf>
    19aa:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_szero>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	e4 f3       	brlt	.-8      	; 0x19aa <__mulsf3_pse+0x84>
    19b2:	98 3e       	cpi	r25, 0xE8	; 232
    19b4:	d4 f3       	brlt	.-12     	; 0x19aa <__mulsf3_pse+0x84>
    19b6:	86 95       	lsr	r24
    19b8:	77 95       	ror	r23
    19ba:	67 95       	ror	r22
    19bc:	b7 95       	ror	r27
    19be:	f7 95       	ror	r31
    19c0:	e7 95       	ror	r30
    19c2:	9f 5f       	subi	r25, 0xFF	; 255
    19c4:	c1 f7       	brne	.-16     	; 0x19b6 <__mulsf3_pse+0x90>
    19c6:	fe 2b       	or	r31, r30
    19c8:	88 0f       	add	r24, r24
    19ca:	91 1d       	adc	r25, r1
    19cc:	96 95       	lsr	r25
    19ce:	87 95       	ror	r24
    19d0:	97 f9       	bld	r25, 7
    19d2:	08 95       	ret

000019d4 <do_rand>:
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	ec 01       	movw	r28, r24
    19ea:	68 81       	ld	r22, Y
    19ec:	79 81       	ldd	r23, Y+1	; 0x01
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	9b 81       	ldd	r25, Y+3	; 0x03
    19f2:	61 15       	cp	r22, r1
    19f4:	71 05       	cpc	r23, r1
    19f6:	81 05       	cpc	r24, r1
    19f8:	91 05       	cpc	r25, r1
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <do_rand+0x30>
    19fc:	64 e2       	ldi	r22, 0x24	; 36
    19fe:	79 ed       	ldi	r23, 0xD9	; 217
    1a00:	8b e5       	ldi	r24, 0x5B	; 91
    1a02:	97 e0       	ldi	r25, 0x07	; 7
    1a04:	2d e1       	ldi	r18, 0x1D	; 29
    1a06:	33 ef       	ldi	r19, 0xF3	; 243
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__divmodsi4>
    1a10:	49 01       	movw	r8, r18
    1a12:	5a 01       	movw	r10, r20
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	a7 ea       	ldi	r26, 0xA7	; 167
    1a1a:	b1 e4       	ldi	r27, 0x41	; 65
    1a1c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__muluhisi3>
    1a20:	6b 01       	movw	r12, r22
    1a22:	7c 01       	movw	r14, r24
    1a24:	ac ee       	ldi	r26, 0xEC	; 236
    1a26:	b4 ef       	ldi	r27, 0xF4	; 244
    1a28:	a5 01       	movw	r20, r10
    1a2a:	94 01       	movw	r18, r8
    1a2c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__mulohisi3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8c 0d       	add	r24, r12
    1a36:	9d 1d       	adc	r25, r13
    1a38:	ae 1d       	adc	r26, r14
    1a3a:	bf 1d       	adc	r27, r15
    1a3c:	b7 ff       	sbrs	r27, 7
    1a3e:	03 c0       	rjmp	.+6      	; 0x1a46 <do_rand+0x72>
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	a1 09       	sbc	r26, r1
    1a44:	b0 48       	sbci	r27, 0x80	; 128
    1a46:	88 83       	st	Y, r24
    1a48:	99 83       	std	Y+1, r25	; 0x01
    1a4a:	aa 83       	std	Y+2, r26	; 0x02
    1a4c:	bb 83       	std	Y+3, r27	; 0x03
    1a4e:	9f 77       	andi	r25, 0x7F	; 127
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	df 90       	pop	r13
    1a5a:	cf 90       	pop	r12
    1a5c:	bf 90       	pop	r11
    1a5e:	af 90       	pop	r10
    1a60:	9f 90       	pop	r9
    1a62:	8f 90       	pop	r8
    1a64:	08 95       	ret

00001a66 <rand_r>:
    1a66:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <do_rand>
    1a6a:	08 95       	ret

00001a6c <rand>:
    1a6c:	87 e0       	ldi	r24, 0x07	; 7
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <do_rand>
    1a74:	08 95       	ret

00001a76 <srand>:
    1a76:	a0 e0       	ldi	r26, 0x00	; 0
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	80 93 07 01 	sts	0x0107, r24
    1a7e:	90 93 08 01 	sts	0x0108, r25
    1a82:	a0 93 09 01 	sts	0x0109, r26
    1a86:	b0 93 0a 01 	sts	0x010A, r27
    1a8a:	08 95       	ret

00001a8c <eeprom_read_byte>:
    1a8c:	f9 99       	sbic	0x1f, 1	; 31
    1a8e:	fe cf       	rjmp	.-4      	; 0x1a8c <eeprom_read_byte>
    1a90:	92 bd       	out	0x22, r25	; 34
    1a92:	81 bd       	out	0x21, r24	; 33
    1a94:	f8 9a       	sbi	0x1f, 0	; 31
    1a96:	99 27       	eor	r25, r25
    1a98:	80 b5       	in	r24, 0x20	; 32
    1a9a:	08 95       	ret

00001a9c <eeprom_write_byte>:
    1a9c:	26 2f       	mov	r18, r22

00001a9e <eeprom_write_r18>:
    1a9e:	f9 99       	sbic	0x1f, 1	; 31
    1aa0:	fe cf       	rjmp	.-4      	; 0x1a9e <eeprom_write_r18>
    1aa2:	1f ba       	out	0x1f, r1	; 31
    1aa4:	92 bd       	out	0x22, r25	; 34
    1aa6:	81 bd       	out	0x21, r24	; 33
    1aa8:	20 bd       	out	0x20, r18	; 32
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	fa 9a       	sbi	0x1f, 2	; 31
    1ab0:	f9 9a       	sbi	0x1f, 1	; 31
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	08 95       	ret

00001ab8 <__divmodsi4>:
    1ab8:	05 2e       	mov	r0, r21
    1aba:	97 fb       	bst	r25, 7
    1abc:	1e f4       	brtc	.+6      	; 0x1ac4 <__divmodsi4+0xc>
    1abe:	00 94       	com	r0
    1ac0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__negsi2>
    1ac4:	57 fd       	sbrc	r21, 7
    1ac6:	07 d0       	rcall	.+14     	; 0x1ad6 <__divmodsi4_neg2>
    1ac8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__udivmodsi4>
    1acc:	07 fc       	sbrc	r0, 7
    1ace:	03 d0       	rcall	.+6      	; 0x1ad6 <__divmodsi4_neg2>
    1ad0:	4e f4       	brtc	.+18     	; 0x1ae4 <__divmodsi4_exit>
    1ad2:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__negsi2>

00001ad6 <__divmodsi4_neg2>:
    1ad6:	50 95       	com	r21
    1ad8:	40 95       	com	r20
    1ada:	30 95       	com	r19
    1adc:	21 95       	neg	r18
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae4 <__divmodsi4_exit>:
    1ae4:	08 95       	ret

00001ae6 <__negsi2>:
    1ae6:	90 95       	com	r25
    1ae8:	80 95       	com	r24
    1aea:	70 95       	com	r23
    1aec:	61 95       	neg	r22
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8f 4f       	sbci	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	08 95       	ret

00001af6 <__muluhisi3>:
    1af6:	0e 94 b7 0a 	call	0x156e	; 0x156e <__umulhisi3>
    1afa:	a5 9f       	mul	r26, r21
    1afc:	90 0d       	add	r25, r0
    1afe:	b4 9f       	mul	r27, r20
    1b00:	90 0d       	add	r25, r0
    1b02:	a4 9f       	mul	r26, r20
    1b04:	80 0d       	add	r24, r0
    1b06:	91 1d       	adc	r25, r1
    1b08:	11 24       	eor	r1, r1
    1b0a:	08 95       	ret

00001b0c <__mulshisi3>:
    1b0c:	b7 ff       	sbrs	r27, 7
    1b0e:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__muluhisi3>

00001b12 <__mulohisi3>:
    1b12:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__muluhisi3>
    1b16:	82 1b       	sub	r24, r18
    1b18:	93 0b       	sbc	r25, r19
    1b1a:	08 95       	ret

00001b1c <__udivmodsi4>:
    1b1c:	a1 e2       	ldi	r26, 0x21	; 33
    1b1e:	1a 2e       	mov	r1, r26
    1b20:	aa 1b       	sub	r26, r26
    1b22:	bb 1b       	sub	r27, r27
    1b24:	fd 01       	movw	r30, r26
    1b26:	0d c0       	rjmp	.+26     	; 0x1b42 <__udivmodsi4_ep>

00001b28 <__udivmodsi4_loop>:
    1b28:	aa 1f       	adc	r26, r26
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	ee 1f       	adc	r30, r30
    1b2e:	ff 1f       	adc	r31, r31
    1b30:	a2 17       	cp	r26, r18
    1b32:	b3 07       	cpc	r27, r19
    1b34:	e4 07       	cpc	r30, r20
    1b36:	f5 07       	cpc	r31, r21
    1b38:	20 f0       	brcs	.+8      	; 0x1b42 <__udivmodsi4_ep>
    1b3a:	a2 1b       	sub	r26, r18
    1b3c:	b3 0b       	sbc	r27, r19
    1b3e:	e4 0b       	sbc	r30, r20
    1b40:	f5 0b       	sbc	r31, r21

00001b42 <__udivmodsi4_ep>:
    1b42:	66 1f       	adc	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	1a 94       	dec	r1
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <__udivmodsi4_loop>
    1b4e:	60 95       	com	r22
    1b50:	70 95       	com	r23
    1b52:	80 95       	com	r24
    1b54:	90 95       	com	r25
    1b56:	9b 01       	movw	r18, r22
    1b58:	ac 01       	movw	r20, r24
    1b5a:	bd 01       	movw	r22, r26
    1b5c:	cf 01       	movw	r24, r30
    1b5e:	08 95       	ret

00001b60 <_exit>:
    1b60:	f8 94       	cli

00001b62 <__stop_program>:
    1b62:	ff cf       	rjmp	.-2      	; 0x1b62 <__stop_program>
