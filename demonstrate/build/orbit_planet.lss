
build/orbit_planet.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0f 03       	fmul	r16, r23
      6a:	8b 03       	fmulsu	r16, r19
      6c:	e3 02       	muls	r30, r19
      6e:	da 02       	muls	r29, r26
      70:	e0 02       	muls	r30, r16
      72:	6d 03       	fmul	r22, r21
      74:	62 03       	mulsu	r22, r18
      76:	ed 09       	sbc	r30, r13
      78:	ca 08       	sbc	r12, r10
      7a:	ca 08       	sbc	r12, r10
      7c:	ea 09       	sbc	r30, r10
      7e:	f6 09       	sbc	r31, r6
      80:	e6 09       	sbc	r30, r6
      82:	fd 09       	sbc	r31, r13
      84:	f9 09       	sbc	r31, r9
      86:	01 0a       	sbc	r0, r17
      88:	b9 09       	sbc	r27, r9
      8a:	8b 09       	sbc	r24, r11

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e4       	ldi	r30, 0x4C	; 76
      b8:	f2 e2       	ldi	r31, 0x22	; 34
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a4 33       	cpi	r26, 0x34	; 52
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a4 e3       	ldi	r26, 0x34	; 52
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a8 3a       	cpi	r26, 0xA8	; 168
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 33 0b 	call	0x1666	; 0x1666 <main>
      da:	0c 94 24 11 	jmp	0x2248	; 0x2248 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:

}

void setup()
{
    last_update = kilo_ticks;
      f4:	80 91 67 01 	lds	r24, 0x0167
      f8:	90 91 68 01 	lds	r25, 0x0168
      fc:	a0 91 69 01 	lds	r26, 0x0169
     100:	b0 91 6a 01 	lds	r27, 0x016A
     104:	80 93 40 01 	sts	0x0140, r24
     108:	90 93 41 01 	sts	0x0141, r25
     10c:	a0 93 42 01 	sts	0x0142, r26
     110:	b0 93 43 01 	sts	0x0143, r27
    mini_distance = 500;
     114:	84 ef       	ldi	r24, 0xF4	; 244
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	90 93 3f 01 	sts	0x013F, r25
     11c:	80 93 3e 01 	sts	0x013E, r24
     120:	08 95       	ret

00000122 <message_rx>:
       
    }
}

void message_rx(message_t *m, distance_measurement_t *d)
{
     122:	cb 01       	movw	r24, r22
    new_message = 1;
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	30 93 35 01 	sts	0x0135, r19
     12c:	20 93 34 01 	sts	0x0134, r18
    distance = estimate_distance(d);
     130:	0e 94 09 05 	call	0xa12	; 0xa12 <estimate_distance>
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	90 93 3d 01 	sts	0x013D, r25
     13a:	80 93 3c 01 	sts	0x013C, r24
     13e:	08 95       	ret

00000140 <loop>:
    last_update = kilo_ticks;
    mini_distance = 500;
}

void loop()
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
    //printf("d1: %d\n", distance);
    //sample_light();
    if (mini_distance > distance){
     144:	20 91 3e 01 	lds	r18, 0x013E
     148:	30 91 3f 01 	lds	r19, 0x013F
     14c:	80 91 3c 01 	lds	r24, 0x013C
     150:	90 91 3d 01 	lds	r25, 0x013D
     154:	82 17       	cp	r24, r18
     156:	93 07       	cpc	r25, r19
     158:	2c f4       	brge	.+10     	; 0x164 <loop+0x24>
        mini_distance = distance;
     15a:	90 93 3f 01 	sts	0x013F, r25
     15e:	80 93 3e 01 	sts	0x013E, r24
     162:	9c 01       	movw	r18, r24
    }
    // Update the motion if a message is received.
    if (kilo_ticks > (last_update+16)){
     164:	40 91 67 01 	lds	r20, 0x0167
     168:	50 91 68 01 	lds	r21, 0x0168
     16c:	60 91 69 01 	lds	r22, 0x0169
     170:	70 91 6a 01 	lds	r23, 0x016A
     174:	80 91 40 01 	lds	r24, 0x0140
     178:	90 91 41 01 	lds	r25, 0x0141
     17c:	a0 91 42 01 	lds	r26, 0x0142
     180:	b0 91 43 01 	lds	r27, 0x0143
     184:	40 96       	adiw	r24, 0x10	; 16
     186:	a1 1d       	adc	r26, r1
     188:	b1 1d       	adc	r27, r1
     18a:	84 17       	cp	r24, r20
     18c:	95 07       	cpc	r25, r21
     18e:	a6 07       	cpc	r26, r22
     190:	b7 07       	cpc	r27, r23
     192:	18 f0       	brcs	.+6      	; 0x19a <loop+0x5a>
		}
	    }
        mini_distance = 500;
       
    }
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret
        mini_distance = distance;
    }
    // Update the motion if a message is received.
    if (kilo_ticks > (last_update+16)){

        last_update = kilo_ticks;
     19a:	80 91 67 01 	lds	r24, 0x0167
     19e:	90 91 68 01 	lds	r25, 0x0168
     1a2:	a0 91 69 01 	lds	r26, 0x0169
     1a6:	b0 91 6a 01 	lds	r27, 0x016A
     1aa:	80 93 40 01 	sts	0x0140, r24
     1ae:	90 93 41 01 	sts	0x0141, r25
     1b2:	a0 93 42 01 	sts	0x0142, r26
     1b6:	b0 93 43 01 	sts	0x0143, r27
	printf("time to change: %d\n",mini_distance);
     1ba:	3f 93       	push	r19
     1bc:	2f 93       	push	r18
     1be:	89 e1       	ldi	r24, 0x19	; 25
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	9f 93       	push	r25
     1c4:	8f 93       	push	r24
     1c6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <printf>
	    if (new_message == 1)
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	c0 91 34 01 	lds	r28, 0x0134
     1d6:	d0 91 35 01 	lds	r29, 0x0135
     1da:	c1 30       	cpi	r28, 0x01	; 1
     1dc:	d1 05       	cpc	r29, r1
     1de:	49 f0       	breq	.+18     	; 0x1f2 <loop+0xb2>
		        set_color(RGB(0, 0, 1));
		        set_motion(RIGHT);
		    }
		}
	    }
        mini_distance = 500;
     1e0:	84 ef       	ldi	r24, 0xF4	; 244
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	90 93 3f 01 	sts	0x013F, r25
     1e8:	80 93 3e 01 	sts	0x013E, r24
       
    }
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

        last_update = kilo_ticks;
	printf("time to change: %d\n",mini_distance);
	    if (new_message == 1)
	    {
		new_message = 0;
     1f2:	10 92 35 01 	sts	0x0135, r1
     1f6:	10 92 34 01 	sts	0x0134, r1
		
		// If too close, move forward to get back into orbit.
		if (distance < TOO_CLOSE_DISTANCE)
     1fa:	80 91 3c 01 	lds	r24, 0x013C
     1fe:	90 91 3d 01 	lds	r25, 0x013D
     202:	88 32       	cpi	r24, 0x28	; 40
     204:	91 05       	cpc	r25, r1
     206:	84 f1       	brlt	.+96     	; 0x268 <loop+0x128>
		}
		// If not too close, turn left or right depending on distance,
		// to maintain orbit.
		else
		{
		    if (distance < DESIRED_DISTANCE)
     208:	cc 97       	sbiw	r24, 0x3c	; 60
     20a:	bc f4       	brge	.+46     	; 0x23a <loop+0xfa>
		    {
		        set_color(RGB(1, 0, 0));
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	0e 94 44 08 	call	0x1088	; 0x1088 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     212:	80 91 36 01 	lds	r24, 0x0136
     216:	90 91 37 01 	lds	r25, 0x0137
     21a:	02 97       	sbiw	r24, 0x02	; 2
     21c:	09 f3       	breq	.-62     	; 0x1e0 <loop+0xa0>
    {
        current_motion = new_motion;
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	90 93 37 01 	sts	0x0137, r25
     226:	80 93 36 01 	sts	0x0136, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     22a:	0e 94 28 04 	call	0x850	; 0x850 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	80 91 a1 01 	lds	r24, 0x01A1
     234:	0e 94 23 04 	call	0x846	; 0x846 <set_motors>
     238:	d3 cf       	rjmp	.-90     	; 0x1e0 <loop+0xa0>
		        set_color(RGB(1, 0, 0));
		        set_motion(LEFT);
		    }
		    else
		    {
		        set_color(RGB(0, 0, 1));
     23a:	80 e1       	ldi	r24, 0x10	; 16
     23c:	0e 94 44 08 	call	0x1088	; 0x1088 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     240:	80 91 36 01 	lds	r24, 0x0136
     244:	90 91 37 01 	lds	r25, 0x0137
     248:	03 97       	sbiw	r24, 0x03	; 3
     24a:	51 f2       	breq	.-108    	; 0x1e0 <loop+0xa0>
    {
        current_motion = new_motion;
     24c:	83 e0       	ldi	r24, 0x03	; 3
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 37 01 	sts	0x0137, r25
     254:	80 93 36 01 	sts	0x0136, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     258:	0e 94 28 04 	call	0x850	; 0x850 <spinup_motors>
            set_motors(0, kilo_turn_right);
     25c:	60 91 8d 01 	lds	r22, 0x018D
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 23 04 	call	0x846	; 0x846 <set_motors>
     266:	bc cf       	rjmp	.-136    	; 0x1e0 <loop+0xa0>
		new_message = 0;
		
		// If too close, move forward to get back into orbit.
		if (distance < TOO_CLOSE_DISTANCE)
		{
		    set_color(RGB(0, 1, 0));
     268:	84 e0       	ldi	r24, 0x04	; 4
     26a:	0e 94 44 08 	call	0x1088	; 0x1088 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     26e:	80 91 36 01 	lds	r24, 0x0136
     272:	90 91 37 01 	lds	r25, 0x0137
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	09 f4       	brne	.+2      	; 0x27c <loop+0x13c>
     27a:	b2 cf       	rjmp	.-156    	; 0x1e0 <loop+0xa0>
    {
        current_motion = new_motion;
     27c:	d0 93 37 01 	sts	0x0137, r29
     280:	c0 93 36 01 	sts	0x0136, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     284:	0e 94 28 04 	call	0x850	; 0x850 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     288:	60 91 a0 01 	lds	r22, 0x01A0
     28c:	80 91 9f 01 	lds	r24, 0x019F
     290:	0e 94 23 04 	call	0x846	; 0x846 <set_motors>
     294:	a5 cf       	rjmp	.-182    	; 0x1e0 <loop+0xa0>

00000296 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     296:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     298:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     29a:	8c e0       	ldi	r24, 0x0C	; 12
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	90 93 c5 00 	sts	0x00C5, r25
     2a2:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     2a6:	e0 ec       	ldi	r30, 0xC0	; 192
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8d 7f       	andi	r24, 0xFD	; 253
     2ae:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     2b0:	e2 ec       	ldi	r30, 0xC2	; 194
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	86 60       	ori	r24, 0x06	; 6
     2b8:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     2ba:	e1 ec       	ldi	r30, 0xC1	; 193
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	88 60       	ori	r24, 0x08	; 8
     2c2:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	90 93 a5 01 	sts	0x01A5, r25
     2cc:	80 93 a4 01 	sts	0x01A4, r24
    sei();
     2d0:	78 94       	sei
     2d2:	08 95       	ret

000002d4 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2d4:	20 91 36 01 	lds	r18, 0x0136
     2d8:	30 91 37 01 	lds	r19, 0x0137
     2dc:	28 17       	cp	r18, r24
     2de:	39 07       	cpc	r19, r25
     2e0:	71 f0       	breq	.+28     	; 0x2fe <set_motion+0x2a>
    {
        current_motion = new_motion;
     2e2:	90 93 37 01 	sts	0x0137, r25
     2e6:	80 93 36 01 	sts	0x0136, r24
        
        if (current_motion == STOP)
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	81 f0       	breq	.+32     	; 0x30e <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	91 05       	cpc	r25, r1
     2f2:	89 f0       	breq	.+34     	; 0x316 <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	91 05       	cpc	r25, r1
     2f8:	b1 f0       	breq	.+44     	; 0x326 <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     2fa:	03 97       	sbiw	r24, 0x03	; 3
     2fc:	09 f0       	breq	.+2      	; 0x300 <set_motion+0x2c>
     2fe:	08 95       	ret
        {
            spinup_motors();
     300:	0e 94 28 04 	call	0x850	; 0x850 <spinup_motors>
            set_motors(0, kilo_turn_right);
     304:	60 91 8d 01 	lds	r22, 0x018D
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	0c 94 23 04 	jmp	0x846	; 0x846 <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0c 94 23 04 	jmp	0x846	; 0x846 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     316:	0e 94 28 04 	call	0x850	; 0x850 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     31a:	60 91 a0 01 	lds	r22, 0x01A0
     31e:	80 91 9f 01 	lds	r24, 0x019F
     322:	0c 94 23 04 	jmp	0x846	; 0x846 <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     326:	0e 94 28 04 	call	0x850	; 0x850 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	80 91 a1 01 	lds	r24, 0x01A1
     330:	0c 94 23 04 	jmp	0x846	; 0x846 <set_motors>

00000334 <sample_light>:
}


// Function to sample light.
void sample_light()
{
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;


    printf("begin");
     33c:	8d e2       	ldi	r24, 0x2D	; 45
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	9f 93       	push	r25
     342:	8f 93       	push	r24
     344:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <printf>
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	ca e0       	ldi	r28, 0x0A	; 10
     34e:	d0 e0       	ldi	r29, 0x00	; 0
    while (number_of_samples < 10)
    {
        printf("%d\n", distance);
     350:	09 e2       	ldi	r16, 0x29	; 41
     352:	11 e0       	ldi	r17, 0x01	; 1
     354:	80 91 3d 01 	lds	r24, 0x013D
     358:	8f 93       	push	r24
     35a:	80 91 3c 01 	lds	r24, 0x013C
     35e:	8f 93       	push	r24
     360:	1f 93       	push	r17
     362:	0f 93       	push	r16
     364:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <printf>
     368:	21 97       	sbiw	r28, 0x01	; 1
    
    int number_of_samples = 0;


    printf("begin");
    while (number_of_samples < 10)
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	81 f7       	brne	.-32     	; 0x354 <sample_light+0x20>
    {
        printf("%d\n", distance);
        number_of_samples = number_of_samples + 1;
    }

}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	08 95       	ret

0000037e <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     37e:	08 95       	ret

00000380 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	08 95       	ret

00000386 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     386:	08 95       	ret

00000388 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
    cli();
     396:	f8 94       	cli

    ports_off();
     398:	14 b8       	out	0x04, r1	; 4
     39a:	17 b8       	out	0x07, r1	; 7
     39c:	1a b8       	out	0x0a, r1	; 10
     39e:	15 b8       	out	0x05, r1	; 5
     3a0:	18 b8       	out	0x08, r1	; 8
     3a2:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     3a4:	52 9a       	sbi	0x0a, 2	; 10
     3a6:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     3a8:	14 bc       	out	0x24, r1	; 36
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	85 bd       	out	0x25, r24	; 37
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	87 bd       	out	0x27, r24	; 39
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     3b8:	10 92 80 00 	sts	0x0080, r1
     3bc:	10 92 81 00 	sts	0x0081, r1
     3c0:	2f e8       	ldi	r18, 0x8F	; 143
     3c2:	3b e0       	ldi	r19, 0x0B	; 11
     3c4:	30 93 89 00 	sts	0x0089, r19
     3c8:	20 93 88 00 	sts	0x0088, r18
     3cc:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     3d0:	53 98       	cbi	0x0a, 3	; 10
     3d2:	23 98       	cbi	0x04, 3	; 4
     3d4:	91 ea       	ldi	r25, 0xA1	; 161
     3d6:	90 93 b0 00 	sts	0x00B0, r25
     3da:	80 93 b1 00 	sts	0x00B1, r24
     3de:	10 92 b4 00 	sts	0x00B4, r1
     3e2:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     3e6:	8b e0       	ldi	r24, 0x0B	; 11
     3e8:	80 bf       	out	0x30, r24	; 48
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	80 93 7c 00 	sts	0x007C, r24
     3f6:	83 e8       	ldi	r24, 0x83	; 131
     3f8:	80 93 7a 00 	sts	0x007A, r24
     3fc:	80 91 7a 00 	lds	r24, 0x007A
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 93 7a 00 	sts	0x007A, r24
     406:	80 91 7a 00 	lds	r24, 0x007A
     40a:	86 fd       	sbrc	r24, 6
     40c:	fc cf       	rjmp	.-8      	; 0x406 <kilo_init+0x7e>
    adc_trigger_high_gain();
     40e:	10 92 7c 00 	sts	0x007C, r1
     412:	83 ea       	ldi	r24, 0xA3	; 163
     414:	80 93 7a 00 	sts	0x007A, r24
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
    if (osccal != 0xFF)
     426:	8f 3f       	cpi	r24, 0xFF	; 255
     428:	11 f0       	breq	.+4      	; 0x42e <kilo_init+0xa6>
        OSCCAL = osccal;
     42a:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     42e:	10 92 6b 01 	sts	0x016B, r1
    rx_leadingbit = 1;
     432:	c1 e0       	ldi	r28, 0x01	; 1
     434:	c0 93 44 01 	sts	0x0144, r28
    rx_leadingbyte = 1;
     438:	c0 93 88 01 	sts	0x0188, r28
    rx_byteindex = 0;
     43c:	10 92 62 01 	sts	0x0162, r1
    rx_bytevalue = 0;
     440:	10 92 9c 01 	sts	0x019C, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     444:	80 e9       	ldi	r24, 0x90	; 144
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     44c:	80 93 61 01 	sts	0x0161, r24
    if (tx_mask & ~TX_MASK_MAX)
     450:	80 91 61 01 	lds	r24, 0x0161
     454:	88 73       	andi	r24, 0x38	; 56
     456:	11 f0       	breq	.+4      	; 0x45c <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     458:	c0 93 61 01 	sts	0x0161, r28
    tx_clock = 0;
     45c:	10 92 8c 01 	sts	0x018C, r1
     460:	10 92 8b 01 	sts	0x018B, r1
    tx_increment = 255;
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	90 93 8a 01 	sts	0x018A, r25
     46c:	80 93 89 01 	sts	0x0189, r24
    kilo_ticks = 0;
     470:	10 92 67 01 	sts	0x0167, r1
     474:	10 92 68 01 	sts	0x0168, r1
     478:	10 92 69 01 	sts	0x0169, r1
     47c:	10 92 6a 01 	sts	0x016A, r1
    kilo_state = IDLE;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 3b 01 	sts	0x013B, r24
    kilo_tx_period = 3906;
     486:	82 e4       	ldi	r24, 0x42	; 66
     488:	9f e0       	ldi	r25, 0x0F	; 15
     48a:	90 93 9b 01 	sts	0x019B, r25
     48e:	80 93 9a 01 	sts	0x019A, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     492:	80 eb       	ldi	r24, 0xB0	; 176
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     49a:	c8 2f       	mov	r28, r24
     49c:	81 eb       	ldi	r24, 0xB1	; 177
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     4a4:	2c 2f       	mov	r18, r28
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	38 2b       	or	r19, r24
     4aa:	30 93 9e 01 	sts	0x019E, r19
     4ae:	20 93 9d 01 	sts	0x019D, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     4b2:	85 e0       	ldi	r24, 0x05	; 5
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     4ba:	80 93 a1 01 	sts	0x01A1, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     4be:	89 e0       	ldi	r24, 0x09	; 9
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     4c6:	80 93 8d 01 	sts	0x018D, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     4ca:	8c e0       	ldi	r24, 0x0C	; 12
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     4d2:	80 93 9f 01 	sts	0x019F, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     4d6:	84 e1       	ldi	r24, 0x14	; 20
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     4de:	80 93 a0 01 	sts	0x01A0, r24
     4e2:	5c e6       	ldi	r21, 0x6C	; 108
     4e4:	e5 2e       	mov	r14, r21
     4e6:	51 e0       	ldi	r21, 0x01	; 1
     4e8:	f5 2e       	mov	r15, r21
     4ea:	05 e4       	ldi	r16, 0x45	; 69
     4ec:	11 e0       	ldi	r17, 0x01	; 1
     4ee:	c0 e2       	ldi	r28, 0x20	; 32
     4f0:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4f2:	ce 01       	movw	r24, r28
     4f4:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     4f8:	d8 2e       	mov	r13, r24
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     502:	2d 2d       	mov	r18, r13
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	32 2f       	mov	r19, r18
     508:	22 27       	eor	r18, r18
     50a:	28 2b       	or	r18, r24
     50c:	f7 01       	movw	r30, r14
     50e:	21 93       	st	Z+, r18
     510:	31 93       	st	Z+, r19
     512:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     514:	ce 01       	movw	r24, r28
     516:	c0 96       	adiw	r24, 0x30	; 48
     518:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     51c:	d8 2e       	mov	r13, r24
     51e:	ce 01       	movw	r24, r28
     520:	c1 96       	adiw	r24, 0x31	; 49
     522:	0e 94 83 10 	call	0x2106	; 0x2106 <eeprom_read_byte>
     526:	2d 2d       	mov	r18, r13
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	32 2f       	mov	r19, r18
     52c:	22 27       	eor	r18, r18
     52e:	28 2b       	or	r18, r24
     530:	f8 01       	movw	r30, r16
     532:	21 93       	st	Z+, r18
     534:	31 93       	st	Z+, r19
     536:	8f 01       	movw	r16, r30
     538:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     53a:	cc 33       	cpi	r28, 0x3C	; 60
     53c:	d1 05       	cpc	r29, r1
     53e:	c9 f6       	brne	.-78     	; 0x4f2 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     540:	78 94       	sei
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	08 95       	ret

00000552 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	8f 93       	push	r24
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	a8 95       	wdr
     564:	80 91 60 00 	lds	r24, 0x0060
     568:	88 61       	ori	r24, 0x18	; 24
     56a:	80 93 60 00 	sts	0x0060, r24
     56e:	10 92 60 00 	sts	0x0060, r1
     572:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     574:	8f 91       	pop	r24
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     580:	3c 01       	movw	r6, r24
     582:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     584:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     586:	99 24       	eor	r9, r9
     588:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     58a:	84 e0       	ldi	r24, 0x04	; 4
     58c:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     58e:	96 e0       	ldi	r25, 0x06	; 6
     590:	a9 2e       	mov	r10, r25
     592:	23 e8       	ldi	r18, 0x83	; 131
     594:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     596:	38 e1       	ldi	r19, 0x18	; 24
     598:	d3 2e       	mov	r13, r19
     59a:	49 e2       	ldi	r20, 0x29	; 41
     59c:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     59e:	90 91 3b 01 	lds	r25, 0x013B
     5a2:	e9 2f       	mov	r30, r25
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	e7 30       	cpi	r30, 0x07	; 7
     5a8:	f1 05       	cpc	r31, r1
     5aa:	c8 f7       	brcc	.-14     	; 0x59e <kilo_start+0x1e>
     5ac:	ec 5c       	subi	r30, 0xCC	; 204
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     5b4:	11 23       	and	r17, r17
     5b6:	09 f4       	brne	.+2      	; 0x5ba <kilo_start+0x3a>
     5b8:	fc c0       	rjmp	.+504    	; 0x7b2 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5ba:	c0 92 3b 01 	sts	0x013B, r12
     5be:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     5c0:	fe 01       	movw	r30, r28
     5c2:	09 95       	icall
                break;
     5c4:	ec cf       	rjmp	.-40     	; 0x59e <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     5c6:	80 91 6b 01 	lds	r24, 0x016B
     5ca:	81 11       	cpse	r24, r1
     5cc:	eb c0       	rjmp	.+470    	; 0x7a4 <kilo_start+0x224>
        cli();                                    // disable interrupts
     5ce:	f8 94       	cli
        adc_setup_conversion(6);
     5d0:	a0 92 7c 00 	sts	0x007C, r10
     5d4:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     5d8:	80 91 7a 00 	lds	r24, 0x007A
     5dc:	80 64       	ori	r24, 0x40	; 64
     5de:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     5e2:	90 91 7a 00 	lds	r25, 0x007A
     5e6:	96 fd       	sbrc	r25, 6
     5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     5ea:	80 91 78 00 	lds	r24, 0x0078
     5ee:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5f2:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     5f4:	8b 3a       	cpi	r24, 0xAB	; 171
     5f6:	e2 e0       	ldi	r30, 0x02	; 2
     5f8:	9e 07       	cpc	r25, r30
     5fa:	0c f0       	brlt	.+2      	; 0x5fe <kilo_start+0x7e>
     5fc:	ed c0       	rjmp	.+474    	; 0x7d8 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     5fe:	89 38       	cpi	r24, 0x89	; 137
     600:	f2 e0       	ldi	r31, 0x02	; 2
     602:	9f 07       	cpc	r25, r31
     604:	0c f0       	brlt	.+2      	; 0x608 <kilo_start+0x88>
     606:	ef c0       	rjmp	.+478    	; 0x7e6 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     608:	87 36       	cpi	r24, 0x67	; 103
     60a:	92 40       	sbci	r25, 0x02	; 2
     60c:	0c f4       	brge	.+2      	; 0x610 <kilo_start+0x90>
     60e:	ca c0       	rjmp	.+404    	; 0x7a4 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     610:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     612:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     614:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     616:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     618:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     61a:	3c 98       	cbi	0x07, 4	; 7
     61c:	c0 cf       	rjmp	.-128    	; 0x59e <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     61e:	f8 94       	cli
                acomp_off();
     620:	80 b7       	in	r24, 0x30	; 48
     622:	87 7f       	andi	r24, 0xF7	; 247
     624:	80 bf       	out	0x30, r24	; 48
                adc_off();
     626:	80 91 7a 00 	lds	r24, 0x007A
     62a:	8f 77       	andi	r24, 0x7F	; 127
     62c:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     630:	14 b8       	out	0x04, r1	; 4
     632:	17 b8       	out	0x07, r1	; 7
     634:	1a b8       	out	0x0a, r1	; 10
     636:	15 b8       	out	0x05, r1	; 5
     638:	18 b8       	out	0x08, r1	; 8
     63a:	1b b8       	out	0x0b, r1	; 11
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	a8 95       	wdr
     642:	d0 92 60 00 	sts	0x0060, r13
     646:	0f be       	out	0x3f, r0	; 63
     648:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     64c:	80 91 60 00 	lds	r24, 0x0060
     650:	80 64       	ori	r24, 0x40	; 64
     652:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     656:	93 b7       	in	r25, 0x33	; 51
     658:	91 7f       	andi	r25, 0xF1	; 241
     65a:	94 60       	ori	r25, 0x04	; 4
     65c:	93 bf       	out	0x33, r25	; 51
                cli();
     65e:	f8 94       	cli
                sleep_enable();
     660:	83 b7       	in	r24, 0x33	; 51
     662:	81 60       	ori	r24, 0x01	; 1
     664:	83 bf       	out	0x33, r24	; 51
                sei();
     666:	78 94       	sei
                sleep_cpu();
     668:	88 95       	sleep
                sleep_disable();
     66a:	83 b7       	in	r24, 0x33	; 51
     66c:	8e 7f       	andi	r24, 0xFE	; 254
     66e:	83 bf       	out	0x33, r24	; 51
                sei();
     670:	78 94       	sei
                rx_busy = 0;
     672:	10 92 6b 01 	sts	0x016B, r1
                ports_on();
     676:	52 9a       	sbi	0x0a, 2	; 10
     678:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     67a:	80 91 7a 00 	lds	r24, 0x007A
     67e:	80 68       	ori	r24, 0x80	; 128
     680:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     684:	87 e5       	ldi	r24, 0x57	; 87
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <kilo_start+0x108>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <kilo_start+0x10e>
     68e:	00 00       	nop
                _delay_us(300);
                acomp_on();
     690:	80 b7       	in	r24, 0x30	; 48
     692:	88 61       	ori	r24, 0x18	; 24
     694:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     696:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     698:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     69a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     69c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     69e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     6a0:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a2:	ef e1       	ldi	r30, 0x1F	; 31
     6a4:	fe e4       	ldi	r31, 0x4E	; 78
     6a6:	31 97       	sbiw	r30, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <kilo_start+0x126>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <kilo_start+0x12c>
     6ac:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     6ae:	80 91 6b 01 	lds	r24, 0x016B
     6b2:	81 11       	cpse	r24, r1
     6b4:	81 c0       	rjmp	.+258    	; 0x7b8 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6b6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6b8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6ba:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6bc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6be:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6c0:	3c 98       	cbi	0x07, 4	; 7
     6c2:	6d cf       	rjmp	.-294    	; 0x59e <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     6c4:	80 91 39 01 	lds	r24, 0x0139
     6c8:	81 11       	cpse	r24, r1
     6ca:	41 c0       	rjmp	.+130    	; 0x74e <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6cc:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6d0:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     6d4:	10 92 3a 01 	sts	0x013A, r1
     6d8:	62 cf       	rjmp	.-316    	; 0x59e <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     6da:	48 99       	sbic	0x09, 0	; 9
     6dc:	ec cf       	rjmp	.-40     	; 0x6b6 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6de:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6e0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6e2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6e4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6e6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6e8:	3c 98       	cbi	0x07, 4	; 7
     6ea:	8f ec       	ldi	r24, 0xCF	; 207
     6ec:	97 e0       	ldi	r25, 0x07	; 7
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <kilo_start+0x16e>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <kilo_start+0x174>
     6f4:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6f6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6f8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6fa:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6fc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6fe:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     700:	3c 98       	cbi	0x07, 4	; 7
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	e1 ee       	ldi	r30, 0xE1	; 225
     706:	f4 e0       	ldi	r31, 0x04	; 4
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	e0 40       	sbci	r30, 0x00	; 0
     70c:	f0 40       	sbci	r31, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <kilo_start+0x188>
     710:	00 c0       	rjmp	.+0      	; 0x712 <kilo_start+0x192>
     712:	00 00       	nop
     714:	44 cf       	rjmp	.-376    	; 0x59e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     716:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     718:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     71a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     71c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     71e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     720:	3c 98       	cbi	0x07, 4	; 7
     722:	ef ec       	ldi	r30, 0xCF	; 207
     724:	f7 e0       	ldi	r31, 0x07	; 7
     726:	31 97       	sbiw	r30, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <kilo_start+0x1a6>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <kilo_start+0x1ac>
     72c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     72e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     730:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     732:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     734:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     736:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     738:	3c 98       	cbi	0x07, 4	; 7
     73a:	ff ef       	ldi	r31, 0xFF	; 255
     73c:	21 ee       	ldi	r18, 0xE1	; 225
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	f1 50       	subi	r31, 0x01	; 1
     742:	20 40       	sbci	r18, 0x00	; 0
     744:	80 40       	sbci	r24, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <kilo_start+0x1c0>
     748:	00 c0       	rjmp	.+0      	; 0x74a <kilo_start+0x1ca>
     74a:	00 00       	nop
     74c:	28 cf       	rjmp	.-432    	; 0x59e <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     74e:	90 91 39 01 	lds	r25, 0x0139
     752:	80 91 3a 01 	lds	r24, 0x013A
     756:	98 17       	cp	r25, r24
     758:	09 f4       	brne	.+2      	; 0x75c <kilo_start+0x1dc>
     75a:	21 cf       	rjmp	.-446    	; 0x59e <kilo_start+0x1e>
                        prev_motion = cur_motion;
     75c:	80 91 39 01 	lds	r24, 0x0139
     760:	80 93 3a 01 	sts	0x013A, r24
                        if (cur_motion == MOVE_LEFT) {
     764:	80 91 39 01 	lds	r24, 0x0139
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	09 f4       	brne	.+2      	; 0x76e <kilo_start+0x1ee>
     76c:	50 c0       	rjmp	.+160    	; 0x80e <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     76e:	80 91 39 01 	lds	r24, 0x0139
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     772:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     776:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	d9 f1       	breq	.+118    	; 0x7f4 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     77e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     782:	90 92 b4 00 	sts	0x00B4, r9
     786:	8f e2       	ldi	r24, 0x2F	; 47
     788:	95 e7       	ldi	r25, 0x75	; 117
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <kilo_start+0x20a>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <kilo_start+0x210>
     790:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     792:	80 91 a0 01 	lds	r24, 0x01A0
     796:	90 91 9f 01 	lds	r25, 0x019F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     79a:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     79e:	80 93 b4 00 	sts	0x00B4, r24
     7a2:	fd ce       	rjmp	.-518    	; 0x59e <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7a4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7a6:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7a8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7aa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7ac:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7ae:	3c 98       	cbi	0x07, 4	; 7
     7b0:	f6 ce       	rjmp	.-532    	; 0x59e <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     7b2:	f3 01       	movw	r30, r6
     7b4:	09 95       	icall
     7b6:	01 cf       	rjmp	.-510    	; 0x5ba <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7b8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7ba:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7c2:	3c 98       	cbi	0x07, 4	; 7
     7c4:	ff ef       	ldi	r31, 0xFF	; 255
     7c6:	20 e7       	ldi	r18, 0x70	; 112
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	f1 50       	subi	r31, 0x01	; 1
     7cc:	20 40       	sbci	r18, 0x00	; 0
     7ce:	80 40       	sbci	r24, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <kilo_start+0x24a>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <kilo_start+0x254>
     7d4:	00 00       	nop
     7d6:	6f cf       	rjmp	.-290    	; 0x6b6 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7d8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7da:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7dc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7de:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7e0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7e2:	3c 98       	cbi	0x07, 4	; 7
     7e4:	dc ce       	rjmp	.-584    	; 0x59e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7e6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7e8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7ea:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7ec:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     7ee:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     7f0:	3c 9a       	sbi	0x07, 4	; 7
     7f2:	d5 ce       	rjmp	.-598    	; 0x59e <kilo_start+0x1e>
     7f4:	ef e2       	ldi	r30, 0x2F	; 47
     7f6:	f5 e7       	ldi	r31, 0x75	; 117
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <kilo_start+0x278>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <kilo_start+0x27e>
     7fe:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     800:	80 91 8d 01 	lds	r24, 0x018D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     804:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     808:	80 93 b4 00 	sts	0x00B4, r24
     80c:	c8 ce       	rjmp	.-624    	; 0x59e <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     80e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     812:	10 92 b4 00 	sts	0x00B4, r1
     816:	8f e2       	ldi	r24, 0x2F	; 47
     818:	95 e7       	ldi	r25, 0x75	; 117
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <kilo_start+0x29a>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <kilo_start+0x2a0>
     820:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     822:	80 91 a1 01 	lds	r24, 0x01A1
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     826:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     82a:	10 92 b4 00 	sts	0x00B4, r1
     82e:	b7 ce       	rjmp	.-658    	; 0x59e <kilo_start+0x1e>

00000830 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     830:	07 c0       	rjmp	.+14     	; 0x840 <delay+0x10>
     832:	ef ec       	ldi	r30, 0xCF	; 207
     834:	f7 e0       	ldi	r31, 0x07	; 7
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <delay+0x6>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <delay+0xc>
     83c:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     83e:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	b9 f7       	brne	.-18     	; 0x832 <delay+0x2>
     844:	08 95       	ret

00000846 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     846:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     84a:	60 93 b4 00 	sts	0x00B4, r22
     84e:	08 95       	ret

00000850 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     856:	80 93 b4 00 	sts	0x00B4, r24
     85a:	8f e0       	ldi	r24, 0x0F	; 15
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	ef ec       	ldi	r30, 0xCF	; 207
     860:	f7 e0       	ldi	r31, 0x07	; 7
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <spinup_motors+0x12>
     866:	00 c0       	rjmp	.+0      	; 0x868 <spinup_motors+0x18>
     868:	00 00       	nop
     86a:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     86c:	c1 f7       	brne	.-16     	; 0x85e <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     86e:	08 95       	ret

00000870 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     870:	80 91 6b 01 	lds	r24, 0x016B
     874:	81 11       	cpse	r24, r1
     876:	1e c0       	rjmp	.+60     	; 0x8b4 <get_ambientlight+0x44>
        cli();
     878:	f8 94       	cli
        adc_setup_conversion(7);
     87a:	87 e0       	ldi	r24, 0x07	; 7
     87c:	80 93 7c 00 	sts	0x007C, r24
     880:	83 e8       	ldi	r24, 0x83	; 131
     882:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     886:	80 91 7a 00 	lds	r24, 0x007A
     88a:	80 64       	ori	r24, 0x40	; 64
     88c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     890:	80 91 7a 00 	lds	r24, 0x007A
     894:	86 fd       	sbrc	r24, 6
     896:	fc cf       	rjmp	.-8      	; 0x890 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     898:	80 91 78 00 	lds	r24, 0x0078
     89c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8a0:	10 92 7c 00 	sts	0x007C, r1
     8a4:	23 ea       	ldi	r18, 0xA3	; 163
     8a6:	20 93 7a 00 	sts	0x007A, r18
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8b0:	78 94       	sei
     8b2:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     8b8:	08 95       	ret

000008ba <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     8ba:	80 91 6b 01 	lds	r24, 0x016B
     8be:	81 11       	cpse	r24, r1
     8c0:	1e c0       	rjmp	.+60     	; 0x8fe <get_temperature+0x44>
        cli();
     8c2:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     8c4:	88 ec       	ldi	r24, 0xC8	; 200
     8c6:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     8ca:	87 e8       	ldi	r24, 0x87	; 135
     8cc:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8d0:	80 91 7a 00 	lds	r24, 0x007A
     8d4:	80 64       	ori	r24, 0x40	; 64
     8d6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8da:	80 91 7a 00 	lds	r24, 0x007A
     8de:	86 fd       	sbrc	r24, 6
     8e0:	fc cf       	rjmp	.-8      	; 0x8da <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     8e2:	80 91 78 00 	lds	r24, 0x0078
     8e6:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8ea:	10 92 7c 00 	sts	0x007C, r1
     8ee:	23 ea       	ldi	r18, 0xA3	; 163
     8f0:	20 93 7a 00 	sts	0x007A, r18
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8fa:	78 94       	sei
     8fc:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     902:	08 95       	ret

00000904 <rand_hard>:

uint8_t rand_hard() {
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	e0 e0       	ldi	r30, 0x00	; 0
     90e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     910:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     912:	03 ea       	ldi	r16, 0xA3	; 163
     914:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     916:	d6 e0       	ldi	r29, 0x06	; 6
     918:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     91a:	a1 e0       	ldi	r26, 0x01	; 1
     91c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     91e:	60 e8       	ldi	r22, 0x80	; 128
     920:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     922:	f8 94       	cli
            adc_setup_conversion(6);
     924:	d0 93 7c 00 	sts	0x007C, r29
     928:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     92c:	90 91 7a 00 	lds	r25, 0x007A
     930:	90 64       	ori	r25, 0x40	; 64
     932:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     936:	90 91 7a 00 	lds	r25, 0x007A
     93a:	96 fd       	sbrc	r25, 6
     93c:	fc cf       	rjmp	.-8      	; 0x936 <rand_hard+0x32>
            a = ADCW&0x1;
     93e:	20 91 78 00 	lds	r18, 0x0078
     942:	30 91 79 00 	lds	r19, 0x0079
     946:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     948:	90 91 7a 00 	lds	r25, 0x007A
     94c:	90 64       	ori	r25, 0x40	; 64
     94e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     952:	90 91 7a 00 	lds	r25, 0x007A
     956:	96 fd       	sbrc	r25, 6
     958:	fc cf       	rjmp	.-8      	; 0x952 <rand_hard+0x4e>
            b = ADCW&0x1;
     95a:	40 91 78 00 	lds	r20, 0x0078
     95e:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     962:	10 92 7c 00 	sts	0x007C, r1
     966:	00 93 7a 00 	sts	0x007A, r16
     96a:	10 93 7b 00 	sts	0x007B, r17
            sei();
     96e:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     970:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     972:	24 13       	cpse	r18, r20
     974:	03 c0       	rjmp	.+6      	; 0x97c <rand_hard+0x78>
     976:	61 50       	subi	r22, 0x01	; 1
     978:	71 09       	sbc	r23, r1
     97a:	99 f6       	brne	.-90     	; 0x922 <rand_hard+0x1e>
        if (a)
     97c:	22 23       	and	r18, r18
     97e:	39 f0       	breq	.+14     	; 0x98e <rand_hard+0x8a>
            num |= (1<<i);
     980:	9d 01       	movw	r18, r26
     982:	0e 2e       	mov	r0, r30
     984:	01 c0       	rjmp	.+2      	; 0x988 <rand_hard+0x84>
     986:	22 0f       	add	r18, r18
     988:	0a 94       	dec	r0
     98a:	ea f7       	brpl	.-6      	; 0x986 <rand_hard+0x82>
     98c:	82 2b       	or	r24, r18
     98e:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     990:	e8 30       	cpi	r30, 0x08	; 8
     992:	f1 05       	cpc	r31, r1
     994:	09 f0       	breq	.+2      	; 0x998 <rand_hard+0x94>
     996:	c3 cf       	rjmp	.-122    	; 0x91e <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	08 95       	ret

000009a2 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     9a2:	80 91 0e 01 	lds	r24, 0x010E
     9a6:	98 2f       	mov	r25, r24
     9a8:	99 0f       	add	r25, r25
     9aa:	99 0f       	add	r25, r25
     9ac:	99 0f       	add	r25, r25
     9ae:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     9b0:	90 91 38 01 	lds	r25, 0x0138
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	29 0f       	add	r18, r25
     9b8:	20 93 38 01 	sts	0x0138, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     9bc:	28 2f       	mov	r18, r24
     9be:	22 95       	swap	r18
     9c0:	26 95       	lsr	r18
     9c2:	27 70       	andi	r18, 0x07	; 7
     9c4:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     9c6:	96 95       	lsr	r25
     9c8:	96 95       	lsr	r25
     9ca:	89 27       	eor	r24, r25
     9cc:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     9d0:	08 95       	ret

000009d2 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     9d2:	80 93 0e 01 	sts	0x010E, r24
     9d6:	08 95       	ret

000009d8 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     9d8:	80 91 6b 01 	lds	r24, 0x016B
     9dc:	81 11       	cpse	r24, r1
     9de:	16 c0       	rjmp	.+44     	; 0xa0c <get_voltage+0x34>
        cli();                                    // disable interrupts
     9e0:	f8 94       	cli
        adc_setup_conversion(6);
     9e2:	86 e0       	ldi	r24, 0x06	; 6
     9e4:	80 93 7c 00 	sts	0x007C, r24
     9e8:	83 e8       	ldi	r24, 0x83	; 131
     9ea:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9ee:	80 91 7a 00 	lds	r24, 0x007A
     9f2:	80 64       	ori	r24, 0x40	; 64
     9f4:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9f8:	80 91 7a 00 	lds	r24, 0x007A
     9fc:	86 fd       	sbrc	r24, 6
     9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a00:	80 91 78 00 	lds	r24, 0x0078
     a04:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a08:	78 94       	sei
     a0a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a10:	08 95       	ret

00000a12 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a12:	2f 92       	push	r2
     a14:	3f 92       	push	r3
     a16:	4f 92       	push	r4
     a18:	5f 92       	push	r5
     a1a:	6f 92       	push	r6
     a1c:	7f 92       	push	r7
     a1e:	8f 92       	push	r8
     a20:	9f 92       	push	r9
     a22:	af 92       	push	r10
     a24:	bf 92       	push	r11
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	00 d0       	rcall	.+0      	; 0xa38 <estimate_distance+0x26>
     a38:	00 d0       	rcall	.+0      	; 0xa3a <estimate_distance+0x28>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <estimate_distance+0x2a>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     a42:	dc 01       	movw	r26, r24
     a44:	12 96       	adiw	r26, 0x02	; 2
     a46:	0d 90       	ld	r0, X+
     a48:	bc 91       	ld	r27, X
     a4a:	a0 2d       	mov	r26, r0
     a4c:	be 83       	std	Y+6, r27	; 0x06
     a4e:	ad 83       	std	Y+5, r26	; 0x05
     a50:	a4 38       	cpi	r26, 0x84	; 132
     a52:	e3 e0       	ldi	r30, 0x03	; 3
     a54:	be 07       	cpc	r27, r30
     a56:	0c f0       	brlt	.+2      	; 0xa5a <estimate_distance+0x48>
     a58:	c9 c0       	rjmp	.+402    	; 0xbec <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a5a:	80 91 45 01 	lds	r24, 0x0145
     a5e:	90 91 46 01 	lds	r25, 0x0146
     a62:	8a 17       	cp	r24, r26
     a64:	9b 07       	cpc	r25, r27
     a66:	08 f4       	brcc	.+2      	; 0xa6a <estimate_distance+0x58>
     a68:	37 c1       	rjmp	.+622    	; 0xcd8 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a6a:	00 91 47 01 	lds	r16, 0x0147
     a6e:	10 91 48 01 	lds	r17, 0x0148
     a72:	0a 17       	cp	r16, r26
     a74:	1b 07       	cpc	r17, r27
     a76:	08 f4       	brcc	.+2      	; 0xa7a <estimate_distance+0x68>
     a78:	2f c2       	rjmp	.+1118   	; 0xed8 <estimate_distance+0x4c6>
     a7a:	00 91 49 01 	lds	r16, 0x0149
     a7e:	10 91 4a 01 	lds	r17, 0x014A
     a82:	0a 17       	cp	r16, r26
     a84:	1b 07       	cpc	r17, r27
     a86:	08 f4       	brcc	.+2      	; 0xa8a <estimate_distance+0x78>
     a88:	2f c2       	rjmp	.+1118   	; 0xee8 <estimate_distance+0x4d6>
     a8a:	00 91 4b 01 	lds	r16, 0x014B
     a8e:	10 91 4c 01 	lds	r17, 0x014C
     a92:	0a 17       	cp	r16, r26
     a94:	1b 07       	cpc	r17, r27
     a96:	08 f4       	brcc	.+2      	; 0xa9a <estimate_distance+0x88>
     a98:	2f c2       	rjmp	.+1118   	; 0xef8 <estimate_distance+0x4e6>
     a9a:	00 91 4d 01 	lds	r16, 0x014D
     a9e:	10 91 4e 01 	lds	r17, 0x014E
     aa2:	0a 17       	cp	r16, r26
     aa4:	1b 07       	cpc	r17, r27
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <estimate_distance+0x98>
     aa8:	2f c2       	rjmp	.+1118   	; 0xf08 <estimate_distance+0x4f6>
     aaa:	00 91 4f 01 	lds	r16, 0x014F
     aae:	10 91 50 01 	lds	r17, 0x0150
     ab2:	0a 17       	cp	r16, r26
     ab4:	1b 07       	cpc	r17, r27
     ab6:	08 f4       	brcc	.+2      	; 0xaba <estimate_distance+0xa8>
     ab8:	ef c1       	rjmp	.+990    	; 0xe98 <estimate_distance+0x486>
     aba:	00 91 51 01 	lds	r16, 0x0151
     abe:	10 91 52 01 	lds	r17, 0x0152
     ac2:	0a 17       	cp	r16, r26
     ac4:	1b 07       	cpc	r17, r27
     ac6:	08 f4       	brcc	.+2      	; 0xaca <estimate_distance+0xb8>
     ac8:	27 c2       	rjmp	.+1102   	; 0xf18 <estimate_distance+0x506>
     aca:	00 91 53 01 	lds	r16, 0x0153
     ace:	10 91 54 01 	lds	r17, 0x0154
     ad2:	0a 17       	cp	r16, r26
     ad4:	1b 07       	cpc	r17, r27
     ad6:	08 f4       	brcc	.+2      	; 0xada <estimate_distance+0xc8>
     ad8:	27 c2       	rjmp	.+1102   	; 0xf28 <estimate_distance+0x516>
     ada:	00 91 55 01 	lds	r16, 0x0155
     ade:	10 91 56 01 	lds	r17, 0x0156
     ae2:	0a 17       	cp	r16, r26
     ae4:	1b 07       	cpc	r17, r27
     ae6:	08 f4       	brcc	.+2      	; 0xaea <estimate_distance+0xd8>
     ae8:	27 c2       	rjmp	.+1102   	; 0xf38 <estimate_distance+0x526>
     aea:	00 91 57 01 	lds	r16, 0x0157
     aee:	10 91 58 01 	lds	r17, 0x0158
     af2:	0a 17       	cp	r16, r26
     af4:	1b 07       	cpc	r17, r27
     af6:	08 f4       	brcc	.+2      	; 0xafa <estimate_distance+0xe8>
     af8:	27 c2       	rjmp	.+1102   	; 0xf48 <estimate_distance+0x536>
     afa:	00 91 59 01 	lds	r16, 0x0159
     afe:	10 91 5a 01 	lds	r17, 0x015A
     b02:	0a 17       	cp	r16, r26
     b04:	1b 07       	cpc	r17, r27
     b06:	08 f4       	brcc	.+2      	; 0xb0a <estimate_distance+0xf8>
     b08:	27 c2       	rjmp	.+1102   	; 0xf58 <estimate_distance+0x546>
     b0a:	00 91 5b 01 	lds	r16, 0x015B
     b0e:	10 91 5c 01 	lds	r17, 0x015C
     b12:	0a 17       	cp	r16, r26
     b14:	1b 07       	cpc	r17, r27
     b16:	08 f4       	brcc	.+2      	; 0xb1a <estimate_distance+0x108>
     b18:	23 c2       	rjmp	.+1094   	; 0xf60 <estimate_distance+0x54e>
     b1a:	00 91 5d 01 	lds	r16, 0x015D
     b1e:	10 91 5e 01 	lds	r17, 0x015E
     b22:	0a 17       	cp	r16, r26
     b24:	1b 07       	cpc	r17, r27
     b26:	08 f4       	brcc	.+2      	; 0xb2a <estimate_distance+0x118>
     b28:	23 c2       	rjmp	.+1094   	; 0xf70 <estimate_distance+0x55e>
     b2a:	00 91 5f 01 	lds	r16, 0x015F
     b2e:	10 91 60 01 	lds	r17, 0x0160
     b32:	0a 17       	cp	r16, r26
     b34:	1b 07       	cpc	r17, r27
     b36:	08 f4       	brcc	.+2      	; 0xb3a <estimate_distance+0x128>
     b38:	23 c2       	rjmp	.+1094   	; 0xf80 <estimate_distance+0x56e>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 ed       	ldi	r26, 0xD0	; 208
     b40:	b0 e4       	ldi	r27, 0x40	; 64
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
     b4a:	4c e0       	ldi	r20, 0x0C	; 12
     b4c:	e4 2e       	mov	r14, r20
     b4e:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     b50:	f7 01       	movw	r30, r14
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	eb 5b       	subi	r30, 0xBB	; 187
     b58:	fe 4f       	sbci	r31, 0xFE	; 254
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	b8 01       	movw	r22, r16
     b60:	68 1b       	sub	r22, r24
     b62:	79 0b       	sbc	r23, r25
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	0e 94 84 0b 	call	0x1708	; 0x1708 <__addsf3>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b78:	ad 81       	ldd	r26, Y+5	; 0x05
     b7a:	be 81       	ldd	r27, Y+6	; 0x06
     b7c:	bd 01       	movw	r22, r26
     b7e:	bb 0f       	add	r27, r27
     b80:	88 0b       	sbc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     b88:	4b 01       	movw	r8, r22
     b8a:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b8c:	b8 01       	movw	r22, r16
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     b96:	2b 01       	movw	r4, r22
     b98:	3c 01       	movw	r6, r24
     b9a:	29 81       	ldd	r18, Y+1	; 0x01
     b9c:	3a 81       	ldd	r19, Y+2	; 0x02
     b9e:	4b 81       	ldd	r20, Y+3	; 0x03
     ba0:	5c 81       	ldd	r21, Y+4	; 0x04
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
     bae:	c3 01       	movw	r24, r6
     bb0:	b2 01       	movw	r22, r4
     bb2:	0e 94 83 0b 	call	0x1706	; 0x1706 <__subsf3>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bba:	c5 01       	movw	r24, r10
     bbc:	b4 01       	movw	r22, r8
     bbe:	0e 94 83 0b 	call	0x1706	; 0x1706 <__subsf3>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e2       	ldi	r20, 0x20	; 32
     bc8:	51 e4       	ldi	r21, 0x41	; 65
     bca:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
            b=((int)((int)b/(int)slope));
     bce:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixsfsi>
     bd2:	8b 01       	movw	r16, r22
     bd4:	c7 01       	movw	r24, r14
     bd6:	b6 01       	movw	r22, r12
     bd8:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixsfsi>
     bdc:	ab 01       	movw	r20, r22
     bde:	bc 01       	movw	r22, r24
     be0:	c8 01       	movw	r24, r16
     be2:	ba 01       	movw	r22, r20
     be4:	0e 94 46 0b 	call	0x168c	; 0x168c <__divmodhi4>
            dist_high=b;
     be8:	16 2f       	mov	r17, r22
     bea:	77 c0       	rjmp	.+238    	; 0xcda <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bec:	dc 01       	movw	r26, r24
     bee:	cd 90       	ld	r12, X+
     bf0:	dc 90       	ld	r13, X
     bf2:	80 91 6c 01 	lds	r24, 0x016C
     bf6:	90 91 6d 01 	lds	r25, 0x016D
     bfa:	8c 15       	cp	r24, r12
     bfc:	9d 05       	cpc	r25, r13
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <estimate_distance+0x1f0>
     c00:	8c c0       	rjmp	.+280    	; 0xd1a <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c02:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c04:	e0 90 6e 01 	lds	r14, 0x016E
     c08:	f0 90 6f 01 	lds	r15, 0x016F
     c0c:	ec 14       	cp	r14, r12
     c0e:	fd 04       	cpc	r15, r13
     c10:	08 f4       	brcc	.+2      	; 0xc14 <estimate_distance+0x202>
     c12:	5e c1       	rjmp	.+700    	; 0xed0 <estimate_distance+0x4be>
     c14:	e0 90 70 01 	lds	r14, 0x0170
     c18:	f0 90 71 01 	lds	r15, 0x0171
     c1c:	ec 14       	cp	r14, r12
     c1e:	fd 04       	cpc	r15, r13
     c20:	08 f4       	brcc	.+2      	; 0xc24 <estimate_distance+0x212>
     c22:	5e c1       	rjmp	.+700    	; 0xee0 <estimate_distance+0x4ce>
     c24:	e0 90 72 01 	lds	r14, 0x0172
     c28:	f0 90 73 01 	lds	r15, 0x0173
     c2c:	ec 14       	cp	r14, r12
     c2e:	fd 04       	cpc	r15, r13
     c30:	08 f4       	brcc	.+2      	; 0xc34 <estimate_distance+0x222>
     c32:	5e c1       	rjmp	.+700    	; 0xef0 <estimate_distance+0x4de>
     c34:	e0 90 74 01 	lds	r14, 0x0174
     c38:	f0 90 75 01 	lds	r15, 0x0175
     c3c:	ec 14       	cp	r14, r12
     c3e:	fd 04       	cpc	r15, r13
     c40:	08 f4       	brcc	.+2      	; 0xc44 <estimate_distance+0x232>
     c42:	5e c1       	rjmp	.+700    	; 0xf00 <estimate_distance+0x4ee>
     c44:	e0 90 76 01 	lds	r14, 0x0176
     c48:	f0 90 77 01 	lds	r15, 0x0177
     c4c:	ec 14       	cp	r14, r12
     c4e:	fd 04       	cpc	r15, r13
     c50:	08 f4       	brcc	.+2      	; 0xc54 <estimate_distance+0x242>
     c52:	c3 c0       	rjmp	.+390    	; 0xdda <estimate_distance+0x3c8>
     c54:	e0 90 78 01 	lds	r14, 0x0178
     c58:	f0 90 79 01 	lds	r15, 0x0179
     c5c:	ec 14       	cp	r14, r12
     c5e:	fd 04       	cpc	r15, r13
     c60:	08 f4       	brcc	.+2      	; 0xc64 <estimate_distance+0x252>
     c62:	56 c1       	rjmp	.+684    	; 0xf10 <estimate_distance+0x4fe>
     c64:	e0 90 7a 01 	lds	r14, 0x017A
     c68:	f0 90 7b 01 	lds	r15, 0x017B
     c6c:	ec 14       	cp	r14, r12
     c6e:	fd 04       	cpc	r15, r13
     c70:	08 f4       	brcc	.+2      	; 0xc74 <estimate_distance+0x262>
     c72:	56 c1       	rjmp	.+684    	; 0xf20 <estimate_distance+0x50e>
     c74:	e0 90 7c 01 	lds	r14, 0x017C
     c78:	f0 90 7d 01 	lds	r15, 0x017D
     c7c:	ec 14       	cp	r14, r12
     c7e:	fd 04       	cpc	r15, r13
     c80:	08 f4       	brcc	.+2      	; 0xc84 <estimate_distance+0x272>
     c82:	56 c1       	rjmp	.+684    	; 0xf30 <estimate_distance+0x51e>
     c84:	e0 90 7e 01 	lds	r14, 0x017E
     c88:	f0 90 7f 01 	lds	r15, 0x017F
     c8c:	ec 14       	cp	r14, r12
     c8e:	fd 04       	cpc	r15, r13
     c90:	08 f4       	brcc	.+2      	; 0xc94 <estimate_distance+0x282>
     c92:	56 c1       	rjmp	.+684    	; 0xf40 <estimate_distance+0x52e>
     c94:	e0 90 80 01 	lds	r14, 0x0180
     c98:	f0 90 81 01 	lds	r15, 0x0181
     c9c:	ec 14       	cp	r14, r12
     c9e:	fd 04       	cpc	r15, r13
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <estimate_distance+0x292>
     ca2:	56 c1       	rjmp	.+684    	; 0xf50 <estimate_distance+0x53e>
     ca4:	e0 90 82 01 	lds	r14, 0x0182
     ca8:	f0 90 83 01 	lds	r15, 0x0183
     cac:	ec 14       	cp	r14, r12
     cae:	fd 04       	cpc	r15, r13
     cb0:	08 f4       	brcc	.+2      	; 0xcb4 <estimate_distance+0x2a2>
     cb2:	5a c1       	rjmp	.+692    	; 0xf68 <estimate_distance+0x556>
     cb4:	e0 90 84 01 	lds	r14, 0x0184
     cb8:	f0 90 85 01 	lds	r15, 0x0185
     cbc:	ec 14       	cp	r14, r12
     cbe:	fd 04       	cpc	r15, r13
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <estimate_distance+0x2b2>
     cc2:	5a c1       	rjmp	.+692    	; 0xf78 <estimate_distance+0x566>
     cc4:	e0 90 86 01 	lds	r14, 0x0186
     cc8:	f0 90 87 01 	lds	r15, 0x0187
     ccc:	ec 14       	cp	r14, r12
     cce:	fd 04       	cpc	r15, r13
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <estimate_distance+0x2c2>
     cd2:	5a c1       	rjmp	.+692    	; 0xf88 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     cd4:	0a e5       	ldi	r16, 0x5A	; 90
     cd6:	31 c0       	rjmp	.+98     	; 0xd3a <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     cd8:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     cda:	ed 81       	ldd	r30, Y+5	; 0x05
     cdc:	fe 81       	ldd	r31, Y+6	; 0x06
     cde:	ed 3b       	cpi	r30, 0xBD	; 189
     ce0:	f2 40       	sbci	r31, 0x02	; 2
     ce2:	fc f4       	brge	.+62     	; 0xd22 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     ce4:	81 e2       	ldi	r24, 0x21	; 33
     ce6:	81 0f       	add	r24, r17
    }
}
     ce8:	26 96       	adiw	r28, 0x06	; 6
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	9f 90       	pop	r9
     d0a:	8f 90       	pop	r8
     d0c:	7f 90       	pop	r7
     d0e:	6f 90       	pop	r6
     d10:	5f 90       	pop	r5
     d12:	4f 90       	pop	r4
     d14:	3f 90       	pop	r3
     d16:	2f 90       	pop	r2
     d18:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d1a:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d1c:	81 e2       	ldi	r24, 0x21	; 33
     d1e:	80 0f       	add	r24, r16
     d20:	e3 cf       	rjmp	.-58     	; 0xce8 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d22:	d1 01       	movw	r26, r2
     d24:	cd 90       	ld	r12, X+
     d26:	dc 90       	ld	r13, X
     d28:	80 91 6c 01 	lds	r24, 0x016C
     d2c:	90 91 6d 01 	lds	r25, 0x016D
     d30:	8c 15       	cp	r24, r12
     d32:	9d 05       	cpc	r25, r13
     d34:	08 f0       	brcs	.+2      	; 0xd38 <estimate_distance+0x326>
     d36:	66 cf       	rjmp	.-308    	; 0xc04 <estimate_distance+0x1f2>
            dist_low=0;
     d38:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d3a:	1f 3f       	cpi	r17, 0xFF	; 255
     d3c:	79 f3       	breq	.-34     	; 0xd1c <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d3e:	ed 81       	ldd	r30, Y+5	; 0x05
     d40:	fe 81       	ldd	r31, Y+6	; 0x06
     d42:	bf 01       	movw	r22, r30
     d44:	ff 0f       	add	r31, r31
     d46:	88 0b       	sbc	r24, r24
     d48:	99 0b       	sbc	r25, r25
     d4a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     d4e:	6b 01       	movw	r12, r22
     d50:	7c 01       	movw	r14, r24
     d52:	61 2f       	mov	r22, r17
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     d5e:	4b 01       	movw	r8, r22
     d60:	5c 01       	movw	r10, r24
     d62:	a7 01       	movw	r20, r14
     d64:	96 01       	movw	r18, r12
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	81 e6       	ldi	r24, 0x61	; 97
     d6c:	94 e4       	ldi	r25, 0x44	; 68
     d6e:	0e 94 83 0b 	call	0x1706	; 0x1706 <__subsf3>
     d72:	9b 01       	movw	r18, r22
     d74:	ac 01       	movw	r20, r24
     d76:	c5 01       	movw	r24, r10
     d78:	b4 01       	movw	r22, r8
     d7a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
     d7e:	4b 01       	movw	r8, r22
     d80:	5c 01       	movw	r10, r24
     d82:	60 2f       	mov	r22, r16
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     d8e:	2b 01       	movw	r4, r22
     d90:	3c 01       	movw	r6, r24
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4f e2       	ldi	r20, 0x2F	; 47
     d98:	54 e4       	ldi	r21, 0x44	; 68
     d9a:	c7 01       	movw	r24, r14
     d9c:	b6 01       	movw	r22, r12
     d9e:	0e 94 83 0b 	call	0x1706	; 0x1706 <__subsf3>
     da2:	9b 01       	movw	r18, r22
     da4:	ac 01       	movw	r20, r24
     da6:	c3 01       	movw	r24, r6
     da8:	b2 01       	movw	r22, r4
     daa:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c5 01       	movw	r24, r10
     db4:	b4 01       	movw	r22, r8
     db6:	0e 94 84 0b 	call	0x1708	; 0x1708 <__addsf3>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	48 e4       	ldi	r20, 0x48	; 72
     dc0:	53 e4       	ldi	r21, 0x43	; 67
     dc2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divsf3>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	44 e0       	ldi	r20, 0x04	; 4
     dcc:	52 e4       	ldi	r21, 0x42	; 66
     dce:	0e 94 84 0b 	call	0x1708	; 0x1708 <__addsf3>
     dd2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fixunssfsi>
     dd6:	86 2f       	mov	r24, r22
     dd8:	87 cf       	rjmp	.-242    	; 0xce8 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dda:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     ddc:	85 e0       	ldi	r24, 0x05	; 5
     dde:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	fc 01       	movw	r30, r24
     de6:	e6 59       	subi	r30, 0x96	; 150
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	b7 01       	movw	r22, r14
     df0:	68 1b       	sub	r22, r24
     df2:	79 0b       	sbc	r23, r25
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     dfc:	9b 01       	movw	r18, r22
     dfe:	ac 01       	movw	r20, r24
     e00:	0e 94 84 0b 	call	0x1708	; 0x1708 <__addsf3>
     e04:	4b 01       	movw	r8, r22
     e06:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e08:	b6 01       	movw	r22, r12
     e0a:	dd 0c       	add	r13, r13
     e0c:	88 0b       	sbc	r24, r24
     e0e:	99 0b       	sbc	r25, r25
     e10:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__floatsisf>
     e14:	2b 01       	movw	r4, r22
     e16:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e18:	b7 01       	movw	r22, r14
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     e22:	6b 01       	movw	r12, r22
     e24:	7c 01       	movw	r14, r24
     e26:	60 2f       	mov	r22, r16
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	a9 01       	movw	r20, r18
     e44:	0e 94 84 0b 	call	0x1708	; 0x1708 <__addsf3>
     e48:	a5 01       	movw	r20, r10
     e4a:	94 01       	movw	r18, r8
     e4c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
     e50:	9b 01       	movw	r18, r22
     e52:	ac 01       	movw	r20, r24
     e54:	c7 01       	movw	r24, r14
     e56:	b6 01       	movw	r22, r12
     e58:	0e 94 83 0b 	call	0x1706	; 0x1706 <__subsf3>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e60:	c3 01       	movw	r24, r6
     e62:	b2 01       	movw	r22, r4
     e64:	0e 94 83 0b 	call	0x1706	; 0x1706 <__subsf3>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e2       	ldi	r20, 0x20	; 32
     e6e:	51 e4       	ldi	r21, 0x41	; 65
     e70:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
                b=((int)((int)b/(int)slope));
     e74:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixsfsi>
     e78:	7b 01       	movw	r14, r22
     e7a:	c5 01       	movw	r24, r10
     e7c:	b4 01       	movw	r22, r8
     e7e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixsfsi>
     e82:	ab 01       	movw	r20, r22
     e84:	bc 01       	movw	r22, r24
     e86:	c7 01       	movw	r24, r14
     e88:	ba 01       	movw	r22, r20
     e8a:	0e 94 46 0b 	call	0x168c	; 0x168c <__divmodhi4>
                dist_low=b;
     e8e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e90:	6f 3f       	cpi	r22, 0xFF	; 255
     e92:	09 f0       	breq	.+2      	; 0xe96 <estimate_distance+0x484>
     e94:	52 cf       	rjmp	.-348    	; 0xd3a <estimate_distance+0x328>
     e96:	26 cf       	rjmp	.-436    	; 0xce4 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e98:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	7c 01       	movw	r14, r24
     ea0:	f1 e0       	ldi	r31, 0x01	; 1
     ea2:	ef 1a       	sub	r14, r31
     ea4:	f1 08       	sbc	r15, r1
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 98 0c 	call	0x1930	; 0x1930 <__floatunsisf>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__mulsf3>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	a9 01       	movw	r20, r18
     ec2:	0e 94 84 0b 	call	0x1708	; 0x1708 <__addsf3>
     ec6:	69 83       	std	Y+1, r22	; 0x01
     ec8:	7a 83       	std	Y+2, r23	; 0x02
     eca:	8b 83       	std	Y+3, r24	; 0x03
     ecc:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     ece:	40 ce       	rjmp	.-896    	; 0xb50 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ed0:	01 e0       	ldi	r16, 0x01	; 1
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	84 cf       	rjmp	.-248    	; 0xde0 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	df cf       	rjmp	.-66     	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ee0:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	7c cf       	rjmp	.-264    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ee8:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	d7 cf       	rjmp	.-82     	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef0:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	74 cf       	rjmp	.-280    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ef8:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	cf cf       	rjmp	.-98     	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f00:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	6c cf       	rjmp	.-296    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f08:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	c7 cf       	rjmp	.-114    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f10:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	64 cf       	rjmp	.-312    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f18:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	bf cf       	rjmp	.-130    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f20:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     f22:	87 e0       	ldi	r24, 0x07	; 7
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	5c cf       	rjmp	.-328    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f28:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f2a:	87 e0       	ldi	r24, 0x07	; 7
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	b7 cf       	rjmp	.-146    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f30:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f32:	88 e0       	ldi	r24, 0x08	; 8
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	54 cf       	rjmp	.-344    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f38:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f3a:	88 e0       	ldi	r24, 0x08	; 8
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	af cf       	rjmp	.-162    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f40:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     f42:	89 e0       	ldi	r24, 0x09	; 9
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	4c cf       	rjmp	.-360    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f48:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     f4a:	89 e0       	ldi	r24, 0x09	; 9
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a7 cf       	rjmp	.-178    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f50:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	44 cf       	rjmp	.-376    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f58:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f5a:	8a e0       	ldi	r24, 0x0A	; 10
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9f cf       	rjmp	.-194    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f60:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f62:	8b e0       	ldi	r24, 0x0B	; 11
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9b cf       	rjmp	.-202    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f68:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     f6a:	8b e0       	ldi	r24, 0x0B	; 11
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	38 cf       	rjmp	.-400    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f70:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     f72:	8c e0       	ldi	r24, 0x0C	; 12
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	93 cf       	rjmp	.-218    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f78:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     f7a:	8c e0       	ldi	r24, 0x0C	; 12
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	30 cf       	rjmp	.-416    	; 0xde0 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f80:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f82:	8d e0       	ldi	r24, 0x0D	; 13
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	8b cf       	rjmp	.-234    	; 0xe9e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f88:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f8a:	8d e0       	ldi	r24, 0x0D	; 13
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	28 cf       	rjmp	.-432    	; 0xde0 <estimate_distance+0x3ce>

00000f90 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
    tx_clock += tx_increment;
     fb2:	20 91 8b 01 	lds	r18, 0x018B
     fb6:	30 91 8c 01 	lds	r19, 0x018C
     fba:	80 91 89 01 	lds	r24, 0x0189
     fbe:	90 91 8a 01 	lds	r25, 0x018A
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	90 93 8c 01 	sts	0x018C, r25
     fca:	80 93 8b 01 	sts	0x018B, r24
    tx_increment = 0xFF;
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	90 93 8a 01 	sts	0x018A, r25
     fd6:	80 93 89 01 	sts	0x0189, r24
    OCR0A = tx_increment;
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     fde:	80 91 67 01 	lds	r24, 0x0167
     fe2:	90 91 68 01 	lds	r25, 0x0168
     fe6:	a0 91 69 01 	lds	r26, 0x0169
     fea:	b0 91 6a 01 	lds	r27, 0x016A
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	a1 1d       	adc	r26, r1
     ff2:	b1 1d       	adc	r27, r1
     ff4:	80 93 67 01 	sts	0x0167, r24
     ff8:	90 93 68 01 	sts	0x0168, r25
     ffc:	a0 93 69 01 	sts	0x0169, r26
    1000:	b0 93 6a 01 	sts	0x016A, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1004:	80 91 6b 01 	lds	r24, 0x016B
    1008:	81 11       	cpse	r24, r1
    100a:	0f c0       	rjmp	.+30     	; 0x102a <__vector_14+0x9a>
    100c:	80 91 9a 01 	lds	r24, 0x019A
    1010:	90 91 9b 01 	lds	r25, 0x019B
    1014:	20 91 8b 01 	lds	r18, 0x018B
    1018:	30 91 8c 01 	lds	r19, 0x018C
    101c:	82 17       	cp	r24, r18
    101e:	93 07       	cpc	r25, r19
    1020:	20 f4       	brcc	.+8      	; 0x102a <__vector_14+0x9a>
    1022:	80 91 3b 01 	lds	r24, 0x013B
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	89 f0       	breq	.+34     	; 0x104c <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    104c:	e0 91 11 01 	lds	r30, 0x0111
    1050:	f0 91 12 01 	lds	r31, 0x0112
    1054:	09 95       	icall
        if (msg) {
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	41 f3       	breq	.-48     	; 0x102a <__vector_14+0x9a>
            if (message_send(msg)) {
    105a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <message_send>
    105e:	81 11       	cpse	r24, r1
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1062:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <rand>
    1066:	99 27       	eor	r25, r25
    1068:	90 93 8a 01 	sts	0x018A, r25
    106c:	80 93 89 01 	sts	0x0189, r24
                OCR0A = tx_increment;
    1070:	87 bd       	out	0x27, r24	; 39
    1072:	db cf       	rjmp	.-74     	; 0x102a <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1074:	e0 91 0f 01 	lds	r30, 0x010F
    1078:	f0 91 10 01 	lds	r31, 0x0110
    107c:	09 95       	icall
                tx_clock = 0;
    107e:	10 92 8c 01 	sts	0x018C, r1
    1082:	10 92 8b 01 	sts	0x018B, r1
    1086:	d1 cf       	rjmp	.-94     	; 0x102a <__vector_14+0x9a>

00001088 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1088:	80 ff       	sbrs	r24, 0
    108a:	11 c0       	rjmp	.+34     	; 0x10ae <set_color+0x26>
        DDRD |= (1<<5);
    108c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    108e:	81 ff       	sbrs	r24, 1
    1090:	11 c0       	rjmp	.+34     	; 0x10b4 <set_color+0x2c>
        DDRD |= (1<<4);
    1092:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1094:	82 ff       	sbrs	r24, 2
    1096:	11 c0       	rjmp	.+34     	; 0x10ba <set_color+0x32>
        DDRC |= (1<<3);
    1098:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    109a:	83 ff       	sbrs	r24, 3
    109c:	11 c0       	rjmp	.+34     	; 0x10c0 <set_color+0x38>
        DDRC |= (1<<2);
    109e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    10a0:	84 ff       	sbrs	r24, 4
    10a2:	11 c0       	rjmp	.+34     	; 0x10c6 <set_color+0x3e>
        DDRC |= (1<<5);
    10a4:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    10a6:	85 fd       	sbrc	r24, 5
    10a8:	11 c0       	rjmp	.+34     	; 0x10cc <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    10aa:	3c 98       	cbi	0x07, 4	; 7
    10ac:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    10ae:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    10b0:	81 fd       	sbrc	r24, 1
    10b2:	ef cf       	rjmp	.-34     	; 0x1092 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    10b4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    10b6:	82 fd       	sbrc	r24, 2
    10b8:	ef cf       	rjmp	.-34     	; 0x1098 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    10ba:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    10bc:	83 fd       	sbrc	r24, 3
    10be:	ef cf       	rjmp	.-34     	; 0x109e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    10c0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    10c2:	84 fd       	sbrc	r24, 4
    10c4:	ef cf       	rjmp	.-34     	; 0x10a4 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    10c6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    10c8:	85 ff       	sbrs	r24, 5
    10ca:	ef cf       	rjmp	.-34     	; 0x10aa <set_color+0x22>
        DDRC |= (1<<4);
    10cc:	3c 9a       	sbi	0x07, 4	; 7
    10ce:	08 95       	ret

000010d0 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    rx_timer_off();
    10de:	10 92 81 00 	sts	0x0081, r1
    10e2:	10 92 85 00 	sts	0x0085, r1
    10e6:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 44 01 	sts	0x0144, r24
    rx_leadingbyte = 1;
    10f0:	80 93 88 01 	sts	0x0188, r24
    rx_busy = 0;
    10f4:	10 92 6b 01 	sts	0x016B, r1
    adc_trigger_high_gain();
    10f8:	10 92 7c 00 	sts	0x007C, r1
    10fc:	93 ea       	ldi	r25, 0xA3	; 163
    10fe:	90 93 7a 00 	sts	0x007A, r25
    1102:	80 93 7b 00 	sts	0x007B, r24
}
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    113a:	20 91 84 00 	lds	r18, 0x0084
    113e:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	40 93 6b 01 	sts	0x016B, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1148:	80 91 44 01 	lds	r24, 0x0144
    114c:	88 23       	and	r24, r24
    114e:	a9 f1       	breq	.+106    	; 0x11ba <__vector_23+0xa6>
        rx_timer_on();
    1150:	10 92 85 00 	sts	0x0085, r1
    1154:	10 92 84 00 	sts	0x0084, r1
    1158:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    115c:	10 92 9c 01 	sts	0x019C, r1
        rx_leadingbit = 0;
    1160:	10 92 44 01 	sts	0x0144, r1
        if (rx_leadingbyte) {
    1164:	80 91 88 01 	lds	r24, 0x0188
    1168:	88 23       	and	r24, r24
    116a:	a1 f0       	breq	.+40     	; 0x1194 <__vector_23+0x80>
            adc_finish_conversion();
    116c:	80 91 7a 00 	lds	r24, 0x007A
    1170:	86 fd       	sbrc	r24, 6
    1172:	fc cf       	rjmp	.-8      	; 0x116c <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1174:	80 91 78 00 	lds	r24, 0x0078
    1178:	90 91 79 00 	lds	r25, 0x0079
    117c:	90 93 66 01 	sts	0x0166, r25
    1180:	80 93 65 01 	sts	0x0165, r24
            adc_trigger_low_gain();
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 7c 00 	sts	0x007C, r24
    118a:	93 ea       	ldi	r25, 0xA3	; 163
    118c:	90 93 7a 00 	sts	0x007A, r25
    1190:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    11ba:	c9 01       	movw	r24, r18
    11bc:	87 58       	subi	r24, 0x87	; 135
    11be:	91 09       	sbc	r25, r1
    11c0:	84 37       	cpi	r24, 0x74	; 116
    11c2:	99 40       	sbci	r25, 0x09	; 9
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <__vector_23+0xb4>
    11c6:	52 c0       	rjmp	.+164    	; 0x126c <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    11c8:	26 58       	subi	r18, 0x86	; 134
    11ca:	31 09       	sbc	r19, r1
    11cc:	a4 ef       	ldi	r26, 0xF4	; 244
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__umulhisi3>
    11d4:	aa 27       	eor	r26, r26
    11d6:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	91 05       	cpc	r25, r1
    11dc:	a1 05       	cpc	r26, r1
    11de:	b1 05       	cpc	r27, r1
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <__vector_23+0xd0>
    11e2:	7b c0       	rjmp	.+246    	; 0x12da <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    11e4:	40 93 44 01 	sts	0x0144, r20
                if (rx_leadingbyte) {
    11e8:	80 91 88 01 	lds	r24, 0x0188
    11ec:	81 11       	cpse	r24, r1
    11ee:	52 c0       	rjmp	.+164    	; 0x1294 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    11f0:	80 91 62 01 	lds	r24, 0x0162
    11f4:	e8 2f       	mov	r30, r24
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	e2 57       	subi	r30, 0x72	; 114
    11fa:	fe 4f       	sbci	r31, 0xFE	; 254
    11fc:	90 91 9c 01 	lds	r25, 0x019C
    1200:	90 83       	st	Z, r25
                    rx_byteindex++;
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 62 01 	sts	0x0162, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1208:	8c 30       	cpi	r24, 0x0C	; 12
    120a:	21 f6       	brne	.-120    	; 0x1194 <__vector_23+0x80>
                        rx_timer_off();
    120c:	10 92 81 00 	sts	0x0081, r1
    1210:	10 92 85 00 	sts	0x0085, r1
    1214:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1218:	40 93 88 01 	sts	0x0188, r20
                        rx_busy = 0;
    121c:	10 92 6b 01 	sts	0x016B, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1220:	c0 91 98 01 	lds	r28, 0x0198
    1224:	d0 91 99 01 	lds	r29, 0x0199
    1228:	8e e8       	ldi	r24, 0x8E	; 142
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	0e 94 94 0a 	call	0x1528	; 0x1528 <message_crc>
    1230:	c8 17       	cp	r28, r24
    1232:	d9 07       	cpc	r29, r25
    1234:	09 f0       	breq	.+2      	; 0x1238 <__vector_23+0x124>
    1236:	ae cf       	rjmp	.-164    	; 0x1194 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1238:	80 91 97 01 	lds	r24, 0x0197
    123c:	87 ff       	sbrs	r24, 7
    123e:	61 c0       	rjmp	.+194    	; 0x1302 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1240:	98 e7       	ldi	r25, 0x78	; 120
    1242:	98 0f       	add	r25, r24
    1244:	93 30       	cpi	r25, 0x03	; 3
    1246:	30 f0       	brcs	.+12     	; 0x1254 <__vector_23+0x140>
        motors_off();
    1248:	53 98       	cbi	0x0a, 3	; 10
    124a:	23 98       	cbi	0x04, 3	; 4
    124c:	10 92 b4 00 	sts	0x00B4, r1
    1250:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	fc 01       	movw	r30, r24
    1258:	e0 58       	subi	r30, 0x80	; 128
    125a:	f1 09       	sbc	r31, r1
    125c:	eb 30       	cpi	r30, 0x0B	; 11
    125e:	f1 05       	cpc	r31, r1
    1260:	08 f0       	brcs	.+2      	; 0x1264 <__vector_23+0x150>
    1262:	98 cf       	rjmp	.-208    	; 0x1194 <__vector_23+0x80>
    1264:	e5 5c       	subi	r30, 0xC5	; 197
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    126c:	10 92 81 00 	sts	0x0081, r1
    1270:	10 92 85 00 	sts	0x0085, r1
    1274:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1278:	40 93 44 01 	sts	0x0144, r20
            rx_leadingbyte = 1;
    127c:	40 93 88 01 	sts	0x0188, r20
            rx_busy = 0;
    1280:	10 92 6b 01 	sts	0x016B, r1
            adc_trigger_high_gain();
    1284:	10 92 7c 00 	sts	0x007C, r1
    1288:	83 ea       	ldi	r24, 0xA3	; 163
    128a:	80 93 7a 00 	sts	0x007A, r24
    128e:	40 93 7b 00 	sts	0x007B, r20
    1292:	80 cf       	rjmp	.-256    	; 0x1194 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1294:	80 91 7a 00 	lds	r24, 0x007A
    1298:	86 fd       	sbrc	r24, 6
    129a:	fc cf       	rjmp	.-8      	; 0x1294 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    129c:	80 91 78 00 	lds	r24, 0x0078
    12a0:	90 91 79 00 	lds	r25, 0x0079
    12a4:	90 93 64 01 	sts	0x0164, r25
    12a8:	80 93 63 01 	sts	0x0163, r24
                    adc_trigger_high_gain();
    12ac:	10 92 7c 00 	sts	0x007C, r1
    12b0:	83 ea       	ldi	r24, 0xA3	; 163
    12b2:	80 93 7a 00 	sts	0x007A, r24
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    12bc:	90 91 9c 01 	lds	r25, 0x019C
    12c0:	99 23       	and	r25, r25
    12c2:	d1 f0       	breq	.+52     	; 0x12f8 <__vector_23+0x1e4>
                        rx_timer_off();
    12c4:	10 92 81 00 	sts	0x0081, r1
    12c8:	10 92 85 00 	sts	0x0085, r1
    12cc:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12d0:	80 93 88 01 	sts	0x0188, r24
                        rx_busy = 0;
    12d4:	10 92 6b 01 	sts	0x016B, r1
    12d8:	5d cf       	rjmp	.-326    	; 0x1194 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	f9 01       	movw	r30, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <__vector_23+0x1d2>
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	8a 95       	dec	r24
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <__vector_23+0x1ce>
    12ea:	cf 01       	movw	r24, r30
    12ec:	90 91 9c 01 	lds	r25, 0x019C
    12f0:	89 2b       	or	r24, r25
    12f2:	80 93 9c 01 	sts	0x019C, r24
    12f6:	4e cf       	rjmp	.-356    	; 0x1194 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    12f8:	10 92 88 01 	sts	0x0188, r1
                        rx_byteindex = 0;
    12fc:	10 92 62 01 	sts	0x0162, r1
    1300:	49 cf       	rjmp	.-366    	; 0x1194 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1302:	e0 91 13 01 	lds	r30, 0x0113
    1306:	f0 91 14 01 	lds	r31, 0x0114
    130a:	63 e6       	ldi	r22, 0x63	; 99
    130c:	71 e0       	ldi	r23, 0x01	; 1
    130e:	8e e8       	ldi	r24, 0x8E	; 142
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	09 95       	icall
    1314:	3f cf       	rjmp	.-386    	; 0x1194 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1316:	80 91 8e 01 	lds	r24, 0x018E
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	09 f4       	brne	.+2      	; 0x1320 <__vector_23+0x20c>
    131e:	dd c0       	rjmp	.+442    	; 0x14da <__vector_23+0x3c6>
    1320:	08 f4       	brcc	.+2      	; 0x1324 <__vector_23+0x210>
    1322:	ba c0       	rjmp	.+372    	; 0x1498 <__vector_23+0x384>
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	09 f4       	brne	.+2      	; 0x132a <__vector_23+0x216>
    1328:	c6 c0       	rjmp	.+396    	; 0x14b6 <__vector_23+0x3a2>
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	09 f0       	breq	.+2      	; 0x1330 <__vector_23+0x21c>
    132e:	b1 c0       	rjmp	.+354    	; 0x1492 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1330:	80 91 39 01 	lds	r24, 0x0139
    1334:	90 91 94 01 	lds	r25, 0x0194
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	09 f4       	brne	.+2      	; 0x133e <__vector_23+0x22a>
    133c:	e3 c0       	rjmp	.+454    	; 0x1504 <__vector_23+0x3f0>
    133e:	80 91 93 01 	lds	r24, 0x0193
                        prev_motion = MOVE_STOP;
    1342:	10 92 3a 01 	sts	0x013A, r1
                        cur_motion = MOVE_STRAIGHT;
    1346:	23 e0       	ldi	r18, 0x03	; 3
    1348:	20 93 39 01 	sts	0x0139, r18
                        kilo_straight_left = calibmsg->straight_left;
    134c:	80 93 9f 01 	sts	0x019F, r24
                        kilo_straight_right = calibmsg->straight_right;
    1350:	90 93 a0 01 	sts	0x01A0, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1354:	80 91 3b 01 	lds	r24, 0x013B
    1358:	86 30       	cpi	r24, 0x06	; 6
    135a:	09 f4       	brne	.+2      	; 0x135e <__vector_23+0x24a>
    135c:	1b cf       	rjmp	.-458    	; 0x1194 <__vector_23+0x80>
                motors_on();
    135e:	53 9a       	sbi	0x0a, 3	; 10
    1360:	23 9a       	sbi	0x04, 3	; 4
    1362:	10 92 b4 00 	sts	0x00B4, r1
    1366:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    136a:	86 e0       	ldi	r24, 0x06	; 6
    136c:	80 93 3b 01 	sts	0x013B, r24
    1370:	11 cf       	rjmp	.-478    	; 0x1194 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1372:	80 91 3b 01 	lds	r24, 0x013B
    1376:	86 30       	cpi	r24, 0x06	; 6
    1378:	99 f0       	breq	.+38     	; 0x13a0 <__vector_23+0x28c>
                motors_on();
    137a:	53 9a       	sbi	0x0a, 3	; 10
    137c:	23 9a       	sbi	0x04, 3	; 4
    137e:	10 92 b4 00 	sts	0x00B4, r1
    1382:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1386:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1388:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    138a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    138c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    138e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1390:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1392:	10 92 39 01 	sts	0x0139, r1
    1396:	10 92 3a 01 	sts	0x013A, r1
                kilo_state = MOVING;
    139a:	86 e0       	ldi	r24, 0x06	; 6
    139c:	80 93 3b 01 	sts	0x013B, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9c 01       	movw	r18, r24
    13a6:	00 90 8e 01 	lds	r0, 0x018E
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <__vector_23+0x29c>
    13ac:	22 0f       	add	r18, r18
    13ae:	33 1f       	adc	r19, r19
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <__vector_23+0x298>
    13b4:	80 91 9d 01 	lds	r24, 0x019D
    13b8:	90 91 9e 01 	lds	r25, 0x019E
    13bc:	82 23       	and	r24, r18
    13be:	93 23       	and	r25, r19
    13c0:	89 2b       	or	r24, r25
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <__vector_23+0x2b2>
    13c4:	86 c0       	rjmp	.+268    	; 0x14d2 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    13c6:	10 92 39 01 	sts	0x0139, r1
    13ca:	e4 ce       	rjmp	.-568    	; 0x1194 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 3b 01 	sts	0x013B, r24
    13d2:	e0 ce       	rjmp	.-576    	; 0x1194 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    13d4:	e0 e0       	ldi	r30, 0x00	; 0
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    13da:	80 91 6e 00 	lds	r24, 0x006E
    13de:	8d 7f       	andi	r24, 0xFD	; 253
    13e0:	80 93 6e 00 	sts	0x006E, r24
    13e4:	16 bc       	out	0x26, r1	; 38
            bootload();
    13e6:	e0 e0       	ldi	r30, 0x00	; 0
    13e8:	f0 e7       	ldi	r31, 0x70	; 112
    13ea:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    13ec:	10 92 3b 01 	sts	0x013B, r1
    13f0:	d1 ce       	rjmp	.-606    	; 0x1194 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	80 93 3b 01 	sts	0x013B, r24
    13f8:	cd ce       	rjmp	.-614    	; 0x1194 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    13fa:	85 e0       	ldi	r24, 0x05	; 5
    13fc:	80 93 3b 01 	sts	0x013B, r24
    1400:	c9 ce       	rjmp	.-622    	; 0x1194 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1402:	80 91 3b 01 	lds	r24, 0x013B
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	09 f4       	brne	.+2      	; 0x140c <__vector_23+0x2f8>
    140a:	c4 ce       	rjmp	.-632    	; 0x1194 <__vector_23+0x80>
    140c:	80 91 3b 01 	lds	r24, 0x013B
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	09 f4       	brne	.+2      	; 0x1416 <__vector_23+0x302>
    1414:	bf ce       	rjmp	.-642    	; 0x1194 <__vector_23+0x80>
                motors_on();
    1416:	53 9a       	sbi	0x0a, 3	; 10
    1418:	23 9a       	sbi	0x04, 3	; 4
    141a:	10 92 b4 00 	sts	0x00B4, r1
    141e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	80 93 3b 01 	sts	0x013B, r24
    1428:	b5 ce       	rjmp	.-662    	; 0x1194 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    142a:	80 91 3b 01 	lds	r24, 0x013B
    142e:	86 30       	cpi	r24, 0x06	; 6
    1430:	09 f0       	breq	.+2      	; 0x1434 <__vector_23+0x320>
    1432:	b0 ce       	rjmp	.-672    	; 0x1194 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1434:	60 91 9d 01 	lds	r22, 0x019D
    1438:	80 eb       	ldi	r24, 0xB0	; 176
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 8b 10 	call	0x2116	; 0x2116 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1440:	60 91 9e 01 	lds	r22, 0x019E
    1444:	81 eb       	ldi	r24, 0xB1	; 177
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 8b 10 	call	0x2116	; 0x2116 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    144c:	60 91 a1 01 	lds	r22, 0x01A1
    1450:	85 e0       	ldi	r24, 0x05	; 5
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 8b 10 	call	0x2116	; 0x2116 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1458:	60 91 8d 01 	lds	r22, 0x018D
    145c:	89 e0       	ldi	r24, 0x09	; 9
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 8b 10 	call	0x2116	; 0x2116 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1464:	60 91 9f 01 	lds	r22, 0x019F
    1468:	8c e0       	ldi	r24, 0x0C	; 12
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 8b 10 	call	0x2116	; 0x2116 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1470:	60 91 a0 01 	lds	r22, 0x01A0
    1474:	84 e1       	ldi	r24, 0x14	; 20
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 8b 10 	call	0x2116	; 0x2116 <eeprom_write_byte>
                        motors_off();
    147c:	53 98       	cbi	0x0a, 3	; 10
    147e:	23 98       	cbi	0x04, 3	; 4
    1480:	10 92 b4 00 	sts	0x00B4, r1
    1484:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 93 3b 01 	sts	0x013B, r24
    148e:	80 91 8e 01 	lds	r24, 0x018E
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1492:	81 11       	cpse	r24, r1
    1494:	5f cf       	rjmp	.-322    	; 0x1354 <__vector_23+0x240>
    1496:	7e ce       	rjmp	.-772    	; 0x1194 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1498:	88 23       	and	r24, r24
    149a:	39 f2       	breq	.-114    	; 0x142a <__vector_23+0x316>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    14a0:	80 91 8f 01 	lds	r24, 0x018F
    14a4:	90 91 90 01 	lds	r25, 0x0190
    14a8:	90 93 9e 01 	sts	0x019E, r25
    14ac:	80 93 9d 01 	sts	0x019D, r24
                    cur_motion = MOVE_STOP;
    14b0:	10 92 39 01 	sts	0x0139, r1
    14b4:	4f cf       	rjmp	.-354    	; 0x1354 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14b6:	80 91 39 01 	lds	r24, 0x0139
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	71 f1       	breq	.+92     	; 0x151a <__vector_23+0x406>
    14be:	80 91 92 01 	lds	r24, 0x0192
                        prev_motion = MOVE_STOP;
    14c2:	10 92 3a 01 	sts	0x013A, r1
                        cur_motion = MOVE_RIGHT;
    14c6:	92 e0       	ldi	r25, 0x02	; 2
    14c8:	90 93 39 01 	sts	0x0139, r25
                        kilo_turn_right = calibmsg->turn_right;
    14cc:	80 93 8d 01 	sts	0x018D, r24
    14d0:	41 cf       	rjmp	.-382    	; 0x1354 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 39 01 	sts	0x0139, r24
    14d8:	5d ce       	rjmp	.-838    	; 0x1194 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14da:	80 91 39 01 	lds	r24, 0x0139
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	51 f0       	breq	.+20     	; 0x14f6 <__vector_23+0x3e2>
    14e2:	80 91 91 01 	lds	r24, 0x0191
                        prev_motion = MOVE_STOP;
    14e6:	10 92 3a 01 	sts	0x013A, r1
                        cur_motion = MOVE_LEFT;
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	90 93 39 01 	sts	0x0139, r25
                        kilo_turn_left = calibmsg->turn_left;
    14f0:	80 93 a1 01 	sts	0x01A1, r24
    14f4:	2f cf       	rjmp	.-418    	; 0x1354 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14f6:	80 91 91 01 	lds	r24, 0x0191
    14fa:	90 91 a1 01 	lds	r25, 0x01A1
    14fe:	89 13       	cpse	r24, r25
    1500:	f2 cf       	rjmp	.-28     	; 0x14e6 <__vector_23+0x3d2>
    1502:	28 cf       	rjmp	.-432    	; 0x1354 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1504:	80 91 a0 01 	lds	r24, 0x01A0
    1508:	98 13       	cpse	r25, r24
    150a:	19 cf       	rjmp	.-462    	; 0x133e <__vector_23+0x22a>
    150c:	80 91 93 01 	lds	r24, 0x0193
    1510:	20 91 9f 01 	lds	r18, 0x019F
    1514:	82 13       	cpse	r24, r18
    1516:	15 cf       	rjmp	.-470    	; 0x1342 <__vector_23+0x22e>
    1518:	1d cf       	rjmp	.-454    	; 0x1354 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    151a:	80 91 92 01 	lds	r24, 0x0192
    151e:	90 91 8d 01 	lds	r25, 0x018D
    1522:	89 13       	cpse	r24, r25
    1524:	ce cf       	rjmp	.-100    	; 0x14c2 <__vector_23+0x3ae>
    1526:	16 cf       	rjmp	.-468    	; 0x1354 <__vector_23+0x240>

00001528 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1528:	fc 01       	movw	r30, r24
    152a:	ac 01       	movw	r20, r24
    152c:	46 5f       	subi	r20, 0xF6	; 246
    152e:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1534:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1536:	82 27       	eor	r24, r18
    1538:	08 2e       	mov	r0, r24
    153a:	82 95       	swap	r24
    153c:	80 7f       	andi	r24, 0xF0	; 240
    153e:	80 25       	eor	r24, r0
    1540:	09 2e       	mov	r0, r25
    1542:	98 2f       	mov	r25, r24
    1544:	82 95       	swap	r24
    1546:	8f 70       	andi	r24, 0x0F	; 15
    1548:	08 26       	eor	r0, r24
    154a:	86 95       	lsr	r24
    154c:	98 27       	eor	r25, r24
    154e:	89 27       	eor	r24, r25
    1550:	88 0f       	add	r24, r24
    1552:	88 0f       	add	r24, r24
    1554:	88 0f       	add	r24, r24
    1556:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1558:	e4 17       	cp	r30, r20
    155a:	f5 07       	cpc	r31, r21
    155c:	59 f7       	brne	.-42     	; 0x1534 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    155e:	08 95       	ret

00001560 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1560:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1562:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1564:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1566:	20 91 61 01 	lds	r18, 0x0161
    or tmpreg1, ddrreg
    156a:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    156c:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    156e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1570:	30 91 61 01 	lds	r19, 0x0161
    1574:	20 30       	cpi	r18, 0x00	; 0
    1576:	29 f0       	breq	.+10     	; 0x1582 <message_send+0x22>
    1578:	00 00       	nop
    157a:	25 b1       	in	r18, 0x05	; 5
    157c:	23 2b       	or	r18, r19
    157e:	25 b9       	out	0x05, r18	; 5
    1580:	04 c0       	rjmp	.+8      	; 0x158a <message_send+0x2a>
    1582:	00 00       	nop
    1584:	00 00       	nop
    1586:	00 00       	nop
    1588:	00 c0       	rjmp	.+0      	; 0x158a <message_send+0x2a>
    158a:	00 00       	nop
    158c:	00 00       	nop
    158e:	00 00       	nop
    1590:	30 95       	com	r19
    1592:	25 b1       	in	r18, 0x05	; 5
    1594:	23 23       	and	r18, r19
    1596:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1598:	2e ea       	ldi	r18, 0xAE	; 174
    159a:	2a 95       	dec	r18
    159c:	f1 f7       	brne	.-4      	; 0x159a <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    159e:	2b ee       	ldi	r18, 0xEB	; 235

000015a0 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    15a0:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    15a2:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    15a4:	0a c0       	rjmp	.+20     	; 0x15ba <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15a6:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15a8:	30 91 61 01 	lds	r19, 0x0161
    com tmpreg2
    15ac:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15ae:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15b0:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15b2:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15b4:	0f be       	out	0x3f, r0	; 63
    return 0
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	08 95       	ret

000015ba <nocollision>:
nocollision:
    nop
    15ba:	00 00       	nop
    dec tmpreg1
    15bc:	2a 95       	dec	r18
    brne checkcollision
    15be:	81 f7       	brne	.-32     	; 0x15a0 <checkcollision>

    ldi tmpreg1, 0x01
    15c0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15c2:	30 91 61 01 	lds	r19, 0x0161
    15c6:	20 30       	cpi	r18, 0x00	; 0
    15c8:	29 f0       	breq	.+10     	; 0x15d4 <nocollision+0x1a>
    15ca:	00 00       	nop
    15cc:	25 b1       	in	r18, 0x05	; 5
    15ce:	23 2b       	or	r18, r19
    15d0:	25 b9       	out	0x05, r18	; 5
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <nocollision+0x22>
    15d4:	00 00       	nop
    15d6:	00 00       	nop
    15d8:	00 00       	nop
    15da:	00 c0       	rjmp	.+0      	; 0x15dc <nocollision+0x22>
    15dc:	00 00       	nop
    15de:	00 00       	nop
    15e0:	00 00       	nop
    15e2:	30 95       	com	r19
    15e4:	25 b1       	in	r18, 0x05	; 5
    15e6:	23 23       	and	r18, r19
    15e8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    15ea:	00 00       	nop
    15ec:	24 e5       	ldi	r18, 0x54	; 84
    15ee:	2a 95       	dec	r18
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    15f2:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    15f4:	8c e0       	ldi	r24, 0x0C	; 12

000015f6 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    15f6:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    15fa:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    15fc:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    15fe:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1600:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1602:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1604:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1606:	50 e0       	ldi	r21, 0x00	; 0

00001608 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1608:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    160a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    160c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    160e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1610:	30 91 61 01 	lds	r19, 0x0161
    1614:	20 30       	cpi	r18, 0x00	; 0
    1616:	29 f0       	breq	.+10     	; 0x1622 <sendbit+0x1a>
    1618:	00 00       	nop
    161a:	25 b1       	in	r18, 0x05	; 5
    161c:	23 2b       	or	r18, r19
    161e:	25 b9       	out	0x05, r18	; 5
    1620:	04 c0       	rjmp	.+8      	; 0x162a <sendbit+0x22>
    1622:	00 00       	nop
    1624:	00 00       	nop
    1626:	00 00       	nop
    1628:	00 c0       	rjmp	.+0      	; 0x162a <sendbit+0x22>
    162a:	00 00       	nop
    162c:	00 00       	nop
    162e:	00 00       	nop
    1630:	30 95       	com	r19
    1632:	25 b1       	in	r18, 0x05	; 5
    1634:	23 23       	and	r18, r19
    1636:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1638:	00 00       	nop
    163a:	21 e5       	ldi	r18, 0x51	; 81
    163c:	2a 95       	dec	r18
    163e:	f1 f7       	brne	.-4      	; 0x163c <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1640:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1642:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1644:	9a 95       	dec	r25
    brne sendbit
    1646:	01 f7       	brne	.-64     	; 0x1608 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1648:	8a 95       	dec	r24
    brne sendbyte
    164a:	a9 f6       	brne	.-86     	; 0x15f6 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    164c:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    164e:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1650:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1652:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1654:	30 91 61 01 	lds	r19, 0x0161
    com tmpreg2
    1658:	30 95       	com	r19
    in tmpreg1, IR_PORT
    165a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    165c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    165e:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1660:	0f be       	out	0x3f, r0	; 63
    return 1
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	08 95       	ret

00001666 <main>:
    distance = estimate_distance(d);
}

int main()
{
    kilo_init();
    1666:	0e 94 c4 01 	call	0x388	; 0x388 <kilo_init>
    debug_init();
    166a:	0e 94 4b 01 	call	0x296	; 0x296 <debug_init>
    kilo_message_rx = message_rx;
    166e:	81 e9       	ldi	r24, 0x91	; 145
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 14 01 	sts	0x0114, r25
    1676:	80 93 13 01 	sts	0x0113, r24
    kilo_start(setup, loop);
    167a:	60 ea       	ldi	r22, 0xA0	; 160
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	8a e7       	ldi	r24, 0x7A	; 122
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 c0 02 	call	0x580	; 0x580 <kilo_start>
    
    return 0;
}
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	08 95       	ret

0000168c <__divmodhi4>:
    168c:	97 fb       	bst	r25, 7
    168e:	07 2e       	mov	r0, r23
    1690:	16 f4       	brtc	.+4      	; 0x1696 <__divmodhi4+0xa>
    1692:	00 94       	com	r0
    1694:	07 d0       	rcall	.+14     	; 0x16a4 <__divmodhi4_neg1>
    1696:	77 fd       	sbrc	r23, 7
    1698:	09 d0       	rcall	.+18     	; 0x16ac <__divmodhi4_neg2>
    169a:	0e 94 6f 0b 	call	0x16de	; 0x16de <__udivmodhi4>
    169e:	07 fc       	sbrc	r0, 7
    16a0:	05 d0       	rcall	.+10     	; 0x16ac <__divmodhi4_neg2>
    16a2:	3e f4       	brtc	.+14     	; 0x16b2 <__divmodhi4_exit>

000016a4 <__divmodhi4_neg1>:
    16a4:	90 95       	com	r25
    16a6:	81 95       	neg	r24
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	08 95       	ret

000016ac <__divmodhi4_neg2>:
    16ac:	70 95       	com	r23
    16ae:	61 95       	neg	r22
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255

000016b2 <__divmodhi4_exit>:
    16b2:	08 95       	ret

000016b4 <__tablejump2__>:
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	05 90       	lpm	r0, Z+
    16ba:	f4 91       	lpm	r31, Z
    16bc:	e0 2d       	mov	r30, r0
    16be:	09 94       	ijmp

000016c0 <__umulhisi3>:
    16c0:	a2 9f       	mul	r26, r18
    16c2:	b0 01       	movw	r22, r0
    16c4:	b3 9f       	mul	r27, r19
    16c6:	c0 01       	movw	r24, r0
    16c8:	a3 9f       	mul	r26, r19
    16ca:	70 0d       	add	r23, r0
    16cc:	81 1d       	adc	r24, r1
    16ce:	11 24       	eor	r1, r1
    16d0:	91 1d       	adc	r25, r1
    16d2:	b2 9f       	mul	r27, r18
    16d4:	70 0d       	add	r23, r0
    16d6:	81 1d       	adc	r24, r1
    16d8:	11 24       	eor	r1, r1
    16da:	91 1d       	adc	r25, r1
    16dc:	08 95       	ret

000016de <__udivmodhi4>:
    16de:	aa 1b       	sub	r26, r26
    16e0:	bb 1b       	sub	r27, r27
    16e2:	51 e1       	ldi	r21, 0x11	; 17
    16e4:	07 c0       	rjmp	.+14     	; 0x16f4 <__udivmodhi4_ep>

000016e6 <__udivmodhi4_loop>:
    16e6:	aa 1f       	adc	r26, r26
    16e8:	bb 1f       	adc	r27, r27
    16ea:	a6 17       	cp	r26, r22
    16ec:	b7 07       	cpc	r27, r23
    16ee:	10 f0       	brcs	.+4      	; 0x16f4 <__udivmodhi4_ep>
    16f0:	a6 1b       	sub	r26, r22
    16f2:	b7 0b       	sbc	r27, r23

000016f4 <__udivmodhi4_ep>:
    16f4:	88 1f       	adc	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	5a 95       	dec	r21
    16fa:	a9 f7       	brne	.-22     	; 0x16e6 <__udivmodhi4_loop>
    16fc:	80 95       	com	r24
    16fe:	90 95       	com	r25
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	08 95       	ret

00001706 <__subsf3>:
    1706:	50 58       	subi	r21, 0x80	; 128

00001708 <__addsf3>:
    1708:	bb 27       	eor	r27, r27
    170a:	aa 27       	eor	r26, r26
    170c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__addsf3x>
    1710:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__fp_round>
    1714:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_pscA>
    1718:	38 f0       	brcs	.+14     	; 0x1728 <__addsf3+0x20>
    171a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__fp_pscB>
    171e:	20 f0       	brcs	.+8      	; 0x1728 <__addsf3+0x20>
    1720:	39 f4       	brne	.+14     	; 0x1730 <__addsf3+0x28>
    1722:	9f 3f       	cpi	r25, 0xFF	; 255
    1724:	19 f4       	brne	.+6      	; 0x172c <__addsf3+0x24>
    1726:	26 f4       	brtc	.+8      	; 0x1730 <__addsf3+0x28>
    1728:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_nan>
    172c:	0e f4       	brtc	.+2      	; 0x1730 <__addsf3+0x28>
    172e:	e0 95       	com	r30
    1730:	e7 fb       	bst	r30, 7
    1732:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__fp_inf>

00001736 <__addsf3x>:
    1736:	e9 2f       	mov	r30, r25
    1738:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fp_split3>
    173c:	58 f3       	brcs	.-42     	; 0x1714 <__addsf3+0xc>
    173e:	ba 17       	cp	r27, r26
    1740:	62 07       	cpc	r22, r18
    1742:	73 07       	cpc	r23, r19
    1744:	84 07       	cpc	r24, r20
    1746:	95 07       	cpc	r25, r21
    1748:	20 f0       	brcs	.+8      	; 0x1752 <__addsf3x+0x1c>
    174a:	79 f4       	brne	.+30     	; 0x176a <__addsf3x+0x34>
    174c:	a6 f5       	brtc	.+104    	; 0x17b6 <__addsf3x+0x80>
    174e:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_zero>
    1752:	0e f4       	brtc	.+2      	; 0x1756 <__addsf3x+0x20>
    1754:	e0 95       	com	r30
    1756:	0b 2e       	mov	r0, r27
    1758:	ba 2f       	mov	r27, r26
    175a:	a0 2d       	mov	r26, r0
    175c:	0b 01       	movw	r0, r22
    175e:	b9 01       	movw	r22, r18
    1760:	90 01       	movw	r18, r0
    1762:	0c 01       	movw	r0, r24
    1764:	ca 01       	movw	r24, r20
    1766:	a0 01       	movw	r20, r0
    1768:	11 24       	eor	r1, r1
    176a:	ff 27       	eor	r31, r31
    176c:	59 1b       	sub	r21, r25
    176e:	99 f0       	breq	.+38     	; 0x1796 <__addsf3x+0x60>
    1770:	59 3f       	cpi	r21, 0xF9	; 249
    1772:	50 f4       	brcc	.+20     	; 0x1788 <__addsf3x+0x52>
    1774:	50 3e       	cpi	r21, 0xE0	; 224
    1776:	68 f1       	brcs	.+90     	; 0x17d2 <__addsf3x+0x9c>
    1778:	1a 16       	cp	r1, r26
    177a:	f0 40       	sbci	r31, 0x00	; 0
    177c:	a2 2f       	mov	r26, r18
    177e:	23 2f       	mov	r18, r19
    1780:	34 2f       	mov	r19, r20
    1782:	44 27       	eor	r20, r20
    1784:	58 5f       	subi	r21, 0xF8	; 248
    1786:	f3 cf       	rjmp	.-26     	; 0x176e <__addsf3x+0x38>
    1788:	46 95       	lsr	r20
    178a:	37 95       	ror	r19
    178c:	27 95       	ror	r18
    178e:	a7 95       	ror	r26
    1790:	f0 40       	sbci	r31, 0x00	; 0
    1792:	53 95       	inc	r21
    1794:	c9 f7       	brne	.-14     	; 0x1788 <__addsf3x+0x52>
    1796:	7e f4       	brtc	.+30     	; 0x17b6 <__addsf3x+0x80>
    1798:	1f 16       	cp	r1, r31
    179a:	ba 0b       	sbc	r27, r26
    179c:	62 0b       	sbc	r22, r18
    179e:	73 0b       	sbc	r23, r19
    17a0:	84 0b       	sbc	r24, r20
    17a2:	ba f0       	brmi	.+46     	; 0x17d2 <__addsf3x+0x9c>
    17a4:	91 50       	subi	r25, 0x01	; 1
    17a6:	a1 f0       	breq	.+40     	; 0x17d0 <__addsf3x+0x9a>
    17a8:	ff 0f       	add	r31, r31
    17aa:	bb 1f       	adc	r27, r27
    17ac:	66 1f       	adc	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	c2 f7       	brpl	.-16     	; 0x17a4 <__addsf3x+0x6e>
    17b4:	0e c0       	rjmp	.+28     	; 0x17d2 <__addsf3x+0x9c>
    17b6:	ba 0f       	add	r27, r26
    17b8:	62 1f       	adc	r22, r18
    17ba:	73 1f       	adc	r23, r19
    17bc:	84 1f       	adc	r24, r20
    17be:	48 f4       	brcc	.+18     	; 0x17d2 <__addsf3x+0x9c>
    17c0:	87 95       	ror	r24
    17c2:	77 95       	ror	r23
    17c4:	67 95       	ror	r22
    17c6:	b7 95       	ror	r27
    17c8:	f7 95       	ror	r31
    17ca:	9e 3f       	cpi	r25, 0xFE	; 254
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <__addsf3x+0x9a>
    17ce:	b0 cf       	rjmp	.-160    	; 0x1730 <__addsf3+0x28>
    17d0:	93 95       	inc	r25
    17d2:	88 0f       	add	r24, r24
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <__addsf3x+0xa2>
    17d6:	99 27       	eor	r25, r25
    17d8:	ee 0f       	add	r30, r30
    17da:	97 95       	ror	r25
    17dc:	87 95       	ror	r24
    17de:	08 95       	ret

000017e0 <__divsf3>:
    17e0:	0e 94 04 0c 	call	0x1808	; 0x1808 <__divsf3x>
    17e4:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__fp_round>
    17e8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__fp_pscB>
    17ec:	58 f0       	brcs	.+22     	; 0x1804 <__divsf3+0x24>
    17ee:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_pscA>
    17f2:	40 f0       	brcs	.+16     	; 0x1804 <__divsf3+0x24>
    17f4:	29 f4       	brne	.+10     	; 0x1800 <__divsf3+0x20>
    17f6:	5f 3f       	cpi	r21, 0xFF	; 255
    17f8:	29 f0       	breq	.+10     	; 0x1804 <__divsf3+0x24>
    17fa:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__fp_inf>
    17fe:	51 11       	cpse	r21, r1
    1800:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_szero>
    1804:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_nan>

00001808 <__divsf3x>:
    1808:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fp_split3>
    180c:	68 f3       	brcs	.-38     	; 0x17e8 <__divsf3+0x8>

0000180e <__divsf3_pse>:
    180e:	99 23       	and	r25, r25
    1810:	b1 f3       	breq	.-20     	; 0x17fe <__divsf3+0x1e>
    1812:	55 23       	and	r21, r21
    1814:	91 f3       	breq	.-28     	; 0x17fa <__divsf3+0x1a>
    1816:	95 1b       	sub	r25, r21
    1818:	55 0b       	sbc	r21, r21
    181a:	bb 27       	eor	r27, r27
    181c:	aa 27       	eor	r26, r26
    181e:	62 17       	cp	r22, r18
    1820:	73 07       	cpc	r23, r19
    1822:	84 07       	cpc	r24, r20
    1824:	38 f0       	brcs	.+14     	; 0x1834 <__divsf3_pse+0x26>
    1826:	9f 5f       	subi	r25, 0xFF	; 255
    1828:	5f 4f       	sbci	r21, 0xFF	; 255
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	44 1f       	adc	r20, r20
    1830:	aa 1f       	adc	r26, r26
    1832:	a9 f3       	breq	.-22     	; 0x181e <__divsf3_pse+0x10>
    1834:	35 d0       	rcall	.+106    	; 0x18a0 <__divsf3_pse+0x92>
    1836:	0e 2e       	mov	r0, r30
    1838:	3a f0       	brmi	.+14     	; 0x1848 <__divsf3_pse+0x3a>
    183a:	e0 e8       	ldi	r30, 0x80	; 128
    183c:	32 d0       	rcall	.+100    	; 0x18a2 <__divsf3_pse+0x94>
    183e:	91 50       	subi	r25, 0x01	; 1
    1840:	50 40       	sbci	r21, 0x00	; 0
    1842:	e6 95       	lsr	r30
    1844:	00 1c       	adc	r0, r0
    1846:	ca f7       	brpl	.-14     	; 0x183a <__divsf3_pse+0x2c>
    1848:	2b d0       	rcall	.+86     	; 0x18a0 <__divsf3_pse+0x92>
    184a:	fe 2f       	mov	r31, r30
    184c:	29 d0       	rcall	.+82     	; 0x18a0 <__divsf3_pse+0x92>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	bb 1f       	adc	r27, r27
    1856:	26 17       	cp	r18, r22
    1858:	37 07       	cpc	r19, r23
    185a:	48 07       	cpc	r20, r24
    185c:	ab 07       	cpc	r26, r27
    185e:	b0 e8       	ldi	r27, 0x80	; 128
    1860:	09 f0       	breq	.+2      	; 0x1864 <__divsf3_pse+0x56>
    1862:	bb 0b       	sbc	r27, r27
    1864:	80 2d       	mov	r24, r0
    1866:	bf 01       	movw	r22, r30
    1868:	ff 27       	eor	r31, r31
    186a:	93 58       	subi	r25, 0x83	; 131
    186c:	5f 4f       	sbci	r21, 0xFF	; 255
    186e:	3a f0       	brmi	.+14     	; 0x187e <__divsf3_pse+0x70>
    1870:	9e 3f       	cpi	r25, 0xFE	; 254
    1872:	51 05       	cpc	r21, r1
    1874:	78 f0       	brcs	.+30     	; 0x1894 <__divsf3_pse+0x86>
    1876:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__fp_inf>
    187a:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_szero>
    187e:	5f 3f       	cpi	r21, 0xFF	; 255
    1880:	e4 f3       	brlt	.-8      	; 0x187a <__divsf3_pse+0x6c>
    1882:	98 3e       	cpi	r25, 0xE8	; 232
    1884:	d4 f3       	brlt	.-12     	; 0x187a <__divsf3_pse+0x6c>
    1886:	86 95       	lsr	r24
    1888:	77 95       	ror	r23
    188a:	67 95       	ror	r22
    188c:	b7 95       	ror	r27
    188e:	f7 95       	ror	r31
    1890:	9f 5f       	subi	r25, 0xFF	; 255
    1892:	c9 f7       	brne	.-14     	; 0x1886 <__divsf3_pse+0x78>
    1894:	88 0f       	add	r24, r24
    1896:	91 1d       	adc	r25, r1
    1898:	96 95       	lsr	r25
    189a:	87 95       	ror	r24
    189c:	97 f9       	bld	r25, 7
    189e:	08 95       	ret
    18a0:	e1 e0       	ldi	r30, 0x01	; 1
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	bb 1f       	adc	r27, r27
    18aa:	62 17       	cp	r22, r18
    18ac:	73 07       	cpc	r23, r19
    18ae:	84 07       	cpc	r24, r20
    18b0:	ba 07       	cpc	r27, r26
    18b2:	20 f0       	brcs	.+8      	; 0x18bc <__divsf3_pse+0xae>
    18b4:	62 1b       	sub	r22, r18
    18b6:	73 0b       	sbc	r23, r19
    18b8:	84 0b       	sbc	r24, r20
    18ba:	ba 0b       	sbc	r27, r26
    18bc:	ee 1f       	adc	r30, r30
    18be:	88 f7       	brcc	.-30     	; 0x18a2 <__divsf3_pse+0x94>
    18c0:	e0 95       	com	r30
    18c2:	08 95       	ret

000018c4 <__fixsfsi>:
    18c4:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fixunssfsi>
    18c8:	68 94       	set
    18ca:	b1 11       	cpse	r27, r1
    18cc:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_szero>
    18d0:	08 95       	ret

000018d2 <__fixunssfsi>:
    18d2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__fp_splitA>
    18d6:	88 f0       	brcs	.+34     	; 0x18fa <__fixunssfsi+0x28>
    18d8:	9f 57       	subi	r25, 0x7F	; 127
    18da:	98 f0       	brcs	.+38     	; 0x1902 <__fixunssfsi+0x30>
    18dc:	b9 2f       	mov	r27, r25
    18de:	99 27       	eor	r25, r25
    18e0:	b7 51       	subi	r27, 0x17	; 23
    18e2:	b0 f0       	brcs	.+44     	; 0x1910 <__fixunssfsi+0x3e>
    18e4:	e1 f0       	breq	.+56     	; 0x191e <__fixunssfsi+0x4c>
    18e6:	66 0f       	add	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	1a f0       	brmi	.+6      	; 0x18f6 <__fixunssfsi+0x24>
    18f0:	ba 95       	dec	r27
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__fixunssfsi+0x14>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <__fixunssfsi+0x4c>
    18f6:	b1 30       	cpi	r27, 0x01	; 1
    18f8:	91 f0       	breq	.+36     	; 0x191e <__fixunssfsi+0x4c>
    18fa:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fp_zero>
    18fe:	b1 e0       	ldi	r27, 0x01	; 1
    1900:	08 95       	ret
    1902:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_zero>
    1906:	67 2f       	mov	r22, r23
    1908:	78 2f       	mov	r23, r24
    190a:	88 27       	eor	r24, r24
    190c:	b8 5f       	subi	r27, 0xF8	; 248
    190e:	39 f0       	breq	.+14     	; 0x191e <__fixunssfsi+0x4c>
    1910:	b9 3f       	cpi	r27, 0xF9	; 249
    1912:	cc f3       	brlt	.-14     	; 0x1906 <__fixunssfsi+0x34>
    1914:	86 95       	lsr	r24
    1916:	77 95       	ror	r23
    1918:	67 95       	ror	r22
    191a:	b3 95       	inc	r27
    191c:	d9 f7       	brne	.-10     	; 0x1914 <__fixunssfsi+0x42>
    191e:	3e f4       	brtc	.+14     	; 0x192e <__fixunssfsi+0x5c>
    1920:	90 95       	com	r25
    1922:	80 95       	com	r24
    1924:	70 95       	com	r23
    1926:	61 95       	neg	r22
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	8f 4f       	sbci	r24, 0xFF	; 255
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	08 95       	ret

00001930 <__floatunsisf>:
    1930:	e8 94       	clt
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <__floatsisf+0x12>

00001934 <__floatsisf>:
    1934:	97 fb       	bst	r25, 7
    1936:	3e f4       	brtc	.+14     	; 0x1946 <__floatsisf+0x12>
    1938:	90 95       	com	r25
    193a:	80 95       	com	r24
    193c:	70 95       	com	r23
    193e:	61 95       	neg	r22
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	8f 4f       	sbci	r24, 0xFF	; 255
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	99 23       	and	r25, r25
    1948:	a9 f0       	breq	.+42     	; 0x1974 <__floatsisf+0x40>
    194a:	f9 2f       	mov	r31, r25
    194c:	96 e9       	ldi	r25, 0x96	; 150
    194e:	bb 27       	eor	r27, r27
    1950:	93 95       	inc	r25
    1952:	f6 95       	lsr	r31
    1954:	87 95       	ror	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f1 11       	cpse	r31, r1
    195e:	f8 cf       	rjmp	.-16     	; 0x1950 <__floatsisf+0x1c>
    1960:	fa f4       	brpl	.+62     	; 0x19a0 <__floatsisf+0x6c>
    1962:	bb 0f       	add	r27, r27
    1964:	11 f4       	brne	.+4      	; 0x196a <__floatsisf+0x36>
    1966:	60 ff       	sbrs	r22, 0
    1968:	1b c0       	rjmp	.+54     	; 0x19a0 <__floatsisf+0x6c>
    196a:	6f 5f       	subi	r22, 0xFF	; 255
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	8f 4f       	sbci	r24, 0xFF	; 255
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	16 c0       	rjmp	.+44     	; 0x19a0 <__floatsisf+0x6c>
    1974:	88 23       	and	r24, r24
    1976:	11 f0       	breq	.+4      	; 0x197c <__floatsisf+0x48>
    1978:	96 e9       	ldi	r25, 0x96	; 150
    197a:	11 c0       	rjmp	.+34     	; 0x199e <__floatsisf+0x6a>
    197c:	77 23       	and	r23, r23
    197e:	21 f0       	breq	.+8      	; 0x1988 <__floatsisf+0x54>
    1980:	9e e8       	ldi	r25, 0x8E	; 142
    1982:	87 2f       	mov	r24, r23
    1984:	76 2f       	mov	r23, r22
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <__floatsisf+0x5e>
    1988:	66 23       	and	r22, r22
    198a:	71 f0       	breq	.+28     	; 0x19a8 <__floatsisf+0x74>
    198c:	96 e8       	ldi	r25, 0x86	; 134
    198e:	86 2f       	mov	r24, r22
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	2a f0       	brmi	.+10     	; 0x19a0 <__floatsisf+0x6c>
    1996:	9a 95       	dec	r25
    1998:	66 0f       	add	r22, r22
    199a:	77 1f       	adc	r23, r23
    199c:	88 1f       	adc	r24, r24
    199e:	da f7       	brpl	.-10     	; 0x1996 <__floatsisf+0x62>
    19a0:	88 0f       	add	r24, r24
    19a2:	96 95       	lsr	r25
    19a4:	87 95       	ror	r24
    19a6:	97 f9       	bld	r25, 7
    19a8:	08 95       	ret

000019aa <__fp_inf>:
    19aa:	97 f9       	bld	r25, 7
    19ac:	9f 67       	ori	r25, 0x7F	; 127
    19ae:	80 e8       	ldi	r24, 0x80	; 128
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	08 95       	ret

000019b6 <__fp_nan>:
    19b6:	9f ef       	ldi	r25, 0xFF	; 255
    19b8:	80 ec       	ldi	r24, 0xC0	; 192
    19ba:	08 95       	ret

000019bc <__fp_pscA>:
    19bc:	00 24       	eor	r0, r0
    19be:	0a 94       	dec	r0
    19c0:	16 16       	cp	r1, r22
    19c2:	17 06       	cpc	r1, r23
    19c4:	18 06       	cpc	r1, r24
    19c6:	09 06       	cpc	r0, r25
    19c8:	08 95       	ret

000019ca <__fp_pscB>:
    19ca:	00 24       	eor	r0, r0
    19cc:	0a 94       	dec	r0
    19ce:	12 16       	cp	r1, r18
    19d0:	13 06       	cpc	r1, r19
    19d2:	14 06       	cpc	r1, r20
    19d4:	05 06       	cpc	r0, r21
    19d6:	08 95       	ret

000019d8 <__fp_round>:
    19d8:	09 2e       	mov	r0, r25
    19da:	03 94       	inc	r0
    19dc:	00 0c       	add	r0, r0
    19de:	11 f4       	brne	.+4      	; 0x19e4 <__fp_round+0xc>
    19e0:	88 23       	and	r24, r24
    19e2:	52 f0       	brmi	.+20     	; 0x19f8 <__fp_round+0x20>
    19e4:	bb 0f       	add	r27, r27
    19e6:	40 f4       	brcc	.+16     	; 0x19f8 <__fp_round+0x20>
    19e8:	bf 2b       	or	r27, r31
    19ea:	11 f4       	brne	.+4      	; 0x19f0 <__fp_round+0x18>
    19ec:	60 ff       	sbrs	r22, 0
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <__fp_round+0x20>
    19f0:	6f 5f       	subi	r22, 0xFF	; 255
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	8f 4f       	sbci	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	08 95       	ret

000019fa <__fp_split3>:
    19fa:	57 fd       	sbrc	r21, 7
    19fc:	90 58       	subi	r25, 0x80	; 128
    19fe:	44 0f       	add	r20, r20
    1a00:	55 1f       	adc	r21, r21
    1a02:	59 f0       	breq	.+22     	; 0x1a1a <__fp_splitA+0x10>
    1a04:	5f 3f       	cpi	r21, 0xFF	; 255
    1a06:	71 f0       	breq	.+28     	; 0x1a24 <__fp_splitA+0x1a>
    1a08:	47 95       	ror	r20

00001a0a <__fp_splitA>:
    1a0a:	88 0f       	add	r24, r24
    1a0c:	97 fb       	bst	r25, 7
    1a0e:	99 1f       	adc	r25, r25
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <__fp_splitA+0x20>
    1a12:	9f 3f       	cpi	r25, 0xFF	; 255
    1a14:	79 f0       	breq	.+30     	; 0x1a34 <__fp_splitA+0x2a>
    1a16:	87 95       	ror	r24
    1a18:	08 95       	ret
    1a1a:	12 16       	cp	r1, r18
    1a1c:	13 06       	cpc	r1, r19
    1a1e:	14 06       	cpc	r1, r20
    1a20:	55 1f       	adc	r21, r21
    1a22:	f2 cf       	rjmp	.-28     	; 0x1a08 <__fp_split3+0xe>
    1a24:	46 95       	lsr	r20
    1a26:	f1 df       	rcall	.-30     	; 0x1a0a <__fp_splitA>
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <__fp_splitA+0x30>
    1a2a:	16 16       	cp	r1, r22
    1a2c:	17 06       	cpc	r1, r23
    1a2e:	18 06       	cpc	r1, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	f1 cf       	rjmp	.-30     	; 0x1a16 <__fp_splitA+0xc>
    1a34:	86 95       	lsr	r24
    1a36:	71 05       	cpc	r23, r1
    1a38:	61 05       	cpc	r22, r1
    1a3a:	08 94       	sec
    1a3c:	08 95       	ret

00001a3e <__fp_zero>:
    1a3e:	e8 94       	clt

00001a40 <__fp_szero>:
    1a40:	bb 27       	eor	r27, r27
    1a42:	66 27       	eor	r22, r22
    1a44:	77 27       	eor	r23, r23
    1a46:	cb 01       	movw	r24, r22
    1a48:	97 f9       	bld	r25, 7
    1a4a:	08 95       	ret

00001a4c <__mulsf3>:
    1a4c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__mulsf3x>
    1a50:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__fp_round>
    1a54:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_pscA>
    1a58:	38 f0       	brcs	.+14     	; 0x1a68 <__mulsf3+0x1c>
    1a5a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__fp_pscB>
    1a5e:	20 f0       	brcs	.+8      	; 0x1a68 <__mulsf3+0x1c>
    1a60:	95 23       	and	r25, r21
    1a62:	11 f0       	breq	.+4      	; 0x1a68 <__mulsf3+0x1c>
    1a64:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__fp_inf>
    1a68:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_nan>
    1a6c:	11 24       	eor	r1, r1
    1a6e:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_szero>

00001a72 <__mulsf3x>:
    1a72:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fp_split3>
    1a76:	70 f3       	brcs	.-36     	; 0x1a54 <__mulsf3+0x8>

00001a78 <__mulsf3_pse>:
    1a78:	95 9f       	mul	r25, r21
    1a7a:	c1 f3       	breq	.-16     	; 0x1a6c <__mulsf3+0x20>
    1a7c:	95 0f       	add	r25, r21
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	55 1f       	adc	r21, r21
    1a82:	62 9f       	mul	r22, r18
    1a84:	f0 01       	movw	r30, r0
    1a86:	72 9f       	mul	r23, r18
    1a88:	bb 27       	eor	r27, r27
    1a8a:	f0 0d       	add	r31, r0
    1a8c:	b1 1d       	adc	r27, r1
    1a8e:	63 9f       	mul	r22, r19
    1a90:	aa 27       	eor	r26, r26
    1a92:	f0 0d       	add	r31, r0
    1a94:	b1 1d       	adc	r27, r1
    1a96:	aa 1f       	adc	r26, r26
    1a98:	64 9f       	mul	r22, r20
    1a9a:	66 27       	eor	r22, r22
    1a9c:	b0 0d       	add	r27, r0
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	66 1f       	adc	r22, r22
    1aa2:	82 9f       	mul	r24, r18
    1aa4:	22 27       	eor	r18, r18
    1aa6:	b0 0d       	add	r27, r0
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	62 1f       	adc	r22, r18
    1aac:	73 9f       	mul	r23, r19
    1aae:	b0 0d       	add	r27, r0
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	62 1f       	adc	r22, r18
    1ab4:	83 9f       	mul	r24, r19
    1ab6:	a0 0d       	add	r26, r0
    1ab8:	61 1d       	adc	r22, r1
    1aba:	22 1f       	adc	r18, r18
    1abc:	74 9f       	mul	r23, r20
    1abe:	33 27       	eor	r19, r19
    1ac0:	a0 0d       	add	r26, r0
    1ac2:	61 1d       	adc	r22, r1
    1ac4:	23 1f       	adc	r18, r19
    1ac6:	84 9f       	mul	r24, r20
    1ac8:	60 0d       	add	r22, r0
    1aca:	21 1d       	adc	r18, r1
    1acc:	82 2f       	mov	r24, r18
    1ace:	76 2f       	mov	r23, r22
    1ad0:	6a 2f       	mov	r22, r26
    1ad2:	11 24       	eor	r1, r1
    1ad4:	9f 57       	subi	r25, 0x7F	; 127
    1ad6:	50 40       	sbci	r21, 0x00	; 0
    1ad8:	9a f0       	brmi	.+38     	; 0x1b00 <__mulsf3_pse+0x88>
    1ada:	f1 f0       	breq	.+60     	; 0x1b18 <__mulsf3_pse+0xa0>
    1adc:	88 23       	and	r24, r24
    1ade:	4a f0       	brmi	.+18     	; 0x1af2 <__mulsf3_pse+0x7a>
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	66 1f       	adc	r22, r22
    1ae8:	77 1f       	adc	r23, r23
    1aea:	88 1f       	adc	r24, r24
    1aec:	91 50       	subi	r25, 0x01	; 1
    1aee:	50 40       	sbci	r21, 0x00	; 0
    1af0:	a9 f7       	brne	.-22     	; 0x1adc <__mulsf3_pse+0x64>
    1af2:	9e 3f       	cpi	r25, 0xFE	; 254
    1af4:	51 05       	cpc	r21, r1
    1af6:	80 f0       	brcs	.+32     	; 0x1b18 <__mulsf3_pse+0xa0>
    1af8:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__fp_inf>
    1afc:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_szero>
    1b00:	5f 3f       	cpi	r21, 0xFF	; 255
    1b02:	e4 f3       	brlt	.-8      	; 0x1afc <__mulsf3_pse+0x84>
    1b04:	98 3e       	cpi	r25, 0xE8	; 232
    1b06:	d4 f3       	brlt	.-12     	; 0x1afc <__mulsf3_pse+0x84>
    1b08:	86 95       	lsr	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b7 95       	ror	r27
    1b10:	f7 95       	ror	r31
    1b12:	e7 95       	ror	r30
    1b14:	9f 5f       	subi	r25, 0xFF	; 255
    1b16:	c1 f7       	brne	.-16     	; 0x1b08 <__mulsf3_pse+0x90>
    1b18:	fe 2b       	or	r31, r30
    1b1a:	88 0f       	add	r24, r24
    1b1c:	91 1d       	adc	r25, r1
    1b1e:	96 95       	lsr	r25
    1b20:	87 95       	ror	r24
    1b22:	97 f9       	bld	r25, 7
    1b24:	08 95       	ret

00001b26 <do_rand>:
    1b26:	8f 92       	push	r8
    1b28:	9f 92       	push	r9
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	68 81       	ld	r22, Y
    1b3e:	79 81       	ldd	r23, Y+1	; 0x01
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	9b 81       	ldd	r25, Y+3	; 0x03
    1b44:	61 15       	cp	r22, r1
    1b46:	71 05       	cpc	r23, r1
    1b48:	81 05       	cpc	r24, r1
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	21 f4       	brne	.+8      	; 0x1b56 <do_rand+0x30>
    1b4e:	64 e2       	ldi	r22, 0x24	; 36
    1b50:	79 ed       	ldi	r23, 0xD9	; 217
    1b52:	8b e5       	ldi	r24, 0x5B	; 91
    1b54:	97 e0       	ldi	r25, 0x07	; 7
    1b56:	2d e1       	ldi	r18, 0x1D	; 29
    1b58:	33 ef       	ldi	r19, 0xF3	; 243
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	0e 94 99 10 	call	0x2132	; 0x2132 <__divmodsi4>
    1b62:	49 01       	movw	r8, r18
    1b64:	5a 01       	movw	r10, r20
    1b66:	9b 01       	movw	r18, r22
    1b68:	ac 01       	movw	r20, r24
    1b6a:	a7 ea       	ldi	r26, 0xA7	; 167
    1b6c:	b1 e4       	ldi	r27, 0x41	; 65
    1b6e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__muluhisi3>
    1b72:	6b 01       	movw	r12, r22
    1b74:	7c 01       	movw	r14, r24
    1b76:	ac ee       	ldi	r26, 0xEC	; 236
    1b78:	b4 ef       	ldi	r27, 0xF4	; 244
    1b7a:	a5 01       	movw	r20, r10
    1b7c:	94 01       	movw	r18, r8
    1b7e:	0e 94 c6 10 	call	0x218c	; 0x218c <__mulohisi3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8c 0d       	add	r24, r12
    1b88:	9d 1d       	adc	r25, r13
    1b8a:	ae 1d       	adc	r26, r14
    1b8c:	bf 1d       	adc	r27, r15
    1b8e:	b7 ff       	sbrs	r27, 7
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <do_rand+0x72>
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	a1 09       	sbc	r26, r1
    1b96:	b0 48       	sbci	r27, 0x80	; 128
    1b98:	88 83       	st	Y, r24
    1b9a:	99 83       	std	Y+1, r25	; 0x01
    1b9c:	aa 83       	std	Y+2, r26	; 0x02
    1b9e:	bb 83       	std	Y+3, r27	; 0x03
    1ba0:	9f 77       	andi	r25, 0x7F	; 127
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	9f 90       	pop	r9
    1bb4:	8f 90       	pop	r8
    1bb6:	08 95       	ret

00001bb8 <rand_r>:
    1bb8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <do_rand>
    1bbc:	08 95       	ret

00001bbe <rand>:
    1bbe:	85 e1       	ldi	r24, 0x15	; 21
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <do_rand>
    1bc6:	08 95       	ret

00001bc8 <srand>:
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	80 93 15 01 	sts	0x0115, r24
    1bd0:	90 93 16 01 	sts	0x0116, r25
    1bd4:	a0 93 17 01 	sts	0x0117, r26
    1bd8:	b0 93 18 01 	sts	0x0118, r27
    1bdc:	08 95       	ret

00001bde <printf>:
    1bde:	a0 e0       	ldi	r26, 0x00	; 0
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 ef       	ldi	r30, 0xF5	; 245
    1be4:	fd e0       	ldi	r31, 0x0D	; 13
    1be6:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__prologue_saves__+0x20>
    1bea:	ae 01       	movw	r20, r28
    1bec:	4b 5f       	subi	r20, 0xFB	; 251
    1bee:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf0:	fa 01       	movw	r30, r20
    1bf2:	61 91       	ld	r22, Z+
    1bf4:	71 91       	ld	r23, Z+
    1bf6:	af 01       	movw	r20, r30
    1bf8:	80 91 a4 01 	lds	r24, 0x01A4
    1bfc:	90 91 a5 01 	lds	r25, 0x01A5
    1c00:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <vfprintf>
    1c04:	e2 e0       	ldi	r30, 0x02	; 2
    1c06:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__epilogue_restores__+0x20>

00001c0a <vfprintf>:
    1c0a:	ac e0       	ldi	r26, 0x0C	; 12
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e0       	ldi	r30, 0x0B	; 11
    1c10:	fe e0       	ldi	r31, 0x0E	; 14
    1c12:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__prologue_saves__>
    1c16:	7c 01       	movw	r14, r24
    1c18:	6b 01       	movw	r12, r22
    1c1a:	8a 01       	movw	r16, r20
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	17 82       	std	Z+7, r1	; 0x07
    1c20:	16 82       	std	Z+6, r1	; 0x06
    1c22:	83 81       	ldd	r24, Z+3	; 0x03
    1c24:	81 ff       	sbrs	r24, 1
    1c26:	bd c1       	rjmp	.+890    	; 0x1fa2 <vfprintf+0x398>
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	4c 01       	movw	r8, r24
    1c2e:	f7 01       	movw	r30, r14
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	f6 01       	movw	r30, r12
    1c34:	93 fd       	sbrc	r25, 3
    1c36:	85 91       	lpm	r24, Z+
    1c38:	93 ff       	sbrs	r25, 3
    1c3a:	81 91       	ld	r24, Z+
    1c3c:	6f 01       	movw	r12, r30
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <vfprintf+0x3a>
    1c42:	ab c1       	rjmp	.+854    	; 0x1f9a <vfprintf+0x390>
    1c44:	85 32       	cpi	r24, 0x25	; 37
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <vfprintf+0x4c>
    1c48:	93 fd       	sbrc	r25, 3
    1c4a:	85 91       	lpm	r24, Z+
    1c4c:	93 ff       	sbrs	r25, 3
    1c4e:	81 91       	ld	r24, Z+
    1c50:	6f 01       	movw	r12, r30
    1c52:	85 32       	cpi	r24, 0x25	; 37
    1c54:	29 f4       	brne	.+10     	; 0x1c60 <vfprintf+0x56>
    1c56:	b7 01       	movw	r22, r14
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1c5e:	e7 cf       	rjmp	.-50     	; 0x1c2e <vfprintf+0x24>
    1c60:	51 2c       	mov	r5, r1
    1c62:	31 2c       	mov	r3, r1
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	20 32       	cpi	r18, 0x20	; 32
    1c68:	a0 f4       	brcc	.+40     	; 0x1c92 <vfprintf+0x88>
    1c6a:	8b 32       	cpi	r24, 0x2B	; 43
    1c6c:	69 f0       	breq	.+26     	; 0x1c88 <vfprintf+0x7e>
    1c6e:	30 f4       	brcc	.+12     	; 0x1c7c <vfprintf+0x72>
    1c70:	80 32       	cpi	r24, 0x20	; 32
    1c72:	59 f0       	breq	.+22     	; 0x1c8a <vfprintf+0x80>
    1c74:	83 32       	cpi	r24, 0x23	; 35
    1c76:	69 f4       	brne	.+26     	; 0x1c92 <vfprintf+0x88>
    1c78:	20 61       	ori	r18, 0x10	; 16
    1c7a:	2c c0       	rjmp	.+88     	; 0x1cd4 <vfprintf+0xca>
    1c7c:	8d 32       	cpi	r24, 0x2D	; 45
    1c7e:	39 f0       	breq	.+14     	; 0x1c8e <vfprintf+0x84>
    1c80:	80 33       	cpi	r24, 0x30	; 48
    1c82:	39 f4       	brne	.+14     	; 0x1c92 <vfprintf+0x88>
    1c84:	21 60       	ori	r18, 0x01	; 1
    1c86:	26 c0       	rjmp	.+76     	; 0x1cd4 <vfprintf+0xca>
    1c88:	22 60       	ori	r18, 0x02	; 2
    1c8a:	24 60       	ori	r18, 0x04	; 4
    1c8c:	23 c0       	rjmp	.+70     	; 0x1cd4 <vfprintf+0xca>
    1c8e:	28 60       	ori	r18, 0x08	; 8
    1c90:	21 c0       	rjmp	.+66     	; 0x1cd4 <vfprintf+0xca>
    1c92:	27 fd       	sbrc	r18, 7
    1c94:	27 c0       	rjmp	.+78     	; 0x1ce4 <vfprintf+0xda>
    1c96:	30 ed       	ldi	r19, 0xD0	; 208
    1c98:	38 0f       	add	r19, r24
    1c9a:	3a 30       	cpi	r19, 0x0A	; 10
    1c9c:	78 f4       	brcc	.+30     	; 0x1cbc <vfprintf+0xb2>
    1c9e:	26 ff       	sbrs	r18, 6
    1ca0:	06 c0       	rjmp	.+12     	; 0x1cae <vfprintf+0xa4>
    1ca2:	fa e0       	ldi	r31, 0x0A	; 10
    1ca4:	5f 9e       	mul	r5, r31
    1ca6:	30 0d       	add	r19, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	53 2e       	mov	r5, r19
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <vfprintf+0xca>
    1cae:	8a e0       	ldi	r24, 0x0A	; 10
    1cb0:	38 9e       	mul	r3, r24
    1cb2:	30 0d       	add	r19, r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	33 2e       	mov	r3, r19
    1cb8:	20 62       	ori	r18, 0x20	; 32
    1cba:	0c c0       	rjmp	.+24     	; 0x1cd4 <vfprintf+0xca>
    1cbc:	8e 32       	cpi	r24, 0x2E	; 46
    1cbe:	21 f4       	brne	.+8      	; 0x1cc8 <vfprintf+0xbe>
    1cc0:	26 fd       	sbrc	r18, 6
    1cc2:	6b c1       	rjmp	.+726    	; 0x1f9a <vfprintf+0x390>
    1cc4:	20 64       	ori	r18, 0x40	; 64
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <vfprintf+0xca>
    1cc8:	8c 36       	cpi	r24, 0x6C	; 108
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <vfprintf+0xc6>
    1ccc:	20 68       	ori	r18, 0x80	; 128
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <vfprintf+0xca>
    1cd0:	88 36       	cpi	r24, 0x68	; 104
    1cd2:	41 f4       	brne	.+16     	; 0x1ce4 <vfprintf+0xda>
    1cd4:	f6 01       	movw	r30, r12
    1cd6:	93 fd       	sbrc	r25, 3
    1cd8:	85 91       	lpm	r24, Z+
    1cda:	93 ff       	sbrs	r25, 3
    1cdc:	81 91       	ld	r24, Z+
    1cde:	6f 01       	movw	r12, r30
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	c1 cf       	rjmp	.-126    	; 0x1c66 <vfprintf+0x5c>
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	9f 7d       	andi	r25, 0xDF	; 223
    1ce8:	95 54       	subi	r25, 0x45	; 69
    1cea:	93 30       	cpi	r25, 0x03	; 3
    1cec:	28 f4       	brcc	.+10     	; 0x1cf8 <vfprintf+0xee>
    1cee:	0c 5f       	subi	r16, 0xFC	; 252
    1cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf2:	ff e3       	ldi	r31, 0x3F	; 63
    1cf4:	f9 83       	std	Y+1, r31	; 0x01
    1cf6:	0d c0       	rjmp	.+26     	; 0x1d12 <vfprintf+0x108>
    1cf8:	83 36       	cpi	r24, 0x63	; 99
    1cfa:	31 f0       	breq	.+12     	; 0x1d08 <vfprintf+0xfe>
    1cfc:	83 37       	cpi	r24, 0x73	; 115
    1cfe:	71 f0       	breq	.+28     	; 0x1d1c <vfprintf+0x112>
    1d00:	83 35       	cpi	r24, 0x53	; 83
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <vfprintf+0xfc>
    1d04:	5b c0       	rjmp	.+182    	; 0x1dbc <vfprintf+0x1b2>
    1d06:	22 c0       	rjmp	.+68     	; 0x1d4c <vfprintf+0x142>
    1d08:	f8 01       	movw	r30, r16
    1d0a:	80 81       	ld	r24, Z
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	0e 5f       	subi	r16, 0xFE	; 254
    1d10:	1f 4f       	sbci	r17, 0xFF	; 255
    1d12:	44 24       	eor	r4, r4
    1d14:	43 94       	inc	r4
    1d16:	51 2c       	mov	r5, r1
    1d18:	54 01       	movw	r10, r8
    1d1a:	15 c0       	rjmp	.+42     	; 0x1d46 <vfprintf+0x13c>
    1d1c:	38 01       	movw	r6, r16
    1d1e:	f2 e0       	ldi	r31, 0x02	; 2
    1d20:	6f 0e       	add	r6, r31
    1d22:	71 1c       	adc	r7, r1
    1d24:	f8 01       	movw	r30, r16
    1d26:	a0 80       	ld	r10, Z
    1d28:	b1 80       	ldd	r11, Z+1	; 0x01
    1d2a:	26 ff       	sbrs	r18, 6
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <vfprintf+0x12a>
    1d2e:	65 2d       	mov	r22, r5
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <vfprintf+0x12e>
    1d34:	6f ef       	ldi	r22, 0xFF	; 255
    1d36:	7f ef       	ldi	r23, 0xFF	; 255
    1d38:	c5 01       	movw	r24, r10
    1d3a:	2c 87       	std	Y+12, r18	; 0x0c
    1d3c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <strnlen>
    1d40:	2c 01       	movw	r4, r24
    1d42:	83 01       	movw	r16, r6
    1d44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d46:	2f 77       	andi	r18, 0x7F	; 127
    1d48:	22 2e       	mov	r2, r18
    1d4a:	17 c0       	rjmp	.+46     	; 0x1d7a <vfprintf+0x170>
    1d4c:	38 01       	movw	r6, r16
    1d4e:	f2 e0       	ldi	r31, 0x02	; 2
    1d50:	6f 0e       	add	r6, r31
    1d52:	71 1c       	adc	r7, r1
    1d54:	f8 01       	movw	r30, r16
    1d56:	a0 80       	ld	r10, Z
    1d58:	b1 80       	ldd	r11, Z+1	; 0x01
    1d5a:	26 ff       	sbrs	r18, 6
    1d5c:	03 c0       	rjmp	.+6      	; 0x1d64 <vfprintf+0x15a>
    1d5e:	65 2d       	mov	r22, r5
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <vfprintf+0x15e>
    1d64:	6f ef       	ldi	r22, 0xFF	; 255
    1d66:	7f ef       	ldi	r23, 0xFF	; 255
    1d68:	c5 01       	movw	r24, r10
    1d6a:	2c 87       	std	Y+12, r18	; 0x0c
    1d6c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <strnlen_P>
    1d70:	2c 01       	movw	r4, r24
    1d72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d74:	20 68       	ori	r18, 0x80	; 128
    1d76:	22 2e       	mov	r2, r18
    1d78:	83 01       	movw	r16, r6
    1d7a:	23 fc       	sbrc	r2, 3
    1d7c:	1b c0       	rjmp	.+54     	; 0x1db4 <vfprintf+0x1aa>
    1d7e:	83 2d       	mov	r24, r3
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	48 16       	cp	r4, r24
    1d84:	59 06       	cpc	r5, r25
    1d86:	b0 f4       	brcc	.+44     	; 0x1db4 <vfprintf+0x1aa>
    1d88:	b7 01       	movw	r22, r14
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1d92:	3a 94       	dec	r3
    1d94:	f4 cf       	rjmp	.-24     	; 0x1d7e <vfprintf+0x174>
    1d96:	f5 01       	movw	r30, r10
    1d98:	27 fc       	sbrc	r2, 7
    1d9a:	85 91       	lpm	r24, Z+
    1d9c:	27 fe       	sbrs	r2, 7
    1d9e:	81 91       	ld	r24, Z+
    1da0:	5f 01       	movw	r10, r30
    1da2:	b7 01       	movw	r22, r14
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1daa:	31 10       	cpse	r3, r1
    1dac:	3a 94       	dec	r3
    1dae:	f1 e0       	ldi	r31, 0x01	; 1
    1db0:	4f 1a       	sub	r4, r31
    1db2:	51 08       	sbc	r5, r1
    1db4:	41 14       	cp	r4, r1
    1db6:	51 04       	cpc	r5, r1
    1db8:	71 f7       	brne	.-36     	; 0x1d96 <vfprintf+0x18c>
    1dba:	e5 c0       	rjmp	.+458    	; 0x1f86 <vfprintf+0x37c>
    1dbc:	84 36       	cpi	r24, 0x64	; 100
    1dbe:	11 f0       	breq	.+4      	; 0x1dc4 <vfprintf+0x1ba>
    1dc0:	89 36       	cpi	r24, 0x69	; 105
    1dc2:	39 f5       	brne	.+78     	; 0x1e12 <vfprintf+0x208>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	27 ff       	sbrs	r18, 7
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <vfprintf+0x1ce>
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	0c 5f       	subi	r16, 0xFC	; 252
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	08 c0       	rjmp	.+16     	; 0x1de8 <vfprintf+0x1de>
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	07 2e       	mov	r0, r23
    1dde:	00 0c       	add	r0, r0
    1de0:	88 0b       	sbc	r24, r24
    1de2:	99 0b       	sbc	r25, r25
    1de4:	0e 5f       	subi	r16, 0xFE	; 254
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	2f 76       	andi	r18, 0x6F	; 111
    1dea:	72 2e       	mov	r7, r18
    1dec:	97 ff       	sbrs	r25, 7
    1dee:	09 c0       	rjmp	.+18     	; 0x1e02 <vfprintf+0x1f8>
    1df0:	90 95       	com	r25
    1df2:	80 95       	com	r24
    1df4:	70 95       	com	r23
    1df6:	61 95       	neg	r22
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfe:	20 68       	ori	r18, 0x80	; 128
    1e00:	72 2e       	mov	r7, r18
    1e02:	2a e0       	ldi	r18, 0x0A	; 10
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	a4 01       	movw	r20, r8
    1e08:	0e 94 25 10 	call	0x204a	; 0x204a <__ultoa_invert>
    1e0c:	a8 2e       	mov	r10, r24
    1e0e:	a8 18       	sub	r10, r8
    1e10:	44 c0       	rjmp	.+136    	; 0x1e9a <vfprintf+0x290>
    1e12:	85 37       	cpi	r24, 0x75	; 117
    1e14:	29 f4       	brne	.+10     	; 0x1e20 <vfprintf+0x216>
    1e16:	2f 7e       	andi	r18, 0xEF	; 239
    1e18:	b2 2e       	mov	r11, r18
    1e1a:	2a e0       	ldi	r18, 0x0A	; 10
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	25 c0       	rjmp	.+74     	; 0x1e6a <vfprintf+0x260>
    1e20:	f2 2f       	mov	r31, r18
    1e22:	f9 7f       	andi	r31, 0xF9	; 249
    1e24:	bf 2e       	mov	r11, r31
    1e26:	8f 36       	cpi	r24, 0x6F	; 111
    1e28:	c1 f0       	breq	.+48     	; 0x1e5a <vfprintf+0x250>
    1e2a:	18 f4       	brcc	.+6      	; 0x1e32 <vfprintf+0x228>
    1e2c:	88 35       	cpi	r24, 0x58	; 88
    1e2e:	79 f0       	breq	.+30     	; 0x1e4e <vfprintf+0x244>
    1e30:	b4 c0       	rjmp	.+360    	; 0x1f9a <vfprintf+0x390>
    1e32:	80 37       	cpi	r24, 0x70	; 112
    1e34:	19 f0       	breq	.+6      	; 0x1e3c <vfprintf+0x232>
    1e36:	88 37       	cpi	r24, 0x78	; 120
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <vfprintf+0x238>
    1e3a:	af c0       	rjmp	.+350    	; 0x1f9a <vfprintf+0x390>
    1e3c:	2f 2f       	mov	r18, r31
    1e3e:	20 61       	ori	r18, 0x10	; 16
    1e40:	b2 2e       	mov	r11, r18
    1e42:	b4 fe       	sbrs	r11, 4
    1e44:	0d c0       	rjmp	.+26     	; 0x1e60 <vfprintf+0x256>
    1e46:	8b 2d       	mov	r24, r11
    1e48:	84 60       	ori	r24, 0x04	; 4
    1e4a:	b8 2e       	mov	r11, r24
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <vfprintf+0x256>
    1e4e:	24 ff       	sbrs	r18, 4
    1e50:	0a c0       	rjmp	.+20     	; 0x1e66 <vfprintf+0x25c>
    1e52:	9f 2f       	mov	r25, r31
    1e54:	96 60       	ori	r25, 0x06	; 6
    1e56:	b9 2e       	mov	r11, r25
    1e58:	06 c0       	rjmp	.+12     	; 0x1e66 <vfprintf+0x25c>
    1e5a:	28 e0       	ldi	r18, 0x08	; 8
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <vfprintf+0x260>
    1e60:	20 e1       	ldi	r18, 0x10	; 16
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <vfprintf+0x260>
    1e66:	20 e1       	ldi	r18, 0x10	; 16
    1e68:	32 e0       	ldi	r19, 0x02	; 2
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	b7 fe       	sbrs	r11, 7
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <vfprintf+0x274>
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	0c 5f       	subi	r16, 0xFC	; 252
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <vfprintf+0x280>
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 5f       	subi	r16, 0xFE	; 254
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	a4 01       	movw	r20, r8
    1e8c:	0e 94 25 10 	call	0x204a	; 0x204a <__ultoa_invert>
    1e90:	a8 2e       	mov	r10, r24
    1e92:	a8 18       	sub	r10, r8
    1e94:	fb 2d       	mov	r31, r11
    1e96:	ff 77       	andi	r31, 0x7F	; 127
    1e98:	7f 2e       	mov	r7, r31
    1e9a:	76 fe       	sbrs	r7, 6
    1e9c:	0b c0       	rjmp	.+22     	; 0x1eb4 <vfprintf+0x2aa>
    1e9e:	37 2d       	mov	r19, r7
    1ea0:	3e 7f       	andi	r19, 0xFE	; 254
    1ea2:	a5 14       	cp	r10, r5
    1ea4:	50 f4       	brcc	.+20     	; 0x1eba <vfprintf+0x2b0>
    1ea6:	74 fe       	sbrs	r7, 4
    1ea8:	0a c0       	rjmp	.+20     	; 0x1ebe <vfprintf+0x2b4>
    1eaa:	72 fc       	sbrc	r7, 2
    1eac:	08 c0       	rjmp	.+16     	; 0x1ebe <vfprintf+0x2b4>
    1eae:	37 2d       	mov	r19, r7
    1eb0:	3e 7e       	andi	r19, 0xEE	; 238
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <vfprintf+0x2b4>
    1eb4:	ba 2c       	mov	r11, r10
    1eb6:	37 2d       	mov	r19, r7
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <vfprintf+0x2b6>
    1eba:	ba 2c       	mov	r11, r10
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <vfprintf+0x2b6>
    1ebe:	b5 2c       	mov	r11, r5
    1ec0:	34 ff       	sbrs	r19, 4
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <vfprintf+0x2d4>
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ea 0d       	add	r30, r10
    1ec8:	f1 1d       	adc	r31, r1
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 33       	cpi	r24, 0x30	; 48
    1ece:	11 f4       	brne	.+4      	; 0x1ed4 <vfprintf+0x2ca>
    1ed0:	39 7e       	andi	r19, 0xE9	; 233
    1ed2:	09 c0       	rjmp	.+18     	; 0x1ee6 <vfprintf+0x2dc>
    1ed4:	32 ff       	sbrs	r19, 2
    1ed6:	06 c0       	rjmp	.+12     	; 0x1ee4 <vfprintf+0x2da>
    1ed8:	b3 94       	inc	r11
    1eda:	b3 94       	inc	r11
    1edc:	04 c0       	rjmp	.+8      	; 0x1ee6 <vfprintf+0x2dc>
    1ede:	83 2f       	mov	r24, r19
    1ee0:	86 78       	andi	r24, 0x86	; 134
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <vfprintf+0x2dc>
    1ee4:	b3 94       	inc	r11
    1ee6:	33 fd       	sbrc	r19, 3
    1ee8:	13 c0       	rjmp	.+38     	; 0x1f10 <vfprintf+0x306>
    1eea:	30 ff       	sbrs	r19, 0
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0x2f0>
    1eee:	5a 2c       	mov	r5, r10
    1ef0:	b3 14       	cp	r11, r3
    1ef2:	18 f4       	brcc	.+6      	; 0x1efa <vfprintf+0x2f0>
    1ef4:	53 0c       	add	r5, r3
    1ef6:	5b 18       	sub	r5, r11
    1ef8:	b3 2c       	mov	r11, r3
    1efa:	b3 14       	cp	r11, r3
    1efc:	68 f4       	brcc	.+26     	; 0x1f18 <vfprintf+0x30e>
    1efe:	b7 01       	movw	r22, r14
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	3c 87       	std	Y+12, r19	; 0x0c
    1f06:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f0a:	b3 94       	inc	r11
    1f0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f0e:	f5 cf       	rjmp	.-22     	; 0x1efa <vfprintf+0x2f0>
    1f10:	b3 14       	cp	r11, r3
    1f12:	10 f4       	brcc	.+4      	; 0x1f18 <vfprintf+0x30e>
    1f14:	3b 18       	sub	r3, r11
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <vfprintf+0x310>
    1f18:	31 2c       	mov	r3, r1
    1f1a:	34 ff       	sbrs	r19, 4
    1f1c:	12 c0       	rjmp	.+36     	; 0x1f42 <vfprintf+0x338>
    1f1e:	b7 01       	movw	r22, r14
    1f20:	80 e3       	ldi	r24, 0x30	; 48
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	3c 87       	std	Y+12, r19	; 0x0c
    1f26:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f2c:	32 ff       	sbrs	r19, 2
    1f2e:	17 c0       	rjmp	.+46     	; 0x1f5e <vfprintf+0x354>
    1f30:	31 fd       	sbrc	r19, 1
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <vfprintf+0x330>
    1f34:	88 e7       	ldi	r24, 0x78	; 120
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <vfprintf+0x334>
    1f3a:	88 e5       	ldi	r24, 0x58	; 88
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	b7 01       	movw	r22, r14
    1f40:	0c c0       	rjmp	.+24     	; 0x1f5a <vfprintf+0x350>
    1f42:	83 2f       	mov	r24, r19
    1f44:	86 78       	andi	r24, 0x86	; 134
    1f46:	59 f0       	breq	.+22     	; 0x1f5e <vfprintf+0x354>
    1f48:	31 ff       	sbrs	r19, 1
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <vfprintf+0x346>
    1f4c:	8b e2       	ldi	r24, 0x2B	; 43
    1f4e:	01 c0       	rjmp	.+2      	; 0x1f52 <vfprintf+0x348>
    1f50:	80 e2       	ldi	r24, 0x20	; 32
    1f52:	37 fd       	sbrc	r19, 7
    1f54:	8d e2       	ldi	r24, 0x2D	; 45
    1f56:	b7 01       	movw	r22, r14
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f5e:	a5 14       	cp	r10, r5
    1f60:	38 f4       	brcc	.+14     	; 0x1f70 <vfprintf+0x366>
    1f62:	b7 01       	movw	r22, r14
    1f64:	80 e3       	ldi	r24, 0x30	; 48
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f6c:	5a 94       	dec	r5
    1f6e:	f7 cf       	rjmp	.-18     	; 0x1f5e <vfprintf+0x354>
    1f70:	aa 94       	dec	r10
    1f72:	f4 01       	movw	r30, r8
    1f74:	ea 0d       	add	r30, r10
    1f76:	f1 1d       	adc	r31, r1
    1f78:	80 81       	ld	r24, Z
    1f7a:	b7 01       	movw	r22, r14
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f82:	a1 10       	cpse	r10, r1
    1f84:	f5 cf       	rjmp	.-22     	; 0x1f70 <vfprintf+0x366>
    1f86:	33 20       	and	r3, r3
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <vfprintf+0x382>
    1f8a:	51 ce       	rjmp	.-862    	; 0x1c2e <vfprintf+0x24>
    1f8c:	b7 01       	movw	r22, r14
    1f8e:	80 e2       	ldi	r24, 0x20	; 32
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f96:	3a 94       	dec	r3
    1f98:	f6 cf       	rjmp	.-20     	; 0x1f86 <vfprintf+0x37c>
    1f9a:	f7 01       	movw	r30, r14
    1f9c:	86 81       	ldd	r24, Z+6	; 0x06
    1f9e:	97 81       	ldd	r25, Z+7	; 0x07
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <vfprintf+0x39c>
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	9f ef       	ldi	r25, 0xFF	; 255
    1fa6:	2c 96       	adiw	r28, 0x0c	; 12
    1fa8:	e2 e1       	ldi	r30, 0x12	; 18
    1faa:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__epilogue_restores__>

00001fae <strnlen_P>:
    1fae:	fc 01       	movw	r30, r24
    1fb0:	05 90       	lpm	r0, Z+
    1fb2:	61 50       	subi	r22, 0x01	; 1
    1fb4:	70 40       	sbci	r23, 0x00	; 0
    1fb6:	01 10       	cpse	r0, r1
    1fb8:	d8 f7       	brcc	.-10     	; 0x1fb0 <strnlen_P+0x2>
    1fba:	80 95       	com	r24
    1fbc:	90 95       	com	r25
    1fbe:	8e 0f       	add	r24, r30
    1fc0:	9f 1f       	adc	r25, r31
    1fc2:	08 95       	ret

00001fc4 <strnlen>:
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	61 50       	subi	r22, 0x01	; 1
    1fc8:	70 40       	sbci	r23, 0x00	; 0
    1fca:	01 90       	ld	r0, Z+
    1fcc:	01 10       	cpse	r0, r1
    1fce:	d8 f7       	brcc	.-10     	; 0x1fc6 <strnlen+0x2>
    1fd0:	80 95       	com	r24
    1fd2:	90 95       	com	r25
    1fd4:	8e 0f       	add	r24, r30
    1fd6:	9f 1f       	adc	r25, r31
    1fd8:	08 95       	ret

00001fda <fputc>:
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	fb 01       	movw	r30, r22
    1fe4:	23 81       	ldd	r18, Z+3	; 0x03
    1fe6:	21 fd       	sbrc	r18, 1
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <fputc+0x16>
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	9f ef       	ldi	r25, 0xFF	; 255
    1fee:	28 c0       	rjmp	.+80     	; 0x2040 <fputc+0x66>
    1ff0:	22 ff       	sbrs	r18, 2
    1ff2:	16 c0       	rjmp	.+44     	; 0x2020 <fputc+0x46>
    1ff4:	46 81       	ldd	r20, Z+6	; 0x06
    1ff6:	57 81       	ldd	r21, Z+7	; 0x07
    1ff8:	24 81       	ldd	r18, Z+4	; 0x04
    1ffa:	35 81       	ldd	r19, Z+5	; 0x05
    1ffc:	42 17       	cp	r20, r18
    1ffe:	53 07       	cpc	r21, r19
    2000:	44 f4       	brge	.+16     	; 0x2012 <fputc+0x38>
    2002:	a0 81       	ld	r26, Z
    2004:	b1 81       	ldd	r27, Z+1	; 0x01
    2006:	9d 01       	movw	r18, r26
    2008:	2f 5f       	subi	r18, 0xFF	; 255
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	31 83       	std	Z+1, r19	; 0x01
    200e:	20 83       	st	Z, r18
    2010:	8c 93       	st	X, r24
    2012:	26 81       	ldd	r18, Z+6	; 0x06
    2014:	37 81       	ldd	r19, Z+7	; 0x07
    2016:	2f 5f       	subi	r18, 0xFF	; 255
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	37 83       	std	Z+7, r19	; 0x07
    201c:	26 83       	std	Z+6, r18	; 0x06
    201e:	10 c0       	rjmp	.+32     	; 0x2040 <fputc+0x66>
    2020:	eb 01       	movw	r28, r22
    2022:	09 2f       	mov	r16, r25
    2024:	18 2f       	mov	r17, r24
    2026:	00 84       	ldd	r0, Z+8	; 0x08
    2028:	f1 85       	ldd	r31, Z+9	; 0x09
    202a:	e0 2d       	mov	r30, r0
    202c:	09 95       	icall
    202e:	89 2b       	or	r24, r25
    2030:	e1 f6       	brne	.-72     	; 0x1fea <fputc+0x10>
    2032:	8e 81       	ldd	r24, Y+6	; 0x06
    2034:	9f 81       	ldd	r25, Y+7	; 0x07
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	9f 83       	std	Y+7, r25	; 0x07
    203a:	8e 83       	std	Y+6, r24	; 0x06
    203c:	81 2f       	mov	r24, r17
    203e:	90 2f       	mov	r25, r16
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	08 95       	ret

0000204a <__ultoa_invert>:
    204a:	fa 01       	movw	r30, r20
    204c:	aa 27       	eor	r26, r26
    204e:	28 30       	cpi	r18, 0x08	; 8
    2050:	51 f1       	breq	.+84     	; 0x20a6 <__ultoa_invert+0x5c>
    2052:	20 31       	cpi	r18, 0x10	; 16
    2054:	81 f1       	breq	.+96     	; 0x20b6 <__ultoa_invert+0x6c>
    2056:	e8 94       	clt
    2058:	6f 93       	push	r22
    205a:	6e 7f       	andi	r22, 0xFE	; 254
    205c:	6e 5f       	subi	r22, 0xFE	; 254
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	8f 4f       	sbci	r24, 0xFF	; 255
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	af 4f       	sbci	r26, 0xFF	; 255
    2066:	b1 e0       	ldi	r27, 0x01	; 1
    2068:	3e d0       	rcall	.+124    	; 0x20e6 <__ultoa_invert+0x9c>
    206a:	b4 e0       	ldi	r27, 0x04	; 4
    206c:	3c d0       	rcall	.+120    	; 0x20e6 <__ultoa_invert+0x9c>
    206e:	67 0f       	add	r22, r23
    2070:	78 1f       	adc	r23, r24
    2072:	89 1f       	adc	r24, r25
    2074:	9a 1f       	adc	r25, r26
    2076:	a1 1d       	adc	r26, r1
    2078:	68 0f       	add	r22, r24
    207a:	79 1f       	adc	r23, r25
    207c:	8a 1f       	adc	r24, r26
    207e:	91 1d       	adc	r25, r1
    2080:	a1 1d       	adc	r26, r1
    2082:	6a 0f       	add	r22, r26
    2084:	71 1d       	adc	r23, r1
    2086:	81 1d       	adc	r24, r1
    2088:	91 1d       	adc	r25, r1
    208a:	a1 1d       	adc	r26, r1
    208c:	20 d0       	rcall	.+64     	; 0x20ce <__ultoa_invert+0x84>
    208e:	09 f4       	brne	.+2      	; 0x2092 <__ultoa_invert+0x48>
    2090:	68 94       	set
    2092:	3f 91       	pop	r19
    2094:	2a e0       	ldi	r18, 0x0A	; 10
    2096:	26 9f       	mul	r18, r22
    2098:	11 24       	eor	r1, r1
    209a:	30 19       	sub	r19, r0
    209c:	30 5d       	subi	r19, 0xD0	; 208
    209e:	31 93       	st	Z+, r19
    20a0:	de f6       	brtc	.-74     	; 0x2058 <__ultoa_invert+0xe>
    20a2:	cf 01       	movw	r24, r30
    20a4:	08 95       	ret
    20a6:	46 2f       	mov	r20, r22
    20a8:	47 70       	andi	r20, 0x07	; 7
    20aa:	40 5d       	subi	r20, 0xD0	; 208
    20ac:	41 93       	st	Z+, r20
    20ae:	b3 e0       	ldi	r27, 0x03	; 3
    20b0:	0f d0       	rcall	.+30     	; 0x20d0 <__ultoa_invert+0x86>
    20b2:	c9 f7       	brne	.-14     	; 0x20a6 <__ultoa_invert+0x5c>
    20b4:	f6 cf       	rjmp	.-20     	; 0x20a2 <__ultoa_invert+0x58>
    20b6:	46 2f       	mov	r20, r22
    20b8:	4f 70       	andi	r20, 0x0F	; 15
    20ba:	40 5d       	subi	r20, 0xD0	; 208
    20bc:	4a 33       	cpi	r20, 0x3A	; 58
    20be:	18 f0       	brcs	.+6      	; 0x20c6 <__ultoa_invert+0x7c>
    20c0:	49 5d       	subi	r20, 0xD9	; 217
    20c2:	31 fd       	sbrc	r19, 1
    20c4:	40 52       	subi	r20, 0x20	; 32
    20c6:	41 93       	st	Z+, r20
    20c8:	02 d0       	rcall	.+4      	; 0x20ce <__ultoa_invert+0x84>
    20ca:	a9 f7       	brne	.-22     	; 0x20b6 <__ultoa_invert+0x6c>
    20cc:	ea cf       	rjmp	.-44     	; 0x20a2 <__ultoa_invert+0x58>
    20ce:	b4 e0       	ldi	r27, 0x04	; 4
    20d0:	a6 95       	lsr	r26
    20d2:	97 95       	ror	r25
    20d4:	87 95       	ror	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	ba 95       	dec	r27
    20dc:	c9 f7       	brne	.-14     	; 0x20d0 <__ultoa_invert+0x86>
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	61 05       	cpc	r22, r1
    20e2:	71 05       	cpc	r23, r1
    20e4:	08 95       	ret
    20e6:	9b 01       	movw	r18, r22
    20e8:	ac 01       	movw	r20, r24
    20ea:	0a 2e       	mov	r0, r26
    20ec:	06 94       	lsr	r0
    20ee:	57 95       	ror	r21
    20f0:	47 95       	ror	r20
    20f2:	37 95       	ror	r19
    20f4:	27 95       	ror	r18
    20f6:	ba 95       	dec	r27
    20f8:	c9 f7       	brne	.-14     	; 0x20ec <__ultoa_invert+0xa2>
    20fa:	62 0f       	add	r22, r18
    20fc:	73 1f       	adc	r23, r19
    20fe:	84 1f       	adc	r24, r20
    2100:	95 1f       	adc	r25, r21
    2102:	a0 1d       	adc	r26, r0
    2104:	08 95       	ret

00002106 <eeprom_read_byte>:
    2106:	f9 99       	sbic	0x1f, 1	; 31
    2108:	fe cf       	rjmp	.-4      	; 0x2106 <eeprom_read_byte>
    210a:	92 bd       	out	0x22, r25	; 34
    210c:	81 bd       	out	0x21, r24	; 33
    210e:	f8 9a       	sbi	0x1f, 0	; 31
    2110:	99 27       	eor	r25, r25
    2112:	80 b5       	in	r24, 0x20	; 32
    2114:	08 95       	ret

00002116 <eeprom_write_byte>:
    2116:	26 2f       	mov	r18, r22

00002118 <eeprom_write_r18>:
    2118:	f9 99       	sbic	0x1f, 1	; 31
    211a:	fe cf       	rjmp	.-4      	; 0x2118 <eeprom_write_r18>
    211c:	1f ba       	out	0x1f, r1	; 31
    211e:	92 bd       	out	0x22, r25	; 34
    2120:	81 bd       	out	0x21, r24	; 33
    2122:	20 bd       	out	0x20, r18	; 32
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	fa 9a       	sbi	0x1f, 2	; 31
    212a:	f9 9a       	sbi	0x1f, 1	; 31
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	08 95       	ret

00002132 <__divmodsi4>:
    2132:	05 2e       	mov	r0, r21
    2134:	97 fb       	bst	r25, 7
    2136:	1e f4       	brtc	.+6      	; 0x213e <__divmodsi4+0xc>
    2138:	00 94       	com	r0
    213a:	0e 94 b0 10 	call	0x2160	; 0x2160 <__negsi2>
    213e:	57 fd       	sbrc	r21, 7
    2140:	07 d0       	rcall	.+14     	; 0x2150 <__divmodsi4_neg2>
    2142:	0e 94 02 11 	call	0x2204	; 0x2204 <__udivmodsi4>
    2146:	07 fc       	sbrc	r0, 7
    2148:	03 d0       	rcall	.+6      	; 0x2150 <__divmodsi4_neg2>
    214a:	4e f4       	brtc	.+18     	; 0x215e <__divmodsi4_exit>
    214c:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__negsi2>

00002150 <__divmodsi4_neg2>:
    2150:	50 95       	com	r21
    2152:	40 95       	com	r20
    2154:	30 95       	com	r19
    2156:	21 95       	neg	r18
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	4f 4f       	sbci	r20, 0xFF	; 255
    215c:	5f 4f       	sbci	r21, 0xFF	; 255

0000215e <__divmodsi4_exit>:
    215e:	08 95       	ret

00002160 <__negsi2>:
    2160:	90 95       	com	r25
    2162:	80 95       	com	r24
    2164:	70 95       	com	r23
    2166:	61 95       	neg	r22
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	8f 4f       	sbci	r24, 0xFF	; 255
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	08 95       	ret

00002170 <__muluhisi3>:
    2170:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__umulhisi3>
    2174:	a5 9f       	mul	r26, r21
    2176:	90 0d       	add	r25, r0
    2178:	b4 9f       	mul	r27, r20
    217a:	90 0d       	add	r25, r0
    217c:	a4 9f       	mul	r26, r20
    217e:	80 0d       	add	r24, r0
    2180:	91 1d       	adc	r25, r1
    2182:	11 24       	eor	r1, r1
    2184:	08 95       	ret

00002186 <__mulshisi3>:
    2186:	b7 ff       	sbrs	r27, 7
    2188:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__muluhisi3>

0000218c <__mulohisi3>:
    218c:	0e 94 b8 10 	call	0x2170	; 0x2170 <__muluhisi3>
    2190:	82 1b       	sub	r24, r18
    2192:	93 0b       	sbc	r25, r19
    2194:	08 95       	ret

00002196 <__prologue_saves__>:
    2196:	2f 92       	push	r2
    2198:	3f 92       	push	r3
    219a:	4f 92       	push	r4
    219c:	5f 92       	push	r5
    219e:	6f 92       	push	r6
    21a0:	7f 92       	push	r7
    21a2:	8f 92       	push	r8
    21a4:	9f 92       	push	r9
    21a6:	af 92       	push	r10
    21a8:	bf 92       	push	r11
    21aa:	cf 92       	push	r12
    21ac:	df 92       	push	r13
    21ae:	ef 92       	push	r14
    21b0:	ff 92       	push	r15
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	ca 1b       	sub	r28, r26
    21c0:	db 0b       	sbc	r29, r27
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	09 94       	ijmp

000021ce <__epilogue_restores__>:
    21ce:	2a 88       	ldd	r2, Y+18	; 0x12
    21d0:	39 88       	ldd	r3, Y+17	; 0x11
    21d2:	48 88       	ldd	r4, Y+16	; 0x10
    21d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21da:	8c 84       	ldd	r8, Y+12	; 0x0c
    21dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    21de:	aa 84       	ldd	r10, Y+10	; 0x0a
    21e0:	b9 84       	ldd	r11, Y+9	; 0x09
    21e2:	c8 84       	ldd	r12, Y+8	; 0x08
    21e4:	df 80       	ldd	r13, Y+7	; 0x07
    21e6:	ee 80       	ldd	r14, Y+6	; 0x06
    21e8:	fd 80       	ldd	r15, Y+5	; 0x05
    21ea:	0c 81       	ldd	r16, Y+4	; 0x04
    21ec:	1b 81       	ldd	r17, Y+3	; 0x03
    21ee:	aa 81       	ldd	r26, Y+2	; 0x02
    21f0:	b9 81       	ldd	r27, Y+1	; 0x01
    21f2:	ce 0f       	add	r28, r30
    21f4:	d1 1d       	adc	r29, r1
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	ed 01       	movw	r28, r26
    2202:	08 95       	ret

00002204 <__udivmodsi4>:
    2204:	a1 e2       	ldi	r26, 0x21	; 33
    2206:	1a 2e       	mov	r1, r26
    2208:	aa 1b       	sub	r26, r26
    220a:	bb 1b       	sub	r27, r27
    220c:	fd 01       	movw	r30, r26
    220e:	0d c0       	rjmp	.+26     	; 0x222a <__udivmodsi4_ep>

00002210 <__udivmodsi4_loop>:
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	ee 1f       	adc	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	a2 17       	cp	r26, r18
    221a:	b3 07       	cpc	r27, r19
    221c:	e4 07       	cpc	r30, r20
    221e:	f5 07       	cpc	r31, r21
    2220:	20 f0       	brcs	.+8      	; 0x222a <__udivmodsi4_ep>
    2222:	a2 1b       	sub	r26, r18
    2224:	b3 0b       	sbc	r27, r19
    2226:	e4 0b       	sbc	r30, r20
    2228:	f5 0b       	sbc	r31, r21

0000222a <__udivmodsi4_ep>:
    222a:	66 1f       	adc	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	1a 94       	dec	r1
    2234:	69 f7       	brne	.-38     	; 0x2210 <__udivmodsi4_loop>
    2236:	60 95       	com	r22
    2238:	70 95       	com	r23
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	9b 01       	movw	r18, r22
    2240:	ac 01       	movw	r20, r24
    2242:	bd 01       	movw	r22, r26
    2244:	cf 01       	movw	r24, r30
    2246:	08 95       	ret

00002248 <_exit>:
    2248:	f8 94       	cli

0000224a <__stop_program>:
    224a:	ff cf       	rjmp	.-2      	; 0x224a <__stop_program>
