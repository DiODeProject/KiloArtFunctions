
build/sync.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	e5 02       	muls	r30, r21
      6a:	61 03       	mulsu	r22, r17
      6c:	b9 02       	muls	r27, r25
      6e:	b0 02       	muls	r27, r16
      70:	b6 02       	muls	r27, r22
      72:	43 03       	mulsu	r20, r19
      74:	38 03       	fmul	r19, r16
      76:	c3 09       	sbc	r28, r3
      78:	a0 08       	sbc	r10, r0
      7a:	a0 08       	sbc	r10, r0
      7c:	c0 09       	sbc	r28, r0
      7e:	cc 09       	sbc	r28, r12
      80:	bc 09       	sbc	r27, r12
      82:	d3 09       	sbc	r29, r3
      84:	cf 09       	sbc	r28, r15
      86:	d7 09       	sbc	r29, r7
      88:	8f 09       	sbc	r24, r15
      8a:	61 09       	sbc	r22, r1

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e6       	ldi	r30, 0x6A	; 106
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 38       	cpi	r26, 0x84	; 132
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 09 0b 	call	0x1612	; 0x1612 <main>
      da:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	8a e1       	ldi	r24, 0x1A	; 26
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
    int my_timer = kilo_ticks - last_reset;
      e8:	40 91 49 01 	lds	r20, 0x0149
      ec:	50 91 4a 01 	lds	r21, 0x014A
      f0:	60 91 4b 01 	lds	r22, 0x014B
      f4:	70 91 4c 01 	lds	r23, 0x014C
      f8:	20 91 0e 01 	lds	r18, 0x010E
      fc:	30 91 0f 01 	lds	r19, 0x010F
     100:	42 1b       	sub	r20, r18
     102:	53 0b       	sbc	r21, r19
    int rx_timer = m->data[0];
     104:	fc 01       	movw	r30, r24
     106:	80 81       	ld	r24, Z
    int timer_discrepancy = my_timer - rx_timer;
     108:	48 1b       	sub	r20, r24
     10a:	51 09       	sbc	r21, r1
    
    // Reset time adjustment due to this message - to be combined with the
    // overall reset time adjustment.
    int rx_reset_time_adjustment = 0;
    
    if (timer_discrepancy > 0)
     10c:	14 16       	cp	r1, r20
     10e:	15 06       	cpc	r1, r21
     110:	b4 f4       	brge	.+44     	; 0x13e <message_rx+0x56>
    {
        // The neighbor is trailing behind: move the reset time forward
        // (reset later).
        if (timer_discrepancy < (PERIOD / 2))
     112:	49 31       	cpi	r20, 0x19	; 25
     114:	51 05       	cpc	r21, r1
     116:	5c f4       	brge	.+22     	; 0x12e <message_rx+0x46>
        }
    }

    // Combine the reset time adjustment due to this message with the overall
    // reset time adjustment.
    reset_time_adjustment = reset_time_adjustment + rx_reset_time_adjustment;
     118:	80 91 0c 01 	lds	r24, 0x010C
     11c:	90 91 0d 01 	lds	r25, 0x010D
     120:	48 0f       	add	r20, r24
     122:	59 1f       	adc	r21, r25
     124:	50 93 0d 01 	sts	0x010D, r21
     128:	40 93 0c 01 	sts	0x010C, r20
     12c:	08 95       	ret
        }
        // The neighbor is running ahead: move the reset time backward
        // (reset sooner).
        else
        {
            rx_reset_time_adjustment = - (PERIOD - timer_discrepancy) % PERIOD;
     12e:	ca 01       	movw	r24, r20
     130:	c2 97       	sbiw	r24, 0x32	; 50
     132:	62 e3       	ldi	r22, 0x32	; 50
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 20 0b 	call	0x1640	; 0x1640 <__divmodhi4>
     13a:	ac 01       	movw	r20, r24
     13c:	ed cf       	rjmp	.-38     	; 0x118 <message_rx+0x30>
        }
    }
    else if (timer_discrepancy < 0)
     13e:	41 15       	cp	r20, r1
     140:	51 05       	cpc	r21, r1
     142:	51 f3       	breq	.-44     	; 0x118 <message_rx+0x30>
    {
        // The neighbor is running ahead: move the reset time backward
        // (reset sooner).
        if (- timer_discrepancy < (PERIOD / 2))
     144:	88 27       	eor	r24, r24
     146:	99 27       	eor	r25, r25
     148:	84 1b       	sub	r24, r20
     14a:	95 0b       	sbc	r25, r21
     14c:	49 97       	sbiw	r24, 0x19	; 25
     14e:	24 f3       	brlt	.-56     	; 0x118 <message_rx+0x30>
        }
        // The neighbor is trailing behind: move the reset time forward
        // (reset later).
        else
        {
            rx_reset_time_adjustment = (PERIOD + timer_discrepancy) % PERIOD;
     150:	ca 01       	movw	r24, r20
     152:	c2 96       	adiw	r24, 0x32	; 50
     154:	62 e3       	ldi	r22, 0x32	; 50
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	0e 94 20 0b 	call	0x1640	; 0x1640 <__divmodhi4>
     15c:	ac 01       	movw	r20, r24
     15e:	dc cf       	rjmp	.-72     	; 0x118 <message_rx+0x30>

00000160 <setup>:
uint32_t last_reset = 0;
int reset_time_adjustment = 0;
message_t message;

void setup()
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
    // Set the message.
    message.type = NORMAL;
     164:	ca e1       	ldi	r28, 0x1A	; 26
     166:	d1 e0       	ldi	r29, 0x01	; 1
     168:	19 86       	std	Y+9, r1	; 0x09
    message.data[0] = 0;
     16a:	18 82       	st	Y, r1
    message.crc = message_crc(&message);
     16c:	ce 01       	movw	r24, r28
     16e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <message_crc>
     172:	9b 87       	std	Y+11, r25	; 0x0b
     174:	8a 87       	std	Y+10, r24	; 0x0a
    
    // Introduce a random delay so the robots don't become instantly
    // synchronized by the run signal.
    set_color(RGB(1, 0, 0));
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 1a 08 	call	0x1034	; 0x1034 <set_color>
    delay(10 * rand_hard());
     17c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <rand_hard>
     180:	2a e0       	ldi	r18, 0x0A	; 10
     182:	82 9f       	mul	r24, r18
     184:	c0 01       	movw	r24, r0
     186:	11 24       	eor	r1, r1
     188:	0e 94 ee 03 	call	0x7dc	; 0x7dc <delay>
    set_color(RGB(0, 0, 0));
     18c:	80 e0       	ldi	r24, 0x00	; 0
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
    
    // Introduce a random delay so the robots don't become instantly
    // synchronized by the run signal.
    set_color(RGB(1, 0, 0));
    delay(10 * rand_hard());
    set_color(RGB(0, 0, 0));
     192:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <set_color>

00000196 <loop>:
}

void loop()
{
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
    if (kilo_ticks >= reset_time)
     19a:	40 91 49 01 	lds	r20, 0x0149
     19e:	50 91 4a 01 	lds	r21, 0x014A
     1a2:	60 91 4b 01 	lds	r22, 0x014B
     1a6:	70 91 4c 01 	lds	r23, 0x014C
     1aa:	80 91 12 01 	lds	r24, 0x0112
     1ae:	90 91 13 01 	lds	r25, 0x0113
     1b2:	a0 91 14 01 	lds	r26, 0x0114
     1b6:	b0 91 15 01 	lds	r27, 0x0115
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <loop+0x30>
     1c4:	64 c0       	rjmp	.+200    	; 0x28e <loop+0xf8>
    {
        reset_time_adjustment = (reset_time_adjustment / RESET_TIME_ADJUSTMENT_DIVIDER);
     1c6:	80 91 0c 01 	lds	r24, 0x010C
     1ca:	90 91 0d 01 	lds	r25, 0x010D
     1ce:	68 e7       	ldi	r22, 0x78	; 120
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	0e 94 20 0b 	call	0x1640	; 0x1640 <__divmodhi4>
        
        // Apply a cap to the absolute value of the reset time adjustment.
        if (reset_time_adjustment < - RESET_TIME_ADJUSTMENT_MAX)
     1d6:	62 3e       	cpi	r22, 0xE2	; 226
     1d8:	8f ef       	ldi	r24, 0xFF	; 255
     1da:	78 07       	cpc	r23, r24
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <loop+0x4a>
     1de:	82 c0       	rjmp	.+260    	; 0x2e4 <loop+0x14e>
     1e0:	82 ee       	ldi	r24, 0xE2	; 226
     1e2:	9f ef       	ldi	r25, 0xFF	; 255
     1e4:	af ef       	ldi	r26, 0xFF	; 255
     1e6:	bf ef       	ldi	r27, 0xFF	; 255
        else if (reset_time_adjustment > RESET_TIME_ADJUSTMENT_MAX)
        {
            reset_time_adjustment = RESET_TIME_ADJUSTMENT_MAX;
        }
        
        last_reset = kilo_ticks;
     1e8:	40 91 49 01 	lds	r20, 0x0149
     1ec:	50 91 4a 01 	lds	r21, 0x014A
     1f0:	60 91 4b 01 	lds	r22, 0x014B
     1f4:	70 91 4c 01 	lds	r23, 0x014C
     1f8:	40 93 0e 01 	sts	0x010E, r20
     1fc:	50 93 0f 01 	sts	0x010F, r21
     200:	60 93 10 01 	sts	0x0110, r22
     204:	70 93 11 01 	sts	0x0111, r23
        reset_time = kilo_ticks + PERIOD + reset_time_adjustment;
     208:	40 91 49 01 	lds	r20, 0x0149
     20c:	50 91 4a 01 	lds	r21, 0x014A
     210:	60 91 4b 01 	lds	r22, 0x014B
     214:	70 91 4c 01 	lds	r23, 0x014C
     218:	4e 5c       	subi	r20, 0xCE	; 206
     21a:	5f 4f       	sbci	r21, 0xFF	; 255
     21c:	6f 4f       	sbci	r22, 0xFF	; 255
     21e:	7f 4f       	sbci	r23, 0xFF	; 255
     220:	84 0f       	add	r24, r20
     222:	95 1f       	adc	r25, r21
     224:	a6 1f       	adc	r26, r22
     226:	b7 1f       	adc	r27, r23
     228:	80 93 12 01 	sts	0x0112, r24
     22c:	90 93 13 01 	sts	0x0113, r25
     230:	a0 93 14 01 	sts	0x0114, r26
     234:	b0 93 15 01 	sts	0x0115, r27
        
        reset_time_adjustment = 0;
     238:	10 92 0d 01 	sts	0x010D, r1
     23c:	10 92 0c 01 	sts	0x010C, r1
        
        // Set the LED white and turn the motors on.
        set_color(RGB(1, 1, 1));
     240:	85 e1       	ldi	r24, 0x15	; 21
     242:	0e 94 1a 08 	call	0x1034	; 0x1034 <set_color>
        set_motors(150, 150);
     246:	66 e9       	ldi	r22, 0x96	; 150
     248:	86 e9       	ldi	r24, 0x96	; 150
     24a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <set_motors>
     24e:	40 91 0e 01 	lds	r20, 0x010E
     252:	50 91 0f 01 	lds	r21, 0x010F
     256:	60 91 10 01 	lds	r22, 0x0110
     25a:	70 91 11 01 	lds	r23, 0x0111
    }
    
    // Only send the current time if it can fit in 1 byte (8 bits), which
    // corresponds to a maximum of 2^8 - 1 = 255. Otherwise, set the message
    // CRC to 0 so neighbors ignore the message.
    if ((kilo_ticks - last_reset) < 255)
     25e:	80 91 49 01 	lds	r24, 0x0149
     262:	90 91 4a 01 	lds	r25, 0x014A
     266:	a0 91 4b 01 	lds	r26, 0x014B
     26a:	b0 91 4c 01 	lds	r27, 0x014C
     26e:	84 1b       	sub	r24, r20
     270:	95 0b       	sbc	r25, r21
     272:	a6 0b       	sbc	r26, r22
     274:	b7 0b       	sbc	r27, r23
     276:	8f 3f       	cpi	r24, 0xFF	; 255
     278:	91 05       	cpc	r25, r1
     27a:	a1 05       	cpc	r26, r1
     27c:	b1 05       	cpc	r27, r1
     27e:	d0 f1       	brcs	.+116    	; 0x2f4 <loop+0x15e>
        message.data[0] = kilo_ticks - last_reset;
        message.crc = message_crc(&message);
    }
    else
    {
        message.crc = 0;
     280:	10 92 25 01 	sts	0x0125, r1
     284:	10 92 24 01 	sts	0x0124, r1
    }
}
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	08 95       	ret
        // Set the LED white and turn the motors on.
        set_color(RGB(1, 1, 1));
        set_motors(150, 150);
    }
    // After 1 clock tick, turn the LED and motors off.
    else if (kilo_ticks > (last_reset + 1))
     28e:	40 91 0e 01 	lds	r20, 0x010E
     292:	50 91 0f 01 	lds	r21, 0x010F
     296:	60 91 10 01 	lds	r22, 0x0110
     29a:	70 91 11 01 	lds	r23, 0x0111
     29e:	80 91 49 01 	lds	r24, 0x0149
     2a2:	90 91 4a 01 	lds	r25, 0x014A
     2a6:	a0 91 4b 01 	lds	r26, 0x014B
     2aa:	b0 91 4c 01 	lds	r27, 0x014C
     2ae:	8a 01       	movw	r16, r20
     2b0:	9b 01       	movw	r18, r22
     2b2:	0f 5f       	subi	r16, 0xFF	; 255
     2b4:	1f 4f       	sbci	r17, 0xFF	; 255
     2b6:	2f 4f       	sbci	r18, 0xFF	; 255
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ba:	08 17       	cp	r16, r24
     2bc:	19 07       	cpc	r17, r25
     2be:	2a 07       	cpc	r18, r26
     2c0:	3b 07       	cpc	r19, r27
     2c2:	68 f6       	brcc	.-102    	; 0x25e <loop+0xc8>
    {
        set_color(RGB(0, 0, 0));
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 1a 08 	call	0x1034	; 0x1034 <set_color>
        set_motors(0, 0);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <set_motors>
     2d2:	40 91 0e 01 	lds	r20, 0x010E
     2d6:	50 91 0f 01 	lds	r21, 0x010F
     2da:	60 91 10 01 	lds	r22, 0x0110
     2de:	70 91 11 01 	lds	r23, 0x0111
     2e2:	bd cf       	rjmp	.-134    	; 0x25e <loop+0xc8>
        // Apply a cap to the absolute value of the reset time adjustment.
        if (reset_time_adjustment < - RESET_TIME_ADJUSTMENT_MAX)
        {
            reset_time_adjustment = - RESET_TIME_ADJUSTMENT_MAX;
        }
        else if (reset_time_adjustment > RESET_TIME_ADJUSTMENT_MAX)
     2e4:	6f 31       	cpi	r22, 0x1F	; 31
     2e6:	71 05       	cpc	r23, r1
     2e8:	dc f0       	brlt	.+54     	; 0x320 <loop+0x18a>
     2ea:	8e e1       	ldi	r24, 0x1E	; 30
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	7a cf       	rjmp	.-268    	; 0x1e8 <loop+0x52>
    // Only send the current time if it can fit in 1 byte (8 bits), which
    // corresponds to a maximum of 2^8 - 1 = 255. Otherwise, set the message
    // CRC to 0 so neighbors ignore the message.
    if ((kilo_ticks - last_reset) < 255)
    {
        message.data[0] = kilo_ticks - last_reset;
     2f4:	80 91 49 01 	lds	r24, 0x0149
     2f8:	90 91 4a 01 	lds	r25, 0x014A
     2fc:	a0 91 4b 01 	lds	r26, 0x014B
     300:	b0 91 4c 01 	lds	r27, 0x014C
     304:	84 1b       	sub	r24, r20
     306:	80 93 1a 01 	sts	0x011A, r24
        message.crc = message_crc(&message);
     30a:	8a e1       	ldi	r24, 0x1A	; 26
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <message_crc>
     312:	90 93 25 01 	sts	0x0125, r25
     316:	80 93 24 01 	sts	0x0124, r24
    }
    else
    {
        message.crc = 0;
    }
}
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret
     320:	cb 01       	movw	r24, r22
     322:	77 0f       	add	r23, r23
     324:	aa 0b       	sbc	r26, r26
     326:	bb 0b       	sbc	r27, r27
     328:	5f cf       	rjmp	.-322    	; 0x1e8 <loop+0x52>

0000032a <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     32a:	08 95       	ret

0000032c <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 95       	ret

00000332 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     332:	08 95       	ret

00000334 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
    cli();
     342:	f8 94       	cli

    ports_off();
     344:	14 b8       	out	0x04, r1	; 4
     346:	17 b8       	out	0x07, r1	; 7
     348:	1a b8       	out	0x0a, r1	; 10
     34a:	15 b8       	out	0x05, r1	; 5
     34c:	18 b8       	out	0x08, r1	; 8
     34e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     350:	52 9a       	sbi	0x0a, 2	; 10
     352:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     354:	14 bc       	out	0x24, r1	; 36
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	85 bd       	out	0x25, r24	; 37
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	87 bd       	out	0x27, r24	; 39
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     364:	10 92 80 00 	sts	0x0080, r1
     368:	10 92 81 00 	sts	0x0081, r1
     36c:	2f e8       	ldi	r18, 0x8F	; 143
     36e:	3b e0       	ldi	r19, 0x0B	; 11
     370:	30 93 89 00 	sts	0x0089, r19
     374:	20 93 88 00 	sts	0x0088, r18
     378:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     37c:	53 98       	cbi	0x0a, 3	; 10
     37e:	23 98       	cbi	0x04, 3	; 4
     380:	91 ea       	ldi	r25, 0xA1	; 161
     382:	90 93 b0 00 	sts	0x00B0, r25
     386:	80 93 b1 00 	sts	0x00B1, r24
     38a:	10 92 b4 00 	sts	0x00B4, r1
     38e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     392:	8b e0       	ldi	r24, 0x0B	; 11
     394:	80 bf       	out	0x30, r24	; 48
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     39c:	86 e0       	ldi	r24, 0x06	; 6
     39e:	80 93 7c 00 	sts	0x007C, r24
     3a2:	83 e8       	ldi	r24, 0x83	; 131
     3a4:	80 93 7a 00 	sts	0x007A, r24
     3a8:	80 91 7a 00 	lds	r24, 0x007A
     3ac:	80 64       	ori	r24, 0x40	; 64
     3ae:	80 93 7a 00 	sts	0x007A, r24
     3b2:	80 91 7a 00 	lds	r24, 0x007A
     3b6:	86 fd       	sbrc	r24, 6
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <kilo_init+0x7e>
    adc_trigger_high_gain();
     3ba:	10 92 7c 00 	sts	0x007C, r1
     3be:	83 ea       	ldi	r24, 0xA3	; 163
     3c0:	80 93 7a 00 	sts	0x007A, r24
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
    if (osccal != 0xFF)
     3d2:	8f 3f       	cpi	r24, 0xFF	; 255
     3d4:	11 f0       	breq	.+4      	; 0x3da <kilo_init+0xa6>
        OSCCAL = osccal;
     3d6:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     3da:	10 92 4d 01 	sts	0x014D, r1
    rx_leadingbit = 1;
     3de:	c1 e0       	ldi	r28, 0x01	; 1
     3e0:	c0 93 26 01 	sts	0x0126, r28
    rx_leadingbyte = 1;
     3e4:	c0 93 6a 01 	sts	0x016A, r28
    rx_byteindex = 0;
     3e8:	10 92 44 01 	sts	0x0144, r1
    rx_bytevalue = 0;
     3ec:	10 92 7e 01 	sts	0x017E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3f0:	80 e9       	ldi	r24, 0x90	; 144
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     3f8:	80 93 43 01 	sts	0x0143, r24
    if (tx_mask & ~TX_MASK_MAX)
     3fc:	80 91 43 01 	lds	r24, 0x0143
     400:	88 73       	andi	r24, 0x38	; 56
     402:	11 f0       	breq	.+4      	; 0x408 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     404:	c0 93 43 01 	sts	0x0143, r28
    tx_clock = 0;
     408:	10 92 6e 01 	sts	0x016E, r1
     40c:	10 92 6d 01 	sts	0x016D, r1
    tx_increment = 255;
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	90 93 6c 01 	sts	0x016C, r25
     418:	80 93 6b 01 	sts	0x016B, r24
    kilo_ticks = 0;
     41c:	10 92 49 01 	sts	0x0149, r1
     420:	10 92 4a 01 	sts	0x014A, r1
     424:	10 92 4b 01 	sts	0x014B, r1
     428:	10 92 4c 01 	sts	0x014C, r1
    kilo_state = IDLE;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	80 93 19 01 	sts	0x0119, r24
    kilo_tx_period = 3906;
     432:	82 e4       	ldi	r24, 0x42	; 66
     434:	9f e0       	ldi	r25, 0x0F	; 15
     436:	90 93 7d 01 	sts	0x017D, r25
     43a:	80 93 7c 01 	sts	0x017C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     43e:	80 eb       	ldi	r24, 0xB0	; 176
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     446:	c8 2f       	mov	r28, r24
     448:	81 eb       	ldi	r24, 0xB1	; 177
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     450:	2c 2f       	mov	r18, r28
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	38 2b       	or	r19, r24
     456:	30 93 80 01 	sts	0x0180, r19
     45a:	20 93 7f 01 	sts	0x017F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     466:	80 93 83 01 	sts	0x0183, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     46a:	89 e0       	ldi	r24, 0x09	; 9
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     472:	80 93 6f 01 	sts	0x016F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     476:	8c e0       	ldi	r24, 0x0C	; 12
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     47e:	80 93 81 01 	sts	0x0181, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     482:	84 e1       	ldi	r24, 0x14	; 20
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     48a:	80 93 82 01 	sts	0x0182, r24
     48e:	5e e4       	ldi	r21, 0x4E	; 78
     490:	e5 2e       	mov	r14, r21
     492:	51 e0       	ldi	r21, 0x01	; 1
     494:	f5 2e       	mov	r15, r21
     496:	07 e2       	ldi	r16, 0x27	; 39
     498:	11 e0       	ldi	r17, 0x01	; 1
     49a:	c0 e2       	ldi	r28, 0x20	; 32
     49c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     49e:	ce 01       	movw	r24, r28
     4a0:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     4a4:	d8 2e       	mov	r13, r24
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     4ae:	2d 2d       	mov	r18, r13
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	32 2f       	mov	r19, r18
     4b4:	22 27       	eor	r18, r18
     4b6:	28 2b       	or	r18, r24
     4b8:	f7 01       	movw	r30, r14
     4ba:	21 93       	st	Z+, r18
     4bc:	31 93       	st	Z+, r19
     4be:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     4c0:	ce 01       	movw	r24, r28
     4c2:	c0 96       	adiw	r24, 0x30	; 48
     4c4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     4c8:	d8 2e       	mov	r13, r24
     4ca:	ce 01       	movw	r24, r28
     4cc:	c1 96       	adiw	r24, 0x31	; 49
     4ce:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <eeprom_read_byte>
     4d2:	2d 2d       	mov	r18, r13
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	32 2f       	mov	r19, r18
     4d8:	22 27       	eor	r18, r18
     4da:	28 2b       	or	r18, r24
     4dc:	f8 01       	movw	r30, r16
     4de:	21 93       	st	Z+, r18
     4e0:	31 93       	st	Z+, r19
     4e2:	8f 01       	movw	r16, r30
     4e4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4e6:	cc 33       	cpi	r28, 0x3C	; 60
     4e8:	d1 05       	cpc	r29, r1
     4ea:	c9 f6       	brne	.-78     	; 0x49e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4ec:	78 94       	sei
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	08 95       	ret

000004fe <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	8f 93       	push	r24
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	a8 95       	wdr
     510:	80 91 60 00 	lds	r24, 0x0060
     514:	88 61       	ori	r24, 0x18	; 24
     516:	80 93 60 00 	sts	0x0060, r24
     51a:	10 92 60 00 	sts	0x0060, r1
     51e:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     520:	8f 91       	pop	r24
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     52c:	3c 01       	movw	r6, r24
     52e:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     530:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     532:	99 24       	eor	r9, r9
     534:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     53a:	96 e0       	ldi	r25, 0x06	; 6
     53c:	a9 2e       	mov	r10, r25
     53e:	23 e8       	ldi	r18, 0x83	; 131
     540:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     542:	38 e1       	ldi	r19, 0x18	; 24
     544:	d3 2e       	mov	r13, r19
     546:	49 e2       	ldi	r20, 0x29	; 41
     548:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     54a:	90 91 19 01 	lds	r25, 0x0119
     54e:	e9 2f       	mov	r30, r25
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	e7 30       	cpi	r30, 0x07	; 7
     554:	f1 05       	cpc	r31, r1
     556:	c8 f7       	brcc	.-14     	; 0x54a <kilo_start+0x1e>
     558:	ec 5c       	subi	r30, 0xCC	; 204
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     560:	11 23       	and	r17, r17
     562:	09 f4       	brne	.+2      	; 0x566 <kilo_start+0x3a>
     564:	fc c0       	rjmp	.+504    	; 0x75e <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     566:	c0 92 19 01 	sts	0x0119, r12
     56a:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     56c:	fe 01       	movw	r30, r28
     56e:	09 95       	icall
                break;
     570:	ec cf       	rjmp	.-40     	; 0x54a <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     572:	80 91 4d 01 	lds	r24, 0x014D
     576:	81 11       	cpse	r24, r1
     578:	eb c0       	rjmp	.+470    	; 0x750 <kilo_start+0x224>
        cli();                                    // disable interrupts
     57a:	f8 94       	cli
        adc_setup_conversion(6);
     57c:	a0 92 7c 00 	sts	0x007C, r10
     580:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     584:	80 91 7a 00 	lds	r24, 0x007A
     588:	80 64       	ori	r24, 0x40	; 64
     58a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     58e:	90 91 7a 00 	lds	r25, 0x007A
     592:	96 fd       	sbrc	r25, 6
     594:	fc cf       	rjmp	.-8      	; 0x58e <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     596:	80 91 78 00 	lds	r24, 0x0078
     59a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     59e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     5a0:	8b 3a       	cpi	r24, 0xAB	; 171
     5a2:	e2 e0       	ldi	r30, 0x02	; 2
     5a4:	9e 07       	cpc	r25, r30
     5a6:	0c f0       	brlt	.+2      	; 0x5aa <kilo_start+0x7e>
     5a8:	ed c0       	rjmp	.+474    	; 0x784 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     5aa:	89 38       	cpi	r24, 0x89	; 137
     5ac:	f2 e0       	ldi	r31, 0x02	; 2
     5ae:	9f 07       	cpc	r25, r31
     5b0:	0c f0       	brlt	.+2      	; 0x5b4 <kilo_start+0x88>
     5b2:	ef c0       	rjmp	.+478    	; 0x792 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     5b4:	87 36       	cpi	r24, 0x67	; 103
     5b6:	92 40       	sbci	r25, 0x02	; 2
     5b8:	0c f4       	brge	.+2      	; 0x5bc <kilo_start+0x90>
     5ba:	ca c0       	rjmp	.+404    	; 0x750 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5bc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5be:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5c0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5c2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5c4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5c6:	3c 98       	cbi	0x07, 4	; 7
     5c8:	c0 cf       	rjmp	.-128    	; 0x54a <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     5ca:	f8 94       	cli
                acomp_off();
     5cc:	80 b7       	in	r24, 0x30	; 48
     5ce:	87 7f       	andi	r24, 0xF7	; 247
     5d0:	80 bf       	out	0x30, r24	; 48
                adc_off();
     5d2:	80 91 7a 00 	lds	r24, 0x007A
     5d6:	8f 77       	andi	r24, 0x7F	; 127
     5d8:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     5dc:	14 b8       	out	0x04, r1	; 4
     5de:	17 b8       	out	0x07, r1	; 7
     5e0:	1a b8       	out	0x0a, r1	; 10
     5e2:	15 b8       	out	0x05, r1	; 5
     5e4:	18 b8       	out	0x08, r1	; 8
     5e6:	1b b8       	out	0x0b, r1	; 11
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	a8 95       	wdr
     5ee:	d0 92 60 00 	sts	0x0060, r13
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     5f8:	80 91 60 00 	lds	r24, 0x0060
     5fc:	80 64       	ori	r24, 0x40	; 64
     5fe:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     602:	93 b7       	in	r25, 0x33	; 51
     604:	91 7f       	andi	r25, 0xF1	; 241
     606:	94 60       	ori	r25, 0x04	; 4
     608:	93 bf       	out	0x33, r25	; 51
                cli();
     60a:	f8 94       	cli
                sleep_enable();
     60c:	83 b7       	in	r24, 0x33	; 51
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	83 bf       	out	0x33, r24	; 51
                sei();
     612:	78 94       	sei
                sleep_cpu();
     614:	88 95       	sleep
                sleep_disable();
     616:	83 b7       	in	r24, 0x33	; 51
     618:	8e 7f       	andi	r24, 0xFE	; 254
     61a:	83 bf       	out	0x33, r24	; 51
                sei();
     61c:	78 94       	sei
                rx_busy = 0;
     61e:	10 92 4d 01 	sts	0x014D, r1
                ports_on();
     622:	52 9a       	sbi	0x0a, 2	; 10
     624:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     626:	80 91 7a 00 	lds	r24, 0x007A
     62a:	80 68       	ori	r24, 0x80	; 128
     62c:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     630:	87 e5       	ldi	r24, 0x57	; 87
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <kilo_start+0x108>
     638:	00 c0       	rjmp	.+0      	; 0x63a <kilo_start+0x10e>
     63a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     63c:	80 b7       	in	r24, 0x30	; 48
     63e:	88 61       	ori	r24, 0x18	; 24
     640:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     642:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     644:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     646:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     648:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     64a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     64c:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64e:	ef e1       	ldi	r30, 0x1F	; 31
     650:	fe e4       	ldi	r31, 0x4E	; 78
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <kilo_start+0x126>
     656:	00 c0       	rjmp	.+0      	; 0x658 <kilo_start+0x12c>
     658:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     65a:	80 91 4d 01 	lds	r24, 0x014D
     65e:	81 11       	cpse	r24, r1
     660:	81 c0       	rjmp	.+258    	; 0x764 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     662:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     664:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     666:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     668:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     66a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     66c:	3c 98       	cbi	0x07, 4	; 7
     66e:	6d cf       	rjmp	.-294    	; 0x54a <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     670:	80 91 17 01 	lds	r24, 0x0117
     674:	81 11       	cpse	r24, r1
     676:	41 c0       	rjmp	.+130    	; 0x6fa <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     678:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     67c:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     680:	10 92 18 01 	sts	0x0118, r1
     684:	62 cf       	rjmp	.-316    	; 0x54a <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     686:	48 99       	sbic	0x09, 0	; 9
     688:	ec cf       	rjmp	.-40     	; 0x662 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     68a:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     68c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     68e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     690:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     692:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     694:	3c 98       	cbi	0x07, 4	; 7
     696:	8f ec       	ldi	r24, 0xCF	; 207
     698:	97 e0       	ldi	r25, 0x07	; 7
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <kilo_start+0x16e>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <kilo_start+0x174>
     6a0:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6a2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6a4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6a6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6a8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6aa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6ac:	3c 98       	cbi	0x07, 4	; 7
     6ae:	9f ef       	ldi	r25, 0xFF	; 255
     6b0:	e1 ee       	ldi	r30, 0xE1	; 225
     6b2:	f4 e0       	ldi	r31, 0x04	; 4
     6b4:	91 50       	subi	r25, 0x01	; 1
     6b6:	e0 40       	sbci	r30, 0x00	; 0
     6b8:	f0 40       	sbci	r31, 0x00	; 0
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <kilo_start+0x188>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <kilo_start+0x192>
     6be:	00 00       	nop
     6c0:	44 cf       	rjmp	.-376    	; 0x54a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6c2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6c4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6c6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6c8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6ca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6cc:	3c 98       	cbi	0x07, 4	; 7
     6ce:	ef ec       	ldi	r30, 0xCF	; 207
     6d0:	f7 e0       	ldi	r31, 0x07	; 7
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <kilo_start+0x1a6>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <kilo_start+0x1ac>
     6d8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6da:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6dc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6de:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6e0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6e2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6e4:	3c 98       	cbi	0x07, 4	; 7
     6e6:	ff ef       	ldi	r31, 0xFF	; 255
     6e8:	21 ee       	ldi	r18, 0xE1	; 225
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	f1 50       	subi	r31, 0x01	; 1
     6ee:	20 40       	sbci	r18, 0x00	; 0
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <kilo_start+0x1c0>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <kilo_start+0x1ca>
     6f6:	00 00       	nop
     6f8:	28 cf       	rjmp	.-432    	; 0x54a <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     6fa:	90 91 17 01 	lds	r25, 0x0117
     6fe:	80 91 18 01 	lds	r24, 0x0118
     702:	98 17       	cp	r25, r24
     704:	09 f4       	brne	.+2      	; 0x708 <kilo_start+0x1dc>
     706:	21 cf       	rjmp	.-446    	; 0x54a <kilo_start+0x1e>
                        prev_motion = cur_motion;
     708:	80 91 17 01 	lds	r24, 0x0117
     70c:	80 93 18 01 	sts	0x0118, r24
                        if (cur_motion == MOVE_LEFT) {
     710:	80 91 17 01 	lds	r24, 0x0117
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	09 f4       	brne	.+2      	; 0x71a <kilo_start+0x1ee>
     718:	50 c0       	rjmp	.+160    	; 0x7ba <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     71a:	80 91 17 01 	lds	r24, 0x0117
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     71e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     722:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	d9 f1       	breq	.+118    	; 0x7a0 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     72a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     72e:	90 92 b4 00 	sts	0x00B4, r9
     732:	8f e2       	ldi	r24, 0x2F	; 47
     734:	95 e7       	ldi	r25, 0x75	; 117
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <kilo_start+0x20a>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <kilo_start+0x210>
     73c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     73e:	80 91 82 01 	lds	r24, 0x0182
     742:	90 91 81 01 	lds	r25, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     746:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     74a:	80 93 b4 00 	sts	0x00B4, r24
     74e:	fd ce       	rjmp	.-518    	; 0x54a <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     750:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     752:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     754:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     756:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     758:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     75a:	3c 98       	cbi	0x07, 4	; 7
     75c:	f6 ce       	rjmp	.-532    	; 0x54a <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     75e:	f3 01       	movw	r30, r6
     760:	09 95       	icall
     762:	01 cf       	rjmp	.-510    	; 0x566 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     764:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     766:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     768:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     76a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     76c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     76e:	3c 98       	cbi	0x07, 4	; 7
     770:	ff ef       	ldi	r31, 0xFF	; 255
     772:	20 e7       	ldi	r18, 0x70	; 112
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	f1 50       	subi	r31, 0x01	; 1
     778:	20 40       	sbci	r18, 0x00	; 0
     77a:	80 40       	sbci	r24, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <kilo_start+0x24a>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <kilo_start+0x254>
     780:	00 00       	nop
     782:	6f cf       	rjmp	.-290    	; 0x662 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     784:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     786:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     788:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     78a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     78c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     78e:	3c 98       	cbi	0x07, 4	; 7
     790:	dc ce       	rjmp	.-584    	; 0x54a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     792:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     794:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     796:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     798:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     79a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     79c:	3c 9a       	sbi	0x07, 4	; 7
     79e:	d5 ce       	rjmp	.-598    	; 0x54a <kilo_start+0x1e>
     7a0:	ef e2       	ldi	r30, 0x2F	; 47
     7a2:	f5 e7       	ldi	r31, 0x75	; 117
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <kilo_start+0x278>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <kilo_start+0x27e>
     7aa:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     7ac:	80 91 6f 01 	lds	r24, 0x016F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7b0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7b4:	80 93 b4 00 	sts	0x00B4, r24
     7b8:	c8 ce       	rjmp	.-624    	; 0x54a <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7ba:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     7be:	10 92 b4 00 	sts	0x00B4, r1
     7c2:	8f e2       	ldi	r24, 0x2F	; 47
     7c4:	95 e7       	ldi	r25, 0x75	; 117
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <kilo_start+0x29a>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <kilo_start+0x2a0>
     7cc:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     7ce:	80 91 83 01 	lds	r24, 0x0183
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7d2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7d6:	10 92 b4 00 	sts	0x00B4, r1
     7da:	b7 ce       	rjmp	.-658    	; 0x54a <kilo_start+0x1e>

000007dc <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     7dc:	07 c0       	rjmp	.+14     	; 0x7ec <delay+0x10>
     7de:	ef ec       	ldi	r30, 0xCF	; 207
     7e0:	f7 e0       	ldi	r31, 0x07	; 7
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <delay+0x6>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <delay+0xc>
     7e8:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     7ea:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	b9 f7       	brne	.-18     	; 0x7de <delay+0x2>
     7f0:	08 95       	ret

000007f2 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7f2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7f6:	60 93 b4 00 	sts	0x00B4, r22
     7fa:	08 95       	ret

000007fc <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     802:	80 93 b4 00 	sts	0x00B4, r24
     806:	8f e0       	ldi	r24, 0x0F	; 15
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	ef ec       	ldi	r30, 0xCF	; 207
     80c:	f7 e0       	ldi	r31, 0x07	; 7
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <spinup_motors+0x12>
     812:	00 c0       	rjmp	.+0      	; 0x814 <spinup_motors+0x18>
     814:	00 00       	nop
     816:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     818:	c1 f7       	brne	.-16     	; 0x80a <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     81a:	08 95       	ret

0000081c <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     81c:	80 91 4d 01 	lds	r24, 0x014D
     820:	81 11       	cpse	r24, r1
     822:	1e c0       	rjmp	.+60     	; 0x860 <get_ambientlight+0x44>
        cli();
     824:	f8 94       	cli
        adc_setup_conversion(7);
     826:	87 e0       	ldi	r24, 0x07	; 7
     828:	80 93 7c 00 	sts	0x007C, r24
     82c:	83 e8       	ldi	r24, 0x83	; 131
     82e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     832:	80 91 7a 00 	lds	r24, 0x007A
     836:	80 64       	ori	r24, 0x40	; 64
     838:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     83c:	80 91 7a 00 	lds	r24, 0x007A
     840:	86 fd       	sbrc	r24, 6
     842:	fc cf       	rjmp	.-8      	; 0x83c <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     844:	80 91 78 00 	lds	r24, 0x0078
     848:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     84c:	10 92 7c 00 	sts	0x007C, r1
     850:	23 ea       	ldi	r18, 0xA3	; 163
     852:	20 93 7a 00 	sts	0x007A, r18
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     85c:	78 94       	sei
     85e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     864:	08 95       	ret

00000866 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     866:	80 91 4d 01 	lds	r24, 0x014D
     86a:	81 11       	cpse	r24, r1
     86c:	1e c0       	rjmp	.+60     	; 0x8aa <get_temperature+0x44>
        cli();
     86e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     870:	88 ec       	ldi	r24, 0xC8	; 200
     872:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     876:	87 e8       	ldi	r24, 0x87	; 135
     878:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     87c:	80 91 7a 00 	lds	r24, 0x007A
     880:	80 64       	ori	r24, 0x40	; 64
     882:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     886:	80 91 7a 00 	lds	r24, 0x007A
     88a:	86 fd       	sbrc	r24, 6
     88c:	fc cf       	rjmp	.-8      	; 0x886 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     88e:	80 91 78 00 	lds	r24, 0x0078
     892:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     896:	10 92 7c 00 	sts	0x007C, r1
     89a:	23 ea       	ldi	r18, 0xA3	; 163
     89c:	20 93 7a 00 	sts	0x007A, r18
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8a6:	78 94       	sei
     8a8:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     8ae:	08 95       	ret

000008b0 <rand_hard>:

uint8_t rand_hard() {
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	e0 e0       	ldi	r30, 0x00	; 0
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     8be:	03 ea       	ldi	r16, 0xA3	; 163
     8c0:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     8c2:	d6 e0       	ldi	r29, 0x06	; 6
     8c4:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     8c6:	a1 e0       	ldi	r26, 0x01	; 1
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     8ca:	60 e8       	ldi	r22, 0x80	; 128
     8cc:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     8ce:	f8 94       	cli
            adc_setup_conversion(6);
     8d0:	d0 93 7c 00 	sts	0x007C, r29
     8d4:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     8d8:	90 91 7a 00 	lds	r25, 0x007A
     8dc:	90 64       	ori	r25, 0x40	; 64
     8de:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8e2:	90 91 7a 00 	lds	r25, 0x007A
     8e6:	96 fd       	sbrc	r25, 6
     8e8:	fc cf       	rjmp	.-8      	; 0x8e2 <rand_hard+0x32>
            a = ADCW&0x1;
     8ea:	20 91 78 00 	lds	r18, 0x0078
     8ee:	30 91 79 00 	lds	r19, 0x0079
     8f2:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     8f4:	90 91 7a 00 	lds	r25, 0x007A
     8f8:	90 64       	ori	r25, 0x40	; 64
     8fa:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8fe:	90 91 7a 00 	lds	r25, 0x007A
     902:	96 fd       	sbrc	r25, 6
     904:	fc cf       	rjmp	.-8      	; 0x8fe <rand_hard+0x4e>
            b = ADCW&0x1;
     906:	40 91 78 00 	lds	r20, 0x0078
     90a:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     90e:	10 92 7c 00 	sts	0x007C, r1
     912:	00 93 7a 00 	sts	0x007A, r16
     916:	10 93 7b 00 	sts	0x007B, r17
            sei();
     91a:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     91c:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     91e:	24 13       	cpse	r18, r20
     920:	03 c0       	rjmp	.+6      	; 0x928 <__stack+0x29>
     922:	61 50       	subi	r22, 0x01	; 1
     924:	71 09       	sbc	r23, r1
     926:	99 f6       	brne	.-90     	; 0x8ce <rand_hard+0x1e>
        if (a)
     928:	22 23       	and	r18, r18
     92a:	39 f0       	breq	.+14     	; 0x93a <__stack+0x3b>
            num |= (1<<i);
     92c:	9d 01       	movw	r18, r26
     92e:	0e 2e       	mov	r0, r30
     930:	01 c0       	rjmp	.+2      	; 0x934 <__stack+0x35>
     932:	22 0f       	add	r18, r18
     934:	0a 94       	dec	r0
     936:	ea f7       	brpl	.-6      	; 0x932 <__stack+0x33>
     938:	82 2b       	or	r24, r18
     93a:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     93c:	e8 30       	cpi	r30, 0x08	; 8
     93e:	f1 05       	cpc	r31, r1
     940:	09 f0       	breq	.+2      	; 0x944 <__stack+0x45>
     942:	c3 cf       	rjmp	.-122    	; 0x8ca <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     94e:	80 91 00 01 	lds	r24, 0x0100
     952:	98 2f       	mov	r25, r24
     954:	99 0f       	add	r25, r25
     956:	99 0f       	add	r25, r25
     958:	99 0f       	add	r25, r25
     95a:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     95c:	90 91 16 01 	lds	r25, 0x0116
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	29 0f       	add	r18, r25
     964:	20 93 16 01 	sts	0x0116, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     968:	28 2f       	mov	r18, r24
     96a:	22 95       	swap	r18
     96c:	26 95       	lsr	r18
     96e:	27 70       	andi	r18, 0x07	; 7
     970:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     972:	96 95       	lsr	r25
     974:	96 95       	lsr	r25
     976:	89 27       	eor	r24, r25
     978:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     97c:	08 95       	ret

0000097e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     97e:	80 93 00 01 	sts	0x0100, r24
     982:	08 95       	ret

00000984 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     984:	80 91 4d 01 	lds	r24, 0x014D
     988:	81 11       	cpse	r24, r1
     98a:	16 c0       	rjmp	.+44     	; 0x9b8 <get_voltage+0x34>
        cli();                                    // disable interrupts
     98c:	f8 94       	cli
        adc_setup_conversion(6);
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	80 93 7c 00 	sts	0x007C, r24
     994:	83 e8       	ldi	r24, 0x83	; 131
     996:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     99a:	80 91 7a 00 	lds	r24, 0x007A
     99e:	80 64       	ori	r24, 0x40	; 64
     9a0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9a4:	80 91 7a 00 	lds	r24, 0x007A
     9a8:	86 fd       	sbrc	r24, 6
     9aa:	fc cf       	rjmp	.-8      	; 0x9a4 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     9ac:	80 91 78 00 	lds	r24, 0x0078
     9b0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     9b4:	78 94       	sei
     9b6:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     9bc:	08 95       	ret

000009be <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     9be:	2f 92       	push	r2
     9c0:	3f 92       	push	r3
     9c2:	4f 92       	push	r4
     9c4:	5f 92       	push	r5
     9c6:	6f 92       	push	r6
     9c8:	7f 92       	push	r7
     9ca:	8f 92       	push	r8
     9cc:	9f 92       	push	r9
     9ce:	af 92       	push	r10
     9d0:	bf 92       	push	r11
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <estimate_distance+0x26>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <estimate_distance+0x28>
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <estimate_distance+0x2a>
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     9ee:	dc 01       	movw	r26, r24
     9f0:	12 96       	adiw	r26, 0x02	; 2
     9f2:	0d 90       	ld	r0, X+
     9f4:	bc 91       	ld	r27, X
     9f6:	a0 2d       	mov	r26, r0
     9f8:	be 83       	std	Y+6, r27	; 0x06
     9fa:	ad 83       	std	Y+5, r26	; 0x05
     9fc:	a4 38       	cpi	r26, 0x84	; 132
     9fe:	e3 e0       	ldi	r30, 0x03	; 3
     a00:	be 07       	cpc	r27, r30
     a02:	0c f0       	brlt	.+2      	; 0xa06 <estimate_distance+0x48>
     a04:	c9 c0       	rjmp	.+402    	; 0xb98 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a06:	80 91 27 01 	lds	r24, 0x0127
     a0a:	90 91 28 01 	lds	r25, 0x0128
     a0e:	8a 17       	cp	r24, r26
     a10:	9b 07       	cpc	r25, r27
     a12:	08 f4       	brcc	.+2      	; 0xa16 <estimate_distance+0x58>
     a14:	37 c1       	rjmp	.+622    	; 0xc84 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a16:	00 91 29 01 	lds	r16, 0x0129
     a1a:	10 91 2a 01 	lds	r17, 0x012A
     a1e:	0a 17       	cp	r16, r26
     a20:	1b 07       	cpc	r17, r27
     a22:	08 f4       	brcc	.+2      	; 0xa26 <estimate_distance+0x68>
     a24:	2f c2       	rjmp	.+1118   	; 0xe84 <estimate_distance+0x4c6>
     a26:	00 91 2b 01 	lds	r16, 0x012B
     a2a:	10 91 2c 01 	lds	r17, 0x012C
     a2e:	0a 17       	cp	r16, r26
     a30:	1b 07       	cpc	r17, r27
     a32:	08 f4       	brcc	.+2      	; 0xa36 <estimate_distance+0x78>
     a34:	2f c2       	rjmp	.+1118   	; 0xe94 <estimate_distance+0x4d6>
     a36:	00 91 2d 01 	lds	r16, 0x012D
     a3a:	10 91 2e 01 	lds	r17, 0x012E
     a3e:	0a 17       	cp	r16, r26
     a40:	1b 07       	cpc	r17, r27
     a42:	08 f4       	brcc	.+2      	; 0xa46 <estimate_distance+0x88>
     a44:	2f c2       	rjmp	.+1118   	; 0xea4 <estimate_distance+0x4e6>
     a46:	00 91 2f 01 	lds	r16, 0x012F
     a4a:	10 91 30 01 	lds	r17, 0x0130
     a4e:	0a 17       	cp	r16, r26
     a50:	1b 07       	cpc	r17, r27
     a52:	08 f4       	brcc	.+2      	; 0xa56 <estimate_distance+0x98>
     a54:	2f c2       	rjmp	.+1118   	; 0xeb4 <estimate_distance+0x4f6>
     a56:	00 91 31 01 	lds	r16, 0x0131
     a5a:	10 91 32 01 	lds	r17, 0x0132
     a5e:	0a 17       	cp	r16, r26
     a60:	1b 07       	cpc	r17, r27
     a62:	08 f4       	brcc	.+2      	; 0xa66 <estimate_distance+0xa8>
     a64:	ef c1       	rjmp	.+990    	; 0xe44 <estimate_distance+0x486>
     a66:	00 91 33 01 	lds	r16, 0x0133
     a6a:	10 91 34 01 	lds	r17, 0x0134
     a6e:	0a 17       	cp	r16, r26
     a70:	1b 07       	cpc	r17, r27
     a72:	08 f4       	brcc	.+2      	; 0xa76 <estimate_distance+0xb8>
     a74:	27 c2       	rjmp	.+1102   	; 0xec4 <estimate_distance+0x506>
     a76:	00 91 35 01 	lds	r16, 0x0135
     a7a:	10 91 36 01 	lds	r17, 0x0136
     a7e:	0a 17       	cp	r16, r26
     a80:	1b 07       	cpc	r17, r27
     a82:	08 f4       	brcc	.+2      	; 0xa86 <estimate_distance+0xc8>
     a84:	27 c2       	rjmp	.+1102   	; 0xed4 <estimate_distance+0x516>
     a86:	00 91 37 01 	lds	r16, 0x0137
     a8a:	10 91 38 01 	lds	r17, 0x0138
     a8e:	0a 17       	cp	r16, r26
     a90:	1b 07       	cpc	r17, r27
     a92:	08 f4       	brcc	.+2      	; 0xa96 <estimate_distance+0xd8>
     a94:	27 c2       	rjmp	.+1102   	; 0xee4 <estimate_distance+0x526>
     a96:	00 91 39 01 	lds	r16, 0x0139
     a9a:	10 91 3a 01 	lds	r17, 0x013A
     a9e:	0a 17       	cp	r16, r26
     aa0:	1b 07       	cpc	r17, r27
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <estimate_distance+0xe8>
     aa4:	27 c2       	rjmp	.+1102   	; 0xef4 <estimate_distance+0x536>
     aa6:	00 91 3b 01 	lds	r16, 0x013B
     aaa:	10 91 3c 01 	lds	r17, 0x013C
     aae:	0a 17       	cp	r16, r26
     ab0:	1b 07       	cpc	r17, r27
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <estimate_distance+0xf8>
     ab4:	27 c2       	rjmp	.+1102   	; 0xf04 <estimate_distance+0x546>
     ab6:	00 91 3d 01 	lds	r16, 0x013D
     aba:	10 91 3e 01 	lds	r17, 0x013E
     abe:	0a 17       	cp	r16, r26
     ac0:	1b 07       	cpc	r17, r27
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <estimate_distance+0x108>
     ac4:	23 c2       	rjmp	.+1094   	; 0xf0c <estimate_distance+0x54e>
     ac6:	00 91 3f 01 	lds	r16, 0x013F
     aca:	10 91 40 01 	lds	r17, 0x0140
     ace:	0a 17       	cp	r16, r26
     ad0:	1b 07       	cpc	r17, r27
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <estimate_distance+0x118>
     ad4:	23 c2       	rjmp	.+1094   	; 0xf1c <estimate_distance+0x55e>
     ad6:	00 91 41 01 	lds	r16, 0x0141
     ada:	10 91 42 01 	lds	r17, 0x0142
     ade:	0a 17       	cp	r16, r26
     ae0:	1b 07       	cpc	r17, r27
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <estimate_distance+0x128>
     ae4:	23 c2       	rjmp	.+1094   	; 0xf2c <estimate_distance+0x56e>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 ed       	ldi	r26, 0xD0	; 208
     aec:	b0 e4       	ldi	r27, 0x40	; 64
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	ab 83       	std	Y+3, r26	; 0x03
     af4:	bc 83       	std	Y+4, r27	; 0x04
     af6:	4c e0       	ldi	r20, 0x0C	; 12
     af8:	e4 2e       	mov	r14, r20
     afa:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     afc:	f7 01       	movw	r30, r14
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	e9 5d       	subi	r30, 0xD9	; 217
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	b8 01       	movw	r22, r16
     b0c:	68 1b       	sub	r22, r24
     b0e:	79 0b       	sbc	r23, r25
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__addsf3>
     b20:	6b 01       	movw	r12, r22
     b22:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b24:	ad 81       	ldd	r26, Y+5	; 0x05
     b26:	be 81       	ldd	r27, Y+6	; 0x06
     b28:	bd 01       	movw	r22, r26
     b2a:	bb 0f       	add	r27, r27
     b2c:	88 0b       	sbc	r24, r24
     b2e:	99 0b       	sbc	r25, r25
     b30:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     b34:	4b 01       	movw	r8, r22
     b36:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b38:	b8 01       	movw	r22, r16
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     b42:	2b 01       	movw	r4, r22
     b44:	3c 01       	movw	r6, r24
     b46:	29 81       	ldd	r18, Y+1	; 0x01
     b48:	3a 81       	ldd	r19, Y+2	; 0x02
     b4a:	4b 81       	ldd	r20, Y+3	; 0x03
     b4c:	5c 81       	ldd	r21, Y+4	; 0x04
     b4e:	c7 01       	movw	r24, r14
     b50:	b6 01       	movw	r22, r12
     b52:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     b56:	9b 01       	movw	r18, r22
     b58:	ac 01       	movw	r20, r24
     b5a:	c3 01       	movw	r24, r6
     b5c:	b2 01       	movw	r22, r4
     b5e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__subsf3>
     b62:	9b 01       	movw	r18, r22
     b64:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b66:	c5 01       	movw	r24, r10
     b68:	b4 01       	movw	r22, r8
     b6a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__subsf3>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e2       	ldi	r20, 0x20	; 32
     b74:	51 e4       	ldi	r21, 0x41	; 65
     b76:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
            b=((int)((int)b/(int)slope));
     b7a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixsfsi>
     b7e:	8b 01       	movw	r16, r22
     b80:	c7 01       	movw	r24, r14
     b82:	b6 01       	movw	r22, r12
     b84:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixsfsi>
     b88:	ab 01       	movw	r20, r22
     b8a:	bc 01       	movw	r22, r24
     b8c:	c8 01       	movw	r24, r16
     b8e:	ba 01       	movw	r22, r20
     b90:	0e 94 20 0b 	call	0x1640	; 0x1640 <__divmodhi4>
            dist_high=b;
     b94:	16 2f       	mov	r17, r22
     b96:	77 c0       	rjmp	.+238    	; 0xc86 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b98:	dc 01       	movw	r26, r24
     b9a:	cd 90       	ld	r12, X+
     b9c:	dc 90       	ld	r13, X
     b9e:	80 91 4e 01 	lds	r24, 0x014E
     ba2:	90 91 4f 01 	lds	r25, 0x014F
     ba6:	8c 15       	cp	r24, r12
     ba8:	9d 05       	cpc	r25, r13
     baa:	08 f4       	brcc	.+2      	; 0xbae <estimate_distance+0x1f0>
     bac:	8c c0       	rjmp	.+280    	; 0xcc6 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     bae:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     bb0:	e0 90 50 01 	lds	r14, 0x0150
     bb4:	f0 90 51 01 	lds	r15, 0x0151
     bb8:	ec 14       	cp	r14, r12
     bba:	fd 04       	cpc	r15, r13
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <estimate_distance+0x202>
     bbe:	5e c1       	rjmp	.+700    	; 0xe7c <estimate_distance+0x4be>
     bc0:	e0 90 52 01 	lds	r14, 0x0152
     bc4:	f0 90 53 01 	lds	r15, 0x0153
     bc8:	ec 14       	cp	r14, r12
     bca:	fd 04       	cpc	r15, r13
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <estimate_distance+0x212>
     bce:	5e c1       	rjmp	.+700    	; 0xe8c <estimate_distance+0x4ce>
     bd0:	e0 90 54 01 	lds	r14, 0x0154
     bd4:	f0 90 55 01 	lds	r15, 0x0155
     bd8:	ec 14       	cp	r14, r12
     bda:	fd 04       	cpc	r15, r13
     bdc:	08 f4       	brcc	.+2      	; 0xbe0 <estimate_distance+0x222>
     bde:	5e c1       	rjmp	.+700    	; 0xe9c <estimate_distance+0x4de>
     be0:	e0 90 56 01 	lds	r14, 0x0156
     be4:	f0 90 57 01 	lds	r15, 0x0157
     be8:	ec 14       	cp	r14, r12
     bea:	fd 04       	cpc	r15, r13
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <estimate_distance+0x232>
     bee:	5e c1       	rjmp	.+700    	; 0xeac <estimate_distance+0x4ee>
     bf0:	e0 90 58 01 	lds	r14, 0x0158
     bf4:	f0 90 59 01 	lds	r15, 0x0159
     bf8:	ec 14       	cp	r14, r12
     bfa:	fd 04       	cpc	r15, r13
     bfc:	08 f4       	brcc	.+2      	; 0xc00 <estimate_distance+0x242>
     bfe:	c3 c0       	rjmp	.+390    	; 0xd86 <estimate_distance+0x3c8>
     c00:	e0 90 5a 01 	lds	r14, 0x015A
     c04:	f0 90 5b 01 	lds	r15, 0x015B
     c08:	ec 14       	cp	r14, r12
     c0a:	fd 04       	cpc	r15, r13
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <estimate_distance+0x252>
     c0e:	56 c1       	rjmp	.+684    	; 0xebc <estimate_distance+0x4fe>
     c10:	e0 90 5c 01 	lds	r14, 0x015C
     c14:	f0 90 5d 01 	lds	r15, 0x015D
     c18:	ec 14       	cp	r14, r12
     c1a:	fd 04       	cpc	r15, r13
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <estimate_distance+0x262>
     c1e:	56 c1       	rjmp	.+684    	; 0xecc <estimate_distance+0x50e>
     c20:	e0 90 5e 01 	lds	r14, 0x015E
     c24:	f0 90 5f 01 	lds	r15, 0x015F
     c28:	ec 14       	cp	r14, r12
     c2a:	fd 04       	cpc	r15, r13
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <estimate_distance+0x272>
     c2e:	56 c1       	rjmp	.+684    	; 0xedc <estimate_distance+0x51e>
     c30:	e0 90 60 01 	lds	r14, 0x0160
     c34:	f0 90 61 01 	lds	r15, 0x0161
     c38:	ec 14       	cp	r14, r12
     c3a:	fd 04       	cpc	r15, r13
     c3c:	08 f4       	brcc	.+2      	; 0xc40 <estimate_distance+0x282>
     c3e:	56 c1       	rjmp	.+684    	; 0xeec <estimate_distance+0x52e>
     c40:	e0 90 62 01 	lds	r14, 0x0162
     c44:	f0 90 63 01 	lds	r15, 0x0163
     c48:	ec 14       	cp	r14, r12
     c4a:	fd 04       	cpc	r15, r13
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <estimate_distance+0x292>
     c4e:	56 c1       	rjmp	.+684    	; 0xefc <estimate_distance+0x53e>
     c50:	e0 90 64 01 	lds	r14, 0x0164
     c54:	f0 90 65 01 	lds	r15, 0x0165
     c58:	ec 14       	cp	r14, r12
     c5a:	fd 04       	cpc	r15, r13
     c5c:	08 f4       	brcc	.+2      	; 0xc60 <estimate_distance+0x2a2>
     c5e:	5a c1       	rjmp	.+692    	; 0xf14 <estimate_distance+0x556>
     c60:	e0 90 66 01 	lds	r14, 0x0166
     c64:	f0 90 67 01 	lds	r15, 0x0167
     c68:	ec 14       	cp	r14, r12
     c6a:	fd 04       	cpc	r15, r13
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <estimate_distance+0x2b2>
     c6e:	5a c1       	rjmp	.+692    	; 0xf24 <estimate_distance+0x566>
     c70:	e0 90 68 01 	lds	r14, 0x0168
     c74:	f0 90 69 01 	lds	r15, 0x0169
     c78:	ec 14       	cp	r14, r12
     c7a:	fd 04       	cpc	r15, r13
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <estimate_distance+0x2c2>
     c7e:	5a c1       	rjmp	.+692    	; 0xf34 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     c80:	0a e5       	ldi	r16, 0x5A	; 90
     c82:	31 c0       	rjmp	.+98     	; 0xce6 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     c84:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     c86:	ed 81       	ldd	r30, Y+5	; 0x05
     c88:	fe 81       	ldd	r31, Y+6	; 0x06
     c8a:	ed 3b       	cpi	r30, 0xBD	; 189
     c8c:	f2 40       	sbci	r31, 0x02	; 2
     c8e:	fc f4       	brge	.+62     	; 0xcce <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c90:	81 e2       	ldi	r24, 0x21	; 33
     c92:	81 0f       	add	r24, r17
    }
}
     c94:	26 96       	adiw	r28, 0x06	; 6
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	9f 90       	pop	r9
     cb6:	8f 90       	pop	r8
     cb8:	7f 90       	pop	r7
     cba:	6f 90       	pop	r6
     cbc:	5f 90       	pop	r5
     cbe:	4f 90       	pop	r4
     cc0:	3f 90       	pop	r3
     cc2:	2f 90       	pop	r2
     cc4:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     cc6:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     cc8:	81 e2       	ldi	r24, 0x21	; 33
     cca:	80 0f       	add	r24, r16
     ccc:	e3 cf       	rjmp	.-58     	; 0xc94 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     cce:	d1 01       	movw	r26, r2
     cd0:	cd 90       	ld	r12, X+
     cd2:	dc 90       	ld	r13, X
     cd4:	80 91 4e 01 	lds	r24, 0x014E
     cd8:	90 91 4f 01 	lds	r25, 0x014F
     cdc:	8c 15       	cp	r24, r12
     cde:	9d 05       	cpc	r25, r13
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <estimate_distance+0x326>
     ce2:	66 cf       	rjmp	.-308    	; 0xbb0 <estimate_distance+0x1f2>
            dist_low=0;
     ce4:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     ce6:	1f 3f       	cpi	r17, 0xFF	; 255
     ce8:	79 f3       	breq	.-34     	; 0xcc8 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     cea:	ed 81       	ldd	r30, Y+5	; 0x05
     cec:	fe 81       	ldd	r31, Y+6	; 0x06
     cee:	bf 01       	movw	r22, r30
     cf0:	ff 0f       	add	r31, r31
     cf2:	88 0b       	sbc	r24, r24
     cf4:	99 0b       	sbc	r25, r25
     cf6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     cfa:	6b 01       	movw	r12, r22
     cfc:	7c 01       	movw	r14, r24
     cfe:	61 2f       	mov	r22, r17
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     d0a:	4b 01       	movw	r8, r22
     d0c:	5c 01       	movw	r10, r24
     d0e:	a7 01       	movw	r20, r14
     d10:	96 01       	movw	r18, r12
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	81 e6       	ldi	r24, 0x61	; 97
     d18:	94 e4       	ldi	r25, 0x44	; 68
     d1a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__subsf3>
     d1e:	9b 01       	movw	r18, r22
     d20:	ac 01       	movw	r20, r24
     d22:	c5 01       	movw	r24, r10
     d24:	b4 01       	movw	r22, r8
     d26:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d2a:	4b 01       	movw	r8, r22
     d2c:	5c 01       	movw	r10, r24
     d2e:	60 2f       	mov	r22, r16
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     d3a:	2b 01       	movw	r4, r22
     d3c:	3c 01       	movw	r6, r24
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	4f e2       	ldi	r20, 0x2F	; 47
     d44:	54 e4       	ldi	r21, 0x44	; 68
     d46:	c7 01       	movw	r24, r14
     d48:	b6 01       	movw	r22, r12
     d4a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__subsf3>
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	c3 01       	movw	r24, r6
     d54:	b2 01       	movw	r22, r4
     d56:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d5a:	9b 01       	movw	r18, r22
     d5c:	ac 01       	movw	r20, r24
     d5e:	c5 01       	movw	r24, r10
     d60:	b4 01       	movw	r22, r8
     d62:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__addsf3>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	48 e4       	ldi	r20, 0x48	; 72
     d6c:	53 e4       	ldi	r21, 0x43	; 67
     d6e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divsf3>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	44 e0       	ldi	r20, 0x04	; 4
     d78:	52 e4       	ldi	r21, 0x42	; 66
     d7a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__addsf3>
     d7e:	0e 94 43 0c 	call	0x1886	; 0x1886 <__fixunssfsi>
     d82:	86 2f       	mov	r24, r22
     d84:	87 cf       	rjmp	.-242    	; 0xc94 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d86:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	fc 01       	movw	r30, r24
     d92:	e4 5b       	subi	r30, 0xB4	; 180
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	b7 01       	movw	r22, r14
     d9c:	68 1b       	sub	r22, r24
     d9e:	79 0b       	sbc	r23, r25
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     da8:	9b 01       	movw	r18, r22
     daa:	ac 01       	movw	r20, r24
     dac:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__addsf3>
     db0:	4b 01       	movw	r8, r22
     db2:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     db4:	b6 01       	movw	r22, r12
     db6:	dd 0c       	add	r13, r13
     db8:	88 0b       	sbc	r24, r24
     dba:	99 0b       	sbc	r25, r25
     dbc:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     dc0:	2b 01       	movw	r4, r22
     dc2:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     dc4:	b7 01       	movw	r22, r14
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     dce:	6b 01       	movw	r12, r22
     dd0:	7c 01       	movw	r14, r24
     dd2:	60 2f       	mov	r22, r16
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	a9 01       	movw	r20, r18
     df0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__addsf3>
     df4:	a5 01       	movw	r20, r10
     df6:	94 01       	movw	r18, r8
     df8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     dfc:	9b 01       	movw	r18, r22
     dfe:	ac 01       	movw	r20, r24
     e00:	c7 01       	movw	r24, r14
     e02:	b6 01       	movw	r22, r12
     e04:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__subsf3>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e0c:	c3 01       	movw	r24, r6
     e0e:	b2 01       	movw	r22, r4
     e10:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__subsf3>
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e2       	ldi	r20, 0x20	; 32
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
                b=((int)((int)b/(int)slope));
     e20:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixsfsi>
     e24:	7b 01       	movw	r14, r22
     e26:	c5 01       	movw	r24, r10
     e28:	b4 01       	movw	r22, r8
     e2a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixsfsi>
     e2e:	ab 01       	movw	r20, r22
     e30:	bc 01       	movw	r22, r24
     e32:	c7 01       	movw	r24, r14
     e34:	ba 01       	movw	r22, r20
     e36:	0e 94 20 0b 	call	0x1640	; 0x1640 <__divmodhi4>
                dist_low=b;
     e3a:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e3c:	6f 3f       	cpi	r22, 0xFF	; 255
     e3e:	09 f0       	breq	.+2      	; 0xe42 <estimate_distance+0x484>
     e40:	52 cf       	rjmp	.-348    	; 0xce6 <estimate_distance+0x328>
     e42:	26 cf       	rjmp	.-436    	; 0xc90 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e44:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	7c 01       	movw	r14, r24
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	ef 1a       	sub	r14, r31
     e50:	f1 08       	sbc	r15, r1
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	a9 01       	movw	r20, r18
     e6e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__addsf3>
     e72:	69 83       	std	Y+1, r22	; 0x01
     e74:	7a 83       	std	Y+2, r23	; 0x02
     e76:	8b 83       	std	Y+3, r24	; 0x03
     e78:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     e7a:	40 ce       	rjmp	.-896    	; 0xafc <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e7c:	01 e0       	ldi	r16, 0x01	; 1
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	84 cf       	rjmp	.-248    	; 0xd8c <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	df cf       	rjmp	.-66     	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e8c:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	7c cf       	rjmp	.-264    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e94:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	d7 cf       	rjmp	.-82     	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e9c:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	74 cf       	rjmp	.-280    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ea4:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	cf cf       	rjmp	.-98     	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eac:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	6c cf       	rjmp	.-296    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eb4:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	c7 cf       	rjmp	.-114    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ebc:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     ebe:	86 e0       	ldi	r24, 0x06	; 6
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	64 cf       	rjmp	.-312    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ec4:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     ec6:	86 e0       	ldi	r24, 0x06	; 6
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	bf cf       	rjmp	.-130    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ecc:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ece:	87 e0       	ldi	r24, 0x07	; 7
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	5c cf       	rjmp	.-328    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ed4:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     ed6:	87 e0       	ldi	r24, 0x07	; 7
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	b7 cf       	rjmp	.-146    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     edc:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     ede:	88 e0       	ldi	r24, 0x08	; 8
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	54 cf       	rjmp	.-344    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ee4:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     ee6:	88 e0       	ldi	r24, 0x08	; 8
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	af cf       	rjmp	.-162    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eec:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     eee:	89 e0       	ldi	r24, 0x09	; 9
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	4c cf       	rjmp	.-360    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ef4:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     ef6:	89 e0       	ldi	r24, 0x09	; 9
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a7 cf       	rjmp	.-178    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     efc:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     efe:	8a e0       	ldi	r24, 0x0A	; 10
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	44 cf       	rjmp	.-376    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f04:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9f cf       	rjmp	.-194    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f0c:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f0e:	8b e0       	ldi	r24, 0x0B	; 11
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9b cf       	rjmp	.-202    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f14:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     f16:	8b e0       	ldi	r24, 0x0B	; 11
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	38 cf       	rjmp	.-400    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f1c:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     f1e:	8c e0       	ldi	r24, 0x0C	; 12
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	93 cf       	rjmp	.-218    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f24:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     f26:	8c e0       	ldi	r24, 0x0C	; 12
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	30 cf       	rjmp	.-416    	; 0xd8c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f2c:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f2e:	8d e0       	ldi	r24, 0x0D	; 13
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	8b cf       	rjmp	.-234    	; 0xe4a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f34:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f36:	8d e0       	ldi	r24, 0x0D	; 13
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	28 cf       	rjmp	.-432    	; 0xd8c <estimate_distance+0x3ce>

00000f3c <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
    tx_clock += tx_increment;
     f5e:	20 91 6d 01 	lds	r18, 0x016D
     f62:	30 91 6e 01 	lds	r19, 0x016E
     f66:	80 91 6b 01 	lds	r24, 0x016B
     f6a:	90 91 6c 01 	lds	r25, 0x016C
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	90 93 6e 01 	sts	0x016E, r25
     f76:	80 93 6d 01 	sts	0x016D, r24
    tx_increment = 0xFF;
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	90 93 6c 01 	sts	0x016C, r25
     f82:	80 93 6b 01 	sts	0x016B, r24
    OCR0A = tx_increment;
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f8a:	80 91 49 01 	lds	r24, 0x0149
     f8e:	90 91 4a 01 	lds	r25, 0x014A
     f92:	a0 91 4b 01 	lds	r26, 0x014B
     f96:	b0 91 4c 01 	lds	r27, 0x014C
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	b1 1d       	adc	r27, r1
     fa0:	80 93 49 01 	sts	0x0149, r24
     fa4:	90 93 4a 01 	sts	0x014A, r25
     fa8:	a0 93 4b 01 	sts	0x014B, r26
     fac:	b0 93 4c 01 	sts	0x014C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     fb0:	80 91 4d 01 	lds	r24, 0x014D
     fb4:	81 11       	cpse	r24, r1
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <__vector_14+0x9a>
     fb8:	80 91 7c 01 	lds	r24, 0x017C
     fbc:	90 91 7d 01 	lds	r25, 0x017D
     fc0:	20 91 6d 01 	lds	r18, 0x016D
     fc4:	30 91 6e 01 	lds	r19, 0x016E
     fc8:	82 17       	cp	r24, r18
     fca:	93 07       	cpc	r25, r19
     fcc:	20 f4       	brcc	.+8      	; 0xfd6 <__vector_14+0x9a>
     fce:	80 91 19 01 	lds	r24, 0x0119
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	89 f0       	breq	.+34     	; 0xff8 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ff8:	e0 91 03 01 	lds	r30, 0x0103
     ffc:	f0 91 04 01 	lds	r31, 0x0104
    1000:	09 95       	icall
        if (msg) {
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	41 f3       	breq	.-48     	; 0xfd6 <__vector_14+0x9a>
            if (message_send(msg)) {
    1006:	0e 94 86 0a 	call	0x150c	; 0x150c <message_send>
    100a:	81 11       	cpse	r24, r1
    100c:	09 c0       	rjmp	.+18     	; 0x1020 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    100e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <rand>
    1012:	99 27       	eor	r25, r25
    1014:	90 93 6c 01 	sts	0x016C, r25
    1018:	80 93 6b 01 	sts	0x016B, r24
                OCR0A = tx_increment;
    101c:	87 bd       	out	0x27, r24	; 39
    101e:	db cf       	rjmp	.-74     	; 0xfd6 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1020:	e0 91 01 01 	lds	r30, 0x0101
    1024:	f0 91 02 01 	lds	r31, 0x0102
    1028:	09 95       	icall
                tx_clock = 0;
    102a:	10 92 6e 01 	sts	0x016E, r1
    102e:	10 92 6d 01 	sts	0x016D, r1
    1032:	d1 cf       	rjmp	.-94     	; 0xfd6 <__vector_14+0x9a>

00001034 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1034:	80 ff       	sbrs	r24, 0
    1036:	11 c0       	rjmp	.+34     	; 0x105a <set_color+0x26>
        DDRD |= (1<<5);
    1038:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    103a:	81 ff       	sbrs	r24, 1
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <set_color+0x2c>
        DDRD |= (1<<4);
    103e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1040:	82 ff       	sbrs	r24, 2
    1042:	11 c0       	rjmp	.+34     	; 0x1066 <set_color+0x32>
        DDRC |= (1<<3);
    1044:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1046:	83 ff       	sbrs	r24, 3
    1048:	11 c0       	rjmp	.+34     	; 0x106c <set_color+0x38>
        DDRC |= (1<<2);
    104a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    104c:	84 ff       	sbrs	r24, 4
    104e:	11 c0       	rjmp	.+34     	; 0x1072 <set_color+0x3e>
        DDRC |= (1<<5);
    1050:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1052:	85 fd       	sbrc	r24, 5
    1054:	11 c0       	rjmp	.+34     	; 0x1078 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1056:	3c 98       	cbi	0x07, 4	; 7
    1058:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    105a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    105c:	81 fd       	sbrc	r24, 1
    105e:	ef cf       	rjmp	.-34     	; 0x103e <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1060:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1062:	82 fd       	sbrc	r24, 2
    1064:	ef cf       	rjmp	.-34     	; 0x1044 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1066:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1068:	83 fd       	sbrc	r24, 3
    106a:	ef cf       	rjmp	.-34     	; 0x104a <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    106c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    106e:	84 fd       	sbrc	r24, 4
    1070:	ef cf       	rjmp	.-34     	; 0x1050 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1072:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1074:	85 ff       	sbrs	r24, 5
    1076:	ef cf       	rjmp	.-34     	; 0x1056 <set_color+0x22>
        DDRC |= (1<<4);
    1078:	3c 9a       	sbi	0x07, 4	; 7
    107a:	08 95       	ret

0000107c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    rx_timer_off();
    108a:	10 92 81 00 	sts	0x0081, r1
    108e:	10 92 85 00 	sts	0x0085, r1
    1092:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 26 01 	sts	0x0126, r24
    rx_leadingbyte = 1;
    109c:	80 93 6a 01 	sts	0x016A, r24
    rx_busy = 0;
    10a0:	10 92 4d 01 	sts	0x014D, r1
    adc_trigger_high_gain();
    10a4:	10 92 7c 00 	sts	0x007C, r1
    10a8:	93 ea       	ldi	r25, 0xA3	; 163
    10aa:	90 93 7a 00 	sts	0x007A, r25
    10ae:	80 93 7b 00 	sts	0x007B, r24
}
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    10e6:	20 91 84 00 	lds	r18, 0x0084
    10ea:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	40 93 4d 01 	sts	0x014D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    10f4:	80 91 26 01 	lds	r24, 0x0126
    10f8:	88 23       	and	r24, r24
    10fa:	a9 f1       	breq	.+106    	; 0x1166 <__vector_23+0xa6>
        rx_timer_on();
    10fc:	10 92 85 00 	sts	0x0085, r1
    1100:	10 92 84 00 	sts	0x0084, r1
    1104:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1108:	10 92 7e 01 	sts	0x017E, r1
        rx_leadingbit = 0;
    110c:	10 92 26 01 	sts	0x0126, r1
        if (rx_leadingbyte) {
    1110:	80 91 6a 01 	lds	r24, 0x016A
    1114:	88 23       	and	r24, r24
    1116:	a1 f0       	breq	.+40     	; 0x1140 <__vector_23+0x80>
            adc_finish_conversion();
    1118:	80 91 7a 00 	lds	r24, 0x007A
    111c:	86 fd       	sbrc	r24, 6
    111e:	fc cf       	rjmp	.-8      	; 0x1118 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1120:	80 91 78 00 	lds	r24, 0x0078
    1124:	90 91 79 00 	lds	r25, 0x0079
    1128:	90 93 48 01 	sts	0x0148, r25
    112c:	80 93 47 01 	sts	0x0147, r24
            adc_trigger_low_gain();
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 7c 00 	sts	0x007C, r24
    1136:	93 ea       	ldi	r25, 0xA3	; 163
    1138:	90 93 7a 00 	sts	0x007A, r25
    113c:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1166:	c9 01       	movw	r24, r18
    1168:	87 58       	subi	r24, 0x87	; 135
    116a:	91 09       	sbc	r25, r1
    116c:	84 37       	cpi	r24, 0x74	; 116
    116e:	99 40       	sbci	r25, 0x09	; 9
    1170:	08 f0       	brcs	.+2      	; 0x1174 <__vector_23+0xb4>
    1172:	52 c0       	rjmp	.+164    	; 0x1218 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1174:	26 58       	subi	r18, 0x86	; 134
    1176:	31 09       	sbc	r19, r1
    1178:	a4 ef       	ldi	r26, 0xF4	; 244
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__umulhisi3>
    1180:	aa 27       	eor	r26, r26
    1182:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	91 05       	cpc	r25, r1
    1188:	a1 05       	cpc	r26, r1
    118a:	b1 05       	cpc	r27, r1
    118c:	08 f4       	brcc	.+2      	; 0x1190 <__vector_23+0xd0>
    118e:	7b c0       	rjmp	.+246    	; 0x1286 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1190:	40 93 26 01 	sts	0x0126, r20
                if (rx_leadingbyte) {
    1194:	80 91 6a 01 	lds	r24, 0x016A
    1198:	81 11       	cpse	r24, r1
    119a:	52 c0       	rjmp	.+164    	; 0x1240 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    119c:	80 91 44 01 	lds	r24, 0x0144
    11a0:	e8 2f       	mov	r30, r24
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	e0 59       	subi	r30, 0x90	; 144
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	90 91 7e 01 	lds	r25, 0x017E
    11ac:	90 83       	st	Z, r25
                    rx_byteindex++;
    11ae:	8f 5f       	subi	r24, 0xFF	; 255
    11b0:	80 93 44 01 	sts	0x0144, r24
                    if (rx_byteindex == sizeof(message_t)) {
    11b4:	8c 30       	cpi	r24, 0x0C	; 12
    11b6:	21 f6       	brne	.-120    	; 0x1140 <__vector_23+0x80>
                        rx_timer_off();
    11b8:	10 92 81 00 	sts	0x0081, r1
    11bc:	10 92 85 00 	sts	0x0085, r1
    11c0:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    11c4:	40 93 6a 01 	sts	0x016A, r20
                        rx_busy = 0;
    11c8:	10 92 4d 01 	sts	0x014D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    11cc:	c0 91 7a 01 	lds	r28, 0x017A
    11d0:	d0 91 7b 01 	lds	r29, 0x017B
    11d4:	80 e7       	ldi	r24, 0x70	; 112
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <message_crc>
    11dc:	c8 17       	cp	r28, r24
    11de:	d9 07       	cpc	r29, r25
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <__vector_23+0x124>
    11e2:	ae cf       	rjmp	.-164    	; 0x1140 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    11e4:	80 91 79 01 	lds	r24, 0x0179
    11e8:	87 ff       	sbrs	r24, 7
    11ea:	61 c0       	rjmp	.+194    	; 0x12ae <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    11ec:	98 e7       	ldi	r25, 0x78	; 120
    11ee:	98 0f       	add	r25, r24
    11f0:	93 30       	cpi	r25, 0x03	; 3
    11f2:	30 f0       	brcs	.+12     	; 0x1200 <__vector_23+0x140>
        motors_off();
    11f4:	53 98       	cbi	0x0a, 3	; 10
    11f6:	23 98       	cbi	0x04, 3	; 4
    11f8:	10 92 b4 00 	sts	0x00B4, r1
    11fc:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	fc 01       	movw	r30, r24
    1204:	e0 58       	subi	r30, 0x80	; 128
    1206:	f1 09       	sbc	r31, r1
    1208:	eb 30       	cpi	r30, 0x0B	; 11
    120a:	f1 05       	cpc	r31, r1
    120c:	08 f0       	brcs	.+2      	; 0x1210 <__vector_23+0x150>
    120e:	98 cf       	rjmp	.-208    	; 0x1140 <__vector_23+0x80>
    1210:	e5 5c       	subi	r30, 0xC5	; 197
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1218:	10 92 81 00 	sts	0x0081, r1
    121c:	10 92 85 00 	sts	0x0085, r1
    1220:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1224:	40 93 26 01 	sts	0x0126, r20
            rx_leadingbyte = 1;
    1228:	40 93 6a 01 	sts	0x016A, r20
            rx_busy = 0;
    122c:	10 92 4d 01 	sts	0x014D, r1
            adc_trigger_high_gain();
    1230:	10 92 7c 00 	sts	0x007C, r1
    1234:	83 ea       	ldi	r24, 0xA3	; 163
    1236:	80 93 7a 00 	sts	0x007A, r24
    123a:	40 93 7b 00 	sts	0x007B, r20
    123e:	80 cf       	rjmp	.-256    	; 0x1140 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1240:	80 91 7a 00 	lds	r24, 0x007A
    1244:	86 fd       	sbrc	r24, 6
    1246:	fc cf       	rjmp	.-8      	; 0x1240 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1248:	80 91 78 00 	lds	r24, 0x0078
    124c:	90 91 79 00 	lds	r25, 0x0079
    1250:	90 93 46 01 	sts	0x0146, r25
    1254:	80 93 45 01 	sts	0x0145, r24
                    adc_trigger_high_gain();
    1258:	10 92 7c 00 	sts	0x007C, r1
    125c:	83 ea       	ldi	r24, 0xA3	; 163
    125e:	80 93 7a 00 	sts	0x007A, r24
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1268:	90 91 7e 01 	lds	r25, 0x017E
    126c:	99 23       	and	r25, r25
    126e:	d1 f0       	breq	.+52     	; 0x12a4 <__vector_23+0x1e4>
                        rx_timer_off();
    1270:	10 92 81 00 	sts	0x0081, r1
    1274:	10 92 85 00 	sts	0x0085, r1
    1278:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    127c:	80 93 6a 01 	sts	0x016A, r24
                        rx_busy = 0;
    1280:	10 92 4d 01 	sts	0x014D, r1
    1284:	5d cf       	rjmp	.-326    	; 0x1140 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <__vector_23+0x1d2>
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <__vector_23+0x1ce>
    1296:	cf 01       	movw	r24, r30
    1298:	90 91 7e 01 	lds	r25, 0x017E
    129c:	89 2b       	or	r24, r25
    129e:	80 93 7e 01 	sts	0x017E, r24
    12a2:	4e cf       	rjmp	.-356    	; 0x1140 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    12a4:	10 92 6a 01 	sts	0x016A, r1
                        rx_byteindex = 0;
    12a8:	10 92 44 01 	sts	0x0144, r1
    12ac:	49 cf       	rjmp	.-366    	; 0x1140 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    12ae:	e0 91 05 01 	lds	r30, 0x0105
    12b2:	f0 91 06 01 	lds	r31, 0x0106
    12b6:	65 e4       	ldi	r22, 0x45	; 69
    12b8:	71 e0       	ldi	r23, 0x01	; 1
    12ba:	80 e7       	ldi	r24, 0x70	; 112
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	09 95       	icall
    12c0:	3f cf       	rjmp	.-386    	; 0x1140 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12c2:	80 91 70 01 	lds	r24, 0x0170
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	09 f4       	brne	.+2      	; 0x12cc <__vector_23+0x20c>
    12ca:	dd c0       	rjmp	.+442    	; 0x1486 <__vector_23+0x3c6>
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <__vector_23+0x210>
    12ce:	ba c0       	rjmp	.+372    	; 0x1444 <__vector_23+0x384>
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <__vector_23+0x216>
    12d4:	c6 c0       	rjmp	.+396    	; 0x1462 <__vector_23+0x3a2>
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	09 f0       	breq	.+2      	; 0x12dc <__vector_23+0x21c>
    12da:	b1 c0       	rjmp	.+354    	; 0x143e <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12dc:	80 91 17 01 	lds	r24, 0x0117
    12e0:	90 91 76 01 	lds	r25, 0x0176
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	09 f4       	brne	.+2      	; 0x12ea <__vector_23+0x22a>
    12e8:	e3 c0       	rjmp	.+454    	; 0x14b0 <__vector_23+0x3f0>
    12ea:	80 91 75 01 	lds	r24, 0x0175
                        prev_motion = MOVE_STOP;
    12ee:	10 92 18 01 	sts	0x0118, r1
                        cur_motion = MOVE_STRAIGHT;
    12f2:	23 e0       	ldi	r18, 0x03	; 3
    12f4:	20 93 17 01 	sts	0x0117, r18
                        kilo_straight_left = calibmsg->straight_left;
    12f8:	80 93 81 01 	sts	0x0181, r24
                        kilo_straight_right = calibmsg->straight_right;
    12fc:	90 93 82 01 	sts	0x0182, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1300:	80 91 19 01 	lds	r24, 0x0119
    1304:	86 30       	cpi	r24, 0x06	; 6
    1306:	09 f4       	brne	.+2      	; 0x130a <__vector_23+0x24a>
    1308:	1b cf       	rjmp	.-458    	; 0x1140 <__vector_23+0x80>
                motors_on();
    130a:	53 9a       	sbi	0x0a, 3	; 10
    130c:	23 9a       	sbi	0x04, 3	; 4
    130e:	10 92 b4 00 	sts	0x00B4, r1
    1312:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1316:	86 e0       	ldi	r24, 0x06	; 6
    1318:	80 93 19 01 	sts	0x0119, r24
    131c:	11 cf       	rjmp	.-478    	; 0x1140 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    131e:	80 91 19 01 	lds	r24, 0x0119
    1322:	86 30       	cpi	r24, 0x06	; 6
    1324:	99 f0       	breq	.+38     	; 0x134c <__vector_23+0x28c>
                motors_on();
    1326:	53 9a       	sbi	0x0a, 3	; 10
    1328:	23 9a       	sbi	0x04, 3	; 4
    132a:	10 92 b4 00 	sts	0x00B4, r1
    132e:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1332:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1334:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1336:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1338:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    133a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    133c:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    133e:	10 92 17 01 	sts	0x0117, r1
    1342:	10 92 18 01 	sts	0x0118, r1
                kilo_state = MOVING;
    1346:	86 e0       	ldi	r24, 0x06	; 6
    1348:	80 93 19 01 	sts	0x0119, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9c 01       	movw	r18, r24
    1352:	00 90 70 01 	lds	r0, 0x0170
    1356:	02 c0       	rjmp	.+4      	; 0x135c <__vector_23+0x29c>
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <__vector_23+0x298>
    1360:	80 91 7f 01 	lds	r24, 0x017F
    1364:	90 91 80 01 	lds	r25, 0x0180
    1368:	82 23       	and	r24, r18
    136a:	93 23       	and	r25, r19
    136c:	89 2b       	or	r24, r25
    136e:	09 f0       	breq	.+2      	; 0x1372 <__vector_23+0x2b2>
    1370:	86 c0       	rjmp	.+268    	; 0x147e <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1372:	10 92 17 01 	sts	0x0117, r1
    1376:	e4 ce       	rjmp	.-568    	; 0x1140 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 19 01 	sts	0x0119, r24
    137e:	e0 ce       	rjmp	.-576    	; 0x1140 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1380:	e0 e0       	ldi	r30, 0x00	; 0
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1386:	80 91 6e 00 	lds	r24, 0x006E
    138a:	8d 7f       	andi	r24, 0xFD	; 253
    138c:	80 93 6e 00 	sts	0x006E, r24
    1390:	16 bc       	out	0x26, r1	; 38
            bootload();
    1392:	e0 e0       	ldi	r30, 0x00	; 0
    1394:	f0 e7       	ldi	r31, 0x70	; 112
    1396:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1398:	10 92 19 01 	sts	0x0119, r1
    139c:	d1 ce       	rjmp	.-606    	; 0x1140 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	80 93 19 01 	sts	0x0119, r24
    13a4:	cd ce       	rjmp	.-614    	; 0x1140 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    13a6:	85 e0       	ldi	r24, 0x05	; 5
    13a8:	80 93 19 01 	sts	0x0119, r24
    13ac:	c9 ce       	rjmp	.-622    	; 0x1140 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    13ae:	80 91 19 01 	lds	r24, 0x0119
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <__vector_23+0x2f8>
    13b6:	c4 ce       	rjmp	.-632    	; 0x1140 <__vector_23+0x80>
    13b8:	80 91 19 01 	lds	r24, 0x0119
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	09 f4       	brne	.+2      	; 0x13c2 <__vector_23+0x302>
    13c0:	bf ce       	rjmp	.-642    	; 0x1140 <__vector_23+0x80>
                motors_on();
    13c2:	53 9a       	sbi	0x0a, 3	; 10
    13c4:	23 9a       	sbi	0x04, 3	; 4
    13c6:	10 92 b4 00 	sts	0x00B4, r1
    13ca:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	80 93 19 01 	sts	0x0119, r24
    13d4:	b5 ce       	rjmp	.-662    	; 0x1140 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    13d6:	80 91 19 01 	lds	r24, 0x0119
    13da:	86 30       	cpi	r24, 0x06	; 6
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <__vector_23+0x320>
    13de:	b0 ce       	rjmp	.-672    	; 0x1140 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    13e0:	60 91 7f 01 	lds	r22, 0x017F
    13e4:	80 eb       	ldi	r24, 0xB0	; 176
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    13ec:	60 91 80 01 	lds	r22, 0x0180
    13f0:	81 eb       	ldi	r24, 0xB1	; 177
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    13f8:	60 91 83 01 	lds	r22, 0x0183
    13fc:	85 e0       	ldi	r24, 0x05	; 5
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1404:	60 91 6f 01 	lds	r22, 0x016F
    1408:	89 e0       	ldi	r24, 0x09	; 9
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1410:	60 91 81 01 	lds	r22, 0x0181
    1414:	8c e0       	ldi	r24, 0x0C	; 12
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    141c:	60 91 82 01 	lds	r22, 0x0182
    1420:	84 e1       	ldi	r24, 0x14	; 20
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <eeprom_write_byte>
                        motors_off();
    1428:	53 98       	cbi	0x0a, 3	; 10
    142a:	23 98       	cbi	0x04, 3	; 4
    142c:	10 92 b4 00 	sts	0x00B4, r1
    1430:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 19 01 	sts	0x0119, r24
    143a:	80 91 70 01 	lds	r24, 0x0170
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    143e:	81 11       	cpse	r24, r1
    1440:	5f cf       	rjmp	.-322    	; 0x1300 <__vector_23+0x240>
    1442:	7e ce       	rjmp	.-772    	; 0x1140 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1444:	88 23       	and	r24, r24
    1446:	39 f2       	breq	.-114    	; 0x13d6 <__vector_23+0x316>
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	c9 f7       	brne	.-14     	; 0x143e <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    144c:	80 91 71 01 	lds	r24, 0x0171
    1450:	90 91 72 01 	lds	r25, 0x0172
    1454:	90 93 80 01 	sts	0x0180, r25
    1458:	80 93 7f 01 	sts	0x017F, r24
                    cur_motion = MOVE_STOP;
    145c:	10 92 17 01 	sts	0x0117, r1
    1460:	4f cf       	rjmp	.-354    	; 0x1300 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1462:	80 91 17 01 	lds	r24, 0x0117
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	71 f1       	breq	.+92     	; 0x14c6 <__vector_23+0x406>
    146a:	80 91 74 01 	lds	r24, 0x0174
                        prev_motion = MOVE_STOP;
    146e:	10 92 18 01 	sts	0x0118, r1
                        cur_motion = MOVE_RIGHT;
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	90 93 17 01 	sts	0x0117, r25
                        kilo_turn_right = calibmsg->turn_right;
    1478:	80 93 6f 01 	sts	0x016F, r24
    147c:	41 cf       	rjmp	.-382    	; 0x1300 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 17 01 	sts	0x0117, r24
    1484:	5d ce       	rjmp	.-838    	; 0x1140 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1486:	80 91 17 01 	lds	r24, 0x0117
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	51 f0       	breq	.+20     	; 0x14a2 <__vector_23+0x3e2>
    148e:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    1492:	10 92 18 01 	sts	0x0118, r1
                        cur_motion = MOVE_LEFT;
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	90 93 17 01 	sts	0x0117, r25
                        kilo_turn_left = calibmsg->turn_left;
    149c:	80 93 83 01 	sts	0x0183, r24
    14a0:	2f cf       	rjmp	.-418    	; 0x1300 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14a2:	80 91 73 01 	lds	r24, 0x0173
    14a6:	90 91 83 01 	lds	r25, 0x0183
    14aa:	89 13       	cpse	r24, r25
    14ac:	f2 cf       	rjmp	.-28     	; 0x1492 <__vector_23+0x3d2>
    14ae:	28 cf       	rjmp	.-432    	; 0x1300 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    14b0:	80 91 82 01 	lds	r24, 0x0182
    14b4:	98 13       	cpse	r25, r24
    14b6:	19 cf       	rjmp	.-462    	; 0x12ea <__vector_23+0x22a>
    14b8:	80 91 75 01 	lds	r24, 0x0175
    14bc:	20 91 81 01 	lds	r18, 0x0181
    14c0:	82 13       	cpse	r24, r18
    14c2:	15 cf       	rjmp	.-470    	; 0x12ee <__vector_23+0x22e>
    14c4:	1d cf       	rjmp	.-454    	; 0x1300 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14c6:	80 91 74 01 	lds	r24, 0x0174
    14ca:	90 91 6f 01 	lds	r25, 0x016F
    14ce:	89 13       	cpse	r24, r25
    14d0:	ce cf       	rjmp	.-100    	; 0x146e <__vector_23+0x3ae>
    14d2:	16 cf       	rjmp	.-468    	; 0x1300 <__vector_23+0x240>

000014d4 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    14d4:	fc 01       	movw	r30, r24
    14d6:	ac 01       	movw	r20, r24
    14d8:	46 5f       	subi	r20, 0xF6	; 246
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    14e0:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    14e2:	82 27       	eor	r24, r18
    14e4:	08 2e       	mov	r0, r24
    14e6:	82 95       	swap	r24
    14e8:	80 7f       	andi	r24, 0xF0	; 240
    14ea:	80 25       	eor	r24, r0
    14ec:	09 2e       	mov	r0, r25
    14ee:	98 2f       	mov	r25, r24
    14f0:	82 95       	swap	r24
    14f2:	8f 70       	andi	r24, 0x0F	; 15
    14f4:	08 26       	eor	r0, r24
    14f6:	86 95       	lsr	r24
    14f8:	98 27       	eor	r25, r24
    14fa:	89 27       	eor	r24, r25
    14fc:	88 0f       	add	r24, r24
    14fe:	88 0f       	add	r24, r24
    1500:	88 0f       	add	r24, r24
    1502:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1504:	e4 17       	cp	r30, r20
    1506:	f5 07       	cpc	r31, r21
    1508:	59 f7       	brne	.-42     	; 0x14e0 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    150a:	08 95       	ret

0000150c <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    150c:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    150e:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1510:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1512:	20 91 43 01 	lds	r18, 0x0143
    or tmpreg1, ddrreg
    1516:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1518:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    151a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    151c:	30 91 43 01 	lds	r19, 0x0143
    1520:	20 30       	cpi	r18, 0x00	; 0
    1522:	29 f0       	breq	.+10     	; 0x152e <message_send+0x22>
    1524:	00 00       	nop
    1526:	25 b1       	in	r18, 0x05	; 5
    1528:	23 2b       	or	r18, r19
    152a:	25 b9       	out	0x05, r18	; 5
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <message_send+0x2a>
    152e:	00 00       	nop
    1530:	00 00       	nop
    1532:	00 00       	nop
    1534:	00 c0       	rjmp	.+0      	; 0x1536 <message_send+0x2a>
    1536:	00 00       	nop
    1538:	00 00       	nop
    153a:	00 00       	nop
    153c:	30 95       	com	r19
    153e:	25 b1       	in	r18, 0x05	; 5
    1540:	23 23       	and	r18, r19
    1542:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1544:	2e ea       	ldi	r18, 0xAE	; 174
    1546:	2a 95       	dec	r18
    1548:	f1 f7       	brne	.-4      	; 0x1546 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    154a:	2b ee       	ldi	r18, 0xEB	; 235

0000154c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    154c:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    154e:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1550:	0a c0       	rjmp	.+20     	; 0x1566 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1552:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1554:	30 91 43 01 	lds	r19, 0x0143
    com tmpreg2
    1558:	30 95       	com	r19
    in tmpreg1, IR_PORT
    155a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    155c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    155e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1560:	0f be       	out	0x3f, r0	; 63
    return 0
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	08 95       	ret

00001566 <nocollision>:
nocollision:
    nop
    1566:	00 00       	nop
    dec tmpreg1
    1568:	2a 95       	dec	r18
    brne checkcollision
    156a:	81 f7       	brne	.-32     	; 0x154c <checkcollision>

    ldi tmpreg1, 0x01
    156c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    156e:	30 91 43 01 	lds	r19, 0x0143
    1572:	20 30       	cpi	r18, 0x00	; 0
    1574:	29 f0       	breq	.+10     	; 0x1580 <nocollision+0x1a>
    1576:	00 00       	nop
    1578:	25 b1       	in	r18, 0x05	; 5
    157a:	23 2b       	or	r18, r19
    157c:	25 b9       	out	0x05, r18	; 5
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <nocollision+0x22>
    1580:	00 00       	nop
    1582:	00 00       	nop
    1584:	00 00       	nop
    1586:	00 c0       	rjmp	.+0      	; 0x1588 <nocollision+0x22>
    1588:	00 00       	nop
    158a:	00 00       	nop
    158c:	00 00       	nop
    158e:	30 95       	com	r19
    1590:	25 b1       	in	r18, 0x05	; 5
    1592:	23 23       	and	r18, r19
    1594:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1596:	00 00       	nop
    1598:	24 e5       	ldi	r18, 0x54	; 84
    159a:	2a 95       	dec	r18
    159c:	f1 f7       	brne	.-4      	; 0x159a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    159e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    15a0:	8c e0       	ldi	r24, 0x0C	; 12

000015a2 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    15a2:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    15a6:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    15a8:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    15aa:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    15ac:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    15ae:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    15b2:	50 e0       	ldi	r21, 0x00	; 0

000015b4 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    15b4:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    15b6:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    15b8:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    15ba:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    15bc:	30 91 43 01 	lds	r19, 0x0143
    15c0:	20 30       	cpi	r18, 0x00	; 0
    15c2:	29 f0       	breq	.+10     	; 0x15ce <sendbit+0x1a>
    15c4:	00 00       	nop
    15c6:	25 b1       	in	r18, 0x05	; 5
    15c8:	23 2b       	or	r18, r19
    15ca:	25 b9       	out	0x05, r18	; 5
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <sendbit+0x22>
    15ce:	00 00       	nop
    15d0:	00 00       	nop
    15d2:	00 00       	nop
    15d4:	00 c0       	rjmp	.+0      	; 0x15d6 <sendbit+0x22>
    15d6:	00 00       	nop
    15d8:	00 00       	nop
    15da:	00 00       	nop
    15dc:	30 95       	com	r19
    15de:	25 b1       	in	r18, 0x05	; 5
    15e0:	23 23       	and	r18, r19
    15e2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    15e4:	00 00       	nop
    15e6:	21 e5       	ldi	r18, 0x51	; 81
    15e8:	2a 95       	dec	r18
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    15ec:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    15ee:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    15f0:	9a 95       	dec	r25
    brne sendbit
    15f2:	01 f7       	brne	.-64     	; 0x15b4 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    15f4:	8a 95       	dec	r24
    brne sendbyte
    15f6:	a9 f6       	brne	.-86     	; 0x15a2 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    15f8:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    15fa:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    15fc:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15fe:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1600:	30 91 43 01 	lds	r19, 0x0143
    com tmpreg2
    1604:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1606:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1608:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    160a:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    160c:	0f be       	out	0x3f, r0	; 63
    return 1
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	08 95       	ret

00001612 <main>:
    reset_time_adjustment = reset_time_adjustment + rx_reset_time_adjustment;
}

int main()
{
    kilo_init();
    1612:	0e 94 9a 01 	call	0x334	; 0x334 <kilo_init>
    kilo_message_rx = message_rx;
    1616:	84 e7       	ldi	r24, 0x74	; 116
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	90 93 06 01 	sts	0x0106, r25
    161e:	80 93 05 01 	sts	0x0105, r24
    kilo_message_tx = message_tx;
    1622:	81 e7       	ldi	r24, 0x71	; 113
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	90 93 04 01 	sts	0x0104, r25
    162a:	80 93 03 01 	sts	0x0103, r24
    kilo_start(setup, loop);
    162e:	6b ec       	ldi	r22, 0xCB	; 203
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	80 eb       	ldi	r24, 0xB0	; 176
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 96 02 	call	0x52c	; 0x52c <kilo_start>
    
    return 0;
}
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	08 95       	ret

00001640 <__divmodhi4>:
    1640:	97 fb       	bst	r25, 7
    1642:	07 2e       	mov	r0, r23
    1644:	16 f4       	brtc	.+4      	; 0x164a <__divmodhi4+0xa>
    1646:	00 94       	com	r0
    1648:	07 d0       	rcall	.+14     	; 0x1658 <__divmodhi4_neg1>
    164a:	77 fd       	sbrc	r23, 7
    164c:	09 d0       	rcall	.+18     	; 0x1660 <__divmodhi4_neg2>
    164e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__udivmodhi4>
    1652:	07 fc       	sbrc	r0, 7
    1654:	05 d0       	rcall	.+10     	; 0x1660 <__divmodhi4_neg2>
    1656:	3e f4       	brtc	.+14     	; 0x1666 <__divmodhi4_exit>

00001658 <__divmodhi4_neg1>:
    1658:	90 95       	com	r25
    165a:	81 95       	neg	r24
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	08 95       	ret

00001660 <__divmodhi4_neg2>:
    1660:	70 95       	com	r23
    1662:	61 95       	neg	r22
    1664:	7f 4f       	sbci	r23, 0xFF	; 255

00001666 <__divmodhi4_exit>:
    1666:	08 95       	ret

00001668 <__tablejump2__>:
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	05 90       	lpm	r0, Z+
    166e:	f4 91       	lpm	r31, Z
    1670:	e0 2d       	mov	r30, r0
    1672:	09 94       	ijmp

00001674 <__umulhisi3>:
    1674:	a2 9f       	mul	r26, r18
    1676:	b0 01       	movw	r22, r0
    1678:	b3 9f       	mul	r27, r19
    167a:	c0 01       	movw	r24, r0
    167c:	a3 9f       	mul	r26, r19
    167e:	70 0d       	add	r23, r0
    1680:	81 1d       	adc	r24, r1
    1682:	11 24       	eor	r1, r1
    1684:	91 1d       	adc	r25, r1
    1686:	b2 9f       	mul	r27, r18
    1688:	70 0d       	add	r23, r0
    168a:	81 1d       	adc	r24, r1
    168c:	11 24       	eor	r1, r1
    168e:	91 1d       	adc	r25, r1
    1690:	08 95       	ret

00001692 <__udivmodhi4>:
    1692:	aa 1b       	sub	r26, r26
    1694:	bb 1b       	sub	r27, r27
    1696:	51 e1       	ldi	r21, 0x11	; 17
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <__udivmodhi4_ep>

0000169a <__udivmodhi4_loop>:
    169a:	aa 1f       	adc	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	a6 17       	cp	r26, r22
    16a0:	b7 07       	cpc	r27, r23
    16a2:	10 f0       	brcs	.+4      	; 0x16a8 <__udivmodhi4_ep>
    16a4:	a6 1b       	sub	r26, r22
    16a6:	b7 0b       	sbc	r27, r23

000016a8 <__udivmodhi4_ep>:
    16a8:	88 1f       	adc	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	5a 95       	dec	r21
    16ae:	a9 f7       	brne	.-22     	; 0x169a <__udivmodhi4_loop>
    16b0:	80 95       	com	r24
    16b2:	90 95       	com	r25
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	08 95       	ret

000016ba <__subsf3>:
    16ba:	50 58       	subi	r21, 0x80	; 128

000016bc <__addsf3>:
    16bc:	bb 27       	eor	r27, r27
    16be:	aa 27       	eor	r26, r26
    16c0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__addsf3x>
    16c4:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_round>
    16c8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fp_pscA>
    16cc:	38 f0       	brcs	.+14     	; 0x16dc <__addsf3+0x20>
    16ce:	0e 94 bf 0c 	call	0x197e	; 0x197e <__fp_pscB>
    16d2:	20 f0       	brcs	.+8      	; 0x16dc <__addsf3+0x20>
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <__addsf3+0x28>
    16d6:	9f 3f       	cpi	r25, 0xFF	; 255
    16d8:	19 f4       	brne	.+6      	; 0x16e0 <__addsf3+0x24>
    16da:	26 f4       	brtc	.+8      	; 0x16e4 <__addsf3+0x28>
    16dc:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_nan>
    16e0:	0e f4       	brtc	.+2      	; 0x16e4 <__addsf3+0x28>
    16e2:	e0 95       	com	r30
    16e4:	e7 fb       	bst	r30, 7
    16e6:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_inf>

000016ea <__addsf3x>:
    16ea:	e9 2f       	mov	r30, r25
    16ec:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_split3>
    16f0:	58 f3       	brcs	.-42     	; 0x16c8 <__addsf3+0xc>
    16f2:	ba 17       	cp	r27, r26
    16f4:	62 07       	cpc	r22, r18
    16f6:	73 07       	cpc	r23, r19
    16f8:	84 07       	cpc	r24, r20
    16fa:	95 07       	cpc	r25, r21
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__addsf3x+0x1c>
    16fe:	79 f4       	brne	.+30     	; 0x171e <__addsf3x+0x34>
    1700:	a6 f5       	brtc	.+104    	; 0x176a <__addsf3x+0x80>
    1702:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_zero>
    1706:	0e f4       	brtc	.+2      	; 0x170a <__addsf3x+0x20>
    1708:	e0 95       	com	r30
    170a:	0b 2e       	mov	r0, r27
    170c:	ba 2f       	mov	r27, r26
    170e:	a0 2d       	mov	r26, r0
    1710:	0b 01       	movw	r0, r22
    1712:	b9 01       	movw	r22, r18
    1714:	90 01       	movw	r18, r0
    1716:	0c 01       	movw	r0, r24
    1718:	ca 01       	movw	r24, r20
    171a:	a0 01       	movw	r20, r0
    171c:	11 24       	eor	r1, r1
    171e:	ff 27       	eor	r31, r31
    1720:	59 1b       	sub	r21, r25
    1722:	99 f0       	breq	.+38     	; 0x174a <__addsf3x+0x60>
    1724:	59 3f       	cpi	r21, 0xF9	; 249
    1726:	50 f4       	brcc	.+20     	; 0x173c <__addsf3x+0x52>
    1728:	50 3e       	cpi	r21, 0xE0	; 224
    172a:	68 f1       	brcs	.+90     	; 0x1786 <__addsf3x+0x9c>
    172c:	1a 16       	cp	r1, r26
    172e:	f0 40       	sbci	r31, 0x00	; 0
    1730:	a2 2f       	mov	r26, r18
    1732:	23 2f       	mov	r18, r19
    1734:	34 2f       	mov	r19, r20
    1736:	44 27       	eor	r20, r20
    1738:	58 5f       	subi	r21, 0xF8	; 248
    173a:	f3 cf       	rjmp	.-26     	; 0x1722 <__addsf3x+0x38>
    173c:	46 95       	lsr	r20
    173e:	37 95       	ror	r19
    1740:	27 95       	ror	r18
    1742:	a7 95       	ror	r26
    1744:	f0 40       	sbci	r31, 0x00	; 0
    1746:	53 95       	inc	r21
    1748:	c9 f7       	brne	.-14     	; 0x173c <__addsf3x+0x52>
    174a:	7e f4       	brtc	.+30     	; 0x176a <__addsf3x+0x80>
    174c:	1f 16       	cp	r1, r31
    174e:	ba 0b       	sbc	r27, r26
    1750:	62 0b       	sbc	r22, r18
    1752:	73 0b       	sbc	r23, r19
    1754:	84 0b       	sbc	r24, r20
    1756:	ba f0       	brmi	.+46     	; 0x1786 <__addsf3x+0x9c>
    1758:	91 50       	subi	r25, 0x01	; 1
    175a:	a1 f0       	breq	.+40     	; 0x1784 <__addsf3x+0x9a>
    175c:	ff 0f       	add	r31, r31
    175e:	bb 1f       	adc	r27, r27
    1760:	66 1f       	adc	r22, r22
    1762:	77 1f       	adc	r23, r23
    1764:	88 1f       	adc	r24, r24
    1766:	c2 f7       	brpl	.-16     	; 0x1758 <__addsf3x+0x6e>
    1768:	0e c0       	rjmp	.+28     	; 0x1786 <__addsf3x+0x9c>
    176a:	ba 0f       	add	r27, r26
    176c:	62 1f       	adc	r22, r18
    176e:	73 1f       	adc	r23, r19
    1770:	84 1f       	adc	r24, r20
    1772:	48 f4       	brcc	.+18     	; 0x1786 <__addsf3x+0x9c>
    1774:	87 95       	ror	r24
    1776:	77 95       	ror	r23
    1778:	67 95       	ror	r22
    177a:	b7 95       	ror	r27
    177c:	f7 95       	ror	r31
    177e:	9e 3f       	cpi	r25, 0xFE	; 254
    1780:	08 f0       	brcs	.+2      	; 0x1784 <__addsf3x+0x9a>
    1782:	b0 cf       	rjmp	.-160    	; 0x16e4 <__addsf3+0x28>
    1784:	93 95       	inc	r25
    1786:	88 0f       	add	r24, r24
    1788:	08 f0       	brcs	.+2      	; 0x178c <__addsf3x+0xa2>
    178a:	99 27       	eor	r25, r25
    178c:	ee 0f       	add	r30, r30
    178e:	97 95       	ror	r25
    1790:	87 95       	ror	r24
    1792:	08 95       	ret

00001794 <__divsf3>:
    1794:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3x>
    1798:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_round>
    179c:	0e 94 bf 0c 	call	0x197e	; 0x197e <__fp_pscB>
    17a0:	58 f0       	brcs	.+22     	; 0x17b8 <__divsf3+0x24>
    17a2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fp_pscA>
    17a6:	40 f0       	brcs	.+16     	; 0x17b8 <__divsf3+0x24>
    17a8:	29 f4       	brne	.+10     	; 0x17b4 <__divsf3+0x20>
    17aa:	5f 3f       	cpi	r21, 0xFF	; 255
    17ac:	29 f0       	breq	.+10     	; 0x17b8 <__divsf3+0x24>
    17ae:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_inf>
    17b2:	51 11       	cpse	r21, r1
    17b4:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_szero>
    17b8:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_nan>

000017bc <__divsf3x>:
    17bc:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_split3>
    17c0:	68 f3       	brcs	.-38     	; 0x179c <__divsf3+0x8>

000017c2 <__divsf3_pse>:
    17c2:	99 23       	and	r25, r25
    17c4:	b1 f3       	breq	.-20     	; 0x17b2 <__divsf3+0x1e>
    17c6:	55 23       	and	r21, r21
    17c8:	91 f3       	breq	.-28     	; 0x17ae <__divsf3+0x1a>
    17ca:	95 1b       	sub	r25, r21
    17cc:	55 0b       	sbc	r21, r21
    17ce:	bb 27       	eor	r27, r27
    17d0:	aa 27       	eor	r26, r26
    17d2:	62 17       	cp	r22, r18
    17d4:	73 07       	cpc	r23, r19
    17d6:	84 07       	cpc	r24, r20
    17d8:	38 f0       	brcs	.+14     	; 0x17e8 <__divsf3_pse+0x26>
    17da:	9f 5f       	subi	r25, 0xFF	; 255
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	44 1f       	adc	r20, r20
    17e4:	aa 1f       	adc	r26, r26
    17e6:	a9 f3       	breq	.-22     	; 0x17d2 <__divsf3_pse+0x10>
    17e8:	35 d0       	rcall	.+106    	; 0x1854 <__divsf3_pse+0x92>
    17ea:	0e 2e       	mov	r0, r30
    17ec:	3a f0       	brmi	.+14     	; 0x17fc <__divsf3_pse+0x3a>
    17ee:	e0 e8       	ldi	r30, 0x80	; 128
    17f0:	32 d0       	rcall	.+100    	; 0x1856 <__divsf3_pse+0x94>
    17f2:	91 50       	subi	r25, 0x01	; 1
    17f4:	50 40       	sbci	r21, 0x00	; 0
    17f6:	e6 95       	lsr	r30
    17f8:	00 1c       	adc	r0, r0
    17fa:	ca f7       	brpl	.-14     	; 0x17ee <__divsf3_pse+0x2c>
    17fc:	2b d0       	rcall	.+86     	; 0x1854 <__divsf3_pse+0x92>
    17fe:	fe 2f       	mov	r31, r30
    1800:	29 d0       	rcall	.+82     	; 0x1854 <__divsf3_pse+0x92>
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	bb 1f       	adc	r27, r27
    180a:	26 17       	cp	r18, r22
    180c:	37 07       	cpc	r19, r23
    180e:	48 07       	cpc	r20, r24
    1810:	ab 07       	cpc	r26, r27
    1812:	b0 e8       	ldi	r27, 0x80	; 128
    1814:	09 f0       	breq	.+2      	; 0x1818 <__divsf3_pse+0x56>
    1816:	bb 0b       	sbc	r27, r27
    1818:	80 2d       	mov	r24, r0
    181a:	bf 01       	movw	r22, r30
    181c:	ff 27       	eor	r31, r31
    181e:	93 58       	subi	r25, 0x83	; 131
    1820:	5f 4f       	sbci	r21, 0xFF	; 255
    1822:	3a f0       	brmi	.+14     	; 0x1832 <__divsf3_pse+0x70>
    1824:	9e 3f       	cpi	r25, 0xFE	; 254
    1826:	51 05       	cpc	r21, r1
    1828:	78 f0       	brcs	.+30     	; 0x1848 <__divsf3_pse+0x86>
    182a:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_inf>
    182e:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_szero>
    1832:	5f 3f       	cpi	r21, 0xFF	; 255
    1834:	e4 f3       	brlt	.-8      	; 0x182e <__divsf3_pse+0x6c>
    1836:	98 3e       	cpi	r25, 0xE8	; 232
    1838:	d4 f3       	brlt	.-12     	; 0x182e <__divsf3_pse+0x6c>
    183a:	86 95       	lsr	r24
    183c:	77 95       	ror	r23
    183e:	67 95       	ror	r22
    1840:	b7 95       	ror	r27
    1842:	f7 95       	ror	r31
    1844:	9f 5f       	subi	r25, 0xFF	; 255
    1846:	c9 f7       	brne	.-14     	; 0x183a <__divsf3_pse+0x78>
    1848:	88 0f       	add	r24, r24
    184a:	91 1d       	adc	r25, r1
    184c:	96 95       	lsr	r25
    184e:	87 95       	ror	r24
    1850:	97 f9       	bld	r25, 7
    1852:	08 95       	ret
    1854:	e1 e0       	ldi	r30, 0x01	; 1
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	bb 1f       	adc	r27, r27
    185e:	62 17       	cp	r22, r18
    1860:	73 07       	cpc	r23, r19
    1862:	84 07       	cpc	r24, r20
    1864:	ba 07       	cpc	r27, r26
    1866:	20 f0       	brcs	.+8      	; 0x1870 <__divsf3_pse+0xae>
    1868:	62 1b       	sub	r22, r18
    186a:	73 0b       	sbc	r23, r19
    186c:	84 0b       	sbc	r24, r20
    186e:	ba 0b       	sbc	r27, r26
    1870:	ee 1f       	adc	r30, r30
    1872:	88 f7       	brcc	.-30     	; 0x1856 <__divsf3_pse+0x94>
    1874:	e0 95       	com	r30
    1876:	08 95       	ret

00001878 <__fixsfsi>:
    1878:	0e 94 43 0c 	call	0x1886	; 0x1886 <__fixunssfsi>
    187c:	68 94       	set
    187e:	b1 11       	cpse	r27, r1
    1880:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_szero>
    1884:	08 95       	ret

00001886 <__fixunssfsi>:
    1886:	0e 94 df 0c 	call	0x19be	; 0x19be <__fp_splitA>
    188a:	88 f0       	brcs	.+34     	; 0x18ae <__fixunssfsi+0x28>
    188c:	9f 57       	subi	r25, 0x7F	; 127
    188e:	98 f0       	brcs	.+38     	; 0x18b6 <__fixunssfsi+0x30>
    1890:	b9 2f       	mov	r27, r25
    1892:	99 27       	eor	r25, r25
    1894:	b7 51       	subi	r27, 0x17	; 23
    1896:	b0 f0       	brcs	.+44     	; 0x18c4 <__fixunssfsi+0x3e>
    1898:	e1 f0       	breq	.+56     	; 0x18d2 <__fixunssfsi+0x4c>
    189a:	66 0f       	add	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	1a f0       	brmi	.+6      	; 0x18aa <__fixunssfsi+0x24>
    18a4:	ba 95       	dec	r27
    18a6:	c9 f7       	brne	.-14     	; 0x189a <__fixunssfsi+0x14>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <__fixunssfsi+0x4c>
    18aa:	b1 30       	cpi	r27, 0x01	; 1
    18ac:	91 f0       	breq	.+36     	; 0x18d2 <__fixunssfsi+0x4c>
    18ae:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fp_zero>
    18b2:	b1 e0       	ldi	r27, 0x01	; 1
    18b4:	08 95       	ret
    18b6:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_zero>
    18ba:	67 2f       	mov	r22, r23
    18bc:	78 2f       	mov	r23, r24
    18be:	88 27       	eor	r24, r24
    18c0:	b8 5f       	subi	r27, 0xF8	; 248
    18c2:	39 f0       	breq	.+14     	; 0x18d2 <__fixunssfsi+0x4c>
    18c4:	b9 3f       	cpi	r27, 0xF9	; 249
    18c6:	cc f3       	brlt	.-14     	; 0x18ba <__fixunssfsi+0x34>
    18c8:	86 95       	lsr	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	b3 95       	inc	r27
    18d0:	d9 f7       	brne	.-10     	; 0x18c8 <__fixunssfsi+0x42>
    18d2:	3e f4       	brtc	.+14     	; 0x18e2 <__fixunssfsi+0x5c>
    18d4:	90 95       	com	r25
    18d6:	80 95       	com	r24
    18d8:	70 95       	com	r23
    18da:	61 95       	neg	r22
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	08 95       	ret

000018e4 <__floatunsisf>:
    18e4:	e8 94       	clt
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <__floatsisf+0x12>

000018e8 <__floatsisf>:
    18e8:	97 fb       	bst	r25, 7
    18ea:	3e f4       	brtc	.+14     	; 0x18fa <__floatsisf+0x12>
    18ec:	90 95       	com	r25
    18ee:	80 95       	com	r24
    18f0:	70 95       	com	r23
    18f2:	61 95       	neg	r22
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	8f 4f       	sbci	r24, 0xFF	; 255
    18f8:	9f 4f       	sbci	r25, 0xFF	; 255
    18fa:	99 23       	and	r25, r25
    18fc:	a9 f0       	breq	.+42     	; 0x1928 <__floatsisf+0x40>
    18fe:	f9 2f       	mov	r31, r25
    1900:	96 e9       	ldi	r25, 0x96	; 150
    1902:	bb 27       	eor	r27, r27
    1904:	93 95       	inc	r25
    1906:	f6 95       	lsr	r31
    1908:	87 95       	ror	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b7 95       	ror	r27
    1910:	f1 11       	cpse	r31, r1
    1912:	f8 cf       	rjmp	.-16     	; 0x1904 <__floatsisf+0x1c>
    1914:	fa f4       	brpl	.+62     	; 0x1954 <__floatsisf+0x6c>
    1916:	bb 0f       	add	r27, r27
    1918:	11 f4       	brne	.+4      	; 0x191e <__floatsisf+0x36>
    191a:	60 ff       	sbrs	r22, 0
    191c:	1b c0       	rjmp	.+54     	; 0x1954 <__floatsisf+0x6c>
    191e:	6f 5f       	subi	r22, 0xFF	; 255
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	8f 4f       	sbci	r24, 0xFF	; 255
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	16 c0       	rjmp	.+44     	; 0x1954 <__floatsisf+0x6c>
    1928:	88 23       	and	r24, r24
    192a:	11 f0       	breq	.+4      	; 0x1930 <__floatsisf+0x48>
    192c:	96 e9       	ldi	r25, 0x96	; 150
    192e:	11 c0       	rjmp	.+34     	; 0x1952 <__floatsisf+0x6a>
    1930:	77 23       	and	r23, r23
    1932:	21 f0       	breq	.+8      	; 0x193c <__floatsisf+0x54>
    1934:	9e e8       	ldi	r25, 0x8E	; 142
    1936:	87 2f       	mov	r24, r23
    1938:	76 2f       	mov	r23, r22
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <__floatsisf+0x5e>
    193c:	66 23       	and	r22, r22
    193e:	71 f0       	breq	.+28     	; 0x195c <__floatsisf+0x74>
    1940:	96 e8       	ldi	r25, 0x86	; 134
    1942:	86 2f       	mov	r24, r22
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	2a f0       	brmi	.+10     	; 0x1954 <__floatsisf+0x6c>
    194a:	9a 95       	dec	r25
    194c:	66 0f       	add	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	da f7       	brpl	.-10     	; 0x194a <__floatsisf+0x62>
    1954:	88 0f       	add	r24, r24
    1956:	96 95       	lsr	r25
    1958:	87 95       	ror	r24
    195a:	97 f9       	bld	r25, 7
    195c:	08 95       	ret

0000195e <__fp_inf>:
    195e:	97 f9       	bld	r25, 7
    1960:	9f 67       	ori	r25, 0x7F	; 127
    1962:	80 e8       	ldi	r24, 0x80	; 128
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	08 95       	ret

0000196a <__fp_nan>:
    196a:	9f ef       	ldi	r25, 0xFF	; 255
    196c:	80 ec       	ldi	r24, 0xC0	; 192
    196e:	08 95       	ret

00001970 <__fp_pscA>:
    1970:	00 24       	eor	r0, r0
    1972:	0a 94       	dec	r0
    1974:	16 16       	cp	r1, r22
    1976:	17 06       	cpc	r1, r23
    1978:	18 06       	cpc	r1, r24
    197a:	09 06       	cpc	r0, r25
    197c:	08 95       	ret

0000197e <__fp_pscB>:
    197e:	00 24       	eor	r0, r0
    1980:	0a 94       	dec	r0
    1982:	12 16       	cp	r1, r18
    1984:	13 06       	cpc	r1, r19
    1986:	14 06       	cpc	r1, r20
    1988:	05 06       	cpc	r0, r21
    198a:	08 95       	ret

0000198c <__fp_round>:
    198c:	09 2e       	mov	r0, r25
    198e:	03 94       	inc	r0
    1990:	00 0c       	add	r0, r0
    1992:	11 f4       	brne	.+4      	; 0x1998 <__fp_round+0xc>
    1994:	88 23       	and	r24, r24
    1996:	52 f0       	brmi	.+20     	; 0x19ac <__fp_round+0x20>
    1998:	bb 0f       	add	r27, r27
    199a:	40 f4       	brcc	.+16     	; 0x19ac <__fp_round+0x20>
    199c:	bf 2b       	or	r27, r31
    199e:	11 f4       	brne	.+4      	; 0x19a4 <__fp_round+0x18>
    19a0:	60 ff       	sbrs	r22, 0
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <__fp_round+0x20>
    19a4:	6f 5f       	subi	r22, 0xFF	; 255
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	8f 4f       	sbci	r24, 0xFF	; 255
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	08 95       	ret

000019ae <__fp_split3>:
    19ae:	57 fd       	sbrc	r21, 7
    19b0:	90 58       	subi	r25, 0x80	; 128
    19b2:	44 0f       	add	r20, r20
    19b4:	55 1f       	adc	r21, r21
    19b6:	59 f0       	breq	.+22     	; 0x19ce <__fp_splitA+0x10>
    19b8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ba:	71 f0       	breq	.+28     	; 0x19d8 <__fp_splitA+0x1a>
    19bc:	47 95       	ror	r20

000019be <__fp_splitA>:
    19be:	88 0f       	add	r24, r24
    19c0:	97 fb       	bst	r25, 7
    19c2:	99 1f       	adc	r25, r25
    19c4:	61 f0       	breq	.+24     	; 0x19de <__fp_splitA+0x20>
    19c6:	9f 3f       	cpi	r25, 0xFF	; 255
    19c8:	79 f0       	breq	.+30     	; 0x19e8 <__fp_splitA+0x2a>
    19ca:	87 95       	ror	r24
    19cc:	08 95       	ret
    19ce:	12 16       	cp	r1, r18
    19d0:	13 06       	cpc	r1, r19
    19d2:	14 06       	cpc	r1, r20
    19d4:	55 1f       	adc	r21, r21
    19d6:	f2 cf       	rjmp	.-28     	; 0x19bc <__fp_split3+0xe>
    19d8:	46 95       	lsr	r20
    19da:	f1 df       	rcall	.-30     	; 0x19be <__fp_splitA>
    19dc:	08 c0       	rjmp	.+16     	; 0x19ee <__fp_splitA+0x30>
    19de:	16 16       	cp	r1, r22
    19e0:	17 06       	cpc	r1, r23
    19e2:	18 06       	cpc	r1, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	f1 cf       	rjmp	.-30     	; 0x19ca <__fp_splitA+0xc>
    19e8:	86 95       	lsr	r24
    19ea:	71 05       	cpc	r23, r1
    19ec:	61 05       	cpc	r22, r1
    19ee:	08 94       	sec
    19f0:	08 95       	ret

000019f2 <__fp_zero>:
    19f2:	e8 94       	clt

000019f4 <__fp_szero>:
    19f4:	bb 27       	eor	r27, r27
    19f6:	66 27       	eor	r22, r22
    19f8:	77 27       	eor	r23, r23
    19fa:	cb 01       	movw	r24, r22
    19fc:	97 f9       	bld	r25, 7
    19fe:	08 95       	ret

00001a00 <__mulsf3>:
    1a00:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsf3x>
    1a04:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_round>
    1a08:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fp_pscA>
    1a0c:	38 f0       	brcs	.+14     	; 0x1a1c <__mulsf3+0x1c>
    1a0e:	0e 94 bf 0c 	call	0x197e	; 0x197e <__fp_pscB>
    1a12:	20 f0       	brcs	.+8      	; 0x1a1c <__mulsf3+0x1c>
    1a14:	95 23       	and	r25, r21
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <__mulsf3+0x1c>
    1a18:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_inf>
    1a1c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_nan>
    1a20:	11 24       	eor	r1, r1
    1a22:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_szero>

00001a26 <__mulsf3x>:
    1a26:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_split3>
    1a2a:	70 f3       	brcs	.-36     	; 0x1a08 <__mulsf3+0x8>

00001a2c <__mulsf3_pse>:
    1a2c:	95 9f       	mul	r25, r21
    1a2e:	c1 f3       	breq	.-16     	; 0x1a20 <__mulsf3+0x20>
    1a30:	95 0f       	add	r25, r21
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	55 1f       	adc	r21, r21
    1a36:	62 9f       	mul	r22, r18
    1a38:	f0 01       	movw	r30, r0
    1a3a:	72 9f       	mul	r23, r18
    1a3c:	bb 27       	eor	r27, r27
    1a3e:	f0 0d       	add	r31, r0
    1a40:	b1 1d       	adc	r27, r1
    1a42:	63 9f       	mul	r22, r19
    1a44:	aa 27       	eor	r26, r26
    1a46:	f0 0d       	add	r31, r0
    1a48:	b1 1d       	adc	r27, r1
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	64 9f       	mul	r22, r20
    1a4e:	66 27       	eor	r22, r22
    1a50:	b0 0d       	add	r27, r0
    1a52:	a1 1d       	adc	r26, r1
    1a54:	66 1f       	adc	r22, r22
    1a56:	82 9f       	mul	r24, r18
    1a58:	22 27       	eor	r18, r18
    1a5a:	b0 0d       	add	r27, r0
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	62 1f       	adc	r22, r18
    1a60:	73 9f       	mul	r23, r19
    1a62:	b0 0d       	add	r27, r0
    1a64:	a1 1d       	adc	r26, r1
    1a66:	62 1f       	adc	r22, r18
    1a68:	83 9f       	mul	r24, r19
    1a6a:	a0 0d       	add	r26, r0
    1a6c:	61 1d       	adc	r22, r1
    1a6e:	22 1f       	adc	r18, r18
    1a70:	74 9f       	mul	r23, r20
    1a72:	33 27       	eor	r19, r19
    1a74:	a0 0d       	add	r26, r0
    1a76:	61 1d       	adc	r22, r1
    1a78:	23 1f       	adc	r18, r19
    1a7a:	84 9f       	mul	r24, r20
    1a7c:	60 0d       	add	r22, r0
    1a7e:	21 1d       	adc	r18, r1
    1a80:	82 2f       	mov	r24, r18
    1a82:	76 2f       	mov	r23, r22
    1a84:	6a 2f       	mov	r22, r26
    1a86:	11 24       	eor	r1, r1
    1a88:	9f 57       	subi	r25, 0x7F	; 127
    1a8a:	50 40       	sbci	r21, 0x00	; 0
    1a8c:	9a f0       	brmi	.+38     	; 0x1ab4 <__mulsf3_pse+0x88>
    1a8e:	f1 f0       	breq	.+60     	; 0x1acc <__mulsf3_pse+0xa0>
    1a90:	88 23       	and	r24, r24
    1a92:	4a f0       	brmi	.+18     	; 0x1aa6 <__mulsf3_pse+0x7a>
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	66 1f       	adc	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	50 40       	sbci	r21, 0x00	; 0
    1aa4:	a9 f7       	brne	.-22     	; 0x1a90 <__mulsf3_pse+0x64>
    1aa6:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	80 f0       	brcs	.+32     	; 0x1acc <__mulsf3_pse+0xa0>
    1aac:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_inf>
    1ab0:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_szero>
    1ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab6:	e4 f3       	brlt	.-8      	; 0x1ab0 <__mulsf3_pse+0x84>
    1ab8:	98 3e       	cpi	r25, 0xE8	; 232
    1aba:	d4 f3       	brlt	.-12     	; 0x1ab0 <__mulsf3_pse+0x84>
    1abc:	86 95       	lsr	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	b7 95       	ror	r27
    1ac4:	f7 95       	ror	r31
    1ac6:	e7 95       	ror	r30
    1ac8:	9f 5f       	subi	r25, 0xFF	; 255
    1aca:	c1 f7       	brne	.-16     	; 0x1abc <__mulsf3_pse+0x90>
    1acc:	fe 2b       	or	r31, r30
    1ace:	88 0f       	add	r24, r24
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	96 95       	lsr	r25
    1ad4:	87 95       	ror	r24
    1ad6:	97 f9       	bld	r25, 7
    1ad8:	08 95       	ret

00001ada <do_rand>:
    1ada:	8f 92       	push	r8
    1adc:	9f 92       	push	r9
    1ade:	af 92       	push	r10
    1ae0:	bf 92       	push	r11
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
    1af0:	68 81       	ld	r22, Y
    1af2:	79 81       	ldd	r23, Y+1	; 0x01
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	61 15       	cp	r22, r1
    1afa:	71 05       	cpc	r23, r1
    1afc:	81 05       	cpc	r24, r1
    1afe:	91 05       	cpc	r25, r1
    1b00:	21 f4       	brne	.+8      	; 0x1b0a <do_rand+0x30>
    1b02:	64 e2       	ldi	r22, 0x24	; 36
    1b04:	79 ed       	ldi	r23, 0xD9	; 217
    1b06:	8b e5       	ldi	r24, 0x5B	; 91
    1b08:	97 e0       	ldi	r25, 0x07	; 7
    1b0a:	2d e1       	ldi	r18, 0x1D	; 29
    1b0c:	33 ef       	ldi	r19, 0xF3	; 243
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__divmodsi4>
    1b16:	49 01       	movw	r8, r18
    1b18:	5a 01       	movw	r10, r20
    1b1a:	9b 01       	movw	r18, r22
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	a7 ea       	ldi	r26, 0xA7	; 167
    1b20:	b1 e4       	ldi	r27, 0x41	; 65
    1b22:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__muluhisi3>
    1b26:	6b 01       	movw	r12, r22
    1b28:	7c 01       	movw	r14, r24
    1b2a:	ac ee       	ldi	r26, 0xEC	; 236
    1b2c:	b4 ef       	ldi	r27, 0xF4	; 244
    1b2e:	a5 01       	movw	r20, r10
    1b30:	94 01       	movw	r18, r8
    1b32:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulohisi3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8c 0d       	add	r24, r12
    1b3c:	9d 1d       	adc	r25, r13
    1b3e:	ae 1d       	adc	r26, r14
    1b40:	bf 1d       	adc	r27, r15
    1b42:	b7 ff       	sbrs	r27, 7
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <do_rand+0x72>
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	a1 09       	sbc	r26, r1
    1b4a:	b0 48       	sbci	r27, 0x80	; 128
    1b4c:	88 83       	st	Y, r24
    1b4e:	99 83       	std	Y+1, r25	; 0x01
    1b50:	aa 83       	std	Y+2, r26	; 0x02
    1b52:	bb 83       	std	Y+3, r27	; 0x03
    1b54:	9f 77       	andi	r25, 0x7F	; 127
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	bf 90       	pop	r11
    1b64:	af 90       	pop	r10
    1b66:	9f 90       	pop	r9
    1b68:	8f 90       	pop	r8
    1b6a:	08 95       	ret

00001b6c <rand_r>:
    1b6c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <do_rand>
    1b70:	08 95       	ret

00001b72 <rand>:
    1b72:	87 e0       	ldi	r24, 0x07	; 7
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <do_rand>
    1b7a:	08 95       	ret

00001b7c <srand>:
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	80 93 07 01 	sts	0x0107, r24
    1b84:	90 93 08 01 	sts	0x0108, r25
    1b88:	a0 93 09 01 	sts	0x0109, r26
    1b8c:	b0 93 0a 01 	sts	0x010A, r27
    1b90:	08 95       	ret

00001b92 <eeprom_read_byte>:
    1b92:	f9 99       	sbic	0x1f, 1	; 31
    1b94:	fe cf       	rjmp	.-4      	; 0x1b92 <eeprom_read_byte>
    1b96:	92 bd       	out	0x22, r25	; 34
    1b98:	81 bd       	out	0x21, r24	; 33
    1b9a:	f8 9a       	sbi	0x1f, 0	; 31
    1b9c:	99 27       	eor	r25, r25
    1b9e:	80 b5       	in	r24, 0x20	; 32
    1ba0:	08 95       	ret

00001ba2 <eeprom_write_byte>:
    1ba2:	26 2f       	mov	r18, r22

00001ba4 <eeprom_write_r18>:
    1ba4:	f9 99       	sbic	0x1f, 1	; 31
    1ba6:	fe cf       	rjmp	.-4      	; 0x1ba4 <eeprom_write_r18>
    1ba8:	1f ba       	out	0x1f, r1	; 31
    1baa:	92 bd       	out	0x22, r25	; 34
    1bac:	81 bd       	out	0x21, r24	; 33
    1bae:	20 bd       	out	0x20, r18	; 32
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	fa 9a       	sbi	0x1f, 2	; 31
    1bb6:	f9 9a       	sbi	0x1f, 1	; 31
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	08 95       	ret

00001bbe <__divmodsi4>:
    1bbe:	05 2e       	mov	r0, r21
    1bc0:	97 fb       	bst	r25, 7
    1bc2:	1e f4       	brtc	.+6      	; 0x1bca <__divmodsi4+0xc>
    1bc4:	00 94       	com	r0
    1bc6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__negsi2>
    1bca:	57 fd       	sbrc	r21, 7
    1bcc:	07 d0       	rcall	.+14     	; 0x1bdc <__divmodsi4_neg2>
    1bce:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__udivmodsi4>
    1bd2:	07 fc       	sbrc	r0, 7
    1bd4:	03 d0       	rcall	.+6      	; 0x1bdc <__divmodsi4_neg2>
    1bd6:	4e f4       	brtc	.+18     	; 0x1bea <__divmodsi4_exit>
    1bd8:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__negsi2>

00001bdc <__divmodsi4_neg2>:
    1bdc:	50 95       	com	r21
    1bde:	40 95       	com	r20
    1be0:	30 95       	com	r19
    1be2:	21 95       	neg	r18
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	4f 4f       	sbci	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255

00001bea <__divmodsi4_exit>:
    1bea:	08 95       	ret

00001bec <__negsi2>:
    1bec:	90 95       	com	r25
    1bee:	80 95       	com	r24
    1bf0:	70 95       	com	r23
    1bf2:	61 95       	neg	r22
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfa:	08 95       	ret

00001bfc <__muluhisi3>:
    1bfc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__umulhisi3>
    1c00:	a5 9f       	mul	r26, r21
    1c02:	90 0d       	add	r25, r0
    1c04:	b4 9f       	mul	r27, r20
    1c06:	90 0d       	add	r25, r0
    1c08:	a4 9f       	mul	r26, r20
    1c0a:	80 0d       	add	r24, r0
    1c0c:	91 1d       	adc	r25, r1
    1c0e:	11 24       	eor	r1, r1
    1c10:	08 95       	ret

00001c12 <__mulshisi3>:
    1c12:	b7 ff       	sbrs	r27, 7
    1c14:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__muluhisi3>

00001c18 <__mulohisi3>:
    1c18:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__muluhisi3>
    1c1c:	82 1b       	sub	r24, r18
    1c1e:	93 0b       	sbc	r25, r19
    1c20:	08 95       	ret

00001c22 <__udivmodsi4>:
    1c22:	a1 e2       	ldi	r26, 0x21	; 33
    1c24:	1a 2e       	mov	r1, r26
    1c26:	aa 1b       	sub	r26, r26
    1c28:	bb 1b       	sub	r27, r27
    1c2a:	fd 01       	movw	r30, r26
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <__udivmodsi4_ep>

00001c2e <__udivmodsi4_loop>:
    1c2e:	aa 1f       	adc	r26, r26
    1c30:	bb 1f       	adc	r27, r27
    1c32:	ee 1f       	adc	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	a2 17       	cp	r26, r18
    1c38:	b3 07       	cpc	r27, r19
    1c3a:	e4 07       	cpc	r30, r20
    1c3c:	f5 07       	cpc	r31, r21
    1c3e:	20 f0       	brcs	.+8      	; 0x1c48 <__udivmodsi4_ep>
    1c40:	a2 1b       	sub	r26, r18
    1c42:	b3 0b       	sbc	r27, r19
    1c44:	e4 0b       	sbc	r30, r20
    1c46:	f5 0b       	sbc	r31, r21

00001c48 <__udivmodsi4_ep>:
    1c48:	66 1f       	adc	r22, r22
    1c4a:	77 1f       	adc	r23, r23
    1c4c:	88 1f       	adc	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	1a 94       	dec	r1
    1c52:	69 f7       	brne	.-38     	; 0x1c2e <__udivmodsi4_loop>
    1c54:	60 95       	com	r22
    1c56:	70 95       	com	r23
    1c58:	80 95       	com	r24
    1c5a:	90 95       	com	r25
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	ac 01       	movw	r20, r24
    1c60:	bd 01       	movw	r22, r26
    1c62:	cf 01       	movw	r24, r30
    1c64:	08 95       	ret

00001c66 <_exit>:
    1c66:	f8 94       	cli

00001c68 <__stop_program>:
    1c68:	ff cf       	rjmp	.-2      	; 0x1c68 <__stop_program>
