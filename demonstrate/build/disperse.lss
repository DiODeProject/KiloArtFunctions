
build/disperse.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	a1 02       	muls	r26, r17
      6a:	1d 03       	fmul	r17, r21
      6c:	75 02       	muls	r23, r21
      6e:	6c 02       	muls	r22, r28
      70:	72 02       	muls	r23, r18
      72:	ff 02       	muls	r31, r31
      74:	f4 02       	muls	r31, r20
      76:	7f 09       	sbc	r23, r15
      78:	5c 08       	sbc	r5, r12
      7a:	5c 08       	sbc	r5, r12
      7c:	7c 09       	sbc	r23, r12
      7e:	88 09       	sbc	r24, r8
      80:	78 09       	sbc	r23, r8
      82:	8f 09       	sbc	r24, r15
      84:	8b 09       	sbc	r24, r11
      86:	93 09       	sbc	r25, r3
      88:	4b 09       	sbc	r20, r11
      8a:	1d 09       	sbc	r17, r13

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 ee       	ldi	r30, 0xE2	; 226
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 38       	cpi	r26, 0x82	; 130
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 c5 0a 	call	0x158a	; 0x158a <main>
      da:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
    }
}

void message_rx(message_t *m, distance_measurement_t *d)
{
    new_message = 1;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	90 93 11 01 	sts	0x0111, r25
      ea:	80 93 10 01 	sts	0x0110, r24
      ee:	08 95       	ret

000000f0 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      f0:	88 e1       	ldi	r24, 0x18	; 24
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	08 95       	ret

000000f6 <setup>:
        }
    }
}

void setup()
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
    // Initialize an empty message.
    message.type = NORMAL;
      fa:	c8 e1       	ldi	r28, 0x18	; 24
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
    message.crc = message_crc(&message);
     100:	ce 01       	movw	r24, r28
     102:	0e 94 26 0a 	call	0x144c	; 0x144c <message_crc>
     106:	9b 87       	std	Y+11, r25	; 0x0b
     108:	8a 87       	std	Y+10, r24	; 0x0a
}
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <loop>:

void loop()
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
    if (kilo_ticks > last_motion_update + 32)
     114:	40 91 47 01 	lds	r20, 0x0147
     118:	50 91 48 01 	lds	r21, 0x0148
     11c:	60 91 49 01 	lds	r22, 0x0149
     120:	70 91 4a 01 	lds	r23, 0x014A
     124:	80 91 0c 01 	lds	r24, 0x010C
     128:	90 91 0d 01 	lds	r25, 0x010D
     12c:	a0 91 0e 01 	lds	r26, 0x010E
     130:	b0 91 0f 01 	lds	r27, 0x010F
     134:	80 96       	adiw	r24, 0x20	; 32
     136:	a1 1d       	adc	r26, r1
     138:	b1 1d       	adc	r27, r1
     13a:	84 17       	cp	r24, r20
     13c:	95 07       	cpc	r25, r21
     13e:	a6 07       	cpc	r26, r22
     140:	b7 07       	cpc	r27, r23
     142:	f0 f5       	brcc	.+124    	; 0x1c0 <loop+0xb0>
    {
        last_motion_update = kilo_ticks;
     144:	80 91 47 01 	lds	r24, 0x0147
     148:	90 91 48 01 	lds	r25, 0x0148
     14c:	a0 91 49 01 	lds	r26, 0x0149
     150:	b0 91 4a 01 	lds	r27, 0x014A
     154:	80 93 0c 01 	sts	0x010C, r24
     158:	90 93 0d 01 	sts	0x010D, r25
     15c:	a0 93 0e 01 	sts	0x010E, r26
     160:	b0 93 0f 01 	sts	0x010F, r27
        
        // If a message was received within the last second, set a random motion.
        if (new_message == 1)
     164:	c0 91 10 01 	lds	r28, 0x0110
     168:	d0 91 11 01 	lds	r29, 0x0111
     16c:	c1 30       	cpi	r28, 0x01	; 1
     16e:	d1 05       	cpc	r29, r1
     170:	99 f0       	breq	.+38     	; 0x198 <loop+0x88>
        }
        // If no messages were received within the last second, set the LED white
        // and stop moving.
        else
        {
            set_color(RGB(1, 1, 1));
     172:	85 e1       	ldi	r24, 0x15	; 21
     174:	0e 94 d6 07 	call	0xfac	; 0xfac <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     178:	80 91 12 01 	lds	r24, 0x0112
     17c:	90 91 13 01 	lds	r25, 0x0113
     180:	89 2b       	or	r24, r25
     182:	f1 f0       	breq	.+60     	; 0x1c0 <loop+0xb0>
    {
        current_motion = new_motion;
     184:	10 92 13 01 	sts	0x0113, r1
     188:	10 92 12 01 	sts	0x0112, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	80 e0       	ldi	r24, 0x00	; 0
        {
            set_color(RGB(1, 1, 1));
            set_motion(STOP);
        }
    }
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     194:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>
        last_motion_update = kilo_ticks;
        
        // If a message was received within the last second, set a random motion.
        if (new_message == 1)
        {
            new_message = 0;
     198:	10 92 11 01 	sts	0x0111, r1
     19c:	10 92 10 01 	sts	0x0110, r1
            
            // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
            int random_number = rand_hard();
     1a0:	0e 94 14 04 	call	0x828	; 0x828 <rand_hard>
            
            // Compute the remainder of random_number when divided by 4.
            // This gives a new random number in the set {0, 1, 2, 3}.
            int random_direction = (random_number % 4);
     1a4:	83 70       	andi	r24, 0x03	; 3
            
            // There is a 50% chance of random_direction being 0 OR 1, in which
            // case set the LED green and move forward.
            if ((random_direction == 0) || (random_direction == 1))
     1a6:	82 30       	cpi	r24, 0x02	; 2
     1a8:	e8 f0       	brcs	.+58     	; 0x1e4 <loop+0xd4>
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
            }
            // There is a 25% chance of random_direction being 2, in which case
            // set the LED red and move left.
            else if (random_direction == 2)
     1aa:	82 30       	cpi	r24, 0x02	; 2
     1ac:	91 f1       	breq	.+100    	; 0x212 <loop+0x102>
            }
            // There is a 25% chance of random_direction being 3, in which case
            // set the LED blue and move right.
            else if (random_direction == 3)
            {
                set_color(RGB(0, 0, 1));
     1ae:	80 e1       	ldi	r24, 0x10	; 16
     1b0:	0e 94 d6 07 	call	0xfac	; 0xfac <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     1b4:	80 91 12 01 	lds	r24, 0x0112
     1b8:	90 91 13 01 	lds	r25, 0x0113
     1bc:	03 97       	sbiw	r24, 0x03	; 3
     1be:	19 f4       	brne	.+6      	; 0x1c6 <loop+0xb6>
        {
            set_color(RGB(1, 1, 1));
            set_motion(STOP);
        }
    }
}
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
    {
        current_motion = new_motion;
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	90 93 13 01 	sts	0x0113, r25
     1ce:	80 93 12 01 	sts	0x0112, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     1d2:	0e 94 ba 03 	call	0x774	; 0x774 <spinup_motors>
            set_motors(0, kilo_turn_right);
     1d6:	60 91 6d 01 	lds	r22, 0x016D
     1da:	80 e0       	ldi	r24, 0x00	; 0
        {
            set_color(RGB(1, 1, 1));
            set_motion(STOP);
        }
    }
}
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
            set_motors(0, kilo_turn_right);
     1e0:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>
            
            // There is a 50% chance of random_direction being 0 OR 1, in which
            // case set the LED green and move forward.
            if ((random_direction == 0) || (random_direction == 1))
            {
                set_color(RGB(0, 1, 0));
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	0e 94 d6 07 	call	0xfac	; 0xfac <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     1ea:	80 91 12 01 	lds	r24, 0x0112
     1ee:	90 91 13 01 	lds	r25, 0x0113
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	29 f3       	breq	.-54     	; 0x1c0 <loop+0xb0>
    {
        current_motion = new_motion;
     1f6:	d0 93 13 01 	sts	0x0113, r29
     1fa:	c0 93 12 01 	sts	0x0112, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     1fe:	0e 94 ba 03 	call	0x774	; 0x774 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     202:	60 91 80 01 	lds	r22, 0x0180
     206:	80 91 7f 01 	lds	r24, 0x017F
        {
            set_color(RGB(1, 1, 1));
            set_motion(STOP);
        }
    }
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     20e:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>
            }
            // There is a 25% chance of random_direction being 2, in which case
            // set the LED red and move left.
            else if (random_direction == 2)
            {
                set_color(RGB(1, 0, 0));
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 d6 07 	call	0xfac	; 0xfac <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     218:	80 91 12 01 	lds	r24, 0x0112
     21c:	90 91 13 01 	lds	r25, 0x0113
     220:	02 97       	sbiw	r24, 0x02	; 2
     222:	71 f2       	breq	.-100    	; 0x1c0 <loop+0xb0>
    {
        current_motion = new_motion;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 13 01 	sts	0x0113, r25
     22c:	80 93 12 01 	sts	0x0112, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     230:	0e 94 ba 03 	call	0x774	; 0x774 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	80 91 81 01 	lds	r24, 0x0181
        {
            set_color(RGB(1, 1, 1));
            set_motion(STOP);
        }
    }
}
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
     23e:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>

00000242 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     242:	20 91 12 01 	lds	r18, 0x0112
     246:	30 91 13 01 	lds	r19, 0x0113
     24a:	28 17       	cp	r18, r24
     24c:	39 07       	cpc	r19, r25
     24e:	71 f0       	breq	.+28     	; 0x26c <set_motion+0x2a>
    {
        current_motion = new_motion;
     250:	90 93 13 01 	sts	0x0113, r25
     254:	80 93 12 01 	sts	0x0112, r24
        
        if (current_motion == STOP)
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	81 f0       	breq	.+32     	; 0x27c <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	91 05       	cpc	r25, r1
     260:	89 f0       	breq	.+34     	; 0x284 <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	91 05       	cpc	r25, r1
     266:	b1 f0       	breq	.+44     	; 0x294 <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     268:	03 97       	sbiw	r24, 0x03	; 3
     26a:	09 f0       	breq	.+2      	; 0x26e <set_motion+0x2c>
     26c:	08 95       	ret
        {
            spinup_motors();
     26e:	0e 94 ba 03 	call	0x774	; 0x774 <spinup_motors>
            set_motors(0, kilo_turn_right);
     272:	60 91 6d 01 	lds	r22, 0x016D
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     284:	0e 94 ba 03 	call	0x774	; 0x774 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     288:	60 91 80 01 	lds	r22, 0x0180
     28c:	80 91 7f 01 	lds	r24, 0x017F
     290:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     294:	0e 94 ba 03 	call	0x774	; 0x774 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	80 91 81 01 	lds	r24, 0x0181
     29e:	0c 94 b5 03 	jmp	0x76a	; 0x76a <set_motors>

000002a2 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     2a2:	08 95       	ret

000002a4 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret

000002aa <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     2aa:	08 95       	ret

000002ac <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
    cli();
     2ba:	f8 94       	cli

    ports_off();
     2bc:	14 b8       	out	0x04, r1	; 4
     2be:	17 b8       	out	0x07, r1	; 7
     2c0:	1a b8       	out	0x0a, r1	; 10
     2c2:	15 b8       	out	0x05, r1	; 5
     2c4:	18 b8       	out	0x08, r1	; 8
     2c6:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2c8:	52 9a       	sbi	0x0a, 2	; 10
     2ca:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2cc:	14 bc       	out	0x24, r1	; 36
     2ce:	85 e0       	ldi	r24, 0x05	; 5
     2d0:	85 bd       	out	0x25, r24	; 37
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	87 bd       	out	0x27, r24	; 39
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     2dc:	10 92 80 00 	sts	0x0080, r1
     2e0:	10 92 81 00 	sts	0x0081, r1
     2e4:	2f e8       	ldi	r18, 0x8F	; 143
     2e6:	3b e0       	ldi	r19, 0x0B	; 11
     2e8:	30 93 89 00 	sts	0x0089, r19
     2ec:	20 93 88 00 	sts	0x0088, r18
     2f0:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     2f4:	53 98       	cbi	0x0a, 3	; 10
     2f6:	23 98       	cbi	0x04, 3	; 4
     2f8:	91 ea       	ldi	r25, 0xA1	; 161
     2fa:	90 93 b0 00 	sts	0x00B0, r25
     2fe:	80 93 b1 00 	sts	0x00B1, r24
     302:	10 92 b4 00 	sts	0x00B4, r1
     306:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     30a:	8b e0       	ldi	r24, 0x0B	; 11
     30c:	80 bf       	out	0x30, r24	; 48
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     314:	86 e0       	ldi	r24, 0x06	; 6
     316:	80 93 7c 00 	sts	0x007C, r24
     31a:	83 e8       	ldi	r24, 0x83	; 131
     31c:	80 93 7a 00 	sts	0x007A, r24
     320:	80 91 7a 00 	lds	r24, 0x007A
     324:	80 64       	ori	r24, 0x40	; 64
     326:	80 93 7a 00 	sts	0x007A, r24
     32a:	80 91 7a 00 	lds	r24, 0x007A
     32e:	86 fd       	sbrc	r24, 6
     330:	fc cf       	rjmp	.-8      	; 0x32a <kilo_init+0x7e>
    adc_trigger_high_gain();
     332:	10 92 7c 00 	sts	0x007C, r1
     336:	83 ea       	ldi	r24, 0xA3	; 163
     338:	80 93 7a 00 	sts	0x007A, r24
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
    if (osccal != 0xFF)
     34a:	8f 3f       	cpi	r24, 0xFF	; 255
     34c:	11 f0       	breq	.+4      	; 0x352 <kilo_init+0xa6>
        OSCCAL = osccal;
     34e:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     352:	10 92 4b 01 	sts	0x014B, r1
    rx_leadingbit = 1;
     356:	c1 e0       	ldi	r28, 0x01	; 1
     358:	c0 93 24 01 	sts	0x0124, r28
    rx_leadingbyte = 1;
     35c:	c0 93 68 01 	sts	0x0168, r28
    rx_byteindex = 0;
     360:	10 92 42 01 	sts	0x0142, r1
    rx_bytevalue = 0;
     364:	10 92 7c 01 	sts	0x017C, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     368:	80 e9       	ldi	r24, 0x90	; 144
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     370:	80 93 41 01 	sts	0x0141, r24
    if (tx_mask & ~TX_MASK_MAX)
     374:	80 91 41 01 	lds	r24, 0x0141
     378:	88 73       	andi	r24, 0x38	; 56
     37a:	11 f0       	breq	.+4      	; 0x380 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     37c:	c0 93 41 01 	sts	0x0141, r28
    tx_clock = 0;
     380:	10 92 6c 01 	sts	0x016C, r1
     384:	10 92 6b 01 	sts	0x016B, r1
    tx_increment = 255;
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	90 93 6a 01 	sts	0x016A, r25
     390:	80 93 69 01 	sts	0x0169, r24
    kilo_ticks = 0;
     394:	10 92 47 01 	sts	0x0147, r1
     398:	10 92 48 01 	sts	0x0148, r1
     39c:	10 92 49 01 	sts	0x0149, r1
     3a0:	10 92 4a 01 	sts	0x014A, r1
    kilo_state = IDLE;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     3aa:	82 e4       	ldi	r24, 0x42	; 66
     3ac:	9f e0       	ldi	r25, 0x0F	; 15
     3ae:	90 93 7b 01 	sts	0x017B, r25
     3b2:	80 93 7a 01 	sts	0x017A, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3b6:	80 eb       	ldi	r24, 0xB0	; 176
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     3be:	c8 2f       	mov	r28, r24
     3c0:	81 eb       	ldi	r24, 0xB1	; 177
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     3c8:	2c 2f       	mov	r18, r28
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	38 2b       	or	r19, r24
     3ce:	30 93 7e 01 	sts	0x017E, r19
     3d2:	20 93 7d 01 	sts	0x017D, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     3de:	80 93 81 01 	sts	0x0181, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3e2:	89 e0       	ldi	r24, 0x09	; 9
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     3ea:	80 93 6d 01 	sts	0x016D, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     3ee:	8c e0       	ldi	r24, 0x0C	; 12
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     3f6:	80 93 7f 01 	sts	0x017F, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     3fa:	84 e1       	ldi	r24, 0x14	; 20
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     402:	80 93 80 01 	sts	0x0180, r24
     406:	5c e4       	ldi	r21, 0x4C	; 76
     408:	e5 2e       	mov	r14, r21
     40a:	51 e0       	ldi	r21, 0x01	; 1
     40c:	f5 2e       	mov	r15, r21
     40e:	05 e2       	ldi	r16, 0x25	; 37
     410:	11 e0       	ldi	r17, 0x01	; 1
     412:	c0 e2       	ldi	r28, 0x20	; 32
     414:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     416:	ce 01       	movw	r24, r28
     418:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     41c:	d8 2e       	mov	r13, r24
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     426:	2d 2d       	mov	r18, r13
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	32 2f       	mov	r19, r18
     42c:	22 27       	eor	r18, r18
     42e:	28 2b       	or	r18, r24
     430:	f7 01       	movw	r30, r14
     432:	21 93       	st	Z+, r18
     434:	31 93       	st	Z+, r19
     436:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     438:	ce 01       	movw	r24, r28
     43a:	c0 96       	adiw	r24, 0x30	; 48
     43c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     440:	d8 2e       	mov	r13, r24
     442:	ce 01       	movw	r24, r28
     444:	c1 96       	adiw	r24, 0x31	; 49
     446:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <eeprom_read_byte>
     44a:	2d 2d       	mov	r18, r13
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	32 2f       	mov	r19, r18
     450:	22 27       	eor	r18, r18
     452:	28 2b       	or	r18, r24
     454:	f8 01       	movw	r30, r16
     456:	21 93       	st	Z+, r18
     458:	31 93       	st	Z+, r19
     45a:	8f 01       	movw	r16, r30
     45c:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     45e:	cc 33       	cpi	r28, 0x3C	; 60
     460:	d1 05       	cpc	r29, r1
     462:	c9 f6       	brne	.-78     	; 0x416 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     464:	78 94       	sei
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	08 95       	ret

00000476 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	8f 93       	push	r24
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	a8 95       	wdr
     488:	80 91 60 00 	lds	r24, 0x0060
     48c:	88 61       	ori	r24, 0x18	; 24
     48e:	80 93 60 00 	sts	0x0060, r24
     492:	10 92 60 00 	sts	0x0060, r1
     496:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     498:	8f 91       	pop	r24
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     4a4:	3c 01       	movw	r6, r24
     4a6:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     4a8:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     4aa:	99 24       	eor	r9, r9
     4ac:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     4ae:	84 e0       	ldi	r24, 0x04	; 4
     4b0:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     4b2:	96 e0       	ldi	r25, 0x06	; 6
     4b4:	a9 2e       	mov	r10, r25
     4b6:	23 e8       	ldi	r18, 0x83	; 131
     4b8:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     4ba:	38 e1       	ldi	r19, 0x18	; 24
     4bc:	d3 2e       	mov	r13, r19
     4be:	49 e2       	ldi	r20, 0x29	; 41
     4c0:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     4c2:	90 91 17 01 	lds	r25, 0x0117
     4c6:	e9 2f       	mov	r30, r25
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	e7 30       	cpi	r30, 0x07	; 7
     4cc:	f1 05       	cpc	r31, r1
     4ce:	c8 f7       	brcc	.-14     	; 0x4c2 <kilo_start+0x1e>
     4d0:	ec 5c       	subi	r30, 0xCC	; 204
     4d2:	ff 4f       	sbci	r31, 0xFF	; 255
     4d4:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     4d8:	11 23       	and	r17, r17
     4da:	09 f4       	brne	.+2      	; 0x4de <kilo_start+0x3a>
     4dc:	fc c0       	rjmp	.+504    	; 0x6d6 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     4de:	c0 92 17 01 	sts	0x0117, r12
     4e2:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     4e4:	fe 01       	movw	r30, r28
     4e6:	09 95       	icall
                break;
     4e8:	ec cf       	rjmp	.-40     	; 0x4c2 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4ea:	80 91 4b 01 	lds	r24, 0x014B
     4ee:	81 11       	cpse	r24, r1
     4f0:	eb c0       	rjmp	.+470    	; 0x6c8 <kilo_start+0x224>
        cli();                                    // disable interrupts
     4f2:	f8 94       	cli
        adc_setup_conversion(6);
     4f4:	a0 92 7c 00 	sts	0x007C, r10
     4f8:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     4fc:	80 91 7a 00 	lds	r24, 0x007A
     500:	80 64       	ori	r24, 0x40	; 64
     502:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     506:	90 91 7a 00 	lds	r25, 0x007A
     50a:	96 fd       	sbrc	r25, 6
     50c:	fc cf       	rjmp	.-8      	; 0x506 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     50e:	80 91 78 00 	lds	r24, 0x0078
     512:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     516:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     518:	8b 3a       	cpi	r24, 0xAB	; 171
     51a:	e2 e0       	ldi	r30, 0x02	; 2
     51c:	9e 07       	cpc	r25, r30
     51e:	0c f0       	brlt	.+2      	; 0x522 <kilo_start+0x7e>
     520:	ed c0       	rjmp	.+474    	; 0x6fc <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     522:	89 38       	cpi	r24, 0x89	; 137
     524:	f2 e0       	ldi	r31, 0x02	; 2
     526:	9f 07       	cpc	r25, r31
     528:	0c f0       	brlt	.+2      	; 0x52c <kilo_start+0x88>
     52a:	ef c0       	rjmp	.+478    	; 0x70a <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     52c:	87 36       	cpi	r24, 0x67	; 103
     52e:	92 40       	sbci	r25, 0x02	; 2
     530:	0c f4       	brge	.+2      	; 0x534 <kilo_start+0x90>
     532:	ca c0       	rjmp	.+404    	; 0x6c8 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     534:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     536:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     538:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     53a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     53c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     53e:	3c 98       	cbi	0x07, 4	; 7
     540:	c0 cf       	rjmp	.-128    	; 0x4c2 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     542:	f8 94       	cli
                acomp_off();
     544:	80 b7       	in	r24, 0x30	; 48
     546:	87 7f       	andi	r24, 0xF7	; 247
     548:	80 bf       	out	0x30, r24	; 48
                adc_off();
     54a:	80 91 7a 00 	lds	r24, 0x007A
     54e:	8f 77       	andi	r24, 0x7F	; 127
     550:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     554:	14 b8       	out	0x04, r1	; 4
     556:	17 b8       	out	0x07, r1	; 7
     558:	1a b8       	out	0x0a, r1	; 10
     55a:	15 b8       	out	0x05, r1	; 5
     55c:	18 b8       	out	0x08, r1	; 8
     55e:	1b b8       	out	0x0b, r1	; 11
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	a8 95       	wdr
     566:	d0 92 60 00 	sts	0x0060, r13
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     570:	80 91 60 00 	lds	r24, 0x0060
     574:	80 64       	ori	r24, 0x40	; 64
     576:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     57a:	93 b7       	in	r25, 0x33	; 51
     57c:	91 7f       	andi	r25, 0xF1	; 241
     57e:	94 60       	ori	r25, 0x04	; 4
     580:	93 bf       	out	0x33, r25	; 51
                cli();
     582:	f8 94       	cli
                sleep_enable();
     584:	83 b7       	in	r24, 0x33	; 51
     586:	81 60       	ori	r24, 0x01	; 1
     588:	83 bf       	out	0x33, r24	; 51
                sei();
     58a:	78 94       	sei
                sleep_cpu();
     58c:	88 95       	sleep
                sleep_disable();
     58e:	83 b7       	in	r24, 0x33	; 51
     590:	8e 7f       	andi	r24, 0xFE	; 254
     592:	83 bf       	out	0x33, r24	; 51
                sei();
     594:	78 94       	sei
                rx_busy = 0;
     596:	10 92 4b 01 	sts	0x014B, r1
                ports_on();
     59a:	52 9a       	sbi	0x0a, 2	; 10
     59c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     59e:	80 91 7a 00 	lds	r24, 0x007A
     5a2:	80 68       	ori	r24, 0x80	; 128
     5a4:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a8:	87 e5       	ldi	r24, 0x57	; 87
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <kilo_start+0x108>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <kilo_start+0x10e>
     5b2:	00 00       	nop
                _delay_us(300);
                acomp_on();
     5b4:	80 b7       	in	r24, 0x30	; 48
     5b6:	88 61       	ori	r24, 0x18	; 24
     5b8:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5ba:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5bc:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5be:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5c0:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5c2:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5c4:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c6:	ef e1       	ldi	r30, 0x1F	; 31
     5c8:	fe e4       	ldi	r31, 0x4E	; 78
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <kilo_start+0x126>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <kilo_start+0x12c>
     5d0:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     5d2:	80 91 4b 01 	lds	r24, 0x014B
     5d6:	81 11       	cpse	r24, r1
     5d8:	81 c0       	rjmp	.+258    	; 0x6dc <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5da:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5dc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5de:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5e0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5e2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5e4:	3c 98       	cbi	0x07, 4	; 7
     5e6:	6d cf       	rjmp	.-294    	; 0x4c2 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     5e8:	80 91 15 01 	lds	r24, 0x0115
     5ec:	81 11       	cpse	r24, r1
     5ee:	41 c0       	rjmp	.+130    	; 0x672 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5f4:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     5f8:	10 92 16 01 	sts	0x0116, r1
     5fc:	62 cf       	rjmp	.-316    	; 0x4c2 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     5fe:	48 99       	sbic	0x09, 0	; 9
     600:	ec cf       	rjmp	.-40     	; 0x5da <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     602:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     604:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     606:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     608:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     60a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     60c:	3c 98       	cbi	0x07, 4	; 7
     60e:	8f ec       	ldi	r24, 0xCF	; 207
     610:	97 e0       	ldi	r25, 0x07	; 7
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <kilo_start+0x16e>
     616:	00 c0       	rjmp	.+0      	; 0x618 <kilo_start+0x174>
     618:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     61a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     61c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     61e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     620:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     622:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     624:	3c 98       	cbi	0x07, 4	; 7
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	e1 ee       	ldi	r30, 0xE1	; 225
     62a:	f4 e0       	ldi	r31, 0x04	; 4
     62c:	91 50       	subi	r25, 0x01	; 1
     62e:	e0 40       	sbci	r30, 0x00	; 0
     630:	f0 40       	sbci	r31, 0x00	; 0
     632:	e1 f7       	brne	.-8      	; 0x62c <kilo_start+0x188>
     634:	00 c0       	rjmp	.+0      	; 0x636 <kilo_start+0x192>
     636:	00 00       	nop
     638:	44 cf       	rjmp	.-376    	; 0x4c2 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     63a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     63c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     63e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     640:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     642:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     644:	3c 98       	cbi	0x07, 4	; 7
     646:	ef ec       	ldi	r30, 0xCF	; 207
     648:	f7 e0       	ldi	r31, 0x07	; 7
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <kilo_start+0x1a6>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <kilo_start+0x1ac>
     650:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     652:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     654:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     656:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     658:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     65a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     65c:	3c 98       	cbi	0x07, 4	; 7
     65e:	ff ef       	ldi	r31, 0xFF	; 255
     660:	21 ee       	ldi	r18, 0xE1	; 225
     662:	84 e0       	ldi	r24, 0x04	; 4
     664:	f1 50       	subi	r31, 0x01	; 1
     666:	20 40       	sbci	r18, 0x00	; 0
     668:	80 40       	sbci	r24, 0x00	; 0
     66a:	e1 f7       	brne	.-8      	; 0x664 <kilo_start+0x1c0>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <kilo_start+0x1ca>
     66e:	00 00       	nop
     670:	28 cf       	rjmp	.-432    	; 0x4c2 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     672:	90 91 15 01 	lds	r25, 0x0115
     676:	80 91 16 01 	lds	r24, 0x0116
     67a:	98 17       	cp	r25, r24
     67c:	09 f4       	brne	.+2      	; 0x680 <kilo_start+0x1dc>
     67e:	21 cf       	rjmp	.-446    	; 0x4c2 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     680:	80 91 15 01 	lds	r24, 0x0115
     684:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     688:	80 91 15 01 	lds	r24, 0x0115
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	09 f4       	brne	.+2      	; 0x692 <kilo_start+0x1ee>
     690:	50 c0       	rjmp	.+160    	; 0x732 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     692:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     696:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     69a:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	d9 f1       	breq	.+118    	; 0x718 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a2:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     6a6:	90 92 b4 00 	sts	0x00B4, r9
     6aa:	8f e2       	ldi	r24, 0x2F	; 47
     6ac:	95 e7       	ldi	r25, 0x75	; 117
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <kilo_start+0x20a>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <kilo_start+0x210>
     6b4:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     6b6:	80 91 80 01 	lds	r24, 0x0180
     6ba:	90 91 7f 01 	lds	r25, 0x017F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6be:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     6c2:	80 93 b4 00 	sts	0x00B4, r24
     6c6:	fd ce       	rjmp	.-518    	; 0x4c2 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6c8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6ca:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6cc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6ce:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6d0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6d2:	3c 98       	cbi	0x07, 4	; 7
     6d4:	f6 ce       	rjmp	.-532    	; 0x4c2 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     6d6:	f3 01       	movw	r30, r6
     6d8:	09 95       	icall
     6da:	01 cf       	rjmp	.-510    	; 0x4de <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6dc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6de:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6e4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6e6:	3c 98       	cbi	0x07, 4	; 7
     6e8:	ff ef       	ldi	r31, 0xFF	; 255
     6ea:	20 e7       	ldi	r18, 0x70	; 112
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	f1 50       	subi	r31, 0x01	; 1
     6f0:	20 40       	sbci	r18, 0x00	; 0
     6f2:	80 40       	sbci	r24, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <kilo_start+0x24a>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <kilo_start+0x254>
     6f8:	00 00       	nop
     6fa:	6f cf       	rjmp	.-290    	; 0x5da <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6fc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6fe:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     700:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     702:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     704:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     706:	3c 98       	cbi	0x07, 4	; 7
     708:	dc ce       	rjmp	.-584    	; 0x4c2 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     70a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     70c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     70e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     710:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     712:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     714:	3c 9a       	sbi	0x07, 4	; 7
     716:	d5 ce       	rjmp	.-598    	; 0x4c2 <kilo_start+0x1e>
     718:	ef e2       	ldi	r30, 0x2F	; 47
     71a:	f5 e7       	ldi	r31, 0x75	; 117
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <kilo_start+0x278>
     720:	00 c0       	rjmp	.+0      	; 0x722 <kilo_start+0x27e>
     722:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     724:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     728:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     72c:	80 93 b4 00 	sts	0x00B4, r24
     730:	c8 ce       	rjmp	.-624    	; 0x4c2 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     732:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     736:	10 92 b4 00 	sts	0x00B4, r1
     73a:	8f e2       	ldi	r24, 0x2F	; 47
     73c:	95 e7       	ldi	r25, 0x75	; 117
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <kilo_start+0x29a>
     742:	00 c0       	rjmp	.+0      	; 0x744 <kilo_start+0x2a0>
     744:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     746:	80 91 81 01 	lds	r24, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     74a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     74e:	10 92 b4 00 	sts	0x00B4, r1
     752:	b7 ce       	rjmp	.-658    	; 0x4c2 <kilo_start+0x1e>

00000754 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     754:	07 c0       	rjmp	.+14     	; 0x764 <delay+0x10>
     756:	ef ec       	ldi	r30, 0xCF	; 207
     758:	f7 e0       	ldi	r31, 0x07	; 7
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <delay+0x6>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <delay+0xc>
     760:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     762:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	b9 f7       	brne	.-18     	; 0x756 <delay+0x2>
     768:	08 95       	ret

0000076a <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     76a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     76e:	60 93 b4 00 	sts	0x00B4, r22
     772:	08 95       	ret

00000774 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     77a:	80 93 b4 00 	sts	0x00B4, r24
     77e:	8f e0       	ldi	r24, 0x0F	; 15
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	ef ec       	ldi	r30, 0xCF	; 207
     784:	f7 e0       	ldi	r31, 0x07	; 7
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <spinup_motors+0x12>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <spinup_motors+0x18>
     78c:	00 00       	nop
     78e:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     790:	c1 f7       	brne	.-16     	; 0x782 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     792:	08 95       	ret

00000794 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     794:	80 91 4b 01 	lds	r24, 0x014B
     798:	81 11       	cpse	r24, r1
     79a:	1e c0       	rjmp	.+60     	; 0x7d8 <get_ambientlight+0x44>
        cli();
     79c:	f8 94       	cli
        adc_setup_conversion(7);
     79e:	87 e0       	ldi	r24, 0x07	; 7
     7a0:	80 93 7c 00 	sts	0x007C, r24
     7a4:	83 e8       	ldi	r24, 0x83	; 131
     7a6:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7aa:	80 91 7a 00 	lds	r24, 0x007A
     7ae:	80 64       	ori	r24, 0x40	; 64
     7b0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7b4:	80 91 7a 00 	lds	r24, 0x007A
     7b8:	86 fd       	sbrc	r24, 6
     7ba:	fc cf       	rjmp	.-8      	; 0x7b4 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     7bc:	80 91 78 00 	lds	r24, 0x0078
     7c0:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     7c4:	10 92 7c 00 	sts	0x007C, r1
     7c8:	23 ea       	ldi	r18, 0xA3	; 163
     7ca:	20 93 7a 00 	sts	0x007A, r18
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     7d4:	78 94       	sei
     7d6:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     7dc:	08 95       	ret

000007de <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     7de:	80 91 4b 01 	lds	r24, 0x014B
     7e2:	81 11       	cpse	r24, r1
     7e4:	1e c0       	rjmp	.+60     	; 0x822 <get_temperature+0x44>
        cli();
     7e6:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     7e8:	88 ec       	ldi	r24, 0xC8	; 200
     7ea:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     7ee:	87 e8       	ldi	r24, 0x87	; 135
     7f0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7f4:	80 91 7a 00 	lds	r24, 0x007A
     7f8:	80 64       	ori	r24, 0x40	; 64
     7fa:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7fe:	80 91 7a 00 	lds	r24, 0x007A
     802:	86 fd       	sbrc	r24, 6
     804:	fc cf       	rjmp	.-8      	; 0x7fe <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     806:	80 91 78 00 	lds	r24, 0x0078
     80a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     80e:	10 92 7c 00 	sts	0x007C, r1
     812:	23 ea       	ldi	r18, 0xA3	; 163
     814:	20 93 7a 00 	sts	0x007A, r18
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     81e:	78 94       	sei
     820:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     826:	08 95       	ret

00000828 <rand_hard>:

uint8_t rand_hard() {
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	e0 e0       	ldi	r30, 0x00	; 0
     832:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     834:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     836:	03 ea       	ldi	r16, 0xA3	; 163
     838:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     83a:	d6 e0       	ldi	r29, 0x06	; 6
     83c:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     83e:	a1 e0       	ldi	r26, 0x01	; 1
     840:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     842:	60 e8       	ldi	r22, 0x80	; 128
     844:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     846:	f8 94       	cli
            adc_setup_conversion(6);
     848:	d0 93 7c 00 	sts	0x007C, r29
     84c:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     850:	90 91 7a 00 	lds	r25, 0x007A
     854:	90 64       	ori	r25, 0x40	; 64
     856:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     85a:	90 91 7a 00 	lds	r25, 0x007A
     85e:	96 fd       	sbrc	r25, 6
     860:	fc cf       	rjmp	.-8      	; 0x85a <rand_hard+0x32>
            a = ADCW&0x1;
     862:	20 91 78 00 	lds	r18, 0x0078
     866:	30 91 79 00 	lds	r19, 0x0079
     86a:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     86c:	90 91 7a 00 	lds	r25, 0x007A
     870:	90 64       	ori	r25, 0x40	; 64
     872:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     876:	90 91 7a 00 	lds	r25, 0x007A
     87a:	96 fd       	sbrc	r25, 6
     87c:	fc cf       	rjmp	.-8      	; 0x876 <rand_hard+0x4e>
            b = ADCW&0x1;
     87e:	40 91 78 00 	lds	r20, 0x0078
     882:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     886:	10 92 7c 00 	sts	0x007C, r1
     88a:	00 93 7a 00 	sts	0x007A, r16
     88e:	10 93 7b 00 	sts	0x007B, r17
            sei();
     892:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     894:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     896:	24 13       	cpse	r18, r20
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <rand_hard+0x78>
     89a:	61 50       	subi	r22, 0x01	; 1
     89c:	71 09       	sbc	r23, r1
     89e:	99 f6       	brne	.-90     	; 0x846 <rand_hard+0x1e>
        if (a)
     8a0:	22 23       	and	r18, r18
     8a2:	39 f0       	breq	.+14     	; 0x8b2 <rand_hard+0x8a>
            num |= (1<<i);
     8a4:	9d 01       	movw	r18, r26
     8a6:	0e 2e       	mov	r0, r30
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <rand_hard+0x84>
     8aa:	22 0f       	add	r18, r18
     8ac:	0a 94       	dec	r0
     8ae:	ea f7       	brpl	.-6      	; 0x8aa <rand_hard+0x82>
     8b0:	82 2b       	or	r24, r18
     8b2:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     8b4:	e8 30       	cpi	r30, 0x08	; 8
     8b6:	f1 05       	cpc	r31, r1
     8b8:	09 f0       	breq	.+2      	; 0x8bc <rand_hard+0x94>
     8ba:	c3 cf       	rjmp	.-122    	; 0x842 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     8c6:	80 91 00 01 	lds	r24, 0x0100
     8ca:	98 2f       	mov	r25, r24
     8cc:	99 0f       	add	r25, r25
     8ce:	99 0f       	add	r25, r25
     8d0:	99 0f       	add	r25, r25
     8d2:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     8d4:	90 91 14 01 	lds	r25, 0x0114
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	29 0f       	add	r18, r25
     8dc:	20 93 14 01 	sts	0x0114, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     8e0:	28 2f       	mov	r18, r24
     8e2:	22 95       	swap	r18
     8e4:	26 95       	lsr	r18
     8e6:	27 70       	andi	r18, 0x07	; 7
     8e8:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     8ea:	96 95       	lsr	r25
     8ec:	96 95       	lsr	r25
     8ee:	89 27       	eor	r24, r25
     8f0:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     8f4:	08 95       	ret

000008f6 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     8f6:	80 93 00 01 	sts	0x0100, r24
     8fa:	08 95       	ret

000008fc <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     8fc:	80 91 4b 01 	lds	r24, 0x014B
     900:	81 11       	cpse	r24, r1
     902:	16 c0       	rjmp	.+44     	; 0x930 <__stack+0x31>
        cli();                                    // disable interrupts
     904:	f8 94       	cli
        adc_setup_conversion(6);
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	80 93 7c 00 	sts	0x007C, r24
     90c:	83 e8       	ldi	r24, 0x83	; 131
     90e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     912:	80 91 7a 00 	lds	r24, 0x007A
     916:	80 64       	ori	r24, 0x40	; 64
     918:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     91c:	80 91 7a 00 	lds	r24, 0x007A
     920:	86 fd       	sbrc	r24, 6
     922:	fc cf       	rjmp	.-8      	; 0x91c <__stack+0x1d>
        voltage = ADCW;                           // store AD result
     924:	80 91 78 00 	lds	r24, 0x0078
     928:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     92c:	78 94       	sei
     92e:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     934:	08 95       	ret

00000936 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	00 d0       	rcall	.+0      	; 0x95c <estimate_distance+0x26>
     95c:	00 d0       	rcall	.+0      	; 0x95e <estimate_distance+0x28>
     95e:	00 d0       	rcall	.+0      	; 0x960 <estimate_distance+0x2a>
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     966:	dc 01       	movw	r26, r24
     968:	12 96       	adiw	r26, 0x02	; 2
     96a:	0d 90       	ld	r0, X+
     96c:	bc 91       	ld	r27, X
     96e:	a0 2d       	mov	r26, r0
     970:	be 83       	std	Y+6, r27	; 0x06
     972:	ad 83       	std	Y+5, r26	; 0x05
     974:	a4 38       	cpi	r26, 0x84	; 132
     976:	e3 e0       	ldi	r30, 0x03	; 3
     978:	be 07       	cpc	r27, r30
     97a:	0c f0       	brlt	.+2      	; 0x97e <estimate_distance+0x48>
     97c:	c9 c0       	rjmp	.+402    	; 0xb10 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     97e:	80 91 25 01 	lds	r24, 0x0125
     982:	90 91 26 01 	lds	r25, 0x0126
     986:	8a 17       	cp	r24, r26
     988:	9b 07       	cpc	r25, r27
     98a:	08 f4       	brcc	.+2      	; 0x98e <estimate_distance+0x58>
     98c:	37 c1       	rjmp	.+622    	; 0xbfc <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     98e:	00 91 27 01 	lds	r16, 0x0127
     992:	10 91 28 01 	lds	r17, 0x0128
     996:	0a 17       	cp	r16, r26
     998:	1b 07       	cpc	r17, r27
     99a:	08 f4       	brcc	.+2      	; 0x99e <estimate_distance+0x68>
     99c:	2f c2       	rjmp	.+1118   	; 0xdfc <estimate_distance+0x4c6>
     99e:	00 91 29 01 	lds	r16, 0x0129
     9a2:	10 91 2a 01 	lds	r17, 0x012A
     9a6:	0a 17       	cp	r16, r26
     9a8:	1b 07       	cpc	r17, r27
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <estimate_distance+0x78>
     9ac:	2f c2       	rjmp	.+1118   	; 0xe0c <estimate_distance+0x4d6>
     9ae:	00 91 2b 01 	lds	r16, 0x012B
     9b2:	10 91 2c 01 	lds	r17, 0x012C
     9b6:	0a 17       	cp	r16, r26
     9b8:	1b 07       	cpc	r17, r27
     9ba:	08 f4       	brcc	.+2      	; 0x9be <estimate_distance+0x88>
     9bc:	2f c2       	rjmp	.+1118   	; 0xe1c <estimate_distance+0x4e6>
     9be:	00 91 2d 01 	lds	r16, 0x012D
     9c2:	10 91 2e 01 	lds	r17, 0x012E
     9c6:	0a 17       	cp	r16, r26
     9c8:	1b 07       	cpc	r17, r27
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <estimate_distance+0x98>
     9cc:	2f c2       	rjmp	.+1118   	; 0xe2c <estimate_distance+0x4f6>
     9ce:	00 91 2f 01 	lds	r16, 0x012F
     9d2:	10 91 30 01 	lds	r17, 0x0130
     9d6:	0a 17       	cp	r16, r26
     9d8:	1b 07       	cpc	r17, r27
     9da:	08 f4       	brcc	.+2      	; 0x9de <estimate_distance+0xa8>
     9dc:	ef c1       	rjmp	.+990    	; 0xdbc <estimate_distance+0x486>
     9de:	00 91 31 01 	lds	r16, 0x0131
     9e2:	10 91 32 01 	lds	r17, 0x0132
     9e6:	0a 17       	cp	r16, r26
     9e8:	1b 07       	cpc	r17, r27
     9ea:	08 f4       	brcc	.+2      	; 0x9ee <estimate_distance+0xb8>
     9ec:	27 c2       	rjmp	.+1102   	; 0xe3c <estimate_distance+0x506>
     9ee:	00 91 33 01 	lds	r16, 0x0133
     9f2:	10 91 34 01 	lds	r17, 0x0134
     9f6:	0a 17       	cp	r16, r26
     9f8:	1b 07       	cpc	r17, r27
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <estimate_distance+0xc8>
     9fc:	27 c2       	rjmp	.+1102   	; 0xe4c <estimate_distance+0x516>
     9fe:	00 91 35 01 	lds	r16, 0x0135
     a02:	10 91 36 01 	lds	r17, 0x0136
     a06:	0a 17       	cp	r16, r26
     a08:	1b 07       	cpc	r17, r27
     a0a:	08 f4       	brcc	.+2      	; 0xa0e <estimate_distance+0xd8>
     a0c:	27 c2       	rjmp	.+1102   	; 0xe5c <estimate_distance+0x526>
     a0e:	00 91 37 01 	lds	r16, 0x0137
     a12:	10 91 38 01 	lds	r17, 0x0138
     a16:	0a 17       	cp	r16, r26
     a18:	1b 07       	cpc	r17, r27
     a1a:	08 f4       	brcc	.+2      	; 0xa1e <estimate_distance+0xe8>
     a1c:	27 c2       	rjmp	.+1102   	; 0xe6c <estimate_distance+0x536>
     a1e:	00 91 39 01 	lds	r16, 0x0139
     a22:	10 91 3a 01 	lds	r17, 0x013A
     a26:	0a 17       	cp	r16, r26
     a28:	1b 07       	cpc	r17, r27
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <estimate_distance+0xf8>
     a2c:	27 c2       	rjmp	.+1102   	; 0xe7c <estimate_distance+0x546>
     a2e:	00 91 3b 01 	lds	r16, 0x013B
     a32:	10 91 3c 01 	lds	r17, 0x013C
     a36:	0a 17       	cp	r16, r26
     a38:	1b 07       	cpc	r17, r27
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <estimate_distance+0x108>
     a3c:	23 c2       	rjmp	.+1094   	; 0xe84 <estimate_distance+0x54e>
     a3e:	00 91 3d 01 	lds	r16, 0x013D
     a42:	10 91 3e 01 	lds	r17, 0x013E
     a46:	0a 17       	cp	r16, r26
     a48:	1b 07       	cpc	r17, r27
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <estimate_distance+0x118>
     a4c:	23 c2       	rjmp	.+1094   	; 0xe94 <estimate_distance+0x55e>
     a4e:	00 91 3f 01 	lds	r16, 0x013F
     a52:	10 91 40 01 	lds	r17, 0x0140
     a56:	0a 17       	cp	r16, r26
     a58:	1b 07       	cpc	r17, r27
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <estimate_distance+0x128>
     a5c:	23 c2       	rjmp	.+1094   	; 0xea4 <estimate_distance+0x56e>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a0 ed       	ldi	r26, 0xD0	; 208
     a64:	b0 e4       	ldi	r27, 0x40	; 64
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	9a 83       	std	Y+2, r25	; 0x02
     a6a:	ab 83       	std	Y+3, r26	; 0x03
     a6c:	bc 83       	std	Y+4, r27	; 0x04
     a6e:	4c e0       	ldi	r20, 0x0C	; 12
     a70:	e4 2e       	mov	r14, r20
     a72:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     a74:	f7 01       	movw	r30, r14
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	eb 5d       	subi	r30, 0xDB	; 219
     a7c:	fe 4f       	sbci	r31, 0xFE	; 254
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	b8 01       	movw	r22, r16
     a84:	68 1b       	sub	r22, r24
     a86:	79 0b       	sbc	r23, r25
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__addsf3>
     a98:	6b 01       	movw	r12, r22
     a9a:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a9c:	ad 81       	ldd	r26, Y+5	; 0x05
     a9e:	be 81       	ldd	r27, Y+6	; 0x06
     aa0:	bd 01       	movw	r22, r26
     aa2:	bb 0f       	add	r27, r27
     aa4:	88 0b       	sbc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	0e 94 30 0c 	call	0x1860	; 0x1860 <__floatsisf>
     aac:	4b 01       	movw	r8, r22
     aae:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     ab0:	b8 01       	movw	r22, r16
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     aba:	2b 01       	movw	r4, r22
     abc:	3c 01       	movw	r6, r24
     abe:	29 81       	ldd	r18, Y+1	; 0x01
     ac0:	3a 81       	ldd	r19, Y+2	; 0x02
     ac2:	4b 81       	ldd	r20, Y+3	; 0x03
     ac4:	5c 81       	ldd	r21, Y+4	; 0x04
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	c3 01       	movw	r24, r6
     ad4:	b2 01       	movw	r22, r4
     ad6:	0e 94 19 0b 	call	0x1632	; 0x1632 <__subsf3>
     ada:	9b 01       	movw	r18, r22
     adc:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     ade:	c5 01       	movw	r24, r10
     ae0:	b4 01       	movw	r22, r8
     ae2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__subsf3>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e2       	ldi	r20, 0x20	; 32
     aec:	51 e4       	ldi	r21, 0x41	; 65
     aee:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
            b=((int)((int)b/(int)slope));
     af2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     af6:	8b 01       	movw	r16, r22
     af8:	c7 01       	movw	r24, r14
     afa:	b6 01       	movw	r22, r12
     afc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     b00:	ab 01       	movw	r20, r22
     b02:	bc 01       	movw	r22, r24
     b04:	c8 01       	movw	r24, r16
     b06:	ba 01       	movw	r22, r20
     b08:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__divmodhi4>
            dist_high=b;
     b0c:	16 2f       	mov	r17, r22
     b0e:	77 c0       	rjmp	.+238    	; 0xbfe <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b10:	dc 01       	movw	r26, r24
     b12:	cd 90       	ld	r12, X+
     b14:	dc 90       	ld	r13, X
     b16:	80 91 4c 01 	lds	r24, 0x014C
     b1a:	90 91 4d 01 	lds	r25, 0x014D
     b1e:	8c 15       	cp	r24, r12
     b20:	9d 05       	cpc	r25, r13
     b22:	08 f4       	brcc	.+2      	; 0xb26 <estimate_distance+0x1f0>
     b24:	8c c0       	rjmp	.+280    	; 0xc3e <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b26:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b28:	e0 90 4e 01 	lds	r14, 0x014E
     b2c:	f0 90 4f 01 	lds	r15, 0x014F
     b30:	ec 14       	cp	r14, r12
     b32:	fd 04       	cpc	r15, r13
     b34:	08 f4       	brcc	.+2      	; 0xb38 <estimate_distance+0x202>
     b36:	5e c1       	rjmp	.+700    	; 0xdf4 <estimate_distance+0x4be>
     b38:	e0 90 50 01 	lds	r14, 0x0150
     b3c:	f0 90 51 01 	lds	r15, 0x0151
     b40:	ec 14       	cp	r14, r12
     b42:	fd 04       	cpc	r15, r13
     b44:	08 f4       	brcc	.+2      	; 0xb48 <estimate_distance+0x212>
     b46:	5e c1       	rjmp	.+700    	; 0xe04 <estimate_distance+0x4ce>
     b48:	e0 90 52 01 	lds	r14, 0x0152
     b4c:	f0 90 53 01 	lds	r15, 0x0153
     b50:	ec 14       	cp	r14, r12
     b52:	fd 04       	cpc	r15, r13
     b54:	08 f4       	brcc	.+2      	; 0xb58 <estimate_distance+0x222>
     b56:	5e c1       	rjmp	.+700    	; 0xe14 <estimate_distance+0x4de>
     b58:	e0 90 54 01 	lds	r14, 0x0154
     b5c:	f0 90 55 01 	lds	r15, 0x0155
     b60:	ec 14       	cp	r14, r12
     b62:	fd 04       	cpc	r15, r13
     b64:	08 f4       	brcc	.+2      	; 0xb68 <estimate_distance+0x232>
     b66:	5e c1       	rjmp	.+700    	; 0xe24 <estimate_distance+0x4ee>
     b68:	e0 90 56 01 	lds	r14, 0x0156
     b6c:	f0 90 57 01 	lds	r15, 0x0157
     b70:	ec 14       	cp	r14, r12
     b72:	fd 04       	cpc	r15, r13
     b74:	08 f4       	brcc	.+2      	; 0xb78 <estimate_distance+0x242>
     b76:	c3 c0       	rjmp	.+390    	; 0xcfe <estimate_distance+0x3c8>
     b78:	e0 90 58 01 	lds	r14, 0x0158
     b7c:	f0 90 59 01 	lds	r15, 0x0159
     b80:	ec 14       	cp	r14, r12
     b82:	fd 04       	cpc	r15, r13
     b84:	08 f4       	brcc	.+2      	; 0xb88 <estimate_distance+0x252>
     b86:	56 c1       	rjmp	.+684    	; 0xe34 <estimate_distance+0x4fe>
     b88:	e0 90 5a 01 	lds	r14, 0x015A
     b8c:	f0 90 5b 01 	lds	r15, 0x015B
     b90:	ec 14       	cp	r14, r12
     b92:	fd 04       	cpc	r15, r13
     b94:	08 f4       	brcc	.+2      	; 0xb98 <estimate_distance+0x262>
     b96:	56 c1       	rjmp	.+684    	; 0xe44 <estimate_distance+0x50e>
     b98:	e0 90 5c 01 	lds	r14, 0x015C
     b9c:	f0 90 5d 01 	lds	r15, 0x015D
     ba0:	ec 14       	cp	r14, r12
     ba2:	fd 04       	cpc	r15, r13
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <estimate_distance+0x272>
     ba6:	56 c1       	rjmp	.+684    	; 0xe54 <estimate_distance+0x51e>
     ba8:	e0 90 5e 01 	lds	r14, 0x015E
     bac:	f0 90 5f 01 	lds	r15, 0x015F
     bb0:	ec 14       	cp	r14, r12
     bb2:	fd 04       	cpc	r15, r13
     bb4:	08 f4       	brcc	.+2      	; 0xbb8 <estimate_distance+0x282>
     bb6:	56 c1       	rjmp	.+684    	; 0xe64 <estimate_distance+0x52e>
     bb8:	e0 90 60 01 	lds	r14, 0x0160
     bbc:	f0 90 61 01 	lds	r15, 0x0161
     bc0:	ec 14       	cp	r14, r12
     bc2:	fd 04       	cpc	r15, r13
     bc4:	08 f4       	brcc	.+2      	; 0xbc8 <estimate_distance+0x292>
     bc6:	56 c1       	rjmp	.+684    	; 0xe74 <estimate_distance+0x53e>
     bc8:	e0 90 62 01 	lds	r14, 0x0162
     bcc:	f0 90 63 01 	lds	r15, 0x0163
     bd0:	ec 14       	cp	r14, r12
     bd2:	fd 04       	cpc	r15, r13
     bd4:	08 f4       	brcc	.+2      	; 0xbd8 <estimate_distance+0x2a2>
     bd6:	5a c1       	rjmp	.+692    	; 0xe8c <estimate_distance+0x556>
     bd8:	e0 90 64 01 	lds	r14, 0x0164
     bdc:	f0 90 65 01 	lds	r15, 0x0165
     be0:	ec 14       	cp	r14, r12
     be2:	fd 04       	cpc	r15, r13
     be4:	08 f4       	brcc	.+2      	; 0xbe8 <estimate_distance+0x2b2>
     be6:	5a c1       	rjmp	.+692    	; 0xe9c <estimate_distance+0x566>
     be8:	e0 90 66 01 	lds	r14, 0x0166
     bec:	f0 90 67 01 	lds	r15, 0x0167
     bf0:	ec 14       	cp	r14, r12
     bf2:	fd 04       	cpc	r15, r13
     bf4:	08 f4       	brcc	.+2      	; 0xbf8 <estimate_distance+0x2c2>
     bf6:	5a c1       	rjmp	.+692    	; 0xeac <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     bf8:	0a e5       	ldi	r16, 0x5A	; 90
     bfa:	31 c0       	rjmp	.+98     	; 0xc5e <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     bfc:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     bfe:	ed 81       	ldd	r30, Y+5	; 0x05
     c00:	fe 81       	ldd	r31, Y+6	; 0x06
     c02:	ed 3b       	cpi	r30, 0xBD	; 189
     c04:	f2 40       	sbci	r31, 0x02	; 2
     c06:	fc f4       	brge	.+62     	; 0xc46 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c08:	81 e2       	ldi	r24, 0x21	; 33
     c0a:	81 0f       	add	r24, r17
    }
}
     c0c:	26 96       	adiw	r28, 0x06	; 6
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	3f 90       	pop	r3
     c3a:	2f 90       	pop	r2
     c3c:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c3e:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     c40:	81 e2       	ldi	r24, 0x21	; 33
     c42:	80 0f       	add	r24, r16
     c44:	e3 cf       	rjmp	.-58     	; 0xc0c <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c46:	d1 01       	movw	r26, r2
     c48:	cd 90       	ld	r12, X+
     c4a:	dc 90       	ld	r13, X
     c4c:	80 91 4c 01 	lds	r24, 0x014C
     c50:	90 91 4d 01 	lds	r25, 0x014D
     c54:	8c 15       	cp	r24, r12
     c56:	9d 05       	cpc	r25, r13
     c58:	08 f0       	brcs	.+2      	; 0xc5c <estimate_distance+0x326>
     c5a:	66 cf       	rjmp	.-308    	; 0xb28 <estimate_distance+0x1f2>
            dist_low=0;
     c5c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     c5e:	1f 3f       	cpi	r17, 0xFF	; 255
     c60:	79 f3       	breq	.-34     	; 0xc40 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     c62:	ed 81       	ldd	r30, Y+5	; 0x05
     c64:	fe 81       	ldd	r31, Y+6	; 0x06
     c66:	bf 01       	movw	r22, r30
     c68:	ff 0f       	add	r31, r31
     c6a:	88 0b       	sbc	r24, r24
     c6c:	99 0b       	sbc	r25, r25
     c6e:	0e 94 30 0c 	call	0x1860	; 0x1860 <__floatsisf>
     c72:	6b 01       	movw	r12, r22
     c74:	7c 01       	movw	r14, r24
     c76:	61 2f       	mov	r22, r17
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     c82:	4b 01       	movw	r8, r22
     c84:	5c 01       	movw	r10, r24
     c86:	a7 01       	movw	r20, r14
     c88:	96 01       	movw	r18, r12
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	81 e6       	ldi	r24, 0x61	; 97
     c90:	94 e4       	ldi	r25, 0x44	; 68
     c92:	0e 94 19 0b 	call	0x1632	; 0x1632 <__subsf3>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	c5 01       	movw	r24, r10
     c9c:	b4 01       	movw	r22, r8
     c9e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     ca2:	4b 01       	movw	r8, r22
     ca4:	5c 01       	movw	r10, r24
     ca6:	60 2f       	mov	r22, r16
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     cb2:	2b 01       	movw	r4, r22
     cb4:	3c 01       	movw	r6, r24
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	4f e2       	ldi	r20, 0x2F	; 47
     cbc:	54 e4       	ldi	r21, 0x44	; 68
     cbe:	c7 01       	movw	r24, r14
     cc0:	b6 01       	movw	r22, r12
     cc2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__subsf3>
     cc6:	9b 01       	movw	r18, r22
     cc8:	ac 01       	movw	r20, r24
     cca:	c3 01       	movw	r24, r6
     ccc:	b2 01       	movw	r22, r4
     cce:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	c5 01       	movw	r24, r10
     cd8:	b4 01       	movw	r22, r8
     cda:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__addsf3>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	48 e4       	ldi	r20, 0x48	; 72
     ce4:	53 e4       	ldi	r21, 0x43	; 67
     ce6:	0e 94 86 0b 	call	0x170c	; 0x170c <__divsf3>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	44 e0       	ldi	r20, 0x04	; 4
     cf0:	52 e4       	ldi	r21, 0x42	; 66
     cf2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__addsf3>
     cf6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fixunssfsi>
     cfa:	86 2f       	mov	r24, r22
     cfc:	87 cf       	rjmp	.-242    	; 0xc0c <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cfe:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     d00:	85 e0       	ldi	r24, 0x05	; 5
     d02:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	fc 01       	movw	r30, r24
     d0a:	e6 5b       	subi	r30, 0xB6	; 182
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	b7 01       	movw	r22, r14
     d14:	68 1b       	sub	r22, r24
     d16:	79 0b       	sbc	r23, r25
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__addsf3>
     d28:	4b 01       	movw	r8, r22
     d2a:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d2c:	b6 01       	movw	r22, r12
     d2e:	dd 0c       	add	r13, r13
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 94 30 0c 	call	0x1860	; 0x1860 <__floatsisf>
     d38:	2b 01       	movw	r4, r22
     d3a:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     d3c:	b7 01       	movw	r22, r14
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     d46:	6b 01       	movw	r12, r22
     d48:	7c 01       	movw	r14, r24
     d4a:	60 2f       	mov	r22, r16
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a9 01       	movw	r20, r18
     d68:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__addsf3>
     d6c:	a5 01       	movw	r20, r10
     d6e:	94 01       	movw	r18, r8
     d70:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     d74:	9b 01       	movw	r18, r22
     d76:	ac 01       	movw	r20, r24
     d78:	c7 01       	movw	r24, r14
     d7a:	b6 01       	movw	r22, r12
     d7c:	0e 94 19 0b 	call	0x1632	; 0x1632 <__subsf3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d84:	c3 01       	movw	r24, r6
     d86:	b2 01       	movw	r22, r4
     d88:	0e 94 19 0b 	call	0x1632	; 0x1632 <__subsf3>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
                b=((int)((int)b/(int)slope));
     d98:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     d9c:	7b 01       	movw	r14, r22
     d9e:	c5 01       	movw	r24, r10
     da0:	b4 01       	movw	r22, r8
     da2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     da6:	ab 01       	movw	r20, r22
     da8:	bc 01       	movw	r22, r24
     daa:	c7 01       	movw	r24, r14
     dac:	ba 01       	movw	r22, r20
     dae:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__divmodhi4>
                dist_low=b;
     db2:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     db4:	6f 3f       	cpi	r22, 0xFF	; 255
     db6:	09 f0       	breq	.+2      	; 0xdba <estimate_distance+0x484>
     db8:	52 cf       	rjmp	.-348    	; 0xc5e <estimate_distance+0x328>
     dba:	26 cf       	rjmp	.-436    	; 0xc08 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dbc:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     dbe:	85 e0       	ldi	r24, 0x05	; 5
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	7c 01       	movw	r14, r24
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	ef 1a       	sub	r14, r31
     dc8:	f1 08       	sbc	r15, r1
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 2e 0c 	call	0x185c	; 0x185c <__floatunsisf>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	a9 01       	movw	r20, r18
     de6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__addsf3>
     dea:	69 83       	std	Y+1, r22	; 0x01
     dec:	7a 83       	std	Y+2, r23	; 0x02
     dee:	8b 83       	std	Y+3, r24	; 0x03
     df0:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     df2:	40 ce       	rjmp	.-896    	; 0xa74 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     df4:	01 e0       	ldi	r16, 0x01	; 1
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	84 cf       	rjmp	.-248    	; 0xd04 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	df cf       	rjmp	.-66     	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e04:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	7c cf       	rjmp	.-264    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e0c:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	d7 cf       	rjmp	.-82     	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e14:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	74 cf       	rjmp	.-280    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e1c:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	cf cf       	rjmp	.-98     	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e24:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	6c cf       	rjmp	.-296    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e2c:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	c7 cf       	rjmp	.-114    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e34:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     e36:	86 e0       	ldi	r24, 0x06	; 6
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	64 cf       	rjmp	.-312    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e3c:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     e3e:	86 e0       	ldi	r24, 0x06	; 6
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	bf cf       	rjmp	.-130    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e44:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     e46:	87 e0       	ldi	r24, 0x07	; 7
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	5c cf       	rjmp	.-328    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e4c:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     e4e:	87 e0       	ldi	r24, 0x07	; 7
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	b7 cf       	rjmp	.-146    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e54:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     e56:	88 e0       	ldi	r24, 0x08	; 8
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	54 cf       	rjmp	.-344    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e5c:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     e5e:	88 e0       	ldi	r24, 0x08	; 8
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	af cf       	rjmp	.-162    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e64:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     e66:	89 e0       	ldi	r24, 0x09	; 9
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	4c cf       	rjmp	.-360    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e6c:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a7 cf       	rjmp	.-178    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e74:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     e76:	8a e0       	ldi	r24, 0x0A	; 10
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	44 cf       	rjmp	.-376    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e7c:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     e7e:	8a e0       	ldi	r24, 0x0A	; 10
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9f cf       	rjmp	.-194    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e84:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     e86:	8b e0       	ldi	r24, 0x0B	; 11
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	9b cf       	rjmp	.-202    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e8c:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     e8e:	8b e0       	ldi	r24, 0x0B	; 11
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	38 cf       	rjmp	.-400    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e94:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     e96:	8c e0       	ldi	r24, 0x0C	; 12
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	93 cf       	rjmp	.-218    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e9c:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     e9e:	8c e0       	ldi	r24, 0x0C	; 12
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	30 cf       	rjmp	.-416    	; 0xd04 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ea4:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     ea6:	8d e0       	ldi	r24, 0x0D	; 13
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	8b cf       	rjmp	.-234    	; 0xdc2 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eac:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     eae:	8d e0       	ldi	r24, 0x0D	; 13
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	28 cf       	rjmp	.-432    	; 0xd04 <estimate_distance+0x3ce>

00000eb4 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
    tx_clock += tx_increment;
     ed6:	20 91 6b 01 	lds	r18, 0x016B
     eda:	30 91 6c 01 	lds	r19, 0x016C
     ede:	80 91 69 01 	lds	r24, 0x0169
     ee2:	90 91 6a 01 	lds	r25, 0x016A
     ee6:	82 0f       	add	r24, r18
     ee8:	93 1f       	adc	r25, r19
     eea:	90 93 6c 01 	sts	0x016C, r25
     eee:	80 93 6b 01 	sts	0x016B, r24
    tx_increment = 0xFF;
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 6a 01 	sts	0x016A, r25
     efa:	80 93 69 01 	sts	0x0169, r24
    OCR0A = tx_increment;
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f02:	80 91 47 01 	lds	r24, 0x0147
     f06:	90 91 48 01 	lds	r25, 0x0148
     f0a:	a0 91 49 01 	lds	r26, 0x0149
     f0e:	b0 91 4a 01 	lds	r27, 0x014A
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	a1 1d       	adc	r26, r1
     f16:	b1 1d       	adc	r27, r1
     f18:	80 93 47 01 	sts	0x0147, r24
     f1c:	90 93 48 01 	sts	0x0148, r25
     f20:	a0 93 49 01 	sts	0x0149, r26
     f24:	b0 93 4a 01 	sts	0x014A, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f28:	80 91 4b 01 	lds	r24, 0x014B
     f2c:	81 11       	cpse	r24, r1
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <__vector_14+0x9a>
     f30:	80 91 7a 01 	lds	r24, 0x017A
     f34:	90 91 7b 01 	lds	r25, 0x017B
     f38:	20 91 6b 01 	lds	r18, 0x016B
     f3c:	30 91 6c 01 	lds	r19, 0x016C
     f40:	82 17       	cp	r24, r18
     f42:	93 07       	cpc	r25, r19
     f44:	20 f4       	brcc	.+8      	; 0xf4e <__vector_14+0x9a>
     f46:	80 91 17 01 	lds	r24, 0x0117
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	89 f0       	breq	.+34     	; 0xf70 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     f70:	e0 91 03 01 	lds	r30, 0x0103
     f74:	f0 91 04 01 	lds	r31, 0x0104
     f78:	09 95       	icall
        if (msg) {
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	41 f3       	breq	.-48     	; 0xf4e <__vector_14+0x9a>
            if (message_send(msg)) {
     f7e:	0e 94 42 0a 	call	0x1484	; 0x1484 <message_send>
     f82:	81 11       	cpse	r24, r1
     f84:	09 c0       	rjmp	.+18     	; 0xf98 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     f86:	0e 94 75 0d 	call	0x1aea	; 0x1aea <rand>
     f8a:	99 27       	eor	r25, r25
     f8c:	90 93 6a 01 	sts	0x016A, r25
     f90:	80 93 69 01 	sts	0x0169, r24
                OCR0A = tx_increment;
     f94:	87 bd       	out	0x27, r24	; 39
     f96:	db cf       	rjmp	.-74     	; 0xf4e <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     f98:	e0 91 01 01 	lds	r30, 0x0101
     f9c:	f0 91 02 01 	lds	r31, 0x0102
     fa0:	09 95       	icall
                tx_clock = 0;
     fa2:	10 92 6c 01 	sts	0x016C, r1
     fa6:	10 92 6b 01 	sts	0x016B, r1
     faa:	d1 cf       	rjmp	.-94     	; 0xf4e <__vector_14+0x9a>

00000fac <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     fac:	80 ff       	sbrs	r24, 0
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <set_color+0x26>
        DDRD |= (1<<5);
     fb0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     fb2:	81 ff       	sbrs	r24, 1
     fb4:	11 c0       	rjmp	.+34     	; 0xfd8 <set_color+0x2c>
        DDRD |= (1<<4);
     fb6:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     fb8:	82 ff       	sbrs	r24, 2
     fba:	11 c0       	rjmp	.+34     	; 0xfde <set_color+0x32>
        DDRC |= (1<<3);
     fbc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     fbe:	83 ff       	sbrs	r24, 3
     fc0:	11 c0       	rjmp	.+34     	; 0xfe4 <set_color+0x38>
        DDRC |= (1<<2);
     fc2:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     fc4:	84 ff       	sbrs	r24, 4
     fc6:	11 c0       	rjmp	.+34     	; 0xfea <set_color+0x3e>
        DDRC |= (1<<5);
     fc8:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     fca:	85 fd       	sbrc	r24, 5
     fcc:	11 c0       	rjmp	.+34     	; 0xff0 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     fce:	3c 98       	cbi	0x07, 4	; 7
     fd0:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     fd2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     fd4:	81 fd       	sbrc	r24, 1
     fd6:	ef cf       	rjmp	.-34     	; 0xfb6 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     fd8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     fda:	82 fd       	sbrc	r24, 2
     fdc:	ef cf       	rjmp	.-34     	; 0xfbc <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     fde:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     fe0:	83 fd       	sbrc	r24, 3
     fe2:	ef cf       	rjmp	.-34     	; 0xfc2 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     fe4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     fe6:	84 fd       	sbrc	r24, 4
     fe8:	ef cf       	rjmp	.-34     	; 0xfc8 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     fea:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     fec:	85 ff       	sbrs	r24, 5
     fee:	ef cf       	rjmp	.-34     	; 0xfce <set_color+0x22>
        DDRC |= (1<<4);
     ff0:	3c 9a       	sbi	0x07, 4	; 7
     ff2:	08 95       	ret

00000ff4 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    rx_timer_off();
    1002:	10 92 81 00 	sts	0x0081, r1
    1006:	10 92 85 00 	sts	0x0085, r1
    100a:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 24 01 	sts	0x0124, r24
    rx_leadingbyte = 1;
    1014:	80 93 68 01 	sts	0x0168, r24
    rx_busy = 0;
    1018:	10 92 4b 01 	sts	0x014B, r1
    adc_trigger_high_gain();
    101c:	10 92 7c 00 	sts	0x007C, r1
    1020:	93 ea       	ldi	r25, 0xA3	; 163
    1022:	90 93 7a 00 	sts	0x007A, r25
    1026:	80 93 7b 00 	sts	0x007B, r24
}
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    105e:	20 91 84 00 	lds	r18, 0x0084
    1062:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	40 93 4b 01 	sts	0x014B, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    106c:	80 91 24 01 	lds	r24, 0x0124
    1070:	88 23       	and	r24, r24
    1072:	a9 f1       	breq	.+106    	; 0x10de <__vector_23+0xa6>
        rx_timer_on();
    1074:	10 92 85 00 	sts	0x0085, r1
    1078:	10 92 84 00 	sts	0x0084, r1
    107c:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1080:	10 92 7c 01 	sts	0x017C, r1
        rx_leadingbit = 0;
    1084:	10 92 24 01 	sts	0x0124, r1
        if (rx_leadingbyte) {
    1088:	80 91 68 01 	lds	r24, 0x0168
    108c:	88 23       	and	r24, r24
    108e:	a1 f0       	breq	.+40     	; 0x10b8 <__vector_23+0x80>
            adc_finish_conversion();
    1090:	80 91 7a 00 	lds	r24, 0x007A
    1094:	86 fd       	sbrc	r24, 6
    1096:	fc cf       	rjmp	.-8      	; 0x1090 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1098:	80 91 78 00 	lds	r24, 0x0078
    109c:	90 91 79 00 	lds	r25, 0x0079
    10a0:	90 93 46 01 	sts	0x0146, r25
    10a4:	80 93 45 01 	sts	0x0145, r24
            adc_trigger_low_gain();
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 7c 00 	sts	0x007C, r24
    10ae:	93 ea       	ldi	r25, 0xA3	; 163
    10b0:	90 93 7a 00 	sts	0x007A, r25
    10b4:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    10de:	c9 01       	movw	r24, r18
    10e0:	87 58       	subi	r24, 0x87	; 135
    10e2:	91 09       	sbc	r25, r1
    10e4:	84 37       	cpi	r24, 0x74	; 116
    10e6:	99 40       	sbci	r25, 0x09	; 9
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__vector_23+0xb4>
    10ea:	52 c0       	rjmp	.+164    	; 0x1190 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    10ec:	26 58       	subi	r18, 0x86	; 134
    10ee:	31 09       	sbc	r19, r1
    10f0:	a4 ef       	ldi	r26, 0xF4	; 244
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__umulhisi3>
    10f8:	aa 27       	eor	r26, r26
    10fa:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    10fc:	88 30       	cpi	r24, 0x08	; 8
    10fe:	91 05       	cpc	r25, r1
    1100:	a1 05       	cpc	r26, r1
    1102:	b1 05       	cpc	r27, r1
    1104:	08 f4       	brcc	.+2      	; 0x1108 <__vector_23+0xd0>
    1106:	7b c0       	rjmp	.+246    	; 0x11fe <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1108:	40 93 24 01 	sts	0x0124, r20
                if (rx_leadingbyte) {
    110c:	80 91 68 01 	lds	r24, 0x0168
    1110:	81 11       	cpse	r24, r1
    1112:	52 c0       	rjmp	.+164    	; 0x11b8 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1114:	80 91 42 01 	lds	r24, 0x0142
    1118:	e8 2f       	mov	r30, r24
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	e2 59       	subi	r30, 0x92	; 146
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	90 91 7c 01 	lds	r25, 0x017C
    1124:	90 83       	st	Z, r25
                    rx_byteindex++;
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 93 42 01 	sts	0x0142, r24
                    if (rx_byteindex == sizeof(message_t)) {
    112c:	8c 30       	cpi	r24, 0x0C	; 12
    112e:	21 f6       	brne	.-120    	; 0x10b8 <__vector_23+0x80>
                        rx_timer_off();
    1130:	10 92 81 00 	sts	0x0081, r1
    1134:	10 92 85 00 	sts	0x0085, r1
    1138:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    113c:	40 93 68 01 	sts	0x0168, r20
                        rx_busy = 0;
    1140:	10 92 4b 01 	sts	0x014B, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1144:	c0 91 78 01 	lds	r28, 0x0178
    1148:	d0 91 79 01 	lds	r29, 0x0179
    114c:	8e e6       	ldi	r24, 0x6E	; 110
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 26 0a 	call	0x144c	; 0x144c <message_crc>
    1154:	c8 17       	cp	r28, r24
    1156:	d9 07       	cpc	r29, r25
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_23+0x124>
    115a:	ae cf       	rjmp	.-164    	; 0x10b8 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    115c:	80 91 77 01 	lds	r24, 0x0177
    1160:	87 ff       	sbrs	r24, 7
    1162:	61 c0       	rjmp	.+194    	; 0x1226 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1164:	98 e7       	ldi	r25, 0x78	; 120
    1166:	98 0f       	add	r25, r24
    1168:	93 30       	cpi	r25, 0x03	; 3
    116a:	30 f0       	brcs	.+12     	; 0x1178 <__vector_23+0x140>
        motors_off();
    116c:	53 98       	cbi	0x0a, 3	; 10
    116e:	23 98       	cbi	0x04, 3	; 4
    1170:	10 92 b4 00 	sts	0x00B4, r1
    1174:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fc 01       	movw	r30, r24
    117c:	e0 58       	subi	r30, 0x80	; 128
    117e:	f1 09       	sbc	r31, r1
    1180:	eb 30       	cpi	r30, 0x0B	; 11
    1182:	f1 05       	cpc	r31, r1
    1184:	08 f0       	brcs	.+2      	; 0x1188 <__vector_23+0x150>
    1186:	98 cf       	rjmp	.-208    	; 0x10b8 <__vector_23+0x80>
    1188:	e5 5c       	subi	r30, 0xC5	; 197
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1190:	10 92 81 00 	sts	0x0081, r1
    1194:	10 92 85 00 	sts	0x0085, r1
    1198:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    119c:	40 93 24 01 	sts	0x0124, r20
            rx_leadingbyte = 1;
    11a0:	40 93 68 01 	sts	0x0168, r20
            rx_busy = 0;
    11a4:	10 92 4b 01 	sts	0x014B, r1
            adc_trigger_high_gain();
    11a8:	10 92 7c 00 	sts	0x007C, r1
    11ac:	83 ea       	ldi	r24, 0xA3	; 163
    11ae:	80 93 7a 00 	sts	0x007A, r24
    11b2:	40 93 7b 00 	sts	0x007B, r20
    11b6:	80 cf       	rjmp	.-256    	; 0x10b8 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    11b8:	80 91 7a 00 	lds	r24, 0x007A
    11bc:	86 fd       	sbrc	r24, 6
    11be:	fc cf       	rjmp	.-8      	; 0x11b8 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    11c0:	80 91 78 00 	lds	r24, 0x0078
    11c4:	90 91 79 00 	lds	r25, 0x0079
    11c8:	90 93 44 01 	sts	0x0144, r25
    11cc:	80 93 43 01 	sts	0x0143, r24
                    adc_trigger_high_gain();
    11d0:	10 92 7c 00 	sts	0x007C, r1
    11d4:	83 ea       	ldi	r24, 0xA3	; 163
    11d6:	80 93 7a 00 	sts	0x007A, r24
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    11e0:	90 91 7c 01 	lds	r25, 0x017C
    11e4:	99 23       	and	r25, r25
    11e6:	d1 f0       	breq	.+52     	; 0x121c <__vector_23+0x1e4>
                        rx_timer_off();
    11e8:	10 92 81 00 	sts	0x0081, r1
    11ec:	10 92 85 00 	sts	0x0085, r1
    11f0:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    11f4:	80 93 68 01 	sts	0x0168, r24
                        rx_busy = 0;
    11f8:	10 92 4b 01 	sts	0x014B, r1
    11fc:	5d cf       	rjmp	.-326    	; 0x10b8 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	f9 01       	movw	r30, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__vector_23+0x1d2>
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <__vector_23+0x1ce>
    120e:	cf 01       	movw	r24, r30
    1210:	90 91 7c 01 	lds	r25, 0x017C
    1214:	89 2b       	or	r24, r25
    1216:	80 93 7c 01 	sts	0x017C, r24
    121a:	4e cf       	rjmp	.-356    	; 0x10b8 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    121c:	10 92 68 01 	sts	0x0168, r1
                        rx_byteindex = 0;
    1220:	10 92 42 01 	sts	0x0142, r1
    1224:	49 cf       	rjmp	.-366    	; 0x10b8 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1226:	e0 91 05 01 	lds	r30, 0x0105
    122a:	f0 91 06 01 	lds	r31, 0x0106
    122e:	63 e4       	ldi	r22, 0x43	; 67
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	8e e6       	ldi	r24, 0x6E	; 110
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	09 95       	icall
    1238:	3f cf       	rjmp	.-386    	; 0x10b8 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    123a:	80 91 6e 01 	lds	r24, 0x016E
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	09 f4       	brne	.+2      	; 0x1244 <__vector_23+0x20c>
    1242:	dd c0       	rjmp	.+442    	; 0x13fe <__vector_23+0x3c6>
    1244:	08 f4       	brcc	.+2      	; 0x1248 <__vector_23+0x210>
    1246:	ba c0       	rjmp	.+372    	; 0x13bc <__vector_23+0x384>
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	09 f4       	brne	.+2      	; 0x124e <__vector_23+0x216>
    124c:	c6 c0       	rjmp	.+396    	; 0x13da <__vector_23+0x3a2>
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	09 f0       	breq	.+2      	; 0x1254 <__vector_23+0x21c>
    1252:	b1 c0       	rjmp	.+354    	; 0x13b6 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1254:	80 91 15 01 	lds	r24, 0x0115
    1258:	90 91 74 01 	lds	r25, 0x0174
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	09 f4       	brne	.+2      	; 0x1262 <__vector_23+0x22a>
    1260:	e3 c0       	rjmp	.+454    	; 0x1428 <__vector_23+0x3f0>
    1262:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    1266:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    126a:	23 e0       	ldi	r18, 0x03	; 3
    126c:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    1270:	80 93 7f 01 	sts	0x017F, r24
                        kilo_straight_right = calibmsg->straight_right;
    1274:	90 93 80 01 	sts	0x0180, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1278:	80 91 17 01 	lds	r24, 0x0117
    127c:	86 30       	cpi	r24, 0x06	; 6
    127e:	09 f4       	brne	.+2      	; 0x1282 <__vector_23+0x24a>
    1280:	1b cf       	rjmp	.-458    	; 0x10b8 <__vector_23+0x80>
                motors_on();
    1282:	53 9a       	sbi	0x0a, 3	; 10
    1284:	23 9a       	sbi	0x04, 3	; 4
    1286:	10 92 b4 00 	sts	0x00B4, r1
    128a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    128e:	86 e0       	ldi	r24, 0x06	; 6
    1290:	80 93 17 01 	sts	0x0117, r24
    1294:	11 cf       	rjmp	.-478    	; 0x10b8 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1296:	80 91 17 01 	lds	r24, 0x0117
    129a:	86 30       	cpi	r24, 0x06	; 6
    129c:	99 f0       	breq	.+38     	; 0x12c4 <__vector_23+0x28c>
                motors_on();
    129e:	53 9a       	sbi	0x0a, 3	; 10
    12a0:	23 9a       	sbi	0x04, 3	; 4
    12a2:	10 92 b4 00 	sts	0x00B4, r1
    12a6:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    12aa:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    12ac:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    12ae:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    12b0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    12b2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    12b4:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    12b6:	10 92 15 01 	sts	0x0115, r1
    12ba:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    12be:	86 e0       	ldi	r24, 0x06	; 6
    12c0:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 01       	movw	r18, r24
    12ca:	00 90 6e 01 	lds	r0, 0x016E
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <__vector_23+0x29c>
    12d0:	22 0f       	add	r18, r18
    12d2:	33 1f       	adc	r19, r19
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <__vector_23+0x298>
    12d8:	80 91 7d 01 	lds	r24, 0x017D
    12dc:	90 91 7e 01 	lds	r25, 0x017E
    12e0:	82 23       	and	r24, r18
    12e2:	93 23       	and	r25, r19
    12e4:	89 2b       	or	r24, r25
    12e6:	09 f0       	breq	.+2      	; 0x12ea <__vector_23+0x2b2>
    12e8:	86 c0       	rjmp	.+268    	; 0x13f6 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    12ea:	10 92 15 01 	sts	0x0115, r1
    12ee:	e4 ce       	rjmp	.-568    	; 0x10b8 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 17 01 	sts	0x0117, r24
    12f6:	e0 ce       	rjmp	.-576    	; 0x10b8 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    12f8:	e0 e0       	ldi	r30, 0x00	; 0
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    12fe:	80 91 6e 00 	lds	r24, 0x006E
    1302:	8d 7f       	andi	r24, 0xFD	; 253
    1304:	80 93 6e 00 	sts	0x006E, r24
    1308:	16 bc       	out	0x26, r1	; 38
            bootload();
    130a:	e0 e0       	ldi	r30, 0x00	; 0
    130c:	f0 e7       	ldi	r31, 0x70	; 112
    130e:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1310:	10 92 17 01 	sts	0x0117, r1
    1314:	d1 ce       	rjmp	.-606    	; 0x10b8 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	80 93 17 01 	sts	0x0117, r24
    131c:	cd ce       	rjmp	.-614    	; 0x10b8 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    131e:	85 e0       	ldi	r24, 0x05	; 5
    1320:	80 93 17 01 	sts	0x0117, r24
    1324:	c9 ce       	rjmp	.-622    	; 0x10b8 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1326:	80 91 17 01 	lds	r24, 0x0117
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	09 f4       	brne	.+2      	; 0x1330 <__vector_23+0x2f8>
    132e:	c4 ce       	rjmp	.-632    	; 0x10b8 <__vector_23+0x80>
    1330:	80 91 17 01 	lds	r24, 0x0117
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	09 f4       	brne	.+2      	; 0x133a <__vector_23+0x302>
    1338:	bf ce       	rjmp	.-642    	; 0x10b8 <__vector_23+0x80>
                motors_on();
    133a:	53 9a       	sbi	0x0a, 3	; 10
    133c:	23 9a       	sbi	0x04, 3	; 4
    133e:	10 92 b4 00 	sts	0x00B4, r1
    1342:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	80 93 17 01 	sts	0x0117, r24
    134c:	b5 ce       	rjmp	.-662    	; 0x10b8 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    134e:	80 91 17 01 	lds	r24, 0x0117
    1352:	86 30       	cpi	r24, 0x06	; 6
    1354:	09 f0       	breq	.+2      	; 0x1358 <__vector_23+0x320>
    1356:	b0 ce       	rjmp	.-672    	; 0x10b8 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1358:	60 91 7d 01 	lds	r22, 0x017D
    135c:	80 eb       	ldi	r24, 0xB0	; 176
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1364:	60 91 7e 01 	lds	r22, 0x017E
    1368:	81 eb       	ldi	r24, 0xB1	; 177
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1370:	60 91 81 01 	lds	r22, 0x0181
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    137c:	60 91 6d 01 	lds	r22, 0x016D
    1380:	89 e0       	ldi	r24, 0x09	; 9
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1388:	60 91 7f 01 	lds	r22, 0x017F
    138c:	8c e0       	ldi	r24, 0x0C	; 12
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1394:	60 91 80 01 	lds	r22, 0x0180
    1398:	84 e1       	ldi	r24, 0x14	; 20
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <eeprom_write_byte>
                        motors_off();
    13a0:	53 98       	cbi	0x0a, 3	; 10
    13a2:	23 98       	cbi	0x04, 3	; 4
    13a4:	10 92 b4 00 	sts	0x00B4, r1
    13a8:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 17 01 	sts	0x0117, r24
    13b2:	80 91 6e 01 	lds	r24, 0x016E
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13b6:	81 11       	cpse	r24, r1
    13b8:	5f cf       	rjmp	.-322    	; 0x1278 <__vector_23+0x240>
    13ba:	7e ce       	rjmp	.-772    	; 0x10b8 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13bc:	88 23       	and	r24, r24
    13be:	39 f2       	breq	.-114    	; 0x134e <__vector_23+0x316>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	c9 f7       	brne	.-14     	; 0x13b6 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    13c4:	80 91 6f 01 	lds	r24, 0x016F
    13c8:	90 91 70 01 	lds	r25, 0x0170
    13cc:	90 93 7e 01 	sts	0x017E, r25
    13d0:	80 93 7d 01 	sts	0x017D, r24
                    cur_motion = MOVE_STOP;
    13d4:	10 92 15 01 	sts	0x0115, r1
    13d8:	4f cf       	rjmp	.-354    	; 0x1278 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    13da:	80 91 15 01 	lds	r24, 0x0115
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	71 f1       	breq	.+92     	; 0x143e <__vector_23+0x406>
    13e2:	80 91 72 01 	lds	r24, 0x0172
                        prev_motion = MOVE_STOP;
    13e6:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    13f0:	80 93 6d 01 	sts	0x016D, r24
    13f4:	41 cf       	rjmp	.-382    	; 0x1278 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	80 93 15 01 	sts	0x0115, r24
    13fc:	5d ce       	rjmp	.-838    	; 0x10b8 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    13fe:	80 91 15 01 	lds	r24, 0x0115
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	51 f0       	breq	.+20     	; 0x141a <__vector_23+0x3e2>
    1406:	80 91 71 01 	lds	r24, 0x0171
                        prev_motion = MOVE_STOP;
    140a:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    1414:	80 93 81 01 	sts	0x0181, r24
    1418:	2f cf       	rjmp	.-418    	; 0x1278 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    141a:	80 91 71 01 	lds	r24, 0x0171
    141e:	90 91 81 01 	lds	r25, 0x0181
    1422:	89 13       	cpse	r24, r25
    1424:	f2 cf       	rjmp	.-28     	; 0x140a <__vector_23+0x3d2>
    1426:	28 cf       	rjmp	.-432    	; 0x1278 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1428:	80 91 80 01 	lds	r24, 0x0180
    142c:	98 13       	cpse	r25, r24
    142e:	19 cf       	rjmp	.-462    	; 0x1262 <__vector_23+0x22a>
    1430:	80 91 73 01 	lds	r24, 0x0173
    1434:	20 91 7f 01 	lds	r18, 0x017F
    1438:	82 13       	cpse	r24, r18
    143a:	15 cf       	rjmp	.-470    	; 0x1266 <__vector_23+0x22e>
    143c:	1d cf       	rjmp	.-454    	; 0x1278 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    143e:	80 91 72 01 	lds	r24, 0x0172
    1442:	90 91 6d 01 	lds	r25, 0x016D
    1446:	89 13       	cpse	r24, r25
    1448:	ce cf       	rjmp	.-100    	; 0x13e6 <__vector_23+0x3ae>
    144a:	16 cf       	rjmp	.-468    	; 0x1278 <__vector_23+0x240>

0000144c <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    144c:	fc 01       	movw	r30, r24
    144e:	ac 01       	movw	r20, r24
    1450:	46 5f       	subi	r20, 0xF6	; 246
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1458:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    145a:	82 27       	eor	r24, r18
    145c:	08 2e       	mov	r0, r24
    145e:	82 95       	swap	r24
    1460:	80 7f       	andi	r24, 0xF0	; 240
    1462:	80 25       	eor	r24, r0
    1464:	09 2e       	mov	r0, r25
    1466:	98 2f       	mov	r25, r24
    1468:	82 95       	swap	r24
    146a:	8f 70       	andi	r24, 0x0F	; 15
    146c:	08 26       	eor	r0, r24
    146e:	86 95       	lsr	r24
    1470:	98 27       	eor	r25, r24
    1472:	89 27       	eor	r24, r25
    1474:	88 0f       	add	r24, r24
    1476:	88 0f       	add	r24, r24
    1478:	88 0f       	add	r24, r24
    147a:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    147c:	e4 17       	cp	r30, r20
    147e:	f5 07       	cpc	r31, r21
    1480:	59 f7       	brne	.-42     	; 0x1458 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1482:	08 95       	ret

00001484 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1484:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1486:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1488:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    148a:	20 91 41 01 	lds	r18, 0x0141
    or tmpreg1, ddrreg
    148e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1490:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1492:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1494:	30 91 41 01 	lds	r19, 0x0141
    1498:	20 30       	cpi	r18, 0x00	; 0
    149a:	29 f0       	breq	.+10     	; 0x14a6 <message_send+0x22>
    149c:	00 00       	nop
    149e:	25 b1       	in	r18, 0x05	; 5
    14a0:	23 2b       	or	r18, r19
    14a2:	25 b9       	out	0x05, r18	; 5
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <message_send+0x2a>
    14a6:	00 00       	nop
    14a8:	00 00       	nop
    14aa:	00 00       	nop
    14ac:	00 c0       	rjmp	.+0      	; 0x14ae <message_send+0x2a>
    14ae:	00 00       	nop
    14b0:	00 00       	nop
    14b2:	00 00       	nop
    14b4:	30 95       	com	r19
    14b6:	25 b1       	in	r18, 0x05	; 5
    14b8:	23 23       	and	r18, r19
    14ba:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    14bc:	2e ea       	ldi	r18, 0xAE	; 174
    14be:	2a 95       	dec	r18
    14c0:	f1 f7       	brne	.-4      	; 0x14be <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    14c2:	2b ee       	ldi	r18, 0xEB	; 235

000014c4 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    14c4:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    14c6:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14ca:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14cc:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    14d0:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14d2:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14d4:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14d6:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14d8:	0f be       	out	0x3f, r0	; 63
    return 0
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	08 95       	ret

000014de <nocollision>:
nocollision:
    nop
    14de:	00 00       	nop
    dec tmpreg1
    14e0:	2a 95       	dec	r18
    brne checkcollision
    14e2:	81 f7       	brne	.-32     	; 0x14c4 <checkcollision>

    ldi tmpreg1, 0x01
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14e6:	30 91 41 01 	lds	r19, 0x0141
    14ea:	20 30       	cpi	r18, 0x00	; 0
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <nocollision+0x1a>
    14ee:	00 00       	nop
    14f0:	25 b1       	in	r18, 0x05	; 5
    14f2:	23 2b       	or	r18, r19
    14f4:	25 b9       	out	0x05, r18	; 5
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <nocollision+0x22>
    14f8:	00 00       	nop
    14fa:	00 00       	nop
    14fc:	00 00       	nop
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <nocollision+0x22>
    1500:	00 00       	nop
    1502:	00 00       	nop
    1504:	00 00       	nop
    1506:	30 95       	com	r19
    1508:	25 b1       	in	r18, 0x05	; 5
    150a:	23 23       	and	r18, r19
    150c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    150e:	00 00       	nop
    1510:	24 e5       	ldi	r18, 0x54	; 84
    1512:	2a 95       	dec	r18
    1514:	f1 f7       	brne	.-4      	; 0x1512 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1516:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1518:	8c e0       	ldi	r24, 0x0C	; 12

0000151a <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    151a:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    151c:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    151e:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1520:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1522:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1524:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1526:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1528:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    152a:	50 e0       	ldi	r21, 0x00	; 0

0000152c <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    152c:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    152e:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1530:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1532:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1534:	30 91 41 01 	lds	r19, 0x0141
    1538:	20 30       	cpi	r18, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <sendbit+0x1a>
    153c:	00 00       	nop
    153e:	25 b1       	in	r18, 0x05	; 5
    1540:	23 2b       	or	r18, r19
    1542:	25 b9       	out	0x05, r18	; 5
    1544:	04 c0       	rjmp	.+8      	; 0x154e <sendbit+0x22>
    1546:	00 00       	nop
    1548:	00 00       	nop
    154a:	00 00       	nop
    154c:	00 c0       	rjmp	.+0      	; 0x154e <sendbit+0x22>
    154e:	00 00       	nop
    1550:	00 00       	nop
    1552:	00 00       	nop
    1554:	30 95       	com	r19
    1556:	25 b1       	in	r18, 0x05	; 5
    1558:	23 23       	and	r18, r19
    155a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    155c:	00 00       	nop
    155e:	21 e5       	ldi	r18, 0x51	; 81
    1560:	2a 95       	dec	r18
    1562:	f1 f7       	brne	.-4      	; 0x1560 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1564:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1566:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1568:	9a 95       	dec	r25
    brne sendbit
    156a:	01 f7       	brne	.-64     	; 0x152c <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    156c:	8a 95       	dec	r24
    brne sendbyte
    156e:	a9 f6       	brne	.-86     	; 0x151a <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1570:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1572:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1574:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1576:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1578:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    157c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    157e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1580:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1582:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1584:	0f be       	out	0x3f, r0	; 63
    return 1
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	08 95       	ret

0000158a <main>:
    return &message;
}

int main()
{
    kilo_init();
    158a:	0e 94 56 01 	call	0x2ac	; 0x2ac <kilo_init>
    kilo_message_rx = message_rx;
    158e:	81 e7       	ldi	r24, 0x71	; 113
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	90 93 06 01 	sts	0x0106, r25
    1596:	80 93 05 01 	sts	0x0105, r24
    kilo_message_tx = message_tx;
    159a:	88 e7       	ldi	r24, 0x78	; 120
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	90 93 04 01 	sts	0x0104, r25
    15a2:	80 93 03 01 	sts	0x0103, r24
    kilo_start(setup, loop);
    15a6:	68 e8       	ldi	r22, 0x88	; 136
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	8b e7       	ldi	r24, 0x7B	; 123
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 52 02 	call	0x4a4	; 0x4a4 <kilo_start>
    
    return 0;
}
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	08 95       	ret

000015b8 <__divmodhi4>:
    15b8:	97 fb       	bst	r25, 7
    15ba:	07 2e       	mov	r0, r23
    15bc:	16 f4       	brtc	.+4      	; 0x15c2 <__divmodhi4+0xa>
    15be:	00 94       	com	r0
    15c0:	07 d0       	rcall	.+14     	; 0x15d0 <__divmodhi4_neg1>
    15c2:	77 fd       	sbrc	r23, 7
    15c4:	09 d0       	rcall	.+18     	; 0x15d8 <__divmodhi4_neg2>
    15c6:	0e 94 05 0b 	call	0x160a	; 0x160a <__udivmodhi4>
    15ca:	07 fc       	sbrc	r0, 7
    15cc:	05 d0       	rcall	.+10     	; 0x15d8 <__divmodhi4_neg2>
    15ce:	3e f4       	brtc	.+14     	; 0x15de <__divmodhi4_exit>

000015d0 <__divmodhi4_neg1>:
    15d0:	90 95       	com	r25
    15d2:	81 95       	neg	r24
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	08 95       	ret

000015d8 <__divmodhi4_neg2>:
    15d8:	70 95       	com	r23
    15da:	61 95       	neg	r22
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255

000015de <__divmodhi4_exit>:
    15de:	08 95       	ret

000015e0 <__tablejump2__>:
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	05 90       	lpm	r0, Z+
    15e6:	f4 91       	lpm	r31, Z
    15e8:	e0 2d       	mov	r30, r0
    15ea:	09 94       	ijmp

000015ec <__umulhisi3>:
    15ec:	a2 9f       	mul	r26, r18
    15ee:	b0 01       	movw	r22, r0
    15f0:	b3 9f       	mul	r27, r19
    15f2:	c0 01       	movw	r24, r0
    15f4:	a3 9f       	mul	r26, r19
    15f6:	70 0d       	add	r23, r0
    15f8:	81 1d       	adc	r24, r1
    15fa:	11 24       	eor	r1, r1
    15fc:	91 1d       	adc	r25, r1
    15fe:	b2 9f       	mul	r27, r18
    1600:	70 0d       	add	r23, r0
    1602:	81 1d       	adc	r24, r1
    1604:	11 24       	eor	r1, r1
    1606:	91 1d       	adc	r25, r1
    1608:	08 95       	ret

0000160a <__udivmodhi4>:
    160a:	aa 1b       	sub	r26, r26
    160c:	bb 1b       	sub	r27, r27
    160e:	51 e1       	ldi	r21, 0x11	; 17
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <__udivmodhi4_ep>

00001612 <__udivmodhi4_loop>:
    1612:	aa 1f       	adc	r26, r26
    1614:	bb 1f       	adc	r27, r27
    1616:	a6 17       	cp	r26, r22
    1618:	b7 07       	cpc	r27, r23
    161a:	10 f0       	brcs	.+4      	; 0x1620 <__udivmodhi4_ep>
    161c:	a6 1b       	sub	r26, r22
    161e:	b7 0b       	sbc	r27, r23

00001620 <__udivmodhi4_ep>:
    1620:	88 1f       	adc	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	5a 95       	dec	r21
    1626:	a9 f7       	brne	.-22     	; 0x1612 <__udivmodhi4_loop>
    1628:	80 95       	com	r24
    162a:	90 95       	com	r25
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	08 95       	ret

00001632 <__subsf3>:
    1632:	50 58       	subi	r21, 0x80	; 128

00001634 <__addsf3>:
    1634:	bb 27       	eor	r27, r27
    1636:	aa 27       	eor	r26, r26
    1638:	0e 94 31 0b 	call	0x1662	; 0x1662 <__addsf3x>
    163c:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__fp_round>
    1640:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    1644:	38 f0       	brcs	.+14     	; 0x1654 <__addsf3+0x20>
    1646:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    164a:	20 f0       	brcs	.+8      	; 0x1654 <__addsf3+0x20>
    164c:	39 f4       	brne	.+14     	; 0x165c <__addsf3+0x28>
    164e:	9f 3f       	cpi	r25, 0xFF	; 255
    1650:	19 f4       	brne	.+6      	; 0x1658 <__addsf3+0x24>
    1652:	26 f4       	brtc	.+8      	; 0x165c <__addsf3+0x28>
    1654:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>
    1658:	0e f4       	brtc	.+2      	; 0x165c <__addsf3+0x28>
    165a:	e0 95       	com	r30
    165c:	e7 fb       	bst	r30, 7
    165e:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>

00001662 <__addsf3x>:
    1662:	e9 2f       	mov	r30, r25
    1664:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_split3>
    1668:	58 f3       	brcs	.-42     	; 0x1640 <__addsf3+0xc>
    166a:	ba 17       	cp	r27, r26
    166c:	62 07       	cpc	r22, r18
    166e:	73 07       	cpc	r23, r19
    1670:	84 07       	cpc	r24, r20
    1672:	95 07       	cpc	r25, r21
    1674:	20 f0       	brcs	.+8      	; 0x167e <__addsf3x+0x1c>
    1676:	79 f4       	brne	.+30     	; 0x1696 <__addsf3x+0x34>
    1678:	a6 f5       	brtc	.+104    	; 0x16e2 <__addsf3x+0x80>
    167a:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_zero>
    167e:	0e f4       	brtc	.+2      	; 0x1682 <__addsf3x+0x20>
    1680:	e0 95       	com	r30
    1682:	0b 2e       	mov	r0, r27
    1684:	ba 2f       	mov	r27, r26
    1686:	a0 2d       	mov	r26, r0
    1688:	0b 01       	movw	r0, r22
    168a:	b9 01       	movw	r22, r18
    168c:	90 01       	movw	r18, r0
    168e:	0c 01       	movw	r0, r24
    1690:	ca 01       	movw	r24, r20
    1692:	a0 01       	movw	r20, r0
    1694:	11 24       	eor	r1, r1
    1696:	ff 27       	eor	r31, r31
    1698:	59 1b       	sub	r21, r25
    169a:	99 f0       	breq	.+38     	; 0x16c2 <__addsf3x+0x60>
    169c:	59 3f       	cpi	r21, 0xF9	; 249
    169e:	50 f4       	brcc	.+20     	; 0x16b4 <__addsf3x+0x52>
    16a0:	50 3e       	cpi	r21, 0xE0	; 224
    16a2:	68 f1       	brcs	.+90     	; 0x16fe <__addsf3x+0x9c>
    16a4:	1a 16       	cp	r1, r26
    16a6:	f0 40       	sbci	r31, 0x00	; 0
    16a8:	a2 2f       	mov	r26, r18
    16aa:	23 2f       	mov	r18, r19
    16ac:	34 2f       	mov	r19, r20
    16ae:	44 27       	eor	r20, r20
    16b0:	58 5f       	subi	r21, 0xF8	; 248
    16b2:	f3 cf       	rjmp	.-26     	; 0x169a <__addsf3x+0x38>
    16b4:	46 95       	lsr	r20
    16b6:	37 95       	ror	r19
    16b8:	27 95       	ror	r18
    16ba:	a7 95       	ror	r26
    16bc:	f0 40       	sbci	r31, 0x00	; 0
    16be:	53 95       	inc	r21
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <__addsf3x+0x52>
    16c2:	7e f4       	brtc	.+30     	; 0x16e2 <__addsf3x+0x80>
    16c4:	1f 16       	cp	r1, r31
    16c6:	ba 0b       	sbc	r27, r26
    16c8:	62 0b       	sbc	r22, r18
    16ca:	73 0b       	sbc	r23, r19
    16cc:	84 0b       	sbc	r24, r20
    16ce:	ba f0       	brmi	.+46     	; 0x16fe <__addsf3x+0x9c>
    16d0:	91 50       	subi	r25, 0x01	; 1
    16d2:	a1 f0       	breq	.+40     	; 0x16fc <__addsf3x+0x9a>
    16d4:	ff 0f       	add	r31, r31
    16d6:	bb 1f       	adc	r27, r27
    16d8:	66 1f       	adc	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	c2 f7       	brpl	.-16     	; 0x16d0 <__addsf3x+0x6e>
    16e0:	0e c0       	rjmp	.+28     	; 0x16fe <__addsf3x+0x9c>
    16e2:	ba 0f       	add	r27, r26
    16e4:	62 1f       	adc	r22, r18
    16e6:	73 1f       	adc	r23, r19
    16e8:	84 1f       	adc	r24, r20
    16ea:	48 f4       	brcc	.+18     	; 0x16fe <__addsf3x+0x9c>
    16ec:	87 95       	ror	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	b7 95       	ror	r27
    16f4:	f7 95       	ror	r31
    16f6:	9e 3f       	cpi	r25, 0xFE	; 254
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <__addsf3x+0x9a>
    16fa:	b0 cf       	rjmp	.-160    	; 0x165c <__addsf3+0x28>
    16fc:	93 95       	inc	r25
    16fe:	88 0f       	add	r24, r24
    1700:	08 f0       	brcs	.+2      	; 0x1704 <__addsf3x+0xa2>
    1702:	99 27       	eor	r25, r25
    1704:	ee 0f       	add	r30, r30
    1706:	97 95       	ror	r25
    1708:	87 95       	ror	r24
    170a:	08 95       	ret

0000170c <__divsf3>:
    170c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__divsf3x>
    1710:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__fp_round>
    1714:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    1718:	58 f0       	brcs	.+22     	; 0x1730 <__divsf3+0x24>
    171a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    171e:	40 f0       	brcs	.+16     	; 0x1730 <__divsf3+0x24>
    1720:	29 f4       	brne	.+10     	; 0x172c <__divsf3+0x20>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	29 f0       	breq	.+10     	; 0x1730 <__divsf3+0x24>
    1726:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    172a:	51 11       	cpse	r21, r1
    172c:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>
    1730:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>

00001734 <__divsf3x>:
    1734:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_split3>
    1738:	68 f3       	brcs	.-38     	; 0x1714 <__divsf3+0x8>

0000173a <__divsf3_pse>:
    173a:	99 23       	and	r25, r25
    173c:	b1 f3       	breq	.-20     	; 0x172a <__divsf3+0x1e>
    173e:	55 23       	and	r21, r21
    1740:	91 f3       	breq	.-28     	; 0x1726 <__divsf3+0x1a>
    1742:	95 1b       	sub	r25, r21
    1744:	55 0b       	sbc	r21, r21
    1746:	bb 27       	eor	r27, r27
    1748:	aa 27       	eor	r26, r26
    174a:	62 17       	cp	r22, r18
    174c:	73 07       	cpc	r23, r19
    174e:	84 07       	cpc	r24, r20
    1750:	38 f0       	brcs	.+14     	; 0x1760 <__divsf3_pse+0x26>
    1752:	9f 5f       	subi	r25, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	22 0f       	add	r18, r18
    1758:	33 1f       	adc	r19, r19
    175a:	44 1f       	adc	r20, r20
    175c:	aa 1f       	adc	r26, r26
    175e:	a9 f3       	breq	.-22     	; 0x174a <__divsf3_pse+0x10>
    1760:	35 d0       	rcall	.+106    	; 0x17cc <__divsf3_pse+0x92>
    1762:	0e 2e       	mov	r0, r30
    1764:	3a f0       	brmi	.+14     	; 0x1774 <__divsf3_pse+0x3a>
    1766:	e0 e8       	ldi	r30, 0x80	; 128
    1768:	32 d0       	rcall	.+100    	; 0x17ce <__divsf3_pse+0x94>
    176a:	91 50       	subi	r25, 0x01	; 1
    176c:	50 40       	sbci	r21, 0x00	; 0
    176e:	e6 95       	lsr	r30
    1770:	00 1c       	adc	r0, r0
    1772:	ca f7       	brpl	.-14     	; 0x1766 <__divsf3_pse+0x2c>
    1774:	2b d0       	rcall	.+86     	; 0x17cc <__divsf3_pse+0x92>
    1776:	fe 2f       	mov	r31, r30
    1778:	29 d0       	rcall	.+82     	; 0x17cc <__divsf3_pse+0x92>
    177a:	66 0f       	add	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	bb 1f       	adc	r27, r27
    1782:	26 17       	cp	r18, r22
    1784:	37 07       	cpc	r19, r23
    1786:	48 07       	cpc	r20, r24
    1788:	ab 07       	cpc	r26, r27
    178a:	b0 e8       	ldi	r27, 0x80	; 128
    178c:	09 f0       	breq	.+2      	; 0x1790 <__divsf3_pse+0x56>
    178e:	bb 0b       	sbc	r27, r27
    1790:	80 2d       	mov	r24, r0
    1792:	bf 01       	movw	r22, r30
    1794:	ff 27       	eor	r31, r31
    1796:	93 58       	subi	r25, 0x83	; 131
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
    179a:	3a f0       	brmi	.+14     	; 0x17aa <__divsf3_pse+0x70>
    179c:	9e 3f       	cpi	r25, 0xFE	; 254
    179e:	51 05       	cpc	r21, r1
    17a0:	78 f0       	brcs	.+30     	; 0x17c0 <__divsf3_pse+0x86>
    17a2:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    17a6:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>
    17aa:	5f 3f       	cpi	r21, 0xFF	; 255
    17ac:	e4 f3       	brlt	.-8      	; 0x17a6 <__divsf3_pse+0x6c>
    17ae:	98 3e       	cpi	r25, 0xE8	; 232
    17b0:	d4 f3       	brlt	.-12     	; 0x17a6 <__divsf3_pse+0x6c>
    17b2:	86 95       	lsr	r24
    17b4:	77 95       	ror	r23
    17b6:	67 95       	ror	r22
    17b8:	b7 95       	ror	r27
    17ba:	f7 95       	ror	r31
    17bc:	9f 5f       	subi	r25, 0xFF	; 255
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__divsf3_pse+0x78>
    17c0:	88 0f       	add	r24, r24
    17c2:	91 1d       	adc	r25, r1
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	97 f9       	bld	r25, 7
    17ca:	08 95       	ret
    17cc:	e1 e0       	ldi	r30, 0x01	; 1
    17ce:	66 0f       	add	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	88 1f       	adc	r24, r24
    17d4:	bb 1f       	adc	r27, r27
    17d6:	62 17       	cp	r22, r18
    17d8:	73 07       	cpc	r23, r19
    17da:	84 07       	cpc	r24, r20
    17dc:	ba 07       	cpc	r27, r26
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__divsf3_pse+0xae>
    17e0:	62 1b       	sub	r22, r18
    17e2:	73 0b       	sbc	r23, r19
    17e4:	84 0b       	sbc	r24, r20
    17e6:	ba 0b       	sbc	r27, r26
    17e8:	ee 1f       	adc	r30, r30
    17ea:	88 f7       	brcc	.-30     	; 0x17ce <__divsf3_pse+0x94>
    17ec:	e0 95       	com	r30
    17ee:	08 95       	ret

000017f0 <__fixsfsi>:
    17f0:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fixunssfsi>
    17f4:	68 94       	set
    17f6:	b1 11       	cpse	r27, r1
    17f8:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>
    17fc:	08 95       	ret

000017fe <__fixunssfsi>:
    17fe:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__fp_splitA>
    1802:	88 f0       	brcs	.+34     	; 0x1826 <__fixunssfsi+0x28>
    1804:	9f 57       	subi	r25, 0x7F	; 127
    1806:	98 f0       	brcs	.+38     	; 0x182e <__fixunssfsi+0x30>
    1808:	b9 2f       	mov	r27, r25
    180a:	99 27       	eor	r25, r25
    180c:	b7 51       	subi	r27, 0x17	; 23
    180e:	b0 f0       	brcs	.+44     	; 0x183c <__fixunssfsi+0x3e>
    1810:	e1 f0       	breq	.+56     	; 0x184a <__fixunssfsi+0x4c>
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	1a f0       	brmi	.+6      	; 0x1822 <__fixunssfsi+0x24>
    181c:	ba 95       	dec	r27
    181e:	c9 f7       	brne	.-14     	; 0x1812 <__fixunssfsi+0x14>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <__fixunssfsi+0x4c>
    1822:	b1 30       	cpi	r27, 0x01	; 1
    1824:	91 f0       	breq	.+36     	; 0x184a <__fixunssfsi+0x4c>
    1826:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_zero>
    182a:	b1 e0       	ldi	r27, 0x01	; 1
    182c:	08 95       	ret
    182e:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_zero>
    1832:	67 2f       	mov	r22, r23
    1834:	78 2f       	mov	r23, r24
    1836:	88 27       	eor	r24, r24
    1838:	b8 5f       	subi	r27, 0xF8	; 248
    183a:	39 f0       	breq	.+14     	; 0x184a <__fixunssfsi+0x4c>
    183c:	b9 3f       	cpi	r27, 0xF9	; 249
    183e:	cc f3       	brlt	.-14     	; 0x1832 <__fixunssfsi+0x34>
    1840:	86 95       	lsr	r24
    1842:	77 95       	ror	r23
    1844:	67 95       	ror	r22
    1846:	b3 95       	inc	r27
    1848:	d9 f7       	brne	.-10     	; 0x1840 <__fixunssfsi+0x42>
    184a:	3e f4       	brtc	.+14     	; 0x185a <__fixunssfsi+0x5c>
    184c:	90 95       	com	r25
    184e:	80 95       	com	r24
    1850:	70 95       	com	r23
    1852:	61 95       	neg	r22
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	8f 4f       	sbci	r24, 0xFF	; 255
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	08 95       	ret

0000185c <__floatunsisf>:
    185c:	e8 94       	clt
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <__floatsisf+0x12>

00001860 <__floatsisf>:
    1860:	97 fb       	bst	r25, 7
    1862:	3e f4       	brtc	.+14     	; 0x1872 <__floatsisf+0x12>
    1864:	90 95       	com	r25
    1866:	80 95       	com	r24
    1868:	70 95       	com	r23
    186a:	61 95       	neg	r22
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	99 23       	and	r25, r25
    1874:	a9 f0       	breq	.+42     	; 0x18a0 <__floatsisf+0x40>
    1876:	f9 2f       	mov	r31, r25
    1878:	96 e9       	ldi	r25, 0x96	; 150
    187a:	bb 27       	eor	r27, r27
    187c:	93 95       	inc	r25
    187e:	f6 95       	lsr	r31
    1880:	87 95       	ror	r24
    1882:	77 95       	ror	r23
    1884:	67 95       	ror	r22
    1886:	b7 95       	ror	r27
    1888:	f1 11       	cpse	r31, r1
    188a:	f8 cf       	rjmp	.-16     	; 0x187c <__floatsisf+0x1c>
    188c:	fa f4       	brpl	.+62     	; 0x18cc <__floatsisf+0x6c>
    188e:	bb 0f       	add	r27, r27
    1890:	11 f4       	brne	.+4      	; 0x1896 <__floatsisf+0x36>
    1892:	60 ff       	sbrs	r22, 0
    1894:	1b c0       	rjmp	.+54     	; 0x18cc <__floatsisf+0x6c>
    1896:	6f 5f       	subi	r22, 0xFF	; 255
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	8f 4f       	sbci	r24, 0xFF	; 255
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	16 c0       	rjmp	.+44     	; 0x18cc <__floatsisf+0x6c>
    18a0:	88 23       	and	r24, r24
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <__floatsisf+0x48>
    18a4:	96 e9       	ldi	r25, 0x96	; 150
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <__floatsisf+0x6a>
    18a8:	77 23       	and	r23, r23
    18aa:	21 f0       	breq	.+8      	; 0x18b4 <__floatsisf+0x54>
    18ac:	9e e8       	ldi	r25, 0x8E	; 142
    18ae:	87 2f       	mov	r24, r23
    18b0:	76 2f       	mov	r23, r22
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <__floatsisf+0x5e>
    18b4:	66 23       	and	r22, r22
    18b6:	71 f0       	breq	.+28     	; 0x18d4 <__floatsisf+0x74>
    18b8:	96 e8       	ldi	r25, 0x86	; 134
    18ba:	86 2f       	mov	r24, r22
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	2a f0       	brmi	.+10     	; 0x18cc <__floatsisf+0x6c>
    18c2:	9a 95       	dec	r25
    18c4:	66 0f       	add	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	88 1f       	adc	r24, r24
    18ca:	da f7       	brpl	.-10     	; 0x18c2 <__floatsisf+0x62>
    18cc:	88 0f       	add	r24, r24
    18ce:	96 95       	lsr	r25
    18d0:	87 95       	ror	r24
    18d2:	97 f9       	bld	r25, 7
    18d4:	08 95       	ret

000018d6 <__fp_inf>:
    18d6:	97 f9       	bld	r25, 7
    18d8:	9f 67       	ori	r25, 0x7F	; 127
    18da:	80 e8       	ldi	r24, 0x80	; 128
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	08 95       	ret

000018e2 <__fp_nan>:
    18e2:	9f ef       	ldi	r25, 0xFF	; 255
    18e4:	80 ec       	ldi	r24, 0xC0	; 192
    18e6:	08 95       	ret

000018e8 <__fp_pscA>:
    18e8:	00 24       	eor	r0, r0
    18ea:	0a 94       	dec	r0
    18ec:	16 16       	cp	r1, r22
    18ee:	17 06       	cpc	r1, r23
    18f0:	18 06       	cpc	r1, r24
    18f2:	09 06       	cpc	r0, r25
    18f4:	08 95       	ret

000018f6 <__fp_pscB>:
    18f6:	00 24       	eor	r0, r0
    18f8:	0a 94       	dec	r0
    18fa:	12 16       	cp	r1, r18
    18fc:	13 06       	cpc	r1, r19
    18fe:	14 06       	cpc	r1, r20
    1900:	05 06       	cpc	r0, r21
    1902:	08 95       	ret

00001904 <__fp_round>:
    1904:	09 2e       	mov	r0, r25
    1906:	03 94       	inc	r0
    1908:	00 0c       	add	r0, r0
    190a:	11 f4       	brne	.+4      	; 0x1910 <__fp_round+0xc>
    190c:	88 23       	and	r24, r24
    190e:	52 f0       	brmi	.+20     	; 0x1924 <__fp_round+0x20>
    1910:	bb 0f       	add	r27, r27
    1912:	40 f4       	brcc	.+16     	; 0x1924 <__fp_round+0x20>
    1914:	bf 2b       	or	r27, r31
    1916:	11 f4       	brne	.+4      	; 0x191c <__fp_round+0x18>
    1918:	60 ff       	sbrs	r22, 0
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__fp_round+0x20>
    191c:	6f 5f       	subi	r22, 0xFF	; 255
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	8f 4f       	sbci	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	08 95       	ret

00001926 <__fp_split3>:
    1926:	57 fd       	sbrc	r21, 7
    1928:	90 58       	subi	r25, 0x80	; 128
    192a:	44 0f       	add	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	59 f0       	breq	.+22     	; 0x1946 <__fp_splitA+0x10>
    1930:	5f 3f       	cpi	r21, 0xFF	; 255
    1932:	71 f0       	breq	.+28     	; 0x1950 <__fp_splitA+0x1a>
    1934:	47 95       	ror	r20

00001936 <__fp_splitA>:
    1936:	88 0f       	add	r24, r24
    1938:	97 fb       	bst	r25, 7
    193a:	99 1f       	adc	r25, r25
    193c:	61 f0       	breq	.+24     	; 0x1956 <__fp_splitA+0x20>
    193e:	9f 3f       	cpi	r25, 0xFF	; 255
    1940:	79 f0       	breq	.+30     	; 0x1960 <__fp_splitA+0x2a>
    1942:	87 95       	ror	r24
    1944:	08 95       	ret
    1946:	12 16       	cp	r1, r18
    1948:	13 06       	cpc	r1, r19
    194a:	14 06       	cpc	r1, r20
    194c:	55 1f       	adc	r21, r21
    194e:	f2 cf       	rjmp	.-28     	; 0x1934 <__fp_split3+0xe>
    1950:	46 95       	lsr	r20
    1952:	f1 df       	rcall	.-30     	; 0x1936 <__fp_splitA>
    1954:	08 c0       	rjmp	.+16     	; 0x1966 <__fp_splitA+0x30>
    1956:	16 16       	cp	r1, r22
    1958:	17 06       	cpc	r1, r23
    195a:	18 06       	cpc	r1, r24
    195c:	99 1f       	adc	r25, r25
    195e:	f1 cf       	rjmp	.-30     	; 0x1942 <__fp_splitA+0xc>
    1960:	86 95       	lsr	r24
    1962:	71 05       	cpc	r23, r1
    1964:	61 05       	cpc	r22, r1
    1966:	08 94       	sec
    1968:	08 95       	ret

0000196a <__fp_zero>:
    196a:	e8 94       	clt

0000196c <__fp_szero>:
    196c:	bb 27       	eor	r27, r27
    196e:	66 27       	eor	r22, r22
    1970:	77 27       	eor	r23, r23
    1972:	cb 01       	movw	r24, r22
    1974:	97 f9       	bld	r25, 7
    1976:	08 95       	ret

00001978 <__mulsf3>:
    1978:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3x>
    197c:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__fp_round>
    1980:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscA>
    1984:	38 f0       	brcs	.+14     	; 0x1994 <__mulsf3+0x1c>
    1986:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fp_pscB>
    198a:	20 f0       	brcs	.+8      	; 0x1994 <__mulsf3+0x1c>
    198c:	95 23       	and	r25, r21
    198e:	11 f0       	breq	.+4      	; 0x1994 <__mulsf3+0x1c>
    1990:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    1994:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__fp_nan>
    1998:	11 24       	eor	r1, r1
    199a:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>

0000199e <__mulsf3x>:
    199e:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_split3>
    19a2:	70 f3       	brcs	.-36     	; 0x1980 <__mulsf3+0x8>

000019a4 <__mulsf3_pse>:
    19a4:	95 9f       	mul	r25, r21
    19a6:	c1 f3       	breq	.-16     	; 0x1998 <__mulsf3+0x20>
    19a8:	95 0f       	add	r25, r21
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	55 1f       	adc	r21, r21
    19ae:	62 9f       	mul	r22, r18
    19b0:	f0 01       	movw	r30, r0
    19b2:	72 9f       	mul	r23, r18
    19b4:	bb 27       	eor	r27, r27
    19b6:	f0 0d       	add	r31, r0
    19b8:	b1 1d       	adc	r27, r1
    19ba:	63 9f       	mul	r22, r19
    19bc:	aa 27       	eor	r26, r26
    19be:	f0 0d       	add	r31, r0
    19c0:	b1 1d       	adc	r27, r1
    19c2:	aa 1f       	adc	r26, r26
    19c4:	64 9f       	mul	r22, r20
    19c6:	66 27       	eor	r22, r22
    19c8:	b0 0d       	add	r27, r0
    19ca:	a1 1d       	adc	r26, r1
    19cc:	66 1f       	adc	r22, r22
    19ce:	82 9f       	mul	r24, r18
    19d0:	22 27       	eor	r18, r18
    19d2:	b0 0d       	add	r27, r0
    19d4:	a1 1d       	adc	r26, r1
    19d6:	62 1f       	adc	r22, r18
    19d8:	73 9f       	mul	r23, r19
    19da:	b0 0d       	add	r27, r0
    19dc:	a1 1d       	adc	r26, r1
    19de:	62 1f       	adc	r22, r18
    19e0:	83 9f       	mul	r24, r19
    19e2:	a0 0d       	add	r26, r0
    19e4:	61 1d       	adc	r22, r1
    19e6:	22 1f       	adc	r18, r18
    19e8:	74 9f       	mul	r23, r20
    19ea:	33 27       	eor	r19, r19
    19ec:	a0 0d       	add	r26, r0
    19ee:	61 1d       	adc	r22, r1
    19f0:	23 1f       	adc	r18, r19
    19f2:	84 9f       	mul	r24, r20
    19f4:	60 0d       	add	r22, r0
    19f6:	21 1d       	adc	r18, r1
    19f8:	82 2f       	mov	r24, r18
    19fa:	76 2f       	mov	r23, r22
    19fc:	6a 2f       	mov	r22, r26
    19fe:	11 24       	eor	r1, r1
    1a00:	9f 57       	subi	r25, 0x7F	; 127
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	9a f0       	brmi	.+38     	; 0x1a2c <__mulsf3_pse+0x88>
    1a06:	f1 f0       	breq	.+60     	; 0x1a44 <__mulsf3_pse+0xa0>
    1a08:	88 23       	and	r24, r24
    1a0a:	4a f0       	brmi	.+18     	; 0x1a1e <__mulsf3_pse+0x7a>
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	bb 1f       	adc	r27, r27
    1a12:	66 1f       	adc	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	50 40       	sbci	r21, 0x00	; 0
    1a1c:	a9 f7       	brne	.-22     	; 0x1a08 <__mulsf3_pse+0x64>
    1a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a20:	51 05       	cpc	r21, r1
    1a22:	80 f0       	brcs	.+32     	; 0x1a44 <__mulsf3_pse+0xa0>
    1a24:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_inf>
    1a28:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_szero>
    1a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2e:	e4 f3       	brlt	.-8      	; 0x1a28 <__mulsf3_pse+0x84>
    1a30:	98 3e       	cpi	r25, 0xE8	; 232
    1a32:	d4 f3       	brlt	.-12     	; 0x1a28 <__mulsf3_pse+0x84>
    1a34:	86 95       	lsr	r24
    1a36:	77 95       	ror	r23
    1a38:	67 95       	ror	r22
    1a3a:	b7 95       	ror	r27
    1a3c:	f7 95       	ror	r31
    1a3e:	e7 95       	ror	r30
    1a40:	9f 5f       	subi	r25, 0xFF	; 255
    1a42:	c1 f7       	brne	.-16     	; 0x1a34 <__mulsf3_pse+0x90>
    1a44:	fe 2b       	or	r31, r30
    1a46:	88 0f       	add	r24, r24
    1a48:	91 1d       	adc	r25, r1
    1a4a:	96 95       	lsr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	97 f9       	bld	r25, 7
    1a50:	08 95       	ret

00001a52 <do_rand>:
    1a52:	8f 92       	push	r8
    1a54:	9f 92       	push	r9
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
    1a68:	68 81       	ld	r22, Y
    1a6a:	79 81       	ldd	r23, Y+1	; 0x01
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a70:	61 15       	cp	r22, r1
    1a72:	71 05       	cpc	r23, r1
    1a74:	81 05       	cpc	r24, r1
    1a76:	91 05       	cpc	r25, r1
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <do_rand+0x30>
    1a7a:	64 e2       	ldi	r22, 0x24	; 36
    1a7c:	79 ed       	ldi	r23, 0xD9	; 217
    1a7e:	8b e5       	ldi	r24, 0x5B	; 91
    1a80:	97 e0       	ldi	r25, 0x07	; 7
    1a82:	2d e1       	ldi	r18, 0x1D	; 29
    1a84:	33 ef       	ldi	r19, 0xF3	; 243
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divmodsi4>
    1a8e:	49 01       	movw	r8, r18
    1a90:	5a 01       	movw	r10, r20
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	a7 ea       	ldi	r26, 0xA7	; 167
    1a98:	b1 e4       	ldi	r27, 0x41	; 65
    1a9a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__muluhisi3>
    1a9e:	6b 01       	movw	r12, r22
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	ac ee       	ldi	r26, 0xEC	; 236
    1aa4:	b4 ef       	ldi	r27, 0xF4	; 244
    1aa6:	a5 01       	movw	r20, r10
    1aa8:	94 01       	movw	r18, r8
    1aaa:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__mulohisi3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8c 0d       	add	r24, r12
    1ab4:	9d 1d       	adc	r25, r13
    1ab6:	ae 1d       	adc	r26, r14
    1ab8:	bf 1d       	adc	r27, r15
    1aba:	b7 ff       	sbrs	r27, 7
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <do_rand+0x72>
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	a1 09       	sbc	r26, r1
    1ac2:	b0 48       	sbci	r27, 0x80	; 128
    1ac4:	88 83       	st	Y, r24
    1ac6:	99 83       	std	Y+1, r25	; 0x01
    1ac8:	aa 83       	std	Y+2, r26	; 0x02
    1aca:	bb 83       	std	Y+3, r27	; 0x03
    1acc:	9f 77       	andi	r25, 0x7F	; 127
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	9f 90       	pop	r9
    1ae0:	8f 90       	pop	r8
    1ae2:	08 95       	ret

00001ae4 <rand_r>:
    1ae4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <do_rand>
    1ae8:	08 95       	ret

00001aea <rand>:
    1aea:	87 e0       	ldi	r24, 0x07	; 7
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <do_rand>
    1af2:	08 95       	ret

00001af4 <srand>:
    1af4:	a0 e0       	ldi	r26, 0x00	; 0
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	80 93 07 01 	sts	0x0107, r24
    1afc:	90 93 08 01 	sts	0x0108, r25
    1b00:	a0 93 09 01 	sts	0x0109, r26
    1b04:	b0 93 0a 01 	sts	0x010A, r27
    1b08:	08 95       	ret

00001b0a <eeprom_read_byte>:
    1b0a:	f9 99       	sbic	0x1f, 1	; 31
    1b0c:	fe cf       	rjmp	.-4      	; 0x1b0a <eeprom_read_byte>
    1b0e:	92 bd       	out	0x22, r25	; 34
    1b10:	81 bd       	out	0x21, r24	; 33
    1b12:	f8 9a       	sbi	0x1f, 0	; 31
    1b14:	99 27       	eor	r25, r25
    1b16:	80 b5       	in	r24, 0x20	; 32
    1b18:	08 95       	ret

00001b1a <eeprom_write_byte>:
    1b1a:	26 2f       	mov	r18, r22

00001b1c <eeprom_write_r18>:
    1b1c:	f9 99       	sbic	0x1f, 1	; 31
    1b1e:	fe cf       	rjmp	.-4      	; 0x1b1c <eeprom_write_r18>
    1b20:	1f ba       	out	0x1f, r1	; 31
    1b22:	92 bd       	out	0x22, r25	; 34
    1b24:	81 bd       	out	0x21, r24	; 33
    1b26:	20 bd       	out	0x20, r18	; 32
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	fa 9a       	sbi	0x1f, 2	; 31
    1b2e:	f9 9a       	sbi	0x1f, 1	; 31
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	08 95       	ret

00001b36 <__divmodsi4>:
    1b36:	05 2e       	mov	r0, r21
    1b38:	97 fb       	bst	r25, 7
    1b3a:	1e f4       	brtc	.+6      	; 0x1b42 <__divmodsi4+0xc>
    1b3c:	00 94       	com	r0
    1b3e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__negsi2>
    1b42:	57 fd       	sbrc	r21, 7
    1b44:	07 d0       	rcall	.+14     	; 0x1b54 <__divmodsi4_neg2>
    1b46:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__udivmodsi4>
    1b4a:	07 fc       	sbrc	r0, 7
    1b4c:	03 d0       	rcall	.+6      	; 0x1b54 <__divmodsi4_neg2>
    1b4e:	4e f4       	brtc	.+18     	; 0x1b62 <__divmodsi4_exit>
    1b50:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__negsi2>

00001b54 <__divmodsi4_neg2>:
    1b54:	50 95       	com	r21
    1b56:	40 95       	com	r20
    1b58:	30 95       	com	r19
    1b5a:	21 95       	neg	r18
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	4f 4f       	sbci	r20, 0xFF	; 255
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255

00001b62 <__divmodsi4_exit>:
    1b62:	08 95       	ret

00001b64 <__negsi2>:
    1b64:	90 95       	com	r25
    1b66:	80 95       	com	r24
    1b68:	70 95       	com	r23
    1b6a:	61 95       	neg	r22
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	08 95       	ret

00001b74 <__muluhisi3>:
    1b74:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__umulhisi3>
    1b78:	a5 9f       	mul	r26, r21
    1b7a:	90 0d       	add	r25, r0
    1b7c:	b4 9f       	mul	r27, r20
    1b7e:	90 0d       	add	r25, r0
    1b80:	a4 9f       	mul	r26, r20
    1b82:	80 0d       	add	r24, r0
    1b84:	91 1d       	adc	r25, r1
    1b86:	11 24       	eor	r1, r1
    1b88:	08 95       	ret

00001b8a <__mulshisi3>:
    1b8a:	b7 ff       	sbrs	r27, 7
    1b8c:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__muluhisi3>

00001b90 <__mulohisi3>:
    1b90:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__muluhisi3>
    1b94:	82 1b       	sub	r24, r18
    1b96:	93 0b       	sbc	r25, r19
    1b98:	08 95       	ret

00001b9a <__udivmodsi4>:
    1b9a:	a1 e2       	ldi	r26, 0x21	; 33
    1b9c:	1a 2e       	mov	r1, r26
    1b9e:	aa 1b       	sub	r26, r26
    1ba0:	bb 1b       	sub	r27, r27
    1ba2:	fd 01       	movw	r30, r26
    1ba4:	0d c0       	rjmp	.+26     	; 0x1bc0 <__udivmodsi4_ep>

00001ba6 <__udivmodsi4_loop>:
    1ba6:	aa 1f       	adc	r26, r26
    1ba8:	bb 1f       	adc	r27, r27
    1baa:	ee 1f       	adc	r30, r30
    1bac:	ff 1f       	adc	r31, r31
    1bae:	a2 17       	cp	r26, r18
    1bb0:	b3 07       	cpc	r27, r19
    1bb2:	e4 07       	cpc	r30, r20
    1bb4:	f5 07       	cpc	r31, r21
    1bb6:	20 f0       	brcs	.+8      	; 0x1bc0 <__udivmodsi4_ep>
    1bb8:	a2 1b       	sub	r26, r18
    1bba:	b3 0b       	sbc	r27, r19
    1bbc:	e4 0b       	sbc	r30, r20
    1bbe:	f5 0b       	sbc	r31, r21

00001bc0 <__udivmodsi4_ep>:
    1bc0:	66 1f       	adc	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	1a 94       	dec	r1
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <__udivmodsi4_loop>
    1bcc:	60 95       	com	r22
    1bce:	70 95       	com	r23
    1bd0:	80 95       	com	r24
    1bd2:	90 95       	com	r25
    1bd4:	9b 01       	movw	r18, r22
    1bd6:	ac 01       	movw	r20, r24
    1bd8:	bd 01       	movw	r22, r26
    1bda:	cf 01       	movw	r24, r30
    1bdc:	08 95       	ret

00001bde <_exit>:
    1bde:	f8 94       	cli

00001be0 <__stop_program>:
    1be0:	ff cf       	rjmp	.-2      	; 0x1be0 <__stop_program>
