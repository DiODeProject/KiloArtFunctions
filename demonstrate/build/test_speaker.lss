
build/test_speaker.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	ee 01       	movw	r28, r28
      6a:	6a 02       	muls	r22, r26
      6c:	c2 01       	movw	r24, r4
      6e:	b9 01       	movw	r22, r18
      70:	bf 01       	movw	r22, r30
      72:	4c 02       	muls	r20, r28
      74:	41 02       	muls	r20, r17
      76:	cc 08       	sbc	r12, r12
      78:	a9 07       	cpc	r26, r25
      7a:	a9 07       	cpc	r26, r25
      7c:	c9 08       	sbc	r12, r9
      7e:	d5 08       	sbc	r13, r5
      80:	c5 08       	sbc	r12, r5
      82:	dc 08       	sbc	r13, r12
      84:	d8 08       	sbc	r13, r8
      86:	e0 08       	sbc	r14, r0
      88:	98 08       	sbc	r9, r8
      8a:	6a 08       	sbc	r6, r10

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e7       	ldi	r30, 0x7C	; 124
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 37       	cpi	r26, 0x7C	; 124
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 12 0a 	call	0x1424	; 0x1424 <main>
      da:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	82 e1       	ldi	r24, 0x12	; 18
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:

void message_tx_success()
{
    // Set the flag on message transmission.
    message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0d 01 	sts	0x010D, r25
      f0:	80 93 0c 01 	sts	0x010C, r24
      f4:	08 95       	ret

000000f6 <setup>:
message_t message;
// Flag to keep track of message transmission.
int message_sent = 0;

void setup()
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
    // Initialize message:
    // The type is always NORMAL.
    message.type = NORMAL;
      fa:	c2 e1       	ldi	r28, 0x12	; 18
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
    // Some dummy data as an example.
    message.data[0] = 0;
     100:	18 82       	st	Y, r1
    // It's important that the CRC is computed after the data has been set;
    // otherwise it would be wrong and the message would be dropped by the
    // receiver.
    message.crc = message_crc(&message);
     102:	ce 01       	movw	r24, r28
     104:	0e 94 73 09 	call	0x12e6	; 0x12e6 <message_crc>
     108:	9b 87       	std	Y+11, r25	; 0x0b
     10a:	8a 87       	std	Y+10, r24	; 0x0a
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <loop>:

void loop()
{
    // Blink the LED magenta whenever a message is sent.
    if (message_sent == 1)
     112:	80 91 0c 01 	lds	r24, 0x010C
     116:	90 91 0d 01 	lds	r25, 0x010D
     11a:	01 97       	sbiw	r24, 0x01	; 1
     11c:	09 f0       	breq	.+2      	; 0x120 <loop+0xe>
     11e:	08 95       	ret
    {
        // Reset the flag so the LED is only blinked once per message.
        message_sent = 0;
     120:	10 92 0d 01 	sts	0x010D, r1
     124:	10 92 0c 01 	sts	0x010C, r1
        
        set_color(RGB(1, 0, 1));
     128:	81 e1       	ldi	r24, 0x11	; 17
     12a:	0e 94 23 07 	call	0xe46	; 0xe46 <set_color>
        delay(100);
     12e:	84 e6       	ldi	r24, 0x64	; 100
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 f7 02 	call	0x5ee	; 0x5ee <delay>
        set_color(RGB(0, 0, 0));
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	0c 94 23 07 	jmp	0xe46	; 0xe46 <set_color>

0000013c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     13c:	08 95       	ret

0000013e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	08 95       	ret

00000144 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     144:	08 95       	ret

00000146 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
    cli();
     154:	f8 94       	cli

    ports_off();
     156:	14 b8       	out	0x04, r1	; 4
     158:	17 b8       	out	0x07, r1	; 7
     15a:	1a b8       	out	0x0a, r1	; 10
     15c:	15 b8       	out	0x05, r1	; 5
     15e:	18 b8       	out	0x08, r1	; 8
     160:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     162:	52 9a       	sbi	0x0a, 2	; 10
     164:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     166:	14 bc       	out	0x24, r1	; 36
     168:	85 e0       	ldi	r24, 0x05	; 5
     16a:	85 bd       	out	0x25, r24	; 37
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	87 bd       	out	0x27, r24	; 39
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     176:	10 92 80 00 	sts	0x0080, r1
     17a:	10 92 81 00 	sts	0x0081, r1
     17e:	2f e8       	ldi	r18, 0x8F	; 143
     180:	3b e0       	ldi	r19, 0x0B	; 11
     182:	30 93 89 00 	sts	0x0089, r19
     186:	20 93 88 00 	sts	0x0088, r18
     18a:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     18e:	53 98       	cbi	0x0a, 3	; 10
     190:	23 98       	cbi	0x04, 3	; 4
     192:	91 ea       	ldi	r25, 0xA1	; 161
     194:	90 93 b0 00 	sts	0x00B0, r25
     198:	80 93 b1 00 	sts	0x00B1, r24
     19c:	10 92 b4 00 	sts	0x00B4, r1
     1a0:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     1a4:	8b e0       	ldi	r24, 0x0B	; 11
     1a6:	80 bf       	out	0x30, r24	; 48
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 7c 00 	sts	0x007C, r24
     1b4:	83 e8       	ldi	r24, 0x83	; 131
     1b6:	80 93 7a 00 	sts	0x007A, r24
     1ba:	80 91 7a 00 	lds	r24, 0x007A
     1be:	80 64       	ori	r24, 0x40	; 64
     1c0:	80 93 7a 00 	sts	0x007A, r24
     1c4:	80 91 7a 00 	lds	r24, 0x007A
     1c8:	86 fd       	sbrc	r24, 6
     1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1cc:	10 92 7c 00 	sts	0x007C, r1
     1d0:	83 ea       	ldi	r24, 0xA3	; 163
     1d2:	80 93 7a 00 	sts	0x007A, r24
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
    if (osccal != 0xFF)
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	11 f0       	breq	.+4      	; 0x1ec <kilo_init+0xa6>
        OSCCAL = osccal;
     1e8:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1ec:	10 92 45 01 	sts	0x0145, r1
    rx_leadingbit = 1;
     1f0:	c1 e0       	ldi	r28, 0x01	; 1
     1f2:	c0 93 1e 01 	sts	0x011E, r28
    rx_leadingbyte = 1;
     1f6:	c0 93 62 01 	sts	0x0162, r28
    rx_byteindex = 0;
     1fa:	10 92 3c 01 	sts	0x013C, r1
    rx_bytevalue = 0;
     1fe:	10 92 76 01 	sts	0x0176, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     202:	80 e9       	ldi	r24, 0x90	; 144
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     20a:	80 93 3b 01 	sts	0x013B, r24
    if (tx_mask & ~TX_MASK_MAX)
     20e:	80 91 3b 01 	lds	r24, 0x013B
     212:	88 73       	andi	r24, 0x38	; 56
     214:	11 f0       	breq	.+4      	; 0x21a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     216:	c0 93 3b 01 	sts	0x013B, r28
    tx_clock = 0;
     21a:	10 92 66 01 	sts	0x0166, r1
     21e:	10 92 65 01 	sts	0x0165, r1
    tx_increment = 255;
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	90 93 64 01 	sts	0x0164, r25
     22a:	80 93 63 01 	sts	0x0163, r24
    kilo_ticks = 0;
     22e:	10 92 41 01 	sts	0x0141, r1
     232:	10 92 42 01 	sts	0x0142, r1
     236:	10 92 43 01 	sts	0x0143, r1
     23a:	10 92 44 01 	sts	0x0144, r1
    kilo_state = IDLE;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 11 01 	sts	0x0111, r24
    kilo_tx_period = 3906;
     244:	82 e4       	ldi	r24, 0x42	; 66
     246:	9f e0       	ldi	r25, 0x0F	; 15
     248:	90 93 75 01 	sts	0x0175, r25
     24c:	80 93 74 01 	sts	0x0174, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     250:	80 eb       	ldi	r24, 0xB0	; 176
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     258:	c8 2f       	mov	r28, r24
     25a:	81 eb       	ldi	r24, 0xB1	; 177
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     262:	2c 2f       	mov	r18, r28
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	38 2b       	or	r19, r24
     268:	30 93 78 01 	sts	0x0178, r19
     26c:	20 93 77 01 	sts	0x0177, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     278:	80 93 7b 01 	sts	0x017B, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     27c:	89 e0       	ldi	r24, 0x09	; 9
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     284:	80 93 67 01 	sts	0x0167, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     288:	8c e0       	ldi	r24, 0x0C	; 12
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     290:	80 93 79 01 	sts	0x0179, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     294:	84 e1       	ldi	r24, 0x14	; 20
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     29c:	80 93 7a 01 	sts	0x017A, r24
     2a0:	56 e4       	ldi	r21, 0x46	; 70
     2a2:	e5 2e       	mov	r14, r21
     2a4:	51 e0       	ldi	r21, 0x01	; 1
     2a6:	f5 2e       	mov	r15, r21
     2a8:	0f e1       	ldi	r16, 0x1F	; 31
     2aa:	11 e0       	ldi	r17, 0x01	; 1
     2ac:	c0 e2       	ldi	r28, 0x20	; 32
     2ae:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2b0:	ce 01       	movw	r24, r28
     2b2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     2b6:	d8 2e       	mov	r13, r24
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     2c0:	2d 2d       	mov	r18, r13
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	32 2f       	mov	r19, r18
     2c6:	22 27       	eor	r18, r18
     2c8:	28 2b       	or	r18, r24
     2ca:	f7 01       	movw	r30, r14
     2cc:	21 93       	st	Z+, r18
     2ce:	31 93       	st	Z+, r19
     2d0:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2d2:	ce 01       	movw	r24, r28
     2d4:	c0 96       	adiw	r24, 0x30	; 48
     2d6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     2da:	d8 2e       	mov	r13, r24
     2dc:	ce 01       	movw	r24, r28
     2de:	c1 96       	adiw	r24, 0x31	; 49
     2e0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_read_byte>
     2e4:	2d 2d       	mov	r18, r13
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	32 2f       	mov	r19, r18
     2ea:	22 27       	eor	r18, r18
     2ec:	28 2b       	or	r18, r24
     2ee:	f8 01       	movw	r30, r16
     2f0:	21 93       	st	Z+, r18
     2f2:	31 93       	st	Z+, r19
     2f4:	8f 01       	movw	r16, r30
     2f6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2f8:	cc 33       	cpi	r28, 0x3C	; 60
     2fa:	d1 05       	cpc	r29, r1
     2fc:	c9 f6       	brne	.-78     	; 0x2b0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2fe:	78 94       	sei
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	08 95       	ret

00000310 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	8f 93       	push	r24
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	a8 95       	wdr
     322:	80 91 60 00 	lds	r24, 0x0060
     326:	88 61       	ori	r24, 0x18	; 24
     328:	80 93 60 00 	sts	0x0060, r24
     32c:	10 92 60 00 	sts	0x0060, r1
     330:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     33e:	3c 01       	movw	r6, r24
     340:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     342:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     344:	99 24       	eor	r9, r9
     346:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     34c:	96 e0       	ldi	r25, 0x06	; 6
     34e:	a9 2e       	mov	r10, r25
     350:	23 e8       	ldi	r18, 0x83	; 131
     352:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     354:	38 e1       	ldi	r19, 0x18	; 24
     356:	d3 2e       	mov	r13, r19
     358:	49 e2       	ldi	r20, 0x29	; 41
     35a:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     35c:	90 91 11 01 	lds	r25, 0x0111
     360:	e9 2f       	mov	r30, r25
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	e7 30       	cpi	r30, 0x07	; 7
     366:	f1 05       	cpc	r31, r1
     368:	c8 f7       	brcc	.-14     	; 0x35c <kilo_start+0x1e>
     36a:	ec 5c       	subi	r30, 0xCC	; 204
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     372:	11 23       	and	r17, r17
     374:	09 f4       	brne	.+2      	; 0x378 <kilo_start+0x3a>
     376:	fc c0       	rjmp	.+504    	; 0x570 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     378:	c0 92 11 01 	sts	0x0111, r12
     37c:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     37e:	fe 01       	movw	r30, r28
     380:	09 95       	icall
                break;
     382:	ec cf       	rjmp	.-40     	; 0x35c <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     384:	80 91 45 01 	lds	r24, 0x0145
     388:	81 11       	cpse	r24, r1
     38a:	eb c0       	rjmp	.+470    	; 0x562 <kilo_start+0x224>
        cli();                                    // disable interrupts
     38c:	f8 94       	cli
        adc_setup_conversion(6);
     38e:	a0 92 7c 00 	sts	0x007C, r10
     392:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     396:	80 91 7a 00 	lds	r24, 0x007A
     39a:	80 64       	ori	r24, 0x40	; 64
     39c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3a0:	90 91 7a 00 	lds	r25, 0x007A
     3a4:	96 fd       	sbrc	r25, 6
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     3a8:	80 91 78 00 	lds	r24, 0x0078
     3ac:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3b0:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3b2:	8b 3a       	cpi	r24, 0xAB	; 171
     3b4:	e2 e0       	ldi	r30, 0x02	; 2
     3b6:	9e 07       	cpc	r25, r30
     3b8:	0c f0       	brlt	.+2      	; 0x3bc <kilo_start+0x7e>
     3ba:	ed c0       	rjmp	.+474    	; 0x596 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3bc:	89 38       	cpi	r24, 0x89	; 137
     3be:	f2 e0       	ldi	r31, 0x02	; 2
     3c0:	9f 07       	cpc	r25, r31
     3c2:	0c f0       	brlt	.+2      	; 0x3c6 <kilo_start+0x88>
     3c4:	ef c0       	rjmp	.+478    	; 0x5a4 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3c6:	87 36       	cpi	r24, 0x67	; 103
     3c8:	92 40       	sbci	r25, 0x02	; 2
     3ca:	0c f4       	brge	.+2      	; 0x3ce <kilo_start+0x90>
     3cc:	ca c0       	rjmp	.+404    	; 0x562 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3ce:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3d0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3d2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3d4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3d6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3d8:	3c 98       	cbi	0x07, 4	; 7
     3da:	c0 cf       	rjmp	.-128    	; 0x35c <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3dc:	f8 94       	cli
                acomp_off();
     3de:	80 b7       	in	r24, 0x30	; 48
     3e0:	87 7f       	andi	r24, 0xF7	; 247
     3e2:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3e4:	80 91 7a 00 	lds	r24, 0x007A
     3e8:	8f 77       	andi	r24, 0x7F	; 127
     3ea:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3ee:	14 b8       	out	0x04, r1	; 4
     3f0:	17 b8       	out	0x07, r1	; 7
     3f2:	1a b8       	out	0x0a, r1	; 10
     3f4:	15 b8       	out	0x05, r1	; 5
     3f6:	18 b8       	out	0x08, r1	; 8
     3f8:	1b b8       	out	0x0b, r1	; 11
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	a8 95       	wdr
     400:	d0 92 60 00 	sts	0x0060, r13
     404:	0f be       	out	0x3f, r0	; 63
     406:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     40a:	80 91 60 00 	lds	r24, 0x0060
     40e:	80 64       	ori	r24, 0x40	; 64
     410:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     414:	93 b7       	in	r25, 0x33	; 51
     416:	91 7f       	andi	r25, 0xF1	; 241
     418:	94 60       	ori	r25, 0x04	; 4
     41a:	93 bf       	out	0x33, r25	; 51
                cli();
     41c:	f8 94       	cli
                sleep_enable();
     41e:	83 b7       	in	r24, 0x33	; 51
     420:	81 60       	ori	r24, 0x01	; 1
     422:	83 bf       	out	0x33, r24	; 51
                sei();
     424:	78 94       	sei
                sleep_cpu();
     426:	88 95       	sleep
                sleep_disable();
     428:	83 b7       	in	r24, 0x33	; 51
     42a:	8e 7f       	andi	r24, 0xFE	; 254
     42c:	83 bf       	out	0x33, r24	; 51
                sei();
     42e:	78 94       	sei
                rx_busy = 0;
     430:	10 92 45 01 	sts	0x0145, r1
                ports_on();
     434:	52 9a       	sbi	0x0a, 2	; 10
     436:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     438:	80 91 7a 00 	lds	r24, 0x007A
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     442:	87 e5       	ldi	r24, 0x57	; 87
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <kilo_start+0x108>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <kilo_start+0x10e>
     44c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     44e:	80 b7       	in	r24, 0x30	; 48
     450:	88 61       	ori	r24, 0x18	; 24
     452:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     454:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     456:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     458:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     45a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     45c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     45e:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     460:	ef e1       	ldi	r30, 0x1F	; 31
     462:	fe e4       	ldi	r31, 0x4E	; 78
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <kilo_start+0x126>
     468:	00 c0       	rjmp	.+0      	; 0x46a <kilo_start+0x12c>
     46a:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     46c:	80 91 45 01 	lds	r24, 0x0145
     470:	81 11       	cpse	r24, r1
     472:	81 c0       	rjmp	.+258    	; 0x576 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     474:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     476:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     478:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     47a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     47c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     47e:	3c 98       	cbi	0x07, 4	; 7
     480:	6d cf       	rjmp	.-294    	; 0x35c <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     482:	80 91 0f 01 	lds	r24, 0x010F
     486:	81 11       	cpse	r24, r1
     488:	41 c0       	rjmp	.+130    	; 0x50c <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     48a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     48e:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     492:	10 92 10 01 	sts	0x0110, r1
     496:	62 cf       	rjmp	.-316    	; 0x35c <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     498:	48 99       	sbic	0x09, 0	; 9
     49a:	ec cf       	rjmp	.-40     	; 0x474 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     49c:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     49e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4a0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4a2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4a4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4a6:	3c 98       	cbi	0x07, 4	; 7
     4a8:	8f ec       	ldi	r24, 0xCF	; 207
     4aa:	97 e0       	ldi	r25, 0x07	; 7
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <kilo_start+0x16e>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <kilo_start+0x174>
     4b2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4b4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4b6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4b8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4ba:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4bc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4be:	3c 98       	cbi	0x07, 4	; 7
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
     4c2:	e1 ee       	ldi	r30, 0xE1	; 225
     4c4:	f4 e0       	ldi	r31, 0x04	; 4
     4c6:	91 50       	subi	r25, 0x01	; 1
     4c8:	e0 40       	sbci	r30, 0x00	; 0
     4ca:	f0 40       	sbci	r31, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <kilo_start+0x188>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <kilo_start+0x192>
     4d0:	00 00       	nop
     4d2:	44 cf       	rjmp	.-376    	; 0x35c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4d4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4d6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4d8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4da:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4dc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4de:	3c 98       	cbi	0x07, 4	; 7
     4e0:	ef ec       	ldi	r30, 0xCF	; 207
     4e2:	f7 e0       	ldi	r31, 0x07	; 7
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <kilo_start+0x1a6>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <kilo_start+0x1ac>
     4ea:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4ec:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ee:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4f0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4f2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4f4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4f6:	3c 98       	cbi	0x07, 4	; 7
     4f8:	ff ef       	ldi	r31, 0xFF	; 255
     4fa:	21 ee       	ldi	r18, 0xE1	; 225
     4fc:	84 e0       	ldi	r24, 0x04	; 4
     4fe:	f1 50       	subi	r31, 0x01	; 1
     500:	20 40       	sbci	r18, 0x00	; 0
     502:	80 40       	sbci	r24, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <kilo_start+0x1c0>
     506:	00 c0       	rjmp	.+0      	; 0x508 <kilo_start+0x1ca>
     508:	00 00       	nop
     50a:	28 cf       	rjmp	.-432    	; 0x35c <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     50c:	90 91 0f 01 	lds	r25, 0x010F
     510:	80 91 10 01 	lds	r24, 0x0110
     514:	98 17       	cp	r25, r24
     516:	09 f4       	brne	.+2      	; 0x51a <kilo_start+0x1dc>
     518:	21 cf       	rjmp	.-446    	; 0x35c <kilo_start+0x1e>
                        prev_motion = cur_motion;
     51a:	80 91 0f 01 	lds	r24, 0x010F
     51e:	80 93 10 01 	sts	0x0110, r24
                        if (cur_motion == MOVE_LEFT) {
     522:	80 91 0f 01 	lds	r24, 0x010F
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	09 f4       	brne	.+2      	; 0x52c <kilo_start+0x1ee>
     52a:	50 c0       	rjmp	.+160    	; 0x5cc <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     52c:	80 91 0f 01 	lds	r24, 0x010F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     530:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     534:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	d9 f1       	breq	.+118    	; 0x5b2 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     53c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     540:	90 92 b4 00 	sts	0x00B4, r9
     544:	8f e2       	ldi	r24, 0x2F	; 47
     546:	95 e7       	ldi	r25, 0x75	; 117
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <kilo_start+0x20a>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <kilo_start+0x210>
     54e:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     550:	80 91 7a 01 	lds	r24, 0x017A
     554:	90 91 79 01 	lds	r25, 0x0179
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     558:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     55c:	80 93 b4 00 	sts	0x00B4, r24
     560:	fd ce       	rjmp	.-518    	; 0x35c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     562:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     564:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     566:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     568:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     56a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     56c:	3c 98       	cbi	0x07, 4	; 7
     56e:	f6 ce       	rjmp	.-532    	; 0x35c <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     570:	f3 01       	movw	r30, r6
     572:	09 95       	icall
     574:	01 cf       	rjmp	.-510    	; 0x378 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     576:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     578:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     57a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     57c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     57e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     580:	3c 98       	cbi	0x07, 4	; 7
     582:	ff ef       	ldi	r31, 0xFF	; 255
     584:	20 e7       	ldi	r18, 0x70	; 112
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	f1 50       	subi	r31, 0x01	; 1
     58a:	20 40       	sbci	r18, 0x00	; 0
     58c:	80 40       	sbci	r24, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <kilo_start+0x24a>
     590:	00 c0       	rjmp	.+0      	; 0x592 <kilo_start+0x254>
     592:	00 00       	nop
     594:	6f cf       	rjmp	.-290    	; 0x474 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     596:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     598:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     59a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     59c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     59e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5a0:	3c 98       	cbi	0x07, 4	; 7
     5a2:	dc ce       	rjmp	.-584    	; 0x35c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5a4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5a6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5a8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5aa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5ac:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5ae:	3c 9a       	sbi	0x07, 4	; 7
     5b0:	d5 ce       	rjmp	.-598    	; 0x35c <kilo_start+0x1e>
     5b2:	ef e2       	ldi	r30, 0x2F	; 47
     5b4:	f5 e7       	ldi	r31, 0x75	; 117
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <kilo_start+0x278>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <kilo_start+0x27e>
     5bc:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5be:	80 91 67 01 	lds	r24, 0x0167
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5c6:	80 93 b4 00 	sts	0x00B4, r24
     5ca:	c8 ce       	rjmp	.-624    	; 0x35c <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5cc:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5d0:	10 92 b4 00 	sts	0x00B4, r1
     5d4:	8f e2       	ldi	r24, 0x2F	; 47
     5d6:	95 e7       	ldi	r25, 0x75	; 117
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <kilo_start+0x29a>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <kilo_start+0x2a0>
     5de:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5e0:	80 91 7b 01 	lds	r24, 0x017B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5e8:	10 92 b4 00 	sts	0x00B4, r1
     5ec:	b7 ce       	rjmp	.-658    	; 0x35c <kilo_start+0x1e>

000005ee <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5ee:	07 c0       	rjmp	.+14     	; 0x5fe <delay+0x10>
     5f0:	ef ec       	ldi	r30, 0xCF	; 207
     5f2:	f7 e0       	ldi	r31, 0x07	; 7
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <delay+0x6>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <delay+0xc>
     5fa:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5fc:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5fe:	00 97       	sbiw	r24, 0x00	; 0
     600:	b9 f7       	brne	.-18     	; 0x5f0 <delay+0x2>
     602:	08 95       	ret

00000604 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     604:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     608:	60 93 b4 00 	sts	0x00B4, r22
     60c:	08 95       	ret

0000060e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     614:	80 93 b4 00 	sts	0x00B4, r24
     618:	8f e0       	ldi	r24, 0x0F	; 15
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	ef ec       	ldi	r30, 0xCF	; 207
     61e:	f7 e0       	ldi	r31, 0x07	; 7
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <spinup_motors+0x12>
     624:	00 c0       	rjmp	.+0      	; 0x626 <spinup_motors+0x18>
     626:	00 00       	nop
     628:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     62a:	c1 f7       	brne	.-16     	; 0x61c <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     62c:	08 95       	ret

0000062e <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     62e:	80 91 45 01 	lds	r24, 0x0145
     632:	81 11       	cpse	r24, r1
     634:	1e c0       	rjmp	.+60     	; 0x672 <get_ambientlight+0x44>
        cli();
     636:	f8 94       	cli
        adc_setup_conversion(7);
     638:	87 e0       	ldi	r24, 0x07	; 7
     63a:	80 93 7c 00 	sts	0x007C, r24
     63e:	83 e8       	ldi	r24, 0x83	; 131
     640:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     644:	80 91 7a 00 	lds	r24, 0x007A
     648:	80 64       	ori	r24, 0x40	; 64
     64a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     64e:	80 91 7a 00 	lds	r24, 0x007A
     652:	86 fd       	sbrc	r24, 6
     654:	fc cf       	rjmp	.-8      	; 0x64e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     656:	80 91 78 00 	lds	r24, 0x0078
     65a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     65e:	10 92 7c 00 	sts	0x007C, r1
     662:	23 ea       	ldi	r18, 0xA3	; 163
     664:	20 93 7a 00 	sts	0x007A, r18
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     66e:	78 94       	sei
     670:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     676:	08 95       	ret

00000678 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     678:	80 91 45 01 	lds	r24, 0x0145
     67c:	81 11       	cpse	r24, r1
     67e:	1e c0       	rjmp	.+60     	; 0x6bc <get_temperature+0x44>
        cli();
     680:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     682:	88 ec       	ldi	r24, 0xC8	; 200
     684:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     688:	87 e8       	ldi	r24, 0x87	; 135
     68a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     68e:	80 91 7a 00 	lds	r24, 0x007A
     692:	80 64       	ori	r24, 0x40	; 64
     694:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     698:	80 91 7a 00 	lds	r24, 0x007A
     69c:	86 fd       	sbrc	r24, 6
     69e:	fc cf       	rjmp	.-8      	; 0x698 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6a0:	80 91 78 00 	lds	r24, 0x0078
     6a4:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6a8:	10 92 7c 00 	sts	0x007C, r1
     6ac:	23 ea       	ldi	r18, 0xA3	; 163
     6ae:	20 93 7a 00 	sts	0x007A, r18
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6b8:	78 94       	sei
     6ba:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6c0:	08 95       	ret

000006c2 <rand_hard>:

uint8_t rand_hard() {
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	e0 e0       	ldi	r30, 0x00	; 0
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6d0:	03 ea       	ldi	r16, 0xA3	; 163
     6d2:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6d4:	d6 e0       	ldi	r29, 0x06	; 6
     6d6:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6d8:	a1 e0       	ldi	r26, 0x01	; 1
     6da:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6dc:	60 e8       	ldi	r22, 0x80	; 128
     6de:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6e0:	f8 94       	cli
            adc_setup_conversion(6);
     6e2:	d0 93 7c 00 	sts	0x007C, r29
     6e6:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6ea:	90 91 7a 00 	lds	r25, 0x007A
     6ee:	90 64       	ori	r25, 0x40	; 64
     6f0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6f4:	90 91 7a 00 	lds	r25, 0x007A
     6f8:	96 fd       	sbrc	r25, 6
     6fa:	fc cf       	rjmp	.-8      	; 0x6f4 <rand_hard+0x32>
            a = ADCW&0x1;
     6fc:	20 91 78 00 	lds	r18, 0x0078
     700:	30 91 79 00 	lds	r19, 0x0079
     704:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     706:	90 91 7a 00 	lds	r25, 0x007A
     70a:	90 64       	ori	r25, 0x40	; 64
     70c:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     710:	90 91 7a 00 	lds	r25, 0x007A
     714:	96 fd       	sbrc	r25, 6
     716:	fc cf       	rjmp	.-8      	; 0x710 <rand_hard+0x4e>
            b = ADCW&0x1;
     718:	40 91 78 00 	lds	r20, 0x0078
     71c:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     720:	10 92 7c 00 	sts	0x007C, r1
     724:	00 93 7a 00 	sts	0x007A, r16
     728:	10 93 7b 00 	sts	0x007B, r17
            sei();
     72c:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     72e:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     730:	24 13       	cpse	r18, r20
     732:	03 c0       	rjmp	.+6      	; 0x73a <rand_hard+0x78>
     734:	61 50       	subi	r22, 0x01	; 1
     736:	71 09       	sbc	r23, r1
     738:	99 f6       	brne	.-90     	; 0x6e0 <rand_hard+0x1e>
        if (a)
     73a:	22 23       	and	r18, r18
     73c:	39 f0       	breq	.+14     	; 0x74c <rand_hard+0x8a>
            num |= (1<<i);
     73e:	9d 01       	movw	r18, r26
     740:	0e 2e       	mov	r0, r30
     742:	01 c0       	rjmp	.+2      	; 0x746 <rand_hard+0x84>
     744:	22 0f       	add	r18, r18
     746:	0a 94       	dec	r0
     748:	ea f7       	brpl	.-6      	; 0x744 <rand_hard+0x82>
     74a:	82 2b       	or	r24, r18
     74c:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     74e:	e8 30       	cpi	r30, 0x08	; 8
     750:	f1 05       	cpc	r31, r1
     752:	09 f0       	breq	.+2      	; 0x756 <rand_hard+0x94>
     754:	c3 cf       	rjmp	.-122    	; 0x6dc <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     760:	80 91 00 01 	lds	r24, 0x0100
     764:	98 2f       	mov	r25, r24
     766:	99 0f       	add	r25, r25
     768:	99 0f       	add	r25, r25
     76a:	99 0f       	add	r25, r25
     76c:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     76e:	90 91 0e 01 	lds	r25, 0x010E
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	29 0f       	add	r18, r25
     776:	20 93 0e 01 	sts	0x010E, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     77a:	28 2f       	mov	r18, r24
     77c:	22 95       	swap	r18
     77e:	26 95       	lsr	r18
     780:	27 70       	andi	r18, 0x07	; 7
     782:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     784:	96 95       	lsr	r25
     786:	96 95       	lsr	r25
     788:	89 27       	eor	r24, r25
     78a:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     78e:	08 95       	ret

00000790 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     790:	80 93 00 01 	sts	0x0100, r24
     794:	08 95       	ret

00000796 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     796:	80 91 45 01 	lds	r24, 0x0145
     79a:	81 11       	cpse	r24, r1
     79c:	16 c0       	rjmp	.+44     	; 0x7ca <get_voltage+0x34>
        cli();                                    // disable interrupts
     79e:	f8 94       	cli
        adc_setup_conversion(6);
     7a0:	86 e0       	ldi	r24, 0x06	; 6
     7a2:	80 93 7c 00 	sts	0x007C, r24
     7a6:	83 e8       	ldi	r24, 0x83	; 131
     7a8:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7ac:	80 91 7a 00 	lds	r24, 0x007A
     7b0:	80 64       	ori	r24, 0x40	; 64
     7b2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7b6:	80 91 7a 00 	lds	r24, 0x007A
     7ba:	86 fd       	sbrc	r24, 6
     7bc:	fc cf       	rjmp	.-8      	; 0x7b6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7be:	80 91 78 00 	lds	r24, 0x0078
     7c2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7c6:	78 94       	sei
     7c8:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7ce:	08 95       	ret

000007d0 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7d0:	2f 92       	push	r2
     7d2:	3f 92       	push	r3
     7d4:	4f 92       	push	r4
     7d6:	5f 92       	push	r5
     7d8:	6f 92       	push	r6
     7da:	7f 92       	push	r7
     7dc:	8f 92       	push	r8
     7de:	9f 92       	push	r9
     7e0:	af 92       	push	r10
     7e2:	bf 92       	push	r11
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <estimate_distance+0x26>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <estimate_distance+0x28>
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <estimate_distance+0x2a>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     800:	dc 01       	movw	r26, r24
     802:	12 96       	adiw	r26, 0x02	; 2
     804:	0d 90       	ld	r0, X+
     806:	bc 91       	ld	r27, X
     808:	a0 2d       	mov	r26, r0
     80a:	be 83       	std	Y+6, r27	; 0x06
     80c:	ad 83       	std	Y+5, r26	; 0x05
     80e:	a4 38       	cpi	r26, 0x84	; 132
     810:	e3 e0       	ldi	r30, 0x03	; 3
     812:	be 07       	cpc	r27, r30
     814:	0c f0       	brlt	.+2      	; 0x818 <estimate_distance+0x48>
     816:	c9 c0       	rjmp	.+402    	; 0x9aa <__stack+0xab>
        if (dist->high_gain > kilo_irhigh[0]) {
     818:	80 91 1f 01 	lds	r24, 0x011F
     81c:	90 91 20 01 	lds	r25, 0x0120
     820:	8a 17       	cp	r24, r26
     822:	9b 07       	cpc	r25, r27
     824:	08 f4       	brcc	.+2      	; 0x828 <estimate_distance+0x58>
     826:	37 c1       	rjmp	.+622    	; 0xa96 <__stack+0x197>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     828:	00 91 21 01 	lds	r16, 0x0121
     82c:	10 91 22 01 	lds	r17, 0x0122
     830:	0a 17       	cp	r16, r26
     832:	1b 07       	cpc	r17, r27
     834:	08 f4       	brcc	.+2      	; 0x838 <estimate_distance+0x68>
     836:	2f c2       	rjmp	.+1118   	; 0xc96 <__stack+0x397>
     838:	00 91 23 01 	lds	r16, 0x0123
     83c:	10 91 24 01 	lds	r17, 0x0124
     840:	0a 17       	cp	r16, r26
     842:	1b 07       	cpc	r17, r27
     844:	08 f4       	brcc	.+2      	; 0x848 <estimate_distance+0x78>
     846:	2f c2       	rjmp	.+1118   	; 0xca6 <__stack+0x3a7>
     848:	00 91 25 01 	lds	r16, 0x0125
     84c:	10 91 26 01 	lds	r17, 0x0126
     850:	0a 17       	cp	r16, r26
     852:	1b 07       	cpc	r17, r27
     854:	08 f4       	brcc	.+2      	; 0x858 <estimate_distance+0x88>
     856:	2f c2       	rjmp	.+1118   	; 0xcb6 <__stack+0x3b7>
     858:	00 91 27 01 	lds	r16, 0x0127
     85c:	10 91 28 01 	lds	r17, 0x0128
     860:	0a 17       	cp	r16, r26
     862:	1b 07       	cpc	r17, r27
     864:	08 f4       	brcc	.+2      	; 0x868 <estimate_distance+0x98>
     866:	2f c2       	rjmp	.+1118   	; 0xcc6 <__stack+0x3c7>
     868:	00 91 29 01 	lds	r16, 0x0129
     86c:	10 91 2a 01 	lds	r17, 0x012A
     870:	0a 17       	cp	r16, r26
     872:	1b 07       	cpc	r17, r27
     874:	08 f4       	brcc	.+2      	; 0x878 <estimate_distance+0xa8>
     876:	ef c1       	rjmp	.+990    	; 0xc56 <__stack+0x357>
     878:	00 91 2b 01 	lds	r16, 0x012B
     87c:	10 91 2c 01 	lds	r17, 0x012C
     880:	0a 17       	cp	r16, r26
     882:	1b 07       	cpc	r17, r27
     884:	08 f4       	brcc	.+2      	; 0x888 <estimate_distance+0xb8>
     886:	27 c2       	rjmp	.+1102   	; 0xcd6 <__stack+0x3d7>
     888:	00 91 2d 01 	lds	r16, 0x012D
     88c:	10 91 2e 01 	lds	r17, 0x012E
     890:	0a 17       	cp	r16, r26
     892:	1b 07       	cpc	r17, r27
     894:	08 f4       	brcc	.+2      	; 0x898 <estimate_distance+0xc8>
     896:	27 c2       	rjmp	.+1102   	; 0xce6 <__stack+0x3e7>
     898:	00 91 2f 01 	lds	r16, 0x012F
     89c:	10 91 30 01 	lds	r17, 0x0130
     8a0:	0a 17       	cp	r16, r26
     8a2:	1b 07       	cpc	r17, r27
     8a4:	08 f4       	brcc	.+2      	; 0x8a8 <estimate_distance+0xd8>
     8a6:	27 c2       	rjmp	.+1102   	; 0xcf6 <__stack+0x3f7>
     8a8:	00 91 31 01 	lds	r16, 0x0131
     8ac:	10 91 32 01 	lds	r17, 0x0132
     8b0:	0a 17       	cp	r16, r26
     8b2:	1b 07       	cpc	r17, r27
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <estimate_distance+0xe8>
     8b6:	27 c2       	rjmp	.+1102   	; 0xd06 <__stack+0x407>
     8b8:	00 91 33 01 	lds	r16, 0x0133
     8bc:	10 91 34 01 	lds	r17, 0x0134
     8c0:	0a 17       	cp	r16, r26
     8c2:	1b 07       	cpc	r17, r27
     8c4:	08 f4       	brcc	.+2      	; 0x8c8 <estimate_distance+0xf8>
     8c6:	27 c2       	rjmp	.+1102   	; 0xd16 <__stack+0x417>
     8c8:	00 91 35 01 	lds	r16, 0x0135
     8cc:	10 91 36 01 	lds	r17, 0x0136
     8d0:	0a 17       	cp	r16, r26
     8d2:	1b 07       	cpc	r17, r27
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <estimate_distance+0x108>
     8d6:	23 c2       	rjmp	.+1094   	; 0xd1e <__stack+0x41f>
     8d8:	00 91 37 01 	lds	r16, 0x0137
     8dc:	10 91 38 01 	lds	r17, 0x0138
     8e0:	0a 17       	cp	r16, r26
     8e2:	1b 07       	cpc	r17, r27
     8e4:	08 f4       	brcc	.+2      	; 0x8e8 <estimate_distance+0x118>
     8e6:	23 c2       	rjmp	.+1094   	; 0xd2e <__stack+0x42f>
     8e8:	00 91 39 01 	lds	r16, 0x0139
     8ec:	10 91 3a 01 	lds	r17, 0x013A
     8f0:	0a 17       	cp	r16, r26
     8f2:	1b 07       	cpc	r17, r27
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <estimate_distance+0x128>
     8f6:	23 c2       	rjmp	.+1094   	; 0xd3e <__stack+0x43f>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 ed       	ldi	r26, 0xD0	; 208
     8fe:	b0 e4       	ldi	r27, 0x40	; 64
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	ab 83       	std	Y+3, r26	; 0x03
     906:	bc 83       	std	Y+4, r27	; 0x04
     908:	4c e0       	ldi	r20, 0x0C	; 12
     90a:	e4 2e       	mov	r14, r20
     90c:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     90e:	f7 01       	movw	r30, r14
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	e1 5e       	subi	r30, 0xE1	; 225
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	b8 01       	movw	r22, r16
     91e:	68 1b       	sub	r22, r24
     920:	79 0b       	sbc	r23, r25
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     92a:	9b 01       	movw	r18, r22
     92c:	ac 01       	movw	r20, r24
     92e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     932:	6b 01       	movw	r12, r22
     934:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     936:	ad 81       	ldd	r26, Y+5	; 0x05
     938:	be 81       	ldd	r27, Y+6	; 0x06
     93a:	bd 01       	movw	r22, r26
     93c:	bb 0f       	add	r27, r27
     93e:	88 0b       	sbc	r24, r24
     940:	99 0b       	sbc	r25, r25
     942:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatsisf>
     946:	4b 01       	movw	r8, r22
     948:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     94a:	b8 01       	movw	r22, r16
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     954:	2b 01       	movw	r4, r22
     956:	3c 01       	movw	r6, r24
     958:	29 81       	ldd	r18, Y+1	; 0x01
     95a:	3a 81       	ldd	r19, Y+2	; 0x02
     95c:	4b 81       	ldd	r20, Y+3	; 0x03
     95e:	5c 81       	ldd	r21, Y+4	; 0x04
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	c3 01       	movw	r24, r6
     96e:	b2 01       	movw	r22, r4
     970:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__subsf3>
     974:	9b 01       	movw	r18, r22
     976:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     978:	c5 01       	movw	r24, r10
     97a:	b4 01       	movw	r22, r8
     97c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__subsf3>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e2       	ldi	r20, 0x20	; 32
     986:	51 e4       	ldi	r21, 0x41	; 65
     988:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
            b=((int)((int)b/(int)slope));
     98c:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixsfsi>
     990:	8b 01       	movw	r16, r22
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixsfsi>
     99a:	ab 01       	movw	r20, r22
     99c:	bc 01       	movw	r22, r24
     99e:	c8 01       	movw	r24, r16
     9a0:	ba 01       	movw	r22, r20
     9a2:	0e 94 29 0a 	call	0x1452	; 0x1452 <__divmodhi4>
            dist_high=b;
     9a6:	16 2f       	mov	r17, r22
     9a8:	77 c0       	rjmp	.+238    	; 0xa98 <__stack+0x199>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9aa:	dc 01       	movw	r26, r24
     9ac:	cd 90       	ld	r12, X+
     9ae:	dc 90       	ld	r13, X
     9b0:	80 91 46 01 	lds	r24, 0x0146
     9b4:	90 91 47 01 	lds	r25, 0x0147
     9b8:	8c 15       	cp	r24, r12
     9ba:	9d 05       	cpc	r25, r13
     9bc:	08 f4       	brcc	.+2      	; 0x9c0 <__stack+0xc1>
     9be:	8c c0       	rjmp	.+280    	; 0xad8 <__stack+0x1d9>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9c0:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9c2:	e0 90 48 01 	lds	r14, 0x0148
     9c6:	f0 90 49 01 	lds	r15, 0x0149
     9ca:	ec 14       	cp	r14, r12
     9cc:	fd 04       	cpc	r15, r13
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	5e c1       	rjmp	.+700    	; 0xc8e <__stack+0x38f>
     9d2:	e0 90 4a 01 	lds	r14, 0x014A
     9d6:	f0 90 4b 01 	lds	r15, 0x014B
     9da:	ec 14       	cp	r14, r12
     9dc:	fd 04       	cpc	r15, r13
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	5e c1       	rjmp	.+700    	; 0xc9e <__stack+0x39f>
     9e2:	e0 90 4c 01 	lds	r14, 0x014C
     9e6:	f0 90 4d 01 	lds	r15, 0x014D
     9ea:	ec 14       	cp	r14, r12
     9ec:	fd 04       	cpc	r15, r13
     9ee:	08 f4       	brcc	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	5e c1       	rjmp	.+700    	; 0xcae <__stack+0x3af>
     9f2:	e0 90 4e 01 	lds	r14, 0x014E
     9f6:	f0 90 4f 01 	lds	r15, 0x014F
     9fa:	ec 14       	cp	r14, r12
     9fc:	fd 04       	cpc	r15, r13
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <__stack+0x103>
     a00:	5e c1       	rjmp	.+700    	; 0xcbe <__stack+0x3bf>
     a02:	e0 90 50 01 	lds	r14, 0x0150
     a06:	f0 90 51 01 	lds	r15, 0x0151
     a0a:	ec 14       	cp	r14, r12
     a0c:	fd 04       	cpc	r15, r13
     a0e:	08 f4       	brcc	.+2      	; 0xa12 <__stack+0x113>
     a10:	c3 c0       	rjmp	.+390    	; 0xb98 <__stack+0x299>
     a12:	e0 90 52 01 	lds	r14, 0x0152
     a16:	f0 90 53 01 	lds	r15, 0x0153
     a1a:	ec 14       	cp	r14, r12
     a1c:	fd 04       	cpc	r15, r13
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <__stack+0x123>
     a20:	56 c1       	rjmp	.+684    	; 0xcce <__stack+0x3cf>
     a22:	e0 90 54 01 	lds	r14, 0x0154
     a26:	f0 90 55 01 	lds	r15, 0x0155
     a2a:	ec 14       	cp	r14, r12
     a2c:	fd 04       	cpc	r15, r13
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <__stack+0x133>
     a30:	56 c1       	rjmp	.+684    	; 0xcde <__stack+0x3df>
     a32:	e0 90 56 01 	lds	r14, 0x0156
     a36:	f0 90 57 01 	lds	r15, 0x0157
     a3a:	ec 14       	cp	r14, r12
     a3c:	fd 04       	cpc	r15, r13
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <__stack+0x143>
     a40:	56 c1       	rjmp	.+684    	; 0xcee <__stack+0x3ef>
     a42:	e0 90 58 01 	lds	r14, 0x0158
     a46:	f0 90 59 01 	lds	r15, 0x0159
     a4a:	ec 14       	cp	r14, r12
     a4c:	fd 04       	cpc	r15, r13
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <__stack+0x153>
     a50:	56 c1       	rjmp	.+684    	; 0xcfe <__stack+0x3ff>
     a52:	e0 90 5a 01 	lds	r14, 0x015A
     a56:	f0 90 5b 01 	lds	r15, 0x015B
     a5a:	ec 14       	cp	r14, r12
     a5c:	fd 04       	cpc	r15, r13
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <__stack+0x163>
     a60:	56 c1       	rjmp	.+684    	; 0xd0e <__stack+0x40f>
     a62:	e0 90 5c 01 	lds	r14, 0x015C
     a66:	f0 90 5d 01 	lds	r15, 0x015D
     a6a:	ec 14       	cp	r14, r12
     a6c:	fd 04       	cpc	r15, r13
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <__stack+0x173>
     a70:	5a c1       	rjmp	.+692    	; 0xd26 <__stack+0x427>
     a72:	e0 90 5e 01 	lds	r14, 0x015E
     a76:	f0 90 5f 01 	lds	r15, 0x015F
     a7a:	ec 14       	cp	r14, r12
     a7c:	fd 04       	cpc	r15, r13
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <__stack+0x183>
     a80:	5a c1       	rjmp	.+692    	; 0xd36 <__stack+0x437>
     a82:	e0 90 60 01 	lds	r14, 0x0160
     a86:	f0 90 61 01 	lds	r15, 0x0161
     a8a:	ec 14       	cp	r14, r12
     a8c:	fd 04       	cpc	r15, r13
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__stack+0x193>
     a90:	5a c1       	rjmp	.+692    	; 0xd46 <__stack+0x447>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a92:	0a e5       	ldi	r16, 0x5A	; 90
     a94:	31 c0       	rjmp	.+98     	; 0xaf8 <__stack+0x1f9>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a96:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a98:	ed 81       	ldd	r30, Y+5	; 0x05
     a9a:	fe 81       	ldd	r31, Y+6	; 0x06
     a9c:	ed 3b       	cpi	r30, 0xBD	; 189
     a9e:	f2 40       	sbci	r31, 0x02	; 2
     aa0:	fc f4       	brge	.+62     	; 0xae0 <__stack+0x1e1>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     aa2:	81 e2       	ldi	r24, 0x21	; 33
     aa4:	81 0f       	add	r24, r17
    }
}
     aa6:	26 96       	adiw	r28, 0x06	; 6
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	7f 90       	pop	r7
     acc:	6f 90       	pop	r6
     ace:	5f 90       	pop	r5
     ad0:	4f 90       	pop	r4
     ad2:	3f 90       	pop	r3
     ad4:	2f 90       	pop	r2
     ad6:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     ad8:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     ada:	81 e2       	ldi	r24, 0x21	; 33
     adc:	80 0f       	add	r24, r16
     ade:	e3 cf       	rjmp	.-58     	; 0xaa6 <__stack+0x1a7>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ae0:	d1 01       	movw	r26, r2
     ae2:	cd 90       	ld	r12, X+
     ae4:	dc 90       	ld	r13, X
     ae6:	80 91 46 01 	lds	r24, 0x0146
     aea:	90 91 47 01 	lds	r25, 0x0147
     aee:	8c 15       	cp	r24, r12
     af0:	9d 05       	cpc	r25, r13
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <__stack+0x1f7>
     af4:	66 cf       	rjmp	.-308    	; 0x9c2 <__stack+0xc3>
            dist_low=0;
     af6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     af8:	1f 3f       	cpi	r17, 0xFF	; 255
     afa:	79 f3       	breq	.-34     	; 0xada <__stack+0x1db>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     afc:	ed 81       	ldd	r30, Y+5	; 0x05
     afe:	fe 81       	ldd	r31, Y+6	; 0x06
     b00:	bf 01       	movw	r22, r30
     b02:	ff 0f       	add	r31, r31
     b04:	88 0b       	sbc	r24, r24
     b06:	99 0b       	sbc	r25, r25
     b08:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatsisf>
     b0c:	6b 01       	movw	r12, r22
     b0e:	7c 01       	movw	r14, r24
     b10:	61 2f       	mov	r22, r17
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     b1c:	4b 01       	movw	r8, r22
     b1e:	5c 01       	movw	r10, r24
     b20:	a7 01       	movw	r20, r14
     b22:	96 01       	movw	r18, r12
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e6       	ldi	r24, 0x61	; 97
     b2a:	94 e4       	ldi	r25, 0x44	; 68
     b2c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__subsf3>
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	c5 01       	movw	r24, r10
     b36:	b4 01       	movw	r22, r8
     b38:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
     b3c:	4b 01       	movw	r8, r22
     b3e:	5c 01       	movw	r10, r24
     b40:	60 2f       	mov	r22, r16
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     b4c:	2b 01       	movw	r4, r22
     b4e:	3c 01       	movw	r6, r24
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	4f e2       	ldi	r20, 0x2F	; 47
     b56:	54 e4       	ldi	r21, 0x44	; 68
     b58:	c7 01       	movw	r24, r14
     b5a:	b6 01       	movw	r22, r12
     b5c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__subsf3>
     b60:	9b 01       	movw	r18, r22
     b62:	ac 01       	movw	r20, r24
     b64:	c3 01       	movw	r24, r6
     b66:	b2 01       	movw	r22, r4
     b68:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	c5 01       	movw	r24, r10
     b72:	b4 01       	movw	r22, r8
     b74:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	48 e4       	ldi	r20, 0x48	; 72
     b7e:	53 e4       	ldi	r21, 0x43	; 67
     b80:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__divsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	44 e0       	ldi	r20, 0x04	; 4
     b8a:	52 e4       	ldi	r21, 0x42	; 66
     b8c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     b90:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     b94:	86 2f       	mov	r24, r22
     b96:	87 cf       	rjmp	.-242    	; 0xaa6 <__stack+0x1a7>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b98:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     b9a:	85 e0       	ldi	r24, 0x05	; 5
     b9c:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	fc 01       	movw	r30, r24
     ba4:	ec 5b       	subi	r30, 0xBC	; 188
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	80 81       	ld	r24, Z
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	b7 01       	movw	r22, r14
     bae:	68 1b       	sub	r22, r24
     bb0:	79 0b       	sbc	r23, r25
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     bba:	9b 01       	movw	r18, r22
     bbc:	ac 01       	movw	r20, r24
     bbe:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     bc2:	4b 01       	movw	r8, r22
     bc4:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bc6:	b6 01       	movw	r22, r12
     bc8:	dd 0c       	add	r13, r13
     bca:	88 0b       	sbc	r24, r24
     bcc:	99 0b       	sbc	r25, r25
     bce:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatsisf>
     bd2:	2b 01       	movw	r4, r22
     bd4:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bd6:	b7 01       	movw	r22, r14
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     be0:	6b 01       	movw	r12, r22
     be2:	7c 01       	movw	r14, r24
     be4:	60 2f       	mov	r22, r16
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	a9 01       	movw	r20, r18
     c02:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     c06:	a5 01       	movw	r20, r10
     c08:	94 01       	movw	r18, r8
     c0a:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c7 01       	movw	r24, r14
     c14:	b6 01       	movw	r22, r12
     c16:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__subsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c1e:	c3 01       	movw	r24, r6
     c20:	b2 01       	movw	r22, r4
     c22:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__subsf3>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c32:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixsfsi>
     c36:	7b 01       	movw	r14, r22
     c38:	c5 01       	movw	r24, r10
     c3a:	b4 01       	movw	r22, r8
     c3c:	0e 94 45 0b 	call	0x168a	; 0x168a <__fixsfsi>
     c40:	ab 01       	movw	r20, r22
     c42:	bc 01       	movw	r22, r24
     c44:	c7 01       	movw	r24, r14
     c46:	ba 01       	movw	r22, r20
     c48:	0e 94 29 0a 	call	0x1452	; 0x1452 <__divmodhi4>
                dist_low=b;
     c4c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c4e:	6f 3f       	cpi	r22, 0xFF	; 255
     c50:	09 f0       	breq	.+2      	; 0xc54 <__stack+0x355>
     c52:	52 cf       	rjmp	.-348    	; 0xaf8 <__stack+0x1f9>
     c54:	26 cf       	rjmp	.-436    	; 0xaa2 <__stack+0x1a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c56:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	7c 01       	movw	r14, r24
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	ef 1a       	sub	r14, r31
     c62:	f1 08       	sbc	r15, r1
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__floatunsisf>
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	5f e3       	ldi	r21, 0x3F	; 63
     c76:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	a9 01       	movw	r20, r18
     c80:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     c84:	69 83       	std	Y+1, r22	; 0x01
     c86:	7a 83       	std	Y+2, r23	; 0x02
     c88:	8b 83       	std	Y+3, r24	; 0x03
     c8a:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     c8c:	40 ce       	rjmp	.-896    	; 0x90e <__stack+0xf>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c8e:	01 e0       	ldi	r16, 0x01	; 1
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	84 cf       	rjmp	.-248    	; 0xb9e <__stack+0x29f>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	df cf       	rjmp	.-66     	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c9e:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	7c cf       	rjmp	.-264    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ca6:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	d7 cf       	rjmp	.-82     	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cae:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	74 cf       	rjmp	.-280    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb6:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	cf cf       	rjmp	.-98     	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cbe:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	6c cf       	rjmp	.-296    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc6:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     cc8:	84 e0       	ldi	r24, 0x04	; 4
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	c7 cf       	rjmp	.-114    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cce:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	64 cf       	rjmp	.-312    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd6:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	bf cf       	rjmp	.-130    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cde:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ce0:	87 e0       	ldi	r24, 0x07	; 7
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	5c cf       	rjmp	.-328    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce6:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     ce8:	87 e0       	ldi	r24, 0x07	; 7
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	b7 cf       	rjmp	.-146    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cee:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	54 cf       	rjmp	.-344    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	af cf       	rjmp	.-162    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cfe:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	4c cf       	rjmp	.-360    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d06:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d08:	89 e0       	ldi	r24, 0x09	; 9
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	a7 cf       	rjmp	.-178    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d0e:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d10:	8a e0       	ldi	r24, 0x0A	; 10
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	44 cf       	rjmp	.-376    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d16:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d18:	8a e0       	ldi	r24, 0x0A	; 10
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9f cf       	rjmp	.-194    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1e:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d20:	8b e0       	ldi	r24, 0x0B	; 11
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9b cf       	rjmp	.-202    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d26:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d28:	8b e0       	ldi	r24, 0x0B	; 11
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	38 cf       	rjmp	.-400    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d2e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	93 cf       	rjmp	.-218    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d36:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d38:	8c e0       	ldi	r24, 0x0C	; 12
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	30 cf       	rjmp	.-416    	; 0xb9e <__stack+0x29f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d3e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d40:	8d e0       	ldi	r24, 0x0D	; 13
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	8b cf       	rjmp	.-234    	; 0xc5c <__stack+0x35d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d46:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d48:	8d e0       	ldi	r24, 0x0D	; 13
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	28 cf       	rjmp	.-432    	; 0xb9e <__stack+0x29f>

00000d4e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
    tx_clock += tx_increment;
     d70:	20 91 65 01 	lds	r18, 0x0165
     d74:	30 91 66 01 	lds	r19, 0x0166
     d78:	80 91 63 01 	lds	r24, 0x0163
     d7c:	90 91 64 01 	lds	r25, 0x0164
     d80:	82 0f       	add	r24, r18
     d82:	93 1f       	adc	r25, r19
     d84:	90 93 66 01 	sts	0x0166, r25
     d88:	80 93 65 01 	sts	0x0165, r24
    tx_increment = 0xFF;
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	90 93 64 01 	sts	0x0164, r25
     d94:	80 93 63 01 	sts	0x0163, r24
    OCR0A = tx_increment;
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d9c:	80 91 41 01 	lds	r24, 0x0141
     da0:	90 91 42 01 	lds	r25, 0x0142
     da4:	a0 91 43 01 	lds	r26, 0x0143
     da8:	b0 91 44 01 	lds	r27, 0x0144
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	a1 1d       	adc	r26, r1
     db0:	b1 1d       	adc	r27, r1
     db2:	80 93 41 01 	sts	0x0141, r24
     db6:	90 93 42 01 	sts	0x0142, r25
     dba:	a0 93 43 01 	sts	0x0143, r26
     dbe:	b0 93 44 01 	sts	0x0144, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     dc2:	80 91 45 01 	lds	r24, 0x0145
     dc6:	81 11       	cpse	r24, r1
     dc8:	0f c0       	rjmp	.+30     	; 0xde8 <__vector_14+0x9a>
     dca:	80 91 74 01 	lds	r24, 0x0174
     dce:	90 91 75 01 	lds	r25, 0x0175
     dd2:	20 91 65 01 	lds	r18, 0x0165
     dd6:	30 91 66 01 	lds	r19, 0x0166
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	20 f4       	brcc	.+8      	; 0xde8 <__vector_14+0x9a>
     de0:	80 91 11 01 	lds	r24, 0x0111
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	89 f0       	breq	.+34     	; 0xe0a <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e0a:	e0 91 03 01 	lds	r30, 0x0103
     e0e:	f0 91 04 01 	lds	r31, 0x0104
     e12:	09 95       	icall
        if (msg) {
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	41 f3       	breq	.-48     	; 0xde8 <__vector_14+0x9a>
            if (message_send(msg)) {
     e18:	0e 94 8f 09 	call	0x131e	; 0x131e <message_send>
     e1c:	81 11       	cpse	r24, r1
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e20:	0e 94 c2 0c 	call	0x1984	; 0x1984 <rand>
     e24:	99 27       	eor	r25, r25
     e26:	90 93 64 01 	sts	0x0164, r25
     e2a:	80 93 63 01 	sts	0x0163, r24
                OCR0A = tx_increment;
     e2e:	87 bd       	out	0x27, r24	; 39
     e30:	db cf       	rjmp	.-74     	; 0xde8 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e32:	e0 91 01 01 	lds	r30, 0x0101
     e36:	f0 91 02 01 	lds	r31, 0x0102
     e3a:	09 95       	icall
                tx_clock = 0;
     e3c:	10 92 66 01 	sts	0x0166, r1
     e40:	10 92 65 01 	sts	0x0165, r1
     e44:	d1 cf       	rjmp	.-94     	; 0xde8 <__vector_14+0x9a>

00000e46 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e46:	80 ff       	sbrs	r24, 0
     e48:	11 c0       	rjmp	.+34     	; 0xe6c <set_color+0x26>
        DDRD |= (1<<5);
     e4a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e4c:	81 ff       	sbrs	r24, 1
     e4e:	11 c0       	rjmp	.+34     	; 0xe72 <set_color+0x2c>
        DDRD |= (1<<4);
     e50:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e52:	82 ff       	sbrs	r24, 2
     e54:	11 c0       	rjmp	.+34     	; 0xe78 <set_color+0x32>
        DDRC |= (1<<3);
     e56:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e58:	83 ff       	sbrs	r24, 3
     e5a:	11 c0       	rjmp	.+34     	; 0xe7e <set_color+0x38>
        DDRC |= (1<<2);
     e5c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e5e:	84 ff       	sbrs	r24, 4
     e60:	11 c0       	rjmp	.+34     	; 0xe84 <set_color+0x3e>
        DDRC |= (1<<5);
     e62:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e64:	85 fd       	sbrc	r24, 5
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e68:	3c 98       	cbi	0x07, 4	; 7
     e6a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e6c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e6e:	81 fd       	sbrc	r24, 1
     e70:	ef cf       	rjmp	.-34     	; 0xe50 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e72:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e74:	82 fd       	sbrc	r24, 2
     e76:	ef cf       	rjmp	.-34     	; 0xe56 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e78:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e7a:	83 fd       	sbrc	r24, 3
     e7c:	ef cf       	rjmp	.-34     	; 0xe5c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e7e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e80:	84 fd       	sbrc	r24, 4
     e82:	ef cf       	rjmp	.-34     	; 0xe62 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e84:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e86:	85 ff       	sbrs	r24, 5
     e88:	ef cf       	rjmp	.-34     	; 0xe68 <set_color+0x22>
        DDRC |= (1<<4);
     e8a:	3c 9a       	sbi	0x07, 4	; 7
     e8c:	08 95       	ret

00000e8e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
    rx_timer_off();
     e9c:	10 92 81 00 	sts	0x0081, r1
     ea0:	10 92 85 00 	sts	0x0085, r1
     ea4:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	80 93 1e 01 	sts	0x011E, r24
    rx_leadingbyte = 1;
     eae:	80 93 62 01 	sts	0x0162, r24
    rx_busy = 0;
     eb2:	10 92 45 01 	sts	0x0145, r1
    adc_trigger_high_gain();
     eb6:	10 92 7c 00 	sts	0x007C, r1
     eba:	93 ea       	ldi	r25, 0xA3	; 163
     ebc:	90 93 7a 00 	sts	0x007A, r25
     ec0:	80 93 7b 00 	sts	0x007B, r24
}
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ef8:	20 91 84 00 	lds	r18, 0x0084
     efc:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	40 93 45 01 	sts	0x0145, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f06:	80 91 1e 01 	lds	r24, 0x011E
     f0a:	88 23       	and	r24, r24
     f0c:	a9 f1       	breq	.+106    	; 0xf78 <__vector_23+0xa6>
        rx_timer_on();
     f0e:	10 92 85 00 	sts	0x0085, r1
     f12:	10 92 84 00 	sts	0x0084, r1
     f16:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f1a:	10 92 76 01 	sts	0x0176, r1
        rx_leadingbit = 0;
     f1e:	10 92 1e 01 	sts	0x011E, r1
        if (rx_leadingbyte) {
     f22:	80 91 62 01 	lds	r24, 0x0162
     f26:	88 23       	and	r24, r24
     f28:	a1 f0       	breq	.+40     	; 0xf52 <__vector_23+0x80>
            adc_finish_conversion();
     f2a:	80 91 7a 00 	lds	r24, 0x007A
     f2e:	86 fd       	sbrc	r24, 6
     f30:	fc cf       	rjmp	.-8      	; 0xf2a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f32:	80 91 78 00 	lds	r24, 0x0078
     f36:	90 91 79 00 	lds	r25, 0x0079
     f3a:	90 93 40 01 	sts	0x0140, r25
     f3e:	80 93 3f 01 	sts	0x013F, r24
            adc_trigger_low_gain();
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 7c 00 	sts	0x007C, r24
     f48:	93 ea       	ldi	r25, 0xA3	; 163
     f4a:	90 93 7a 00 	sts	0x007A, r25
     f4e:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f78:	c9 01       	movw	r24, r18
     f7a:	87 58       	subi	r24, 0x87	; 135
     f7c:	91 09       	sbc	r25, r1
     f7e:	84 37       	cpi	r24, 0x74	; 116
     f80:	99 40       	sbci	r25, 0x09	; 9
     f82:	08 f0       	brcs	.+2      	; 0xf86 <__vector_23+0xb4>
     f84:	52 c0       	rjmp	.+164    	; 0x102a <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f86:	26 58       	subi	r18, 0x86	; 134
     f88:	31 09       	sbc	r19, r1
     f8a:	a4 ef       	ldi	r26, 0xF4	; 244
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__umulhisi3>
     f92:	aa 27       	eor	r26, r26
     f94:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f96:	88 30       	cpi	r24, 0x08	; 8
     f98:	91 05       	cpc	r25, r1
     f9a:	a1 05       	cpc	r26, r1
     f9c:	b1 05       	cpc	r27, r1
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <__vector_23+0xd0>
     fa0:	7b c0       	rjmp	.+246    	; 0x1098 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     fa2:	40 93 1e 01 	sts	0x011E, r20
                if (rx_leadingbyte) {
     fa6:	80 91 62 01 	lds	r24, 0x0162
     faa:	81 11       	cpse	r24, r1
     fac:	52 c0       	rjmp	.+164    	; 0x1052 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     fae:	80 91 3c 01 	lds	r24, 0x013C
     fb2:	e8 2f       	mov	r30, r24
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	e8 59       	subi	r30, 0x98	; 152
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	90 91 76 01 	lds	r25, 0x0176
     fbe:	90 83       	st	Z, r25
                    rx_byteindex++;
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	80 93 3c 01 	sts	0x013C, r24
                    if (rx_byteindex == sizeof(message_t)) {
     fc6:	8c 30       	cpi	r24, 0x0C	; 12
     fc8:	21 f6       	brne	.-120    	; 0xf52 <__vector_23+0x80>
                        rx_timer_off();
     fca:	10 92 81 00 	sts	0x0081, r1
     fce:	10 92 85 00 	sts	0x0085, r1
     fd2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fd6:	40 93 62 01 	sts	0x0162, r20
                        rx_busy = 0;
     fda:	10 92 45 01 	sts	0x0145, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     fde:	c0 91 72 01 	lds	r28, 0x0172
     fe2:	d0 91 73 01 	lds	r29, 0x0173
     fe6:	88 e6       	ldi	r24, 0x68	; 104
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 73 09 	call	0x12e6	; 0x12e6 <message_crc>
     fee:	c8 17       	cp	r28, r24
     ff0:	d9 07       	cpc	r29, r25
     ff2:	09 f0       	breq	.+2      	; 0xff6 <__vector_23+0x124>
     ff4:	ae cf       	rjmp	.-164    	; 0xf52 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     ff6:	80 91 71 01 	lds	r24, 0x0171
     ffa:	87 ff       	sbrs	r24, 7
     ffc:	61 c0       	rjmp	.+194    	; 0x10c0 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     ffe:	98 e7       	ldi	r25, 0x78	; 120
    1000:	98 0f       	add	r25, r24
    1002:	93 30       	cpi	r25, 0x03	; 3
    1004:	30 f0       	brcs	.+12     	; 0x1012 <__vector_23+0x140>
        motors_off();
    1006:	53 98       	cbi	0x0a, 3	; 10
    1008:	23 98       	cbi	0x04, 3	; 4
    100a:	10 92 b4 00 	sts	0x00B4, r1
    100e:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	fc 01       	movw	r30, r24
    1016:	e0 58       	subi	r30, 0x80	; 128
    1018:	f1 09       	sbc	r31, r1
    101a:	eb 30       	cpi	r30, 0x0B	; 11
    101c:	f1 05       	cpc	r31, r1
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__vector_23+0x150>
    1020:	98 cf       	rjmp	.-208    	; 0xf52 <__vector_23+0x80>
    1022:	e5 5c       	subi	r30, 0xC5	; 197
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    102a:	10 92 81 00 	sts	0x0081, r1
    102e:	10 92 85 00 	sts	0x0085, r1
    1032:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1036:	40 93 1e 01 	sts	0x011E, r20
            rx_leadingbyte = 1;
    103a:	40 93 62 01 	sts	0x0162, r20
            rx_busy = 0;
    103e:	10 92 45 01 	sts	0x0145, r1
            adc_trigger_high_gain();
    1042:	10 92 7c 00 	sts	0x007C, r1
    1046:	83 ea       	ldi	r24, 0xA3	; 163
    1048:	80 93 7a 00 	sts	0x007A, r24
    104c:	40 93 7b 00 	sts	0x007B, r20
    1050:	80 cf       	rjmp	.-256    	; 0xf52 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1052:	80 91 7a 00 	lds	r24, 0x007A
    1056:	86 fd       	sbrc	r24, 6
    1058:	fc cf       	rjmp	.-8      	; 0x1052 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    105a:	80 91 78 00 	lds	r24, 0x0078
    105e:	90 91 79 00 	lds	r25, 0x0079
    1062:	90 93 3e 01 	sts	0x013E, r25
    1066:	80 93 3d 01 	sts	0x013D, r24
                    adc_trigger_high_gain();
    106a:	10 92 7c 00 	sts	0x007C, r1
    106e:	83 ea       	ldi	r24, 0xA3	; 163
    1070:	80 93 7a 00 	sts	0x007A, r24
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    107a:	90 91 76 01 	lds	r25, 0x0176
    107e:	99 23       	and	r25, r25
    1080:	d1 f0       	breq	.+52     	; 0x10b6 <__vector_23+0x1e4>
                        rx_timer_off();
    1082:	10 92 81 00 	sts	0x0081, r1
    1086:	10 92 85 00 	sts	0x0085, r1
    108a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    108e:	80 93 62 01 	sts	0x0162, r24
                        rx_busy = 0;
    1092:	10 92 45 01 	sts	0x0145, r1
    1096:	5d cf       	rjmp	.-326    	; 0xf52 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	f9 01       	movw	r30, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <__vector_23+0x1d2>
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	8a 95       	dec	r24
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <__vector_23+0x1ce>
    10a8:	cf 01       	movw	r24, r30
    10aa:	90 91 76 01 	lds	r25, 0x0176
    10ae:	89 2b       	or	r24, r25
    10b0:	80 93 76 01 	sts	0x0176, r24
    10b4:	4e cf       	rjmp	.-356    	; 0xf52 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10b6:	10 92 62 01 	sts	0x0162, r1
                        rx_byteindex = 0;
    10ba:	10 92 3c 01 	sts	0x013C, r1
    10be:	49 cf       	rjmp	.-366    	; 0xf52 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10c0:	e0 91 05 01 	lds	r30, 0x0105
    10c4:	f0 91 06 01 	lds	r31, 0x0106
    10c8:	6d e3       	ldi	r22, 0x3D	; 61
    10ca:	71 e0       	ldi	r23, 0x01	; 1
    10cc:	88 e6       	ldi	r24, 0x68	; 104
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	09 95       	icall
    10d2:	3f cf       	rjmp	.-386    	; 0xf52 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10d4:	80 91 68 01 	lds	r24, 0x0168
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	09 f4       	brne	.+2      	; 0x10de <__vector_23+0x20c>
    10dc:	dd c0       	rjmp	.+442    	; 0x1298 <__vector_23+0x3c6>
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <__vector_23+0x210>
    10e0:	ba c0       	rjmp	.+372    	; 0x1256 <__vector_23+0x384>
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <__vector_23+0x216>
    10e6:	c6 c0       	rjmp	.+396    	; 0x1274 <__vector_23+0x3a2>
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	09 f0       	breq	.+2      	; 0x10ee <__vector_23+0x21c>
    10ec:	b1 c0       	rjmp	.+354    	; 0x1250 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10ee:	80 91 0f 01 	lds	r24, 0x010F
    10f2:	90 91 6e 01 	lds	r25, 0x016E
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	09 f4       	brne	.+2      	; 0x10fc <__vector_23+0x22a>
    10fa:	e3 c0       	rjmp	.+454    	; 0x12c2 <__vector_23+0x3f0>
    10fc:	80 91 6d 01 	lds	r24, 0x016D
                        prev_motion = MOVE_STOP;
    1100:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_STRAIGHT;
    1104:	23 e0       	ldi	r18, 0x03	; 3
    1106:	20 93 0f 01 	sts	0x010F, r18
                        kilo_straight_left = calibmsg->straight_left;
    110a:	80 93 79 01 	sts	0x0179, r24
                        kilo_straight_right = calibmsg->straight_right;
    110e:	90 93 7a 01 	sts	0x017A, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1112:	80 91 11 01 	lds	r24, 0x0111
    1116:	86 30       	cpi	r24, 0x06	; 6
    1118:	09 f4       	brne	.+2      	; 0x111c <__vector_23+0x24a>
    111a:	1b cf       	rjmp	.-458    	; 0xf52 <__vector_23+0x80>
                motors_on();
    111c:	53 9a       	sbi	0x0a, 3	; 10
    111e:	23 9a       	sbi	0x04, 3	; 4
    1120:	10 92 b4 00 	sts	0x00B4, r1
    1124:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1128:	86 e0       	ldi	r24, 0x06	; 6
    112a:	80 93 11 01 	sts	0x0111, r24
    112e:	11 cf       	rjmp	.-478    	; 0xf52 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1130:	80 91 11 01 	lds	r24, 0x0111
    1134:	86 30       	cpi	r24, 0x06	; 6
    1136:	99 f0       	breq	.+38     	; 0x115e <__vector_23+0x28c>
                motors_on();
    1138:	53 9a       	sbi	0x0a, 3	; 10
    113a:	23 9a       	sbi	0x04, 3	; 4
    113c:	10 92 b4 00 	sts	0x00B4, r1
    1140:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1144:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1146:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1148:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    114a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    114c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    114e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1150:	10 92 0f 01 	sts	0x010F, r1
    1154:	10 92 10 01 	sts	0x0110, r1
                kilo_state = MOVING;
    1158:	86 e0       	ldi	r24, 0x06	; 6
    115a:	80 93 11 01 	sts	0x0111, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9c 01       	movw	r18, r24
    1164:	00 90 68 01 	lds	r0, 0x0168
    1168:	02 c0       	rjmp	.+4      	; 0x116e <__vector_23+0x29c>
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <__vector_23+0x298>
    1172:	80 91 77 01 	lds	r24, 0x0177
    1176:	90 91 78 01 	lds	r25, 0x0178
    117a:	82 23       	and	r24, r18
    117c:	93 23       	and	r25, r19
    117e:	89 2b       	or	r24, r25
    1180:	09 f0       	breq	.+2      	; 0x1184 <__vector_23+0x2b2>
    1182:	86 c0       	rjmp	.+268    	; 0x1290 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1184:	10 92 0f 01 	sts	0x010F, r1
    1188:	e4 ce       	rjmp	.-568    	; 0xf52 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 11 01 	sts	0x0111, r24
    1190:	e0 ce       	rjmp	.-576    	; 0xf52 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1192:	e0 e0       	ldi	r30, 0x00	; 0
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1198:	80 91 6e 00 	lds	r24, 0x006E
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	80 93 6e 00 	sts	0x006E, r24
    11a2:	16 bc       	out	0x26, r1	; 38
            bootload();
    11a4:	e0 e0       	ldi	r30, 0x00	; 0
    11a6:	f0 e7       	ldi	r31, 0x70	; 112
    11a8:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11aa:	10 92 11 01 	sts	0x0111, r1
    11ae:	d1 ce       	rjmp	.-606    	; 0xf52 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	80 93 11 01 	sts	0x0111, r24
    11b6:	cd ce       	rjmp	.-614    	; 0xf52 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11b8:	85 e0       	ldi	r24, 0x05	; 5
    11ba:	80 93 11 01 	sts	0x0111, r24
    11be:	c9 ce       	rjmp	.-622    	; 0xf52 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11c0:	80 91 11 01 	lds	r24, 0x0111
    11c4:	83 30       	cpi	r24, 0x03	; 3
    11c6:	09 f4       	brne	.+2      	; 0x11ca <__vector_23+0x2f8>
    11c8:	c4 ce       	rjmp	.-632    	; 0xf52 <__vector_23+0x80>
    11ca:	80 91 11 01 	lds	r24, 0x0111
    11ce:	84 30       	cpi	r24, 0x04	; 4
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__vector_23+0x302>
    11d2:	bf ce       	rjmp	.-642    	; 0xf52 <__vector_23+0x80>
                motors_on();
    11d4:	53 9a       	sbi	0x0a, 3	; 10
    11d6:	23 9a       	sbi	0x04, 3	; 4
    11d8:	10 92 b4 00 	sts	0x00B4, r1
    11dc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	80 93 11 01 	sts	0x0111, r24
    11e6:	b5 ce       	rjmp	.-662    	; 0xf52 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11e8:	80 91 11 01 	lds	r24, 0x0111
    11ec:	86 30       	cpi	r24, 0x06	; 6
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <__vector_23+0x320>
    11f0:	b0 ce       	rjmp	.-672    	; 0xf52 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11f2:	60 91 77 01 	lds	r22, 0x0177
    11f6:	80 eb       	ldi	r24, 0xB0	; 176
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11fe:	60 91 78 01 	lds	r22, 0x0178
    1202:	81 eb       	ldi	r24, 0xB1	; 177
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    120a:	60 91 7b 01 	lds	r22, 0x017B
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1216:	60 91 67 01 	lds	r22, 0x0167
    121a:	89 e0       	ldi	r24, 0x09	; 9
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1222:	60 91 79 01 	lds	r22, 0x0179
    1226:	8c e0       	ldi	r24, 0x0C	; 12
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    122e:	60 91 7a 01 	lds	r22, 0x017A
    1232:	84 e1       	ldi	r24, 0x14	; 20
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <eeprom_write_byte>
                        motors_off();
    123a:	53 98       	cbi	0x0a, 3	; 10
    123c:	23 98       	cbi	0x04, 3	; 4
    123e:	10 92 b4 00 	sts	0x00B4, r1
    1242:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 11 01 	sts	0x0111, r24
    124c:	80 91 68 01 	lds	r24, 0x0168
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1250:	81 11       	cpse	r24, r1
    1252:	5f cf       	rjmp	.-322    	; 0x1112 <__vector_23+0x240>
    1254:	7e ce       	rjmp	.-772    	; 0xf52 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1256:	88 23       	and	r24, r24
    1258:	39 f2       	breq	.-114    	; 0x11e8 <__vector_23+0x316>
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    125e:	80 91 69 01 	lds	r24, 0x0169
    1262:	90 91 6a 01 	lds	r25, 0x016A
    1266:	90 93 78 01 	sts	0x0178, r25
    126a:	80 93 77 01 	sts	0x0177, r24
                    cur_motion = MOVE_STOP;
    126e:	10 92 0f 01 	sts	0x010F, r1
    1272:	4f cf       	rjmp	.-354    	; 0x1112 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1274:	80 91 0f 01 	lds	r24, 0x010F
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	71 f1       	breq	.+92     	; 0x12d8 <__vector_23+0x406>
    127c:	80 91 6c 01 	lds	r24, 0x016C
                        prev_motion = MOVE_STOP;
    1280:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_RIGHT;
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_right = calibmsg->turn_right;
    128a:	80 93 67 01 	sts	0x0167, r24
    128e:	41 cf       	rjmp	.-382    	; 0x1112 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 0f 01 	sts	0x010F, r24
    1296:	5d ce       	rjmp	.-838    	; 0xf52 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1298:	80 91 0f 01 	lds	r24, 0x010F
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	51 f0       	breq	.+20     	; 0x12b4 <__vector_23+0x3e2>
    12a0:	80 91 6b 01 	lds	r24, 0x016B
                        prev_motion = MOVE_STOP;
    12a4:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_LEFT;
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_left = calibmsg->turn_left;
    12ae:	80 93 7b 01 	sts	0x017B, r24
    12b2:	2f cf       	rjmp	.-418    	; 0x1112 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12b4:	80 91 6b 01 	lds	r24, 0x016B
    12b8:	90 91 7b 01 	lds	r25, 0x017B
    12bc:	89 13       	cpse	r24, r25
    12be:	f2 cf       	rjmp	.-28     	; 0x12a4 <__vector_23+0x3d2>
    12c0:	28 cf       	rjmp	.-432    	; 0x1112 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12c2:	80 91 7a 01 	lds	r24, 0x017A
    12c6:	98 13       	cpse	r25, r24
    12c8:	19 cf       	rjmp	.-462    	; 0x10fc <__vector_23+0x22a>
    12ca:	80 91 6d 01 	lds	r24, 0x016D
    12ce:	20 91 79 01 	lds	r18, 0x0179
    12d2:	82 13       	cpse	r24, r18
    12d4:	15 cf       	rjmp	.-470    	; 0x1100 <__vector_23+0x22e>
    12d6:	1d cf       	rjmp	.-454    	; 0x1112 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12d8:	80 91 6c 01 	lds	r24, 0x016C
    12dc:	90 91 67 01 	lds	r25, 0x0167
    12e0:	89 13       	cpse	r24, r25
    12e2:	ce cf       	rjmp	.-100    	; 0x1280 <__vector_23+0x3ae>
    12e4:	16 cf       	rjmp	.-468    	; 0x1112 <__vector_23+0x240>

000012e6 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12e6:	fc 01       	movw	r30, r24
    12e8:	ac 01       	movw	r20, r24
    12ea:	46 5f       	subi	r20, 0xF6	; 246
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12f2:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12f4:	82 27       	eor	r24, r18
    12f6:	08 2e       	mov	r0, r24
    12f8:	82 95       	swap	r24
    12fa:	80 7f       	andi	r24, 0xF0	; 240
    12fc:	80 25       	eor	r24, r0
    12fe:	09 2e       	mov	r0, r25
    1300:	98 2f       	mov	r25, r24
    1302:	82 95       	swap	r24
    1304:	8f 70       	andi	r24, 0x0F	; 15
    1306:	08 26       	eor	r0, r24
    1308:	86 95       	lsr	r24
    130a:	98 27       	eor	r25, r24
    130c:	89 27       	eor	r24, r25
    130e:	88 0f       	add	r24, r24
    1310:	88 0f       	add	r24, r24
    1312:	88 0f       	add	r24, r24
    1314:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1316:	e4 17       	cp	r30, r20
    1318:	f5 07       	cpc	r31, r21
    131a:	59 f7       	brne	.-42     	; 0x12f2 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    131c:	08 95       	ret

0000131e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    131e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1320:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1322:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1324:	20 91 3b 01 	lds	r18, 0x013B
    or tmpreg1, ddrreg
    1328:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    132a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    132c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    132e:	30 91 3b 01 	lds	r19, 0x013B
    1332:	20 30       	cpi	r18, 0x00	; 0
    1334:	29 f0       	breq	.+10     	; 0x1340 <message_send+0x22>
    1336:	00 00       	nop
    1338:	25 b1       	in	r18, 0x05	; 5
    133a:	23 2b       	or	r18, r19
    133c:	25 b9       	out	0x05, r18	; 5
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <message_send+0x2a>
    1340:	00 00       	nop
    1342:	00 00       	nop
    1344:	00 00       	nop
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <message_send+0x2a>
    1348:	00 00       	nop
    134a:	00 00       	nop
    134c:	00 00       	nop
    134e:	30 95       	com	r19
    1350:	25 b1       	in	r18, 0x05	; 5
    1352:	23 23       	and	r18, r19
    1354:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1356:	2e ea       	ldi	r18, 0xAE	; 174
    1358:	2a 95       	dec	r18
    135a:	f1 f7       	brne	.-4      	; 0x1358 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    135c:	2b ee       	ldi	r18, 0xEB	; 235

0000135e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    135e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1360:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1364:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1366:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    136a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    136c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    136e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1370:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1372:	0f be       	out	0x3f, r0	; 63
    return 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret

00001378 <nocollision>:
nocollision:
    nop
    1378:	00 00       	nop
    dec tmpreg1
    137a:	2a 95       	dec	r18
    brne checkcollision
    137c:	81 f7       	brne	.-32     	; 0x135e <checkcollision>

    ldi tmpreg1, 0x01
    137e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1380:	30 91 3b 01 	lds	r19, 0x013B
    1384:	20 30       	cpi	r18, 0x00	; 0
    1386:	29 f0       	breq	.+10     	; 0x1392 <nocollision+0x1a>
    1388:	00 00       	nop
    138a:	25 b1       	in	r18, 0x05	; 5
    138c:	23 2b       	or	r18, r19
    138e:	25 b9       	out	0x05, r18	; 5
    1390:	04 c0       	rjmp	.+8      	; 0x139a <nocollision+0x22>
    1392:	00 00       	nop
    1394:	00 00       	nop
    1396:	00 00       	nop
    1398:	00 c0       	rjmp	.+0      	; 0x139a <nocollision+0x22>
    139a:	00 00       	nop
    139c:	00 00       	nop
    139e:	00 00       	nop
    13a0:	30 95       	com	r19
    13a2:	25 b1       	in	r18, 0x05	; 5
    13a4:	23 23       	and	r18, r19
    13a6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    13a8:	00 00       	nop
    13aa:	24 e5       	ldi	r18, 0x54	; 84
    13ac:	2a 95       	dec	r18
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13b0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13b2:	8c e0       	ldi	r24, 0x0C	; 12

000013b4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13b4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13b8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13ba:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    13bc:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    13be:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13c0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13c4:	50 e0       	ldi	r21, 0x00	; 0

000013c6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13c6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13c8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13ca:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13cc:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13ce:	30 91 3b 01 	lds	r19, 0x013B
    13d2:	20 30       	cpi	r18, 0x00	; 0
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <sendbit+0x1a>
    13d6:	00 00       	nop
    13d8:	25 b1       	in	r18, 0x05	; 5
    13da:	23 2b       	or	r18, r19
    13dc:	25 b9       	out	0x05, r18	; 5
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <sendbit+0x22>
    13e0:	00 00       	nop
    13e2:	00 00       	nop
    13e4:	00 00       	nop
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <sendbit+0x22>
    13e8:	00 00       	nop
    13ea:	00 00       	nop
    13ec:	00 00       	nop
    13ee:	30 95       	com	r19
    13f0:	25 b1       	in	r18, 0x05	; 5
    13f2:	23 23       	and	r18, r19
    13f4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    13f6:	00 00       	nop
    13f8:	21 e5       	ldi	r18, 0x51	; 81
    13fa:	2a 95       	dec	r18
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    13fe:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1400:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1402:	9a 95       	dec	r25
    brne sendbit
    1404:	01 f7       	brne	.-64     	; 0x13c6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1406:	8a 95       	dec	r24
    brne sendbyte
    1408:	a9 f6       	brne	.-86     	; 0x13b4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    140a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    140c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    140e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1410:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1412:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    1416:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1418:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    141a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    141c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    141e:	0f be       	out	0x3f, r0	; 63
    return 1
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	08 95       	ret

00001424 <main>:
    message_sent = 1;
}

int main()
{
    kilo_init();
    1424:	0e 94 a3 00 	call	0x146	; 0x146 <kilo_init>
    // Register the message_tx callback function.
    kilo_message_tx = message_tx;
    1428:	81 e7       	ldi	r24, 0x71	; 113
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	90 93 04 01 	sts	0x0104, r25
    1430:	80 93 03 01 	sts	0x0103, r24
    // Register the message_tx_success callback function.
    kilo_message_tx_success = message_tx_success;
    1434:	84 e7       	ldi	r24, 0x74	; 116
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 02 01 	sts	0x0102, r25
    143c:	80 93 01 01 	sts	0x0101, r24
    kilo_start(setup, loop);
    1440:	69 e8       	ldi	r22, 0x89	; 137
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	8b e7       	ldi	r24, 0x7B	; 123
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 9f 01 	call	0x33e	; 0x33e <kilo_start>
    
    return 0;
}
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	08 95       	ret

00001452 <__divmodhi4>:
    1452:	97 fb       	bst	r25, 7
    1454:	07 2e       	mov	r0, r23
    1456:	16 f4       	brtc	.+4      	; 0x145c <__divmodhi4+0xa>
    1458:	00 94       	com	r0
    145a:	07 d0       	rcall	.+14     	; 0x146a <__divmodhi4_neg1>
    145c:	77 fd       	sbrc	r23, 7
    145e:	09 d0       	rcall	.+18     	; 0x1472 <__divmodhi4_neg2>
    1460:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__udivmodhi4>
    1464:	07 fc       	sbrc	r0, 7
    1466:	05 d0       	rcall	.+10     	; 0x1472 <__divmodhi4_neg2>
    1468:	3e f4       	brtc	.+14     	; 0x1478 <__divmodhi4_exit>

0000146a <__divmodhi4_neg1>:
    146a:	90 95       	com	r25
    146c:	81 95       	neg	r24
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	08 95       	ret

00001472 <__divmodhi4_neg2>:
    1472:	70 95       	com	r23
    1474:	61 95       	neg	r22
    1476:	7f 4f       	sbci	r23, 0xFF	; 255

00001478 <__divmodhi4_exit>:
    1478:	08 95       	ret

0000147a <__tablejump2__>:
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	05 90       	lpm	r0, Z+
    1480:	f4 91       	lpm	r31, Z
    1482:	e0 2d       	mov	r30, r0
    1484:	09 94       	ijmp

00001486 <__umulhisi3>:
    1486:	a2 9f       	mul	r26, r18
    1488:	b0 01       	movw	r22, r0
    148a:	b3 9f       	mul	r27, r19
    148c:	c0 01       	movw	r24, r0
    148e:	a3 9f       	mul	r26, r19
    1490:	70 0d       	add	r23, r0
    1492:	81 1d       	adc	r24, r1
    1494:	11 24       	eor	r1, r1
    1496:	91 1d       	adc	r25, r1
    1498:	b2 9f       	mul	r27, r18
    149a:	70 0d       	add	r23, r0
    149c:	81 1d       	adc	r24, r1
    149e:	11 24       	eor	r1, r1
    14a0:	91 1d       	adc	r25, r1
    14a2:	08 95       	ret

000014a4 <__udivmodhi4>:
    14a4:	aa 1b       	sub	r26, r26
    14a6:	bb 1b       	sub	r27, r27
    14a8:	51 e1       	ldi	r21, 0x11	; 17
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <__udivmodhi4_ep>

000014ac <__udivmodhi4_loop>:
    14ac:	aa 1f       	adc	r26, r26
    14ae:	bb 1f       	adc	r27, r27
    14b0:	a6 17       	cp	r26, r22
    14b2:	b7 07       	cpc	r27, r23
    14b4:	10 f0       	brcs	.+4      	; 0x14ba <__udivmodhi4_ep>
    14b6:	a6 1b       	sub	r26, r22
    14b8:	b7 0b       	sbc	r27, r23

000014ba <__udivmodhi4_ep>:
    14ba:	88 1f       	adc	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	5a 95       	dec	r21
    14c0:	a9 f7       	brne	.-22     	; 0x14ac <__udivmodhi4_loop>
    14c2:	80 95       	com	r24
    14c4:	90 95       	com	r25
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	08 95       	ret

000014cc <__subsf3>:
    14cc:	50 58       	subi	r21, 0x80	; 128

000014ce <__addsf3>:
    14ce:	bb 27       	eor	r27, r27
    14d0:	aa 27       	eor	r26, r26
    14d2:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__addsf3x>
    14d6:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__fp_round>
    14da:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_pscA>
    14de:	38 f0       	brcs	.+14     	; 0x14ee <__addsf3+0x20>
    14e0:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_pscB>
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <__addsf3+0x20>
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <__addsf3+0x28>
    14e8:	9f 3f       	cpi	r25, 0xFF	; 255
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <__addsf3+0x24>
    14ec:	26 f4       	brtc	.+8      	; 0x14f6 <__addsf3+0x28>
    14ee:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__fp_nan>
    14f2:	0e f4       	brtc	.+2      	; 0x14f6 <__addsf3+0x28>
    14f4:	e0 95       	com	r30
    14f6:	e7 fb       	bst	r30, 7
    14f8:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_inf>

000014fc <__addsf3x>:
    14fc:	e9 2f       	mov	r30, r25
    14fe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_split3>
    1502:	58 f3       	brcs	.-42     	; 0x14da <__addsf3+0xc>
    1504:	ba 17       	cp	r27, r26
    1506:	62 07       	cpc	r22, r18
    1508:	73 07       	cpc	r23, r19
    150a:	84 07       	cpc	r24, r20
    150c:	95 07       	cpc	r25, r21
    150e:	20 f0       	brcs	.+8      	; 0x1518 <__addsf3x+0x1c>
    1510:	79 f4       	brne	.+30     	; 0x1530 <__addsf3x+0x34>
    1512:	a6 f5       	brtc	.+104    	; 0x157c <__addsf3x+0x80>
    1514:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__fp_zero>
    1518:	0e f4       	brtc	.+2      	; 0x151c <__addsf3x+0x20>
    151a:	e0 95       	com	r30
    151c:	0b 2e       	mov	r0, r27
    151e:	ba 2f       	mov	r27, r26
    1520:	a0 2d       	mov	r26, r0
    1522:	0b 01       	movw	r0, r22
    1524:	b9 01       	movw	r22, r18
    1526:	90 01       	movw	r18, r0
    1528:	0c 01       	movw	r0, r24
    152a:	ca 01       	movw	r24, r20
    152c:	a0 01       	movw	r20, r0
    152e:	11 24       	eor	r1, r1
    1530:	ff 27       	eor	r31, r31
    1532:	59 1b       	sub	r21, r25
    1534:	99 f0       	breq	.+38     	; 0x155c <__addsf3x+0x60>
    1536:	59 3f       	cpi	r21, 0xF9	; 249
    1538:	50 f4       	brcc	.+20     	; 0x154e <__addsf3x+0x52>
    153a:	50 3e       	cpi	r21, 0xE0	; 224
    153c:	68 f1       	brcs	.+90     	; 0x1598 <__addsf3x+0x9c>
    153e:	1a 16       	cp	r1, r26
    1540:	f0 40       	sbci	r31, 0x00	; 0
    1542:	a2 2f       	mov	r26, r18
    1544:	23 2f       	mov	r18, r19
    1546:	34 2f       	mov	r19, r20
    1548:	44 27       	eor	r20, r20
    154a:	58 5f       	subi	r21, 0xF8	; 248
    154c:	f3 cf       	rjmp	.-26     	; 0x1534 <__addsf3x+0x38>
    154e:	46 95       	lsr	r20
    1550:	37 95       	ror	r19
    1552:	27 95       	ror	r18
    1554:	a7 95       	ror	r26
    1556:	f0 40       	sbci	r31, 0x00	; 0
    1558:	53 95       	inc	r21
    155a:	c9 f7       	brne	.-14     	; 0x154e <__addsf3x+0x52>
    155c:	7e f4       	brtc	.+30     	; 0x157c <__addsf3x+0x80>
    155e:	1f 16       	cp	r1, r31
    1560:	ba 0b       	sbc	r27, r26
    1562:	62 0b       	sbc	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	ba f0       	brmi	.+46     	; 0x1598 <__addsf3x+0x9c>
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	a1 f0       	breq	.+40     	; 0x1596 <__addsf3x+0x9a>
    156e:	ff 0f       	add	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	c2 f7       	brpl	.-16     	; 0x156a <__addsf3x+0x6e>
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <__addsf3x+0x9c>
    157c:	ba 0f       	add	r27, r26
    157e:	62 1f       	adc	r22, r18
    1580:	73 1f       	adc	r23, r19
    1582:	84 1f       	adc	r24, r20
    1584:	48 f4       	brcc	.+18     	; 0x1598 <__addsf3x+0x9c>
    1586:	87 95       	ror	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f7 95       	ror	r31
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	08 f0       	brcs	.+2      	; 0x1596 <__addsf3x+0x9a>
    1594:	b0 cf       	rjmp	.-160    	; 0x14f6 <__addsf3+0x28>
    1596:	93 95       	inc	r25
    1598:	88 0f       	add	r24, r24
    159a:	08 f0       	brcs	.+2      	; 0x159e <__addsf3x+0xa2>
    159c:	99 27       	eor	r25, r25
    159e:	ee 0f       	add	r30, r30
    15a0:	97 95       	ror	r25
    15a2:	87 95       	ror	r24
    15a4:	08 95       	ret

000015a6 <__divsf3>:
    15a6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__divsf3x>
    15aa:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__fp_round>
    15ae:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_pscB>
    15b2:	58 f0       	brcs	.+22     	; 0x15ca <__divsf3+0x24>
    15b4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_pscA>
    15b8:	40 f0       	brcs	.+16     	; 0x15ca <__divsf3+0x24>
    15ba:	29 f4       	brne	.+10     	; 0x15c6 <__divsf3+0x20>
    15bc:	5f 3f       	cpi	r21, 0xFF	; 255
    15be:	29 f0       	breq	.+10     	; 0x15ca <__divsf3+0x24>
    15c0:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_inf>
    15c4:	51 11       	cpse	r21, r1
    15c6:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_szero>
    15ca:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__fp_nan>

000015ce <__divsf3x>:
    15ce:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_split3>
    15d2:	68 f3       	brcs	.-38     	; 0x15ae <__divsf3+0x8>

000015d4 <__divsf3_pse>:
    15d4:	99 23       	and	r25, r25
    15d6:	b1 f3       	breq	.-20     	; 0x15c4 <__divsf3+0x1e>
    15d8:	55 23       	and	r21, r21
    15da:	91 f3       	breq	.-28     	; 0x15c0 <__divsf3+0x1a>
    15dc:	95 1b       	sub	r25, r21
    15de:	55 0b       	sbc	r21, r21
    15e0:	bb 27       	eor	r27, r27
    15e2:	aa 27       	eor	r26, r26
    15e4:	62 17       	cp	r22, r18
    15e6:	73 07       	cpc	r23, r19
    15e8:	84 07       	cpc	r24, r20
    15ea:	38 f0       	brcs	.+14     	; 0x15fa <__divsf3_pse+0x26>
    15ec:	9f 5f       	subi	r25, 0xFF	; 255
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	22 0f       	add	r18, r18
    15f2:	33 1f       	adc	r19, r19
    15f4:	44 1f       	adc	r20, r20
    15f6:	aa 1f       	adc	r26, r26
    15f8:	a9 f3       	breq	.-22     	; 0x15e4 <__divsf3_pse+0x10>
    15fa:	35 d0       	rcall	.+106    	; 0x1666 <__divsf3_pse+0x92>
    15fc:	0e 2e       	mov	r0, r30
    15fe:	3a f0       	brmi	.+14     	; 0x160e <__divsf3_pse+0x3a>
    1600:	e0 e8       	ldi	r30, 0x80	; 128
    1602:	32 d0       	rcall	.+100    	; 0x1668 <__divsf3_pse+0x94>
    1604:	91 50       	subi	r25, 0x01	; 1
    1606:	50 40       	sbci	r21, 0x00	; 0
    1608:	e6 95       	lsr	r30
    160a:	00 1c       	adc	r0, r0
    160c:	ca f7       	brpl	.-14     	; 0x1600 <__divsf3_pse+0x2c>
    160e:	2b d0       	rcall	.+86     	; 0x1666 <__divsf3_pse+0x92>
    1610:	fe 2f       	mov	r31, r30
    1612:	29 d0       	rcall	.+82     	; 0x1666 <__divsf3_pse+0x92>
    1614:	66 0f       	add	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	bb 1f       	adc	r27, r27
    161c:	26 17       	cp	r18, r22
    161e:	37 07       	cpc	r19, r23
    1620:	48 07       	cpc	r20, r24
    1622:	ab 07       	cpc	r26, r27
    1624:	b0 e8       	ldi	r27, 0x80	; 128
    1626:	09 f0       	breq	.+2      	; 0x162a <__divsf3_pse+0x56>
    1628:	bb 0b       	sbc	r27, r27
    162a:	80 2d       	mov	r24, r0
    162c:	bf 01       	movw	r22, r30
    162e:	ff 27       	eor	r31, r31
    1630:	93 58       	subi	r25, 0x83	; 131
    1632:	5f 4f       	sbci	r21, 0xFF	; 255
    1634:	3a f0       	brmi	.+14     	; 0x1644 <__divsf3_pse+0x70>
    1636:	9e 3f       	cpi	r25, 0xFE	; 254
    1638:	51 05       	cpc	r21, r1
    163a:	78 f0       	brcs	.+30     	; 0x165a <__divsf3_pse+0x86>
    163c:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_inf>
    1640:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_szero>
    1644:	5f 3f       	cpi	r21, 0xFF	; 255
    1646:	e4 f3       	brlt	.-8      	; 0x1640 <__divsf3_pse+0x6c>
    1648:	98 3e       	cpi	r25, 0xE8	; 232
    164a:	d4 f3       	brlt	.-12     	; 0x1640 <__divsf3_pse+0x6c>
    164c:	86 95       	lsr	r24
    164e:	77 95       	ror	r23
    1650:	67 95       	ror	r22
    1652:	b7 95       	ror	r27
    1654:	f7 95       	ror	r31
    1656:	9f 5f       	subi	r25, 0xFF	; 255
    1658:	c9 f7       	brne	.-14     	; 0x164c <__divsf3_pse+0x78>
    165a:	88 0f       	add	r24, r24
    165c:	91 1d       	adc	r25, r1
    165e:	96 95       	lsr	r25
    1660:	87 95       	ror	r24
    1662:	97 f9       	bld	r25, 7
    1664:	08 95       	ret
    1666:	e1 e0       	ldi	r30, 0x01	; 1
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	88 1f       	adc	r24, r24
    166e:	bb 1f       	adc	r27, r27
    1670:	62 17       	cp	r22, r18
    1672:	73 07       	cpc	r23, r19
    1674:	84 07       	cpc	r24, r20
    1676:	ba 07       	cpc	r27, r26
    1678:	20 f0       	brcs	.+8      	; 0x1682 <__divsf3_pse+0xae>
    167a:	62 1b       	sub	r22, r18
    167c:	73 0b       	sbc	r23, r19
    167e:	84 0b       	sbc	r24, r20
    1680:	ba 0b       	sbc	r27, r26
    1682:	ee 1f       	adc	r30, r30
    1684:	88 f7       	brcc	.-30     	; 0x1668 <__divsf3_pse+0x94>
    1686:	e0 95       	com	r30
    1688:	08 95       	ret

0000168a <__fixsfsi>:
    168a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    168e:	68 94       	set
    1690:	b1 11       	cpse	r27, r1
    1692:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_szero>
    1696:	08 95       	ret

00001698 <__fixunssfsi>:
    1698:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__fp_splitA>
    169c:	88 f0       	brcs	.+34     	; 0x16c0 <__fixunssfsi+0x28>
    169e:	9f 57       	subi	r25, 0x7F	; 127
    16a0:	98 f0       	brcs	.+38     	; 0x16c8 <__fixunssfsi+0x30>
    16a2:	b9 2f       	mov	r27, r25
    16a4:	99 27       	eor	r25, r25
    16a6:	b7 51       	subi	r27, 0x17	; 23
    16a8:	b0 f0       	brcs	.+44     	; 0x16d6 <__fixunssfsi+0x3e>
    16aa:	e1 f0       	breq	.+56     	; 0x16e4 <__fixunssfsi+0x4c>
    16ac:	66 0f       	add	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	1a f0       	brmi	.+6      	; 0x16bc <__fixunssfsi+0x24>
    16b6:	ba 95       	dec	r27
    16b8:	c9 f7       	brne	.-14     	; 0x16ac <__fixunssfsi+0x14>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <__fixunssfsi+0x4c>
    16bc:	b1 30       	cpi	r27, 0x01	; 1
    16be:	91 f0       	breq	.+36     	; 0x16e4 <__fixunssfsi+0x4c>
    16c0:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fp_zero>
    16c4:	b1 e0       	ldi	r27, 0x01	; 1
    16c6:	08 95       	ret
    16c8:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__fp_zero>
    16cc:	67 2f       	mov	r22, r23
    16ce:	78 2f       	mov	r23, r24
    16d0:	88 27       	eor	r24, r24
    16d2:	b8 5f       	subi	r27, 0xF8	; 248
    16d4:	39 f0       	breq	.+14     	; 0x16e4 <__fixunssfsi+0x4c>
    16d6:	b9 3f       	cpi	r27, 0xF9	; 249
    16d8:	cc f3       	brlt	.-14     	; 0x16cc <__fixunssfsi+0x34>
    16da:	86 95       	lsr	r24
    16dc:	77 95       	ror	r23
    16de:	67 95       	ror	r22
    16e0:	b3 95       	inc	r27
    16e2:	d9 f7       	brne	.-10     	; 0x16da <__fixunssfsi+0x42>
    16e4:	3e f4       	brtc	.+14     	; 0x16f4 <__fixunssfsi+0x5c>
    16e6:	90 95       	com	r25
    16e8:	80 95       	com	r24
    16ea:	70 95       	com	r23
    16ec:	61 95       	neg	r22
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	8f 4f       	sbci	r24, 0xFF	; 255
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	08 95       	ret

000016f6 <__floatunsisf>:
    16f6:	e8 94       	clt
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <__floatsisf+0x12>

000016fa <__floatsisf>:
    16fa:	97 fb       	bst	r25, 7
    16fc:	3e f4       	brtc	.+14     	; 0x170c <__floatsisf+0x12>
    16fe:	90 95       	com	r25
    1700:	80 95       	com	r24
    1702:	70 95       	com	r23
    1704:	61 95       	neg	r22
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	99 23       	and	r25, r25
    170e:	a9 f0       	breq	.+42     	; 0x173a <__floatsisf+0x40>
    1710:	f9 2f       	mov	r31, r25
    1712:	96 e9       	ldi	r25, 0x96	; 150
    1714:	bb 27       	eor	r27, r27
    1716:	93 95       	inc	r25
    1718:	f6 95       	lsr	r31
    171a:	87 95       	ror	r24
    171c:	77 95       	ror	r23
    171e:	67 95       	ror	r22
    1720:	b7 95       	ror	r27
    1722:	f1 11       	cpse	r31, r1
    1724:	f8 cf       	rjmp	.-16     	; 0x1716 <__floatsisf+0x1c>
    1726:	fa f4       	brpl	.+62     	; 0x1766 <__floatsisf+0x6c>
    1728:	bb 0f       	add	r27, r27
    172a:	11 f4       	brne	.+4      	; 0x1730 <__floatsisf+0x36>
    172c:	60 ff       	sbrs	r22, 0
    172e:	1b c0       	rjmp	.+54     	; 0x1766 <__floatsisf+0x6c>
    1730:	6f 5f       	subi	r22, 0xFF	; 255
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	8f 4f       	sbci	r24, 0xFF	; 255
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	16 c0       	rjmp	.+44     	; 0x1766 <__floatsisf+0x6c>
    173a:	88 23       	and	r24, r24
    173c:	11 f0       	breq	.+4      	; 0x1742 <__floatsisf+0x48>
    173e:	96 e9       	ldi	r25, 0x96	; 150
    1740:	11 c0       	rjmp	.+34     	; 0x1764 <__floatsisf+0x6a>
    1742:	77 23       	and	r23, r23
    1744:	21 f0       	breq	.+8      	; 0x174e <__floatsisf+0x54>
    1746:	9e e8       	ldi	r25, 0x8E	; 142
    1748:	87 2f       	mov	r24, r23
    174a:	76 2f       	mov	r23, r22
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <__floatsisf+0x5e>
    174e:	66 23       	and	r22, r22
    1750:	71 f0       	breq	.+28     	; 0x176e <__floatsisf+0x74>
    1752:	96 e8       	ldi	r25, 0x86	; 134
    1754:	86 2f       	mov	r24, r22
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	2a f0       	brmi	.+10     	; 0x1766 <__floatsisf+0x6c>
    175c:	9a 95       	dec	r25
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	da f7       	brpl	.-10     	; 0x175c <__floatsisf+0x62>
    1766:	88 0f       	add	r24, r24
    1768:	96 95       	lsr	r25
    176a:	87 95       	ror	r24
    176c:	97 f9       	bld	r25, 7
    176e:	08 95       	ret

00001770 <__fp_inf>:
    1770:	97 f9       	bld	r25, 7
    1772:	9f 67       	ori	r25, 0x7F	; 127
    1774:	80 e8       	ldi	r24, 0x80	; 128
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	08 95       	ret

0000177c <__fp_nan>:
    177c:	9f ef       	ldi	r25, 0xFF	; 255
    177e:	80 ec       	ldi	r24, 0xC0	; 192
    1780:	08 95       	ret

00001782 <__fp_pscA>:
    1782:	00 24       	eor	r0, r0
    1784:	0a 94       	dec	r0
    1786:	16 16       	cp	r1, r22
    1788:	17 06       	cpc	r1, r23
    178a:	18 06       	cpc	r1, r24
    178c:	09 06       	cpc	r0, r25
    178e:	08 95       	ret

00001790 <__fp_pscB>:
    1790:	00 24       	eor	r0, r0
    1792:	0a 94       	dec	r0
    1794:	12 16       	cp	r1, r18
    1796:	13 06       	cpc	r1, r19
    1798:	14 06       	cpc	r1, r20
    179a:	05 06       	cpc	r0, r21
    179c:	08 95       	ret

0000179e <__fp_round>:
    179e:	09 2e       	mov	r0, r25
    17a0:	03 94       	inc	r0
    17a2:	00 0c       	add	r0, r0
    17a4:	11 f4       	brne	.+4      	; 0x17aa <__fp_round+0xc>
    17a6:	88 23       	and	r24, r24
    17a8:	52 f0       	brmi	.+20     	; 0x17be <__fp_round+0x20>
    17aa:	bb 0f       	add	r27, r27
    17ac:	40 f4       	brcc	.+16     	; 0x17be <__fp_round+0x20>
    17ae:	bf 2b       	or	r27, r31
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <__fp_round+0x18>
    17b2:	60 ff       	sbrs	r22, 0
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <__fp_round+0x20>
    17b6:	6f 5f       	subi	r22, 0xFF	; 255
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	8f 4f       	sbci	r24, 0xFF	; 255
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	08 95       	ret

000017c0 <__fp_split3>:
    17c0:	57 fd       	sbrc	r21, 7
    17c2:	90 58       	subi	r25, 0x80	; 128
    17c4:	44 0f       	add	r20, r20
    17c6:	55 1f       	adc	r21, r21
    17c8:	59 f0       	breq	.+22     	; 0x17e0 <__fp_splitA+0x10>
    17ca:	5f 3f       	cpi	r21, 0xFF	; 255
    17cc:	71 f0       	breq	.+28     	; 0x17ea <__fp_splitA+0x1a>
    17ce:	47 95       	ror	r20

000017d0 <__fp_splitA>:
    17d0:	88 0f       	add	r24, r24
    17d2:	97 fb       	bst	r25, 7
    17d4:	99 1f       	adc	r25, r25
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <__fp_splitA+0x20>
    17d8:	9f 3f       	cpi	r25, 0xFF	; 255
    17da:	79 f0       	breq	.+30     	; 0x17fa <__fp_splitA+0x2a>
    17dc:	87 95       	ror	r24
    17de:	08 95       	ret
    17e0:	12 16       	cp	r1, r18
    17e2:	13 06       	cpc	r1, r19
    17e4:	14 06       	cpc	r1, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	f2 cf       	rjmp	.-28     	; 0x17ce <__fp_split3+0xe>
    17ea:	46 95       	lsr	r20
    17ec:	f1 df       	rcall	.-30     	; 0x17d0 <__fp_splitA>
    17ee:	08 c0       	rjmp	.+16     	; 0x1800 <__fp_splitA+0x30>
    17f0:	16 16       	cp	r1, r22
    17f2:	17 06       	cpc	r1, r23
    17f4:	18 06       	cpc	r1, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	f1 cf       	rjmp	.-30     	; 0x17dc <__fp_splitA+0xc>
    17fa:	86 95       	lsr	r24
    17fc:	71 05       	cpc	r23, r1
    17fe:	61 05       	cpc	r22, r1
    1800:	08 94       	sec
    1802:	08 95       	ret

00001804 <__fp_zero>:
    1804:	e8 94       	clt

00001806 <__fp_szero>:
    1806:	bb 27       	eor	r27, r27
    1808:	66 27       	eor	r22, r22
    180a:	77 27       	eor	r23, r23
    180c:	cb 01       	movw	r24, r22
    180e:	97 f9       	bld	r25, 7
    1810:	08 95       	ret

00001812 <__mulsf3>:
    1812:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__mulsf3x>
    1816:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__fp_round>
    181a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_pscA>
    181e:	38 f0       	brcs	.+14     	; 0x182e <__mulsf3+0x1c>
    1820:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_pscB>
    1824:	20 f0       	brcs	.+8      	; 0x182e <__mulsf3+0x1c>
    1826:	95 23       	and	r25, r21
    1828:	11 f0       	breq	.+4      	; 0x182e <__mulsf3+0x1c>
    182a:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_inf>
    182e:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__fp_nan>
    1832:	11 24       	eor	r1, r1
    1834:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_szero>

00001838 <__mulsf3x>:
    1838:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_split3>
    183c:	70 f3       	brcs	.-36     	; 0x181a <__mulsf3+0x8>

0000183e <__mulsf3_pse>:
    183e:	95 9f       	mul	r25, r21
    1840:	c1 f3       	breq	.-16     	; 0x1832 <__mulsf3+0x20>
    1842:	95 0f       	add	r25, r21
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	55 1f       	adc	r21, r21
    1848:	62 9f       	mul	r22, r18
    184a:	f0 01       	movw	r30, r0
    184c:	72 9f       	mul	r23, r18
    184e:	bb 27       	eor	r27, r27
    1850:	f0 0d       	add	r31, r0
    1852:	b1 1d       	adc	r27, r1
    1854:	63 9f       	mul	r22, r19
    1856:	aa 27       	eor	r26, r26
    1858:	f0 0d       	add	r31, r0
    185a:	b1 1d       	adc	r27, r1
    185c:	aa 1f       	adc	r26, r26
    185e:	64 9f       	mul	r22, r20
    1860:	66 27       	eor	r22, r22
    1862:	b0 0d       	add	r27, r0
    1864:	a1 1d       	adc	r26, r1
    1866:	66 1f       	adc	r22, r22
    1868:	82 9f       	mul	r24, r18
    186a:	22 27       	eor	r18, r18
    186c:	b0 0d       	add	r27, r0
    186e:	a1 1d       	adc	r26, r1
    1870:	62 1f       	adc	r22, r18
    1872:	73 9f       	mul	r23, r19
    1874:	b0 0d       	add	r27, r0
    1876:	a1 1d       	adc	r26, r1
    1878:	62 1f       	adc	r22, r18
    187a:	83 9f       	mul	r24, r19
    187c:	a0 0d       	add	r26, r0
    187e:	61 1d       	adc	r22, r1
    1880:	22 1f       	adc	r18, r18
    1882:	74 9f       	mul	r23, r20
    1884:	33 27       	eor	r19, r19
    1886:	a0 0d       	add	r26, r0
    1888:	61 1d       	adc	r22, r1
    188a:	23 1f       	adc	r18, r19
    188c:	84 9f       	mul	r24, r20
    188e:	60 0d       	add	r22, r0
    1890:	21 1d       	adc	r18, r1
    1892:	82 2f       	mov	r24, r18
    1894:	76 2f       	mov	r23, r22
    1896:	6a 2f       	mov	r22, r26
    1898:	11 24       	eor	r1, r1
    189a:	9f 57       	subi	r25, 0x7F	; 127
    189c:	50 40       	sbci	r21, 0x00	; 0
    189e:	9a f0       	brmi	.+38     	; 0x18c6 <__mulsf3_pse+0x88>
    18a0:	f1 f0       	breq	.+60     	; 0x18de <__mulsf3_pse+0xa0>
    18a2:	88 23       	and	r24, r24
    18a4:	4a f0       	brmi	.+18     	; 0x18b8 <__mulsf3_pse+0x7a>
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	bb 1f       	adc	r27, r27
    18ac:	66 1f       	adc	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	88 1f       	adc	r24, r24
    18b2:	91 50       	subi	r25, 0x01	; 1
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	a9 f7       	brne	.-22     	; 0x18a2 <__mulsf3_pse+0x64>
    18b8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ba:	51 05       	cpc	r21, r1
    18bc:	80 f0       	brcs	.+32     	; 0x18de <__mulsf3_pse+0xa0>
    18be:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_inf>
    18c2:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_szero>
    18c6:	5f 3f       	cpi	r21, 0xFF	; 255
    18c8:	e4 f3       	brlt	.-8      	; 0x18c2 <__mulsf3_pse+0x84>
    18ca:	98 3e       	cpi	r25, 0xE8	; 232
    18cc:	d4 f3       	brlt	.-12     	; 0x18c2 <__mulsf3_pse+0x84>
    18ce:	86 95       	lsr	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	b7 95       	ror	r27
    18d6:	f7 95       	ror	r31
    18d8:	e7 95       	ror	r30
    18da:	9f 5f       	subi	r25, 0xFF	; 255
    18dc:	c1 f7       	brne	.-16     	; 0x18ce <__mulsf3_pse+0x90>
    18de:	fe 2b       	or	r31, r30
    18e0:	88 0f       	add	r24, r24
    18e2:	91 1d       	adc	r25, r1
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	97 f9       	bld	r25, 7
    18ea:	08 95       	ret

000018ec <do_rand>:
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	ec 01       	movw	r28, r24
    1902:	68 81       	ld	r22, Y
    1904:	79 81       	ldd	r23, Y+1	; 0x01
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	61 15       	cp	r22, r1
    190c:	71 05       	cpc	r23, r1
    190e:	81 05       	cpc	r24, r1
    1910:	91 05       	cpc	r25, r1
    1912:	21 f4       	brne	.+8      	; 0x191c <do_rand+0x30>
    1914:	64 e2       	ldi	r22, 0x24	; 36
    1916:	79 ed       	ldi	r23, 0xD9	; 217
    1918:	8b e5       	ldi	r24, 0x5B	; 91
    191a:	97 e0       	ldi	r25, 0x07	; 7
    191c:	2d e1       	ldi	r18, 0x1D	; 29
    191e:	33 ef       	ldi	r19, 0xF3	; 243
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__divmodsi4>
    1928:	49 01       	movw	r8, r18
    192a:	5a 01       	movw	r10, r20
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	a7 ea       	ldi	r26, 0xA7	; 167
    1932:	b1 e4       	ldi	r27, 0x41	; 65
    1934:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__muluhisi3>
    1938:	6b 01       	movw	r12, r22
    193a:	7c 01       	movw	r14, r24
    193c:	ac ee       	ldi	r26, 0xEC	; 236
    193e:	b4 ef       	ldi	r27, 0xF4	; 244
    1940:	a5 01       	movw	r20, r10
    1942:	94 01       	movw	r18, r8
    1944:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__mulohisi3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8c 0d       	add	r24, r12
    194e:	9d 1d       	adc	r25, r13
    1950:	ae 1d       	adc	r26, r14
    1952:	bf 1d       	adc	r27, r15
    1954:	b7 ff       	sbrs	r27, 7
    1956:	03 c0       	rjmp	.+6      	; 0x195e <do_rand+0x72>
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	a1 09       	sbc	r26, r1
    195c:	b0 48       	sbci	r27, 0x80	; 128
    195e:	88 83       	st	Y, r24
    1960:	99 83       	std	Y+1, r25	; 0x01
    1962:	aa 83       	std	Y+2, r26	; 0x02
    1964:	bb 83       	std	Y+3, r27	; 0x03
    1966:	9f 77       	andi	r25, 0x7F	; 127
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	bf 90       	pop	r11
    1976:	af 90       	pop	r10
    1978:	9f 90       	pop	r9
    197a:	8f 90       	pop	r8
    197c:	08 95       	ret

0000197e <rand_r>:
    197e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <do_rand>
    1982:	08 95       	ret

00001984 <rand>:
    1984:	87 e0       	ldi	r24, 0x07	; 7
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	0e 94 76 0c 	call	0x18ec	; 0x18ec <do_rand>
    198c:	08 95       	ret

0000198e <srand>:
    198e:	a0 e0       	ldi	r26, 0x00	; 0
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	80 93 07 01 	sts	0x0107, r24
    1996:	90 93 08 01 	sts	0x0108, r25
    199a:	a0 93 09 01 	sts	0x0109, r26
    199e:	b0 93 0a 01 	sts	0x010A, r27
    19a2:	08 95       	ret

000019a4 <eeprom_read_byte>:
    19a4:	f9 99       	sbic	0x1f, 1	; 31
    19a6:	fe cf       	rjmp	.-4      	; 0x19a4 <eeprom_read_byte>
    19a8:	92 bd       	out	0x22, r25	; 34
    19aa:	81 bd       	out	0x21, r24	; 33
    19ac:	f8 9a       	sbi	0x1f, 0	; 31
    19ae:	99 27       	eor	r25, r25
    19b0:	80 b5       	in	r24, 0x20	; 32
    19b2:	08 95       	ret

000019b4 <eeprom_write_byte>:
    19b4:	26 2f       	mov	r18, r22

000019b6 <eeprom_write_r18>:
    19b6:	f9 99       	sbic	0x1f, 1	; 31
    19b8:	fe cf       	rjmp	.-4      	; 0x19b6 <eeprom_write_r18>
    19ba:	1f ba       	out	0x1f, r1	; 31
    19bc:	92 bd       	out	0x22, r25	; 34
    19be:	81 bd       	out	0x21, r24	; 33
    19c0:	20 bd       	out	0x20, r18	; 32
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	fa 9a       	sbi	0x1f, 2	; 31
    19c8:	f9 9a       	sbi	0x1f, 1	; 31
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	08 95       	ret

000019d0 <__divmodsi4>:
    19d0:	05 2e       	mov	r0, r21
    19d2:	97 fb       	bst	r25, 7
    19d4:	1e f4       	brtc	.+6      	; 0x19dc <__divmodsi4+0xc>
    19d6:	00 94       	com	r0
    19d8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__negsi2>
    19dc:	57 fd       	sbrc	r21, 7
    19de:	07 d0       	rcall	.+14     	; 0x19ee <__divmodsi4_neg2>
    19e0:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__udivmodsi4>
    19e4:	07 fc       	sbrc	r0, 7
    19e6:	03 d0       	rcall	.+6      	; 0x19ee <__divmodsi4_neg2>
    19e8:	4e f4       	brtc	.+18     	; 0x19fc <__divmodsi4_exit>
    19ea:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__negsi2>

000019ee <__divmodsi4_neg2>:
    19ee:	50 95       	com	r21
    19f0:	40 95       	com	r20
    19f2:	30 95       	com	r19
    19f4:	21 95       	neg	r18
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	4f 4f       	sbci	r20, 0xFF	; 255
    19fa:	5f 4f       	sbci	r21, 0xFF	; 255

000019fc <__divmodsi4_exit>:
    19fc:	08 95       	ret

000019fe <__negsi2>:
    19fe:	90 95       	com	r25
    1a00:	80 95       	com	r24
    1a02:	70 95       	com	r23
    1a04:	61 95       	neg	r22
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255
    1a08:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	08 95       	ret

00001a0e <__muluhisi3>:
    1a0e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__umulhisi3>
    1a12:	a5 9f       	mul	r26, r21
    1a14:	90 0d       	add	r25, r0
    1a16:	b4 9f       	mul	r27, r20
    1a18:	90 0d       	add	r25, r0
    1a1a:	a4 9f       	mul	r26, r20
    1a1c:	80 0d       	add	r24, r0
    1a1e:	91 1d       	adc	r25, r1
    1a20:	11 24       	eor	r1, r1
    1a22:	08 95       	ret

00001a24 <__mulshisi3>:
    1a24:	b7 ff       	sbrs	r27, 7
    1a26:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__muluhisi3>

00001a2a <__mulohisi3>:
    1a2a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__muluhisi3>
    1a2e:	82 1b       	sub	r24, r18
    1a30:	93 0b       	sbc	r25, r19
    1a32:	08 95       	ret

00001a34 <__udivmodsi4>:
    1a34:	a1 e2       	ldi	r26, 0x21	; 33
    1a36:	1a 2e       	mov	r1, r26
    1a38:	aa 1b       	sub	r26, r26
    1a3a:	bb 1b       	sub	r27, r27
    1a3c:	fd 01       	movw	r30, r26
    1a3e:	0d c0       	rjmp	.+26     	; 0x1a5a <__udivmodsi4_ep>

00001a40 <__udivmodsi4_loop>:
    1a40:	aa 1f       	adc	r26, r26
    1a42:	bb 1f       	adc	r27, r27
    1a44:	ee 1f       	adc	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	a2 17       	cp	r26, r18
    1a4a:	b3 07       	cpc	r27, r19
    1a4c:	e4 07       	cpc	r30, r20
    1a4e:	f5 07       	cpc	r31, r21
    1a50:	20 f0       	brcs	.+8      	; 0x1a5a <__udivmodsi4_ep>
    1a52:	a2 1b       	sub	r26, r18
    1a54:	b3 0b       	sbc	r27, r19
    1a56:	e4 0b       	sbc	r30, r20
    1a58:	f5 0b       	sbc	r31, r21

00001a5a <__udivmodsi4_ep>:
    1a5a:	66 1f       	adc	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	88 1f       	adc	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	1a 94       	dec	r1
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <__udivmodsi4_loop>
    1a66:	60 95       	com	r22
    1a68:	70 95       	com	r23
    1a6a:	80 95       	com	r24
    1a6c:	90 95       	com	r25
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
    1a72:	bd 01       	movw	r22, r26
    1a74:	cf 01       	movw	r24, r30
    1a76:	08 95       	ret

00001a78 <_exit>:
    1a78:	f8 94       	cli

00001a7a <__stop_program>:
    1a7a:	ff cf       	rjmp	.-2      	; 0x1a7a <__stop_program>
