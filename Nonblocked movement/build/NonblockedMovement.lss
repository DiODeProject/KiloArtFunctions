
build/NonblockedMovement.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	3d 02       	muls	r19, r29
      6a:	b9 02       	muls	r27, r25
      6c:	11 02       	muls	r17, r17
      6e:	08 02       	muls	r16, r24
      70:	0e 02       	muls	r16, r30
      72:	9b 02       	muls	r25, r27
      74:	90 02       	muls	r25, r16
      76:	1b 09       	sbc	r17, r11
      78:	f8 07       	cpc	r31, r24
      7a:	f8 07       	cpc	r31, r24
      7c:	18 09       	sbc	r17, r8
      7e:	24 09       	sbc	r18, r4
      80:	14 09       	sbc	r17, r4
      82:	2b 09       	sbc	r18, r11
      84:	27 09       	sbc	r18, r7
      86:	2f 09       	sbc	r18, r15
      88:	e7 08       	sbc	r14, r7
      8a:	b9 08       	sbc	r11, r9

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e0       	ldi	r30, 0x02	; 2
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 37       	cpi	r26, 0x74	; 116
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <main>
      da:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
//uint32_t last_changed = 0;


void setup()
{
  state = FORWARD_GREEN;
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	90 93 11 01 	sts	0x0111, r25
      ea:	80 93 10 01 	sts	0x0110, r24
  last_state_update = kilo_ticks;
      ee:	80 91 39 01 	lds	r24, 0x0139
      f2:	90 91 3a 01 	lds	r25, 0x013A
      f6:	a0 91 3b 01 	lds	r26, 0x013B
      fa:	b0 91 3c 01 	lds	r27, 0x013C
      fe:	80 93 12 01 	sts	0x0112, r24
     102:	90 93 13 01 	sts	0x0113, r25
     106:	a0 93 14 01 	sts	0x0114, r26
     10a:	b0 93 15 01 	sts	0x0115, r27
     10e:	08 95       	ret

00000110 <loop>:
void loop()
{


  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 64))
     110:	40 91 39 01 	lds	r20, 0x0139
     114:	50 91 3a 01 	lds	r21, 0x013A
     118:	60 91 3b 01 	lds	r22, 0x013B
     11c:	70 91 3c 01 	lds	r23, 0x013C
     120:	80 91 12 01 	lds	r24, 0x0112
     124:	90 91 13 01 	lds	r25, 0x0113
     128:	a0 91 14 01 	lds	r26, 0x0114
     12c:	b0 91 15 01 	lds	r27, 0x0115
     130:	80 5c       	subi	r24, 0xC0	; 192
     132:	9f 4f       	sbci	r25, 0xFF	; 255
     134:	af 4f       	sbci	r26, 0xFF	; 255
     136:	bf 4f       	sbci	r27, 0xFF	; 255
     138:	84 17       	cp	r24, r20
     13a:	95 07       	cpc	r25, r21
     13c:	a6 07       	cpc	r26, r22
     13e:	b7 07       	cpc	r27, r23
     140:	d8 f4       	brcc	.+54     	; 0x178 <loop+0x68>
    {
      last_state_update = kilo_ticks;
     142:	80 91 39 01 	lds	r24, 0x0139
     146:	90 91 3a 01 	lds	r25, 0x013A
     14a:	a0 91 3b 01 	lds	r26, 0x013B
     14e:	b0 91 3c 01 	lds	r27, 0x013C
     152:	80 93 12 01 	sts	0x0112, r24
     156:	90 93 13 01 	sts	0x0113, r25
     15a:	a0 93 14 01 	sts	0x0114, r26
     15e:	b0 93 15 01 	sts	0x0115, r27
      //if (last_changed
        
      if (state == FORWARD_GREEN)
     162:	80 91 10 01 	lds	r24, 0x0110
     166:	90 91 11 01 	lds	r25, 0x0111
     16a:	82 30       	cpi	r24, 0x02	; 2
     16c:	91 05       	cpc	r25, r1
     16e:	39 f1       	breq	.+78     	; 0x1be <loop+0xae>
	  set_motors(kilo_straight_left, kilo_straight_right);
            
	  // Set the next state.
	  state = LEFT_RED;
        }
      else if (state == LEFT_RED)
     170:	00 97       	sbiw	r24, 0x00	; 0
     172:	19 f0       	breq	.+6      	; 0x17a <loop+0x6a>
	  set_motors(kilo_turn_left, 0);
            
	  // Set the next state.
	  state = RIGHT_BLUE;
        }
      else if (state == RIGHT_BLUE)
     174:	01 97       	sbiw	r24, 0x01	; 1
     176:	91 f0       	breq	.+36     	; 0x19c <loop+0x8c>
     178:	08 95       	ret
	  // Set the next state.
	  state = LEFT_RED;
        }
      else if (state == LEFT_RED)
        {
	  set_color(RGB(1, 0, 0));
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 72 07 	call	0xee4	; 0xee4 <set_color>
	  spinup_motors();
     180:	0e 94 56 03 	call	0x6ac	; 0x6ac <spinup_motors>
	  set_motors(kilo_turn_left, 0);
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	80 91 73 01 	lds	r24, 0x0173
     18a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <set_motors>
            
	  // Set the next state.
	  state = RIGHT_BLUE;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 11 01 	sts	0x0111, r25
     196:	80 93 10 01 	sts	0x0110, r24
     19a:	08 95       	ret
        }
      else if (state == RIGHT_BLUE)
        {
	  set_color(RGB(0, 0, 1));
     19c:	80 e1       	ldi	r24, 0x10	; 16
     19e:	0e 94 72 07 	call	0xee4	; 0xee4 <set_color>
	  spinup_motors();
     1a2:	0e 94 56 03 	call	0x6ac	; 0x6ac <spinup_motors>
	  set_motors(0, kilo_turn_right);
     1a6:	60 91 5f 01 	lds	r22, 0x015F
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	0e 94 51 03 	call	0x6a2	; 0x6a2 <set_motors>
            
	  // Set the next state.
	  state = FORWARD_GREEN;
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	90 93 11 01 	sts	0x0111, r25
     1b8:	80 93 10 01 	sts	0x0110, r24
     1bc:	08 95       	ret
      last_state_update = kilo_ticks;
      //if (last_changed
        
      if (state == FORWARD_GREEN)
        {
	  set_color(RGB(0, 1, 0));
     1be:	84 e0       	ldi	r24, 0x04	; 4
     1c0:	0e 94 72 07 	call	0xee4	; 0xee4 <set_color>
	  //spinup_motors();
	  set_motors(kilo_straight_left, kilo_straight_right);
     1c4:	60 91 72 01 	lds	r22, 0x0172
     1c8:	80 91 71 01 	lds	r24, 0x0171
     1cc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <set_motors>
            
	  // Set the next state.
	  state = LEFT_RED;
     1d0:	10 92 11 01 	sts	0x0111, r1
     1d4:	10 92 10 01 	sts	0x0110, r1
     1d8:	08 95       	ret

000001da <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1da:	08 95       	ret

000001dc <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	08 95       	ret

000001e2 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1e2:	08 95       	ret

000001e4 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
    cli();
     1f2:	f8 94       	cli

    ports_off();
     1f4:	14 b8       	out	0x04, r1	; 4
     1f6:	17 b8       	out	0x07, r1	; 7
     1f8:	1a b8       	out	0x0a, r1	; 10
     1fa:	15 b8       	out	0x05, r1	; 5
     1fc:	18 b8       	out	0x08, r1	; 8
     1fe:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     200:	52 9a       	sbi	0x0a, 2	; 10
     202:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     204:	14 bc       	out	0x24, r1	; 36
     206:	85 e0       	ldi	r24, 0x05	; 5
     208:	85 bd       	out	0x25, r24	; 37
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	87 bd       	out	0x27, r24	; 39
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     214:	10 92 80 00 	sts	0x0080, r1
     218:	10 92 81 00 	sts	0x0081, r1
     21c:	2f e8       	ldi	r18, 0x8F	; 143
     21e:	3b e0       	ldi	r19, 0x0B	; 11
     220:	30 93 89 00 	sts	0x0089, r19
     224:	20 93 88 00 	sts	0x0088, r18
     228:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     22c:	53 98       	cbi	0x0a, 3	; 10
     22e:	23 98       	cbi	0x04, 3	; 4
     230:	91 ea       	ldi	r25, 0xA1	; 161
     232:	90 93 b0 00 	sts	0x00B0, r25
     236:	80 93 b1 00 	sts	0x00B1, r24
     23a:	10 92 b4 00 	sts	0x00B4, r1
     23e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     242:	8b e0       	ldi	r24, 0x0B	; 11
     244:	80 bf       	out	0x30, r24	; 48
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     24c:	86 e0       	ldi	r24, 0x06	; 6
     24e:	80 93 7c 00 	sts	0x007C, r24
     252:	83 e8       	ldi	r24, 0x83	; 131
     254:	80 93 7a 00 	sts	0x007A, r24
     258:	80 91 7a 00 	lds	r24, 0x007A
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	80 93 7a 00 	sts	0x007A, r24
     262:	80 91 7a 00 	lds	r24, 0x007A
     266:	86 fd       	sbrc	r24, 6
     268:	fc cf       	rjmp	.-8      	; 0x262 <kilo_init+0x7e>
    adc_trigger_high_gain();
     26a:	10 92 7c 00 	sts	0x007C, r1
     26e:	83 ea       	ldi	r24, 0xA3	; 163
     270:	80 93 7a 00 	sts	0x007A, r24
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
    if (osccal != 0xFF)
     282:	8f 3f       	cpi	r24, 0xFF	; 255
     284:	11 f0       	breq	.+4      	; 0x28a <kilo_init+0xa6>
        OSCCAL = osccal;
     286:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     28a:	10 92 3d 01 	sts	0x013D, r1
    rx_leadingbit = 1;
     28e:	c1 e0       	ldi	r28, 0x01	; 1
     290:	c0 93 16 01 	sts	0x0116, r28
    rx_leadingbyte = 1;
     294:	c0 93 5a 01 	sts	0x015A, r28
    rx_byteindex = 0;
     298:	10 92 34 01 	sts	0x0134, r1
    rx_bytevalue = 0;
     29c:	10 92 6e 01 	sts	0x016E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2a0:	80 e9       	ldi	r24, 0x90	; 144
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     2a8:	80 93 33 01 	sts	0x0133, r24
    if (tx_mask & ~TX_MASK_MAX)
     2ac:	80 91 33 01 	lds	r24, 0x0133
     2b0:	88 73       	andi	r24, 0x38	; 56
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2b4:	c0 93 33 01 	sts	0x0133, r28
    tx_clock = 0;
     2b8:	10 92 5e 01 	sts	0x015E, r1
     2bc:	10 92 5d 01 	sts	0x015D, r1
    tx_increment = 255;
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	90 93 5c 01 	sts	0x015C, r25
     2c8:	80 93 5b 01 	sts	0x015B, r24
    kilo_ticks = 0;
     2cc:	10 92 39 01 	sts	0x0139, r1
     2d0:	10 92 3a 01 	sts	0x013A, r1
     2d4:	10 92 3b 01 	sts	0x013B, r1
     2d8:	10 92 3c 01 	sts	0x013C, r1
    kilo_state = IDLE;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     2e2:	82 e4       	ldi	r24, 0x42	; 66
     2e4:	9f e0       	ldi	r25, 0x0F	; 15
     2e6:	90 93 6d 01 	sts	0x016D, r25
     2ea:	80 93 6c 01 	sts	0x016C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2ee:	80 eb       	ldi	r24, 0xB0	; 176
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     2f6:	c8 2f       	mov	r28, r24
     2f8:	81 eb       	ldi	r24, 0xB1	; 177
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     300:	2c 2f       	mov	r18, r28
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	38 2b       	or	r19, r24
     306:	30 93 70 01 	sts	0x0170, r19
     30a:	20 93 6f 01 	sts	0x016F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     30e:	85 e0       	ldi	r24, 0x05	; 5
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     316:	80 93 73 01 	sts	0x0173, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     31a:	89 e0       	ldi	r24, 0x09	; 9
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     322:	80 93 5f 01 	sts	0x015F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     32e:	80 93 71 01 	sts	0x0171, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     332:	84 e1       	ldi	r24, 0x14	; 20
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     33a:	80 93 72 01 	sts	0x0172, r24
     33e:	5e e3       	ldi	r21, 0x3E	; 62
     340:	e5 2e       	mov	r14, r21
     342:	51 e0       	ldi	r21, 0x01	; 1
     344:	f5 2e       	mov	r15, r21
     346:	07 e1       	ldi	r16, 0x17	; 23
     348:	11 e0       	ldi	r17, 0x01	; 1
     34a:	c0 e2       	ldi	r28, 0x20	; 32
     34c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     354:	d8 2e       	mov	r13, r24
     356:	ce 01       	movw	r24, r28
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     35e:	2d 2d       	mov	r18, r13
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	32 2f       	mov	r19, r18
     364:	22 27       	eor	r18, r18
     366:	28 2b       	or	r18, r24
     368:	f7 01       	movw	r30, r14
     36a:	21 93       	st	Z+, r18
     36c:	31 93       	st	Z+, r19
     36e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     370:	ce 01       	movw	r24, r28
     372:	c0 96       	adiw	r24, 0x30	; 48
     374:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     378:	d8 2e       	mov	r13, r24
     37a:	ce 01       	movw	r24, r28
     37c:	c1 96       	adiw	r24, 0x31	; 49
     37e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <eeprom_read_byte>
     382:	2d 2d       	mov	r18, r13
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	32 2f       	mov	r19, r18
     388:	22 27       	eor	r18, r18
     38a:	28 2b       	or	r18, r24
     38c:	f8 01       	movw	r30, r16
     38e:	21 93       	st	Z+, r18
     390:	31 93       	st	Z+, r19
     392:	8f 01       	movw	r16, r30
     394:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     396:	cc 33       	cpi	r28, 0x3C	; 60
     398:	d1 05       	cpc	r29, r1
     39a:	c9 f6       	brne	.-78     	; 0x34e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     39c:	78 94       	sei
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	08 95       	ret

000003ae <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	8f 93       	push	r24
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	a8 95       	wdr
     3c0:	80 91 60 00 	lds	r24, 0x0060
     3c4:	88 61       	ori	r24, 0x18	; 24
     3c6:	80 93 60 00 	sts	0x0060, r24
     3ca:	10 92 60 00 	sts	0x0060, r1
     3ce:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3d0:	8f 91       	pop	r24
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     3dc:	3c 01       	movw	r6, r24
     3de:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     3e0:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     3e2:	99 24       	eor	r9, r9
     3e4:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     3ea:	96 e0       	ldi	r25, 0x06	; 6
     3ec:	a9 2e       	mov	r10, r25
     3ee:	23 e8       	ldi	r18, 0x83	; 131
     3f0:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     3f2:	38 e1       	ldi	r19, 0x18	; 24
     3f4:	d3 2e       	mov	r13, r19
     3f6:	49 e2       	ldi	r20, 0x29	; 41
     3f8:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     3fa:	90 91 0f 01 	lds	r25, 0x010F
     3fe:	e9 2f       	mov	r30, r25
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	e7 30       	cpi	r30, 0x07	; 7
     404:	f1 05       	cpc	r31, r1
     406:	c8 f7       	brcc	.-14     	; 0x3fa <kilo_start+0x1e>
     408:	ec 5c       	subi	r30, 0xCC	; 204
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     410:	11 23       	and	r17, r17
     412:	09 f4       	brne	.+2      	; 0x416 <kilo_start+0x3a>
     414:	fc c0       	rjmp	.+504    	; 0x60e <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     416:	c0 92 0f 01 	sts	0x010F, r12
     41a:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     41c:	fe 01       	movw	r30, r28
     41e:	09 95       	icall
                break;
     420:	ec cf       	rjmp	.-40     	; 0x3fa <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     422:	80 91 3d 01 	lds	r24, 0x013D
     426:	81 11       	cpse	r24, r1
     428:	eb c0       	rjmp	.+470    	; 0x600 <kilo_start+0x224>
        cli();                                    // disable interrupts
     42a:	f8 94       	cli
        adc_setup_conversion(6);
     42c:	a0 92 7c 00 	sts	0x007C, r10
     430:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     434:	80 91 7a 00 	lds	r24, 0x007A
     438:	80 64       	ori	r24, 0x40	; 64
     43a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     43e:	90 91 7a 00 	lds	r25, 0x007A
     442:	96 fd       	sbrc	r25, 6
     444:	fc cf       	rjmp	.-8      	; 0x43e <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     446:	80 91 78 00 	lds	r24, 0x0078
     44a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     44e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     450:	8b 3a       	cpi	r24, 0xAB	; 171
     452:	e2 e0       	ldi	r30, 0x02	; 2
     454:	9e 07       	cpc	r25, r30
     456:	0c f0       	brlt	.+2      	; 0x45a <kilo_start+0x7e>
     458:	ed c0       	rjmp	.+474    	; 0x634 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     45a:	89 38       	cpi	r24, 0x89	; 137
     45c:	f2 e0       	ldi	r31, 0x02	; 2
     45e:	9f 07       	cpc	r25, r31
     460:	0c f0       	brlt	.+2      	; 0x464 <kilo_start+0x88>
     462:	ef c0       	rjmp	.+478    	; 0x642 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     464:	87 36       	cpi	r24, 0x67	; 103
     466:	92 40       	sbci	r25, 0x02	; 2
     468:	0c f4       	brge	.+2      	; 0x46c <kilo_start+0x90>
     46a:	ca c0       	rjmp	.+404    	; 0x600 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     46c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     46e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     470:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     472:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     474:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     476:	3c 98       	cbi	0x07, 4	; 7
     478:	c0 cf       	rjmp	.-128    	; 0x3fa <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     47a:	f8 94       	cli
                acomp_off();
     47c:	80 b7       	in	r24, 0x30	; 48
     47e:	87 7f       	andi	r24, 0xF7	; 247
     480:	80 bf       	out	0x30, r24	; 48
                adc_off();
     482:	80 91 7a 00 	lds	r24, 0x007A
     486:	8f 77       	andi	r24, 0x7F	; 127
     488:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     48c:	14 b8       	out	0x04, r1	; 4
     48e:	17 b8       	out	0x07, r1	; 7
     490:	1a b8       	out	0x0a, r1	; 10
     492:	15 b8       	out	0x05, r1	; 5
     494:	18 b8       	out	0x08, r1	; 8
     496:	1b b8       	out	0x0b, r1	; 11
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	a8 95       	wdr
     49e:	d0 92 60 00 	sts	0x0060, r13
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4a8:	80 91 60 00 	lds	r24, 0x0060
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     4b2:	93 b7       	in	r25, 0x33	; 51
     4b4:	91 7f       	andi	r25, 0xF1	; 241
     4b6:	94 60       	ori	r25, 0x04	; 4
     4b8:	93 bf       	out	0x33, r25	; 51
                cli();
     4ba:	f8 94       	cli
                sleep_enable();
     4bc:	83 b7       	in	r24, 0x33	; 51
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	83 bf       	out	0x33, r24	; 51
                sei();
     4c2:	78 94       	sei
                sleep_cpu();
     4c4:	88 95       	sleep
                sleep_disable();
     4c6:	83 b7       	in	r24, 0x33	; 51
     4c8:	8e 7f       	andi	r24, 0xFE	; 254
     4ca:	83 bf       	out	0x33, r24	; 51
                sei();
     4cc:	78 94       	sei
                rx_busy = 0;
     4ce:	10 92 3d 01 	sts	0x013D, r1
                ports_on();
     4d2:	52 9a       	sbi	0x0a, 2	; 10
     4d4:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     4d6:	80 91 7a 00 	lds	r24, 0x007A
     4da:	80 68       	ori	r24, 0x80	; 128
     4dc:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e0:	87 e5       	ldi	r24, 0x57	; 87
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <kilo_start+0x108>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <kilo_start+0x10e>
     4ea:	00 00       	nop
                _delay_us(300);
                acomp_on();
     4ec:	80 b7       	in	r24, 0x30	; 48
     4ee:	88 61       	ori	r24, 0x18	; 24
     4f0:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4f2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4f4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4f6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4f8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     4fa:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     4fc:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fe:	ef e1       	ldi	r30, 0x1F	; 31
     500:	fe e4       	ldi	r31, 0x4E	; 78
     502:	31 97       	sbiw	r30, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <kilo_start+0x126>
     506:	00 c0       	rjmp	.+0      	; 0x508 <kilo_start+0x12c>
     508:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     50a:	80 91 3d 01 	lds	r24, 0x013D
     50e:	81 11       	cpse	r24, r1
     510:	81 c0       	rjmp	.+258    	; 0x614 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     512:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     514:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     516:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     518:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     51a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     51c:	3c 98       	cbi	0x07, 4	; 7
     51e:	6d cf       	rjmp	.-294    	; 0x3fa <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     520:	80 91 0d 01 	lds	r24, 0x010D
     524:	81 11       	cpse	r24, r1
     526:	41 c0       	rjmp	.+130    	; 0x5aa <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     528:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     52c:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     530:	10 92 0e 01 	sts	0x010E, r1
     534:	62 cf       	rjmp	.-316    	; 0x3fa <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     536:	48 99       	sbic	0x09, 0	; 9
     538:	ec cf       	rjmp	.-40     	; 0x512 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     53a:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     53c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     53e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     540:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     542:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     544:	3c 98       	cbi	0x07, 4	; 7
     546:	8f ec       	ldi	r24, 0xCF	; 207
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <kilo_start+0x16e>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <kilo_start+0x174>
     550:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     552:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     554:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     556:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     558:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     55a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     55c:	3c 98       	cbi	0x07, 4	; 7
     55e:	9f ef       	ldi	r25, 0xFF	; 255
     560:	e1 ee       	ldi	r30, 0xE1	; 225
     562:	f4 e0       	ldi	r31, 0x04	; 4
     564:	91 50       	subi	r25, 0x01	; 1
     566:	e0 40       	sbci	r30, 0x00	; 0
     568:	f0 40       	sbci	r31, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <kilo_start+0x188>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <kilo_start+0x192>
     56e:	00 00       	nop
     570:	44 cf       	rjmp	.-376    	; 0x3fa <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     572:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     574:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     576:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     578:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     57a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     57c:	3c 98       	cbi	0x07, 4	; 7
     57e:	ef ec       	ldi	r30, 0xCF	; 207
     580:	f7 e0       	ldi	r31, 0x07	; 7
     582:	31 97       	sbiw	r30, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <kilo_start+0x1a6>
     586:	00 c0       	rjmp	.+0      	; 0x588 <kilo_start+0x1ac>
     588:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     58a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     58c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     58e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     590:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     592:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     594:	3c 98       	cbi	0x07, 4	; 7
     596:	ff ef       	ldi	r31, 0xFF	; 255
     598:	21 ee       	ldi	r18, 0xE1	; 225
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	f1 50       	subi	r31, 0x01	; 1
     59e:	20 40       	sbci	r18, 0x00	; 0
     5a0:	80 40       	sbci	r24, 0x00	; 0
     5a2:	e1 f7       	brne	.-8      	; 0x59c <kilo_start+0x1c0>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <kilo_start+0x1ca>
     5a6:	00 00       	nop
     5a8:	28 cf       	rjmp	.-432    	; 0x3fa <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     5aa:	90 91 0d 01 	lds	r25, 0x010D
     5ae:	80 91 0e 01 	lds	r24, 0x010E
     5b2:	98 17       	cp	r25, r24
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <kilo_start+0x1dc>
     5b6:	21 cf       	rjmp	.-446    	; 0x3fa <kilo_start+0x1e>
                        prev_motion = cur_motion;
     5b8:	80 91 0d 01 	lds	r24, 0x010D
     5bc:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     5c0:	80 91 0d 01 	lds	r24, 0x010D
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	09 f4       	brne	.+2      	; 0x5ca <kilo_start+0x1ee>
     5c8:	50 c0       	rjmp	.+160    	; 0x66a <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5ca:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ce:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5d2:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	d9 f1       	breq	.+118    	; 0x650 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5da:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5de:	90 92 b4 00 	sts	0x00B4, r9
     5e2:	8f e2       	ldi	r24, 0x2F	; 47
     5e4:	95 e7       	ldi	r25, 0x75	; 117
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <kilo_start+0x20a>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <kilo_start+0x210>
     5ec:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     5ee:	80 91 72 01 	lds	r24, 0x0172
     5f2:	90 91 71 01 	lds	r25, 0x0171
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f6:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     5fa:	80 93 b4 00 	sts	0x00B4, r24
     5fe:	fd ce       	rjmp	.-518    	; 0x3fa <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     600:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     602:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     604:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     606:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     608:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     60a:	3c 98       	cbi	0x07, 4	; 7
     60c:	f6 ce       	rjmp	.-532    	; 0x3fa <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     60e:	f3 01       	movw	r30, r6
     610:	09 95       	icall
     612:	01 cf       	rjmp	.-510    	; 0x416 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     614:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     616:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     618:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     61a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     61c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     61e:	3c 98       	cbi	0x07, 4	; 7
     620:	ff ef       	ldi	r31, 0xFF	; 255
     622:	20 e7       	ldi	r18, 0x70	; 112
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	f1 50       	subi	r31, 0x01	; 1
     628:	20 40       	sbci	r18, 0x00	; 0
     62a:	80 40       	sbci	r24, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <kilo_start+0x24a>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <kilo_start+0x254>
     630:	00 00       	nop
     632:	6f cf       	rjmp	.-290    	; 0x512 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     634:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     636:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     638:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     63a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     63c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     63e:	3c 98       	cbi	0x07, 4	; 7
     640:	dc ce       	rjmp	.-584    	; 0x3fa <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     642:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     644:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     646:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     648:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     64a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     64c:	3c 9a       	sbi	0x07, 4	; 7
     64e:	d5 ce       	rjmp	.-598    	; 0x3fa <kilo_start+0x1e>
     650:	ef e2       	ldi	r30, 0x2F	; 47
     652:	f5 e7       	ldi	r31, 0x75	; 117
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <kilo_start+0x278>
     658:	00 c0       	rjmp	.+0      	; 0x65a <kilo_start+0x27e>
     65a:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     65c:	80 91 5f 01 	lds	r24, 0x015F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     660:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     664:	80 93 b4 00 	sts	0x00B4, r24
     668:	c8 ce       	rjmp	.-624    	; 0x3fa <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     66a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     66e:	10 92 b4 00 	sts	0x00B4, r1
     672:	8f e2       	ldi	r24, 0x2F	; 47
     674:	95 e7       	ldi	r25, 0x75	; 117
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <kilo_start+0x29a>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <kilo_start+0x2a0>
     67c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     67e:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     682:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     686:	10 92 b4 00 	sts	0x00B4, r1
     68a:	b7 ce       	rjmp	.-658    	; 0x3fa <kilo_start+0x1e>

0000068c <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     68c:	07 c0       	rjmp	.+14     	; 0x69c <delay+0x10>
     68e:	ef ec       	ldi	r30, 0xCF	; 207
     690:	f7 e0       	ldi	r31, 0x07	; 7
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <delay+0x6>
     696:	00 c0       	rjmp	.+0      	; 0x698 <delay+0xc>
     698:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     69a:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	b9 f7       	brne	.-18     	; 0x68e <delay+0x2>
     6a0:	08 95       	ret

000006a2 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6a6:	60 93 b4 00 	sts	0x00B4, r22
     6aa:	08 95       	ret

000006ac <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6b2:	80 93 b4 00 	sts	0x00B4, r24
     6b6:	8f e0       	ldi	r24, 0x0F	; 15
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	ef ec       	ldi	r30, 0xCF	; 207
     6bc:	f7 e0       	ldi	r31, 0x07	; 7
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <spinup_motors+0x12>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <spinup_motors+0x18>
     6c4:	00 00       	nop
     6c6:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6c8:	c1 f7       	brne	.-16     	; 0x6ba <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     6ca:	08 95       	ret

000006cc <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     6cc:	80 91 3d 01 	lds	r24, 0x013D
     6d0:	81 11       	cpse	r24, r1
     6d2:	1e c0       	rjmp	.+60     	; 0x710 <get_ambientlight+0x44>
        cli();
     6d4:	f8 94       	cli
        adc_setup_conversion(7);
     6d6:	87 e0       	ldi	r24, 0x07	; 7
     6d8:	80 93 7c 00 	sts	0x007C, r24
     6dc:	83 e8       	ldi	r24, 0x83	; 131
     6de:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6e2:	80 91 7a 00 	lds	r24, 0x007A
     6e6:	80 64       	ori	r24, 0x40	; 64
     6e8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6ec:	80 91 7a 00 	lds	r24, 0x007A
     6f0:	86 fd       	sbrc	r24, 6
     6f2:	fc cf       	rjmp	.-8      	; 0x6ec <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     6f4:	80 91 78 00 	lds	r24, 0x0078
     6f8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6fc:	10 92 7c 00 	sts	0x007C, r1
     700:	23 ea       	ldi	r18, 0xA3	; 163
     702:	20 93 7a 00 	sts	0x007A, r18
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     70c:	78 94       	sei
     70e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     714:	08 95       	ret

00000716 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     716:	80 91 3d 01 	lds	r24, 0x013D
     71a:	81 11       	cpse	r24, r1
     71c:	1e c0       	rjmp	.+60     	; 0x75a <get_temperature+0x44>
        cli();
     71e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     720:	88 ec       	ldi	r24, 0xC8	; 200
     722:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     726:	87 e8       	ldi	r24, 0x87	; 135
     728:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     72c:	80 91 7a 00 	lds	r24, 0x007A
     730:	80 64       	ori	r24, 0x40	; 64
     732:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     736:	80 91 7a 00 	lds	r24, 0x007A
     73a:	86 fd       	sbrc	r24, 6
     73c:	fc cf       	rjmp	.-8      	; 0x736 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     73e:	80 91 78 00 	lds	r24, 0x0078
     742:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     746:	10 92 7c 00 	sts	0x007C, r1
     74a:	23 ea       	ldi	r18, 0xA3	; 163
     74c:	20 93 7a 00 	sts	0x007A, r18
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     756:	78 94       	sei
     758:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     75e:	08 95       	ret

00000760 <rand_hard>:

uint8_t rand_hard() {
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	e0 e0       	ldi	r30, 0x00	; 0
     76a:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     76c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     76e:	03 ea       	ldi	r16, 0xA3	; 163
     770:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     772:	d6 e0       	ldi	r29, 0x06	; 6
     774:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     776:	a1 e0       	ldi	r26, 0x01	; 1
     778:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     77a:	60 e8       	ldi	r22, 0x80	; 128
     77c:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     77e:	f8 94       	cli
            adc_setup_conversion(6);
     780:	d0 93 7c 00 	sts	0x007C, r29
     784:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     788:	90 91 7a 00 	lds	r25, 0x007A
     78c:	90 64       	ori	r25, 0x40	; 64
     78e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     792:	90 91 7a 00 	lds	r25, 0x007A
     796:	96 fd       	sbrc	r25, 6
     798:	fc cf       	rjmp	.-8      	; 0x792 <rand_hard+0x32>
            a = ADCW&0x1;
     79a:	20 91 78 00 	lds	r18, 0x0078
     79e:	30 91 79 00 	lds	r19, 0x0079
     7a2:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     7a4:	90 91 7a 00 	lds	r25, 0x007A
     7a8:	90 64       	ori	r25, 0x40	; 64
     7aa:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7ae:	90 91 7a 00 	lds	r25, 0x007A
     7b2:	96 fd       	sbrc	r25, 6
     7b4:	fc cf       	rjmp	.-8      	; 0x7ae <rand_hard+0x4e>
            b = ADCW&0x1;
     7b6:	40 91 78 00 	lds	r20, 0x0078
     7ba:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     7be:	10 92 7c 00 	sts	0x007C, r1
     7c2:	00 93 7a 00 	sts	0x007A, r16
     7c6:	10 93 7b 00 	sts	0x007B, r17
            sei();
     7ca:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     7cc:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     7ce:	24 13       	cpse	r18, r20
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <rand_hard+0x78>
     7d2:	61 50       	subi	r22, 0x01	; 1
     7d4:	71 09       	sbc	r23, r1
     7d6:	99 f6       	brne	.-90     	; 0x77e <rand_hard+0x1e>
        if (a)
     7d8:	22 23       	and	r18, r18
     7da:	39 f0       	breq	.+14     	; 0x7ea <rand_hard+0x8a>
            num |= (1<<i);
     7dc:	9d 01       	movw	r18, r26
     7de:	0e 2e       	mov	r0, r30
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <rand_hard+0x84>
     7e2:	22 0f       	add	r18, r18
     7e4:	0a 94       	dec	r0
     7e6:	ea f7       	brpl	.-6      	; 0x7e2 <rand_hard+0x82>
     7e8:	82 2b       	or	r24, r18
     7ea:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     7ec:	e8 30       	cpi	r30, 0x08	; 8
     7ee:	f1 05       	cpc	r31, r1
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <rand_hard+0x94>
     7f2:	c3 cf       	rjmp	.-122    	; 0x77a <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     7fe:	80 91 00 01 	lds	r24, 0x0100
     802:	98 2f       	mov	r25, r24
     804:	99 0f       	add	r25, r25
     806:	99 0f       	add	r25, r25
     808:	99 0f       	add	r25, r25
     80a:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     80c:	90 91 0c 01 	lds	r25, 0x010C
     810:	21 e0       	ldi	r18, 0x01	; 1
     812:	29 0f       	add	r18, r25
     814:	20 93 0c 01 	sts	0x010C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     818:	28 2f       	mov	r18, r24
     81a:	22 95       	swap	r18
     81c:	26 95       	lsr	r18
     81e:	27 70       	andi	r18, 0x07	; 7
     820:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     822:	96 95       	lsr	r25
     824:	96 95       	lsr	r25
     826:	89 27       	eor	r24, r25
     828:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     82c:	08 95       	ret

0000082e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     82e:	80 93 00 01 	sts	0x0100, r24
     832:	08 95       	ret

00000834 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     834:	80 91 3d 01 	lds	r24, 0x013D
     838:	81 11       	cpse	r24, r1
     83a:	16 c0       	rjmp	.+44     	; 0x868 <get_voltage+0x34>
        cli();                                    // disable interrupts
     83c:	f8 94       	cli
        adc_setup_conversion(6);
     83e:	86 e0       	ldi	r24, 0x06	; 6
     840:	80 93 7c 00 	sts	0x007C, r24
     844:	83 e8       	ldi	r24, 0x83	; 131
     846:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     84a:	80 91 7a 00 	lds	r24, 0x007A
     84e:	80 64       	ori	r24, 0x40	; 64
     850:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     854:	80 91 7a 00 	lds	r24, 0x007A
     858:	86 fd       	sbrc	r24, 6
     85a:	fc cf       	rjmp	.-8      	; 0x854 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     85c:	80 91 78 00 	lds	r24, 0x0078
     860:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     864:	78 94       	sei
     866:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     86c:	08 95       	ret

0000086e <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     86e:	2f 92       	push	r2
     870:	3f 92       	push	r3
     872:	4f 92       	push	r4
     874:	5f 92       	push	r5
     876:	6f 92       	push	r6
     878:	7f 92       	push	r7
     87a:	8f 92       	push	r8
     87c:	9f 92       	push	r9
     87e:	af 92       	push	r10
     880:	bf 92       	push	r11
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	00 d0       	rcall	.+0      	; 0x894 <estimate_distance+0x26>
     894:	00 d0       	rcall	.+0      	; 0x896 <estimate_distance+0x28>
     896:	00 d0       	rcall	.+0      	; 0x898 <estimate_distance+0x2a>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     89e:	dc 01       	movw	r26, r24
     8a0:	12 96       	adiw	r26, 0x02	; 2
     8a2:	0d 90       	ld	r0, X+
     8a4:	bc 91       	ld	r27, X
     8a6:	a0 2d       	mov	r26, r0
     8a8:	be 83       	std	Y+6, r27	; 0x06
     8aa:	ad 83       	std	Y+5, r26	; 0x05
     8ac:	a4 38       	cpi	r26, 0x84	; 132
     8ae:	e3 e0       	ldi	r30, 0x03	; 3
     8b0:	be 07       	cpc	r27, r30
     8b2:	0c f0       	brlt	.+2      	; 0x8b6 <estimate_distance+0x48>
     8b4:	c9 c0       	rjmp	.+402    	; 0xa48 <__stack+0x149>
        if (dist->high_gain > kilo_irhigh[0]) {
     8b6:	80 91 17 01 	lds	r24, 0x0117
     8ba:	90 91 18 01 	lds	r25, 0x0118
     8be:	8a 17       	cp	r24, r26
     8c0:	9b 07       	cpc	r25, r27
     8c2:	08 f4       	brcc	.+2      	; 0x8c6 <estimate_distance+0x58>
     8c4:	37 c1       	rjmp	.+622    	; 0xb34 <__stack+0x235>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8c6:	00 91 19 01 	lds	r16, 0x0119
     8ca:	10 91 1a 01 	lds	r17, 0x011A
     8ce:	0a 17       	cp	r16, r26
     8d0:	1b 07       	cpc	r17, r27
     8d2:	08 f4       	brcc	.+2      	; 0x8d6 <estimate_distance+0x68>
     8d4:	2f c2       	rjmp	.+1118   	; 0xd34 <__stack+0x435>
     8d6:	00 91 1b 01 	lds	r16, 0x011B
     8da:	10 91 1c 01 	lds	r17, 0x011C
     8de:	0a 17       	cp	r16, r26
     8e0:	1b 07       	cpc	r17, r27
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <estimate_distance+0x78>
     8e4:	2f c2       	rjmp	.+1118   	; 0xd44 <__stack+0x445>
     8e6:	00 91 1d 01 	lds	r16, 0x011D
     8ea:	10 91 1e 01 	lds	r17, 0x011E
     8ee:	0a 17       	cp	r16, r26
     8f0:	1b 07       	cpc	r17, r27
     8f2:	08 f4       	brcc	.+2      	; 0x8f6 <estimate_distance+0x88>
     8f4:	2f c2       	rjmp	.+1118   	; 0xd54 <__stack+0x455>
     8f6:	00 91 1f 01 	lds	r16, 0x011F
     8fa:	10 91 20 01 	lds	r17, 0x0120
     8fe:	0a 17       	cp	r16, r26
     900:	1b 07       	cpc	r17, r27
     902:	08 f4       	brcc	.+2      	; 0x906 <__stack+0x7>
     904:	2f c2       	rjmp	.+1118   	; 0xd64 <__stack+0x465>
     906:	00 91 21 01 	lds	r16, 0x0121
     90a:	10 91 22 01 	lds	r17, 0x0122
     90e:	0a 17       	cp	r16, r26
     910:	1b 07       	cpc	r17, r27
     912:	08 f4       	brcc	.+2      	; 0x916 <__stack+0x17>
     914:	ef c1       	rjmp	.+990    	; 0xcf4 <__stack+0x3f5>
     916:	00 91 23 01 	lds	r16, 0x0123
     91a:	10 91 24 01 	lds	r17, 0x0124
     91e:	0a 17       	cp	r16, r26
     920:	1b 07       	cpc	r17, r27
     922:	08 f4       	brcc	.+2      	; 0x926 <__stack+0x27>
     924:	27 c2       	rjmp	.+1102   	; 0xd74 <__stack+0x475>
     926:	00 91 25 01 	lds	r16, 0x0125
     92a:	10 91 26 01 	lds	r17, 0x0126
     92e:	0a 17       	cp	r16, r26
     930:	1b 07       	cpc	r17, r27
     932:	08 f4       	brcc	.+2      	; 0x936 <__stack+0x37>
     934:	27 c2       	rjmp	.+1102   	; 0xd84 <__stack+0x485>
     936:	00 91 27 01 	lds	r16, 0x0127
     93a:	10 91 28 01 	lds	r17, 0x0128
     93e:	0a 17       	cp	r16, r26
     940:	1b 07       	cpc	r17, r27
     942:	08 f4       	brcc	.+2      	; 0x946 <__stack+0x47>
     944:	27 c2       	rjmp	.+1102   	; 0xd94 <__stack+0x495>
     946:	00 91 29 01 	lds	r16, 0x0129
     94a:	10 91 2a 01 	lds	r17, 0x012A
     94e:	0a 17       	cp	r16, r26
     950:	1b 07       	cpc	r17, r27
     952:	08 f4       	brcc	.+2      	; 0x956 <__stack+0x57>
     954:	27 c2       	rjmp	.+1102   	; 0xda4 <__stack+0x4a5>
     956:	00 91 2b 01 	lds	r16, 0x012B
     95a:	10 91 2c 01 	lds	r17, 0x012C
     95e:	0a 17       	cp	r16, r26
     960:	1b 07       	cpc	r17, r27
     962:	08 f4       	brcc	.+2      	; 0x966 <__stack+0x67>
     964:	27 c2       	rjmp	.+1102   	; 0xdb4 <__stack+0x4b5>
     966:	00 91 2d 01 	lds	r16, 0x012D
     96a:	10 91 2e 01 	lds	r17, 0x012E
     96e:	0a 17       	cp	r16, r26
     970:	1b 07       	cpc	r17, r27
     972:	08 f4       	brcc	.+2      	; 0x976 <__stack+0x77>
     974:	23 c2       	rjmp	.+1094   	; 0xdbc <__stack+0x4bd>
     976:	00 91 2f 01 	lds	r16, 0x012F
     97a:	10 91 30 01 	lds	r17, 0x0130
     97e:	0a 17       	cp	r16, r26
     980:	1b 07       	cpc	r17, r27
     982:	08 f4       	brcc	.+2      	; 0x986 <__stack+0x87>
     984:	23 c2       	rjmp	.+1094   	; 0xdcc <__stack+0x4cd>
     986:	00 91 31 01 	lds	r16, 0x0131
     98a:	10 91 32 01 	lds	r17, 0x0132
     98e:	0a 17       	cp	r16, r26
     990:	1b 07       	cpc	r17, r27
     992:	08 f4       	brcc	.+2      	; 0x996 <__stack+0x97>
     994:	23 c2       	rjmp	.+1094   	; 0xddc <__stack+0x4dd>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 ed       	ldi	r26, 0xD0	; 208
     99c:	b0 e4       	ldi	r27, 0x40	; 64
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	9a 83       	std	Y+2, r25	; 0x02
     9a2:	ab 83       	std	Y+3, r26	; 0x03
     9a4:	bc 83       	std	Y+4, r27	; 0x04
     9a6:	4c e0       	ldi	r20, 0x0C	; 12
     9a8:	e4 2e       	mov	r14, r20
     9aa:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9ac:	f7 01       	movw	r30, r14
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e9 5e       	subi	r30, 0xE9	; 233
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	80 81       	ld	r24, Z
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	b8 01       	movw	r22, r16
     9bc:	68 1b       	sub	r22, r24
     9be:	79 0b       	sbc	r23, r25
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__addsf3>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9d4:	ad 81       	ldd	r26, Y+5	; 0x05
     9d6:	be 81       	ldd	r27, Y+6	; 0x06
     9d8:	bd 01       	movw	r22, r26
     9da:	bb 0f       	add	r27, r27
     9dc:	88 0b       	sbc	r24, r24
     9de:	99 0b       	sbc	r25, r25
     9e0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__floatsisf>
     9e4:	4b 01       	movw	r8, r22
     9e6:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     9e8:	b8 01       	movw	r22, r16
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     9f2:	2b 01       	movw	r4, r22
     9f4:	3c 01       	movw	r6, r24
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	3a 81       	ldd	r19, Y+2	; 0x02
     9fa:	4b 81       	ldd	r20, Y+3	; 0x03
     9fc:	5c 81       	ldd	r21, Y+4	; 0x04
     9fe:	c7 01       	movw	r24, r14
     a00:	b6 01       	movw	r22, r12
     a02:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c3 01       	movw	r24, r6
     a0c:	b2 01       	movw	r22, r4
     a0e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__subsf3>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a16:	c5 01       	movw	r24, r10
     a18:	b4 01       	movw	r22, r8
     a1a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__subsf3>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e2       	ldi	r20, 0x20	; 32
     a24:	51 e4       	ldi	r21, 0x41	; 65
     a26:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
            b=((int)((int)b/(int)slope));
     a2a:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fixsfsi>
     a2e:	8b 01       	movw	r16, r22
     a30:	c7 01       	movw	r24, r14
     a32:	b6 01       	movw	r22, r12
     a34:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fixsfsi>
     a38:	ab 01       	movw	r20, r22
     a3a:	bc 01       	movw	r22, r24
     a3c:	c8 01       	movw	r24, r16
     a3e:	ba 01       	movw	r22, r20
     a40:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__divmodhi4>
            dist_high=b;
     a44:	16 2f       	mov	r17, r22
     a46:	77 c0       	rjmp	.+238    	; 0xb36 <__stack+0x237>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a48:	dc 01       	movw	r26, r24
     a4a:	cd 90       	ld	r12, X+
     a4c:	dc 90       	ld	r13, X
     a4e:	80 91 3e 01 	lds	r24, 0x013E
     a52:	90 91 3f 01 	lds	r25, 0x013F
     a56:	8c 15       	cp	r24, r12
     a58:	9d 05       	cpc	r25, r13
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	8c c0       	rjmp	.+280    	; 0xb76 <__stack+0x277>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a5e:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a60:	e0 90 40 01 	lds	r14, 0x0140
     a64:	f0 90 41 01 	lds	r15, 0x0141
     a68:	ec 14       	cp	r14, r12
     a6a:	fd 04       	cpc	r15, r13
     a6c:	08 f4       	brcc	.+2      	; 0xa70 <__stack+0x171>
     a6e:	5e c1       	rjmp	.+700    	; 0xd2c <__stack+0x42d>
     a70:	e0 90 42 01 	lds	r14, 0x0142
     a74:	f0 90 43 01 	lds	r15, 0x0143
     a78:	ec 14       	cp	r14, r12
     a7a:	fd 04       	cpc	r15, r13
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x181>
     a7e:	5e c1       	rjmp	.+700    	; 0xd3c <__stack+0x43d>
     a80:	e0 90 44 01 	lds	r14, 0x0144
     a84:	f0 90 45 01 	lds	r15, 0x0145
     a88:	ec 14       	cp	r14, r12
     a8a:	fd 04       	cpc	r15, r13
     a8c:	08 f4       	brcc	.+2      	; 0xa90 <__stack+0x191>
     a8e:	5e c1       	rjmp	.+700    	; 0xd4c <__stack+0x44d>
     a90:	e0 90 46 01 	lds	r14, 0x0146
     a94:	f0 90 47 01 	lds	r15, 0x0147
     a98:	ec 14       	cp	r14, r12
     a9a:	fd 04       	cpc	r15, r13
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <__stack+0x1a1>
     a9e:	5e c1       	rjmp	.+700    	; 0xd5c <__stack+0x45d>
     aa0:	e0 90 48 01 	lds	r14, 0x0148
     aa4:	f0 90 49 01 	lds	r15, 0x0149
     aa8:	ec 14       	cp	r14, r12
     aaa:	fd 04       	cpc	r15, r13
     aac:	08 f4       	brcc	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	c3 c0       	rjmp	.+390    	; 0xc36 <__stack+0x337>
     ab0:	e0 90 4a 01 	lds	r14, 0x014A
     ab4:	f0 90 4b 01 	lds	r15, 0x014B
     ab8:	ec 14       	cp	r14, r12
     aba:	fd 04       	cpc	r15, r13
     abc:	08 f4       	brcc	.+2      	; 0xac0 <__stack+0x1c1>
     abe:	56 c1       	rjmp	.+684    	; 0xd6c <__stack+0x46d>
     ac0:	e0 90 4c 01 	lds	r14, 0x014C
     ac4:	f0 90 4d 01 	lds	r15, 0x014D
     ac8:	ec 14       	cp	r14, r12
     aca:	fd 04       	cpc	r15, r13
     acc:	08 f4       	brcc	.+2      	; 0xad0 <__stack+0x1d1>
     ace:	56 c1       	rjmp	.+684    	; 0xd7c <__stack+0x47d>
     ad0:	e0 90 4e 01 	lds	r14, 0x014E
     ad4:	f0 90 4f 01 	lds	r15, 0x014F
     ad8:	ec 14       	cp	r14, r12
     ada:	fd 04       	cpc	r15, r13
     adc:	08 f4       	brcc	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	56 c1       	rjmp	.+684    	; 0xd8c <__stack+0x48d>
     ae0:	e0 90 50 01 	lds	r14, 0x0150
     ae4:	f0 90 51 01 	lds	r15, 0x0151
     ae8:	ec 14       	cp	r14, r12
     aea:	fd 04       	cpc	r15, r13
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <__stack+0x1f1>
     aee:	56 c1       	rjmp	.+684    	; 0xd9c <__stack+0x49d>
     af0:	e0 90 52 01 	lds	r14, 0x0152
     af4:	f0 90 53 01 	lds	r15, 0x0153
     af8:	ec 14       	cp	r14, r12
     afa:	fd 04       	cpc	r15, r13
     afc:	08 f4       	brcc	.+2      	; 0xb00 <__stack+0x201>
     afe:	56 c1       	rjmp	.+684    	; 0xdac <__stack+0x4ad>
     b00:	e0 90 54 01 	lds	r14, 0x0154
     b04:	f0 90 55 01 	lds	r15, 0x0155
     b08:	ec 14       	cp	r14, r12
     b0a:	fd 04       	cpc	r15, r13
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <__stack+0x211>
     b0e:	5a c1       	rjmp	.+692    	; 0xdc4 <__stack+0x4c5>
     b10:	e0 90 56 01 	lds	r14, 0x0156
     b14:	f0 90 57 01 	lds	r15, 0x0157
     b18:	ec 14       	cp	r14, r12
     b1a:	fd 04       	cpc	r15, r13
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <__stack+0x221>
     b1e:	5a c1       	rjmp	.+692    	; 0xdd4 <__stack+0x4d5>
     b20:	e0 90 58 01 	lds	r14, 0x0158
     b24:	f0 90 59 01 	lds	r15, 0x0159
     b28:	ec 14       	cp	r14, r12
     b2a:	fd 04       	cpc	r15, r13
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <__stack+0x231>
     b2e:	5a c1       	rjmp	.+692    	; 0xde4 <__stack+0x4e5>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b30:	0a e5       	ldi	r16, 0x5A	; 90
     b32:	31 c0       	rjmp	.+98     	; 0xb96 <__stack+0x297>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b34:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b36:	ed 81       	ldd	r30, Y+5	; 0x05
     b38:	fe 81       	ldd	r31, Y+6	; 0x06
     b3a:	ed 3b       	cpi	r30, 0xBD	; 189
     b3c:	f2 40       	sbci	r31, 0x02	; 2
     b3e:	fc f4       	brge	.+62     	; 0xb7e <__stack+0x27f>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b40:	81 e2       	ldi	r24, 0x21	; 33
     b42:	81 0f       	add	r24, r17
    }
}
     b44:	26 96       	adiw	r28, 0x06	; 6
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	bf 90       	pop	r11
     b62:	af 90       	pop	r10
     b64:	9f 90       	pop	r9
     b66:	8f 90       	pop	r8
     b68:	7f 90       	pop	r7
     b6a:	6f 90       	pop	r6
     b6c:	5f 90       	pop	r5
     b6e:	4f 90       	pop	r4
     b70:	3f 90       	pop	r3
     b72:	2f 90       	pop	r2
     b74:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b76:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b78:	81 e2       	ldi	r24, 0x21	; 33
     b7a:	80 0f       	add	r24, r16
     b7c:	e3 cf       	rjmp	.-58     	; 0xb44 <__stack+0x245>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b7e:	d1 01       	movw	r26, r2
     b80:	cd 90       	ld	r12, X+
     b82:	dc 90       	ld	r13, X
     b84:	80 91 3e 01 	lds	r24, 0x013E
     b88:	90 91 3f 01 	lds	r25, 0x013F
     b8c:	8c 15       	cp	r24, r12
     b8e:	9d 05       	cpc	r25, r13
     b90:	08 f0       	brcs	.+2      	; 0xb94 <__stack+0x295>
     b92:	66 cf       	rjmp	.-308    	; 0xa60 <__stack+0x161>
            dist_low=0;
     b94:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b96:	1f 3f       	cpi	r17, 0xFF	; 255
     b98:	79 f3       	breq	.-34     	; 0xb78 <__stack+0x279>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b9a:	ed 81       	ldd	r30, Y+5	; 0x05
     b9c:	fe 81       	ldd	r31, Y+6	; 0x06
     b9e:	bf 01       	movw	r22, r30
     ba0:	ff 0f       	add	r31, r31
     ba2:	88 0b       	sbc	r24, r24
     ba4:	99 0b       	sbc	r25, r25
     ba6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__floatsisf>
     baa:	6b 01       	movw	r12, r22
     bac:	7c 01       	movw	r14, r24
     bae:	61 2f       	mov	r22, r17
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     bba:	4b 01       	movw	r8, r22
     bbc:	5c 01       	movw	r10, r24
     bbe:	a7 01       	movw	r20, r14
     bc0:	96 01       	movw	r18, r12
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	81 e6       	ldi	r24, 0x61	; 97
     bc8:	94 e4       	ldi	r25, 0x44	; 68
     bca:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__subsf3>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c5 01       	movw	r24, r10
     bd4:	b4 01       	movw	r22, r8
     bd6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
     bda:	4b 01       	movw	r8, r22
     bdc:	5c 01       	movw	r10, r24
     bde:	60 2f       	mov	r22, r16
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     bea:	2b 01       	movw	r4, r22
     bec:	3c 01       	movw	r6, r24
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	4f e2       	ldi	r20, 0x2F	; 47
     bf4:	54 e4       	ldi	r21, 0x44	; 68
     bf6:	c7 01       	movw	r24, r14
     bf8:	b6 01       	movw	r22, r12
     bfa:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__subsf3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c3 01       	movw	r24, r6
     c04:	b2 01       	movw	r22, r4
     c06:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	c5 01       	movw	r24, r10
     c10:	b4 01       	movw	r22, r8
     c12:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__addsf3>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	48 e4       	ldi	r20, 0x48	; 72
     c1c:	53 e4       	ldi	r21, 0x43	; 67
     c1e:	0e 94 16 0b 	call	0x162c	; 0x162c <__divsf3>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	44 e0       	ldi	r20, 0x04	; 4
     c28:	52 e4       	ldi	r21, 0x42	; 66
     c2a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__addsf3>
     c2e:	0e 94 8f 0b 	call	0x171e	; 0x171e <__fixunssfsi>
     c32:	86 2f       	mov	r24, r22
     c34:	87 cf       	rjmp	.-242    	; 0xb44 <__stack+0x245>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c36:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c38:	85 e0       	ldi	r24, 0x05	; 5
     c3a:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	fc 01       	movw	r30, r24
     c42:	e4 5c       	subi	r30, 0xC4	; 196
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	b7 01       	movw	r22, r14
     c4c:	68 1b       	sub	r22, r24
     c4e:	79 0b       	sbc	r23, r25
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__addsf3>
     c60:	4b 01       	movw	r8, r22
     c62:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c64:	b6 01       	movw	r22, r12
     c66:	dd 0c       	add	r13, r13
     c68:	88 0b       	sbc	r24, r24
     c6a:	99 0b       	sbc	r25, r25
     c6c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__floatsisf>
     c70:	2b 01       	movw	r4, r22
     c72:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c74:	b7 01       	movw	r22, r14
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     c7e:	6b 01       	movw	r12, r22
     c80:	7c 01       	movw	r14, r24
     c82:	60 2f       	mov	r22, r16
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	5f e3       	ldi	r21, 0x3F	; 63
     c96:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	a9 01       	movw	r20, r18
     ca0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__addsf3>
     ca4:	a5 01       	movw	r20, r10
     ca6:	94 01       	movw	r18, r8
     ca8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24
     cb0:	c7 01       	movw	r24, r14
     cb2:	b6 01       	movw	r22, r12
     cb4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__subsf3>
     cb8:	9b 01       	movw	r18, r22
     cba:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cbc:	c3 01       	movw	r24, r6
     cbe:	b2 01       	movw	r22, r4
     cc0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__subsf3>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e2       	ldi	r20, 0x20	; 32
     cca:	51 e4       	ldi	r21, 0x41	; 65
     ccc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
                b=((int)((int)b/(int)slope));
     cd0:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fixsfsi>
     cd4:	7b 01       	movw	r14, r22
     cd6:	c5 01       	movw	r24, r10
     cd8:	b4 01       	movw	r22, r8
     cda:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fixsfsi>
     cde:	ab 01       	movw	r20, r22
     ce0:	bc 01       	movw	r22, r24
     ce2:	c7 01       	movw	r24, r14
     ce4:	ba 01       	movw	r22, r20
     ce6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__divmodhi4>
                dist_low=b;
     cea:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     cec:	6f 3f       	cpi	r22, 0xFF	; 255
     cee:	09 f0       	breq	.+2      	; 0xcf2 <__stack+0x3f3>
     cf0:	52 cf       	rjmp	.-348    	; 0xb96 <__stack+0x297>
     cf2:	26 cf       	rjmp	.-436    	; 0xb40 <__stack+0x241>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf4:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	7c 01       	movw	r14, r24
     cfc:	f1 e0       	ldi	r31, 0x01	; 1
     cfe:	ef 1a       	sub	r14, r31
     d00:	f1 08       	sbc	r15, r1
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 be 0b 	call	0x177c	; 0x177c <__floatunsisf>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__mulsf3>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	a9 01       	movw	r20, r18
     d1e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__addsf3>
     d22:	69 83       	std	Y+1, r22	; 0x01
     d24:	7a 83       	std	Y+2, r23	; 0x02
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d2a:	40 ce       	rjmp	.-896    	; 0x9ac <__stack+0xad>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d2c:	01 e0       	ldi	r16, 0x01	; 1
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	84 cf       	rjmp	.-248    	; 0xc3c <__stack+0x33d>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	df cf       	rjmp	.-66     	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d3c:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	7c cf       	rjmp	.-264    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d44:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	d7 cf       	rjmp	.-82     	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d4c:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	74 cf       	rjmp	.-280    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d54:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	cf cf       	rjmp	.-98     	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d5c:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	6c cf       	rjmp	.-296    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d64:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	c7 cf       	rjmp	.-114    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d6c:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d6e:	86 e0       	ldi	r24, 0x06	; 6
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	64 cf       	rjmp	.-312    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d74:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d76:	86 e0       	ldi	r24, 0x06	; 6
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	bf cf       	rjmp	.-130    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d7c:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d7e:	87 e0       	ldi	r24, 0x07	; 7
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	5c cf       	rjmp	.-328    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d84:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d86:	87 e0       	ldi	r24, 0x07	; 7
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	b7 cf       	rjmp	.-146    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d8c:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d8e:	88 e0       	ldi	r24, 0x08	; 8
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	54 cf       	rjmp	.-344    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d94:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	af cf       	rjmp	.-162    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d9c:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d9e:	89 e0       	ldi	r24, 0x09	; 9
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	4c cf       	rjmp	.-360    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da4:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     da6:	89 e0       	ldi	r24, 0x09	; 9
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a7 cf       	rjmp	.-178    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dac:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     dae:	8a e0       	ldi	r24, 0x0A	; 10
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	44 cf       	rjmp	.-376    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db4:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     db6:	8a e0       	ldi	r24, 0x0A	; 10
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	9f cf       	rjmp	.-194    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dbc:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     dbe:	8b e0       	ldi	r24, 0x0B	; 11
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9b cf       	rjmp	.-202    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dc4:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     dc6:	8b e0       	ldi	r24, 0x0B	; 11
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	38 cf       	rjmp	.-400    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dcc:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     dce:	8c e0       	ldi	r24, 0x0C	; 12
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	93 cf       	rjmp	.-218    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd4:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     dd6:	8c e0       	ldi	r24, 0x0C	; 12
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	30 cf       	rjmp	.-416    	; 0xc3c <__stack+0x33d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ddc:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     dde:	8d e0       	ldi	r24, 0x0D	; 13
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	8b cf       	rjmp	.-234    	; 0xcfa <__stack+0x3fb>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     de4:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     de6:	8d e0       	ldi	r24, 0x0D	; 13
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	28 cf       	rjmp	.-432    	; 0xc3c <__stack+0x33d>

00000dec <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
    tx_clock += tx_increment;
     e0e:	20 91 5d 01 	lds	r18, 0x015D
     e12:	30 91 5e 01 	lds	r19, 0x015E
     e16:	80 91 5b 01 	lds	r24, 0x015B
     e1a:	90 91 5c 01 	lds	r25, 0x015C
     e1e:	82 0f       	add	r24, r18
     e20:	93 1f       	adc	r25, r19
     e22:	90 93 5e 01 	sts	0x015E, r25
     e26:	80 93 5d 01 	sts	0x015D, r24
    tx_increment = 0xFF;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	90 93 5c 01 	sts	0x015C, r25
     e32:	80 93 5b 01 	sts	0x015B, r24
    OCR0A = tx_increment;
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e3a:	80 91 39 01 	lds	r24, 0x0139
     e3e:	90 91 3a 01 	lds	r25, 0x013A
     e42:	a0 91 3b 01 	lds	r26, 0x013B
     e46:	b0 91 3c 01 	lds	r27, 0x013C
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	a1 1d       	adc	r26, r1
     e4e:	b1 1d       	adc	r27, r1
     e50:	80 93 39 01 	sts	0x0139, r24
     e54:	90 93 3a 01 	sts	0x013A, r25
     e58:	a0 93 3b 01 	sts	0x013B, r26
     e5c:	b0 93 3c 01 	sts	0x013C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e60:	80 91 3d 01 	lds	r24, 0x013D
     e64:	81 11       	cpse	r24, r1
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <__vector_14+0x9a>
     e68:	80 91 6c 01 	lds	r24, 0x016C
     e6c:	90 91 6d 01 	lds	r25, 0x016D
     e70:	20 91 5d 01 	lds	r18, 0x015D
     e74:	30 91 5e 01 	lds	r19, 0x015E
     e78:	82 17       	cp	r24, r18
     e7a:	93 07       	cpc	r25, r19
     e7c:	20 f4       	brcc	.+8      	; 0xe86 <__vector_14+0x9a>
     e7e:	80 91 0f 01 	lds	r24, 0x010F
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	89 f0       	breq	.+34     	; 0xea8 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ea8:	e0 91 03 01 	lds	r30, 0x0103
     eac:	f0 91 04 01 	lds	r31, 0x0104
     eb0:	09 95       	icall
        if (msg) {
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	41 f3       	breq	.-48     	; 0xe86 <__vector_14+0x9a>
            if (message_send(msg)) {
     eb6:	0e 94 de 09 	call	0x13bc	; 0x13bc <message_send>
     eba:	81 11       	cpse	r24, r1
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     ebe:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <rand>
     ec2:	99 27       	eor	r25, r25
     ec4:	90 93 5c 01 	sts	0x015C, r25
     ec8:	80 93 5b 01 	sts	0x015B, r24
                OCR0A = tx_increment;
     ecc:	87 bd       	out	0x27, r24	; 39
     ece:	db cf       	rjmp	.-74     	; 0xe86 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ed0:	e0 91 01 01 	lds	r30, 0x0101
     ed4:	f0 91 02 01 	lds	r31, 0x0102
     ed8:	09 95       	icall
                tx_clock = 0;
     eda:	10 92 5e 01 	sts	0x015E, r1
     ede:	10 92 5d 01 	sts	0x015D, r1
     ee2:	d1 cf       	rjmp	.-94     	; 0xe86 <__vector_14+0x9a>

00000ee4 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     ee4:	80 ff       	sbrs	r24, 0
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <set_color+0x26>
        DDRD |= (1<<5);
     ee8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     eea:	81 ff       	sbrs	r24, 1
     eec:	11 c0       	rjmp	.+34     	; 0xf10 <set_color+0x2c>
        DDRD |= (1<<4);
     eee:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     ef0:	82 ff       	sbrs	r24, 2
     ef2:	11 c0       	rjmp	.+34     	; 0xf16 <set_color+0x32>
        DDRC |= (1<<3);
     ef4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     ef6:	83 ff       	sbrs	r24, 3
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <set_color+0x38>
        DDRC |= (1<<2);
     efa:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     efc:	84 ff       	sbrs	r24, 4
     efe:	11 c0       	rjmp	.+34     	; 0xf22 <set_color+0x3e>
        DDRC |= (1<<5);
     f00:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     f02:	85 fd       	sbrc	r24, 5
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f06:	3c 98       	cbi	0x07, 4	; 7
     f08:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f0a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f0c:	81 fd       	sbrc	r24, 1
     f0e:	ef cf       	rjmp	.-34     	; 0xeee <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f10:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f12:	82 fd       	sbrc	r24, 2
     f14:	ef cf       	rjmp	.-34     	; 0xef4 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f16:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f18:	83 fd       	sbrc	r24, 3
     f1a:	ef cf       	rjmp	.-34     	; 0xefa <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f1c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f1e:	84 fd       	sbrc	r24, 4
     f20:	ef cf       	rjmp	.-34     	; 0xf00 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f22:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f24:	85 ff       	sbrs	r24, 5
     f26:	ef cf       	rjmp	.-34     	; 0xf06 <set_color+0x22>
        DDRC |= (1<<4);
     f28:	3c 9a       	sbi	0x07, 4	; 7
     f2a:	08 95       	ret

00000f2c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
    rx_timer_off();
     f3a:	10 92 81 00 	sts	0x0081, r1
     f3e:	10 92 85 00 	sts	0x0085, r1
     f42:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 16 01 	sts	0x0116, r24
    rx_leadingbyte = 1;
     f4c:	80 93 5a 01 	sts	0x015A, r24
    rx_busy = 0;
     f50:	10 92 3d 01 	sts	0x013D, r1
    adc_trigger_high_gain();
     f54:	10 92 7c 00 	sts	0x007C, r1
     f58:	93 ea       	ldi	r25, 0xA3	; 163
     f5a:	90 93 7a 00 	sts	0x007A, r25
     f5e:	80 93 7b 00 	sts	0x007B, r24
}
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f96:	20 91 84 00 	lds	r18, 0x0084
     f9a:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	40 93 3d 01 	sts	0x013D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     fa4:	80 91 16 01 	lds	r24, 0x0116
     fa8:	88 23       	and	r24, r24
     faa:	a9 f1       	breq	.+106    	; 0x1016 <__vector_23+0xa6>
        rx_timer_on();
     fac:	10 92 85 00 	sts	0x0085, r1
     fb0:	10 92 84 00 	sts	0x0084, r1
     fb4:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     fb8:	10 92 6e 01 	sts	0x016E, r1
        rx_leadingbit = 0;
     fbc:	10 92 16 01 	sts	0x0116, r1
        if (rx_leadingbyte) {
     fc0:	80 91 5a 01 	lds	r24, 0x015A
     fc4:	88 23       	and	r24, r24
     fc6:	a1 f0       	breq	.+40     	; 0xff0 <__vector_23+0x80>
            adc_finish_conversion();
     fc8:	80 91 7a 00 	lds	r24, 0x007A
     fcc:	86 fd       	sbrc	r24, 6
     fce:	fc cf       	rjmp	.-8      	; 0xfc8 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     fd0:	80 91 78 00 	lds	r24, 0x0078
     fd4:	90 91 79 00 	lds	r25, 0x0079
     fd8:	90 93 38 01 	sts	0x0138, r25
     fdc:	80 93 37 01 	sts	0x0137, r24
            adc_trigger_low_gain();
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 7c 00 	sts	0x007C, r24
     fe6:	93 ea       	ldi	r25, 0xA3	; 163
     fe8:	90 93 7a 00 	sts	0x007A, r25
     fec:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1016:	c9 01       	movw	r24, r18
    1018:	87 58       	subi	r24, 0x87	; 135
    101a:	91 09       	sbc	r25, r1
    101c:	84 37       	cpi	r24, 0x74	; 116
    101e:	99 40       	sbci	r25, 0x09	; 9
    1020:	08 f0       	brcs	.+2      	; 0x1024 <__vector_23+0xb4>
    1022:	52 c0       	rjmp	.+164    	; 0x10c8 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1024:	26 58       	subi	r18, 0x86	; 134
    1026:	31 09       	sbc	r19, r1
    1028:	a4 ef       	ldi	r26, 0xF4	; 244
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	0e 94 86 0a 	call	0x150c	; 0x150c <__umulhisi3>
    1030:	aa 27       	eor	r26, r26
    1032:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1034:	88 30       	cpi	r24, 0x08	; 8
    1036:	91 05       	cpc	r25, r1
    1038:	a1 05       	cpc	r26, r1
    103a:	b1 05       	cpc	r27, r1
    103c:	08 f4       	brcc	.+2      	; 0x1040 <__vector_23+0xd0>
    103e:	7b c0       	rjmp	.+246    	; 0x1136 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1040:	40 93 16 01 	sts	0x0116, r20
                if (rx_leadingbyte) {
    1044:	80 91 5a 01 	lds	r24, 0x015A
    1048:	81 11       	cpse	r24, r1
    104a:	52 c0       	rjmp	.+164    	; 0x10f0 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    104c:	80 91 34 01 	lds	r24, 0x0134
    1050:	e8 2f       	mov	r30, r24
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	e0 5a       	subi	r30, 0xA0	; 160
    1056:	fe 4f       	sbci	r31, 0xFE	; 254
    1058:	90 91 6e 01 	lds	r25, 0x016E
    105c:	90 83       	st	Z, r25
                    rx_byteindex++;
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	80 93 34 01 	sts	0x0134, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1064:	8c 30       	cpi	r24, 0x0C	; 12
    1066:	21 f6       	brne	.-120    	; 0xff0 <__vector_23+0x80>
                        rx_timer_off();
    1068:	10 92 81 00 	sts	0x0081, r1
    106c:	10 92 85 00 	sts	0x0085, r1
    1070:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1074:	40 93 5a 01 	sts	0x015A, r20
                        rx_busy = 0;
    1078:	10 92 3d 01 	sts	0x013D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    107c:	c0 91 6a 01 	lds	r28, 0x016A
    1080:	d0 91 6b 01 	lds	r29, 0x016B
    1084:	80 e6       	ldi	r24, 0x60	; 96
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 c2 09 	call	0x1384	; 0x1384 <message_crc>
    108c:	c8 17       	cp	r28, r24
    108e:	d9 07       	cpc	r29, r25
    1090:	09 f0       	breq	.+2      	; 0x1094 <__vector_23+0x124>
    1092:	ae cf       	rjmp	.-164    	; 0xff0 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1094:	80 91 69 01 	lds	r24, 0x0169
    1098:	87 ff       	sbrs	r24, 7
    109a:	61 c0       	rjmp	.+194    	; 0x115e <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    109c:	98 e7       	ldi	r25, 0x78	; 120
    109e:	98 0f       	add	r25, r24
    10a0:	93 30       	cpi	r25, 0x03	; 3
    10a2:	30 f0       	brcs	.+12     	; 0x10b0 <__vector_23+0x140>
        motors_off();
    10a4:	53 98       	cbi	0x0a, 3	; 10
    10a6:	23 98       	cbi	0x04, 3	; 4
    10a8:	10 92 b4 00 	sts	0x00B4, r1
    10ac:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	fc 01       	movw	r30, r24
    10b4:	e0 58       	subi	r30, 0x80	; 128
    10b6:	f1 09       	sbc	r31, r1
    10b8:	eb 30       	cpi	r30, 0x0B	; 11
    10ba:	f1 05       	cpc	r31, r1
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <__vector_23+0x150>
    10be:	98 cf       	rjmp	.-208    	; 0xff0 <__vector_23+0x80>
    10c0:	e5 5c       	subi	r30, 0xC5	; 197
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    10c8:	10 92 81 00 	sts	0x0081, r1
    10cc:	10 92 85 00 	sts	0x0085, r1
    10d0:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    10d4:	40 93 16 01 	sts	0x0116, r20
            rx_leadingbyte = 1;
    10d8:	40 93 5a 01 	sts	0x015A, r20
            rx_busy = 0;
    10dc:	10 92 3d 01 	sts	0x013D, r1
            adc_trigger_high_gain();
    10e0:	10 92 7c 00 	sts	0x007C, r1
    10e4:	83 ea       	ldi	r24, 0xA3	; 163
    10e6:	80 93 7a 00 	sts	0x007A, r24
    10ea:	40 93 7b 00 	sts	0x007B, r20
    10ee:	80 cf       	rjmp	.-256    	; 0xff0 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    10f0:	80 91 7a 00 	lds	r24, 0x007A
    10f4:	86 fd       	sbrc	r24, 6
    10f6:	fc cf       	rjmp	.-8      	; 0x10f0 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    10f8:	80 91 78 00 	lds	r24, 0x0078
    10fc:	90 91 79 00 	lds	r25, 0x0079
    1100:	90 93 36 01 	sts	0x0136, r25
    1104:	80 93 35 01 	sts	0x0135, r24
                    adc_trigger_high_gain();
    1108:	10 92 7c 00 	sts	0x007C, r1
    110c:	83 ea       	ldi	r24, 0xA3	; 163
    110e:	80 93 7a 00 	sts	0x007A, r24
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1118:	90 91 6e 01 	lds	r25, 0x016E
    111c:	99 23       	and	r25, r25
    111e:	d1 f0       	breq	.+52     	; 0x1154 <__vector_23+0x1e4>
                        rx_timer_off();
    1120:	10 92 81 00 	sts	0x0081, r1
    1124:	10 92 85 00 	sts	0x0085, r1
    1128:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    112c:	80 93 5a 01 	sts	0x015A, r24
                        rx_busy = 0;
    1130:	10 92 3d 01 	sts	0x013D, r1
    1134:	5d cf       	rjmp	.-326    	; 0xff0 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	f9 01       	movw	r30, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <__vector_23+0x1d2>
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <__vector_23+0x1ce>
    1146:	cf 01       	movw	r24, r30
    1148:	90 91 6e 01 	lds	r25, 0x016E
    114c:	89 2b       	or	r24, r25
    114e:	80 93 6e 01 	sts	0x016E, r24
    1152:	4e cf       	rjmp	.-356    	; 0xff0 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1154:	10 92 5a 01 	sts	0x015A, r1
                        rx_byteindex = 0;
    1158:	10 92 34 01 	sts	0x0134, r1
    115c:	49 cf       	rjmp	.-366    	; 0xff0 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    115e:	e0 91 05 01 	lds	r30, 0x0105
    1162:	f0 91 06 01 	lds	r31, 0x0106
    1166:	65 e3       	ldi	r22, 0x35	; 53
    1168:	71 e0       	ldi	r23, 0x01	; 1
    116a:	80 e6       	ldi	r24, 0x60	; 96
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	09 95       	icall
    1170:	3f cf       	rjmp	.-386    	; 0xff0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1172:	80 91 60 01 	lds	r24, 0x0160
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	09 f4       	brne	.+2      	; 0x117c <__vector_23+0x20c>
    117a:	dd c0       	rjmp	.+442    	; 0x1336 <__vector_23+0x3c6>
    117c:	08 f4       	brcc	.+2      	; 0x1180 <__vector_23+0x210>
    117e:	ba c0       	rjmp	.+372    	; 0x12f4 <__vector_23+0x384>
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	09 f4       	brne	.+2      	; 0x1186 <__vector_23+0x216>
    1184:	c6 c0       	rjmp	.+396    	; 0x1312 <__vector_23+0x3a2>
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	09 f0       	breq	.+2      	; 0x118c <__vector_23+0x21c>
    118a:	b1 c0       	rjmp	.+354    	; 0x12ee <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    118c:	80 91 0d 01 	lds	r24, 0x010D
    1190:	90 91 66 01 	lds	r25, 0x0166
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	09 f4       	brne	.+2      	; 0x119a <__vector_23+0x22a>
    1198:	e3 c0       	rjmp	.+454    	; 0x1360 <__vector_23+0x3f0>
    119a:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    119e:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    11a2:	23 e0       	ldi	r18, 0x03	; 3
    11a4:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    11a8:	80 93 71 01 	sts	0x0171, r24
                        kilo_straight_right = calibmsg->straight_right;
    11ac:	90 93 72 01 	sts	0x0172, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11b0:	80 91 0f 01 	lds	r24, 0x010F
    11b4:	86 30       	cpi	r24, 0x06	; 6
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__vector_23+0x24a>
    11b8:	1b cf       	rjmp	.-458    	; 0xff0 <__vector_23+0x80>
                motors_on();
    11ba:	53 9a       	sbi	0x0a, 3	; 10
    11bc:	23 9a       	sbi	0x04, 3	; 4
    11be:	10 92 b4 00 	sts	0x00B4, r1
    11c2:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    11c6:	86 e0       	ldi	r24, 0x06	; 6
    11c8:	80 93 0f 01 	sts	0x010F, r24
    11cc:	11 cf       	rjmp	.-478    	; 0xff0 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    11ce:	80 91 0f 01 	lds	r24, 0x010F
    11d2:	86 30       	cpi	r24, 0x06	; 6
    11d4:	99 f0       	breq	.+38     	; 0x11fc <__vector_23+0x28c>
                motors_on();
    11d6:	53 9a       	sbi	0x0a, 3	; 10
    11d8:	23 9a       	sbi	0x04, 3	; 4
    11da:	10 92 b4 00 	sts	0x00B4, r1
    11de:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    11e2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    11e4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    11e6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11e8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11ea:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11ec:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    11ee:	10 92 0d 01 	sts	0x010D, r1
    11f2:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9c 01       	movw	r18, r24
    1202:	00 90 60 01 	lds	r0, 0x0160
    1206:	02 c0       	rjmp	.+4      	; 0x120c <__vector_23+0x29c>
    1208:	22 0f       	add	r18, r18
    120a:	33 1f       	adc	r19, r19
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <__vector_23+0x298>
    1210:	80 91 6f 01 	lds	r24, 0x016F
    1214:	90 91 70 01 	lds	r25, 0x0170
    1218:	82 23       	and	r24, r18
    121a:	93 23       	and	r25, r19
    121c:	89 2b       	or	r24, r25
    121e:	09 f0       	breq	.+2      	; 0x1222 <__vector_23+0x2b2>
    1220:	86 c0       	rjmp	.+268    	; 0x132e <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1222:	10 92 0d 01 	sts	0x010D, r1
    1226:	e4 ce       	rjmp	.-568    	; 0xff0 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 0f 01 	sts	0x010F, r24
    122e:	e0 ce       	rjmp	.-576    	; 0xff0 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1230:	e0 e0       	ldi	r30, 0x00	; 0
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1236:	80 91 6e 00 	lds	r24, 0x006E
    123a:	8d 7f       	andi	r24, 0xFD	; 253
    123c:	80 93 6e 00 	sts	0x006E, r24
    1240:	16 bc       	out	0x26, r1	; 38
            bootload();
    1242:	e0 e0       	ldi	r30, 0x00	; 0
    1244:	f0 e7       	ldi	r31, 0x70	; 112
    1246:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1248:	10 92 0f 01 	sts	0x010F, r1
    124c:	d1 ce       	rjmp	.-606    	; 0xff0 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	80 93 0f 01 	sts	0x010F, r24
    1254:	cd ce       	rjmp	.-614    	; 0xff0 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1256:	85 e0       	ldi	r24, 0x05	; 5
    1258:	80 93 0f 01 	sts	0x010F, r24
    125c:	c9 ce       	rjmp	.-622    	; 0xff0 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    125e:	80 91 0f 01 	lds	r24, 0x010F
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	09 f4       	brne	.+2      	; 0x1268 <__vector_23+0x2f8>
    1266:	c4 ce       	rjmp	.-632    	; 0xff0 <__vector_23+0x80>
    1268:	80 91 0f 01 	lds	r24, 0x010F
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	09 f4       	brne	.+2      	; 0x1272 <__vector_23+0x302>
    1270:	bf ce       	rjmp	.-642    	; 0xff0 <__vector_23+0x80>
                motors_on();
    1272:	53 9a       	sbi	0x0a, 3	; 10
    1274:	23 9a       	sbi	0x04, 3	; 4
    1276:	10 92 b4 00 	sts	0x00B4, r1
    127a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	80 93 0f 01 	sts	0x010F, r24
    1284:	b5 ce       	rjmp	.-662    	; 0xff0 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1286:	80 91 0f 01 	lds	r24, 0x010F
    128a:	86 30       	cpi	r24, 0x06	; 6
    128c:	09 f0       	breq	.+2      	; 0x1290 <__vector_23+0x320>
    128e:	b0 ce       	rjmp	.-672    	; 0xff0 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1290:	60 91 6f 01 	lds	r22, 0x016F
    1294:	80 eb       	ldi	r24, 0xB0	; 176
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    129c:	60 91 70 01 	lds	r22, 0x0170
    12a0:	81 eb       	ldi	r24, 0xB1	; 177
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12a8:	60 91 73 01 	lds	r22, 0x0173
    12ac:	85 e0       	ldi	r24, 0x05	; 5
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    12b4:	60 91 5f 01 	lds	r22, 0x015F
    12b8:	89 e0       	ldi	r24, 0x09	; 9
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    12c0:	60 91 71 01 	lds	r22, 0x0171
    12c4:	8c e0       	ldi	r24, 0x0C	; 12
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    12cc:	60 91 72 01 	lds	r22, 0x0172
    12d0:	84 e1       	ldi	r24, 0x14	; 20
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <eeprom_write_byte>
                        motors_off();
    12d8:	53 98       	cbi	0x0a, 3	; 10
    12da:	23 98       	cbi	0x04, 3	; 4
    12dc:	10 92 b4 00 	sts	0x00B4, r1
    12e0:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 0f 01 	sts	0x010F, r24
    12ea:	80 91 60 01 	lds	r24, 0x0160
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12ee:	81 11       	cpse	r24, r1
    12f0:	5f cf       	rjmp	.-322    	; 0x11b0 <__vector_23+0x240>
    12f2:	7e ce       	rjmp	.-772    	; 0xff0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12f4:	88 23       	and	r24, r24
    12f6:	39 f2       	breq	.-114    	; 0x1286 <__vector_23+0x316>
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	c9 f7       	brne	.-14     	; 0x12ee <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    12fc:	80 91 61 01 	lds	r24, 0x0161
    1300:	90 91 62 01 	lds	r25, 0x0162
    1304:	90 93 70 01 	sts	0x0170, r25
    1308:	80 93 6f 01 	sts	0x016F, r24
                    cur_motion = MOVE_STOP;
    130c:	10 92 0d 01 	sts	0x010D, r1
    1310:	4f cf       	rjmp	.-354    	; 0x11b0 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1312:	80 91 0d 01 	lds	r24, 0x010D
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	71 f1       	breq	.+92     	; 0x1376 <__vector_23+0x406>
    131a:	80 91 64 01 	lds	r24, 0x0164
                        prev_motion = MOVE_STOP;
    131e:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    1328:	80 93 5f 01 	sts	0x015F, r24
    132c:	41 cf       	rjmp	.-382    	; 0x11b0 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	80 93 0d 01 	sts	0x010D, r24
    1334:	5d ce       	rjmp	.-838    	; 0xff0 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1336:	80 91 0d 01 	lds	r24, 0x010D
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	51 f0       	breq	.+20     	; 0x1352 <__vector_23+0x3e2>
    133e:	80 91 63 01 	lds	r24, 0x0163
                        prev_motion = MOVE_STOP;
    1342:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    134c:	80 93 73 01 	sts	0x0173, r24
    1350:	2f cf       	rjmp	.-418    	; 0x11b0 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1352:	80 91 63 01 	lds	r24, 0x0163
    1356:	90 91 73 01 	lds	r25, 0x0173
    135a:	89 13       	cpse	r24, r25
    135c:	f2 cf       	rjmp	.-28     	; 0x1342 <__vector_23+0x3d2>
    135e:	28 cf       	rjmp	.-432    	; 0x11b0 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1360:	80 91 72 01 	lds	r24, 0x0172
    1364:	98 13       	cpse	r25, r24
    1366:	19 cf       	rjmp	.-462    	; 0x119a <__vector_23+0x22a>
    1368:	80 91 65 01 	lds	r24, 0x0165
    136c:	20 91 71 01 	lds	r18, 0x0171
    1370:	82 13       	cpse	r24, r18
    1372:	15 cf       	rjmp	.-470    	; 0x119e <__vector_23+0x22e>
    1374:	1d cf       	rjmp	.-454    	; 0x11b0 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1376:	80 91 64 01 	lds	r24, 0x0164
    137a:	90 91 5f 01 	lds	r25, 0x015F
    137e:	89 13       	cpse	r24, r25
    1380:	ce cf       	rjmp	.-100    	; 0x131e <__vector_23+0x3ae>
    1382:	16 cf       	rjmp	.-468    	; 0x11b0 <__vector_23+0x240>

00001384 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1384:	fc 01       	movw	r30, r24
    1386:	ac 01       	movw	r20, r24
    1388:	46 5f       	subi	r20, 0xF6	; 246
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1390:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1392:	82 27       	eor	r24, r18
    1394:	08 2e       	mov	r0, r24
    1396:	82 95       	swap	r24
    1398:	80 7f       	andi	r24, 0xF0	; 240
    139a:	80 25       	eor	r24, r0
    139c:	09 2e       	mov	r0, r25
    139e:	98 2f       	mov	r25, r24
    13a0:	82 95       	swap	r24
    13a2:	8f 70       	andi	r24, 0x0F	; 15
    13a4:	08 26       	eor	r0, r24
    13a6:	86 95       	lsr	r24
    13a8:	98 27       	eor	r25, r24
    13aa:	89 27       	eor	r24, r25
    13ac:	88 0f       	add	r24, r24
    13ae:	88 0f       	add	r24, r24
    13b0:	88 0f       	add	r24, r24
    13b2:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    13b4:	e4 17       	cp	r30, r20
    13b6:	f5 07       	cpc	r31, r21
    13b8:	59 f7       	brne	.-42     	; 0x1390 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    13ba:	08 95       	ret

000013bc <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    13bc:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    13be:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    13c0:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    13c2:	20 91 33 01 	lds	r18, 0x0133
    or tmpreg1, ddrreg
    13c6:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    13c8:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    13ca:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13cc:	30 91 33 01 	lds	r19, 0x0133
    13d0:	20 30       	cpi	r18, 0x00	; 0
    13d2:	29 f0       	breq	.+10     	; 0x13de <message_send+0x22>
    13d4:	00 00       	nop
    13d6:	25 b1       	in	r18, 0x05	; 5
    13d8:	23 2b       	or	r18, r19
    13da:	25 b9       	out	0x05, r18	; 5
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <message_send+0x2a>
    13de:	00 00       	nop
    13e0:	00 00       	nop
    13e2:	00 00       	nop
    13e4:	00 c0       	rjmp	.+0      	; 0x13e6 <message_send+0x2a>
    13e6:	00 00       	nop
    13e8:	00 00       	nop
    13ea:	00 00       	nop
    13ec:	30 95       	com	r19
    13ee:	25 b1       	in	r18, 0x05	; 5
    13f0:	23 23       	and	r18, r19
    13f2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    13f4:	2e ea       	ldi	r18, 0xAE	; 174
    13f6:	2a 95       	dec	r18
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    13fa:	2b ee       	ldi	r18, 0xEB	; 235

000013fc <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    13fc:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    13fe:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1402:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1404:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    1408:	30 95       	com	r19
    in tmpreg1, IR_PORT
    140a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    140c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    140e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1410:	0f be       	out	0x3f, r0	; 63
    return 0
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	08 95       	ret

00001416 <nocollision>:
nocollision:
    nop
    1416:	00 00       	nop
    dec tmpreg1
    1418:	2a 95       	dec	r18
    brne checkcollision
    141a:	81 f7       	brne	.-32     	; 0x13fc <checkcollision>

    ldi tmpreg1, 0x01
    141c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    141e:	30 91 33 01 	lds	r19, 0x0133
    1422:	20 30       	cpi	r18, 0x00	; 0
    1424:	29 f0       	breq	.+10     	; 0x1430 <nocollision+0x1a>
    1426:	00 00       	nop
    1428:	25 b1       	in	r18, 0x05	; 5
    142a:	23 2b       	or	r18, r19
    142c:	25 b9       	out	0x05, r18	; 5
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <nocollision+0x22>
    1430:	00 00       	nop
    1432:	00 00       	nop
    1434:	00 00       	nop
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <nocollision+0x22>
    1438:	00 00       	nop
    143a:	00 00       	nop
    143c:	00 00       	nop
    143e:	30 95       	com	r19
    1440:	25 b1       	in	r18, 0x05	; 5
    1442:	23 23       	and	r18, r19
    1444:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1446:	00 00       	nop
    1448:	24 e5       	ldi	r18, 0x54	; 84
    144a:	2a 95       	dec	r18
    144c:	f1 f7       	brne	.-4      	; 0x144a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    144e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1450:	8c e0       	ldi	r24, 0x0C	; 12

00001452 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1452:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1454:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1456:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1458:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    145a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    145c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    145e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1460:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1462:	50 e0       	ldi	r21, 0x00	; 0

00001464 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1464:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1466:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1468:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    146a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    146c:	30 91 33 01 	lds	r19, 0x0133
    1470:	20 30       	cpi	r18, 0x00	; 0
    1472:	29 f0       	breq	.+10     	; 0x147e <sendbit+0x1a>
    1474:	00 00       	nop
    1476:	25 b1       	in	r18, 0x05	; 5
    1478:	23 2b       	or	r18, r19
    147a:	25 b9       	out	0x05, r18	; 5
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <sendbit+0x22>
    147e:	00 00       	nop
    1480:	00 00       	nop
    1482:	00 00       	nop
    1484:	00 c0       	rjmp	.+0      	; 0x1486 <sendbit+0x22>
    1486:	00 00       	nop
    1488:	00 00       	nop
    148a:	00 00       	nop
    148c:	30 95       	com	r19
    148e:	25 b1       	in	r18, 0x05	; 5
    1490:	23 23       	and	r18, r19
    1492:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1494:	00 00       	nop
    1496:	21 e5       	ldi	r18, 0x51	; 81
    1498:	2a 95       	dec	r18
    149a:	f1 f7       	brne	.-4      	; 0x1498 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    149c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    149e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    14a0:	9a 95       	dec	r25
    brne sendbit
    14a2:	01 f7       	brne	.-64     	; 0x1464 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14a4:	8a 95       	dec	r24
    brne sendbyte
    14a6:	a9 f6       	brne	.-86     	; 0x1452 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14a8:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14aa:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14ac:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14ae:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14b0:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    14b4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14b6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14b8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14ba:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14bc:	0f be       	out	0x3f, r0	; 63
    return 1
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	08 95       	ret

000014c2 <main>:
    }
}

int main()
{
  kilo_init();
    14c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <kilo_init>
  kilo_start(setup, loop);
    14c6:	68 e8       	ldi	r22, 0x88	; 136
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	81 e7       	ldi	r24, 0x71	; 113
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 ee 01 	call	0x3dc	; 0x3dc <kilo_start>
    
  return 0;
}
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	08 95       	ret

000014d8 <__divmodhi4>:
    14d8:	97 fb       	bst	r25, 7
    14da:	07 2e       	mov	r0, r23
    14dc:	16 f4       	brtc	.+4      	; 0x14e2 <__divmodhi4+0xa>
    14de:	00 94       	com	r0
    14e0:	07 d0       	rcall	.+14     	; 0x14f0 <__divmodhi4_neg1>
    14e2:	77 fd       	sbrc	r23, 7
    14e4:	09 d0       	rcall	.+18     	; 0x14f8 <__divmodhi4_neg2>
    14e6:	0e 94 95 0a 	call	0x152a	; 0x152a <__udivmodhi4>
    14ea:	07 fc       	sbrc	r0, 7
    14ec:	05 d0       	rcall	.+10     	; 0x14f8 <__divmodhi4_neg2>
    14ee:	3e f4       	brtc	.+14     	; 0x14fe <__divmodhi4_exit>

000014f0 <__divmodhi4_neg1>:
    14f0:	90 95       	com	r25
    14f2:	81 95       	neg	r24
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	08 95       	ret

000014f8 <__divmodhi4_neg2>:
    14f8:	70 95       	com	r23
    14fa:	61 95       	neg	r22
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255

000014fe <__divmodhi4_exit>:
    14fe:	08 95       	ret

00001500 <__tablejump2__>:
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	05 90       	lpm	r0, Z+
    1506:	f4 91       	lpm	r31, Z
    1508:	e0 2d       	mov	r30, r0
    150a:	09 94       	ijmp

0000150c <__umulhisi3>:
    150c:	a2 9f       	mul	r26, r18
    150e:	b0 01       	movw	r22, r0
    1510:	b3 9f       	mul	r27, r19
    1512:	c0 01       	movw	r24, r0
    1514:	a3 9f       	mul	r26, r19
    1516:	70 0d       	add	r23, r0
    1518:	81 1d       	adc	r24, r1
    151a:	11 24       	eor	r1, r1
    151c:	91 1d       	adc	r25, r1
    151e:	b2 9f       	mul	r27, r18
    1520:	70 0d       	add	r23, r0
    1522:	81 1d       	adc	r24, r1
    1524:	11 24       	eor	r1, r1
    1526:	91 1d       	adc	r25, r1
    1528:	08 95       	ret

0000152a <__udivmodhi4>:
    152a:	aa 1b       	sub	r26, r26
    152c:	bb 1b       	sub	r27, r27
    152e:	51 e1       	ldi	r21, 0x11	; 17
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <__udivmodhi4_ep>

00001532 <__udivmodhi4_loop>:
    1532:	aa 1f       	adc	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	a6 17       	cp	r26, r22
    1538:	b7 07       	cpc	r27, r23
    153a:	10 f0       	brcs	.+4      	; 0x1540 <__udivmodhi4_ep>
    153c:	a6 1b       	sub	r26, r22
    153e:	b7 0b       	sbc	r27, r23

00001540 <__udivmodhi4_ep>:
    1540:	88 1f       	adc	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	5a 95       	dec	r21
    1546:	a9 f7       	brne	.-22     	; 0x1532 <__udivmodhi4_loop>
    1548:	80 95       	com	r24
    154a:	90 95       	com	r25
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	08 95       	ret

00001552 <__subsf3>:
    1552:	50 58       	subi	r21, 0x80	; 128

00001554 <__addsf3>:
    1554:	bb 27       	eor	r27, r27
    1556:	aa 27       	eor	r26, r26
    1558:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__addsf3x>
    155c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_round>
    1560:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_pscA>
    1564:	38 f0       	brcs	.+14     	; 0x1574 <__addsf3+0x20>
    1566:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fp_pscB>
    156a:	20 f0       	brcs	.+8      	; 0x1574 <__addsf3+0x20>
    156c:	39 f4       	brne	.+14     	; 0x157c <__addsf3+0x28>
    156e:	9f 3f       	cpi	r25, 0xFF	; 255
    1570:	19 f4       	brne	.+6      	; 0x1578 <__addsf3+0x24>
    1572:	26 f4       	brtc	.+8      	; 0x157c <__addsf3+0x28>
    1574:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_nan>
    1578:	0e f4       	brtc	.+2      	; 0x157c <__addsf3+0x28>
    157a:	e0 95       	com	r30
    157c:	e7 fb       	bst	r30, 7
    157e:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_inf>

00001582 <__addsf3x>:
    1582:	e9 2f       	mov	r30, r25
    1584:	0e 94 23 0c 	call	0x1846	; 0x1846 <__fp_split3>
    1588:	58 f3       	brcs	.-42     	; 0x1560 <__addsf3+0xc>
    158a:	ba 17       	cp	r27, r26
    158c:	62 07       	cpc	r22, r18
    158e:	73 07       	cpc	r23, r19
    1590:	84 07       	cpc	r24, r20
    1592:	95 07       	cpc	r25, r21
    1594:	20 f0       	brcs	.+8      	; 0x159e <__addsf3x+0x1c>
    1596:	79 f4       	brne	.+30     	; 0x15b6 <__addsf3x+0x34>
    1598:	a6 f5       	brtc	.+104    	; 0x1602 <__addsf3x+0x80>
    159a:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__fp_zero>
    159e:	0e f4       	brtc	.+2      	; 0x15a2 <__addsf3x+0x20>
    15a0:	e0 95       	com	r30
    15a2:	0b 2e       	mov	r0, r27
    15a4:	ba 2f       	mov	r27, r26
    15a6:	a0 2d       	mov	r26, r0
    15a8:	0b 01       	movw	r0, r22
    15aa:	b9 01       	movw	r22, r18
    15ac:	90 01       	movw	r18, r0
    15ae:	0c 01       	movw	r0, r24
    15b0:	ca 01       	movw	r24, r20
    15b2:	a0 01       	movw	r20, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	ff 27       	eor	r31, r31
    15b8:	59 1b       	sub	r21, r25
    15ba:	99 f0       	breq	.+38     	; 0x15e2 <__addsf3x+0x60>
    15bc:	59 3f       	cpi	r21, 0xF9	; 249
    15be:	50 f4       	brcc	.+20     	; 0x15d4 <__addsf3x+0x52>
    15c0:	50 3e       	cpi	r21, 0xE0	; 224
    15c2:	68 f1       	brcs	.+90     	; 0x161e <__addsf3x+0x9c>
    15c4:	1a 16       	cp	r1, r26
    15c6:	f0 40       	sbci	r31, 0x00	; 0
    15c8:	a2 2f       	mov	r26, r18
    15ca:	23 2f       	mov	r18, r19
    15cc:	34 2f       	mov	r19, r20
    15ce:	44 27       	eor	r20, r20
    15d0:	58 5f       	subi	r21, 0xF8	; 248
    15d2:	f3 cf       	rjmp	.-26     	; 0x15ba <__addsf3x+0x38>
    15d4:	46 95       	lsr	r20
    15d6:	37 95       	ror	r19
    15d8:	27 95       	ror	r18
    15da:	a7 95       	ror	r26
    15dc:	f0 40       	sbci	r31, 0x00	; 0
    15de:	53 95       	inc	r21
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__addsf3x+0x52>
    15e2:	7e f4       	brtc	.+30     	; 0x1602 <__addsf3x+0x80>
    15e4:	1f 16       	cp	r1, r31
    15e6:	ba 0b       	sbc	r27, r26
    15e8:	62 0b       	sbc	r22, r18
    15ea:	73 0b       	sbc	r23, r19
    15ec:	84 0b       	sbc	r24, r20
    15ee:	ba f0       	brmi	.+46     	; 0x161e <__addsf3x+0x9c>
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	a1 f0       	breq	.+40     	; 0x161c <__addsf3x+0x9a>
    15f4:	ff 0f       	add	r31, r31
    15f6:	bb 1f       	adc	r27, r27
    15f8:	66 1f       	adc	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	c2 f7       	brpl	.-16     	; 0x15f0 <__addsf3x+0x6e>
    1600:	0e c0       	rjmp	.+28     	; 0x161e <__addsf3x+0x9c>
    1602:	ba 0f       	add	r27, r26
    1604:	62 1f       	adc	r22, r18
    1606:	73 1f       	adc	r23, r19
    1608:	84 1f       	adc	r24, r20
    160a:	48 f4       	brcc	.+18     	; 0x161e <__addsf3x+0x9c>
    160c:	87 95       	ror	r24
    160e:	77 95       	ror	r23
    1610:	67 95       	ror	r22
    1612:	b7 95       	ror	r27
    1614:	f7 95       	ror	r31
    1616:	9e 3f       	cpi	r25, 0xFE	; 254
    1618:	08 f0       	brcs	.+2      	; 0x161c <__addsf3x+0x9a>
    161a:	b0 cf       	rjmp	.-160    	; 0x157c <__addsf3+0x28>
    161c:	93 95       	inc	r25
    161e:	88 0f       	add	r24, r24
    1620:	08 f0       	brcs	.+2      	; 0x1624 <__addsf3x+0xa2>
    1622:	99 27       	eor	r25, r25
    1624:	ee 0f       	add	r30, r30
    1626:	97 95       	ror	r25
    1628:	87 95       	ror	r24
    162a:	08 95       	ret

0000162c <__divsf3>:
    162c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divsf3x>
    1630:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_round>
    1634:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fp_pscB>
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__divsf3+0x24>
    163a:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_pscA>
    163e:	40 f0       	brcs	.+16     	; 0x1650 <__divsf3+0x24>
    1640:	29 f4       	brne	.+10     	; 0x164c <__divsf3+0x20>
    1642:	5f 3f       	cpi	r21, 0xFF	; 255
    1644:	29 f0       	breq	.+10     	; 0x1650 <__divsf3+0x24>
    1646:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_inf>
    164a:	51 11       	cpse	r21, r1
    164c:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_szero>
    1650:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_nan>

00001654 <__divsf3x>:
    1654:	0e 94 23 0c 	call	0x1846	; 0x1846 <__fp_split3>
    1658:	68 f3       	brcs	.-38     	; 0x1634 <__divsf3+0x8>

0000165a <__divsf3_pse>:
    165a:	99 23       	and	r25, r25
    165c:	b1 f3       	breq	.-20     	; 0x164a <__divsf3+0x1e>
    165e:	55 23       	and	r21, r21
    1660:	91 f3       	breq	.-28     	; 0x1646 <__divsf3+0x1a>
    1662:	95 1b       	sub	r25, r21
    1664:	55 0b       	sbc	r21, r21
    1666:	bb 27       	eor	r27, r27
    1668:	aa 27       	eor	r26, r26
    166a:	62 17       	cp	r22, r18
    166c:	73 07       	cpc	r23, r19
    166e:	84 07       	cpc	r24, r20
    1670:	38 f0       	brcs	.+14     	; 0x1680 <__divsf3_pse+0x26>
    1672:	9f 5f       	subi	r25, 0xFF	; 255
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	44 1f       	adc	r20, r20
    167c:	aa 1f       	adc	r26, r26
    167e:	a9 f3       	breq	.-22     	; 0x166a <__divsf3_pse+0x10>
    1680:	35 d0       	rcall	.+106    	; 0x16ec <__divsf3_pse+0x92>
    1682:	0e 2e       	mov	r0, r30
    1684:	3a f0       	brmi	.+14     	; 0x1694 <__divsf3_pse+0x3a>
    1686:	e0 e8       	ldi	r30, 0x80	; 128
    1688:	32 d0       	rcall	.+100    	; 0x16ee <__divsf3_pse+0x94>
    168a:	91 50       	subi	r25, 0x01	; 1
    168c:	50 40       	sbci	r21, 0x00	; 0
    168e:	e6 95       	lsr	r30
    1690:	00 1c       	adc	r0, r0
    1692:	ca f7       	brpl	.-14     	; 0x1686 <__divsf3_pse+0x2c>
    1694:	2b d0       	rcall	.+86     	; 0x16ec <__divsf3_pse+0x92>
    1696:	fe 2f       	mov	r31, r30
    1698:	29 d0       	rcall	.+82     	; 0x16ec <__divsf3_pse+0x92>
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	88 1f       	adc	r24, r24
    16a0:	bb 1f       	adc	r27, r27
    16a2:	26 17       	cp	r18, r22
    16a4:	37 07       	cpc	r19, r23
    16a6:	48 07       	cpc	r20, r24
    16a8:	ab 07       	cpc	r26, r27
    16aa:	b0 e8       	ldi	r27, 0x80	; 128
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <__divsf3_pse+0x56>
    16ae:	bb 0b       	sbc	r27, r27
    16b0:	80 2d       	mov	r24, r0
    16b2:	bf 01       	movw	r22, r30
    16b4:	ff 27       	eor	r31, r31
    16b6:	93 58       	subi	r25, 0x83	; 131
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ba:	3a f0       	brmi	.+14     	; 0x16ca <__divsf3_pse+0x70>
    16bc:	9e 3f       	cpi	r25, 0xFE	; 254
    16be:	51 05       	cpc	r21, r1
    16c0:	78 f0       	brcs	.+30     	; 0x16e0 <__divsf3_pse+0x86>
    16c2:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_inf>
    16c6:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_szero>
    16ca:	5f 3f       	cpi	r21, 0xFF	; 255
    16cc:	e4 f3       	brlt	.-8      	; 0x16c6 <__divsf3_pse+0x6c>
    16ce:	98 3e       	cpi	r25, 0xE8	; 232
    16d0:	d4 f3       	brlt	.-12     	; 0x16c6 <__divsf3_pse+0x6c>
    16d2:	86 95       	lsr	r24
    16d4:	77 95       	ror	r23
    16d6:	67 95       	ror	r22
    16d8:	b7 95       	ror	r27
    16da:	f7 95       	ror	r31
    16dc:	9f 5f       	subi	r25, 0xFF	; 255
    16de:	c9 f7       	brne	.-14     	; 0x16d2 <__divsf3_pse+0x78>
    16e0:	88 0f       	add	r24, r24
    16e2:	91 1d       	adc	r25, r1
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	97 f9       	bld	r25, 7
    16ea:	08 95       	ret
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	66 0f       	add	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	88 1f       	adc	r24, r24
    16f4:	bb 1f       	adc	r27, r27
    16f6:	62 17       	cp	r22, r18
    16f8:	73 07       	cpc	r23, r19
    16fa:	84 07       	cpc	r24, r20
    16fc:	ba 07       	cpc	r27, r26
    16fe:	20 f0       	brcs	.+8      	; 0x1708 <__divsf3_pse+0xae>
    1700:	62 1b       	sub	r22, r18
    1702:	73 0b       	sbc	r23, r19
    1704:	84 0b       	sbc	r24, r20
    1706:	ba 0b       	sbc	r27, r26
    1708:	ee 1f       	adc	r30, r30
    170a:	88 f7       	brcc	.-30     	; 0x16ee <__divsf3_pse+0x94>
    170c:	e0 95       	com	r30
    170e:	08 95       	ret

00001710 <__fixsfsi>:
    1710:	0e 94 8f 0b 	call	0x171e	; 0x171e <__fixunssfsi>
    1714:	68 94       	set
    1716:	b1 11       	cpse	r27, r1
    1718:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_szero>
    171c:	08 95       	ret

0000171e <__fixunssfsi>:
    171e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fp_splitA>
    1722:	88 f0       	brcs	.+34     	; 0x1746 <__fixunssfsi+0x28>
    1724:	9f 57       	subi	r25, 0x7F	; 127
    1726:	98 f0       	brcs	.+38     	; 0x174e <__fixunssfsi+0x30>
    1728:	b9 2f       	mov	r27, r25
    172a:	99 27       	eor	r25, r25
    172c:	b7 51       	subi	r27, 0x17	; 23
    172e:	b0 f0       	brcs	.+44     	; 0x175c <__fixunssfsi+0x3e>
    1730:	e1 f0       	breq	.+56     	; 0x176a <__fixunssfsi+0x4c>
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	88 1f       	adc	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	1a f0       	brmi	.+6      	; 0x1742 <__fixunssfsi+0x24>
    173c:	ba 95       	dec	r27
    173e:	c9 f7       	brne	.-14     	; 0x1732 <__fixunssfsi+0x14>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <__fixunssfsi+0x4c>
    1742:	b1 30       	cpi	r27, 0x01	; 1
    1744:	91 f0       	breq	.+36     	; 0x176a <__fixunssfsi+0x4c>
    1746:	0e 94 45 0c 	call	0x188a	; 0x188a <__fp_zero>
    174a:	b1 e0       	ldi	r27, 0x01	; 1
    174c:	08 95       	ret
    174e:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__fp_zero>
    1752:	67 2f       	mov	r22, r23
    1754:	78 2f       	mov	r23, r24
    1756:	88 27       	eor	r24, r24
    1758:	b8 5f       	subi	r27, 0xF8	; 248
    175a:	39 f0       	breq	.+14     	; 0x176a <__fixunssfsi+0x4c>
    175c:	b9 3f       	cpi	r27, 0xF9	; 249
    175e:	cc f3       	brlt	.-14     	; 0x1752 <__fixunssfsi+0x34>
    1760:	86 95       	lsr	r24
    1762:	77 95       	ror	r23
    1764:	67 95       	ror	r22
    1766:	b3 95       	inc	r27
    1768:	d9 f7       	brne	.-10     	; 0x1760 <__fixunssfsi+0x42>
    176a:	3e f4       	brtc	.+14     	; 0x177a <__fixunssfsi+0x5c>
    176c:	90 95       	com	r25
    176e:	80 95       	com	r24
    1770:	70 95       	com	r23
    1772:	61 95       	neg	r22
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	8f 4f       	sbci	r24, 0xFF	; 255
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	08 95       	ret

0000177c <__floatunsisf>:
    177c:	e8 94       	clt
    177e:	09 c0       	rjmp	.+18     	; 0x1792 <__floatsisf+0x12>

00001780 <__floatsisf>:
    1780:	97 fb       	bst	r25, 7
    1782:	3e f4       	brtc	.+14     	; 0x1792 <__floatsisf+0x12>
    1784:	90 95       	com	r25
    1786:	80 95       	com	r24
    1788:	70 95       	com	r23
    178a:	61 95       	neg	r22
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	8f 4f       	sbci	r24, 0xFF	; 255
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	99 23       	and	r25, r25
    1794:	a9 f0       	breq	.+42     	; 0x17c0 <__floatsisf+0x40>
    1796:	f9 2f       	mov	r31, r25
    1798:	96 e9       	ldi	r25, 0x96	; 150
    179a:	bb 27       	eor	r27, r27
    179c:	93 95       	inc	r25
    179e:	f6 95       	lsr	r31
    17a0:	87 95       	ror	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	f1 11       	cpse	r31, r1
    17aa:	f8 cf       	rjmp	.-16     	; 0x179c <__floatsisf+0x1c>
    17ac:	fa f4       	brpl	.+62     	; 0x17ec <__floatsisf+0x6c>
    17ae:	bb 0f       	add	r27, r27
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <__floatsisf+0x36>
    17b2:	60 ff       	sbrs	r22, 0
    17b4:	1b c0       	rjmp	.+54     	; 0x17ec <__floatsisf+0x6c>
    17b6:	6f 5f       	subi	r22, 0xFF	; 255
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	8f 4f       	sbci	r24, 0xFF	; 255
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	16 c0       	rjmp	.+44     	; 0x17ec <__floatsisf+0x6c>
    17c0:	88 23       	and	r24, r24
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <__floatsisf+0x48>
    17c4:	96 e9       	ldi	r25, 0x96	; 150
    17c6:	11 c0       	rjmp	.+34     	; 0x17ea <__floatsisf+0x6a>
    17c8:	77 23       	and	r23, r23
    17ca:	21 f0       	breq	.+8      	; 0x17d4 <__floatsisf+0x54>
    17cc:	9e e8       	ldi	r25, 0x8E	; 142
    17ce:	87 2f       	mov	r24, r23
    17d0:	76 2f       	mov	r23, r22
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <__floatsisf+0x5e>
    17d4:	66 23       	and	r22, r22
    17d6:	71 f0       	breq	.+28     	; 0x17f4 <__floatsisf+0x74>
    17d8:	96 e8       	ldi	r25, 0x86	; 134
    17da:	86 2f       	mov	r24, r22
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	2a f0       	brmi	.+10     	; 0x17ec <__floatsisf+0x6c>
    17e2:	9a 95       	dec	r25
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	da f7       	brpl	.-10     	; 0x17e2 <__floatsisf+0x62>
    17ec:	88 0f       	add	r24, r24
    17ee:	96 95       	lsr	r25
    17f0:	87 95       	ror	r24
    17f2:	97 f9       	bld	r25, 7
    17f4:	08 95       	ret

000017f6 <__fp_inf>:
    17f6:	97 f9       	bld	r25, 7
    17f8:	9f 67       	ori	r25, 0x7F	; 127
    17fa:	80 e8       	ldi	r24, 0x80	; 128
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	08 95       	ret

00001802 <__fp_nan>:
    1802:	9f ef       	ldi	r25, 0xFF	; 255
    1804:	80 ec       	ldi	r24, 0xC0	; 192
    1806:	08 95       	ret

00001808 <__fp_pscA>:
    1808:	00 24       	eor	r0, r0
    180a:	0a 94       	dec	r0
    180c:	16 16       	cp	r1, r22
    180e:	17 06       	cpc	r1, r23
    1810:	18 06       	cpc	r1, r24
    1812:	09 06       	cpc	r0, r25
    1814:	08 95       	ret

00001816 <__fp_pscB>:
    1816:	00 24       	eor	r0, r0
    1818:	0a 94       	dec	r0
    181a:	12 16       	cp	r1, r18
    181c:	13 06       	cpc	r1, r19
    181e:	14 06       	cpc	r1, r20
    1820:	05 06       	cpc	r0, r21
    1822:	08 95       	ret

00001824 <__fp_round>:
    1824:	09 2e       	mov	r0, r25
    1826:	03 94       	inc	r0
    1828:	00 0c       	add	r0, r0
    182a:	11 f4       	brne	.+4      	; 0x1830 <__fp_round+0xc>
    182c:	88 23       	and	r24, r24
    182e:	52 f0       	brmi	.+20     	; 0x1844 <__fp_round+0x20>
    1830:	bb 0f       	add	r27, r27
    1832:	40 f4       	brcc	.+16     	; 0x1844 <__fp_round+0x20>
    1834:	bf 2b       	or	r27, r31
    1836:	11 f4       	brne	.+4      	; 0x183c <__fp_round+0x18>
    1838:	60 ff       	sbrs	r22, 0
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <__fp_round+0x20>
    183c:	6f 5f       	subi	r22, 0xFF	; 255
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	8f 4f       	sbci	r24, 0xFF	; 255
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	08 95       	ret

00001846 <__fp_split3>:
    1846:	57 fd       	sbrc	r21, 7
    1848:	90 58       	subi	r25, 0x80	; 128
    184a:	44 0f       	add	r20, r20
    184c:	55 1f       	adc	r21, r21
    184e:	59 f0       	breq	.+22     	; 0x1866 <__fp_splitA+0x10>
    1850:	5f 3f       	cpi	r21, 0xFF	; 255
    1852:	71 f0       	breq	.+28     	; 0x1870 <__fp_splitA+0x1a>
    1854:	47 95       	ror	r20

00001856 <__fp_splitA>:
    1856:	88 0f       	add	r24, r24
    1858:	97 fb       	bst	r25, 7
    185a:	99 1f       	adc	r25, r25
    185c:	61 f0       	breq	.+24     	; 0x1876 <__fp_splitA+0x20>
    185e:	9f 3f       	cpi	r25, 0xFF	; 255
    1860:	79 f0       	breq	.+30     	; 0x1880 <__fp_splitA+0x2a>
    1862:	87 95       	ror	r24
    1864:	08 95       	ret
    1866:	12 16       	cp	r1, r18
    1868:	13 06       	cpc	r1, r19
    186a:	14 06       	cpc	r1, r20
    186c:	55 1f       	adc	r21, r21
    186e:	f2 cf       	rjmp	.-28     	; 0x1854 <__fp_split3+0xe>
    1870:	46 95       	lsr	r20
    1872:	f1 df       	rcall	.-30     	; 0x1856 <__fp_splitA>
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <__fp_splitA+0x30>
    1876:	16 16       	cp	r1, r22
    1878:	17 06       	cpc	r1, r23
    187a:	18 06       	cpc	r1, r24
    187c:	99 1f       	adc	r25, r25
    187e:	f1 cf       	rjmp	.-30     	; 0x1862 <__fp_splitA+0xc>
    1880:	86 95       	lsr	r24
    1882:	71 05       	cpc	r23, r1
    1884:	61 05       	cpc	r22, r1
    1886:	08 94       	sec
    1888:	08 95       	ret

0000188a <__fp_zero>:
    188a:	e8 94       	clt

0000188c <__fp_szero>:
    188c:	bb 27       	eor	r27, r27
    188e:	66 27       	eor	r22, r22
    1890:	77 27       	eor	r23, r23
    1892:	cb 01       	movw	r24, r22
    1894:	97 f9       	bld	r25, 7
    1896:	08 95       	ret

00001898 <__mulsf3>:
    1898:	0e 94 5f 0c 	call	0x18be	; 0x18be <__mulsf3x>
    189c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_round>
    18a0:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_pscA>
    18a4:	38 f0       	brcs	.+14     	; 0x18b4 <__mulsf3+0x1c>
    18a6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fp_pscB>
    18aa:	20 f0       	brcs	.+8      	; 0x18b4 <__mulsf3+0x1c>
    18ac:	95 23       	and	r25, r21
    18ae:	11 f0       	breq	.+4      	; 0x18b4 <__mulsf3+0x1c>
    18b0:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_inf>
    18b4:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__fp_nan>
    18b8:	11 24       	eor	r1, r1
    18ba:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_szero>

000018be <__mulsf3x>:
    18be:	0e 94 23 0c 	call	0x1846	; 0x1846 <__fp_split3>
    18c2:	70 f3       	brcs	.-36     	; 0x18a0 <__mulsf3+0x8>

000018c4 <__mulsf3_pse>:
    18c4:	95 9f       	mul	r25, r21
    18c6:	c1 f3       	breq	.-16     	; 0x18b8 <__mulsf3+0x20>
    18c8:	95 0f       	add	r25, r21
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	55 1f       	adc	r21, r21
    18ce:	62 9f       	mul	r22, r18
    18d0:	f0 01       	movw	r30, r0
    18d2:	72 9f       	mul	r23, r18
    18d4:	bb 27       	eor	r27, r27
    18d6:	f0 0d       	add	r31, r0
    18d8:	b1 1d       	adc	r27, r1
    18da:	63 9f       	mul	r22, r19
    18dc:	aa 27       	eor	r26, r26
    18de:	f0 0d       	add	r31, r0
    18e0:	b1 1d       	adc	r27, r1
    18e2:	aa 1f       	adc	r26, r26
    18e4:	64 9f       	mul	r22, r20
    18e6:	66 27       	eor	r22, r22
    18e8:	b0 0d       	add	r27, r0
    18ea:	a1 1d       	adc	r26, r1
    18ec:	66 1f       	adc	r22, r22
    18ee:	82 9f       	mul	r24, r18
    18f0:	22 27       	eor	r18, r18
    18f2:	b0 0d       	add	r27, r0
    18f4:	a1 1d       	adc	r26, r1
    18f6:	62 1f       	adc	r22, r18
    18f8:	73 9f       	mul	r23, r19
    18fa:	b0 0d       	add	r27, r0
    18fc:	a1 1d       	adc	r26, r1
    18fe:	62 1f       	adc	r22, r18
    1900:	83 9f       	mul	r24, r19
    1902:	a0 0d       	add	r26, r0
    1904:	61 1d       	adc	r22, r1
    1906:	22 1f       	adc	r18, r18
    1908:	74 9f       	mul	r23, r20
    190a:	33 27       	eor	r19, r19
    190c:	a0 0d       	add	r26, r0
    190e:	61 1d       	adc	r22, r1
    1910:	23 1f       	adc	r18, r19
    1912:	84 9f       	mul	r24, r20
    1914:	60 0d       	add	r22, r0
    1916:	21 1d       	adc	r18, r1
    1918:	82 2f       	mov	r24, r18
    191a:	76 2f       	mov	r23, r22
    191c:	6a 2f       	mov	r22, r26
    191e:	11 24       	eor	r1, r1
    1920:	9f 57       	subi	r25, 0x7F	; 127
    1922:	50 40       	sbci	r21, 0x00	; 0
    1924:	9a f0       	brmi	.+38     	; 0x194c <__mulsf3_pse+0x88>
    1926:	f1 f0       	breq	.+60     	; 0x1964 <__mulsf3_pse+0xa0>
    1928:	88 23       	and	r24, r24
    192a:	4a f0       	brmi	.+18     	; 0x193e <__mulsf3_pse+0x7a>
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	bb 1f       	adc	r27, r27
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	91 50       	subi	r25, 0x01	; 1
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	a9 f7       	brne	.-22     	; 0x1928 <__mulsf3_pse+0x64>
    193e:	9e 3f       	cpi	r25, 0xFE	; 254
    1940:	51 05       	cpc	r21, r1
    1942:	80 f0       	brcs	.+32     	; 0x1964 <__mulsf3_pse+0xa0>
    1944:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_inf>
    1948:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_szero>
    194c:	5f 3f       	cpi	r21, 0xFF	; 255
    194e:	e4 f3       	brlt	.-8      	; 0x1948 <__mulsf3_pse+0x84>
    1950:	98 3e       	cpi	r25, 0xE8	; 232
    1952:	d4 f3       	brlt	.-12     	; 0x1948 <__mulsf3_pse+0x84>
    1954:	86 95       	lsr	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f7 95       	ror	r31
    195e:	e7 95       	ror	r30
    1960:	9f 5f       	subi	r25, 0xFF	; 255
    1962:	c1 f7       	brne	.-16     	; 0x1954 <__mulsf3_pse+0x90>
    1964:	fe 2b       	or	r31, r30
    1966:	88 0f       	add	r24, r24
    1968:	91 1d       	adc	r25, r1
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	97 f9       	bld	r25, 7
    1970:	08 95       	ret

00001972 <do_rand>:
    1972:	8f 92       	push	r8
    1974:	9f 92       	push	r9
    1976:	af 92       	push	r10
    1978:	bf 92       	push	r11
    197a:	cf 92       	push	r12
    197c:	df 92       	push	r13
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
    1988:	68 81       	ld	r22, Y
    198a:	79 81       	ldd	r23, Y+1	; 0x01
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	61 15       	cp	r22, r1
    1992:	71 05       	cpc	r23, r1
    1994:	81 05       	cpc	r24, r1
    1996:	91 05       	cpc	r25, r1
    1998:	21 f4       	brne	.+8      	; 0x19a2 <do_rand+0x30>
    199a:	64 e2       	ldi	r22, 0x24	; 36
    199c:	79 ed       	ldi	r23, 0xD9	; 217
    199e:	8b e5       	ldi	r24, 0x5B	; 91
    19a0:	97 e0       	ldi	r25, 0x07	; 7
    19a2:	2d e1       	ldi	r18, 0x1D	; 29
    19a4:	33 ef       	ldi	r19, 0xF3	; 243
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__divmodsi4>
    19ae:	49 01       	movw	r8, r18
    19b0:	5a 01       	movw	r10, r20
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	a7 ea       	ldi	r26, 0xA7	; 167
    19b8:	b1 e4       	ldi	r27, 0x41	; 65
    19ba:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__muluhisi3>
    19be:	6b 01       	movw	r12, r22
    19c0:	7c 01       	movw	r14, r24
    19c2:	ac ee       	ldi	r26, 0xEC	; 236
    19c4:	b4 ef       	ldi	r27, 0xF4	; 244
    19c6:	a5 01       	movw	r20, r10
    19c8:	94 01       	movw	r18, r8
    19ca:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__mulohisi3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8c 0d       	add	r24, r12
    19d4:	9d 1d       	adc	r25, r13
    19d6:	ae 1d       	adc	r26, r14
    19d8:	bf 1d       	adc	r27, r15
    19da:	b7 ff       	sbrs	r27, 7
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <do_rand+0x72>
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	a1 09       	sbc	r26, r1
    19e2:	b0 48       	sbci	r27, 0x80	; 128
    19e4:	88 83       	st	Y, r24
    19e6:	99 83       	std	Y+1, r25	; 0x01
    19e8:	aa 83       	std	Y+2, r26	; 0x02
    19ea:	bb 83       	std	Y+3, r27	; 0x03
    19ec:	9f 77       	andi	r25, 0x7F	; 127
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	08 95       	ret

00001a04 <rand_r>:
    1a04:	0e 94 b9 0c 	call	0x1972	; 0x1972 <do_rand>
    1a08:	08 95       	ret

00001a0a <rand>:
    1a0a:	87 e0       	ldi	r24, 0x07	; 7
    1a0c:	91 e0       	ldi	r25, 0x01	; 1
    1a0e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <do_rand>
    1a12:	08 95       	ret

00001a14 <srand>:
    1a14:	a0 e0       	ldi	r26, 0x00	; 0
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	80 93 07 01 	sts	0x0107, r24
    1a1c:	90 93 08 01 	sts	0x0108, r25
    1a20:	a0 93 09 01 	sts	0x0109, r26
    1a24:	b0 93 0a 01 	sts	0x010A, r27
    1a28:	08 95       	ret

00001a2a <eeprom_read_byte>:
    1a2a:	f9 99       	sbic	0x1f, 1	; 31
    1a2c:	fe cf       	rjmp	.-4      	; 0x1a2a <eeprom_read_byte>
    1a2e:	92 bd       	out	0x22, r25	; 34
    1a30:	81 bd       	out	0x21, r24	; 33
    1a32:	f8 9a       	sbi	0x1f, 0	; 31
    1a34:	99 27       	eor	r25, r25
    1a36:	80 b5       	in	r24, 0x20	; 32
    1a38:	08 95       	ret

00001a3a <eeprom_write_byte>:
    1a3a:	26 2f       	mov	r18, r22

00001a3c <eeprom_write_r18>:
    1a3c:	f9 99       	sbic	0x1f, 1	; 31
    1a3e:	fe cf       	rjmp	.-4      	; 0x1a3c <eeprom_write_r18>
    1a40:	1f ba       	out	0x1f, r1	; 31
    1a42:	92 bd       	out	0x22, r25	; 34
    1a44:	81 bd       	out	0x21, r24	; 33
    1a46:	20 bd       	out	0x20, r18	; 32
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	fa 9a       	sbi	0x1f, 2	; 31
    1a4e:	f9 9a       	sbi	0x1f, 1	; 31
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	08 95       	ret

00001a56 <__divmodsi4>:
    1a56:	05 2e       	mov	r0, r21
    1a58:	97 fb       	bst	r25, 7
    1a5a:	1e f4       	brtc	.+6      	; 0x1a62 <__divmodsi4+0xc>
    1a5c:	00 94       	com	r0
    1a5e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__negsi2>
    1a62:	57 fd       	sbrc	r21, 7
    1a64:	07 d0       	rcall	.+14     	; 0x1a74 <__divmodsi4_neg2>
    1a66:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__udivmodsi4>
    1a6a:	07 fc       	sbrc	r0, 7
    1a6c:	03 d0       	rcall	.+6      	; 0x1a74 <__divmodsi4_neg2>
    1a6e:	4e f4       	brtc	.+18     	; 0x1a82 <__divmodsi4_exit>
    1a70:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__negsi2>

00001a74 <__divmodsi4_neg2>:
    1a74:	50 95       	com	r21
    1a76:	40 95       	com	r20
    1a78:	30 95       	com	r19
    1a7a:	21 95       	neg	r18
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a80:	5f 4f       	sbci	r21, 0xFF	; 255

00001a82 <__divmodsi4_exit>:
    1a82:	08 95       	ret

00001a84 <__negsi2>:
    1a84:	90 95       	com	r25
    1a86:	80 95       	com	r24
    1a88:	70 95       	com	r23
    1a8a:	61 95       	neg	r22
    1a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a90:	9f 4f       	sbci	r25, 0xFF	; 255
    1a92:	08 95       	ret

00001a94 <__muluhisi3>:
    1a94:	0e 94 86 0a 	call	0x150c	; 0x150c <__umulhisi3>
    1a98:	a5 9f       	mul	r26, r21
    1a9a:	90 0d       	add	r25, r0
    1a9c:	b4 9f       	mul	r27, r20
    1a9e:	90 0d       	add	r25, r0
    1aa0:	a4 9f       	mul	r26, r20
    1aa2:	80 0d       	add	r24, r0
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	11 24       	eor	r1, r1
    1aa8:	08 95       	ret

00001aaa <__mulshisi3>:
    1aaa:	b7 ff       	sbrs	r27, 7
    1aac:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__muluhisi3>

00001ab0 <__mulohisi3>:
    1ab0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__muluhisi3>
    1ab4:	82 1b       	sub	r24, r18
    1ab6:	93 0b       	sbc	r25, r19
    1ab8:	08 95       	ret

00001aba <__udivmodsi4>:
    1aba:	a1 e2       	ldi	r26, 0x21	; 33
    1abc:	1a 2e       	mov	r1, r26
    1abe:	aa 1b       	sub	r26, r26
    1ac0:	bb 1b       	sub	r27, r27
    1ac2:	fd 01       	movw	r30, r26
    1ac4:	0d c0       	rjmp	.+26     	; 0x1ae0 <__udivmodsi4_ep>

00001ac6 <__udivmodsi4_loop>:
    1ac6:	aa 1f       	adc	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	ee 1f       	adc	r30, r30
    1acc:	ff 1f       	adc	r31, r31
    1ace:	a2 17       	cp	r26, r18
    1ad0:	b3 07       	cpc	r27, r19
    1ad2:	e4 07       	cpc	r30, r20
    1ad4:	f5 07       	cpc	r31, r21
    1ad6:	20 f0       	brcs	.+8      	; 0x1ae0 <__udivmodsi4_ep>
    1ad8:	a2 1b       	sub	r26, r18
    1ada:	b3 0b       	sbc	r27, r19
    1adc:	e4 0b       	sbc	r30, r20
    1ade:	f5 0b       	sbc	r31, r21

00001ae0 <__udivmodsi4_ep>:
    1ae0:	66 1f       	adc	r22, r22
    1ae2:	77 1f       	adc	r23, r23
    1ae4:	88 1f       	adc	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	1a 94       	dec	r1
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <__udivmodsi4_loop>
    1aec:	60 95       	com	r22
    1aee:	70 95       	com	r23
    1af0:	80 95       	com	r24
    1af2:	90 95       	com	r25
    1af4:	9b 01       	movw	r18, r22
    1af6:	ac 01       	movw	r20, r24
    1af8:	bd 01       	movw	r22, r26
    1afa:	cf 01       	movw	r24, r30
    1afc:	08 95       	ret

00001afe <_exit>:
    1afe:	f8 94       	cli

00001b00 <__stop_program>:
    1b00:	ff cf       	rjmp	.-2      	; 0x1b00 <__stop_program>
