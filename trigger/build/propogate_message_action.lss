
build/propogate_message_action.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	2b 03       	fmul	r18, r19
      6a:	a7 03       	fmuls	r18, r23
      6c:	ff 02       	muls	r31, r31
      6e:	f6 02       	muls	r31, r22
      70:	fc 02       	muls	r31, r28
      72:	89 03       	fmulsu	r16, r17
      74:	7e 03       	fmul	r23, r22
      76:	09 0a       	sbc	r0, r25
      78:	e6 08       	sbc	r14, r6
      7a:	e6 08       	sbc	r14, r6
      7c:	06 0a       	sbc	r0, r22
      7e:	12 0a       	sbc	r1, r18
      80:	02 0a       	sbc	r0, r18
      82:	19 0a       	sbc	r1, r25
      84:	15 0a       	sbc	r1, r21
      86:	1d 0a       	sbc	r1, r29
      88:	d5 09       	sbc	r29, r5
      8a:	a7 09       	sbc	r26, r7

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 ef       	ldi	r30, 0xF6	; 246
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 30       	cpi	r26, 0x0E	; 14
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e0       	ldi	r26, 0x0E	; 14
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 38       	cpi	r26, 0x8A	; 138
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 4f 0b 	call	0x169e	; 0x169e <main>
      da:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
//    current_motion = FORWARD;
    //motion = FORWARD;
    /*message.type = NORMAL;
    message.data[0] = state;
    message.crc = message_crc(&message);*/
  last_state_update = kilo_ticks;
      e2:	80 91 4f 01 	lds	r24, 0x014F
      e6:	90 91 50 01 	lds	r25, 0x0150
      ea:	a0 91 51 01 	lds	r26, 0x0151
      ee:	b0 91 52 01 	lds	r27, 0x0152
      f2:	80 93 28 01 	sts	0x0128, r24
      f6:	90 93 29 01 	sts	0x0129, r25
      fa:	a0 93 2a 01 	sts	0x012A, r26
      fe:	b0 93 2b 01 	sts	0x012B, r27
     102:	08 95       	ret

00000104 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
     104:	8c e1       	ldi	r24, 0x1C	; 28
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	08 95       	ret

0000010a <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
     10a:	80 91 0e 01 	lds	r24, 0x010E
     10e:	90 91 0f 01 	lds	r25, 0x010F
     112:	89 2b       	or	r24, r25
     114:	09 f0       	breq	.+2      	; 0x118 <message_rx+0xe>
     116:	08 95       	ret
     118:	cb 01       	movw	r24, r22
    {
        new_message = 1;
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	30 93 0f 01 	sts	0x010F, r19
     122:	20 93 0e 01 	sts	0x010E, r18
        received_message = estimate_distance(d);
     126:	0e 94 25 05 	call	0xa4a	; 0xa4a <estimate_distance>
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	90 93 01 01 	sts	0x0101, r25
     130:	80 93 00 01 	sts	0x0100, r24
     134:	08 95       	ret

00000136 <loop>:
    message.crc = message_crc(&message);*/
  last_state_update = kilo_ticks;
}

void loop()
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 16))
     13a:	40 91 4f 01 	lds	r20, 0x014F
     13e:	50 91 50 01 	lds	r21, 0x0150
     142:	60 91 51 01 	lds	r22, 0x0151
     146:	70 91 52 01 	lds	r23, 0x0152
     14a:	80 91 28 01 	lds	r24, 0x0128
     14e:	90 91 29 01 	lds	r25, 0x0129
     152:	a0 91 2a 01 	lds	r26, 0x012A
     156:	b0 91 2b 01 	lds	r27, 0x012B
     15a:	40 96       	adiw	r24, 0x10	; 16
     15c:	a1 1d       	adc	r26, r1
     15e:	b1 1d       	adc	r27, r1
     160:	84 17       	cp	r24, r20
     162:	95 07       	cpc	r25, r21
     164:	a6 07       	cpc	r26, r22
     166:	b7 07       	cpc	r27, r23
     168:	08 f0       	brcs	.+2      	; 0x16c <loop+0x36>
     16a:	45 c0       	rjmp	.+138    	; 0x1f6 <loop+0xc0>
  {
      last_state_update = kilo_ticks;
     16c:	80 91 4f 01 	lds	r24, 0x014F
     170:	90 91 50 01 	lds	r25, 0x0150
     174:	a0 91 51 01 	lds	r26, 0x0151
     178:	b0 91 52 01 	lds	r27, 0x0152
     17c:	80 93 28 01 	sts	0x0128, r24
     180:	90 93 29 01 	sts	0x0129, r25
     184:	a0 93 2a 01 	sts	0x012A, r26
     188:	b0 93 2b 01 	sts	0x012B, r27
      if (kilo_uid==1){
     18c:	80 91 85 01 	lds	r24, 0x0185
     190:	90 91 86 01 	lds	r25, 0x0186
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	91 05       	cpc	r25, r1
     198:	09 f4       	brne	.+2      	; 0x19c <loop+0x66>
     19a:	71 c0       	rjmp	.+226    	; 0x27e <loop+0x148>
        motion = FORWARD;
            message.type = NORMAL;
            message.data[0] = state;
            message.crc = message_crc(&message);
      }
      else if (new_message == 1){
     19c:	80 91 0e 01 	lds	r24, 0x010E
     1a0:	90 91 0f 01 	lds	r25, 0x010F
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	91 05       	cpc	r25, r1
     1a8:	49 f1       	breq	.+82     	; 0x1fc <loop+0xc6>
              }
         }*/
         new_message = 0;
     }

       if(motion == FORWARD){
     1aa:	c0 91 12 01 	lds	r28, 0x0112
     1ae:	d0 91 13 01 	lds	r29, 0x0113
     1b2:	c1 30       	cpi	r28, 0x01	; 1
     1b4:	d1 05       	cpc	r29, r1
     1b6:	09 f4       	brne	.+2      	; 0x1ba <loop+0x84>
     1b8:	75 c0       	rjmp	.+234    	; 0x2a4 <loop+0x16e>
	      set_color(RGB(0, 1, 0));
       }
       else if(motion == LEFT){
     1ba:	c2 30       	cpi	r28, 0x02	; 2
     1bc:	d1 05       	cpc	r29, r1
     1be:	09 f4       	brne	.+2      	; 0x1c2 <loop+0x8c>
     1c0:	44 c0       	rjmp	.+136    	; 0x24a <loop+0x114>
	      set_color(RGB(1, 0, 0));
       }
       else if(motion == RIGHT){
     1c2:	c3 30       	cpi	r28, 0x03	; 3
     1c4:	d1 05       	cpc	r29, r1
     1c6:	09 f4       	brne	.+2      	; 0x1ca <loop+0x94>
     1c8:	75 c0       	rjmp	.+234    	; 0x2b4 <loop+0x17e>


void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1ca:	80 91 14 01 	lds	r24, 0x0114
     1ce:	90 91 15 01 	lds	r25, 0x0115
     1d2:	8c 17       	cp	r24, r28
     1d4:	9d 07       	cpc	r25, r29
     1d6:	79 f0       	breq	.+30     	; 0x1f6 <loop+0xc0>
    {
        current_motion = new_motion;
     1d8:	d0 93 15 01 	sts	0x0115, r29
     1dc:	c0 93 14 01 	sts	0x0114, r28
        
        if (current_motion == STOP)
     1e0:	20 97       	sbiw	r28, 0x00	; 0
     1e2:	d9 f1       	breq	.+118    	; 0x25a <loop+0x124>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     1e4:	c1 30       	cpi	r28, 0x01	; 1
     1e6:	d1 05       	cpc	r29, r1
     1e8:	09 f4       	brne	.+2      	; 0x1ec <loop+0xb6>
     1ea:	7f c0       	rjmp	.+254    	; 0x2ea <loop+0x1b4>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     1ec:	c2 30       	cpi	r28, 0x02	; 2
     1ee:	d1 05       	cpc	r29, r1
     1f0:	d1 f1       	breq	.+116    	; 0x266 <loop+0x130>
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
     1f2:	23 97       	sbiw	r28, 0x03	; 3
     1f4:	81 f0       	breq	.+32     	; 0x216 <loop+0xe0>
	      set_motors(0, 0);
          }
            
     }*/
  }
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret
            }
            else if(state == 2){
                motion = RIGHT;
            }*/

            if(received_message < 40){
     1fc:	20 91 00 01 	lds	r18, 0x0100
     200:	30 91 01 01 	lds	r19, 0x0101
     204:	28 32       	cpi	r18, 0x28	; 40
     206:	31 05       	cpc	r19, r1
     208:	0c f4       	brge	.+2      	; 0x20c <loop+0xd6>
     20a:	5c c0       	rjmp	.+184    	; 0x2c4 <loop+0x18e>
                  message.type = NORMAL;
                  message.data[0] = FORWARD;
                  message.crc = message_crc(&message);
              }
         }*/
         new_message = 0;
     20c:	10 92 0f 01 	sts	0x010F, r1
     210:	10 92 0e 01 	sts	0x010E, r1
     214:	ca cf       	rjmp	.-108    	; 0x1aa <loop+0x74>
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     216:	80 91 10 01 	lds	r24, 0x0110
     21a:	90 91 11 01 	lds	r25, 0x0111
     21e:	89 2b       	or	r24, r25
     220:	09 f4       	brne	.+2      	; 0x224 <loop+0xee>
     222:	70 c0       	rjmp	.+224    	; 0x304 <loop+0x1ce>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     224:	60 91 75 01 	lds	r22, 0x0175
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 3f 04 	call	0x87e	; 0x87e <set_motors>
            delay(1000);
     22e:	88 ee       	ldi	r24, 0xE8	; 232
     230:	93 e0       	ldi	r25, 0x03	; 3
     232:	0e 94 34 04 	call	0x868	; 0x868 <delay>
                spinup_motors();
     236:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     23a:	60 91 88 01 	lds	r22, 0x0188
     23e:	80 91 87 01 	lds	r24, 0x0187
	      set_motors(0, 0);
          }
            
     }*/
  }
}
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
            if(both_spined == 0)
                spinup_motors();
            set_motors(0, kilo_turn_right);
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     246:	0c 94 3f 04 	jmp	0x87e	; 0x87e <set_motors>

       if(motion == FORWARD){
	      set_color(RGB(0, 1, 0));
       }
       else if(motion == LEFT){
	      set_color(RGB(1, 0, 0));
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <set_color>
     250:	c0 91 12 01 	lds	r28, 0x0112
     254:	d0 91 13 01 	lds	r29, 0x0113
     258:	b8 cf       	rjmp	.-144    	; 0x1ca <loop+0x94>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
	      set_motors(0, 0);
          }
            
     }*/
  }
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     262:	0c 94 3f 04 	jmp	0x87e	; 0x87e <set_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     266:	80 91 10 01 	lds	r24, 0x0110
     26a:	90 91 11 01 	lds	r25, 0x0111
     26e:	89 2b       	or	r24, r25
     270:	11 f4       	brne	.+4      	; 0x276 <loop+0x140>
                spinup_motors();
     272:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	80 91 89 01 	lds	r24, 0x0189
     27c:	d6 cf       	rjmp	.-84     	; 0x22a <loop+0xf4>
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 16))
  {
      last_state_update = kilo_ticks;
      if (kilo_uid==1){
        motion = FORWARD;
     27e:	90 93 13 01 	sts	0x0113, r25
     282:	80 93 12 01 	sts	0x0112, r24
            message.type = NORMAL;
     286:	10 92 25 01 	sts	0x0125, r1
            message.data[0] = state;
     28a:	80 91 16 01 	lds	r24, 0x0116
     28e:	80 93 1c 01 	sts	0x011C, r24
            message.crc = message_crc(&message);
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 b0 0a 	call	0x1560	; 0x1560 <message_crc>
     29a:	90 93 27 01 	sts	0x0127, r25
     29e:	80 93 26 01 	sts	0x0126, r24
     2a2:	83 cf       	rjmp	.-250    	; 0x1aa <loop+0x74>
         }*/
         new_message = 0;
     }

       if(motion == FORWARD){
	      set_color(RGB(0, 1, 0));
     2a4:	84 e0       	ldi	r24, 0x04	; 4
     2a6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <set_color>
     2aa:	c0 91 12 01 	lds	r28, 0x0112
     2ae:	d0 91 13 01 	lds	r29, 0x0113
     2b2:	8b cf       	rjmp	.-234    	; 0x1ca <loop+0x94>
       }
       else if(motion == LEFT){
	      set_color(RGB(1, 0, 0));
       }
       else if(motion == RIGHT){
	      set_color(RGB(0, 0, 1));
     2b4:	80 e1       	ldi	r24, 0x10	; 16
     2b6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <set_color>
     2ba:	c0 91 12 01 	lds	r28, 0x0112
     2be:	d0 91 13 01 	lds	r29, 0x0113
     2c2:	83 cf       	rjmp	.-250    	; 0x1ca <loop+0x94>
            }*/

            if(received_message < 40){
                //state = received_message;
            //}
              motion = FORWARD;
     2c4:	90 93 13 01 	sts	0x0113, r25
     2c8:	80 93 12 01 	sts	0x0112, r24

              message.type = NORMAL;
     2cc:	10 92 25 01 	sts	0x0125, r1
              message.data[0] = state;
     2d0:	80 91 16 01 	lds	r24, 0x0116
     2d4:	80 93 1c 01 	sts	0x011C, r24
              message.crc = message_crc(&message);
     2d8:	8c e1       	ldi	r24, 0x1C	; 28
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <message_crc>
     2e0:	90 93 27 01 	sts	0x0127, r25
     2e4:	80 93 26 01 	sts	0x0126, r24
     2e8:	91 cf       	rjmp	.-222    	; 0x20c <loop+0xd6>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2ea:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2ee:	60 91 88 01 	lds	r22, 0x0188
     2f2:	80 91 87 01 	lds	r24, 0x0187
     2f6:	0e 94 3f 04 	call	0x87e	; 0x87e <set_motors>
            both_spined = 1;
     2fa:	d0 93 11 01 	sts	0x0111, r29
     2fe:	c0 93 10 01 	sts	0x0110, r28
     302:	79 cf       	rjmp	.-270    	; 0x1f6 <loop+0xc0>
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     304:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
     308:	8d cf       	rjmp	.-230    	; 0x224 <loop+0xee>

0000030a <set_motion>:
int new_message = 0;
message_t message;


void set_motion(int new_motion)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     30e:	20 91 14 01 	lds	r18, 0x0114
     312:	30 91 15 01 	lds	r19, 0x0115
     316:	28 17       	cp	r18, r24
     318:	39 07       	cpc	r19, r25
     31a:	79 f0       	breq	.+30     	; 0x33a <set_motion+0x30>
    {
        current_motion = new_motion;
     31c:	90 93 15 01 	sts	0x0115, r25
     320:	80 93 14 01 	sts	0x0114, r24
        
        if (current_motion == STOP)
     324:	00 97       	sbiw	r24, 0x00	; 0
     326:	89 f1       	breq	.+98     	; 0x38a <set_motion+0x80>
     328:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	91 05       	cpc	r25, r1
     32e:	99 f1       	breq	.+102    	; 0x396 <set_motion+0x8c>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	91 05       	cpc	r25, r1
     334:	29 f0       	breq	.+10     	; 0x340 <set_motion+0x36>
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
     336:	03 97       	sbiw	r24, 0x03	; 3
     338:	f1 f0       	breq	.+60     	; 0x376 <set_motion+0x6c>
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
    }
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     340:	80 91 10 01 	lds	r24, 0x0110
     344:	90 91 11 01 	lds	r25, 0x0111
     348:	89 2b       	or	r24, r25
     34a:	11 f4       	brne	.+4      	; 0x350 <set_motion+0x46>
                spinup_motors();
     34c:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	80 91 89 01 	lds	r24, 0x0189
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
            set_motors(0, kilo_turn_right);
     356:	0e 94 3f 04 	call	0x87e	; 0x87e <set_motors>
            delay(1000);
     35a:	88 ee       	ldi	r24, 0xE8	; 232
     35c:	93 e0       	ldi	r25, 0x03	; 3
     35e:	0e 94 34 04 	call	0x868	; 0x868 <delay>
                spinup_motors();
     362:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     366:	60 91 88 01 	lds	r22, 0x0188
     36a:	80 91 87 01 	lds	r24, 0x0187
 //           both_spined = 0;
        }
    }
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
            if(both_spined == 0)
                spinup_motors();
            set_motors(0, kilo_turn_right);
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     372:	0c 94 3f 04 	jmp	0x87e	; 0x87e <set_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     376:	80 91 10 01 	lds	r24, 0x0110
     37a:	90 91 11 01 	lds	r25, 0x0111
     37e:	89 2b       	or	r24, r25
     380:	b9 f0       	breq	.+46     	; 0x3b0 <set_motion+0xa6>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     382:	60 91 75 01 	lds	r22, 0x0175
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	e6 cf       	rjmp	.-52     	; 0x356 <set_motion+0x4c>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
    }
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     392:	0c 94 3f 04 	jmp	0x87e	; 0x87e <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     396:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     39a:	60 91 88 01 	lds	r22, 0x0188
     39e:	80 91 87 01 	lds	r24, 0x0187
     3a2:	0e 94 3f 04 	call	0x87e	; 0x87e <set_motors>
            both_spined = 1;
     3a6:	d0 93 11 01 	sts	0x0111, r29
     3aa:	c0 93 10 01 	sts	0x0110, r28
     3ae:	c5 cf       	rjmp	.-118    	; 0x33a <set_motion+0x30>
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     3b0:	0e 94 44 04 	call	0x888	; 0x888 <spinup_motors>
     3b4:	e6 cf       	rjmp	.-52     	; 0x382 <set_motion+0x78>

000003b6 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     3b6:	08 95       	ret

000003b8 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	08 95       	ret

000003be <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     3be:	08 95       	ret

000003c0 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
    cli();
     3ce:	f8 94       	cli

    ports_off();
     3d0:	14 b8       	out	0x04, r1	; 4
     3d2:	17 b8       	out	0x07, r1	; 7
     3d4:	1a b8       	out	0x0a, r1	; 10
     3d6:	15 b8       	out	0x05, r1	; 5
     3d8:	18 b8       	out	0x08, r1	; 8
     3da:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     3dc:	52 9a       	sbi	0x0a, 2	; 10
     3de:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     3e0:	14 bc       	out	0x24, r1	; 36
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	85 bd       	out	0x25, r24	; 37
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	87 bd       	out	0x27, r24	; 39
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     3f0:	10 92 80 00 	sts	0x0080, r1
     3f4:	10 92 81 00 	sts	0x0081, r1
     3f8:	2f e8       	ldi	r18, 0x8F	; 143
     3fa:	3b e0       	ldi	r19, 0x0B	; 11
     3fc:	30 93 89 00 	sts	0x0089, r19
     400:	20 93 88 00 	sts	0x0088, r18
     404:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     408:	53 98       	cbi	0x0a, 3	; 10
     40a:	23 98       	cbi	0x04, 3	; 4
     40c:	91 ea       	ldi	r25, 0xA1	; 161
     40e:	90 93 b0 00 	sts	0x00B0, r25
     412:	80 93 b1 00 	sts	0x00B1, r24
     416:	10 92 b4 00 	sts	0x00B4, r1
     41a:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     41e:	8b e0       	ldi	r24, 0x0B	; 11
     420:	80 bf       	out	0x30, r24	; 48
     422:	83 e0       	ldi	r24, 0x03	; 3
     424:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     428:	86 e0       	ldi	r24, 0x06	; 6
     42a:	80 93 7c 00 	sts	0x007C, r24
     42e:	83 e8       	ldi	r24, 0x83	; 131
     430:	80 93 7a 00 	sts	0x007A, r24
     434:	80 91 7a 00 	lds	r24, 0x007A
     438:	80 64       	ori	r24, 0x40	; 64
     43a:	80 93 7a 00 	sts	0x007A, r24
     43e:	80 91 7a 00 	lds	r24, 0x007A
     442:	86 fd       	sbrc	r24, 6
     444:	fc cf       	rjmp	.-8      	; 0x43e <kilo_init+0x7e>
    adc_trigger_high_gain();
     446:	10 92 7c 00 	sts	0x007C, r1
     44a:	83 ea       	ldi	r24, 0xA3	; 163
     44c:	80 93 7a 00 	sts	0x007A, r24
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
    if (osccal != 0xFF)
     45e:	8f 3f       	cpi	r24, 0xFF	; 255
     460:	11 f0       	breq	.+4      	; 0x466 <kilo_init+0xa6>
        OSCCAL = osccal;
     462:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     466:	10 92 53 01 	sts	0x0153, r1
    rx_leadingbit = 1;
     46a:	c1 e0       	ldi	r28, 0x01	; 1
     46c:	c0 93 2c 01 	sts	0x012C, r28
    rx_leadingbyte = 1;
     470:	c0 93 70 01 	sts	0x0170, r28
    rx_byteindex = 0;
     474:	10 92 4a 01 	sts	0x014A, r1
    rx_bytevalue = 0;
     478:	10 92 84 01 	sts	0x0184, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     47c:	80 e9       	ldi	r24, 0x90	; 144
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     484:	80 93 49 01 	sts	0x0149, r24
    if (tx_mask & ~TX_MASK_MAX)
     488:	80 91 49 01 	lds	r24, 0x0149
     48c:	88 73       	andi	r24, 0x38	; 56
     48e:	11 f0       	breq	.+4      	; 0x494 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     490:	c0 93 49 01 	sts	0x0149, r28
    tx_clock = 0;
     494:	10 92 74 01 	sts	0x0174, r1
     498:	10 92 73 01 	sts	0x0173, r1
    tx_increment = 255;
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 72 01 	sts	0x0172, r25
     4a4:	80 93 71 01 	sts	0x0171, r24
    kilo_ticks = 0;
     4a8:	10 92 4f 01 	sts	0x014F, r1
     4ac:	10 92 50 01 	sts	0x0150, r1
     4b0:	10 92 51 01 	sts	0x0151, r1
     4b4:	10 92 52 01 	sts	0x0152, r1
    kilo_state = IDLE;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 1b 01 	sts	0x011B, r24
    kilo_tx_period = 3906;
     4be:	82 e4       	ldi	r24, 0x42	; 66
     4c0:	9f e0       	ldi	r25, 0x0F	; 15
     4c2:	90 93 83 01 	sts	0x0183, r25
     4c6:	80 93 82 01 	sts	0x0182, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     4ca:	80 eb       	ldi	r24, 0xB0	; 176
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     4d2:	c8 2f       	mov	r28, r24
     4d4:	81 eb       	ldi	r24, 0xB1	; 177
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     4dc:	2c 2f       	mov	r18, r28
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	38 2b       	or	r19, r24
     4e2:	30 93 86 01 	sts	0x0186, r19
     4e6:	20 93 85 01 	sts	0x0185, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     4f2:	80 93 89 01 	sts	0x0189, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     4f6:	89 e0       	ldi	r24, 0x09	; 9
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     4fe:	80 93 75 01 	sts	0x0175, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     502:	8c e0       	ldi	r24, 0x0C	; 12
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     50a:	80 93 87 01 	sts	0x0187, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     50e:	84 e1       	ldi	r24, 0x14	; 20
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     516:	80 93 88 01 	sts	0x0188, r24
     51a:	54 e5       	ldi	r21, 0x54	; 84
     51c:	e5 2e       	mov	r14, r21
     51e:	51 e0       	ldi	r21, 0x01	; 1
     520:	f5 2e       	mov	r15, r21
     522:	0d e2       	ldi	r16, 0x2D	; 45
     524:	11 e0       	ldi	r17, 0x01	; 1
     526:	c0 e2       	ldi	r28, 0x20	; 32
     528:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     530:	d8 2e       	mov	r13, r24
     532:	ce 01       	movw	r24, r28
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     53a:	2d 2d       	mov	r18, r13
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	32 2f       	mov	r19, r18
     540:	22 27       	eor	r18, r18
     542:	28 2b       	or	r18, r24
     544:	f7 01       	movw	r30, r14
     546:	21 93       	st	Z+, r18
     548:	31 93       	st	Z+, r19
     54a:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     54c:	ce 01       	movw	r24, r28
     54e:	c0 96       	adiw	r24, 0x30	; 48
     550:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     554:	d8 2e       	mov	r13, r24
     556:	ce 01       	movw	r24, r28
     558:	c1 96       	adiw	r24, 0x31	; 49
     55a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <eeprom_read_byte>
     55e:	2d 2d       	mov	r18, r13
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	32 2f       	mov	r19, r18
     564:	22 27       	eor	r18, r18
     566:	28 2b       	or	r18, r24
     568:	f8 01       	movw	r30, r16
     56a:	21 93       	st	Z+, r18
     56c:	31 93       	st	Z+, r19
     56e:	8f 01       	movw	r16, r30
     570:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     572:	cc 33       	cpi	r28, 0x3C	; 60
     574:	d1 05       	cpc	r29, r1
     576:	c9 f6       	brne	.-78     	; 0x52a <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     578:	78 94       	sei
}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	08 95       	ret

0000058a <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	8f 93       	push	r24
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	a8 95       	wdr
     59c:	80 91 60 00 	lds	r24, 0x0060
     5a0:	88 61       	ori	r24, 0x18	; 24
     5a2:	80 93 60 00 	sts	0x0060, r24
     5a6:	10 92 60 00 	sts	0x0060, r1
     5aa:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5ac:	8f 91       	pop	r24
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     5b8:	3c 01       	movw	r6, r24
     5ba:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     5bc:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     5be:	99 24       	eor	r9, r9
     5c0:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     5c6:	96 e0       	ldi	r25, 0x06	; 6
     5c8:	a9 2e       	mov	r10, r25
     5ca:	23 e8       	ldi	r18, 0x83	; 131
     5cc:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     5ce:	38 e1       	ldi	r19, 0x18	; 24
     5d0:	d3 2e       	mov	r13, r19
     5d2:	49 e2       	ldi	r20, 0x29	; 41
     5d4:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     5d6:	90 91 1b 01 	lds	r25, 0x011B
     5da:	e9 2f       	mov	r30, r25
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	e7 30       	cpi	r30, 0x07	; 7
     5e0:	f1 05       	cpc	r31, r1
     5e2:	c8 f7       	brcc	.-14     	; 0x5d6 <kilo_start+0x1e>
     5e4:	ec 5c       	subi	r30, 0xCC	; 204
     5e6:	ff 4f       	sbci	r31, 0xFF	; 255
     5e8:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     5ec:	11 23       	and	r17, r17
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <kilo_start+0x3a>
     5f0:	fc c0       	rjmp	.+504    	; 0x7ea <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5f2:	c0 92 1b 01 	sts	0x011B, r12
     5f6:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     5f8:	fe 01       	movw	r30, r28
     5fa:	09 95       	icall
                break;
     5fc:	ec cf       	rjmp	.-40     	; 0x5d6 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     5fe:	80 91 53 01 	lds	r24, 0x0153
     602:	81 11       	cpse	r24, r1
     604:	eb c0       	rjmp	.+470    	; 0x7dc <kilo_start+0x224>
        cli();                                    // disable interrupts
     606:	f8 94       	cli
        adc_setup_conversion(6);
     608:	a0 92 7c 00 	sts	0x007C, r10
     60c:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     610:	80 91 7a 00 	lds	r24, 0x007A
     614:	80 64       	ori	r24, 0x40	; 64
     616:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     61a:	90 91 7a 00 	lds	r25, 0x007A
     61e:	96 fd       	sbrc	r25, 6
     620:	fc cf       	rjmp	.-8      	; 0x61a <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     622:	80 91 78 00 	lds	r24, 0x0078
     626:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     62a:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     62c:	8b 3a       	cpi	r24, 0xAB	; 171
     62e:	e2 e0       	ldi	r30, 0x02	; 2
     630:	9e 07       	cpc	r25, r30
     632:	0c f0       	brlt	.+2      	; 0x636 <kilo_start+0x7e>
     634:	ed c0       	rjmp	.+474    	; 0x810 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     636:	89 38       	cpi	r24, 0x89	; 137
     638:	f2 e0       	ldi	r31, 0x02	; 2
     63a:	9f 07       	cpc	r25, r31
     63c:	0c f0       	brlt	.+2      	; 0x640 <kilo_start+0x88>
     63e:	ef c0       	rjmp	.+478    	; 0x81e <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     640:	87 36       	cpi	r24, 0x67	; 103
     642:	92 40       	sbci	r25, 0x02	; 2
     644:	0c f4       	brge	.+2      	; 0x648 <kilo_start+0x90>
     646:	ca c0       	rjmp	.+404    	; 0x7dc <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     648:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     64a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     64c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     64e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     650:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     652:	3c 98       	cbi	0x07, 4	; 7
     654:	c0 cf       	rjmp	.-128    	; 0x5d6 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     656:	f8 94       	cli
                acomp_off();
     658:	80 b7       	in	r24, 0x30	; 48
     65a:	87 7f       	andi	r24, 0xF7	; 247
     65c:	80 bf       	out	0x30, r24	; 48
                adc_off();
     65e:	80 91 7a 00 	lds	r24, 0x007A
     662:	8f 77       	andi	r24, 0x7F	; 127
     664:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     668:	14 b8       	out	0x04, r1	; 4
     66a:	17 b8       	out	0x07, r1	; 7
     66c:	1a b8       	out	0x0a, r1	; 10
     66e:	15 b8       	out	0x05, r1	; 5
     670:	18 b8       	out	0x08, r1	; 8
     672:	1b b8       	out	0x0b, r1	; 11
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	a8 95       	wdr
     67a:	d0 92 60 00 	sts	0x0060, r13
     67e:	0f be       	out	0x3f, r0	; 63
     680:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     684:	80 91 60 00 	lds	r24, 0x0060
     688:	80 64       	ori	r24, 0x40	; 64
     68a:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     68e:	93 b7       	in	r25, 0x33	; 51
     690:	91 7f       	andi	r25, 0xF1	; 241
     692:	94 60       	ori	r25, 0x04	; 4
     694:	93 bf       	out	0x33, r25	; 51
                cli();
     696:	f8 94       	cli
                sleep_enable();
     698:	83 b7       	in	r24, 0x33	; 51
     69a:	81 60       	ori	r24, 0x01	; 1
     69c:	83 bf       	out	0x33, r24	; 51
                sei();
     69e:	78 94       	sei
                sleep_cpu();
     6a0:	88 95       	sleep
                sleep_disable();
     6a2:	83 b7       	in	r24, 0x33	; 51
     6a4:	8e 7f       	andi	r24, 0xFE	; 254
     6a6:	83 bf       	out	0x33, r24	; 51
                sei();
     6a8:	78 94       	sei
                rx_busy = 0;
     6aa:	10 92 53 01 	sts	0x0153, r1
                ports_on();
     6ae:	52 9a       	sbi	0x0a, 2	; 10
     6b0:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     6b2:	80 91 7a 00 	lds	r24, 0x007A
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6bc:	87 e5       	ldi	r24, 0x57	; 87
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <kilo_start+0x108>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <kilo_start+0x10e>
     6c6:	00 00       	nop
                _delay_us(300);
                acomp_on();
     6c8:	80 b7       	in	r24, 0x30	; 48
     6ca:	88 61       	ori	r24, 0x18	; 24
     6cc:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6ce:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6d0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6d2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6d4:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     6d6:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     6d8:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6da:	ef e1       	ldi	r30, 0x1F	; 31
     6dc:	fe e4       	ldi	r31, 0x4E	; 78
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <kilo_start+0x126>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <kilo_start+0x12c>
     6e4:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     6e6:	80 91 53 01 	lds	r24, 0x0153
     6ea:	81 11       	cpse	r24, r1
     6ec:	81 c0       	rjmp	.+258    	; 0x7f0 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6ee:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6f0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6f2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6f4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6f6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6f8:	3c 98       	cbi	0x07, 4	; 7
     6fa:	6d cf       	rjmp	.-294    	; 0x5d6 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     6fc:	80 91 19 01 	lds	r24, 0x0119
     700:	81 11       	cpse	r24, r1
     702:	41 c0       	rjmp	.+130    	; 0x786 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     704:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     708:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     70c:	10 92 1a 01 	sts	0x011A, r1
     710:	62 cf       	rjmp	.-316    	; 0x5d6 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     712:	48 99       	sbic	0x09, 0	; 9
     714:	ec cf       	rjmp	.-40     	; 0x6ee <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     716:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     718:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     71a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     71c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     71e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     720:	3c 98       	cbi	0x07, 4	; 7
     722:	8f ec       	ldi	r24, 0xCF	; 207
     724:	97 e0       	ldi	r25, 0x07	; 7
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <kilo_start+0x16e>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <kilo_start+0x174>
     72c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     72e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     730:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     732:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     734:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     736:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     738:	3c 98       	cbi	0x07, 4	; 7
     73a:	9f ef       	ldi	r25, 0xFF	; 255
     73c:	e1 ee       	ldi	r30, 0xE1	; 225
     73e:	f4 e0       	ldi	r31, 0x04	; 4
     740:	91 50       	subi	r25, 0x01	; 1
     742:	e0 40       	sbci	r30, 0x00	; 0
     744:	f0 40       	sbci	r31, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <kilo_start+0x188>
     748:	00 c0       	rjmp	.+0      	; 0x74a <kilo_start+0x192>
     74a:	00 00       	nop
     74c:	44 cf       	rjmp	.-376    	; 0x5d6 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     74e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     750:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     752:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     754:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     756:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     758:	3c 98       	cbi	0x07, 4	; 7
     75a:	ef ec       	ldi	r30, 0xCF	; 207
     75c:	f7 e0       	ldi	r31, 0x07	; 7
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <kilo_start+0x1a6>
     762:	00 c0       	rjmp	.+0      	; 0x764 <kilo_start+0x1ac>
     764:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     766:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     768:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     76a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     76c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     76e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     770:	3c 98       	cbi	0x07, 4	; 7
     772:	ff ef       	ldi	r31, 0xFF	; 255
     774:	21 ee       	ldi	r18, 0xE1	; 225
     776:	84 e0       	ldi	r24, 0x04	; 4
     778:	f1 50       	subi	r31, 0x01	; 1
     77a:	20 40       	sbci	r18, 0x00	; 0
     77c:	80 40       	sbci	r24, 0x00	; 0
     77e:	e1 f7       	brne	.-8      	; 0x778 <kilo_start+0x1c0>
     780:	00 c0       	rjmp	.+0      	; 0x782 <kilo_start+0x1ca>
     782:	00 00       	nop
     784:	28 cf       	rjmp	.-432    	; 0x5d6 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     786:	90 91 19 01 	lds	r25, 0x0119
     78a:	80 91 1a 01 	lds	r24, 0x011A
     78e:	98 17       	cp	r25, r24
     790:	09 f4       	brne	.+2      	; 0x794 <kilo_start+0x1dc>
     792:	21 cf       	rjmp	.-446    	; 0x5d6 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     794:	80 91 19 01 	lds	r24, 0x0119
     798:	80 93 1a 01 	sts	0x011A, r24
                        if (cur_motion == MOVE_LEFT) {
     79c:	80 91 19 01 	lds	r24, 0x0119
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <kilo_start+0x1ee>
     7a4:	50 c0       	rjmp	.+160    	; 0x846 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7a6:	80 91 19 01 	lds	r24, 0x0119
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7aa:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7ae:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	d9 f1       	breq	.+118    	; 0x82c <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7b6:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     7ba:	90 92 b4 00 	sts	0x00B4, r9
     7be:	8f e2       	ldi	r24, 0x2F	; 47
     7c0:	95 e7       	ldi	r25, 0x75	; 117
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <kilo_start+0x20a>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <kilo_start+0x210>
     7c8:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     7ca:	80 91 88 01 	lds	r24, 0x0188
     7ce:	90 91 87 01 	lds	r25, 0x0187
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7d2:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     7d6:	80 93 b4 00 	sts	0x00B4, r24
     7da:	fd ce       	rjmp	.-518    	; 0x5d6 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7dc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7de:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7e4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7e6:	3c 98       	cbi	0x07, 4	; 7
     7e8:	f6 ce       	rjmp	.-532    	; 0x5d6 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     7ea:	f3 01       	movw	r30, r6
     7ec:	09 95       	icall
     7ee:	01 cf       	rjmp	.-510    	; 0x5f2 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7f0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7f2:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7f4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7f6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7f8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7fa:	3c 98       	cbi	0x07, 4	; 7
     7fc:	ff ef       	ldi	r31, 0xFF	; 255
     7fe:	20 e7       	ldi	r18, 0x70	; 112
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	f1 50       	subi	r31, 0x01	; 1
     804:	20 40       	sbci	r18, 0x00	; 0
     806:	80 40       	sbci	r24, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <kilo_start+0x24a>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <kilo_start+0x254>
     80c:	00 00       	nop
     80e:	6f cf       	rjmp	.-290    	; 0x6ee <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     810:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     812:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     814:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     816:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     818:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     81a:	3c 98       	cbi	0x07, 4	; 7
     81c:	dc ce       	rjmp	.-584    	; 0x5d6 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     81e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     820:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     822:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     824:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     826:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     828:	3c 9a       	sbi	0x07, 4	; 7
     82a:	d5 ce       	rjmp	.-598    	; 0x5d6 <kilo_start+0x1e>
     82c:	ef e2       	ldi	r30, 0x2F	; 47
     82e:	f5 e7       	ldi	r31, 0x75	; 117
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <kilo_start+0x278>
     834:	00 c0       	rjmp	.+0      	; 0x836 <kilo_start+0x27e>
     836:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     838:	80 91 75 01 	lds	r24, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     83c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     840:	80 93 b4 00 	sts	0x00B4, r24
     844:	c8 ce       	rjmp	.-624    	; 0x5d6 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     846:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     84a:	10 92 b4 00 	sts	0x00B4, r1
     84e:	8f e2       	ldi	r24, 0x2F	; 47
     850:	95 e7       	ldi	r25, 0x75	; 117
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <kilo_start+0x29a>
     856:	00 c0       	rjmp	.+0      	; 0x858 <kilo_start+0x2a0>
     858:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     85a:	80 91 89 01 	lds	r24, 0x0189
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     85e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     862:	10 92 b4 00 	sts	0x00B4, r1
     866:	b7 ce       	rjmp	.-658    	; 0x5d6 <kilo_start+0x1e>

00000868 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     868:	07 c0       	rjmp	.+14     	; 0x878 <delay+0x10>
     86a:	ef ec       	ldi	r30, 0xCF	; 207
     86c:	f7 e0       	ldi	r31, 0x07	; 7
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <delay+0x6>
     872:	00 c0       	rjmp	.+0      	; 0x874 <delay+0xc>
     874:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     876:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	b9 f7       	brne	.-18     	; 0x86a <delay+0x2>
     87c:	08 95       	ret

0000087e <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     87e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     882:	60 93 b4 00 	sts	0x00B4, r22
     886:	08 95       	ret

00000888 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     88e:	80 93 b4 00 	sts	0x00B4, r24
     892:	8f e0       	ldi	r24, 0x0F	; 15
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	ef ec       	ldi	r30, 0xCF	; 207
     898:	f7 e0       	ldi	r31, 0x07	; 7
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <spinup_motors+0x12>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <spinup_motors+0x18>
     8a0:	00 00       	nop
     8a2:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8a4:	c1 f7       	brne	.-16     	; 0x896 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     8a6:	08 95       	ret

000008a8 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     8a8:	80 91 53 01 	lds	r24, 0x0153
     8ac:	81 11       	cpse	r24, r1
     8ae:	1e c0       	rjmp	.+60     	; 0x8ec <get_ambientlight+0x44>
        cli();
     8b0:	f8 94       	cli
        adc_setup_conversion(7);
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	80 93 7c 00 	sts	0x007C, r24
     8b8:	83 e8       	ldi	r24, 0x83	; 131
     8ba:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8be:	80 91 7a 00 	lds	r24, 0x007A
     8c2:	80 64       	ori	r24, 0x40	; 64
     8c4:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8c8:	80 91 7a 00 	lds	r24, 0x007A
     8cc:	86 fd       	sbrc	r24, 6
     8ce:	fc cf       	rjmp	.-8      	; 0x8c8 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     8d0:	80 91 78 00 	lds	r24, 0x0078
     8d4:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8d8:	10 92 7c 00 	sts	0x007C, r1
     8dc:	23 ea       	ldi	r18, 0xA3	; 163
     8de:	20 93 7a 00 	sts	0x007A, r18
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8e8:	78 94       	sei
     8ea:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     8f0:	08 95       	ret

000008f2 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     8f2:	80 91 53 01 	lds	r24, 0x0153
     8f6:	81 11       	cpse	r24, r1
     8f8:	1e c0       	rjmp	.+60     	; 0x936 <__stack+0x37>
        cli();
     8fa:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     8fc:	88 ec       	ldi	r24, 0xC8	; 200
     8fe:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     902:	87 e8       	ldi	r24, 0x87	; 135
     904:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     908:	80 91 7a 00 	lds	r24, 0x007A
     90c:	80 64       	ori	r24, 0x40	; 64
     90e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     912:	80 91 7a 00 	lds	r24, 0x007A
     916:	86 fd       	sbrc	r24, 6
     918:	fc cf       	rjmp	.-8      	; 0x912 <__stack+0x13>
        temp = ADCW;                             // store AD result
     91a:	80 91 78 00 	lds	r24, 0x0078
     91e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     922:	10 92 7c 00 	sts	0x007C, r1
     926:	23 ea       	ldi	r18, 0xA3	; 163
     928:	20 93 7a 00 	sts	0x007A, r18
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     932:	78 94       	sei
     934:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     93a:	08 95       	ret

0000093c <rand_hard>:

uint8_t rand_hard() {
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	e0 e0       	ldi	r30, 0x00	; 0
     946:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     948:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     94a:	03 ea       	ldi	r16, 0xA3	; 163
     94c:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     94e:	d6 e0       	ldi	r29, 0x06	; 6
     950:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     952:	a1 e0       	ldi	r26, 0x01	; 1
     954:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     956:	60 e8       	ldi	r22, 0x80	; 128
     958:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     95a:	f8 94       	cli
            adc_setup_conversion(6);
     95c:	d0 93 7c 00 	sts	0x007C, r29
     960:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     964:	90 91 7a 00 	lds	r25, 0x007A
     968:	90 64       	ori	r25, 0x40	; 64
     96a:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     96e:	90 91 7a 00 	lds	r25, 0x007A
     972:	96 fd       	sbrc	r25, 6
     974:	fc cf       	rjmp	.-8      	; 0x96e <rand_hard+0x32>
            a = ADCW&0x1;
     976:	20 91 78 00 	lds	r18, 0x0078
     97a:	30 91 79 00 	lds	r19, 0x0079
     97e:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     980:	90 91 7a 00 	lds	r25, 0x007A
     984:	90 64       	ori	r25, 0x40	; 64
     986:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     98a:	90 91 7a 00 	lds	r25, 0x007A
     98e:	96 fd       	sbrc	r25, 6
     990:	fc cf       	rjmp	.-8      	; 0x98a <rand_hard+0x4e>
            b = ADCW&0x1;
     992:	40 91 78 00 	lds	r20, 0x0078
     996:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     99a:	10 92 7c 00 	sts	0x007C, r1
     99e:	00 93 7a 00 	sts	0x007A, r16
     9a2:	10 93 7b 00 	sts	0x007B, r17
            sei();
     9a6:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     9a8:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     9aa:	24 13       	cpse	r18, r20
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <rand_hard+0x78>
     9ae:	61 50       	subi	r22, 0x01	; 1
     9b0:	71 09       	sbc	r23, r1
     9b2:	99 f6       	brne	.-90     	; 0x95a <rand_hard+0x1e>
        if (a)
     9b4:	22 23       	and	r18, r18
     9b6:	39 f0       	breq	.+14     	; 0x9c6 <rand_hard+0x8a>
            num |= (1<<i);
     9b8:	9d 01       	movw	r18, r26
     9ba:	0e 2e       	mov	r0, r30
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <rand_hard+0x84>
     9be:	22 0f       	add	r18, r18
     9c0:	0a 94       	dec	r0
     9c2:	ea f7       	brpl	.-6      	; 0x9be <rand_hard+0x82>
     9c4:	82 2b       	or	r24, r18
     9c6:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     9c8:	e8 30       	cpi	r30, 0x08	; 8
     9ca:	f1 05       	cpc	r31, r1
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <rand_hard+0x94>
     9ce:	c3 cf       	rjmp	.-122    	; 0x956 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     9da:	80 91 02 01 	lds	r24, 0x0102
     9de:	98 2f       	mov	r25, r24
     9e0:	99 0f       	add	r25, r25
     9e2:	99 0f       	add	r25, r25
     9e4:	99 0f       	add	r25, r25
     9e6:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     9e8:	90 91 18 01 	lds	r25, 0x0118
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	29 0f       	add	r18, r25
     9f0:	20 93 18 01 	sts	0x0118, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     9f4:	28 2f       	mov	r18, r24
     9f6:	22 95       	swap	r18
     9f8:	26 95       	lsr	r18
     9fa:	27 70       	andi	r18, 0x07	; 7
     9fc:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     9fe:	96 95       	lsr	r25
     a00:	96 95       	lsr	r25
     a02:	89 27       	eor	r24, r25
     a04:	80 93 02 01 	sts	0x0102, r24
    return seed;
}
     a08:	08 95       	ret

00000a0a <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a0a:	80 93 02 01 	sts	0x0102, r24
     a0e:	08 95       	ret

00000a10 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a10:	80 91 53 01 	lds	r24, 0x0153
     a14:	81 11       	cpse	r24, r1
     a16:	16 c0       	rjmp	.+44     	; 0xa44 <get_voltage+0x34>
        cli();                                    // disable interrupts
     a18:	f8 94       	cli
        adc_setup_conversion(6);
     a1a:	86 e0       	ldi	r24, 0x06	; 6
     a1c:	80 93 7c 00 	sts	0x007C, r24
     a20:	83 e8       	ldi	r24, 0x83	; 131
     a22:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a26:	80 91 7a 00 	lds	r24, 0x007A
     a2a:	80 64       	ori	r24, 0x40	; 64
     a2c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a30:	80 91 7a 00 	lds	r24, 0x007A
     a34:	86 fd       	sbrc	r24, 6
     a36:	fc cf       	rjmp	.-8      	; 0xa30 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a38:	80 91 78 00 	lds	r24, 0x0078
     a3c:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a40:	78 94       	sei
     a42:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a48:	08 95       	ret

00000a4a <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a4a:	2f 92       	push	r2
     a4c:	3f 92       	push	r3
     a4e:	4f 92       	push	r4
     a50:	5f 92       	push	r5
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	8f 92       	push	r8
     a58:	9f 92       	push	r9
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <estimate_distance+0x26>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <estimate_distance+0x28>
     a72:	00 d0       	rcall	.+0      	; 0xa74 <estimate_distance+0x2a>
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     a7a:	dc 01       	movw	r26, r24
     a7c:	12 96       	adiw	r26, 0x02	; 2
     a7e:	0d 90       	ld	r0, X+
     a80:	bc 91       	ld	r27, X
     a82:	a0 2d       	mov	r26, r0
     a84:	be 83       	std	Y+6, r27	; 0x06
     a86:	ad 83       	std	Y+5, r26	; 0x05
     a88:	a4 38       	cpi	r26, 0x84	; 132
     a8a:	e3 e0       	ldi	r30, 0x03	; 3
     a8c:	be 07       	cpc	r27, r30
     a8e:	0c f0       	brlt	.+2      	; 0xa92 <estimate_distance+0x48>
     a90:	c9 c0       	rjmp	.+402    	; 0xc24 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a92:	80 91 2d 01 	lds	r24, 0x012D
     a96:	90 91 2e 01 	lds	r25, 0x012E
     a9a:	8a 17       	cp	r24, r26
     a9c:	9b 07       	cpc	r25, r27
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <estimate_distance+0x58>
     aa0:	37 c1       	rjmp	.+622    	; 0xd10 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     aa2:	00 91 2f 01 	lds	r16, 0x012F
     aa6:	10 91 30 01 	lds	r17, 0x0130
     aaa:	0a 17       	cp	r16, r26
     aac:	1b 07       	cpc	r17, r27
     aae:	08 f4       	brcc	.+2      	; 0xab2 <estimate_distance+0x68>
     ab0:	2f c2       	rjmp	.+1118   	; 0xf10 <estimate_distance+0x4c6>
     ab2:	00 91 31 01 	lds	r16, 0x0131
     ab6:	10 91 32 01 	lds	r17, 0x0132
     aba:	0a 17       	cp	r16, r26
     abc:	1b 07       	cpc	r17, r27
     abe:	08 f4       	brcc	.+2      	; 0xac2 <estimate_distance+0x78>
     ac0:	2f c2       	rjmp	.+1118   	; 0xf20 <estimate_distance+0x4d6>
     ac2:	00 91 33 01 	lds	r16, 0x0133
     ac6:	10 91 34 01 	lds	r17, 0x0134
     aca:	0a 17       	cp	r16, r26
     acc:	1b 07       	cpc	r17, r27
     ace:	08 f4       	brcc	.+2      	; 0xad2 <estimate_distance+0x88>
     ad0:	2f c2       	rjmp	.+1118   	; 0xf30 <estimate_distance+0x4e6>
     ad2:	00 91 35 01 	lds	r16, 0x0135
     ad6:	10 91 36 01 	lds	r17, 0x0136
     ada:	0a 17       	cp	r16, r26
     adc:	1b 07       	cpc	r17, r27
     ade:	08 f4       	brcc	.+2      	; 0xae2 <estimate_distance+0x98>
     ae0:	2f c2       	rjmp	.+1118   	; 0xf40 <estimate_distance+0x4f6>
     ae2:	00 91 37 01 	lds	r16, 0x0137
     ae6:	10 91 38 01 	lds	r17, 0x0138
     aea:	0a 17       	cp	r16, r26
     aec:	1b 07       	cpc	r17, r27
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <estimate_distance+0xa8>
     af0:	ef c1       	rjmp	.+990    	; 0xed0 <estimate_distance+0x486>
     af2:	00 91 39 01 	lds	r16, 0x0139
     af6:	10 91 3a 01 	lds	r17, 0x013A
     afa:	0a 17       	cp	r16, r26
     afc:	1b 07       	cpc	r17, r27
     afe:	08 f4       	brcc	.+2      	; 0xb02 <estimate_distance+0xb8>
     b00:	27 c2       	rjmp	.+1102   	; 0xf50 <estimate_distance+0x506>
     b02:	00 91 3b 01 	lds	r16, 0x013B
     b06:	10 91 3c 01 	lds	r17, 0x013C
     b0a:	0a 17       	cp	r16, r26
     b0c:	1b 07       	cpc	r17, r27
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <estimate_distance+0xc8>
     b10:	27 c2       	rjmp	.+1102   	; 0xf60 <estimate_distance+0x516>
     b12:	00 91 3d 01 	lds	r16, 0x013D
     b16:	10 91 3e 01 	lds	r17, 0x013E
     b1a:	0a 17       	cp	r16, r26
     b1c:	1b 07       	cpc	r17, r27
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <estimate_distance+0xd8>
     b20:	27 c2       	rjmp	.+1102   	; 0xf70 <estimate_distance+0x526>
     b22:	00 91 3f 01 	lds	r16, 0x013F
     b26:	10 91 40 01 	lds	r17, 0x0140
     b2a:	0a 17       	cp	r16, r26
     b2c:	1b 07       	cpc	r17, r27
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <estimate_distance+0xe8>
     b30:	27 c2       	rjmp	.+1102   	; 0xf80 <estimate_distance+0x536>
     b32:	00 91 41 01 	lds	r16, 0x0141
     b36:	10 91 42 01 	lds	r17, 0x0142
     b3a:	0a 17       	cp	r16, r26
     b3c:	1b 07       	cpc	r17, r27
     b3e:	08 f4       	brcc	.+2      	; 0xb42 <estimate_distance+0xf8>
     b40:	27 c2       	rjmp	.+1102   	; 0xf90 <estimate_distance+0x546>
     b42:	00 91 43 01 	lds	r16, 0x0143
     b46:	10 91 44 01 	lds	r17, 0x0144
     b4a:	0a 17       	cp	r16, r26
     b4c:	1b 07       	cpc	r17, r27
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <estimate_distance+0x108>
     b50:	23 c2       	rjmp	.+1094   	; 0xf98 <estimate_distance+0x54e>
     b52:	00 91 45 01 	lds	r16, 0x0145
     b56:	10 91 46 01 	lds	r17, 0x0146
     b5a:	0a 17       	cp	r16, r26
     b5c:	1b 07       	cpc	r17, r27
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <estimate_distance+0x118>
     b60:	23 c2       	rjmp	.+1094   	; 0xfa8 <estimate_distance+0x55e>
     b62:	00 91 47 01 	lds	r16, 0x0147
     b66:	10 91 48 01 	lds	r17, 0x0148
     b6a:	0a 17       	cp	r16, r26
     b6c:	1b 07       	cpc	r17, r27
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <estimate_distance+0x128>
     b70:	23 c2       	rjmp	.+1094   	; 0xfb8 <estimate_distance+0x56e>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 ed       	ldi	r26, 0xD0	; 208
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	ab 83       	std	Y+3, r26	; 0x03
     b80:	bc 83       	std	Y+4, r27	; 0x04
     b82:	4c e0       	ldi	r20, 0x0C	; 12
     b84:	e4 2e       	mov	r14, r20
     b86:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     b88:	f7 01       	movw	r30, r14
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	e3 5d       	subi	r30, 0xD3	; 211
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	b8 01       	movw	r22, r16
     b98:	68 1b       	sub	r22, r24
     b9a:	79 0b       	sbc	r23, r25
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__addsf3>
     bac:	6b 01       	movw	r12, r22
     bae:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bb0:	ad 81       	ldd	r26, Y+5	; 0x05
     bb2:	be 81       	ldd	r27, Y+6	; 0x06
     bb4:	bd 01       	movw	r22, r26
     bb6:	bb 0f       	add	r27, r27
     bb8:	88 0b       	sbc	r24, r24
     bba:	99 0b       	sbc	r25, r25
     bbc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__floatsisf>
     bc0:	4b 01       	movw	r8, r22
     bc2:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     bc4:	b8 01       	movw	r22, r16
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     bce:	2b 01       	movw	r4, r22
     bd0:	3c 01       	movw	r6, r24
     bd2:	29 81       	ldd	r18, Y+1	; 0x01
     bd4:	3a 81       	ldd	r19, Y+2	; 0x02
     bd6:	4b 81       	ldd	r20, Y+3	; 0x03
     bd8:	5c 81       	ldd	r21, Y+4	; 0x04
     bda:	c7 01       	movw	r24, r14
     bdc:	b6 01       	movw	r22, r12
     bde:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c3 01       	movw	r24, r6
     be8:	b2 01       	movw	r22, r4
     bea:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__subsf3>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bf2:	c5 01       	movw	r24, r10
     bf4:	b4 01       	movw	r22, r8
     bf6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__subsf3>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e2       	ldi	r20, 0x20	; 32
     c00:	51 e4       	ldi	r21, 0x41	; 65
     c02:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
            b=((int)((int)b/(int)slope));
     c06:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
     c0a:	8b 01       	movw	r16, r22
     c0c:	c7 01       	movw	r24, r14
     c0e:	b6 01       	movw	r22, r12
     c10:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
     c14:	ab 01       	movw	r20, r22
     c16:	bc 01       	movw	r22, r24
     c18:	c8 01       	movw	r24, r16
     c1a:	ba 01       	movw	r22, r20
     c1c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divmodhi4>
            dist_high=b;
     c20:	16 2f       	mov	r17, r22
     c22:	77 c0       	rjmp	.+238    	; 0xd12 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c24:	dc 01       	movw	r26, r24
     c26:	cd 90       	ld	r12, X+
     c28:	dc 90       	ld	r13, X
     c2a:	80 91 54 01 	lds	r24, 0x0154
     c2e:	90 91 55 01 	lds	r25, 0x0155
     c32:	8c 15       	cp	r24, r12
     c34:	9d 05       	cpc	r25, r13
     c36:	08 f4       	brcc	.+2      	; 0xc3a <estimate_distance+0x1f0>
     c38:	8c c0       	rjmp	.+280    	; 0xd52 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c3a:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c3c:	e0 90 56 01 	lds	r14, 0x0156
     c40:	f0 90 57 01 	lds	r15, 0x0157
     c44:	ec 14       	cp	r14, r12
     c46:	fd 04       	cpc	r15, r13
     c48:	08 f4       	brcc	.+2      	; 0xc4c <estimate_distance+0x202>
     c4a:	5e c1       	rjmp	.+700    	; 0xf08 <estimate_distance+0x4be>
     c4c:	e0 90 58 01 	lds	r14, 0x0158
     c50:	f0 90 59 01 	lds	r15, 0x0159
     c54:	ec 14       	cp	r14, r12
     c56:	fd 04       	cpc	r15, r13
     c58:	08 f4       	brcc	.+2      	; 0xc5c <estimate_distance+0x212>
     c5a:	5e c1       	rjmp	.+700    	; 0xf18 <estimate_distance+0x4ce>
     c5c:	e0 90 5a 01 	lds	r14, 0x015A
     c60:	f0 90 5b 01 	lds	r15, 0x015B
     c64:	ec 14       	cp	r14, r12
     c66:	fd 04       	cpc	r15, r13
     c68:	08 f4       	brcc	.+2      	; 0xc6c <estimate_distance+0x222>
     c6a:	5e c1       	rjmp	.+700    	; 0xf28 <estimate_distance+0x4de>
     c6c:	e0 90 5c 01 	lds	r14, 0x015C
     c70:	f0 90 5d 01 	lds	r15, 0x015D
     c74:	ec 14       	cp	r14, r12
     c76:	fd 04       	cpc	r15, r13
     c78:	08 f4       	brcc	.+2      	; 0xc7c <estimate_distance+0x232>
     c7a:	5e c1       	rjmp	.+700    	; 0xf38 <estimate_distance+0x4ee>
     c7c:	e0 90 5e 01 	lds	r14, 0x015E
     c80:	f0 90 5f 01 	lds	r15, 0x015F
     c84:	ec 14       	cp	r14, r12
     c86:	fd 04       	cpc	r15, r13
     c88:	08 f4       	brcc	.+2      	; 0xc8c <estimate_distance+0x242>
     c8a:	c3 c0       	rjmp	.+390    	; 0xe12 <estimate_distance+0x3c8>
     c8c:	e0 90 60 01 	lds	r14, 0x0160
     c90:	f0 90 61 01 	lds	r15, 0x0161
     c94:	ec 14       	cp	r14, r12
     c96:	fd 04       	cpc	r15, r13
     c98:	08 f4       	brcc	.+2      	; 0xc9c <estimate_distance+0x252>
     c9a:	56 c1       	rjmp	.+684    	; 0xf48 <estimate_distance+0x4fe>
     c9c:	e0 90 62 01 	lds	r14, 0x0162
     ca0:	f0 90 63 01 	lds	r15, 0x0163
     ca4:	ec 14       	cp	r14, r12
     ca6:	fd 04       	cpc	r15, r13
     ca8:	08 f4       	brcc	.+2      	; 0xcac <estimate_distance+0x262>
     caa:	56 c1       	rjmp	.+684    	; 0xf58 <estimate_distance+0x50e>
     cac:	e0 90 64 01 	lds	r14, 0x0164
     cb0:	f0 90 65 01 	lds	r15, 0x0165
     cb4:	ec 14       	cp	r14, r12
     cb6:	fd 04       	cpc	r15, r13
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <estimate_distance+0x272>
     cba:	56 c1       	rjmp	.+684    	; 0xf68 <estimate_distance+0x51e>
     cbc:	e0 90 66 01 	lds	r14, 0x0166
     cc0:	f0 90 67 01 	lds	r15, 0x0167
     cc4:	ec 14       	cp	r14, r12
     cc6:	fd 04       	cpc	r15, r13
     cc8:	08 f4       	brcc	.+2      	; 0xccc <estimate_distance+0x282>
     cca:	56 c1       	rjmp	.+684    	; 0xf78 <estimate_distance+0x52e>
     ccc:	e0 90 68 01 	lds	r14, 0x0168
     cd0:	f0 90 69 01 	lds	r15, 0x0169
     cd4:	ec 14       	cp	r14, r12
     cd6:	fd 04       	cpc	r15, r13
     cd8:	08 f4       	brcc	.+2      	; 0xcdc <estimate_distance+0x292>
     cda:	56 c1       	rjmp	.+684    	; 0xf88 <estimate_distance+0x53e>
     cdc:	e0 90 6a 01 	lds	r14, 0x016A
     ce0:	f0 90 6b 01 	lds	r15, 0x016B
     ce4:	ec 14       	cp	r14, r12
     ce6:	fd 04       	cpc	r15, r13
     ce8:	08 f4       	brcc	.+2      	; 0xcec <estimate_distance+0x2a2>
     cea:	5a c1       	rjmp	.+692    	; 0xfa0 <estimate_distance+0x556>
     cec:	e0 90 6c 01 	lds	r14, 0x016C
     cf0:	f0 90 6d 01 	lds	r15, 0x016D
     cf4:	ec 14       	cp	r14, r12
     cf6:	fd 04       	cpc	r15, r13
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <estimate_distance+0x2b2>
     cfa:	5a c1       	rjmp	.+692    	; 0xfb0 <estimate_distance+0x566>
     cfc:	e0 90 6e 01 	lds	r14, 0x016E
     d00:	f0 90 6f 01 	lds	r15, 0x016F
     d04:	ec 14       	cp	r14, r12
     d06:	fd 04       	cpc	r15, r13
     d08:	08 f4       	brcc	.+2      	; 0xd0c <estimate_distance+0x2c2>
     d0a:	5a c1       	rjmp	.+692    	; 0xfc0 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d0c:	0a e5       	ldi	r16, 0x5A	; 90
     d0e:	31 c0       	rjmp	.+98     	; 0xd72 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     d10:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     d12:	ed 81       	ldd	r30, Y+5	; 0x05
     d14:	fe 81       	ldd	r31, Y+6	; 0x06
     d16:	ed 3b       	cpi	r30, 0xBD	; 189
     d18:	f2 40       	sbci	r31, 0x02	; 2
     d1a:	fc f4       	brge	.+62     	; 0xd5a <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     d1c:	81 e2       	ldi	r24, 0x21	; 33
     d1e:	81 0f       	add	r24, r17
    }
}
     d20:	26 96       	adiw	r28, 0x06	; 6
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	9f 90       	pop	r9
     d42:	8f 90       	pop	r8
     d44:	7f 90       	pop	r7
     d46:	6f 90       	pop	r6
     d48:	5f 90       	pop	r5
     d4a:	4f 90       	pop	r4
     d4c:	3f 90       	pop	r3
     d4e:	2f 90       	pop	r2
     d50:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d52:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d54:	81 e2       	ldi	r24, 0x21	; 33
     d56:	80 0f       	add	r24, r16
     d58:	e3 cf       	rjmp	.-58     	; 0xd20 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d5a:	d1 01       	movw	r26, r2
     d5c:	cd 90       	ld	r12, X+
     d5e:	dc 90       	ld	r13, X
     d60:	80 91 54 01 	lds	r24, 0x0154
     d64:	90 91 55 01 	lds	r25, 0x0155
     d68:	8c 15       	cp	r24, r12
     d6a:	9d 05       	cpc	r25, r13
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <estimate_distance+0x326>
     d6e:	66 cf       	rjmp	.-308    	; 0xc3c <estimate_distance+0x1f2>
            dist_low=0;
     d70:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d72:	1f 3f       	cpi	r17, 0xFF	; 255
     d74:	79 f3       	breq	.-34     	; 0xd54 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d76:	ed 81       	ldd	r30, Y+5	; 0x05
     d78:	fe 81       	ldd	r31, Y+6	; 0x06
     d7a:	bf 01       	movw	r22, r30
     d7c:	ff 0f       	add	r31, r31
     d7e:	88 0b       	sbc	r24, r24
     d80:	99 0b       	sbc	r25, r25
     d82:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__floatsisf>
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
     d8a:	61 2f       	mov	r22, r17
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     d96:	4b 01       	movw	r8, r22
     d98:	5c 01       	movw	r10, r24
     d9a:	a7 01       	movw	r20, r14
     d9c:	96 01       	movw	r18, r12
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	81 e6       	ldi	r24, 0x61	; 97
     da4:	94 e4       	ldi	r25, 0x44	; 68
     da6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__subsf3>
     daa:	9b 01       	movw	r18, r22
     dac:	ac 01       	movw	r20, r24
     dae:	c5 01       	movw	r24, r10
     db0:	b4 01       	movw	r22, r8
     db2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
     db6:	4b 01       	movw	r8, r22
     db8:	5c 01       	movw	r10, r24
     dba:	60 2f       	mov	r22, r16
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     dc6:	2b 01       	movw	r4, r22
     dc8:	3c 01       	movw	r6, r24
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4f e2       	ldi	r20, 0x2F	; 47
     dd0:	54 e4       	ldi	r21, 0x44	; 68
     dd2:	c7 01       	movw	r24, r14
     dd4:	b6 01       	movw	r22, r12
     dd6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__subsf3>
     dda:	9b 01       	movw	r18, r22
     ddc:	ac 01       	movw	r20, r24
     dde:	c3 01       	movw	r24, r6
     de0:	b2 01       	movw	r22, r4
     de2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
     de6:	9b 01       	movw	r18, r22
     de8:	ac 01       	movw	r20, r24
     dea:	c5 01       	movw	r24, r10
     dec:	b4 01       	movw	r22, r8
     dee:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__addsf3>
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	48 e4       	ldi	r20, 0x48	; 72
     df8:	53 e4       	ldi	r21, 0x43	; 67
     dfa:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divsf3>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	44 e0       	ldi	r20, 0x04	; 4
     e04:	52 e4       	ldi	r21, 0x42	; 66
     e06:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__addsf3>
     e0a:	0e 94 89 0c 	call	0x1912	; 0x1912 <__fixunssfsi>
     e0e:	86 2f       	mov	r24, r22
     e10:	87 cf       	rjmp	.-242    	; 0xd20 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e12:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     e14:	85 e0       	ldi	r24, 0x05	; 5
     e16:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	fc 01       	movw	r30, r24
     e1e:	ee 5a       	subi	r30, 0xAE	; 174
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	b7 01       	movw	r22, r14
     e28:	68 1b       	sub	r22, r24
     e2a:	79 0b       	sbc	r23, r25
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__addsf3>
     e3c:	4b 01       	movw	r8, r22
     e3e:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e40:	b6 01       	movw	r22, r12
     e42:	dd 0c       	add	r13, r13
     e44:	88 0b       	sbc	r24, r24
     e46:	99 0b       	sbc	r25, r25
     e48:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__floatsisf>
     e4c:	2b 01       	movw	r4, r22
     e4e:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e50:	b7 01       	movw	r22, r14
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     e5a:	6b 01       	movw	r12, r22
     e5c:	7c 01       	movw	r14, r24
     e5e:	60 2f       	mov	r22, r16
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	a9 01       	movw	r20, r18
     e7c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__addsf3>
     e80:	a5 01       	movw	r20, r10
     e82:	94 01       	movw	r18, r8
     e84:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
     e88:	9b 01       	movw	r18, r22
     e8a:	ac 01       	movw	r20, r24
     e8c:	c7 01       	movw	r24, r14
     e8e:	b6 01       	movw	r22, r12
     e90:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__subsf3>
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e98:	c3 01       	movw	r24, r6
     e9a:	b2 01       	movw	r22, r4
     e9c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__subsf3>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
                b=((int)((int)b/(int)slope));
     eac:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
     eb0:	7b 01       	movw	r14, r22
     eb2:	c5 01       	movw	r24, r10
     eb4:	b4 01       	movw	r22, r8
     eb6:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
     eba:	ab 01       	movw	r20, r22
     ebc:	bc 01       	movw	r22, r24
     ebe:	c7 01       	movw	r24, r14
     ec0:	ba 01       	movw	r22, r20
     ec2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divmodhi4>
                dist_low=b;
     ec6:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     ec8:	6f 3f       	cpi	r22, 0xFF	; 255
     eca:	09 f0       	breq	.+2      	; 0xece <estimate_distance+0x484>
     ecc:	52 cf       	rjmp	.-348    	; 0xd72 <estimate_distance+0x328>
     ece:	26 cf       	rjmp	.-436    	; 0xd1c <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ed0:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     ed2:	85 e0       	ldi	r24, 0x05	; 5
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	7c 01       	movw	r14, r24
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	ef 1a       	sub	r14, r31
     edc:	f1 08       	sbc	r15, r1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__mulsf3>
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	a9 01       	movw	r20, r18
     efa:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__addsf3>
     efe:	69 83       	std	Y+1, r22	; 0x01
     f00:	7a 83       	std	Y+2, r23	; 0x02
     f02:	8b 83       	std	Y+3, r24	; 0x03
     f04:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     f06:	40 ce       	rjmp	.-896    	; 0xb88 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f08:	01 e0       	ldi	r16, 0x01	; 1
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	84 cf       	rjmp	.-248    	; 0xe18 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	df cf       	rjmp	.-66     	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f18:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	7c cf       	rjmp	.-264    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f20:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	d7 cf       	rjmp	.-82     	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f28:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	74 cf       	rjmp	.-280    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f30:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	cf cf       	rjmp	.-98     	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f38:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f3a:	84 e0       	ldi	r24, 0x04	; 4
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	6c cf       	rjmp	.-296    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f40:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	c7 cf       	rjmp	.-114    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f48:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f4a:	86 e0       	ldi	r24, 0x06	; 6
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	64 cf       	rjmp	.-312    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f50:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f52:	86 e0       	ldi	r24, 0x06	; 6
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	bf cf       	rjmp	.-130    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f58:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     f5a:	87 e0       	ldi	r24, 0x07	; 7
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	5c cf       	rjmp	.-328    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f60:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f62:	87 e0       	ldi	r24, 0x07	; 7
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	b7 cf       	rjmp	.-146    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f68:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f6a:	88 e0       	ldi	r24, 0x08	; 8
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	54 cf       	rjmp	.-344    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f70:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f72:	88 e0       	ldi	r24, 0x08	; 8
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	af cf       	rjmp	.-162    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f78:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     f7a:	89 e0       	ldi	r24, 0x09	; 9
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	4c cf       	rjmp	.-360    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f80:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     f82:	89 e0       	ldi	r24, 0x09	; 9
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a7 cf       	rjmp	.-178    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f88:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     f8a:	8a e0       	ldi	r24, 0x0A	; 10
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	44 cf       	rjmp	.-376    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f90:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f92:	8a e0       	ldi	r24, 0x0A	; 10
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9f cf       	rjmp	.-194    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f98:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f9a:	8b e0       	ldi	r24, 0x0B	; 11
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9b cf       	rjmp	.-202    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fa0:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     fa2:	8b e0       	ldi	r24, 0x0B	; 11
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	38 cf       	rjmp	.-400    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fa8:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     faa:	8c e0       	ldi	r24, 0x0C	; 12
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	93 cf       	rjmp	.-218    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fb0:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     fb2:	8c e0       	ldi	r24, 0x0C	; 12
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	30 cf       	rjmp	.-416    	; 0xe18 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fb8:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     fba:	8d e0       	ldi	r24, 0x0D	; 13
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	8b cf       	rjmp	.-234    	; 0xed6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fc0:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     fc2:	8d e0       	ldi	r24, 0x0D	; 13
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	28 cf       	rjmp	.-432    	; 0xe18 <estimate_distance+0x3ce>

00000fc8 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
    tx_clock += tx_increment;
     fea:	20 91 73 01 	lds	r18, 0x0173
     fee:	30 91 74 01 	lds	r19, 0x0174
     ff2:	80 91 71 01 	lds	r24, 0x0171
     ff6:	90 91 72 01 	lds	r25, 0x0172
     ffa:	82 0f       	add	r24, r18
     ffc:	93 1f       	adc	r25, r19
     ffe:	90 93 74 01 	sts	0x0174, r25
    1002:	80 93 73 01 	sts	0x0173, r24
    tx_increment = 0xFF;
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	90 93 72 01 	sts	0x0172, r25
    100e:	80 93 71 01 	sts	0x0171, r24
    OCR0A = tx_increment;
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1016:	80 91 4f 01 	lds	r24, 0x014F
    101a:	90 91 50 01 	lds	r25, 0x0150
    101e:	a0 91 51 01 	lds	r26, 0x0151
    1022:	b0 91 52 01 	lds	r27, 0x0152
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	a1 1d       	adc	r26, r1
    102a:	b1 1d       	adc	r27, r1
    102c:	80 93 4f 01 	sts	0x014F, r24
    1030:	90 93 50 01 	sts	0x0150, r25
    1034:	a0 93 51 01 	sts	0x0151, r26
    1038:	b0 93 52 01 	sts	0x0152, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    103c:	80 91 53 01 	lds	r24, 0x0153
    1040:	81 11       	cpse	r24, r1
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <__vector_14+0x9a>
    1044:	80 91 82 01 	lds	r24, 0x0182
    1048:	90 91 83 01 	lds	r25, 0x0183
    104c:	20 91 73 01 	lds	r18, 0x0173
    1050:	30 91 74 01 	lds	r19, 0x0174
    1054:	82 17       	cp	r24, r18
    1056:	93 07       	cpc	r25, r19
    1058:	20 f4       	brcc	.+8      	; 0x1062 <__vector_14+0x9a>
    105a:	80 91 1b 01 	lds	r24, 0x011B
    105e:	84 30       	cpi	r24, 0x04	; 4
    1060:	89 f0       	breq	.+34     	; 0x1084 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1084:	e0 91 05 01 	lds	r30, 0x0105
    1088:	f0 91 06 01 	lds	r31, 0x0106
    108c:	09 95       	icall
        if (msg) {
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	41 f3       	breq	.-48     	; 0x1062 <__vector_14+0x9a>
            if (message_send(msg)) {
    1092:	0e 94 cc 0a 	call	0x1598	; 0x1598 <message_send>
    1096:	81 11       	cpse	r24, r1
    1098:	09 c0       	rjmp	.+18     	; 0x10ac <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    109a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <rand>
    109e:	99 27       	eor	r25, r25
    10a0:	90 93 72 01 	sts	0x0172, r25
    10a4:	80 93 71 01 	sts	0x0171, r24
                OCR0A = tx_increment;
    10a8:	87 bd       	out	0x27, r24	; 39
    10aa:	db cf       	rjmp	.-74     	; 0x1062 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    10ac:	e0 91 03 01 	lds	r30, 0x0103
    10b0:	f0 91 04 01 	lds	r31, 0x0104
    10b4:	09 95       	icall
                tx_clock = 0;
    10b6:	10 92 74 01 	sts	0x0174, r1
    10ba:	10 92 73 01 	sts	0x0173, r1
    10be:	d1 cf       	rjmp	.-94     	; 0x1062 <__vector_14+0x9a>

000010c0 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    10c0:	80 ff       	sbrs	r24, 0
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <set_color+0x26>
        DDRD |= (1<<5);
    10c4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    10c6:	81 ff       	sbrs	r24, 1
    10c8:	11 c0       	rjmp	.+34     	; 0x10ec <set_color+0x2c>
        DDRD |= (1<<4);
    10ca:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    10cc:	82 ff       	sbrs	r24, 2
    10ce:	11 c0       	rjmp	.+34     	; 0x10f2 <set_color+0x32>
        DDRC |= (1<<3);
    10d0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    10d2:	83 ff       	sbrs	r24, 3
    10d4:	11 c0       	rjmp	.+34     	; 0x10f8 <set_color+0x38>
        DDRC |= (1<<2);
    10d6:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    10d8:	84 ff       	sbrs	r24, 4
    10da:	11 c0       	rjmp	.+34     	; 0x10fe <set_color+0x3e>
        DDRC |= (1<<5);
    10dc:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    10de:	85 fd       	sbrc	r24, 5
    10e0:	11 c0       	rjmp	.+34     	; 0x1104 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    10e2:	3c 98       	cbi	0x07, 4	; 7
    10e4:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    10e6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    10e8:	81 fd       	sbrc	r24, 1
    10ea:	ef cf       	rjmp	.-34     	; 0x10ca <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    10ec:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    10ee:	82 fd       	sbrc	r24, 2
    10f0:	ef cf       	rjmp	.-34     	; 0x10d0 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    10f2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    10f4:	83 fd       	sbrc	r24, 3
    10f6:	ef cf       	rjmp	.-34     	; 0x10d6 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    10f8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    10fa:	84 fd       	sbrc	r24, 4
    10fc:	ef cf       	rjmp	.-34     	; 0x10dc <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    10fe:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1100:	85 ff       	sbrs	r24, 5
    1102:	ef cf       	rjmp	.-34     	; 0x10e2 <set_color+0x22>
        DDRC |= (1<<4);
    1104:	3c 9a       	sbi	0x07, 4	; 7
    1106:	08 95       	ret

00001108 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1108:	1f 92       	push	r1
    110a:	0f 92       	push	r0
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	0f 92       	push	r0
    1110:	11 24       	eor	r1, r1
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    rx_timer_off();
    1116:	10 92 81 00 	sts	0x0081, r1
    111a:	10 92 85 00 	sts	0x0085, r1
    111e:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 2c 01 	sts	0x012C, r24
    rx_leadingbyte = 1;
    1128:	80 93 70 01 	sts	0x0170, r24
    rx_busy = 0;
    112c:	10 92 53 01 	sts	0x0153, r1
    adc_trigger_high_gain();
    1130:	10 92 7c 00 	sts	0x007C, r1
    1134:	93 ea       	ldi	r25, 0xA3	; 163
    1136:	90 93 7a 00 	sts	0x007A, r25
    113a:	80 93 7b 00 	sts	0x007B, r24
}
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ef 93       	push	r30
    1170:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1172:	20 91 84 00 	lds	r18, 0x0084
    1176:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	40 93 53 01 	sts	0x0153, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1180:	80 91 2c 01 	lds	r24, 0x012C
    1184:	88 23       	and	r24, r24
    1186:	a9 f1       	breq	.+106    	; 0x11f2 <__vector_23+0xa6>
        rx_timer_on();
    1188:	10 92 85 00 	sts	0x0085, r1
    118c:	10 92 84 00 	sts	0x0084, r1
    1190:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1194:	10 92 84 01 	sts	0x0184, r1
        rx_leadingbit = 0;
    1198:	10 92 2c 01 	sts	0x012C, r1
        if (rx_leadingbyte) {
    119c:	80 91 70 01 	lds	r24, 0x0170
    11a0:	88 23       	and	r24, r24
    11a2:	a1 f0       	breq	.+40     	; 0x11cc <__vector_23+0x80>
            adc_finish_conversion();
    11a4:	80 91 7a 00 	lds	r24, 0x007A
    11a8:	86 fd       	sbrc	r24, 6
    11aa:	fc cf       	rjmp	.-8      	; 0x11a4 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    11ac:	80 91 78 00 	lds	r24, 0x0078
    11b0:	90 91 79 00 	lds	r25, 0x0079
    11b4:	90 93 4e 01 	sts	0x014E, r25
    11b8:	80 93 4d 01 	sts	0x014D, r24
            adc_trigger_low_gain();
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 7c 00 	sts	0x007C, r24
    11c2:	93 ea       	ldi	r25, 0xA3	; 163
    11c4:	90 93 7a 00 	sts	0x007A, r25
    11c8:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    11f2:	c9 01       	movw	r24, r18
    11f4:	87 58       	subi	r24, 0x87	; 135
    11f6:	91 09       	sbc	r25, r1
    11f8:	84 37       	cpi	r24, 0x74	; 116
    11fa:	99 40       	sbci	r25, 0x09	; 9
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <__vector_23+0xb4>
    11fe:	52 c0       	rjmp	.+164    	; 0x12a4 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1200:	26 58       	subi	r18, 0x86	; 134
    1202:	31 09       	sbc	r19, r1
    1204:	a4 ef       	ldi	r26, 0xF4	; 244
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
    120c:	aa 27       	eor	r26, r26
    120e:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	91 05       	cpc	r25, r1
    1214:	a1 05       	cpc	r26, r1
    1216:	b1 05       	cpc	r27, r1
    1218:	08 f4       	brcc	.+2      	; 0x121c <__vector_23+0xd0>
    121a:	7b c0       	rjmp	.+246    	; 0x1312 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    121c:	40 93 2c 01 	sts	0x012C, r20
                if (rx_leadingbyte) {
    1220:	80 91 70 01 	lds	r24, 0x0170
    1224:	81 11       	cpse	r24, r1
    1226:	52 c0       	rjmp	.+164    	; 0x12cc <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1228:	80 91 4a 01 	lds	r24, 0x014A
    122c:	e8 2f       	mov	r30, r24
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	ea 58       	subi	r30, 0x8A	; 138
    1232:	fe 4f       	sbci	r31, 0xFE	; 254
    1234:	90 91 84 01 	lds	r25, 0x0184
    1238:	90 83       	st	Z, r25
                    rx_byteindex++;
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	80 93 4a 01 	sts	0x014A, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1240:	8c 30       	cpi	r24, 0x0C	; 12
    1242:	21 f6       	brne	.-120    	; 0x11cc <__vector_23+0x80>
                        rx_timer_off();
    1244:	10 92 81 00 	sts	0x0081, r1
    1248:	10 92 85 00 	sts	0x0085, r1
    124c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1250:	40 93 70 01 	sts	0x0170, r20
                        rx_busy = 0;
    1254:	10 92 53 01 	sts	0x0153, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1258:	c0 91 80 01 	lds	r28, 0x0180
    125c:	d0 91 81 01 	lds	r29, 0x0181
    1260:	86 e7       	ldi	r24, 0x76	; 118
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 b0 0a 	call	0x1560	; 0x1560 <message_crc>
    1268:	c8 17       	cp	r28, r24
    126a:	d9 07       	cpc	r29, r25
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_23+0x124>
    126e:	ae cf       	rjmp	.-164    	; 0x11cc <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1270:	80 91 7f 01 	lds	r24, 0x017F
    1274:	87 ff       	sbrs	r24, 7
    1276:	61 c0       	rjmp	.+194    	; 0x133a <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1278:	98 e7       	ldi	r25, 0x78	; 120
    127a:	98 0f       	add	r25, r24
    127c:	93 30       	cpi	r25, 0x03	; 3
    127e:	30 f0       	brcs	.+12     	; 0x128c <__vector_23+0x140>
        motors_off();
    1280:	53 98       	cbi	0x0a, 3	; 10
    1282:	23 98       	cbi	0x04, 3	; 4
    1284:	10 92 b4 00 	sts	0x00B4, r1
    1288:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	fc 01       	movw	r30, r24
    1290:	e0 58       	subi	r30, 0x80	; 128
    1292:	f1 09       	sbc	r31, r1
    1294:	eb 30       	cpi	r30, 0x0B	; 11
    1296:	f1 05       	cpc	r31, r1
    1298:	08 f0       	brcs	.+2      	; 0x129c <__vector_23+0x150>
    129a:	98 cf       	rjmp	.-208    	; 0x11cc <__vector_23+0x80>
    129c:	e5 5c       	subi	r30, 0xC5	; 197
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    12a4:	10 92 81 00 	sts	0x0081, r1
    12a8:	10 92 85 00 	sts	0x0085, r1
    12ac:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    12b0:	40 93 2c 01 	sts	0x012C, r20
            rx_leadingbyte = 1;
    12b4:	40 93 70 01 	sts	0x0170, r20
            rx_busy = 0;
    12b8:	10 92 53 01 	sts	0x0153, r1
            adc_trigger_high_gain();
    12bc:	10 92 7c 00 	sts	0x007C, r1
    12c0:	83 ea       	ldi	r24, 0xA3	; 163
    12c2:	80 93 7a 00 	sts	0x007A, r24
    12c6:	40 93 7b 00 	sts	0x007B, r20
    12ca:	80 cf       	rjmp	.-256    	; 0x11cc <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    12cc:	80 91 7a 00 	lds	r24, 0x007A
    12d0:	86 fd       	sbrc	r24, 6
    12d2:	fc cf       	rjmp	.-8      	; 0x12cc <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    12d4:	80 91 78 00 	lds	r24, 0x0078
    12d8:	90 91 79 00 	lds	r25, 0x0079
    12dc:	90 93 4c 01 	sts	0x014C, r25
    12e0:	80 93 4b 01 	sts	0x014B, r24
                    adc_trigger_high_gain();
    12e4:	10 92 7c 00 	sts	0x007C, r1
    12e8:	83 ea       	ldi	r24, 0xA3	; 163
    12ea:	80 93 7a 00 	sts	0x007A, r24
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    12f4:	90 91 84 01 	lds	r25, 0x0184
    12f8:	99 23       	and	r25, r25
    12fa:	d1 f0       	breq	.+52     	; 0x1330 <__vector_23+0x1e4>
                        rx_timer_off();
    12fc:	10 92 81 00 	sts	0x0081, r1
    1300:	10 92 85 00 	sts	0x0085, r1
    1304:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1308:	80 93 70 01 	sts	0x0170, r24
                        rx_busy = 0;
    130c:	10 92 53 01 	sts	0x0153, r1
    1310:	5d cf       	rjmp	.-326    	; 0x11cc <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1312:	21 e0       	ldi	r18, 0x01	; 1
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	f9 01       	movw	r30, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <__vector_23+0x1d2>
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <__vector_23+0x1ce>
    1322:	cf 01       	movw	r24, r30
    1324:	90 91 84 01 	lds	r25, 0x0184
    1328:	89 2b       	or	r24, r25
    132a:	80 93 84 01 	sts	0x0184, r24
    132e:	4e cf       	rjmp	.-356    	; 0x11cc <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1330:	10 92 70 01 	sts	0x0170, r1
                        rx_byteindex = 0;
    1334:	10 92 4a 01 	sts	0x014A, r1
    1338:	49 cf       	rjmp	.-366    	; 0x11cc <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    133a:	e0 91 07 01 	lds	r30, 0x0107
    133e:	f0 91 08 01 	lds	r31, 0x0108
    1342:	6b e4       	ldi	r22, 0x4B	; 75
    1344:	71 e0       	ldi	r23, 0x01	; 1
    1346:	86 e7       	ldi	r24, 0x76	; 118
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	09 95       	icall
    134c:	3f cf       	rjmp	.-386    	; 0x11cc <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    134e:	80 91 76 01 	lds	r24, 0x0176
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	09 f4       	brne	.+2      	; 0x1358 <__vector_23+0x20c>
    1356:	dd c0       	rjmp	.+442    	; 0x1512 <__vector_23+0x3c6>
    1358:	08 f4       	brcc	.+2      	; 0x135c <__vector_23+0x210>
    135a:	ba c0       	rjmp	.+372    	; 0x14d0 <__vector_23+0x384>
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	09 f4       	brne	.+2      	; 0x1362 <__vector_23+0x216>
    1360:	c6 c0       	rjmp	.+396    	; 0x14ee <__vector_23+0x3a2>
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	09 f0       	breq	.+2      	; 0x1368 <__vector_23+0x21c>
    1366:	b1 c0       	rjmp	.+354    	; 0x14ca <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1368:	80 91 19 01 	lds	r24, 0x0119
    136c:	90 91 7c 01 	lds	r25, 0x017C
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	09 f4       	brne	.+2      	; 0x1376 <__vector_23+0x22a>
    1374:	e3 c0       	rjmp	.+454    	; 0x153c <__vector_23+0x3f0>
    1376:	80 91 7b 01 	lds	r24, 0x017B
                        prev_motion = MOVE_STOP;
    137a:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_STRAIGHT;
    137e:	23 e0       	ldi	r18, 0x03	; 3
    1380:	20 93 19 01 	sts	0x0119, r18
                        kilo_straight_left = calibmsg->straight_left;
    1384:	80 93 87 01 	sts	0x0187, r24
                        kilo_straight_right = calibmsg->straight_right;
    1388:	90 93 88 01 	sts	0x0188, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    138c:	80 91 1b 01 	lds	r24, 0x011B
    1390:	86 30       	cpi	r24, 0x06	; 6
    1392:	09 f4       	brne	.+2      	; 0x1396 <__vector_23+0x24a>
    1394:	1b cf       	rjmp	.-458    	; 0x11cc <__vector_23+0x80>
                motors_on();
    1396:	53 9a       	sbi	0x0a, 3	; 10
    1398:	23 9a       	sbi	0x04, 3	; 4
    139a:	10 92 b4 00 	sts	0x00B4, r1
    139e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    13a2:	86 e0       	ldi	r24, 0x06	; 6
    13a4:	80 93 1b 01 	sts	0x011B, r24
    13a8:	11 cf       	rjmp	.-478    	; 0x11cc <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    13aa:	80 91 1b 01 	lds	r24, 0x011B
    13ae:	86 30       	cpi	r24, 0x06	; 6
    13b0:	99 f0       	breq	.+38     	; 0x13d8 <__vector_23+0x28c>
                motors_on();
    13b2:	53 9a       	sbi	0x0a, 3	; 10
    13b4:	23 9a       	sbi	0x04, 3	; 4
    13b6:	10 92 b4 00 	sts	0x00B4, r1
    13ba:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    13be:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    13c0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    13c2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    13c4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    13c6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    13c8:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    13ca:	10 92 19 01 	sts	0x0119, r1
    13ce:	10 92 1a 01 	sts	0x011A, r1
                kilo_state = MOVING;
    13d2:	86 e0       	ldi	r24, 0x06	; 6
    13d4:	80 93 1b 01 	sts	0x011B, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 01       	movw	r18, r24
    13de:	00 90 76 01 	lds	r0, 0x0176
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <__vector_23+0x29c>
    13e4:	22 0f       	add	r18, r18
    13e6:	33 1f       	adc	r19, r19
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <__vector_23+0x298>
    13ec:	80 91 85 01 	lds	r24, 0x0185
    13f0:	90 91 86 01 	lds	r25, 0x0186
    13f4:	82 23       	and	r24, r18
    13f6:	93 23       	and	r25, r19
    13f8:	89 2b       	or	r24, r25
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__vector_23+0x2b2>
    13fc:	86 c0       	rjmp	.+268    	; 0x150a <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    13fe:	10 92 19 01 	sts	0x0119, r1
    1402:	e4 ce       	rjmp	.-568    	; 0x11cc <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 93 1b 01 	sts	0x011B, r24
    140a:	e0 ce       	rjmp	.-576    	; 0x11cc <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    140c:	e0 e0       	ldi	r30, 0x00	; 0
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1412:	80 91 6e 00 	lds	r24, 0x006E
    1416:	8d 7f       	andi	r24, 0xFD	; 253
    1418:	80 93 6e 00 	sts	0x006E, r24
    141c:	16 bc       	out	0x26, r1	; 38
            bootload();
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	f0 e7       	ldi	r31, 0x70	; 112
    1422:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1424:	10 92 1b 01 	sts	0x011B, r1
    1428:	d1 ce       	rjmp	.-606    	; 0x11cc <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	80 93 1b 01 	sts	0x011B, r24
    1430:	cd ce       	rjmp	.-614    	; 0x11cc <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1432:	85 e0       	ldi	r24, 0x05	; 5
    1434:	80 93 1b 01 	sts	0x011B, r24
    1438:	c9 ce       	rjmp	.-622    	; 0x11cc <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    143a:	80 91 1b 01 	lds	r24, 0x011B
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	09 f4       	brne	.+2      	; 0x1444 <__vector_23+0x2f8>
    1442:	c4 ce       	rjmp	.-632    	; 0x11cc <__vector_23+0x80>
    1444:	80 91 1b 01 	lds	r24, 0x011B
    1448:	84 30       	cpi	r24, 0x04	; 4
    144a:	09 f4       	brne	.+2      	; 0x144e <__vector_23+0x302>
    144c:	bf ce       	rjmp	.-642    	; 0x11cc <__vector_23+0x80>
                motors_on();
    144e:	53 9a       	sbi	0x0a, 3	; 10
    1450:	23 9a       	sbi	0x04, 3	; 4
    1452:	10 92 b4 00 	sts	0x00B4, r1
    1456:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	80 93 1b 01 	sts	0x011B, r24
    1460:	b5 ce       	rjmp	.-662    	; 0x11cc <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1462:	80 91 1b 01 	lds	r24, 0x011B
    1466:	86 30       	cpi	r24, 0x06	; 6
    1468:	09 f0       	breq	.+2      	; 0x146c <__vector_23+0x320>
    146a:	b0 ce       	rjmp	.-672    	; 0x11cc <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    146c:	60 91 85 01 	lds	r22, 0x0185
    1470:	80 eb       	ldi	r24, 0xB0	; 176
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1478:	60 91 86 01 	lds	r22, 0x0186
    147c:	81 eb       	ldi	r24, 0xB1	; 177
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1484:	60 91 89 01 	lds	r22, 0x0189
    1488:	85 e0       	ldi	r24, 0x05	; 5
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1490:	60 91 75 01 	lds	r22, 0x0175
    1494:	89 e0       	ldi	r24, 0x09	; 9
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    149c:	60 91 87 01 	lds	r22, 0x0187
    14a0:	8c e0       	ldi	r24, 0x0C	; 12
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    14a8:	60 91 88 01 	lds	r22, 0x0188
    14ac:	84 e1       	ldi	r24, 0x14	; 20
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_write_byte>
                        motors_off();
    14b4:	53 98       	cbi	0x0a, 3	; 10
    14b6:	23 98       	cbi	0x04, 3	; 4
    14b8:	10 92 b4 00 	sts	0x00B4, r1
    14bc:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 1b 01 	sts	0x011B, r24
    14c6:	80 91 76 01 	lds	r24, 0x0176
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    14ca:	81 11       	cpse	r24, r1
    14cc:	5f cf       	rjmp	.-322    	; 0x138c <__vector_23+0x240>
    14ce:	7e ce       	rjmp	.-772    	; 0x11cc <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    14d0:	88 23       	and	r24, r24
    14d2:	39 f2       	breq	.-114    	; 0x1462 <__vector_23+0x316>
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	c9 f7       	brne	.-14     	; 0x14ca <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    14d8:	80 91 77 01 	lds	r24, 0x0177
    14dc:	90 91 78 01 	lds	r25, 0x0178
    14e0:	90 93 86 01 	sts	0x0186, r25
    14e4:	80 93 85 01 	sts	0x0185, r24
                    cur_motion = MOVE_STOP;
    14e8:	10 92 19 01 	sts	0x0119, r1
    14ec:	4f cf       	rjmp	.-354    	; 0x138c <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14ee:	80 91 19 01 	lds	r24, 0x0119
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	71 f1       	breq	.+92     	; 0x1552 <__vector_23+0x406>
    14f6:	80 91 7a 01 	lds	r24, 0x017A
                        prev_motion = MOVE_STOP;
    14fa:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_RIGHT;
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_right = calibmsg->turn_right;
    1504:	80 93 75 01 	sts	0x0175, r24
    1508:	41 cf       	rjmp	.-382    	; 0x138c <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 19 01 	sts	0x0119, r24
    1510:	5d ce       	rjmp	.-838    	; 0x11cc <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1512:	80 91 19 01 	lds	r24, 0x0119
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	51 f0       	breq	.+20     	; 0x152e <__vector_23+0x3e2>
    151a:	80 91 79 01 	lds	r24, 0x0179
                        prev_motion = MOVE_STOP;
    151e:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_LEFT;
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_left = calibmsg->turn_left;
    1528:	80 93 89 01 	sts	0x0189, r24
    152c:	2f cf       	rjmp	.-418    	; 0x138c <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    152e:	80 91 79 01 	lds	r24, 0x0179
    1532:	90 91 89 01 	lds	r25, 0x0189
    1536:	89 13       	cpse	r24, r25
    1538:	f2 cf       	rjmp	.-28     	; 0x151e <__vector_23+0x3d2>
    153a:	28 cf       	rjmp	.-432    	; 0x138c <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    153c:	80 91 88 01 	lds	r24, 0x0188
    1540:	98 13       	cpse	r25, r24
    1542:	19 cf       	rjmp	.-462    	; 0x1376 <__vector_23+0x22a>
    1544:	80 91 7b 01 	lds	r24, 0x017B
    1548:	20 91 87 01 	lds	r18, 0x0187
    154c:	82 13       	cpse	r24, r18
    154e:	15 cf       	rjmp	.-470    	; 0x137a <__vector_23+0x22e>
    1550:	1d cf       	rjmp	.-454    	; 0x138c <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1552:	80 91 7a 01 	lds	r24, 0x017A
    1556:	90 91 75 01 	lds	r25, 0x0175
    155a:	89 13       	cpse	r24, r25
    155c:	ce cf       	rjmp	.-100    	; 0x14fa <__vector_23+0x3ae>
    155e:	16 cf       	rjmp	.-468    	; 0x138c <__vector_23+0x240>

00001560 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1560:	fc 01       	movw	r30, r24
    1562:	ac 01       	movw	r20, r24
    1564:	46 5f       	subi	r20, 0xF6	; 246
    1566:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    156c:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    156e:	82 27       	eor	r24, r18
    1570:	08 2e       	mov	r0, r24
    1572:	82 95       	swap	r24
    1574:	80 7f       	andi	r24, 0xF0	; 240
    1576:	80 25       	eor	r24, r0
    1578:	09 2e       	mov	r0, r25
    157a:	98 2f       	mov	r25, r24
    157c:	82 95       	swap	r24
    157e:	8f 70       	andi	r24, 0x0F	; 15
    1580:	08 26       	eor	r0, r24
    1582:	86 95       	lsr	r24
    1584:	98 27       	eor	r25, r24
    1586:	89 27       	eor	r24, r25
    1588:	88 0f       	add	r24, r24
    158a:	88 0f       	add	r24, r24
    158c:	88 0f       	add	r24, r24
    158e:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1590:	e4 17       	cp	r30, r20
    1592:	f5 07       	cpc	r31, r21
    1594:	59 f7       	brne	.-42     	; 0x156c <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1596:	08 95       	ret

00001598 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1598:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    159a:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    159c:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    159e:	20 91 49 01 	lds	r18, 0x0149
    or tmpreg1, ddrreg
    15a2:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    15a4:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15a8:	30 91 49 01 	lds	r19, 0x0149
    15ac:	20 30       	cpi	r18, 0x00	; 0
    15ae:	29 f0       	breq	.+10     	; 0x15ba <message_send+0x22>
    15b0:	00 00       	nop
    15b2:	25 b1       	in	r18, 0x05	; 5
    15b4:	23 2b       	or	r18, r19
    15b6:	25 b9       	out	0x05, r18	; 5
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <message_send+0x2a>
    15ba:	00 00       	nop
    15bc:	00 00       	nop
    15be:	00 00       	nop
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <message_send+0x2a>
    15c2:	00 00       	nop
    15c4:	00 00       	nop
    15c6:	00 00       	nop
    15c8:	30 95       	com	r19
    15ca:	25 b1       	in	r18, 0x05	; 5
    15cc:	23 23       	and	r18, r19
    15ce:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    15d0:	2e ea       	ldi	r18, 0xAE	; 174
    15d2:	2a 95       	dec	r18
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    15d6:	2b ee       	ldi	r18, 0xEB	; 235

000015d8 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    15d8:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    15da:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    15dc:	0a c0       	rjmp	.+20     	; 0x15f2 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15de:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15e0:	30 91 49 01 	lds	r19, 0x0149
    com tmpreg2
    15e4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15e6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15e8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15ea:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15ec:	0f be       	out	0x3f, r0	; 63
    return 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	08 95       	ret

000015f2 <nocollision>:
nocollision:
    nop
    15f2:	00 00       	nop
    dec tmpreg1
    15f4:	2a 95       	dec	r18
    brne checkcollision
    15f6:	81 f7       	brne	.-32     	; 0x15d8 <checkcollision>

    ldi tmpreg1, 0x01
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15fa:	30 91 49 01 	lds	r19, 0x0149
    15fe:	20 30       	cpi	r18, 0x00	; 0
    1600:	29 f0       	breq	.+10     	; 0x160c <nocollision+0x1a>
    1602:	00 00       	nop
    1604:	25 b1       	in	r18, 0x05	; 5
    1606:	23 2b       	or	r18, r19
    1608:	25 b9       	out	0x05, r18	; 5
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <nocollision+0x22>
    160c:	00 00       	nop
    160e:	00 00       	nop
    1610:	00 00       	nop
    1612:	00 c0       	rjmp	.+0      	; 0x1614 <nocollision+0x22>
    1614:	00 00       	nop
    1616:	00 00       	nop
    1618:	00 00       	nop
    161a:	30 95       	com	r19
    161c:	25 b1       	in	r18, 0x05	; 5
    161e:	23 23       	and	r18, r19
    1620:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1622:	00 00       	nop
    1624:	24 e5       	ldi	r18, 0x54	; 84
    1626:	2a 95       	dec	r18
    1628:	f1 f7       	brne	.-4      	; 0x1626 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    162a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    162c:	8c e0       	ldi	r24, 0x0C	; 12

0000162e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    162e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1630:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1632:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1634:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1636:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1638:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    163a:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    163c:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    163e:	50 e0       	ldi	r21, 0x00	; 0

00001640 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1640:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1642:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1644:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1646:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1648:	30 91 49 01 	lds	r19, 0x0149
    164c:	20 30       	cpi	r18, 0x00	; 0
    164e:	29 f0       	breq	.+10     	; 0x165a <sendbit+0x1a>
    1650:	00 00       	nop
    1652:	25 b1       	in	r18, 0x05	; 5
    1654:	23 2b       	or	r18, r19
    1656:	25 b9       	out	0x05, r18	; 5
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <sendbit+0x22>
    165a:	00 00       	nop
    165c:	00 00       	nop
    165e:	00 00       	nop
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <sendbit+0x22>
    1662:	00 00       	nop
    1664:	00 00       	nop
    1666:	00 00       	nop
    1668:	30 95       	com	r19
    166a:	25 b1       	in	r18, 0x05	; 5
    166c:	23 23       	and	r18, r19
    166e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1670:	00 00       	nop
    1672:	21 e5       	ldi	r18, 0x51	; 81
    1674:	2a 95       	dec	r18
    1676:	f1 f7       	brne	.-4      	; 0x1674 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1678:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    167a:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    167c:	9a 95       	dec	r25
    brne sendbit
    167e:	01 f7       	brne	.-64     	; 0x1640 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1680:	8a 95       	dec	r24
    brne sendbyte
    1682:	a9 f6       	brne	.-86     	; 0x162e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1684:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1686:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1688:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    168a:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    168c:	30 91 49 01 	lds	r19, 0x0149
    com tmpreg2
    1690:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1692:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1694:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1696:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1698:	0f be       	out	0x3f, r0	; 63
    return 1
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	08 95       	ret

0000169e <main>:
    }
}

int main()
{
  kilo_init();
    169e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <kilo_init>
  kilo_message_rx = message_rx;
    16a2:	85 e8       	ldi	r24, 0x85	; 133
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	90 93 08 01 	sts	0x0108, r25
    16aa:	80 93 07 01 	sts	0x0107, r24
  kilo_message_tx = message_tx;
    16ae:	82 e8       	ldi	r24, 0x82	; 130
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	90 93 06 01 	sts	0x0106, r25
    16b6:	80 93 05 01 	sts	0x0105, r24
  kilo_start(setup, loop);
    16ba:	6b e9       	ldi	r22, 0x9B	; 155
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	81 e7       	ldi	r24, 0x71	; 113
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <kilo_start>
    
  return 0;
}
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	08 95       	ret

000016cc <__divmodhi4>:
    16cc:	97 fb       	bst	r25, 7
    16ce:	07 2e       	mov	r0, r23
    16d0:	16 f4       	brtc	.+4      	; 0x16d6 <__divmodhi4+0xa>
    16d2:	00 94       	com	r0
    16d4:	07 d0       	rcall	.+14     	; 0x16e4 <__divmodhi4_neg1>
    16d6:	77 fd       	sbrc	r23, 7
    16d8:	09 d0       	rcall	.+18     	; 0x16ec <__divmodhi4_neg2>
    16da:	0e 94 8f 0b 	call	0x171e	; 0x171e <__udivmodhi4>
    16de:	07 fc       	sbrc	r0, 7
    16e0:	05 d0       	rcall	.+10     	; 0x16ec <__divmodhi4_neg2>
    16e2:	3e f4       	brtc	.+14     	; 0x16f2 <__divmodhi4_exit>

000016e4 <__divmodhi4_neg1>:
    16e4:	90 95       	com	r25
    16e6:	81 95       	neg	r24
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	08 95       	ret

000016ec <__divmodhi4_neg2>:
    16ec:	70 95       	com	r23
    16ee:	61 95       	neg	r22
    16f0:	7f 4f       	sbci	r23, 0xFF	; 255

000016f2 <__divmodhi4_exit>:
    16f2:	08 95       	ret

000016f4 <__tablejump2__>:
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	05 90       	lpm	r0, Z+
    16fa:	f4 91       	lpm	r31, Z
    16fc:	e0 2d       	mov	r30, r0
    16fe:	09 94       	ijmp

00001700 <__umulhisi3>:
    1700:	a2 9f       	mul	r26, r18
    1702:	b0 01       	movw	r22, r0
    1704:	b3 9f       	mul	r27, r19
    1706:	c0 01       	movw	r24, r0
    1708:	a3 9f       	mul	r26, r19
    170a:	70 0d       	add	r23, r0
    170c:	81 1d       	adc	r24, r1
    170e:	11 24       	eor	r1, r1
    1710:	91 1d       	adc	r25, r1
    1712:	b2 9f       	mul	r27, r18
    1714:	70 0d       	add	r23, r0
    1716:	81 1d       	adc	r24, r1
    1718:	11 24       	eor	r1, r1
    171a:	91 1d       	adc	r25, r1
    171c:	08 95       	ret

0000171e <__udivmodhi4>:
    171e:	aa 1b       	sub	r26, r26
    1720:	bb 1b       	sub	r27, r27
    1722:	51 e1       	ldi	r21, 0x11	; 17
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <__udivmodhi4_ep>

00001726 <__udivmodhi4_loop>:
    1726:	aa 1f       	adc	r26, r26
    1728:	bb 1f       	adc	r27, r27
    172a:	a6 17       	cp	r26, r22
    172c:	b7 07       	cpc	r27, r23
    172e:	10 f0       	brcs	.+4      	; 0x1734 <__udivmodhi4_ep>
    1730:	a6 1b       	sub	r26, r22
    1732:	b7 0b       	sbc	r27, r23

00001734 <__udivmodhi4_ep>:
    1734:	88 1f       	adc	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	5a 95       	dec	r21
    173a:	a9 f7       	brne	.-22     	; 0x1726 <__udivmodhi4_loop>
    173c:	80 95       	com	r24
    173e:	90 95       	com	r25
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	08 95       	ret

00001746 <__subsf3>:
    1746:	50 58       	subi	r21, 0x80	; 128

00001748 <__addsf3>:
    1748:	bb 27       	eor	r27, r27
    174a:	aa 27       	eor	r26, r26
    174c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__addsf3x>
    1750:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_round>
    1754:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__fp_pscA>
    1758:	38 f0       	brcs	.+14     	; 0x1768 <__addsf3+0x20>
    175a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__fp_pscB>
    175e:	20 f0       	brcs	.+8      	; 0x1768 <__addsf3+0x20>
    1760:	39 f4       	brne	.+14     	; 0x1770 <__addsf3+0x28>
    1762:	9f 3f       	cpi	r25, 0xFF	; 255
    1764:	19 f4       	brne	.+6      	; 0x176c <__addsf3+0x24>
    1766:	26 f4       	brtc	.+8      	; 0x1770 <__addsf3+0x28>
    1768:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__fp_nan>
    176c:	0e f4       	brtc	.+2      	; 0x1770 <__addsf3+0x28>
    176e:	e0 95       	com	r30
    1770:	e7 fb       	bst	r30, 7
    1772:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_inf>

00001776 <__addsf3x>:
    1776:	e9 2f       	mov	r30, r25
    1778:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fp_split3>
    177c:	58 f3       	brcs	.-42     	; 0x1754 <__addsf3+0xc>
    177e:	ba 17       	cp	r27, r26
    1780:	62 07       	cpc	r22, r18
    1782:	73 07       	cpc	r23, r19
    1784:	84 07       	cpc	r24, r20
    1786:	95 07       	cpc	r25, r21
    1788:	20 f0       	brcs	.+8      	; 0x1792 <__addsf3x+0x1c>
    178a:	79 f4       	brne	.+30     	; 0x17aa <__addsf3x+0x34>
    178c:	a6 f5       	brtc	.+104    	; 0x17f6 <__addsf3x+0x80>
    178e:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_zero>
    1792:	0e f4       	brtc	.+2      	; 0x1796 <__addsf3x+0x20>
    1794:	e0 95       	com	r30
    1796:	0b 2e       	mov	r0, r27
    1798:	ba 2f       	mov	r27, r26
    179a:	a0 2d       	mov	r26, r0
    179c:	0b 01       	movw	r0, r22
    179e:	b9 01       	movw	r22, r18
    17a0:	90 01       	movw	r18, r0
    17a2:	0c 01       	movw	r0, r24
    17a4:	ca 01       	movw	r24, r20
    17a6:	a0 01       	movw	r20, r0
    17a8:	11 24       	eor	r1, r1
    17aa:	ff 27       	eor	r31, r31
    17ac:	59 1b       	sub	r21, r25
    17ae:	99 f0       	breq	.+38     	; 0x17d6 <__addsf3x+0x60>
    17b0:	59 3f       	cpi	r21, 0xF9	; 249
    17b2:	50 f4       	brcc	.+20     	; 0x17c8 <__addsf3x+0x52>
    17b4:	50 3e       	cpi	r21, 0xE0	; 224
    17b6:	68 f1       	brcs	.+90     	; 0x1812 <__addsf3x+0x9c>
    17b8:	1a 16       	cp	r1, r26
    17ba:	f0 40       	sbci	r31, 0x00	; 0
    17bc:	a2 2f       	mov	r26, r18
    17be:	23 2f       	mov	r18, r19
    17c0:	34 2f       	mov	r19, r20
    17c2:	44 27       	eor	r20, r20
    17c4:	58 5f       	subi	r21, 0xF8	; 248
    17c6:	f3 cf       	rjmp	.-26     	; 0x17ae <__addsf3x+0x38>
    17c8:	46 95       	lsr	r20
    17ca:	37 95       	ror	r19
    17cc:	27 95       	ror	r18
    17ce:	a7 95       	ror	r26
    17d0:	f0 40       	sbci	r31, 0x00	; 0
    17d2:	53 95       	inc	r21
    17d4:	c9 f7       	brne	.-14     	; 0x17c8 <__addsf3x+0x52>
    17d6:	7e f4       	brtc	.+30     	; 0x17f6 <__addsf3x+0x80>
    17d8:	1f 16       	cp	r1, r31
    17da:	ba 0b       	sbc	r27, r26
    17dc:	62 0b       	sbc	r22, r18
    17de:	73 0b       	sbc	r23, r19
    17e0:	84 0b       	sbc	r24, r20
    17e2:	ba f0       	brmi	.+46     	; 0x1812 <__addsf3x+0x9c>
    17e4:	91 50       	subi	r25, 0x01	; 1
    17e6:	a1 f0       	breq	.+40     	; 0x1810 <__addsf3x+0x9a>
    17e8:	ff 0f       	add	r31, r31
    17ea:	bb 1f       	adc	r27, r27
    17ec:	66 1f       	adc	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	88 1f       	adc	r24, r24
    17f2:	c2 f7       	brpl	.-16     	; 0x17e4 <__addsf3x+0x6e>
    17f4:	0e c0       	rjmp	.+28     	; 0x1812 <__addsf3x+0x9c>
    17f6:	ba 0f       	add	r27, r26
    17f8:	62 1f       	adc	r22, r18
    17fa:	73 1f       	adc	r23, r19
    17fc:	84 1f       	adc	r24, r20
    17fe:	48 f4       	brcc	.+18     	; 0x1812 <__addsf3x+0x9c>
    1800:	87 95       	ror	r24
    1802:	77 95       	ror	r23
    1804:	67 95       	ror	r22
    1806:	b7 95       	ror	r27
    1808:	f7 95       	ror	r31
    180a:	9e 3f       	cpi	r25, 0xFE	; 254
    180c:	08 f0       	brcs	.+2      	; 0x1810 <__addsf3x+0x9a>
    180e:	b0 cf       	rjmp	.-160    	; 0x1770 <__addsf3+0x28>
    1810:	93 95       	inc	r25
    1812:	88 0f       	add	r24, r24
    1814:	08 f0       	brcs	.+2      	; 0x1818 <__addsf3x+0xa2>
    1816:	99 27       	eor	r25, r25
    1818:	ee 0f       	add	r30, r30
    181a:	97 95       	ror	r25
    181c:	87 95       	ror	r24
    181e:	08 95       	ret

00001820 <__divsf3>:
    1820:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divsf3x>
    1824:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_round>
    1828:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__fp_pscB>
    182c:	58 f0       	brcs	.+22     	; 0x1844 <__divsf3+0x24>
    182e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__fp_pscA>
    1832:	40 f0       	brcs	.+16     	; 0x1844 <__divsf3+0x24>
    1834:	29 f4       	brne	.+10     	; 0x1840 <__divsf3+0x20>
    1836:	5f 3f       	cpi	r21, 0xFF	; 255
    1838:	29 f0       	breq	.+10     	; 0x1844 <__divsf3+0x24>
    183a:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_inf>
    183e:	51 11       	cpse	r21, r1
    1840:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_szero>
    1844:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__fp_nan>

00001848 <__divsf3x>:
    1848:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fp_split3>
    184c:	68 f3       	brcs	.-38     	; 0x1828 <__divsf3+0x8>

0000184e <__divsf3_pse>:
    184e:	99 23       	and	r25, r25
    1850:	b1 f3       	breq	.-20     	; 0x183e <__divsf3+0x1e>
    1852:	55 23       	and	r21, r21
    1854:	91 f3       	breq	.-28     	; 0x183a <__divsf3+0x1a>
    1856:	95 1b       	sub	r25, r21
    1858:	55 0b       	sbc	r21, r21
    185a:	bb 27       	eor	r27, r27
    185c:	aa 27       	eor	r26, r26
    185e:	62 17       	cp	r22, r18
    1860:	73 07       	cpc	r23, r19
    1862:	84 07       	cpc	r24, r20
    1864:	38 f0       	brcs	.+14     	; 0x1874 <__divsf3_pse+0x26>
    1866:	9f 5f       	subi	r25, 0xFF	; 255
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	44 1f       	adc	r20, r20
    1870:	aa 1f       	adc	r26, r26
    1872:	a9 f3       	breq	.-22     	; 0x185e <__divsf3_pse+0x10>
    1874:	35 d0       	rcall	.+106    	; 0x18e0 <__divsf3_pse+0x92>
    1876:	0e 2e       	mov	r0, r30
    1878:	3a f0       	brmi	.+14     	; 0x1888 <__divsf3_pse+0x3a>
    187a:	e0 e8       	ldi	r30, 0x80	; 128
    187c:	32 d0       	rcall	.+100    	; 0x18e2 <__divsf3_pse+0x94>
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	50 40       	sbci	r21, 0x00	; 0
    1882:	e6 95       	lsr	r30
    1884:	00 1c       	adc	r0, r0
    1886:	ca f7       	brpl	.-14     	; 0x187a <__divsf3_pse+0x2c>
    1888:	2b d0       	rcall	.+86     	; 0x18e0 <__divsf3_pse+0x92>
    188a:	fe 2f       	mov	r31, r30
    188c:	29 d0       	rcall	.+82     	; 0x18e0 <__divsf3_pse+0x92>
    188e:	66 0f       	add	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	bb 1f       	adc	r27, r27
    1896:	26 17       	cp	r18, r22
    1898:	37 07       	cpc	r19, r23
    189a:	48 07       	cpc	r20, r24
    189c:	ab 07       	cpc	r26, r27
    189e:	b0 e8       	ldi	r27, 0x80	; 128
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <__divsf3_pse+0x56>
    18a2:	bb 0b       	sbc	r27, r27
    18a4:	80 2d       	mov	r24, r0
    18a6:	bf 01       	movw	r22, r30
    18a8:	ff 27       	eor	r31, r31
    18aa:	93 58       	subi	r25, 0x83	; 131
    18ac:	5f 4f       	sbci	r21, 0xFF	; 255
    18ae:	3a f0       	brmi	.+14     	; 0x18be <__divsf3_pse+0x70>
    18b0:	9e 3f       	cpi	r25, 0xFE	; 254
    18b2:	51 05       	cpc	r21, r1
    18b4:	78 f0       	brcs	.+30     	; 0x18d4 <__divsf3_pse+0x86>
    18b6:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_inf>
    18ba:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_szero>
    18be:	5f 3f       	cpi	r21, 0xFF	; 255
    18c0:	e4 f3       	brlt	.-8      	; 0x18ba <__divsf3_pse+0x6c>
    18c2:	98 3e       	cpi	r25, 0xE8	; 232
    18c4:	d4 f3       	brlt	.-12     	; 0x18ba <__divsf3_pse+0x6c>
    18c6:	86 95       	lsr	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f7 95       	ror	r31
    18d0:	9f 5f       	subi	r25, 0xFF	; 255
    18d2:	c9 f7       	brne	.-14     	; 0x18c6 <__divsf3_pse+0x78>
    18d4:	88 0f       	add	r24, r24
    18d6:	91 1d       	adc	r25, r1
    18d8:	96 95       	lsr	r25
    18da:	87 95       	ror	r24
    18dc:	97 f9       	bld	r25, 7
    18de:	08 95       	ret
    18e0:	e1 e0       	ldi	r30, 0x01	; 1
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	bb 1f       	adc	r27, r27
    18ea:	62 17       	cp	r22, r18
    18ec:	73 07       	cpc	r23, r19
    18ee:	84 07       	cpc	r24, r20
    18f0:	ba 07       	cpc	r27, r26
    18f2:	20 f0       	brcs	.+8      	; 0x18fc <__divsf3_pse+0xae>
    18f4:	62 1b       	sub	r22, r18
    18f6:	73 0b       	sbc	r23, r19
    18f8:	84 0b       	sbc	r24, r20
    18fa:	ba 0b       	sbc	r27, r26
    18fc:	ee 1f       	adc	r30, r30
    18fe:	88 f7       	brcc	.-30     	; 0x18e2 <__divsf3_pse+0x94>
    1900:	e0 95       	com	r30
    1902:	08 95       	ret

00001904 <__fixsfsi>:
    1904:	0e 94 89 0c 	call	0x1912	; 0x1912 <__fixunssfsi>
    1908:	68 94       	set
    190a:	b1 11       	cpse	r27, r1
    190c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_szero>
    1910:	08 95       	ret

00001912 <__fixunssfsi>:
    1912:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fp_splitA>
    1916:	88 f0       	brcs	.+34     	; 0x193a <__fixunssfsi+0x28>
    1918:	9f 57       	subi	r25, 0x7F	; 127
    191a:	98 f0       	brcs	.+38     	; 0x1942 <__fixunssfsi+0x30>
    191c:	b9 2f       	mov	r27, r25
    191e:	99 27       	eor	r25, r25
    1920:	b7 51       	subi	r27, 0x17	; 23
    1922:	b0 f0       	brcs	.+44     	; 0x1950 <__fixunssfsi+0x3e>
    1924:	e1 f0       	breq	.+56     	; 0x195e <__fixunssfsi+0x4c>
    1926:	66 0f       	add	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	88 1f       	adc	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	1a f0       	brmi	.+6      	; 0x1936 <__fixunssfsi+0x24>
    1930:	ba 95       	dec	r27
    1932:	c9 f7       	brne	.-14     	; 0x1926 <__fixunssfsi+0x14>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <__fixunssfsi+0x4c>
    1936:	b1 30       	cpi	r27, 0x01	; 1
    1938:	91 f0       	breq	.+36     	; 0x195e <__fixunssfsi+0x4c>
    193a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_zero>
    193e:	b1 e0       	ldi	r27, 0x01	; 1
    1940:	08 95       	ret
    1942:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_zero>
    1946:	67 2f       	mov	r22, r23
    1948:	78 2f       	mov	r23, r24
    194a:	88 27       	eor	r24, r24
    194c:	b8 5f       	subi	r27, 0xF8	; 248
    194e:	39 f0       	breq	.+14     	; 0x195e <__fixunssfsi+0x4c>
    1950:	b9 3f       	cpi	r27, 0xF9	; 249
    1952:	cc f3       	brlt	.-14     	; 0x1946 <__fixunssfsi+0x34>
    1954:	86 95       	lsr	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b3 95       	inc	r27
    195c:	d9 f7       	brne	.-10     	; 0x1954 <__fixunssfsi+0x42>
    195e:	3e f4       	brtc	.+14     	; 0x196e <__fixunssfsi+0x5c>
    1960:	90 95       	com	r25
    1962:	80 95       	com	r24
    1964:	70 95       	com	r23
    1966:	61 95       	neg	r22
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	8f 4f       	sbci	r24, 0xFF	; 255
    196c:	9f 4f       	sbci	r25, 0xFF	; 255
    196e:	08 95       	ret

00001970 <__floatunsisf>:
    1970:	e8 94       	clt
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <__floatsisf+0x12>

00001974 <__floatsisf>:
    1974:	97 fb       	bst	r25, 7
    1976:	3e f4       	brtc	.+14     	; 0x1986 <__floatsisf+0x12>
    1978:	90 95       	com	r25
    197a:	80 95       	com	r24
    197c:	70 95       	com	r23
    197e:	61 95       	neg	r22
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	99 23       	and	r25, r25
    1988:	a9 f0       	breq	.+42     	; 0x19b4 <__floatsisf+0x40>
    198a:	f9 2f       	mov	r31, r25
    198c:	96 e9       	ldi	r25, 0x96	; 150
    198e:	bb 27       	eor	r27, r27
    1990:	93 95       	inc	r25
    1992:	f6 95       	lsr	r31
    1994:	87 95       	ror	r24
    1996:	77 95       	ror	r23
    1998:	67 95       	ror	r22
    199a:	b7 95       	ror	r27
    199c:	f1 11       	cpse	r31, r1
    199e:	f8 cf       	rjmp	.-16     	; 0x1990 <__floatsisf+0x1c>
    19a0:	fa f4       	brpl	.+62     	; 0x19e0 <__floatsisf+0x6c>
    19a2:	bb 0f       	add	r27, r27
    19a4:	11 f4       	brne	.+4      	; 0x19aa <__floatsisf+0x36>
    19a6:	60 ff       	sbrs	r22, 0
    19a8:	1b c0       	rjmp	.+54     	; 0x19e0 <__floatsisf+0x6c>
    19aa:	6f 5f       	subi	r22, 0xFF	; 255
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	8f 4f       	sbci	r24, 0xFF	; 255
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	16 c0       	rjmp	.+44     	; 0x19e0 <__floatsisf+0x6c>
    19b4:	88 23       	and	r24, r24
    19b6:	11 f0       	breq	.+4      	; 0x19bc <__floatsisf+0x48>
    19b8:	96 e9       	ldi	r25, 0x96	; 150
    19ba:	11 c0       	rjmp	.+34     	; 0x19de <__floatsisf+0x6a>
    19bc:	77 23       	and	r23, r23
    19be:	21 f0       	breq	.+8      	; 0x19c8 <__floatsisf+0x54>
    19c0:	9e e8       	ldi	r25, 0x8E	; 142
    19c2:	87 2f       	mov	r24, r23
    19c4:	76 2f       	mov	r23, r22
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <__floatsisf+0x5e>
    19c8:	66 23       	and	r22, r22
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <__floatsisf+0x74>
    19cc:	96 e8       	ldi	r25, 0x86	; 134
    19ce:	86 2f       	mov	r24, r22
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	2a f0       	brmi	.+10     	; 0x19e0 <__floatsisf+0x6c>
    19d6:	9a 95       	dec	r25
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	88 1f       	adc	r24, r24
    19de:	da f7       	brpl	.-10     	; 0x19d6 <__floatsisf+0x62>
    19e0:	88 0f       	add	r24, r24
    19e2:	96 95       	lsr	r25
    19e4:	87 95       	ror	r24
    19e6:	97 f9       	bld	r25, 7
    19e8:	08 95       	ret

000019ea <__fp_inf>:
    19ea:	97 f9       	bld	r25, 7
    19ec:	9f 67       	ori	r25, 0x7F	; 127
    19ee:	80 e8       	ldi	r24, 0x80	; 128
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	08 95       	ret

000019f6 <__fp_nan>:
    19f6:	9f ef       	ldi	r25, 0xFF	; 255
    19f8:	80 ec       	ldi	r24, 0xC0	; 192
    19fa:	08 95       	ret

000019fc <__fp_pscA>:
    19fc:	00 24       	eor	r0, r0
    19fe:	0a 94       	dec	r0
    1a00:	16 16       	cp	r1, r22
    1a02:	17 06       	cpc	r1, r23
    1a04:	18 06       	cpc	r1, r24
    1a06:	09 06       	cpc	r0, r25
    1a08:	08 95       	ret

00001a0a <__fp_pscB>:
    1a0a:	00 24       	eor	r0, r0
    1a0c:	0a 94       	dec	r0
    1a0e:	12 16       	cp	r1, r18
    1a10:	13 06       	cpc	r1, r19
    1a12:	14 06       	cpc	r1, r20
    1a14:	05 06       	cpc	r0, r21
    1a16:	08 95       	ret

00001a18 <__fp_round>:
    1a18:	09 2e       	mov	r0, r25
    1a1a:	03 94       	inc	r0
    1a1c:	00 0c       	add	r0, r0
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <__fp_round+0xc>
    1a20:	88 23       	and	r24, r24
    1a22:	52 f0       	brmi	.+20     	; 0x1a38 <__fp_round+0x20>
    1a24:	bb 0f       	add	r27, r27
    1a26:	40 f4       	brcc	.+16     	; 0x1a38 <__fp_round+0x20>
    1a28:	bf 2b       	or	r27, r31
    1a2a:	11 f4       	brne	.+4      	; 0x1a30 <__fp_round+0x18>
    1a2c:	60 ff       	sbrs	r22, 0
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <__fp_round+0x20>
    1a30:	6f 5f       	subi	r22, 0xFF	; 255
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	8f 4f       	sbci	r24, 0xFF	; 255
    1a36:	9f 4f       	sbci	r25, 0xFF	; 255
    1a38:	08 95       	ret

00001a3a <__fp_split3>:
    1a3a:	57 fd       	sbrc	r21, 7
    1a3c:	90 58       	subi	r25, 0x80	; 128
    1a3e:	44 0f       	add	r20, r20
    1a40:	55 1f       	adc	r21, r21
    1a42:	59 f0       	breq	.+22     	; 0x1a5a <__fp_splitA+0x10>
    1a44:	5f 3f       	cpi	r21, 0xFF	; 255
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <__fp_splitA+0x1a>
    1a48:	47 95       	ror	r20

00001a4a <__fp_splitA>:
    1a4a:	88 0f       	add	r24, r24
    1a4c:	97 fb       	bst	r25, 7
    1a4e:	99 1f       	adc	r25, r25
    1a50:	61 f0       	breq	.+24     	; 0x1a6a <__fp_splitA+0x20>
    1a52:	9f 3f       	cpi	r25, 0xFF	; 255
    1a54:	79 f0       	breq	.+30     	; 0x1a74 <__fp_splitA+0x2a>
    1a56:	87 95       	ror	r24
    1a58:	08 95       	ret
    1a5a:	12 16       	cp	r1, r18
    1a5c:	13 06       	cpc	r1, r19
    1a5e:	14 06       	cpc	r1, r20
    1a60:	55 1f       	adc	r21, r21
    1a62:	f2 cf       	rjmp	.-28     	; 0x1a48 <__fp_split3+0xe>
    1a64:	46 95       	lsr	r20
    1a66:	f1 df       	rcall	.-30     	; 0x1a4a <__fp_splitA>
    1a68:	08 c0       	rjmp	.+16     	; 0x1a7a <__fp_splitA+0x30>
    1a6a:	16 16       	cp	r1, r22
    1a6c:	17 06       	cpc	r1, r23
    1a6e:	18 06       	cpc	r1, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	f1 cf       	rjmp	.-30     	; 0x1a56 <__fp_splitA+0xc>
    1a74:	86 95       	lsr	r24
    1a76:	71 05       	cpc	r23, r1
    1a78:	61 05       	cpc	r22, r1
    1a7a:	08 94       	sec
    1a7c:	08 95       	ret

00001a7e <__fp_zero>:
    1a7e:	e8 94       	clt

00001a80 <__fp_szero>:
    1a80:	bb 27       	eor	r27, r27
    1a82:	66 27       	eor	r22, r22
    1a84:	77 27       	eor	r23, r23
    1a86:	cb 01       	movw	r24, r22
    1a88:	97 f9       	bld	r25, 7
    1a8a:	08 95       	ret

00001a8c <__mulsf3>:
    1a8c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__mulsf3x>
    1a90:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_round>
    1a94:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__fp_pscA>
    1a98:	38 f0       	brcs	.+14     	; 0x1aa8 <__mulsf3+0x1c>
    1a9a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__fp_pscB>
    1a9e:	20 f0       	brcs	.+8      	; 0x1aa8 <__mulsf3+0x1c>
    1aa0:	95 23       	and	r25, r21
    1aa2:	11 f0       	breq	.+4      	; 0x1aa8 <__mulsf3+0x1c>
    1aa4:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_inf>
    1aa8:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__fp_nan>
    1aac:	11 24       	eor	r1, r1
    1aae:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_szero>

00001ab2 <__mulsf3x>:
    1ab2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fp_split3>
    1ab6:	70 f3       	brcs	.-36     	; 0x1a94 <__mulsf3+0x8>

00001ab8 <__mulsf3_pse>:
    1ab8:	95 9f       	mul	r25, r21
    1aba:	c1 f3       	breq	.-16     	; 0x1aac <__mulsf3+0x20>
    1abc:	95 0f       	add	r25, r21
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	55 1f       	adc	r21, r21
    1ac2:	62 9f       	mul	r22, r18
    1ac4:	f0 01       	movw	r30, r0
    1ac6:	72 9f       	mul	r23, r18
    1ac8:	bb 27       	eor	r27, r27
    1aca:	f0 0d       	add	r31, r0
    1acc:	b1 1d       	adc	r27, r1
    1ace:	63 9f       	mul	r22, r19
    1ad0:	aa 27       	eor	r26, r26
    1ad2:	f0 0d       	add	r31, r0
    1ad4:	b1 1d       	adc	r27, r1
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	64 9f       	mul	r22, r20
    1ada:	66 27       	eor	r22, r22
    1adc:	b0 0d       	add	r27, r0
    1ade:	a1 1d       	adc	r26, r1
    1ae0:	66 1f       	adc	r22, r22
    1ae2:	82 9f       	mul	r24, r18
    1ae4:	22 27       	eor	r18, r18
    1ae6:	b0 0d       	add	r27, r0
    1ae8:	a1 1d       	adc	r26, r1
    1aea:	62 1f       	adc	r22, r18
    1aec:	73 9f       	mul	r23, r19
    1aee:	b0 0d       	add	r27, r0
    1af0:	a1 1d       	adc	r26, r1
    1af2:	62 1f       	adc	r22, r18
    1af4:	83 9f       	mul	r24, r19
    1af6:	a0 0d       	add	r26, r0
    1af8:	61 1d       	adc	r22, r1
    1afa:	22 1f       	adc	r18, r18
    1afc:	74 9f       	mul	r23, r20
    1afe:	33 27       	eor	r19, r19
    1b00:	a0 0d       	add	r26, r0
    1b02:	61 1d       	adc	r22, r1
    1b04:	23 1f       	adc	r18, r19
    1b06:	84 9f       	mul	r24, r20
    1b08:	60 0d       	add	r22, r0
    1b0a:	21 1d       	adc	r18, r1
    1b0c:	82 2f       	mov	r24, r18
    1b0e:	76 2f       	mov	r23, r22
    1b10:	6a 2f       	mov	r22, r26
    1b12:	11 24       	eor	r1, r1
    1b14:	9f 57       	subi	r25, 0x7F	; 127
    1b16:	50 40       	sbci	r21, 0x00	; 0
    1b18:	9a f0       	brmi	.+38     	; 0x1b40 <__mulsf3_pse+0x88>
    1b1a:	f1 f0       	breq	.+60     	; 0x1b58 <__mulsf3_pse+0xa0>
    1b1c:	88 23       	and	r24, r24
    1b1e:	4a f0       	brmi	.+18     	; 0x1b32 <__mulsf3_pse+0x7a>
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	bb 1f       	adc	r27, r27
    1b26:	66 1f       	adc	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	91 50       	subi	r25, 0x01	; 1
    1b2e:	50 40       	sbci	r21, 0x00	; 0
    1b30:	a9 f7       	brne	.-22     	; 0x1b1c <__mulsf3_pse+0x64>
    1b32:	9e 3f       	cpi	r25, 0xFE	; 254
    1b34:	51 05       	cpc	r21, r1
    1b36:	80 f0       	brcs	.+32     	; 0x1b58 <__mulsf3_pse+0xa0>
    1b38:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_inf>
    1b3c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_szero>
    1b40:	5f 3f       	cpi	r21, 0xFF	; 255
    1b42:	e4 f3       	brlt	.-8      	; 0x1b3c <__mulsf3_pse+0x84>
    1b44:	98 3e       	cpi	r25, 0xE8	; 232
    1b46:	d4 f3       	brlt	.-12     	; 0x1b3c <__mulsf3_pse+0x84>
    1b48:	86 95       	lsr	r24
    1b4a:	77 95       	ror	r23
    1b4c:	67 95       	ror	r22
    1b4e:	b7 95       	ror	r27
    1b50:	f7 95       	ror	r31
    1b52:	e7 95       	ror	r30
    1b54:	9f 5f       	subi	r25, 0xFF	; 255
    1b56:	c1 f7       	brne	.-16     	; 0x1b48 <__mulsf3_pse+0x90>
    1b58:	fe 2b       	or	r31, r30
    1b5a:	88 0f       	add	r24, r24
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	96 95       	lsr	r25
    1b60:	87 95       	ror	r24
    1b62:	97 f9       	bld	r25, 7
    1b64:	08 95       	ret

00001b66 <do_rand>:
    1b66:	8f 92       	push	r8
    1b68:	9f 92       	push	r9
    1b6a:	af 92       	push	r10
    1b6c:	bf 92       	push	r11
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	ec 01       	movw	r28, r24
    1b7c:	68 81       	ld	r22, Y
    1b7e:	79 81       	ldd	r23, Y+1	; 0x01
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	61 15       	cp	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	81 05       	cpc	r24, r1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <do_rand+0x30>
    1b8e:	64 e2       	ldi	r22, 0x24	; 36
    1b90:	79 ed       	ldi	r23, 0xD9	; 217
    1b92:	8b e5       	ldi	r24, 0x5B	; 91
    1b94:	97 e0       	ldi	r25, 0x07	; 7
    1b96:	2d e1       	ldi	r18, 0x1D	; 29
    1b98:	33 ef       	ldi	r19, 0xF3	; 243
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__divmodsi4>
    1ba2:	49 01       	movw	r8, r18
    1ba4:	5a 01       	movw	r10, r20
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	a7 ea       	ldi	r26, 0xA7	; 167
    1bac:	b1 e4       	ldi	r27, 0x41	; 65
    1bae:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__muluhisi3>
    1bb2:	6b 01       	movw	r12, r22
    1bb4:	7c 01       	movw	r14, r24
    1bb6:	ac ee       	ldi	r26, 0xEC	; 236
    1bb8:	b4 ef       	ldi	r27, 0xF4	; 244
    1bba:	a5 01       	movw	r20, r10
    1bbc:	94 01       	movw	r18, r8
    1bbe:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__mulohisi3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8c 0d       	add	r24, r12
    1bc8:	9d 1d       	adc	r25, r13
    1bca:	ae 1d       	adc	r26, r14
    1bcc:	bf 1d       	adc	r27, r15
    1bce:	b7 ff       	sbrs	r27, 7
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <do_rand+0x72>
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	a1 09       	sbc	r26, r1
    1bd6:	b0 48       	sbci	r27, 0x80	; 128
    1bd8:	88 83       	st	Y, r24
    1bda:	99 83       	std	Y+1, r25	; 0x01
    1bdc:	aa 83       	std	Y+2, r26	; 0x02
    1bde:	bb 83       	std	Y+3, r27	; 0x03
    1be0:	9f 77       	andi	r25, 0x7F	; 127
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	df 90       	pop	r13
    1bec:	cf 90       	pop	r12
    1bee:	bf 90       	pop	r11
    1bf0:	af 90       	pop	r10
    1bf2:	9f 90       	pop	r9
    1bf4:	8f 90       	pop	r8
    1bf6:	08 95       	ret

00001bf8 <rand_r>:
    1bf8:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <do_rand>
    1bfc:	08 95       	ret

00001bfe <rand>:
    1bfe:	89 e0       	ldi	r24, 0x09	; 9
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <do_rand>
    1c06:	08 95       	ret

00001c08 <srand>:
    1c08:	a0 e0       	ldi	r26, 0x00	; 0
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	80 93 09 01 	sts	0x0109, r24
    1c10:	90 93 0a 01 	sts	0x010A, r25
    1c14:	a0 93 0b 01 	sts	0x010B, r26
    1c18:	b0 93 0c 01 	sts	0x010C, r27
    1c1c:	08 95       	ret

00001c1e <eeprom_read_byte>:
    1c1e:	f9 99       	sbic	0x1f, 1	; 31
    1c20:	fe cf       	rjmp	.-4      	; 0x1c1e <eeprom_read_byte>
    1c22:	92 bd       	out	0x22, r25	; 34
    1c24:	81 bd       	out	0x21, r24	; 33
    1c26:	f8 9a       	sbi	0x1f, 0	; 31
    1c28:	99 27       	eor	r25, r25
    1c2a:	80 b5       	in	r24, 0x20	; 32
    1c2c:	08 95       	ret

00001c2e <eeprom_write_byte>:
    1c2e:	26 2f       	mov	r18, r22

00001c30 <eeprom_write_r18>:
    1c30:	f9 99       	sbic	0x1f, 1	; 31
    1c32:	fe cf       	rjmp	.-4      	; 0x1c30 <eeprom_write_r18>
    1c34:	1f ba       	out	0x1f, r1	; 31
    1c36:	92 bd       	out	0x22, r25	; 34
    1c38:	81 bd       	out	0x21, r24	; 33
    1c3a:	20 bd       	out	0x20, r18	; 32
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	fa 9a       	sbi	0x1f, 2	; 31
    1c42:	f9 9a       	sbi	0x1f, 1	; 31
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	08 95       	ret

00001c4a <__divmodsi4>:
    1c4a:	05 2e       	mov	r0, r21
    1c4c:	97 fb       	bst	r25, 7
    1c4e:	1e f4       	brtc	.+6      	; 0x1c56 <__divmodsi4+0xc>
    1c50:	00 94       	com	r0
    1c52:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__negsi2>
    1c56:	57 fd       	sbrc	r21, 7
    1c58:	07 d0       	rcall	.+14     	; 0x1c68 <__divmodsi4_neg2>
    1c5a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__udivmodsi4>
    1c5e:	07 fc       	sbrc	r0, 7
    1c60:	03 d0       	rcall	.+6      	; 0x1c68 <__divmodsi4_neg2>
    1c62:	4e f4       	brtc	.+18     	; 0x1c76 <__divmodsi4_exit>
    1c64:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__negsi2>

00001c68 <__divmodsi4_neg2>:
    1c68:	50 95       	com	r21
    1c6a:	40 95       	com	r20
    1c6c:	30 95       	com	r19
    1c6e:	21 95       	neg	r18
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	4f 4f       	sbci	r20, 0xFF	; 255
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255

00001c76 <__divmodsi4_exit>:
    1c76:	08 95       	ret

00001c78 <__negsi2>:
    1c78:	90 95       	com	r25
    1c7a:	80 95       	com	r24
    1c7c:	70 95       	com	r23
    1c7e:	61 95       	neg	r22
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__muluhisi3>:
    1c88:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
    1c8c:	a5 9f       	mul	r26, r21
    1c8e:	90 0d       	add	r25, r0
    1c90:	b4 9f       	mul	r27, r20
    1c92:	90 0d       	add	r25, r0
    1c94:	a4 9f       	mul	r26, r20
    1c96:	80 0d       	add	r24, r0
    1c98:	91 1d       	adc	r25, r1
    1c9a:	11 24       	eor	r1, r1
    1c9c:	08 95       	ret

00001c9e <__mulshisi3>:
    1c9e:	b7 ff       	sbrs	r27, 7
    1ca0:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__muluhisi3>

00001ca4 <__mulohisi3>:
    1ca4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__muluhisi3>
    1ca8:	82 1b       	sub	r24, r18
    1caa:	93 0b       	sbc	r25, r19
    1cac:	08 95       	ret

00001cae <__udivmodsi4>:
    1cae:	a1 e2       	ldi	r26, 0x21	; 33
    1cb0:	1a 2e       	mov	r1, r26
    1cb2:	aa 1b       	sub	r26, r26
    1cb4:	bb 1b       	sub	r27, r27
    1cb6:	fd 01       	movw	r30, r26
    1cb8:	0d c0       	rjmp	.+26     	; 0x1cd4 <__udivmodsi4_ep>

00001cba <__udivmodsi4_loop>:
    1cba:	aa 1f       	adc	r26, r26
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	ee 1f       	adc	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	a2 17       	cp	r26, r18
    1cc4:	b3 07       	cpc	r27, r19
    1cc6:	e4 07       	cpc	r30, r20
    1cc8:	f5 07       	cpc	r31, r21
    1cca:	20 f0       	brcs	.+8      	; 0x1cd4 <__udivmodsi4_ep>
    1ccc:	a2 1b       	sub	r26, r18
    1cce:	b3 0b       	sbc	r27, r19
    1cd0:	e4 0b       	sbc	r30, r20
    1cd2:	f5 0b       	sbc	r31, r21

00001cd4 <__udivmodsi4_ep>:
    1cd4:	66 1f       	adc	r22, r22
    1cd6:	77 1f       	adc	r23, r23
    1cd8:	88 1f       	adc	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	1a 94       	dec	r1
    1cde:	69 f7       	brne	.-38     	; 0x1cba <__udivmodsi4_loop>
    1ce0:	60 95       	com	r22
    1ce2:	70 95       	com	r23
    1ce4:	80 95       	com	r24
    1ce6:	90 95       	com	r25
    1ce8:	9b 01       	movw	r18, r22
    1cea:	ac 01       	movw	r20, r24
    1cec:	bd 01       	movw	r22, r26
    1cee:	cf 01       	movw	r24, r30
    1cf0:	08 95       	ret

00001cf2 <_exit>:
    1cf2:	f8 94       	cli

00001cf4 <__stop_program>:
    1cf4:	ff cf       	rjmp	.-2      	; 0x1cf4 <__stop_program>
