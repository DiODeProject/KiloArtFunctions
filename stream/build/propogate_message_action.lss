
build/propogate_message_action.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	40 03       	mulsu	r20, r16
      6a:	bc 03       	fmulsu	r19, r20
      6c:	14 03       	mulsu	r17, r20
      6e:	0b 03       	fmul	r16, r19
      70:	11 03       	mulsu	r17, r17
      72:	9e 03       	fmulsu	r17, r22
      74:	93 03       	fmuls	r17, r19
      76:	1e 0a       	sbc	r1, r30
      78:	fb 08       	sbc	r15, r11
      7a:	fb 08       	sbc	r15, r11
      7c:	1b 0a       	sbc	r1, r27
      7e:	27 0a       	sbc	r2, r23
      80:	17 0a       	sbc	r1, r23
      82:	2e 0a       	sbc	r2, r30
      84:	2a 0a       	sbc	r2, r26
      86:	32 0a       	sbc	r3, r18
      88:	ea 09       	sbc	r30, r10
      8a:	bc 09       	sbc	r27, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e2       	ldi	r30, 0x20	; 32
      b8:	fd e1       	ldi	r31, 0x1D	; 29
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 38       	cpi	r26, 0x8A	; 138
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <main>
      da:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	8c e1       	ldi	r24, 0x1C	; 28
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
      e8:	20 91 0c 01 	lds	r18, 0x010C
      ec:	30 91 0d 01 	lds	r19, 0x010D
      f0:	23 2b       	or	r18, r19
      f2:	69 f4       	brne	.+26     	; 0x10e <message_rx+0x26>
    {
        new_message = 1;
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	30 93 0d 01 	sts	0x010D, r19
      fc:	20 93 0c 01 	sts	0x010C, r18
        received_message = m->data[0];
     100:	fc 01       	movw	r30, r24
     102:	80 81       	ld	r24, Z
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 17 01 	sts	0x0117, r25
     10a:	80 93 16 01 	sts	0x0116, r24
     10e:	08 95       	ret

00000110 <setup>:
    }
}


void setup()
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
//    else{
 //       state = STOP;
 //   }
    // Set the transmission message.
//    current_motion = FORWARD;
    motion = FORWARD;
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	90 93 11 01 	sts	0x0111, r25
     11c:	80 93 10 01 	sts	0x0110, r24
    message.type = NORMAL;
     120:	cc e1       	ldi	r28, 0x1C	; 28
     122:	d1 e0       	ldi	r29, 0x01	; 1
     124:	19 86       	std	Y+9, r1	; 0x09
    message.data[0] = state;
     126:	80 91 14 01 	lds	r24, 0x0114
     12a:	88 83       	st	Y, r24
    message.crc = message_crc(&message);
     12c:	ce 01       	movw	r24, r28
     12e:	0e 94 c5 0a 	call	0x158a	; 0x158a <message_crc>
     132:	9b 87       	std	Y+11, r25	; 0x0b
     134:	8a 87       	std	Y+10, r24	; 0x0a
  last_state_update = kilo_ticks;
     136:	80 91 4f 01 	lds	r24, 0x014F
     13a:	90 91 50 01 	lds	r25, 0x0150
     13e:	a0 91 51 01 	lds	r26, 0x0151
     142:	b0 91 52 01 	lds	r27, 0x0152
     146:	80 93 28 01 	sts	0x0128, r24
     14a:	90 93 29 01 	sts	0x0129, r25
     14e:	a0 93 2a 01 	sts	0x012A, r26
     152:	b0 93 2b 01 	sts	0x012B, r27
}
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <loop>:

void loop()
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 16))
     160:	40 91 4f 01 	lds	r20, 0x014F
     164:	50 91 50 01 	lds	r21, 0x0150
     168:	60 91 51 01 	lds	r22, 0x0151
     16c:	70 91 52 01 	lds	r23, 0x0152
     170:	80 91 28 01 	lds	r24, 0x0128
     174:	90 91 29 01 	lds	r25, 0x0129
     178:	a0 91 2a 01 	lds	r26, 0x012A
     17c:	b0 91 2b 01 	lds	r27, 0x012B
     180:	40 96       	adiw	r24, 0x10	; 16
     182:	a1 1d       	adc	r26, r1
     184:	b1 1d       	adc	r27, r1
     186:	84 17       	cp	r24, r20
     188:	95 07       	cpc	r25, r21
     18a:	a6 07       	cpc	r26, r22
     18c:	b7 07       	cpc	r27, r23
     18e:	08 f0       	brcs	.+2      	; 0x192 <loop+0x36>
     190:	3f c0       	rjmp	.+126    	; 0x210 <loop+0xb4>
  {
      last_state_update = kilo_ticks;
     192:	80 91 4f 01 	lds	r24, 0x014F
     196:	90 91 50 01 	lds	r25, 0x0150
     19a:	a0 91 51 01 	lds	r26, 0x0151
     19e:	b0 91 52 01 	lds	r27, 0x0152
     1a2:	80 93 28 01 	sts	0x0128, r24
     1a6:	90 93 29 01 	sts	0x0129, r25
     1aa:	a0 93 2a 01 	sts	0x012A, r26
     1ae:	b0 93 2b 01 	sts	0x012B, r27
      if (new_message == 1){
     1b2:	80 91 0c 01 	lds	r24, 0x010C
     1b6:	90 91 0d 01 	lds	r25, 0x010D
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	91 05       	cpc	r25, r1
     1be:	59 f1       	breq	.+86     	; 0x216 <loop+0xba>
              }
         }*/
         new_message = 0;
     }

       if(motion == FORWARD){
     1c0:	c0 91 10 01 	lds	r28, 0x0110
     1c4:	d0 91 11 01 	lds	r29, 0x0111
     1c8:	c1 30       	cpi	r28, 0x01	; 1
     1ca:	d1 05       	cpc	r29, r1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <loop+0x74>
     1ce:	8b c0       	rjmp	.+278    	; 0x2e6 <loop+0x18a>
	      set_color(RGB(0, 1, 0));
       }
       else if(motion == LEFT){
     1d0:	c2 30       	cpi	r28, 0x02	; 2
     1d2:	d1 05       	cpc	r29, r1
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <loop+0x7c>
     1d6:	66 c0       	rjmp	.+204    	; 0x2a4 <loop+0x148>
	      set_color(RGB(1, 0, 0));
       }
       else if(motion == RIGHT){
     1d8:	c3 30       	cpi	r28, 0x03	; 3
     1da:	d1 05       	cpc	r29, r1
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <loop+0x84>
     1de:	8b c0       	rjmp	.+278    	; 0x2f6 <loop+0x19a>


void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1e0:	80 91 12 01 	lds	r24, 0x0112
     1e4:	90 91 13 01 	lds	r25, 0x0113
     1e8:	8c 17       	cp	r24, r28
     1ea:	9d 07       	cpc	r25, r29
     1ec:	89 f0       	breq	.+34     	; 0x210 <loop+0xb4>
    {
        current_motion = new_motion;
     1ee:	d0 93 13 01 	sts	0x0113, r29
     1f2:	c0 93 12 01 	sts	0x0112, r28
        
        if (current_motion == STOP)
     1f6:	20 97       	sbiw	r28, 0x00	; 0
     1f8:	09 f4       	brne	.+2      	; 0x1fc <loop+0xa0>
     1fa:	63 c0       	rjmp	.+198    	; 0x2c2 <loop+0x166>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     1fc:	c1 30       	cpi	r28, 0x01	; 1
     1fe:	d1 05       	cpc	r29, r1
     200:	09 f4       	brne	.+2      	; 0x204 <loop+0xa8>
     202:	81 c0       	rjmp	.+258    	; 0x306 <loop+0x1aa>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     204:	c2 30       	cpi	r28, 0x02	; 2
     206:	d1 05       	cpc	r29, r1
     208:	09 f4       	brne	.+2      	; 0x20c <loop+0xb0>
     20a:	61 c0       	rjmp	.+194    	; 0x2ce <loop+0x172>
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
     20c:	23 97       	sbiw	r28, 0x03	; 3
     20e:	81 f1       	breq	.+96     	; 0x270 <loop+0x114>
	      set_motors(0, 0);
          }
            
     }*/
  }
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 16))
  {
      last_state_update = kilo_ticks;
      if (new_message == 1){
            if (state == 0){
     216:	20 91 14 01 	lds	r18, 0x0114
     21a:	30 91 15 01 	lds	r19, 0x0115
     21e:	21 15       	cp	r18, r1
     220:	31 05       	cpc	r19, r1
     222:	09 f4       	brne	.+2      	; 0x226 <loop+0xca>
     224:	49 c0       	rjmp	.+146    	; 0x2b8 <loop+0x15c>
                motion = FORWARD;
            }
            else if(state == 1){
     226:	21 30       	cpi	r18, 0x01	; 1
     228:	31 05       	cpc	r19, r1
     22a:	09 f4       	brne	.+2      	; 0x22e <loop+0xd2>
     22c:	7c c0       	rjmp	.+248    	; 0x326 <loop+0x1ca>
                motion = LEFT;
            }
            else if(state == 2){
     22e:	22 30       	cpi	r18, 0x02	; 2
     230:	31 05       	cpc	r19, r1
     232:	09 f4       	brne	.+2      	; 0x236 <loop+0xda>
     234:	3f c0       	rjmp	.+126    	; 0x2b4 <loop+0x158>
                motion = RIGHT;
            }

            if(received_message > state){
     236:	80 91 16 01 	lds	r24, 0x0116
     23a:	90 91 17 01 	lds	r25, 0x0117
     23e:	28 17       	cp	r18, r24
     240:	39 07       	cpc	r19, r25
     242:	2c f4       	brge	.+10     	; 0x24e <loop+0xf2>
                state = received_message;
     244:	90 93 15 01 	sts	0x0115, r25
     248:	80 93 14 01 	sts	0x0114, r24
     24c:	9c 01       	movw	r18, r24
            }

            message.type = NORMAL;
     24e:	10 92 25 01 	sts	0x0125, r1
            message.data[0] = state;
     252:	20 93 1c 01 	sts	0x011C, r18
            message.crc = message_crc(&message);
     256:	8c e1       	ldi	r24, 0x1C	; 28
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	0e 94 c5 0a 	call	0x158a	; 0x158a <message_crc>
     25e:	90 93 27 01 	sts	0x0127, r25
     262:	80 93 26 01 	sts	0x0126, r24
                  message.type = NORMAL;
                  message.data[0] = FORWARD;
                  message.crc = message_crc(&message);
              }
         }*/
         new_message = 0;
     266:	10 92 0d 01 	sts	0x010D, r1
     26a:	10 92 0c 01 	sts	0x010C, r1
     26e:	a8 cf       	rjmp	.-176    	; 0x1c0 <loop+0x64>
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     270:	80 91 0e 01 	lds	r24, 0x010E
     274:	90 91 0f 01 	lds	r25, 0x010F
     278:	89 2b       	or	r24, r25
     27a:	09 f4       	brne	.+2      	; 0x27e <loop+0x122>
     27c:	51 c0       	rjmp	.+162    	; 0x320 <loop+0x1c4>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     27e:	60 91 75 01 	lds	r22, 0x0175
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	0e 94 54 04 	call	0x8a8	; 0x8a8 <set_motors>
            delay(1000);
     288:	88 ee       	ldi	r24, 0xE8	; 232
     28a:	93 e0       	ldi	r25, 0x03	; 3
     28c:	0e 94 49 04 	call	0x892	; 0x892 <delay>
                spinup_motors();
     290:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     294:	60 91 88 01 	lds	r22, 0x0188
     298:	80 91 87 01 	lds	r24, 0x0187
	      set_motors(0, 0);
          }
            
     }*/
  }
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
            if(both_spined == 0)
                spinup_motors();
            set_motors(0, kilo_turn_right);
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     2a0:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <set_motors>

       if(motion == FORWARD){
	      set_color(RGB(0, 1, 0));
       }
       else if(motion == LEFT){
	      set_color(RGB(1, 0, 0));
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 75 08 	call	0x10ea	; 0x10ea <set_color>
     2aa:	c0 91 10 01 	lds	r28, 0x0110
     2ae:	d0 91 11 01 	lds	r29, 0x0111
     2b2:	96 cf       	rjmp	.-212    	; 0x1e0 <loop+0x84>
            }
            else if(state == 1){
                motion = LEFT;
            }
            else if(state == 2){
                motion = RIGHT;
     2b4:	83 e0       	ldi	r24, 0x03	; 3
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 11 01 	sts	0x0111, r25
     2bc:	80 93 10 01 	sts	0x0110, r24
     2c0:	ba cf       	rjmp	.-140    	; 0x236 <loop+0xda>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
	      set_motors(0, 0);
          }
            
     }*/
  }
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2ca:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <set_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     2ce:	80 91 0e 01 	lds	r24, 0x010E
     2d2:	90 91 0f 01 	lds	r25, 0x010F
     2d6:	89 2b       	or	r24, r25
     2d8:	11 f4       	brne	.+4      	; 0x2de <loop+0x182>
                spinup_motors();
     2da:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	80 91 89 01 	lds	r24, 0x0189
     2e4:	cf cf       	rjmp	.-98     	; 0x284 <loop+0x128>
         }*/
         new_message = 0;
     }

       if(motion == FORWARD){
	      set_color(RGB(0, 1, 0));
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	0e 94 75 08 	call	0x10ea	; 0x10ea <set_color>
     2ec:	c0 91 10 01 	lds	r28, 0x0110
     2f0:	d0 91 11 01 	lds	r29, 0x0111
     2f4:	75 cf       	rjmp	.-278    	; 0x1e0 <loop+0x84>
       }
       else if(motion == LEFT){
	      set_color(RGB(1, 0, 0));
       }
       else if(motion == RIGHT){
	      set_color(RGB(0, 0, 1));
     2f6:	80 e1       	ldi	r24, 0x10	; 16
     2f8:	0e 94 75 08 	call	0x10ea	; 0x10ea <set_color>
     2fc:	c0 91 10 01 	lds	r28, 0x0110
     300:	d0 91 11 01 	lds	r29, 0x0111
     304:	6d cf       	rjmp	.-294    	; 0x1e0 <loop+0x84>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     306:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     30a:	60 91 88 01 	lds	r22, 0x0188
     30e:	80 91 87 01 	lds	r24, 0x0187
     312:	0e 94 54 04 	call	0x8a8	; 0x8a8 <set_motors>
            both_spined = 1;
     316:	d0 93 0f 01 	sts	0x010F, r29
     31a:	c0 93 0e 01 	sts	0x010E, r28
     31e:	78 cf       	rjmp	.-272    	; 0x210 <loop+0xb4>
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     320:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
     324:	ac cf       	rjmp	.-168    	; 0x27e <loop+0x122>
      if (new_message == 1){
            if (state == 0){
                motion = FORWARD;
            }
            else if(state == 1){
                motion = LEFT;
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	90 93 11 01 	sts	0x0111, r25
     32e:	80 93 10 01 	sts	0x0110, r24
     332:	81 cf       	rjmp	.-254    	; 0x236 <loop+0xda>

00000334 <set_motion>:
int new_message = 0;
message_t message;


void set_motion(int new_motion)
{
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     338:	20 91 12 01 	lds	r18, 0x0112
     33c:	30 91 13 01 	lds	r19, 0x0113
     340:	28 17       	cp	r18, r24
     342:	39 07       	cpc	r19, r25
     344:	79 f0       	breq	.+30     	; 0x364 <set_motion+0x30>
    {
        current_motion = new_motion;
     346:	90 93 13 01 	sts	0x0113, r25
     34a:	80 93 12 01 	sts	0x0112, r24
        
        if (current_motion == STOP)
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	89 f1       	breq	.+98     	; 0x3b4 <set_motion+0x80>
     352:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	91 05       	cpc	r25, r1
     358:	99 f1       	breq	.+102    	; 0x3c0 <set_motion+0x8c>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	91 05       	cpc	r25, r1
     35e:	29 f0       	breq	.+10     	; 0x36a <set_motion+0x36>
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
     360:	03 97       	sbiw	r24, 0x03	; 3
     362:	f1 f0       	breq	.+60     	; 0x3a0 <set_motion+0x6c>
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
    }
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     36a:	80 91 0e 01 	lds	r24, 0x010E
     36e:	90 91 0f 01 	lds	r25, 0x010F
     372:	89 2b       	or	r24, r25
     374:	11 f4       	brne	.+4      	; 0x37a <set_motion+0x46>
                spinup_motors();
     376:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	80 91 89 01 	lds	r24, 0x0189
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
            set_motors(0, kilo_turn_right);
     380:	0e 94 54 04 	call	0x8a8	; 0x8a8 <set_motors>
            delay(1000);
     384:	88 ee       	ldi	r24, 0xE8	; 232
     386:	93 e0       	ldi	r25, 0x03	; 3
     388:	0e 94 49 04 	call	0x892	; 0x892 <delay>
                spinup_motors();
     38c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     390:	60 91 88 01 	lds	r22, 0x0188
     394:	80 91 87 01 	lds	r24, 0x0187
 //           both_spined = 0;
        }
    }
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
            if(both_spined == 0)
                spinup_motors();
            set_motors(0, kilo_turn_right);
            delay(1000);
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     39c:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <set_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     3a0:	80 91 0e 01 	lds	r24, 0x010E
     3a4:	90 91 0f 01 	lds	r25, 0x010F
     3a8:	89 2b       	or	r24, r25
     3aa:	b9 f0       	breq	.+46     	; 0x3da <set_motion+0xa6>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     3ac:	60 91 75 01 	lds	r22, 0x0175
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	e6 cf       	rjmp	.-52     	; 0x380 <set_motion+0x4c>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
 //           both_spined = 0;
        }
    }
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3bc:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     3c0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     3c4:	60 91 88 01 	lds	r22, 0x0188
     3c8:	80 91 87 01 	lds	r24, 0x0187
     3cc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <set_motors>
            both_spined = 1;
     3d0:	d0 93 0f 01 	sts	0x010F, r29
     3d4:	c0 93 0e 01 	sts	0x010E, r28
     3d8:	c5 cf       	rjmp	.-118    	; 0x364 <set_motion+0x30>
 //           both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     3da:	0e 94 59 04 	call	0x8b2	; 0x8b2 <spinup_motors>
     3de:	e6 cf       	rjmp	.-52     	; 0x3ac <set_motion+0x78>

000003e0 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     3e0:	08 95       	ret

000003e2 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	08 95       	ret

000003e8 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     3e8:	08 95       	ret

000003ea <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
    cli();
     3f8:	f8 94       	cli

    ports_off();
     3fa:	14 b8       	out	0x04, r1	; 4
     3fc:	17 b8       	out	0x07, r1	; 7
     3fe:	1a b8       	out	0x0a, r1	; 10
     400:	15 b8       	out	0x05, r1	; 5
     402:	18 b8       	out	0x08, r1	; 8
     404:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     406:	52 9a       	sbi	0x0a, 2	; 10
     408:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     40a:	14 bc       	out	0x24, r1	; 36
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	85 bd       	out	0x25, r24	; 37
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	87 bd       	out	0x27, r24	; 39
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     41a:	10 92 80 00 	sts	0x0080, r1
     41e:	10 92 81 00 	sts	0x0081, r1
     422:	2f e8       	ldi	r18, 0x8F	; 143
     424:	3b e0       	ldi	r19, 0x0B	; 11
     426:	30 93 89 00 	sts	0x0089, r19
     42a:	20 93 88 00 	sts	0x0088, r18
     42e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     432:	53 98       	cbi	0x0a, 3	; 10
     434:	23 98       	cbi	0x04, 3	; 4
     436:	91 ea       	ldi	r25, 0xA1	; 161
     438:	90 93 b0 00 	sts	0x00B0, r25
     43c:	80 93 b1 00 	sts	0x00B1, r24
     440:	10 92 b4 00 	sts	0x00B4, r1
     444:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     448:	8b e0       	ldi	r24, 0x0B	; 11
     44a:	80 bf       	out	0x30, r24	; 48
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	80 93 7c 00 	sts	0x007C, r24
     458:	83 e8       	ldi	r24, 0x83	; 131
     45a:	80 93 7a 00 	sts	0x007A, r24
     45e:	80 91 7a 00 	lds	r24, 0x007A
     462:	80 64       	ori	r24, 0x40	; 64
     464:	80 93 7a 00 	sts	0x007A, r24
     468:	80 91 7a 00 	lds	r24, 0x007A
     46c:	86 fd       	sbrc	r24, 6
     46e:	fc cf       	rjmp	.-8      	; 0x468 <kilo_init+0x7e>
    adc_trigger_high_gain();
     470:	10 92 7c 00 	sts	0x007C, r1
     474:	83 ea       	ldi	r24, 0xA3	; 163
     476:	80 93 7a 00 	sts	0x007A, r24
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
    if (osccal != 0xFF)
     488:	8f 3f       	cpi	r24, 0xFF	; 255
     48a:	11 f0       	breq	.+4      	; 0x490 <kilo_init+0xa6>
        OSCCAL = osccal;
     48c:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     490:	10 92 53 01 	sts	0x0153, r1
    rx_leadingbit = 1;
     494:	c1 e0       	ldi	r28, 0x01	; 1
     496:	c0 93 2c 01 	sts	0x012C, r28
    rx_leadingbyte = 1;
     49a:	c0 93 70 01 	sts	0x0170, r28
    rx_byteindex = 0;
     49e:	10 92 4a 01 	sts	0x014A, r1
    rx_bytevalue = 0;
     4a2:	10 92 84 01 	sts	0x0184, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     4a6:	80 e9       	ldi	r24, 0x90	; 144
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     4ae:	80 93 49 01 	sts	0x0149, r24
    if (tx_mask & ~TX_MASK_MAX)
     4b2:	80 91 49 01 	lds	r24, 0x0149
     4b6:	88 73       	andi	r24, 0x38	; 56
     4b8:	11 f0       	breq	.+4      	; 0x4be <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     4ba:	c0 93 49 01 	sts	0x0149, r28
    tx_clock = 0;
     4be:	10 92 74 01 	sts	0x0174, r1
     4c2:	10 92 73 01 	sts	0x0173, r1
    tx_increment = 255;
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	90 93 72 01 	sts	0x0172, r25
     4ce:	80 93 71 01 	sts	0x0171, r24
    kilo_ticks = 0;
     4d2:	10 92 4f 01 	sts	0x014F, r1
     4d6:	10 92 50 01 	sts	0x0150, r1
     4da:	10 92 51 01 	sts	0x0151, r1
     4de:	10 92 52 01 	sts	0x0152, r1
    kilo_state = IDLE;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 1b 01 	sts	0x011B, r24
    kilo_tx_period = 3906;
     4e8:	82 e4       	ldi	r24, 0x42	; 66
     4ea:	9f e0       	ldi	r25, 0x0F	; 15
     4ec:	90 93 83 01 	sts	0x0183, r25
     4f0:	80 93 82 01 	sts	0x0182, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     4f4:	80 eb       	ldi	r24, 0xB0	; 176
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     4fc:	c8 2f       	mov	r28, r24
     4fe:	81 eb       	ldi	r24, 0xB1	; 177
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     506:	2c 2f       	mov	r18, r28
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	38 2b       	or	r19, r24
     50c:	30 93 86 01 	sts	0x0186, r19
     510:	20 93 85 01 	sts	0x0185, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     514:	85 e0       	ldi	r24, 0x05	; 5
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     51c:	80 93 89 01 	sts	0x0189, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     520:	89 e0       	ldi	r24, 0x09	; 9
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     528:	80 93 75 01 	sts	0x0175, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     52c:	8c e0       	ldi	r24, 0x0C	; 12
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     534:	80 93 87 01 	sts	0x0187, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     538:	84 e1       	ldi	r24, 0x14	; 20
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     540:	80 93 88 01 	sts	0x0188, r24
     544:	54 e5       	ldi	r21, 0x54	; 84
     546:	e5 2e       	mov	r14, r21
     548:	51 e0       	ldi	r21, 0x01	; 1
     54a:	f5 2e       	mov	r15, r21
     54c:	0d e2       	ldi	r16, 0x2D	; 45
     54e:	11 e0       	ldi	r17, 0x01	; 1
     550:	c0 e2       	ldi	r28, 0x20	; 32
     552:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     554:	ce 01       	movw	r24, r28
     556:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     55a:	d8 2e       	mov	r13, r24
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     564:	2d 2d       	mov	r18, r13
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	32 2f       	mov	r19, r18
     56a:	22 27       	eor	r18, r18
     56c:	28 2b       	or	r18, r24
     56e:	f7 01       	movw	r30, r14
     570:	21 93       	st	Z+, r18
     572:	31 93       	st	Z+, r19
     574:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     576:	ce 01       	movw	r24, r28
     578:	c0 96       	adiw	r24, 0x30	; 48
     57a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     57e:	d8 2e       	mov	r13, r24
     580:	ce 01       	movw	r24, r28
     582:	c1 96       	adiw	r24, 0x31	; 49
     584:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <eeprom_read_byte>
     588:	2d 2d       	mov	r18, r13
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	32 2f       	mov	r19, r18
     58e:	22 27       	eor	r18, r18
     590:	28 2b       	or	r18, r24
     592:	f8 01       	movw	r30, r16
     594:	21 93       	st	Z+, r18
     596:	31 93       	st	Z+, r19
     598:	8f 01       	movw	r16, r30
     59a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     59c:	cc 33       	cpi	r28, 0x3C	; 60
     59e:	d1 05       	cpc	r29, r1
     5a0:	c9 f6       	brne	.-78     	; 0x554 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     5a2:	78 94       	sei
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	08 95       	ret

000005b4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	8f 93       	push	r24
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	a8 95       	wdr
     5c6:	80 91 60 00 	lds	r24, 0x0060
     5ca:	88 61       	ori	r24, 0x18	; 24
     5cc:	80 93 60 00 	sts	0x0060, r24
     5d0:	10 92 60 00 	sts	0x0060, r1
     5d4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5d6:	8f 91       	pop	r24
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     5e2:	3c 01       	movw	r6, r24
     5e4:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     5e6:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     5e8:	99 24       	eor	r9, r9
     5ea:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     5f0:	96 e0       	ldi	r25, 0x06	; 6
     5f2:	a9 2e       	mov	r10, r25
     5f4:	23 e8       	ldi	r18, 0x83	; 131
     5f6:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     5f8:	38 e1       	ldi	r19, 0x18	; 24
     5fa:	d3 2e       	mov	r13, r19
     5fc:	49 e2       	ldi	r20, 0x29	; 41
     5fe:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     600:	90 91 1b 01 	lds	r25, 0x011B
     604:	e9 2f       	mov	r30, r25
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	e7 30       	cpi	r30, 0x07	; 7
     60a:	f1 05       	cpc	r31, r1
     60c:	c8 f7       	brcc	.-14     	; 0x600 <kilo_start+0x1e>
     60e:	ec 5c       	subi	r30, 0xCC	; 204
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     616:	11 23       	and	r17, r17
     618:	09 f4       	brne	.+2      	; 0x61c <kilo_start+0x3a>
     61a:	fc c0       	rjmp	.+504    	; 0x814 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     61c:	c0 92 1b 01 	sts	0x011B, r12
     620:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     622:	fe 01       	movw	r30, r28
     624:	09 95       	icall
                break;
     626:	ec cf       	rjmp	.-40     	; 0x600 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     628:	80 91 53 01 	lds	r24, 0x0153
     62c:	81 11       	cpse	r24, r1
     62e:	eb c0       	rjmp	.+470    	; 0x806 <kilo_start+0x224>
        cli();                                    // disable interrupts
     630:	f8 94       	cli
        adc_setup_conversion(6);
     632:	a0 92 7c 00 	sts	0x007C, r10
     636:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     63a:	80 91 7a 00 	lds	r24, 0x007A
     63e:	80 64       	ori	r24, 0x40	; 64
     640:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     644:	90 91 7a 00 	lds	r25, 0x007A
     648:	96 fd       	sbrc	r25, 6
     64a:	fc cf       	rjmp	.-8      	; 0x644 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     64c:	80 91 78 00 	lds	r24, 0x0078
     650:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     654:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     656:	8b 3a       	cpi	r24, 0xAB	; 171
     658:	e2 e0       	ldi	r30, 0x02	; 2
     65a:	9e 07       	cpc	r25, r30
     65c:	0c f0       	brlt	.+2      	; 0x660 <kilo_start+0x7e>
     65e:	ed c0       	rjmp	.+474    	; 0x83a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     660:	89 38       	cpi	r24, 0x89	; 137
     662:	f2 e0       	ldi	r31, 0x02	; 2
     664:	9f 07       	cpc	r25, r31
     666:	0c f0       	brlt	.+2      	; 0x66a <kilo_start+0x88>
     668:	ef c0       	rjmp	.+478    	; 0x848 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     66a:	87 36       	cpi	r24, 0x67	; 103
     66c:	92 40       	sbci	r25, 0x02	; 2
     66e:	0c f4       	brge	.+2      	; 0x672 <kilo_start+0x90>
     670:	ca c0       	rjmp	.+404    	; 0x806 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     672:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     674:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     676:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     678:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     67a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     67c:	3c 98       	cbi	0x07, 4	; 7
     67e:	c0 cf       	rjmp	.-128    	; 0x600 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     680:	f8 94       	cli
                acomp_off();
     682:	80 b7       	in	r24, 0x30	; 48
     684:	87 7f       	andi	r24, 0xF7	; 247
     686:	80 bf       	out	0x30, r24	; 48
                adc_off();
     688:	80 91 7a 00 	lds	r24, 0x007A
     68c:	8f 77       	andi	r24, 0x7F	; 127
     68e:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     692:	14 b8       	out	0x04, r1	; 4
     694:	17 b8       	out	0x07, r1	; 7
     696:	1a b8       	out	0x0a, r1	; 10
     698:	15 b8       	out	0x05, r1	; 5
     69a:	18 b8       	out	0x08, r1	; 8
     69c:	1b b8       	out	0x0b, r1	; 11
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	a8 95       	wdr
     6a4:	d0 92 60 00 	sts	0x0060, r13
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     6ae:	80 91 60 00 	lds	r24, 0x0060
     6b2:	80 64       	ori	r24, 0x40	; 64
     6b4:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     6b8:	93 b7       	in	r25, 0x33	; 51
     6ba:	91 7f       	andi	r25, 0xF1	; 241
     6bc:	94 60       	ori	r25, 0x04	; 4
     6be:	93 bf       	out	0x33, r25	; 51
                cli();
     6c0:	f8 94       	cli
                sleep_enable();
     6c2:	83 b7       	in	r24, 0x33	; 51
     6c4:	81 60       	ori	r24, 0x01	; 1
     6c6:	83 bf       	out	0x33, r24	; 51
                sei();
     6c8:	78 94       	sei
                sleep_cpu();
     6ca:	88 95       	sleep
                sleep_disable();
     6cc:	83 b7       	in	r24, 0x33	; 51
     6ce:	8e 7f       	andi	r24, 0xFE	; 254
     6d0:	83 bf       	out	0x33, r24	; 51
                sei();
     6d2:	78 94       	sei
                rx_busy = 0;
     6d4:	10 92 53 01 	sts	0x0153, r1
                ports_on();
     6d8:	52 9a       	sbi	0x0a, 2	; 10
     6da:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     6dc:	80 91 7a 00 	lds	r24, 0x007A
     6e0:	80 68       	ori	r24, 0x80	; 128
     6e2:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e6:	87 e5       	ldi	r24, 0x57	; 87
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <kilo_start+0x108>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <kilo_start+0x10e>
     6f0:	00 00       	nop
                _delay_us(300);
                acomp_on();
     6f2:	80 b7       	in	r24, 0x30	; 48
     6f4:	88 61       	ori	r24, 0x18	; 24
     6f6:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6f8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6fa:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6fc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6fe:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     700:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     702:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     704:	ef e1       	ldi	r30, 0x1F	; 31
     706:	fe e4       	ldi	r31, 0x4E	; 78
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <kilo_start+0x126>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <kilo_start+0x12c>
     70e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     710:	80 91 53 01 	lds	r24, 0x0153
     714:	81 11       	cpse	r24, r1
     716:	81 c0       	rjmp	.+258    	; 0x81a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     718:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     71a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     71c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     71e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     720:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     722:	3c 98       	cbi	0x07, 4	; 7
     724:	6d cf       	rjmp	.-294    	; 0x600 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     726:	80 91 19 01 	lds	r24, 0x0119
     72a:	81 11       	cpse	r24, r1
     72c:	41 c0       	rjmp	.+130    	; 0x7b0 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     72e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     732:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     736:	10 92 1a 01 	sts	0x011A, r1
     73a:	62 cf       	rjmp	.-316    	; 0x600 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     73c:	48 99       	sbic	0x09, 0	; 9
     73e:	ec cf       	rjmp	.-40     	; 0x718 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     740:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     742:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     744:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     746:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     748:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     74a:	3c 98       	cbi	0x07, 4	; 7
     74c:	8f ec       	ldi	r24, 0xCF	; 207
     74e:	97 e0       	ldi	r25, 0x07	; 7
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <kilo_start+0x16e>
     754:	00 c0       	rjmp	.+0      	; 0x756 <kilo_start+0x174>
     756:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     758:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     75a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     75c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     75e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     760:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     762:	3c 98       	cbi	0x07, 4	; 7
     764:	9f ef       	ldi	r25, 0xFF	; 255
     766:	e1 ee       	ldi	r30, 0xE1	; 225
     768:	f4 e0       	ldi	r31, 0x04	; 4
     76a:	91 50       	subi	r25, 0x01	; 1
     76c:	e0 40       	sbci	r30, 0x00	; 0
     76e:	f0 40       	sbci	r31, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <kilo_start+0x188>
     772:	00 c0       	rjmp	.+0      	; 0x774 <kilo_start+0x192>
     774:	00 00       	nop
     776:	44 cf       	rjmp	.-376    	; 0x600 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     778:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     77a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     77c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     77e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     780:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     782:	3c 98       	cbi	0x07, 4	; 7
     784:	ef ec       	ldi	r30, 0xCF	; 207
     786:	f7 e0       	ldi	r31, 0x07	; 7
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <kilo_start+0x1a6>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <kilo_start+0x1ac>
     78e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     790:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     792:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     794:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     796:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     798:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     79a:	3c 98       	cbi	0x07, 4	; 7
     79c:	ff ef       	ldi	r31, 0xFF	; 255
     79e:	21 ee       	ldi	r18, 0xE1	; 225
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	f1 50       	subi	r31, 0x01	; 1
     7a4:	20 40       	sbci	r18, 0x00	; 0
     7a6:	80 40       	sbci	r24, 0x00	; 0
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <kilo_start+0x1c0>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <kilo_start+0x1ca>
     7ac:	00 00       	nop
     7ae:	28 cf       	rjmp	.-432    	; 0x600 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     7b0:	90 91 19 01 	lds	r25, 0x0119
     7b4:	80 91 1a 01 	lds	r24, 0x011A
     7b8:	98 17       	cp	r25, r24
     7ba:	09 f4       	brne	.+2      	; 0x7be <kilo_start+0x1dc>
     7bc:	21 cf       	rjmp	.-446    	; 0x600 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     7be:	80 91 19 01 	lds	r24, 0x0119
     7c2:	80 93 1a 01 	sts	0x011A, r24
                        if (cur_motion == MOVE_LEFT) {
     7c6:	80 91 19 01 	lds	r24, 0x0119
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <kilo_start+0x1ee>
     7ce:	50 c0       	rjmp	.+160    	; 0x870 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7d0:	80 91 19 01 	lds	r24, 0x0119
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7d4:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7d8:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7dc:	82 30       	cpi	r24, 0x02	; 2
     7de:	d9 f1       	breq	.+118    	; 0x856 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7e0:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     7e4:	90 92 b4 00 	sts	0x00B4, r9
     7e8:	8f e2       	ldi	r24, 0x2F	; 47
     7ea:	95 e7       	ldi	r25, 0x75	; 117
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <kilo_start+0x20a>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <kilo_start+0x210>
     7f2:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     7f4:	80 91 88 01 	lds	r24, 0x0188
     7f8:	90 91 87 01 	lds	r25, 0x0187
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7fc:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     800:	80 93 b4 00 	sts	0x00B4, r24
     804:	fd ce       	rjmp	.-518    	; 0x600 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     806:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     808:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     80a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     80c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     80e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     810:	3c 98       	cbi	0x07, 4	; 7
     812:	f6 ce       	rjmp	.-532    	; 0x600 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     814:	f3 01       	movw	r30, r6
     816:	09 95       	icall
     818:	01 cf       	rjmp	.-510    	; 0x61c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     81a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     81c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     81e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     820:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     822:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     824:	3c 98       	cbi	0x07, 4	; 7
     826:	ff ef       	ldi	r31, 0xFF	; 255
     828:	20 e7       	ldi	r18, 0x70	; 112
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	f1 50       	subi	r31, 0x01	; 1
     82e:	20 40       	sbci	r18, 0x00	; 0
     830:	80 40       	sbci	r24, 0x00	; 0
     832:	e1 f7       	brne	.-8      	; 0x82c <kilo_start+0x24a>
     834:	00 c0       	rjmp	.+0      	; 0x836 <kilo_start+0x254>
     836:	00 00       	nop
     838:	6f cf       	rjmp	.-290    	; 0x718 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     83a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     83c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     83e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     840:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     842:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     844:	3c 98       	cbi	0x07, 4	; 7
     846:	dc ce       	rjmp	.-584    	; 0x600 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     848:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     84a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     84c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     84e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     850:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     852:	3c 9a       	sbi	0x07, 4	; 7
     854:	d5 ce       	rjmp	.-598    	; 0x600 <kilo_start+0x1e>
     856:	ef e2       	ldi	r30, 0x2F	; 47
     858:	f5 e7       	ldi	r31, 0x75	; 117
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <kilo_start+0x278>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <kilo_start+0x27e>
     860:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     862:	80 91 75 01 	lds	r24, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     866:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     86a:	80 93 b4 00 	sts	0x00B4, r24
     86e:	c8 ce       	rjmp	.-624    	; 0x600 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     870:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     874:	10 92 b4 00 	sts	0x00B4, r1
     878:	8f e2       	ldi	r24, 0x2F	; 47
     87a:	95 e7       	ldi	r25, 0x75	; 117
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <kilo_start+0x29a>
     880:	00 c0       	rjmp	.+0      	; 0x882 <kilo_start+0x2a0>
     882:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     884:	80 91 89 01 	lds	r24, 0x0189
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     888:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     88c:	10 92 b4 00 	sts	0x00B4, r1
     890:	b7 ce       	rjmp	.-658    	; 0x600 <kilo_start+0x1e>

00000892 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <delay+0x10>
     894:	ef ec       	ldi	r30, 0xCF	; 207
     896:	f7 e0       	ldi	r31, 0x07	; 7
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <delay+0x6>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <delay+0xc>
     89e:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     8a0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	b9 f7       	brne	.-18     	; 0x894 <delay+0x2>
     8a6:	08 95       	ret

000008a8 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8a8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8ac:	60 93 b4 00 	sts	0x00B4, r22
     8b0:	08 95       	ret

000008b2 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8b8:	80 93 b4 00 	sts	0x00B4, r24
     8bc:	8f e0       	ldi	r24, 0x0F	; 15
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	ef ec       	ldi	r30, 0xCF	; 207
     8c2:	f7 e0       	ldi	r31, 0x07	; 7
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <spinup_motors+0x12>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <spinup_motors+0x18>
     8ca:	00 00       	nop
     8cc:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8ce:	c1 f7       	brne	.-16     	; 0x8c0 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     8d0:	08 95       	ret

000008d2 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     8d2:	80 91 53 01 	lds	r24, 0x0153
     8d6:	81 11       	cpse	r24, r1
     8d8:	1e c0       	rjmp	.+60     	; 0x916 <__stack+0x17>
        cli();
     8da:	f8 94       	cli
        adc_setup_conversion(7);
     8dc:	87 e0       	ldi	r24, 0x07	; 7
     8de:	80 93 7c 00 	sts	0x007C, r24
     8e2:	83 e8       	ldi	r24, 0x83	; 131
     8e4:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8e8:	80 91 7a 00 	lds	r24, 0x007A
     8ec:	80 64       	ori	r24, 0x40	; 64
     8ee:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8f2:	80 91 7a 00 	lds	r24, 0x007A
     8f6:	86 fd       	sbrc	r24, 6
     8f8:	fc cf       	rjmp	.-8      	; 0x8f2 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     8fa:	80 91 78 00 	lds	r24, 0x0078
     8fe:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     902:	10 92 7c 00 	sts	0x007C, r1
     906:	23 ea       	ldi	r18, 0xA3	; 163
     908:	20 93 7a 00 	sts	0x007A, r18
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     912:	78 94       	sei
     914:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     91a:	08 95       	ret

0000091c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     91c:	80 91 53 01 	lds	r24, 0x0153
     920:	81 11       	cpse	r24, r1
     922:	1e c0       	rjmp	.+60     	; 0x960 <get_temperature+0x44>
        cli();
     924:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     926:	88 ec       	ldi	r24, 0xC8	; 200
     928:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     92c:	87 e8       	ldi	r24, 0x87	; 135
     92e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     932:	80 91 7a 00 	lds	r24, 0x007A
     936:	80 64       	ori	r24, 0x40	; 64
     938:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     93c:	80 91 7a 00 	lds	r24, 0x007A
     940:	86 fd       	sbrc	r24, 6
     942:	fc cf       	rjmp	.-8      	; 0x93c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     944:	80 91 78 00 	lds	r24, 0x0078
     948:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     94c:	10 92 7c 00 	sts	0x007C, r1
     950:	23 ea       	ldi	r18, 0xA3	; 163
     952:	20 93 7a 00 	sts	0x007A, r18
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     95c:	78 94       	sei
     95e:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     964:	08 95       	ret

00000966 <rand_hard>:

uint8_t rand_hard() {
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	e0 e0       	ldi	r30, 0x00	; 0
     970:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     972:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     974:	03 ea       	ldi	r16, 0xA3	; 163
     976:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     978:	d6 e0       	ldi	r29, 0x06	; 6
     97a:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     97c:	a1 e0       	ldi	r26, 0x01	; 1
     97e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     980:	60 e8       	ldi	r22, 0x80	; 128
     982:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     984:	f8 94       	cli
            adc_setup_conversion(6);
     986:	d0 93 7c 00 	sts	0x007C, r29
     98a:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     98e:	90 91 7a 00 	lds	r25, 0x007A
     992:	90 64       	ori	r25, 0x40	; 64
     994:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     998:	90 91 7a 00 	lds	r25, 0x007A
     99c:	96 fd       	sbrc	r25, 6
     99e:	fc cf       	rjmp	.-8      	; 0x998 <rand_hard+0x32>
            a = ADCW&0x1;
     9a0:	20 91 78 00 	lds	r18, 0x0078
     9a4:	30 91 79 00 	lds	r19, 0x0079
     9a8:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     9aa:	90 91 7a 00 	lds	r25, 0x007A
     9ae:	90 64       	ori	r25, 0x40	; 64
     9b0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9b4:	90 91 7a 00 	lds	r25, 0x007A
     9b8:	96 fd       	sbrc	r25, 6
     9ba:	fc cf       	rjmp	.-8      	; 0x9b4 <rand_hard+0x4e>
            b = ADCW&0x1;
     9bc:	40 91 78 00 	lds	r20, 0x0078
     9c0:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     9c4:	10 92 7c 00 	sts	0x007C, r1
     9c8:	00 93 7a 00 	sts	0x007A, r16
     9cc:	10 93 7b 00 	sts	0x007B, r17
            sei();
     9d0:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     9d2:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     9d4:	24 13       	cpse	r18, r20
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <rand_hard+0x78>
     9d8:	61 50       	subi	r22, 0x01	; 1
     9da:	71 09       	sbc	r23, r1
     9dc:	99 f6       	brne	.-90     	; 0x984 <rand_hard+0x1e>
        if (a)
     9de:	22 23       	and	r18, r18
     9e0:	39 f0       	breq	.+14     	; 0x9f0 <rand_hard+0x8a>
            num |= (1<<i);
     9e2:	9d 01       	movw	r18, r26
     9e4:	0e 2e       	mov	r0, r30
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <rand_hard+0x84>
     9e8:	22 0f       	add	r18, r18
     9ea:	0a 94       	dec	r0
     9ec:	ea f7       	brpl	.-6      	; 0x9e8 <rand_hard+0x82>
     9ee:	82 2b       	or	r24, r18
     9f0:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     9f2:	e8 30       	cpi	r30, 0x08	; 8
     9f4:	f1 05       	cpc	r31, r1
     9f6:	09 f0       	breq	.+2      	; 0x9fa <rand_hard+0x94>
     9f8:	c3 cf       	rjmp	.-122    	; 0x980 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a04:	80 91 00 01 	lds	r24, 0x0100
     a08:	98 2f       	mov	r25, r24
     a0a:	99 0f       	add	r25, r25
     a0c:	99 0f       	add	r25, r25
     a0e:	99 0f       	add	r25, r25
     a10:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a12:	90 91 18 01 	lds	r25, 0x0118
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	29 0f       	add	r18, r25
     a1a:	20 93 18 01 	sts	0x0118, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     a1e:	28 2f       	mov	r18, r24
     a20:	22 95       	swap	r18
     a22:	26 95       	lsr	r18
     a24:	27 70       	andi	r18, 0x07	; 7
     a26:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     a28:	96 95       	lsr	r25
     a2a:	96 95       	lsr	r25
     a2c:	89 27       	eor	r24, r25
     a2e:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     a32:	08 95       	ret

00000a34 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a34:	80 93 00 01 	sts	0x0100, r24
     a38:	08 95       	ret

00000a3a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a3a:	80 91 53 01 	lds	r24, 0x0153
     a3e:	81 11       	cpse	r24, r1
     a40:	16 c0       	rjmp	.+44     	; 0xa6e <get_voltage+0x34>
        cli();                                    // disable interrupts
     a42:	f8 94       	cli
        adc_setup_conversion(6);
     a44:	86 e0       	ldi	r24, 0x06	; 6
     a46:	80 93 7c 00 	sts	0x007C, r24
     a4a:	83 e8       	ldi	r24, 0x83	; 131
     a4c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a50:	80 91 7a 00 	lds	r24, 0x007A
     a54:	80 64       	ori	r24, 0x40	; 64
     a56:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a5a:	80 91 7a 00 	lds	r24, 0x007A
     a5e:	86 fd       	sbrc	r24, 6
     a60:	fc cf       	rjmp	.-8      	; 0xa5a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a62:	80 91 78 00 	lds	r24, 0x0078
     a66:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a6a:	78 94       	sei
     a6c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a72:	08 95       	ret

00000a74 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a74:	2f 92       	push	r2
     a76:	3f 92       	push	r3
     a78:	4f 92       	push	r4
     a7a:	5f 92       	push	r5
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	00 d0       	rcall	.+0      	; 0xa9a <estimate_distance+0x26>
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <estimate_distance+0x28>
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <estimate_distance+0x2a>
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     aa4:	dc 01       	movw	r26, r24
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	0d 90       	ld	r0, X+
     aaa:	bc 91       	ld	r27, X
     aac:	a0 2d       	mov	r26, r0
     aae:	be 83       	std	Y+6, r27	; 0x06
     ab0:	ad 83       	std	Y+5, r26	; 0x05
     ab2:	a4 38       	cpi	r26, 0x84	; 132
     ab4:	e3 e0       	ldi	r30, 0x03	; 3
     ab6:	be 07       	cpc	r27, r30
     ab8:	0c f0       	brlt	.+2      	; 0xabc <estimate_distance+0x48>
     aba:	c9 c0       	rjmp	.+402    	; 0xc4e <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     abc:	80 91 2d 01 	lds	r24, 0x012D
     ac0:	90 91 2e 01 	lds	r25, 0x012E
     ac4:	8a 17       	cp	r24, r26
     ac6:	9b 07       	cpc	r25, r27
     ac8:	08 f4       	brcc	.+2      	; 0xacc <estimate_distance+0x58>
     aca:	37 c1       	rjmp	.+622    	; 0xd3a <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     acc:	00 91 2f 01 	lds	r16, 0x012F
     ad0:	10 91 30 01 	lds	r17, 0x0130
     ad4:	0a 17       	cp	r16, r26
     ad6:	1b 07       	cpc	r17, r27
     ad8:	08 f4       	brcc	.+2      	; 0xadc <estimate_distance+0x68>
     ada:	2f c2       	rjmp	.+1118   	; 0xf3a <estimate_distance+0x4c6>
     adc:	00 91 31 01 	lds	r16, 0x0131
     ae0:	10 91 32 01 	lds	r17, 0x0132
     ae4:	0a 17       	cp	r16, r26
     ae6:	1b 07       	cpc	r17, r27
     ae8:	08 f4       	brcc	.+2      	; 0xaec <estimate_distance+0x78>
     aea:	2f c2       	rjmp	.+1118   	; 0xf4a <estimate_distance+0x4d6>
     aec:	00 91 33 01 	lds	r16, 0x0133
     af0:	10 91 34 01 	lds	r17, 0x0134
     af4:	0a 17       	cp	r16, r26
     af6:	1b 07       	cpc	r17, r27
     af8:	08 f4       	brcc	.+2      	; 0xafc <estimate_distance+0x88>
     afa:	2f c2       	rjmp	.+1118   	; 0xf5a <estimate_distance+0x4e6>
     afc:	00 91 35 01 	lds	r16, 0x0135
     b00:	10 91 36 01 	lds	r17, 0x0136
     b04:	0a 17       	cp	r16, r26
     b06:	1b 07       	cpc	r17, r27
     b08:	08 f4       	brcc	.+2      	; 0xb0c <estimate_distance+0x98>
     b0a:	2f c2       	rjmp	.+1118   	; 0xf6a <estimate_distance+0x4f6>
     b0c:	00 91 37 01 	lds	r16, 0x0137
     b10:	10 91 38 01 	lds	r17, 0x0138
     b14:	0a 17       	cp	r16, r26
     b16:	1b 07       	cpc	r17, r27
     b18:	08 f4       	brcc	.+2      	; 0xb1c <estimate_distance+0xa8>
     b1a:	ef c1       	rjmp	.+990    	; 0xefa <estimate_distance+0x486>
     b1c:	00 91 39 01 	lds	r16, 0x0139
     b20:	10 91 3a 01 	lds	r17, 0x013A
     b24:	0a 17       	cp	r16, r26
     b26:	1b 07       	cpc	r17, r27
     b28:	08 f4       	brcc	.+2      	; 0xb2c <estimate_distance+0xb8>
     b2a:	27 c2       	rjmp	.+1102   	; 0xf7a <estimate_distance+0x506>
     b2c:	00 91 3b 01 	lds	r16, 0x013B
     b30:	10 91 3c 01 	lds	r17, 0x013C
     b34:	0a 17       	cp	r16, r26
     b36:	1b 07       	cpc	r17, r27
     b38:	08 f4       	brcc	.+2      	; 0xb3c <estimate_distance+0xc8>
     b3a:	27 c2       	rjmp	.+1102   	; 0xf8a <estimate_distance+0x516>
     b3c:	00 91 3d 01 	lds	r16, 0x013D
     b40:	10 91 3e 01 	lds	r17, 0x013E
     b44:	0a 17       	cp	r16, r26
     b46:	1b 07       	cpc	r17, r27
     b48:	08 f4       	brcc	.+2      	; 0xb4c <estimate_distance+0xd8>
     b4a:	27 c2       	rjmp	.+1102   	; 0xf9a <estimate_distance+0x526>
     b4c:	00 91 3f 01 	lds	r16, 0x013F
     b50:	10 91 40 01 	lds	r17, 0x0140
     b54:	0a 17       	cp	r16, r26
     b56:	1b 07       	cpc	r17, r27
     b58:	08 f4       	brcc	.+2      	; 0xb5c <estimate_distance+0xe8>
     b5a:	27 c2       	rjmp	.+1102   	; 0xfaa <estimate_distance+0x536>
     b5c:	00 91 41 01 	lds	r16, 0x0141
     b60:	10 91 42 01 	lds	r17, 0x0142
     b64:	0a 17       	cp	r16, r26
     b66:	1b 07       	cpc	r17, r27
     b68:	08 f4       	brcc	.+2      	; 0xb6c <estimate_distance+0xf8>
     b6a:	27 c2       	rjmp	.+1102   	; 0xfba <estimate_distance+0x546>
     b6c:	00 91 43 01 	lds	r16, 0x0143
     b70:	10 91 44 01 	lds	r17, 0x0144
     b74:	0a 17       	cp	r16, r26
     b76:	1b 07       	cpc	r17, r27
     b78:	08 f4       	brcc	.+2      	; 0xb7c <estimate_distance+0x108>
     b7a:	23 c2       	rjmp	.+1094   	; 0xfc2 <estimate_distance+0x54e>
     b7c:	00 91 45 01 	lds	r16, 0x0145
     b80:	10 91 46 01 	lds	r17, 0x0146
     b84:	0a 17       	cp	r16, r26
     b86:	1b 07       	cpc	r17, r27
     b88:	08 f4       	brcc	.+2      	; 0xb8c <estimate_distance+0x118>
     b8a:	23 c2       	rjmp	.+1094   	; 0xfd2 <estimate_distance+0x55e>
     b8c:	00 91 47 01 	lds	r16, 0x0147
     b90:	10 91 48 01 	lds	r17, 0x0148
     b94:	0a 17       	cp	r16, r26
     b96:	1b 07       	cpc	r17, r27
     b98:	08 f4       	brcc	.+2      	; 0xb9c <estimate_distance+0x128>
     b9a:	23 c2       	rjmp	.+1094   	; 0xfe2 <estimate_distance+0x56e>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a0 ed       	ldi	r26, 0xD0	; 208
     ba2:	b0 e4       	ldi	r27, 0x40	; 64
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	9a 83       	std	Y+2, r25	; 0x02
     ba8:	ab 83       	std	Y+3, r26	; 0x03
     baa:	bc 83       	std	Y+4, r27	; 0x04
     bac:	4c e0       	ldi	r20, 0x0C	; 12
     bae:	e4 2e       	mov	r14, r20
     bb0:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bb2:	f7 01       	movw	r30, r14
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	e3 5d       	subi	r30, 0xD3	; 211
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	b8 01       	movw	r22, r16
     bc2:	68 1b       	sub	r22, r24
     bc4:	79 0b       	sbc	r23, r25
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__addsf3>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bda:	ad 81       	ldd	r26, Y+5	; 0x05
     bdc:	be 81       	ldd	r27, Y+6	; 0x06
     bde:	bd 01       	movw	r22, r26
     be0:	bb 0f       	add	r27, r27
     be2:	88 0b       	sbc	r24, r24
     be4:	99 0b       	sbc	r25, r25
     be6:	0e 94 cf 0c 	call	0x199e	; 0x199e <__floatsisf>
     bea:	4b 01       	movw	r8, r22
     bec:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     bee:	b8 01       	movw	r22, r16
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     bf8:	2b 01       	movw	r4, r22
     bfa:	3c 01       	movw	r6, r24
     bfc:	29 81       	ldd	r18, Y+1	; 0x01
     bfe:	3a 81       	ldd	r19, Y+2	; 0x02
     c00:	4b 81       	ldd	r20, Y+3	; 0x03
     c02:	5c 81       	ldd	r21, Y+4	; 0x04
     c04:	c7 01       	movw	r24, r14
     c06:	b6 01       	movw	r22, r12
     c08:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
     c0c:	9b 01       	movw	r18, r22
     c0e:	ac 01       	movw	r20, r24
     c10:	c3 01       	movw	r24, r6
     c12:	b2 01       	movw	r22, r4
     c14:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c1c:	c5 01       	movw	r24, r10
     c1e:	b4 01       	movw	r22, r8
     c20:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e2       	ldi	r20, 0x20	; 32
     c2a:	51 e4       	ldi	r21, 0x41	; 65
     c2c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
            b=((int)((int)b/(int)slope));
     c30:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixsfsi>
     c34:	8b 01       	movw	r16, r22
     c36:	c7 01       	movw	r24, r14
     c38:	b6 01       	movw	r22, r12
     c3a:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixsfsi>
     c3e:	ab 01       	movw	r20, r22
     c40:	bc 01       	movw	r22, r24
     c42:	c8 01       	movw	r24, r16
     c44:	ba 01       	movw	r22, r20
     c46:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__divmodhi4>
            dist_high=b;
     c4a:	16 2f       	mov	r17, r22
     c4c:	77 c0       	rjmp	.+238    	; 0xd3c <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c4e:	dc 01       	movw	r26, r24
     c50:	cd 90       	ld	r12, X+
     c52:	dc 90       	ld	r13, X
     c54:	80 91 54 01 	lds	r24, 0x0154
     c58:	90 91 55 01 	lds	r25, 0x0155
     c5c:	8c 15       	cp	r24, r12
     c5e:	9d 05       	cpc	r25, r13
     c60:	08 f4       	brcc	.+2      	; 0xc64 <estimate_distance+0x1f0>
     c62:	8c c0       	rjmp	.+280    	; 0xd7c <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c64:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c66:	e0 90 56 01 	lds	r14, 0x0156
     c6a:	f0 90 57 01 	lds	r15, 0x0157
     c6e:	ec 14       	cp	r14, r12
     c70:	fd 04       	cpc	r15, r13
     c72:	08 f4       	brcc	.+2      	; 0xc76 <estimate_distance+0x202>
     c74:	5e c1       	rjmp	.+700    	; 0xf32 <estimate_distance+0x4be>
     c76:	e0 90 58 01 	lds	r14, 0x0158
     c7a:	f0 90 59 01 	lds	r15, 0x0159
     c7e:	ec 14       	cp	r14, r12
     c80:	fd 04       	cpc	r15, r13
     c82:	08 f4       	brcc	.+2      	; 0xc86 <estimate_distance+0x212>
     c84:	5e c1       	rjmp	.+700    	; 0xf42 <estimate_distance+0x4ce>
     c86:	e0 90 5a 01 	lds	r14, 0x015A
     c8a:	f0 90 5b 01 	lds	r15, 0x015B
     c8e:	ec 14       	cp	r14, r12
     c90:	fd 04       	cpc	r15, r13
     c92:	08 f4       	brcc	.+2      	; 0xc96 <estimate_distance+0x222>
     c94:	5e c1       	rjmp	.+700    	; 0xf52 <estimate_distance+0x4de>
     c96:	e0 90 5c 01 	lds	r14, 0x015C
     c9a:	f0 90 5d 01 	lds	r15, 0x015D
     c9e:	ec 14       	cp	r14, r12
     ca0:	fd 04       	cpc	r15, r13
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <estimate_distance+0x232>
     ca4:	5e c1       	rjmp	.+700    	; 0xf62 <estimate_distance+0x4ee>
     ca6:	e0 90 5e 01 	lds	r14, 0x015E
     caa:	f0 90 5f 01 	lds	r15, 0x015F
     cae:	ec 14       	cp	r14, r12
     cb0:	fd 04       	cpc	r15, r13
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <estimate_distance+0x242>
     cb4:	c3 c0       	rjmp	.+390    	; 0xe3c <estimate_distance+0x3c8>
     cb6:	e0 90 60 01 	lds	r14, 0x0160
     cba:	f0 90 61 01 	lds	r15, 0x0161
     cbe:	ec 14       	cp	r14, r12
     cc0:	fd 04       	cpc	r15, r13
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <estimate_distance+0x252>
     cc4:	56 c1       	rjmp	.+684    	; 0xf72 <estimate_distance+0x4fe>
     cc6:	e0 90 62 01 	lds	r14, 0x0162
     cca:	f0 90 63 01 	lds	r15, 0x0163
     cce:	ec 14       	cp	r14, r12
     cd0:	fd 04       	cpc	r15, r13
     cd2:	08 f4       	brcc	.+2      	; 0xcd6 <estimate_distance+0x262>
     cd4:	56 c1       	rjmp	.+684    	; 0xf82 <estimate_distance+0x50e>
     cd6:	e0 90 64 01 	lds	r14, 0x0164
     cda:	f0 90 65 01 	lds	r15, 0x0165
     cde:	ec 14       	cp	r14, r12
     ce0:	fd 04       	cpc	r15, r13
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <estimate_distance+0x272>
     ce4:	56 c1       	rjmp	.+684    	; 0xf92 <estimate_distance+0x51e>
     ce6:	e0 90 66 01 	lds	r14, 0x0166
     cea:	f0 90 67 01 	lds	r15, 0x0167
     cee:	ec 14       	cp	r14, r12
     cf0:	fd 04       	cpc	r15, r13
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <estimate_distance+0x282>
     cf4:	56 c1       	rjmp	.+684    	; 0xfa2 <estimate_distance+0x52e>
     cf6:	e0 90 68 01 	lds	r14, 0x0168
     cfa:	f0 90 69 01 	lds	r15, 0x0169
     cfe:	ec 14       	cp	r14, r12
     d00:	fd 04       	cpc	r15, r13
     d02:	08 f4       	brcc	.+2      	; 0xd06 <estimate_distance+0x292>
     d04:	56 c1       	rjmp	.+684    	; 0xfb2 <estimate_distance+0x53e>
     d06:	e0 90 6a 01 	lds	r14, 0x016A
     d0a:	f0 90 6b 01 	lds	r15, 0x016B
     d0e:	ec 14       	cp	r14, r12
     d10:	fd 04       	cpc	r15, r13
     d12:	08 f4       	brcc	.+2      	; 0xd16 <estimate_distance+0x2a2>
     d14:	5a c1       	rjmp	.+692    	; 0xfca <estimate_distance+0x556>
     d16:	e0 90 6c 01 	lds	r14, 0x016C
     d1a:	f0 90 6d 01 	lds	r15, 0x016D
     d1e:	ec 14       	cp	r14, r12
     d20:	fd 04       	cpc	r15, r13
     d22:	08 f4       	brcc	.+2      	; 0xd26 <estimate_distance+0x2b2>
     d24:	5a c1       	rjmp	.+692    	; 0xfda <estimate_distance+0x566>
     d26:	e0 90 6e 01 	lds	r14, 0x016E
     d2a:	f0 90 6f 01 	lds	r15, 0x016F
     d2e:	ec 14       	cp	r14, r12
     d30:	fd 04       	cpc	r15, r13
     d32:	08 f4       	brcc	.+2      	; 0xd36 <estimate_distance+0x2c2>
     d34:	5a c1       	rjmp	.+692    	; 0xfea <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d36:	0a e5       	ldi	r16, 0x5A	; 90
     d38:	31 c0       	rjmp	.+98     	; 0xd9c <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     d3a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     d3c:	ed 81       	ldd	r30, Y+5	; 0x05
     d3e:	fe 81       	ldd	r31, Y+6	; 0x06
     d40:	ed 3b       	cpi	r30, 0xBD	; 189
     d42:	f2 40       	sbci	r31, 0x02	; 2
     d44:	fc f4       	brge	.+62     	; 0xd84 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     d46:	81 e2       	ldi	r24, 0x21	; 33
     d48:	81 0f       	add	r24, r17
    }
}
     d4a:	26 96       	adiw	r28, 0x06	; 6
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	7f 90       	pop	r7
     d70:	6f 90       	pop	r6
     d72:	5f 90       	pop	r5
     d74:	4f 90       	pop	r4
     d76:	3f 90       	pop	r3
     d78:	2f 90       	pop	r2
     d7a:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d7c:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d7e:	81 e2       	ldi	r24, 0x21	; 33
     d80:	80 0f       	add	r24, r16
     d82:	e3 cf       	rjmp	.-58     	; 0xd4a <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d84:	d1 01       	movw	r26, r2
     d86:	cd 90       	ld	r12, X+
     d88:	dc 90       	ld	r13, X
     d8a:	80 91 54 01 	lds	r24, 0x0154
     d8e:	90 91 55 01 	lds	r25, 0x0155
     d92:	8c 15       	cp	r24, r12
     d94:	9d 05       	cpc	r25, r13
     d96:	08 f0       	brcs	.+2      	; 0xd9a <estimate_distance+0x326>
     d98:	66 cf       	rjmp	.-308    	; 0xc66 <estimate_distance+0x1f2>
            dist_low=0;
     d9a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d9c:	1f 3f       	cpi	r17, 0xFF	; 255
     d9e:	79 f3       	breq	.-34     	; 0xd7e <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     da0:	ed 81       	ldd	r30, Y+5	; 0x05
     da2:	fe 81       	ldd	r31, Y+6	; 0x06
     da4:	bf 01       	movw	r22, r30
     da6:	ff 0f       	add	r31, r31
     da8:	88 0b       	sbc	r24, r24
     daa:	99 0b       	sbc	r25, r25
     dac:	0e 94 cf 0c 	call	0x199e	; 0x199e <__floatsisf>
     db0:	6b 01       	movw	r12, r22
     db2:	7c 01       	movw	r14, r24
     db4:	61 2f       	mov	r22, r17
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     dc0:	4b 01       	movw	r8, r22
     dc2:	5c 01       	movw	r10, r24
     dc4:	a7 01       	movw	r20, r14
     dc6:	96 01       	movw	r18, r12
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	81 e6       	ldi	r24, 0x61	; 97
     dce:	94 e4       	ldi	r25, 0x44	; 68
     dd0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
     dd4:	9b 01       	movw	r18, r22
     dd6:	ac 01       	movw	r20, r24
     dd8:	c5 01       	movw	r24, r10
     dda:	b4 01       	movw	r22, r8
     ddc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
     de0:	4b 01       	movw	r8, r22
     de2:	5c 01       	movw	r10, r24
     de4:	60 2f       	mov	r22, r16
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     df0:	2b 01       	movw	r4, r22
     df2:	3c 01       	movw	r6, r24
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	4f e2       	ldi	r20, 0x2F	; 47
     dfa:	54 e4       	ldi	r21, 0x44	; 68
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	c5 01       	movw	r24, r10
     e16:	b4 01       	movw	r22, r8
     e18:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__addsf3>
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	48 e4       	ldi	r20, 0x48	; 72
     e22:	53 e4       	ldi	r21, 0x43	; 67
     e24:	0e 94 25 0c 	call	0x184a	; 0x184a <__divsf3>
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	44 e0       	ldi	r20, 0x04	; 4
     e2e:	52 e4       	ldi	r21, 0x42	; 66
     e30:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__addsf3>
     e34:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fixunssfsi>
     e38:	86 2f       	mov	r24, r22
     e3a:	87 cf       	rjmp	.-242    	; 0xd4a <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e3c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	fc 01       	movw	r30, r24
     e48:	ee 5a       	subi	r30, 0xAE	; 174
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	b7 01       	movw	r22, r14
     e52:	68 1b       	sub	r22, r24
     e54:	79 0b       	sbc	r23, r25
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
     e62:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__addsf3>
     e66:	4b 01       	movw	r8, r22
     e68:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e6a:	b6 01       	movw	r22, r12
     e6c:	dd 0c       	add	r13, r13
     e6e:	88 0b       	sbc	r24, r24
     e70:	99 0b       	sbc	r25, r25
     e72:	0e 94 cf 0c 	call	0x199e	; 0x199e <__floatsisf>
     e76:	2b 01       	movw	r4, r22
     e78:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e7a:	b7 01       	movw	r22, r14
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     e84:	6b 01       	movw	r12, r22
     e86:	7c 01       	movw	r14, r24
     e88:	60 2f       	mov	r22, r16
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	5f e3       	ldi	r21, 0x3F	; 63
     e9c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__addsf3>
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	c7 01       	movw	r24, r14
     eb8:	b6 01       	movw	r22, r12
     eba:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ec2:	c3 01       	movw	r24, r6
     ec4:	b2 01       	movw	r22, r4
     ec6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__subsf3>
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
                b=((int)((int)b/(int)slope));
     ed6:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixsfsi>
     eda:	7b 01       	movw	r14, r22
     edc:	c5 01       	movw	r24, r10
     ede:	b4 01       	movw	r22, r8
     ee0:	0e 94 97 0c 	call	0x192e	; 0x192e <__fixsfsi>
     ee4:	ab 01       	movw	r20, r22
     ee6:	bc 01       	movw	r22, r24
     ee8:	c7 01       	movw	r24, r14
     eea:	ba 01       	movw	r22, r20
     eec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__divmodhi4>
                dist_low=b;
     ef0:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     ef2:	6f 3f       	cpi	r22, 0xFF	; 255
     ef4:	09 f0       	breq	.+2      	; 0xef8 <estimate_distance+0x484>
     ef6:	52 cf       	rjmp	.-348    	; 0xd9c <estimate_distance+0x328>
     ef8:	26 cf       	rjmp	.-436    	; 0xd46 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     efa:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	7c 01       	movw	r14, r24
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	ef 1a       	sub	r14, r31
     f06:	f1 08       	sbc	r15, r1
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__floatunsisf>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	5f e3       	ldi	r21, 0x3F	; 63
     f1a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__mulsf3>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	a9 01       	movw	r20, r18
     f24:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__addsf3>
     f28:	69 83       	std	Y+1, r22	; 0x01
     f2a:	7a 83       	std	Y+2, r23	; 0x02
     f2c:	8b 83       	std	Y+3, r24	; 0x03
     f2e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     f30:	40 ce       	rjmp	.-896    	; 0xbb2 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f32:	01 e0       	ldi	r16, 0x01	; 1
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	84 cf       	rjmp	.-248    	; 0xe42 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	df cf       	rjmp	.-66     	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f42:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	7c cf       	rjmp	.-264    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f4a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	d7 cf       	rjmp	.-82     	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f52:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	74 cf       	rjmp	.-280    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f5a:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	cf cf       	rjmp	.-98     	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f62:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	6c cf       	rjmp	.-296    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f6a:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	c7 cf       	rjmp	.-114    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f72:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	64 cf       	rjmp	.-312    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f7a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f7c:	86 e0       	ldi	r24, 0x06	; 6
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	bf cf       	rjmp	.-130    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f82:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     f84:	87 e0       	ldi	r24, 0x07	; 7
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	5c cf       	rjmp	.-328    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f8a:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f8c:	87 e0       	ldi	r24, 0x07	; 7
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	b7 cf       	rjmp	.-146    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f92:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f94:	88 e0       	ldi	r24, 0x08	; 8
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	54 cf       	rjmp	.-344    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f9a:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	af cf       	rjmp	.-162    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fa2:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     fa4:	89 e0       	ldi	r24, 0x09	; 9
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	4c cf       	rjmp	.-360    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     faa:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     fac:	89 e0       	ldi	r24, 0x09	; 9
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a7 cf       	rjmp	.-178    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fb2:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     fb4:	8a e0       	ldi	r24, 0x0A	; 10
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	44 cf       	rjmp	.-376    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fba:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     fbc:	8a e0       	ldi	r24, 0x0A	; 10
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9f cf       	rjmp	.-194    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fc2:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     fc4:	8b e0       	ldi	r24, 0x0B	; 11
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9b cf       	rjmp	.-202    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fca:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     fcc:	8b e0       	ldi	r24, 0x0B	; 11
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	38 cf       	rjmp	.-400    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fd2:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     fd4:	8c e0       	ldi	r24, 0x0C	; 12
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	93 cf       	rjmp	.-218    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fda:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     fdc:	8c e0       	ldi	r24, 0x0C	; 12
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	30 cf       	rjmp	.-416    	; 0xe42 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fe2:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     fe4:	8d e0       	ldi	r24, 0x0D	; 13
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	8b cf       	rjmp	.-234    	; 0xf00 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fea:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     fec:	8d e0       	ldi	r24, 0x0D	; 13
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	28 cf       	rjmp	.-432    	; 0xe42 <estimate_distance+0x3ce>

00000ff2 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    tx_clock += tx_increment;
    1014:	20 91 73 01 	lds	r18, 0x0173
    1018:	30 91 74 01 	lds	r19, 0x0174
    101c:	80 91 71 01 	lds	r24, 0x0171
    1020:	90 91 72 01 	lds	r25, 0x0172
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
    1028:	90 93 74 01 	sts	0x0174, r25
    102c:	80 93 73 01 	sts	0x0173, r24
    tx_increment = 0xFF;
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	90 93 72 01 	sts	0x0172, r25
    1038:	80 93 71 01 	sts	0x0171, r24
    OCR0A = tx_increment;
    103c:	8f ef       	ldi	r24, 0xFF	; 255
    103e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1040:	80 91 4f 01 	lds	r24, 0x014F
    1044:	90 91 50 01 	lds	r25, 0x0150
    1048:	a0 91 51 01 	lds	r26, 0x0151
    104c:	b0 91 52 01 	lds	r27, 0x0152
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	a1 1d       	adc	r26, r1
    1054:	b1 1d       	adc	r27, r1
    1056:	80 93 4f 01 	sts	0x014F, r24
    105a:	90 93 50 01 	sts	0x0150, r25
    105e:	a0 93 51 01 	sts	0x0151, r26
    1062:	b0 93 52 01 	sts	0x0152, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1066:	80 91 53 01 	lds	r24, 0x0153
    106a:	81 11       	cpse	r24, r1
    106c:	0f c0       	rjmp	.+30     	; 0x108c <__vector_14+0x9a>
    106e:	80 91 82 01 	lds	r24, 0x0182
    1072:	90 91 83 01 	lds	r25, 0x0183
    1076:	20 91 73 01 	lds	r18, 0x0173
    107a:	30 91 74 01 	lds	r19, 0x0174
    107e:	82 17       	cp	r24, r18
    1080:	93 07       	cpc	r25, r19
    1082:	20 f4       	brcc	.+8      	; 0x108c <__vector_14+0x9a>
    1084:	80 91 1b 01 	lds	r24, 0x011B
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	89 f0       	breq	.+34     	; 0x10ae <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    10ae:	e0 91 03 01 	lds	r30, 0x0103
    10b2:	f0 91 04 01 	lds	r31, 0x0104
    10b6:	09 95       	icall
        if (msg) {
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	41 f3       	breq	.-48     	; 0x108c <__vector_14+0x9a>
            if (message_send(msg)) {
    10bc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <message_send>
    10c0:	81 11       	cpse	r24, r1
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    10c4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <rand>
    10c8:	99 27       	eor	r25, r25
    10ca:	90 93 72 01 	sts	0x0172, r25
    10ce:	80 93 71 01 	sts	0x0171, r24
                OCR0A = tx_increment;
    10d2:	87 bd       	out	0x27, r24	; 39
    10d4:	db cf       	rjmp	.-74     	; 0x108c <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    10d6:	e0 91 01 01 	lds	r30, 0x0101
    10da:	f0 91 02 01 	lds	r31, 0x0102
    10de:	09 95       	icall
                tx_clock = 0;
    10e0:	10 92 74 01 	sts	0x0174, r1
    10e4:	10 92 73 01 	sts	0x0173, r1
    10e8:	d1 cf       	rjmp	.-94     	; 0x108c <__vector_14+0x9a>

000010ea <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    10ea:	80 ff       	sbrs	r24, 0
    10ec:	11 c0       	rjmp	.+34     	; 0x1110 <set_color+0x26>
        DDRD |= (1<<5);
    10ee:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    10f0:	81 ff       	sbrs	r24, 1
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <set_color+0x2c>
        DDRD |= (1<<4);
    10f4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    10f6:	82 ff       	sbrs	r24, 2
    10f8:	11 c0       	rjmp	.+34     	; 0x111c <set_color+0x32>
        DDRC |= (1<<3);
    10fa:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    10fc:	83 ff       	sbrs	r24, 3
    10fe:	11 c0       	rjmp	.+34     	; 0x1122 <set_color+0x38>
        DDRC |= (1<<2);
    1100:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1102:	84 ff       	sbrs	r24, 4
    1104:	11 c0       	rjmp	.+34     	; 0x1128 <set_color+0x3e>
        DDRC |= (1<<5);
    1106:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1108:	85 fd       	sbrc	r24, 5
    110a:	11 c0       	rjmp	.+34     	; 0x112e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    110c:	3c 98       	cbi	0x07, 4	; 7
    110e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1110:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1112:	81 fd       	sbrc	r24, 1
    1114:	ef cf       	rjmp	.-34     	; 0x10f4 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1116:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1118:	82 fd       	sbrc	r24, 2
    111a:	ef cf       	rjmp	.-34     	; 0x10fa <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    111c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    111e:	83 fd       	sbrc	r24, 3
    1120:	ef cf       	rjmp	.-34     	; 0x1100 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1122:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1124:	84 fd       	sbrc	r24, 4
    1126:	ef cf       	rjmp	.-34     	; 0x1106 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1128:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    112a:	85 ff       	sbrs	r24, 5
    112c:	ef cf       	rjmp	.-34     	; 0x110c <set_color+0x22>
        DDRC |= (1<<4);
    112e:	3c 9a       	sbi	0x07, 4	; 7
    1130:	08 95       	ret

00001132 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    rx_timer_off();
    1140:	10 92 81 00 	sts	0x0081, r1
    1144:	10 92 85 00 	sts	0x0085, r1
    1148:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	80 93 2c 01 	sts	0x012C, r24
    rx_leadingbyte = 1;
    1152:	80 93 70 01 	sts	0x0170, r24
    rx_busy = 0;
    1156:	10 92 53 01 	sts	0x0153, r1
    adc_trigger_high_gain();
    115a:	10 92 7c 00 	sts	0x007C, r1
    115e:	93 ea       	ldi	r25, 0xA3	; 163
    1160:	90 93 7a 00 	sts	0x007A, r25
    1164:	80 93 7b 00 	sts	0x007B, r24
}
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    119c:	20 91 84 00 	lds	r18, 0x0084
    11a0:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	40 93 53 01 	sts	0x0153, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    11aa:	80 91 2c 01 	lds	r24, 0x012C
    11ae:	88 23       	and	r24, r24
    11b0:	a9 f1       	breq	.+106    	; 0x121c <__vector_23+0xa6>
        rx_timer_on();
    11b2:	10 92 85 00 	sts	0x0085, r1
    11b6:	10 92 84 00 	sts	0x0084, r1
    11ba:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    11be:	10 92 84 01 	sts	0x0184, r1
        rx_leadingbit = 0;
    11c2:	10 92 2c 01 	sts	0x012C, r1
        if (rx_leadingbyte) {
    11c6:	80 91 70 01 	lds	r24, 0x0170
    11ca:	88 23       	and	r24, r24
    11cc:	a1 f0       	breq	.+40     	; 0x11f6 <__vector_23+0x80>
            adc_finish_conversion();
    11ce:	80 91 7a 00 	lds	r24, 0x007A
    11d2:	86 fd       	sbrc	r24, 6
    11d4:	fc cf       	rjmp	.-8      	; 0x11ce <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    11d6:	80 91 78 00 	lds	r24, 0x0078
    11da:	90 91 79 00 	lds	r25, 0x0079
    11de:	90 93 4e 01 	sts	0x014E, r25
    11e2:	80 93 4d 01 	sts	0x014D, r24
            adc_trigger_low_gain();
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 7c 00 	sts	0x007C, r24
    11ec:	93 ea       	ldi	r25, 0xA3	; 163
    11ee:	90 93 7a 00 	sts	0x007A, r25
    11f2:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    121c:	c9 01       	movw	r24, r18
    121e:	87 58       	subi	r24, 0x87	; 135
    1220:	91 09       	sbc	r25, r1
    1222:	84 37       	cpi	r24, 0x74	; 116
    1224:	99 40       	sbci	r25, 0x09	; 9
    1226:	08 f0       	brcs	.+2      	; 0x122a <__vector_23+0xb4>
    1228:	52 c0       	rjmp	.+164    	; 0x12ce <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    122a:	26 58       	subi	r18, 0x86	; 134
    122c:	31 09       	sbc	r19, r1
    122e:	a4 ef       	ldi	r26, 0xF4	; 244
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	0e 94 95 0b 	call	0x172a	; 0x172a <__umulhisi3>
    1236:	aa 27       	eor	r26, r26
    1238:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	91 05       	cpc	r25, r1
    123e:	a1 05       	cpc	r26, r1
    1240:	b1 05       	cpc	r27, r1
    1242:	08 f4       	brcc	.+2      	; 0x1246 <__vector_23+0xd0>
    1244:	7b c0       	rjmp	.+246    	; 0x133c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1246:	40 93 2c 01 	sts	0x012C, r20
                if (rx_leadingbyte) {
    124a:	80 91 70 01 	lds	r24, 0x0170
    124e:	81 11       	cpse	r24, r1
    1250:	52 c0       	rjmp	.+164    	; 0x12f6 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1252:	80 91 4a 01 	lds	r24, 0x014A
    1256:	e8 2f       	mov	r30, r24
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	ea 58       	subi	r30, 0x8A	; 138
    125c:	fe 4f       	sbci	r31, 0xFE	; 254
    125e:	90 91 84 01 	lds	r25, 0x0184
    1262:	90 83       	st	Z, r25
                    rx_byteindex++;
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	80 93 4a 01 	sts	0x014A, r24
                    if (rx_byteindex == sizeof(message_t)) {
    126a:	8c 30       	cpi	r24, 0x0C	; 12
    126c:	21 f6       	brne	.-120    	; 0x11f6 <__vector_23+0x80>
                        rx_timer_off();
    126e:	10 92 81 00 	sts	0x0081, r1
    1272:	10 92 85 00 	sts	0x0085, r1
    1276:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    127a:	40 93 70 01 	sts	0x0170, r20
                        rx_busy = 0;
    127e:	10 92 53 01 	sts	0x0153, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1282:	c0 91 80 01 	lds	r28, 0x0180
    1286:	d0 91 81 01 	lds	r29, 0x0181
    128a:	86 e7       	ldi	r24, 0x76	; 118
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	0e 94 c5 0a 	call	0x158a	; 0x158a <message_crc>
    1292:	c8 17       	cp	r28, r24
    1294:	d9 07       	cpc	r29, r25
    1296:	09 f0       	breq	.+2      	; 0x129a <__vector_23+0x124>
    1298:	ae cf       	rjmp	.-164    	; 0x11f6 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    129a:	80 91 7f 01 	lds	r24, 0x017F
    129e:	87 ff       	sbrs	r24, 7
    12a0:	61 c0       	rjmp	.+194    	; 0x1364 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12a2:	98 e7       	ldi	r25, 0x78	; 120
    12a4:	98 0f       	add	r25, r24
    12a6:	93 30       	cpi	r25, 0x03	; 3
    12a8:	30 f0       	brcs	.+12     	; 0x12b6 <__vector_23+0x140>
        motors_off();
    12aa:	53 98       	cbi	0x0a, 3	; 10
    12ac:	23 98       	cbi	0x04, 3	; 4
    12ae:	10 92 b4 00 	sts	0x00B4, r1
    12b2:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	fc 01       	movw	r30, r24
    12ba:	e0 58       	subi	r30, 0x80	; 128
    12bc:	f1 09       	sbc	r31, r1
    12be:	eb 30       	cpi	r30, 0x0B	; 11
    12c0:	f1 05       	cpc	r31, r1
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__vector_23+0x150>
    12c4:	98 cf       	rjmp	.-208    	; 0x11f6 <__vector_23+0x80>
    12c6:	e5 5c       	subi	r30, 0xC5	; 197
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    12ce:	10 92 81 00 	sts	0x0081, r1
    12d2:	10 92 85 00 	sts	0x0085, r1
    12d6:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    12da:	40 93 2c 01 	sts	0x012C, r20
            rx_leadingbyte = 1;
    12de:	40 93 70 01 	sts	0x0170, r20
            rx_busy = 0;
    12e2:	10 92 53 01 	sts	0x0153, r1
            adc_trigger_high_gain();
    12e6:	10 92 7c 00 	sts	0x007C, r1
    12ea:	83 ea       	ldi	r24, 0xA3	; 163
    12ec:	80 93 7a 00 	sts	0x007A, r24
    12f0:	40 93 7b 00 	sts	0x007B, r20
    12f4:	80 cf       	rjmp	.-256    	; 0x11f6 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    12f6:	80 91 7a 00 	lds	r24, 0x007A
    12fa:	86 fd       	sbrc	r24, 6
    12fc:	fc cf       	rjmp	.-8      	; 0x12f6 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    12fe:	80 91 78 00 	lds	r24, 0x0078
    1302:	90 91 79 00 	lds	r25, 0x0079
    1306:	90 93 4c 01 	sts	0x014C, r25
    130a:	80 93 4b 01 	sts	0x014B, r24
                    adc_trigger_high_gain();
    130e:	10 92 7c 00 	sts	0x007C, r1
    1312:	83 ea       	ldi	r24, 0xA3	; 163
    1314:	80 93 7a 00 	sts	0x007A, r24
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    131e:	90 91 84 01 	lds	r25, 0x0184
    1322:	99 23       	and	r25, r25
    1324:	d1 f0       	breq	.+52     	; 0x135a <__vector_23+0x1e4>
                        rx_timer_off();
    1326:	10 92 81 00 	sts	0x0081, r1
    132a:	10 92 85 00 	sts	0x0085, r1
    132e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1332:	80 93 70 01 	sts	0x0170, r24
                        rx_busy = 0;
    1336:	10 92 53 01 	sts	0x0153, r1
    133a:	5d cf       	rjmp	.-326    	; 0x11f6 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    133c:	21 e0       	ldi	r18, 0x01	; 1
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	f9 01       	movw	r30, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <__vector_23+0x1d2>
    1344:	ee 0f       	add	r30, r30
    1346:	ff 1f       	adc	r31, r31
    1348:	8a 95       	dec	r24
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <__vector_23+0x1ce>
    134c:	cf 01       	movw	r24, r30
    134e:	90 91 84 01 	lds	r25, 0x0184
    1352:	89 2b       	or	r24, r25
    1354:	80 93 84 01 	sts	0x0184, r24
    1358:	4e cf       	rjmp	.-356    	; 0x11f6 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    135a:	10 92 70 01 	sts	0x0170, r1
                        rx_byteindex = 0;
    135e:	10 92 4a 01 	sts	0x014A, r1
    1362:	49 cf       	rjmp	.-366    	; 0x11f6 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1364:	e0 91 05 01 	lds	r30, 0x0105
    1368:	f0 91 06 01 	lds	r31, 0x0106
    136c:	6b e4       	ldi	r22, 0x4B	; 75
    136e:	71 e0       	ldi	r23, 0x01	; 1
    1370:	86 e7       	ldi	r24, 0x76	; 118
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	09 95       	icall
    1376:	3f cf       	rjmp	.-386    	; 0x11f6 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1378:	80 91 76 01 	lds	r24, 0x0176
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	09 f4       	brne	.+2      	; 0x1382 <__vector_23+0x20c>
    1380:	dd c0       	rjmp	.+442    	; 0x153c <__vector_23+0x3c6>
    1382:	08 f4       	brcc	.+2      	; 0x1386 <__vector_23+0x210>
    1384:	ba c0       	rjmp	.+372    	; 0x14fa <__vector_23+0x384>
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	09 f4       	brne	.+2      	; 0x138c <__vector_23+0x216>
    138a:	c6 c0       	rjmp	.+396    	; 0x1518 <__vector_23+0x3a2>
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	09 f0       	breq	.+2      	; 0x1392 <__vector_23+0x21c>
    1390:	b1 c0       	rjmp	.+354    	; 0x14f4 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1392:	80 91 19 01 	lds	r24, 0x0119
    1396:	90 91 7c 01 	lds	r25, 0x017C
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	09 f4       	brne	.+2      	; 0x13a0 <__vector_23+0x22a>
    139e:	e3 c0       	rjmp	.+454    	; 0x1566 <__vector_23+0x3f0>
    13a0:	80 91 7b 01 	lds	r24, 0x017B
                        prev_motion = MOVE_STOP;
    13a4:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_STRAIGHT;
    13a8:	23 e0       	ldi	r18, 0x03	; 3
    13aa:	20 93 19 01 	sts	0x0119, r18
                        kilo_straight_left = calibmsg->straight_left;
    13ae:	80 93 87 01 	sts	0x0187, r24
                        kilo_straight_right = calibmsg->straight_right;
    13b2:	90 93 88 01 	sts	0x0188, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13b6:	80 91 1b 01 	lds	r24, 0x011B
    13ba:	86 30       	cpi	r24, 0x06	; 6
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <__vector_23+0x24a>
    13be:	1b cf       	rjmp	.-458    	; 0x11f6 <__vector_23+0x80>
                motors_on();
    13c0:	53 9a       	sbi	0x0a, 3	; 10
    13c2:	23 9a       	sbi	0x04, 3	; 4
    13c4:	10 92 b4 00 	sts	0x00B4, r1
    13c8:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    13cc:	86 e0       	ldi	r24, 0x06	; 6
    13ce:	80 93 1b 01 	sts	0x011B, r24
    13d2:	11 cf       	rjmp	.-478    	; 0x11f6 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    13d4:	80 91 1b 01 	lds	r24, 0x011B
    13d8:	86 30       	cpi	r24, 0x06	; 6
    13da:	99 f0       	breq	.+38     	; 0x1402 <__vector_23+0x28c>
                motors_on();
    13dc:	53 9a       	sbi	0x0a, 3	; 10
    13de:	23 9a       	sbi	0x04, 3	; 4
    13e0:	10 92 b4 00 	sts	0x00B4, r1
    13e4:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    13e8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    13ea:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    13ec:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    13ee:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    13f0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    13f2:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    13f4:	10 92 19 01 	sts	0x0119, r1
    13f8:	10 92 1a 01 	sts	0x011A, r1
                kilo_state = MOVING;
    13fc:	86 e0       	ldi	r24, 0x06	; 6
    13fe:	80 93 1b 01 	sts	0x011B, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9c 01       	movw	r18, r24
    1408:	00 90 76 01 	lds	r0, 0x0176
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <__vector_23+0x29c>
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <__vector_23+0x298>
    1416:	80 91 85 01 	lds	r24, 0x0185
    141a:	90 91 86 01 	lds	r25, 0x0186
    141e:	82 23       	and	r24, r18
    1420:	93 23       	and	r25, r19
    1422:	89 2b       	or	r24, r25
    1424:	09 f0       	breq	.+2      	; 0x1428 <__vector_23+0x2b2>
    1426:	86 c0       	rjmp	.+268    	; 0x1534 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1428:	10 92 19 01 	sts	0x0119, r1
    142c:	e4 ce       	rjmp	.-568    	; 0x11f6 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	80 93 1b 01 	sts	0x011B, r24
    1434:	e0 ce       	rjmp	.-576    	; 0x11f6 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1436:	e0 e0       	ldi	r30, 0x00	; 0
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    143c:	80 91 6e 00 	lds	r24, 0x006E
    1440:	8d 7f       	andi	r24, 0xFD	; 253
    1442:	80 93 6e 00 	sts	0x006E, r24
    1446:	16 bc       	out	0x26, r1	; 38
            bootload();
    1448:	e0 e0       	ldi	r30, 0x00	; 0
    144a:	f0 e7       	ldi	r31, 0x70	; 112
    144c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    144e:	10 92 1b 01 	sts	0x011B, r1
    1452:	d1 ce       	rjmp	.-606    	; 0x11f6 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	80 93 1b 01 	sts	0x011B, r24
    145a:	cd ce       	rjmp	.-614    	; 0x11f6 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    145c:	85 e0       	ldi	r24, 0x05	; 5
    145e:	80 93 1b 01 	sts	0x011B, r24
    1462:	c9 ce       	rjmp	.-622    	; 0x11f6 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1464:	80 91 1b 01 	lds	r24, 0x011B
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	09 f4       	brne	.+2      	; 0x146e <__vector_23+0x2f8>
    146c:	c4 ce       	rjmp	.-632    	; 0x11f6 <__vector_23+0x80>
    146e:	80 91 1b 01 	lds	r24, 0x011B
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	09 f4       	brne	.+2      	; 0x1478 <__vector_23+0x302>
    1476:	bf ce       	rjmp	.-642    	; 0x11f6 <__vector_23+0x80>
                motors_on();
    1478:	53 9a       	sbi	0x0a, 3	; 10
    147a:	23 9a       	sbi	0x04, 3	; 4
    147c:	10 92 b4 00 	sts	0x00B4, r1
    1480:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	80 93 1b 01 	sts	0x011B, r24
    148a:	b5 ce       	rjmp	.-662    	; 0x11f6 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    148c:	80 91 1b 01 	lds	r24, 0x011B
    1490:	86 30       	cpi	r24, 0x06	; 6
    1492:	09 f0       	breq	.+2      	; 0x1496 <__vector_23+0x320>
    1494:	b0 ce       	rjmp	.-672    	; 0x11f6 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1496:	60 91 85 01 	lds	r22, 0x0185
    149a:	80 eb       	ldi	r24, 0xB0	; 176
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    14a2:	60 91 86 01 	lds	r22, 0x0186
    14a6:	81 eb       	ldi	r24, 0xB1	; 177
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    14ae:	60 91 89 01 	lds	r22, 0x0189
    14b2:	85 e0       	ldi	r24, 0x05	; 5
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    14ba:	60 91 75 01 	lds	r22, 0x0175
    14be:	89 e0       	ldi	r24, 0x09	; 9
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    14c6:	60 91 87 01 	lds	r22, 0x0187
    14ca:	8c e0       	ldi	r24, 0x0C	; 12
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    14d2:	60 91 88 01 	lds	r22, 0x0188
    14d6:	84 e1       	ldi	r24, 0x14	; 20
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <eeprom_write_byte>
                        motors_off();
    14de:	53 98       	cbi	0x0a, 3	; 10
    14e0:	23 98       	cbi	0x04, 3	; 4
    14e2:	10 92 b4 00 	sts	0x00B4, r1
    14e6:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 93 1b 01 	sts	0x011B, r24
    14f0:	80 91 76 01 	lds	r24, 0x0176
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    14f4:	81 11       	cpse	r24, r1
    14f6:	5f cf       	rjmp	.-322    	; 0x13b6 <__vector_23+0x240>
    14f8:	7e ce       	rjmp	.-772    	; 0x11f6 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    14fa:	88 23       	and	r24, r24
    14fc:	39 f2       	breq	.-114    	; 0x148c <__vector_23+0x316>
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	c9 f7       	brne	.-14     	; 0x14f4 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1502:	80 91 77 01 	lds	r24, 0x0177
    1506:	90 91 78 01 	lds	r25, 0x0178
    150a:	90 93 86 01 	sts	0x0186, r25
    150e:	80 93 85 01 	sts	0x0185, r24
                    cur_motion = MOVE_STOP;
    1512:	10 92 19 01 	sts	0x0119, r1
    1516:	4f cf       	rjmp	.-354    	; 0x13b6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1518:	80 91 19 01 	lds	r24, 0x0119
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	71 f1       	breq	.+92     	; 0x157c <__vector_23+0x406>
    1520:	80 91 7a 01 	lds	r24, 0x017A
                        prev_motion = MOVE_STOP;
    1524:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_RIGHT;
    1528:	92 e0       	ldi	r25, 0x02	; 2
    152a:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_right = calibmsg->turn_right;
    152e:	80 93 75 01 	sts	0x0175, r24
    1532:	41 cf       	rjmp	.-382    	; 0x13b6 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 19 01 	sts	0x0119, r24
    153a:	5d ce       	rjmp	.-838    	; 0x11f6 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    153c:	80 91 19 01 	lds	r24, 0x0119
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	51 f0       	breq	.+20     	; 0x1558 <__vector_23+0x3e2>
    1544:	80 91 79 01 	lds	r24, 0x0179
                        prev_motion = MOVE_STOP;
    1548:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_LEFT;
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_left = calibmsg->turn_left;
    1552:	80 93 89 01 	sts	0x0189, r24
    1556:	2f cf       	rjmp	.-418    	; 0x13b6 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1558:	80 91 79 01 	lds	r24, 0x0179
    155c:	90 91 89 01 	lds	r25, 0x0189
    1560:	89 13       	cpse	r24, r25
    1562:	f2 cf       	rjmp	.-28     	; 0x1548 <__vector_23+0x3d2>
    1564:	28 cf       	rjmp	.-432    	; 0x13b6 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1566:	80 91 88 01 	lds	r24, 0x0188
    156a:	98 13       	cpse	r25, r24
    156c:	19 cf       	rjmp	.-462    	; 0x13a0 <__vector_23+0x22a>
    156e:	80 91 7b 01 	lds	r24, 0x017B
    1572:	20 91 87 01 	lds	r18, 0x0187
    1576:	82 13       	cpse	r24, r18
    1578:	15 cf       	rjmp	.-470    	; 0x13a4 <__vector_23+0x22e>
    157a:	1d cf       	rjmp	.-454    	; 0x13b6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    157c:	80 91 7a 01 	lds	r24, 0x017A
    1580:	90 91 75 01 	lds	r25, 0x0175
    1584:	89 13       	cpse	r24, r25
    1586:	ce cf       	rjmp	.-100    	; 0x1524 <__vector_23+0x3ae>
    1588:	16 cf       	rjmp	.-468    	; 0x13b6 <__vector_23+0x240>

0000158a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    158a:	fc 01       	movw	r30, r24
    158c:	ac 01       	movw	r20, r24
    158e:	46 5f       	subi	r20, 0xF6	; 246
    1590:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1596:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1598:	82 27       	eor	r24, r18
    159a:	08 2e       	mov	r0, r24
    159c:	82 95       	swap	r24
    159e:	80 7f       	andi	r24, 0xF0	; 240
    15a0:	80 25       	eor	r24, r0
    15a2:	09 2e       	mov	r0, r25
    15a4:	98 2f       	mov	r25, r24
    15a6:	82 95       	swap	r24
    15a8:	8f 70       	andi	r24, 0x0F	; 15
    15aa:	08 26       	eor	r0, r24
    15ac:	86 95       	lsr	r24
    15ae:	98 27       	eor	r25, r24
    15b0:	89 27       	eor	r24, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	88 0f       	add	r24, r24
    15b6:	88 0f       	add	r24, r24
    15b8:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    15ba:	e4 17       	cp	r30, r20
    15bc:	f5 07       	cpc	r31, r21
    15be:	59 f7       	brne	.-42     	; 0x1596 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    15c0:	08 95       	ret

000015c2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    15c2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    15c4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    15c6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    15c8:	20 91 49 01 	lds	r18, 0x0149
    or tmpreg1, ddrreg
    15cc:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    15ce:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15d2:	30 91 49 01 	lds	r19, 0x0149
    15d6:	20 30       	cpi	r18, 0x00	; 0
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <message_send+0x22>
    15da:	00 00       	nop
    15dc:	25 b1       	in	r18, 0x05	; 5
    15de:	23 2b       	or	r18, r19
    15e0:	25 b9       	out	0x05, r18	; 5
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <message_send+0x2a>
    15e4:	00 00       	nop
    15e6:	00 00       	nop
    15e8:	00 00       	nop
    15ea:	00 c0       	rjmp	.+0      	; 0x15ec <message_send+0x2a>
    15ec:	00 00       	nop
    15ee:	00 00       	nop
    15f0:	00 00       	nop
    15f2:	30 95       	com	r19
    15f4:	25 b1       	in	r18, 0x05	; 5
    15f6:	23 23       	and	r18, r19
    15f8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    15fa:	2e ea       	ldi	r18, 0xAE	; 174
    15fc:	2a 95       	dec	r18
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1600:	2b ee       	ldi	r18, 0xEB	; 235

00001602 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1602:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1604:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1606:	0a c0       	rjmp	.+20     	; 0x161c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1608:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    160a:	30 91 49 01 	lds	r19, 0x0149
    com tmpreg2
    160e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1610:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1612:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1614:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1616:	0f be       	out	0x3f, r0	; 63
    return 0
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	08 95       	ret

0000161c <nocollision>:
nocollision:
    nop
    161c:	00 00       	nop
    dec tmpreg1
    161e:	2a 95       	dec	r18
    brne checkcollision
    1620:	81 f7       	brne	.-32     	; 0x1602 <checkcollision>

    ldi tmpreg1, 0x01
    1622:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1624:	30 91 49 01 	lds	r19, 0x0149
    1628:	20 30       	cpi	r18, 0x00	; 0
    162a:	29 f0       	breq	.+10     	; 0x1636 <nocollision+0x1a>
    162c:	00 00       	nop
    162e:	25 b1       	in	r18, 0x05	; 5
    1630:	23 2b       	or	r18, r19
    1632:	25 b9       	out	0x05, r18	; 5
    1634:	04 c0       	rjmp	.+8      	; 0x163e <nocollision+0x22>
    1636:	00 00       	nop
    1638:	00 00       	nop
    163a:	00 00       	nop
    163c:	00 c0       	rjmp	.+0      	; 0x163e <nocollision+0x22>
    163e:	00 00       	nop
    1640:	00 00       	nop
    1642:	00 00       	nop
    1644:	30 95       	com	r19
    1646:	25 b1       	in	r18, 0x05	; 5
    1648:	23 23       	and	r18, r19
    164a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    164c:	00 00       	nop
    164e:	24 e5       	ldi	r18, 0x54	; 84
    1650:	2a 95       	dec	r18
    1652:	f1 f7       	brne	.-4      	; 0x1650 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1654:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1656:	8c e0       	ldi	r24, 0x0C	; 12

00001658 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1658:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    165a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    165c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    165e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1660:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1662:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1664:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1666:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1668:	50 e0       	ldi	r21, 0x00	; 0

0000166a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    166a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    166c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    166e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1670:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1672:	30 91 49 01 	lds	r19, 0x0149
    1676:	20 30       	cpi	r18, 0x00	; 0
    1678:	29 f0       	breq	.+10     	; 0x1684 <sendbit+0x1a>
    167a:	00 00       	nop
    167c:	25 b1       	in	r18, 0x05	; 5
    167e:	23 2b       	or	r18, r19
    1680:	25 b9       	out	0x05, r18	; 5
    1682:	04 c0       	rjmp	.+8      	; 0x168c <sendbit+0x22>
    1684:	00 00       	nop
    1686:	00 00       	nop
    1688:	00 00       	nop
    168a:	00 c0       	rjmp	.+0      	; 0x168c <sendbit+0x22>
    168c:	00 00       	nop
    168e:	00 00       	nop
    1690:	00 00       	nop
    1692:	30 95       	com	r19
    1694:	25 b1       	in	r18, 0x05	; 5
    1696:	23 23       	and	r18, r19
    1698:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    169a:	00 00       	nop
    169c:	21 e5       	ldi	r18, 0x51	; 81
    169e:	2a 95       	dec	r18
    16a0:	f1 f7       	brne	.-4      	; 0x169e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    16a2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    16a4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    16a6:	9a 95       	dec	r25
    brne sendbit
    16a8:	01 f7       	brne	.-64     	; 0x166a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    16aa:	8a 95       	dec	r24
    brne sendbyte
    16ac:	a9 f6       	brne	.-86     	; 0x1658 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    16ae:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    16b0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    16b2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    16b4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    16b6:	30 91 49 01 	lds	r19, 0x0149
    com tmpreg2
    16ba:	30 95       	com	r19
    in tmpreg1, IR_PORT
    16bc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    16be:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    16c0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    16c2:	0f be       	out	0x3f, r0	; 63
    return 1
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	08 95       	ret

000016c8 <main>:
    }
}

int main()
{
  kilo_init();
    16c8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <kilo_init>
  kilo_message_rx = message_rx;
    16cc:	84 e7       	ldi	r24, 0x74	; 116
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	90 93 06 01 	sts	0x0106, r25
    16d4:	80 93 05 01 	sts	0x0105, r24
  kilo_message_tx = message_tx;
    16d8:	81 e7       	ldi	r24, 0x71	; 113
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	90 93 04 01 	sts	0x0104, r25
    16e0:	80 93 03 01 	sts	0x0103, r24
  kilo_start(setup, loop);
    16e4:	6e ea       	ldi	r22, 0xAE	; 174
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	88 e8       	ldi	r24, 0x88	; 136
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <kilo_start>
    
  return 0;
}
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	08 95       	ret

000016f6 <__divmodhi4>:
    16f6:	97 fb       	bst	r25, 7
    16f8:	07 2e       	mov	r0, r23
    16fa:	16 f4       	brtc	.+4      	; 0x1700 <__divmodhi4+0xa>
    16fc:	00 94       	com	r0
    16fe:	07 d0       	rcall	.+14     	; 0x170e <__divmodhi4_neg1>
    1700:	77 fd       	sbrc	r23, 7
    1702:	09 d0       	rcall	.+18     	; 0x1716 <__divmodhi4_neg2>
    1704:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__udivmodhi4>
    1708:	07 fc       	sbrc	r0, 7
    170a:	05 d0       	rcall	.+10     	; 0x1716 <__divmodhi4_neg2>
    170c:	3e f4       	brtc	.+14     	; 0x171c <__divmodhi4_exit>

0000170e <__divmodhi4_neg1>:
    170e:	90 95       	com	r25
    1710:	81 95       	neg	r24
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	08 95       	ret

00001716 <__divmodhi4_neg2>:
    1716:	70 95       	com	r23
    1718:	61 95       	neg	r22
    171a:	7f 4f       	sbci	r23, 0xFF	; 255

0000171c <__divmodhi4_exit>:
    171c:	08 95       	ret

0000171e <__tablejump2__>:
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	05 90       	lpm	r0, Z+
    1724:	f4 91       	lpm	r31, Z
    1726:	e0 2d       	mov	r30, r0
    1728:	09 94       	ijmp

0000172a <__umulhisi3>:
    172a:	a2 9f       	mul	r26, r18
    172c:	b0 01       	movw	r22, r0
    172e:	b3 9f       	mul	r27, r19
    1730:	c0 01       	movw	r24, r0
    1732:	a3 9f       	mul	r26, r19
    1734:	70 0d       	add	r23, r0
    1736:	81 1d       	adc	r24, r1
    1738:	11 24       	eor	r1, r1
    173a:	91 1d       	adc	r25, r1
    173c:	b2 9f       	mul	r27, r18
    173e:	70 0d       	add	r23, r0
    1740:	81 1d       	adc	r24, r1
    1742:	11 24       	eor	r1, r1
    1744:	91 1d       	adc	r25, r1
    1746:	08 95       	ret

00001748 <__udivmodhi4>:
    1748:	aa 1b       	sub	r26, r26
    174a:	bb 1b       	sub	r27, r27
    174c:	51 e1       	ldi	r21, 0x11	; 17
    174e:	07 c0       	rjmp	.+14     	; 0x175e <__udivmodhi4_ep>

00001750 <__udivmodhi4_loop>:
    1750:	aa 1f       	adc	r26, r26
    1752:	bb 1f       	adc	r27, r27
    1754:	a6 17       	cp	r26, r22
    1756:	b7 07       	cpc	r27, r23
    1758:	10 f0       	brcs	.+4      	; 0x175e <__udivmodhi4_ep>
    175a:	a6 1b       	sub	r26, r22
    175c:	b7 0b       	sbc	r27, r23

0000175e <__udivmodhi4_ep>:
    175e:	88 1f       	adc	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	5a 95       	dec	r21
    1764:	a9 f7       	brne	.-22     	; 0x1750 <__udivmodhi4_loop>
    1766:	80 95       	com	r24
    1768:	90 95       	com	r25
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	08 95       	ret

00001770 <__subsf3>:
    1770:	50 58       	subi	r21, 0x80	; 128

00001772 <__addsf3>:
    1772:	bb 27       	eor	r27, r27
    1774:	aa 27       	eor	r26, r26
    1776:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__addsf3x>
    177a:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_round>
    177e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__fp_pscA>
    1782:	38 f0       	brcs	.+14     	; 0x1792 <__addsf3+0x20>
    1784:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fp_pscB>
    1788:	20 f0       	brcs	.+8      	; 0x1792 <__addsf3+0x20>
    178a:	39 f4       	brne	.+14     	; 0x179a <__addsf3+0x28>
    178c:	9f 3f       	cpi	r25, 0xFF	; 255
    178e:	19 f4       	brne	.+6      	; 0x1796 <__addsf3+0x24>
    1790:	26 f4       	brtc	.+8      	; 0x179a <__addsf3+0x28>
    1792:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__fp_nan>
    1796:	0e f4       	brtc	.+2      	; 0x179a <__addsf3+0x28>
    1798:	e0 95       	com	r30
    179a:	e7 fb       	bst	r30, 7
    179c:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_inf>

000017a0 <__addsf3x>:
    17a0:	e9 2f       	mov	r30, r25
    17a2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__fp_split3>
    17a6:	58 f3       	brcs	.-42     	; 0x177e <__addsf3+0xc>
    17a8:	ba 17       	cp	r27, r26
    17aa:	62 07       	cpc	r22, r18
    17ac:	73 07       	cpc	r23, r19
    17ae:	84 07       	cpc	r24, r20
    17b0:	95 07       	cpc	r25, r21
    17b2:	20 f0       	brcs	.+8      	; 0x17bc <__addsf3x+0x1c>
    17b4:	79 f4       	brne	.+30     	; 0x17d4 <__addsf3x+0x34>
    17b6:	a6 f5       	brtc	.+104    	; 0x1820 <__addsf3x+0x80>
    17b8:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_zero>
    17bc:	0e f4       	brtc	.+2      	; 0x17c0 <__addsf3x+0x20>
    17be:	e0 95       	com	r30
    17c0:	0b 2e       	mov	r0, r27
    17c2:	ba 2f       	mov	r27, r26
    17c4:	a0 2d       	mov	r26, r0
    17c6:	0b 01       	movw	r0, r22
    17c8:	b9 01       	movw	r22, r18
    17ca:	90 01       	movw	r18, r0
    17cc:	0c 01       	movw	r0, r24
    17ce:	ca 01       	movw	r24, r20
    17d0:	a0 01       	movw	r20, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	ff 27       	eor	r31, r31
    17d6:	59 1b       	sub	r21, r25
    17d8:	99 f0       	breq	.+38     	; 0x1800 <__addsf3x+0x60>
    17da:	59 3f       	cpi	r21, 0xF9	; 249
    17dc:	50 f4       	brcc	.+20     	; 0x17f2 <__addsf3x+0x52>
    17de:	50 3e       	cpi	r21, 0xE0	; 224
    17e0:	68 f1       	brcs	.+90     	; 0x183c <__addsf3x+0x9c>
    17e2:	1a 16       	cp	r1, r26
    17e4:	f0 40       	sbci	r31, 0x00	; 0
    17e6:	a2 2f       	mov	r26, r18
    17e8:	23 2f       	mov	r18, r19
    17ea:	34 2f       	mov	r19, r20
    17ec:	44 27       	eor	r20, r20
    17ee:	58 5f       	subi	r21, 0xF8	; 248
    17f0:	f3 cf       	rjmp	.-26     	; 0x17d8 <__addsf3x+0x38>
    17f2:	46 95       	lsr	r20
    17f4:	37 95       	ror	r19
    17f6:	27 95       	ror	r18
    17f8:	a7 95       	ror	r26
    17fa:	f0 40       	sbci	r31, 0x00	; 0
    17fc:	53 95       	inc	r21
    17fe:	c9 f7       	brne	.-14     	; 0x17f2 <__addsf3x+0x52>
    1800:	7e f4       	brtc	.+30     	; 0x1820 <__addsf3x+0x80>
    1802:	1f 16       	cp	r1, r31
    1804:	ba 0b       	sbc	r27, r26
    1806:	62 0b       	sbc	r22, r18
    1808:	73 0b       	sbc	r23, r19
    180a:	84 0b       	sbc	r24, r20
    180c:	ba f0       	brmi	.+46     	; 0x183c <__addsf3x+0x9c>
    180e:	91 50       	subi	r25, 0x01	; 1
    1810:	a1 f0       	breq	.+40     	; 0x183a <__addsf3x+0x9a>
    1812:	ff 0f       	add	r31, r31
    1814:	bb 1f       	adc	r27, r27
    1816:	66 1f       	adc	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	c2 f7       	brpl	.-16     	; 0x180e <__addsf3x+0x6e>
    181e:	0e c0       	rjmp	.+28     	; 0x183c <__addsf3x+0x9c>
    1820:	ba 0f       	add	r27, r26
    1822:	62 1f       	adc	r22, r18
    1824:	73 1f       	adc	r23, r19
    1826:	84 1f       	adc	r24, r20
    1828:	48 f4       	brcc	.+18     	; 0x183c <__addsf3x+0x9c>
    182a:	87 95       	ror	r24
    182c:	77 95       	ror	r23
    182e:	67 95       	ror	r22
    1830:	b7 95       	ror	r27
    1832:	f7 95       	ror	r31
    1834:	9e 3f       	cpi	r25, 0xFE	; 254
    1836:	08 f0       	brcs	.+2      	; 0x183a <__addsf3x+0x9a>
    1838:	b0 cf       	rjmp	.-160    	; 0x179a <__addsf3+0x28>
    183a:	93 95       	inc	r25
    183c:	88 0f       	add	r24, r24
    183e:	08 f0       	brcs	.+2      	; 0x1842 <__addsf3x+0xa2>
    1840:	99 27       	eor	r25, r25
    1842:	ee 0f       	add	r30, r30
    1844:	97 95       	ror	r25
    1846:	87 95       	ror	r24
    1848:	08 95       	ret

0000184a <__divsf3>:
    184a:	0e 94 39 0c 	call	0x1872	; 0x1872 <__divsf3x>
    184e:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_round>
    1852:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fp_pscB>
    1856:	58 f0       	brcs	.+22     	; 0x186e <__divsf3+0x24>
    1858:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__fp_pscA>
    185c:	40 f0       	brcs	.+16     	; 0x186e <__divsf3+0x24>
    185e:	29 f4       	brne	.+10     	; 0x186a <__divsf3+0x20>
    1860:	5f 3f       	cpi	r21, 0xFF	; 255
    1862:	29 f0       	breq	.+10     	; 0x186e <__divsf3+0x24>
    1864:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_inf>
    1868:	51 11       	cpse	r21, r1
    186a:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_szero>
    186e:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__fp_nan>

00001872 <__divsf3x>:
    1872:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__fp_split3>
    1876:	68 f3       	brcs	.-38     	; 0x1852 <__divsf3+0x8>

00001878 <__divsf3_pse>:
    1878:	99 23       	and	r25, r25
    187a:	b1 f3       	breq	.-20     	; 0x1868 <__divsf3+0x1e>
    187c:	55 23       	and	r21, r21
    187e:	91 f3       	breq	.-28     	; 0x1864 <__divsf3+0x1a>
    1880:	95 1b       	sub	r25, r21
    1882:	55 0b       	sbc	r21, r21
    1884:	bb 27       	eor	r27, r27
    1886:	aa 27       	eor	r26, r26
    1888:	62 17       	cp	r22, r18
    188a:	73 07       	cpc	r23, r19
    188c:	84 07       	cpc	r24, r20
    188e:	38 f0       	brcs	.+14     	; 0x189e <__divsf3_pse+0x26>
    1890:	9f 5f       	subi	r25, 0xFF	; 255
    1892:	5f 4f       	sbci	r21, 0xFF	; 255
    1894:	22 0f       	add	r18, r18
    1896:	33 1f       	adc	r19, r19
    1898:	44 1f       	adc	r20, r20
    189a:	aa 1f       	adc	r26, r26
    189c:	a9 f3       	breq	.-22     	; 0x1888 <__divsf3_pse+0x10>
    189e:	35 d0       	rcall	.+106    	; 0x190a <__divsf3_pse+0x92>
    18a0:	0e 2e       	mov	r0, r30
    18a2:	3a f0       	brmi	.+14     	; 0x18b2 <__divsf3_pse+0x3a>
    18a4:	e0 e8       	ldi	r30, 0x80	; 128
    18a6:	32 d0       	rcall	.+100    	; 0x190c <__divsf3_pse+0x94>
    18a8:	91 50       	subi	r25, 0x01	; 1
    18aa:	50 40       	sbci	r21, 0x00	; 0
    18ac:	e6 95       	lsr	r30
    18ae:	00 1c       	adc	r0, r0
    18b0:	ca f7       	brpl	.-14     	; 0x18a4 <__divsf3_pse+0x2c>
    18b2:	2b d0       	rcall	.+86     	; 0x190a <__divsf3_pse+0x92>
    18b4:	fe 2f       	mov	r31, r30
    18b6:	29 d0       	rcall	.+82     	; 0x190a <__divsf3_pse+0x92>
    18b8:	66 0f       	add	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	bb 1f       	adc	r27, r27
    18c0:	26 17       	cp	r18, r22
    18c2:	37 07       	cpc	r19, r23
    18c4:	48 07       	cpc	r20, r24
    18c6:	ab 07       	cpc	r26, r27
    18c8:	b0 e8       	ldi	r27, 0x80	; 128
    18ca:	09 f0       	breq	.+2      	; 0x18ce <__divsf3_pse+0x56>
    18cc:	bb 0b       	sbc	r27, r27
    18ce:	80 2d       	mov	r24, r0
    18d0:	bf 01       	movw	r22, r30
    18d2:	ff 27       	eor	r31, r31
    18d4:	93 58       	subi	r25, 0x83	; 131
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	3a f0       	brmi	.+14     	; 0x18e8 <__divsf3_pse+0x70>
    18da:	9e 3f       	cpi	r25, 0xFE	; 254
    18dc:	51 05       	cpc	r21, r1
    18de:	78 f0       	brcs	.+30     	; 0x18fe <__divsf3_pse+0x86>
    18e0:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_inf>
    18e4:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_szero>
    18e8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ea:	e4 f3       	brlt	.-8      	; 0x18e4 <__divsf3_pse+0x6c>
    18ec:	98 3e       	cpi	r25, 0xE8	; 232
    18ee:	d4 f3       	brlt	.-12     	; 0x18e4 <__divsf3_pse+0x6c>
    18f0:	86 95       	lsr	r24
    18f2:	77 95       	ror	r23
    18f4:	67 95       	ror	r22
    18f6:	b7 95       	ror	r27
    18f8:	f7 95       	ror	r31
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	c9 f7       	brne	.-14     	; 0x18f0 <__divsf3_pse+0x78>
    18fe:	88 0f       	add	r24, r24
    1900:	91 1d       	adc	r25, r1
    1902:	96 95       	lsr	r25
    1904:	87 95       	ror	r24
    1906:	97 f9       	bld	r25, 7
    1908:	08 95       	ret
    190a:	e1 e0       	ldi	r30, 0x01	; 1
    190c:	66 0f       	add	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	bb 1f       	adc	r27, r27
    1914:	62 17       	cp	r22, r18
    1916:	73 07       	cpc	r23, r19
    1918:	84 07       	cpc	r24, r20
    191a:	ba 07       	cpc	r27, r26
    191c:	20 f0       	brcs	.+8      	; 0x1926 <__divsf3_pse+0xae>
    191e:	62 1b       	sub	r22, r18
    1920:	73 0b       	sbc	r23, r19
    1922:	84 0b       	sbc	r24, r20
    1924:	ba 0b       	sbc	r27, r26
    1926:	ee 1f       	adc	r30, r30
    1928:	88 f7       	brcc	.-30     	; 0x190c <__divsf3_pse+0x94>
    192a:	e0 95       	com	r30
    192c:	08 95       	ret

0000192e <__fixsfsi>:
    192e:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fixunssfsi>
    1932:	68 94       	set
    1934:	b1 11       	cpse	r27, r1
    1936:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_szero>
    193a:	08 95       	ret

0000193c <__fixunssfsi>:
    193c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__fp_splitA>
    1940:	88 f0       	brcs	.+34     	; 0x1964 <__fixunssfsi+0x28>
    1942:	9f 57       	subi	r25, 0x7F	; 127
    1944:	98 f0       	brcs	.+38     	; 0x196c <__fixunssfsi+0x30>
    1946:	b9 2f       	mov	r27, r25
    1948:	99 27       	eor	r25, r25
    194a:	b7 51       	subi	r27, 0x17	; 23
    194c:	b0 f0       	brcs	.+44     	; 0x197a <__fixunssfsi+0x3e>
    194e:	e1 f0       	breq	.+56     	; 0x1988 <__fixunssfsi+0x4c>
    1950:	66 0f       	add	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	1a f0       	brmi	.+6      	; 0x1960 <__fixunssfsi+0x24>
    195a:	ba 95       	dec	r27
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__fixunssfsi+0x14>
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <__fixunssfsi+0x4c>
    1960:	b1 30       	cpi	r27, 0x01	; 1
    1962:	91 f0       	breq	.+36     	; 0x1988 <__fixunssfsi+0x4c>
    1964:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_zero>
    1968:	b1 e0       	ldi	r27, 0x01	; 1
    196a:	08 95       	ret
    196c:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_zero>
    1970:	67 2f       	mov	r22, r23
    1972:	78 2f       	mov	r23, r24
    1974:	88 27       	eor	r24, r24
    1976:	b8 5f       	subi	r27, 0xF8	; 248
    1978:	39 f0       	breq	.+14     	; 0x1988 <__fixunssfsi+0x4c>
    197a:	b9 3f       	cpi	r27, 0xF9	; 249
    197c:	cc f3       	brlt	.-14     	; 0x1970 <__fixunssfsi+0x34>
    197e:	86 95       	lsr	r24
    1980:	77 95       	ror	r23
    1982:	67 95       	ror	r22
    1984:	b3 95       	inc	r27
    1986:	d9 f7       	brne	.-10     	; 0x197e <__fixunssfsi+0x42>
    1988:	3e f4       	brtc	.+14     	; 0x1998 <__fixunssfsi+0x5c>
    198a:	90 95       	com	r25
    198c:	80 95       	com	r24
    198e:	70 95       	com	r23
    1990:	61 95       	neg	r22
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	8f 4f       	sbci	r24, 0xFF	; 255
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	08 95       	ret

0000199a <__floatunsisf>:
    199a:	e8 94       	clt
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <__floatsisf+0x12>

0000199e <__floatsisf>:
    199e:	97 fb       	bst	r25, 7
    19a0:	3e f4       	brtc	.+14     	; 0x19b0 <__floatsisf+0x12>
    19a2:	90 95       	com	r25
    19a4:	80 95       	com	r24
    19a6:	70 95       	com	r23
    19a8:	61 95       	neg	r22
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	8f 4f       	sbci	r24, 0xFF	; 255
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	99 23       	and	r25, r25
    19b2:	a9 f0       	breq	.+42     	; 0x19de <__floatsisf+0x40>
    19b4:	f9 2f       	mov	r31, r25
    19b6:	96 e9       	ldi	r25, 0x96	; 150
    19b8:	bb 27       	eor	r27, r27
    19ba:	93 95       	inc	r25
    19bc:	f6 95       	lsr	r31
    19be:	87 95       	ror	r24
    19c0:	77 95       	ror	r23
    19c2:	67 95       	ror	r22
    19c4:	b7 95       	ror	r27
    19c6:	f1 11       	cpse	r31, r1
    19c8:	f8 cf       	rjmp	.-16     	; 0x19ba <__floatsisf+0x1c>
    19ca:	fa f4       	brpl	.+62     	; 0x1a0a <__floatsisf+0x6c>
    19cc:	bb 0f       	add	r27, r27
    19ce:	11 f4       	brne	.+4      	; 0x19d4 <__floatsisf+0x36>
    19d0:	60 ff       	sbrs	r22, 0
    19d2:	1b c0       	rjmp	.+54     	; 0x1a0a <__floatsisf+0x6c>
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	16 c0       	rjmp	.+44     	; 0x1a0a <__floatsisf+0x6c>
    19de:	88 23       	and	r24, r24
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <__floatsisf+0x48>
    19e2:	96 e9       	ldi	r25, 0x96	; 150
    19e4:	11 c0       	rjmp	.+34     	; 0x1a08 <__floatsisf+0x6a>
    19e6:	77 23       	and	r23, r23
    19e8:	21 f0       	breq	.+8      	; 0x19f2 <__floatsisf+0x54>
    19ea:	9e e8       	ldi	r25, 0x8E	; 142
    19ec:	87 2f       	mov	r24, r23
    19ee:	76 2f       	mov	r23, r22
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <__floatsisf+0x5e>
    19f2:	66 23       	and	r22, r22
    19f4:	71 f0       	breq	.+28     	; 0x1a12 <__floatsisf+0x74>
    19f6:	96 e8       	ldi	r25, 0x86	; 134
    19f8:	86 2f       	mov	r24, r22
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	2a f0       	brmi	.+10     	; 0x1a0a <__floatsisf+0x6c>
    1a00:	9a 95       	dec	r25
    1a02:	66 0f       	add	r22, r22
    1a04:	77 1f       	adc	r23, r23
    1a06:	88 1f       	adc	r24, r24
    1a08:	da f7       	brpl	.-10     	; 0x1a00 <__floatsisf+0x62>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	96 95       	lsr	r25
    1a0e:	87 95       	ror	r24
    1a10:	97 f9       	bld	r25, 7
    1a12:	08 95       	ret

00001a14 <__fp_inf>:
    1a14:	97 f9       	bld	r25, 7
    1a16:	9f 67       	ori	r25, 0x7F	; 127
    1a18:	80 e8       	ldi	r24, 0x80	; 128
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	08 95       	ret

00001a20 <__fp_nan>:
    1a20:	9f ef       	ldi	r25, 0xFF	; 255
    1a22:	80 ec       	ldi	r24, 0xC0	; 192
    1a24:	08 95       	ret

00001a26 <__fp_pscA>:
    1a26:	00 24       	eor	r0, r0
    1a28:	0a 94       	dec	r0
    1a2a:	16 16       	cp	r1, r22
    1a2c:	17 06       	cpc	r1, r23
    1a2e:	18 06       	cpc	r1, r24
    1a30:	09 06       	cpc	r0, r25
    1a32:	08 95       	ret

00001a34 <__fp_pscB>:
    1a34:	00 24       	eor	r0, r0
    1a36:	0a 94       	dec	r0
    1a38:	12 16       	cp	r1, r18
    1a3a:	13 06       	cpc	r1, r19
    1a3c:	14 06       	cpc	r1, r20
    1a3e:	05 06       	cpc	r0, r21
    1a40:	08 95       	ret

00001a42 <__fp_round>:
    1a42:	09 2e       	mov	r0, r25
    1a44:	03 94       	inc	r0
    1a46:	00 0c       	add	r0, r0
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <__fp_round+0xc>
    1a4a:	88 23       	and	r24, r24
    1a4c:	52 f0       	brmi	.+20     	; 0x1a62 <__fp_round+0x20>
    1a4e:	bb 0f       	add	r27, r27
    1a50:	40 f4       	brcc	.+16     	; 0x1a62 <__fp_round+0x20>
    1a52:	bf 2b       	or	r27, r31
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <__fp_round+0x18>
    1a56:	60 ff       	sbrs	r22, 0
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <__fp_round+0x20>
    1a5a:	6f 5f       	subi	r22, 0xFF	; 255
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	08 95       	ret

00001a64 <__fp_split3>:
    1a64:	57 fd       	sbrc	r21, 7
    1a66:	90 58       	subi	r25, 0x80	; 128
    1a68:	44 0f       	add	r20, r20
    1a6a:	55 1f       	adc	r21, r21
    1a6c:	59 f0       	breq	.+22     	; 0x1a84 <__fp_splitA+0x10>
    1a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a70:	71 f0       	breq	.+28     	; 0x1a8e <__fp_splitA+0x1a>
    1a72:	47 95       	ror	r20

00001a74 <__fp_splitA>:
    1a74:	88 0f       	add	r24, r24
    1a76:	97 fb       	bst	r25, 7
    1a78:	99 1f       	adc	r25, r25
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <__fp_splitA+0x20>
    1a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a7e:	79 f0       	breq	.+30     	; 0x1a9e <__fp_splitA+0x2a>
    1a80:	87 95       	ror	r24
    1a82:	08 95       	ret
    1a84:	12 16       	cp	r1, r18
    1a86:	13 06       	cpc	r1, r19
    1a88:	14 06       	cpc	r1, r20
    1a8a:	55 1f       	adc	r21, r21
    1a8c:	f2 cf       	rjmp	.-28     	; 0x1a72 <__fp_split3+0xe>
    1a8e:	46 95       	lsr	r20
    1a90:	f1 df       	rcall	.-30     	; 0x1a74 <__fp_splitA>
    1a92:	08 c0       	rjmp	.+16     	; 0x1aa4 <__fp_splitA+0x30>
    1a94:	16 16       	cp	r1, r22
    1a96:	17 06       	cpc	r1, r23
    1a98:	18 06       	cpc	r1, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	f1 cf       	rjmp	.-30     	; 0x1a80 <__fp_splitA+0xc>
    1a9e:	86 95       	lsr	r24
    1aa0:	71 05       	cpc	r23, r1
    1aa2:	61 05       	cpc	r22, r1
    1aa4:	08 94       	sec
    1aa6:	08 95       	ret

00001aa8 <__fp_zero>:
    1aa8:	e8 94       	clt

00001aaa <__fp_szero>:
    1aaa:	bb 27       	eor	r27, r27
    1aac:	66 27       	eor	r22, r22
    1aae:	77 27       	eor	r23, r23
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	97 f9       	bld	r25, 7
    1ab4:	08 95       	ret

00001ab6 <__mulsf3>:
    1ab6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__mulsf3x>
    1aba:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__fp_round>
    1abe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__fp_pscA>
    1ac2:	38 f0       	brcs	.+14     	; 0x1ad2 <__mulsf3+0x1c>
    1ac4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fp_pscB>
    1ac8:	20 f0       	brcs	.+8      	; 0x1ad2 <__mulsf3+0x1c>
    1aca:	95 23       	and	r25, r21
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <__mulsf3+0x1c>
    1ace:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_inf>
    1ad2:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__fp_nan>
    1ad6:	11 24       	eor	r1, r1
    1ad8:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_szero>

00001adc <__mulsf3x>:
    1adc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__fp_split3>
    1ae0:	70 f3       	brcs	.-36     	; 0x1abe <__mulsf3+0x8>

00001ae2 <__mulsf3_pse>:
    1ae2:	95 9f       	mul	r25, r21
    1ae4:	c1 f3       	breq	.-16     	; 0x1ad6 <__mulsf3+0x20>
    1ae6:	95 0f       	add	r25, r21
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	55 1f       	adc	r21, r21
    1aec:	62 9f       	mul	r22, r18
    1aee:	f0 01       	movw	r30, r0
    1af0:	72 9f       	mul	r23, r18
    1af2:	bb 27       	eor	r27, r27
    1af4:	f0 0d       	add	r31, r0
    1af6:	b1 1d       	adc	r27, r1
    1af8:	63 9f       	mul	r22, r19
    1afa:	aa 27       	eor	r26, r26
    1afc:	f0 0d       	add	r31, r0
    1afe:	b1 1d       	adc	r27, r1
    1b00:	aa 1f       	adc	r26, r26
    1b02:	64 9f       	mul	r22, r20
    1b04:	66 27       	eor	r22, r22
    1b06:	b0 0d       	add	r27, r0
    1b08:	a1 1d       	adc	r26, r1
    1b0a:	66 1f       	adc	r22, r22
    1b0c:	82 9f       	mul	r24, r18
    1b0e:	22 27       	eor	r18, r18
    1b10:	b0 0d       	add	r27, r0
    1b12:	a1 1d       	adc	r26, r1
    1b14:	62 1f       	adc	r22, r18
    1b16:	73 9f       	mul	r23, r19
    1b18:	b0 0d       	add	r27, r0
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	62 1f       	adc	r22, r18
    1b1e:	83 9f       	mul	r24, r19
    1b20:	a0 0d       	add	r26, r0
    1b22:	61 1d       	adc	r22, r1
    1b24:	22 1f       	adc	r18, r18
    1b26:	74 9f       	mul	r23, r20
    1b28:	33 27       	eor	r19, r19
    1b2a:	a0 0d       	add	r26, r0
    1b2c:	61 1d       	adc	r22, r1
    1b2e:	23 1f       	adc	r18, r19
    1b30:	84 9f       	mul	r24, r20
    1b32:	60 0d       	add	r22, r0
    1b34:	21 1d       	adc	r18, r1
    1b36:	82 2f       	mov	r24, r18
    1b38:	76 2f       	mov	r23, r22
    1b3a:	6a 2f       	mov	r22, r26
    1b3c:	11 24       	eor	r1, r1
    1b3e:	9f 57       	subi	r25, 0x7F	; 127
    1b40:	50 40       	sbci	r21, 0x00	; 0
    1b42:	9a f0       	brmi	.+38     	; 0x1b6a <__mulsf3_pse+0x88>
    1b44:	f1 f0       	breq	.+60     	; 0x1b82 <__mulsf3_pse+0xa0>
    1b46:	88 23       	and	r24, r24
    1b48:	4a f0       	brmi	.+18     	; 0x1b5c <__mulsf3_pse+0x7a>
    1b4a:	ee 0f       	add	r30, r30
    1b4c:	ff 1f       	adc	r31, r31
    1b4e:	bb 1f       	adc	r27, r27
    1b50:	66 1f       	adc	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	88 1f       	adc	r24, r24
    1b56:	91 50       	subi	r25, 0x01	; 1
    1b58:	50 40       	sbci	r21, 0x00	; 0
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <__mulsf3_pse+0x64>
    1b5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5e:	51 05       	cpc	r21, r1
    1b60:	80 f0       	brcs	.+32     	; 0x1b82 <__mulsf3_pse+0xa0>
    1b62:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_inf>
    1b66:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_szero>
    1b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6c:	e4 f3       	brlt	.-8      	; 0x1b66 <__mulsf3_pse+0x84>
    1b6e:	98 3e       	cpi	r25, 0xE8	; 232
    1b70:	d4 f3       	brlt	.-12     	; 0x1b66 <__mulsf3_pse+0x84>
    1b72:	86 95       	lsr	r24
    1b74:	77 95       	ror	r23
    1b76:	67 95       	ror	r22
    1b78:	b7 95       	ror	r27
    1b7a:	f7 95       	ror	r31
    1b7c:	e7 95       	ror	r30
    1b7e:	9f 5f       	subi	r25, 0xFF	; 255
    1b80:	c1 f7       	brne	.-16     	; 0x1b72 <__mulsf3_pse+0x90>
    1b82:	fe 2b       	or	r31, r30
    1b84:	88 0f       	add	r24, r24
    1b86:	91 1d       	adc	r25, r1
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	97 f9       	bld	r25, 7
    1b8e:	08 95       	ret

00001b90 <do_rand>:
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	68 81       	ld	r22, Y
    1ba8:	79 81       	ldd	r23, Y+1	; 0x01
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	61 15       	cp	r22, r1
    1bb0:	71 05       	cpc	r23, r1
    1bb2:	81 05       	cpc	r24, r1
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	21 f4       	brne	.+8      	; 0x1bc0 <do_rand+0x30>
    1bb8:	64 e2       	ldi	r22, 0x24	; 36
    1bba:	79 ed       	ldi	r23, 0xD9	; 217
    1bbc:	8b e5       	ldi	r24, 0x5B	; 91
    1bbe:	97 e0       	ldi	r25, 0x07	; 7
    1bc0:	2d e1       	ldi	r18, 0x1D	; 29
    1bc2:	33 ef       	ldi	r19, 0xF3	; 243
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divmodsi4>
    1bcc:	49 01       	movw	r8, r18
    1bce:	5a 01       	movw	r10, r20
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	a7 ea       	ldi	r26, 0xA7	; 167
    1bd6:	b1 e4       	ldi	r27, 0x41	; 65
    1bd8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__muluhisi3>
    1bdc:	6b 01       	movw	r12, r22
    1bde:	7c 01       	movw	r14, r24
    1be0:	ac ee       	ldi	r26, 0xEC	; 236
    1be2:	b4 ef       	ldi	r27, 0xF4	; 244
    1be4:	a5 01       	movw	r20, r10
    1be6:	94 01       	movw	r18, r8
    1be8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulohisi3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8c 0d       	add	r24, r12
    1bf2:	9d 1d       	adc	r25, r13
    1bf4:	ae 1d       	adc	r26, r14
    1bf6:	bf 1d       	adc	r27, r15
    1bf8:	b7 ff       	sbrs	r27, 7
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <do_rand+0x72>
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	a1 09       	sbc	r26, r1
    1c00:	b0 48       	sbci	r27, 0x80	; 128
    1c02:	88 83       	st	Y, r24
    1c04:	99 83       	std	Y+1, r25	; 0x01
    1c06:	aa 83       	std	Y+2, r26	; 0x02
    1c08:	bb 83       	std	Y+3, r27	; 0x03
    1c0a:	9f 77       	andi	r25, 0x7F	; 127
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	9f 90       	pop	r9
    1c1e:	8f 90       	pop	r8
    1c20:	08 95       	ret

00001c22 <rand_r>:
    1c22:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <do_rand>
    1c26:	08 95       	ret

00001c28 <rand>:
    1c28:	87 e0       	ldi	r24, 0x07	; 7
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <do_rand>
    1c30:	08 95       	ret

00001c32 <srand>:
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	80 93 07 01 	sts	0x0107, r24
    1c3a:	90 93 08 01 	sts	0x0108, r25
    1c3e:	a0 93 09 01 	sts	0x0109, r26
    1c42:	b0 93 0a 01 	sts	0x010A, r27
    1c46:	08 95       	ret

00001c48 <eeprom_read_byte>:
    1c48:	f9 99       	sbic	0x1f, 1	; 31
    1c4a:	fe cf       	rjmp	.-4      	; 0x1c48 <eeprom_read_byte>
    1c4c:	92 bd       	out	0x22, r25	; 34
    1c4e:	81 bd       	out	0x21, r24	; 33
    1c50:	f8 9a       	sbi	0x1f, 0	; 31
    1c52:	99 27       	eor	r25, r25
    1c54:	80 b5       	in	r24, 0x20	; 32
    1c56:	08 95       	ret

00001c58 <eeprom_write_byte>:
    1c58:	26 2f       	mov	r18, r22

00001c5a <eeprom_write_r18>:
    1c5a:	f9 99       	sbic	0x1f, 1	; 31
    1c5c:	fe cf       	rjmp	.-4      	; 0x1c5a <eeprom_write_r18>
    1c5e:	1f ba       	out	0x1f, r1	; 31
    1c60:	92 bd       	out	0x22, r25	; 34
    1c62:	81 bd       	out	0x21, r24	; 33
    1c64:	20 bd       	out	0x20, r18	; 32
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	fa 9a       	sbi	0x1f, 2	; 31
    1c6c:	f9 9a       	sbi	0x1f, 1	; 31
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	08 95       	ret

00001c74 <__divmodsi4>:
    1c74:	05 2e       	mov	r0, r21
    1c76:	97 fb       	bst	r25, 7
    1c78:	1e f4       	brtc	.+6      	; 0x1c80 <__divmodsi4+0xc>
    1c7a:	00 94       	com	r0
    1c7c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__negsi2>
    1c80:	57 fd       	sbrc	r21, 7
    1c82:	07 d0       	rcall	.+14     	; 0x1c92 <__divmodsi4_neg2>
    1c84:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__udivmodsi4>
    1c88:	07 fc       	sbrc	r0, 7
    1c8a:	03 d0       	rcall	.+6      	; 0x1c92 <__divmodsi4_neg2>
    1c8c:	4e f4       	brtc	.+18     	; 0x1ca0 <__divmodsi4_exit>
    1c8e:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__negsi2>

00001c92 <__divmodsi4_neg2>:
    1c92:	50 95       	com	r21
    1c94:	40 95       	com	r20
    1c96:	30 95       	com	r19
    1c98:	21 95       	neg	r18
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	4f 4f       	sbci	r20, 0xFF	; 255
    1c9e:	5f 4f       	sbci	r21, 0xFF	; 255

00001ca0 <__divmodsi4_exit>:
    1ca0:	08 95       	ret

00001ca2 <__negsi2>:
    1ca2:	90 95       	com	r25
    1ca4:	80 95       	com	r24
    1ca6:	70 95       	com	r23
    1ca8:	61 95       	neg	r22
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	8f 4f       	sbci	r24, 0xFF	; 255
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__muluhisi3>:
    1cb2:	0e 94 95 0b 	call	0x172a	; 0x172a <__umulhisi3>
    1cb6:	a5 9f       	mul	r26, r21
    1cb8:	90 0d       	add	r25, r0
    1cba:	b4 9f       	mul	r27, r20
    1cbc:	90 0d       	add	r25, r0
    1cbe:	a4 9f       	mul	r26, r20
    1cc0:	80 0d       	add	r24, r0
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	11 24       	eor	r1, r1
    1cc6:	08 95       	ret

00001cc8 <__mulshisi3>:
    1cc8:	b7 ff       	sbrs	r27, 7
    1cca:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__muluhisi3>

00001cce <__mulohisi3>:
    1cce:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__muluhisi3>
    1cd2:	82 1b       	sub	r24, r18
    1cd4:	93 0b       	sbc	r25, r19
    1cd6:	08 95       	ret

00001cd8 <__udivmodsi4>:
    1cd8:	a1 e2       	ldi	r26, 0x21	; 33
    1cda:	1a 2e       	mov	r1, r26
    1cdc:	aa 1b       	sub	r26, r26
    1cde:	bb 1b       	sub	r27, r27
    1ce0:	fd 01       	movw	r30, r26
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <__udivmodsi4_ep>

00001ce4 <__udivmodsi4_loop>:
    1ce4:	aa 1f       	adc	r26, r26
    1ce6:	bb 1f       	adc	r27, r27
    1ce8:	ee 1f       	adc	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	a2 17       	cp	r26, r18
    1cee:	b3 07       	cpc	r27, r19
    1cf0:	e4 07       	cpc	r30, r20
    1cf2:	f5 07       	cpc	r31, r21
    1cf4:	20 f0       	brcs	.+8      	; 0x1cfe <__udivmodsi4_ep>
    1cf6:	a2 1b       	sub	r26, r18
    1cf8:	b3 0b       	sbc	r27, r19
    1cfa:	e4 0b       	sbc	r30, r20
    1cfc:	f5 0b       	sbc	r31, r21

00001cfe <__udivmodsi4_ep>:
    1cfe:	66 1f       	adc	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	88 1f       	adc	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	1a 94       	dec	r1
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <__udivmodsi4_loop>
    1d0a:	60 95       	com	r22
    1d0c:	70 95       	com	r23
    1d0e:	80 95       	com	r24
    1d10:	90 95       	com	r25
    1d12:	9b 01       	movw	r18, r22
    1d14:	ac 01       	movw	r20, r24
    1d16:	bd 01       	movw	r22, r26
    1d18:	cf 01       	movw	r24, r30
    1d1a:	08 95       	ret

00001d1c <_exit>:
    1d1c:	f8 94       	cli

00001d1e <__stop_program>:
    1d1e:	ff cf       	rjmp	.-2      	; 0x1d1e <__stop_program>
