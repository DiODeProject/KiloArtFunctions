
build/blink_sendsignal.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	3c 02       	muls	r19, r28
      6a:	b8 02       	muls	r27, r24
      6c:	10 02       	muls	r17, r16
      6e:	07 02       	muls	r16, r23
      70:	0d 02       	muls	r16, r29
      72:	9a 02       	muls	r25, r26
      74:	8f 02       	muls	r24, r31
      76:	1a 09       	sbc	r17, r10
      78:	f7 07       	cpc	r31, r23
      7a:	f7 07       	cpc	r31, r23
      7c:	17 09       	sbc	r17, r7
      7e:	23 09       	sbc	r18, r3
      80:	13 09       	sbc	r17, r3
      82:	2a 09       	sbc	r18, r10
      84:	26 09       	sbc	r18, r6
      86:	2e 09       	sbc	r18, r14
      88:	e6 08       	sbc	r14, r6
      8a:	b8 08       	sbc	r11, r8

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e1       	ldi	r30, 0x18	; 24
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 38       	cpi	r26, 0x82	; 130
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <main>
      da:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:


message_t *message_tx()
{
    return &message;
}
      e2:	82 e1       	ldi	r24, 0x12	; 18
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:

void message_tx_success()
{
    // Set the flag on message transmission.
    message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0d 01 	sts	0x010D, r25
      f0:	80 93 0c 01 	sts	0x010C, r24
      f4:	08 95       	ret

000000f6 <setup>:
message_t message;
// Flag to keep track of message transmission.
int message_sent = 0;

void setup()
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  state = INHALE;
      fa:	10 92 1f 01 	sts	0x011F, r1
      fe:	10 92 1e 01 	sts	0x011E, r1
  last_state_update = kilo_ticks;
     102:	80 91 47 01 	lds	r24, 0x0147
     106:	90 91 48 01 	lds	r25, 0x0148
     10a:	a0 91 49 01 	lds	r26, 0x0149
     10e:	b0 91 4a 01 	lds	r27, 0x014A
     112:	80 93 20 01 	sts	0x0120, r24
     116:	90 93 21 01 	sts	0x0121, r25
     11a:	a0 93 22 01 	sts	0x0122, r26
     11e:	b0 93 23 01 	sts	0x0123, r27
    // The type is always NORMAL.
    message.type = NORMAL;
     122:	c2 e1       	ldi	r28, 0x12	; 18
     124:	d1 e0       	ldi	r29, 0x01	; 1
     126:	19 86       	std	Y+9, r1	; 0x09
    // Some dummy data as an example.
    message.data[0] = kilo_uid;
     128:	80 91 7d 01 	lds	r24, 0x017D
     12c:	88 83       	st	Y, r24
    // It's important that the CRC is computed after the data has been set;
    // otherwise it would be wrong and the message would be dropped by the
    // receiver.
    message.crc = message_crc(&message);
     12e:	ce 01       	movw	r24, r28
     130:	0e 94 c1 09 	call	0x1382	; 0x1382 <message_crc>
     134:	9b 87       	std	Y+11, r25	; 0x0b
     136:	8a 87       	std	Y+10, r24	; 0x0a
}
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <loop>:

void loop()
{
  // Update the state every 64 clock ticks (roughly 2 seconds).

  if (kilo_ticks > (last_state_update + 32))
     13e:	40 91 47 01 	lds	r20, 0x0147
     142:	50 91 48 01 	lds	r21, 0x0148
     146:	60 91 49 01 	lds	r22, 0x0149
     14a:	70 91 4a 01 	lds	r23, 0x014A
     14e:	80 91 20 01 	lds	r24, 0x0120
     152:	90 91 21 01 	lds	r25, 0x0121
     156:	a0 91 22 01 	lds	r26, 0x0122
     15a:	b0 91 23 01 	lds	r27, 0x0123
     15e:	80 96       	adiw	r24, 0x20	; 32
     160:	a1 1d       	adc	r26, r1
     162:	b1 1d       	adc	r27, r1
     164:	84 17       	cp	r24, r20
     166:	95 07       	cpc	r25, r21
     168:	a6 07       	cpc	r26, r22
     16a:	b7 07       	cpc	r27, r23
     16c:	10 f5       	brcc	.+68     	; 0x1b2 <loop+0x74>
    {
      last_state_update = kilo_ticks;
     16e:	80 91 47 01 	lds	r24, 0x0147
     172:	90 91 48 01 	lds	r25, 0x0148
     176:	a0 91 49 01 	lds	r26, 0x0149
     17a:	b0 91 4a 01 	lds	r27, 0x014A
     17e:	80 93 20 01 	sts	0x0120, r24
     182:	90 93 21 01 	sts	0x0121, r25
     186:	a0 93 22 01 	sts	0x0122, r26
     18a:	b0 93 23 01 	sts	0x0123, r27
       
      if (state == INHALE)
     18e:	80 91 1e 01 	lds	r24, 0x011E
     192:	90 91 1f 01 	lds	r25, 0x011F
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	69 f0       	breq	.+26     	; 0x1b4 <loop+0x76>
        {
	  set_color(RGB(1, 0, 0));
	  // Set the next state.
	  state = EXHALE;
        }
      else if (state == EXHALE)
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	a9 f0       	breq	.+42     	; 0x1c8 <loop+0x8a>
        {
	  set_color(RGB(0, 0, 0));
	  // Set the next state.
	  state = INHALE;
        }
      if (message_sent == 1)
     19e:	80 91 0c 01 	lds	r24, 0x010C
     1a2:	90 91 0d 01 	lds	r25, 0x010D
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	21 f4       	brne	.+8      	; 0x1b2 <loop+0x74>
        {
          // Reset the flag so the LED is only blinked once per message.
          message_sent = 0;
     1aa:	10 92 0d 01 	sts	0x010D, r1
     1ae:	10 92 0c 01 	sts	0x010C, r1
     1b2:	08 95       	ret
    {
      last_state_update = kilo_ticks;
       
      if (state == INHALE)
        {
	  set_color(RGB(1, 0, 0));
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	0e 94 71 07 	call	0xee2	; 0xee2 <set_color>
	  // Set the next state.
	  state = EXHALE;
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	90 93 1f 01 	sts	0x011F, r25
     1c2:	80 93 1e 01 	sts	0x011E, r24
     1c6:	eb cf       	rjmp	.-42     	; 0x19e <loop+0x60>
        }
      else if (state == EXHALE)
        {
	  set_color(RGB(0, 0, 0));
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	0e 94 71 07 	call	0xee2	; 0xee2 <set_color>
	  // Set the next state.
	  state = INHALE;
     1ce:	10 92 1f 01 	sts	0x011F, r1
     1d2:	10 92 1e 01 	sts	0x011E, r1
     1d6:	e3 cf       	rjmp	.-58     	; 0x19e <loop+0x60>

000001d8 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1d8:	08 95       	ret

000001da <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	08 95       	ret

000001e0 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1e0:	08 95       	ret

000001e2 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
    cli();
     1f0:	f8 94       	cli

    ports_off();
     1f2:	14 b8       	out	0x04, r1	; 4
     1f4:	17 b8       	out	0x07, r1	; 7
     1f6:	1a b8       	out	0x0a, r1	; 10
     1f8:	15 b8       	out	0x05, r1	; 5
     1fa:	18 b8       	out	0x08, r1	; 8
     1fc:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1fe:	52 9a       	sbi	0x0a, 2	; 10
     200:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     202:	14 bc       	out	0x24, r1	; 36
     204:	85 e0       	ldi	r24, 0x05	; 5
     206:	85 bd       	out	0x25, r24	; 37
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	87 bd       	out	0x27, r24	; 39
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     212:	10 92 80 00 	sts	0x0080, r1
     216:	10 92 81 00 	sts	0x0081, r1
     21a:	2f e8       	ldi	r18, 0x8F	; 143
     21c:	3b e0       	ldi	r19, 0x0B	; 11
     21e:	30 93 89 00 	sts	0x0089, r19
     222:	20 93 88 00 	sts	0x0088, r18
     226:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     22a:	53 98       	cbi	0x0a, 3	; 10
     22c:	23 98       	cbi	0x04, 3	; 4
     22e:	91 ea       	ldi	r25, 0xA1	; 161
     230:	90 93 b0 00 	sts	0x00B0, r25
     234:	80 93 b1 00 	sts	0x00B1, r24
     238:	10 92 b4 00 	sts	0x00B4, r1
     23c:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     240:	8b e0       	ldi	r24, 0x0B	; 11
     242:	80 bf       	out	0x30, r24	; 48
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     24a:	86 e0       	ldi	r24, 0x06	; 6
     24c:	80 93 7c 00 	sts	0x007C, r24
     250:	83 e8       	ldi	r24, 0x83	; 131
     252:	80 93 7a 00 	sts	0x007A, r24
     256:	80 91 7a 00 	lds	r24, 0x007A
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	80 93 7a 00 	sts	0x007A, r24
     260:	80 91 7a 00 	lds	r24, 0x007A
     264:	86 fd       	sbrc	r24, 6
     266:	fc cf       	rjmp	.-8      	; 0x260 <kilo_init+0x7e>
    adc_trigger_high_gain();
     268:	10 92 7c 00 	sts	0x007C, r1
     26c:	83 ea       	ldi	r24, 0xA3	; 163
     26e:	80 93 7a 00 	sts	0x007A, r24
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
    if (osccal != 0xFF)
     280:	8f 3f       	cpi	r24, 0xFF	; 255
     282:	11 f0       	breq	.+4      	; 0x288 <kilo_init+0xa6>
        OSCCAL = osccal;
     284:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     288:	10 92 4b 01 	sts	0x014B, r1
    rx_leadingbit = 1;
     28c:	c1 e0       	ldi	r28, 0x01	; 1
     28e:	c0 93 24 01 	sts	0x0124, r28
    rx_leadingbyte = 1;
     292:	c0 93 68 01 	sts	0x0168, r28
    rx_byteindex = 0;
     296:	10 92 42 01 	sts	0x0142, r1
    rx_bytevalue = 0;
     29a:	10 92 7c 01 	sts	0x017C, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     29e:	80 e9       	ldi	r24, 0x90	; 144
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     2a6:	80 93 41 01 	sts	0x0141, r24
    if (tx_mask & ~TX_MASK_MAX)
     2aa:	80 91 41 01 	lds	r24, 0x0141
     2ae:	88 73       	andi	r24, 0x38	; 56
     2b0:	11 f0       	breq	.+4      	; 0x2b6 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2b2:	c0 93 41 01 	sts	0x0141, r28
    tx_clock = 0;
     2b6:	10 92 6c 01 	sts	0x016C, r1
     2ba:	10 92 6b 01 	sts	0x016B, r1
    tx_increment = 255;
     2be:	8f ef       	ldi	r24, 0xFF	; 255
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 6a 01 	sts	0x016A, r25
     2c6:	80 93 69 01 	sts	0x0169, r24
    kilo_ticks = 0;
     2ca:	10 92 47 01 	sts	0x0147, r1
     2ce:	10 92 48 01 	sts	0x0148, r1
     2d2:	10 92 49 01 	sts	0x0149, r1
     2d6:	10 92 4a 01 	sts	0x014A, r1
    kilo_state = IDLE;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 11 01 	sts	0x0111, r24
    kilo_tx_period = 3906;
     2e0:	82 e4       	ldi	r24, 0x42	; 66
     2e2:	9f e0       	ldi	r25, 0x0F	; 15
     2e4:	90 93 7b 01 	sts	0x017B, r25
     2e8:	80 93 7a 01 	sts	0x017A, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2ec:	80 eb       	ldi	r24, 0xB0	; 176
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     2f4:	c8 2f       	mov	r28, r24
     2f6:	81 eb       	ldi	r24, 0xB1	; 177
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     2fe:	2c 2f       	mov	r18, r28
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	38 2b       	or	r19, r24
     304:	30 93 7e 01 	sts	0x017E, r19
     308:	20 93 7d 01 	sts	0x017D, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     314:	80 93 81 01 	sts	0x0181, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     318:	89 e0       	ldi	r24, 0x09	; 9
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     320:	80 93 6d 01 	sts	0x016D, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     324:	8c e0       	ldi	r24, 0x0C	; 12
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     32c:	80 93 7f 01 	sts	0x017F, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     330:	84 e1       	ldi	r24, 0x14	; 20
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     338:	80 93 80 01 	sts	0x0180, r24
     33c:	5c e4       	ldi	r21, 0x4C	; 76
     33e:	e5 2e       	mov	r14, r21
     340:	51 e0       	ldi	r21, 0x01	; 1
     342:	f5 2e       	mov	r15, r21
     344:	05 e2       	ldi	r16, 0x25	; 37
     346:	11 e0       	ldi	r17, 0x01	; 1
     348:	c0 e2       	ldi	r28, 0x20	; 32
     34a:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     34c:	ce 01       	movw	r24, r28
     34e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     352:	d8 2e       	mov	r13, r24
     354:	ce 01       	movw	r24, r28
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     35c:	2d 2d       	mov	r18, r13
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	32 2f       	mov	r19, r18
     362:	22 27       	eor	r18, r18
     364:	28 2b       	or	r18, r24
     366:	f7 01       	movw	r30, r14
     368:	21 93       	st	Z+, r18
     36a:	31 93       	st	Z+, r19
     36c:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     36e:	ce 01       	movw	r24, r28
     370:	c0 96       	adiw	r24, 0x30	; 48
     372:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     376:	d8 2e       	mov	r13, r24
     378:	ce 01       	movw	r24, r28
     37a:	c1 96       	adiw	r24, 0x31	; 49
     37c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <eeprom_read_byte>
     380:	2d 2d       	mov	r18, r13
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	32 2f       	mov	r19, r18
     386:	22 27       	eor	r18, r18
     388:	28 2b       	or	r18, r24
     38a:	f8 01       	movw	r30, r16
     38c:	21 93       	st	Z+, r18
     38e:	31 93       	st	Z+, r19
     390:	8f 01       	movw	r16, r30
     392:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     394:	cc 33       	cpi	r28, 0x3C	; 60
     396:	d1 05       	cpc	r29, r1
     398:	c9 f6       	brne	.-78     	; 0x34c <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     39a:	78 94       	sei
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	08 95       	ret

000003ac <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	8f 93       	push	r24
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	a8 95       	wdr
     3be:	80 91 60 00 	lds	r24, 0x0060
     3c2:	88 61       	ori	r24, 0x18	; 24
     3c4:	80 93 60 00 	sts	0x0060, r24
     3c8:	10 92 60 00 	sts	0x0060, r1
     3cc:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3ce:	8f 91       	pop	r24
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	0f 90       	pop	r0
     3d6:	1f 90       	pop	r1
     3d8:	18 95       	reti

000003da <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     3da:	3c 01       	movw	r6, r24
     3dc:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     3de:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     3e0:	99 24       	eor	r9, r9
     3e2:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     3e8:	96 e0       	ldi	r25, 0x06	; 6
     3ea:	a9 2e       	mov	r10, r25
     3ec:	23 e8       	ldi	r18, 0x83	; 131
     3ee:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     3f0:	38 e1       	ldi	r19, 0x18	; 24
     3f2:	d3 2e       	mov	r13, r19
     3f4:	49 e2       	ldi	r20, 0x29	; 41
     3f6:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     3f8:	90 91 11 01 	lds	r25, 0x0111
     3fc:	e9 2f       	mov	r30, r25
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	e7 30       	cpi	r30, 0x07	; 7
     402:	f1 05       	cpc	r31, r1
     404:	c8 f7       	brcc	.-14     	; 0x3f8 <kilo_start+0x1e>
     406:	ec 5c       	subi	r30, 0xCC	; 204
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     40e:	11 23       	and	r17, r17
     410:	09 f4       	brne	.+2      	; 0x414 <kilo_start+0x3a>
     412:	fc c0       	rjmp	.+504    	; 0x60c <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     414:	c0 92 11 01 	sts	0x0111, r12
     418:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     41a:	fe 01       	movw	r30, r28
     41c:	09 95       	icall
                break;
     41e:	ec cf       	rjmp	.-40     	; 0x3f8 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     420:	80 91 4b 01 	lds	r24, 0x014B
     424:	81 11       	cpse	r24, r1
     426:	eb c0       	rjmp	.+470    	; 0x5fe <kilo_start+0x224>
        cli();                                    // disable interrupts
     428:	f8 94       	cli
        adc_setup_conversion(6);
     42a:	a0 92 7c 00 	sts	0x007C, r10
     42e:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     432:	80 91 7a 00 	lds	r24, 0x007A
     436:	80 64       	ori	r24, 0x40	; 64
     438:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     43c:	90 91 7a 00 	lds	r25, 0x007A
     440:	96 fd       	sbrc	r25, 6
     442:	fc cf       	rjmp	.-8      	; 0x43c <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     444:	80 91 78 00 	lds	r24, 0x0078
     448:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     44c:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     44e:	8b 3a       	cpi	r24, 0xAB	; 171
     450:	e2 e0       	ldi	r30, 0x02	; 2
     452:	9e 07       	cpc	r25, r30
     454:	0c f0       	brlt	.+2      	; 0x458 <kilo_start+0x7e>
     456:	ed c0       	rjmp	.+474    	; 0x632 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     458:	89 38       	cpi	r24, 0x89	; 137
     45a:	f2 e0       	ldi	r31, 0x02	; 2
     45c:	9f 07       	cpc	r25, r31
     45e:	0c f0       	brlt	.+2      	; 0x462 <kilo_start+0x88>
     460:	ef c0       	rjmp	.+478    	; 0x640 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     462:	87 36       	cpi	r24, 0x67	; 103
     464:	92 40       	sbci	r25, 0x02	; 2
     466:	0c f4       	brge	.+2      	; 0x46a <kilo_start+0x90>
     468:	ca c0       	rjmp	.+404    	; 0x5fe <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     46a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     46c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     46e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     470:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     472:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     474:	3c 98       	cbi	0x07, 4	; 7
     476:	c0 cf       	rjmp	.-128    	; 0x3f8 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     478:	f8 94       	cli
                acomp_off();
     47a:	80 b7       	in	r24, 0x30	; 48
     47c:	87 7f       	andi	r24, 0xF7	; 247
     47e:	80 bf       	out	0x30, r24	; 48
                adc_off();
     480:	80 91 7a 00 	lds	r24, 0x007A
     484:	8f 77       	andi	r24, 0x7F	; 127
     486:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     48a:	14 b8       	out	0x04, r1	; 4
     48c:	17 b8       	out	0x07, r1	; 7
     48e:	1a b8       	out	0x0a, r1	; 10
     490:	15 b8       	out	0x05, r1	; 5
     492:	18 b8       	out	0x08, r1	; 8
     494:	1b b8       	out	0x0b, r1	; 11
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	a8 95       	wdr
     49c:	d0 92 60 00 	sts	0x0060, r13
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4a6:	80 91 60 00 	lds	r24, 0x0060
     4aa:	80 64       	ori	r24, 0x40	; 64
     4ac:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     4b0:	93 b7       	in	r25, 0x33	; 51
     4b2:	91 7f       	andi	r25, 0xF1	; 241
     4b4:	94 60       	ori	r25, 0x04	; 4
     4b6:	93 bf       	out	0x33, r25	; 51
                cli();
     4b8:	f8 94       	cli
                sleep_enable();
     4ba:	83 b7       	in	r24, 0x33	; 51
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	83 bf       	out	0x33, r24	; 51
                sei();
     4c0:	78 94       	sei
                sleep_cpu();
     4c2:	88 95       	sleep
                sleep_disable();
     4c4:	83 b7       	in	r24, 0x33	; 51
     4c6:	8e 7f       	andi	r24, 0xFE	; 254
     4c8:	83 bf       	out	0x33, r24	; 51
                sei();
     4ca:	78 94       	sei
                rx_busy = 0;
     4cc:	10 92 4b 01 	sts	0x014B, r1
                ports_on();
     4d0:	52 9a       	sbi	0x0a, 2	; 10
     4d2:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     4d4:	80 91 7a 00 	lds	r24, 0x007A
     4d8:	80 68       	ori	r24, 0x80	; 128
     4da:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4de:	87 e5       	ldi	r24, 0x57	; 87
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <kilo_start+0x108>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <kilo_start+0x10e>
     4e8:	00 00       	nop
                _delay_us(300);
                acomp_on();
     4ea:	80 b7       	in	r24, 0x30	; 48
     4ec:	88 61       	ori	r24, 0x18	; 24
     4ee:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4f0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4f2:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4f4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4f6:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     4f8:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     4fa:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	ef e1       	ldi	r30, 0x1F	; 31
     4fe:	fe e4       	ldi	r31, 0x4E	; 78
     500:	31 97       	sbiw	r30, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <kilo_start+0x126>
     504:	00 c0       	rjmp	.+0      	; 0x506 <kilo_start+0x12c>
     506:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     508:	80 91 4b 01 	lds	r24, 0x014B
     50c:	81 11       	cpse	r24, r1
     50e:	81 c0       	rjmp	.+258    	; 0x612 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     510:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     512:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     514:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     516:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     518:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     51a:	3c 98       	cbi	0x07, 4	; 7
     51c:	6d cf       	rjmp	.-294    	; 0x3f8 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     51e:	80 91 0f 01 	lds	r24, 0x010F
     522:	81 11       	cpse	r24, r1
     524:	41 c0       	rjmp	.+130    	; 0x5a8 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     526:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     52a:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     52e:	10 92 10 01 	sts	0x0110, r1
     532:	62 cf       	rjmp	.-316    	; 0x3f8 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     534:	48 99       	sbic	0x09, 0	; 9
     536:	ec cf       	rjmp	.-40     	; 0x510 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     538:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     53a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     53c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     53e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     540:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     542:	3c 98       	cbi	0x07, 4	; 7
     544:	8f ec       	ldi	r24, 0xCF	; 207
     546:	97 e0       	ldi	r25, 0x07	; 7
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <kilo_start+0x16e>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <kilo_start+0x174>
     54e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     550:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     552:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     554:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     556:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     558:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     55a:	3c 98       	cbi	0x07, 4	; 7
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	e1 ee       	ldi	r30, 0xE1	; 225
     560:	f4 e0       	ldi	r31, 0x04	; 4
     562:	91 50       	subi	r25, 0x01	; 1
     564:	e0 40       	sbci	r30, 0x00	; 0
     566:	f0 40       	sbci	r31, 0x00	; 0
     568:	e1 f7       	brne	.-8      	; 0x562 <kilo_start+0x188>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <kilo_start+0x192>
     56c:	00 00       	nop
     56e:	44 cf       	rjmp	.-376    	; 0x3f8 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     570:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     572:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     574:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     576:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     578:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     57a:	3c 98       	cbi	0x07, 4	; 7
     57c:	ef ec       	ldi	r30, 0xCF	; 207
     57e:	f7 e0       	ldi	r31, 0x07	; 7
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <kilo_start+0x1a6>
     584:	00 c0       	rjmp	.+0      	; 0x586 <kilo_start+0x1ac>
     586:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     588:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     58a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     58c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     58e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     590:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     592:	3c 98       	cbi	0x07, 4	; 7
     594:	ff ef       	ldi	r31, 0xFF	; 255
     596:	21 ee       	ldi	r18, 0xE1	; 225
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	f1 50       	subi	r31, 0x01	; 1
     59c:	20 40       	sbci	r18, 0x00	; 0
     59e:	80 40       	sbci	r24, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <kilo_start+0x1c0>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <kilo_start+0x1ca>
     5a4:	00 00       	nop
     5a6:	28 cf       	rjmp	.-432    	; 0x3f8 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     5a8:	90 91 0f 01 	lds	r25, 0x010F
     5ac:	80 91 10 01 	lds	r24, 0x0110
     5b0:	98 17       	cp	r25, r24
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <kilo_start+0x1dc>
     5b4:	21 cf       	rjmp	.-446    	; 0x3f8 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     5b6:	80 91 0f 01 	lds	r24, 0x010F
     5ba:	80 93 10 01 	sts	0x0110, r24
                        if (cur_motion == MOVE_LEFT) {
     5be:	80 91 0f 01 	lds	r24, 0x010F
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <kilo_start+0x1ee>
     5c6:	50 c0       	rjmp	.+160    	; 0x668 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5c8:	80 91 0f 01 	lds	r24, 0x010F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5cc:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5d0:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	d9 f1       	breq	.+118    	; 0x64e <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d8:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5dc:	90 92 b4 00 	sts	0x00B4, r9
     5e0:	8f e2       	ldi	r24, 0x2F	; 47
     5e2:	95 e7       	ldi	r25, 0x75	; 117
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <kilo_start+0x20a>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <kilo_start+0x210>
     5ea:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     5ec:	80 91 80 01 	lds	r24, 0x0180
     5f0:	90 91 7f 01 	lds	r25, 0x017F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f4:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     5f8:	80 93 b4 00 	sts	0x00B4, r24
     5fc:	fd ce       	rjmp	.-518    	; 0x3f8 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5fe:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     600:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     602:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     604:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     606:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     608:	3c 98       	cbi	0x07, 4	; 7
     60a:	f6 ce       	rjmp	.-532    	; 0x3f8 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     60c:	f3 01       	movw	r30, r6
     60e:	09 95       	icall
     610:	01 cf       	rjmp	.-510    	; 0x414 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     612:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     614:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     616:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     618:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     61a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     61c:	3c 98       	cbi	0x07, 4	; 7
     61e:	ff ef       	ldi	r31, 0xFF	; 255
     620:	20 e7       	ldi	r18, 0x70	; 112
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	f1 50       	subi	r31, 0x01	; 1
     626:	20 40       	sbci	r18, 0x00	; 0
     628:	80 40       	sbci	r24, 0x00	; 0
     62a:	e1 f7       	brne	.-8      	; 0x624 <kilo_start+0x24a>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <kilo_start+0x254>
     62e:	00 00       	nop
     630:	6f cf       	rjmp	.-290    	; 0x510 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     632:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     634:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     636:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     638:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     63a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     63c:	3c 98       	cbi	0x07, 4	; 7
     63e:	dc ce       	rjmp	.-584    	; 0x3f8 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     640:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     642:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     644:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     646:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     648:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     64a:	3c 9a       	sbi	0x07, 4	; 7
     64c:	d5 ce       	rjmp	.-598    	; 0x3f8 <kilo_start+0x1e>
     64e:	ef e2       	ldi	r30, 0x2F	; 47
     650:	f5 e7       	ldi	r31, 0x75	; 117
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <kilo_start+0x278>
     656:	00 c0       	rjmp	.+0      	; 0x658 <kilo_start+0x27e>
     658:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     65a:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     65e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     662:	80 93 b4 00 	sts	0x00B4, r24
     666:	c8 ce       	rjmp	.-624    	; 0x3f8 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     668:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     66c:	10 92 b4 00 	sts	0x00B4, r1
     670:	8f e2       	ldi	r24, 0x2F	; 47
     672:	95 e7       	ldi	r25, 0x75	; 117
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <kilo_start+0x29a>
     678:	00 c0       	rjmp	.+0      	; 0x67a <kilo_start+0x2a0>
     67a:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     67c:	80 91 81 01 	lds	r24, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     680:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     684:	10 92 b4 00 	sts	0x00B4, r1
     688:	b7 ce       	rjmp	.-658    	; 0x3f8 <kilo_start+0x1e>

0000068a <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     68a:	07 c0       	rjmp	.+14     	; 0x69a <delay+0x10>
     68c:	ef ec       	ldi	r30, 0xCF	; 207
     68e:	f7 e0       	ldi	r31, 0x07	; 7
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <delay+0x6>
     694:	00 c0       	rjmp	.+0      	; 0x696 <delay+0xc>
     696:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     698:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	b9 f7       	brne	.-18     	; 0x68c <delay+0x2>
     69e:	08 95       	ret

000006a0 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6a4:	60 93 b4 00 	sts	0x00B4, r22
     6a8:	08 95       	ret

000006aa <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6aa:	8f ef       	ldi	r24, 0xFF	; 255
     6ac:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6b0:	80 93 b4 00 	sts	0x00B4, r24
     6b4:	8f e0       	ldi	r24, 0x0F	; 15
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	ef ec       	ldi	r30, 0xCF	; 207
     6ba:	f7 e0       	ldi	r31, 0x07	; 7
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <spinup_motors+0x12>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <spinup_motors+0x18>
     6c2:	00 00       	nop
     6c4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6c6:	c1 f7       	brne	.-16     	; 0x6b8 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     6c8:	08 95       	ret

000006ca <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     6ca:	80 91 4b 01 	lds	r24, 0x014B
     6ce:	81 11       	cpse	r24, r1
     6d0:	1e c0       	rjmp	.+60     	; 0x70e <get_ambientlight+0x44>
        cli();
     6d2:	f8 94       	cli
        adc_setup_conversion(7);
     6d4:	87 e0       	ldi	r24, 0x07	; 7
     6d6:	80 93 7c 00 	sts	0x007C, r24
     6da:	83 e8       	ldi	r24, 0x83	; 131
     6dc:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6e0:	80 91 7a 00 	lds	r24, 0x007A
     6e4:	80 64       	ori	r24, 0x40	; 64
     6e6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6ea:	80 91 7a 00 	lds	r24, 0x007A
     6ee:	86 fd       	sbrc	r24, 6
     6f0:	fc cf       	rjmp	.-8      	; 0x6ea <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     6f2:	80 91 78 00 	lds	r24, 0x0078
     6f6:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6fa:	10 92 7c 00 	sts	0x007C, r1
     6fe:	23 ea       	ldi	r18, 0xA3	; 163
     700:	20 93 7a 00 	sts	0x007A, r18
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     70a:	78 94       	sei
     70c:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     712:	08 95       	ret

00000714 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     714:	80 91 4b 01 	lds	r24, 0x014B
     718:	81 11       	cpse	r24, r1
     71a:	1e c0       	rjmp	.+60     	; 0x758 <get_temperature+0x44>
        cli();
     71c:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     71e:	88 ec       	ldi	r24, 0xC8	; 200
     720:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     724:	87 e8       	ldi	r24, 0x87	; 135
     726:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     72a:	80 91 7a 00 	lds	r24, 0x007A
     72e:	80 64       	ori	r24, 0x40	; 64
     730:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     734:	80 91 7a 00 	lds	r24, 0x007A
     738:	86 fd       	sbrc	r24, 6
     73a:	fc cf       	rjmp	.-8      	; 0x734 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     73c:	80 91 78 00 	lds	r24, 0x0078
     740:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     744:	10 92 7c 00 	sts	0x007C, r1
     748:	23 ea       	ldi	r18, 0xA3	; 163
     74a:	20 93 7a 00 	sts	0x007A, r18
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     754:	78 94       	sei
     756:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     75c:	08 95       	ret

0000075e <rand_hard>:

uint8_t rand_hard() {
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	e0 e0       	ldi	r30, 0x00	; 0
     768:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     76a:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     76c:	03 ea       	ldi	r16, 0xA3	; 163
     76e:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     770:	d6 e0       	ldi	r29, 0x06	; 6
     772:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     774:	a1 e0       	ldi	r26, 0x01	; 1
     776:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     778:	60 e8       	ldi	r22, 0x80	; 128
     77a:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     77c:	f8 94       	cli
            adc_setup_conversion(6);
     77e:	d0 93 7c 00 	sts	0x007C, r29
     782:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     786:	90 91 7a 00 	lds	r25, 0x007A
     78a:	90 64       	ori	r25, 0x40	; 64
     78c:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     790:	90 91 7a 00 	lds	r25, 0x007A
     794:	96 fd       	sbrc	r25, 6
     796:	fc cf       	rjmp	.-8      	; 0x790 <rand_hard+0x32>
            a = ADCW&0x1;
     798:	20 91 78 00 	lds	r18, 0x0078
     79c:	30 91 79 00 	lds	r19, 0x0079
     7a0:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     7a2:	90 91 7a 00 	lds	r25, 0x007A
     7a6:	90 64       	ori	r25, 0x40	; 64
     7a8:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7ac:	90 91 7a 00 	lds	r25, 0x007A
     7b0:	96 fd       	sbrc	r25, 6
     7b2:	fc cf       	rjmp	.-8      	; 0x7ac <rand_hard+0x4e>
            b = ADCW&0x1;
     7b4:	40 91 78 00 	lds	r20, 0x0078
     7b8:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     7bc:	10 92 7c 00 	sts	0x007C, r1
     7c0:	00 93 7a 00 	sts	0x007A, r16
     7c4:	10 93 7b 00 	sts	0x007B, r17
            sei();
     7c8:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     7ca:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     7cc:	24 13       	cpse	r18, r20
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <rand_hard+0x78>
     7d0:	61 50       	subi	r22, 0x01	; 1
     7d2:	71 09       	sbc	r23, r1
     7d4:	99 f6       	brne	.-90     	; 0x77c <rand_hard+0x1e>
        if (a)
     7d6:	22 23       	and	r18, r18
     7d8:	39 f0       	breq	.+14     	; 0x7e8 <rand_hard+0x8a>
            num |= (1<<i);
     7da:	9d 01       	movw	r18, r26
     7dc:	0e 2e       	mov	r0, r30
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <rand_hard+0x84>
     7e0:	22 0f       	add	r18, r18
     7e2:	0a 94       	dec	r0
     7e4:	ea f7       	brpl	.-6      	; 0x7e0 <rand_hard+0x82>
     7e6:	82 2b       	or	r24, r18
     7e8:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     7ea:	e8 30       	cpi	r30, 0x08	; 8
     7ec:	f1 05       	cpc	r31, r1
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <rand_hard+0x94>
     7f0:	c3 cf       	rjmp	.-122    	; 0x778 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     7fc:	80 91 00 01 	lds	r24, 0x0100
     800:	98 2f       	mov	r25, r24
     802:	99 0f       	add	r25, r25
     804:	99 0f       	add	r25, r25
     806:	99 0f       	add	r25, r25
     808:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     80a:	90 91 0e 01 	lds	r25, 0x010E
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	29 0f       	add	r18, r25
     812:	20 93 0e 01 	sts	0x010E, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     816:	28 2f       	mov	r18, r24
     818:	22 95       	swap	r18
     81a:	26 95       	lsr	r18
     81c:	27 70       	andi	r18, 0x07	; 7
     81e:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     820:	96 95       	lsr	r25
     822:	96 95       	lsr	r25
     824:	89 27       	eor	r24, r25
     826:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     82a:	08 95       	ret

0000082c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     82c:	80 93 00 01 	sts	0x0100, r24
     830:	08 95       	ret

00000832 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     832:	80 91 4b 01 	lds	r24, 0x014B
     836:	81 11       	cpse	r24, r1
     838:	16 c0       	rjmp	.+44     	; 0x866 <get_voltage+0x34>
        cli();                                    // disable interrupts
     83a:	f8 94       	cli
        adc_setup_conversion(6);
     83c:	86 e0       	ldi	r24, 0x06	; 6
     83e:	80 93 7c 00 	sts	0x007C, r24
     842:	83 e8       	ldi	r24, 0x83	; 131
     844:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     848:	80 91 7a 00 	lds	r24, 0x007A
     84c:	80 64       	ori	r24, 0x40	; 64
     84e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     852:	80 91 7a 00 	lds	r24, 0x007A
     856:	86 fd       	sbrc	r24, 6
     858:	fc cf       	rjmp	.-8      	; 0x852 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     85a:	80 91 78 00 	lds	r24, 0x0078
     85e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     862:	78 94       	sei
     864:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     86a:	08 95       	ret

0000086c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     86c:	2f 92       	push	r2
     86e:	3f 92       	push	r3
     870:	4f 92       	push	r4
     872:	5f 92       	push	r5
     874:	6f 92       	push	r6
     876:	7f 92       	push	r7
     878:	8f 92       	push	r8
     87a:	9f 92       	push	r9
     87c:	af 92       	push	r10
     87e:	bf 92       	push	r11
     880:	cf 92       	push	r12
     882:	df 92       	push	r13
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	00 d0       	rcall	.+0      	; 0x892 <estimate_distance+0x26>
     892:	00 d0       	rcall	.+0      	; 0x894 <estimate_distance+0x28>
     894:	00 d0       	rcall	.+0      	; 0x896 <estimate_distance+0x2a>
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     89c:	dc 01       	movw	r26, r24
     89e:	12 96       	adiw	r26, 0x02	; 2
     8a0:	0d 90       	ld	r0, X+
     8a2:	bc 91       	ld	r27, X
     8a4:	a0 2d       	mov	r26, r0
     8a6:	be 83       	std	Y+6, r27	; 0x06
     8a8:	ad 83       	std	Y+5, r26	; 0x05
     8aa:	a4 38       	cpi	r26, 0x84	; 132
     8ac:	e3 e0       	ldi	r30, 0x03	; 3
     8ae:	be 07       	cpc	r27, r30
     8b0:	0c f0       	brlt	.+2      	; 0x8b4 <estimate_distance+0x48>
     8b2:	c9 c0       	rjmp	.+402    	; 0xa46 <__stack+0x147>
        if (dist->high_gain > kilo_irhigh[0]) {
     8b4:	80 91 25 01 	lds	r24, 0x0125
     8b8:	90 91 26 01 	lds	r25, 0x0126
     8bc:	8a 17       	cp	r24, r26
     8be:	9b 07       	cpc	r25, r27
     8c0:	08 f4       	brcc	.+2      	; 0x8c4 <estimate_distance+0x58>
     8c2:	37 c1       	rjmp	.+622    	; 0xb32 <__stack+0x233>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8c4:	00 91 27 01 	lds	r16, 0x0127
     8c8:	10 91 28 01 	lds	r17, 0x0128
     8cc:	0a 17       	cp	r16, r26
     8ce:	1b 07       	cpc	r17, r27
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <estimate_distance+0x68>
     8d2:	2f c2       	rjmp	.+1118   	; 0xd32 <__stack+0x433>
     8d4:	00 91 29 01 	lds	r16, 0x0129
     8d8:	10 91 2a 01 	lds	r17, 0x012A
     8dc:	0a 17       	cp	r16, r26
     8de:	1b 07       	cpc	r17, r27
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <estimate_distance+0x78>
     8e2:	2f c2       	rjmp	.+1118   	; 0xd42 <__stack+0x443>
     8e4:	00 91 2b 01 	lds	r16, 0x012B
     8e8:	10 91 2c 01 	lds	r17, 0x012C
     8ec:	0a 17       	cp	r16, r26
     8ee:	1b 07       	cpc	r17, r27
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <estimate_distance+0x88>
     8f2:	2f c2       	rjmp	.+1118   	; 0xd52 <__stack+0x453>
     8f4:	00 91 2d 01 	lds	r16, 0x012D
     8f8:	10 91 2e 01 	lds	r17, 0x012E
     8fc:	0a 17       	cp	r16, r26
     8fe:	1b 07       	cpc	r17, r27
     900:	08 f4       	brcc	.+2      	; 0x904 <__stack+0x5>
     902:	2f c2       	rjmp	.+1118   	; 0xd62 <__stack+0x463>
     904:	00 91 2f 01 	lds	r16, 0x012F
     908:	10 91 30 01 	lds	r17, 0x0130
     90c:	0a 17       	cp	r16, r26
     90e:	1b 07       	cpc	r17, r27
     910:	08 f4       	brcc	.+2      	; 0x914 <__stack+0x15>
     912:	ef c1       	rjmp	.+990    	; 0xcf2 <__stack+0x3f3>
     914:	00 91 31 01 	lds	r16, 0x0131
     918:	10 91 32 01 	lds	r17, 0x0132
     91c:	0a 17       	cp	r16, r26
     91e:	1b 07       	cpc	r17, r27
     920:	08 f4       	brcc	.+2      	; 0x924 <__stack+0x25>
     922:	27 c2       	rjmp	.+1102   	; 0xd72 <__stack+0x473>
     924:	00 91 33 01 	lds	r16, 0x0133
     928:	10 91 34 01 	lds	r17, 0x0134
     92c:	0a 17       	cp	r16, r26
     92e:	1b 07       	cpc	r17, r27
     930:	08 f4       	brcc	.+2      	; 0x934 <__stack+0x35>
     932:	27 c2       	rjmp	.+1102   	; 0xd82 <__stack+0x483>
     934:	00 91 35 01 	lds	r16, 0x0135
     938:	10 91 36 01 	lds	r17, 0x0136
     93c:	0a 17       	cp	r16, r26
     93e:	1b 07       	cpc	r17, r27
     940:	08 f4       	brcc	.+2      	; 0x944 <__stack+0x45>
     942:	27 c2       	rjmp	.+1102   	; 0xd92 <__stack+0x493>
     944:	00 91 37 01 	lds	r16, 0x0137
     948:	10 91 38 01 	lds	r17, 0x0138
     94c:	0a 17       	cp	r16, r26
     94e:	1b 07       	cpc	r17, r27
     950:	08 f4       	brcc	.+2      	; 0x954 <__stack+0x55>
     952:	27 c2       	rjmp	.+1102   	; 0xda2 <__stack+0x4a3>
     954:	00 91 39 01 	lds	r16, 0x0139
     958:	10 91 3a 01 	lds	r17, 0x013A
     95c:	0a 17       	cp	r16, r26
     95e:	1b 07       	cpc	r17, r27
     960:	08 f4       	brcc	.+2      	; 0x964 <__stack+0x65>
     962:	27 c2       	rjmp	.+1102   	; 0xdb2 <__stack+0x4b3>
     964:	00 91 3b 01 	lds	r16, 0x013B
     968:	10 91 3c 01 	lds	r17, 0x013C
     96c:	0a 17       	cp	r16, r26
     96e:	1b 07       	cpc	r17, r27
     970:	08 f4       	brcc	.+2      	; 0x974 <__stack+0x75>
     972:	23 c2       	rjmp	.+1094   	; 0xdba <__stack+0x4bb>
     974:	00 91 3d 01 	lds	r16, 0x013D
     978:	10 91 3e 01 	lds	r17, 0x013E
     97c:	0a 17       	cp	r16, r26
     97e:	1b 07       	cpc	r17, r27
     980:	08 f4       	brcc	.+2      	; 0x984 <__stack+0x85>
     982:	23 c2       	rjmp	.+1094   	; 0xdca <__stack+0x4cb>
     984:	00 91 3f 01 	lds	r16, 0x013F
     988:	10 91 40 01 	lds	r17, 0x0140
     98c:	0a 17       	cp	r16, r26
     98e:	1b 07       	cpc	r17, r27
     990:	08 f4       	brcc	.+2      	; 0x994 <__stack+0x95>
     992:	23 c2       	rjmp	.+1094   	; 0xdda <__stack+0x4db>
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 ed       	ldi	r26, 0xD0	; 208
     99a:	b0 e4       	ldi	r27, 0x40	; 64
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	ab 83       	std	Y+3, r26	; 0x03
     9a2:	bc 83       	std	Y+4, r27	; 0x04
     9a4:	4c e0       	ldi	r20, 0x0C	; 12
     9a6:	e4 2e       	mov	r14, r20
     9a8:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9aa:	f7 01       	movw	r30, r14
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	eb 5d       	subi	r30, 0xDB	; 219
     9b2:	fe 4f       	sbci	r31, 0xFE	; 254
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	b8 01       	movw	r22, r16
     9ba:	68 1b       	sub	r22, r24
     9bc:	79 0b       	sbc	r23, r25
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     9c6:	9b 01       	movw	r18, r22
     9c8:	ac 01       	movw	r20, r24
     9ca:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     9ce:	6b 01       	movw	r12, r22
     9d0:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9d2:	ad 81       	ldd	r26, Y+5	; 0x05
     9d4:	be 81       	ldd	r27, Y+6	; 0x06
     9d6:	bd 01       	movw	r22, r26
     9d8:	bb 0f       	add	r27, r27
     9da:	88 0b       	sbc	r24, r24
     9dc:	99 0b       	sbc	r25, r25
     9de:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     9e2:	4b 01       	movw	r8, r22
     9e4:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     9e6:	b8 01       	movw	r22, r16
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     9f0:	2b 01       	movw	r4, r22
     9f2:	3c 01       	movw	r6, r24
     9f4:	29 81       	ldd	r18, Y+1	; 0x01
     9f6:	3a 81       	ldd	r19, Y+2	; 0x02
     9f8:	4b 81       	ldd	r20, Y+3	; 0x03
     9fa:	5c 81       	ldd	r21, Y+4	; 0x04
     9fc:	c7 01       	movw	r24, r14
     9fe:	b6 01       	movw	r22, r12
     a00:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     a04:	9b 01       	movw	r18, r22
     a06:	ac 01       	movw	r20, r24
     a08:	c3 01       	movw	r24, r6
     a0a:	b2 01       	movw	r22, r4
     a0c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a14:	c5 01       	movw	r24, r10
     a16:	b4 01       	movw	r22, r8
     a18:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e2       	ldi	r20, 0x20	; 32
     a22:	51 e4       	ldi	r21, 0x41	; 65
     a24:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
            b=((int)((int)b/(int)slope));
     a28:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     a2c:	8b 01       	movw	r16, r22
     a2e:	c7 01       	movw	r24, r14
     a30:	b6 01       	movw	r22, r12
     a32:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     a36:	ab 01       	movw	r20, r22
     a38:	bc 01       	movw	r22, r24
     a3a:	c8 01       	movw	r24, r16
     a3c:	ba 01       	movw	r22, r20
     a3e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__divmodhi4>
            dist_high=b;
     a42:	16 2f       	mov	r17, r22
     a44:	77 c0       	rjmp	.+238    	; 0xb34 <__stack+0x235>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a46:	dc 01       	movw	r26, r24
     a48:	cd 90       	ld	r12, X+
     a4a:	dc 90       	ld	r13, X
     a4c:	80 91 4c 01 	lds	r24, 0x014C
     a50:	90 91 4d 01 	lds	r25, 0x014D
     a54:	8c 15       	cp	r24, r12
     a56:	9d 05       	cpc	r25, r13
     a58:	08 f4       	brcc	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	8c c0       	rjmp	.+280    	; 0xb74 <__stack+0x275>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a5c:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a5e:	e0 90 4e 01 	lds	r14, 0x014E
     a62:	f0 90 4f 01 	lds	r15, 0x014F
     a66:	ec 14       	cp	r14, r12
     a68:	fd 04       	cpc	r15, r13
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	5e c1       	rjmp	.+700    	; 0xd2a <__stack+0x42b>
     a6e:	e0 90 50 01 	lds	r14, 0x0150
     a72:	f0 90 51 01 	lds	r15, 0x0151
     a76:	ec 14       	cp	r14, r12
     a78:	fd 04       	cpc	r15, r13
     a7a:	08 f4       	brcc	.+2      	; 0xa7e <__stack+0x17f>
     a7c:	5e c1       	rjmp	.+700    	; 0xd3a <__stack+0x43b>
     a7e:	e0 90 52 01 	lds	r14, 0x0152
     a82:	f0 90 53 01 	lds	r15, 0x0153
     a86:	ec 14       	cp	r14, r12
     a88:	fd 04       	cpc	r15, r13
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <__stack+0x18f>
     a8c:	5e c1       	rjmp	.+700    	; 0xd4a <__stack+0x44b>
     a8e:	e0 90 54 01 	lds	r14, 0x0154
     a92:	f0 90 55 01 	lds	r15, 0x0155
     a96:	ec 14       	cp	r14, r12
     a98:	fd 04       	cpc	r15, r13
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <__stack+0x19f>
     a9c:	5e c1       	rjmp	.+700    	; 0xd5a <__stack+0x45b>
     a9e:	e0 90 56 01 	lds	r14, 0x0156
     aa2:	f0 90 57 01 	lds	r15, 0x0157
     aa6:	ec 14       	cp	r14, r12
     aa8:	fd 04       	cpc	r15, r13
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__stack+0x1af>
     aac:	c3 c0       	rjmp	.+390    	; 0xc34 <__stack+0x335>
     aae:	e0 90 58 01 	lds	r14, 0x0158
     ab2:	f0 90 59 01 	lds	r15, 0x0159
     ab6:	ec 14       	cp	r14, r12
     ab8:	fd 04       	cpc	r15, r13
     aba:	08 f4       	brcc	.+2      	; 0xabe <__stack+0x1bf>
     abc:	56 c1       	rjmp	.+684    	; 0xd6a <__stack+0x46b>
     abe:	e0 90 5a 01 	lds	r14, 0x015A
     ac2:	f0 90 5b 01 	lds	r15, 0x015B
     ac6:	ec 14       	cp	r14, r12
     ac8:	fd 04       	cpc	r15, r13
     aca:	08 f4       	brcc	.+2      	; 0xace <__stack+0x1cf>
     acc:	56 c1       	rjmp	.+684    	; 0xd7a <__stack+0x47b>
     ace:	e0 90 5c 01 	lds	r14, 0x015C
     ad2:	f0 90 5d 01 	lds	r15, 0x015D
     ad6:	ec 14       	cp	r14, r12
     ad8:	fd 04       	cpc	r15, r13
     ada:	08 f4       	brcc	.+2      	; 0xade <__stack+0x1df>
     adc:	56 c1       	rjmp	.+684    	; 0xd8a <__stack+0x48b>
     ade:	e0 90 5e 01 	lds	r14, 0x015E
     ae2:	f0 90 5f 01 	lds	r15, 0x015F
     ae6:	ec 14       	cp	r14, r12
     ae8:	fd 04       	cpc	r15, r13
     aea:	08 f4       	brcc	.+2      	; 0xaee <__stack+0x1ef>
     aec:	56 c1       	rjmp	.+684    	; 0xd9a <__stack+0x49b>
     aee:	e0 90 60 01 	lds	r14, 0x0160
     af2:	f0 90 61 01 	lds	r15, 0x0161
     af6:	ec 14       	cp	r14, r12
     af8:	fd 04       	cpc	r15, r13
     afa:	08 f4       	brcc	.+2      	; 0xafe <__stack+0x1ff>
     afc:	56 c1       	rjmp	.+684    	; 0xdaa <__stack+0x4ab>
     afe:	e0 90 62 01 	lds	r14, 0x0162
     b02:	f0 90 63 01 	lds	r15, 0x0163
     b06:	ec 14       	cp	r14, r12
     b08:	fd 04       	cpc	r15, r13
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <__stack+0x20f>
     b0c:	5a c1       	rjmp	.+692    	; 0xdc2 <__stack+0x4c3>
     b0e:	e0 90 64 01 	lds	r14, 0x0164
     b12:	f0 90 65 01 	lds	r15, 0x0165
     b16:	ec 14       	cp	r14, r12
     b18:	fd 04       	cpc	r15, r13
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <__stack+0x21f>
     b1c:	5a c1       	rjmp	.+692    	; 0xdd2 <__stack+0x4d3>
     b1e:	e0 90 66 01 	lds	r14, 0x0166
     b22:	f0 90 67 01 	lds	r15, 0x0167
     b26:	ec 14       	cp	r14, r12
     b28:	fd 04       	cpc	r15, r13
     b2a:	08 f4       	brcc	.+2      	; 0xb2e <__stack+0x22f>
     b2c:	5a c1       	rjmp	.+692    	; 0xde2 <__stack+0x4e3>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b2e:	0a e5       	ldi	r16, 0x5A	; 90
     b30:	31 c0       	rjmp	.+98     	; 0xb94 <__stack+0x295>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b32:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b34:	ed 81       	ldd	r30, Y+5	; 0x05
     b36:	fe 81       	ldd	r31, Y+6	; 0x06
     b38:	ed 3b       	cpi	r30, 0xBD	; 189
     b3a:	f2 40       	sbci	r31, 0x02	; 2
     b3c:	fc f4       	brge	.+62     	; 0xb7c <__stack+0x27d>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b3e:	81 e2       	ldi	r24, 0x21	; 33
     b40:	81 0f       	add	r24, r17
    }
}
     b42:	26 96       	adiw	r28, 0x06	; 6
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	9f 90       	pop	r9
     b64:	8f 90       	pop	r8
     b66:	7f 90       	pop	r7
     b68:	6f 90       	pop	r6
     b6a:	5f 90       	pop	r5
     b6c:	4f 90       	pop	r4
     b6e:	3f 90       	pop	r3
     b70:	2f 90       	pop	r2
     b72:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b74:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b76:	81 e2       	ldi	r24, 0x21	; 33
     b78:	80 0f       	add	r24, r16
     b7a:	e3 cf       	rjmp	.-58     	; 0xb42 <__stack+0x243>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b7c:	d1 01       	movw	r26, r2
     b7e:	cd 90       	ld	r12, X+
     b80:	dc 90       	ld	r13, X
     b82:	80 91 4c 01 	lds	r24, 0x014C
     b86:	90 91 4d 01 	lds	r25, 0x014D
     b8a:	8c 15       	cp	r24, r12
     b8c:	9d 05       	cpc	r25, r13
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <__stack+0x293>
     b90:	66 cf       	rjmp	.-308    	; 0xa5e <__stack+0x15f>
            dist_low=0;
     b92:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b94:	1f 3f       	cpi	r17, 0xFF	; 255
     b96:	79 f3       	breq	.-34     	; 0xb76 <__stack+0x277>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b98:	ed 81       	ldd	r30, Y+5	; 0x05
     b9a:	fe 81       	ldd	r31, Y+6	; 0x06
     b9c:	bf 01       	movw	r22, r30
     b9e:	ff 0f       	add	r31, r31
     ba0:	88 0b       	sbc	r24, r24
     ba2:	99 0b       	sbc	r25, r25
     ba4:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     ba8:	6b 01       	movw	r12, r22
     baa:	7c 01       	movw	r14, r24
     bac:	61 2f       	mov	r22, r17
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     bb8:	4b 01       	movw	r8, r22
     bba:	5c 01       	movw	r10, r24
     bbc:	a7 01       	movw	r20, r14
     bbe:	96 01       	movw	r18, r12
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	81 e6       	ldi	r24, 0x61	; 97
     bc6:	94 e4       	ldi	r25, 0x44	; 68
     bc8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	c5 01       	movw	r24, r10
     bd2:	b4 01       	movw	r22, r8
     bd4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     bd8:	4b 01       	movw	r8, r22
     bda:	5c 01       	movw	r10, r24
     bdc:	60 2f       	mov	r22, r16
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     be8:	2b 01       	movw	r4, r22
     bea:	3c 01       	movw	r6, r24
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4f e2       	ldi	r20, 0x2F	; 47
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	c7 01       	movw	r24, r14
     bf6:	b6 01       	movw	r22, r12
     bf8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     bfc:	9b 01       	movw	r18, r22
     bfe:	ac 01       	movw	r20, r24
     c00:	c3 01       	movw	r24, r6
     c02:	b2 01       	movw	r22, r4
     c04:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     c08:	9b 01       	movw	r18, r22
     c0a:	ac 01       	movw	r20, r24
     c0c:	c5 01       	movw	r24, r10
     c0e:	b4 01       	movw	r22, r8
     c10:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	48 e4       	ldi	r20, 0x48	; 72
     c1a:	53 e4       	ldi	r21, 0x43	; 67
     c1c:	0e 94 21 0b 	call	0x1642	; 0x1642 <__divsf3>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	44 e0       	ldi	r20, 0x04	; 4
     c26:	52 e4       	ldi	r21, 0x42	; 66
     c28:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     c2c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fixunssfsi>
     c30:	86 2f       	mov	r24, r22
     c32:	87 cf       	rjmp	.-242    	; 0xb42 <__stack+0x243>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c34:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c36:	85 e0       	ldi	r24, 0x05	; 5
     c38:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	fc 01       	movw	r30, r24
     c40:	e6 5b       	subi	r30, 0xB6	; 182
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	b7 01       	movw	r22, r14
     c4a:	68 1b       	sub	r22, r24
     c4c:	79 0b       	sbc	r23, r25
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     c5e:	4b 01       	movw	r8, r22
     c60:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c62:	b6 01       	movw	r22, r12
     c64:	dd 0c       	add	r13, r13
     c66:	88 0b       	sbc	r24, r24
     c68:	99 0b       	sbc	r25, r25
     c6a:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     c6e:	2b 01       	movw	r4, r22
     c70:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c72:	b7 01       	movw	r22, r14
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     c7c:	6b 01       	movw	r12, r22
     c7e:	7c 01       	movw	r14, r24
     c80:	60 2f       	mov	r22, r16
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	a9 01       	movw	r20, r18
     c9e:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     ca2:	a5 01       	movw	r20, r10
     ca4:	94 01       	movw	r18, r8
     ca6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     caa:	9b 01       	movw	r18, r22
     cac:	ac 01       	movw	r20, r24
     cae:	c7 01       	movw	r24, r14
     cb0:	b6 01       	movw	r22, r12
     cb2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cba:	c3 01       	movw	r24, r6
     cbc:	b2 01       	movw	r22, r4
     cbe:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e2       	ldi	r20, 0x20	; 32
     cc8:	51 e4       	ldi	r21, 0x41	; 65
     cca:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
                b=((int)((int)b/(int)slope));
     cce:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     cd2:	7b 01       	movw	r14, r22
     cd4:	c5 01       	movw	r24, r10
     cd6:	b4 01       	movw	r22, r8
     cd8:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     cdc:	ab 01       	movw	r20, r22
     cde:	bc 01       	movw	r22, r24
     ce0:	c7 01       	movw	r24, r14
     ce2:	ba 01       	movw	r22, r20
     ce4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__divmodhi4>
                dist_low=b;
     ce8:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     cea:	6f 3f       	cpi	r22, 0xFF	; 255
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__stack+0x3f1>
     cee:	52 cf       	rjmp	.-348    	; 0xb94 <__stack+0x295>
     cf0:	26 cf       	rjmp	.-436    	; 0xb3e <__stack+0x23f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf2:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     cf4:	85 e0       	ldi	r24, 0x05	; 5
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	7c 01       	movw	r14, r24
     cfa:	f1 e0       	ldi	r31, 0x01	; 1
     cfc:	ef 1a       	sub	r14, r31
     cfe:	f1 08       	sbc	r15, r1
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	a9 01       	movw	r20, r18
     d1c:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     d20:	69 83       	std	Y+1, r22	; 0x01
     d22:	7a 83       	std	Y+2, r23	; 0x02
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d28:	40 ce       	rjmp	.-896    	; 0x9aa <__stack+0xab>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d2a:	01 e0       	ldi	r16, 0x01	; 1
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	84 cf       	rjmp	.-248    	; 0xc3a <__stack+0x33b>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	df cf       	rjmp	.-66     	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d3a:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	7c cf       	rjmp	.-264    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d42:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	d7 cf       	rjmp	.-82     	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d4a:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	74 cf       	rjmp	.-280    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d52:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	cf cf       	rjmp	.-98     	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d5a:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d5c:	84 e0       	ldi	r24, 0x04	; 4
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	6c cf       	rjmp	.-296    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d62:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	c7 cf       	rjmp	.-114    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d6a:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d6c:	86 e0       	ldi	r24, 0x06	; 6
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	64 cf       	rjmp	.-312    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d72:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	bf cf       	rjmp	.-130    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d7a:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d7c:	87 e0       	ldi	r24, 0x07	; 7
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	5c cf       	rjmp	.-328    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d82:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d84:	87 e0       	ldi	r24, 0x07	; 7
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	b7 cf       	rjmp	.-146    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d8a:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d8c:	88 e0       	ldi	r24, 0x08	; 8
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	54 cf       	rjmp	.-344    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d92:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d94:	88 e0       	ldi	r24, 0x08	; 8
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	af cf       	rjmp	.-162    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d9a:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d9c:	89 e0       	ldi	r24, 0x09	; 9
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	4c cf       	rjmp	.-360    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da2:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     da4:	89 e0       	ldi	r24, 0x09	; 9
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a7 cf       	rjmp	.-178    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     daa:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	44 cf       	rjmp	.-376    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db2:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     db4:	8a e0       	ldi	r24, 0x0A	; 10
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9f cf       	rjmp	.-194    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dba:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     dbc:	8b e0       	ldi	r24, 0x0B	; 11
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9b cf       	rjmp	.-202    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dc2:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     dc4:	8b e0       	ldi	r24, 0x0B	; 11
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	38 cf       	rjmp	.-400    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dca:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     dcc:	8c e0       	ldi	r24, 0x0C	; 12
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	93 cf       	rjmp	.-218    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd2:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     dd4:	8c e0       	ldi	r24, 0x0C	; 12
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	30 cf       	rjmp	.-416    	; 0xc3a <__stack+0x33b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dda:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     ddc:	8d e0       	ldi	r24, 0x0D	; 13
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	8b cf       	rjmp	.-234    	; 0xcf8 <__stack+0x3f9>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     de2:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     de4:	8d e0       	ldi	r24, 0x0D	; 13
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	28 cf       	rjmp	.-432    	; 0xc3a <__stack+0x33b>

00000dea <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
    tx_clock += tx_increment;
     e0c:	20 91 6b 01 	lds	r18, 0x016B
     e10:	30 91 6c 01 	lds	r19, 0x016C
     e14:	80 91 69 01 	lds	r24, 0x0169
     e18:	90 91 6a 01 	lds	r25, 0x016A
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	90 93 6c 01 	sts	0x016C, r25
     e24:	80 93 6b 01 	sts	0x016B, r24
    tx_increment = 0xFF;
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	90 93 6a 01 	sts	0x016A, r25
     e30:	80 93 69 01 	sts	0x0169, r24
    OCR0A = tx_increment;
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e38:	80 91 47 01 	lds	r24, 0x0147
     e3c:	90 91 48 01 	lds	r25, 0x0148
     e40:	a0 91 49 01 	lds	r26, 0x0149
     e44:	b0 91 4a 01 	lds	r27, 0x014A
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	a1 1d       	adc	r26, r1
     e4c:	b1 1d       	adc	r27, r1
     e4e:	80 93 47 01 	sts	0x0147, r24
     e52:	90 93 48 01 	sts	0x0148, r25
     e56:	a0 93 49 01 	sts	0x0149, r26
     e5a:	b0 93 4a 01 	sts	0x014A, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e5e:	80 91 4b 01 	lds	r24, 0x014B
     e62:	81 11       	cpse	r24, r1
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <__vector_14+0x9a>
     e66:	80 91 7a 01 	lds	r24, 0x017A
     e6a:	90 91 7b 01 	lds	r25, 0x017B
     e6e:	20 91 6b 01 	lds	r18, 0x016B
     e72:	30 91 6c 01 	lds	r19, 0x016C
     e76:	82 17       	cp	r24, r18
     e78:	93 07       	cpc	r25, r19
     e7a:	20 f4       	brcc	.+8      	; 0xe84 <__vector_14+0x9a>
     e7c:	80 91 11 01 	lds	r24, 0x0111
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	89 f0       	breq	.+34     	; 0xea6 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ea6:	e0 91 03 01 	lds	r30, 0x0103
     eaa:	f0 91 04 01 	lds	r31, 0x0104
     eae:	09 95       	icall
        if (msg) {
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	41 f3       	breq	.-48     	; 0xe84 <__vector_14+0x9a>
            if (message_send(msg)) {
     eb4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <message_send>
     eb8:	81 11       	cpse	r24, r1
     eba:	09 c0       	rjmp	.+18     	; 0xece <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     ebc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <rand>
     ec0:	99 27       	eor	r25, r25
     ec2:	90 93 6a 01 	sts	0x016A, r25
     ec6:	80 93 69 01 	sts	0x0169, r24
                OCR0A = tx_increment;
     eca:	87 bd       	out	0x27, r24	; 39
     ecc:	db cf       	rjmp	.-74     	; 0xe84 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ece:	e0 91 01 01 	lds	r30, 0x0101
     ed2:	f0 91 02 01 	lds	r31, 0x0102
     ed6:	09 95       	icall
                tx_clock = 0;
     ed8:	10 92 6c 01 	sts	0x016C, r1
     edc:	10 92 6b 01 	sts	0x016B, r1
     ee0:	d1 cf       	rjmp	.-94     	; 0xe84 <__vector_14+0x9a>

00000ee2 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	11 c0       	rjmp	.+34     	; 0xf08 <set_color+0x26>
        DDRD |= (1<<5);
     ee6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     ee8:	81 ff       	sbrs	r24, 1
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <set_color+0x2c>
        DDRD |= (1<<4);
     eec:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     eee:	82 ff       	sbrs	r24, 2
     ef0:	11 c0       	rjmp	.+34     	; 0xf14 <set_color+0x32>
        DDRC |= (1<<3);
     ef2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     ef4:	83 ff       	sbrs	r24, 3
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <set_color+0x38>
        DDRC |= (1<<2);
     ef8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     efa:	84 ff       	sbrs	r24, 4
     efc:	11 c0       	rjmp	.+34     	; 0xf20 <set_color+0x3e>
        DDRC |= (1<<5);
     efe:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     f00:	85 fd       	sbrc	r24, 5
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f04:	3c 98       	cbi	0x07, 4	; 7
     f06:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f08:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f0a:	81 fd       	sbrc	r24, 1
     f0c:	ef cf       	rjmp	.-34     	; 0xeec <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f0e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f10:	82 fd       	sbrc	r24, 2
     f12:	ef cf       	rjmp	.-34     	; 0xef2 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f14:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f16:	83 fd       	sbrc	r24, 3
     f18:	ef cf       	rjmp	.-34     	; 0xef8 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f1a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f1c:	84 fd       	sbrc	r24, 4
     f1e:	ef cf       	rjmp	.-34     	; 0xefe <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f20:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f22:	85 ff       	sbrs	r24, 5
     f24:	ef cf       	rjmp	.-34     	; 0xf04 <set_color+0x22>
        DDRC |= (1<<4);
     f26:	3c 9a       	sbi	0x07, 4	; 7
     f28:	08 95       	ret

00000f2a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
    rx_timer_off();
     f38:	10 92 81 00 	sts	0x0081, r1
     f3c:	10 92 85 00 	sts	0x0085, r1
     f40:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 93 24 01 	sts	0x0124, r24
    rx_leadingbyte = 1;
     f4a:	80 93 68 01 	sts	0x0168, r24
    rx_busy = 0;
     f4e:	10 92 4b 01 	sts	0x014B, r1
    adc_trigger_high_gain();
     f52:	10 92 7c 00 	sts	0x007C, r1
     f56:	93 ea       	ldi	r25, 0xA3	; 163
     f58:	90 93 7a 00 	sts	0x007A, r25
     f5c:	80 93 7b 00 	sts	0x007B, r24
}
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f94:	20 91 84 00 	lds	r18, 0x0084
     f98:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	40 93 4b 01 	sts	0x014B, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     fa2:	80 91 24 01 	lds	r24, 0x0124
     fa6:	88 23       	and	r24, r24
     fa8:	a9 f1       	breq	.+106    	; 0x1014 <__vector_23+0xa6>
        rx_timer_on();
     faa:	10 92 85 00 	sts	0x0085, r1
     fae:	10 92 84 00 	sts	0x0084, r1
     fb2:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     fb6:	10 92 7c 01 	sts	0x017C, r1
        rx_leadingbit = 0;
     fba:	10 92 24 01 	sts	0x0124, r1
        if (rx_leadingbyte) {
     fbe:	80 91 68 01 	lds	r24, 0x0168
     fc2:	88 23       	and	r24, r24
     fc4:	a1 f0       	breq	.+40     	; 0xfee <__vector_23+0x80>
            adc_finish_conversion();
     fc6:	80 91 7a 00 	lds	r24, 0x007A
     fca:	86 fd       	sbrc	r24, 6
     fcc:	fc cf       	rjmp	.-8      	; 0xfc6 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     fce:	80 91 78 00 	lds	r24, 0x0078
     fd2:	90 91 79 00 	lds	r25, 0x0079
     fd6:	90 93 46 01 	sts	0x0146, r25
     fda:	80 93 45 01 	sts	0x0145, r24
            adc_trigger_low_gain();
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 7c 00 	sts	0x007C, r24
     fe4:	93 ea       	ldi	r25, 0xA3	; 163
     fe6:	90 93 7a 00 	sts	0x007A, r25
     fea:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1014:	c9 01       	movw	r24, r18
    1016:	87 58       	subi	r24, 0x87	; 135
    1018:	91 09       	sbc	r25, r1
    101a:	84 37       	cpi	r24, 0x74	; 116
    101c:	99 40       	sbci	r25, 0x09	; 9
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__vector_23+0xb4>
    1020:	52 c0       	rjmp	.+164    	; 0x10c6 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1022:	26 58       	subi	r18, 0x86	; 134
    1024:	31 09       	sbc	r19, r1
    1026:	a4 ef       	ldi	r26, 0xF4	; 244
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	0e 94 91 0a 	call	0x1522	; 0x1522 <__umulhisi3>
    102e:	aa 27       	eor	r26, r26
    1030:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	91 05       	cpc	r25, r1
    1036:	a1 05       	cpc	r26, r1
    1038:	b1 05       	cpc	r27, r1
    103a:	08 f4       	brcc	.+2      	; 0x103e <__vector_23+0xd0>
    103c:	7b c0       	rjmp	.+246    	; 0x1134 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    103e:	40 93 24 01 	sts	0x0124, r20
                if (rx_leadingbyte) {
    1042:	80 91 68 01 	lds	r24, 0x0168
    1046:	81 11       	cpse	r24, r1
    1048:	52 c0       	rjmp	.+164    	; 0x10ee <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    104a:	80 91 42 01 	lds	r24, 0x0142
    104e:	e8 2f       	mov	r30, r24
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	e2 59       	subi	r30, 0x92	; 146
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	90 91 7c 01 	lds	r25, 0x017C
    105a:	90 83       	st	Z, r25
                    rx_byteindex++;
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	80 93 42 01 	sts	0x0142, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1062:	8c 30       	cpi	r24, 0x0C	; 12
    1064:	21 f6       	brne	.-120    	; 0xfee <__vector_23+0x80>
                        rx_timer_off();
    1066:	10 92 81 00 	sts	0x0081, r1
    106a:	10 92 85 00 	sts	0x0085, r1
    106e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1072:	40 93 68 01 	sts	0x0168, r20
                        rx_busy = 0;
    1076:	10 92 4b 01 	sts	0x014B, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    107a:	c0 91 78 01 	lds	r28, 0x0178
    107e:	d0 91 79 01 	lds	r29, 0x0179
    1082:	8e e6       	ldi	r24, 0x6E	; 110
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	0e 94 c1 09 	call	0x1382	; 0x1382 <message_crc>
    108a:	c8 17       	cp	r28, r24
    108c:	d9 07       	cpc	r29, r25
    108e:	09 f0       	breq	.+2      	; 0x1092 <__vector_23+0x124>
    1090:	ae cf       	rjmp	.-164    	; 0xfee <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1092:	80 91 77 01 	lds	r24, 0x0177
    1096:	87 ff       	sbrs	r24, 7
    1098:	61 c0       	rjmp	.+194    	; 0x115c <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    109a:	98 e7       	ldi	r25, 0x78	; 120
    109c:	98 0f       	add	r25, r24
    109e:	93 30       	cpi	r25, 0x03	; 3
    10a0:	30 f0       	brcs	.+12     	; 0x10ae <__vector_23+0x140>
        motors_off();
    10a2:	53 98       	cbi	0x0a, 3	; 10
    10a4:	23 98       	cbi	0x04, 3	; 4
    10a6:	10 92 b4 00 	sts	0x00B4, r1
    10aa:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	fc 01       	movw	r30, r24
    10b2:	e0 58       	subi	r30, 0x80	; 128
    10b4:	f1 09       	sbc	r31, r1
    10b6:	eb 30       	cpi	r30, 0x0B	; 11
    10b8:	f1 05       	cpc	r31, r1
    10ba:	08 f0       	brcs	.+2      	; 0x10be <__vector_23+0x150>
    10bc:	98 cf       	rjmp	.-208    	; 0xfee <__vector_23+0x80>
    10be:	e5 5c       	subi	r30, 0xC5	; 197
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    10c6:	10 92 81 00 	sts	0x0081, r1
    10ca:	10 92 85 00 	sts	0x0085, r1
    10ce:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    10d2:	40 93 24 01 	sts	0x0124, r20
            rx_leadingbyte = 1;
    10d6:	40 93 68 01 	sts	0x0168, r20
            rx_busy = 0;
    10da:	10 92 4b 01 	sts	0x014B, r1
            adc_trigger_high_gain();
    10de:	10 92 7c 00 	sts	0x007C, r1
    10e2:	83 ea       	ldi	r24, 0xA3	; 163
    10e4:	80 93 7a 00 	sts	0x007A, r24
    10e8:	40 93 7b 00 	sts	0x007B, r20
    10ec:	80 cf       	rjmp	.-256    	; 0xfee <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    10ee:	80 91 7a 00 	lds	r24, 0x007A
    10f2:	86 fd       	sbrc	r24, 6
    10f4:	fc cf       	rjmp	.-8      	; 0x10ee <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    10f6:	80 91 78 00 	lds	r24, 0x0078
    10fa:	90 91 79 00 	lds	r25, 0x0079
    10fe:	90 93 44 01 	sts	0x0144, r25
    1102:	80 93 43 01 	sts	0x0143, r24
                    adc_trigger_high_gain();
    1106:	10 92 7c 00 	sts	0x007C, r1
    110a:	83 ea       	ldi	r24, 0xA3	; 163
    110c:	80 93 7a 00 	sts	0x007A, r24
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1116:	90 91 7c 01 	lds	r25, 0x017C
    111a:	99 23       	and	r25, r25
    111c:	d1 f0       	breq	.+52     	; 0x1152 <__vector_23+0x1e4>
                        rx_timer_off();
    111e:	10 92 81 00 	sts	0x0081, r1
    1122:	10 92 85 00 	sts	0x0085, r1
    1126:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    112a:	80 93 68 01 	sts	0x0168, r24
                        rx_busy = 0;
    112e:	10 92 4b 01 	sts	0x014B, r1
    1132:	5d cf       	rjmp	.-326    	; 0xfee <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	f9 01       	movw	r30, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <__vector_23+0x1d2>
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <__vector_23+0x1ce>
    1144:	cf 01       	movw	r24, r30
    1146:	90 91 7c 01 	lds	r25, 0x017C
    114a:	89 2b       	or	r24, r25
    114c:	80 93 7c 01 	sts	0x017C, r24
    1150:	4e cf       	rjmp	.-356    	; 0xfee <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1152:	10 92 68 01 	sts	0x0168, r1
                        rx_byteindex = 0;
    1156:	10 92 42 01 	sts	0x0142, r1
    115a:	49 cf       	rjmp	.-366    	; 0xfee <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    115c:	e0 91 05 01 	lds	r30, 0x0105
    1160:	f0 91 06 01 	lds	r31, 0x0106
    1164:	63 e4       	ldi	r22, 0x43	; 67
    1166:	71 e0       	ldi	r23, 0x01	; 1
    1168:	8e e6       	ldi	r24, 0x6E	; 110
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	09 95       	icall
    116e:	3f cf       	rjmp	.-386    	; 0xfee <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1170:	80 91 6e 01 	lds	r24, 0x016E
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	09 f4       	brne	.+2      	; 0x117a <__vector_23+0x20c>
    1178:	dd c0       	rjmp	.+442    	; 0x1334 <__vector_23+0x3c6>
    117a:	08 f4       	brcc	.+2      	; 0x117e <__vector_23+0x210>
    117c:	ba c0       	rjmp	.+372    	; 0x12f2 <__vector_23+0x384>
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	09 f4       	brne	.+2      	; 0x1184 <__vector_23+0x216>
    1182:	c6 c0       	rjmp	.+396    	; 0x1310 <__vector_23+0x3a2>
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	09 f0       	breq	.+2      	; 0x118a <__vector_23+0x21c>
    1188:	b1 c0       	rjmp	.+354    	; 0x12ec <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    118a:	80 91 0f 01 	lds	r24, 0x010F
    118e:	90 91 74 01 	lds	r25, 0x0174
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	09 f4       	brne	.+2      	; 0x1198 <__vector_23+0x22a>
    1196:	e3 c0       	rjmp	.+454    	; 0x135e <__vector_23+0x3f0>
    1198:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    119c:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_STRAIGHT;
    11a0:	23 e0       	ldi	r18, 0x03	; 3
    11a2:	20 93 0f 01 	sts	0x010F, r18
                        kilo_straight_left = calibmsg->straight_left;
    11a6:	80 93 7f 01 	sts	0x017F, r24
                        kilo_straight_right = calibmsg->straight_right;
    11aa:	90 93 80 01 	sts	0x0180, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11ae:	80 91 11 01 	lds	r24, 0x0111
    11b2:	86 30       	cpi	r24, 0x06	; 6
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__vector_23+0x24a>
    11b6:	1b cf       	rjmp	.-458    	; 0xfee <__vector_23+0x80>
                motors_on();
    11b8:	53 9a       	sbi	0x0a, 3	; 10
    11ba:	23 9a       	sbi	0x04, 3	; 4
    11bc:	10 92 b4 00 	sts	0x00B4, r1
    11c0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    11c4:	86 e0       	ldi	r24, 0x06	; 6
    11c6:	80 93 11 01 	sts	0x0111, r24
    11ca:	11 cf       	rjmp	.-478    	; 0xfee <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    11cc:	80 91 11 01 	lds	r24, 0x0111
    11d0:	86 30       	cpi	r24, 0x06	; 6
    11d2:	99 f0       	breq	.+38     	; 0x11fa <__vector_23+0x28c>
                motors_on();
    11d4:	53 9a       	sbi	0x0a, 3	; 10
    11d6:	23 9a       	sbi	0x04, 3	; 4
    11d8:	10 92 b4 00 	sts	0x00B4, r1
    11dc:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    11e0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    11e2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    11e4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11e6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11e8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11ea:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    11ec:	10 92 0f 01 	sts	0x010F, r1
    11f0:	10 92 10 01 	sts	0x0110, r1
                kilo_state = MOVING;
    11f4:	86 e0       	ldi	r24, 0x06	; 6
    11f6:	80 93 11 01 	sts	0x0111, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9c 01       	movw	r18, r24
    1200:	00 90 6e 01 	lds	r0, 0x016E
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__vector_23+0x29c>
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <__vector_23+0x298>
    120e:	80 91 7d 01 	lds	r24, 0x017D
    1212:	90 91 7e 01 	lds	r25, 0x017E
    1216:	82 23       	and	r24, r18
    1218:	93 23       	and	r25, r19
    121a:	89 2b       	or	r24, r25
    121c:	09 f0       	breq	.+2      	; 0x1220 <__vector_23+0x2b2>
    121e:	86 c0       	rjmp	.+268    	; 0x132c <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1220:	10 92 0f 01 	sts	0x010F, r1
    1224:	e4 ce       	rjmp	.-568    	; 0xfee <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 11 01 	sts	0x0111, r24
    122c:	e0 ce       	rjmp	.-576    	; 0xfee <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    122e:	e0 e0       	ldi	r30, 0x00	; 0
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1234:	80 91 6e 00 	lds	r24, 0x006E
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	80 93 6e 00 	sts	0x006E, r24
    123e:	16 bc       	out	0x26, r1	; 38
            bootload();
    1240:	e0 e0       	ldi	r30, 0x00	; 0
    1242:	f0 e7       	ldi	r31, 0x70	; 112
    1244:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1246:	10 92 11 01 	sts	0x0111, r1
    124a:	d1 ce       	rjmp	.-606    	; 0xfee <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	80 93 11 01 	sts	0x0111, r24
    1252:	cd ce       	rjmp	.-614    	; 0xfee <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1254:	85 e0       	ldi	r24, 0x05	; 5
    1256:	80 93 11 01 	sts	0x0111, r24
    125a:	c9 ce       	rjmp	.-622    	; 0xfee <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    125c:	80 91 11 01 	lds	r24, 0x0111
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	09 f4       	brne	.+2      	; 0x1266 <__vector_23+0x2f8>
    1264:	c4 ce       	rjmp	.-632    	; 0xfee <__vector_23+0x80>
    1266:	80 91 11 01 	lds	r24, 0x0111
    126a:	84 30       	cpi	r24, 0x04	; 4
    126c:	09 f4       	brne	.+2      	; 0x1270 <__vector_23+0x302>
    126e:	bf ce       	rjmp	.-642    	; 0xfee <__vector_23+0x80>
                motors_on();
    1270:	53 9a       	sbi	0x0a, 3	; 10
    1272:	23 9a       	sbi	0x04, 3	; 4
    1274:	10 92 b4 00 	sts	0x00B4, r1
    1278:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	80 93 11 01 	sts	0x0111, r24
    1282:	b5 ce       	rjmp	.-662    	; 0xfee <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1284:	80 91 11 01 	lds	r24, 0x0111
    1288:	86 30       	cpi	r24, 0x06	; 6
    128a:	09 f0       	breq	.+2      	; 0x128e <__vector_23+0x320>
    128c:	b0 ce       	rjmp	.-672    	; 0xfee <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    128e:	60 91 7d 01 	lds	r22, 0x017D
    1292:	80 eb       	ldi	r24, 0xB0	; 176
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    129a:	60 91 7e 01 	lds	r22, 0x017E
    129e:	81 eb       	ldi	r24, 0xB1	; 177
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12a6:	60 91 81 01 	lds	r22, 0x0181
    12aa:	85 e0       	ldi	r24, 0x05	; 5
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    12b2:	60 91 6d 01 	lds	r22, 0x016D
    12b6:	89 e0       	ldi	r24, 0x09	; 9
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    12be:	60 91 7f 01 	lds	r22, 0x017F
    12c2:	8c e0       	ldi	r24, 0x0C	; 12
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    12ca:	60 91 80 01 	lds	r22, 0x0180
    12ce:	84 e1       	ldi	r24, 0x14	; 20
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <eeprom_write_byte>
                        motors_off();
    12d6:	53 98       	cbi	0x0a, 3	; 10
    12d8:	23 98       	cbi	0x04, 3	; 4
    12da:	10 92 b4 00 	sts	0x00B4, r1
    12de:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 93 11 01 	sts	0x0111, r24
    12e8:	80 91 6e 01 	lds	r24, 0x016E
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12ec:	81 11       	cpse	r24, r1
    12ee:	5f cf       	rjmp	.-322    	; 0x11ae <__vector_23+0x240>
    12f0:	7e ce       	rjmp	.-772    	; 0xfee <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12f2:	88 23       	and	r24, r24
    12f4:	39 f2       	breq	.-114    	; 0x1284 <__vector_23+0x316>
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    12fa:	80 91 6f 01 	lds	r24, 0x016F
    12fe:	90 91 70 01 	lds	r25, 0x0170
    1302:	90 93 7e 01 	sts	0x017E, r25
    1306:	80 93 7d 01 	sts	0x017D, r24
                    cur_motion = MOVE_STOP;
    130a:	10 92 0f 01 	sts	0x010F, r1
    130e:	4f cf       	rjmp	.-354    	; 0x11ae <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1310:	80 91 0f 01 	lds	r24, 0x010F
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	71 f1       	breq	.+92     	; 0x1374 <__vector_23+0x406>
    1318:	80 91 72 01 	lds	r24, 0x0172
                        prev_motion = MOVE_STOP;
    131c:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_RIGHT;
    1320:	92 e0       	ldi	r25, 0x02	; 2
    1322:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_right = calibmsg->turn_right;
    1326:	80 93 6d 01 	sts	0x016D, r24
    132a:	41 cf       	rjmp	.-382    	; 0x11ae <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	80 93 0f 01 	sts	0x010F, r24
    1332:	5d ce       	rjmp	.-838    	; 0xfee <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1334:	80 91 0f 01 	lds	r24, 0x010F
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	51 f0       	breq	.+20     	; 0x1350 <__vector_23+0x3e2>
    133c:	80 91 71 01 	lds	r24, 0x0171
                        prev_motion = MOVE_STOP;
    1340:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_LEFT;
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_left = calibmsg->turn_left;
    134a:	80 93 81 01 	sts	0x0181, r24
    134e:	2f cf       	rjmp	.-418    	; 0x11ae <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1350:	80 91 71 01 	lds	r24, 0x0171
    1354:	90 91 81 01 	lds	r25, 0x0181
    1358:	89 13       	cpse	r24, r25
    135a:	f2 cf       	rjmp	.-28     	; 0x1340 <__vector_23+0x3d2>
    135c:	28 cf       	rjmp	.-432    	; 0x11ae <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    135e:	80 91 80 01 	lds	r24, 0x0180
    1362:	98 13       	cpse	r25, r24
    1364:	19 cf       	rjmp	.-462    	; 0x1198 <__vector_23+0x22a>
    1366:	80 91 73 01 	lds	r24, 0x0173
    136a:	20 91 7f 01 	lds	r18, 0x017F
    136e:	82 13       	cpse	r24, r18
    1370:	15 cf       	rjmp	.-470    	; 0x119c <__vector_23+0x22e>
    1372:	1d cf       	rjmp	.-454    	; 0x11ae <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1374:	80 91 72 01 	lds	r24, 0x0172
    1378:	90 91 6d 01 	lds	r25, 0x016D
    137c:	89 13       	cpse	r24, r25
    137e:	ce cf       	rjmp	.-100    	; 0x131c <__vector_23+0x3ae>
    1380:	16 cf       	rjmp	.-468    	; 0x11ae <__vector_23+0x240>

00001382 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1382:	fc 01       	movw	r30, r24
    1384:	ac 01       	movw	r20, r24
    1386:	46 5f       	subi	r20, 0xF6	; 246
    1388:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    138e:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1390:	82 27       	eor	r24, r18
    1392:	08 2e       	mov	r0, r24
    1394:	82 95       	swap	r24
    1396:	80 7f       	andi	r24, 0xF0	; 240
    1398:	80 25       	eor	r24, r0
    139a:	09 2e       	mov	r0, r25
    139c:	98 2f       	mov	r25, r24
    139e:	82 95       	swap	r24
    13a0:	8f 70       	andi	r24, 0x0F	; 15
    13a2:	08 26       	eor	r0, r24
    13a4:	86 95       	lsr	r24
    13a6:	98 27       	eor	r25, r24
    13a8:	89 27       	eor	r24, r25
    13aa:	88 0f       	add	r24, r24
    13ac:	88 0f       	add	r24, r24
    13ae:	88 0f       	add	r24, r24
    13b0:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    13b2:	e4 17       	cp	r30, r20
    13b4:	f5 07       	cpc	r31, r21
    13b6:	59 f7       	brne	.-42     	; 0x138e <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    13b8:	08 95       	ret

000013ba <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    13ba:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    13bc:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    13be:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    13c0:	20 91 41 01 	lds	r18, 0x0141
    or tmpreg1, ddrreg
    13c4:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    13c6:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13ca:	30 91 41 01 	lds	r19, 0x0141
    13ce:	20 30       	cpi	r18, 0x00	; 0
    13d0:	29 f0       	breq	.+10     	; 0x13dc <message_send+0x22>
    13d2:	00 00       	nop
    13d4:	25 b1       	in	r18, 0x05	; 5
    13d6:	23 2b       	or	r18, r19
    13d8:	25 b9       	out	0x05, r18	; 5
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <message_send+0x2a>
    13dc:	00 00       	nop
    13de:	00 00       	nop
    13e0:	00 00       	nop
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <message_send+0x2a>
    13e4:	00 00       	nop
    13e6:	00 00       	nop
    13e8:	00 00       	nop
    13ea:	30 95       	com	r19
    13ec:	25 b1       	in	r18, 0x05	; 5
    13ee:	23 23       	and	r18, r19
    13f0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    13f2:	2e ea       	ldi	r18, 0xAE	; 174
    13f4:	2a 95       	dec	r18
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    13f8:	2b ee       	ldi	r18, 0xEB	; 235

000013fa <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    13fa:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    13fc:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    13fe:	0a c0       	rjmp	.+20     	; 0x1414 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1400:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1402:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    1406:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1408:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    140a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    140c:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    140e:	0f be       	out	0x3f, r0	; 63
    return 0
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	08 95       	ret

00001414 <nocollision>:
nocollision:
    nop
    1414:	00 00       	nop
    dec tmpreg1
    1416:	2a 95       	dec	r18
    brne checkcollision
    1418:	81 f7       	brne	.-32     	; 0x13fa <checkcollision>

    ldi tmpreg1, 0x01
    141a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    141c:	30 91 41 01 	lds	r19, 0x0141
    1420:	20 30       	cpi	r18, 0x00	; 0
    1422:	29 f0       	breq	.+10     	; 0x142e <nocollision+0x1a>
    1424:	00 00       	nop
    1426:	25 b1       	in	r18, 0x05	; 5
    1428:	23 2b       	or	r18, r19
    142a:	25 b9       	out	0x05, r18	; 5
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <nocollision+0x22>
    142e:	00 00       	nop
    1430:	00 00       	nop
    1432:	00 00       	nop
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <nocollision+0x22>
    1436:	00 00       	nop
    1438:	00 00       	nop
    143a:	00 00       	nop
    143c:	30 95       	com	r19
    143e:	25 b1       	in	r18, 0x05	; 5
    1440:	23 23       	and	r18, r19
    1442:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1444:	00 00       	nop
    1446:	24 e5       	ldi	r18, 0x54	; 84
    1448:	2a 95       	dec	r18
    144a:	f1 f7       	brne	.-4      	; 0x1448 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    144c:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    144e:	8c e0       	ldi	r24, 0x0C	; 12

00001450 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1450:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1452:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1454:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1456:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1458:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    145a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    145c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    145e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1460:	50 e0       	ldi	r21, 0x00	; 0

00001462 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1462:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1464:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1466:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1468:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    146a:	30 91 41 01 	lds	r19, 0x0141
    146e:	20 30       	cpi	r18, 0x00	; 0
    1470:	29 f0       	breq	.+10     	; 0x147c <sendbit+0x1a>
    1472:	00 00       	nop
    1474:	25 b1       	in	r18, 0x05	; 5
    1476:	23 2b       	or	r18, r19
    1478:	25 b9       	out	0x05, r18	; 5
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <sendbit+0x22>
    147c:	00 00       	nop
    147e:	00 00       	nop
    1480:	00 00       	nop
    1482:	00 c0       	rjmp	.+0      	; 0x1484 <sendbit+0x22>
    1484:	00 00       	nop
    1486:	00 00       	nop
    1488:	00 00       	nop
    148a:	30 95       	com	r19
    148c:	25 b1       	in	r18, 0x05	; 5
    148e:	23 23       	and	r18, r19
    1490:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1492:	00 00       	nop
    1494:	21 e5       	ldi	r18, 0x51	; 81
    1496:	2a 95       	dec	r18
    1498:	f1 f7       	brne	.-4      	; 0x1496 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    149a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    149c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    149e:	9a 95       	dec	r25
    brne sendbit
    14a0:	01 f7       	brne	.-64     	; 0x1462 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14a2:	8a 95       	dec	r24
    brne sendbyte
    14a4:	a9 f6       	brne	.-86     	; 0x1450 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14a6:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14a8:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14aa:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14ac:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14ae:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    14b2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14b4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14b6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14b8:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14ba:	0f be       	out	0x3f, r0	; 63
    return 1
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	08 95       	ret

000014c0 <main>:
}


int main()
{
  kilo_init();
    14c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <kilo_init>
    kilo_message_tx = message_tx;
    14c4:	81 e7       	ldi	r24, 0x71	; 113
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	90 93 04 01 	sts	0x0104, r25
    14cc:	80 93 03 01 	sts	0x0103, r24
    // Register the message_tx_success callback function.
    kilo_message_tx_success = message_tx_success;
    14d0:	84 e7       	ldi	r24, 0x74	; 116
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 02 01 	sts	0x0102, r25
    14d8:	80 93 01 01 	sts	0x0101, r24
  kilo_start(setup, loop);
    14dc:	6f e9       	ldi	r22, 0x9F	; 159
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	8b e7       	ldi	r24, 0x7B	; 123
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 ed 01 	call	0x3da	; 0x3da <kilo_start>
    
  return 0;
}
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	08 95       	ret

000014ee <__divmodhi4>:
    14ee:	97 fb       	bst	r25, 7
    14f0:	07 2e       	mov	r0, r23
    14f2:	16 f4       	brtc	.+4      	; 0x14f8 <__divmodhi4+0xa>
    14f4:	00 94       	com	r0
    14f6:	07 d0       	rcall	.+14     	; 0x1506 <__divmodhi4_neg1>
    14f8:	77 fd       	sbrc	r23, 7
    14fa:	09 d0       	rcall	.+18     	; 0x150e <__divmodhi4_neg2>
    14fc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodhi4>
    1500:	07 fc       	sbrc	r0, 7
    1502:	05 d0       	rcall	.+10     	; 0x150e <__divmodhi4_neg2>
    1504:	3e f4       	brtc	.+14     	; 0x1514 <__divmodhi4_exit>

00001506 <__divmodhi4_neg1>:
    1506:	90 95       	com	r25
    1508:	81 95       	neg	r24
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	08 95       	ret

0000150e <__divmodhi4_neg2>:
    150e:	70 95       	com	r23
    1510:	61 95       	neg	r22
    1512:	7f 4f       	sbci	r23, 0xFF	; 255

00001514 <__divmodhi4_exit>:
    1514:	08 95       	ret

00001516 <__tablejump2__>:
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	05 90       	lpm	r0, Z+
    151c:	f4 91       	lpm	r31, Z
    151e:	e0 2d       	mov	r30, r0
    1520:	09 94       	ijmp

00001522 <__umulhisi3>:
    1522:	a2 9f       	mul	r26, r18
    1524:	b0 01       	movw	r22, r0
    1526:	b3 9f       	mul	r27, r19
    1528:	c0 01       	movw	r24, r0
    152a:	a3 9f       	mul	r26, r19
    152c:	70 0d       	add	r23, r0
    152e:	81 1d       	adc	r24, r1
    1530:	11 24       	eor	r1, r1
    1532:	91 1d       	adc	r25, r1
    1534:	b2 9f       	mul	r27, r18
    1536:	70 0d       	add	r23, r0
    1538:	81 1d       	adc	r24, r1
    153a:	11 24       	eor	r1, r1
    153c:	91 1d       	adc	r25, r1
    153e:	08 95       	ret

00001540 <__udivmodhi4>:
    1540:	aa 1b       	sub	r26, r26
    1542:	bb 1b       	sub	r27, r27
    1544:	51 e1       	ldi	r21, 0x11	; 17
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <__udivmodhi4_ep>

00001548 <__udivmodhi4_loop>:
    1548:	aa 1f       	adc	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	a6 17       	cp	r26, r22
    154e:	b7 07       	cpc	r27, r23
    1550:	10 f0       	brcs	.+4      	; 0x1556 <__udivmodhi4_ep>
    1552:	a6 1b       	sub	r26, r22
    1554:	b7 0b       	sbc	r27, r23

00001556 <__udivmodhi4_ep>:
    1556:	88 1f       	adc	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	5a 95       	dec	r21
    155c:	a9 f7       	brne	.-22     	; 0x1548 <__udivmodhi4_loop>
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	08 95       	ret

00001568 <__subsf3>:
    1568:	50 58       	subi	r21, 0x80	; 128

0000156a <__addsf3>:
    156a:	bb 27       	eor	r27, r27
    156c:	aa 27       	eor	r26, r26
    156e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__addsf3x>
    1572:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_round>
    1576:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fp_pscA>
    157a:	38 f0       	brcs	.+14     	; 0x158a <__addsf3+0x20>
    157c:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_pscB>
    1580:	20 f0       	brcs	.+8      	; 0x158a <__addsf3+0x20>
    1582:	39 f4       	brne	.+14     	; 0x1592 <__addsf3+0x28>
    1584:	9f 3f       	cpi	r25, 0xFF	; 255
    1586:	19 f4       	brne	.+6      	; 0x158e <__addsf3+0x24>
    1588:	26 f4       	brtc	.+8      	; 0x1592 <__addsf3+0x28>
    158a:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_nan>
    158e:	0e f4       	brtc	.+2      	; 0x1592 <__addsf3+0x28>
    1590:	e0 95       	com	r30
    1592:	e7 fb       	bst	r30, 7
    1594:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>

00001598 <__addsf3x>:
    1598:	e9 2f       	mov	r30, r25
    159a:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fp_split3>
    159e:	58 f3       	brcs	.-42     	; 0x1576 <__addsf3+0xc>
    15a0:	ba 17       	cp	r27, r26
    15a2:	62 07       	cpc	r22, r18
    15a4:	73 07       	cpc	r23, r19
    15a6:	84 07       	cpc	r24, r20
    15a8:	95 07       	cpc	r25, r21
    15aa:	20 f0       	brcs	.+8      	; 0x15b4 <__addsf3x+0x1c>
    15ac:	79 f4       	brne	.+30     	; 0x15cc <__addsf3x+0x34>
    15ae:	a6 f5       	brtc	.+104    	; 0x1618 <__addsf3x+0x80>
    15b0:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__fp_zero>
    15b4:	0e f4       	brtc	.+2      	; 0x15b8 <__addsf3x+0x20>
    15b6:	e0 95       	com	r30
    15b8:	0b 2e       	mov	r0, r27
    15ba:	ba 2f       	mov	r27, r26
    15bc:	a0 2d       	mov	r26, r0
    15be:	0b 01       	movw	r0, r22
    15c0:	b9 01       	movw	r22, r18
    15c2:	90 01       	movw	r18, r0
    15c4:	0c 01       	movw	r0, r24
    15c6:	ca 01       	movw	r24, r20
    15c8:	a0 01       	movw	r20, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	ff 27       	eor	r31, r31
    15ce:	59 1b       	sub	r21, r25
    15d0:	99 f0       	breq	.+38     	; 0x15f8 <__addsf3x+0x60>
    15d2:	59 3f       	cpi	r21, 0xF9	; 249
    15d4:	50 f4       	brcc	.+20     	; 0x15ea <__addsf3x+0x52>
    15d6:	50 3e       	cpi	r21, 0xE0	; 224
    15d8:	68 f1       	brcs	.+90     	; 0x1634 <__addsf3x+0x9c>
    15da:	1a 16       	cp	r1, r26
    15dc:	f0 40       	sbci	r31, 0x00	; 0
    15de:	a2 2f       	mov	r26, r18
    15e0:	23 2f       	mov	r18, r19
    15e2:	34 2f       	mov	r19, r20
    15e4:	44 27       	eor	r20, r20
    15e6:	58 5f       	subi	r21, 0xF8	; 248
    15e8:	f3 cf       	rjmp	.-26     	; 0x15d0 <__addsf3x+0x38>
    15ea:	46 95       	lsr	r20
    15ec:	37 95       	ror	r19
    15ee:	27 95       	ror	r18
    15f0:	a7 95       	ror	r26
    15f2:	f0 40       	sbci	r31, 0x00	; 0
    15f4:	53 95       	inc	r21
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__addsf3x+0x52>
    15f8:	7e f4       	brtc	.+30     	; 0x1618 <__addsf3x+0x80>
    15fa:	1f 16       	cp	r1, r31
    15fc:	ba 0b       	sbc	r27, r26
    15fe:	62 0b       	sbc	r22, r18
    1600:	73 0b       	sbc	r23, r19
    1602:	84 0b       	sbc	r24, r20
    1604:	ba f0       	brmi	.+46     	; 0x1634 <__addsf3x+0x9c>
    1606:	91 50       	subi	r25, 0x01	; 1
    1608:	a1 f0       	breq	.+40     	; 0x1632 <__addsf3x+0x9a>
    160a:	ff 0f       	add	r31, r31
    160c:	bb 1f       	adc	r27, r27
    160e:	66 1f       	adc	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	c2 f7       	brpl	.-16     	; 0x1606 <__addsf3x+0x6e>
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <__addsf3x+0x9c>
    1618:	ba 0f       	add	r27, r26
    161a:	62 1f       	adc	r22, r18
    161c:	73 1f       	adc	r23, r19
    161e:	84 1f       	adc	r24, r20
    1620:	48 f4       	brcc	.+18     	; 0x1634 <__addsf3x+0x9c>
    1622:	87 95       	ror	r24
    1624:	77 95       	ror	r23
    1626:	67 95       	ror	r22
    1628:	b7 95       	ror	r27
    162a:	f7 95       	ror	r31
    162c:	9e 3f       	cpi	r25, 0xFE	; 254
    162e:	08 f0       	brcs	.+2      	; 0x1632 <__addsf3x+0x9a>
    1630:	b0 cf       	rjmp	.-160    	; 0x1592 <__addsf3+0x28>
    1632:	93 95       	inc	r25
    1634:	88 0f       	add	r24, r24
    1636:	08 f0       	brcs	.+2      	; 0x163a <__addsf3x+0xa2>
    1638:	99 27       	eor	r25, r25
    163a:	ee 0f       	add	r30, r30
    163c:	97 95       	ror	r25
    163e:	87 95       	ror	r24
    1640:	08 95       	ret

00001642 <__divsf3>:
    1642:	0e 94 35 0b 	call	0x166a	; 0x166a <__divsf3x>
    1646:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_round>
    164a:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_pscB>
    164e:	58 f0       	brcs	.+22     	; 0x1666 <__divsf3+0x24>
    1650:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fp_pscA>
    1654:	40 f0       	brcs	.+16     	; 0x1666 <__divsf3+0x24>
    1656:	29 f4       	brne	.+10     	; 0x1662 <__divsf3+0x20>
    1658:	5f 3f       	cpi	r21, 0xFF	; 255
    165a:	29 f0       	breq	.+10     	; 0x1666 <__divsf3+0x24>
    165c:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    1660:	51 11       	cpse	r21, r1
    1662:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    1666:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_nan>

0000166a <__divsf3x>:
    166a:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fp_split3>
    166e:	68 f3       	brcs	.-38     	; 0x164a <__divsf3+0x8>

00001670 <__divsf3_pse>:
    1670:	99 23       	and	r25, r25
    1672:	b1 f3       	breq	.-20     	; 0x1660 <__divsf3+0x1e>
    1674:	55 23       	and	r21, r21
    1676:	91 f3       	breq	.-28     	; 0x165c <__divsf3+0x1a>
    1678:	95 1b       	sub	r25, r21
    167a:	55 0b       	sbc	r21, r21
    167c:	bb 27       	eor	r27, r27
    167e:	aa 27       	eor	r26, r26
    1680:	62 17       	cp	r22, r18
    1682:	73 07       	cpc	r23, r19
    1684:	84 07       	cpc	r24, r20
    1686:	38 f0       	brcs	.+14     	; 0x1696 <__divsf3_pse+0x26>
    1688:	9f 5f       	subi	r25, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	22 0f       	add	r18, r18
    168e:	33 1f       	adc	r19, r19
    1690:	44 1f       	adc	r20, r20
    1692:	aa 1f       	adc	r26, r26
    1694:	a9 f3       	breq	.-22     	; 0x1680 <__divsf3_pse+0x10>
    1696:	35 d0       	rcall	.+106    	; 0x1702 <__divsf3_pse+0x92>
    1698:	0e 2e       	mov	r0, r30
    169a:	3a f0       	brmi	.+14     	; 0x16aa <__divsf3_pse+0x3a>
    169c:	e0 e8       	ldi	r30, 0x80	; 128
    169e:	32 d0       	rcall	.+100    	; 0x1704 <__divsf3_pse+0x94>
    16a0:	91 50       	subi	r25, 0x01	; 1
    16a2:	50 40       	sbci	r21, 0x00	; 0
    16a4:	e6 95       	lsr	r30
    16a6:	00 1c       	adc	r0, r0
    16a8:	ca f7       	brpl	.-14     	; 0x169c <__divsf3_pse+0x2c>
    16aa:	2b d0       	rcall	.+86     	; 0x1702 <__divsf3_pse+0x92>
    16ac:	fe 2f       	mov	r31, r30
    16ae:	29 d0       	rcall	.+82     	; 0x1702 <__divsf3_pse+0x92>
    16b0:	66 0f       	add	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	bb 1f       	adc	r27, r27
    16b8:	26 17       	cp	r18, r22
    16ba:	37 07       	cpc	r19, r23
    16bc:	48 07       	cpc	r20, r24
    16be:	ab 07       	cpc	r26, r27
    16c0:	b0 e8       	ldi	r27, 0x80	; 128
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <__divsf3_pse+0x56>
    16c4:	bb 0b       	sbc	r27, r27
    16c6:	80 2d       	mov	r24, r0
    16c8:	bf 01       	movw	r22, r30
    16ca:	ff 27       	eor	r31, r31
    16cc:	93 58       	subi	r25, 0x83	; 131
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
    16d0:	3a f0       	brmi	.+14     	; 0x16e0 <__divsf3_pse+0x70>
    16d2:	9e 3f       	cpi	r25, 0xFE	; 254
    16d4:	51 05       	cpc	r21, r1
    16d6:	78 f0       	brcs	.+30     	; 0x16f6 <__divsf3_pse+0x86>
    16d8:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    16dc:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    16e0:	5f 3f       	cpi	r21, 0xFF	; 255
    16e2:	e4 f3       	brlt	.-8      	; 0x16dc <__divsf3_pse+0x6c>
    16e4:	98 3e       	cpi	r25, 0xE8	; 232
    16e6:	d4 f3       	brlt	.-12     	; 0x16dc <__divsf3_pse+0x6c>
    16e8:	86 95       	lsr	r24
    16ea:	77 95       	ror	r23
    16ec:	67 95       	ror	r22
    16ee:	b7 95       	ror	r27
    16f0:	f7 95       	ror	r31
    16f2:	9f 5f       	subi	r25, 0xFF	; 255
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <__divsf3_pse+0x78>
    16f6:	88 0f       	add	r24, r24
    16f8:	91 1d       	adc	r25, r1
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret
    1702:	e1 e0       	ldi	r30, 0x01	; 1
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	bb 1f       	adc	r27, r27
    170c:	62 17       	cp	r22, r18
    170e:	73 07       	cpc	r23, r19
    1710:	84 07       	cpc	r24, r20
    1712:	ba 07       	cpc	r27, r26
    1714:	20 f0       	brcs	.+8      	; 0x171e <__divsf3_pse+0xae>
    1716:	62 1b       	sub	r22, r18
    1718:	73 0b       	sbc	r23, r19
    171a:	84 0b       	sbc	r24, r20
    171c:	ba 0b       	sbc	r27, r26
    171e:	ee 1f       	adc	r30, r30
    1720:	88 f7       	brcc	.-30     	; 0x1704 <__divsf3_pse+0x94>
    1722:	e0 95       	com	r30
    1724:	08 95       	ret

00001726 <__fixsfsi>:
    1726:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fixunssfsi>
    172a:	68 94       	set
    172c:	b1 11       	cpse	r27, r1
    172e:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    1732:	08 95       	ret

00001734 <__fixunssfsi>:
    1734:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_splitA>
    1738:	88 f0       	brcs	.+34     	; 0x175c <__fixunssfsi+0x28>
    173a:	9f 57       	subi	r25, 0x7F	; 127
    173c:	98 f0       	brcs	.+38     	; 0x1764 <__fixunssfsi+0x30>
    173e:	b9 2f       	mov	r27, r25
    1740:	99 27       	eor	r25, r25
    1742:	b7 51       	subi	r27, 0x17	; 23
    1744:	b0 f0       	brcs	.+44     	; 0x1772 <__fixunssfsi+0x3e>
    1746:	e1 f0       	breq	.+56     	; 0x1780 <__fixunssfsi+0x4c>
    1748:	66 0f       	add	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	1a f0       	brmi	.+6      	; 0x1758 <__fixunssfsi+0x24>
    1752:	ba 95       	dec	r27
    1754:	c9 f7       	brne	.-14     	; 0x1748 <__fixunssfsi+0x14>
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <__fixunssfsi+0x4c>
    1758:	b1 30       	cpi	r27, 0x01	; 1
    175a:	91 f0       	breq	.+36     	; 0x1780 <__fixunssfsi+0x4c>
    175c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fp_zero>
    1760:	b1 e0       	ldi	r27, 0x01	; 1
    1762:	08 95       	ret
    1764:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__fp_zero>
    1768:	67 2f       	mov	r22, r23
    176a:	78 2f       	mov	r23, r24
    176c:	88 27       	eor	r24, r24
    176e:	b8 5f       	subi	r27, 0xF8	; 248
    1770:	39 f0       	breq	.+14     	; 0x1780 <__fixunssfsi+0x4c>
    1772:	b9 3f       	cpi	r27, 0xF9	; 249
    1774:	cc f3       	brlt	.-14     	; 0x1768 <__fixunssfsi+0x34>
    1776:	86 95       	lsr	r24
    1778:	77 95       	ror	r23
    177a:	67 95       	ror	r22
    177c:	b3 95       	inc	r27
    177e:	d9 f7       	brne	.-10     	; 0x1776 <__fixunssfsi+0x42>
    1780:	3e f4       	brtc	.+14     	; 0x1790 <__fixunssfsi+0x5c>
    1782:	90 95       	com	r25
    1784:	80 95       	com	r24
    1786:	70 95       	com	r23
    1788:	61 95       	neg	r22
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8f 4f       	sbci	r24, 0xFF	; 255
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	08 95       	ret

00001792 <__floatunsisf>:
    1792:	e8 94       	clt
    1794:	09 c0       	rjmp	.+18     	; 0x17a8 <__floatsisf+0x12>

00001796 <__floatsisf>:
    1796:	97 fb       	bst	r25, 7
    1798:	3e f4       	brtc	.+14     	; 0x17a8 <__floatsisf+0x12>
    179a:	90 95       	com	r25
    179c:	80 95       	com	r24
    179e:	70 95       	com	r23
    17a0:	61 95       	neg	r22
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	8f 4f       	sbci	r24, 0xFF	; 255
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	99 23       	and	r25, r25
    17aa:	a9 f0       	breq	.+42     	; 0x17d6 <__floatsisf+0x40>
    17ac:	f9 2f       	mov	r31, r25
    17ae:	96 e9       	ldi	r25, 0x96	; 150
    17b0:	bb 27       	eor	r27, r27
    17b2:	93 95       	inc	r25
    17b4:	f6 95       	lsr	r31
    17b6:	87 95       	ror	r24
    17b8:	77 95       	ror	r23
    17ba:	67 95       	ror	r22
    17bc:	b7 95       	ror	r27
    17be:	f1 11       	cpse	r31, r1
    17c0:	f8 cf       	rjmp	.-16     	; 0x17b2 <__floatsisf+0x1c>
    17c2:	fa f4       	brpl	.+62     	; 0x1802 <__floatsisf+0x6c>
    17c4:	bb 0f       	add	r27, r27
    17c6:	11 f4       	brne	.+4      	; 0x17cc <__floatsisf+0x36>
    17c8:	60 ff       	sbrs	r22, 0
    17ca:	1b c0       	rjmp	.+54     	; 0x1802 <__floatsisf+0x6c>
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	16 c0       	rjmp	.+44     	; 0x1802 <__floatsisf+0x6c>
    17d6:	88 23       	and	r24, r24
    17d8:	11 f0       	breq	.+4      	; 0x17de <__floatsisf+0x48>
    17da:	96 e9       	ldi	r25, 0x96	; 150
    17dc:	11 c0       	rjmp	.+34     	; 0x1800 <__floatsisf+0x6a>
    17de:	77 23       	and	r23, r23
    17e0:	21 f0       	breq	.+8      	; 0x17ea <__floatsisf+0x54>
    17e2:	9e e8       	ldi	r25, 0x8E	; 142
    17e4:	87 2f       	mov	r24, r23
    17e6:	76 2f       	mov	r23, r22
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <__floatsisf+0x5e>
    17ea:	66 23       	and	r22, r22
    17ec:	71 f0       	breq	.+28     	; 0x180a <__floatsisf+0x74>
    17ee:	96 e8       	ldi	r25, 0x86	; 134
    17f0:	86 2f       	mov	r24, r22
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	2a f0       	brmi	.+10     	; 0x1802 <__floatsisf+0x6c>
    17f8:	9a 95       	dec	r25
    17fa:	66 0f       	add	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	88 1f       	adc	r24, r24
    1800:	da f7       	brpl	.-10     	; 0x17f8 <__floatsisf+0x62>
    1802:	88 0f       	add	r24, r24
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	97 f9       	bld	r25, 7
    180a:	08 95       	ret

0000180c <__fp_inf>:
    180c:	97 f9       	bld	r25, 7
    180e:	9f 67       	ori	r25, 0x7F	; 127
    1810:	80 e8       	ldi	r24, 0x80	; 128
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	08 95       	ret

00001818 <__fp_nan>:
    1818:	9f ef       	ldi	r25, 0xFF	; 255
    181a:	80 ec       	ldi	r24, 0xC0	; 192
    181c:	08 95       	ret

0000181e <__fp_pscA>:
    181e:	00 24       	eor	r0, r0
    1820:	0a 94       	dec	r0
    1822:	16 16       	cp	r1, r22
    1824:	17 06       	cpc	r1, r23
    1826:	18 06       	cpc	r1, r24
    1828:	09 06       	cpc	r0, r25
    182a:	08 95       	ret

0000182c <__fp_pscB>:
    182c:	00 24       	eor	r0, r0
    182e:	0a 94       	dec	r0
    1830:	12 16       	cp	r1, r18
    1832:	13 06       	cpc	r1, r19
    1834:	14 06       	cpc	r1, r20
    1836:	05 06       	cpc	r0, r21
    1838:	08 95       	ret

0000183a <__fp_round>:
    183a:	09 2e       	mov	r0, r25
    183c:	03 94       	inc	r0
    183e:	00 0c       	add	r0, r0
    1840:	11 f4       	brne	.+4      	; 0x1846 <__fp_round+0xc>
    1842:	88 23       	and	r24, r24
    1844:	52 f0       	brmi	.+20     	; 0x185a <__fp_round+0x20>
    1846:	bb 0f       	add	r27, r27
    1848:	40 f4       	brcc	.+16     	; 0x185a <__fp_round+0x20>
    184a:	bf 2b       	or	r27, r31
    184c:	11 f4       	brne	.+4      	; 0x1852 <__fp_round+0x18>
    184e:	60 ff       	sbrs	r22, 0
    1850:	04 c0       	rjmp	.+8      	; 0x185a <__fp_round+0x20>
    1852:	6f 5f       	subi	r22, 0xFF	; 255
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	8f 4f       	sbci	r24, 0xFF	; 255
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	08 95       	ret

0000185c <__fp_split3>:
    185c:	57 fd       	sbrc	r21, 7
    185e:	90 58       	subi	r25, 0x80	; 128
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	59 f0       	breq	.+22     	; 0x187c <__fp_splitA+0x10>
    1866:	5f 3f       	cpi	r21, 0xFF	; 255
    1868:	71 f0       	breq	.+28     	; 0x1886 <__fp_splitA+0x1a>
    186a:	47 95       	ror	r20

0000186c <__fp_splitA>:
    186c:	88 0f       	add	r24, r24
    186e:	97 fb       	bst	r25, 7
    1870:	99 1f       	adc	r25, r25
    1872:	61 f0       	breq	.+24     	; 0x188c <__fp_splitA+0x20>
    1874:	9f 3f       	cpi	r25, 0xFF	; 255
    1876:	79 f0       	breq	.+30     	; 0x1896 <__fp_splitA+0x2a>
    1878:	87 95       	ror	r24
    187a:	08 95       	ret
    187c:	12 16       	cp	r1, r18
    187e:	13 06       	cpc	r1, r19
    1880:	14 06       	cpc	r1, r20
    1882:	55 1f       	adc	r21, r21
    1884:	f2 cf       	rjmp	.-28     	; 0x186a <__fp_split3+0xe>
    1886:	46 95       	lsr	r20
    1888:	f1 df       	rcall	.-30     	; 0x186c <__fp_splitA>
    188a:	08 c0       	rjmp	.+16     	; 0x189c <__fp_splitA+0x30>
    188c:	16 16       	cp	r1, r22
    188e:	17 06       	cpc	r1, r23
    1890:	18 06       	cpc	r1, r24
    1892:	99 1f       	adc	r25, r25
    1894:	f1 cf       	rjmp	.-30     	; 0x1878 <__fp_splitA+0xc>
    1896:	86 95       	lsr	r24
    1898:	71 05       	cpc	r23, r1
    189a:	61 05       	cpc	r22, r1
    189c:	08 94       	sec
    189e:	08 95       	ret

000018a0 <__fp_zero>:
    18a0:	e8 94       	clt

000018a2 <__fp_szero>:
    18a2:	bb 27       	eor	r27, r27
    18a4:	66 27       	eor	r22, r22
    18a6:	77 27       	eor	r23, r23
    18a8:	cb 01       	movw	r24, r22
    18aa:	97 f9       	bld	r25, 7
    18ac:	08 95       	ret

000018ae <__mulsf3>:
    18ae:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__mulsf3x>
    18b2:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_round>
    18b6:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fp_pscA>
    18ba:	38 f0       	brcs	.+14     	; 0x18ca <__mulsf3+0x1c>
    18bc:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_pscB>
    18c0:	20 f0       	brcs	.+8      	; 0x18ca <__mulsf3+0x1c>
    18c2:	95 23       	and	r25, r21
    18c4:	11 f0       	breq	.+4      	; 0x18ca <__mulsf3+0x1c>
    18c6:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    18ca:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_nan>
    18ce:	11 24       	eor	r1, r1
    18d0:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>

000018d4 <__mulsf3x>:
    18d4:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fp_split3>
    18d8:	70 f3       	brcs	.-36     	; 0x18b6 <__mulsf3+0x8>

000018da <__mulsf3_pse>:
    18da:	95 9f       	mul	r25, r21
    18dc:	c1 f3       	breq	.-16     	; 0x18ce <__mulsf3+0x20>
    18de:	95 0f       	add	r25, r21
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	55 1f       	adc	r21, r21
    18e4:	62 9f       	mul	r22, r18
    18e6:	f0 01       	movw	r30, r0
    18e8:	72 9f       	mul	r23, r18
    18ea:	bb 27       	eor	r27, r27
    18ec:	f0 0d       	add	r31, r0
    18ee:	b1 1d       	adc	r27, r1
    18f0:	63 9f       	mul	r22, r19
    18f2:	aa 27       	eor	r26, r26
    18f4:	f0 0d       	add	r31, r0
    18f6:	b1 1d       	adc	r27, r1
    18f8:	aa 1f       	adc	r26, r26
    18fa:	64 9f       	mul	r22, r20
    18fc:	66 27       	eor	r22, r22
    18fe:	b0 0d       	add	r27, r0
    1900:	a1 1d       	adc	r26, r1
    1902:	66 1f       	adc	r22, r22
    1904:	82 9f       	mul	r24, r18
    1906:	22 27       	eor	r18, r18
    1908:	b0 0d       	add	r27, r0
    190a:	a1 1d       	adc	r26, r1
    190c:	62 1f       	adc	r22, r18
    190e:	73 9f       	mul	r23, r19
    1910:	b0 0d       	add	r27, r0
    1912:	a1 1d       	adc	r26, r1
    1914:	62 1f       	adc	r22, r18
    1916:	83 9f       	mul	r24, r19
    1918:	a0 0d       	add	r26, r0
    191a:	61 1d       	adc	r22, r1
    191c:	22 1f       	adc	r18, r18
    191e:	74 9f       	mul	r23, r20
    1920:	33 27       	eor	r19, r19
    1922:	a0 0d       	add	r26, r0
    1924:	61 1d       	adc	r22, r1
    1926:	23 1f       	adc	r18, r19
    1928:	84 9f       	mul	r24, r20
    192a:	60 0d       	add	r22, r0
    192c:	21 1d       	adc	r18, r1
    192e:	82 2f       	mov	r24, r18
    1930:	76 2f       	mov	r23, r22
    1932:	6a 2f       	mov	r22, r26
    1934:	11 24       	eor	r1, r1
    1936:	9f 57       	subi	r25, 0x7F	; 127
    1938:	50 40       	sbci	r21, 0x00	; 0
    193a:	9a f0       	brmi	.+38     	; 0x1962 <__mulsf3_pse+0x88>
    193c:	f1 f0       	breq	.+60     	; 0x197a <__mulsf3_pse+0xa0>
    193e:	88 23       	and	r24, r24
    1940:	4a f0       	brmi	.+18     	; 0x1954 <__mulsf3_pse+0x7a>
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	bb 1f       	adc	r27, r27
    1948:	66 1f       	adc	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	91 50       	subi	r25, 0x01	; 1
    1950:	50 40       	sbci	r21, 0x00	; 0
    1952:	a9 f7       	brne	.-22     	; 0x193e <__mulsf3_pse+0x64>
    1954:	9e 3f       	cpi	r25, 0xFE	; 254
    1956:	51 05       	cpc	r21, r1
    1958:	80 f0       	brcs	.+32     	; 0x197a <__mulsf3_pse+0xa0>
    195a:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    195e:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    1962:	5f 3f       	cpi	r21, 0xFF	; 255
    1964:	e4 f3       	brlt	.-8      	; 0x195e <__mulsf3_pse+0x84>
    1966:	98 3e       	cpi	r25, 0xE8	; 232
    1968:	d4 f3       	brlt	.-12     	; 0x195e <__mulsf3_pse+0x84>
    196a:	86 95       	lsr	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	b7 95       	ror	r27
    1972:	f7 95       	ror	r31
    1974:	e7 95       	ror	r30
    1976:	9f 5f       	subi	r25, 0xFF	; 255
    1978:	c1 f7       	brne	.-16     	; 0x196a <__mulsf3_pse+0x90>
    197a:	fe 2b       	or	r31, r30
    197c:	88 0f       	add	r24, r24
    197e:	91 1d       	adc	r25, r1
    1980:	96 95       	lsr	r25
    1982:	87 95       	ror	r24
    1984:	97 f9       	bld	r25, 7
    1986:	08 95       	ret

00001988 <do_rand>:
    1988:	8f 92       	push	r8
    198a:	9f 92       	push	r9
    198c:	af 92       	push	r10
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	ec 01       	movw	r28, r24
    199e:	68 81       	ld	r22, Y
    19a0:	79 81       	ldd	r23, Y+1	; 0x01
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	61 15       	cp	r22, r1
    19a8:	71 05       	cpc	r23, r1
    19aa:	81 05       	cpc	r24, r1
    19ac:	91 05       	cpc	r25, r1
    19ae:	21 f4       	brne	.+8      	; 0x19b8 <do_rand+0x30>
    19b0:	64 e2       	ldi	r22, 0x24	; 36
    19b2:	79 ed       	ldi	r23, 0xD9	; 217
    19b4:	8b e5       	ldi	r24, 0x5B	; 91
    19b6:	97 e0       	ldi	r25, 0x07	; 7
    19b8:	2d e1       	ldi	r18, 0x1D	; 29
    19ba:	33 ef       	ldi	r19, 0xF3	; 243
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__divmodsi4>
    19c4:	49 01       	movw	r8, r18
    19c6:	5a 01       	movw	r10, r20
    19c8:	9b 01       	movw	r18, r22
    19ca:	ac 01       	movw	r20, r24
    19cc:	a7 ea       	ldi	r26, 0xA7	; 167
    19ce:	b1 e4       	ldi	r27, 0x41	; 65
    19d0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__muluhisi3>
    19d4:	6b 01       	movw	r12, r22
    19d6:	7c 01       	movw	r14, r24
    19d8:	ac ee       	ldi	r26, 0xEC	; 236
    19da:	b4 ef       	ldi	r27, 0xF4	; 244
    19dc:	a5 01       	movw	r20, r10
    19de:	94 01       	movw	r18, r8
    19e0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__mulohisi3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8c 0d       	add	r24, r12
    19ea:	9d 1d       	adc	r25, r13
    19ec:	ae 1d       	adc	r26, r14
    19ee:	bf 1d       	adc	r27, r15
    19f0:	b7 ff       	sbrs	r27, 7
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <do_rand+0x72>
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	a1 09       	sbc	r26, r1
    19f8:	b0 48       	sbci	r27, 0x80	; 128
    19fa:	88 83       	st	Y, r24
    19fc:	99 83       	std	Y+1, r25	; 0x01
    19fe:	aa 83       	std	Y+2, r26	; 0x02
    1a00:	bb 83       	std	Y+3, r27	; 0x03
    1a02:	9f 77       	andi	r25, 0x7F	; 127
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	08 95       	ret

00001a1a <rand_r>:
    1a1a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <do_rand>
    1a1e:	08 95       	ret

00001a20 <rand>:
    1a20:	87 e0       	ldi	r24, 0x07	; 7
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	0e 94 c4 0c 	call	0x1988	; 0x1988 <do_rand>
    1a28:	08 95       	ret

00001a2a <srand>:
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	80 93 07 01 	sts	0x0107, r24
    1a32:	90 93 08 01 	sts	0x0108, r25
    1a36:	a0 93 09 01 	sts	0x0109, r26
    1a3a:	b0 93 0a 01 	sts	0x010A, r27
    1a3e:	08 95       	ret

00001a40 <eeprom_read_byte>:
    1a40:	f9 99       	sbic	0x1f, 1	; 31
    1a42:	fe cf       	rjmp	.-4      	; 0x1a40 <eeprom_read_byte>
    1a44:	92 bd       	out	0x22, r25	; 34
    1a46:	81 bd       	out	0x21, r24	; 33
    1a48:	f8 9a       	sbi	0x1f, 0	; 31
    1a4a:	99 27       	eor	r25, r25
    1a4c:	80 b5       	in	r24, 0x20	; 32
    1a4e:	08 95       	ret

00001a50 <eeprom_write_byte>:
    1a50:	26 2f       	mov	r18, r22

00001a52 <eeprom_write_r18>:
    1a52:	f9 99       	sbic	0x1f, 1	; 31
    1a54:	fe cf       	rjmp	.-4      	; 0x1a52 <eeprom_write_r18>
    1a56:	1f ba       	out	0x1f, r1	; 31
    1a58:	92 bd       	out	0x22, r25	; 34
    1a5a:	81 bd       	out	0x21, r24	; 33
    1a5c:	20 bd       	out	0x20, r18	; 32
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	fa 9a       	sbi	0x1f, 2	; 31
    1a64:	f9 9a       	sbi	0x1f, 1	; 31
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	08 95       	ret

00001a6c <__divmodsi4>:
    1a6c:	05 2e       	mov	r0, r21
    1a6e:	97 fb       	bst	r25, 7
    1a70:	1e f4       	brtc	.+6      	; 0x1a78 <__divmodsi4+0xc>
    1a72:	00 94       	com	r0
    1a74:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__negsi2>
    1a78:	57 fd       	sbrc	r21, 7
    1a7a:	07 d0       	rcall	.+14     	; 0x1a8a <__divmodsi4_neg2>
    1a7c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
    1a80:	07 fc       	sbrc	r0, 7
    1a82:	03 d0       	rcall	.+6      	; 0x1a8a <__divmodsi4_neg2>
    1a84:	4e f4       	brtc	.+18     	; 0x1a98 <__divmodsi4_exit>
    1a86:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__negsi2>

00001a8a <__divmodsi4_neg2>:
    1a8a:	50 95       	com	r21
    1a8c:	40 95       	com	r20
    1a8e:	30 95       	com	r19
    1a90:	21 95       	neg	r18
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	4f 4f       	sbci	r20, 0xFF	; 255
    1a96:	5f 4f       	sbci	r21, 0xFF	; 255

00001a98 <__divmodsi4_exit>:
    1a98:	08 95       	ret

00001a9a <__negsi2>:
    1a9a:	90 95       	com	r25
    1a9c:	80 95       	com	r24
    1a9e:	70 95       	com	r23
    1aa0:	61 95       	neg	r22
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	08 95       	ret

00001aaa <__muluhisi3>:
    1aaa:	0e 94 91 0a 	call	0x1522	; 0x1522 <__umulhisi3>
    1aae:	a5 9f       	mul	r26, r21
    1ab0:	90 0d       	add	r25, r0
    1ab2:	b4 9f       	mul	r27, r20
    1ab4:	90 0d       	add	r25, r0
    1ab6:	a4 9f       	mul	r26, r20
    1ab8:	80 0d       	add	r24, r0
    1aba:	91 1d       	adc	r25, r1
    1abc:	11 24       	eor	r1, r1
    1abe:	08 95       	ret

00001ac0 <__mulshisi3>:
    1ac0:	b7 ff       	sbrs	r27, 7
    1ac2:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__muluhisi3>

00001ac6 <__mulohisi3>:
    1ac6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__muluhisi3>
    1aca:	82 1b       	sub	r24, r18
    1acc:	93 0b       	sbc	r25, r19
    1ace:	08 95       	ret

00001ad0 <__udivmodsi4>:
    1ad0:	a1 e2       	ldi	r26, 0x21	; 33
    1ad2:	1a 2e       	mov	r1, r26
    1ad4:	aa 1b       	sub	r26, r26
    1ad6:	bb 1b       	sub	r27, r27
    1ad8:	fd 01       	movw	r30, r26
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <__udivmodsi4_ep>

00001adc <__udivmodsi4_loop>:
    1adc:	aa 1f       	adc	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	ee 1f       	adc	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	a2 17       	cp	r26, r18
    1ae6:	b3 07       	cpc	r27, r19
    1ae8:	e4 07       	cpc	r30, r20
    1aea:	f5 07       	cpc	r31, r21
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <__udivmodsi4_ep>
    1aee:	a2 1b       	sub	r26, r18
    1af0:	b3 0b       	sbc	r27, r19
    1af2:	e4 0b       	sbc	r30, r20
    1af4:	f5 0b       	sbc	r31, r21

00001af6 <__udivmodsi4_ep>:
    1af6:	66 1f       	adc	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	1a 94       	dec	r1
    1b00:	69 f7       	brne	.-38     	; 0x1adc <__udivmodsi4_loop>
    1b02:	60 95       	com	r22
    1b04:	70 95       	com	r23
    1b06:	80 95       	com	r24
    1b08:	90 95       	com	r25
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	bd 01       	movw	r22, r26
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret

00001b14 <_exit>:
    1b14:	f8 94       	cli

00001b16 <__stop_program>:
    1b16:	ff cf       	rjmp	.-2      	; 0x1b16 <__stop_program>
