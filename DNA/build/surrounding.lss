
build/surrounding.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	cf 02       	muls	r28, r31
      6a:	4b 03       	fmul	r20, r19
      6c:	a3 02       	muls	r26, r19
      6e:	9a 02       	muls	r25, r26
      70:	a0 02       	muls	r26, r16
      72:	2d 03       	fmul	r18, r21
      74:	22 03       	mulsu	r18, r18
      76:	ad 09       	sbc	r26, r13
      78:	8a 08       	sbc	r8, r10
      7a:	8a 08       	sbc	r8, r10
      7c:	aa 09       	sbc	r26, r10
      7e:	b6 09       	sbc	r27, r6
      80:	a6 09       	sbc	r26, r6
      82:	bd 09       	sbc	r27, r13
      84:	b9 09       	sbc	r27, r9
      86:	c1 09       	sbc	r28, r1
      88:	79 09       	sbc	r23, r9
      8a:	4b 09       	sbc	r20, r11

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 e2       	ldi	r30, 0x26	; 38
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a6 37       	cpi	r26, 0x76	; 118
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <main>
      da:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:

}

void setup()
{
  last_state_update = kilo_ticks;
      e2:	80 91 3b 01 	lds	r24, 0x013B
      e6:	90 91 3c 01 	lds	r25, 0x013C
      ea:	a0 91 3d 01 	lds	r26, 0x013D
      ee:	b0 91 3e 01 	lds	r27, 0x013E
      f2:	80 93 14 01 	sts	0x0114, r24
      f6:	90 93 15 01 	sts	0x0115, r25
      fa:	a0 93 16 01 	sts	0x0116, r26
      fe:	b0 93 17 01 	sts	0x0117, r27
     102:	08 95       	ret

00000104 <loop>:
}

void loop()
{
     104:	cf 93       	push	r28
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 64))
     106:	40 91 3b 01 	lds	r20, 0x013B
     10a:	50 91 3c 01 	lds	r21, 0x013C
     10e:	60 91 3d 01 	lds	r22, 0x013D
     112:	70 91 3e 01 	lds	r23, 0x013E
     116:	80 91 14 01 	lds	r24, 0x0114
     11a:	90 91 15 01 	lds	r25, 0x0115
     11e:	a0 91 16 01 	lds	r26, 0x0116
     122:	b0 91 17 01 	lds	r27, 0x0117
     126:	80 5c       	subi	r24, 0xC0	; 192
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	af 4f       	sbci	r26, 0xFF	; 255
     12c:	bf 4f       	sbci	r27, 0xFF	; 255
     12e:	84 17       	cp	r24, r20
     130:	95 07       	cpc	r25, r21
     132:	a6 07       	cpc	r26, r22
     134:	b7 07       	cpc	r27, r23
     136:	10 f0       	brcs	.+4      	; 0x13c <loop+0x38>
    {
    	set_color(RGB(0, 1, 0));
		set_speed(1.15, 1.15);
    }
}
     138:	cf 91       	pop	r28
     13a:	08 95       	ret
void loop()
{
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 64))
    {
    	set_color(RGB(0, 1, 0));
     13c:	84 e0       	ldi	r24, 0x04	; 4
     13e:	0e 94 04 08 	call	0x1008	; 0x1008 <set_color>
    }
}

void set_speed(float left, float right)
{
    if(both_spined == 0)
     142:	80 91 0c 01 	lds	r24, 0x010C
     146:	90 91 0d 01 	lds	r25, 0x010D
     14a:	89 2b       	or	r24, r25
     14c:	11 f4       	brne	.+4      	; 0x152 <loop+0x4e>
        spinup_motors();
     14e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <spinup_motors>
    set_motors((uint8_t)(((float)kilo_straight_left)*left), (uint8_t)(((float)kilo_straight_right)*right));
     152:	60 91 74 01 	lds	r22, 0x0174
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     160:	23 e3       	ldi	r18, 0x33	; 51
     162:	33 e3       	ldi	r19, 0x33	; 51
     164:	43 e9       	ldi	r20, 0x93	; 147
     166:	5f e3       	ldi	r21, 0x3F	; 63
     168:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     16c:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
     170:	c6 2f       	mov	r28, r22
     172:	80 91 73 01 	lds	r24, 0x0173
     176:	68 2f       	mov	r22, r24
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     182:	23 e3       	ldi	r18, 0x33	; 51
     184:	33 e3       	ldi	r19, 0x33	; 51
     186:	43 e9       	ldi	r20, 0x93	; 147
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     18e:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
     192:	86 2f       	mov	r24, r22
     194:	6c 2f       	mov	r22, r28
     196:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <set_motors>
    both_spined = 1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	90 93 0d 01 	sts	0x010D, r25
     1a2:	80 93 0c 01 	sts	0x010C, r24
  if (kilo_ticks > (last_state_update + 64))
    {
    	set_color(RGB(0, 1, 0));
		set_speed(1.15, 1.15);
    }
}
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <set_motion>:

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1aa:	20 91 0e 01 	lds	r18, 0x010E
     1ae:	30 91 0f 01 	lds	r19, 0x010F
     1b2:	28 17       	cp	r18, r24
     1b4:	39 07       	cpc	r19, r25
     1b6:	71 f0       	breq	.+28     	; 0x1d4 <set_motion+0x2a>
    {
        current_motion = new_motion;
     1b8:	90 93 0f 01 	sts	0x010F, r25
     1bc:	80 93 0e 01 	sts	0x010E, r24
        
        if (current_motion == STOP)
     1c0:	00 97       	sbiw	r24, 0x00	; 0
     1c2:	71 f1       	breq	.+92     	; 0x220 <set_motion+0x76>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	91 05       	cpc	r25, r1
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <set_motion+0x2c>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	91 05       	cpc	r25, r1
     1ce:	61 f1       	breq	.+88     	; 0x228 <set_motion+0x7e>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     1d0:	03 97       	sbiw	r24, 0x03	; 3
     1d2:	b1 f0       	breq	.+44     	; 0x200 <set_motion+0x56>
     1d4:	08 95       	ret
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
     1d6:	80 91 0c 01 	lds	r24, 0x010C
     1da:	90 91 0d 01 	lds	r25, 0x010D
     1de:	89 2b       	or	r24, r25
     1e0:	11 f4       	brne	.+4      	; 0x1e6 <set_motion+0x3c>
                spinup_motors();
     1e2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     1e6:	60 91 74 01 	lds	r22, 0x0174
     1ea:	80 91 73 01 	lds	r24, 0x0173
     1ee:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <set_motors>
            both_spined = 1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	90 93 0d 01 	sts	0x010D, r25
     1fa:	80 93 0c 01 	sts	0x010C, r24
     1fe:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     200:	80 91 0c 01 	lds	r24, 0x010C
     204:	90 91 0d 01 	lds	r25, 0x010D
     208:	89 2b       	or	r24, r25
     20a:	01 f1       	breq	.+64     	; 0x24c <set_motion+0xa2>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     20c:	60 91 61 01 	lds	r22, 0x0161
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <set_motors>
            both_spined = 0;
     216:	10 92 0d 01 	sts	0x010D, r1
     21a:	10 92 0c 01 	sts	0x010C, r1
     21e:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <set_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     228:	80 91 0c 01 	lds	r24, 0x010C
     22c:	90 91 0d 01 	lds	r25, 0x010D
     230:	89 2b       	or	r24, r25
     232:	11 f4       	brne	.+4      	; 0x238 <set_motion+0x8e>
                spinup_motors();
     234:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	80 91 75 01 	lds	r24, 0x0175
     23e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <set_motors>
            both_spined = 0;
     242:	10 92 0d 01 	sts	0x010D, r1
     246:	10 92 0c 01 	sts	0x010C, r1
     24a:	08 95       	ret
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     24c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <spinup_motors>
     250:	dd cf       	rjmp	.-70     	; 0x20c <set_motion+0x62>

00000252 <set_speed>:
        }
    }
}

void set_speed(float left, float right)
{
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <set_speed+0x10>
     262:	00 d0       	rcall	.+0      	; 0x264 <set_speed+0x12>
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	6b 01       	movw	r12, r22
     26a:	7c 01       	movw	r14, r24
    if(both_spined == 0)
     26c:	80 91 0c 01 	lds	r24, 0x010C
     270:	90 91 0d 01 	lds	r25, 0x010D
     274:	89 2b       	or	r24, r25
     276:	51 f4       	brne	.+20     	; 0x28c <set_speed+0x3a>
        spinup_motors();
     278:	29 83       	std	Y+1, r18	; 0x01
     27a:	3a 83       	std	Y+2, r19	; 0x02
     27c:	4b 83       	std	Y+3, r20	; 0x03
     27e:	5c 83       	std	Y+4, r21	; 0x04
     280:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <spinup_motors>
     284:	5c 81       	ldd	r21, Y+4	; 0x04
     286:	4b 81       	ldd	r20, Y+3	; 0x03
     288:	3a 81       	ldd	r19, Y+2	; 0x02
     28a:	29 81       	ldd	r18, Y+1	; 0x01
    set_motors((uint8_t)(((float)kilo_straight_left)*left), (uint8_t)(((float)kilo_straight_right)*right));
     28c:	80 91 74 01 	lds	r24, 0x0174
     290:	68 2f       	mov	r22, r24
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	29 83       	std	Y+1, r18	; 0x01
     29a:	3a 83       	std	Y+2, r19	; 0x02
     29c:	4b 83       	std	Y+3, r20	; 0x03
     29e:	5c 83       	std	Y+4, r21	; 0x04
     2a0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     2a4:	29 81       	ldd	r18, Y+1	; 0x01
     2a6:	3a 81       	ldd	r19, Y+2	; 0x02
     2a8:	4b 81       	ldd	r20, Y+3	; 0x03
     2aa:	5c 81       	ldd	r21, Y+4	; 0x04
     2ac:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     2b0:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
     2b4:	16 2f       	mov	r17, r22
     2b6:	80 91 73 01 	lds	r24, 0x0173
     2ba:	68 2f       	mov	r22, r24
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     2c6:	a7 01       	movw	r20, r14
     2c8:	96 01       	movw	r18, r12
     2ca:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     2ce:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
     2d2:	86 2f       	mov	r24, r22
     2d4:	61 2f       	mov	r22, r17
     2d6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <set_motors>
    both_spined = 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	90 93 0d 01 	sts	0x010D, r25
     2e2:	80 93 0c 01 	sts	0x010C, r24

}
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	df 90       	pop	r13
     2fa:	cf 90       	pop	r12
     2fc:	08 95       	ret

000002fe <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     2fe:	08 95       	ret

00000300 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	08 95       	ret

00000306 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     306:	08 95       	ret

00000308 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
    cli();
     316:	f8 94       	cli

    ports_off();
     318:	14 b8       	out	0x04, r1	; 4
     31a:	17 b8       	out	0x07, r1	; 7
     31c:	1a b8       	out	0x0a, r1	; 10
     31e:	15 b8       	out	0x05, r1	; 5
     320:	18 b8       	out	0x08, r1	; 8
     322:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     324:	52 9a       	sbi	0x0a, 2	; 10
     326:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     328:	14 bc       	out	0x24, r1	; 36
     32a:	85 e0       	ldi	r24, 0x05	; 5
     32c:	85 bd       	out	0x25, r24	; 37
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	87 bd       	out	0x27, r24	; 39
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     338:	10 92 80 00 	sts	0x0080, r1
     33c:	10 92 81 00 	sts	0x0081, r1
     340:	2f e8       	ldi	r18, 0x8F	; 143
     342:	3b e0       	ldi	r19, 0x0B	; 11
     344:	30 93 89 00 	sts	0x0089, r19
     348:	20 93 88 00 	sts	0x0088, r18
     34c:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     350:	53 98       	cbi	0x0a, 3	; 10
     352:	23 98       	cbi	0x04, 3	; 4
     354:	91 ea       	ldi	r25, 0xA1	; 161
     356:	90 93 b0 00 	sts	0x00B0, r25
     35a:	80 93 b1 00 	sts	0x00B1, r24
     35e:	10 92 b4 00 	sts	0x00B4, r1
     362:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     366:	8b e0       	ldi	r24, 0x0B	; 11
     368:	80 bf       	out	0x30, r24	; 48
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	80 93 7c 00 	sts	0x007C, r24
     376:	83 e8       	ldi	r24, 0x83	; 131
     378:	80 93 7a 00 	sts	0x007A, r24
     37c:	80 91 7a 00 	lds	r24, 0x007A
     380:	80 64       	ori	r24, 0x40	; 64
     382:	80 93 7a 00 	sts	0x007A, r24
     386:	80 91 7a 00 	lds	r24, 0x007A
     38a:	86 fd       	sbrc	r24, 6
     38c:	fc cf       	rjmp	.-8      	; 0x386 <kilo_init+0x7e>
    adc_trigger_high_gain();
     38e:	10 92 7c 00 	sts	0x007C, r1
     392:	83 ea       	ldi	r24, 0xA3	; 163
     394:	80 93 7a 00 	sts	0x007A, r24
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
    if (osccal != 0xFF)
     3a6:	8f 3f       	cpi	r24, 0xFF	; 255
     3a8:	11 f0       	breq	.+4      	; 0x3ae <kilo_init+0xa6>
        OSCCAL = osccal;
     3aa:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     3ae:	10 92 3f 01 	sts	0x013F, r1
    rx_leadingbit = 1;
     3b2:	c1 e0       	ldi	r28, 0x01	; 1
     3b4:	c0 93 18 01 	sts	0x0118, r28
    rx_leadingbyte = 1;
     3b8:	c0 93 5c 01 	sts	0x015C, r28
    rx_byteindex = 0;
     3bc:	10 92 36 01 	sts	0x0136, r1
    rx_bytevalue = 0;
     3c0:	10 92 70 01 	sts	0x0170, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3c4:	80 e9       	ldi	r24, 0x90	; 144
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     3cc:	80 93 35 01 	sts	0x0135, r24
    if (tx_mask & ~TX_MASK_MAX)
     3d0:	80 91 35 01 	lds	r24, 0x0135
     3d4:	88 73       	andi	r24, 0x38	; 56
     3d6:	11 f0       	breq	.+4      	; 0x3dc <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3d8:	c0 93 35 01 	sts	0x0135, r28
    tx_clock = 0;
     3dc:	10 92 60 01 	sts	0x0160, r1
     3e0:	10 92 5f 01 	sts	0x015F, r1
    tx_increment = 255;
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 5e 01 	sts	0x015E, r25
     3ec:	80 93 5d 01 	sts	0x015D, r24
    kilo_ticks = 0;
     3f0:	10 92 3b 01 	sts	0x013B, r1
     3f4:	10 92 3c 01 	sts	0x013C, r1
     3f8:	10 92 3d 01 	sts	0x013D, r1
     3fc:	10 92 3e 01 	sts	0x013E, r1
    kilo_state = IDLE;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	80 93 13 01 	sts	0x0113, r24
    kilo_tx_period = 3906;
     406:	82 e4       	ldi	r24, 0x42	; 66
     408:	9f e0       	ldi	r25, 0x0F	; 15
     40a:	90 93 6f 01 	sts	0x016F, r25
     40e:	80 93 6e 01 	sts	0x016E, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     412:	80 eb       	ldi	r24, 0xB0	; 176
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     41a:	c8 2f       	mov	r28, r24
     41c:	81 eb       	ldi	r24, 0xB1	; 177
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     424:	2c 2f       	mov	r18, r28
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	38 2b       	or	r19, r24
     42a:	30 93 72 01 	sts	0x0172, r19
     42e:	20 93 71 01 	sts	0x0171, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     432:	85 e0       	ldi	r24, 0x05	; 5
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     43a:	80 93 75 01 	sts	0x0175, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     43e:	89 e0       	ldi	r24, 0x09	; 9
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     446:	80 93 61 01 	sts	0x0161, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     44a:	8c e0       	ldi	r24, 0x0C	; 12
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     452:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     456:	84 e1       	ldi	r24, 0x14	; 20
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     45e:	80 93 74 01 	sts	0x0174, r24
     462:	50 e4       	ldi	r21, 0x40	; 64
     464:	e5 2e       	mov	r14, r21
     466:	51 e0       	ldi	r21, 0x01	; 1
     468:	f5 2e       	mov	r15, r21
     46a:	09 e1       	ldi	r16, 0x19	; 25
     46c:	11 e0       	ldi	r17, 0x01	; 1
     46e:	c0 e2       	ldi	r28, 0x20	; 32
     470:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     472:	ce 01       	movw	r24, r28
     474:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     478:	d8 2e       	mov	r13, r24
     47a:	ce 01       	movw	r24, r28
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     482:	2d 2d       	mov	r18, r13
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	32 2f       	mov	r19, r18
     488:	22 27       	eor	r18, r18
     48a:	28 2b       	or	r18, r24
     48c:	f7 01       	movw	r30, r14
     48e:	21 93       	st	Z+, r18
     490:	31 93       	st	Z+, r19
     492:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     494:	ce 01       	movw	r24, r28
     496:	c0 96       	adiw	r24, 0x30	; 48
     498:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     49c:	d8 2e       	mov	r13, r24
     49e:	ce 01       	movw	r24, r28
     4a0:	c1 96       	adiw	r24, 0x31	; 49
     4a2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     4a6:	2d 2d       	mov	r18, r13
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	32 2f       	mov	r19, r18
     4ac:	22 27       	eor	r18, r18
     4ae:	28 2b       	or	r18, r24
     4b0:	f8 01       	movw	r30, r16
     4b2:	21 93       	st	Z+, r18
     4b4:	31 93       	st	Z+, r19
     4b6:	8f 01       	movw	r16, r30
     4b8:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4ba:	cc 33       	cpi	r28, 0x3C	; 60
     4bc:	d1 05       	cpc	r29, r1
     4be:	c9 f6       	brne	.-78     	; 0x472 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4c0:	78 94       	sei
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	08 95       	ret

000004d2 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	8f 93       	push	r24
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	a8 95       	wdr
     4e4:	80 91 60 00 	lds	r24, 0x0060
     4e8:	88 61       	ori	r24, 0x18	; 24
     4ea:	80 93 60 00 	sts	0x0060, r24
     4ee:	10 92 60 00 	sts	0x0060, r1
     4f2:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     4f4:	8f 91       	pop	r24
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     500:	3c 01       	movw	r6, r24
     502:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     504:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     506:	99 24       	eor	r9, r9
     508:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     50e:	96 e0       	ldi	r25, 0x06	; 6
     510:	a9 2e       	mov	r10, r25
     512:	23 e8       	ldi	r18, 0x83	; 131
     514:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     516:	38 e1       	ldi	r19, 0x18	; 24
     518:	d3 2e       	mov	r13, r19
     51a:	49 e2       	ldi	r20, 0x29	; 41
     51c:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     51e:	90 91 13 01 	lds	r25, 0x0113
     522:	e9 2f       	mov	r30, r25
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	e7 30       	cpi	r30, 0x07	; 7
     528:	f1 05       	cpc	r31, r1
     52a:	c8 f7       	brcc	.-14     	; 0x51e <kilo_start+0x1e>
     52c:	ec 5c       	subi	r30, 0xCC	; 204
     52e:	ff 4f       	sbci	r31, 0xFF	; 255
     530:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     534:	11 23       	and	r17, r17
     536:	09 f4       	brne	.+2      	; 0x53a <kilo_start+0x3a>
     538:	fc c0       	rjmp	.+504    	; 0x732 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     53a:	c0 92 13 01 	sts	0x0113, r12
     53e:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     540:	fe 01       	movw	r30, r28
     542:	09 95       	icall
                break;
     544:	ec cf       	rjmp	.-40     	; 0x51e <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     546:	80 91 3f 01 	lds	r24, 0x013F
     54a:	81 11       	cpse	r24, r1
     54c:	eb c0       	rjmp	.+470    	; 0x724 <kilo_start+0x224>
        cli();                                    // disable interrupts
     54e:	f8 94       	cli
        adc_setup_conversion(6);
     550:	a0 92 7c 00 	sts	0x007C, r10
     554:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     558:	80 91 7a 00 	lds	r24, 0x007A
     55c:	80 64       	ori	r24, 0x40	; 64
     55e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     562:	90 91 7a 00 	lds	r25, 0x007A
     566:	96 fd       	sbrc	r25, 6
     568:	fc cf       	rjmp	.-8      	; 0x562 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     56a:	80 91 78 00 	lds	r24, 0x0078
     56e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     572:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     574:	8b 3a       	cpi	r24, 0xAB	; 171
     576:	e2 e0       	ldi	r30, 0x02	; 2
     578:	9e 07       	cpc	r25, r30
     57a:	0c f0       	brlt	.+2      	; 0x57e <kilo_start+0x7e>
     57c:	ed c0       	rjmp	.+474    	; 0x758 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     57e:	89 38       	cpi	r24, 0x89	; 137
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	9f 07       	cpc	r25, r31
     584:	0c f0       	brlt	.+2      	; 0x588 <kilo_start+0x88>
     586:	ef c0       	rjmp	.+478    	; 0x766 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     588:	87 36       	cpi	r24, 0x67	; 103
     58a:	92 40       	sbci	r25, 0x02	; 2
     58c:	0c f4       	brge	.+2      	; 0x590 <kilo_start+0x90>
     58e:	ca c0       	rjmp	.+404    	; 0x724 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     590:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     592:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     594:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     596:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     598:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     59a:	3c 98       	cbi	0x07, 4	; 7
     59c:	c0 cf       	rjmp	.-128    	; 0x51e <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     59e:	f8 94       	cli
                acomp_off();
     5a0:	80 b7       	in	r24, 0x30	; 48
     5a2:	87 7f       	andi	r24, 0xF7	; 247
     5a4:	80 bf       	out	0x30, r24	; 48
                adc_off();
     5a6:	80 91 7a 00 	lds	r24, 0x007A
     5aa:	8f 77       	andi	r24, 0x7F	; 127
     5ac:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     5b0:	14 b8       	out	0x04, r1	; 4
     5b2:	17 b8       	out	0x07, r1	; 7
     5b4:	1a b8       	out	0x0a, r1	; 10
     5b6:	15 b8       	out	0x05, r1	; 5
     5b8:	18 b8       	out	0x08, r1	; 8
     5ba:	1b b8       	out	0x0b, r1	; 11
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	a8 95       	wdr
     5c2:	d0 92 60 00 	sts	0x0060, r13
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     5cc:	80 91 60 00 	lds	r24, 0x0060
     5d0:	80 64       	ori	r24, 0x40	; 64
     5d2:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     5d6:	93 b7       	in	r25, 0x33	; 51
     5d8:	91 7f       	andi	r25, 0xF1	; 241
     5da:	94 60       	ori	r25, 0x04	; 4
     5dc:	93 bf       	out	0x33, r25	; 51
                cli();
     5de:	f8 94       	cli
                sleep_enable();
     5e0:	83 b7       	in	r24, 0x33	; 51
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	83 bf       	out	0x33, r24	; 51
                sei();
     5e6:	78 94       	sei
                sleep_cpu();
     5e8:	88 95       	sleep
                sleep_disable();
     5ea:	83 b7       	in	r24, 0x33	; 51
     5ec:	8e 7f       	andi	r24, 0xFE	; 254
     5ee:	83 bf       	out	0x33, r24	; 51
                sei();
     5f0:	78 94       	sei
                rx_busy = 0;
     5f2:	10 92 3f 01 	sts	0x013F, r1
                ports_on();
     5f6:	52 9a       	sbi	0x0a, 2	; 10
     5f8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     5fa:	80 91 7a 00 	lds	r24, 0x007A
     5fe:	80 68       	ori	r24, 0x80	; 128
     600:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     604:	87 e5       	ldi	r24, 0x57	; 87
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <kilo_start+0x108>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <kilo_start+0x10e>
     60e:	00 00       	nop
                _delay_us(300);
                acomp_on();
     610:	80 b7       	in	r24, 0x30	; 48
     612:	88 61       	ori	r24, 0x18	; 24
     614:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     616:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     618:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     61a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     61c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     61e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     620:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     622:	ef e1       	ldi	r30, 0x1F	; 31
     624:	fe e4       	ldi	r31, 0x4E	; 78
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <kilo_start+0x126>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <kilo_start+0x12c>
     62c:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     62e:	80 91 3f 01 	lds	r24, 0x013F
     632:	81 11       	cpse	r24, r1
     634:	81 c0       	rjmp	.+258    	; 0x738 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     636:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     638:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     63a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     63c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     63e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     640:	3c 98       	cbi	0x07, 4	; 7
     642:	6d cf       	rjmp	.-294    	; 0x51e <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     644:	80 91 11 01 	lds	r24, 0x0111
     648:	81 11       	cpse	r24, r1
     64a:	41 c0       	rjmp	.+130    	; 0x6ce <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     64c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     650:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     654:	10 92 12 01 	sts	0x0112, r1
     658:	62 cf       	rjmp	.-316    	; 0x51e <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     65a:	48 99       	sbic	0x09, 0	; 9
     65c:	ec cf       	rjmp	.-40     	; 0x636 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     65e:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     660:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     662:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     664:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     666:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     668:	3c 98       	cbi	0x07, 4	; 7
     66a:	8f ec       	ldi	r24, 0xCF	; 207
     66c:	97 e0       	ldi	r25, 0x07	; 7
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <kilo_start+0x16e>
     672:	00 c0       	rjmp	.+0      	; 0x674 <kilo_start+0x174>
     674:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     676:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     678:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     67a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     67c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     67e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     680:	3c 98       	cbi	0x07, 4	; 7
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	e1 ee       	ldi	r30, 0xE1	; 225
     686:	f4 e0       	ldi	r31, 0x04	; 4
     688:	91 50       	subi	r25, 0x01	; 1
     68a:	e0 40       	sbci	r30, 0x00	; 0
     68c:	f0 40       	sbci	r31, 0x00	; 0
     68e:	e1 f7       	brne	.-8      	; 0x688 <kilo_start+0x188>
     690:	00 c0       	rjmp	.+0      	; 0x692 <kilo_start+0x192>
     692:	00 00       	nop
     694:	44 cf       	rjmp	.-376    	; 0x51e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     696:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     698:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     69a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     69c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     69e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6a0:	3c 98       	cbi	0x07, 4	; 7
     6a2:	ef ec       	ldi	r30, 0xCF	; 207
     6a4:	f7 e0       	ldi	r31, 0x07	; 7
     6a6:	31 97       	sbiw	r30, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <kilo_start+0x1a6>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <kilo_start+0x1ac>
     6ac:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6ae:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6b0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6b2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6b4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6b6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6b8:	3c 98       	cbi	0x07, 4	; 7
     6ba:	ff ef       	ldi	r31, 0xFF	; 255
     6bc:	21 ee       	ldi	r18, 0xE1	; 225
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	f1 50       	subi	r31, 0x01	; 1
     6c2:	20 40       	sbci	r18, 0x00	; 0
     6c4:	80 40       	sbci	r24, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <kilo_start+0x1c0>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <kilo_start+0x1ca>
     6ca:	00 00       	nop
     6cc:	28 cf       	rjmp	.-432    	; 0x51e <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     6ce:	90 91 11 01 	lds	r25, 0x0111
     6d2:	80 91 12 01 	lds	r24, 0x0112
     6d6:	98 17       	cp	r25, r24
     6d8:	09 f4       	brne	.+2      	; 0x6dc <kilo_start+0x1dc>
     6da:	21 cf       	rjmp	.-446    	; 0x51e <kilo_start+0x1e>
                        prev_motion = cur_motion;
     6dc:	80 91 11 01 	lds	r24, 0x0111
     6e0:	80 93 12 01 	sts	0x0112, r24
                        if (cur_motion == MOVE_LEFT) {
     6e4:	80 91 11 01 	lds	r24, 0x0111
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	09 f4       	brne	.+2      	; 0x6ee <kilo_start+0x1ee>
     6ec:	50 c0       	rjmp	.+160    	; 0x78e <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6ee:	80 91 11 01 	lds	r24, 0x0111
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6f2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6f6:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	d9 f1       	breq	.+118    	; 0x774 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6fe:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     702:	90 92 b4 00 	sts	0x00B4, r9
     706:	8f e2       	ldi	r24, 0x2F	; 47
     708:	95 e7       	ldi	r25, 0x75	; 117
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <kilo_start+0x20a>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <kilo_start+0x210>
     710:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     712:	80 91 74 01 	lds	r24, 0x0174
     716:	90 91 73 01 	lds	r25, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     71a:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     71e:	80 93 b4 00 	sts	0x00B4, r24
     722:	fd ce       	rjmp	.-518    	; 0x51e <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     724:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     726:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     728:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     72a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     72c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     72e:	3c 98       	cbi	0x07, 4	; 7
     730:	f6 ce       	rjmp	.-532    	; 0x51e <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     732:	f3 01       	movw	r30, r6
     734:	09 95       	icall
     736:	01 cf       	rjmp	.-510    	; 0x53a <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     738:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     73a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     73c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     73e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     740:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     742:	3c 98       	cbi	0x07, 4	; 7
     744:	ff ef       	ldi	r31, 0xFF	; 255
     746:	20 e7       	ldi	r18, 0x70	; 112
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	f1 50       	subi	r31, 0x01	; 1
     74c:	20 40       	sbci	r18, 0x00	; 0
     74e:	80 40       	sbci	r24, 0x00	; 0
     750:	e1 f7       	brne	.-8      	; 0x74a <kilo_start+0x24a>
     752:	00 c0       	rjmp	.+0      	; 0x754 <kilo_start+0x254>
     754:	00 00       	nop
     756:	6f cf       	rjmp	.-290    	; 0x636 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     758:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     75a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     75c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     75e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     760:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     762:	3c 98       	cbi	0x07, 4	; 7
     764:	dc ce       	rjmp	.-584    	; 0x51e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     766:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     768:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     76a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     76c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     76e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     770:	3c 9a       	sbi	0x07, 4	; 7
     772:	d5 ce       	rjmp	.-598    	; 0x51e <kilo_start+0x1e>
     774:	ef e2       	ldi	r30, 0x2F	; 47
     776:	f5 e7       	ldi	r31, 0x75	; 117
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <kilo_start+0x278>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <kilo_start+0x27e>
     77e:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     780:	80 91 61 01 	lds	r24, 0x0161
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     784:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     788:	80 93 b4 00 	sts	0x00B4, r24
     78c:	c8 ce       	rjmp	.-624    	; 0x51e <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     78e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     792:	10 92 b4 00 	sts	0x00B4, r1
     796:	8f e2       	ldi	r24, 0x2F	; 47
     798:	95 e7       	ldi	r25, 0x75	; 117
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <kilo_start+0x29a>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <kilo_start+0x2a0>
     7a0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     7a2:	80 91 75 01 	lds	r24, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7a6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7aa:	10 92 b4 00 	sts	0x00B4, r1
     7ae:	b7 ce       	rjmp	.-658    	; 0x51e <kilo_start+0x1e>

000007b0 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <delay+0x10>
     7b2:	ef ec       	ldi	r30, 0xCF	; 207
     7b4:	f7 e0       	ldi	r31, 0x07	; 7
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <delay+0x6>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <delay+0xc>
     7bc:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     7be:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	b9 f7       	brne	.-18     	; 0x7b2 <delay+0x2>
     7c4:	08 95       	ret

000007c6 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7c6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7ca:	60 93 b4 00 	sts	0x00B4, r22
     7ce:	08 95       	ret

000007d0 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7d6:	80 93 b4 00 	sts	0x00B4, r24
     7da:	8f e0       	ldi	r24, 0x0F	; 15
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	ef ec       	ldi	r30, 0xCF	; 207
     7e0:	f7 e0       	ldi	r31, 0x07	; 7
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <spinup_motors+0x12>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <spinup_motors+0x18>
     7e8:	00 00       	nop
     7ea:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7ec:	c1 f7       	brne	.-16     	; 0x7de <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     7ee:	08 95       	ret

000007f0 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     7f0:	80 91 3f 01 	lds	r24, 0x013F
     7f4:	81 11       	cpse	r24, r1
     7f6:	1e c0       	rjmp	.+60     	; 0x834 <get_ambientlight+0x44>
        cli();
     7f8:	f8 94       	cli
        adc_setup_conversion(7);
     7fa:	87 e0       	ldi	r24, 0x07	; 7
     7fc:	80 93 7c 00 	sts	0x007C, r24
     800:	83 e8       	ldi	r24, 0x83	; 131
     802:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     806:	80 91 7a 00 	lds	r24, 0x007A
     80a:	80 64       	ori	r24, 0x40	; 64
     80c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     810:	80 91 7a 00 	lds	r24, 0x007A
     814:	86 fd       	sbrc	r24, 6
     816:	fc cf       	rjmp	.-8      	; 0x810 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     818:	80 91 78 00 	lds	r24, 0x0078
     81c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     820:	10 92 7c 00 	sts	0x007C, r1
     824:	23 ea       	ldi	r18, 0xA3	; 163
     826:	20 93 7a 00 	sts	0x007A, r18
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     830:	78 94       	sei
     832:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     838:	08 95       	ret

0000083a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     83a:	80 91 3f 01 	lds	r24, 0x013F
     83e:	81 11       	cpse	r24, r1
     840:	1e c0       	rjmp	.+60     	; 0x87e <get_temperature+0x44>
        cli();
     842:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     844:	88 ec       	ldi	r24, 0xC8	; 200
     846:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     84a:	87 e8       	ldi	r24, 0x87	; 135
     84c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     850:	80 91 7a 00 	lds	r24, 0x007A
     854:	80 64       	ori	r24, 0x40	; 64
     856:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     85a:	80 91 7a 00 	lds	r24, 0x007A
     85e:	86 fd       	sbrc	r24, 6
     860:	fc cf       	rjmp	.-8      	; 0x85a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     862:	80 91 78 00 	lds	r24, 0x0078
     866:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     86a:	10 92 7c 00 	sts	0x007C, r1
     86e:	23 ea       	ldi	r18, 0xA3	; 163
     870:	20 93 7a 00 	sts	0x007A, r18
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     87a:	78 94       	sei
     87c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     882:	08 95       	ret

00000884 <rand_hard>:

uint8_t rand_hard() {
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	e0 e0       	ldi	r30, 0x00	; 0
     88e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     890:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     892:	03 ea       	ldi	r16, 0xA3	; 163
     894:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     896:	d6 e0       	ldi	r29, 0x06	; 6
     898:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     89a:	a1 e0       	ldi	r26, 0x01	; 1
     89c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     89e:	60 e8       	ldi	r22, 0x80	; 128
     8a0:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     8a2:	f8 94       	cli
            adc_setup_conversion(6);
     8a4:	d0 93 7c 00 	sts	0x007C, r29
     8a8:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     8ac:	90 91 7a 00 	lds	r25, 0x007A
     8b0:	90 64       	ori	r25, 0x40	; 64
     8b2:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8b6:	90 91 7a 00 	lds	r25, 0x007A
     8ba:	96 fd       	sbrc	r25, 6
     8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <rand_hard+0x32>
            a = ADCW&0x1;
     8be:	20 91 78 00 	lds	r18, 0x0078
     8c2:	30 91 79 00 	lds	r19, 0x0079
     8c6:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     8c8:	90 91 7a 00 	lds	r25, 0x007A
     8cc:	90 64       	ori	r25, 0x40	; 64
     8ce:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8d2:	90 91 7a 00 	lds	r25, 0x007A
     8d6:	96 fd       	sbrc	r25, 6
     8d8:	fc cf       	rjmp	.-8      	; 0x8d2 <rand_hard+0x4e>
            b = ADCW&0x1;
     8da:	40 91 78 00 	lds	r20, 0x0078
     8de:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     8e2:	10 92 7c 00 	sts	0x007C, r1
     8e6:	00 93 7a 00 	sts	0x007A, r16
     8ea:	10 93 7b 00 	sts	0x007B, r17
            sei();
     8ee:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     8f0:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     8f2:	24 13       	cpse	r18, r20
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <rand_hard+0x78>
     8f6:	61 50       	subi	r22, 0x01	; 1
     8f8:	71 09       	sbc	r23, r1
     8fa:	99 f6       	brne	.-90     	; 0x8a2 <rand_hard+0x1e>
        if (a)
     8fc:	22 23       	and	r18, r18
     8fe:	39 f0       	breq	.+14     	; 0x90e <__stack+0xf>
            num |= (1<<i);
     900:	9d 01       	movw	r18, r26
     902:	0e 2e       	mov	r0, r30
     904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0x9>
     906:	22 0f       	add	r18, r18
     908:	0a 94       	dec	r0
     90a:	ea f7       	brpl	.-6      	; 0x906 <__stack+0x7>
     90c:	82 2b       	or	r24, r18
     90e:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     910:	e8 30       	cpi	r30, 0x08	; 8
     912:	f1 05       	cpc	r31, r1
     914:	09 f0       	breq	.+2      	; 0x918 <__stack+0x19>
     916:	c3 cf       	rjmp	.-122    	; 0x89e <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     922:	80 91 00 01 	lds	r24, 0x0100
     926:	98 2f       	mov	r25, r24
     928:	99 0f       	add	r25, r25
     92a:	99 0f       	add	r25, r25
     92c:	99 0f       	add	r25, r25
     92e:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     930:	90 91 10 01 	lds	r25, 0x0110
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	29 0f       	add	r18, r25
     938:	20 93 10 01 	sts	0x0110, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     93c:	28 2f       	mov	r18, r24
     93e:	22 95       	swap	r18
     940:	26 95       	lsr	r18
     942:	27 70       	andi	r18, 0x07	; 7
     944:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     946:	96 95       	lsr	r25
     948:	96 95       	lsr	r25
     94a:	89 27       	eor	r24, r25
     94c:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     950:	08 95       	ret

00000952 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     952:	80 93 00 01 	sts	0x0100, r24
     956:	08 95       	ret

00000958 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     958:	80 91 3f 01 	lds	r24, 0x013F
     95c:	81 11       	cpse	r24, r1
     95e:	16 c0       	rjmp	.+44     	; 0x98c <get_voltage+0x34>
        cli();                                    // disable interrupts
     960:	f8 94       	cli
        adc_setup_conversion(6);
     962:	86 e0       	ldi	r24, 0x06	; 6
     964:	80 93 7c 00 	sts	0x007C, r24
     968:	83 e8       	ldi	r24, 0x83	; 131
     96a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     96e:	80 91 7a 00 	lds	r24, 0x007A
     972:	80 64       	ori	r24, 0x40	; 64
     974:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     978:	80 91 7a 00 	lds	r24, 0x007A
     97c:	86 fd       	sbrc	r24, 6
     97e:	fc cf       	rjmp	.-8      	; 0x978 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     980:	80 91 78 00 	lds	r24, 0x0078
     984:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     988:	78 94       	sei
     98a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     990:	08 95       	ret

00000992 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     992:	2f 92       	push	r2
     994:	3f 92       	push	r3
     996:	4f 92       	push	r4
     998:	5f 92       	push	r5
     99a:	6f 92       	push	r6
     99c:	7f 92       	push	r7
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <estimate_distance+0x26>
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <estimate_distance+0x28>
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <estimate_distance+0x2a>
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     9c2:	dc 01       	movw	r26, r24
     9c4:	12 96       	adiw	r26, 0x02	; 2
     9c6:	0d 90       	ld	r0, X+
     9c8:	bc 91       	ld	r27, X
     9ca:	a0 2d       	mov	r26, r0
     9cc:	be 83       	std	Y+6, r27	; 0x06
     9ce:	ad 83       	std	Y+5, r26	; 0x05
     9d0:	a4 38       	cpi	r26, 0x84	; 132
     9d2:	e3 e0       	ldi	r30, 0x03	; 3
     9d4:	be 07       	cpc	r27, r30
     9d6:	0c f0       	brlt	.+2      	; 0x9da <estimate_distance+0x48>
     9d8:	c9 c0       	rjmp	.+402    	; 0xb6c <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     9da:	80 91 19 01 	lds	r24, 0x0119
     9de:	90 91 1a 01 	lds	r25, 0x011A
     9e2:	8a 17       	cp	r24, r26
     9e4:	9b 07       	cpc	r25, r27
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <estimate_distance+0x58>
     9e8:	37 c1       	rjmp	.+622    	; 0xc58 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     9ea:	00 91 1b 01 	lds	r16, 0x011B
     9ee:	10 91 1c 01 	lds	r17, 0x011C
     9f2:	0a 17       	cp	r16, r26
     9f4:	1b 07       	cpc	r17, r27
     9f6:	08 f4       	brcc	.+2      	; 0x9fa <estimate_distance+0x68>
     9f8:	2f c2       	rjmp	.+1118   	; 0xe58 <estimate_distance+0x4c6>
     9fa:	00 91 1d 01 	lds	r16, 0x011D
     9fe:	10 91 1e 01 	lds	r17, 0x011E
     a02:	0a 17       	cp	r16, r26
     a04:	1b 07       	cpc	r17, r27
     a06:	08 f4       	brcc	.+2      	; 0xa0a <estimate_distance+0x78>
     a08:	2f c2       	rjmp	.+1118   	; 0xe68 <estimate_distance+0x4d6>
     a0a:	00 91 1f 01 	lds	r16, 0x011F
     a0e:	10 91 20 01 	lds	r17, 0x0120
     a12:	0a 17       	cp	r16, r26
     a14:	1b 07       	cpc	r17, r27
     a16:	08 f4       	brcc	.+2      	; 0xa1a <estimate_distance+0x88>
     a18:	2f c2       	rjmp	.+1118   	; 0xe78 <estimate_distance+0x4e6>
     a1a:	00 91 21 01 	lds	r16, 0x0121
     a1e:	10 91 22 01 	lds	r17, 0x0122
     a22:	0a 17       	cp	r16, r26
     a24:	1b 07       	cpc	r17, r27
     a26:	08 f4       	brcc	.+2      	; 0xa2a <estimate_distance+0x98>
     a28:	2f c2       	rjmp	.+1118   	; 0xe88 <estimate_distance+0x4f6>
     a2a:	00 91 23 01 	lds	r16, 0x0123
     a2e:	10 91 24 01 	lds	r17, 0x0124
     a32:	0a 17       	cp	r16, r26
     a34:	1b 07       	cpc	r17, r27
     a36:	08 f4       	brcc	.+2      	; 0xa3a <estimate_distance+0xa8>
     a38:	ef c1       	rjmp	.+990    	; 0xe18 <estimate_distance+0x486>
     a3a:	00 91 25 01 	lds	r16, 0x0125
     a3e:	10 91 26 01 	lds	r17, 0x0126
     a42:	0a 17       	cp	r16, r26
     a44:	1b 07       	cpc	r17, r27
     a46:	08 f4       	brcc	.+2      	; 0xa4a <estimate_distance+0xb8>
     a48:	27 c2       	rjmp	.+1102   	; 0xe98 <estimate_distance+0x506>
     a4a:	00 91 27 01 	lds	r16, 0x0127
     a4e:	10 91 28 01 	lds	r17, 0x0128
     a52:	0a 17       	cp	r16, r26
     a54:	1b 07       	cpc	r17, r27
     a56:	08 f4       	brcc	.+2      	; 0xa5a <estimate_distance+0xc8>
     a58:	27 c2       	rjmp	.+1102   	; 0xea8 <estimate_distance+0x516>
     a5a:	00 91 29 01 	lds	r16, 0x0129
     a5e:	10 91 2a 01 	lds	r17, 0x012A
     a62:	0a 17       	cp	r16, r26
     a64:	1b 07       	cpc	r17, r27
     a66:	08 f4       	brcc	.+2      	; 0xa6a <estimate_distance+0xd8>
     a68:	27 c2       	rjmp	.+1102   	; 0xeb8 <estimate_distance+0x526>
     a6a:	00 91 2b 01 	lds	r16, 0x012B
     a6e:	10 91 2c 01 	lds	r17, 0x012C
     a72:	0a 17       	cp	r16, r26
     a74:	1b 07       	cpc	r17, r27
     a76:	08 f4       	brcc	.+2      	; 0xa7a <estimate_distance+0xe8>
     a78:	27 c2       	rjmp	.+1102   	; 0xec8 <estimate_distance+0x536>
     a7a:	00 91 2d 01 	lds	r16, 0x012D
     a7e:	10 91 2e 01 	lds	r17, 0x012E
     a82:	0a 17       	cp	r16, r26
     a84:	1b 07       	cpc	r17, r27
     a86:	08 f4       	brcc	.+2      	; 0xa8a <estimate_distance+0xf8>
     a88:	27 c2       	rjmp	.+1102   	; 0xed8 <estimate_distance+0x546>
     a8a:	00 91 2f 01 	lds	r16, 0x012F
     a8e:	10 91 30 01 	lds	r17, 0x0130
     a92:	0a 17       	cp	r16, r26
     a94:	1b 07       	cpc	r17, r27
     a96:	08 f4       	brcc	.+2      	; 0xa9a <estimate_distance+0x108>
     a98:	23 c2       	rjmp	.+1094   	; 0xee0 <estimate_distance+0x54e>
     a9a:	00 91 31 01 	lds	r16, 0x0131
     a9e:	10 91 32 01 	lds	r17, 0x0132
     aa2:	0a 17       	cp	r16, r26
     aa4:	1b 07       	cpc	r17, r27
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <estimate_distance+0x118>
     aa8:	23 c2       	rjmp	.+1094   	; 0xef0 <estimate_distance+0x55e>
     aaa:	00 91 33 01 	lds	r16, 0x0133
     aae:	10 91 34 01 	lds	r17, 0x0134
     ab2:	0a 17       	cp	r16, r26
     ab4:	1b 07       	cpc	r17, r27
     ab6:	08 f4       	brcc	.+2      	; 0xaba <estimate_distance+0x128>
     ab8:	23 c2       	rjmp	.+1094   	; 0xf00 <estimate_distance+0x56e>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 ed       	ldi	r26, 0xD0	; 208
     ac0:	b0 e4       	ldi	r27, 0x40	; 64
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	ab 83       	std	Y+3, r26	; 0x03
     ac8:	bc 83       	std	Y+4, r27	; 0x04
     aca:	4c e0       	ldi	r20, 0x0C	; 12
     acc:	e4 2e       	mov	r14, r20
     ace:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     ad0:	f7 01       	movw	r30, r14
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	e7 5e       	subi	r30, 0xE7	; 231
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	b8 01       	movw	r22, r16
     ae0:	68 1b       	sub	r22, r24
     ae2:	79 0b       	sbc	r23, r25
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     af4:	6b 01       	movw	r12, r22
     af6:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     af8:	ad 81       	ldd	r26, Y+5	; 0x05
     afa:	be 81       	ldd	r27, Y+6	; 0x06
     afc:	bd 01       	movw	r22, r26
     afe:	bb 0f       	add	r27, r27
     b00:	88 0b       	sbc	r24, r24
     b02:	99 0b       	sbc	r25, r25
     b04:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__floatsisf>
     b08:	4b 01       	movw	r8, r22
     b0a:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b0c:	b8 01       	movw	r22, r16
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     b16:	2b 01       	movw	r4, r22
     b18:	3c 01       	movw	r6, r24
     b1a:	29 81       	ldd	r18, Y+1	; 0x01
     b1c:	3a 81       	ldd	r19, Y+2	; 0x02
     b1e:	4b 81       	ldd	r20, Y+3	; 0x03
     b20:	5c 81       	ldd	r21, Y+4	; 0x04
     b22:	c7 01       	movw	r24, r14
     b24:	b6 01       	movw	r22, r12
     b26:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     b2a:	9b 01       	movw	r18, r22
     b2c:	ac 01       	movw	r20, r24
     b2e:	c3 01       	movw	r24, r6
     b30:	b2 01       	movw	r22, r4
     b32:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     b36:	9b 01       	movw	r18, r22
     b38:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b3a:	c5 01       	movw	r24, r10
     b3c:	b4 01       	movw	r22, r8
     b3e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 e2       	ldi	r20, 0x20	; 32
     b48:	51 e4       	ldi	r21, 0x41	; 65
     b4a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
            b=((int)((int)b/(int)slope));
     b4e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     b52:	8b 01       	movw	r16, r22
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     b5c:	ab 01       	movw	r20, r22
     b5e:	bc 01       	movw	r22, r24
     b60:	c8 01       	movw	r24, r16
     b62:	ba 01       	movw	r22, r20
     b64:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divmodhi4>
            dist_high=b;
     b68:	16 2f       	mov	r17, r22
     b6a:	77 c0       	rjmp	.+238    	; 0xc5a <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b6c:	dc 01       	movw	r26, r24
     b6e:	cd 90       	ld	r12, X+
     b70:	dc 90       	ld	r13, X
     b72:	80 91 40 01 	lds	r24, 0x0140
     b76:	90 91 41 01 	lds	r25, 0x0141
     b7a:	8c 15       	cp	r24, r12
     b7c:	9d 05       	cpc	r25, r13
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <estimate_distance+0x1f0>
     b80:	8c c0       	rjmp	.+280    	; 0xc9a <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b82:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b84:	e0 90 42 01 	lds	r14, 0x0142
     b88:	f0 90 43 01 	lds	r15, 0x0143
     b8c:	ec 14       	cp	r14, r12
     b8e:	fd 04       	cpc	r15, r13
     b90:	08 f4       	brcc	.+2      	; 0xb94 <estimate_distance+0x202>
     b92:	5e c1       	rjmp	.+700    	; 0xe50 <estimate_distance+0x4be>
     b94:	e0 90 44 01 	lds	r14, 0x0144
     b98:	f0 90 45 01 	lds	r15, 0x0145
     b9c:	ec 14       	cp	r14, r12
     b9e:	fd 04       	cpc	r15, r13
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <estimate_distance+0x212>
     ba2:	5e c1       	rjmp	.+700    	; 0xe60 <estimate_distance+0x4ce>
     ba4:	e0 90 46 01 	lds	r14, 0x0146
     ba8:	f0 90 47 01 	lds	r15, 0x0147
     bac:	ec 14       	cp	r14, r12
     bae:	fd 04       	cpc	r15, r13
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <estimate_distance+0x222>
     bb2:	5e c1       	rjmp	.+700    	; 0xe70 <estimate_distance+0x4de>
     bb4:	e0 90 48 01 	lds	r14, 0x0148
     bb8:	f0 90 49 01 	lds	r15, 0x0149
     bbc:	ec 14       	cp	r14, r12
     bbe:	fd 04       	cpc	r15, r13
     bc0:	08 f4       	brcc	.+2      	; 0xbc4 <estimate_distance+0x232>
     bc2:	5e c1       	rjmp	.+700    	; 0xe80 <estimate_distance+0x4ee>
     bc4:	e0 90 4a 01 	lds	r14, 0x014A
     bc8:	f0 90 4b 01 	lds	r15, 0x014B
     bcc:	ec 14       	cp	r14, r12
     bce:	fd 04       	cpc	r15, r13
     bd0:	08 f4       	brcc	.+2      	; 0xbd4 <estimate_distance+0x242>
     bd2:	c3 c0       	rjmp	.+390    	; 0xd5a <estimate_distance+0x3c8>
     bd4:	e0 90 4c 01 	lds	r14, 0x014C
     bd8:	f0 90 4d 01 	lds	r15, 0x014D
     bdc:	ec 14       	cp	r14, r12
     bde:	fd 04       	cpc	r15, r13
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <estimate_distance+0x252>
     be2:	56 c1       	rjmp	.+684    	; 0xe90 <estimate_distance+0x4fe>
     be4:	e0 90 4e 01 	lds	r14, 0x014E
     be8:	f0 90 4f 01 	lds	r15, 0x014F
     bec:	ec 14       	cp	r14, r12
     bee:	fd 04       	cpc	r15, r13
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <estimate_distance+0x262>
     bf2:	56 c1       	rjmp	.+684    	; 0xea0 <estimate_distance+0x50e>
     bf4:	e0 90 50 01 	lds	r14, 0x0150
     bf8:	f0 90 51 01 	lds	r15, 0x0151
     bfc:	ec 14       	cp	r14, r12
     bfe:	fd 04       	cpc	r15, r13
     c00:	08 f4       	brcc	.+2      	; 0xc04 <estimate_distance+0x272>
     c02:	56 c1       	rjmp	.+684    	; 0xeb0 <estimate_distance+0x51e>
     c04:	e0 90 52 01 	lds	r14, 0x0152
     c08:	f0 90 53 01 	lds	r15, 0x0153
     c0c:	ec 14       	cp	r14, r12
     c0e:	fd 04       	cpc	r15, r13
     c10:	08 f4       	brcc	.+2      	; 0xc14 <estimate_distance+0x282>
     c12:	56 c1       	rjmp	.+684    	; 0xec0 <estimate_distance+0x52e>
     c14:	e0 90 54 01 	lds	r14, 0x0154
     c18:	f0 90 55 01 	lds	r15, 0x0155
     c1c:	ec 14       	cp	r14, r12
     c1e:	fd 04       	cpc	r15, r13
     c20:	08 f4       	brcc	.+2      	; 0xc24 <estimate_distance+0x292>
     c22:	56 c1       	rjmp	.+684    	; 0xed0 <estimate_distance+0x53e>
     c24:	e0 90 56 01 	lds	r14, 0x0156
     c28:	f0 90 57 01 	lds	r15, 0x0157
     c2c:	ec 14       	cp	r14, r12
     c2e:	fd 04       	cpc	r15, r13
     c30:	08 f4       	brcc	.+2      	; 0xc34 <estimate_distance+0x2a2>
     c32:	5a c1       	rjmp	.+692    	; 0xee8 <estimate_distance+0x556>
     c34:	e0 90 58 01 	lds	r14, 0x0158
     c38:	f0 90 59 01 	lds	r15, 0x0159
     c3c:	ec 14       	cp	r14, r12
     c3e:	fd 04       	cpc	r15, r13
     c40:	08 f4       	brcc	.+2      	; 0xc44 <estimate_distance+0x2b2>
     c42:	5a c1       	rjmp	.+692    	; 0xef8 <estimate_distance+0x566>
     c44:	e0 90 5a 01 	lds	r14, 0x015A
     c48:	f0 90 5b 01 	lds	r15, 0x015B
     c4c:	ec 14       	cp	r14, r12
     c4e:	fd 04       	cpc	r15, r13
     c50:	08 f4       	brcc	.+2      	; 0xc54 <estimate_distance+0x2c2>
     c52:	5a c1       	rjmp	.+692    	; 0xf08 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     c54:	0a e5       	ldi	r16, 0x5A	; 90
     c56:	31 c0       	rjmp	.+98     	; 0xcba <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     c58:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     c5a:	ed 81       	ldd	r30, Y+5	; 0x05
     c5c:	fe 81       	ldd	r31, Y+6	; 0x06
     c5e:	ed 3b       	cpi	r30, 0xBD	; 189
     c60:	f2 40       	sbci	r31, 0x02	; 2
     c62:	fc f4       	brge	.+62     	; 0xca2 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c64:	81 e2       	ldi	r24, 0x21	; 33
     c66:	81 0f       	add	r24, r17
    }
}
     c68:	26 96       	adiw	r28, 0x06	; 6
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	3f 90       	pop	r3
     c96:	2f 90       	pop	r2
     c98:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c9a:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     c9c:	81 e2       	ldi	r24, 0x21	; 33
     c9e:	80 0f       	add	r24, r16
     ca0:	e3 cf       	rjmp	.-58     	; 0xc68 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ca2:	d1 01       	movw	r26, r2
     ca4:	cd 90       	ld	r12, X+
     ca6:	dc 90       	ld	r13, X
     ca8:	80 91 40 01 	lds	r24, 0x0140
     cac:	90 91 41 01 	lds	r25, 0x0141
     cb0:	8c 15       	cp	r24, r12
     cb2:	9d 05       	cpc	r25, r13
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <estimate_distance+0x326>
     cb6:	66 cf       	rjmp	.-308    	; 0xb84 <estimate_distance+0x1f2>
            dist_low=0;
     cb8:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     cba:	1f 3f       	cpi	r17, 0xFF	; 255
     cbc:	79 f3       	breq	.-34     	; 0xc9c <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     cbe:	ed 81       	ldd	r30, Y+5	; 0x05
     cc0:	fe 81       	ldd	r31, Y+6	; 0x06
     cc2:	bf 01       	movw	r22, r30
     cc4:	ff 0f       	add	r31, r31
     cc6:	88 0b       	sbc	r24, r24
     cc8:	99 0b       	sbc	r25, r25
     cca:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__floatsisf>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	61 2f       	mov	r22, r17
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     cde:	4b 01       	movw	r8, r22
     ce0:	5c 01       	movw	r10, r24
     ce2:	a7 01       	movw	r20, r14
     ce4:	96 01       	movw	r18, r12
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	81 e6       	ldi	r24, 0x61	; 97
     cec:	94 e4       	ldi	r25, 0x44	; 68
     cee:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     cf2:	9b 01       	movw	r18, r22
     cf4:	ac 01       	movw	r20, r24
     cf6:	c5 01       	movw	r24, r10
     cf8:	b4 01       	movw	r22, r8
     cfa:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     cfe:	4b 01       	movw	r8, r22
     d00:	5c 01       	movw	r10, r24
     d02:	60 2f       	mov	r22, r16
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     d0e:	2b 01       	movw	r4, r22
     d10:	3c 01       	movw	r6, r24
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	4f e2       	ldi	r20, 0x2F	; 47
     d18:	54 e4       	ldi	r21, 0x44	; 68
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	c3 01       	movw	r24, r6
     d28:	b2 01       	movw	r22, r4
     d2a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	c5 01       	movw	r24, r10
     d34:	b4 01       	movw	r22, r8
     d36:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	48 e4       	ldi	r20, 0x48	; 72
     d40:	53 e4       	ldi	r21, 0x43	; 67
     d42:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__divsf3>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	44 e0       	ldi	r20, 0x04	; 4
     d4c:	52 e4       	ldi	r21, 0x42	; 66
     d4e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     d52:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
     d56:	86 2f       	mov	r24, r22
     d58:	87 cf       	rjmp	.-242    	; 0xc68 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d5a:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     d5c:	85 e0       	ldi	r24, 0x05	; 5
     d5e:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	fc 01       	movw	r30, r24
     d66:	e2 5c       	subi	r30, 0xC2	; 194
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	b7 01       	movw	r22, r14
     d70:	68 1b       	sub	r22, r24
     d72:	79 0b       	sbc	r23, r25
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     d84:	4b 01       	movw	r8, r22
     d86:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d88:	b6 01       	movw	r22, r12
     d8a:	dd 0c       	add	r13, r13
     d8c:	88 0b       	sbc	r24, r24
     d8e:	99 0b       	sbc	r25, r25
     d90:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__floatsisf>
     d94:	2b 01       	movw	r4, r22
     d96:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     d98:	b7 01       	movw	r22, r14
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     da2:	6b 01       	movw	r12, r22
     da4:	7c 01       	movw	r14, r24
     da6:	60 2f       	mov	r22, r16
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	a9 01       	movw	r20, r18
     dc4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     dc8:	a5 01       	movw	r20, r10
     dca:	94 01       	movw	r18, r8
     dcc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	c7 01       	movw	r24, r14
     dd6:	b6 01       	movw	r22, r12
     dd8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     de0:	c3 01       	movw	r24, r6
     de2:	b2 01       	movw	r22, r4
     de4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e2       	ldi	r20, 0x20	; 32
     dee:	51 e4       	ldi	r21, 0x41	; 65
     df0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
                b=((int)((int)b/(int)slope));
     df4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     df8:	7b 01       	movw	r14, r22
     dfa:	c5 01       	movw	r24, r10
     dfc:	b4 01       	movw	r22, r8
     dfe:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     e02:	ab 01       	movw	r20, r22
     e04:	bc 01       	movw	r22, r24
     e06:	c7 01       	movw	r24, r14
     e08:	ba 01       	movw	r22, r20
     e0a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divmodhi4>
                dist_low=b;
     e0e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e10:	6f 3f       	cpi	r22, 0xFF	; 255
     e12:	09 f0       	breq	.+2      	; 0xe16 <estimate_distance+0x484>
     e14:	52 cf       	rjmp	.-348    	; 0xcba <estimate_distance+0x328>
     e16:	26 cf       	rjmp	.-436    	; 0xc64 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e18:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e1a:	85 e0       	ldi	r24, 0x05	; 5
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	7c 01       	movw	r14, r24
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	ef 1a       	sub	r14, r31
     e24:	f1 08       	sbc	r15, r1
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	5f e3       	ldi	r21, 0x3F	; 63
     e38:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	a9 01       	movw	r20, r18
     e42:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     e46:	69 83       	std	Y+1, r22	; 0x01
     e48:	7a 83       	std	Y+2, r23	; 0x02
     e4a:	8b 83       	std	Y+3, r24	; 0x03
     e4c:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     e4e:	40 ce       	rjmp	.-896    	; 0xad0 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e50:	01 e0       	ldi	r16, 0x01	; 1
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	84 cf       	rjmp	.-248    	; 0xd60 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	df cf       	rjmp	.-66     	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e60:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	7c cf       	rjmp	.-264    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e68:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	d7 cf       	rjmp	.-82     	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e70:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	74 cf       	rjmp	.-280    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e78:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	cf cf       	rjmp	.-98     	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e80:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     e82:	84 e0       	ldi	r24, 0x04	; 4
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	6c cf       	rjmp	.-296    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e88:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	c7 cf       	rjmp	.-114    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e90:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     e92:	86 e0       	ldi	r24, 0x06	; 6
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	64 cf       	rjmp	.-312    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e98:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	bf cf       	rjmp	.-130    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ea0:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ea2:	87 e0       	ldi	r24, 0x07	; 7
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	5c cf       	rjmp	.-328    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ea8:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	b7 cf       	rjmp	.-146    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eb0:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	54 cf       	rjmp	.-344    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eb8:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     eba:	88 e0       	ldi	r24, 0x08	; 8
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	af cf       	rjmp	.-162    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ec0:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     ec2:	89 e0       	ldi	r24, 0x09	; 9
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	4c cf       	rjmp	.-360    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ec8:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     eca:	89 e0       	ldi	r24, 0x09	; 9
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a7 cf       	rjmp	.-178    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ed0:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     ed2:	8a e0       	ldi	r24, 0x0A	; 10
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	44 cf       	rjmp	.-376    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     eda:	8a e0       	ldi	r24, 0x0A	; 10
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	9f cf       	rjmp	.-194    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ee0:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     ee2:	8b e0       	ldi	r24, 0x0B	; 11
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9b cf       	rjmp	.-202    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ee8:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     eea:	8b e0       	ldi	r24, 0x0B	; 11
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	38 cf       	rjmp	.-400    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ef0:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     ef2:	8c e0       	ldi	r24, 0x0C	; 12
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	93 cf       	rjmp	.-218    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef8:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     efa:	8c e0       	ldi	r24, 0x0C	; 12
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	30 cf       	rjmp	.-416    	; 0xd60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f00:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f02:	8d e0       	ldi	r24, 0x0D	; 13
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	8b cf       	rjmp	.-234    	; 0xe1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f08:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f0a:	8d e0       	ldi	r24, 0x0D	; 13
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	28 cf       	rjmp	.-432    	; 0xd60 <estimate_distance+0x3ce>

00000f10 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
    tx_clock += tx_increment;
     f32:	20 91 5f 01 	lds	r18, 0x015F
     f36:	30 91 60 01 	lds	r19, 0x0160
     f3a:	80 91 5d 01 	lds	r24, 0x015D
     f3e:	90 91 5e 01 	lds	r25, 0x015E
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	90 93 60 01 	sts	0x0160, r25
     f4a:	80 93 5f 01 	sts	0x015F, r24
    tx_increment = 0xFF;
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	90 93 5e 01 	sts	0x015E, r25
     f56:	80 93 5d 01 	sts	0x015D, r24
    OCR0A = tx_increment;
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f5e:	80 91 3b 01 	lds	r24, 0x013B
     f62:	90 91 3c 01 	lds	r25, 0x013C
     f66:	a0 91 3d 01 	lds	r26, 0x013D
     f6a:	b0 91 3e 01 	lds	r27, 0x013E
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	a1 1d       	adc	r26, r1
     f72:	b1 1d       	adc	r27, r1
     f74:	80 93 3b 01 	sts	0x013B, r24
     f78:	90 93 3c 01 	sts	0x013C, r25
     f7c:	a0 93 3d 01 	sts	0x013D, r26
     f80:	b0 93 3e 01 	sts	0x013E, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f84:	80 91 3f 01 	lds	r24, 0x013F
     f88:	81 11       	cpse	r24, r1
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <__vector_14+0x9a>
     f8c:	80 91 6e 01 	lds	r24, 0x016E
     f90:	90 91 6f 01 	lds	r25, 0x016F
     f94:	20 91 5f 01 	lds	r18, 0x015F
     f98:	30 91 60 01 	lds	r19, 0x0160
     f9c:	82 17       	cp	r24, r18
     f9e:	93 07       	cpc	r25, r19
     fa0:	20 f4       	brcc	.+8      	; 0xfaa <__vector_14+0x9a>
     fa2:	80 91 13 01 	lds	r24, 0x0113
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	89 f0       	breq	.+34     	; 0xfcc <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     fcc:	e0 91 03 01 	lds	r30, 0x0103
     fd0:	f0 91 04 01 	lds	r31, 0x0104
     fd4:	09 95       	icall
        if (msg) {
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	41 f3       	breq	.-48     	; 0xfaa <__vector_14+0x9a>
            if (message_send(msg)) {
     fda:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <message_send>
     fde:	81 11       	cpse	r24, r1
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     fe2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <rand>
     fe6:	99 27       	eor	r25, r25
     fe8:	90 93 5e 01 	sts	0x015E, r25
     fec:	80 93 5d 01 	sts	0x015D, r24
                OCR0A = tx_increment;
     ff0:	87 bd       	out	0x27, r24	; 39
     ff2:	db cf       	rjmp	.-74     	; 0xfaa <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ff4:	e0 91 01 01 	lds	r30, 0x0101
     ff8:	f0 91 02 01 	lds	r31, 0x0102
     ffc:	09 95       	icall
                tx_clock = 0;
     ffe:	10 92 60 01 	sts	0x0160, r1
    1002:	10 92 5f 01 	sts	0x015F, r1
    1006:	d1 cf       	rjmp	.-94     	; 0xfaa <__vector_14+0x9a>

00001008 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1008:	80 ff       	sbrs	r24, 0
    100a:	11 c0       	rjmp	.+34     	; 0x102e <set_color+0x26>
        DDRD |= (1<<5);
    100c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    100e:	81 ff       	sbrs	r24, 1
    1010:	11 c0       	rjmp	.+34     	; 0x1034 <set_color+0x2c>
        DDRD |= (1<<4);
    1012:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1014:	82 ff       	sbrs	r24, 2
    1016:	11 c0       	rjmp	.+34     	; 0x103a <set_color+0x32>
        DDRC |= (1<<3);
    1018:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    101a:	83 ff       	sbrs	r24, 3
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <set_color+0x38>
        DDRC |= (1<<2);
    101e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1020:	84 ff       	sbrs	r24, 4
    1022:	11 c0       	rjmp	.+34     	; 0x1046 <set_color+0x3e>
        DDRC |= (1<<5);
    1024:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1026:	85 fd       	sbrc	r24, 5
    1028:	11 c0       	rjmp	.+34     	; 0x104c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    102a:	3c 98       	cbi	0x07, 4	; 7
    102c:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    102e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1030:	81 fd       	sbrc	r24, 1
    1032:	ef cf       	rjmp	.-34     	; 0x1012 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1034:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1036:	82 fd       	sbrc	r24, 2
    1038:	ef cf       	rjmp	.-34     	; 0x1018 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    103a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    103c:	83 fd       	sbrc	r24, 3
    103e:	ef cf       	rjmp	.-34     	; 0x101e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1040:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1042:	84 fd       	sbrc	r24, 4
    1044:	ef cf       	rjmp	.-34     	; 0x1024 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1046:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1048:	85 ff       	sbrs	r24, 5
    104a:	ef cf       	rjmp	.-34     	; 0x102a <set_color+0x22>
        DDRC |= (1<<4);
    104c:	3c 9a       	sbi	0x07, 4	; 7
    104e:	08 95       	ret

00001050 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    rx_timer_off();
    105e:	10 92 81 00 	sts	0x0081, r1
    1062:	10 92 85 00 	sts	0x0085, r1
    1066:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 18 01 	sts	0x0118, r24
    rx_leadingbyte = 1;
    1070:	80 93 5c 01 	sts	0x015C, r24
    rx_busy = 0;
    1074:	10 92 3f 01 	sts	0x013F, r1
    adc_trigger_high_gain();
    1078:	10 92 7c 00 	sts	0x007C, r1
    107c:	93 ea       	ldi	r25, 0xA3	; 163
    107e:	90 93 7a 00 	sts	0x007A, r25
    1082:	80 93 7b 00 	sts	0x007B, r24
}
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    10ba:	20 91 84 00 	lds	r18, 0x0084
    10be:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	40 93 3f 01 	sts	0x013F, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    10c8:	80 91 18 01 	lds	r24, 0x0118
    10cc:	88 23       	and	r24, r24
    10ce:	a9 f1       	breq	.+106    	; 0x113a <__vector_23+0xa6>
        rx_timer_on();
    10d0:	10 92 85 00 	sts	0x0085, r1
    10d4:	10 92 84 00 	sts	0x0084, r1
    10d8:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    10dc:	10 92 70 01 	sts	0x0170, r1
        rx_leadingbit = 0;
    10e0:	10 92 18 01 	sts	0x0118, r1
        if (rx_leadingbyte) {
    10e4:	80 91 5c 01 	lds	r24, 0x015C
    10e8:	88 23       	and	r24, r24
    10ea:	a1 f0       	breq	.+40     	; 0x1114 <__vector_23+0x80>
            adc_finish_conversion();
    10ec:	80 91 7a 00 	lds	r24, 0x007A
    10f0:	86 fd       	sbrc	r24, 6
    10f2:	fc cf       	rjmp	.-8      	; 0x10ec <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    10f4:	80 91 78 00 	lds	r24, 0x0078
    10f8:	90 91 79 00 	lds	r25, 0x0079
    10fc:	90 93 3a 01 	sts	0x013A, r25
    1100:	80 93 39 01 	sts	0x0139, r24
            adc_trigger_low_gain();
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 7c 00 	sts	0x007C, r24
    110a:	93 ea       	ldi	r25, 0xA3	; 163
    110c:	90 93 7a 00 	sts	0x007A, r25
    1110:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1114:	ff 91       	pop	r31
    1116:	ef 91       	pop	r30
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    113a:	c9 01       	movw	r24, r18
    113c:	87 58       	subi	r24, 0x87	; 135
    113e:	91 09       	sbc	r25, r1
    1140:	84 37       	cpi	r24, 0x74	; 116
    1142:	99 40       	sbci	r25, 0x09	; 9
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__vector_23+0xb4>
    1146:	52 c0       	rjmp	.+164    	; 0x11ec <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1148:	26 58       	subi	r18, 0x86	; 134
    114a:	31 09       	sbc	r19, r1
    114c:	a4 ef       	ldi	r26, 0xF4	; 244
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	0e 94 18 0b 	call	0x1630	; 0x1630 <__umulhisi3>
    1154:	aa 27       	eor	r26, r26
    1156:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	91 05       	cpc	r25, r1
    115c:	a1 05       	cpc	r26, r1
    115e:	b1 05       	cpc	r27, r1
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__vector_23+0xd0>
    1162:	7b c0       	rjmp	.+246    	; 0x125a <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1164:	40 93 18 01 	sts	0x0118, r20
                if (rx_leadingbyte) {
    1168:	80 91 5c 01 	lds	r24, 0x015C
    116c:	81 11       	cpse	r24, r1
    116e:	52 c0       	rjmp	.+164    	; 0x1214 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1170:	80 91 36 01 	lds	r24, 0x0136
    1174:	e8 2f       	mov	r30, r24
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	ee 59       	subi	r30, 0x9E	; 158
    117a:	fe 4f       	sbci	r31, 0xFE	; 254
    117c:	90 91 70 01 	lds	r25, 0x0170
    1180:	90 83       	st	Z, r25
                    rx_byteindex++;
    1182:	8f 5f       	subi	r24, 0xFF	; 255
    1184:	80 93 36 01 	sts	0x0136, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1188:	8c 30       	cpi	r24, 0x0C	; 12
    118a:	21 f6       	brne	.-120    	; 0x1114 <__vector_23+0x80>
                        rx_timer_off();
    118c:	10 92 81 00 	sts	0x0081, r1
    1190:	10 92 85 00 	sts	0x0085, r1
    1194:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1198:	40 93 5c 01 	sts	0x015C, r20
                        rx_busy = 0;
    119c:	10 92 3f 01 	sts	0x013F, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    11a0:	c0 91 6c 01 	lds	r28, 0x016C
    11a4:	d0 91 6d 01 	lds	r29, 0x016D
    11a8:	82 e6       	ldi	r24, 0x62	; 98
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <message_crc>
    11b0:	c8 17       	cp	r28, r24
    11b2:	d9 07       	cpc	r29, r25
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <__vector_23+0x124>
    11b6:	ae cf       	rjmp	.-164    	; 0x1114 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    11b8:	80 91 6b 01 	lds	r24, 0x016B
    11bc:	87 ff       	sbrs	r24, 7
    11be:	61 c0       	rjmp	.+194    	; 0x1282 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    11c0:	98 e7       	ldi	r25, 0x78	; 120
    11c2:	98 0f       	add	r25, r24
    11c4:	93 30       	cpi	r25, 0x03	; 3
    11c6:	30 f0       	brcs	.+12     	; 0x11d4 <__vector_23+0x140>
        motors_off();
    11c8:	53 98       	cbi	0x0a, 3	; 10
    11ca:	23 98       	cbi	0x04, 3	; 4
    11cc:	10 92 b4 00 	sts	0x00B4, r1
    11d0:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	e0 58       	subi	r30, 0x80	; 128
    11da:	f1 09       	sbc	r31, r1
    11dc:	eb 30       	cpi	r30, 0x0B	; 11
    11de:	f1 05       	cpc	r31, r1
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <__vector_23+0x150>
    11e2:	98 cf       	rjmp	.-208    	; 0x1114 <__vector_23+0x80>
    11e4:	e5 5c       	subi	r30, 0xC5	; 197
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    11ec:	10 92 81 00 	sts	0x0081, r1
    11f0:	10 92 85 00 	sts	0x0085, r1
    11f4:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    11f8:	40 93 18 01 	sts	0x0118, r20
            rx_leadingbyte = 1;
    11fc:	40 93 5c 01 	sts	0x015C, r20
            rx_busy = 0;
    1200:	10 92 3f 01 	sts	0x013F, r1
            adc_trigger_high_gain();
    1204:	10 92 7c 00 	sts	0x007C, r1
    1208:	83 ea       	ldi	r24, 0xA3	; 163
    120a:	80 93 7a 00 	sts	0x007A, r24
    120e:	40 93 7b 00 	sts	0x007B, r20
    1212:	80 cf       	rjmp	.-256    	; 0x1114 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1214:	80 91 7a 00 	lds	r24, 0x007A
    1218:	86 fd       	sbrc	r24, 6
    121a:	fc cf       	rjmp	.-8      	; 0x1214 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    121c:	80 91 78 00 	lds	r24, 0x0078
    1220:	90 91 79 00 	lds	r25, 0x0079
    1224:	90 93 38 01 	sts	0x0138, r25
    1228:	80 93 37 01 	sts	0x0137, r24
                    adc_trigger_high_gain();
    122c:	10 92 7c 00 	sts	0x007C, r1
    1230:	83 ea       	ldi	r24, 0xA3	; 163
    1232:	80 93 7a 00 	sts	0x007A, r24
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    123c:	90 91 70 01 	lds	r25, 0x0170
    1240:	99 23       	and	r25, r25
    1242:	d1 f0       	breq	.+52     	; 0x1278 <__vector_23+0x1e4>
                        rx_timer_off();
    1244:	10 92 81 00 	sts	0x0081, r1
    1248:	10 92 85 00 	sts	0x0085, r1
    124c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1250:	80 93 5c 01 	sts	0x015C, r24
                        rx_busy = 0;
    1254:	10 92 3f 01 	sts	0x013F, r1
    1258:	5d cf       	rjmp	.-326    	; 0x1114 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    125a:	21 e0       	ldi	r18, 0x01	; 1
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	f9 01       	movw	r30, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <__vector_23+0x1d2>
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	8a 95       	dec	r24
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <__vector_23+0x1ce>
    126a:	cf 01       	movw	r24, r30
    126c:	90 91 70 01 	lds	r25, 0x0170
    1270:	89 2b       	or	r24, r25
    1272:	80 93 70 01 	sts	0x0170, r24
    1276:	4e cf       	rjmp	.-356    	; 0x1114 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1278:	10 92 5c 01 	sts	0x015C, r1
                        rx_byteindex = 0;
    127c:	10 92 36 01 	sts	0x0136, r1
    1280:	49 cf       	rjmp	.-366    	; 0x1114 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1282:	e0 91 05 01 	lds	r30, 0x0105
    1286:	f0 91 06 01 	lds	r31, 0x0106
    128a:	67 e3       	ldi	r22, 0x37	; 55
    128c:	71 e0       	ldi	r23, 0x01	; 1
    128e:	82 e6       	ldi	r24, 0x62	; 98
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	09 95       	icall
    1294:	3f cf       	rjmp	.-386    	; 0x1114 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1296:	80 91 62 01 	lds	r24, 0x0162
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	09 f4       	brne	.+2      	; 0x12a0 <__vector_23+0x20c>
    129e:	dd c0       	rjmp	.+442    	; 0x145a <__vector_23+0x3c6>
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <__vector_23+0x210>
    12a2:	ba c0       	rjmp	.+372    	; 0x1418 <__vector_23+0x384>
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	09 f4       	brne	.+2      	; 0x12aa <__vector_23+0x216>
    12a8:	c6 c0       	rjmp	.+396    	; 0x1436 <__vector_23+0x3a2>
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <__vector_23+0x21c>
    12ae:	b1 c0       	rjmp	.+354    	; 0x1412 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12b0:	80 91 11 01 	lds	r24, 0x0111
    12b4:	90 91 68 01 	lds	r25, 0x0168
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	09 f4       	brne	.+2      	; 0x12be <__vector_23+0x22a>
    12bc:	e3 c0       	rjmp	.+454    	; 0x1484 <__vector_23+0x3f0>
    12be:	80 91 67 01 	lds	r24, 0x0167
                        prev_motion = MOVE_STOP;
    12c2:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_STRAIGHT;
    12c6:	23 e0       	ldi	r18, 0x03	; 3
    12c8:	20 93 11 01 	sts	0x0111, r18
                        kilo_straight_left = calibmsg->straight_left;
    12cc:	80 93 73 01 	sts	0x0173, r24
                        kilo_straight_right = calibmsg->straight_right;
    12d0:	90 93 74 01 	sts	0x0174, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12d4:	80 91 13 01 	lds	r24, 0x0113
    12d8:	86 30       	cpi	r24, 0x06	; 6
    12da:	09 f4       	brne	.+2      	; 0x12de <__vector_23+0x24a>
    12dc:	1b cf       	rjmp	.-458    	; 0x1114 <__vector_23+0x80>
                motors_on();
    12de:	53 9a       	sbi	0x0a, 3	; 10
    12e0:	23 9a       	sbi	0x04, 3	; 4
    12e2:	10 92 b4 00 	sts	0x00B4, r1
    12e6:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	80 93 13 01 	sts	0x0113, r24
    12f0:	11 cf       	rjmp	.-478    	; 0x1114 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    12f2:	80 91 13 01 	lds	r24, 0x0113
    12f6:	86 30       	cpi	r24, 0x06	; 6
    12f8:	99 f0       	breq	.+38     	; 0x1320 <__vector_23+0x28c>
                motors_on();
    12fa:	53 9a       	sbi	0x0a, 3	; 10
    12fc:	23 9a       	sbi	0x04, 3	; 4
    12fe:	10 92 b4 00 	sts	0x00B4, r1
    1302:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1306:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1308:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    130a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    130c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    130e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1310:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1312:	10 92 11 01 	sts	0x0111, r1
    1316:	10 92 12 01 	sts	0x0112, r1
                kilo_state = MOVING;
    131a:	86 e0       	ldi	r24, 0x06	; 6
    131c:	80 93 13 01 	sts	0x0113, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9c 01       	movw	r18, r24
    1326:	00 90 62 01 	lds	r0, 0x0162
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <__vector_23+0x29c>
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <__vector_23+0x298>
    1334:	80 91 71 01 	lds	r24, 0x0171
    1338:	90 91 72 01 	lds	r25, 0x0172
    133c:	82 23       	and	r24, r18
    133e:	93 23       	and	r25, r19
    1340:	89 2b       	or	r24, r25
    1342:	09 f0       	breq	.+2      	; 0x1346 <__vector_23+0x2b2>
    1344:	86 c0       	rjmp	.+268    	; 0x1452 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1346:	10 92 11 01 	sts	0x0111, r1
    134a:	e4 ce       	rjmp	.-568    	; 0x1114 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 13 01 	sts	0x0113, r24
    1352:	e0 ce       	rjmp	.-576    	; 0x1114 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1354:	e0 e0       	ldi	r30, 0x00	; 0
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    135a:	80 91 6e 00 	lds	r24, 0x006E
    135e:	8d 7f       	andi	r24, 0xFD	; 253
    1360:	80 93 6e 00 	sts	0x006E, r24
    1364:	16 bc       	out	0x26, r1	; 38
            bootload();
    1366:	e0 e0       	ldi	r30, 0x00	; 0
    1368:	f0 e7       	ldi	r31, 0x70	; 112
    136a:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    136c:	10 92 13 01 	sts	0x0113, r1
    1370:	d1 ce       	rjmp	.-606    	; 0x1114 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	80 93 13 01 	sts	0x0113, r24
    1378:	cd ce       	rjmp	.-614    	; 0x1114 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    137a:	85 e0       	ldi	r24, 0x05	; 5
    137c:	80 93 13 01 	sts	0x0113, r24
    1380:	c9 ce       	rjmp	.-622    	; 0x1114 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1382:	80 91 13 01 	lds	r24, 0x0113
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	09 f4       	brne	.+2      	; 0x138c <__vector_23+0x2f8>
    138a:	c4 ce       	rjmp	.-632    	; 0x1114 <__vector_23+0x80>
    138c:	80 91 13 01 	lds	r24, 0x0113
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	09 f4       	brne	.+2      	; 0x1396 <__vector_23+0x302>
    1394:	bf ce       	rjmp	.-642    	; 0x1114 <__vector_23+0x80>
                motors_on();
    1396:	53 9a       	sbi	0x0a, 3	; 10
    1398:	23 9a       	sbi	0x04, 3	; 4
    139a:	10 92 b4 00 	sts	0x00B4, r1
    139e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	80 93 13 01 	sts	0x0113, r24
    13a8:	b5 ce       	rjmp	.-662    	; 0x1114 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    13aa:	80 91 13 01 	lds	r24, 0x0113
    13ae:	86 30       	cpi	r24, 0x06	; 6
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <__vector_23+0x320>
    13b2:	b0 ce       	rjmp	.-672    	; 0x1114 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    13b4:	60 91 71 01 	lds	r22, 0x0171
    13b8:	80 eb       	ldi	r24, 0xB0	; 176
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    13c0:	60 91 72 01 	lds	r22, 0x0172
    13c4:	81 eb       	ldi	r24, 0xB1	; 177
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    13cc:	60 91 75 01 	lds	r22, 0x0175
    13d0:	85 e0       	ldi	r24, 0x05	; 5
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    13d8:	60 91 61 01 	lds	r22, 0x0161
    13dc:	89 e0       	ldi	r24, 0x09	; 9
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    13e4:	60 91 73 01 	lds	r22, 0x0173
    13e8:	8c e0       	ldi	r24, 0x0C	; 12
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    13f0:	60 91 74 01 	lds	r22, 0x0174
    13f4:	84 e1       	ldi	r24, 0x14	; 20
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        motors_off();
    13fc:	53 98       	cbi	0x0a, 3	; 10
    13fe:	23 98       	cbi	0x04, 3	; 4
    1400:	10 92 b4 00 	sts	0x00B4, r1
    1404:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 13 01 	sts	0x0113, r24
    140e:	80 91 62 01 	lds	r24, 0x0162
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1412:	81 11       	cpse	r24, r1
    1414:	5f cf       	rjmp	.-322    	; 0x12d4 <__vector_23+0x240>
    1416:	7e ce       	rjmp	.-772    	; 0x1114 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1418:	88 23       	and	r24, r24
    141a:	39 f2       	breq	.-114    	; 0x13aa <__vector_23+0x316>
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	c9 f7       	brne	.-14     	; 0x1412 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1420:	80 91 63 01 	lds	r24, 0x0163
    1424:	90 91 64 01 	lds	r25, 0x0164
    1428:	90 93 72 01 	sts	0x0172, r25
    142c:	80 93 71 01 	sts	0x0171, r24
                    cur_motion = MOVE_STOP;
    1430:	10 92 11 01 	sts	0x0111, r1
    1434:	4f cf       	rjmp	.-354    	; 0x12d4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1436:	80 91 11 01 	lds	r24, 0x0111
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	71 f1       	breq	.+92     	; 0x149a <__vector_23+0x406>
    143e:	80 91 66 01 	lds	r24, 0x0166
                        prev_motion = MOVE_STOP;
    1442:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_RIGHT;
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_right = calibmsg->turn_right;
    144c:	80 93 61 01 	sts	0x0161, r24
    1450:	41 cf       	rjmp	.-382    	; 0x12d4 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 11 01 	sts	0x0111, r24
    1458:	5d ce       	rjmp	.-838    	; 0x1114 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    145a:	80 91 11 01 	lds	r24, 0x0111
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	51 f0       	breq	.+20     	; 0x1476 <__vector_23+0x3e2>
    1462:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    1466:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_LEFT;
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_left = calibmsg->turn_left;
    1470:	80 93 75 01 	sts	0x0175, r24
    1474:	2f cf       	rjmp	.-418    	; 0x12d4 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1476:	80 91 65 01 	lds	r24, 0x0165
    147a:	90 91 75 01 	lds	r25, 0x0175
    147e:	89 13       	cpse	r24, r25
    1480:	f2 cf       	rjmp	.-28     	; 0x1466 <__vector_23+0x3d2>
    1482:	28 cf       	rjmp	.-432    	; 0x12d4 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1484:	80 91 74 01 	lds	r24, 0x0174
    1488:	98 13       	cpse	r25, r24
    148a:	19 cf       	rjmp	.-462    	; 0x12be <__vector_23+0x22a>
    148c:	80 91 67 01 	lds	r24, 0x0167
    1490:	20 91 73 01 	lds	r18, 0x0173
    1494:	82 13       	cpse	r24, r18
    1496:	15 cf       	rjmp	.-470    	; 0x12c2 <__vector_23+0x22e>
    1498:	1d cf       	rjmp	.-454    	; 0x12d4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    149a:	80 91 66 01 	lds	r24, 0x0166
    149e:	90 91 61 01 	lds	r25, 0x0161
    14a2:	89 13       	cpse	r24, r25
    14a4:	ce cf       	rjmp	.-100    	; 0x1442 <__vector_23+0x3ae>
    14a6:	16 cf       	rjmp	.-468    	; 0x12d4 <__vector_23+0x240>

000014a8 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    14a8:	fc 01       	movw	r30, r24
    14aa:	ac 01       	movw	r20, r24
    14ac:	46 5f       	subi	r20, 0xF6	; 246
    14ae:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    14b4:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    14b6:	82 27       	eor	r24, r18
    14b8:	08 2e       	mov	r0, r24
    14ba:	82 95       	swap	r24
    14bc:	80 7f       	andi	r24, 0xF0	; 240
    14be:	80 25       	eor	r24, r0
    14c0:	09 2e       	mov	r0, r25
    14c2:	98 2f       	mov	r25, r24
    14c4:	82 95       	swap	r24
    14c6:	8f 70       	andi	r24, 0x0F	; 15
    14c8:	08 26       	eor	r0, r24
    14ca:	86 95       	lsr	r24
    14cc:	98 27       	eor	r25, r24
    14ce:	89 27       	eor	r24, r25
    14d0:	88 0f       	add	r24, r24
    14d2:	88 0f       	add	r24, r24
    14d4:	88 0f       	add	r24, r24
    14d6:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    14d8:	e4 17       	cp	r30, r20
    14da:	f5 07       	cpc	r31, r21
    14dc:	59 f7       	brne	.-42     	; 0x14b4 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    14de:	08 95       	ret

000014e0 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    14e0:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    14e2:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    14e4:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    14e6:	20 91 35 01 	lds	r18, 0x0135
    or tmpreg1, ddrreg
    14ea:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    14ec:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14f0:	30 91 35 01 	lds	r19, 0x0135
    14f4:	20 30       	cpi	r18, 0x00	; 0
    14f6:	29 f0       	breq	.+10     	; 0x1502 <message_send+0x22>
    14f8:	00 00       	nop
    14fa:	25 b1       	in	r18, 0x05	; 5
    14fc:	23 2b       	or	r18, r19
    14fe:	25 b9       	out	0x05, r18	; 5
    1500:	04 c0       	rjmp	.+8      	; 0x150a <message_send+0x2a>
    1502:	00 00       	nop
    1504:	00 00       	nop
    1506:	00 00       	nop
    1508:	00 c0       	rjmp	.+0      	; 0x150a <message_send+0x2a>
    150a:	00 00       	nop
    150c:	00 00       	nop
    150e:	00 00       	nop
    1510:	30 95       	com	r19
    1512:	25 b1       	in	r18, 0x05	; 5
    1514:	23 23       	and	r18, r19
    1516:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1518:	2e ea       	ldi	r18, 0xAE	; 174
    151a:	2a 95       	dec	r18
    151c:	f1 f7       	brne	.-4      	; 0x151a <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    151e:	2b ee       	ldi	r18, 0xEB	; 235

00001520 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1520:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1522:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1524:	0a c0       	rjmp	.+20     	; 0x153a <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1526:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1528:	30 91 35 01 	lds	r19, 0x0135
    com tmpreg2
    152c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    152e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1530:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1532:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1534:	0f be       	out	0x3f, r0	; 63
    return 0
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	08 95       	ret

0000153a <nocollision>:
nocollision:
    nop
    153a:	00 00       	nop
    dec tmpreg1
    153c:	2a 95       	dec	r18
    brne checkcollision
    153e:	81 f7       	brne	.-32     	; 0x1520 <checkcollision>

    ldi tmpreg1, 0x01
    1540:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1542:	30 91 35 01 	lds	r19, 0x0135
    1546:	20 30       	cpi	r18, 0x00	; 0
    1548:	29 f0       	breq	.+10     	; 0x1554 <nocollision+0x1a>
    154a:	00 00       	nop
    154c:	25 b1       	in	r18, 0x05	; 5
    154e:	23 2b       	or	r18, r19
    1550:	25 b9       	out	0x05, r18	; 5
    1552:	04 c0       	rjmp	.+8      	; 0x155c <nocollision+0x22>
    1554:	00 00       	nop
    1556:	00 00       	nop
    1558:	00 00       	nop
    155a:	00 c0       	rjmp	.+0      	; 0x155c <nocollision+0x22>
    155c:	00 00       	nop
    155e:	00 00       	nop
    1560:	00 00       	nop
    1562:	30 95       	com	r19
    1564:	25 b1       	in	r18, 0x05	; 5
    1566:	23 23       	and	r18, r19
    1568:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    156a:	00 00       	nop
    156c:	24 e5       	ldi	r18, 0x54	; 84
    156e:	2a 95       	dec	r18
    1570:	f1 f7       	brne	.-4      	; 0x156e <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1572:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1574:	8c e0       	ldi	r24, 0x0C	; 12

00001576 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1576:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1578:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    157a:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    157c:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    157e:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1580:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1582:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1584:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1586:	50 e0       	ldi	r21, 0x00	; 0

00001588 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1588:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    158a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    158c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    158e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1590:	30 91 35 01 	lds	r19, 0x0135
    1594:	20 30       	cpi	r18, 0x00	; 0
    1596:	29 f0       	breq	.+10     	; 0x15a2 <sendbit+0x1a>
    1598:	00 00       	nop
    159a:	25 b1       	in	r18, 0x05	; 5
    159c:	23 2b       	or	r18, r19
    159e:	25 b9       	out	0x05, r18	; 5
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <sendbit+0x22>
    15a2:	00 00       	nop
    15a4:	00 00       	nop
    15a6:	00 00       	nop
    15a8:	00 c0       	rjmp	.+0      	; 0x15aa <sendbit+0x22>
    15aa:	00 00       	nop
    15ac:	00 00       	nop
    15ae:	00 00       	nop
    15b0:	30 95       	com	r19
    15b2:	25 b1       	in	r18, 0x05	; 5
    15b4:	23 23       	and	r18, r19
    15b6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    15b8:	00 00       	nop
    15ba:	21 e5       	ldi	r18, 0x51	; 81
    15bc:	2a 95       	dec	r18
    15be:	f1 f7       	brne	.-4      	; 0x15bc <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    15c0:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    15c2:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    15c4:	9a 95       	dec	r25
    brne sendbit
    15c6:	01 f7       	brne	.-64     	; 0x1588 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    15c8:	8a 95       	dec	r24
    brne sendbyte
    15ca:	a9 f6       	brne	.-86     	; 0x1576 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    15cc:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    15ce:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    15d0:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15d2:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15d4:	30 91 35 01 	lds	r19, 0x0135
    com tmpreg2
    15d8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15da:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15dc:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15de:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15e0:	0f be       	out	0x3f, r0	; 63
    return 1
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	08 95       	ret

000015e6 <main>:
    }
}

int main()
{
  kilo_init();
    15e6:	0e 94 84 01 	call	0x308	; 0x308 <kilo_init>
  kilo_start(setup, loop);
    15ea:	62 e8       	ldi	r22, 0x82	; 130
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	81 e7       	ldi	r24, 0x71	; 113
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 80 02 	call	0x500	; 0x500 <kilo_start>
    
  return 0;
}
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	08 95       	ret

000015fc <__divmodhi4>:
    15fc:	97 fb       	bst	r25, 7
    15fe:	07 2e       	mov	r0, r23
    1600:	16 f4       	brtc	.+4      	; 0x1606 <__divmodhi4+0xa>
    1602:	00 94       	com	r0
    1604:	07 d0       	rcall	.+14     	; 0x1614 <__divmodhi4_neg1>
    1606:	77 fd       	sbrc	r23, 7
    1608:	09 d0       	rcall	.+18     	; 0x161c <__divmodhi4_neg2>
    160a:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodhi4>
    160e:	07 fc       	sbrc	r0, 7
    1610:	05 d0       	rcall	.+10     	; 0x161c <__divmodhi4_neg2>
    1612:	3e f4       	brtc	.+14     	; 0x1622 <__divmodhi4_exit>

00001614 <__divmodhi4_neg1>:
    1614:	90 95       	com	r25
    1616:	81 95       	neg	r24
    1618:	9f 4f       	sbci	r25, 0xFF	; 255
    161a:	08 95       	ret

0000161c <__divmodhi4_neg2>:
    161c:	70 95       	com	r23
    161e:	61 95       	neg	r22
    1620:	7f 4f       	sbci	r23, 0xFF	; 255

00001622 <__divmodhi4_exit>:
    1622:	08 95       	ret

00001624 <__tablejump2__>:
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	05 90       	lpm	r0, Z+
    162a:	f4 91       	lpm	r31, Z
    162c:	e0 2d       	mov	r30, r0
    162e:	09 94       	ijmp

00001630 <__umulhisi3>:
    1630:	a2 9f       	mul	r26, r18
    1632:	b0 01       	movw	r22, r0
    1634:	b3 9f       	mul	r27, r19
    1636:	c0 01       	movw	r24, r0
    1638:	a3 9f       	mul	r26, r19
    163a:	70 0d       	add	r23, r0
    163c:	81 1d       	adc	r24, r1
    163e:	11 24       	eor	r1, r1
    1640:	91 1d       	adc	r25, r1
    1642:	b2 9f       	mul	r27, r18
    1644:	70 0d       	add	r23, r0
    1646:	81 1d       	adc	r24, r1
    1648:	11 24       	eor	r1, r1
    164a:	91 1d       	adc	r25, r1
    164c:	08 95       	ret

0000164e <__udivmodhi4>:
    164e:	aa 1b       	sub	r26, r26
    1650:	bb 1b       	sub	r27, r27
    1652:	51 e1       	ldi	r21, 0x11	; 17
    1654:	07 c0       	rjmp	.+14     	; 0x1664 <__udivmodhi4_ep>

00001656 <__udivmodhi4_loop>:
    1656:	aa 1f       	adc	r26, r26
    1658:	bb 1f       	adc	r27, r27
    165a:	a6 17       	cp	r26, r22
    165c:	b7 07       	cpc	r27, r23
    165e:	10 f0       	brcs	.+4      	; 0x1664 <__udivmodhi4_ep>
    1660:	a6 1b       	sub	r26, r22
    1662:	b7 0b       	sbc	r27, r23

00001664 <__udivmodhi4_ep>:
    1664:	88 1f       	adc	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	5a 95       	dec	r21
    166a:	a9 f7       	brne	.-22     	; 0x1656 <__udivmodhi4_loop>
    166c:	80 95       	com	r24
    166e:	90 95       	com	r25
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	08 95       	ret

00001676 <__subsf3>:
    1676:	50 58       	subi	r21, 0x80	; 128

00001678 <__addsf3>:
    1678:	bb 27       	eor	r27, r27
    167a:	aa 27       	eor	r26, r26
    167c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__addsf3x>
    1680:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    1684:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    1688:	38 f0       	brcs	.+14     	; 0x1698 <__addsf3+0x20>
    168a:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    168e:	20 f0       	brcs	.+8      	; 0x1698 <__addsf3+0x20>
    1690:	39 f4       	brne	.+14     	; 0x16a0 <__addsf3+0x28>
    1692:	9f 3f       	cpi	r25, 0xFF	; 255
    1694:	19 f4       	brne	.+6      	; 0x169c <__addsf3+0x24>
    1696:	26 f4       	brtc	.+8      	; 0x16a0 <__addsf3+0x28>
    1698:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>
    169c:	0e f4       	brtc	.+2      	; 0x16a0 <__addsf3+0x28>
    169e:	e0 95       	com	r30
    16a0:	e7 fb       	bst	r30, 7
    16a2:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>

000016a6 <__addsf3x>:
    16a6:	e9 2f       	mov	r30, r25
    16a8:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    16ac:	58 f3       	brcs	.-42     	; 0x1684 <__addsf3+0xc>
    16ae:	ba 17       	cp	r27, r26
    16b0:	62 07       	cpc	r22, r18
    16b2:	73 07       	cpc	r23, r19
    16b4:	84 07       	cpc	r24, r20
    16b6:	95 07       	cpc	r25, r21
    16b8:	20 f0       	brcs	.+8      	; 0x16c2 <__addsf3x+0x1c>
    16ba:	79 f4       	brne	.+30     	; 0x16da <__addsf3x+0x34>
    16bc:	a6 f5       	brtc	.+104    	; 0x1726 <__addsf3x+0x80>
    16be:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_zero>
    16c2:	0e f4       	brtc	.+2      	; 0x16c6 <__addsf3x+0x20>
    16c4:	e0 95       	com	r30
    16c6:	0b 2e       	mov	r0, r27
    16c8:	ba 2f       	mov	r27, r26
    16ca:	a0 2d       	mov	r26, r0
    16cc:	0b 01       	movw	r0, r22
    16ce:	b9 01       	movw	r22, r18
    16d0:	90 01       	movw	r18, r0
    16d2:	0c 01       	movw	r0, r24
    16d4:	ca 01       	movw	r24, r20
    16d6:	a0 01       	movw	r20, r0
    16d8:	11 24       	eor	r1, r1
    16da:	ff 27       	eor	r31, r31
    16dc:	59 1b       	sub	r21, r25
    16de:	99 f0       	breq	.+38     	; 0x1706 <__addsf3x+0x60>
    16e0:	59 3f       	cpi	r21, 0xF9	; 249
    16e2:	50 f4       	brcc	.+20     	; 0x16f8 <__addsf3x+0x52>
    16e4:	50 3e       	cpi	r21, 0xE0	; 224
    16e6:	68 f1       	brcs	.+90     	; 0x1742 <__addsf3x+0x9c>
    16e8:	1a 16       	cp	r1, r26
    16ea:	f0 40       	sbci	r31, 0x00	; 0
    16ec:	a2 2f       	mov	r26, r18
    16ee:	23 2f       	mov	r18, r19
    16f0:	34 2f       	mov	r19, r20
    16f2:	44 27       	eor	r20, r20
    16f4:	58 5f       	subi	r21, 0xF8	; 248
    16f6:	f3 cf       	rjmp	.-26     	; 0x16de <__addsf3x+0x38>
    16f8:	46 95       	lsr	r20
    16fa:	37 95       	ror	r19
    16fc:	27 95       	ror	r18
    16fe:	a7 95       	ror	r26
    1700:	f0 40       	sbci	r31, 0x00	; 0
    1702:	53 95       	inc	r21
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__addsf3x+0x52>
    1706:	7e f4       	brtc	.+30     	; 0x1726 <__addsf3x+0x80>
    1708:	1f 16       	cp	r1, r31
    170a:	ba 0b       	sbc	r27, r26
    170c:	62 0b       	sbc	r22, r18
    170e:	73 0b       	sbc	r23, r19
    1710:	84 0b       	sbc	r24, r20
    1712:	ba f0       	brmi	.+46     	; 0x1742 <__addsf3x+0x9c>
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	a1 f0       	breq	.+40     	; 0x1740 <__addsf3x+0x9a>
    1718:	ff 0f       	add	r31, r31
    171a:	bb 1f       	adc	r27, r27
    171c:	66 1f       	adc	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	c2 f7       	brpl	.-16     	; 0x1714 <__addsf3x+0x6e>
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <__addsf3x+0x9c>
    1726:	ba 0f       	add	r27, r26
    1728:	62 1f       	adc	r22, r18
    172a:	73 1f       	adc	r23, r19
    172c:	84 1f       	adc	r24, r20
    172e:	48 f4       	brcc	.+18     	; 0x1742 <__addsf3x+0x9c>
    1730:	87 95       	ror	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f7 95       	ror	r31
    173a:	9e 3f       	cpi	r25, 0xFE	; 254
    173c:	08 f0       	brcs	.+2      	; 0x1740 <__addsf3x+0x9a>
    173e:	b0 cf       	rjmp	.-160    	; 0x16a0 <__addsf3+0x28>
    1740:	93 95       	inc	r25
    1742:	88 0f       	add	r24, r24
    1744:	08 f0       	brcs	.+2      	; 0x1748 <__addsf3x+0xa2>
    1746:	99 27       	eor	r25, r25
    1748:	ee 0f       	add	r30, r30
    174a:	97 95       	ror	r25
    174c:	87 95       	ror	r24
    174e:	08 95       	ret

00001750 <__divsf3>:
    1750:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__divsf3x>
    1754:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    1758:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    175c:	58 f0       	brcs	.+22     	; 0x1774 <__divsf3+0x24>
    175e:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    1762:	40 f0       	brcs	.+16     	; 0x1774 <__divsf3+0x24>
    1764:	29 f4       	brne	.+10     	; 0x1770 <__divsf3+0x20>
    1766:	5f 3f       	cpi	r21, 0xFF	; 255
    1768:	29 f0       	breq	.+10     	; 0x1774 <__divsf3+0x24>
    176a:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    176e:	51 11       	cpse	r21, r1
    1770:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    1774:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>

00001778 <__divsf3x>:
    1778:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    177c:	68 f3       	brcs	.-38     	; 0x1758 <__divsf3+0x8>

0000177e <__divsf3_pse>:
    177e:	99 23       	and	r25, r25
    1780:	b1 f3       	breq	.-20     	; 0x176e <__divsf3+0x1e>
    1782:	55 23       	and	r21, r21
    1784:	91 f3       	breq	.-28     	; 0x176a <__divsf3+0x1a>
    1786:	95 1b       	sub	r25, r21
    1788:	55 0b       	sbc	r21, r21
    178a:	bb 27       	eor	r27, r27
    178c:	aa 27       	eor	r26, r26
    178e:	62 17       	cp	r22, r18
    1790:	73 07       	cpc	r23, r19
    1792:	84 07       	cpc	r24, r20
    1794:	38 f0       	brcs	.+14     	; 0x17a4 <__divsf3_pse+0x26>
    1796:	9f 5f       	subi	r25, 0xFF	; 255
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	44 1f       	adc	r20, r20
    17a0:	aa 1f       	adc	r26, r26
    17a2:	a9 f3       	breq	.-22     	; 0x178e <__divsf3_pse+0x10>
    17a4:	35 d0       	rcall	.+106    	; 0x1810 <__divsf3_pse+0x92>
    17a6:	0e 2e       	mov	r0, r30
    17a8:	3a f0       	brmi	.+14     	; 0x17b8 <__divsf3_pse+0x3a>
    17aa:	e0 e8       	ldi	r30, 0x80	; 128
    17ac:	32 d0       	rcall	.+100    	; 0x1812 <__divsf3_pse+0x94>
    17ae:	91 50       	subi	r25, 0x01	; 1
    17b0:	50 40       	sbci	r21, 0x00	; 0
    17b2:	e6 95       	lsr	r30
    17b4:	00 1c       	adc	r0, r0
    17b6:	ca f7       	brpl	.-14     	; 0x17aa <__divsf3_pse+0x2c>
    17b8:	2b d0       	rcall	.+86     	; 0x1810 <__divsf3_pse+0x92>
    17ba:	fe 2f       	mov	r31, r30
    17bc:	29 d0       	rcall	.+82     	; 0x1810 <__divsf3_pse+0x92>
    17be:	66 0f       	add	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	bb 1f       	adc	r27, r27
    17c6:	26 17       	cp	r18, r22
    17c8:	37 07       	cpc	r19, r23
    17ca:	48 07       	cpc	r20, r24
    17cc:	ab 07       	cpc	r26, r27
    17ce:	b0 e8       	ldi	r27, 0x80	; 128
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__divsf3_pse+0x56>
    17d2:	bb 0b       	sbc	r27, r27
    17d4:	80 2d       	mov	r24, r0
    17d6:	bf 01       	movw	r22, r30
    17d8:	ff 27       	eor	r31, r31
    17da:	93 58       	subi	r25, 0x83	; 131
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
    17de:	3a f0       	brmi	.+14     	; 0x17ee <__divsf3_pse+0x70>
    17e0:	9e 3f       	cpi	r25, 0xFE	; 254
    17e2:	51 05       	cpc	r21, r1
    17e4:	78 f0       	brcs	.+30     	; 0x1804 <__divsf3_pse+0x86>
    17e6:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    17ea:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    17ee:	5f 3f       	cpi	r21, 0xFF	; 255
    17f0:	e4 f3       	brlt	.-8      	; 0x17ea <__divsf3_pse+0x6c>
    17f2:	98 3e       	cpi	r25, 0xE8	; 232
    17f4:	d4 f3       	brlt	.-12     	; 0x17ea <__divsf3_pse+0x6c>
    17f6:	86 95       	lsr	r24
    17f8:	77 95       	ror	r23
    17fa:	67 95       	ror	r22
    17fc:	b7 95       	ror	r27
    17fe:	f7 95       	ror	r31
    1800:	9f 5f       	subi	r25, 0xFF	; 255
    1802:	c9 f7       	brne	.-14     	; 0x17f6 <__divsf3_pse+0x78>
    1804:	88 0f       	add	r24, r24
    1806:	91 1d       	adc	r25, r1
    1808:	96 95       	lsr	r25
    180a:	87 95       	ror	r24
    180c:	97 f9       	bld	r25, 7
    180e:	08 95       	ret
    1810:	e1 e0       	ldi	r30, 0x01	; 1
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	bb 1f       	adc	r27, r27
    181a:	62 17       	cp	r22, r18
    181c:	73 07       	cpc	r23, r19
    181e:	84 07       	cpc	r24, r20
    1820:	ba 07       	cpc	r27, r26
    1822:	20 f0       	brcs	.+8      	; 0x182c <__divsf3_pse+0xae>
    1824:	62 1b       	sub	r22, r18
    1826:	73 0b       	sbc	r23, r19
    1828:	84 0b       	sbc	r24, r20
    182a:	ba 0b       	sbc	r27, r26
    182c:	ee 1f       	adc	r30, r30
    182e:	88 f7       	brcc	.-30     	; 0x1812 <__divsf3_pse+0x94>
    1830:	e0 95       	com	r30
    1832:	08 95       	ret

00001834 <__fixsfsi>:
    1834:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
    1838:	68 94       	set
    183a:	b1 11       	cpse	r27, r1
    183c:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    1840:	08 95       	ret

00001842 <__fixunssfsi>:
    1842:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fp_splitA>
    1846:	88 f0       	brcs	.+34     	; 0x186a <__fixunssfsi+0x28>
    1848:	9f 57       	subi	r25, 0x7F	; 127
    184a:	98 f0       	brcs	.+38     	; 0x1872 <__fixunssfsi+0x30>
    184c:	b9 2f       	mov	r27, r25
    184e:	99 27       	eor	r25, r25
    1850:	b7 51       	subi	r27, 0x17	; 23
    1852:	b0 f0       	brcs	.+44     	; 0x1880 <__fixunssfsi+0x3e>
    1854:	e1 f0       	breq	.+56     	; 0x188e <__fixunssfsi+0x4c>
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	1a f0       	brmi	.+6      	; 0x1866 <__fixunssfsi+0x24>
    1860:	ba 95       	dec	r27
    1862:	c9 f7       	brne	.-14     	; 0x1856 <__fixunssfsi+0x14>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <__fixunssfsi+0x4c>
    1866:	b1 30       	cpi	r27, 0x01	; 1
    1868:	91 f0       	breq	.+36     	; 0x188e <__fixunssfsi+0x4c>
    186a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_zero>
    186e:	b1 e0       	ldi	r27, 0x01	; 1
    1870:	08 95       	ret
    1872:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_zero>
    1876:	67 2f       	mov	r22, r23
    1878:	78 2f       	mov	r23, r24
    187a:	88 27       	eor	r24, r24
    187c:	b8 5f       	subi	r27, 0xF8	; 248
    187e:	39 f0       	breq	.+14     	; 0x188e <__fixunssfsi+0x4c>
    1880:	b9 3f       	cpi	r27, 0xF9	; 249
    1882:	cc f3       	brlt	.-14     	; 0x1876 <__fixunssfsi+0x34>
    1884:	86 95       	lsr	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b3 95       	inc	r27
    188c:	d9 f7       	brne	.-10     	; 0x1884 <__fixunssfsi+0x42>
    188e:	3e f4       	brtc	.+14     	; 0x189e <__fixunssfsi+0x5c>
    1890:	90 95       	com	r25
    1892:	80 95       	com	r24
    1894:	70 95       	com	r23
    1896:	61 95       	neg	r22
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	8f 4f       	sbci	r24, 0xFF	; 255
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	08 95       	ret

000018a0 <__floatunsisf>:
    18a0:	e8 94       	clt
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <__floatsisf+0x12>

000018a4 <__floatsisf>:
    18a4:	97 fb       	bst	r25, 7
    18a6:	3e f4       	brtc	.+14     	; 0x18b6 <__floatsisf+0x12>
    18a8:	90 95       	com	r25
    18aa:	80 95       	com	r24
    18ac:	70 95       	com	r23
    18ae:	61 95       	neg	r22
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	8f 4f       	sbci	r24, 0xFF	; 255
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	99 23       	and	r25, r25
    18b8:	a9 f0       	breq	.+42     	; 0x18e4 <__floatsisf+0x40>
    18ba:	f9 2f       	mov	r31, r25
    18bc:	96 e9       	ldi	r25, 0x96	; 150
    18be:	bb 27       	eor	r27, r27
    18c0:	93 95       	inc	r25
    18c2:	f6 95       	lsr	r31
    18c4:	87 95       	ror	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	b7 95       	ror	r27
    18cc:	f1 11       	cpse	r31, r1
    18ce:	f8 cf       	rjmp	.-16     	; 0x18c0 <__floatsisf+0x1c>
    18d0:	fa f4       	brpl	.+62     	; 0x1910 <__floatsisf+0x6c>
    18d2:	bb 0f       	add	r27, r27
    18d4:	11 f4       	brne	.+4      	; 0x18da <__floatsisf+0x36>
    18d6:	60 ff       	sbrs	r22, 0
    18d8:	1b c0       	rjmp	.+54     	; 0x1910 <__floatsisf+0x6c>
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	16 c0       	rjmp	.+44     	; 0x1910 <__floatsisf+0x6c>
    18e4:	88 23       	and	r24, r24
    18e6:	11 f0       	breq	.+4      	; 0x18ec <__floatsisf+0x48>
    18e8:	96 e9       	ldi	r25, 0x96	; 150
    18ea:	11 c0       	rjmp	.+34     	; 0x190e <__floatsisf+0x6a>
    18ec:	77 23       	and	r23, r23
    18ee:	21 f0       	breq	.+8      	; 0x18f8 <__floatsisf+0x54>
    18f0:	9e e8       	ldi	r25, 0x8E	; 142
    18f2:	87 2f       	mov	r24, r23
    18f4:	76 2f       	mov	r23, r22
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <__floatsisf+0x5e>
    18f8:	66 23       	and	r22, r22
    18fa:	71 f0       	breq	.+28     	; 0x1918 <__floatsisf+0x74>
    18fc:	96 e8       	ldi	r25, 0x86	; 134
    18fe:	86 2f       	mov	r24, r22
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	2a f0       	brmi	.+10     	; 0x1910 <__floatsisf+0x6c>
    1906:	9a 95       	dec	r25
    1908:	66 0f       	add	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	da f7       	brpl	.-10     	; 0x1906 <__floatsisf+0x62>
    1910:	88 0f       	add	r24, r24
    1912:	96 95       	lsr	r25
    1914:	87 95       	ror	r24
    1916:	97 f9       	bld	r25, 7
    1918:	08 95       	ret

0000191a <__fp_inf>:
    191a:	97 f9       	bld	r25, 7
    191c:	9f 67       	ori	r25, 0x7F	; 127
    191e:	80 e8       	ldi	r24, 0x80	; 128
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	08 95       	ret

00001926 <__fp_nan>:
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	80 ec       	ldi	r24, 0xC0	; 192
    192a:	08 95       	ret

0000192c <__fp_pscA>:
    192c:	00 24       	eor	r0, r0
    192e:	0a 94       	dec	r0
    1930:	16 16       	cp	r1, r22
    1932:	17 06       	cpc	r1, r23
    1934:	18 06       	cpc	r1, r24
    1936:	09 06       	cpc	r0, r25
    1938:	08 95       	ret

0000193a <__fp_pscB>:
    193a:	00 24       	eor	r0, r0
    193c:	0a 94       	dec	r0
    193e:	12 16       	cp	r1, r18
    1940:	13 06       	cpc	r1, r19
    1942:	14 06       	cpc	r1, r20
    1944:	05 06       	cpc	r0, r21
    1946:	08 95       	ret

00001948 <__fp_round>:
    1948:	09 2e       	mov	r0, r25
    194a:	03 94       	inc	r0
    194c:	00 0c       	add	r0, r0
    194e:	11 f4       	brne	.+4      	; 0x1954 <__fp_round+0xc>
    1950:	88 23       	and	r24, r24
    1952:	52 f0       	brmi	.+20     	; 0x1968 <__fp_round+0x20>
    1954:	bb 0f       	add	r27, r27
    1956:	40 f4       	brcc	.+16     	; 0x1968 <__fp_round+0x20>
    1958:	bf 2b       	or	r27, r31
    195a:	11 f4       	brne	.+4      	; 0x1960 <__fp_round+0x18>
    195c:	60 ff       	sbrs	r22, 0
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <__fp_round+0x20>
    1960:	6f 5f       	subi	r22, 0xFF	; 255
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	08 95       	ret

0000196a <__fp_split3>:
    196a:	57 fd       	sbrc	r21, 7
    196c:	90 58       	subi	r25, 0x80	; 128
    196e:	44 0f       	add	r20, r20
    1970:	55 1f       	adc	r21, r21
    1972:	59 f0       	breq	.+22     	; 0x198a <__fp_splitA+0x10>
    1974:	5f 3f       	cpi	r21, 0xFF	; 255
    1976:	71 f0       	breq	.+28     	; 0x1994 <__fp_splitA+0x1a>
    1978:	47 95       	ror	r20

0000197a <__fp_splitA>:
    197a:	88 0f       	add	r24, r24
    197c:	97 fb       	bst	r25, 7
    197e:	99 1f       	adc	r25, r25
    1980:	61 f0       	breq	.+24     	; 0x199a <__fp_splitA+0x20>
    1982:	9f 3f       	cpi	r25, 0xFF	; 255
    1984:	79 f0       	breq	.+30     	; 0x19a4 <__fp_splitA+0x2a>
    1986:	87 95       	ror	r24
    1988:	08 95       	ret
    198a:	12 16       	cp	r1, r18
    198c:	13 06       	cpc	r1, r19
    198e:	14 06       	cpc	r1, r20
    1990:	55 1f       	adc	r21, r21
    1992:	f2 cf       	rjmp	.-28     	; 0x1978 <__fp_split3+0xe>
    1994:	46 95       	lsr	r20
    1996:	f1 df       	rcall	.-30     	; 0x197a <__fp_splitA>
    1998:	08 c0       	rjmp	.+16     	; 0x19aa <__fp_splitA+0x30>
    199a:	16 16       	cp	r1, r22
    199c:	17 06       	cpc	r1, r23
    199e:	18 06       	cpc	r1, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	f1 cf       	rjmp	.-30     	; 0x1986 <__fp_splitA+0xc>
    19a4:	86 95       	lsr	r24
    19a6:	71 05       	cpc	r23, r1
    19a8:	61 05       	cpc	r22, r1
    19aa:	08 94       	sec
    19ac:	08 95       	ret

000019ae <__fp_zero>:
    19ae:	e8 94       	clt

000019b0 <__fp_szero>:
    19b0:	bb 27       	eor	r27, r27
    19b2:	66 27       	eor	r22, r22
    19b4:	77 27       	eor	r23, r23
    19b6:	cb 01       	movw	r24, r22
    19b8:	97 f9       	bld	r25, 7
    19ba:	08 95       	ret

000019bc <__mulsf3>:
    19bc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__mulsf3x>
    19c0:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    19c4:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    19c8:	38 f0       	brcs	.+14     	; 0x19d8 <__mulsf3+0x1c>
    19ca:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    19ce:	20 f0       	brcs	.+8      	; 0x19d8 <__mulsf3+0x1c>
    19d0:	95 23       	and	r25, r21
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <__mulsf3+0x1c>
    19d4:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    19d8:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>
    19dc:	11 24       	eor	r1, r1
    19de:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>

000019e2 <__mulsf3x>:
    19e2:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    19e6:	70 f3       	brcs	.-36     	; 0x19c4 <__mulsf3+0x8>

000019e8 <__mulsf3_pse>:
    19e8:	95 9f       	mul	r25, r21
    19ea:	c1 f3       	breq	.-16     	; 0x19dc <__mulsf3+0x20>
    19ec:	95 0f       	add	r25, r21
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	55 1f       	adc	r21, r21
    19f2:	62 9f       	mul	r22, r18
    19f4:	f0 01       	movw	r30, r0
    19f6:	72 9f       	mul	r23, r18
    19f8:	bb 27       	eor	r27, r27
    19fa:	f0 0d       	add	r31, r0
    19fc:	b1 1d       	adc	r27, r1
    19fe:	63 9f       	mul	r22, r19
    1a00:	aa 27       	eor	r26, r26
    1a02:	f0 0d       	add	r31, r0
    1a04:	b1 1d       	adc	r27, r1
    1a06:	aa 1f       	adc	r26, r26
    1a08:	64 9f       	mul	r22, r20
    1a0a:	66 27       	eor	r22, r22
    1a0c:	b0 0d       	add	r27, r0
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	66 1f       	adc	r22, r22
    1a12:	82 9f       	mul	r24, r18
    1a14:	22 27       	eor	r18, r18
    1a16:	b0 0d       	add	r27, r0
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	62 1f       	adc	r22, r18
    1a1c:	73 9f       	mul	r23, r19
    1a1e:	b0 0d       	add	r27, r0
    1a20:	a1 1d       	adc	r26, r1
    1a22:	62 1f       	adc	r22, r18
    1a24:	83 9f       	mul	r24, r19
    1a26:	a0 0d       	add	r26, r0
    1a28:	61 1d       	adc	r22, r1
    1a2a:	22 1f       	adc	r18, r18
    1a2c:	74 9f       	mul	r23, r20
    1a2e:	33 27       	eor	r19, r19
    1a30:	a0 0d       	add	r26, r0
    1a32:	61 1d       	adc	r22, r1
    1a34:	23 1f       	adc	r18, r19
    1a36:	84 9f       	mul	r24, r20
    1a38:	60 0d       	add	r22, r0
    1a3a:	21 1d       	adc	r18, r1
    1a3c:	82 2f       	mov	r24, r18
    1a3e:	76 2f       	mov	r23, r22
    1a40:	6a 2f       	mov	r22, r26
    1a42:	11 24       	eor	r1, r1
    1a44:	9f 57       	subi	r25, 0x7F	; 127
    1a46:	50 40       	sbci	r21, 0x00	; 0
    1a48:	9a f0       	brmi	.+38     	; 0x1a70 <__mulsf3_pse+0x88>
    1a4a:	f1 f0       	breq	.+60     	; 0x1a88 <__mulsf3_pse+0xa0>
    1a4c:	88 23       	and	r24, r24
    1a4e:	4a f0       	brmi	.+18     	; 0x1a62 <__mulsf3_pse+0x7a>
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	bb 1f       	adc	r27, r27
    1a56:	66 1f       	adc	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	50 40       	sbci	r21, 0x00	; 0
    1a60:	a9 f7       	brne	.-22     	; 0x1a4c <__mulsf3_pse+0x64>
    1a62:	9e 3f       	cpi	r25, 0xFE	; 254
    1a64:	51 05       	cpc	r21, r1
    1a66:	80 f0       	brcs	.+32     	; 0x1a88 <__mulsf3_pse+0xa0>
    1a68:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    1a6c:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    1a70:	5f 3f       	cpi	r21, 0xFF	; 255
    1a72:	e4 f3       	brlt	.-8      	; 0x1a6c <__mulsf3_pse+0x84>
    1a74:	98 3e       	cpi	r25, 0xE8	; 232
    1a76:	d4 f3       	brlt	.-12     	; 0x1a6c <__mulsf3_pse+0x84>
    1a78:	86 95       	lsr	r24
    1a7a:	77 95       	ror	r23
    1a7c:	67 95       	ror	r22
    1a7e:	b7 95       	ror	r27
    1a80:	f7 95       	ror	r31
    1a82:	e7 95       	ror	r30
    1a84:	9f 5f       	subi	r25, 0xFF	; 255
    1a86:	c1 f7       	brne	.-16     	; 0x1a78 <__mulsf3_pse+0x90>
    1a88:	fe 2b       	or	r31, r30
    1a8a:	88 0f       	add	r24, r24
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	96 95       	lsr	r25
    1a90:	87 95       	ror	r24
    1a92:	97 f9       	bld	r25, 7
    1a94:	08 95       	ret

00001a96 <do_rand>:
    1a96:	8f 92       	push	r8
    1a98:	9f 92       	push	r9
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    1aac:	68 81       	ld	r22, Y
    1aae:	79 81       	ldd	r23, Y+1	; 0x01
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab4:	61 15       	cp	r22, r1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	81 05       	cpc	r24, r1
    1aba:	91 05       	cpc	r25, r1
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <do_rand+0x30>
    1abe:	64 e2       	ldi	r22, 0x24	; 36
    1ac0:	79 ed       	ldi	r23, 0xD9	; 217
    1ac2:	8b e5       	ldi	r24, 0x5B	; 91
    1ac4:	97 e0       	ldi	r25, 0x07	; 7
    1ac6:	2d e1       	ldi	r18, 0x1D	; 29
    1ac8:	33 ef       	ldi	r19, 0xF3	; 243
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__divmodsi4>
    1ad2:	49 01       	movw	r8, r18
    1ad4:	5a 01       	movw	r10, r20
    1ad6:	9b 01       	movw	r18, r22
    1ad8:	ac 01       	movw	r20, r24
    1ada:	a7 ea       	ldi	r26, 0xA7	; 167
    1adc:	b1 e4       	ldi	r27, 0x41	; 65
    1ade:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__muluhisi3>
    1ae2:	6b 01       	movw	r12, r22
    1ae4:	7c 01       	movw	r14, r24
    1ae6:	ac ee       	ldi	r26, 0xEC	; 236
    1ae8:	b4 ef       	ldi	r27, 0xF4	; 244
    1aea:	a5 01       	movw	r20, r10
    1aec:	94 01       	movw	r18, r8
    1aee:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__mulohisi3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8c 0d       	add	r24, r12
    1af8:	9d 1d       	adc	r25, r13
    1afa:	ae 1d       	adc	r26, r14
    1afc:	bf 1d       	adc	r27, r15
    1afe:	b7 ff       	sbrs	r27, 7
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <do_rand+0x72>
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	a1 09       	sbc	r26, r1
    1b06:	b0 48       	sbci	r27, 0x80	; 128
    1b08:	88 83       	st	Y, r24
    1b0a:	99 83       	std	Y+1, r25	; 0x01
    1b0c:	aa 83       	std	Y+2, r26	; 0x02
    1b0e:	bb 83       	std	Y+3, r27	; 0x03
    1b10:	9f 77       	andi	r25, 0x7F	; 127
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	08 95       	ret

00001b28 <rand_r>:
    1b28:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <do_rand>
    1b2c:	08 95       	ret

00001b2e <rand>:
    1b2e:	87 e0       	ldi	r24, 0x07	; 7
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <do_rand>
    1b36:	08 95       	ret

00001b38 <srand>:
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	80 93 07 01 	sts	0x0107, r24
    1b40:	90 93 08 01 	sts	0x0108, r25
    1b44:	a0 93 09 01 	sts	0x0109, r26
    1b48:	b0 93 0a 01 	sts	0x010A, r27
    1b4c:	08 95       	ret

00001b4e <eeprom_read_byte>:
    1b4e:	f9 99       	sbic	0x1f, 1	; 31
    1b50:	fe cf       	rjmp	.-4      	; 0x1b4e <eeprom_read_byte>
    1b52:	92 bd       	out	0x22, r25	; 34
    1b54:	81 bd       	out	0x21, r24	; 33
    1b56:	f8 9a       	sbi	0x1f, 0	; 31
    1b58:	99 27       	eor	r25, r25
    1b5a:	80 b5       	in	r24, 0x20	; 32
    1b5c:	08 95       	ret

00001b5e <eeprom_write_byte>:
    1b5e:	26 2f       	mov	r18, r22

00001b60 <eeprom_write_r18>:
    1b60:	f9 99       	sbic	0x1f, 1	; 31
    1b62:	fe cf       	rjmp	.-4      	; 0x1b60 <eeprom_write_r18>
    1b64:	1f ba       	out	0x1f, r1	; 31
    1b66:	92 bd       	out	0x22, r25	; 34
    1b68:	81 bd       	out	0x21, r24	; 33
    1b6a:	20 bd       	out	0x20, r18	; 32
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	fa 9a       	sbi	0x1f, 2	; 31
    1b72:	f9 9a       	sbi	0x1f, 1	; 31
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	08 95       	ret

00001b7a <__divmodsi4>:
    1b7a:	05 2e       	mov	r0, r21
    1b7c:	97 fb       	bst	r25, 7
    1b7e:	1e f4       	brtc	.+6      	; 0x1b86 <__divmodsi4+0xc>
    1b80:	00 94       	com	r0
    1b82:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__negsi2>
    1b86:	57 fd       	sbrc	r21, 7
    1b88:	07 d0       	rcall	.+14     	; 0x1b98 <__divmodsi4_neg2>
    1b8a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__udivmodsi4>
    1b8e:	07 fc       	sbrc	r0, 7
    1b90:	03 d0       	rcall	.+6      	; 0x1b98 <__divmodsi4_neg2>
    1b92:	4e f4       	brtc	.+18     	; 0x1ba6 <__divmodsi4_exit>
    1b94:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__negsi2>

00001b98 <__divmodsi4_neg2>:
    1b98:	50 95       	com	r21
    1b9a:	40 95       	com	r20
    1b9c:	30 95       	com	r19
    1b9e:	21 95       	neg	r18
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ba4:	5f 4f       	sbci	r21, 0xFF	; 255

00001ba6 <__divmodsi4_exit>:
    1ba6:	08 95       	ret

00001ba8 <__negsi2>:
    1ba8:	90 95       	com	r25
    1baa:	80 95       	com	r24
    1bac:	70 95       	com	r23
    1bae:	61 95       	neg	r22
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	08 95       	ret

00001bb8 <__muluhisi3>:
    1bb8:	0e 94 18 0b 	call	0x1630	; 0x1630 <__umulhisi3>
    1bbc:	a5 9f       	mul	r26, r21
    1bbe:	90 0d       	add	r25, r0
    1bc0:	b4 9f       	mul	r27, r20
    1bc2:	90 0d       	add	r25, r0
    1bc4:	a4 9f       	mul	r26, r20
    1bc6:	80 0d       	add	r24, r0
    1bc8:	91 1d       	adc	r25, r1
    1bca:	11 24       	eor	r1, r1
    1bcc:	08 95       	ret

00001bce <__mulshisi3>:
    1bce:	b7 ff       	sbrs	r27, 7
    1bd0:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__muluhisi3>

00001bd4 <__mulohisi3>:
    1bd4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__muluhisi3>
    1bd8:	82 1b       	sub	r24, r18
    1bda:	93 0b       	sbc	r25, r19
    1bdc:	08 95       	ret

00001bde <__udivmodsi4>:
    1bde:	a1 e2       	ldi	r26, 0x21	; 33
    1be0:	1a 2e       	mov	r1, r26
    1be2:	aa 1b       	sub	r26, r26
    1be4:	bb 1b       	sub	r27, r27
    1be6:	fd 01       	movw	r30, r26
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <__udivmodsi4_ep>

00001bea <__udivmodsi4_loop>:
    1bea:	aa 1f       	adc	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	ee 1f       	adc	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	a2 17       	cp	r26, r18
    1bf4:	b3 07       	cpc	r27, r19
    1bf6:	e4 07       	cpc	r30, r20
    1bf8:	f5 07       	cpc	r31, r21
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <__udivmodsi4_ep>
    1bfc:	a2 1b       	sub	r26, r18
    1bfe:	b3 0b       	sbc	r27, r19
    1c00:	e4 0b       	sbc	r30, r20
    1c02:	f5 0b       	sbc	r31, r21

00001c04 <__udivmodsi4_ep>:
    1c04:	66 1f       	adc	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	88 1f       	adc	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	1a 94       	dec	r1
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <__udivmodsi4_loop>
    1c10:	60 95       	com	r22
    1c12:	70 95       	com	r23
    1c14:	80 95       	com	r24
    1c16:	90 95       	com	r25
    1c18:	9b 01       	movw	r18, r22
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	bd 01       	movw	r22, r26
    1c1e:	cf 01       	movw	r24, r30
    1c20:	08 95       	ret

00001c22 <_exit>:
    1c22:	f8 94       	cli

00001c24 <__stop_program>:
    1c24:	ff cf       	rjmp	.-2      	; 0x1c24 <__stop_program>
