
build/self_rotate.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	65 02       	muls	r22, r21
      6a:	e1 02       	muls	r30, r17
      6c:	39 02       	muls	r19, r25
      6e:	30 02       	muls	r19, r16
      70:	36 02       	muls	r19, r22
      72:	c3 02       	muls	r28, r19
      74:	b8 02       	muls	r27, r24
      76:	43 09       	sbc	r20, r3
      78:	20 08       	sbc	r2, r0
      7a:	20 08       	sbc	r2, r0
      7c:	40 09       	sbc	r20, r0
      7e:	4c 09       	sbc	r20, r12
      80:	3c 09       	sbc	r19, r12
      82:	53 09       	sbc	r21, r3
      84:	4f 09       	sbc	r20, r15
      86:	57 09       	sbc	r21, r7
      88:	0f 09       	sbc	r16, r15
      8a:	e1 08       	sbc	r14, r1

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e5       	ldi	r30, 0x52	; 82
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a6 37       	cpi	r26, 0x76	; 118
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 89 0a 	call	0x1512	; 0x1512 <main>
      da:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
    }
}

void setup()
{
  last_state_update = kilo_ticks;
      e2:	80 91 3b 01 	lds	r24, 0x013B
      e6:	90 91 3c 01 	lds	r25, 0x013C
      ea:	a0 91 3d 01 	lds	r26, 0x013D
      ee:	b0 91 3e 01 	lds	r27, 0x013E
      f2:	80 93 14 01 	sts	0x0114, r24
      f6:	90 93 15 01 	sts	0x0115, r25
      fa:	a0 93 16 01 	sts	0x0116, r26
      fe:	b0 93 17 01 	sts	0x0117, r27
     102:	08 95       	ret

00000104 <loop>:
}

void loop()
{
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 64))
     104:	40 91 3b 01 	lds	r20, 0x013B
     108:	50 91 3c 01 	lds	r21, 0x013C
     10c:	60 91 3d 01 	lds	r22, 0x013D
     110:	70 91 3e 01 	lds	r23, 0x013E
     114:	80 91 14 01 	lds	r24, 0x0114
     118:	90 91 15 01 	lds	r25, 0x0115
     11c:	a0 91 16 01 	lds	r26, 0x0116
     120:	b0 91 17 01 	lds	r27, 0x0117
     124:	80 5c       	subi	r24, 0xC0	; 192
     126:	9f 4f       	sbci	r25, 0xFF	; 255
     128:	af 4f       	sbci	r26, 0xFF	; 255
     12a:	bf 4f       	sbci	r27, 0xFF	; 255
     12c:	84 17       	cp	r24, r20
     12e:	95 07       	cpc	r25, r21
     130:	a6 07       	cpc	r26, r22
     132:	b7 07       	cpc	r27, r23
     134:	08 f0       	brcs	.+2      	; 0x138 <loop+0x34>
     136:	08 95       	ret
    {
    	set_color(RGB(1, 0, 0));
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	0e 94 9a 07 	call	0xf34	; 0xf34 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     13e:	80 91 0e 01 	lds	r24, 0x010E
     142:	90 91 0f 01 	lds	r25, 0x010F
     146:	02 97       	sbiw	r24, 0x02	; 2
     148:	b1 f3       	breq	.-20     	; 0x136 <loop+0x32>
    {
        current_motion = new_motion;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	90 93 0f 01 	sts	0x010F, r25
     152:	80 93 0e 01 	sts	0x010E, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     156:	80 91 0c 01 	lds	r24, 0x010C
     15a:	90 91 0d 01 	lds	r25, 0x010D
     15e:	89 2b       	or	r24, r25
     160:	51 f0       	breq	.+20     	; 0x176 <loop+0x72>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	80 91 75 01 	lds	r24, 0x0175
     168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <set_motors>
            both_spined = 0;
     16c:	10 92 0d 01 	sts	0x010D, r1
     170:	10 92 0c 01 	sts	0x010C, r1
     174:	08 95       	ret
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     176:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spinup_motors>
     17a:	f3 cf       	rjmp	.-26     	; 0x162 <loop+0x5e>

0000017c <set_motion>:
// a regular int would overflow.
uint32_t last_state_update;

//base functions
void set_motion(int new_motion)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     180:	20 91 0e 01 	lds	r18, 0x010E
     184:	30 91 0f 01 	lds	r19, 0x010F
     188:	28 17       	cp	r18, r24
     18a:	39 07       	cpc	r19, r25
     18c:	79 f0       	breq	.+30     	; 0x1ac <set_motion+0x30>
    {
        current_motion = new_motion;
     18e:	90 93 0f 01 	sts	0x010F, r25
     192:	80 93 0e 01 	sts	0x010E, r24
        
        if (current_motion == STOP)
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	91 f1       	breq	.+100    	; 0x1fe <set_motion+0x82>
     19a:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	91 05       	cpc	r25, r1
     1a0:	a1 f1       	breq	.+104    	; 0x20a <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	91 05       	cpc	r25, r1
     1a6:	29 f0       	breq	.+10     	; 0x1b2 <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     1a8:	03 97       	sbiw	r24, 0x03	; 3
     1aa:	b9 f0       	breq	.+46     	; 0x1da <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     1b2:	80 91 0c 01 	lds	r24, 0x010C
     1b6:	90 91 0d 01 	lds	r25, 0x010D
     1ba:	89 2b       	or	r24, r25
     1bc:	11 f4       	brne	.+4      	; 0x1c2 <set_motion+0x46>
                spinup_motors();
     1be:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spinup_motors>
            set_motors(kilo_turn_left, 0);
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	80 91 75 01 	lds	r24, 0x0175
     1c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <set_motors>
            both_spined = 0;
     1cc:	10 92 0d 01 	sts	0x010D, r1
     1d0:	10 92 0c 01 	sts	0x010C, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     1da:	80 91 0c 01 	lds	r24, 0x010C
     1de:	90 91 0d 01 	lds	r25, 0x010D
     1e2:	89 2b       	or	r24, r25
     1e4:	f9 f0       	breq	.+62     	; 0x224 <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     1e6:	60 91 61 01 	lds	r22, 0x0161
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <set_motors>
            both_spined = 0;
     1f0:	10 92 0d 01 	sts	0x010D, r1
     1f4:	10 92 0c 01 	sts	0x010C, r1
        }
    }
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     206:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     20a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     20e:	60 91 74 01 	lds	r22, 0x0174
     212:	80 91 73 01 	lds	r24, 0x0173
     216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <set_motors>
            both_spined = 1;
     21a:	d0 93 0d 01 	sts	0x010D, r29
     21e:	c0 93 0c 01 	sts	0x010C, r28
     222:	c4 cf       	rjmp	.-120    	; 0x1ac <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     224:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spinup_motors>
     228:	de cf       	rjmp	.-68     	; 0x1e6 <set_motion+0x6a>

0000022a <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     22a:	08 95       	ret

0000022c <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	08 95       	ret

00000232 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     232:	08 95       	ret

00000234 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
    cli();
     242:	f8 94       	cli

    ports_off();
     244:	14 b8       	out	0x04, r1	; 4
     246:	17 b8       	out	0x07, r1	; 7
     248:	1a b8       	out	0x0a, r1	; 10
     24a:	15 b8       	out	0x05, r1	; 5
     24c:	18 b8       	out	0x08, r1	; 8
     24e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     250:	52 9a       	sbi	0x0a, 2	; 10
     252:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     254:	14 bc       	out	0x24, r1	; 36
     256:	85 e0       	ldi	r24, 0x05	; 5
     258:	85 bd       	out	0x25, r24	; 37
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	87 bd       	out	0x27, r24	; 39
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     264:	10 92 80 00 	sts	0x0080, r1
     268:	10 92 81 00 	sts	0x0081, r1
     26c:	2f e8       	ldi	r18, 0x8F	; 143
     26e:	3b e0       	ldi	r19, 0x0B	; 11
     270:	30 93 89 00 	sts	0x0089, r19
     274:	20 93 88 00 	sts	0x0088, r18
     278:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     27c:	53 98       	cbi	0x0a, 3	; 10
     27e:	23 98       	cbi	0x04, 3	; 4
     280:	91 ea       	ldi	r25, 0xA1	; 161
     282:	90 93 b0 00 	sts	0x00B0, r25
     286:	80 93 b1 00 	sts	0x00B1, r24
     28a:	10 92 b4 00 	sts	0x00B4, r1
     28e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     292:	8b e0       	ldi	r24, 0x0B	; 11
     294:	80 bf       	out	0x30, r24	; 48
     296:	83 e0       	ldi	r24, 0x03	; 3
     298:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     29c:	86 e0       	ldi	r24, 0x06	; 6
     29e:	80 93 7c 00 	sts	0x007C, r24
     2a2:	83 e8       	ldi	r24, 0x83	; 131
     2a4:	80 93 7a 00 	sts	0x007A, r24
     2a8:	80 91 7a 00 	lds	r24, 0x007A
     2ac:	80 64       	ori	r24, 0x40	; 64
     2ae:	80 93 7a 00 	sts	0x007A, r24
     2b2:	80 91 7a 00 	lds	r24, 0x007A
     2b6:	86 fd       	sbrc	r24, 6
     2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <kilo_init+0x7e>
    adc_trigger_high_gain();
     2ba:	10 92 7c 00 	sts	0x007C, r1
     2be:	83 ea       	ldi	r24, 0xA3	; 163
     2c0:	80 93 7a 00 	sts	0x007A, r24
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
    if (osccal != 0xFF)
     2d2:	8f 3f       	cpi	r24, 0xFF	; 255
     2d4:	11 f0       	breq	.+4      	; 0x2da <kilo_init+0xa6>
        OSCCAL = osccal;
     2d6:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     2da:	10 92 3f 01 	sts	0x013F, r1
    rx_leadingbit = 1;
     2de:	c1 e0       	ldi	r28, 0x01	; 1
     2e0:	c0 93 18 01 	sts	0x0118, r28
    rx_leadingbyte = 1;
     2e4:	c0 93 5c 01 	sts	0x015C, r28
    rx_byteindex = 0;
     2e8:	10 92 36 01 	sts	0x0136, r1
    rx_bytevalue = 0;
     2ec:	10 92 70 01 	sts	0x0170, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2f0:	80 e9       	ldi	r24, 0x90	; 144
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     2f8:	80 93 35 01 	sts	0x0135, r24
    if (tx_mask & ~TX_MASK_MAX)
     2fc:	80 91 35 01 	lds	r24, 0x0135
     300:	88 73       	andi	r24, 0x38	; 56
     302:	11 f0       	breq	.+4      	; 0x308 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     304:	c0 93 35 01 	sts	0x0135, r28
    tx_clock = 0;
     308:	10 92 60 01 	sts	0x0160, r1
     30c:	10 92 5f 01 	sts	0x015F, r1
    tx_increment = 255;
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 5e 01 	sts	0x015E, r25
     318:	80 93 5d 01 	sts	0x015D, r24
    kilo_ticks = 0;
     31c:	10 92 3b 01 	sts	0x013B, r1
     320:	10 92 3c 01 	sts	0x013C, r1
     324:	10 92 3d 01 	sts	0x013D, r1
     328:	10 92 3e 01 	sts	0x013E, r1
    kilo_state = IDLE;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 13 01 	sts	0x0113, r24
    kilo_tx_period = 3906;
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	9f e0       	ldi	r25, 0x0F	; 15
     336:	90 93 6f 01 	sts	0x016F, r25
     33a:	80 93 6e 01 	sts	0x016E, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     33e:	80 eb       	ldi	r24, 0xB0	; 176
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     346:	c8 2f       	mov	r28, r24
     348:	81 eb       	ldi	r24, 0xB1	; 177
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     350:	2c 2f       	mov	r18, r28
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	38 2b       	or	r19, r24
     356:	30 93 72 01 	sts	0x0172, r19
     35a:	20 93 71 01 	sts	0x0171, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     35e:	85 e0       	ldi	r24, 0x05	; 5
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     366:	80 93 75 01 	sts	0x0175, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     36a:	89 e0       	ldi	r24, 0x09	; 9
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     372:	80 93 61 01 	sts	0x0161, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     376:	8c e0       	ldi	r24, 0x0C	; 12
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     37e:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     382:	84 e1       	ldi	r24, 0x14	; 20
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     38a:	80 93 74 01 	sts	0x0174, r24
     38e:	50 e4       	ldi	r21, 0x40	; 64
     390:	e5 2e       	mov	r14, r21
     392:	51 e0       	ldi	r21, 0x01	; 1
     394:	f5 2e       	mov	r15, r21
     396:	09 e1       	ldi	r16, 0x19	; 25
     398:	11 e0       	ldi	r17, 0x01	; 1
     39a:	c0 e2       	ldi	r28, 0x20	; 32
     39c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     39e:	ce 01       	movw	r24, r28
     3a0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     3a4:	d8 2e       	mov	r13, r24
     3a6:	ce 01       	movw	r24, r28
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     3ae:	2d 2d       	mov	r18, r13
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	32 2f       	mov	r19, r18
     3b4:	22 27       	eor	r18, r18
     3b6:	28 2b       	or	r18, r24
     3b8:	f7 01       	movw	r30, r14
     3ba:	21 93       	st	Z+, r18
     3bc:	31 93       	st	Z+, r19
     3be:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     3c0:	ce 01       	movw	r24, r28
     3c2:	c0 96       	adiw	r24, 0x30	; 48
     3c4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     3c8:	d8 2e       	mov	r13, r24
     3ca:	ce 01       	movw	r24, r28
     3cc:	c1 96       	adiw	r24, 0x31	; 49
     3ce:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <eeprom_read_byte>
     3d2:	2d 2d       	mov	r18, r13
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	32 2f       	mov	r19, r18
     3d8:	22 27       	eor	r18, r18
     3da:	28 2b       	or	r18, r24
     3dc:	f8 01       	movw	r30, r16
     3de:	21 93       	st	Z+, r18
     3e0:	31 93       	st	Z+, r19
     3e2:	8f 01       	movw	r16, r30
     3e4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3e6:	cc 33       	cpi	r28, 0x3C	; 60
     3e8:	d1 05       	cpc	r29, r1
     3ea:	c9 f6       	brne	.-78     	; 0x39e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3ec:	78 94       	sei
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	08 95       	ret

000003fe <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3fe:	1f 92       	push	r1
     400:	0f 92       	push	r0
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	0f 92       	push	r0
     406:	11 24       	eor	r1, r1
     408:	8f 93       	push	r24
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	a8 95       	wdr
     410:	80 91 60 00 	lds	r24, 0x0060
     414:	88 61       	ori	r24, 0x18	; 24
     416:	80 93 60 00 	sts	0x0060, r24
     41a:	10 92 60 00 	sts	0x0060, r1
     41e:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     420:	8f 91       	pop	r24
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     42c:	3c 01       	movw	r6, r24
     42e:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     430:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     432:	99 24       	eor	r9, r9
     434:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     43a:	96 e0       	ldi	r25, 0x06	; 6
     43c:	a9 2e       	mov	r10, r25
     43e:	23 e8       	ldi	r18, 0x83	; 131
     440:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     442:	38 e1       	ldi	r19, 0x18	; 24
     444:	d3 2e       	mov	r13, r19
     446:	49 e2       	ldi	r20, 0x29	; 41
     448:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     44a:	90 91 13 01 	lds	r25, 0x0113
     44e:	e9 2f       	mov	r30, r25
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	e7 30       	cpi	r30, 0x07	; 7
     454:	f1 05       	cpc	r31, r1
     456:	c8 f7       	brcc	.-14     	; 0x44a <kilo_start+0x1e>
     458:	ec 5c       	subi	r30, 0xCC	; 204
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     460:	11 23       	and	r17, r17
     462:	09 f4       	brne	.+2      	; 0x466 <kilo_start+0x3a>
     464:	fc c0       	rjmp	.+504    	; 0x65e <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     466:	c0 92 13 01 	sts	0x0113, r12
     46a:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     46c:	fe 01       	movw	r30, r28
     46e:	09 95       	icall
                break;
     470:	ec cf       	rjmp	.-40     	; 0x44a <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     472:	80 91 3f 01 	lds	r24, 0x013F
     476:	81 11       	cpse	r24, r1
     478:	eb c0       	rjmp	.+470    	; 0x650 <kilo_start+0x224>
        cli();                                    // disable interrupts
     47a:	f8 94       	cli
        adc_setup_conversion(6);
     47c:	a0 92 7c 00 	sts	0x007C, r10
     480:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     484:	80 91 7a 00 	lds	r24, 0x007A
     488:	80 64       	ori	r24, 0x40	; 64
     48a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     48e:	90 91 7a 00 	lds	r25, 0x007A
     492:	96 fd       	sbrc	r25, 6
     494:	fc cf       	rjmp	.-8      	; 0x48e <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     496:	80 91 78 00 	lds	r24, 0x0078
     49a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     49e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     4a0:	8b 3a       	cpi	r24, 0xAB	; 171
     4a2:	e2 e0       	ldi	r30, 0x02	; 2
     4a4:	9e 07       	cpc	r25, r30
     4a6:	0c f0       	brlt	.+2      	; 0x4aa <kilo_start+0x7e>
     4a8:	ed c0       	rjmp	.+474    	; 0x684 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     4aa:	89 38       	cpi	r24, 0x89	; 137
     4ac:	f2 e0       	ldi	r31, 0x02	; 2
     4ae:	9f 07       	cpc	r25, r31
     4b0:	0c f0       	brlt	.+2      	; 0x4b4 <kilo_start+0x88>
     4b2:	ef c0       	rjmp	.+478    	; 0x692 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     4b4:	87 36       	cpi	r24, 0x67	; 103
     4b6:	92 40       	sbci	r25, 0x02	; 2
     4b8:	0c f4       	brge	.+2      	; 0x4bc <kilo_start+0x90>
     4ba:	ca c0       	rjmp	.+404    	; 0x650 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4bc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4be:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4c0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4c2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4c4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4c6:	3c 98       	cbi	0x07, 4	; 7
     4c8:	c0 cf       	rjmp	.-128    	; 0x44a <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     4ca:	f8 94       	cli
                acomp_off();
     4cc:	80 b7       	in	r24, 0x30	; 48
     4ce:	87 7f       	andi	r24, 0xF7	; 247
     4d0:	80 bf       	out	0x30, r24	; 48
                adc_off();
     4d2:	80 91 7a 00 	lds	r24, 0x007A
     4d6:	8f 77       	andi	r24, 0x7F	; 127
     4d8:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     4dc:	14 b8       	out	0x04, r1	; 4
     4de:	17 b8       	out	0x07, r1	; 7
     4e0:	1a b8       	out	0x0a, r1	; 10
     4e2:	15 b8       	out	0x05, r1	; 5
     4e4:	18 b8       	out	0x08, r1	; 8
     4e6:	1b b8       	out	0x0b, r1	; 11
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	a8 95       	wdr
     4ee:	d0 92 60 00 	sts	0x0060, r13
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4f8:	80 91 60 00 	lds	r24, 0x0060
     4fc:	80 64       	ori	r24, 0x40	; 64
     4fe:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     502:	93 b7       	in	r25, 0x33	; 51
     504:	91 7f       	andi	r25, 0xF1	; 241
     506:	94 60       	ori	r25, 0x04	; 4
     508:	93 bf       	out	0x33, r25	; 51
                cli();
     50a:	f8 94       	cli
                sleep_enable();
     50c:	83 b7       	in	r24, 0x33	; 51
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	83 bf       	out	0x33, r24	; 51
                sei();
     512:	78 94       	sei
                sleep_cpu();
     514:	88 95       	sleep
                sleep_disable();
     516:	83 b7       	in	r24, 0x33	; 51
     518:	8e 7f       	andi	r24, 0xFE	; 254
     51a:	83 bf       	out	0x33, r24	; 51
                sei();
     51c:	78 94       	sei
                rx_busy = 0;
     51e:	10 92 3f 01 	sts	0x013F, r1
                ports_on();
     522:	52 9a       	sbi	0x0a, 2	; 10
     524:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     526:	80 91 7a 00 	lds	r24, 0x007A
     52a:	80 68       	ori	r24, 0x80	; 128
     52c:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     530:	87 e5       	ldi	r24, 0x57	; 87
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <kilo_start+0x108>
     538:	00 c0       	rjmp	.+0      	; 0x53a <kilo_start+0x10e>
     53a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     53c:	80 b7       	in	r24, 0x30	; 48
     53e:	88 61       	ori	r24, 0x18	; 24
     540:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     542:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     544:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     546:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     548:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     54a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     54c:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54e:	ef e1       	ldi	r30, 0x1F	; 31
     550:	fe e4       	ldi	r31, 0x4E	; 78
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <kilo_start+0x126>
     556:	00 c0       	rjmp	.+0      	; 0x558 <kilo_start+0x12c>
     558:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     55a:	80 91 3f 01 	lds	r24, 0x013F
     55e:	81 11       	cpse	r24, r1
     560:	81 c0       	rjmp	.+258    	; 0x664 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     562:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     564:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     566:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     568:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     56a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     56c:	3c 98       	cbi	0x07, 4	; 7
     56e:	6d cf       	rjmp	.-294    	; 0x44a <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     570:	80 91 11 01 	lds	r24, 0x0111
     574:	81 11       	cpse	r24, r1
     576:	41 c0       	rjmp	.+130    	; 0x5fa <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     578:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     57c:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     580:	10 92 12 01 	sts	0x0112, r1
     584:	62 cf       	rjmp	.-316    	; 0x44a <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     586:	48 99       	sbic	0x09, 0	; 9
     588:	ec cf       	rjmp	.-40     	; 0x562 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     58a:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     58c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     58e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     590:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     592:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     594:	3c 98       	cbi	0x07, 4	; 7
     596:	8f ec       	ldi	r24, 0xCF	; 207
     598:	97 e0       	ldi	r25, 0x07	; 7
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <kilo_start+0x16e>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <kilo_start+0x174>
     5a0:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5a2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5a4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5a6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5a8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5aa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5ac:	3c 98       	cbi	0x07, 4	; 7
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	e1 ee       	ldi	r30, 0xE1	; 225
     5b2:	f4 e0       	ldi	r31, 0x04	; 4
     5b4:	91 50       	subi	r25, 0x01	; 1
     5b6:	e0 40       	sbci	r30, 0x00	; 0
     5b8:	f0 40       	sbci	r31, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <kilo_start+0x188>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <kilo_start+0x192>
     5be:	00 00       	nop
     5c0:	44 cf       	rjmp	.-376    	; 0x44a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5c2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5c4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5c6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5c8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5ca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5cc:	3c 98       	cbi	0x07, 4	; 7
     5ce:	ef ec       	ldi	r30, 0xCF	; 207
     5d0:	f7 e0       	ldi	r31, 0x07	; 7
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <kilo_start+0x1a6>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <kilo_start+0x1ac>
     5d8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5da:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5dc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5de:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5e0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5e2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5e4:	3c 98       	cbi	0x07, 4	; 7
     5e6:	ff ef       	ldi	r31, 0xFF	; 255
     5e8:	21 ee       	ldi	r18, 0xE1	; 225
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	f1 50       	subi	r31, 0x01	; 1
     5ee:	20 40       	sbci	r18, 0x00	; 0
     5f0:	80 40       	sbci	r24, 0x00	; 0
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <kilo_start+0x1c0>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <kilo_start+0x1ca>
     5f6:	00 00       	nop
     5f8:	28 cf       	rjmp	.-432    	; 0x44a <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     5fa:	90 91 11 01 	lds	r25, 0x0111
     5fe:	80 91 12 01 	lds	r24, 0x0112
     602:	98 17       	cp	r25, r24
     604:	09 f4       	brne	.+2      	; 0x608 <kilo_start+0x1dc>
     606:	21 cf       	rjmp	.-446    	; 0x44a <kilo_start+0x1e>
                        prev_motion = cur_motion;
     608:	80 91 11 01 	lds	r24, 0x0111
     60c:	80 93 12 01 	sts	0x0112, r24
                        if (cur_motion == MOVE_LEFT) {
     610:	80 91 11 01 	lds	r24, 0x0111
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	09 f4       	brne	.+2      	; 0x61a <kilo_start+0x1ee>
     618:	50 c0       	rjmp	.+160    	; 0x6ba <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     61a:	80 91 11 01 	lds	r24, 0x0111
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     61e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     622:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	d9 f1       	breq	.+118    	; 0x6a0 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     62a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     62e:	90 92 b4 00 	sts	0x00B4, r9
     632:	8f e2       	ldi	r24, 0x2F	; 47
     634:	95 e7       	ldi	r25, 0x75	; 117
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <kilo_start+0x20a>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <kilo_start+0x210>
     63c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     63e:	80 91 74 01 	lds	r24, 0x0174
     642:	90 91 73 01 	lds	r25, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     646:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     64a:	80 93 b4 00 	sts	0x00B4, r24
     64e:	fd ce       	rjmp	.-518    	; 0x44a <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     650:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     652:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     654:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     656:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     658:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     65a:	3c 98       	cbi	0x07, 4	; 7
     65c:	f6 ce       	rjmp	.-532    	; 0x44a <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     65e:	f3 01       	movw	r30, r6
     660:	09 95       	icall
     662:	01 cf       	rjmp	.-510    	; 0x466 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     664:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     666:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     668:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     66a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     66c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     66e:	3c 98       	cbi	0x07, 4	; 7
     670:	ff ef       	ldi	r31, 0xFF	; 255
     672:	20 e7       	ldi	r18, 0x70	; 112
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	f1 50       	subi	r31, 0x01	; 1
     678:	20 40       	sbci	r18, 0x00	; 0
     67a:	80 40       	sbci	r24, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <kilo_start+0x24a>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <kilo_start+0x254>
     680:	00 00       	nop
     682:	6f cf       	rjmp	.-290    	; 0x562 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     684:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     686:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     688:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     68a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     68c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     68e:	3c 98       	cbi	0x07, 4	; 7
     690:	dc ce       	rjmp	.-584    	; 0x44a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     692:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     694:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     696:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     698:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     69a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     69c:	3c 9a       	sbi	0x07, 4	; 7
     69e:	d5 ce       	rjmp	.-598    	; 0x44a <kilo_start+0x1e>
     6a0:	ef e2       	ldi	r30, 0x2F	; 47
     6a2:	f5 e7       	ldi	r31, 0x75	; 117
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <kilo_start+0x278>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <kilo_start+0x27e>
     6aa:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     6ac:	80 91 61 01 	lds	r24, 0x0161
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6b0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6b4:	80 93 b4 00 	sts	0x00B4, r24
     6b8:	c8 ce       	rjmp	.-624    	; 0x44a <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6ba:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     6be:	10 92 b4 00 	sts	0x00B4, r1
     6c2:	8f e2       	ldi	r24, 0x2F	; 47
     6c4:	95 e7       	ldi	r25, 0x75	; 117
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <kilo_start+0x29a>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <kilo_start+0x2a0>
     6cc:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     6ce:	80 91 75 01 	lds	r24, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6d2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6d6:	10 92 b4 00 	sts	0x00B4, r1
     6da:	b7 ce       	rjmp	.-658    	; 0x44a <kilo_start+0x1e>

000006dc <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     6dc:	07 c0       	rjmp	.+14     	; 0x6ec <delay+0x10>
     6de:	ef ec       	ldi	r30, 0xCF	; 207
     6e0:	f7 e0       	ldi	r31, 0x07	; 7
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <delay+0x6>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <delay+0xc>
     6e8:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     6ea:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6ec:	00 97       	sbiw	r24, 0x00	; 0
     6ee:	b9 f7       	brne	.-18     	; 0x6de <delay+0x2>
     6f0:	08 95       	ret

000006f2 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6f2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6f6:	60 93 b4 00 	sts	0x00B4, r22
     6fa:	08 95       	ret

000006fc <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     702:	80 93 b4 00 	sts	0x00B4, r24
     706:	8f e0       	ldi	r24, 0x0F	; 15
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	ef ec       	ldi	r30, 0xCF	; 207
     70c:	f7 e0       	ldi	r31, 0x07	; 7
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <spinup_motors+0x12>
     712:	00 c0       	rjmp	.+0      	; 0x714 <spinup_motors+0x18>
     714:	00 00       	nop
     716:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     718:	c1 f7       	brne	.-16     	; 0x70a <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     71a:	08 95       	ret

0000071c <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     71c:	80 91 3f 01 	lds	r24, 0x013F
     720:	81 11       	cpse	r24, r1
     722:	1e c0       	rjmp	.+60     	; 0x760 <get_ambientlight+0x44>
        cli();
     724:	f8 94       	cli
        adc_setup_conversion(7);
     726:	87 e0       	ldi	r24, 0x07	; 7
     728:	80 93 7c 00 	sts	0x007C, r24
     72c:	83 e8       	ldi	r24, 0x83	; 131
     72e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     732:	80 91 7a 00 	lds	r24, 0x007A
     736:	80 64       	ori	r24, 0x40	; 64
     738:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     73c:	80 91 7a 00 	lds	r24, 0x007A
     740:	86 fd       	sbrc	r24, 6
     742:	fc cf       	rjmp	.-8      	; 0x73c <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     744:	80 91 78 00 	lds	r24, 0x0078
     748:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     74c:	10 92 7c 00 	sts	0x007C, r1
     750:	23 ea       	ldi	r18, 0xA3	; 163
     752:	20 93 7a 00 	sts	0x007A, r18
     756:	21 e0       	ldi	r18, 0x01	; 1
     758:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     75c:	78 94       	sei
     75e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     764:	08 95       	ret

00000766 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     766:	80 91 3f 01 	lds	r24, 0x013F
     76a:	81 11       	cpse	r24, r1
     76c:	1e c0       	rjmp	.+60     	; 0x7aa <get_temperature+0x44>
        cli();
     76e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     770:	88 ec       	ldi	r24, 0xC8	; 200
     772:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     776:	87 e8       	ldi	r24, 0x87	; 135
     778:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     77c:	80 91 7a 00 	lds	r24, 0x007A
     780:	80 64       	ori	r24, 0x40	; 64
     782:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     786:	80 91 7a 00 	lds	r24, 0x007A
     78a:	86 fd       	sbrc	r24, 6
     78c:	fc cf       	rjmp	.-8      	; 0x786 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     78e:	80 91 78 00 	lds	r24, 0x0078
     792:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     796:	10 92 7c 00 	sts	0x007C, r1
     79a:	23 ea       	ldi	r18, 0xA3	; 163
     79c:	20 93 7a 00 	sts	0x007A, r18
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     7a6:	78 94       	sei
     7a8:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     7ae:	08 95       	ret

000007b0 <rand_hard>:

uint8_t rand_hard() {
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	e0 e0       	ldi	r30, 0x00	; 0
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     7be:	03 ea       	ldi	r16, 0xA3	; 163
     7c0:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     7c2:	d6 e0       	ldi	r29, 0x06	; 6
     7c4:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     7c6:	a1 e0       	ldi	r26, 0x01	; 1
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     7ca:	60 e8       	ldi	r22, 0x80	; 128
     7cc:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     7ce:	f8 94       	cli
            adc_setup_conversion(6);
     7d0:	d0 93 7c 00 	sts	0x007C, r29
     7d4:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     7d8:	90 91 7a 00 	lds	r25, 0x007A
     7dc:	90 64       	ori	r25, 0x40	; 64
     7de:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7e2:	90 91 7a 00 	lds	r25, 0x007A
     7e6:	96 fd       	sbrc	r25, 6
     7e8:	fc cf       	rjmp	.-8      	; 0x7e2 <rand_hard+0x32>
            a = ADCW&0x1;
     7ea:	20 91 78 00 	lds	r18, 0x0078
     7ee:	30 91 79 00 	lds	r19, 0x0079
     7f2:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     7f4:	90 91 7a 00 	lds	r25, 0x007A
     7f8:	90 64       	ori	r25, 0x40	; 64
     7fa:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7fe:	90 91 7a 00 	lds	r25, 0x007A
     802:	96 fd       	sbrc	r25, 6
     804:	fc cf       	rjmp	.-8      	; 0x7fe <rand_hard+0x4e>
            b = ADCW&0x1;
     806:	40 91 78 00 	lds	r20, 0x0078
     80a:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     80e:	10 92 7c 00 	sts	0x007C, r1
     812:	00 93 7a 00 	sts	0x007A, r16
     816:	10 93 7b 00 	sts	0x007B, r17
            sei();
     81a:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     81c:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     81e:	24 13       	cpse	r18, r20
     820:	03 c0       	rjmp	.+6      	; 0x828 <rand_hard+0x78>
     822:	61 50       	subi	r22, 0x01	; 1
     824:	71 09       	sbc	r23, r1
     826:	99 f6       	brne	.-90     	; 0x7ce <rand_hard+0x1e>
        if (a)
     828:	22 23       	and	r18, r18
     82a:	39 f0       	breq	.+14     	; 0x83a <rand_hard+0x8a>
            num |= (1<<i);
     82c:	9d 01       	movw	r18, r26
     82e:	0e 2e       	mov	r0, r30
     830:	01 c0       	rjmp	.+2      	; 0x834 <rand_hard+0x84>
     832:	22 0f       	add	r18, r18
     834:	0a 94       	dec	r0
     836:	ea f7       	brpl	.-6      	; 0x832 <rand_hard+0x82>
     838:	82 2b       	or	r24, r18
     83a:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     83c:	e8 30       	cpi	r30, 0x08	; 8
     83e:	f1 05       	cpc	r31, r1
     840:	09 f0       	breq	.+2      	; 0x844 <rand_hard+0x94>
     842:	c3 cf       	rjmp	.-122    	; 0x7ca <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     84e:	80 91 00 01 	lds	r24, 0x0100
     852:	98 2f       	mov	r25, r24
     854:	99 0f       	add	r25, r25
     856:	99 0f       	add	r25, r25
     858:	99 0f       	add	r25, r25
     85a:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     85c:	90 91 10 01 	lds	r25, 0x0110
     860:	21 e0       	ldi	r18, 0x01	; 1
     862:	29 0f       	add	r18, r25
     864:	20 93 10 01 	sts	0x0110, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     868:	28 2f       	mov	r18, r24
     86a:	22 95       	swap	r18
     86c:	26 95       	lsr	r18
     86e:	27 70       	andi	r18, 0x07	; 7
     870:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     872:	96 95       	lsr	r25
     874:	96 95       	lsr	r25
     876:	89 27       	eor	r24, r25
     878:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     87c:	08 95       	ret

0000087e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     87e:	80 93 00 01 	sts	0x0100, r24
     882:	08 95       	ret

00000884 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     884:	80 91 3f 01 	lds	r24, 0x013F
     888:	81 11       	cpse	r24, r1
     88a:	16 c0       	rjmp	.+44     	; 0x8b8 <get_voltage+0x34>
        cli();                                    // disable interrupts
     88c:	f8 94       	cli
        adc_setup_conversion(6);
     88e:	86 e0       	ldi	r24, 0x06	; 6
     890:	80 93 7c 00 	sts	0x007C, r24
     894:	83 e8       	ldi	r24, 0x83	; 131
     896:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     89a:	80 91 7a 00 	lds	r24, 0x007A
     89e:	80 64       	ori	r24, 0x40	; 64
     8a0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8a4:	80 91 7a 00 	lds	r24, 0x007A
     8a8:	86 fd       	sbrc	r24, 6
     8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     8ac:	80 91 78 00 	lds	r24, 0x0078
     8b0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     8b4:	78 94       	sei
     8b6:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     8bc:	08 95       	ret

000008be <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     8be:	2f 92       	push	r2
     8c0:	3f 92       	push	r3
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	8f 92       	push	r8
     8cc:	9f 92       	push	r9
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <estimate_distance+0x26>
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <estimate_distance+0x28>
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <estimate_distance+0x2a>
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     8ee:	dc 01       	movw	r26, r24
     8f0:	12 96       	adiw	r26, 0x02	; 2
     8f2:	0d 90       	ld	r0, X+
     8f4:	bc 91       	ld	r27, X
     8f6:	a0 2d       	mov	r26, r0
     8f8:	be 83       	std	Y+6, r27	; 0x06
     8fa:	ad 83       	std	Y+5, r26	; 0x05
     8fc:	a4 38       	cpi	r26, 0x84	; 132
     8fe:	e3 e0       	ldi	r30, 0x03	; 3
     900:	be 07       	cpc	r27, r30
     902:	0c f0       	brlt	.+2      	; 0x906 <__stack+0x7>
     904:	c9 c0       	rjmp	.+402    	; 0xa98 <__stack+0x199>
        if (dist->high_gain > kilo_irhigh[0]) {
     906:	80 91 19 01 	lds	r24, 0x0119
     90a:	90 91 1a 01 	lds	r25, 0x011A
     90e:	8a 17       	cp	r24, r26
     910:	9b 07       	cpc	r25, r27
     912:	08 f4       	brcc	.+2      	; 0x916 <__stack+0x17>
     914:	37 c1       	rjmp	.+622    	; 0xb84 <__stack+0x285>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     916:	00 91 1b 01 	lds	r16, 0x011B
     91a:	10 91 1c 01 	lds	r17, 0x011C
     91e:	0a 17       	cp	r16, r26
     920:	1b 07       	cpc	r17, r27
     922:	08 f4       	brcc	.+2      	; 0x926 <__stack+0x27>
     924:	2f c2       	rjmp	.+1118   	; 0xd84 <__stack+0x485>
     926:	00 91 1d 01 	lds	r16, 0x011D
     92a:	10 91 1e 01 	lds	r17, 0x011E
     92e:	0a 17       	cp	r16, r26
     930:	1b 07       	cpc	r17, r27
     932:	08 f4       	brcc	.+2      	; 0x936 <__stack+0x37>
     934:	2f c2       	rjmp	.+1118   	; 0xd94 <__stack+0x495>
     936:	00 91 1f 01 	lds	r16, 0x011F
     93a:	10 91 20 01 	lds	r17, 0x0120
     93e:	0a 17       	cp	r16, r26
     940:	1b 07       	cpc	r17, r27
     942:	08 f4       	brcc	.+2      	; 0x946 <__stack+0x47>
     944:	2f c2       	rjmp	.+1118   	; 0xda4 <__stack+0x4a5>
     946:	00 91 21 01 	lds	r16, 0x0121
     94a:	10 91 22 01 	lds	r17, 0x0122
     94e:	0a 17       	cp	r16, r26
     950:	1b 07       	cpc	r17, r27
     952:	08 f4       	brcc	.+2      	; 0x956 <__stack+0x57>
     954:	2f c2       	rjmp	.+1118   	; 0xdb4 <__stack+0x4b5>
     956:	00 91 23 01 	lds	r16, 0x0123
     95a:	10 91 24 01 	lds	r17, 0x0124
     95e:	0a 17       	cp	r16, r26
     960:	1b 07       	cpc	r17, r27
     962:	08 f4       	brcc	.+2      	; 0x966 <__stack+0x67>
     964:	ef c1       	rjmp	.+990    	; 0xd44 <__stack+0x445>
     966:	00 91 25 01 	lds	r16, 0x0125
     96a:	10 91 26 01 	lds	r17, 0x0126
     96e:	0a 17       	cp	r16, r26
     970:	1b 07       	cpc	r17, r27
     972:	08 f4       	brcc	.+2      	; 0x976 <__stack+0x77>
     974:	27 c2       	rjmp	.+1102   	; 0xdc4 <__stack+0x4c5>
     976:	00 91 27 01 	lds	r16, 0x0127
     97a:	10 91 28 01 	lds	r17, 0x0128
     97e:	0a 17       	cp	r16, r26
     980:	1b 07       	cpc	r17, r27
     982:	08 f4       	brcc	.+2      	; 0x986 <__stack+0x87>
     984:	27 c2       	rjmp	.+1102   	; 0xdd4 <__stack+0x4d5>
     986:	00 91 29 01 	lds	r16, 0x0129
     98a:	10 91 2a 01 	lds	r17, 0x012A
     98e:	0a 17       	cp	r16, r26
     990:	1b 07       	cpc	r17, r27
     992:	08 f4       	brcc	.+2      	; 0x996 <__stack+0x97>
     994:	27 c2       	rjmp	.+1102   	; 0xde4 <__stack+0x4e5>
     996:	00 91 2b 01 	lds	r16, 0x012B
     99a:	10 91 2c 01 	lds	r17, 0x012C
     99e:	0a 17       	cp	r16, r26
     9a0:	1b 07       	cpc	r17, r27
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	27 c2       	rjmp	.+1102   	; 0xdf4 <__stack+0x4f5>
     9a6:	00 91 2d 01 	lds	r16, 0x012D
     9aa:	10 91 2e 01 	lds	r17, 0x012E
     9ae:	0a 17       	cp	r16, r26
     9b0:	1b 07       	cpc	r17, r27
     9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	27 c2       	rjmp	.+1102   	; 0xe04 <__stack+0x505>
     9b6:	00 91 2f 01 	lds	r16, 0x012F
     9ba:	10 91 30 01 	lds	r17, 0x0130
     9be:	0a 17       	cp	r16, r26
     9c0:	1b 07       	cpc	r17, r27
     9c2:	08 f4       	brcc	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	23 c2       	rjmp	.+1094   	; 0xe0c <__stack+0x50d>
     9c6:	00 91 31 01 	lds	r16, 0x0131
     9ca:	10 91 32 01 	lds	r17, 0x0132
     9ce:	0a 17       	cp	r16, r26
     9d0:	1b 07       	cpc	r17, r27
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	23 c2       	rjmp	.+1094   	; 0xe1c <__stack+0x51d>
     9d6:	00 91 33 01 	lds	r16, 0x0133
     9da:	10 91 34 01 	lds	r17, 0x0134
     9de:	0a 17       	cp	r16, r26
     9e0:	1b 07       	cpc	r17, r27
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	23 c2       	rjmp	.+1094   	; 0xe2c <__stack+0x52d>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a0 ed       	ldi	r26, 0xD0	; 208
     9ec:	b0 e4       	ldi	r27, 0x40	; 64
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	ab 83       	std	Y+3, r26	; 0x03
     9f4:	bc 83       	std	Y+4, r27	; 0x04
     9f6:	4c e0       	ldi	r20, 0x0C	; 12
     9f8:	e4 2e       	mov	r14, r20
     9fa:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9fc:	f7 01       	movw	r30, r14
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	e7 5e       	subi	r30, 0xE7	; 231
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	b8 01       	movw	r22, r16
     a0c:	68 1b       	sub	r22, r24
     a0e:	79 0b       	sbc	r23, r25
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     a18:	9b 01       	movw	r18, r22
     a1a:	ac 01       	movw	r20, r24
     a1c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__addsf3>
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a24:	ad 81       	ldd	r26, Y+5	; 0x05
     a26:	be 81       	ldd	r27, Y+6	; 0x06
     a28:	bd 01       	movw	r22, r26
     a2a:	bb 0f       	add	r27, r27
     a2c:	88 0b       	sbc	r24, r24
     a2e:	99 0b       	sbc	r25, r25
     a30:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__floatsisf>
     a34:	4b 01       	movw	r8, r22
     a36:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     a38:	b8 01       	movw	r22, r16
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     a42:	2b 01       	movw	r4, r22
     a44:	3c 01       	movw	r6, r24
     a46:	29 81       	ldd	r18, Y+1	; 0x01
     a48:	3a 81       	ldd	r19, Y+2	; 0x02
     a4a:	4b 81       	ldd	r20, Y+3	; 0x03
     a4c:	5c 81       	ldd	r21, Y+4	; 0x04
     a4e:	c7 01       	movw	r24, r14
     a50:	b6 01       	movw	r22, r12
     a52:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
     a56:	9b 01       	movw	r18, r22
     a58:	ac 01       	movw	r20, r24
     a5a:	c3 01       	movw	r24, r6
     a5c:	b2 01       	movw	r22, r4
     a5e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__subsf3>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a66:	c5 01       	movw	r24, r10
     a68:	b4 01       	movw	r22, r8
     a6a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__subsf3>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e2       	ldi	r20, 0x20	; 32
     a74:	51 e4       	ldi	r21, 0x41	; 65
     a76:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
            b=((int)((int)b/(int)slope));
     a7a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fixsfsi>
     a7e:	8b 01       	movw	r16, r22
     a80:	c7 01       	movw	r24, r14
     a82:	b6 01       	movw	r22, r12
     a84:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fixsfsi>
     a88:	ab 01       	movw	r20, r22
     a8a:	bc 01       	movw	r22, r24
     a8c:	c8 01       	movw	r24, r16
     a8e:	ba 01       	movw	r22, r20
     a90:	0e 94 94 0a 	call	0x1528	; 0x1528 <__divmodhi4>
            dist_high=b;
     a94:	16 2f       	mov	r17, r22
     a96:	77 c0       	rjmp	.+238    	; 0xb86 <__stack+0x287>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a98:	dc 01       	movw	r26, r24
     a9a:	cd 90       	ld	r12, X+
     a9c:	dc 90       	ld	r13, X
     a9e:	80 91 40 01 	lds	r24, 0x0140
     aa2:	90 91 41 01 	lds	r25, 0x0141
     aa6:	8c 15       	cp	r24, r12
     aa8:	9d 05       	cpc	r25, r13
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__stack+0x1af>
     aac:	8c c0       	rjmp	.+280    	; 0xbc6 <__stack+0x2c7>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     aae:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ab0:	e0 90 42 01 	lds	r14, 0x0142
     ab4:	f0 90 43 01 	lds	r15, 0x0143
     ab8:	ec 14       	cp	r14, r12
     aba:	fd 04       	cpc	r15, r13
     abc:	08 f4       	brcc	.+2      	; 0xac0 <__stack+0x1c1>
     abe:	5e c1       	rjmp	.+700    	; 0xd7c <__stack+0x47d>
     ac0:	e0 90 44 01 	lds	r14, 0x0144
     ac4:	f0 90 45 01 	lds	r15, 0x0145
     ac8:	ec 14       	cp	r14, r12
     aca:	fd 04       	cpc	r15, r13
     acc:	08 f4       	brcc	.+2      	; 0xad0 <__stack+0x1d1>
     ace:	5e c1       	rjmp	.+700    	; 0xd8c <__stack+0x48d>
     ad0:	e0 90 46 01 	lds	r14, 0x0146
     ad4:	f0 90 47 01 	lds	r15, 0x0147
     ad8:	ec 14       	cp	r14, r12
     ada:	fd 04       	cpc	r15, r13
     adc:	08 f4       	brcc	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	5e c1       	rjmp	.+700    	; 0xd9c <__stack+0x49d>
     ae0:	e0 90 48 01 	lds	r14, 0x0148
     ae4:	f0 90 49 01 	lds	r15, 0x0149
     ae8:	ec 14       	cp	r14, r12
     aea:	fd 04       	cpc	r15, r13
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <__stack+0x1f1>
     aee:	5e c1       	rjmp	.+700    	; 0xdac <__stack+0x4ad>
     af0:	e0 90 4a 01 	lds	r14, 0x014A
     af4:	f0 90 4b 01 	lds	r15, 0x014B
     af8:	ec 14       	cp	r14, r12
     afa:	fd 04       	cpc	r15, r13
     afc:	08 f4       	brcc	.+2      	; 0xb00 <__stack+0x201>
     afe:	c3 c0       	rjmp	.+390    	; 0xc86 <__stack+0x387>
     b00:	e0 90 4c 01 	lds	r14, 0x014C
     b04:	f0 90 4d 01 	lds	r15, 0x014D
     b08:	ec 14       	cp	r14, r12
     b0a:	fd 04       	cpc	r15, r13
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <__stack+0x211>
     b0e:	56 c1       	rjmp	.+684    	; 0xdbc <__stack+0x4bd>
     b10:	e0 90 4e 01 	lds	r14, 0x014E
     b14:	f0 90 4f 01 	lds	r15, 0x014F
     b18:	ec 14       	cp	r14, r12
     b1a:	fd 04       	cpc	r15, r13
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <__stack+0x221>
     b1e:	56 c1       	rjmp	.+684    	; 0xdcc <__stack+0x4cd>
     b20:	e0 90 50 01 	lds	r14, 0x0150
     b24:	f0 90 51 01 	lds	r15, 0x0151
     b28:	ec 14       	cp	r14, r12
     b2a:	fd 04       	cpc	r15, r13
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <__stack+0x231>
     b2e:	56 c1       	rjmp	.+684    	; 0xddc <__stack+0x4dd>
     b30:	e0 90 52 01 	lds	r14, 0x0152
     b34:	f0 90 53 01 	lds	r15, 0x0153
     b38:	ec 14       	cp	r14, r12
     b3a:	fd 04       	cpc	r15, r13
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <__stack+0x241>
     b3e:	56 c1       	rjmp	.+684    	; 0xdec <__stack+0x4ed>
     b40:	e0 90 54 01 	lds	r14, 0x0154
     b44:	f0 90 55 01 	lds	r15, 0x0155
     b48:	ec 14       	cp	r14, r12
     b4a:	fd 04       	cpc	r15, r13
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <__stack+0x251>
     b4e:	56 c1       	rjmp	.+684    	; 0xdfc <__stack+0x4fd>
     b50:	e0 90 56 01 	lds	r14, 0x0156
     b54:	f0 90 57 01 	lds	r15, 0x0157
     b58:	ec 14       	cp	r14, r12
     b5a:	fd 04       	cpc	r15, r13
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <__stack+0x261>
     b5e:	5a c1       	rjmp	.+692    	; 0xe14 <__stack+0x515>
     b60:	e0 90 58 01 	lds	r14, 0x0158
     b64:	f0 90 59 01 	lds	r15, 0x0159
     b68:	ec 14       	cp	r14, r12
     b6a:	fd 04       	cpc	r15, r13
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <__stack+0x271>
     b6e:	5a c1       	rjmp	.+692    	; 0xe24 <__stack+0x525>
     b70:	e0 90 5a 01 	lds	r14, 0x015A
     b74:	f0 90 5b 01 	lds	r15, 0x015B
     b78:	ec 14       	cp	r14, r12
     b7a:	fd 04       	cpc	r15, r13
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <__stack+0x281>
     b7e:	5a c1       	rjmp	.+692    	; 0xe34 <__stack+0x535>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b80:	0a e5       	ldi	r16, 0x5A	; 90
     b82:	31 c0       	rjmp	.+98     	; 0xbe6 <__stack+0x2e7>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b84:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b86:	ed 81       	ldd	r30, Y+5	; 0x05
     b88:	fe 81       	ldd	r31, Y+6	; 0x06
     b8a:	ed 3b       	cpi	r30, 0xBD	; 189
     b8c:	f2 40       	sbci	r31, 0x02	; 2
     b8e:	fc f4       	brge	.+62     	; 0xbce <__stack+0x2cf>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b90:	81 e2       	ldi	r24, 0x21	; 33
     b92:	81 0f       	add	r24, r17
    }
}
     b94:	26 96       	adiw	r28, 0x06	; 6
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	7f 90       	pop	r7
     bba:	6f 90       	pop	r6
     bbc:	5f 90       	pop	r5
     bbe:	4f 90       	pop	r4
     bc0:	3f 90       	pop	r3
     bc2:	2f 90       	pop	r2
     bc4:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     bc6:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     bc8:	81 e2       	ldi	r24, 0x21	; 33
     bca:	80 0f       	add	r24, r16
     bcc:	e3 cf       	rjmp	.-58     	; 0xb94 <__stack+0x295>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bce:	d1 01       	movw	r26, r2
     bd0:	cd 90       	ld	r12, X+
     bd2:	dc 90       	ld	r13, X
     bd4:	80 91 40 01 	lds	r24, 0x0140
     bd8:	90 91 41 01 	lds	r25, 0x0141
     bdc:	8c 15       	cp	r24, r12
     bde:	9d 05       	cpc	r25, r13
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <__stack+0x2e5>
     be2:	66 cf       	rjmp	.-308    	; 0xab0 <__stack+0x1b1>
            dist_low=0;
     be4:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     be6:	1f 3f       	cpi	r17, 0xFF	; 255
     be8:	79 f3       	breq	.-34     	; 0xbc8 <__stack+0x2c9>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     bea:	ed 81       	ldd	r30, Y+5	; 0x05
     bec:	fe 81       	ldd	r31, Y+6	; 0x06
     bee:	bf 01       	movw	r22, r30
     bf0:	ff 0f       	add	r31, r31
     bf2:	88 0b       	sbc	r24, r24
     bf4:	99 0b       	sbc	r25, r25
     bf6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__floatsisf>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	61 2f       	mov	r22, r17
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     c0a:	4b 01       	movw	r8, r22
     c0c:	5c 01       	movw	r10, r24
     c0e:	a7 01       	movw	r20, r14
     c10:	96 01       	movw	r18, r12
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	81 e6       	ldi	r24, 0x61	; 97
     c18:	94 e4       	ldi	r25, 0x44	; 68
     c1a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__subsf3>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	c5 01       	movw	r24, r10
     c24:	b4 01       	movw	r22, r8
     c26:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
     c2a:	4b 01       	movw	r8, r22
     c2c:	5c 01       	movw	r10, r24
     c2e:	60 2f       	mov	r22, r16
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     c3a:	2b 01       	movw	r4, r22
     c3c:	3c 01       	movw	r6, r24
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	4f e2       	ldi	r20, 0x2F	; 47
     c44:	54 e4       	ldi	r21, 0x44	; 68
     c46:	c7 01       	movw	r24, r14
     c48:	b6 01       	movw	r22, r12
     c4a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__subsf3>
     c4e:	9b 01       	movw	r18, r22
     c50:	ac 01       	movw	r20, r24
     c52:	c3 01       	movw	r24, r6
     c54:	b2 01       	movw	r22, r4
     c56:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
     c5a:	9b 01       	movw	r18, r22
     c5c:	ac 01       	movw	r20, r24
     c5e:	c5 01       	movw	r24, r10
     c60:	b4 01       	movw	r22, r8
     c62:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__addsf3>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	48 e4       	ldi	r20, 0x48	; 72
     c6c:	53 e4       	ldi	r21, 0x43	; 67
     c6e:	0e 94 3e 0b 	call	0x167c	; 0x167c <__divsf3>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	44 e0       	ldi	r20, 0x04	; 4
     c78:	52 e4       	ldi	r21, 0x42	; 66
     c7a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__addsf3>
     c7e:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fixunssfsi>
     c82:	86 2f       	mov	r24, r22
     c84:	87 cf       	rjmp	.-242    	; 0xb94 <__stack+0x295>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c86:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c88:	85 e0       	ldi	r24, 0x05	; 5
     c8a:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	fc 01       	movw	r30, r24
     c92:	e2 5c       	subi	r30, 0xC2	; 194
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	b7 01       	movw	r22, r14
     c9c:	68 1b       	sub	r22, r24
     c9e:	79 0b       	sbc	r23, r25
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
     cac:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__addsf3>
     cb0:	4b 01       	movw	r8, r22
     cb2:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cb4:	b6 01       	movw	r22, r12
     cb6:	dd 0c       	add	r13, r13
     cb8:	88 0b       	sbc	r24, r24
     cba:	99 0b       	sbc	r25, r25
     cbc:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__floatsisf>
     cc0:	2b 01       	movw	r4, r22
     cc2:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     cc4:	b7 01       	movw	r22, r14
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	60 2f       	mov	r22, r16
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	a9 01       	movw	r20, r18
     cf0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__addsf3>
     cf4:	a5 01       	movw	r20, r10
     cf6:	94 01       	movw	r18, r8
     cf8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	c7 01       	movw	r24, r14
     d02:	b6 01       	movw	r22, r12
     d04:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__subsf3>
     d08:	9b 01       	movw	r18, r22
     d0a:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d0c:	c3 01       	movw	r24, r6
     d0e:	b2 01       	movw	r22, r4
     d10:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__subsf3>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	51 e4       	ldi	r21, 0x41	; 65
     d1c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
                b=((int)((int)b/(int)slope));
     d20:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fixsfsi>
     d24:	7b 01       	movw	r14, r22
     d26:	c5 01       	movw	r24, r10
     d28:	b4 01       	movw	r22, r8
     d2a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fixsfsi>
     d2e:	ab 01       	movw	r20, r22
     d30:	bc 01       	movw	r22, r24
     d32:	c7 01       	movw	r24, r14
     d34:	ba 01       	movw	r22, r20
     d36:	0e 94 94 0a 	call	0x1528	; 0x1528 <__divmodhi4>
                dist_low=b;
     d3a:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     d3c:	6f 3f       	cpi	r22, 0xFF	; 255
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__stack+0x443>
     d40:	52 cf       	rjmp	.-348    	; 0xbe6 <__stack+0x2e7>
     d42:	26 cf       	rjmp	.-436    	; 0xb90 <__stack+0x291>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d44:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     d46:	85 e0       	ldi	r24, 0x05	; 5
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	7c 01       	movw	r14, r24
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	ef 1a       	sub	r14, r31
     d50:	f1 08       	sbc	r15, r1
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatunsisf>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__mulsf3>
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	a9 01       	movw	r20, r18
     d6e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__addsf3>
     d72:	69 83       	std	Y+1, r22	; 0x01
     d74:	7a 83       	std	Y+2, r23	; 0x02
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d7a:	40 ce       	rjmp	.-896    	; 0x9fc <__stack+0xfd>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d7c:	01 e0       	ldi	r16, 0x01	; 1
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	84 cf       	rjmp	.-248    	; 0xc8c <__stack+0x38d>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	df cf       	rjmp	.-66     	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d8c:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	7c cf       	rjmp	.-264    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d94:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	d7 cf       	rjmp	.-82     	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d9c:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	74 cf       	rjmp	.-280    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da4:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	cf cf       	rjmp	.-98     	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dac:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	6c cf       	rjmp	.-296    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db4:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	c7 cf       	rjmp	.-114    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dbc:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     dbe:	86 e0       	ldi	r24, 0x06	; 6
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	64 cf       	rjmp	.-312    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dc4:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     dc6:	86 e0       	ldi	r24, 0x06	; 6
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	bf cf       	rjmp	.-130    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dcc:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     dce:	87 e0       	ldi	r24, 0x07	; 7
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	5c cf       	rjmp	.-328    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dd4:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     dd6:	87 e0       	ldi	r24, 0x07	; 7
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	b7 cf       	rjmp	.-146    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ddc:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     dde:	88 e0       	ldi	r24, 0x08	; 8
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	54 cf       	rjmp	.-344    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     de4:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	af cf       	rjmp	.-162    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dec:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     dee:	89 e0       	ldi	r24, 0x09	; 9
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	4c cf       	rjmp	.-360    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     df4:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     df6:	89 e0       	ldi	r24, 0x09	; 9
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	a7 cf       	rjmp	.-178    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dfc:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     dfe:	8a e0       	ldi	r24, 0x0A	; 10
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	44 cf       	rjmp	.-376    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e04:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     e06:	8a e0       	ldi	r24, 0x0A	; 10
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9f cf       	rjmp	.-194    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e0c:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     e0e:	8b e0       	ldi	r24, 0x0B	; 11
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9b cf       	rjmp	.-202    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e14:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     e16:	8b e0       	ldi	r24, 0x0B	; 11
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	38 cf       	rjmp	.-400    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e1c:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     e1e:	8c e0       	ldi	r24, 0x0C	; 12
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	93 cf       	rjmp	.-218    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e24:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     e26:	8c e0       	ldi	r24, 0x0C	; 12
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	30 cf       	rjmp	.-416    	; 0xc8c <__stack+0x38d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e2c:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     e2e:	8d e0       	ldi	r24, 0x0D	; 13
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	8b cf       	rjmp	.-234    	; 0xd4a <__stack+0x44b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e34:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     e36:	8d e0       	ldi	r24, 0x0D	; 13
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	28 cf       	rjmp	.-432    	; 0xc8c <__stack+0x38d>

00000e3c <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
    tx_clock += tx_increment;
     e5e:	20 91 5f 01 	lds	r18, 0x015F
     e62:	30 91 60 01 	lds	r19, 0x0160
     e66:	80 91 5d 01 	lds	r24, 0x015D
     e6a:	90 91 5e 01 	lds	r25, 0x015E
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	90 93 60 01 	sts	0x0160, r25
     e76:	80 93 5f 01 	sts	0x015F, r24
    tx_increment = 0xFF;
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	90 93 5e 01 	sts	0x015E, r25
     e82:	80 93 5d 01 	sts	0x015D, r24
    OCR0A = tx_increment;
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e8a:	80 91 3b 01 	lds	r24, 0x013B
     e8e:	90 91 3c 01 	lds	r25, 0x013C
     e92:	a0 91 3d 01 	lds	r26, 0x013D
     e96:	b0 91 3e 01 	lds	r27, 0x013E
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	a1 1d       	adc	r26, r1
     e9e:	b1 1d       	adc	r27, r1
     ea0:	80 93 3b 01 	sts	0x013B, r24
     ea4:	90 93 3c 01 	sts	0x013C, r25
     ea8:	a0 93 3d 01 	sts	0x013D, r26
     eac:	b0 93 3e 01 	sts	0x013E, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     eb0:	80 91 3f 01 	lds	r24, 0x013F
     eb4:	81 11       	cpse	r24, r1
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <__vector_14+0x9a>
     eb8:	80 91 6e 01 	lds	r24, 0x016E
     ebc:	90 91 6f 01 	lds	r25, 0x016F
     ec0:	20 91 5f 01 	lds	r18, 0x015F
     ec4:	30 91 60 01 	lds	r19, 0x0160
     ec8:	82 17       	cp	r24, r18
     eca:	93 07       	cpc	r25, r19
     ecc:	20 f4       	brcc	.+8      	; 0xed6 <__vector_14+0x9a>
     ece:	80 91 13 01 	lds	r24, 0x0113
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	89 f0       	breq	.+34     	; 0xef8 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ef8:	e0 91 03 01 	lds	r30, 0x0103
     efc:	f0 91 04 01 	lds	r31, 0x0104
     f00:	09 95       	icall
        if (msg) {
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	41 f3       	breq	.-48     	; 0xed6 <__vector_14+0x9a>
            if (message_send(msg)) {
     f06:	0e 94 06 0a 	call	0x140c	; 0x140c <message_send>
     f0a:	81 11       	cpse	r24, r1
     f0c:	09 c0       	rjmp	.+18     	; 0xf20 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     f0e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <rand>
     f12:	99 27       	eor	r25, r25
     f14:	90 93 5e 01 	sts	0x015E, r25
     f18:	80 93 5d 01 	sts	0x015D, r24
                OCR0A = tx_increment;
     f1c:	87 bd       	out	0x27, r24	; 39
     f1e:	db cf       	rjmp	.-74     	; 0xed6 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     f20:	e0 91 01 01 	lds	r30, 0x0101
     f24:	f0 91 02 01 	lds	r31, 0x0102
     f28:	09 95       	icall
                tx_clock = 0;
     f2a:	10 92 60 01 	sts	0x0160, r1
     f2e:	10 92 5f 01 	sts	0x015F, r1
     f32:	d1 cf       	rjmp	.-94     	; 0xed6 <__vector_14+0x9a>

00000f34 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     f34:	80 ff       	sbrs	r24, 0
     f36:	11 c0       	rjmp	.+34     	; 0xf5a <set_color+0x26>
        DDRD |= (1<<5);
     f38:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     f3a:	81 ff       	sbrs	r24, 1
     f3c:	11 c0       	rjmp	.+34     	; 0xf60 <set_color+0x2c>
        DDRD |= (1<<4);
     f3e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     f40:	82 ff       	sbrs	r24, 2
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <set_color+0x32>
        DDRC |= (1<<3);
     f44:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     f46:	83 ff       	sbrs	r24, 3
     f48:	11 c0       	rjmp	.+34     	; 0xf6c <set_color+0x38>
        DDRC |= (1<<2);
     f4a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     f4c:	84 ff       	sbrs	r24, 4
     f4e:	11 c0       	rjmp	.+34     	; 0xf72 <set_color+0x3e>
        DDRC |= (1<<5);
     f50:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     f52:	85 fd       	sbrc	r24, 5
     f54:	11 c0       	rjmp	.+34     	; 0xf78 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f56:	3c 98       	cbi	0x07, 4	; 7
     f58:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f5a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f5c:	81 fd       	sbrc	r24, 1
     f5e:	ef cf       	rjmp	.-34     	; 0xf3e <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f60:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f62:	82 fd       	sbrc	r24, 2
     f64:	ef cf       	rjmp	.-34     	; 0xf44 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f66:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f68:	83 fd       	sbrc	r24, 3
     f6a:	ef cf       	rjmp	.-34     	; 0xf4a <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f6c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f6e:	84 fd       	sbrc	r24, 4
     f70:	ef cf       	rjmp	.-34     	; 0xf50 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f72:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f74:	85 ff       	sbrs	r24, 5
     f76:	ef cf       	rjmp	.-34     	; 0xf56 <set_color+0x22>
        DDRC |= (1<<4);
     f78:	3c 9a       	sbi	0x07, 4	; 7
     f7a:	08 95       	ret

00000f7c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
    rx_timer_off();
     f8a:	10 92 81 00 	sts	0x0081, r1
     f8e:	10 92 85 00 	sts	0x0085, r1
     f92:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 18 01 	sts	0x0118, r24
    rx_leadingbyte = 1;
     f9c:	80 93 5c 01 	sts	0x015C, r24
    rx_busy = 0;
     fa0:	10 92 3f 01 	sts	0x013F, r1
    adc_trigger_high_gain();
     fa4:	10 92 7c 00 	sts	0x007C, r1
     fa8:	93 ea       	ldi	r25, 0xA3	; 163
     faa:	90 93 7a 00 	sts	0x007A, r25
     fae:	80 93 7b 00 	sts	0x007B, r24
}
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	0f 90       	pop	r0
     fbc:	1f 90       	pop	r1
     fbe:	18 95       	reti

00000fc0 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	ef 93       	push	r30
     fe4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     fe6:	20 91 84 00 	lds	r18, 0x0084
     fea:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	40 93 3f 01 	sts	0x013F, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ff4:	80 91 18 01 	lds	r24, 0x0118
     ff8:	88 23       	and	r24, r24
     ffa:	a9 f1       	breq	.+106    	; 0x1066 <__vector_23+0xa6>
        rx_timer_on();
     ffc:	10 92 85 00 	sts	0x0085, r1
    1000:	10 92 84 00 	sts	0x0084, r1
    1004:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1008:	10 92 70 01 	sts	0x0170, r1
        rx_leadingbit = 0;
    100c:	10 92 18 01 	sts	0x0118, r1
        if (rx_leadingbyte) {
    1010:	80 91 5c 01 	lds	r24, 0x015C
    1014:	88 23       	and	r24, r24
    1016:	a1 f0       	breq	.+40     	; 0x1040 <__vector_23+0x80>
            adc_finish_conversion();
    1018:	80 91 7a 00 	lds	r24, 0x007A
    101c:	86 fd       	sbrc	r24, 6
    101e:	fc cf       	rjmp	.-8      	; 0x1018 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1020:	80 91 78 00 	lds	r24, 0x0078
    1024:	90 91 79 00 	lds	r25, 0x0079
    1028:	90 93 3a 01 	sts	0x013A, r25
    102c:	80 93 39 01 	sts	0x0139, r24
            adc_trigger_low_gain();
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	80 93 7c 00 	sts	0x007C, r24
    1036:	93 ea       	ldi	r25, 0xA3	; 163
    1038:	90 93 7a 00 	sts	0x007A, r25
    103c:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1066:	c9 01       	movw	r24, r18
    1068:	87 58       	subi	r24, 0x87	; 135
    106a:	91 09       	sbc	r25, r1
    106c:	84 37       	cpi	r24, 0x74	; 116
    106e:	99 40       	sbci	r25, 0x09	; 9
    1070:	08 f0       	brcs	.+2      	; 0x1074 <__vector_23+0xb4>
    1072:	52 c0       	rjmp	.+164    	; 0x1118 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1074:	26 58       	subi	r18, 0x86	; 134
    1076:	31 09       	sbc	r19, r1
    1078:	a4 ef       	ldi	r26, 0xF4	; 244
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__umulhisi3>
    1080:	aa 27       	eor	r26, r26
    1082:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	91 05       	cpc	r25, r1
    1088:	a1 05       	cpc	r26, r1
    108a:	b1 05       	cpc	r27, r1
    108c:	08 f4       	brcc	.+2      	; 0x1090 <__vector_23+0xd0>
    108e:	7b c0       	rjmp	.+246    	; 0x1186 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1090:	40 93 18 01 	sts	0x0118, r20
                if (rx_leadingbyte) {
    1094:	80 91 5c 01 	lds	r24, 0x015C
    1098:	81 11       	cpse	r24, r1
    109a:	52 c0       	rjmp	.+164    	; 0x1140 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    109c:	80 91 36 01 	lds	r24, 0x0136
    10a0:	e8 2f       	mov	r30, r24
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	ee 59       	subi	r30, 0x9E	; 158
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	90 91 70 01 	lds	r25, 0x0170
    10ac:	90 83       	st	Z, r25
                    rx_byteindex++;
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 93 36 01 	sts	0x0136, r24
                    if (rx_byteindex == sizeof(message_t)) {
    10b4:	8c 30       	cpi	r24, 0x0C	; 12
    10b6:	21 f6       	brne	.-120    	; 0x1040 <__vector_23+0x80>
                        rx_timer_off();
    10b8:	10 92 81 00 	sts	0x0081, r1
    10bc:	10 92 85 00 	sts	0x0085, r1
    10c0:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10c4:	40 93 5c 01 	sts	0x015C, r20
                        rx_busy = 0;
    10c8:	10 92 3f 01 	sts	0x013F, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    10cc:	c0 91 6c 01 	lds	r28, 0x016C
    10d0:	d0 91 6d 01 	lds	r29, 0x016D
    10d4:	82 e6       	ldi	r24, 0x62	; 98
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <message_crc>
    10dc:	c8 17       	cp	r28, r24
    10de:	d9 07       	cpc	r29, r25
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__vector_23+0x124>
    10e2:	ae cf       	rjmp	.-164    	; 0x1040 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    10e4:	80 91 6b 01 	lds	r24, 0x016B
    10e8:	87 ff       	sbrs	r24, 7
    10ea:	61 c0       	rjmp	.+194    	; 0x11ae <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    10ec:	98 e7       	ldi	r25, 0x78	; 120
    10ee:	98 0f       	add	r25, r24
    10f0:	93 30       	cpi	r25, 0x03	; 3
    10f2:	30 f0       	brcs	.+12     	; 0x1100 <__vector_23+0x140>
        motors_off();
    10f4:	53 98       	cbi	0x0a, 3	; 10
    10f6:	23 98       	cbi	0x04, 3	; 4
    10f8:	10 92 b4 00 	sts	0x00B4, r1
    10fc:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	fc 01       	movw	r30, r24
    1104:	e0 58       	subi	r30, 0x80	; 128
    1106:	f1 09       	sbc	r31, r1
    1108:	eb 30       	cpi	r30, 0x0B	; 11
    110a:	f1 05       	cpc	r31, r1
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__vector_23+0x150>
    110e:	98 cf       	rjmp	.-208    	; 0x1040 <__vector_23+0x80>
    1110:	e5 5c       	subi	r30, 0xC5	; 197
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1118:	10 92 81 00 	sts	0x0081, r1
    111c:	10 92 85 00 	sts	0x0085, r1
    1120:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1124:	40 93 18 01 	sts	0x0118, r20
            rx_leadingbyte = 1;
    1128:	40 93 5c 01 	sts	0x015C, r20
            rx_busy = 0;
    112c:	10 92 3f 01 	sts	0x013F, r1
            adc_trigger_high_gain();
    1130:	10 92 7c 00 	sts	0x007C, r1
    1134:	83 ea       	ldi	r24, 0xA3	; 163
    1136:	80 93 7a 00 	sts	0x007A, r24
    113a:	40 93 7b 00 	sts	0x007B, r20
    113e:	80 cf       	rjmp	.-256    	; 0x1040 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1140:	80 91 7a 00 	lds	r24, 0x007A
    1144:	86 fd       	sbrc	r24, 6
    1146:	fc cf       	rjmp	.-8      	; 0x1140 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1148:	80 91 78 00 	lds	r24, 0x0078
    114c:	90 91 79 00 	lds	r25, 0x0079
    1150:	90 93 38 01 	sts	0x0138, r25
    1154:	80 93 37 01 	sts	0x0137, r24
                    adc_trigger_high_gain();
    1158:	10 92 7c 00 	sts	0x007C, r1
    115c:	83 ea       	ldi	r24, 0xA3	; 163
    115e:	80 93 7a 00 	sts	0x007A, r24
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1168:	90 91 70 01 	lds	r25, 0x0170
    116c:	99 23       	and	r25, r25
    116e:	d1 f0       	breq	.+52     	; 0x11a4 <__vector_23+0x1e4>
                        rx_timer_off();
    1170:	10 92 81 00 	sts	0x0081, r1
    1174:	10 92 85 00 	sts	0x0085, r1
    1178:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    117c:	80 93 5c 01 	sts	0x015C, r24
                        rx_busy = 0;
    1180:	10 92 3f 01 	sts	0x013F, r1
    1184:	5d cf       	rjmp	.-326    	; 0x1040 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	f9 01       	movw	r30, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <__vector_23+0x1d2>
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <__vector_23+0x1ce>
    1196:	cf 01       	movw	r24, r30
    1198:	90 91 70 01 	lds	r25, 0x0170
    119c:	89 2b       	or	r24, r25
    119e:	80 93 70 01 	sts	0x0170, r24
    11a2:	4e cf       	rjmp	.-356    	; 0x1040 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    11a4:	10 92 5c 01 	sts	0x015C, r1
                        rx_byteindex = 0;
    11a8:	10 92 36 01 	sts	0x0136, r1
    11ac:	49 cf       	rjmp	.-366    	; 0x1040 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    11ae:	e0 91 05 01 	lds	r30, 0x0105
    11b2:	f0 91 06 01 	lds	r31, 0x0106
    11b6:	67 e3       	ldi	r22, 0x37	; 55
    11b8:	71 e0       	ldi	r23, 0x01	; 1
    11ba:	82 e6       	ldi	r24, 0x62	; 98
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	09 95       	icall
    11c0:	3f cf       	rjmp	.-386    	; 0x1040 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    11c2:	80 91 62 01 	lds	r24, 0x0162
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__vector_23+0x20c>
    11ca:	dd c0       	rjmp	.+442    	; 0x1386 <__vector_23+0x3c6>
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <__vector_23+0x210>
    11ce:	ba c0       	rjmp	.+372    	; 0x1344 <__vector_23+0x384>
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <__vector_23+0x216>
    11d4:	c6 c0       	rjmp	.+396    	; 0x1362 <__vector_23+0x3a2>
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	09 f0       	breq	.+2      	; 0x11dc <__vector_23+0x21c>
    11da:	b1 c0       	rjmp	.+354    	; 0x133e <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    11dc:	80 91 11 01 	lds	r24, 0x0111
    11e0:	90 91 68 01 	lds	r25, 0x0168
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__vector_23+0x22a>
    11e8:	e3 c0       	rjmp	.+454    	; 0x13b0 <__vector_23+0x3f0>
    11ea:	80 91 67 01 	lds	r24, 0x0167
                        prev_motion = MOVE_STOP;
    11ee:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_STRAIGHT;
    11f2:	23 e0       	ldi	r18, 0x03	; 3
    11f4:	20 93 11 01 	sts	0x0111, r18
                        kilo_straight_left = calibmsg->straight_left;
    11f8:	80 93 73 01 	sts	0x0173, r24
                        kilo_straight_right = calibmsg->straight_right;
    11fc:	90 93 74 01 	sts	0x0174, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1200:	80 91 13 01 	lds	r24, 0x0113
    1204:	86 30       	cpi	r24, 0x06	; 6
    1206:	09 f4       	brne	.+2      	; 0x120a <__vector_23+0x24a>
    1208:	1b cf       	rjmp	.-458    	; 0x1040 <__vector_23+0x80>
                motors_on();
    120a:	53 9a       	sbi	0x0a, 3	; 10
    120c:	23 9a       	sbi	0x04, 3	; 4
    120e:	10 92 b4 00 	sts	0x00B4, r1
    1212:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	80 93 13 01 	sts	0x0113, r24
    121c:	11 cf       	rjmp	.-478    	; 0x1040 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    121e:	80 91 13 01 	lds	r24, 0x0113
    1222:	86 30       	cpi	r24, 0x06	; 6
    1224:	99 f0       	breq	.+38     	; 0x124c <__vector_23+0x28c>
                motors_on();
    1226:	53 9a       	sbi	0x0a, 3	; 10
    1228:	23 9a       	sbi	0x04, 3	; 4
    122a:	10 92 b4 00 	sts	0x00B4, r1
    122e:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1232:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1234:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1236:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1238:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    123a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    123c:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    123e:	10 92 11 01 	sts	0x0111, r1
    1242:	10 92 12 01 	sts	0x0112, r1
                kilo_state = MOVING;
    1246:	86 e0       	ldi	r24, 0x06	; 6
    1248:	80 93 13 01 	sts	0x0113, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9c 01       	movw	r18, r24
    1252:	00 90 62 01 	lds	r0, 0x0162
    1256:	02 c0       	rjmp	.+4      	; 0x125c <__vector_23+0x29c>
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <__vector_23+0x298>
    1260:	80 91 71 01 	lds	r24, 0x0171
    1264:	90 91 72 01 	lds	r25, 0x0172
    1268:	82 23       	and	r24, r18
    126a:	93 23       	and	r25, r19
    126c:	89 2b       	or	r24, r25
    126e:	09 f0       	breq	.+2      	; 0x1272 <__vector_23+0x2b2>
    1270:	86 c0       	rjmp	.+268    	; 0x137e <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1272:	10 92 11 01 	sts	0x0111, r1
    1276:	e4 ce       	rjmp	.-568    	; 0x1040 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 13 01 	sts	0x0113, r24
    127e:	e0 ce       	rjmp	.-576    	; 0x1040 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1280:	e0 e0       	ldi	r30, 0x00	; 0
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1286:	80 91 6e 00 	lds	r24, 0x006E
    128a:	8d 7f       	andi	r24, 0xFD	; 253
    128c:	80 93 6e 00 	sts	0x006E, r24
    1290:	16 bc       	out	0x26, r1	; 38
            bootload();
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	f0 e7       	ldi	r31, 0x70	; 112
    1296:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1298:	10 92 13 01 	sts	0x0113, r1
    129c:	d1 ce       	rjmp	.-606    	; 0x1040 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	80 93 13 01 	sts	0x0113, r24
    12a4:	cd ce       	rjmp	.-614    	; 0x1040 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    12a6:	85 e0       	ldi	r24, 0x05	; 5
    12a8:	80 93 13 01 	sts	0x0113, r24
    12ac:	c9 ce       	rjmp	.-622    	; 0x1040 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    12ae:	80 91 13 01 	lds	r24, 0x0113
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <__vector_23+0x2f8>
    12b6:	c4 ce       	rjmp	.-632    	; 0x1040 <__vector_23+0x80>
    12b8:	80 91 13 01 	lds	r24, 0x0113
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	09 f4       	brne	.+2      	; 0x12c2 <__vector_23+0x302>
    12c0:	bf ce       	rjmp	.-642    	; 0x1040 <__vector_23+0x80>
                motors_on();
    12c2:	53 9a       	sbi	0x0a, 3	; 10
    12c4:	23 9a       	sbi	0x04, 3	; 4
    12c6:	10 92 b4 00 	sts	0x00B4, r1
    12ca:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    12ce:	83 e0       	ldi	r24, 0x03	; 3
    12d0:	80 93 13 01 	sts	0x0113, r24
    12d4:	b5 ce       	rjmp	.-662    	; 0x1040 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    12d6:	80 91 13 01 	lds	r24, 0x0113
    12da:	86 30       	cpi	r24, 0x06	; 6
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_23+0x320>
    12de:	b0 ce       	rjmp	.-672    	; 0x1040 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    12e0:	60 91 71 01 	lds	r22, 0x0171
    12e4:	80 eb       	ldi	r24, 0xB0	; 176
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    12ec:	60 91 72 01 	lds	r22, 0x0172
    12f0:	81 eb       	ldi	r24, 0xB1	; 177
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12f8:	60 91 75 01 	lds	r22, 0x0175
    12fc:	85 e0       	ldi	r24, 0x05	; 5
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1304:	60 91 61 01 	lds	r22, 0x0161
    1308:	89 e0       	ldi	r24, 0x09	; 9
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1310:	60 91 73 01 	lds	r22, 0x0173
    1314:	8c e0       	ldi	r24, 0x0C	; 12
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    131c:	60 91 74 01 	lds	r22, 0x0174
    1320:	84 e1       	ldi	r24, 0x14	; 20
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <eeprom_write_byte>
                        motors_off();
    1328:	53 98       	cbi	0x0a, 3	; 10
    132a:	23 98       	cbi	0x04, 3	; 4
    132c:	10 92 b4 00 	sts	0x00B4, r1
    1330:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	80 93 13 01 	sts	0x0113, r24
    133a:	80 91 62 01 	lds	r24, 0x0162
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    133e:	81 11       	cpse	r24, r1
    1340:	5f cf       	rjmp	.-322    	; 0x1200 <__vector_23+0x240>
    1342:	7e ce       	rjmp	.-772    	; 0x1040 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1344:	88 23       	and	r24, r24
    1346:	39 f2       	breq	.-114    	; 0x12d6 <__vector_23+0x316>
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	c9 f7       	brne	.-14     	; 0x133e <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    134c:	80 91 63 01 	lds	r24, 0x0163
    1350:	90 91 64 01 	lds	r25, 0x0164
    1354:	90 93 72 01 	sts	0x0172, r25
    1358:	80 93 71 01 	sts	0x0171, r24
                    cur_motion = MOVE_STOP;
    135c:	10 92 11 01 	sts	0x0111, r1
    1360:	4f cf       	rjmp	.-354    	; 0x1200 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1362:	80 91 11 01 	lds	r24, 0x0111
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	71 f1       	breq	.+92     	; 0x13c6 <__vector_23+0x406>
    136a:	80 91 66 01 	lds	r24, 0x0166
                        prev_motion = MOVE_STOP;
    136e:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_RIGHT;
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_right = calibmsg->turn_right;
    1378:	80 93 61 01 	sts	0x0161, r24
    137c:	41 cf       	rjmp	.-382    	; 0x1200 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 11 01 	sts	0x0111, r24
    1384:	5d ce       	rjmp	.-838    	; 0x1040 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1386:	80 91 11 01 	lds	r24, 0x0111
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	51 f0       	breq	.+20     	; 0x13a2 <__vector_23+0x3e2>
    138e:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    1392:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_LEFT;
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_left = calibmsg->turn_left;
    139c:	80 93 75 01 	sts	0x0175, r24
    13a0:	2f cf       	rjmp	.-418    	; 0x1200 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    13a2:	80 91 65 01 	lds	r24, 0x0165
    13a6:	90 91 75 01 	lds	r25, 0x0175
    13aa:	89 13       	cpse	r24, r25
    13ac:	f2 cf       	rjmp	.-28     	; 0x1392 <__vector_23+0x3d2>
    13ae:	28 cf       	rjmp	.-432    	; 0x1200 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13b0:	80 91 74 01 	lds	r24, 0x0174
    13b4:	98 13       	cpse	r25, r24
    13b6:	19 cf       	rjmp	.-462    	; 0x11ea <__vector_23+0x22a>
    13b8:	80 91 67 01 	lds	r24, 0x0167
    13bc:	20 91 73 01 	lds	r18, 0x0173
    13c0:	82 13       	cpse	r24, r18
    13c2:	15 cf       	rjmp	.-470    	; 0x11ee <__vector_23+0x22e>
    13c4:	1d cf       	rjmp	.-454    	; 0x1200 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    13c6:	80 91 66 01 	lds	r24, 0x0166
    13ca:	90 91 61 01 	lds	r25, 0x0161
    13ce:	89 13       	cpse	r24, r25
    13d0:	ce cf       	rjmp	.-100    	; 0x136e <__vector_23+0x3ae>
    13d2:	16 cf       	rjmp	.-468    	; 0x1200 <__vector_23+0x240>

000013d4 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    13d4:	fc 01       	movw	r30, r24
    13d6:	ac 01       	movw	r20, r24
    13d8:	46 5f       	subi	r20, 0xF6	; 246
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    13e0:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    13e2:	82 27       	eor	r24, r18
    13e4:	08 2e       	mov	r0, r24
    13e6:	82 95       	swap	r24
    13e8:	80 7f       	andi	r24, 0xF0	; 240
    13ea:	80 25       	eor	r24, r0
    13ec:	09 2e       	mov	r0, r25
    13ee:	98 2f       	mov	r25, r24
    13f0:	82 95       	swap	r24
    13f2:	8f 70       	andi	r24, 0x0F	; 15
    13f4:	08 26       	eor	r0, r24
    13f6:	86 95       	lsr	r24
    13f8:	98 27       	eor	r25, r24
    13fa:	89 27       	eor	r24, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	88 0f       	add	r24, r24
    1400:	88 0f       	add	r24, r24
    1402:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1404:	e4 17       	cp	r30, r20
    1406:	f5 07       	cpc	r31, r21
    1408:	59 f7       	brne	.-42     	; 0x13e0 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    140a:	08 95       	ret

0000140c <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    140c:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    140e:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1410:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1412:	20 91 35 01 	lds	r18, 0x0135
    or tmpreg1, ddrreg
    1416:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1418:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    141a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    141c:	30 91 35 01 	lds	r19, 0x0135
    1420:	20 30       	cpi	r18, 0x00	; 0
    1422:	29 f0       	breq	.+10     	; 0x142e <message_send+0x22>
    1424:	00 00       	nop
    1426:	25 b1       	in	r18, 0x05	; 5
    1428:	23 2b       	or	r18, r19
    142a:	25 b9       	out	0x05, r18	; 5
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <message_send+0x2a>
    142e:	00 00       	nop
    1430:	00 00       	nop
    1432:	00 00       	nop
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <message_send+0x2a>
    1436:	00 00       	nop
    1438:	00 00       	nop
    143a:	00 00       	nop
    143c:	30 95       	com	r19
    143e:	25 b1       	in	r18, 0x05	; 5
    1440:	23 23       	and	r18, r19
    1442:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1444:	2e ea       	ldi	r18, 0xAE	; 174
    1446:	2a 95       	dec	r18
    1448:	f1 f7       	brne	.-4      	; 0x1446 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    144a:	2b ee       	ldi	r18, 0xEB	; 235

0000144c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    144c:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    144e:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1450:	0a c0       	rjmp	.+20     	; 0x1466 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1452:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1454:	30 91 35 01 	lds	r19, 0x0135
    com tmpreg2
    1458:	30 95       	com	r19
    in tmpreg1, IR_PORT
    145a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    145c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    145e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1460:	0f be       	out	0x3f, r0	; 63
    return 0
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	08 95       	ret

00001466 <nocollision>:
nocollision:
    nop
    1466:	00 00       	nop
    dec tmpreg1
    1468:	2a 95       	dec	r18
    brne checkcollision
    146a:	81 f7       	brne	.-32     	; 0x144c <checkcollision>

    ldi tmpreg1, 0x01
    146c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    146e:	30 91 35 01 	lds	r19, 0x0135
    1472:	20 30       	cpi	r18, 0x00	; 0
    1474:	29 f0       	breq	.+10     	; 0x1480 <nocollision+0x1a>
    1476:	00 00       	nop
    1478:	25 b1       	in	r18, 0x05	; 5
    147a:	23 2b       	or	r18, r19
    147c:	25 b9       	out	0x05, r18	; 5
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <nocollision+0x22>
    1480:	00 00       	nop
    1482:	00 00       	nop
    1484:	00 00       	nop
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <nocollision+0x22>
    1488:	00 00       	nop
    148a:	00 00       	nop
    148c:	00 00       	nop
    148e:	30 95       	com	r19
    1490:	25 b1       	in	r18, 0x05	; 5
    1492:	23 23       	and	r18, r19
    1494:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1496:	00 00       	nop
    1498:	24 e5       	ldi	r18, 0x54	; 84
    149a:	2a 95       	dec	r18
    149c:	f1 f7       	brne	.-4      	; 0x149a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    149e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    14a0:	8c e0       	ldi	r24, 0x0C	; 12

000014a2 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    14a2:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    14a6:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    14a8:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    14aa:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    14ac:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    14ae:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    14b2:	50 e0       	ldi	r21, 0x00	; 0

000014b4 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    14b4:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    14b6:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    14b8:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    14ba:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    14bc:	30 91 35 01 	lds	r19, 0x0135
    14c0:	20 30       	cpi	r18, 0x00	; 0
    14c2:	29 f0       	breq	.+10     	; 0x14ce <sendbit+0x1a>
    14c4:	00 00       	nop
    14c6:	25 b1       	in	r18, 0x05	; 5
    14c8:	23 2b       	or	r18, r19
    14ca:	25 b9       	out	0x05, r18	; 5
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <sendbit+0x22>
    14ce:	00 00       	nop
    14d0:	00 00       	nop
    14d2:	00 00       	nop
    14d4:	00 c0       	rjmp	.+0      	; 0x14d6 <sendbit+0x22>
    14d6:	00 00       	nop
    14d8:	00 00       	nop
    14da:	00 00       	nop
    14dc:	30 95       	com	r19
    14de:	25 b1       	in	r18, 0x05	; 5
    14e0:	23 23       	and	r18, r19
    14e2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    14e4:	00 00       	nop
    14e6:	21 e5       	ldi	r18, 0x51	; 81
    14e8:	2a 95       	dec	r18
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    14ec:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    14ee:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    14f0:	9a 95       	dec	r25
    brne sendbit
    14f2:	01 f7       	brne	.-64     	; 0x14b4 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14f4:	8a 95       	dec	r24
    brne sendbyte
    14f6:	a9 f6       	brne	.-86     	; 0x14a2 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14f8:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14fa:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14fc:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14fe:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1500:	30 91 35 01 	lds	r19, 0x0135
    com tmpreg2
    1504:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1506:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1508:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    150a:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    150c:	0f be       	out	0x3f, r0	; 63
    return 1
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	08 95       	ret

00001512 <main>:
    }
}

int main()
{
  kilo_init();
    1512:	0e 94 1a 01 	call	0x234	; 0x234 <kilo_init>
  kilo_start(setup, loop);
    1516:	62 e8       	ldi	r22, 0x82	; 130
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	81 e7       	ldi	r24, 0x71	; 113
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 16 02 	call	0x42c	; 0x42c <kilo_start>
    
  return 0;
}
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	08 95       	ret

00001528 <__divmodhi4>:
    1528:	97 fb       	bst	r25, 7
    152a:	07 2e       	mov	r0, r23
    152c:	16 f4       	brtc	.+4      	; 0x1532 <__divmodhi4+0xa>
    152e:	00 94       	com	r0
    1530:	07 d0       	rcall	.+14     	; 0x1540 <__divmodhi4_neg1>
    1532:	77 fd       	sbrc	r23, 7
    1534:	09 d0       	rcall	.+18     	; 0x1548 <__divmodhi4_neg2>
    1536:	0e 94 bd 0a 	call	0x157a	; 0x157a <__udivmodhi4>
    153a:	07 fc       	sbrc	r0, 7
    153c:	05 d0       	rcall	.+10     	; 0x1548 <__divmodhi4_neg2>
    153e:	3e f4       	brtc	.+14     	; 0x154e <__divmodhi4_exit>

00001540 <__divmodhi4_neg1>:
    1540:	90 95       	com	r25
    1542:	81 95       	neg	r24
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	08 95       	ret

00001548 <__divmodhi4_neg2>:
    1548:	70 95       	com	r23
    154a:	61 95       	neg	r22
    154c:	7f 4f       	sbci	r23, 0xFF	; 255

0000154e <__divmodhi4_exit>:
    154e:	08 95       	ret

00001550 <__tablejump2__>:
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	05 90       	lpm	r0, Z+
    1556:	f4 91       	lpm	r31, Z
    1558:	e0 2d       	mov	r30, r0
    155a:	09 94       	ijmp

0000155c <__umulhisi3>:
    155c:	a2 9f       	mul	r26, r18
    155e:	b0 01       	movw	r22, r0
    1560:	b3 9f       	mul	r27, r19
    1562:	c0 01       	movw	r24, r0
    1564:	a3 9f       	mul	r26, r19
    1566:	70 0d       	add	r23, r0
    1568:	81 1d       	adc	r24, r1
    156a:	11 24       	eor	r1, r1
    156c:	91 1d       	adc	r25, r1
    156e:	b2 9f       	mul	r27, r18
    1570:	70 0d       	add	r23, r0
    1572:	81 1d       	adc	r24, r1
    1574:	11 24       	eor	r1, r1
    1576:	91 1d       	adc	r25, r1
    1578:	08 95       	ret

0000157a <__udivmodhi4>:
    157a:	aa 1b       	sub	r26, r26
    157c:	bb 1b       	sub	r27, r27
    157e:	51 e1       	ldi	r21, 0x11	; 17
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <__udivmodhi4_ep>

00001582 <__udivmodhi4_loop>:
    1582:	aa 1f       	adc	r26, r26
    1584:	bb 1f       	adc	r27, r27
    1586:	a6 17       	cp	r26, r22
    1588:	b7 07       	cpc	r27, r23
    158a:	10 f0       	brcs	.+4      	; 0x1590 <__udivmodhi4_ep>
    158c:	a6 1b       	sub	r26, r22
    158e:	b7 0b       	sbc	r27, r23

00001590 <__udivmodhi4_ep>:
    1590:	88 1f       	adc	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	5a 95       	dec	r21
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__udivmodhi4_loop>
    1598:	80 95       	com	r24
    159a:	90 95       	com	r25
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	08 95       	ret

000015a2 <__subsf3>:
    15a2:	50 58       	subi	r21, 0x80	; 128

000015a4 <__addsf3>:
    15a4:	bb 27       	eor	r27, r27
    15a6:	aa 27       	eor	r26, r26
    15a8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__addsf3x>
    15ac:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__fp_round>
    15b0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_pscA>
    15b4:	38 f0       	brcs	.+14     	; 0x15c4 <__addsf3+0x20>
    15b6:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fp_pscB>
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <__addsf3+0x20>
    15bc:	39 f4       	brne	.+14     	; 0x15cc <__addsf3+0x28>
    15be:	9f 3f       	cpi	r25, 0xFF	; 255
    15c0:	19 f4       	brne	.+6      	; 0x15c8 <__addsf3+0x24>
    15c2:	26 f4       	brtc	.+8      	; 0x15cc <__addsf3+0x28>
    15c4:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__fp_nan>
    15c8:	0e f4       	brtc	.+2      	; 0x15cc <__addsf3+0x28>
    15ca:	e0 95       	com	r30
    15cc:	e7 fb       	bst	r30, 7
    15ce:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>

000015d2 <__addsf3x>:
    15d2:	e9 2f       	mov	r30, r25
    15d4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_split3>
    15d8:	58 f3       	brcs	.-42     	; 0x15b0 <__addsf3+0xc>
    15da:	ba 17       	cp	r27, r26
    15dc:	62 07       	cpc	r22, r18
    15de:	73 07       	cpc	r23, r19
    15e0:	84 07       	cpc	r24, r20
    15e2:	95 07       	cpc	r25, r21
    15e4:	20 f0       	brcs	.+8      	; 0x15ee <__addsf3x+0x1c>
    15e6:	79 f4       	brne	.+30     	; 0x1606 <__addsf3x+0x34>
    15e8:	a6 f5       	brtc	.+104    	; 0x1652 <__addsf3x+0x80>
    15ea:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_zero>
    15ee:	0e f4       	brtc	.+2      	; 0x15f2 <__addsf3x+0x20>
    15f0:	e0 95       	com	r30
    15f2:	0b 2e       	mov	r0, r27
    15f4:	ba 2f       	mov	r27, r26
    15f6:	a0 2d       	mov	r26, r0
    15f8:	0b 01       	movw	r0, r22
    15fa:	b9 01       	movw	r22, r18
    15fc:	90 01       	movw	r18, r0
    15fe:	0c 01       	movw	r0, r24
    1600:	ca 01       	movw	r24, r20
    1602:	a0 01       	movw	r20, r0
    1604:	11 24       	eor	r1, r1
    1606:	ff 27       	eor	r31, r31
    1608:	59 1b       	sub	r21, r25
    160a:	99 f0       	breq	.+38     	; 0x1632 <__addsf3x+0x60>
    160c:	59 3f       	cpi	r21, 0xF9	; 249
    160e:	50 f4       	brcc	.+20     	; 0x1624 <__addsf3x+0x52>
    1610:	50 3e       	cpi	r21, 0xE0	; 224
    1612:	68 f1       	brcs	.+90     	; 0x166e <__addsf3x+0x9c>
    1614:	1a 16       	cp	r1, r26
    1616:	f0 40       	sbci	r31, 0x00	; 0
    1618:	a2 2f       	mov	r26, r18
    161a:	23 2f       	mov	r18, r19
    161c:	34 2f       	mov	r19, r20
    161e:	44 27       	eor	r20, r20
    1620:	58 5f       	subi	r21, 0xF8	; 248
    1622:	f3 cf       	rjmp	.-26     	; 0x160a <__addsf3x+0x38>
    1624:	46 95       	lsr	r20
    1626:	37 95       	ror	r19
    1628:	27 95       	ror	r18
    162a:	a7 95       	ror	r26
    162c:	f0 40       	sbci	r31, 0x00	; 0
    162e:	53 95       	inc	r21
    1630:	c9 f7       	brne	.-14     	; 0x1624 <__addsf3x+0x52>
    1632:	7e f4       	brtc	.+30     	; 0x1652 <__addsf3x+0x80>
    1634:	1f 16       	cp	r1, r31
    1636:	ba 0b       	sbc	r27, r26
    1638:	62 0b       	sbc	r22, r18
    163a:	73 0b       	sbc	r23, r19
    163c:	84 0b       	sbc	r24, r20
    163e:	ba f0       	brmi	.+46     	; 0x166e <__addsf3x+0x9c>
    1640:	91 50       	subi	r25, 0x01	; 1
    1642:	a1 f0       	breq	.+40     	; 0x166c <__addsf3x+0x9a>
    1644:	ff 0f       	add	r31, r31
    1646:	bb 1f       	adc	r27, r27
    1648:	66 1f       	adc	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	c2 f7       	brpl	.-16     	; 0x1640 <__addsf3x+0x6e>
    1650:	0e c0       	rjmp	.+28     	; 0x166e <__addsf3x+0x9c>
    1652:	ba 0f       	add	r27, r26
    1654:	62 1f       	adc	r22, r18
    1656:	73 1f       	adc	r23, r19
    1658:	84 1f       	adc	r24, r20
    165a:	48 f4       	brcc	.+18     	; 0x166e <__addsf3x+0x9c>
    165c:	87 95       	ror	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f7 95       	ror	r31
    1666:	9e 3f       	cpi	r25, 0xFE	; 254
    1668:	08 f0       	brcs	.+2      	; 0x166c <__addsf3x+0x9a>
    166a:	b0 cf       	rjmp	.-160    	; 0x15cc <__addsf3+0x28>
    166c:	93 95       	inc	r25
    166e:	88 0f       	add	r24, r24
    1670:	08 f0       	brcs	.+2      	; 0x1674 <__addsf3x+0xa2>
    1672:	99 27       	eor	r25, r25
    1674:	ee 0f       	add	r30, r30
    1676:	97 95       	ror	r25
    1678:	87 95       	ror	r24
    167a:	08 95       	ret

0000167c <__divsf3>:
    167c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__divsf3x>
    1680:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__fp_round>
    1684:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fp_pscB>
    1688:	58 f0       	brcs	.+22     	; 0x16a0 <__divsf3+0x24>
    168a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_pscA>
    168e:	40 f0       	brcs	.+16     	; 0x16a0 <__divsf3+0x24>
    1690:	29 f4       	brne	.+10     	; 0x169c <__divsf3+0x20>
    1692:	5f 3f       	cpi	r21, 0xFF	; 255
    1694:	29 f0       	breq	.+10     	; 0x16a0 <__divsf3+0x24>
    1696:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    169a:	51 11       	cpse	r21, r1
    169c:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    16a0:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__fp_nan>

000016a4 <__divsf3x>:
    16a4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_split3>
    16a8:	68 f3       	brcs	.-38     	; 0x1684 <__divsf3+0x8>

000016aa <__divsf3_pse>:
    16aa:	99 23       	and	r25, r25
    16ac:	b1 f3       	breq	.-20     	; 0x169a <__divsf3+0x1e>
    16ae:	55 23       	and	r21, r21
    16b0:	91 f3       	breq	.-28     	; 0x1696 <__divsf3+0x1a>
    16b2:	95 1b       	sub	r25, r21
    16b4:	55 0b       	sbc	r21, r21
    16b6:	bb 27       	eor	r27, r27
    16b8:	aa 27       	eor	r26, r26
    16ba:	62 17       	cp	r22, r18
    16bc:	73 07       	cpc	r23, r19
    16be:	84 07       	cpc	r24, r20
    16c0:	38 f0       	brcs	.+14     	; 0x16d0 <__divsf3_pse+0x26>
    16c2:	9f 5f       	subi	r25, 0xFF	; 255
    16c4:	5f 4f       	sbci	r21, 0xFF	; 255
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	44 1f       	adc	r20, r20
    16cc:	aa 1f       	adc	r26, r26
    16ce:	a9 f3       	breq	.-22     	; 0x16ba <__divsf3_pse+0x10>
    16d0:	35 d0       	rcall	.+106    	; 0x173c <__divsf3_pse+0x92>
    16d2:	0e 2e       	mov	r0, r30
    16d4:	3a f0       	brmi	.+14     	; 0x16e4 <__divsf3_pse+0x3a>
    16d6:	e0 e8       	ldi	r30, 0x80	; 128
    16d8:	32 d0       	rcall	.+100    	; 0x173e <__divsf3_pse+0x94>
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	50 40       	sbci	r21, 0x00	; 0
    16de:	e6 95       	lsr	r30
    16e0:	00 1c       	adc	r0, r0
    16e2:	ca f7       	brpl	.-14     	; 0x16d6 <__divsf3_pse+0x2c>
    16e4:	2b d0       	rcall	.+86     	; 0x173c <__divsf3_pse+0x92>
    16e6:	fe 2f       	mov	r31, r30
    16e8:	29 d0       	rcall	.+82     	; 0x173c <__divsf3_pse+0x92>
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	88 1f       	adc	r24, r24
    16f0:	bb 1f       	adc	r27, r27
    16f2:	26 17       	cp	r18, r22
    16f4:	37 07       	cpc	r19, r23
    16f6:	48 07       	cpc	r20, r24
    16f8:	ab 07       	cpc	r26, r27
    16fa:	b0 e8       	ldi	r27, 0x80	; 128
    16fc:	09 f0       	breq	.+2      	; 0x1700 <__divsf3_pse+0x56>
    16fe:	bb 0b       	sbc	r27, r27
    1700:	80 2d       	mov	r24, r0
    1702:	bf 01       	movw	r22, r30
    1704:	ff 27       	eor	r31, r31
    1706:	93 58       	subi	r25, 0x83	; 131
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	3a f0       	brmi	.+14     	; 0x171a <__divsf3_pse+0x70>
    170c:	9e 3f       	cpi	r25, 0xFE	; 254
    170e:	51 05       	cpc	r21, r1
    1710:	78 f0       	brcs	.+30     	; 0x1730 <__divsf3_pse+0x86>
    1712:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    1716:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    171a:	5f 3f       	cpi	r21, 0xFF	; 255
    171c:	e4 f3       	brlt	.-8      	; 0x1716 <__divsf3_pse+0x6c>
    171e:	98 3e       	cpi	r25, 0xE8	; 232
    1720:	d4 f3       	brlt	.-12     	; 0x1716 <__divsf3_pse+0x6c>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b7 95       	ror	r27
    172a:	f7 95       	ror	r31
    172c:	9f 5f       	subi	r25, 0xFF	; 255
    172e:	c9 f7       	brne	.-14     	; 0x1722 <__divsf3_pse+0x78>
    1730:	88 0f       	add	r24, r24
    1732:	91 1d       	adc	r25, r1
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	97 f9       	bld	r25, 7
    173a:	08 95       	ret
    173c:	e1 e0       	ldi	r30, 0x01	; 1
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	88 1f       	adc	r24, r24
    1744:	bb 1f       	adc	r27, r27
    1746:	62 17       	cp	r22, r18
    1748:	73 07       	cpc	r23, r19
    174a:	84 07       	cpc	r24, r20
    174c:	ba 07       	cpc	r27, r26
    174e:	20 f0       	brcs	.+8      	; 0x1758 <__divsf3_pse+0xae>
    1750:	62 1b       	sub	r22, r18
    1752:	73 0b       	sbc	r23, r19
    1754:	84 0b       	sbc	r24, r20
    1756:	ba 0b       	sbc	r27, r26
    1758:	ee 1f       	adc	r30, r30
    175a:	88 f7       	brcc	.-30     	; 0x173e <__divsf3_pse+0x94>
    175c:	e0 95       	com	r30
    175e:	08 95       	ret

00001760 <__fixsfsi>:
    1760:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fixunssfsi>
    1764:	68 94       	set
    1766:	b1 11       	cpse	r27, r1
    1768:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    176c:	08 95       	ret

0000176e <__fixunssfsi>:
    176e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_splitA>
    1772:	88 f0       	brcs	.+34     	; 0x1796 <__fixunssfsi+0x28>
    1774:	9f 57       	subi	r25, 0x7F	; 127
    1776:	98 f0       	brcs	.+38     	; 0x179e <__fixunssfsi+0x30>
    1778:	b9 2f       	mov	r27, r25
    177a:	99 27       	eor	r25, r25
    177c:	b7 51       	subi	r27, 0x17	; 23
    177e:	b0 f0       	brcs	.+44     	; 0x17ac <__fixunssfsi+0x3e>
    1780:	e1 f0       	breq	.+56     	; 0x17ba <__fixunssfsi+0x4c>
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	1a f0       	brmi	.+6      	; 0x1792 <__fixunssfsi+0x24>
    178c:	ba 95       	dec	r27
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__fixunssfsi+0x14>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <__fixunssfsi+0x4c>
    1792:	b1 30       	cpi	r27, 0x01	; 1
    1794:	91 f0       	breq	.+36     	; 0x17ba <__fixunssfsi+0x4c>
    1796:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fp_zero>
    179a:	b1 e0       	ldi	r27, 0x01	; 1
    179c:	08 95       	ret
    179e:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_zero>
    17a2:	67 2f       	mov	r22, r23
    17a4:	78 2f       	mov	r23, r24
    17a6:	88 27       	eor	r24, r24
    17a8:	b8 5f       	subi	r27, 0xF8	; 248
    17aa:	39 f0       	breq	.+14     	; 0x17ba <__fixunssfsi+0x4c>
    17ac:	b9 3f       	cpi	r27, 0xF9	; 249
    17ae:	cc f3       	brlt	.-14     	; 0x17a2 <__fixunssfsi+0x34>
    17b0:	86 95       	lsr	r24
    17b2:	77 95       	ror	r23
    17b4:	67 95       	ror	r22
    17b6:	b3 95       	inc	r27
    17b8:	d9 f7       	brne	.-10     	; 0x17b0 <__fixunssfsi+0x42>
    17ba:	3e f4       	brtc	.+14     	; 0x17ca <__fixunssfsi+0x5c>
    17bc:	90 95       	com	r25
    17be:	80 95       	com	r24
    17c0:	70 95       	com	r23
    17c2:	61 95       	neg	r22
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	08 95       	ret

000017cc <__floatunsisf>:
    17cc:	e8 94       	clt
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <__floatsisf+0x12>

000017d0 <__floatsisf>:
    17d0:	97 fb       	bst	r25, 7
    17d2:	3e f4       	brtc	.+14     	; 0x17e2 <__floatsisf+0x12>
    17d4:	90 95       	com	r25
    17d6:	80 95       	com	r24
    17d8:	70 95       	com	r23
    17da:	61 95       	neg	r22
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	99 23       	and	r25, r25
    17e4:	a9 f0       	breq	.+42     	; 0x1810 <__floatsisf+0x40>
    17e6:	f9 2f       	mov	r31, r25
    17e8:	96 e9       	ldi	r25, 0x96	; 150
    17ea:	bb 27       	eor	r27, r27
    17ec:	93 95       	inc	r25
    17ee:	f6 95       	lsr	r31
    17f0:	87 95       	ror	r24
    17f2:	77 95       	ror	r23
    17f4:	67 95       	ror	r22
    17f6:	b7 95       	ror	r27
    17f8:	f1 11       	cpse	r31, r1
    17fa:	f8 cf       	rjmp	.-16     	; 0x17ec <__floatsisf+0x1c>
    17fc:	fa f4       	brpl	.+62     	; 0x183c <__floatsisf+0x6c>
    17fe:	bb 0f       	add	r27, r27
    1800:	11 f4       	brne	.+4      	; 0x1806 <__floatsisf+0x36>
    1802:	60 ff       	sbrs	r22, 0
    1804:	1b c0       	rjmp	.+54     	; 0x183c <__floatsisf+0x6c>
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	8f 4f       	sbci	r24, 0xFF	; 255
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	16 c0       	rjmp	.+44     	; 0x183c <__floatsisf+0x6c>
    1810:	88 23       	and	r24, r24
    1812:	11 f0       	breq	.+4      	; 0x1818 <__floatsisf+0x48>
    1814:	96 e9       	ldi	r25, 0x96	; 150
    1816:	11 c0       	rjmp	.+34     	; 0x183a <__floatsisf+0x6a>
    1818:	77 23       	and	r23, r23
    181a:	21 f0       	breq	.+8      	; 0x1824 <__floatsisf+0x54>
    181c:	9e e8       	ldi	r25, 0x8E	; 142
    181e:	87 2f       	mov	r24, r23
    1820:	76 2f       	mov	r23, r22
    1822:	05 c0       	rjmp	.+10     	; 0x182e <__floatsisf+0x5e>
    1824:	66 23       	and	r22, r22
    1826:	71 f0       	breq	.+28     	; 0x1844 <__floatsisf+0x74>
    1828:	96 e8       	ldi	r25, 0x86	; 134
    182a:	86 2f       	mov	r24, r22
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	2a f0       	brmi	.+10     	; 0x183c <__floatsisf+0x6c>
    1832:	9a 95       	dec	r25
    1834:	66 0f       	add	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	88 1f       	adc	r24, r24
    183a:	da f7       	brpl	.-10     	; 0x1832 <__floatsisf+0x62>
    183c:	88 0f       	add	r24, r24
    183e:	96 95       	lsr	r25
    1840:	87 95       	ror	r24
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret

00001846 <__fp_inf>:
    1846:	97 f9       	bld	r25, 7
    1848:	9f 67       	ori	r25, 0x7F	; 127
    184a:	80 e8       	ldi	r24, 0x80	; 128
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	08 95       	ret

00001852 <__fp_nan>:
    1852:	9f ef       	ldi	r25, 0xFF	; 255
    1854:	80 ec       	ldi	r24, 0xC0	; 192
    1856:	08 95       	ret

00001858 <__fp_pscA>:
    1858:	00 24       	eor	r0, r0
    185a:	0a 94       	dec	r0
    185c:	16 16       	cp	r1, r22
    185e:	17 06       	cpc	r1, r23
    1860:	18 06       	cpc	r1, r24
    1862:	09 06       	cpc	r0, r25
    1864:	08 95       	ret

00001866 <__fp_pscB>:
    1866:	00 24       	eor	r0, r0
    1868:	0a 94       	dec	r0
    186a:	12 16       	cp	r1, r18
    186c:	13 06       	cpc	r1, r19
    186e:	14 06       	cpc	r1, r20
    1870:	05 06       	cpc	r0, r21
    1872:	08 95       	ret

00001874 <__fp_round>:
    1874:	09 2e       	mov	r0, r25
    1876:	03 94       	inc	r0
    1878:	00 0c       	add	r0, r0
    187a:	11 f4       	brne	.+4      	; 0x1880 <__fp_round+0xc>
    187c:	88 23       	and	r24, r24
    187e:	52 f0       	brmi	.+20     	; 0x1894 <__fp_round+0x20>
    1880:	bb 0f       	add	r27, r27
    1882:	40 f4       	brcc	.+16     	; 0x1894 <__fp_round+0x20>
    1884:	bf 2b       	or	r27, r31
    1886:	11 f4       	brne	.+4      	; 0x188c <__fp_round+0x18>
    1888:	60 ff       	sbrs	r22, 0
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <__fp_round+0x20>
    188c:	6f 5f       	subi	r22, 0xFF	; 255
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	8f 4f       	sbci	r24, 0xFF	; 255
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	08 95       	ret

00001896 <__fp_split3>:
    1896:	57 fd       	sbrc	r21, 7
    1898:	90 58       	subi	r25, 0x80	; 128
    189a:	44 0f       	add	r20, r20
    189c:	55 1f       	adc	r21, r21
    189e:	59 f0       	breq	.+22     	; 0x18b6 <__fp_splitA+0x10>
    18a0:	5f 3f       	cpi	r21, 0xFF	; 255
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <__fp_splitA+0x1a>
    18a4:	47 95       	ror	r20

000018a6 <__fp_splitA>:
    18a6:	88 0f       	add	r24, r24
    18a8:	97 fb       	bst	r25, 7
    18aa:	99 1f       	adc	r25, r25
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <__fp_splitA+0x20>
    18ae:	9f 3f       	cpi	r25, 0xFF	; 255
    18b0:	79 f0       	breq	.+30     	; 0x18d0 <__fp_splitA+0x2a>
    18b2:	87 95       	ror	r24
    18b4:	08 95       	ret
    18b6:	12 16       	cp	r1, r18
    18b8:	13 06       	cpc	r1, r19
    18ba:	14 06       	cpc	r1, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	f2 cf       	rjmp	.-28     	; 0x18a4 <__fp_split3+0xe>
    18c0:	46 95       	lsr	r20
    18c2:	f1 df       	rcall	.-30     	; 0x18a6 <__fp_splitA>
    18c4:	08 c0       	rjmp	.+16     	; 0x18d6 <__fp_splitA+0x30>
    18c6:	16 16       	cp	r1, r22
    18c8:	17 06       	cpc	r1, r23
    18ca:	18 06       	cpc	r1, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	f1 cf       	rjmp	.-30     	; 0x18b2 <__fp_splitA+0xc>
    18d0:	86 95       	lsr	r24
    18d2:	71 05       	cpc	r23, r1
    18d4:	61 05       	cpc	r22, r1
    18d6:	08 94       	sec
    18d8:	08 95       	ret

000018da <__fp_zero>:
    18da:	e8 94       	clt

000018dc <__fp_szero>:
    18dc:	bb 27       	eor	r27, r27
    18de:	66 27       	eor	r22, r22
    18e0:	77 27       	eor	r23, r23
    18e2:	cb 01       	movw	r24, r22
    18e4:	97 f9       	bld	r25, 7
    18e6:	08 95       	ret

000018e8 <__mulsf3>:
    18e8:	0e 94 87 0c 	call	0x190e	; 0x190e <__mulsf3x>
    18ec:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__fp_round>
    18f0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_pscA>
    18f4:	38 f0       	brcs	.+14     	; 0x1904 <__mulsf3+0x1c>
    18f6:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fp_pscB>
    18fa:	20 f0       	brcs	.+8      	; 0x1904 <__mulsf3+0x1c>
    18fc:	95 23       	and	r25, r21
    18fe:	11 f0       	breq	.+4      	; 0x1904 <__mulsf3+0x1c>
    1900:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    1904:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__fp_nan>
    1908:	11 24       	eor	r1, r1
    190a:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>

0000190e <__mulsf3x>:
    190e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_split3>
    1912:	70 f3       	brcs	.-36     	; 0x18f0 <__mulsf3+0x8>

00001914 <__mulsf3_pse>:
    1914:	95 9f       	mul	r25, r21
    1916:	c1 f3       	breq	.-16     	; 0x1908 <__mulsf3+0x20>
    1918:	95 0f       	add	r25, r21
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	55 1f       	adc	r21, r21
    191e:	62 9f       	mul	r22, r18
    1920:	f0 01       	movw	r30, r0
    1922:	72 9f       	mul	r23, r18
    1924:	bb 27       	eor	r27, r27
    1926:	f0 0d       	add	r31, r0
    1928:	b1 1d       	adc	r27, r1
    192a:	63 9f       	mul	r22, r19
    192c:	aa 27       	eor	r26, r26
    192e:	f0 0d       	add	r31, r0
    1930:	b1 1d       	adc	r27, r1
    1932:	aa 1f       	adc	r26, r26
    1934:	64 9f       	mul	r22, r20
    1936:	66 27       	eor	r22, r22
    1938:	b0 0d       	add	r27, r0
    193a:	a1 1d       	adc	r26, r1
    193c:	66 1f       	adc	r22, r22
    193e:	82 9f       	mul	r24, r18
    1940:	22 27       	eor	r18, r18
    1942:	b0 0d       	add	r27, r0
    1944:	a1 1d       	adc	r26, r1
    1946:	62 1f       	adc	r22, r18
    1948:	73 9f       	mul	r23, r19
    194a:	b0 0d       	add	r27, r0
    194c:	a1 1d       	adc	r26, r1
    194e:	62 1f       	adc	r22, r18
    1950:	83 9f       	mul	r24, r19
    1952:	a0 0d       	add	r26, r0
    1954:	61 1d       	adc	r22, r1
    1956:	22 1f       	adc	r18, r18
    1958:	74 9f       	mul	r23, r20
    195a:	33 27       	eor	r19, r19
    195c:	a0 0d       	add	r26, r0
    195e:	61 1d       	adc	r22, r1
    1960:	23 1f       	adc	r18, r19
    1962:	84 9f       	mul	r24, r20
    1964:	60 0d       	add	r22, r0
    1966:	21 1d       	adc	r18, r1
    1968:	82 2f       	mov	r24, r18
    196a:	76 2f       	mov	r23, r22
    196c:	6a 2f       	mov	r22, r26
    196e:	11 24       	eor	r1, r1
    1970:	9f 57       	subi	r25, 0x7F	; 127
    1972:	50 40       	sbci	r21, 0x00	; 0
    1974:	9a f0       	brmi	.+38     	; 0x199c <__mulsf3_pse+0x88>
    1976:	f1 f0       	breq	.+60     	; 0x19b4 <__mulsf3_pse+0xa0>
    1978:	88 23       	and	r24, r24
    197a:	4a f0       	brmi	.+18     	; 0x198e <__mulsf3_pse+0x7a>
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	bb 1f       	adc	r27, r27
    1982:	66 1f       	adc	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	88 1f       	adc	r24, r24
    1988:	91 50       	subi	r25, 0x01	; 1
    198a:	50 40       	sbci	r21, 0x00	; 0
    198c:	a9 f7       	brne	.-22     	; 0x1978 <__mulsf3_pse+0x64>
    198e:	9e 3f       	cpi	r25, 0xFE	; 254
    1990:	51 05       	cpc	r21, r1
    1992:	80 f0       	brcs	.+32     	; 0x19b4 <__mulsf3_pse+0xa0>
    1994:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__fp_inf>
    1998:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    199c:	5f 3f       	cpi	r21, 0xFF	; 255
    199e:	e4 f3       	brlt	.-8      	; 0x1998 <__mulsf3_pse+0x84>
    19a0:	98 3e       	cpi	r25, 0xE8	; 232
    19a2:	d4 f3       	brlt	.-12     	; 0x1998 <__mulsf3_pse+0x84>
    19a4:	86 95       	lsr	r24
    19a6:	77 95       	ror	r23
    19a8:	67 95       	ror	r22
    19aa:	b7 95       	ror	r27
    19ac:	f7 95       	ror	r31
    19ae:	e7 95       	ror	r30
    19b0:	9f 5f       	subi	r25, 0xFF	; 255
    19b2:	c1 f7       	brne	.-16     	; 0x19a4 <__mulsf3_pse+0x90>
    19b4:	fe 2b       	or	r31, r30
    19b6:	88 0f       	add	r24, r24
    19b8:	91 1d       	adc	r25, r1
    19ba:	96 95       	lsr	r25
    19bc:	87 95       	ror	r24
    19be:	97 f9       	bld	r25, 7
    19c0:	08 95       	ret

000019c2 <do_rand>:
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	ec 01       	movw	r28, r24
    19d8:	68 81       	ld	r22, Y
    19da:	79 81       	ldd	r23, Y+1	; 0x01
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	61 15       	cp	r22, r1
    19e2:	71 05       	cpc	r23, r1
    19e4:	81 05       	cpc	r24, r1
    19e6:	91 05       	cpc	r25, r1
    19e8:	21 f4       	brne	.+8      	; 0x19f2 <do_rand+0x30>
    19ea:	64 e2       	ldi	r22, 0x24	; 36
    19ec:	79 ed       	ldi	r23, 0xD9	; 217
    19ee:	8b e5       	ldi	r24, 0x5B	; 91
    19f0:	97 e0       	ldi	r25, 0x07	; 7
    19f2:	2d e1       	ldi	r18, 0x1D	; 29
    19f4:	33 ef       	ldi	r19, 0xF3	; 243
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__divmodsi4>
    19fe:	49 01       	movw	r8, r18
    1a00:	5a 01       	movw	r10, r20
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	a7 ea       	ldi	r26, 0xA7	; 167
    1a08:	b1 e4       	ldi	r27, 0x41	; 65
    1a0a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__muluhisi3>
    1a0e:	6b 01       	movw	r12, r22
    1a10:	7c 01       	movw	r14, r24
    1a12:	ac ee       	ldi	r26, 0xEC	; 236
    1a14:	b4 ef       	ldi	r27, 0xF4	; 244
    1a16:	a5 01       	movw	r20, r10
    1a18:	94 01       	movw	r18, r8
    1a1a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulohisi3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8c 0d       	add	r24, r12
    1a24:	9d 1d       	adc	r25, r13
    1a26:	ae 1d       	adc	r26, r14
    1a28:	bf 1d       	adc	r27, r15
    1a2a:	b7 ff       	sbrs	r27, 7
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <do_rand+0x72>
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	a1 09       	sbc	r26, r1
    1a32:	b0 48       	sbci	r27, 0x80	; 128
    1a34:	88 83       	st	Y, r24
    1a36:	99 83       	std	Y+1, r25	; 0x01
    1a38:	aa 83       	std	Y+2, r26	; 0x02
    1a3a:	bb 83       	std	Y+3, r27	; 0x03
    1a3c:	9f 77       	andi	r25, 0x7F	; 127
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	bf 90       	pop	r11
    1a4c:	af 90       	pop	r10
    1a4e:	9f 90       	pop	r9
    1a50:	8f 90       	pop	r8
    1a52:	08 95       	ret

00001a54 <rand_r>:
    1a54:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <do_rand>
    1a58:	08 95       	ret

00001a5a <rand>:
    1a5a:	87 e0       	ldi	r24, 0x07	; 7
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <do_rand>
    1a62:	08 95       	ret

00001a64 <srand>:
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	80 93 07 01 	sts	0x0107, r24
    1a6c:	90 93 08 01 	sts	0x0108, r25
    1a70:	a0 93 09 01 	sts	0x0109, r26
    1a74:	b0 93 0a 01 	sts	0x010A, r27
    1a78:	08 95       	ret

00001a7a <eeprom_read_byte>:
    1a7a:	f9 99       	sbic	0x1f, 1	; 31
    1a7c:	fe cf       	rjmp	.-4      	; 0x1a7a <eeprom_read_byte>
    1a7e:	92 bd       	out	0x22, r25	; 34
    1a80:	81 bd       	out	0x21, r24	; 33
    1a82:	f8 9a       	sbi	0x1f, 0	; 31
    1a84:	99 27       	eor	r25, r25
    1a86:	80 b5       	in	r24, 0x20	; 32
    1a88:	08 95       	ret

00001a8a <eeprom_write_byte>:
    1a8a:	26 2f       	mov	r18, r22

00001a8c <eeprom_write_r18>:
    1a8c:	f9 99       	sbic	0x1f, 1	; 31
    1a8e:	fe cf       	rjmp	.-4      	; 0x1a8c <eeprom_write_r18>
    1a90:	1f ba       	out	0x1f, r1	; 31
    1a92:	92 bd       	out	0x22, r25	; 34
    1a94:	81 bd       	out	0x21, r24	; 33
    1a96:	20 bd       	out	0x20, r18	; 32
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	fa 9a       	sbi	0x1f, 2	; 31
    1a9e:	f9 9a       	sbi	0x1f, 1	; 31
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	08 95       	ret

00001aa6 <__divmodsi4>:
    1aa6:	05 2e       	mov	r0, r21
    1aa8:	97 fb       	bst	r25, 7
    1aaa:	1e f4       	brtc	.+6      	; 0x1ab2 <__divmodsi4+0xc>
    1aac:	00 94       	com	r0
    1aae:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__negsi2>
    1ab2:	57 fd       	sbrc	r21, 7
    1ab4:	07 d0       	rcall	.+14     	; 0x1ac4 <__divmodsi4_neg2>
    1ab6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__udivmodsi4>
    1aba:	07 fc       	sbrc	r0, 7
    1abc:	03 d0       	rcall	.+6      	; 0x1ac4 <__divmodsi4_neg2>
    1abe:	4e f4       	brtc	.+18     	; 0x1ad2 <__divmodsi4_exit>
    1ac0:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__negsi2>

00001ac4 <__divmodsi4_neg2>:
    1ac4:	50 95       	com	r21
    1ac6:	40 95       	com	r20
    1ac8:	30 95       	com	r19
    1aca:	21 95       	neg	r18
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ace:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255

00001ad2 <__divmodsi4_exit>:
    1ad2:	08 95       	ret

00001ad4 <__negsi2>:
    1ad4:	90 95       	com	r25
    1ad6:	80 95       	com	r24
    1ad8:	70 95       	com	r23
    1ada:	61 95       	neg	r22
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	08 95       	ret

00001ae4 <__muluhisi3>:
    1ae4:	0e 94 ae 0a 	call	0x155c	; 0x155c <__umulhisi3>
    1ae8:	a5 9f       	mul	r26, r21
    1aea:	90 0d       	add	r25, r0
    1aec:	b4 9f       	mul	r27, r20
    1aee:	90 0d       	add	r25, r0
    1af0:	a4 9f       	mul	r26, r20
    1af2:	80 0d       	add	r24, r0
    1af4:	91 1d       	adc	r25, r1
    1af6:	11 24       	eor	r1, r1
    1af8:	08 95       	ret

00001afa <__mulshisi3>:
    1afa:	b7 ff       	sbrs	r27, 7
    1afc:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__muluhisi3>

00001b00 <__mulohisi3>:
    1b00:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__muluhisi3>
    1b04:	82 1b       	sub	r24, r18
    1b06:	93 0b       	sbc	r25, r19
    1b08:	08 95       	ret

00001b0a <__udivmodsi4>:
    1b0a:	a1 e2       	ldi	r26, 0x21	; 33
    1b0c:	1a 2e       	mov	r1, r26
    1b0e:	aa 1b       	sub	r26, r26
    1b10:	bb 1b       	sub	r27, r27
    1b12:	fd 01       	movw	r30, r26
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <__udivmodsi4_ep>

00001b16 <__udivmodsi4_loop>:
    1b16:	aa 1f       	adc	r26, r26
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	ee 1f       	adc	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	a2 17       	cp	r26, r18
    1b20:	b3 07       	cpc	r27, r19
    1b22:	e4 07       	cpc	r30, r20
    1b24:	f5 07       	cpc	r31, r21
    1b26:	20 f0       	brcs	.+8      	; 0x1b30 <__udivmodsi4_ep>
    1b28:	a2 1b       	sub	r26, r18
    1b2a:	b3 0b       	sbc	r27, r19
    1b2c:	e4 0b       	sbc	r30, r20
    1b2e:	f5 0b       	sbc	r31, r21

00001b30 <__udivmodsi4_ep>:
    1b30:	66 1f       	adc	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	1a 94       	dec	r1
    1b3a:	69 f7       	brne	.-38     	; 0x1b16 <__udivmodsi4_loop>
    1b3c:	60 95       	com	r22
    1b3e:	70 95       	com	r23
    1b40:	80 95       	com	r24
    1b42:	90 95       	com	r25
    1b44:	9b 01       	movw	r18, r22
    1b46:	ac 01       	movw	r20, r24
    1b48:	bd 01       	movw	r22, r26
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret

00001b4e <_exit>:
    1b4e:	f8 94       	cli

00001b50 <__stop_program>:
    1b50:	ff cf       	rjmp	.-2      	; 0x1b50 <__stop_program>
