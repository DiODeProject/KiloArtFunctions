
build/propogate_message_action.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 26 08 	jmp	0x104c	; 0x104c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	cd 02       	muls	r28, r29
      6a:	49 03       	fmul	r20, r17
      6c:	a1 02       	muls	r26, r17
      6e:	98 02       	muls	r25, r24
      70:	9e 02       	muls	r25, r30
      72:	2b 03       	fmul	r18, r19
      74:	20 03       	mulsu	r18, r16
      76:	ab 09       	sbc	r26, r11
      78:	88 08       	sbc	r8, r8
      7a:	88 08       	sbc	r8, r8
      7c:	a8 09       	sbc	r26, r8
      7e:	b4 09       	sbc	r27, r4
      80:	a4 09       	sbc	r26, r4
      82:	bb 09       	sbc	r27, r11
      84:	b7 09       	sbc	r27, r7
      86:	bf 09       	sbc	r27, r15
      88:	77 09       	sbc	r23, r7
      8a:	49 09       	sbc	r20, r9

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e3       	ldi	r30, 0x3A	; 58
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a2 31       	cpi	r26, 0x12	; 18
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a2 e1       	ldi	r26, 0x12	; 18
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a8 38       	cpi	r26, 0x88	; 136
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <main>
      da:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	88 e1       	ldi	r24, 0x18	; 24
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
      e8:	20 91 12 01 	lds	r18, 0x0112
      ec:	30 91 13 01 	lds	r19, 0x0113
      f0:	23 2b       	or	r18, r19
      f2:	69 f4       	brne	.+26     	; 0x10e <message_rx+0x26>
    {
        new_message = 1;
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	30 93 13 01 	sts	0x0113, r19
      fc:	20 93 12 01 	sts	0x0112, r18
        received_message = m->data[0];
     100:	fc 01       	movw	r30, r24
     102:	80 81       	ld	r24, Z
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 05 01 	sts	0x0105, r25
     10a:	80 93 04 01 	sts	0x0104, r24
     10e:	08 95       	ret

00000110 <setup>:
int new_message = 0;
message_t message;

void setup()
{
    if (kilo_uid == SEED_ID){
     110:	80 91 83 01 	lds	r24, 0x0183
     114:	90 91 84 01 	lds	r25, 0x0184
     118:	8a 97       	sbiw	r24, 0x2a	; 42
     11a:	21 f1       	breq	.+72     	; 0x164 <setup+0x54>
        state = FORWARD;
    }
    else{
        state = STOP;
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 25 01 	sts	0x0125, r25
     124:	80 93 24 01 	sts	0x0124, r24
    }
    // Set the transmission message.
    message.type = NORMAL;
     128:	10 92 21 01 	sts	0x0121, r1
    message.data[0] = IDLE;
     12c:	83 e0       	ldi	r24, 0x03	; 3
     12e:	80 93 18 01 	sts	0x0118, r24
    message.crc = message_crc(&message);
     132:	88 e1       	ldi	r24, 0x18	; 24
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <message_crc>
     13a:	90 93 23 01 	sts	0x0123, r25
     13e:	80 93 22 01 	sts	0x0122, r24
  last_state_update = kilo_ticks;
     142:	80 91 4d 01 	lds	r24, 0x014D
     146:	90 91 4e 01 	lds	r25, 0x014E
     14a:	a0 91 4f 01 	lds	r26, 0x014F
     14e:	b0 91 50 01 	lds	r27, 0x0150
     152:	80 93 26 01 	sts	0x0126, r24
     156:	90 93 27 01 	sts	0x0127, r25
     15a:	a0 93 28 01 	sts	0x0128, r26
     15e:	b0 93 29 01 	sts	0x0129, r27
     162:	08 95       	ret
message_t message;

void setup()
{
    if (kilo_uid == SEED_ID){
        state = FORWARD;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	90 93 25 01 	sts	0x0125, r25
     16c:	80 93 24 01 	sts	0x0124, r24
     170:	db cf       	rjmp	.-74     	; 0x128 <setup+0x18>

00000172 <loop>:
}

void loop()
{
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 32))
     172:	40 91 4d 01 	lds	r20, 0x014D
     176:	50 91 4e 01 	lds	r21, 0x014E
     17a:	60 91 4f 01 	lds	r22, 0x014F
     17e:	70 91 50 01 	lds	r23, 0x0150
     182:	80 91 26 01 	lds	r24, 0x0126
     186:	90 91 27 01 	lds	r25, 0x0127
     18a:	a0 91 28 01 	lds	r26, 0x0128
     18e:	b0 91 29 01 	lds	r27, 0x0129
     192:	80 96       	adiw	r24, 0x20	; 32
     194:	a1 1d       	adc	r26, r1
     196:	b1 1d       	adc	r27, r1
     198:	84 17       	cp	r24, r20
     19a:	95 07       	cpc	r25, r21
     19c:	a6 07       	cpc	r26, r22
     19e:	b7 07       	cpc	r27, r23
     1a0:	00 f5       	brcc	.+64     	; 0x1e2 <loop+0x70>
  {
      last_state_update = kilo_ticks;
     1a2:	80 91 4d 01 	lds	r24, 0x014D
     1a6:	90 91 4e 01 	lds	r25, 0x014E
     1aa:	a0 91 4f 01 	lds	r26, 0x014F
     1ae:	b0 91 50 01 	lds	r27, 0x0150
     1b2:	80 93 26 01 	sts	0x0126, r24
     1b6:	90 93 27 01 	sts	0x0127, r25
     1ba:	a0 93 28 01 	sts	0x0128, r26
     1be:	b0 93 29 01 	sts	0x0129, r27
      if (new_message == 1){
     1c2:	80 91 12 01 	lds	r24, 0x0112
     1c6:	90 91 13 01 	lds	r25, 0x0113
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	59 f0       	breq	.+22     	; 0x1e4 <loop+0x72>
     1ce:	80 91 24 01 	lds	r24, 0x0124
     1d2:	90 91 25 01 	lds	r25, 0x0125
              }
         }
         new_message = 0;
     }

     if(state == FORWARD){
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	91 05       	cpc	r25, r1
     1da:	01 f1       	breq	.+64     	; 0x21c <loop+0xaa>
	      spinup_motors();
	      set_motors(kilo_straight_left, kilo_straight_right);
          }
            
     }
     else if(state == STOP){
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	91 05       	cpc	r25, r1
     1e0:	99 f1       	breq	.+102    	; 0x248 <loop+0xd6>
     1e2:	08 95       	ret
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 32))
  {
      last_state_update = kilo_ticks;
      if (new_message == 1){
          if (kilo_uid == SEED_ID){
     1e4:	80 91 83 01 	lds	r24, 0x0183
     1e8:	90 91 84 01 	lds	r25, 0x0184
     1ec:	8a 97       	sbiw	r24, 0x2a	; 42
     1ee:	f1 f1       	breq	.+124    	; 0x26c <loop+0xfa>
                    message.data[0] = FORWARD;
                    message.crc = message_crc(&message);
              }
          }
          else{
              if(received_message == STOP){
     1f0:	80 91 04 01 	lds	r24, 0x0104
     1f4:	90 91 05 01 	lds	r25, 0x0105
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	91 05       	cpc	r25, r1
     1fc:	09 f4       	brne	.+2      	; 0x200 <loop+0x8e>
     1fe:	62 c0       	rjmp	.+196    	; 0x2c4 <loop+0x152>
                  state = STOP;
                  message.type = NORMAL;
                  message.data[0] = STOP;
                  message.crc = message_crc(&message);
              }
              else if(received_message == FORWARD && energy == 1){
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	09 f4       	brne	.+2      	; 0x206 <loop+0x94>
     204:	4e c0       	rjmp	.+156    	; 0x2a2 <loop+0x130>
     206:	80 91 24 01 	lds	r24, 0x0124
     20a:	90 91 25 01 	lds	r25, 0x0125
                  message.type = NORMAL;
                  message.data[0] = FORWARD;
                  message.crc = message_crc(&message);
              }
         }
         new_message = 0;
     20e:	10 92 13 01 	sts	0x0113, r1
     212:	10 92 12 01 	sts	0x0112, r1
     }

     if(state == FORWARD){
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	01 f7       	brne	.-64     	; 0x1dc <loop+0x6a>
          if(current_motion != state){
     21c:	20 91 02 01 	lds	r18, 0x0102
     220:	30 91 03 01 	lds	r19, 0x0103
     224:	21 30       	cpi	r18, 0x01	; 1
     226:	31 05       	cpc	r19, r1
     228:	e1 f2       	breq	.-72     	; 0x1e2 <loop+0x70>
              current_motion = state;
     22a:	90 93 03 01 	sts	0x0103, r25
     22e:	80 93 02 01 	sts	0x0102, r24
	      set_color(RGB(1, 0, 0));
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 02 08 	call	0x1004	; 0x1004 <set_color>
	      spinup_motors();
     238:	0e 94 e6 03 	call	0x7cc	; 0x7cc <spinup_motors>
	      set_motors(kilo_straight_left, kilo_straight_right);
     23c:	60 91 86 01 	lds	r22, 0x0186
     240:	80 91 85 01 	lds	r24, 0x0185
     244:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <set_motors>
          }
            
     }
     else if(state == STOP){

          if(current_motion != state){
     248:	20 91 02 01 	lds	r18, 0x0102
     24c:	30 91 03 01 	lds	r19, 0x0103
     250:	22 30       	cpi	r18, 0x02	; 2
     252:	31 05       	cpc	r19, r1
     254:	31 f2       	breq	.-116    	; 0x1e2 <loop+0x70>
              current_motion = state;
     256:	90 93 03 01 	sts	0x0103, r25
     25a:	80 93 02 01 	sts	0x0102, r24
	      set_color(RGB(0, 0, 1));
     25e:	80 e1       	ldi	r24, 0x10	; 16
     260:	0e 94 02 08 	call	0x1004	; 0x1004 <set_color>
	      set_motors(0, 0);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <set_motors>
  if (kilo_ticks > (last_state_update + 32))
  {
      last_state_update = kilo_ticks;
      if (new_message == 1){
          if (kilo_uid == SEED_ID){
              if(received_message == 0){
     26c:	80 91 04 01 	lds	r24, 0x0104
     270:	90 91 05 01 	lds	r25, 0x0105
     274:	89 2b       	or	r24, r25
     276:	71 f1       	breq	.+92     	; 0x2d4 <loop+0x162>
                  state = STOP;
                    message.type = NORMAL;
                    message.data[0] = STOP;
                    message.crc = message_crc(&message);
              }
              if(state == FORWARD){
     278:	80 91 24 01 	lds	r24, 0x0124
     27c:	90 91 25 01 	lds	r25, 0x0125
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	91 05       	cpc	r25, r1
     284:	21 f6       	brne	.-120    	; 0x20e <loop+0x9c>
                  message.crc = message_crc(&message);
              }
              else if(received_message == FORWARD && energy == 1){
                  state = FORWARD;
                  energy = 0;
                  message.type = NORMAL;
     286:	10 92 21 01 	sts	0x0121, r1
                  message.data[0] = FORWARD;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 18 01 	sts	0x0118, r24
                  message.crc = message_crc(&message);
     290:	88 e1       	ldi	r24, 0x18	; 24
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <message_crc>
     298:	90 93 23 01 	sts	0x0123, r25
     29c:	80 93 22 01 	sts	0x0122, r24
     2a0:	b2 cf       	rjmp	.-156    	; 0x206 <loop+0x94>
                  state = STOP;
                  message.type = NORMAL;
                  message.data[0] = STOP;
                  message.crc = message_crc(&message);
              }
              else if(received_message == FORWARD && energy == 1){
     2a2:	80 91 00 01 	lds	r24, 0x0100
     2a6:	90 91 01 01 	lds	r25, 0x0101
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	91 05       	cpc	r25, r1
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <loop+0x140>
     2b0:	aa cf       	rjmp	.-172    	; 0x206 <loop+0x94>
                  state = FORWARD;
     2b2:	90 93 25 01 	sts	0x0125, r25
     2b6:	80 93 24 01 	sts	0x0124, r24
                  energy = 0;
     2ba:	10 92 01 01 	sts	0x0101, r1
     2be:	10 92 00 01 	sts	0x0100, r1
     2c2:	e1 cf       	rjmp	.-62     	; 0x286 <loop+0x114>
                    message.crc = message_crc(&message);
              }
          }
          else{
              if(received_message == STOP){
                  state = STOP;
     2c4:	90 93 25 01 	sts	0x0125, r25
     2c8:	80 93 24 01 	sts	0x0124, r24
                  message.type = NORMAL;
     2cc:	10 92 21 01 	sts	0x0121, r1
                  message.data[0] = STOP;
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	dc cf       	rjmp	.-72     	; 0x28c <loop+0x11a>
  {
      last_state_update = kilo_ticks;
      if (new_message == 1){
          if (kilo_uid == SEED_ID){
              if(received_message == 0){
                  state = STOP;
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	90 93 25 01 	sts	0x0125, r25
     2dc:	80 93 24 01 	sts	0x0124, r24
                    message.type = NORMAL;
     2e0:	10 92 21 01 	sts	0x0121, r1
                    message.data[0] = STOP;
     2e4:	80 93 18 01 	sts	0x0118, r24
                    message.crc = message_crc(&message);
     2e8:	88 e1       	ldi	r24, 0x18	; 24
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <message_crc>
     2f0:	90 93 23 01 	sts	0x0123, r25
     2f4:	80 93 22 01 	sts	0x0122, r24
     2f8:	bf cf       	rjmp	.-130    	; 0x278 <loop+0x106>

000002fa <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     2fa:	08 95       	ret

000002fc <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	08 95       	ret

00000302 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     302:	08 95       	ret

00000304 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
    cli();
     312:	f8 94       	cli

    ports_off();
     314:	14 b8       	out	0x04, r1	; 4
     316:	17 b8       	out	0x07, r1	; 7
     318:	1a b8       	out	0x0a, r1	; 10
     31a:	15 b8       	out	0x05, r1	; 5
     31c:	18 b8       	out	0x08, r1	; 8
     31e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     320:	52 9a       	sbi	0x0a, 2	; 10
     322:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     324:	14 bc       	out	0x24, r1	; 36
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	85 bd       	out	0x25, r24	; 37
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	87 bd       	out	0x27, r24	; 39
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     334:	10 92 80 00 	sts	0x0080, r1
     338:	10 92 81 00 	sts	0x0081, r1
     33c:	2f e8       	ldi	r18, 0x8F	; 143
     33e:	3b e0       	ldi	r19, 0x0B	; 11
     340:	30 93 89 00 	sts	0x0089, r19
     344:	20 93 88 00 	sts	0x0088, r18
     348:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     34c:	53 98       	cbi	0x0a, 3	; 10
     34e:	23 98       	cbi	0x04, 3	; 4
     350:	91 ea       	ldi	r25, 0xA1	; 161
     352:	90 93 b0 00 	sts	0x00B0, r25
     356:	80 93 b1 00 	sts	0x00B1, r24
     35a:	10 92 b4 00 	sts	0x00B4, r1
     35e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     362:	8b e0       	ldi	r24, 0x0B	; 11
     364:	80 bf       	out	0x30, r24	; 48
     366:	83 e0       	ldi	r24, 0x03	; 3
     368:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     36c:	86 e0       	ldi	r24, 0x06	; 6
     36e:	80 93 7c 00 	sts	0x007C, r24
     372:	83 e8       	ldi	r24, 0x83	; 131
     374:	80 93 7a 00 	sts	0x007A, r24
     378:	80 91 7a 00 	lds	r24, 0x007A
     37c:	80 64       	ori	r24, 0x40	; 64
     37e:	80 93 7a 00 	sts	0x007A, r24
     382:	80 91 7a 00 	lds	r24, 0x007A
     386:	86 fd       	sbrc	r24, 6
     388:	fc cf       	rjmp	.-8      	; 0x382 <kilo_init+0x7e>
    adc_trigger_high_gain();
     38a:	10 92 7c 00 	sts	0x007C, r1
     38e:	83 ea       	ldi	r24, 0xA3	; 163
     390:	80 93 7a 00 	sts	0x007A, r24
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
    if (osccal != 0xFF)
     3a2:	8f 3f       	cpi	r24, 0xFF	; 255
     3a4:	11 f0       	breq	.+4      	; 0x3aa <kilo_init+0xa6>
        OSCCAL = osccal;
     3a6:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     3aa:	10 92 51 01 	sts	0x0151, r1
    rx_leadingbit = 1;
     3ae:	c1 e0       	ldi	r28, 0x01	; 1
     3b0:	c0 93 2a 01 	sts	0x012A, r28
    rx_leadingbyte = 1;
     3b4:	c0 93 6e 01 	sts	0x016E, r28
    rx_byteindex = 0;
     3b8:	10 92 48 01 	sts	0x0148, r1
    rx_bytevalue = 0;
     3bc:	10 92 82 01 	sts	0x0182, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3c0:	80 e9       	ldi	r24, 0x90	; 144
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     3c8:	80 93 47 01 	sts	0x0147, r24
    if (tx_mask & ~TX_MASK_MAX)
     3cc:	80 91 47 01 	lds	r24, 0x0147
     3d0:	88 73       	andi	r24, 0x38	; 56
     3d2:	11 f0       	breq	.+4      	; 0x3d8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3d4:	c0 93 47 01 	sts	0x0147, r28
    tx_clock = 0;
     3d8:	10 92 72 01 	sts	0x0172, r1
     3dc:	10 92 71 01 	sts	0x0171, r1
    tx_increment = 255;
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	90 93 70 01 	sts	0x0170, r25
     3e8:	80 93 6f 01 	sts	0x016F, r24
    kilo_ticks = 0;
     3ec:	10 92 4d 01 	sts	0x014D, r1
     3f0:	10 92 4e 01 	sts	0x014E, r1
     3f4:	10 92 4f 01 	sts	0x014F, r1
     3f8:	10 92 50 01 	sts	0x0150, r1
    kilo_state = IDLE;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     402:	82 e4       	ldi	r24, 0x42	; 66
     404:	9f e0       	ldi	r25, 0x0F	; 15
     406:	90 93 81 01 	sts	0x0181, r25
     40a:	80 93 80 01 	sts	0x0180, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     40e:	80 eb       	ldi	r24, 0xB0	; 176
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     416:	c8 2f       	mov	r28, r24
     418:	81 eb       	ldi	r24, 0xB1	; 177
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     420:	2c 2f       	mov	r18, r28
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	38 2b       	or	r19, r24
     426:	30 93 84 01 	sts	0x0184, r19
     42a:	20 93 83 01 	sts	0x0183, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     42e:	85 e0       	ldi	r24, 0x05	; 5
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     436:	80 93 87 01 	sts	0x0187, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     43a:	89 e0       	ldi	r24, 0x09	; 9
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     442:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     446:	8c e0       	ldi	r24, 0x0C	; 12
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     44e:	80 93 85 01 	sts	0x0185, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     452:	84 e1       	ldi	r24, 0x14	; 20
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     45a:	80 93 86 01 	sts	0x0186, r24
     45e:	52 e5       	ldi	r21, 0x52	; 82
     460:	e5 2e       	mov	r14, r21
     462:	51 e0       	ldi	r21, 0x01	; 1
     464:	f5 2e       	mov	r15, r21
     466:	0b e2       	ldi	r16, 0x2B	; 43
     468:	11 e0       	ldi	r17, 0x01	; 1
     46a:	c0 e2       	ldi	r28, 0x20	; 32
     46c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     46e:	ce 01       	movw	r24, r28
     470:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     474:	d8 2e       	mov	r13, r24
     476:	ce 01       	movw	r24, r28
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     47e:	2d 2d       	mov	r18, r13
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	32 2f       	mov	r19, r18
     484:	22 27       	eor	r18, r18
     486:	28 2b       	or	r18, r24
     488:	f7 01       	movw	r30, r14
     48a:	21 93       	st	Z+, r18
     48c:	31 93       	st	Z+, r19
     48e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     490:	ce 01       	movw	r24, r28
     492:	c0 96       	adiw	r24, 0x30	; 48
     494:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     498:	d8 2e       	mov	r13, r24
     49a:	ce 01       	movw	r24, r28
     49c:	c1 96       	adiw	r24, 0x31	; 49
     49e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <eeprom_read_byte>
     4a2:	2d 2d       	mov	r18, r13
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	32 2f       	mov	r19, r18
     4a8:	22 27       	eor	r18, r18
     4aa:	28 2b       	or	r18, r24
     4ac:	f8 01       	movw	r30, r16
     4ae:	21 93       	st	Z+, r18
     4b0:	31 93       	st	Z+, r19
     4b2:	8f 01       	movw	r16, r30
     4b4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4b6:	cc 33       	cpi	r28, 0x3C	; 60
     4b8:	d1 05       	cpc	r29, r1
     4ba:	c9 f6       	brne	.-78     	; 0x46e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4bc:	78 94       	sei
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	df 90       	pop	r13
     4cc:	08 95       	ret

000004ce <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	8f 93       	push	r24
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	a8 95       	wdr
     4e0:	80 91 60 00 	lds	r24, 0x0060
     4e4:	88 61       	ori	r24, 0x18	; 24
     4e6:	80 93 60 00 	sts	0x0060, r24
     4ea:	10 92 60 00 	sts	0x0060, r1
     4ee:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     4f0:	8f 91       	pop	r24
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     4fc:	3c 01       	movw	r6, r24
     4fe:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     500:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     502:	99 24       	eor	r9, r9
     504:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     50a:	96 e0       	ldi	r25, 0x06	; 6
     50c:	a9 2e       	mov	r10, r25
     50e:	23 e8       	ldi	r18, 0x83	; 131
     510:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     512:	38 e1       	ldi	r19, 0x18	; 24
     514:	d3 2e       	mov	r13, r19
     516:	49 e2       	ldi	r20, 0x29	; 41
     518:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     51a:	90 91 17 01 	lds	r25, 0x0117
     51e:	e9 2f       	mov	r30, r25
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	e7 30       	cpi	r30, 0x07	; 7
     524:	f1 05       	cpc	r31, r1
     526:	c8 f7       	brcc	.-14     	; 0x51a <kilo_start+0x1e>
     528:	ec 5c       	subi	r30, 0xCC	; 204
     52a:	ff 4f       	sbci	r31, 0xFF	; 255
     52c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     530:	11 23       	and	r17, r17
     532:	09 f4       	brne	.+2      	; 0x536 <kilo_start+0x3a>
     534:	fc c0       	rjmp	.+504    	; 0x72e <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     536:	c0 92 17 01 	sts	0x0117, r12
     53a:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     53c:	fe 01       	movw	r30, r28
     53e:	09 95       	icall
                break;
     540:	ec cf       	rjmp	.-40     	; 0x51a <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     542:	80 91 51 01 	lds	r24, 0x0151
     546:	81 11       	cpse	r24, r1
     548:	eb c0       	rjmp	.+470    	; 0x720 <kilo_start+0x224>
        cli();                                    // disable interrupts
     54a:	f8 94       	cli
        adc_setup_conversion(6);
     54c:	a0 92 7c 00 	sts	0x007C, r10
     550:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     554:	80 91 7a 00 	lds	r24, 0x007A
     558:	80 64       	ori	r24, 0x40	; 64
     55a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     55e:	90 91 7a 00 	lds	r25, 0x007A
     562:	96 fd       	sbrc	r25, 6
     564:	fc cf       	rjmp	.-8      	; 0x55e <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     566:	80 91 78 00 	lds	r24, 0x0078
     56a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     56e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     570:	8b 3a       	cpi	r24, 0xAB	; 171
     572:	e2 e0       	ldi	r30, 0x02	; 2
     574:	9e 07       	cpc	r25, r30
     576:	0c f0       	brlt	.+2      	; 0x57a <kilo_start+0x7e>
     578:	ed c0       	rjmp	.+474    	; 0x754 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     57a:	89 38       	cpi	r24, 0x89	; 137
     57c:	f2 e0       	ldi	r31, 0x02	; 2
     57e:	9f 07       	cpc	r25, r31
     580:	0c f0       	brlt	.+2      	; 0x584 <kilo_start+0x88>
     582:	ef c0       	rjmp	.+478    	; 0x762 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     584:	87 36       	cpi	r24, 0x67	; 103
     586:	92 40       	sbci	r25, 0x02	; 2
     588:	0c f4       	brge	.+2      	; 0x58c <kilo_start+0x90>
     58a:	ca c0       	rjmp	.+404    	; 0x720 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     58c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     58e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     590:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     592:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     594:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     596:	3c 98       	cbi	0x07, 4	; 7
     598:	c0 cf       	rjmp	.-128    	; 0x51a <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     59a:	f8 94       	cli
                acomp_off();
     59c:	80 b7       	in	r24, 0x30	; 48
     59e:	87 7f       	andi	r24, 0xF7	; 247
     5a0:	80 bf       	out	0x30, r24	; 48
                adc_off();
     5a2:	80 91 7a 00 	lds	r24, 0x007A
     5a6:	8f 77       	andi	r24, 0x7F	; 127
     5a8:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     5ac:	14 b8       	out	0x04, r1	; 4
     5ae:	17 b8       	out	0x07, r1	; 7
     5b0:	1a b8       	out	0x0a, r1	; 10
     5b2:	15 b8       	out	0x05, r1	; 5
     5b4:	18 b8       	out	0x08, r1	; 8
     5b6:	1b b8       	out	0x0b, r1	; 11
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	a8 95       	wdr
     5be:	d0 92 60 00 	sts	0x0060, r13
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     5c8:	80 91 60 00 	lds	r24, 0x0060
     5cc:	80 64       	ori	r24, 0x40	; 64
     5ce:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     5d2:	93 b7       	in	r25, 0x33	; 51
     5d4:	91 7f       	andi	r25, 0xF1	; 241
     5d6:	94 60       	ori	r25, 0x04	; 4
     5d8:	93 bf       	out	0x33, r25	; 51
                cli();
     5da:	f8 94       	cli
                sleep_enable();
     5dc:	83 b7       	in	r24, 0x33	; 51
     5de:	81 60       	ori	r24, 0x01	; 1
     5e0:	83 bf       	out	0x33, r24	; 51
                sei();
     5e2:	78 94       	sei
                sleep_cpu();
     5e4:	88 95       	sleep
                sleep_disable();
     5e6:	83 b7       	in	r24, 0x33	; 51
     5e8:	8e 7f       	andi	r24, 0xFE	; 254
     5ea:	83 bf       	out	0x33, r24	; 51
                sei();
     5ec:	78 94       	sei
                rx_busy = 0;
     5ee:	10 92 51 01 	sts	0x0151, r1
                ports_on();
     5f2:	52 9a       	sbi	0x0a, 2	; 10
     5f4:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     5f6:	80 91 7a 00 	lds	r24, 0x007A
     5fa:	80 68       	ori	r24, 0x80	; 128
     5fc:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     600:	87 e5       	ldi	r24, 0x57	; 87
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <kilo_start+0x108>
     608:	00 c0       	rjmp	.+0      	; 0x60a <kilo_start+0x10e>
     60a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     60c:	80 b7       	in	r24, 0x30	; 48
     60e:	88 61       	ori	r24, 0x18	; 24
     610:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     612:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     614:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     616:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     618:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     61a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     61c:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61e:	ef e1       	ldi	r30, 0x1F	; 31
     620:	fe e4       	ldi	r31, 0x4E	; 78
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <kilo_start+0x126>
     626:	00 c0       	rjmp	.+0      	; 0x628 <kilo_start+0x12c>
     628:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     62a:	80 91 51 01 	lds	r24, 0x0151
     62e:	81 11       	cpse	r24, r1
     630:	81 c0       	rjmp	.+258    	; 0x734 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     632:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     634:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     636:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     638:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     63a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     63c:	3c 98       	cbi	0x07, 4	; 7
     63e:	6d cf       	rjmp	.-294    	; 0x51a <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     640:	80 91 15 01 	lds	r24, 0x0115
     644:	81 11       	cpse	r24, r1
     646:	41 c0       	rjmp	.+130    	; 0x6ca <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     648:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     64c:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     650:	10 92 16 01 	sts	0x0116, r1
     654:	62 cf       	rjmp	.-316    	; 0x51a <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     656:	48 99       	sbic	0x09, 0	; 9
     658:	ec cf       	rjmp	.-40     	; 0x632 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     65a:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     65c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     65e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     660:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     662:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     664:	3c 98       	cbi	0x07, 4	; 7
     666:	8f ec       	ldi	r24, 0xCF	; 207
     668:	97 e0       	ldi	r25, 0x07	; 7
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <kilo_start+0x16e>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <kilo_start+0x174>
     670:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     672:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     674:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     676:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     678:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     67a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     67c:	3c 98       	cbi	0x07, 4	; 7
     67e:	9f ef       	ldi	r25, 0xFF	; 255
     680:	e1 ee       	ldi	r30, 0xE1	; 225
     682:	f4 e0       	ldi	r31, 0x04	; 4
     684:	91 50       	subi	r25, 0x01	; 1
     686:	e0 40       	sbci	r30, 0x00	; 0
     688:	f0 40       	sbci	r31, 0x00	; 0
     68a:	e1 f7       	brne	.-8      	; 0x684 <kilo_start+0x188>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <kilo_start+0x192>
     68e:	00 00       	nop
     690:	44 cf       	rjmp	.-376    	; 0x51a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     692:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     694:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     696:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     698:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     69a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     69c:	3c 98       	cbi	0x07, 4	; 7
     69e:	ef ec       	ldi	r30, 0xCF	; 207
     6a0:	f7 e0       	ldi	r31, 0x07	; 7
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <kilo_start+0x1a6>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <kilo_start+0x1ac>
     6a8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6aa:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6ac:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6ae:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6b0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6b2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6b4:	3c 98       	cbi	0x07, 4	; 7
     6b6:	ff ef       	ldi	r31, 0xFF	; 255
     6b8:	21 ee       	ldi	r18, 0xE1	; 225
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	f1 50       	subi	r31, 0x01	; 1
     6be:	20 40       	sbci	r18, 0x00	; 0
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <kilo_start+0x1c0>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <kilo_start+0x1ca>
     6c6:	00 00       	nop
     6c8:	28 cf       	rjmp	.-432    	; 0x51a <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     6ca:	90 91 15 01 	lds	r25, 0x0115
     6ce:	80 91 16 01 	lds	r24, 0x0116
     6d2:	98 17       	cp	r25, r24
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <kilo_start+0x1dc>
     6d6:	21 cf       	rjmp	.-446    	; 0x51a <kilo_start+0x1e>
                        prev_motion = cur_motion;
     6d8:	80 91 15 01 	lds	r24, 0x0115
     6dc:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     6e0:	80 91 15 01 	lds	r24, 0x0115
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	09 f4       	brne	.+2      	; 0x6ea <kilo_start+0x1ee>
     6e8:	50 c0       	rjmp	.+160    	; 0x78a <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6ea:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6ee:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6f2:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6f6:	82 30       	cpi	r24, 0x02	; 2
     6f8:	d9 f1       	breq	.+118    	; 0x770 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6fa:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     6fe:	90 92 b4 00 	sts	0x00B4, r9
     702:	8f e2       	ldi	r24, 0x2F	; 47
     704:	95 e7       	ldi	r25, 0x75	; 117
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <kilo_start+0x20a>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <kilo_start+0x210>
     70c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     70e:	80 91 86 01 	lds	r24, 0x0186
     712:	90 91 85 01 	lds	r25, 0x0185
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     716:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     71a:	80 93 b4 00 	sts	0x00B4, r24
     71e:	fd ce       	rjmp	.-518    	; 0x51a <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     720:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     722:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     724:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     726:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     728:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     72a:	3c 98       	cbi	0x07, 4	; 7
     72c:	f6 ce       	rjmp	.-532    	; 0x51a <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     72e:	f3 01       	movw	r30, r6
     730:	09 95       	icall
     732:	01 cf       	rjmp	.-510    	; 0x536 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     734:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     736:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     738:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     73a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     73c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     73e:	3c 98       	cbi	0x07, 4	; 7
     740:	ff ef       	ldi	r31, 0xFF	; 255
     742:	20 e7       	ldi	r18, 0x70	; 112
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	f1 50       	subi	r31, 0x01	; 1
     748:	20 40       	sbci	r18, 0x00	; 0
     74a:	80 40       	sbci	r24, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <kilo_start+0x24a>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <kilo_start+0x254>
     750:	00 00       	nop
     752:	6f cf       	rjmp	.-290    	; 0x632 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     754:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     756:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     758:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     75a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     75c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     75e:	3c 98       	cbi	0x07, 4	; 7
     760:	dc ce       	rjmp	.-584    	; 0x51a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     762:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     764:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     766:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     768:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     76a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     76c:	3c 9a       	sbi	0x07, 4	; 7
     76e:	d5 ce       	rjmp	.-598    	; 0x51a <kilo_start+0x1e>
     770:	ef e2       	ldi	r30, 0x2F	; 47
     772:	f5 e7       	ldi	r31, 0x75	; 117
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <kilo_start+0x278>
     778:	00 c0       	rjmp	.+0      	; 0x77a <kilo_start+0x27e>
     77a:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     77c:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     780:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     784:	80 93 b4 00 	sts	0x00B4, r24
     788:	c8 ce       	rjmp	.-624    	; 0x51a <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     78a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     78e:	10 92 b4 00 	sts	0x00B4, r1
     792:	8f e2       	ldi	r24, 0x2F	; 47
     794:	95 e7       	ldi	r25, 0x75	; 117
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <kilo_start+0x29a>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <kilo_start+0x2a0>
     79c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     79e:	80 91 87 01 	lds	r24, 0x0187
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7a2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7a6:	10 92 b4 00 	sts	0x00B4, r1
     7aa:	b7 ce       	rjmp	.-658    	; 0x51a <kilo_start+0x1e>

000007ac <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     7ac:	07 c0       	rjmp	.+14     	; 0x7bc <delay+0x10>
     7ae:	ef ec       	ldi	r30, 0xCF	; 207
     7b0:	f7 e0       	ldi	r31, 0x07	; 7
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <delay+0x6>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <delay+0xc>
     7b8:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     7ba:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	b9 f7       	brne	.-18     	; 0x7ae <delay+0x2>
     7c0:	08 95       	ret

000007c2 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7c2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7c6:	60 93 b4 00 	sts	0x00B4, r22
     7ca:	08 95       	ret

000007cc <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7d2:	80 93 b4 00 	sts	0x00B4, r24
     7d6:	8f e0       	ldi	r24, 0x0F	; 15
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	ef ec       	ldi	r30, 0xCF	; 207
     7dc:	f7 e0       	ldi	r31, 0x07	; 7
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <spinup_motors+0x12>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <spinup_motors+0x18>
     7e4:	00 00       	nop
     7e6:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7e8:	c1 f7       	brne	.-16     	; 0x7da <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     7ea:	08 95       	ret

000007ec <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     7ec:	80 91 51 01 	lds	r24, 0x0151
     7f0:	81 11       	cpse	r24, r1
     7f2:	1e c0       	rjmp	.+60     	; 0x830 <get_ambientlight+0x44>
        cli();
     7f4:	f8 94       	cli
        adc_setup_conversion(7);
     7f6:	87 e0       	ldi	r24, 0x07	; 7
     7f8:	80 93 7c 00 	sts	0x007C, r24
     7fc:	83 e8       	ldi	r24, 0x83	; 131
     7fe:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     802:	80 91 7a 00 	lds	r24, 0x007A
     806:	80 64       	ori	r24, 0x40	; 64
     808:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     80c:	80 91 7a 00 	lds	r24, 0x007A
     810:	86 fd       	sbrc	r24, 6
     812:	fc cf       	rjmp	.-8      	; 0x80c <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     814:	80 91 78 00 	lds	r24, 0x0078
     818:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     81c:	10 92 7c 00 	sts	0x007C, r1
     820:	23 ea       	ldi	r18, 0xA3	; 163
     822:	20 93 7a 00 	sts	0x007A, r18
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     82c:	78 94       	sei
     82e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     834:	08 95       	ret

00000836 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     836:	80 91 51 01 	lds	r24, 0x0151
     83a:	81 11       	cpse	r24, r1
     83c:	1e c0       	rjmp	.+60     	; 0x87a <get_temperature+0x44>
        cli();
     83e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     840:	88 ec       	ldi	r24, 0xC8	; 200
     842:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     846:	87 e8       	ldi	r24, 0x87	; 135
     848:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     84c:	80 91 7a 00 	lds	r24, 0x007A
     850:	80 64       	ori	r24, 0x40	; 64
     852:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     856:	80 91 7a 00 	lds	r24, 0x007A
     85a:	86 fd       	sbrc	r24, 6
     85c:	fc cf       	rjmp	.-8      	; 0x856 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     85e:	80 91 78 00 	lds	r24, 0x0078
     862:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     866:	10 92 7c 00 	sts	0x007C, r1
     86a:	23 ea       	ldi	r18, 0xA3	; 163
     86c:	20 93 7a 00 	sts	0x007A, r18
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     876:	78 94       	sei
     878:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     87e:	08 95       	ret

00000880 <rand_hard>:

uint8_t rand_hard() {
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	e0 e0       	ldi	r30, 0x00	; 0
     88a:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     88c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     88e:	03 ea       	ldi	r16, 0xA3	; 163
     890:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     892:	d6 e0       	ldi	r29, 0x06	; 6
     894:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     896:	a1 e0       	ldi	r26, 0x01	; 1
     898:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     89a:	60 e8       	ldi	r22, 0x80	; 128
     89c:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     89e:	f8 94       	cli
            adc_setup_conversion(6);
     8a0:	d0 93 7c 00 	sts	0x007C, r29
     8a4:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     8a8:	90 91 7a 00 	lds	r25, 0x007A
     8ac:	90 64       	ori	r25, 0x40	; 64
     8ae:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8b2:	90 91 7a 00 	lds	r25, 0x007A
     8b6:	96 fd       	sbrc	r25, 6
     8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <rand_hard+0x32>
            a = ADCW&0x1;
     8ba:	20 91 78 00 	lds	r18, 0x0078
     8be:	30 91 79 00 	lds	r19, 0x0079
     8c2:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     8c4:	90 91 7a 00 	lds	r25, 0x007A
     8c8:	90 64       	ori	r25, 0x40	; 64
     8ca:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8ce:	90 91 7a 00 	lds	r25, 0x007A
     8d2:	96 fd       	sbrc	r25, 6
     8d4:	fc cf       	rjmp	.-8      	; 0x8ce <rand_hard+0x4e>
            b = ADCW&0x1;
     8d6:	40 91 78 00 	lds	r20, 0x0078
     8da:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     8de:	10 92 7c 00 	sts	0x007C, r1
     8e2:	00 93 7a 00 	sts	0x007A, r16
     8e6:	10 93 7b 00 	sts	0x007B, r17
            sei();
     8ea:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     8ec:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     8ee:	24 13       	cpse	r18, r20
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <rand_hard+0x78>
     8f2:	61 50       	subi	r22, 0x01	; 1
     8f4:	71 09       	sbc	r23, r1
     8f6:	99 f6       	brne	.-90     	; 0x89e <rand_hard+0x1e>
        if (a)
     8f8:	22 23       	and	r18, r18
     8fa:	39 f0       	breq	.+14     	; 0x90a <__stack+0xb>
            num |= (1<<i);
     8fc:	9d 01       	movw	r18, r26
     8fe:	0e 2e       	mov	r0, r30
     900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
     902:	22 0f       	add	r18, r18
     904:	0a 94       	dec	r0
     906:	ea f7       	brpl	.-6      	; 0x902 <__stack+0x3>
     908:	82 2b       	or	r24, r18
     90a:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     90c:	e8 30       	cpi	r30, 0x08	; 8
     90e:	f1 05       	cpc	r31, r1
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	c3 cf       	rjmp	.-122    	; 0x89a <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     91e:	80 91 06 01 	lds	r24, 0x0106
     922:	98 2f       	mov	r25, r24
     924:	99 0f       	add	r25, r25
     926:	99 0f       	add	r25, r25
     928:	99 0f       	add	r25, r25
     92a:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     92c:	90 91 14 01 	lds	r25, 0x0114
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	29 0f       	add	r18, r25
     934:	20 93 14 01 	sts	0x0114, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     938:	28 2f       	mov	r18, r24
     93a:	22 95       	swap	r18
     93c:	26 95       	lsr	r18
     93e:	27 70       	andi	r18, 0x07	; 7
     940:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     942:	96 95       	lsr	r25
     944:	96 95       	lsr	r25
     946:	89 27       	eor	r24, r25
     948:	80 93 06 01 	sts	0x0106, r24
    return seed;
}
     94c:	08 95       	ret

0000094e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     94e:	80 93 06 01 	sts	0x0106, r24
     952:	08 95       	ret

00000954 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     954:	80 91 51 01 	lds	r24, 0x0151
     958:	81 11       	cpse	r24, r1
     95a:	16 c0       	rjmp	.+44     	; 0x988 <get_voltage+0x34>
        cli();                                    // disable interrupts
     95c:	f8 94       	cli
        adc_setup_conversion(6);
     95e:	86 e0       	ldi	r24, 0x06	; 6
     960:	80 93 7c 00 	sts	0x007C, r24
     964:	83 e8       	ldi	r24, 0x83	; 131
     966:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     96a:	80 91 7a 00 	lds	r24, 0x007A
     96e:	80 64       	ori	r24, 0x40	; 64
     970:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     974:	80 91 7a 00 	lds	r24, 0x007A
     978:	86 fd       	sbrc	r24, 6
     97a:	fc cf       	rjmp	.-8      	; 0x974 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     97c:	80 91 78 00 	lds	r24, 0x0078
     980:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     984:	78 94       	sei
     986:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     98c:	08 95       	ret

0000098e <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     98e:	2f 92       	push	r2
     990:	3f 92       	push	r3
     992:	4f 92       	push	r4
     994:	5f 92       	push	r5
     996:	6f 92       	push	r6
     998:	7f 92       	push	r7
     99a:	8f 92       	push	r8
     99c:	9f 92       	push	r9
     99e:	af 92       	push	r10
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <estimate_distance+0x26>
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <estimate_distance+0x28>
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <estimate_distance+0x2a>
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     9be:	dc 01       	movw	r26, r24
     9c0:	12 96       	adiw	r26, 0x02	; 2
     9c2:	0d 90       	ld	r0, X+
     9c4:	bc 91       	ld	r27, X
     9c6:	a0 2d       	mov	r26, r0
     9c8:	be 83       	std	Y+6, r27	; 0x06
     9ca:	ad 83       	std	Y+5, r26	; 0x05
     9cc:	a4 38       	cpi	r26, 0x84	; 132
     9ce:	e3 e0       	ldi	r30, 0x03	; 3
     9d0:	be 07       	cpc	r27, r30
     9d2:	0c f0       	brlt	.+2      	; 0x9d6 <estimate_distance+0x48>
     9d4:	c9 c0       	rjmp	.+402    	; 0xb68 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     9d6:	80 91 2b 01 	lds	r24, 0x012B
     9da:	90 91 2c 01 	lds	r25, 0x012C
     9de:	8a 17       	cp	r24, r26
     9e0:	9b 07       	cpc	r25, r27
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <estimate_distance+0x58>
     9e4:	37 c1       	rjmp	.+622    	; 0xc54 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     9e6:	00 91 2d 01 	lds	r16, 0x012D
     9ea:	10 91 2e 01 	lds	r17, 0x012E
     9ee:	0a 17       	cp	r16, r26
     9f0:	1b 07       	cpc	r17, r27
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <estimate_distance+0x68>
     9f4:	2f c2       	rjmp	.+1118   	; 0xe54 <estimate_distance+0x4c6>
     9f6:	00 91 2f 01 	lds	r16, 0x012F
     9fa:	10 91 30 01 	lds	r17, 0x0130
     9fe:	0a 17       	cp	r16, r26
     a00:	1b 07       	cpc	r17, r27
     a02:	08 f4       	brcc	.+2      	; 0xa06 <estimate_distance+0x78>
     a04:	2f c2       	rjmp	.+1118   	; 0xe64 <estimate_distance+0x4d6>
     a06:	00 91 31 01 	lds	r16, 0x0131
     a0a:	10 91 32 01 	lds	r17, 0x0132
     a0e:	0a 17       	cp	r16, r26
     a10:	1b 07       	cpc	r17, r27
     a12:	08 f4       	brcc	.+2      	; 0xa16 <estimate_distance+0x88>
     a14:	2f c2       	rjmp	.+1118   	; 0xe74 <estimate_distance+0x4e6>
     a16:	00 91 33 01 	lds	r16, 0x0133
     a1a:	10 91 34 01 	lds	r17, 0x0134
     a1e:	0a 17       	cp	r16, r26
     a20:	1b 07       	cpc	r17, r27
     a22:	08 f4       	brcc	.+2      	; 0xa26 <estimate_distance+0x98>
     a24:	2f c2       	rjmp	.+1118   	; 0xe84 <estimate_distance+0x4f6>
     a26:	00 91 35 01 	lds	r16, 0x0135
     a2a:	10 91 36 01 	lds	r17, 0x0136
     a2e:	0a 17       	cp	r16, r26
     a30:	1b 07       	cpc	r17, r27
     a32:	08 f4       	brcc	.+2      	; 0xa36 <estimate_distance+0xa8>
     a34:	ef c1       	rjmp	.+990    	; 0xe14 <estimate_distance+0x486>
     a36:	00 91 37 01 	lds	r16, 0x0137
     a3a:	10 91 38 01 	lds	r17, 0x0138
     a3e:	0a 17       	cp	r16, r26
     a40:	1b 07       	cpc	r17, r27
     a42:	08 f4       	brcc	.+2      	; 0xa46 <estimate_distance+0xb8>
     a44:	27 c2       	rjmp	.+1102   	; 0xe94 <estimate_distance+0x506>
     a46:	00 91 39 01 	lds	r16, 0x0139
     a4a:	10 91 3a 01 	lds	r17, 0x013A
     a4e:	0a 17       	cp	r16, r26
     a50:	1b 07       	cpc	r17, r27
     a52:	08 f4       	brcc	.+2      	; 0xa56 <estimate_distance+0xc8>
     a54:	27 c2       	rjmp	.+1102   	; 0xea4 <estimate_distance+0x516>
     a56:	00 91 3b 01 	lds	r16, 0x013B
     a5a:	10 91 3c 01 	lds	r17, 0x013C
     a5e:	0a 17       	cp	r16, r26
     a60:	1b 07       	cpc	r17, r27
     a62:	08 f4       	brcc	.+2      	; 0xa66 <estimate_distance+0xd8>
     a64:	27 c2       	rjmp	.+1102   	; 0xeb4 <estimate_distance+0x526>
     a66:	00 91 3d 01 	lds	r16, 0x013D
     a6a:	10 91 3e 01 	lds	r17, 0x013E
     a6e:	0a 17       	cp	r16, r26
     a70:	1b 07       	cpc	r17, r27
     a72:	08 f4       	brcc	.+2      	; 0xa76 <estimate_distance+0xe8>
     a74:	27 c2       	rjmp	.+1102   	; 0xec4 <estimate_distance+0x536>
     a76:	00 91 3f 01 	lds	r16, 0x013F
     a7a:	10 91 40 01 	lds	r17, 0x0140
     a7e:	0a 17       	cp	r16, r26
     a80:	1b 07       	cpc	r17, r27
     a82:	08 f4       	brcc	.+2      	; 0xa86 <estimate_distance+0xf8>
     a84:	27 c2       	rjmp	.+1102   	; 0xed4 <estimate_distance+0x546>
     a86:	00 91 41 01 	lds	r16, 0x0141
     a8a:	10 91 42 01 	lds	r17, 0x0142
     a8e:	0a 17       	cp	r16, r26
     a90:	1b 07       	cpc	r17, r27
     a92:	08 f4       	brcc	.+2      	; 0xa96 <estimate_distance+0x108>
     a94:	23 c2       	rjmp	.+1094   	; 0xedc <estimate_distance+0x54e>
     a96:	00 91 43 01 	lds	r16, 0x0143
     a9a:	10 91 44 01 	lds	r17, 0x0144
     a9e:	0a 17       	cp	r16, r26
     aa0:	1b 07       	cpc	r17, r27
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <estimate_distance+0x118>
     aa4:	23 c2       	rjmp	.+1094   	; 0xeec <estimate_distance+0x55e>
     aa6:	00 91 45 01 	lds	r16, 0x0145
     aaa:	10 91 46 01 	lds	r17, 0x0146
     aae:	0a 17       	cp	r16, r26
     ab0:	1b 07       	cpc	r17, r27
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <estimate_distance+0x128>
     ab4:	23 c2       	rjmp	.+1094   	; 0xefc <estimate_distance+0x56e>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 ed       	ldi	r26, 0xD0	; 208
     abc:	b0 e4       	ldi	r27, 0x40	; 64
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	ab 83       	std	Y+3, r26	; 0x03
     ac4:	bc 83       	std	Y+4, r27	; 0x04
     ac6:	4c e0       	ldi	r20, 0x0C	; 12
     ac8:	e4 2e       	mov	r14, r20
     aca:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     acc:	f7 01       	movw	r30, r14
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	e5 5d       	subi	r30, 0xD5	; 213
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	80 81       	ld	r24, Z
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	b8 01       	movw	r22, r16
     adc:	68 1b       	sub	r22, r24
     ade:	79 0b       	sbc	r23, r25
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     ae8:	9b 01       	movw	r18, r22
     aea:	ac 01       	movw	r20, r24
     aec:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     af4:	ad 81       	ldd	r26, Y+5	; 0x05
     af6:	be 81       	ldd	r27, Y+6	; 0x06
     af8:	bd 01       	movw	r22, r26
     afa:	bb 0f       	add	r27, r27
     afc:	88 0b       	sbc	r24, r24
     afe:	99 0b       	sbc	r25, r25
     b00:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__floatsisf>
     b04:	4b 01       	movw	r8, r22
     b06:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b08:	b8 01       	movw	r22, r16
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     b12:	2b 01       	movw	r4, r22
     b14:	3c 01       	movw	r6, r24
     b16:	29 81       	ldd	r18, Y+1	; 0x01
     b18:	3a 81       	ldd	r19, Y+2	; 0x02
     b1a:	4b 81       	ldd	r20, Y+3	; 0x03
     b1c:	5c 81       	ldd	r21, Y+4	; 0x04
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
     b26:	9b 01       	movw	r18, r22
     b28:	ac 01       	movw	r20, r24
     b2a:	c3 01       	movw	r24, r6
     b2c:	b2 01       	movw	r22, r4
     b2e:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b36:	c5 01       	movw	r24, r10
     b38:	b4 01       	movw	r22, r8
     b3a:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e2       	ldi	r20, 0x20	; 32
     b44:	51 e4       	ldi	r21, 0x41	; 65
     b46:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
            b=((int)((int)b/(int)slope));
     b4a:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
     b4e:	8b 01       	movw	r16, r22
     b50:	c7 01       	movw	r24, r14
     b52:	b6 01       	movw	r22, r12
     b54:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
     b58:	ab 01       	movw	r20, r22
     b5a:	bc 01       	movw	r22, r24
     b5c:	c8 01       	movw	r24, r16
     b5e:	ba 01       	movw	r22, r20
     b60:	0e 94 08 0b 	call	0x1610	; 0x1610 <__divmodhi4>
            dist_high=b;
     b64:	16 2f       	mov	r17, r22
     b66:	77 c0       	rjmp	.+238    	; 0xc56 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b68:	dc 01       	movw	r26, r24
     b6a:	cd 90       	ld	r12, X+
     b6c:	dc 90       	ld	r13, X
     b6e:	80 91 52 01 	lds	r24, 0x0152
     b72:	90 91 53 01 	lds	r25, 0x0153
     b76:	8c 15       	cp	r24, r12
     b78:	9d 05       	cpc	r25, r13
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <estimate_distance+0x1f0>
     b7c:	8c c0       	rjmp	.+280    	; 0xc96 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b7e:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b80:	e0 90 54 01 	lds	r14, 0x0154
     b84:	f0 90 55 01 	lds	r15, 0x0155
     b88:	ec 14       	cp	r14, r12
     b8a:	fd 04       	cpc	r15, r13
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <estimate_distance+0x202>
     b8e:	5e c1       	rjmp	.+700    	; 0xe4c <estimate_distance+0x4be>
     b90:	e0 90 56 01 	lds	r14, 0x0156
     b94:	f0 90 57 01 	lds	r15, 0x0157
     b98:	ec 14       	cp	r14, r12
     b9a:	fd 04       	cpc	r15, r13
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <estimate_distance+0x212>
     b9e:	5e c1       	rjmp	.+700    	; 0xe5c <estimate_distance+0x4ce>
     ba0:	e0 90 58 01 	lds	r14, 0x0158
     ba4:	f0 90 59 01 	lds	r15, 0x0159
     ba8:	ec 14       	cp	r14, r12
     baa:	fd 04       	cpc	r15, r13
     bac:	08 f4       	brcc	.+2      	; 0xbb0 <estimate_distance+0x222>
     bae:	5e c1       	rjmp	.+700    	; 0xe6c <estimate_distance+0x4de>
     bb0:	e0 90 5a 01 	lds	r14, 0x015A
     bb4:	f0 90 5b 01 	lds	r15, 0x015B
     bb8:	ec 14       	cp	r14, r12
     bba:	fd 04       	cpc	r15, r13
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <estimate_distance+0x232>
     bbe:	5e c1       	rjmp	.+700    	; 0xe7c <estimate_distance+0x4ee>
     bc0:	e0 90 5c 01 	lds	r14, 0x015C
     bc4:	f0 90 5d 01 	lds	r15, 0x015D
     bc8:	ec 14       	cp	r14, r12
     bca:	fd 04       	cpc	r15, r13
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <estimate_distance+0x242>
     bce:	c3 c0       	rjmp	.+390    	; 0xd56 <estimate_distance+0x3c8>
     bd0:	e0 90 5e 01 	lds	r14, 0x015E
     bd4:	f0 90 5f 01 	lds	r15, 0x015F
     bd8:	ec 14       	cp	r14, r12
     bda:	fd 04       	cpc	r15, r13
     bdc:	08 f4       	brcc	.+2      	; 0xbe0 <estimate_distance+0x252>
     bde:	56 c1       	rjmp	.+684    	; 0xe8c <estimate_distance+0x4fe>
     be0:	e0 90 60 01 	lds	r14, 0x0160
     be4:	f0 90 61 01 	lds	r15, 0x0161
     be8:	ec 14       	cp	r14, r12
     bea:	fd 04       	cpc	r15, r13
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <estimate_distance+0x262>
     bee:	56 c1       	rjmp	.+684    	; 0xe9c <estimate_distance+0x50e>
     bf0:	e0 90 62 01 	lds	r14, 0x0162
     bf4:	f0 90 63 01 	lds	r15, 0x0163
     bf8:	ec 14       	cp	r14, r12
     bfa:	fd 04       	cpc	r15, r13
     bfc:	08 f4       	brcc	.+2      	; 0xc00 <estimate_distance+0x272>
     bfe:	56 c1       	rjmp	.+684    	; 0xeac <estimate_distance+0x51e>
     c00:	e0 90 64 01 	lds	r14, 0x0164
     c04:	f0 90 65 01 	lds	r15, 0x0165
     c08:	ec 14       	cp	r14, r12
     c0a:	fd 04       	cpc	r15, r13
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <estimate_distance+0x282>
     c0e:	56 c1       	rjmp	.+684    	; 0xebc <estimate_distance+0x52e>
     c10:	e0 90 66 01 	lds	r14, 0x0166
     c14:	f0 90 67 01 	lds	r15, 0x0167
     c18:	ec 14       	cp	r14, r12
     c1a:	fd 04       	cpc	r15, r13
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <estimate_distance+0x292>
     c1e:	56 c1       	rjmp	.+684    	; 0xecc <estimate_distance+0x53e>
     c20:	e0 90 68 01 	lds	r14, 0x0168
     c24:	f0 90 69 01 	lds	r15, 0x0169
     c28:	ec 14       	cp	r14, r12
     c2a:	fd 04       	cpc	r15, r13
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <estimate_distance+0x2a2>
     c2e:	5a c1       	rjmp	.+692    	; 0xee4 <estimate_distance+0x556>
     c30:	e0 90 6a 01 	lds	r14, 0x016A
     c34:	f0 90 6b 01 	lds	r15, 0x016B
     c38:	ec 14       	cp	r14, r12
     c3a:	fd 04       	cpc	r15, r13
     c3c:	08 f4       	brcc	.+2      	; 0xc40 <estimate_distance+0x2b2>
     c3e:	5a c1       	rjmp	.+692    	; 0xef4 <estimate_distance+0x566>
     c40:	e0 90 6c 01 	lds	r14, 0x016C
     c44:	f0 90 6d 01 	lds	r15, 0x016D
     c48:	ec 14       	cp	r14, r12
     c4a:	fd 04       	cpc	r15, r13
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <estimate_distance+0x2c2>
     c4e:	5a c1       	rjmp	.+692    	; 0xf04 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     c50:	0a e5       	ldi	r16, 0x5A	; 90
     c52:	31 c0       	rjmp	.+98     	; 0xcb6 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     c54:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     c56:	ed 81       	ldd	r30, Y+5	; 0x05
     c58:	fe 81       	ldd	r31, Y+6	; 0x06
     c5a:	ed 3b       	cpi	r30, 0xBD	; 189
     c5c:	f2 40       	sbci	r31, 0x02	; 2
     c5e:	fc f4       	brge	.+62     	; 0xc9e <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c60:	81 e2       	ldi	r24, 0x21	; 33
     c62:	81 0f       	add	r24, r17
    }
}
     c64:	26 96       	adiw	r28, 0x06	; 6
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	7f 90       	pop	r7
     c8a:	6f 90       	pop	r6
     c8c:	5f 90       	pop	r5
     c8e:	4f 90       	pop	r4
     c90:	3f 90       	pop	r3
     c92:	2f 90       	pop	r2
     c94:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c96:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     c98:	81 e2       	ldi	r24, 0x21	; 33
     c9a:	80 0f       	add	r24, r16
     c9c:	e3 cf       	rjmp	.-58     	; 0xc64 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c9e:	d1 01       	movw	r26, r2
     ca0:	cd 90       	ld	r12, X+
     ca2:	dc 90       	ld	r13, X
     ca4:	80 91 52 01 	lds	r24, 0x0152
     ca8:	90 91 53 01 	lds	r25, 0x0153
     cac:	8c 15       	cp	r24, r12
     cae:	9d 05       	cpc	r25, r13
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <estimate_distance+0x326>
     cb2:	66 cf       	rjmp	.-308    	; 0xb80 <estimate_distance+0x1f2>
            dist_low=0;
     cb4:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     cb6:	1f 3f       	cpi	r17, 0xFF	; 255
     cb8:	79 f3       	breq	.-34     	; 0xc98 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     cba:	ed 81       	ldd	r30, Y+5	; 0x05
     cbc:	fe 81       	ldd	r31, Y+6	; 0x06
     cbe:	bf 01       	movw	r22, r30
     cc0:	ff 0f       	add	r31, r31
     cc2:	88 0b       	sbc	r24, r24
     cc4:	99 0b       	sbc	r25, r25
     cc6:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__floatsisf>
     cca:	6b 01       	movw	r12, r22
     ccc:	7c 01       	movw	r14, r24
     cce:	61 2f       	mov	r22, r17
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     cda:	4b 01       	movw	r8, r22
     cdc:	5c 01       	movw	r10, r24
     cde:	a7 01       	movw	r20, r14
     ce0:	96 01       	movw	r18, r12
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	81 e6       	ldi	r24, 0x61	; 97
     ce8:	94 e4       	ldi	r25, 0x44	; 68
     cea:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	c5 01       	movw	r24, r10
     cf4:	b4 01       	movw	r22, r8
     cf6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
     cfa:	4b 01       	movw	r8, r22
     cfc:	5c 01       	movw	r10, r24
     cfe:	60 2f       	mov	r22, r16
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     d0a:	2b 01       	movw	r4, r22
     d0c:	3c 01       	movw	r6, r24
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4f e2       	ldi	r20, 0x2F	; 47
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     d1e:	9b 01       	movw	r18, r22
     d20:	ac 01       	movw	r20, r24
     d22:	c3 01       	movw	r24, r6
     d24:	b2 01       	movw	r22, r4
     d26:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	c5 01       	movw	r24, r10
     d30:	b4 01       	movw	r22, r8
     d32:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	48 e4       	ldi	r20, 0x48	; 72
     d3c:	53 e4       	ldi	r21, 0x43	; 67
     d3e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__divsf3>
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	44 e0       	ldi	r20, 0x04	; 4
     d48:	52 e4       	ldi	r21, 0x42	; 66
     d4a:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     d4e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
     d52:	86 2f       	mov	r24, r22
     d54:	87 cf       	rjmp	.-242    	; 0xc64 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d56:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     d58:	85 e0       	ldi	r24, 0x05	; 5
     d5a:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	fc 01       	movw	r30, r24
     d62:	e0 5b       	subi	r30, 0xB0	; 176
     d64:	fe 4f       	sbci	r31, 0xFE	; 254
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	b7 01       	movw	r22, r14
     d6c:	68 1b       	sub	r22, r24
     d6e:	79 0b       	sbc	r23, r25
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     d78:	9b 01       	movw	r18, r22
     d7a:	ac 01       	movw	r20, r24
     d7c:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     d80:	4b 01       	movw	r8, r22
     d82:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d84:	b6 01       	movw	r22, r12
     d86:	dd 0c       	add	r13, r13
     d88:	88 0b       	sbc	r24, r24
     d8a:	99 0b       	sbc	r25, r25
     d8c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__floatsisf>
     d90:	2b 01       	movw	r4, r22
     d92:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     d94:	b7 01       	movw	r22, r14
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     d9e:	6b 01       	movw	r12, r22
     da0:	7c 01       	movw	r14, r24
     da2:	60 2f       	mov	r22, r16
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	5f e3       	ldi	r21, 0x3F	; 63
     db6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	a9 01       	movw	r20, r18
     dc0:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     dc4:	a5 01       	movw	r20, r10
     dc6:	94 01       	movw	r18, r8
     dc8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
     dcc:	9b 01       	movw	r18, r22
     dce:	ac 01       	movw	r20, r24
     dd0:	c7 01       	movw	r24, r14
     dd2:	b6 01       	movw	r22, r12
     dd4:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ddc:	c3 01       	movw	r24, r6
     dde:	b2 01       	movw	r22, r4
     de0:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e2       	ldi	r20, 0x20	; 32
     dea:	51 e4       	ldi	r21, 0x41	; 65
     dec:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
                b=((int)((int)b/(int)slope));
     df0:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
     df4:	7b 01       	movw	r14, r22
     df6:	c5 01       	movw	r24, r10
     df8:	b4 01       	movw	r22, r8
     dfa:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
     dfe:	ab 01       	movw	r20, r22
     e00:	bc 01       	movw	r22, r24
     e02:	c7 01       	movw	r24, r14
     e04:	ba 01       	movw	r22, r20
     e06:	0e 94 08 0b 	call	0x1610	; 0x1610 <__divmodhi4>
                dist_low=b;
     e0a:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e0c:	6f 3f       	cpi	r22, 0xFF	; 255
     e0e:	09 f0       	breq	.+2      	; 0xe12 <estimate_distance+0x484>
     e10:	52 cf       	rjmp	.-348    	; 0xcb6 <estimate_distance+0x328>
     e12:	26 cf       	rjmp	.-436    	; 0xc60 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e14:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	7c 01       	movw	r14, r24
     e1c:	f1 e0       	ldi	r31, 0x01	; 1
     e1e:	ef 1a       	sub	r14, r31
     e20:	f1 08       	sbc	r15, r1
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__floatunsisf>
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	5f e3       	ldi	r21, 0x3F	; 63
     e34:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsf3>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	a9 01       	movw	r20, r18
     e3e:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     e42:	69 83       	std	Y+1, r22	; 0x01
     e44:	7a 83       	std	Y+2, r23	; 0x02
     e46:	8b 83       	std	Y+3, r24	; 0x03
     e48:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     e4a:	40 ce       	rjmp	.-896    	; 0xacc <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e4c:	01 e0       	ldi	r16, 0x01	; 1
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	84 cf       	rjmp	.-248    	; 0xd5c <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	df cf       	rjmp	.-66     	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e5c:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	7c cf       	rjmp	.-264    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e64:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	d7 cf       	rjmp	.-82     	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e6c:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	74 cf       	rjmp	.-280    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e74:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	cf cf       	rjmp	.-98     	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e7c:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     e7e:	84 e0       	ldi	r24, 0x04	; 4
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	6c cf       	rjmp	.-296    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e84:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     e86:	84 e0       	ldi	r24, 0x04	; 4
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	c7 cf       	rjmp	.-114    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e8c:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     e8e:	86 e0       	ldi	r24, 0x06	; 6
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	64 cf       	rjmp	.-312    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e94:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	bf cf       	rjmp	.-130    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e9c:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     e9e:	87 e0       	ldi	r24, 0x07	; 7
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	5c cf       	rjmp	.-328    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ea4:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     ea6:	87 e0       	ldi	r24, 0x07	; 7
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	b7 cf       	rjmp	.-146    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eac:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	54 cf       	rjmp	.-344    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eb4:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	af cf       	rjmp	.-162    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ebc:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     ebe:	89 e0       	ldi	r24, 0x09	; 9
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	4c cf       	rjmp	.-360    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ec4:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     ec6:	89 e0       	ldi	r24, 0x09	; 9
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a7 cf       	rjmp	.-178    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ecc:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	44 cf       	rjmp	.-376    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ed4:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     ed6:	8a e0       	ldi	r24, 0x0A	; 10
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9f cf       	rjmp	.-194    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     edc:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     ede:	8b e0       	ldi	r24, 0x0B	; 11
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9b cf       	rjmp	.-202    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ee4:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     ee6:	8b e0       	ldi	r24, 0x0B	; 11
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	38 cf       	rjmp	.-400    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eec:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     eee:	8c e0       	ldi	r24, 0x0C	; 12
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	93 cf       	rjmp	.-218    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef4:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     ef6:	8c e0       	ldi	r24, 0x0C	; 12
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	30 cf       	rjmp	.-416    	; 0xd5c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     efc:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     efe:	8d e0       	ldi	r24, 0x0D	; 13
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	8b cf       	rjmp	.-234    	; 0xe1a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f04:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f06:	8d e0       	ldi	r24, 0x0D	; 13
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	28 cf       	rjmp	.-432    	; 0xd5c <estimate_distance+0x3ce>

00000f0c <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	2f 93       	push	r18
     f18:	3f 93       	push	r19
     f1a:	4f 93       	push	r20
     f1c:	5f 93       	push	r21
     f1e:	6f 93       	push	r22
     f20:	7f 93       	push	r23
     f22:	8f 93       	push	r24
     f24:	9f 93       	push	r25
     f26:	af 93       	push	r26
     f28:	bf 93       	push	r27
     f2a:	ef 93       	push	r30
     f2c:	ff 93       	push	r31
    tx_clock += tx_increment;
     f2e:	20 91 71 01 	lds	r18, 0x0171
     f32:	30 91 72 01 	lds	r19, 0x0172
     f36:	80 91 6f 01 	lds	r24, 0x016F
     f3a:	90 91 70 01 	lds	r25, 0x0170
     f3e:	82 0f       	add	r24, r18
     f40:	93 1f       	adc	r25, r19
     f42:	90 93 72 01 	sts	0x0172, r25
     f46:	80 93 71 01 	sts	0x0171, r24
    tx_increment = 0xFF;
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 70 01 	sts	0x0170, r25
     f52:	80 93 6f 01 	sts	0x016F, r24
    OCR0A = tx_increment;
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f5a:	80 91 4d 01 	lds	r24, 0x014D
     f5e:	90 91 4e 01 	lds	r25, 0x014E
     f62:	a0 91 4f 01 	lds	r26, 0x014F
     f66:	b0 91 50 01 	lds	r27, 0x0150
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	a1 1d       	adc	r26, r1
     f6e:	b1 1d       	adc	r27, r1
     f70:	80 93 4d 01 	sts	0x014D, r24
     f74:	90 93 4e 01 	sts	0x014E, r25
     f78:	a0 93 4f 01 	sts	0x014F, r26
     f7c:	b0 93 50 01 	sts	0x0150, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f80:	80 91 51 01 	lds	r24, 0x0151
     f84:	81 11       	cpse	r24, r1
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <__vector_14+0x9a>
     f88:	80 91 80 01 	lds	r24, 0x0180
     f8c:	90 91 81 01 	lds	r25, 0x0181
     f90:	20 91 71 01 	lds	r18, 0x0171
     f94:	30 91 72 01 	lds	r19, 0x0172
     f98:	82 17       	cp	r24, r18
     f9a:	93 07       	cpc	r25, r19
     f9c:	20 f4       	brcc	.+8      	; 0xfa6 <__vector_14+0x9a>
     f9e:	80 91 17 01 	lds	r24, 0x0117
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	89 f0       	breq	.+34     	; 0xfc8 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	bf 91       	pop	r27
     fac:	af 91       	pop	r26
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     fc8:	e0 91 09 01 	lds	r30, 0x0109
     fcc:	f0 91 0a 01 	lds	r31, 0x010A
     fd0:	09 95       	icall
        if (msg) {
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	41 f3       	breq	.-48     	; 0xfa6 <__vector_14+0x9a>
            if (message_send(msg)) {
     fd6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <message_send>
     fda:	81 11       	cpse	r24, r1
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     fde:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <rand>
     fe2:	99 27       	eor	r25, r25
     fe4:	90 93 70 01 	sts	0x0170, r25
     fe8:	80 93 6f 01 	sts	0x016F, r24
                OCR0A = tx_increment;
     fec:	87 bd       	out	0x27, r24	; 39
     fee:	db cf       	rjmp	.-74     	; 0xfa6 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ff0:	e0 91 07 01 	lds	r30, 0x0107
     ff4:	f0 91 08 01 	lds	r31, 0x0108
     ff8:	09 95       	icall
                tx_clock = 0;
     ffa:	10 92 72 01 	sts	0x0172, r1
     ffe:	10 92 71 01 	sts	0x0171, r1
    1002:	d1 cf       	rjmp	.-94     	; 0xfa6 <__vector_14+0x9a>

00001004 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1004:	80 ff       	sbrs	r24, 0
    1006:	11 c0       	rjmp	.+34     	; 0x102a <set_color+0x26>
        DDRD |= (1<<5);
    1008:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    100a:	81 ff       	sbrs	r24, 1
    100c:	11 c0       	rjmp	.+34     	; 0x1030 <set_color+0x2c>
        DDRD |= (1<<4);
    100e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1010:	82 ff       	sbrs	r24, 2
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <set_color+0x32>
        DDRC |= (1<<3);
    1014:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1016:	83 ff       	sbrs	r24, 3
    1018:	11 c0       	rjmp	.+34     	; 0x103c <set_color+0x38>
        DDRC |= (1<<2);
    101a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    101c:	84 ff       	sbrs	r24, 4
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <set_color+0x3e>
        DDRC |= (1<<5);
    1020:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1022:	85 fd       	sbrc	r24, 5
    1024:	11 c0       	rjmp	.+34     	; 0x1048 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1026:	3c 98       	cbi	0x07, 4	; 7
    1028:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    102a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    102c:	81 fd       	sbrc	r24, 1
    102e:	ef cf       	rjmp	.-34     	; 0x100e <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1030:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1032:	82 fd       	sbrc	r24, 2
    1034:	ef cf       	rjmp	.-34     	; 0x1014 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1036:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1038:	83 fd       	sbrc	r24, 3
    103a:	ef cf       	rjmp	.-34     	; 0x101a <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    103c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    103e:	84 fd       	sbrc	r24, 4
    1040:	ef cf       	rjmp	.-34     	; 0x1020 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1042:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1044:	85 ff       	sbrs	r24, 5
    1046:	ef cf       	rjmp	.-34     	; 0x1026 <set_color+0x22>
        DDRC |= (1<<4);
    1048:	3c 9a       	sbi	0x07, 4	; 7
    104a:	08 95       	ret

0000104c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    rx_timer_off();
    105a:	10 92 81 00 	sts	0x0081, r1
    105e:	10 92 85 00 	sts	0x0085, r1
    1062:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 93 2a 01 	sts	0x012A, r24
    rx_leadingbyte = 1;
    106c:	80 93 6e 01 	sts	0x016E, r24
    rx_busy = 0;
    1070:	10 92 51 01 	sts	0x0151, r1
    adc_trigger_high_gain();
    1074:	10 92 7c 00 	sts	0x007C, r1
    1078:	93 ea       	ldi	r25, 0xA3	; 163
    107a:	90 93 7a 00 	sts	0x007A, r25
    107e:	80 93 7b 00 	sts	0x007B, r24
}
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	0f 90       	pop	r0
    108c:	1f 90       	pop	r1
    108e:	18 95       	reti

00001090 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	4f 93       	push	r20
    10a0:	5f 93       	push	r21
    10a2:	6f 93       	push	r22
    10a4:	7f 93       	push	r23
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    10b6:	20 91 84 00 	lds	r18, 0x0084
    10ba:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	40 93 51 01 	sts	0x0151, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    10c4:	80 91 2a 01 	lds	r24, 0x012A
    10c8:	88 23       	and	r24, r24
    10ca:	a9 f1       	breq	.+106    	; 0x1136 <__vector_23+0xa6>
        rx_timer_on();
    10cc:	10 92 85 00 	sts	0x0085, r1
    10d0:	10 92 84 00 	sts	0x0084, r1
    10d4:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    10d8:	10 92 82 01 	sts	0x0182, r1
        rx_leadingbit = 0;
    10dc:	10 92 2a 01 	sts	0x012A, r1
        if (rx_leadingbyte) {
    10e0:	80 91 6e 01 	lds	r24, 0x016E
    10e4:	88 23       	and	r24, r24
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <__vector_23+0x80>
            adc_finish_conversion();
    10e8:	80 91 7a 00 	lds	r24, 0x007A
    10ec:	86 fd       	sbrc	r24, 6
    10ee:	fc cf       	rjmp	.-8      	; 0x10e8 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    10f0:	80 91 78 00 	lds	r24, 0x0078
    10f4:	90 91 79 00 	lds	r25, 0x0079
    10f8:	90 93 4c 01 	sts	0x014C, r25
    10fc:	80 93 4b 01 	sts	0x014B, r24
            adc_trigger_low_gain();
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	80 93 7c 00 	sts	0x007C, r24
    1106:	93 ea       	ldi	r25, 0xA3	; 163
    1108:	90 93 7a 00 	sts	0x007A, r25
    110c:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1136:	c9 01       	movw	r24, r18
    1138:	87 58       	subi	r24, 0x87	; 135
    113a:	91 09       	sbc	r25, r1
    113c:	84 37       	cpi	r24, 0x74	; 116
    113e:	99 40       	sbci	r25, 0x09	; 9
    1140:	08 f0       	brcs	.+2      	; 0x1144 <__vector_23+0xb4>
    1142:	52 c0       	rjmp	.+164    	; 0x11e8 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1144:	26 58       	subi	r18, 0x86	; 134
    1146:	31 09       	sbc	r19, r1
    1148:	a4 ef       	ldi	r26, 0xF4	; 244
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	0e 94 22 0b 	call	0x1644	; 0x1644 <__umulhisi3>
    1150:	aa 27       	eor	r26, r26
    1152:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1154:	88 30       	cpi	r24, 0x08	; 8
    1156:	91 05       	cpc	r25, r1
    1158:	a1 05       	cpc	r26, r1
    115a:	b1 05       	cpc	r27, r1
    115c:	08 f4       	brcc	.+2      	; 0x1160 <__vector_23+0xd0>
    115e:	7b c0       	rjmp	.+246    	; 0x1256 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1160:	40 93 2a 01 	sts	0x012A, r20
                if (rx_leadingbyte) {
    1164:	80 91 6e 01 	lds	r24, 0x016E
    1168:	81 11       	cpse	r24, r1
    116a:	52 c0       	rjmp	.+164    	; 0x1210 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    116c:	80 91 48 01 	lds	r24, 0x0148
    1170:	e8 2f       	mov	r30, r24
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	ec 58       	subi	r30, 0x8C	; 140
    1176:	fe 4f       	sbci	r31, 0xFE	; 254
    1178:	90 91 82 01 	lds	r25, 0x0182
    117c:	90 83       	st	Z, r25
                    rx_byteindex++;
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	80 93 48 01 	sts	0x0148, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1184:	8c 30       	cpi	r24, 0x0C	; 12
    1186:	21 f6       	brne	.-120    	; 0x1110 <__vector_23+0x80>
                        rx_timer_off();
    1188:	10 92 81 00 	sts	0x0081, r1
    118c:	10 92 85 00 	sts	0x0085, r1
    1190:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1194:	40 93 6e 01 	sts	0x016E, r20
                        rx_busy = 0;
    1198:	10 92 51 01 	sts	0x0151, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    119c:	c0 91 7e 01 	lds	r28, 0x017E
    11a0:	d0 91 7f 01 	lds	r29, 0x017F
    11a4:	84 e7       	ldi	r24, 0x74	; 116
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <message_crc>
    11ac:	c8 17       	cp	r28, r24
    11ae:	d9 07       	cpc	r29, r25
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <__vector_23+0x124>
    11b2:	ae cf       	rjmp	.-164    	; 0x1110 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    11b4:	80 91 7d 01 	lds	r24, 0x017D
    11b8:	87 ff       	sbrs	r24, 7
    11ba:	61 c0       	rjmp	.+194    	; 0x127e <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    11bc:	98 e7       	ldi	r25, 0x78	; 120
    11be:	98 0f       	add	r25, r24
    11c0:	93 30       	cpi	r25, 0x03	; 3
    11c2:	30 f0       	brcs	.+12     	; 0x11d0 <__vector_23+0x140>
        motors_off();
    11c4:	53 98       	cbi	0x0a, 3	; 10
    11c6:	23 98       	cbi	0x04, 3	; 4
    11c8:	10 92 b4 00 	sts	0x00B4, r1
    11cc:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	fc 01       	movw	r30, r24
    11d4:	e0 58       	subi	r30, 0x80	; 128
    11d6:	f1 09       	sbc	r31, r1
    11d8:	eb 30       	cpi	r30, 0x0B	; 11
    11da:	f1 05       	cpc	r31, r1
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <__vector_23+0x150>
    11de:	98 cf       	rjmp	.-208    	; 0x1110 <__vector_23+0x80>
    11e0:	e5 5c       	subi	r30, 0xC5	; 197
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    11e8:	10 92 81 00 	sts	0x0081, r1
    11ec:	10 92 85 00 	sts	0x0085, r1
    11f0:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    11f4:	40 93 2a 01 	sts	0x012A, r20
            rx_leadingbyte = 1;
    11f8:	40 93 6e 01 	sts	0x016E, r20
            rx_busy = 0;
    11fc:	10 92 51 01 	sts	0x0151, r1
            adc_trigger_high_gain();
    1200:	10 92 7c 00 	sts	0x007C, r1
    1204:	83 ea       	ldi	r24, 0xA3	; 163
    1206:	80 93 7a 00 	sts	0x007A, r24
    120a:	40 93 7b 00 	sts	0x007B, r20
    120e:	80 cf       	rjmp	.-256    	; 0x1110 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1210:	80 91 7a 00 	lds	r24, 0x007A
    1214:	86 fd       	sbrc	r24, 6
    1216:	fc cf       	rjmp	.-8      	; 0x1210 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1218:	80 91 78 00 	lds	r24, 0x0078
    121c:	90 91 79 00 	lds	r25, 0x0079
    1220:	90 93 4a 01 	sts	0x014A, r25
    1224:	80 93 49 01 	sts	0x0149, r24
                    adc_trigger_high_gain();
    1228:	10 92 7c 00 	sts	0x007C, r1
    122c:	83 ea       	ldi	r24, 0xA3	; 163
    122e:	80 93 7a 00 	sts	0x007A, r24
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1238:	90 91 82 01 	lds	r25, 0x0182
    123c:	99 23       	and	r25, r25
    123e:	d1 f0       	breq	.+52     	; 0x1274 <__vector_23+0x1e4>
                        rx_timer_off();
    1240:	10 92 81 00 	sts	0x0081, r1
    1244:	10 92 85 00 	sts	0x0085, r1
    1248:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    124c:	80 93 6e 01 	sts	0x016E, r24
                        rx_busy = 0;
    1250:	10 92 51 01 	sts	0x0151, r1
    1254:	5d cf       	rjmp	.-326    	; 0x1110 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1256:	21 e0       	ldi	r18, 0x01	; 1
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	f9 01       	movw	r30, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <__vector_23+0x1d2>
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <__vector_23+0x1ce>
    1266:	cf 01       	movw	r24, r30
    1268:	90 91 82 01 	lds	r25, 0x0182
    126c:	89 2b       	or	r24, r25
    126e:	80 93 82 01 	sts	0x0182, r24
    1272:	4e cf       	rjmp	.-356    	; 0x1110 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1274:	10 92 6e 01 	sts	0x016E, r1
                        rx_byteindex = 0;
    1278:	10 92 48 01 	sts	0x0148, r1
    127c:	49 cf       	rjmp	.-366    	; 0x1110 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    127e:	e0 91 0b 01 	lds	r30, 0x010B
    1282:	f0 91 0c 01 	lds	r31, 0x010C
    1286:	69 e4       	ldi	r22, 0x49	; 73
    1288:	71 e0       	ldi	r23, 0x01	; 1
    128a:	84 e7       	ldi	r24, 0x74	; 116
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	09 95       	icall
    1290:	3f cf       	rjmp	.-386    	; 0x1110 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1292:	80 91 74 01 	lds	r24, 0x0174
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	09 f4       	brne	.+2      	; 0x129c <__vector_23+0x20c>
    129a:	dd c0       	rjmp	.+442    	; 0x1456 <__vector_23+0x3c6>
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <__vector_23+0x210>
    129e:	ba c0       	rjmp	.+372    	; 0x1414 <__vector_23+0x384>
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <__vector_23+0x216>
    12a4:	c6 c0       	rjmp	.+396    	; 0x1432 <__vector_23+0x3a2>
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__vector_23+0x21c>
    12aa:	b1 c0       	rjmp	.+354    	; 0x140e <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12ac:	80 91 15 01 	lds	r24, 0x0115
    12b0:	90 91 7a 01 	lds	r25, 0x017A
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	09 f4       	brne	.+2      	; 0x12ba <__vector_23+0x22a>
    12b8:	e3 c0       	rjmp	.+454    	; 0x1480 <__vector_23+0x3f0>
    12ba:	80 91 79 01 	lds	r24, 0x0179
                        prev_motion = MOVE_STOP;
    12be:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    12c2:	23 e0       	ldi	r18, 0x03	; 3
    12c4:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    12c8:	80 93 85 01 	sts	0x0185, r24
                        kilo_straight_right = calibmsg->straight_right;
    12cc:	90 93 86 01 	sts	0x0186, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12d0:	80 91 17 01 	lds	r24, 0x0117
    12d4:	86 30       	cpi	r24, 0x06	; 6
    12d6:	09 f4       	brne	.+2      	; 0x12da <__vector_23+0x24a>
    12d8:	1b cf       	rjmp	.-458    	; 0x1110 <__vector_23+0x80>
                motors_on();
    12da:	53 9a       	sbi	0x0a, 3	; 10
    12dc:	23 9a       	sbi	0x04, 3	; 4
    12de:	10 92 b4 00 	sts	0x00B4, r1
    12e2:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    12e6:	86 e0       	ldi	r24, 0x06	; 6
    12e8:	80 93 17 01 	sts	0x0117, r24
    12ec:	11 cf       	rjmp	.-478    	; 0x1110 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    12ee:	80 91 17 01 	lds	r24, 0x0117
    12f2:	86 30       	cpi	r24, 0x06	; 6
    12f4:	99 f0       	breq	.+38     	; 0x131c <__vector_23+0x28c>
                motors_on();
    12f6:	53 9a       	sbi	0x0a, 3	; 10
    12f8:	23 9a       	sbi	0x04, 3	; 4
    12fa:	10 92 b4 00 	sts	0x00B4, r1
    12fe:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1302:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1304:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1306:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1308:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    130a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    130c:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    130e:	10 92 15 01 	sts	0x0115, r1
    1312:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    1316:	86 e0       	ldi	r24, 0x06	; 6
    1318:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9c 01       	movw	r18, r24
    1322:	00 90 74 01 	lds	r0, 0x0174
    1326:	02 c0       	rjmp	.+4      	; 0x132c <__vector_23+0x29c>
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <__vector_23+0x298>
    1330:	80 91 83 01 	lds	r24, 0x0183
    1334:	90 91 84 01 	lds	r25, 0x0184
    1338:	82 23       	and	r24, r18
    133a:	93 23       	and	r25, r19
    133c:	89 2b       	or	r24, r25
    133e:	09 f0       	breq	.+2      	; 0x1342 <__vector_23+0x2b2>
    1340:	86 c0       	rjmp	.+268    	; 0x144e <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1342:	10 92 15 01 	sts	0x0115, r1
    1346:	e4 ce       	rjmp	.-568    	; 0x1110 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 93 17 01 	sts	0x0117, r24
    134e:	e0 ce       	rjmp	.-576    	; 0x1110 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1350:	e0 e0       	ldi	r30, 0x00	; 0
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1356:	80 91 6e 00 	lds	r24, 0x006E
    135a:	8d 7f       	andi	r24, 0xFD	; 253
    135c:	80 93 6e 00 	sts	0x006E, r24
    1360:	16 bc       	out	0x26, r1	; 38
            bootload();
    1362:	e0 e0       	ldi	r30, 0x00	; 0
    1364:	f0 e7       	ldi	r31, 0x70	; 112
    1366:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1368:	10 92 17 01 	sts	0x0117, r1
    136c:	d1 ce       	rjmp	.-606    	; 0x1110 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	80 93 17 01 	sts	0x0117, r24
    1374:	cd ce       	rjmp	.-614    	; 0x1110 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1376:	85 e0       	ldi	r24, 0x05	; 5
    1378:	80 93 17 01 	sts	0x0117, r24
    137c:	c9 ce       	rjmp	.-622    	; 0x1110 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    137e:	80 91 17 01 	lds	r24, 0x0117
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	09 f4       	brne	.+2      	; 0x1388 <__vector_23+0x2f8>
    1386:	c4 ce       	rjmp	.-632    	; 0x1110 <__vector_23+0x80>
    1388:	80 91 17 01 	lds	r24, 0x0117
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	09 f4       	brne	.+2      	; 0x1392 <__vector_23+0x302>
    1390:	bf ce       	rjmp	.-642    	; 0x1110 <__vector_23+0x80>
                motors_on();
    1392:	53 9a       	sbi	0x0a, 3	; 10
    1394:	23 9a       	sbi	0x04, 3	; 4
    1396:	10 92 b4 00 	sts	0x00B4, r1
    139a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	80 93 17 01 	sts	0x0117, r24
    13a4:	b5 ce       	rjmp	.-662    	; 0x1110 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    13a6:	80 91 17 01 	lds	r24, 0x0117
    13aa:	86 30       	cpi	r24, 0x06	; 6
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <__vector_23+0x320>
    13ae:	b0 ce       	rjmp	.-672    	; 0x1110 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    13b0:	60 91 83 01 	lds	r22, 0x0183
    13b4:	80 eb       	ldi	r24, 0xB0	; 176
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    13bc:	60 91 84 01 	lds	r22, 0x0184
    13c0:	81 eb       	ldi	r24, 0xB1	; 177
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    13c8:	60 91 87 01 	lds	r22, 0x0187
    13cc:	85 e0       	ldi	r24, 0x05	; 5
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    13d4:	60 91 73 01 	lds	r22, 0x0173
    13d8:	89 e0       	ldi	r24, 0x09	; 9
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    13e0:	60 91 85 01 	lds	r22, 0x0185
    13e4:	8c e0       	ldi	r24, 0x0C	; 12
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    13ec:	60 91 86 01 	lds	r22, 0x0186
    13f0:	84 e1       	ldi	r24, 0x14	; 20
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <eeprom_write_byte>
                        motors_off();
    13f8:	53 98       	cbi	0x0a, 3	; 10
    13fa:	23 98       	cbi	0x04, 3	; 4
    13fc:	10 92 b4 00 	sts	0x00B4, r1
    1400:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 93 17 01 	sts	0x0117, r24
    140a:	80 91 74 01 	lds	r24, 0x0174
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    140e:	81 11       	cpse	r24, r1
    1410:	5f cf       	rjmp	.-322    	; 0x12d0 <__vector_23+0x240>
    1412:	7e ce       	rjmp	.-772    	; 0x1110 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1414:	88 23       	and	r24, r24
    1416:	39 f2       	breq	.-114    	; 0x13a6 <__vector_23+0x316>
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	c9 f7       	brne	.-14     	; 0x140e <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    141c:	80 91 75 01 	lds	r24, 0x0175
    1420:	90 91 76 01 	lds	r25, 0x0176
    1424:	90 93 84 01 	sts	0x0184, r25
    1428:	80 93 83 01 	sts	0x0183, r24
                    cur_motion = MOVE_STOP;
    142c:	10 92 15 01 	sts	0x0115, r1
    1430:	4f cf       	rjmp	.-354    	; 0x12d0 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1432:	80 91 15 01 	lds	r24, 0x0115
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	71 f1       	breq	.+92     	; 0x1496 <__vector_23+0x406>
    143a:	80 91 78 01 	lds	r24, 0x0178
                        prev_motion = MOVE_STOP;
    143e:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    1448:	80 93 73 01 	sts	0x0173, r24
    144c:	41 cf       	rjmp	.-382    	; 0x12d0 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 15 01 	sts	0x0115, r24
    1454:	5d ce       	rjmp	.-838    	; 0x1110 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1456:	80 91 15 01 	lds	r24, 0x0115
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	51 f0       	breq	.+20     	; 0x1472 <__vector_23+0x3e2>
    145e:	80 91 77 01 	lds	r24, 0x0177
                        prev_motion = MOVE_STOP;
    1462:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    146c:	80 93 87 01 	sts	0x0187, r24
    1470:	2f cf       	rjmp	.-418    	; 0x12d0 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1472:	80 91 77 01 	lds	r24, 0x0177
    1476:	90 91 87 01 	lds	r25, 0x0187
    147a:	89 13       	cpse	r24, r25
    147c:	f2 cf       	rjmp	.-28     	; 0x1462 <__vector_23+0x3d2>
    147e:	28 cf       	rjmp	.-432    	; 0x12d0 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1480:	80 91 86 01 	lds	r24, 0x0186
    1484:	98 13       	cpse	r25, r24
    1486:	19 cf       	rjmp	.-462    	; 0x12ba <__vector_23+0x22a>
    1488:	80 91 79 01 	lds	r24, 0x0179
    148c:	20 91 85 01 	lds	r18, 0x0185
    1490:	82 13       	cpse	r24, r18
    1492:	15 cf       	rjmp	.-470    	; 0x12be <__vector_23+0x22e>
    1494:	1d cf       	rjmp	.-454    	; 0x12d0 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1496:	80 91 78 01 	lds	r24, 0x0178
    149a:	90 91 73 01 	lds	r25, 0x0173
    149e:	89 13       	cpse	r24, r25
    14a0:	ce cf       	rjmp	.-100    	; 0x143e <__vector_23+0x3ae>
    14a2:	16 cf       	rjmp	.-468    	; 0x12d0 <__vector_23+0x240>

000014a4 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    14a4:	fc 01       	movw	r30, r24
    14a6:	ac 01       	movw	r20, r24
    14a8:	46 5f       	subi	r20, 0xF6	; 246
    14aa:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    14b0:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    14b2:	82 27       	eor	r24, r18
    14b4:	08 2e       	mov	r0, r24
    14b6:	82 95       	swap	r24
    14b8:	80 7f       	andi	r24, 0xF0	; 240
    14ba:	80 25       	eor	r24, r0
    14bc:	09 2e       	mov	r0, r25
    14be:	98 2f       	mov	r25, r24
    14c0:	82 95       	swap	r24
    14c2:	8f 70       	andi	r24, 0x0F	; 15
    14c4:	08 26       	eor	r0, r24
    14c6:	86 95       	lsr	r24
    14c8:	98 27       	eor	r25, r24
    14ca:	89 27       	eor	r24, r25
    14cc:	88 0f       	add	r24, r24
    14ce:	88 0f       	add	r24, r24
    14d0:	88 0f       	add	r24, r24
    14d2:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    14d4:	e4 17       	cp	r30, r20
    14d6:	f5 07       	cpc	r31, r21
    14d8:	59 f7       	brne	.-42     	; 0x14b0 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    14da:	08 95       	ret

000014dc <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    14dc:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    14de:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    14e0:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    14e2:	20 91 47 01 	lds	r18, 0x0147
    or tmpreg1, ddrreg
    14e6:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    14e8:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14ec:	30 91 47 01 	lds	r19, 0x0147
    14f0:	20 30       	cpi	r18, 0x00	; 0
    14f2:	29 f0       	breq	.+10     	; 0x14fe <message_send+0x22>
    14f4:	00 00       	nop
    14f6:	25 b1       	in	r18, 0x05	; 5
    14f8:	23 2b       	or	r18, r19
    14fa:	25 b9       	out	0x05, r18	; 5
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <message_send+0x2a>
    14fe:	00 00       	nop
    1500:	00 00       	nop
    1502:	00 00       	nop
    1504:	00 c0       	rjmp	.+0      	; 0x1506 <message_send+0x2a>
    1506:	00 00       	nop
    1508:	00 00       	nop
    150a:	00 00       	nop
    150c:	30 95       	com	r19
    150e:	25 b1       	in	r18, 0x05	; 5
    1510:	23 23       	and	r18, r19
    1512:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1514:	2e ea       	ldi	r18, 0xAE	; 174
    1516:	2a 95       	dec	r18
    1518:	f1 f7       	brne	.-4      	; 0x1516 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    151a:	2b ee       	ldi	r18, 0xEB	; 235

0000151c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    151c:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    151e:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1520:	0a c0       	rjmp	.+20     	; 0x1536 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1522:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1524:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    1528:	30 95       	com	r19
    in tmpreg1, IR_PORT
    152a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    152c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    152e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1530:	0f be       	out	0x3f, r0	; 63
    return 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	08 95       	ret

00001536 <nocollision>:
nocollision:
    nop
    1536:	00 00       	nop
    dec tmpreg1
    1538:	2a 95       	dec	r18
    brne checkcollision
    153a:	81 f7       	brne	.-32     	; 0x151c <checkcollision>

    ldi tmpreg1, 0x01
    153c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    153e:	30 91 47 01 	lds	r19, 0x0147
    1542:	20 30       	cpi	r18, 0x00	; 0
    1544:	29 f0       	breq	.+10     	; 0x1550 <nocollision+0x1a>
    1546:	00 00       	nop
    1548:	25 b1       	in	r18, 0x05	; 5
    154a:	23 2b       	or	r18, r19
    154c:	25 b9       	out	0x05, r18	; 5
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <nocollision+0x22>
    1550:	00 00       	nop
    1552:	00 00       	nop
    1554:	00 00       	nop
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <nocollision+0x22>
    1558:	00 00       	nop
    155a:	00 00       	nop
    155c:	00 00       	nop
    155e:	30 95       	com	r19
    1560:	25 b1       	in	r18, 0x05	; 5
    1562:	23 23       	and	r18, r19
    1564:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1566:	00 00       	nop
    1568:	24 e5       	ldi	r18, 0x54	; 84
    156a:	2a 95       	dec	r18
    156c:	f1 f7       	brne	.-4      	; 0x156a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    156e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1570:	8c e0       	ldi	r24, 0x0C	; 12

00001572 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1572:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1574:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1576:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1578:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    157a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    157c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    157e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1580:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1582:	50 e0       	ldi	r21, 0x00	; 0

00001584 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1584:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1586:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1588:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    158a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    158c:	30 91 47 01 	lds	r19, 0x0147
    1590:	20 30       	cpi	r18, 0x00	; 0
    1592:	29 f0       	breq	.+10     	; 0x159e <sendbit+0x1a>
    1594:	00 00       	nop
    1596:	25 b1       	in	r18, 0x05	; 5
    1598:	23 2b       	or	r18, r19
    159a:	25 b9       	out	0x05, r18	; 5
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <sendbit+0x22>
    159e:	00 00       	nop
    15a0:	00 00       	nop
    15a2:	00 00       	nop
    15a4:	00 c0       	rjmp	.+0      	; 0x15a6 <sendbit+0x22>
    15a6:	00 00       	nop
    15a8:	00 00       	nop
    15aa:	00 00       	nop
    15ac:	30 95       	com	r19
    15ae:	25 b1       	in	r18, 0x05	; 5
    15b0:	23 23       	and	r18, r19
    15b2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    15b4:	00 00       	nop
    15b6:	21 e5       	ldi	r18, 0x51	; 81
    15b8:	2a 95       	dec	r18
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    15bc:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    15be:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    15c0:	9a 95       	dec	r25
    brne sendbit
    15c2:	01 f7       	brne	.-64     	; 0x1584 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    15c4:	8a 95       	dec	r24
    brne sendbyte
    15c6:	a9 f6       	brne	.-86     	; 0x1572 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    15c8:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    15ca:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    15cc:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15ce:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15d0:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    15d4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15d6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15d8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15da:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15dc:	0f be       	out	0x3f, r0	; 63
    return 1
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	08 95       	ret

000015e2 <main>:
    }
}

int main()
{
  kilo_init();
    15e2:	0e 94 82 01 	call	0x304	; 0x304 <kilo_init>
  kilo_message_rx = message_rx;
    15e6:	84 e7       	ldi	r24, 0x74	; 116
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	90 93 0c 01 	sts	0x010C, r25
    15ee:	80 93 0b 01 	sts	0x010B, r24
  kilo_message_tx = message_tx;
    15f2:	81 e7       	ldi	r24, 0x71	; 113
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	90 93 0a 01 	sts	0x010A, r25
    15fa:	80 93 09 01 	sts	0x0109, r24
  kilo_start(setup, loop);
    15fe:	69 eb       	ldi	r22, 0xB9	; 185
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	88 e8       	ldi	r24, 0x88	; 136
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 7e 02 	call	0x4fc	; 0x4fc <kilo_start>
    
  return 0;
}
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	08 95       	ret

00001610 <__divmodhi4>:
    1610:	97 fb       	bst	r25, 7
    1612:	07 2e       	mov	r0, r23
    1614:	16 f4       	brtc	.+4      	; 0x161a <__divmodhi4+0xa>
    1616:	00 94       	com	r0
    1618:	07 d0       	rcall	.+14     	; 0x1628 <__divmodhi4_neg1>
    161a:	77 fd       	sbrc	r23, 7
    161c:	09 d0       	rcall	.+18     	; 0x1630 <__divmodhi4_neg2>
    161e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__udivmodhi4>
    1622:	07 fc       	sbrc	r0, 7
    1624:	05 d0       	rcall	.+10     	; 0x1630 <__divmodhi4_neg2>
    1626:	3e f4       	brtc	.+14     	; 0x1636 <__divmodhi4_exit>

00001628 <__divmodhi4_neg1>:
    1628:	90 95       	com	r25
    162a:	81 95       	neg	r24
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	08 95       	ret

00001630 <__divmodhi4_neg2>:
    1630:	70 95       	com	r23
    1632:	61 95       	neg	r22
    1634:	7f 4f       	sbci	r23, 0xFF	; 255

00001636 <__divmodhi4_exit>:
    1636:	08 95       	ret

00001638 <__tablejump2__>:
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	05 90       	lpm	r0, Z+
    163e:	f4 91       	lpm	r31, Z
    1640:	e0 2d       	mov	r30, r0
    1642:	09 94       	ijmp

00001644 <__umulhisi3>:
    1644:	a2 9f       	mul	r26, r18
    1646:	b0 01       	movw	r22, r0
    1648:	b3 9f       	mul	r27, r19
    164a:	c0 01       	movw	r24, r0
    164c:	a3 9f       	mul	r26, r19
    164e:	70 0d       	add	r23, r0
    1650:	81 1d       	adc	r24, r1
    1652:	11 24       	eor	r1, r1
    1654:	91 1d       	adc	r25, r1
    1656:	b2 9f       	mul	r27, r18
    1658:	70 0d       	add	r23, r0
    165a:	81 1d       	adc	r24, r1
    165c:	11 24       	eor	r1, r1
    165e:	91 1d       	adc	r25, r1
    1660:	08 95       	ret

00001662 <__udivmodhi4>:
    1662:	aa 1b       	sub	r26, r26
    1664:	bb 1b       	sub	r27, r27
    1666:	51 e1       	ldi	r21, 0x11	; 17
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <__udivmodhi4_ep>

0000166a <__udivmodhi4_loop>:
    166a:	aa 1f       	adc	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	a6 17       	cp	r26, r22
    1670:	b7 07       	cpc	r27, r23
    1672:	10 f0       	brcs	.+4      	; 0x1678 <__udivmodhi4_ep>
    1674:	a6 1b       	sub	r26, r22
    1676:	b7 0b       	sbc	r27, r23

00001678 <__udivmodhi4_ep>:
    1678:	88 1f       	adc	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	5a 95       	dec	r21
    167e:	a9 f7       	brne	.-22     	; 0x166a <__udivmodhi4_loop>
    1680:	80 95       	com	r24
    1682:	90 95       	com	r25
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	08 95       	ret

0000168a <__subsf3>:
    168a:	50 58       	subi	r21, 0x80	; 128

0000168c <__addsf3>:
    168c:	bb 27       	eor	r27, r27
    168e:	aa 27       	eor	r26, r26
    1690:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__addsf3x>
    1694:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_round>
    1698:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_pscA>
    169c:	38 f0       	brcs	.+14     	; 0x16ac <__addsf3+0x20>
    169e:	0e 94 a7 0c 	call	0x194e	; 0x194e <__fp_pscB>
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <__addsf3+0x20>
    16a4:	39 f4       	brne	.+14     	; 0x16b4 <__addsf3+0x28>
    16a6:	9f 3f       	cpi	r25, 0xFF	; 255
    16a8:	19 f4       	brne	.+6      	; 0x16b0 <__addsf3+0x24>
    16aa:	26 f4       	brtc	.+8      	; 0x16b4 <__addsf3+0x28>
    16ac:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__fp_nan>
    16b0:	0e f4       	brtc	.+2      	; 0x16b4 <__addsf3+0x28>
    16b2:	e0 95       	com	r30
    16b4:	e7 fb       	bst	r30, 7
    16b6:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_inf>

000016ba <__addsf3x>:
    16ba:	e9 2f       	mov	r30, r25
    16bc:	0e 94 bf 0c 	call	0x197e	; 0x197e <__fp_split3>
    16c0:	58 f3       	brcs	.-42     	; 0x1698 <__addsf3+0xc>
    16c2:	ba 17       	cp	r27, r26
    16c4:	62 07       	cpc	r22, r18
    16c6:	73 07       	cpc	r23, r19
    16c8:	84 07       	cpc	r24, r20
    16ca:	95 07       	cpc	r25, r21
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__addsf3x+0x1c>
    16ce:	79 f4       	brne	.+30     	; 0x16ee <__addsf3x+0x34>
    16d0:	a6 f5       	brtc	.+104    	; 0x173a <__addsf3x+0x80>
    16d2:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_zero>
    16d6:	0e f4       	brtc	.+2      	; 0x16da <__addsf3x+0x20>
    16d8:	e0 95       	com	r30
    16da:	0b 2e       	mov	r0, r27
    16dc:	ba 2f       	mov	r27, r26
    16de:	a0 2d       	mov	r26, r0
    16e0:	0b 01       	movw	r0, r22
    16e2:	b9 01       	movw	r22, r18
    16e4:	90 01       	movw	r18, r0
    16e6:	0c 01       	movw	r0, r24
    16e8:	ca 01       	movw	r24, r20
    16ea:	a0 01       	movw	r20, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	ff 27       	eor	r31, r31
    16f0:	59 1b       	sub	r21, r25
    16f2:	99 f0       	breq	.+38     	; 0x171a <__addsf3x+0x60>
    16f4:	59 3f       	cpi	r21, 0xF9	; 249
    16f6:	50 f4       	brcc	.+20     	; 0x170c <__addsf3x+0x52>
    16f8:	50 3e       	cpi	r21, 0xE0	; 224
    16fa:	68 f1       	brcs	.+90     	; 0x1756 <__addsf3x+0x9c>
    16fc:	1a 16       	cp	r1, r26
    16fe:	f0 40       	sbci	r31, 0x00	; 0
    1700:	a2 2f       	mov	r26, r18
    1702:	23 2f       	mov	r18, r19
    1704:	34 2f       	mov	r19, r20
    1706:	44 27       	eor	r20, r20
    1708:	58 5f       	subi	r21, 0xF8	; 248
    170a:	f3 cf       	rjmp	.-26     	; 0x16f2 <__addsf3x+0x38>
    170c:	46 95       	lsr	r20
    170e:	37 95       	ror	r19
    1710:	27 95       	ror	r18
    1712:	a7 95       	ror	r26
    1714:	f0 40       	sbci	r31, 0x00	; 0
    1716:	53 95       	inc	r21
    1718:	c9 f7       	brne	.-14     	; 0x170c <__addsf3x+0x52>
    171a:	7e f4       	brtc	.+30     	; 0x173a <__addsf3x+0x80>
    171c:	1f 16       	cp	r1, r31
    171e:	ba 0b       	sbc	r27, r26
    1720:	62 0b       	sbc	r22, r18
    1722:	73 0b       	sbc	r23, r19
    1724:	84 0b       	sbc	r24, r20
    1726:	ba f0       	brmi	.+46     	; 0x1756 <__addsf3x+0x9c>
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	a1 f0       	breq	.+40     	; 0x1754 <__addsf3x+0x9a>
    172c:	ff 0f       	add	r31, r31
    172e:	bb 1f       	adc	r27, r27
    1730:	66 1f       	adc	r22, r22
    1732:	77 1f       	adc	r23, r23
    1734:	88 1f       	adc	r24, r24
    1736:	c2 f7       	brpl	.-16     	; 0x1728 <__addsf3x+0x6e>
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <__addsf3x+0x9c>
    173a:	ba 0f       	add	r27, r26
    173c:	62 1f       	adc	r22, r18
    173e:	73 1f       	adc	r23, r19
    1740:	84 1f       	adc	r24, r20
    1742:	48 f4       	brcc	.+18     	; 0x1756 <__addsf3x+0x9c>
    1744:	87 95       	ror	r24
    1746:	77 95       	ror	r23
    1748:	67 95       	ror	r22
    174a:	b7 95       	ror	r27
    174c:	f7 95       	ror	r31
    174e:	9e 3f       	cpi	r25, 0xFE	; 254
    1750:	08 f0       	brcs	.+2      	; 0x1754 <__addsf3x+0x9a>
    1752:	b0 cf       	rjmp	.-160    	; 0x16b4 <__addsf3+0x28>
    1754:	93 95       	inc	r25
    1756:	88 0f       	add	r24, r24
    1758:	08 f0       	brcs	.+2      	; 0x175c <__addsf3x+0xa2>
    175a:	99 27       	eor	r25, r25
    175c:	ee 0f       	add	r30, r30
    175e:	97 95       	ror	r25
    1760:	87 95       	ror	r24
    1762:	08 95       	ret

00001764 <__divsf3>:
    1764:	0e 94 c6 0b 	call	0x178c	; 0x178c <__divsf3x>
    1768:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_round>
    176c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__fp_pscB>
    1770:	58 f0       	brcs	.+22     	; 0x1788 <__divsf3+0x24>
    1772:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_pscA>
    1776:	40 f0       	brcs	.+16     	; 0x1788 <__divsf3+0x24>
    1778:	29 f4       	brne	.+10     	; 0x1784 <__divsf3+0x20>
    177a:	5f 3f       	cpi	r21, 0xFF	; 255
    177c:	29 f0       	breq	.+10     	; 0x1788 <__divsf3+0x24>
    177e:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_inf>
    1782:	51 11       	cpse	r21, r1
    1784:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__fp_szero>
    1788:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__fp_nan>

0000178c <__divsf3x>:
    178c:	0e 94 bf 0c 	call	0x197e	; 0x197e <__fp_split3>
    1790:	68 f3       	brcs	.-38     	; 0x176c <__divsf3+0x8>

00001792 <__divsf3_pse>:
    1792:	99 23       	and	r25, r25
    1794:	b1 f3       	breq	.-20     	; 0x1782 <__divsf3+0x1e>
    1796:	55 23       	and	r21, r21
    1798:	91 f3       	breq	.-28     	; 0x177e <__divsf3+0x1a>
    179a:	95 1b       	sub	r25, r21
    179c:	55 0b       	sbc	r21, r21
    179e:	bb 27       	eor	r27, r27
    17a0:	aa 27       	eor	r26, r26
    17a2:	62 17       	cp	r22, r18
    17a4:	73 07       	cpc	r23, r19
    17a6:	84 07       	cpc	r24, r20
    17a8:	38 f0       	brcs	.+14     	; 0x17b8 <__divsf3_pse+0x26>
    17aa:	9f 5f       	subi	r25, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	44 1f       	adc	r20, r20
    17b4:	aa 1f       	adc	r26, r26
    17b6:	a9 f3       	breq	.-22     	; 0x17a2 <__divsf3_pse+0x10>
    17b8:	35 d0       	rcall	.+106    	; 0x1824 <__divsf3_pse+0x92>
    17ba:	0e 2e       	mov	r0, r30
    17bc:	3a f0       	brmi	.+14     	; 0x17cc <__divsf3_pse+0x3a>
    17be:	e0 e8       	ldi	r30, 0x80	; 128
    17c0:	32 d0       	rcall	.+100    	; 0x1826 <__divsf3_pse+0x94>
    17c2:	91 50       	subi	r25, 0x01	; 1
    17c4:	50 40       	sbci	r21, 0x00	; 0
    17c6:	e6 95       	lsr	r30
    17c8:	00 1c       	adc	r0, r0
    17ca:	ca f7       	brpl	.-14     	; 0x17be <__divsf3_pse+0x2c>
    17cc:	2b d0       	rcall	.+86     	; 0x1824 <__divsf3_pse+0x92>
    17ce:	fe 2f       	mov	r31, r30
    17d0:	29 d0       	rcall	.+82     	; 0x1824 <__divsf3_pse+0x92>
    17d2:	66 0f       	add	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	88 1f       	adc	r24, r24
    17d8:	bb 1f       	adc	r27, r27
    17da:	26 17       	cp	r18, r22
    17dc:	37 07       	cpc	r19, r23
    17de:	48 07       	cpc	r20, r24
    17e0:	ab 07       	cpc	r26, r27
    17e2:	b0 e8       	ldi	r27, 0x80	; 128
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <__divsf3_pse+0x56>
    17e6:	bb 0b       	sbc	r27, r27
    17e8:	80 2d       	mov	r24, r0
    17ea:	bf 01       	movw	r22, r30
    17ec:	ff 27       	eor	r31, r31
    17ee:	93 58       	subi	r25, 0x83	; 131
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	3a f0       	brmi	.+14     	; 0x1802 <__divsf3_pse+0x70>
    17f4:	9e 3f       	cpi	r25, 0xFE	; 254
    17f6:	51 05       	cpc	r21, r1
    17f8:	78 f0       	brcs	.+30     	; 0x1818 <__divsf3_pse+0x86>
    17fa:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_inf>
    17fe:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__fp_szero>
    1802:	5f 3f       	cpi	r21, 0xFF	; 255
    1804:	e4 f3       	brlt	.-8      	; 0x17fe <__divsf3_pse+0x6c>
    1806:	98 3e       	cpi	r25, 0xE8	; 232
    1808:	d4 f3       	brlt	.-12     	; 0x17fe <__divsf3_pse+0x6c>
    180a:	86 95       	lsr	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b7 95       	ror	r27
    1812:	f7 95       	ror	r31
    1814:	9f 5f       	subi	r25, 0xFF	; 255
    1816:	c9 f7       	brne	.-14     	; 0x180a <__divsf3_pse+0x78>
    1818:	88 0f       	add	r24, r24
    181a:	91 1d       	adc	r25, r1
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	97 f9       	bld	r25, 7
    1822:	08 95       	ret
    1824:	e1 e0       	ldi	r30, 0x01	; 1
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	bb 1f       	adc	r27, r27
    182e:	62 17       	cp	r22, r18
    1830:	73 07       	cpc	r23, r19
    1832:	84 07       	cpc	r24, r20
    1834:	ba 07       	cpc	r27, r26
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__divsf3_pse+0xae>
    1838:	62 1b       	sub	r22, r18
    183a:	73 0b       	sbc	r23, r19
    183c:	84 0b       	sbc	r24, r20
    183e:	ba 0b       	sbc	r27, r26
    1840:	ee 1f       	adc	r30, r30
    1842:	88 f7       	brcc	.-30     	; 0x1826 <__divsf3_pse+0x94>
    1844:	e0 95       	com	r30
    1846:	08 95       	ret

00001848 <__fixsfsi>:
    1848:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixunssfsi>
    184c:	68 94       	set
    184e:	b1 11       	cpse	r27, r1
    1850:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__fp_szero>
    1854:	08 95       	ret

00001856 <__fixunssfsi>:
    1856:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fp_splitA>
    185a:	88 f0       	brcs	.+34     	; 0x187e <__fixunssfsi+0x28>
    185c:	9f 57       	subi	r25, 0x7F	; 127
    185e:	98 f0       	brcs	.+38     	; 0x1886 <__fixunssfsi+0x30>
    1860:	b9 2f       	mov	r27, r25
    1862:	99 27       	eor	r25, r25
    1864:	b7 51       	subi	r27, 0x17	; 23
    1866:	b0 f0       	brcs	.+44     	; 0x1894 <__fixunssfsi+0x3e>
    1868:	e1 f0       	breq	.+56     	; 0x18a2 <__fixunssfsi+0x4c>
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	1a f0       	brmi	.+6      	; 0x187a <__fixunssfsi+0x24>
    1874:	ba 95       	dec	r27
    1876:	c9 f7       	brne	.-14     	; 0x186a <__fixunssfsi+0x14>
    1878:	14 c0       	rjmp	.+40     	; 0x18a2 <__fixunssfsi+0x4c>
    187a:	b1 30       	cpi	r27, 0x01	; 1
    187c:	91 f0       	breq	.+36     	; 0x18a2 <__fixunssfsi+0x4c>
    187e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__fp_zero>
    1882:	b1 e0       	ldi	r27, 0x01	; 1
    1884:	08 95       	ret
    1886:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_zero>
    188a:	67 2f       	mov	r22, r23
    188c:	78 2f       	mov	r23, r24
    188e:	88 27       	eor	r24, r24
    1890:	b8 5f       	subi	r27, 0xF8	; 248
    1892:	39 f0       	breq	.+14     	; 0x18a2 <__fixunssfsi+0x4c>
    1894:	b9 3f       	cpi	r27, 0xF9	; 249
    1896:	cc f3       	brlt	.-14     	; 0x188a <__fixunssfsi+0x34>
    1898:	86 95       	lsr	r24
    189a:	77 95       	ror	r23
    189c:	67 95       	ror	r22
    189e:	b3 95       	inc	r27
    18a0:	d9 f7       	brne	.-10     	; 0x1898 <__fixunssfsi+0x42>
    18a2:	3e f4       	brtc	.+14     	; 0x18b2 <__fixunssfsi+0x5c>
    18a4:	90 95       	com	r25
    18a6:	80 95       	com	r24
    18a8:	70 95       	com	r23
    18aa:	61 95       	neg	r22
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255
    18ae:	8f 4f       	sbci	r24, 0xFF	; 255
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	08 95       	ret

000018b4 <__floatunsisf>:
    18b4:	e8 94       	clt
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <__floatsisf+0x12>

000018b8 <__floatsisf>:
    18b8:	97 fb       	bst	r25, 7
    18ba:	3e f4       	brtc	.+14     	; 0x18ca <__floatsisf+0x12>
    18bc:	90 95       	com	r25
    18be:	80 95       	com	r24
    18c0:	70 95       	com	r23
    18c2:	61 95       	neg	r22
    18c4:	7f 4f       	sbci	r23, 0xFF	; 255
    18c6:	8f 4f       	sbci	r24, 0xFF	; 255
    18c8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ca:	99 23       	and	r25, r25
    18cc:	a9 f0       	breq	.+42     	; 0x18f8 <__floatsisf+0x40>
    18ce:	f9 2f       	mov	r31, r25
    18d0:	96 e9       	ldi	r25, 0x96	; 150
    18d2:	bb 27       	eor	r27, r27
    18d4:	93 95       	inc	r25
    18d6:	f6 95       	lsr	r31
    18d8:	87 95       	ror	r24
    18da:	77 95       	ror	r23
    18dc:	67 95       	ror	r22
    18de:	b7 95       	ror	r27
    18e0:	f1 11       	cpse	r31, r1
    18e2:	f8 cf       	rjmp	.-16     	; 0x18d4 <__floatsisf+0x1c>
    18e4:	fa f4       	brpl	.+62     	; 0x1924 <__floatsisf+0x6c>
    18e6:	bb 0f       	add	r27, r27
    18e8:	11 f4       	brne	.+4      	; 0x18ee <__floatsisf+0x36>
    18ea:	60 ff       	sbrs	r22, 0
    18ec:	1b c0       	rjmp	.+54     	; 0x1924 <__floatsisf+0x6c>
    18ee:	6f 5f       	subi	r22, 0xFF	; 255
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	8f 4f       	sbci	r24, 0xFF	; 255
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <__floatsisf+0x6c>
    18f8:	88 23       	and	r24, r24
    18fa:	11 f0       	breq	.+4      	; 0x1900 <__floatsisf+0x48>
    18fc:	96 e9       	ldi	r25, 0x96	; 150
    18fe:	11 c0       	rjmp	.+34     	; 0x1922 <__floatsisf+0x6a>
    1900:	77 23       	and	r23, r23
    1902:	21 f0       	breq	.+8      	; 0x190c <__floatsisf+0x54>
    1904:	9e e8       	ldi	r25, 0x8E	; 142
    1906:	87 2f       	mov	r24, r23
    1908:	76 2f       	mov	r23, r22
    190a:	05 c0       	rjmp	.+10     	; 0x1916 <__floatsisf+0x5e>
    190c:	66 23       	and	r22, r22
    190e:	71 f0       	breq	.+28     	; 0x192c <__floatsisf+0x74>
    1910:	96 e8       	ldi	r25, 0x86	; 134
    1912:	86 2f       	mov	r24, r22
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	2a f0       	brmi	.+10     	; 0x1924 <__floatsisf+0x6c>
    191a:	9a 95       	dec	r25
    191c:	66 0f       	add	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	da f7       	brpl	.-10     	; 0x191a <__floatsisf+0x62>
    1924:	88 0f       	add	r24, r24
    1926:	96 95       	lsr	r25
    1928:	87 95       	ror	r24
    192a:	97 f9       	bld	r25, 7
    192c:	08 95       	ret

0000192e <__fp_inf>:
    192e:	97 f9       	bld	r25, 7
    1930:	9f 67       	ori	r25, 0x7F	; 127
    1932:	80 e8       	ldi	r24, 0x80	; 128
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	08 95       	ret

0000193a <__fp_nan>:
    193a:	9f ef       	ldi	r25, 0xFF	; 255
    193c:	80 ec       	ldi	r24, 0xC0	; 192
    193e:	08 95       	ret

00001940 <__fp_pscA>:
    1940:	00 24       	eor	r0, r0
    1942:	0a 94       	dec	r0
    1944:	16 16       	cp	r1, r22
    1946:	17 06       	cpc	r1, r23
    1948:	18 06       	cpc	r1, r24
    194a:	09 06       	cpc	r0, r25
    194c:	08 95       	ret

0000194e <__fp_pscB>:
    194e:	00 24       	eor	r0, r0
    1950:	0a 94       	dec	r0
    1952:	12 16       	cp	r1, r18
    1954:	13 06       	cpc	r1, r19
    1956:	14 06       	cpc	r1, r20
    1958:	05 06       	cpc	r0, r21
    195a:	08 95       	ret

0000195c <__fp_round>:
    195c:	09 2e       	mov	r0, r25
    195e:	03 94       	inc	r0
    1960:	00 0c       	add	r0, r0
    1962:	11 f4       	brne	.+4      	; 0x1968 <__fp_round+0xc>
    1964:	88 23       	and	r24, r24
    1966:	52 f0       	brmi	.+20     	; 0x197c <__fp_round+0x20>
    1968:	bb 0f       	add	r27, r27
    196a:	40 f4       	brcc	.+16     	; 0x197c <__fp_round+0x20>
    196c:	bf 2b       	or	r27, r31
    196e:	11 f4       	brne	.+4      	; 0x1974 <__fp_round+0x18>
    1970:	60 ff       	sbrs	r22, 0
    1972:	04 c0       	rjmp	.+8      	; 0x197c <__fp_round+0x20>
    1974:	6f 5f       	subi	r22, 0xFF	; 255
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	8f 4f       	sbci	r24, 0xFF	; 255
    197a:	9f 4f       	sbci	r25, 0xFF	; 255
    197c:	08 95       	ret

0000197e <__fp_split3>:
    197e:	57 fd       	sbrc	r21, 7
    1980:	90 58       	subi	r25, 0x80	; 128
    1982:	44 0f       	add	r20, r20
    1984:	55 1f       	adc	r21, r21
    1986:	59 f0       	breq	.+22     	; 0x199e <__fp_splitA+0x10>
    1988:	5f 3f       	cpi	r21, 0xFF	; 255
    198a:	71 f0       	breq	.+28     	; 0x19a8 <__fp_splitA+0x1a>
    198c:	47 95       	ror	r20

0000198e <__fp_splitA>:
    198e:	88 0f       	add	r24, r24
    1990:	97 fb       	bst	r25, 7
    1992:	99 1f       	adc	r25, r25
    1994:	61 f0       	breq	.+24     	; 0x19ae <__fp_splitA+0x20>
    1996:	9f 3f       	cpi	r25, 0xFF	; 255
    1998:	79 f0       	breq	.+30     	; 0x19b8 <__fp_splitA+0x2a>
    199a:	87 95       	ror	r24
    199c:	08 95       	ret
    199e:	12 16       	cp	r1, r18
    19a0:	13 06       	cpc	r1, r19
    19a2:	14 06       	cpc	r1, r20
    19a4:	55 1f       	adc	r21, r21
    19a6:	f2 cf       	rjmp	.-28     	; 0x198c <__fp_split3+0xe>
    19a8:	46 95       	lsr	r20
    19aa:	f1 df       	rcall	.-30     	; 0x198e <__fp_splitA>
    19ac:	08 c0       	rjmp	.+16     	; 0x19be <__fp_splitA+0x30>
    19ae:	16 16       	cp	r1, r22
    19b0:	17 06       	cpc	r1, r23
    19b2:	18 06       	cpc	r1, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	f1 cf       	rjmp	.-30     	; 0x199a <__fp_splitA+0xc>
    19b8:	86 95       	lsr	r24
    19ba:	71 05       	cpc	r23, r1
    19bc:	61 05       	cpc	r22, r1
    19be:	08 94       	sec
    19c0:	08 95       	ret

000019c2 <__fp_zero>:
    19c2:	e8 94       	clt

000019c4 <__fp_szero>:
    19c4:	bb 27       	eor	r27, r27
    19c6:	66 27       	eor	r22, r22
    19c8:	77 27       	eor	r23, r23
    19ca:	cb 01       	movw	r24, r22
    19cc:	97 f9       	bld	r25, 7
    19ce:	08 95       	ret

000019d0 <__mulsf3>:
    19d0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3x>
    19d4:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_round>
    19d8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_pscA>
    19dc:	38 f0       	brcs	.+14     	; 0x19ec <__mulsf3+0x1c>
    19de:	0e 94 a7 0c 	call	0x194e	; 0x194e <__fp_pscB>
    19e2:	20 f0       	brcs	.+8      	; 0x19ec <__mulsf3+0x1c>
    19e4:	95 23       	and	r25, r21
    19e6:	11 f0       	breq	.+4      	; 0x19ec <__mulsf3+0x1c>
    19e8:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_inf>
    19ec:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__fp_nan>
    19f0:	11 24       	eor	r1, r1
    19f2:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__fp_szero>

000019f6 <__mulsf3x>:
    19f6:	0e 94 bf 0c 	call	0x197e	; 0x197e <__fp_split3>
    19fa:	70 f3       	brcs	.-36     	; 0x19d8 <__mulsf3+0x8>

000019fc <__mulsf3_pse>:
    19fc:	95 9f       	mul	r25, r21
    19fe:	c1 f3       	breq	.-16     	; 0x19f0 <__mulsf3+0x20>
    1a00:	95 0f       	add	r25, r21
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	55 1f       	adc	r21, r21
    1a06:	62 9f       	mul	r22, r18
    1a08:	f0 01       	movw	r30, r0
    1a0a:	72 9f       	mul	r23, r18
    1a0c:	bb 27       	eor	r27, r27
    1a0e:	f0 0d       	add	r31, r0
    1a10:	b1 1d       	adc	r27, r1
    1a12:	63 9f       	mul	r22, r19
    1a14:	aa 27       	eor	r26, r26
    1a16:	f0 0d       	add	r31, r0
    1a18:	b1 1d       	adc	r27, r1
    1a1a:	aa 1f       	adc	r26, r26
    1a1c:	64 9f       	mul	r22, r20
    1a1e:	66 27       	eor	r22, r22
    1a20:	b0 0d       	add	r27, r0
    1a22:	a1 1d       	adc	r26, r1
    1a24:	66 1f       	adc	r22, r22
    1a26:	82 9f       	mul	r24, r18
    1a28:	22 27       	eor	r18, r18
    1a2a:	b0 0d       	add	r27, r0
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	62 1f       	adc	r22, r18
    1a30:	73 9f       	mul	r23, r19
    1a32:	b0 0d       	add	r27, r0
    1a34:	a1 1d       	adc	r26, r1
    1a36:	62 1f       	adc	r22, r18
    1a38:	83 9f       	mul	r24, r19
    1a3a:	a0 0d       	add	r26, r0
    1a3c:	61 1d       	adc	r22, r1
    1a3e:	22 1f       	adc	r18, r18
    1a40:	74 9f       	mul	r23, r20
    1a42:	33 27       	eor	r19, r19
    1a44:	a0 0d       	add	r26, r0
    1a46:	61 1d       	adc	r22, r1
    1a48:	23 1f       	adc	r18, r19
    1a4a:	84 9f       	mul	r24, r20
    1a4c:	60 0d       	add	r22, r0
    1a4e:	21 1d       	adc	r18, r1
    1a50:	82 2f       	mov	r24, r18
    1a52:	76 2f       	mov	r23, r22
    1a54:	6a 2f       	mov	r22, r26
    1a56:	11 24       	eor	r1, r1
    1a58:	9f 57       	subi	r25, 0x7F	; 127
    1a5a:	50 40       	sbci	r21, 0x00	; 0
    1a5c:	9a f0       	brmi	.+38     	; 0x1a84 <__mulsf3_pse+0x88>
    1a5e:	f1 f0       	breq	.+60     	; 0x1a9c <__mulsf3_pse+0xa0>
    1a60:	88 23       	and	r24, r24
    1a62:	4a f0       	brmi	.+18     	; 0x1a76 <__mulsf3_pse+0x7a>
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	66 1f       	adc	r22, r22
    1a6c:	77 1f       	adc	r23, r23
    1a6e:	88 1f       	adc	r24, r24
    1a70:	91 50       	subi	r25, 0x01	; 1
    1a72:	50 40       	sbci	r21, 0x00	; 0
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <__mulsf3_pse+0x64>
    1a76:	9e 3f       	cpi	r25, 0xFE	; 254
    1a78:	51 05       	cpc	r21, r1
    1a7a:	80 f0       	brcs	.+32     	; 0x1a9c <__mulsf3_pse+0xa0>
    1a7c:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_inf>
    1a80:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__fp_szero>
    1a84:	5f 3f       	cpi	r21, 0xFF	; 255
    1a86:	e4 f3       	brlt	.-8      	; 0x1a80 <__mulsf3_pse+0x84>
    1a88:	98 3e       	cpi	r25, 0xE8	; 232
    1a8a:	d4 f3       	brlt	.-12     	; 0x1a80 <__mulsf3_pse+0x84>
    1a8c:	86 95       	lsr	r24
    1a8e:	77 95       	ror	r23
    1a90:	67 95       	ror	r22
    1a92:	b7 95       	ror	r27
    1a94:	f7 95       	ror	r31
    1a96:	e7 95       	ror	r30
    1a98:	9f 5f       	subi	r25, 0xFF	; 255
    1a9a:	c1 f7       	brne	.-16     	; 0x1a8c <__mulsf3_pse+0x90>
    1a9c:	fe 2b       	or	r31, r30
    1a9e:	88 0f       	add	r24, r24
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	96 95       	lsr	r25
    1aa4:	87 95       	ror	r24
    1aa6:	97 f9       	bld	r25, 7
    1aa8:	08 95       	ret

00001aaa <do_rand>:
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	ec 01       	movw	r28, r24
    1ac0:	68 81       	ld	r22, Y
    1ac2:	79 81       	ldd	r23, Y+1	; 0x01
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac8:	61 15       	cp	r22, r1
    1aca:	71 05       	cpc	r23, r1
    1acc:	81 05       	cpc	r24, r1
    1ace:	91 05       	cpc	r25, r1
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <do_rand+0x30>
    1ad2:	64 e2       	ldi	r22, 0x24	; 36
    1ad4:	79 ed       	ldi	r23, 0xD9	; 217
    1ad6:	8b e5       	ldi	r24, 0x5B	; 91
    1ad8:	97 e0       	ldi	r25, 0x07	; 7
    1ada:	2d e1       	ldi	r18, 0x1D	; 29
    1adc:	33 ef       	ldi	r19, 0xF3	; 243
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodsi4>
    1ae6:	49 01       	movw	r8, r18
    1ae8:	5a 01       	movw	r10, r20
    1aea:	9b 01       	movw	r18, r22
    1aec:	ac 01       	movw	r20, r24
    1aee:	a7 ea       	ldi	r26, 0xA7	; 167
    1af0:	b1 e4       	ldi	r27, 0x41	; 65
    1af2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__muluhisi3>
    1af6:	6b 01       	movw	r12, r22
    1af8:	7c 01       	movw	r14, r24
    1afa:	ac ee       	ldi	r26, 0xEC	; 236
    1afc:	b4 ef       	ldi	r27, 0xF4	; 244
    1afe:	a5 01       	movw	r20, r10
    1b00:	94 01       	movw	r18, r8
    1b02:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__mulohisi3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8c 0d       	add	r24, r12
    1b0c:	9d 1d       	adc	r25, r13
    1b0e:	ae 1d       	adc	r26, r14
    1b10:	bf 1d       	adc	r27, r15
    1b12:	b7 ff       	sbrs	r27, 7
    1b14:	03 c0       	rjmp	.+6      	; 0x1b1c <do_rand+0x72>
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	a1 09       	sbc	r26, r1
    1b1a:	b0 48       	sbci	r27, 0x80	; 128
    1b1c:	88 83       	st	Y, r24
    1b1e:	99 83       	std	Y+1, r25	; 0x01
    1b20:	aa 83       	std	Y+2, r26	; 0x02
    1b22:	bb 83       	std	Y+3, r27	; 0x03
    1b24:	9f 77       	andi	r25, 0x7F	; 127
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	08 95       	ret

00001b3c <rand_r>:
    1b3c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <do_rand>
    1b40:	08 95       	ret

00001b42 <rand>:
    1b42:	8d e0       	ldi	r24, 0x0D	; 13
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <do_rand>
    1b4a:	08 95       	ret

00001b4c <srand>:
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	80 93 0d 01 	sts	0x010D, r24
    1b54:	90 93 0e 01 	sts	0x010E, r25
    1b58:	a0 93 0f 01 	sts	0x010F, r26
    1b5c:	b0 93 10 01 	sts	0x0110, r27
    1b60:	08 95       	ret

00001b62 <eeprom_read_byte>:
    1b62:	f9 99       	sbic	0x1f, 1	; 31
    1b64:	fe cf       	rjmp	.-4      	; 0x1b62 <eeprom_read_byte>
    1b66:	92 bd       	out	0x22, r25	; 34
    1b68:	81 bd       	out	0x21, r24	; 33
    1b6a:	f8 9a       	sbi	0x1f, 0	; 31
    1b6c:	99 27       	eor	r25, r25
    1b6e:	80 b5       	in	r24, 0x20	; 32
    1b70:	08 95       	ret

00001b72 <eeprom_write_byte>:
    1b72:	26 2f       	mov	r18, r22

00001b74 <eeprom_write_r18>:
    1b74:	f9 99       	sbic	0x1f, 1	; 31
    1b76:	fe cf       	rjmp	.-4      	; 0x1b74 <eeprom_write_r18>
    1b78:	1f ba       	out	0x1f, r1	; 31
    1b7a:	92 bd       	out	0x22, r25	; 34
    1b7c:	81 bd       	out	0x21, r24	; 33
    1b7e:	20 bd       	out	0x20, r18	; 32
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	fa 9a       	sbi	0x1f, 2	; 31
    1b86:	f9 9a       	sbi	0x1f, 1	; 31
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	08 95       	ret

00001b8e <__divmodsi4>:
    1b8e:	05 2e       	mov	r0, r21
    1b90:	97 fb       	bst	r25, 7
    1b92:	1e f4       	brtc	.+6      	; 0x1b9a <__divmodsi4+0xc>
    1b94:	00 94       	com	r0
    1b96:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__negsi2>
    1b9a:	57 fd       	sbrc	r21, 7
    1b9c:	07 d0       	rcall	.+14     	; 0x1bac <__divmodsi4_neg2>
    1b9e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__udivmodsi4>
    1ba2:	07 fc       	sbrc	r0, 7
    1ba4:	03 d0       	rcall	.+6      	; 0x1bac <__divmodsi4_neg2>
    1ba6:	4e f4       	brtc	.+18     	; 0x1bba <__divmodsi4_exit>
    1ba8:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__negsi2>

00001bac <__divmodsi4_neg2>:
    1bac:	50 95       	com	r21
    1bae:	40 95       	com	r20
    1bb0:	30 95       	com	r19
    1bb2:	21 95       	neg	r18
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255

00001bba <__divmodsi4_exit>:
    1bba:	08 95       	ret

00001bbc <__negsi2>:
    1bbc:	90 95       	com	r25
    1bbe:	80 95       	com	r24
    1bc0:	70 95       	com	r23
    1bc2:	61 95       	neg	r22
    1bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	08 95       	ret

00001bcc <__muluhisi3>:
    1bcc:	0e 94 22 0b 	call	0x1644	; 0x1644 <__umulhisi3>
    1bd0:	a5 9f       	mul	r26, r21
    1bd2:	90 0d       	add	r25, r0
    1bd4:	b4 9f       	mul	r27, r20
    1bd6:	90 0d       	add	r25, r0
    1bd8:	a4 9f       	mul	r26, r20
    1bda:	80 0d       	add	r24, r0
    1bdc:	91 1d       	adc	r25, r1
    1bde:	11 24       	eor	r1, r1
    1be0:	08 95       	ret

00001be2 <__mulshisi3>:
    1be2:	b7 ff       	sbrs	r27, 7
    1be4:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__muluhisi3>

00001be8 <__mulohisi3>:
    1be8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__muluhisi3>
    1bec:	82 1b       	sub	r24, r18
    1bee:	93 0b       	sbc	r25, r19
    1bf0:	08 95       	ret

00001bf2 <__udivmodsi4>:
    1bf2:	a1 e2       	ldi	r26, 0x21	; 33
    1bf4:	1a 2e       	mov	r1, r26
    1bf6:	aa 1b       	sub	r26, r26
    1bf8:	bb 1b       	sub	r27, r27
    1bfa:	fd 01       	movw	r30, r26
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <__udivmodsi4_ep>

00001bfe <__udivmodsi4_loop>:
    1bfe:	aa 1f       	adc	r26, r26
    1c00:	bb 1f       	adc	r27, r27
    1c02:	ee 1f       	adc	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	a2 17       	cp	r26, r18
    1c08:	b3 07       	cpc	r27, r19
    1c0a:	e4 07       	cpc	r30, r20
    1c0c:	f5 07       	cpc	r31, r21
    1c0e:	20 f0       	brcs	.+8      	; 0x1c18 <__udivmodsi4_ep>
    1c10:	a2 1b       	sub	r26, r18
    1c12:	b3 0b       	sbc	r27, r19
    1c14:	e4 0b       	sbc	r30, r20
    1c16:	f5 0b       	sbc	r31, r21

00001c18 <__udivmodsi4_ep>:
    1c18:	66 1f       	adc	r22, r22
    1c1a:	77 1f       	adc	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	1a 94       	dec	r1
    1c22:	69 f7       	brne	.-38     	; 0x1bfe <__udivmodsi4_loop>
    1c24:	60 95       	com	r22
    1c26:	70 95       	com	r23
    1c28:	80 95       	com	r24
    1c2a:	90 95       	com	r25
    1c2c:	9b 01       	movw	r18, r22
    1c2e:	ac 01       	movw	r20, r24
    1c30:	bd 01       	movw	r22, r26
    1c32:	cf 01       	movw	r24, r30
    1c34:	08 95       	ret

00001c36 <_exit>:
    1c36:	f8 94       	cli

00001c38 <__stop_program>:
    1c38:	ff cf       	rjmp	.-2      	; 0x1c38 <__stop_program>
