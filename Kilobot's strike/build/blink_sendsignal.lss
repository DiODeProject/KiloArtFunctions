
build/blink_sendsignal.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	3a 02       	muls	r19, r26
      6a:	b6 02       	muls	r27, r22
      6c:	0e 02       	muls	r16, r30
      6e:	05 02       	muls	r16, r21
      70:	0b 02       	muls	r16, r27
      72:	98 02       	muls	r25, r24
      74:	8d 02       	muls	r24, r29
      76:	18 09       	sbc	r17, r8
      78:	f5 07       	cpc	r31, r21
      7a:	f5 07       	cpc	r31, r21
      7c:	15 09       	sbc	r17, r5
      7e:	21 09       	sbc	r18, r1
      80:	11 09       	sbc	r17, r1
      82:	28 09       	sbc	r18, r8
      84:	24 09       	sbc	r18, r4
      86:	2c 09       	sbc	r18, r12
      88:	e4 08       	sbc	r14, r4
      8a:	b6 08       	sbc	r11, r6

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e1       	ldi	r30, 0x14	; 20
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 38       	cpi	r26, 0x82	; 130
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <main>
      da:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:


message_t *message_tx()
{
    return &message;
}
      e2:	82 e1       	ldi	r24, 0x12	; 18
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:

void message_tx_success()
{
    // Set the flag on message transmission.
    message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0d 01 	sts	0x010D, r25
      f0:	80 93 0c 01 	sts	0x010C, r24
      f4:	08 95       	ret

000000f6 <setup>:
message_t message;
// Flag to keep track of message transmission.
int message_sent = 0;

void setup()
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  state = INHALE;
      fa:	10 92 1f 01 	sts	0x011F, r1
      fe:	10 92 1e 01 	sts	0x011E, r1
  last_state_update = kilo_ticks;
     102:	80 91 47 01 	lds	r24, 0x0147
     106:	90 91 48 01 	lds	r25, 0x0148
     10a:	a0 91 49 01 	lds	r26, 0x0149
     10e:	b0 91 4a 01 	lds	r27, 0x014A
     112:	80 93 20 01 	sts	0x0120, r24
     116:	90 93 21 01 	sts	0x0121, r25
     11a:	a0 93 22 01 	sts	0x0122, r26
     11e:	b0 93 23 01 	sts	0x0123, r27
    // The type is always NORMAL.
    message.type = NORMAL;
     122:	c2 e1       	ldi	r28, 0x12	; 18
     124:	d1 e0       	ldi	r29, 0x01	; 1
     126:	19 86       	std	Y+9, r1	; 0x09
    // Some dummy data as an example.
    message.data[0] = 0;
     128:	18 82       	st	Y, r1
    // It's important that the CRC is computed after the data has been set;
    // otherwise it would be wrong and the message would be dropped by the
    // receiver.
    message.crc = message_crc(&message);
     12a:	ce 01       	movw	r24, r28
     12c:	0e 94 bf 09 	call	0x137e	; 0x137e <message_crc>
     130:	9b 87       	std	Y+11, r25	; 0x0b
     132:	8a 87       	std	Y+10, r24	; 0x0a
}
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <loop>:

void loop()
{
  // Update the state every 64 clock ticks (roughly 2 seconds).

  if (kilo_ticks > (last_state_update + 32))
     13a:	40 91 47 01 	lds	r20, 0x0147
     13e:	50 91 48 01 	lds	r21, 0x0148
     142:	60 91 49 01 	lds	r22, 0x0149
     146:	70 91 4a 01 	lds	r23, 0x014A
     14a:	80 91 20 01 	lds	r24, 0x0120
     14e:	90 91 21 01 	lds	r25, 0x0121
     152:	a0 91 22 01 	lds	r26, 0x0122
     156:	b0 91 23 01 	lds	r27, 0x0123
     15a:	80 96       	adiw	r24, 0x20	; 32
     15c:	a1 1d       	adc	r26, r1
     15e:	b1 1d       	adc	r27, r1
     160:	84 17       	cp	r24, r20
     162:	95 07       	cpc	r25, r21
     164:	a6 07       	cpc	r26, r22
     166:	b7 07       	cpc	r27, r23
     168:	10 f5       	brcc	.+68     	; 0x1ae <loop+0x74>
    {
      last_state_update = kilo_ticks;
     16a:	80 91 47 01 	lds	r24, 0x0147
     16e:	90 91 48 01 	lds	r25, 0x0148
     172:	a0 91 49 01 	lds	r26, 0x0149
     176:	b0 91 4a 01 	lds	r27, 0x014A
     17a:	80 93 20 01 	sts	0x0120, r24
     17e:	90 93 21 01 	sts	0x0121, r25
     182:	a0 93 22 01 	sts	0x0122, r26
     186:	b0 93 23 01 	sts	0x0123, r27
       
      if (state == INHALE)
     18a:	80 91 1e 01 	lds	r24, 0x011E
     18e:	90 91 1f 01 	lds	r25, 0x011F
     192:	00 97       	sbiw	r24, 0x00	; 0
     194:	69 f0       	breq	.+26     	; 0x1b0 <loop+0x76>
        {
	  set_color(RGB(1, 0, 0));
	  // Set the next state.
	  state = EXHALE;
        }
      else if (state == EXHALE)
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	a9 f0       	breq	.+42     	; 0x1c4 <loop+0x8a>
        {
	  set_color(RGB(0, 0, 0));
	  // Set the next state.
	  state = INHALE;
        }
      if (message_sent == 1)
     19a:	80 91 0c 01 	lds	r24, 0x010C
     19e:	90 91 0d 01 	lds	r25, 0x010D
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	21 f4       	brne	.+8      	; 0x1ae <loop+0x74>
        {
          // Reset the flag so the LED is only blinked once per message.
          message_sent = 0;
     1a6:	10 92 0d 01 	sts	0x010D, r1
     1aa:	10 92 0c 01 	sts	0x010C, r1
     1ae:	08 95       	ret
    {
      last_state_update = kilo_ticks;
       
      if (state == INHALE)
        {
	  set_color(RGB(1, 0, 0));
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 6f 07 	call	0xede	; 0xede <set_color>
	  // Set the next state.
	  state = EXHALE;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	90 93 1f 01 	sts	0x011F, r25
     1be:	80 93 1e 01 	sts	0x011E, r24
     1c2:	eb cf       	rjmp	.-42     	; 0x19a <loop+0x60>
        }
      else if (state == EXHALE)
        {
	  set_color(RGB(0, 0, 0));
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	0e 94 6f 07 	call	0xede	; 0xede <set_color>
	  // Set the next state.
	  state = INHALE;
     1ca:	10 92 1f 01 	sts	0x011F, r1
     1ce:	10 92 1e 01 	sts	0x011E, r1
     1d2:	e3 cf       	rjmp	.-58     	; 0x19a <loop+0x60>

000001d4 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1d4:	08 95       	ret

000001d6 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	08 95       	ret

000001dc <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1dc:	08 95       	ret

000001de <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1de:	df 92       	push	r13
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
    cli();
     1ec:	f8 94       	cli

    ports_off();
     1ee:	14 b8       	out	0x04, r1	; 4
     1f0:	17 b8       	out	0x07, r1	; 7
     1f2:	1a b8       	out	0x0a, r1	; 10
     1f4:	15 b8       	out	0x05, r1	; 5
     1f6:	18 b8       	out	0x08, r1	; 8
     1f8:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1fa:	52 9a       	sbi	0x0a, 2	; 10
     1fc:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1fe:	14 bc       	out	0x24, r1	; 36
     200:	85 e0       	ldi	r24, 0x05	; 5
     202:	85 bd       	out	0x25, r24	; 37
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	87 bd       	out	0x27, r24	; 39
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     20e:	10 92 80 00 	sts	0x0080, r1
     212:	10 92 81 00 	sts	0x0081, r1
     216:	2f e8       	ldi	r18, 0x8F	; 143
     218:	3b e0       	ldi	r19, 0x0B	; 11
     21a:	30 93 89 00 	sts	0x0089, r19
     21e:	20 93 88 00 	sts	0x0088, r18
     222:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     226:	53 98       	cbi	0x0a, 3	; 10
     228:	23 98       	cbi	0x04, 3	; 4
     22a:	91 ea       	ldi	r25, 0xA1	; 161
     22c:	90 93 b0 00 	sts	0x00B0, r25
     230:	80 93 b1 00 	sts	0x00B1, r24
     234:	10 92 b4 00 	sts	0x00B4, r1
     238:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     23c:	8b e0       	ldi	r24, 0x0B	; 11
     23e:	80 bf       	out	0x30, r24	; 48
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     246:	86 e0       	ldi	r24, 0x06	; 6
     248:	80 93 7c 00 	sts	0x007C, r24
     24c:	83 e8       	ldi	r24, 0x83	; 131
     24e:	80 93 7a 00 	sts	0x007A, r24
     252:	80 91 7a 00 	lds	r24, 0x007A
     256:	80 64       	ori	r24, 0x40	; 64
     258:	80 93 7a 00 	sts	0x007A, r24
     25c:	80 91 7a 00 	lds	r24, 0x007A
     260:	86 fd       	sbrc	r24, 6
     262:	fc cf       	rjmp	.-8      	; 0x25c <kilo_init+0x7e>
    adc_trigger_high_gain();
     264:	10 92 7c 00 	sts	0x007C, r1
     268:	83 ea       	ldi	r24, 0xA3	; 163
     26a:	80 93 7a 00 	sts	0x007A, r24
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
    if (osccal != 0xFF)
     27c:	8f 3f       	cpi	r24, 0xFF	; 255
     27e:	11 f0       	breq	.+4      	; 0x284 <kilo_init+0xa6>
        OSCCAL = osccal;
     280:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     284:	10 92 4b 01 	sts	0x014B, r1
    rx_leadingbit = 1;
     288:	c1 e0       	ldi	r28, 0x01	; 1
     28a:	c0 93 24 01 	sts	0x0124, r28
    rx_leadingbyte = 1;
     28e:	c0 93 68 01 	sts	0x0168, r28
    rx_byteindex = 0;
     292:	10 92 42 01 	sts	0x0142, r1
    rx_bytevalue = 0;
     296:	10 92 7c 01 	sts	0x017C, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     29a:	80 e9       	ldi	r24, 0x90	; 144
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     2a2:	80 93 41 01 	sts	0x0141, r24
    if (tx_mask & ~TX_MASK_MAX)
     2a6:	80 91 41 01 	lds	r24, 0x0141
     2aa:	88 73       	andi	r24, 0x38	; 56
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2ae:	c0 93 41 01 	sts	0x0141, r28
    tx_clock = 0;
     2b2:	10 92 6c 01 	sts	0x016C, r1
     2b6:	10 92 6b 01 	sts	0x016B, r1
    tx_increment = 255;
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 6a 01 	sts	0x016A, r25
     2c2:	80 93 69 01 	sts	0x0169, r24
    kilo_ticks = 0;
     2c6:	10 92 47 01 	sts	0x0147, r1
     2ca:	10 92 48 01 	sts	0x0148, r1
     2ce:	10 92 49 01 	sts	0x0149, r1
     2d2:	10 92 4a 01 	sts	0x014A, r1
    kilo_state = IDLE;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 11 01 	sts	0x0111, r24
    kilo_tx_period = 3906;
     2dc:	82 e4       	ldi	r24, 0x42	; 66
     2de:	9f e0       	ldi	r25, 0x0F	; 15
     2e0:	90 93 7b 01 	sts	0x017B, r25
     2e4:	80 93 7a 01 	sts	0x017A, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2e8:	80 eb       	ldi	r24, 0xB0	; 176
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     2f0:	c8 2f       	mov	r28, r24
     2f2:	81 eb       	ldi	r24, 0xB1	; 177
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     2fa:	2c 2f       	mov	r18, r28
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	38 2b       	or	r19, r24
     300:	30 93 7e 01 	sts	0x017E, r19
     304:	20 93 7d 01 	sts	0x017D, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     308:	85 e0       	ldi	r24, 0x05	; 5
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     310:	80 93 81 01 	sts	0x0181, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     314:	89 e0       	ldi	r24, 0x09	; 9
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     31c:	80 93 6d 01 	sts	0x016D, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     320:	8c e0       	ldi	r24, 0x0C	; 12
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     328:	80 93 7f 01 	sts	0x017F, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     32c:	84 e1       	ldi	r24, 0x14	; 20
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     334:	80 93 80 01 	sts	0x0180, r24
     338:	5c e4       	ldi	r21, 0x4C	; 76
     33a:	e5 2e       	mov	r14, r21
     33c:	51 e0       	ldi	r21, 0x01	; 1
     33e:	f5 2e       	mov	r15, r21
     340:	05 e2       	ldi	r16, 0x25	; 37
     342:	11 e0       	ldi	r17, 0x01	; 1
     344:	c0 e2       	ldi	r28, 0x20	; 32
     346:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     348:	ce 01       	movw	r24, r28
     34a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     34e:	d8 2e       	mov	r13, r24
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     358:	2d 2d       	mov	r18, r13
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	32 2f       	mov	r19, r18
     35e:	22 27       	eor	r18, r18
     360:	28 2b       	or	r18, r24
     362:	f7 01       	movw	r30, r14
     364:	21 93       	st	Z+, r18
     366:	31 93       	st	Z+, r19
     368:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     36a:	ce 01       	movw	r24, r28
     36c:	c0 96       	adiw	r24, 0x30	; 48
     36e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     372:	d8 2e       	mov	r13, r24
     374:	ce 01       	movw	r24, r28
     376:	c1 96       	adiw	r24, 0x31	; 49
     378:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <eeprom_read_byte>
     37c:	2d 2d       	mov	r18, r13
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	32 2f       	mov	r19, r18
     382:	22 27       	eor	r18, r18
     384:	28 2b       	or	r18, r24
     386:	f8 01       	movw	r30, r16
     388:	21 93       	st	Z+, r18
     38a:	31 93       	st	Z+, r19
     38c:	8f 01       	movw	r16, r30
     38e:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     390:	cc 33       	cpi	r28, 0x3C	; 60
     392:	d1 05       	cpc	r29, r1
     394:	c9 f6       	brne	.-78     	; 0x348 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     396:	78 94       	sei
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	08 95       	ret

000003a8 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	8f 93       	push	r24
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	a8 95       	wdr
     3ba:	80 91 60 00 	lds	r24, 0x0060
     3be:	88 61       	ori	r24, 0x18	; 24
     3c0:	80 93 60 00 	sts	0x0060, r24
     3c4:	10 92 60 00 	sts	0x0060, r1
     3c8:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3ca:	8f 91       	pop	r24
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     3d6:	3c 01       	movw	r6, r24
     3d8:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     3da:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     3dc:	99 24       	eor	r9, r9
     3de:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     3e4:	96 e0       	ldi	r25, 0x06	; 6
     3e6:	a9 2e       	mov	r10, r25
     3e8:	23 e8       	ldi	r18, 0x83	; 131
     3ea:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     3ec:	38 e1       	ldi	r19, 0x18	; 24
     3ee:	d3 2e       	mov	r13, r19
     3f0:	49 e2       	ldi	r20, 0x29	; 41
     3f2:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     3f4:	90 91 11 01 	lds	r25, 0x0111
     3f8:	e9 2f       	mov	r30, r25
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	e7 30       	cpi	r30, 0x07	; 7
     3fe:	f1 05       	cpc	r31, r1
     400:	c8 f7       	brcc	.-14     	; 0x3f4 <kilo_start+0x1e>
     402:	ec 5c       	subi	r30, 0xCC	; 204
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     40a:	11 23       	and	r17, r17
     40c:	09 f4       	brne	.+2      	; 0x410 <kilo_start+0x3a>
     40e:	fc c0       	rjmp	.+504    	; 0x608 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     410:	c0 92 11 01 	sts	0x0111, r12
     414:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     416:	fe 01       	movw	r30, r28
     418:	09 95       	icall
                break;
     41a:	ec cf       	rjmp	.-40     	; 0x3f4 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     41c:	80 91 4b 01 	lds	r24, 0x014B
     420:	81 11       	cpse	r24, r1
     422:	eb c0       	rjmp	.+470    	; 0x5fa <kilo_start+0x224>
        cli();                                    // disable interrupts
     424:	f8 94       	cli
        adc_setup_conversion(6);
     426:	a0 92 7c 00 	sts	0x007C, r10
     42a:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     42e:	80 91 7a 00 	lds	r24, 0x007A
     432:	80 64       	ori	r24, 0x40	; 64
     434:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     438:	90 91 7a 00 	lds	r25, 0x007A
     43c:	96 fd       	sbrc	r25, 6
     43e:	fc cf       	rjmp	.-8      	; 0x438 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     440:	80 91 78 00 	lds	r24, 0x0078
     444:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     448:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     44a:	8b 3a       	cpi	r24, 0xAB	; 171
     44c:	e2 e0       	ldi	r30, 0x02	; 2
     44e:	9e 07       	cpc	r25, r30
     450:	0c f0       	brlt	.+2      	; 0x454 <kilo_start+0x7e>
     452:	ed c0       	rjmp	.+474    	; 0x62e <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     454:	89 38       	cpi	r24, 0x89	; 137
     456:	f2 e0       	ldi	r31, 0x02	; 2
     458:	9f 07       	cpc	r25, r31
     45a:	0c f0       	brlt	.+2      	; 0x45e <kilo_start+0x88>
     45c:	ef c0       	rjmp	.+478    	; 0x63c <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     45e:	87 36       	cpi	r24, 0x67	; 103
     460:	92 40       	sbci	r25, 0x02	; 2
     462:	0c f4       	brge	.+2      	; 0x466 <kilo_start+0x90>
     464:	ca c0       	rjmp	.+404    	; 0x5fa <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     466:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     468:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     46a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     46c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     46e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     470:	3c 98       	cbi	0x07, 4	; 7
     472:	c0 cf       	rjmp	.-128    	; 0x3f4 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     474:	f8 94       	cli
                acomp_off();
     476:	80 b7       	in	r24, 0x30	; 48
     478:	87 7f       	andi	r24, 0xF7	; 247
     47a:	80 bf       	out	0x30, r24	; 48
                adc_off();
     47c:	80 91 7a 00 	lds	r24, 0x007A
     480:	8f 77       	andi	r24, 0x7F	; 127
     482:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     486:	14 b8       	out	0x04, r1	; 4
     488:	17 b8       	out	0x07, r1	; 7
     48a:	1a b8       	out	0x0a, r1	; 10
     48c:	15 b8       	out	0x05, r1	; 5
     48e:	18 b8       	out	0x08, r1	; 8
     490:	1b b8       	out	0x0b, r1	; 11
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	a8 95       	wdr
     498:	d0 92 60 00 	sts	0x0060, r13
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4a2:	80 91 60 00 	lds	r24, 0x0060
     4a6:	80 64       	ori	r24, 0x40	; 64
     4a8:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     4ac:	93 b7       	in	r25, 0x33	; 51
     4ae:	91 7f       	andi	r25, 0xF1	; 241
     4b0:	94 60       	ori	r25, 0x04	; 4
     4b2:	93 bf       	out	0x33, r25	; 51
                cli();
     4b4:	f8 94       	cli
                sleep_enable();
     4b6:	83 b7       	in	r24, 0x33	; 51
     4b8:	81 60       	ori	r24, 0x01	; 1
     4ba:	83 bf       	out	0x33, r24	; 51
                sei();
     4bc:	78 94       	sei
                sleep_cpu();
     4be:	88 95       	sleep
                sleep_disable();
     4c0:	83 b7       	in	r24, 0x33	; 51
     4c2:	8e 7f       	andi	r24, 0xFE	; 254
     4c4:	83 bf       	out	0x33, r24	; 51
                sei();
     4c6:	78 94       	sei
                rx_busy = 0;
     4c8:	10 92 4b 01 	sts	0x014B, r1
                ports_on();
     4cc:	52 9a       	sbi	0x0a, 2	; 10
     4ce:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     4d0:	80 91 7a 00 	lds	r24, 0x007A
     4d4:	80 68       	ori	r24, 0x80	; 128
     4d6:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4da:	87 e5       	ldi	r24, 0x57	; 87
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <kilo_start+0x108>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <kilo_start+0x10e>
     4e4:	00 00       	nop
                _delay_us(300);
                acomp_on();
     4e6:	80 b7       	in	r24, 0x30	; 48
     4e8:	88 61       	ori	r24, 0x18	; 24
     4ea:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4ec:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4ee:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4f0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4f2:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     4f4:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     4f6:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f8:	ef e1       	ldi	r30, 0x1F	; 31
     4fa:	fe e4       	ldi	r31, 0x4E	; 78
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <kilo_start+0x126>
     500:	00 c0       	rjmp	.+0      	; 0x502 <kilo_start+0x12c>
     502:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     504:	80 91 4b 01 	lds	r24, 0x014B
     508:	81 11       	cpse	r24, r1
     50a:	81 c0       	rjmp	.+258    	; 0x60e <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     50c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     50e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     510:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     512:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     514:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     516:	3c 98       	cbi	0x07, 4	; 7
     518:	6d cf       	rjmp	.-294    	; 0x3f4 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     51a:	80 91 0f 01 	lds	r24, 0x010F
     51e:	81 11       	cpse	r24, r1
     520:	41 c0       	rjmp	.+130    	; 0x5a4 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     522:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     526:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     52a:	10 92 10 01 	sts	0x0110, r1
     52e:	62 cf       	rjmp	.-316    	; 0x3f4 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     530:	48 99       	sbic	0x09, 0	; 9
     532:	ec cf       	rjmp	.-40     	; 0x50c <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     534:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     536:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     538:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     53a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     53c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     53e:	3c 98       	cbi	0x07, 4	; 7
     540:	8f ec       	ldi	r24, 0xCF	; 207
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <kilo_start+0x16e>
     548:	00 c0       	rjmp	.+0      	; 0x54a <kilo_start+0x174>
     54a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     54c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     54e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     550:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     552:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     554:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     556:	3c 98       	cbi	0x07, 4	; 7
     558:	9f ef       	ldi	r25, 0xFF	; 255
     55a:	e1 ee       	ldi	r30, 0xE1	; 225
     55c:	f4 e0       	ldi	r31, 0x04	; 4
     55e:	91 50       	subi	r25, 0x01	; 1
     560:	e0 40       	sbci	r30, 0x00	; 0
     562:	f0 40       	sbci	r31, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <kilo_start+0x188>
     566:	00 c0       	rjmp	.+0      	; 0x568 <kilo_start+0x192>
     568:	00 00       	nop
     56a:	44 cf       	rjmp	.-376    	; 0x3f4 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     56c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     56e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     570:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     572:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     574:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     576:	3c 98       	cbi	0x07, 4	; 7
     578:	ef ec       	ldi	r30, 0xCF	; 207
     57a:	f7 e0       	ldi	r31, 0x07	; 7
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <kilo_start+0x1a6>
     580:	00 c0       	rjmp	.+0      	; 0x582 <kilo_start+0x1ac>
     582:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     584:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     586:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     588:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     58a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     58c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     58e:	3c 98       	cbi	0x07, 4	; 7
     590:	ff ef       	ldi	r31, 0xFF	; 255
     592:	21 ee       	ldi	r18, 0xE1	; 225
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	f1 50       	subi	r31, 0x01	; 1
     598:	20 40       	sbci	r18, 0x00	; 0
     59a:	80 40       	sbci	r24, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <kilo_start+0x1c0>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <kilo_start+0x1ca>
     5a0:	00 00       	nop
     5a2:	28 cf       	rjmp	.-432    	; 0x3f4 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     5a4:	90 91 0f 01 	lds	r25, 0x010F
     5a8:	80 91 10 01 	lds	r24, 0x0110
     5ac:	98 17       	cp	r25, r24
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <kilo_start+0x1dc>
     5b0:	21 cf       	rjmp	.-446    	; 0x3f4 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     5b2:	80 91 0f 01 	lds	r24, 0x010F
     5b6:	80 93 10 01 	sts	0x0110, r24
                        if (cur_motion == MOVE_LEFT) {
     5ba:	80 91 0f 01 	lds	r24, 0x010F
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <kilo_start+0x1ee>
     5c2:	50 c0       	rjmp	.+160    	; 0x664 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5c4:	80 91 0f 01 	lds	r24, 0x010F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5cc:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	d9 f1       	breq	.+118    	; 0x64a <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d4:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5d8:	90 92 b4 00 	sts	0x00B4, r9
     5dc:	8f e2       	ldi	r24, 0x2F	; 47
     5de:	95 e7       	ldi	r25, 0x75	; 117
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <kilo_start+0x20a>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <kilo_start+0x210>
     5e6:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     5e8:	80 91 80 01 	lds	r24, 0x0180
     5ec:	90 91 7f 01 	lds	r25, 0x017F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f0:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     5f4:	80 93 b4 00 	sts	0x00B4, r24
     5f8:	fd ce       	rjmp	.-518    	; 0x3f4 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5fa:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5fc:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5fe:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     600:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     602:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     604:	3c 98       	cbi	0x07, 4	; 7
     606:	f6 ce       	rjmp	.-532    	; 0x3f4 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     608:	f3 01       	movw	r30, r6
     60a:	09 95       	icall
     60c:	01 cf       	rjmp	.-510    	; 0x410 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     60e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     610:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     612:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     614:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     616:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     618:	3c 98       	cbi	0x07, 4	; 7
     61a:	ff ef       	ldi	r31, 0xFF	; 255
     61c:	20 e7       	ldi	r18, 0x70	; 112
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	f1 50       	subi	r31, 0x01	; 1
     622:	20 40       	sbci	r18, 0x00	; 0
     624:	80 40       	sbci	r24, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <kilo_start+0x24a>
     628:	00 c0       	rjmp	.+0      	; 0x62a <kilo_start+0x254>
     62a:	00 00       	nop
     62c:	6f cf       	rjmp	.-290    	; 0x50c <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     62e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     630:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     632:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     634:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     636:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     638:	3c 98       	cbi	0x07, 4	; 7
     63a:	dc ce       	rjmp	.-584    	; 0x3f4 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     63c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     63e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     640:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     642:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     644:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     646:	3c 9a       	sbi	0x07, 4	; 7
     648:	d5 ce       	rjmp	.-598    	; 0x3f4 <kilo_start+0x1e>
     64a:	ef e2       	ldi	r30, 0x2F	; 47
     64c:	f5 e7       	ldi	r31, 0x75	; 117
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <kilo_start+0x278>
     652:	00 c0       	rjmp	.+0      	; 0x654 <kilo_start+0x27e>
     654:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     656:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     65a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     65e:	80 93 b4 00 	sts	0x00B4, r24
     662:	c8 ce       	rjmp	.-624    	; 0x3f4 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     664:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     668:	10 92 b4 00 	sts	0x00B4, r1
     66c:	8f e2       	ldi	r24, 0x2F	; 47
     66e:	95 e7       	ldi	r25, 0x75	; 117
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <kilo_start+0x29a>
     674:	00 c0       	rjmp	.+0      	; 0x676 <kilo_start+0x2a0>
     676:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     678:	80 91 81 01 	lds	r24, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     67c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     680:	10 92 b4 00 	sts	0x00B4, r1
     684:	b7 ce       	rjmp	.-658    	; 0x3f4 <kilo_start+0x1e>

00000686 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     686:	07 c0       	rjmp	.+14     	; 0x696 <delay+0x10>
     688:	ef ec       	ldi	r30, 0xCF	; 207
     68a:	f7 e0       	ldi	r31, 0x07	; 7
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <delay+0x6>
     690:	00 c0       	rjmp	.+0      	; 0x692 <delay+0xc>
     692:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     694:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	b9 f7       	brne	.-18     	; 0x688 <delay+0x2>
     69a:	08 95       	ret

0000069c <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     69c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6a0:	60 93 b4 00 	sts	0x00B4, r22
     6a4:	08 95       	ret

000006a6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6ac:	80 93 b4 00 	sts	0x00B4, r24
     6b0:	8f e0       	ldi	r24, 0x0F	; 15
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	ef ec       	ldi	r30, 0xCF	; 207
     6b6:	f7 e0       	ldi	r31, 0x07	; 7
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <spinup_motors+0x12>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <spinup_motors+0x18>
     6be:	00 00       	nop
     6c0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6c2:	c1 f7       	brne	.-16     	; 0x6b4 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     6c4:	08 95       	ret

000006c6 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     6c6:	80 91 4b 01 	lds	r24, 0x014B
     6ca:	81 11       	cpse	r24, r1
     6cc:	1e c0       	rjmp	.+60     	; 0x70a <get_ambientlight+0x44>
        cli();
     6ce:	f8 94       	cli
        adc_setup_conversion(7);
     6d0:	87 e0       	ldi	r24, 0x07	; 7
     6d2:	80 93 7c 00 	sts	0x007C, r24
     6d6:	83 e8       	ldi	r24, 0x83	; 131
     6d8:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6dc:	80 91 7a 00 	lds	r24, 0x007A
     6e0:	80 64       	ori	r24, 0x40	; 64
     6e2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6e6:	80 91 7a 00 	lds	r24, 0x007A
     6ea:	86 fd       	sbrc	r24, 6
     6ec:	fc cf       	rjmp	.-8      	; 0x6e6 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     6ee:	80 91 78 00 	lds	r24, 0x0078
     6f2:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6f6:	10 92 7c 00 	sts	0x007C, r1
     6fa:	23 ea       	ldi	r18, 0xA3	; 163
     6fc:	20 93 7a 00 	sts	0x007A, r18
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     706:	78 94       	sei
     708:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     70e:	08 95       	ret

00000710 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     710:	80 91 4b 01 	lds	r24, 0x014B
     714:	81 11       	cpse	r24, r1
     716:	1e c0       	rjmp	.+60     	; 0x754 <get_temperature+0x44>
        cli();
     718:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     71a:	88 ec       	ldi	r24, 0xC8	; 200
     71c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     720:	87 e8       	ldi	r24, 0x87	; 135
     722:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     726:	80 91 7a 00 	lds	r24, 0x007A
     72a:	80 64       	ori	r24, 0x40	; 64
     72c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     730:	80 91 7a 00 	lds	r24, 0x007A
     734:	86 fd       	sbrc	r24, 6
     736:	fc cf       	rjmp	.-8      	; 0x730 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     738:	80 91 78 00 	lds	r24, 0x0078
     73c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     740:	10 92 7c 00 	sts	0x007C, r1
     744:	23 ea       	ldi	r18, 0xA3	; 163
     746:	20 93 7a 00 	sts	0x007A, r18
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     750:	78 94       	sei
     752:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     758:	08 95       	ret

0000075a <rand_hard>:

uint8_t rand_hard() {
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	e0 e0       	ldi	r30, 0x00	; 0
     764:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     766:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     768:	03 ea       	ldi	r16, 0xA3	; 163
     76a:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     76c:	d6 e0       	ldi	r29, 0x06	; 6
     76e:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     770:	a1 e0       	ldi	r26, 0x01	; 1
     772:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     774:	60 e8       	ldi	r22, 0x80	; 128
     776:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     778:	f8 94       	cli
            adc_setup_conversion(6);
     77a:	d0 93 7c 00 	sts	0x007C, r29
     77e:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     782:	90 91 7a 00 	lds	r25, 0x007A
     786:	90 64       	ori	r25, 0x40	; 64
     788:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     78c:	90 91 7a 00 	lds	r25, 0x007A
     790:	96 fd       	sbrc	r25, 6
     792:	fc cf       	rjmp	.-8      	; 0x78c <rand_hard+0x32>
            a = ADCW&0x1;
     794:	20 91 78 00 	lds	r18, 0x0078
     798:	30 91 79 00 	lds	r19, 0x0079
     79c:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     79e:	90 91 7a 00 	lds	r25, 0x007A
     7a2:	90 64       	ori	r25, 0x40	; 64
     7a4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7a8:	90 91 7a 00 	lds	r25, 0x007A
     7ac:	96 fd       	sbrc	r25, 6
     7ae:	fc cf       	rjmp	.-8      	; 0x7a8 <rand_hard+0x4e>
            b = ADCW&0x1;
     7b0:	40 91 78 00 	lds	r20, 0x0078
     7b4:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     7b8:	10 92 7c 00 	sts	0x007C, r1
     7bc:	00 93 7a 00 	sts	0x007A, r16
     7c0:	10 93 7b 00 	sts	0x007B, r17
            sei();
     7c4:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     7c6:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     7c8:	24 13       	cpse	r18, r20
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <rand_hard+0x78>
     7cc:	61 50       	subi	r22, 0x01	; 1
     7ce:	71 09       	sbc	r23, r1
     7d0:	99 f6       	brne	.-90     	; 0x778 <rand_hard+0x1e>
        if (a)
     7d2:	22 23       	and	r18, r18
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <rand_hard+0x8a>
            num |= (1<<i);
     7d6:	9d 01       	movw	r18, r26
     7d8:	0e 2e       	mov	r0, r30
     7da:	01 c0       	rjmp	.+2      	; 0x7de <rand_hard+0x84>
     7dc:	22 0f       	add	r18, r18
     7de:	0a 94       	dec	r0
     7e0:	ea f7       	brpl	.-6      	; 0x7dc <rand_hard+0x82>
     7e2:	82 2b       	or	r24, r18
     7e4:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     7e6:	e8 30       	cpi	r30, 0x08	; 8
     7e8:	f1 05       	cpc	r31, r1
     7ea:	09 f0       	breq	.+2      	; 0x7ee <rand_hard+0x94>
     7ec:	c3 cf       	rjmp	.-122    	; 0x774 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret

000007f8 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     7f8:	80 91 00 01 	lds	r24, 0x0100
     7fc:	98 2f       	mov	r25, r24
     7fe:	99 0f       	add	r25, r25
     800:	99 0f       	add	r25, r25
     802:	99 0f       	add	r25, r25
     804:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     806:	90 91 0e 01 	lds	r25, 0x010E
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	29 0f       	add	r18, r25
     80e:	20 93 0e 01 	sts	0x010E, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     812:	28 2f       	mov	r18, r24
     814:	22 95       	swap	r18
     816:	26 95       	lsr	r18
     818:	27 70       	andi	r18, 0x07	; 7
     81a:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     81c:	96 95       	lsr	r25
     81e:	96 95       	lsr	r25
     820:	89 27       	eor	r24, r25
     822:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     826:	08 95       	ret

00000828 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     828:	80 93 00 01 	sts	0x0100, r24
     82c:	08 95       	ret

0000082e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     82e:	80 91 4b 01 	lds	r24, 0x014B
     832:	81 11       	cpse	r24, r1
     834:	16 c0       	rjmp	.+44     	; 0x862 <get_voltage+0x34>
        cli();                                    // disable interrupts
     836:	f8 94       	cli
        adc_setup_conversion(6);
     838:	86 e0       	ldi	r24, 0x06	; 6
     83a:	80 93 7c 00 	sts	0x007C, r24
     83e:	83 e8       	ldi	r24, 0x83	; 131
     840:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     844:	80 91 7a 00 	lds	r24, 0x007A
     848:	80 64       	ori	r24, 0x40	; 64
     84a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     84e:	80 91 7a 00 	lds	r24, 0x007A
     852:	86 fd       	sbrc	r24, 6
     854:	fc cf       	rjmp	.-8      	; 0x84e <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     856:	80 91 78 00 	lds	r24, 0x0078
     85a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     85e:	78 94       	sei
     860:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     866:	08 95       	ret

00000868 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     868:	2f 92       	push	r2
     86a:	3f 92       	push	r3
     86c:	4f 92       	push	r4
     86e:	5f 92       	push	r5
     870:	6f 92       	push	r6
     872:	7f 92       	push	r7
     874:	8f 92       	push	r8
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	00 d0       	rcall	.+0      	; 0x88e <estimate_distance+0x26>
     88e:	00 d0       	rcall	.+0      	; 0x890 <estimate_distance+0x28>
     890:	00 d0       	rcall	.+0      	; 0x892 <estimate_distance+0x2a>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     898:	dc 01       	movw	r26, r24
     89a:	12 96       	adiw	r26, 0x02	; 2
     89c:	0d 90       	ld	r0, X+
     89e:	bc 91       	ld	r27, X
     8a0:	a0 2d       	mov	r26, r0
     8a2:	be 83       	std	Y+6, r27	; 0x06
     8a4:	ad 83       	std	Y+5, r26	; 0x05
     8a6:	a4 38       	cpi	r26, 0x84	; 132
     8a8:	e3 e0       	ldi	r30, 0x03	; 3
     8aa:	be 07       	cpc	r27, r30
     8ac:	0c f0       	brlt	.+2      	; 0x8b0 <estimate_distance+0x48>
     8ae:	c9 c0       	rjmp	.+402    	; 0xa42 <__stack+0x143>
        if (dist->high_gain > kilo_irhigh[0]) {
     8b0:	80 91 25 01 	lds	r24, 0x0125
     8b4:	90 91 26 01 	lds	r25, 0x0126
     8b8:	8a 17       	cp	r24, r26
     8ba:	9b 07       	cpc	r25, r27
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <estimate_distance+0x58>
     8be:	37 c1       	rjmp	.+622    	; 0xb2e <__stack+0x22f>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8c0:	00 91 27 01 	lds	r16, 0x0127
     8c4:	10 91 28 01 	lds	r17, 0x0128
     8c8:	0a 17       	cp	r16, r26
     8ca:	1b 07       	cpc	r17, r27
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <estimate_distance+0x68>
     8ce:	2f c2       	rjmp	.+1118   	; 0xd2e <__stack+0x42f>
     8d0:	00 91 29 01 	lds	r16, 0x0129
     8d4:	10 91 2a 01 	lds	r17, 0x012A
     8d8:	0a 17       	cp	r16, r26
     8da:	1b 07       	cpc	r17, r27
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <estimate_distance+0x78>
     8de:	2f c2       	rjmp	.+1118   	; 0xd3e <__stack+0x43f>
     8e0:	00 91 2b 01 	lds	r16, 0x012B
     8e4:	10 91 2c 01 	lds	r17, 0x012C
     8e8:	0a 17       	cp	r16, r26
     8ea:	1b 07       	cpc	r17, r27
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <estimate_distance+0x88>
     8ee:	2f c2       	rjmp	.+1118   	; 0xd4e <__stack+0x44f>
     8f0:	00 91 2d 01 	lds	r16, 0x012D
     8f4:	10 91 2e 01 	lds	r17, 0x012E
     8f8:	0a 17       	cp	r16, r26
     8fa:	1b 07       	cpc	r17, r27
     8fc:	08 f4       	brcc	.+2      	; 0x900 <__stack+0x1>
     8fe:	2f c2       	rjmp	.+1118   	; 0xd5e <__stack+0x45f>
     900:	00 91 2f 01 	lds	r16, 0x012F
     904:	10 91 30 01 	lds	r17, 0x0130
     908:	0a 17       	cp	r16, r26
     90a:	1b 07       	cpc	r17, r27
     90c:	08 f4       	brcc	.+2      	; 0x910 <__stack+0x11>
     90e:	ef c1       	rjmp	.+990    	; 0xcee <__stack+0x3ef>
     910:	00 91 31 01 	lds	r16, 0x0131
     914:	10 91 32 01 	lds	r17, 0x0132
     918:	0a 17       	cp	r16, r26
     91a:	1b 07       	cpc	r17, r27
     91c:	08 f4       	brcc	.+2      	; 0x920 <__stack+0x21>
     91e:	27 c2       	rjmp	.+1102   	; 0xd6e <__stack+0x46f>
     920:	00 91 33 01 	lds	r16, 0x0133
     924:	10 91 34 01 	lds	r17, 0x0134
     928:	0a 17       	cp	r16, r26
     92a:	1b 07       	cpc	r17, r27
     92c:	08 f4       	brcc	.+2      	; 0x930 <__stack+0x31>
     92e:	27 c2       	rjmp	.+1102   	; 0xd7e <__stack+0x47f>
     930:	00 91 35 01 	lds	r16, 0x0135
     934:	10 91 36 01 	lds	r17, 0x0136
     938:	0a 17       	cp	r16, r26
     93a:	1b 07       	cpc	r17, r27
     93c:	08 f4       	brcc	.+2      	; 0x940 <__stack+0x41>
     93e:	27 c2       	rjmp	.+1102   	; 0xd8e <__stack+0x48f>
     940:	00 91 37 01 	lds	r16, 0x0137
     944:	10 91 38 01 	lds	r17, 0x0138
     948:	0a 17       	cp	r16, r26
     94a:	1b 07       	cpc	r17, r27
     94c:	08 f4       	brcc	.+2      	; 0x950 <__stack+0x51>
     94e:	27 c2       	rjmp	.+1102   	; 0xd9e <__stack+0x49f>
     950:	00 91 39 01 	lds	r16, 0x0139
     954:	10 91 3a 01 	lds	r17, 0x013A
     958:	0a 17       	cp	r16, r26
     95a:	1b 07       	cpc	r17, r27
     95c:	08 f4       	brcc	.+2      	; 0x960 <__stack+0x61>
     95e:	27 c2       	rjmp	.+1102   	; 0xdae <__stack+0x4af>
     960:	00 91 3b 01 	lds	r16, 0x013B
     964:	10 91 3c 01 	lds	r17, 0x013C
     968:	0a 17       	cp	r16, r26
     96a:	1b 07       	cpc	r17, r27
     96c:	08 f4       	brcc	.+2      	; 0x970 <__stack+0x71>
     96e:	23 c2       	rjmp	.+1094   	; 0xdb6 <__stack+0x4b7>
     970:	00 91 3d 01 	lds	r16, 0x013D
     974:	10 91 3e 01 	lds	r17, 0x013E
     978:	0a 17       	cp	r16, r26
     97a:	1b 07       	cpc	r17, r27
     97c:	08 f4       	brcc	.+2      	; 0x980 <__stack+0x81>
     97e:	23 c2       	rjmp	.+1094   	; 0xdc6 <__stack+0x4c7>
     980:	00 91 3f 01 	lds	r16, 0x013F
     984:	10 91 40 01 	lds	r17, 0x0140
     988:	0a 17       	cp	r16, r26
     98a:	1b 07       	cpc	r17, r27
     98c:	08 f4       	brcc	.+2      	; 0x990 <__stack+0x91>
     98e:	23 c2       	rjmp	.+1094   	; 0xdd6 <__stack+0x4d7>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	a0 ed       	ldi	r26, 0xD0	; 208
     996:	b0 e4       	ldi	r27, 0x40	; 64
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	ab 83       	std	Y+3, r26	; 0x03
     99e:	bc 83       	std	Y+4, r27	; 0x04
     9a0:	4c e0       	ldi	r20, 0x0C	; 12
     9a2:	e4 2e       	mov	r14, r20
     9a4:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9a6:	f7 01       	movw	r30, r14
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	eb 5d       	subi	r30, 0xDB	; 219
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	80 81       	ld	r24, Z
     9b2:	91 81       	ldd	r25, Z+1	; 0x01
     9b4:	b8 01       	movw	r22, r16
     9b6:	68 1b       	sub	r22, r24
     9b8:	79 0b       	sbc	r23, r25
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__addsf3>
     9ca:	6b 01       	movw	r12, r22
     9cc:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9ce:	ad 81       	ldd	r26, Y+5	; 0x05
     9d0:	be 81       	ldd	r27, Y+6	; 0x06
     9d2:	bd 01       	movw	r22, r26
     9d4:	bb 0f       	add	r27, r27
     9d6:	88 0b       	sbc	r24, r24
     9d8:	99 0b       	sbc	r25, r25
     9da:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     9de:	4b 01       	movw	r8, r22
     9e0:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     9e2:	b8 01       	movw	r22, r16
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     9ec:	2b 01       	movw	r4, r22
     9ee:	3c 01       	movw	r6, r24
     9f0:	29 81       	ldd	r18, Y+1	; 0x01
     9f2:	3a 81       	ldd	r19, Y+2	; 0x02
     9f4:	4b 81       	ldd	r20, Y+3	; 0x03
     9f6:	5c 81       	ldd	r21, Y+4	; 0x04
     9f8:	c7 01       	movw	r24, r14
     9fa:	b6 01       	movw	r22, r12
     9fc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
     a00:	9b 01       	movw	r18, r22
     a02:	ac 01       	movw	r20, r24
     a04:	c3 01       	movw	r24, r6
     a06:	b2 01       	movw	r22, r4
     a08:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__subsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a10:	c5 01       	movw	r24, r10
     a12:	b4 01       	movw	r22, r8
     a14:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__subsf3>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e2       	ldi	r20, 0x20	; 32
     a1e:	51 e4       	ldi	r21, 0x41	; 65
     a20:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
            b=((int)((int)b/(int)slope));
     a24:	0e 94 91 0b 	call	0x1722	; 0x1722 <__fixsfsi>
     a28:	8b 01       	movw	r16, r22
     a2a:	c7 01       	movw	r24, r14
     a2c:	b6 01       	movw	r22, r12
     a2e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__fixsfsi>
     a32:	ab 01       	movw	r20, r22
     a34:	bc 01       	movw	r22, r24
     a36:	c8 01       	movw	r24, r16
     a38:	ba 01       	movw	r22, r20
     a3a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__divmodhi4>
            dist_high=b;
     a3e:	16 2f       	mov	r17, r22
     a40:	77 c0       	rjmp	.+238    	; 0xb30 <__stack+0x231>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a42:	dc 01       	movw	r26, r24
     a44:	cd 90       	ld	r12, X+
     a46:	dc 90       	ld	r13, X
     a48:	80 91 4c 01 	lds	r24, 0x014C
     a4c:	90 91 4d 01 	lds	r25, 0x014D
     a50:	8c 15       	cp	r24, r12
     a52:	9d 05       	cpc	r25, r13
     a54:	08 f4       	brcc	.+2      	; 0xa58 <__stack+0x159>
     a56:	8c c0       	rjmp	.+280    	; 0xb70 <__stack+0x271>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a58:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a5a:	e0 90 4e 01 	lds	r14, 0x014E
     a5e:	f0 90 4f 01 	lds	r15, 0x014F
     a62:	ec 14       	cp	r14, r12
     a64:	fd 04       	cpc	r15, r13
     a66:	08 f4       	brcc	.+2      	; 0xa6a <__stack+0x16b>
     a68:	5e c1       	rjmp	.+700    	; 0xd26 <__stack+0x427>
     a6a:	e0 90 50 01 	lds	r14, 0x0150
     a6e:	f0 90 51 01 	lds	r15, 0x0151
     a72:	ec 14       	cp	r14, r12
     a74:	fd 04       	cpc	r15, r13
     a76:	08 f4       	brcc	.+2      	; 0xa7a <__stack+0x17b>
     a78:	5e c1       	rjmp	.+700    	; 0xd36 <__stack+0x437>
     a7a:	e0 90 52 01 	lds	r14, 0x0152
     a7e:	f0 90 53 01 	lds	r15, 0x0153
     a82:	ec 14       	cp	r14, r12
     a84:	fd 04       	cpc	r15, r13
     a86:	08 f4       	brcc	.+2      	; 0xa8a <__stack+0x18b>
     a88:	5e c1       	rjmp	.+700    	; 0xd46 <__stack+0x447>
     a8a:	e0 90 54 01 	lds	r14, 0x0154
     a8e:	f0 90 55 01 	lds	r15, 0x0155
     a92:	ec 14       	cp	r14, r12
     a94:	fd 04       	cpc	r15, r13
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__stack+0x19b>
     a98:	5e c1       	rjmp	.+700    	; 0xd56 <__stack+0x457>
     a9a:	e0 90 56 01 	lds	r14, 0x0156
     a9e:	f0 90 57 01 	lds	r15, 0x0157
     aa2:	ec 14       	cp	r14, r12
     aa4:	fd 04       	cpc	r15, r13
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	c3 c0       	rjmp	.+390    	; 0xc30 <__stack+0x331>
     aaa:	e0 90 58 01 	lds	r14, 0x0158
     aae:	f0 90 59 01 	lds	r15, 0x0159
     ab2:	ec 14       	cp	r14, r12
     ab4:	fd 04       	cpc	r15, r13
     ab6:	08 f4       	brcc	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	56 c1       	rjmp	.+684    	; 0xd66 <__stack+0x467>
     aba:	e0 90 5a 01 	lds	r14, 0x015A
     abe:	f0 90 5b 01 	lds	r15, 0x015B
     ac2:	ec 14       	cp	r14, r12
     ac4:	fd 04       	cpc	r15, r13
     ac6:	08 f4       	brcc	.+2      	; 0xaca <__stack+0x1cb>
     ac8:	56 c1       	rjmp	.+684    	; 0xd76 <__stack+0x477>
     aca:	e0 90 5c 01 	lds	r14, 0x015C
     ace:	f0 90 5d 01 	lds	r15, 0x015D
     ad2:	ec 14       	cp	r14, r12
     ad4:	fd 04       	cpc	r15, r13
     ad6:	08 f4       	brcc	.+2      	; 0xada <__stack+0x1db>
     ad8:	56 c1       	rjmp	.+684    	; 0xd86 <__stack+0x487>
     ada:	e0 90 5e 01 	lds	r14, 0x015E
     ade:	f0 90 5f 01 	lds	r15, 0x015F
     ae2:	ec 14       	cp	r14, r12
     ae4:	fd 04       	cpc	r15, r13
     ae6:	08 f4       	brcc	.+2      	; 0xaea <__stack+0x1eb>
     ae8:	56 c1       	rjmp	.+684    	; 0xd96 <__stack+0x497>
     aea:	e0 90 60 01 	lds	r14, 0x0160
     aee:	f0 90 61 01 	lds	r15, 0x0161
     af2:	ec 14       	cp	r14, r12
     af4:	fd 04       	cpc	r15, r13
     af6:	08 f4       	brcc	.+2      	; 0xafa <__stack+0x1fb>
     af8:	56 c1       	rjmp	.+684    	; 0xda6 <__stack+0x4a7>
     afa:	e0 90 62 01 	lds	r14, 0x0162
     afe:	f0 90 63 01 	lds	r15, 0x0163
     b02:	ec 14       	cp	r14, r12
     b04:	fd 04       	cpc	r15, r13
     b06:	08 f4       	brcc	.+2      	; 0xb0a <__stack+0x20b>
     b08:	5a c1       	rjmp	.+692    	; 0xdbe <__stack+0x4bf>
     b0a:	e0 90 64 01 	lds	r14, 0x0164
     b0e:	f0 90 65 01 	lds	r15, 0x0165
     b12:	ec 14       	cp	r14, r12
     b14:	fd 04       	cpc	r15, r13
     b16:	08 f4       	brcc	.+2      	; 0xb1a <__stack+0x21b>
     b18:	5a c1       	rjmp	.+692    	; 0xdce <__stack+0x4cf>
     b1a:	e0 90 66 01 	lds	r14, 0x0166
     b1e:	f0 90 67 01 	lds	r15, 0x0167
     b22:	ec 14       	cp	r14, r12
     b24:	fd 04       	cpc	r15, r13
     b26:	08 f4       	brcc	.+2      	; 0xb2a <__stack+0x22b>
     b28:	5a c1       	rjmp	.+692    	; 0xdde <__stack+0x4df>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b2a:	0a e5       	ldi	r16, 0x5A	; 90
     b2c:	31 c0       	rjmp	.+98     	; 0xb90 <__stack+0x291>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b2e:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b30:	ed 81       	ldd	r30, Y+5	; 0x05
     b32:	fe 81       	ldd	r31, Y+6	; 0x06
     b34:	ed 3b       	cpi	r30, 0xBD	; 189
     b36:	f2 40       	sbci	r31, 0x02	; 2
     b38:	fc f4       	brge	.+62     	; 0xb78 <__stack+0x279>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b3a:	81 e2       	ldi	r24, 0x21	; 33
     b3c:	81 0f       	add	r24, r17
    }
}
     b3e:	26 96       	adiw	r28, 0x06	; 6
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	9f 90       	pop	r9
     b60:	8f 90       	pop	r8
     b62:	7f 90       	pop	r7
     b64:	6f 90       	pop	r6
     b66:	5f 90       	pop	r5
     b68:	4f 90       	pop	r4
     b6a:	3f 90       	pop	r3
     b6c:	2f 90       	pop	r2
     b6e:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b70:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b72:	81 e2       	ldi	r24, 0x21	; 33
     b74:	80 0f       	add	r24, r16
     b76:	e3 cf       	rjmp	.-58     	; 0xb3e <__stack+0x23f>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b78:	d1 01       	movw	r26, r2
     b7a:	cd 90       	ld	r12, X+
     b7c:	dc 90       	ld	r13, X
     b7e:	80 91 4c 01 	lds	r24, 0x014C
     b82:	90 91 4d 01 	lds	r25, 0x014D
     b86:	8c 15       	cp	r24, r12
     b88:	9d 05       	cpc	r25, r13
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <__stack+0x28f>
     b8c:	66 cf       	rjmp	.-308    	; 0xa5a <__stack+0x15b>
            dist_low=0;
     b8e:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b90:	1f 3f       	cpi	r17, 0xFF	; 255
     b92:	79 f3       	breq	.-34     	; 0xb72 <__stack+0x273>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b94:	ed 81       	ldd	r30, Y+5	; 0x05
     b96:	fe 81       	ldd	r31, Y+6	; 0x06
     b98:	bf 01       	movw	r22, r30
     b9a:	ff 0f       	add	r31, r31
     b9c:	88 0b       	sbc	r24, r24
     b9e:	99 0b       	sbc	r25, r25
     ba0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
     ba8:	61 2f       	mov	r22, r17
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     bb4:	4b 01       	movw	r8, r22
     bb6:	5c 01       	movw	r10, r24
     bb8:	a7 01       	movw	r20, r14
     bba:	96 01       	movw	r18, r12
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	81 e6       	ldi	r24, 0x61	; 97
     bc2:	94 e4       	ldi	r25, 0x44	; 68
     bc4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__subsf3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	c5 01       	movw	r24, r10
     bce:	b4 01       	movw	r22, r8
     bd0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
     bd4:	4b 01       	movw	r8, r22
     bd6:	5c 01       	movw	r10, r24
     bd8:	60 2f       	mov	r22, r16
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     be4:	2b 01       	movw	r4, r22
     be6:	3c 01       	movw	r6, r24
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	4f e2       	ldi	r20, 0x2F	; 47
     bee:	54 e4       	ldi	r21, 0x44	; 68
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__subsf3>
     bf8:	9b 01       	movw	r18, r22
     bfa:	ac 01       	movw	r20, r24
     bfc:	c3 01       	movw	r24, r6
     bfe:	b2 01       	movw	r22, r4
     c00:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	c5 01       	movw	r24, r10
     c0a:	b4 01       	movw	r22, r8
     c0c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__addsf3>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	48 e4       	ldi	r20, 0x48	; 72
     c16:	53 e4       	ldi	r21, 0x43	; 67
     c18:	0e 94 1f 0b 	call	0x163e	; 0x163e <__divsf3>
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	44 e0       	ldi	r20, 0x04	; 4
     c22:	52 e4       	ldi	r21, 0x42	; 66
     c24:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__addsf3>
     c28:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixunssfsi>
     c2c:	86 2f       	mov	r24, r22
     c2e:	87 cf       	rjmp	.-242    	; 0xb3e <__stack+0x23f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c30:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c32:	85 e0       	ldi	r24, 0x05	; 5
     c34:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	fc 01       	movw	r30, r24
     c3c:	e6 5b       	subi	r30, 0xB6	; 182
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	b7 01       	movw	r22, r14
     c46:	68 1b       	sub	r22, r24
     c48:	79 0b       	sbc	r23, r25
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     c52:	9b 01       	movw	r18, r22
     c54:	ac 01       	movw	r20, r24
     c56:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__addsf3>
     c5a:	4b 01       	movw	r8, r22
     c5c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c5e:	b6 01       	movw	r22, r12
     c60:	dd 0c       	add	r13, r13
     c62:	88 0b       	sbc	r24, r24
     c64:	99 0b       	sbc	r25, r25
     c66:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatsisf>
     c6a:	2b 01       	movw	r4, r22
     c6c:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c6e:	b7 01       	movw	r22, r14
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     c78:	6b 01       	movw	r12, r22
     c7a:	7c 01       	movw	r14, r24
     c7c:	60 2f       	mov	r22, r16
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	5f e3       	ldi	r21, 0x3F	; 63
     c90:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	a9 01       	movw	r20, r18
     c9a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__addsf3>
     c9e:	a5 01       	movw	r20, r10
     ca0:	94 01       	movw	r18, r8
     ca2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	c7 01       	movw	r24, r14
     cac:	b6 01       	movw	r22, r12
     cae:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__subsf3>
     cb2:	9b 01       	movw	r18, r22
     cb4:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cb6:	c3 01       	movw	r24, r6
     cb8:	b2 01       	movw	r22, r4
     cba:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__subsf3>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e2       	ldi	r20, 0x20	; 32
     cc4:	51 e4       	ldi	r21, 0x41	; 65
     cc6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
                b=((int)((int)b/(int)slope));
     cca:	0e 94 91 0b 	call	0x1722	; 0x1722 <__fixsfsi>
     cce:	7b 01       	movw	r14, r22
     cd0:	c5 01       	movw	r24, r10
     cd2:	b4 01       	movw	r22, r8
     cd4:	0e 94 91 0b 	call	0x1722	; 0x1722 <__fixsfsi>
     cd8:	ab 01       	movw	r20, r22
     cda:	bc 01       	movw	r22, r24
     cdc:	c7 01       	movw	r24, r14
     cde:	ba 01       	movw	r22, r20
     ce0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__divmodhi4>
                dist_low=b;
     ce4:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     ce6:	6f 3f       	cpi	r22, 0xFF	; 255
     ce8:	09 f0       	breq	.+2      	; 0xcec <__stack+0x3ed>
     cea:	52 cf       	rjmp	.-348    	; 0xb90 <__stack+0x291>
     cec:	26 cf       	rjmp	.-436    	; 0xb3a <__stack+0x23b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cee:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     cf0:	85 e0       	ldi	r24, 0x05	; 5
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	7c 01       	movw	r14, r24
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	ef 1a       	sub	r14, r31
     cfa:	f1 08       	sbc	r15, r1
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 c7 0b 	call	0x178e	; 0x178e <__floatunsisf>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__mulsf3>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__addsf3>
     d1c:	69 83       	std	Y+1, r22	; 0x01
     d1e:	7a 83       	std	Y+2, r23	; 0x02
     d20:	8b 83       	std	Y+3, r24	; 0x03
     d22:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d24:	40 ce       	rjmp	.-896    	; 0x9a6 <__stack+0xa7>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d26:	01 e0       	ldi	r16, 0x01	; 1
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	84 cf       	rjmp	.-248    	; 0xc36 <__stack+0x337>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	df cf       	rjmp	.-66     	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d36:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	7c cf       	rjmp	.-264    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d3e:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	d7 cf       	rjmp	.-82     	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d46:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	74 cf       	rjmp	.-280    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d4e:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	cf cf       	rjmp	.-98     	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d56:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	6c cf       	rjmp	.-296    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d5e:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d60:	84 e0       	ldi	r24, 0x04	; 4
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	c7 cf       	rjmp	.-114    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d66:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	64 cf       	rjmp	.-312    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d6e:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d70:	86 e0       	ldi	r24, 0x06	; 6
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	bf cf       	rjmp	.-130    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d76:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	5c cf       	rjmp	.-328    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d7e:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d80:	87 e0       	ldi	r24, 0x07	; 7
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	b7 cf       	rjmp	.-146    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d86:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d88:	88 e0       	ldi	r24, 0x08	; 8
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	54 cf       	rjmp	.-344    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d8e:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d90:	88 e0       	ldi	r24, 0x08	; 8
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	af cf       	rjmp	.-162    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d96:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d98:	89 e0       	ldi	r24, 0x09	; 9
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	4c cf       	rjmp	.-360    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d9e:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     da0:	89 e0       	ldi	r24, 0x09	; 9
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a7 cf       	rjmp	.-178    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     da6:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     da8:	8a e0       	ldi	r24, 0x0A	; 10
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	44 cf       	rjmp	.-376    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dae:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     db0:	8a e0       	ldi	r24, 0x0A	; 10
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9f cf       	rjmp	.-194    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db6:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     db8:	8b e0       	ldi	r24, 0x0B	; 11
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	9b cf       	rjmp	.-202    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dbe:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     dc0:	8b e0       	ldi	r24, 0x0B	; 11
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	38 cf       	rjmp	.-400    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dc6:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     dc8:	8c e0       	ldi	r24, 0x0C	; 12
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	93 cf       	rjmp	.-218    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dce:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     dd0:	8c e0       	ldi	r24, 0x0C	; 12
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	30 cf       	rjmp	.-416    	; 0xc36 <__stack+0x337>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dd6:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     dd8:	8d e0       	ldi	r24, 0x0D	; 13
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	8b cf       	rjmp	.-234    	; 0xcf4 <__stack+0x3f5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dde:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     de0:	8d e0       	ldi	r24, 0x0D	; 13
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	28 cf       	rjmp	.-432    	; 0xc36 <__stack+0x337>

00000de6 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
    tx_clock += tx_increment;
     e08:	20 91 6b 01 	lds	r18, 0x016B
     e0c:	30 91 6c 01 	lds	r19, 0x016C
     e10:	80 91 69 01 	lds	r24, 0x0169
     e14:	90 91 6a 01 	lds	r25, 0x016A
     e18:	82 0f       	add	r24, r18
     e1a:	93 1f       	adc	r25, r19
     e1c:	90 93 6c 01 	sts	0x016C, r25
     e20:	80 93 6b 01 	sts	0x016B, r24
    tx_increment = 0xFF;
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	90 93 6a 01 	sts	0x016A, r25
     e2c:	80 93 69 01 	sts	0x0169, r24
    OCR0A = tx_increment;
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e34:	80 91 47 01 	lds	r24, 0x0147
     e38:	90 91 48 01 	lds	r25, 0x0148
     e3c:	a0 91 49 01 	lds	r26, 0x0149
     e40:	b0 91 4a 01 	lds	r27, 0x014A
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	a1 1d       	adc	r26, r1
     e48:	b1 1d       	adc	r27, r1
     e4a:	80 93 47 01 	sts	0x0147, r24
     e4e:	90 93 48 01 	sts	0x0148, r25
     e52:	a0 93 49 01 	sts	0x0149, r26
     e56:	b0 93 4a 01 	sts	0x014A, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e5a:	80 91 4b 01 	lds	r24, 0x014B
     e5e:	81 11       	cpse	r24, r1
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <__vector_14+0x9a>
     e62:	80 91 7a 01 	lds	r24, 0x017A
     e66:	90 91 7b 01 	lds	r25, 0x017B
     e6a:	20 91 6b 01 	lds	r18, 0x016B
     e6e:	30 91 6c 01 	lds	r19, 0x016C
     e72:	82 17       	cp	r24, r18
     e74:	93 07       	cpc	r25, r19
     e76:	20 f4       	brcc	.+8      	; 0xe80 <__vector_14+0x9a>
     e78:	80 91 11 01 	lds	r24, 0x0111
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	89 f0       	breq	.+34     	; 0xea2 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ea2:	e0 91 03 01 	lds	r30, 0x0103
     ea6:	f0 91 04 01 	lds	r31, 0x0104
     eaa:	09 95       	icall
        if (msg) {
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	41 f3       	breq	.-48     	; 0xe80 <__vector_14+0x9a>
            if (message_send(msg)) {
     eb0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <message_send>
     eb4:	81 11       	cpse	r24, r1
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     eb8:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <rand>
     ebc:	99 27       	eor	r25, r25
     ebe:	90 93 6a 01 	sts	0x016A, r25
     ec2:	80 93 69 01 	sts	0x0169, r24
                OCR0A = tx_increment;
     ec6:	87 bd       	out	0x27, r24	; 39
     ec8:	db cf       	rjmp	.-74     	; 0xe80 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     eca:	e0 91 01 01 	lds	r30, 0x0101
     ece:	f0 91 02 01 	lds	r31, 0x0102
     ed2:	09 95       	icall
                tx_clock = 0;
     ed4:	10 92 6c 01 	sts	0x016C, r1
     ed8:	10 92 6b 01 	sts	0x016B, r1
     edc:	d1 cf       	rjmp	.-94     	; 0xe80 <__vector_14+0x9a>

00000ede <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     ede:	80 ff       	sbrs	r24, 0
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <set_color+0x26>
        DDRD |= (1<<5);
     ee2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     ee4:	81 ff       	sbrs	r24, 1
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <set_color+0x2c>
        DDRD |= (1<<4);
     ee8:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     eea:	82 ff       	sbrs	r24, 2
     eec:	11 c0       	rjmp	.+34     	; 0xf10 <set_color+0x32>
        DDRC |= (1<<3);
     eee:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     ef0:	83 ff       	sbrs	r24, 3
     ef2:	11 c0       	rjmp	.+34     	; 0xf16 <set_color+0x38>
        DDRC |= (1<<2);
     ef4:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     ef6:	84 ff       	sbrs	r24, 4
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <set_color+0x3e>
        DDRC |= (1<<5);
     efa:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     efc:	85 fd       	sbrc	r24, 5
     efe:	11 c0       	rjmp	.+34     	; 0xf22 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f00:	3c 98       	cbi	0x07, 4	; 7
     f02:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f04:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f06:	81 fd       	sbrc	r24, 1
     f08:	ef cf       	rjmp	.-34     	; 0xee8 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f0a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f0c:	82 fd       	sbrc	r24, 2
     f0e:	ef cf       	rjmp	.-34     	; 0xeee <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f10:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f12:	83 fd       	sbrc	r24, 3
     f14:	ef cf       	rjmp	.-34     	; 0xef4 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f16:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f18:	84 fd       	sbrc	r24, 4
     f1a:	ef cf       	rjmp	.-34     	; 0xefa <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f1c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f1e:	85 ff       	sbrs	r24, 5
     f20:	ef cf       	rjmp	.-34     	; 0xf00 <set_color+0x22>
        DDRC |= (1<<4);
     f22:	3c 9a       	sbi	0x07, 4	; 7
     f24:	08 95       	ret

00000f26 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
    rx_timer_off();
     f34:	10 92 81 00 	sts	0x0081, r1
     f38:	10 92 85 00 	sts	0x0085, r1
     f3c:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 24 01 	sts	0x0124, r24
    rx_leadingbyte = 1;
     f46:	80 93 68 01 	sts	0x0168, r24
    rx_busy = 0;
     f4a:	10 92 4b 01 	sts	0x014B, r1
    adc_trigger_high_gain();
     f4e:	10 92 7c 00 	sts	0x007C, r1
     f52:	93 ea       	ldi	r25, 0xA3	; 163
     f54:	90 93 7a 00 	sts	0x007A, r25
     f58:	80 93 7b 00 	sts	0x007B, r24
}
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f90:	20 91 84 00 	lds	r18, 0x0084
     f94:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	40 93 4b 01 	sts	0x014B, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f9e:	80 91 24 01 	lds	r24, 0x0124
     fa2:	88 23       	and	r24, r24
     fa4:	a9 f1       	breq	.+106    	; 0x1010 <__vector_23+0xa6>
        rx_timer_on();
     fa6:	10 92 85 00 	sts	0x0085, r1
     faa:	10 92 84 00 	sts	0x0084, r1
     fae:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     fb2:	10 92 7c 01 	sts	0x017C, r1
        rx_leadingbit = 0;
     fb6:	10 92 24 01 	sts	0x0124, r1
        if (rx_leadingbyte) {
     fba:	80 91 68 01 	lds	r24, 0x0168
     fbe:	88 23       	and	r24, r24
     fc0:	a1 f0       	breq	.+40     	; 0xfea <__vector_23+0x80>
            adc_finish_conversion();
     fc2:	80 91 7a 00 	lds	r24, 0x007A
     fc6:	86 fd       	sbrc	r24, 6
     fc8:	fc cf       	rjmp	.-8      	; 0xfc2 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     fca:	80 91 78 00 	lds	r24, 0x0078
     fce:	90 91 79 00 	lds	r25, 0x0079
     fd2:	90 93 46 01 	sts	0x0146, r25
     fd6:	80 93 45 01 	sts	0x0145, r24
            adc_trigger_low_gain();
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 7c 00 	sts	0x007C, r24
     fe0:	93 ea       	ldi	r25, 0xA3	; 163
     fe2:	90 93 7a 00 	sts	0x007A, r25
     fe6:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	7f 91       	pop	r23
     ffc:	6f 91       	pop	r22
     ffe:	5f 91       	pop	r21
    1000:	4f 91       	pop	r20
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1010:	c9 01       	movw	r24, r18
    1012:	87 58       	subi	r24, 0x87	; 135
    1014:	91 09       	sbc	r25, r1
    1016:	84 37       	cpi	r24, 0x74	; 116
    1018:	99 40       	sbci	r25, 0x09	; 9
    101a:	08 f0       	brcs	.+2      	; 0x101e <__vector_23+0xb4>
    101c:	52 c0       	rjmp	.+164    	; 0x10c2 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    101e:	26 58       	subi	r18, 0x86	; 134
    1020:	31 09       	sbc	r19, r1
    1022:	a4 ef       	ldi	r26, 0xF4	; 244
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	0e 94 8f 0a 	call	0x151e	; 0x151e <__umulhisi3>
    102a:	aa 27       	eor	r26, r26
    102c:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	91 05       	cpc	r25, r1
    1032:	a1 05       	cpc	r26, r1
    1034:	b1 05       	cpc	r27, r1
    1036:	08 f4       	brcc	.+2      	; 0x103a <__vector_23+0xd0>
    1038:	7b c0       	rjmp	.+246    	; 0x1130 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    103a:	40 93 24 01 	sts	0x0124, r20
                if (rx_leadingbyte) {
    103e:	80 91 68 01 	lds	r24, 0x0168
    1042:	81 11       	cpse	r24, r1
    1044:	52 c0       	rjmp	.+164    	; 0x10ea <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1046:	80 91 42 01 	lds	r24, 0x0142
    104a:	e8 2f       	mov	r30, r24
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	e2 59       	subi	r30, 0x92	; 146
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	90 91 7c 01 	lds	r25, 0x017C
    1056:	90 83       	st	Z, r25
                    rx_byteindex++;
    1058:	8f 5f       	subi	r24, 0xFF	; 255
    105a:	80 93 42 01 	sts	0x0142, r24
                    if (rx_byteindex == sizeof(message_t)) {
    105e:	8c 30       	cpi	r24, 0x0C	; 12
    1060:	21 f6       	brne	.-120    	; 0xfea <__vector_23+0x80>
                        rx_timer_off();
    1062:	10 92 81 00 	sts	0x0081, r1
    1066:	10 92 85 00 	sts	0x0085, r1
    106a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    106e:	40 93 68 01 	sts	0x0168, r20
                        rx_busy = 0;
    1072:	10 92 4b 01 	sts	0x014B, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1076:	c0 91 78 01 	lds	r28, 0x0178
    107a:	d0 91 79 01 	lds	r29, 0x0179
    107e:	8e e6       	ldi	r24, 0x6E	; 110
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	0e 94 bf 09 	call	0x137e	; 0x137e <message_crc>
    1086:	c8 17       	cp	r28, r24
    1088:	d9 07       	cpc	r29, r25
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_23+0x124>
    108c:	ae cf       	rjmp	.-164    	; 0xfea <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    108e:	80 91 77 01 	lds	r24, 0x0177
    1092:	87 ff       	sbrs	r24, 7
    1094:	61 c0       	rjmp	.+194    	; 0x1158 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1096:	98 e7       	ldi	r25, 0x78	; 120
    1098:	98 0f       	add	r25, r24
    109a:	93 30       	cpi	r25, 0x03	; 3
    109c:	30 f0       	brcs	.+12     	; 0x10aa <__vector_23+0x140>
        motors_off();
    109e:	53 98       	cbi	0x0a, 3	; 10
    10a0:	23 98       	cbi	0x04, 3	; 4
    10a2:	10 92 b4 00 	sts	0x00B4, r1
    10a6:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	fc 01       	movw	r30, r24
    10ae:	e0 58       	subi	r30, 0x80	; 128
    10b0:	f1 09       	sbc	r31, r1
    10b2:	eb 30       	cpi	r30, 0x0B	; 11
    10b4:	f1 05       	cpc	r31, r1
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__vector_23+0x150>
    10b8:	98 cf       	rjmp	.-208    	; 0xfea <__vector_23+0x80>
    10ba:	e5 5c       	subi	r30, 0xC5	; 197
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    10c2:	10 92 81 00 	sts	0x0081, r1
    10c6:	10 92 85 00 	sts	0x0085, r1
    10ca:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    10ce:	40 93 24 01 	sts	0x0124, r20
            rx_leadingbyte = 1;
    10d2:	40 93 68 01 	sts	0x0168, r20
            rx_busy = 0;
    10d6:	10 92 4b 01 	sts	0x014B, r1
            adc_trigger_high_gain();
    10da:	10 92 7c 00 	sts	0x007C, r1
    10de:	83 ea       	ldi	r24, 0xA3	; 163
    10e0:	80 93 7a 00 	sts	0x007A, r24
    10e4:	40 93 7b 00 	sts	0x007B, r20
    10e8:	80 cf       	rjmp	.-256    	; 0xfea <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    10ea:	80 91 7a 00 	lds	r24, 0x007A
    10ee:	86 fd       	sbrc	r24, 6
    10f0:	fc cf       	rjmp	.-8      	; 0x10ea <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    10f2:	80 91 78 00 	lds	r24, 0x0078
    10f6:	90 91 79 00 	lds	r25, 0x0079
    10fa:	90 93 44 01 	sts	0x0144, r25
    10fe:	80 93 43 01 	sts	0x0143, r24
                    adc_trigger_high_gain();
    1102:	10 92 7c 00 	sts	0x007C, r1
    1106:	83 ea       	ldi	r24, 0xA3	; 163
    1108:	80 93 7a 00 	sts	0x007A, r24
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1112:	90 91 7c 01 	lds	r25, 0x017C
    1116:	99 23       	and	r25, r25
    1118:	d1 f0       	breq	.+52     	; 0x114e <__vector_23+0x1e4>
                        rx_timer_off();
    111a:	10 92 81 00 	sts	0x0081, r1
    111e:	10 92 85 00 	sts	0x0085, r1
    1122:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1126:	80 93 68 01 	sts	0x0168, r24
                        rx_busy = 0;
    112a:	10 92 4b 01 	sts	0x014B, r1
    112e:	5d cf       	rjmp	.-326    	; 0xfea <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	f9 01       	movw	r30, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <__vector_23+0x1d2>
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	8a 95       	dec	r24
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <__vector_23+0x1ce>
    1140:	cf 01       	movw	r24, r30
    1142:	90 91 7c 01 	lds	r25, 0x017C
    1146:	89 2b       	or	r24, r25
    1148:	80 93 7c 01 	sts	0x017C, r24
    114c:	4e cf       	rjmp	.-356    	; 0xfea <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    114e:	10 92 68 01 	sts	0x0168, r1
                        rx_byteindex = 0;
    1152:	10 92 42 01 	sts	0x0142, r1
    1156:	49 cf       	rjmp	.-366    	; 0xfea <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1158:	e0 91 05 01 	lds	r30, 0x0105
    115c:	f0 91 06 01 	lds	r31, 0x0106
    1160:	63 e4       	ldi	r22, 0x43	; 67
    1162:	71 e0       	ldi	r23, 0x01	; 1
    1164:	8e e6       	ldi	r24, 0x6E	; 110
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	09 95       	icall
    116a:	3f cf       	rjmp	.-386    	; 0xfea <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    116c:	80 91 6e 01 	lds	r24, 0x016E
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	09 f4       	brne	.+2      	; 0x1176 <__vector_23+0x20c>
    1174:	dd c0       	rjmp	.+442    	; 0x1330 <__vector_23+0x3c6>
    1176:	08 f4       	brcc	.+2      	; 0x117a <__vector_23+0x210>
    1178:	ba c0       	rjmp	.+372    	; 0x12ee <__vector_23+0x384>
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	09 f4       	brne	.+2      	; 0x1180 <__vector_23+0x216>
    117e:	c6 c0       	rjmp	.+396    	; 0x130c <__vector_23+0x3a2>
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	09 f0       	breq	.+2      	; 0x1186 <__vector_23+0x21c>
    1184:	b1 c0       	rjmp	.+354    	; 0x12e8 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1186:	80 91 0f 01 	lds	r24, 0x010F
    118a:	90 91 74 01 	lds	r25, 0x0174
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	09 f4       	brne	.+2      	; 0x1194 <__vector_23+0x22a>
    1192:	e3 c0       	rjmp	.+454    	; 0x135a <__vector_23+0x3f0>
    1194:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    1198:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_STRAIGHT;
    119c:	23 e0       	ldi	r18, 0x03	; 3
    119e:	20 93 0f 01 	sts	0x010F, r18
                        kilo_straight_left = calibmsg->straight_left;
    11a2:	80 93 7f 01 	sts	0x017F, r24
                        kilo_straight_right = calibmsg->straight_right;
    11a6:	90 93 80 01 	sts	0x0180, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11aa:	80 91 11 01 	lds	r24, 0x0111
    11ae:	86 30       	cpi	r24, 0x06	; 6
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <__vector_23+0x24a>
    11b2:	1b cf       	rjmp	.-458    	; 0xfea <__vector_23+0x80>
                motors_on();
    11b4:	53 9a       	sbi	0x0a, 3	; 10
    11b6:	23 9a       	sbi	0x04, 3	; 4
    11b8:	10 92 b4 00 	sts	0x00B4, r1
    11bc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	80 93 11 01 	sts	0x0111, r24
    11c6:	11 cf       	rjmp	.-478    	; 0xfea <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    11c8:	80 91 11 01 	lds	r24, 0x0111
    11cc:	86 30       	cpi	r24, 0x06	; 6
    11ce:	99 f0       	breq	.+38     	; 0x11f6 <__vector_23+0x28c>
                motors_on();
    11d0:	53 9a       	sbi	0x0a, 3	; 10
    11d2:	23 9a       	sbi	0x04, 3	; 4
    11d4:	10 92 b4 00 	sts	0x00B4, r1
    11d8:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    11dc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    11de:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    11e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11e4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11e6:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    11e8:	10 92 0f 01 	sts	0x010F, r1
    11ec:	10 92 10 01 	sts	0x0110, r1
                kilo_state = MOVING;
    11f0:	86 e0       	ldi	r24, 0x06	; 6
    11f2:	80 93 11 01 	sts	0x0111, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9c 01       	movw	r18, r24
    11fc:	00 90 6e 01 	lds	r0, 0x016E
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <__vector_23+0x29c>
    1202:	22 0f       	add	r18, r18
    1204:	33 1f       	adc	r19, r19
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <__vector_23+0x298>
    120a:	80 91 7d 01 	lds	r24, 0x017D
    120e:	90 91 7e 01 	lds	r25, 0x017E
    1212:	82 23       	and	r24, r18
    1214:	93 23       	and	r25, r19
    1216:	89 2b       	or	r24, r25
    1218:	09 f0       	breq	.+2      	; 0x121c <__vector_23+0x2b2>
    121a:	86 c0       	rjmp	.+268    	; 0x1328 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    121c:	10 92 0f 01 	sts	0x010F, r1
    1220:	e4 ce       	rjmp	.-568    	; 0xfea <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 11 01 	sts	0x0111, r24
    1228:	e0 ce       	rjmp	.-576    	; 0xfea <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    122a:	e0 e0       	ldi	r30, 0x00	; 0
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1230:	80 91 6e 00 	lds	r24, 0x006E
    1234:	8d 7f       	andi	r24, 0xFD	; 253
    1236:	80 93 6e 00 	sts	0x006E, r24
    123a:	16 bc       	out	0x26, r1	; 38
            bootload();
    123c:	e0 e0       	ldi	r30, 0x00	; 0
    123e:	f0 e7       	ldi	r31, 0x70	; 112
    1240:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1242:	10 92 11 01 	sts	0x0111, r1
    1246:	d1 ce       	rjmp	.-606    	; 0xfea <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	80 93 11 01 	sts	0x0111, r24
    124e:	cd ce       	rjmp	.-614    	; 0xfea <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	80 93 11 01 	sts	0x0111, r24
    1256:	c9 ce       	rjmp	.-622    	; 0xfea <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1258:	80 91 11 01 	lds	r24, 0x0111
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	09 f4       	brne	.+2      	; 0x1262 <__vector_23+0x2f8>
    1260:	c4 ce       	rjmp	.-632    	; 0xfea <__vector_23+0x80>
    1262:	80 91 11 01 	lds	r24, 0x0111
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	09 f4       	brne	.+2      	; 0x126c <__vector_23+0x302>
    126a:	bf ce       	rjmp	.-642    	; 0xfea <__vector_23+0x80>
                motors_on();
    126c:	53 9a       	sbi	0x0a, 3	; 10
    126e:	23 9a       	sbi	0x04, 3	; 4
    1270:	10 92 b4 00 	sts	0x00B4, r1
    1274:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	80 93 11 01 	sts	0x0111, r24
    127e:	b5 ce       	rjmp	.-662    	; 0xfea <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1280:	80 91 11 01 	lds	r24, 0x0111
    1284:	86 30       	cpi	r24, 0x06	; 6
    1286:	09 f0       	breq	.+2      	; 0x128a <__vector_23+0x320>
    1288:	b0 ce       	rjmp	.-672    	; 0xfea <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    128a:	60 91 7d 01 	lds	r22, 0x017D
    128e:	80 eb       	ldi	r24, 0xB0	; 176
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1296:	60 91 7e 01 	lds	r22, 0x017E
    129a:	81 eb       	ldi	r24, 0xB1	; 177
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12a2:	60 91 81 01 	lds	r22, 0x0181
    12a6:	85 e0       	ldi	r24, 0x05	; 5
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    12ae:	60 91 6d 01 	lds	r22, 0x016D
    12b2:	89 e0       	ldi	r24, 0x09	; 9
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    12ba:	60 91 7f 01 	lds	r22, 0x017F
    12be:	8c e0       	ldi	r24, 0x0C	; 12
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    12c6:	60 91 80 01 	lds	r22, 0x0180
    12ca:	84 e1       	ldi	r24, 0x14	; 20
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <eeprom_write_byte>
                        motors_off();
    12d2:	53 98       	cbi	0x0a, 3	; 10
    12d4:	23 98       	cbi	0x04, 3	; 4
    12d6:	10 92 b4 00 	sts	0x00B4, r1
    12da:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 11 01 	sts	0x0111, r24
    12e4:	80 91 6e 01 	lds	r24, 0x016E
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12e8:	81 11       	cpse	r24, r1
    12ea:	5f cf       	rjmp	.-322    	; 0x11aa <__vector_23+0x240>
    12ec:	7e ce       	rjmp	.-772    	; 0xfea <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12ee:	88 23       	and	r24, r24
    12f0:	39 f2       	breq	.-114    	; 0x1280 <__vector_23+0x316>
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    12f6:	80 91 6f 01 	lds	r24, 0x016F
    12fa:	90 91 70 01 	lds	r25, 0x0170
    12fe:	90 93 7e 01 	sts	0x017E, r25
    1302:	80 93 7d 01 	sts	0x017D, r24
                    cur_motion = MOVE_STOP;
    1306:	10 92 0f 01 	sts	0x010F, r1
    130a:	4f cf       	rjmp	.-354    	; 0x11aa <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    130c:	80 91 0f 01 	lds	r24, 0x010F
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	71 f1       	breq	.+92     	; 0x1370 <__vector_23+0x406>
    1314:	80 91 72 01 	lds	r24, 0x0172
                        prev_motion = MOVE_STOP;
    1318:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_RIGHT;
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_right = calibmsg->turn_right;
    1322:	80 93 6d 01 	sts	0x016D, r24
    1326:	41 cf       	rjmp	.-382    	; 0x11aa <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 0f 01 	sts	0x010F, r24
    132e:	5d ce       	rjmp	.-838    	; 0xfea <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1330:	80 91 0f 01 	lds	r24, 0x010F
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	51 f0       	breq	.+20     	; 0x134c <__vector_23+0x3e2>
    1338:	80 91 71 01 	lds	r24, 0x0171
                        prev_motion = MOVE_STOP;
    133c:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_LEFT;
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_left = calibmsg->turn_left;
    1346:	80 93 81 01 	sts	0x0181, r24
    134a:	2f cf       	rjmp	.-418    	; 0x11aa <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    134c:	80 91 71 01 	lds	r24, 0x0171
    1350:	90 91 81 01 	lds	r25, 0x0181
    1354:	89 13       	cpse	r24, r25
    1356:	f2 cf       	rjmp	.-28     	; 0x133c <__vector_23+0x3d2>
    1358:	28 cf       	rjmp	.-432    	; 0x11aa <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    135a:	80 91 80 01 	lds	r24, 0x0180
    135e:	98 13       	cpse	r25, r24
    1360:	19 cf       	rjmp	.-462    	; 0x1194 <__vector_23+0x22a>
    1362:	80 91 73 01 	lds	r24, 0x0173
    1366:	20 91 7f 01 	lds	r18, 0x017F
    136a:	82 13       	cpse	r24, r18
    136c:	15 cf       	rjmp	.-470    	; 0x1198 <__vector_23+0x22e>
    136e:	1d cf       	rjmp	.-454    	; 0x11aa <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1370:	80 91 72 01 	lds	r24, 0x0172
    1374:	90 91 6d 01 	lds	r25, 0x016D
    1378:	89 13       	cpse	r24, r25
    137a:	ce cf       	rjmp	.-100    	; 0x1318 <__vector_23+0x3ae>
    137c:	16 cf       	rjmp	.-468    	; 0x11aa <__vector_23+0x240>

0000137e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    137e:	fc 01       	movw	r30, r24
    1380:	ac 01       	movw	r20, r24
    1382:	46 5f       	subi	r20, 0xF6	; 246
    1384:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    138a:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    138c:	82 27       	eor	r24, r18
    138e:	08 2e       	mov	r0, r24
    1390:	82 95       	swap	r24
    1392:	80 7f       	andi	r24, 0xF0	; 240
    1394:	80 25       	eor	r24, r0
    1396:	09 2e       	mov	r0, r25
    1398:	98 2f       	mov	r25, r24
    139a:	82 95       	swap	r24
    139c:	8f 70       	andi	r24, 0x0F	; 15
    139e:	08 26       	eor	r0, r24
    13a0:	86 95       	lsr	r24
    13a2:	98 27       	eor	r25, r24
    13a4:	89 27       	eor	r24, r25
    13a6:	88 0f       	add	r24, r24
    13a8:	88 0f       	add	r24, r24
    13aa:	88 0f       	add	r24, r24
    13ac:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    13ae:	e4 17       	cp	r30, r20
    13b0:	f5 07       	cpc	r31, r21
    13b2:	59 f7       	brne	.-42     	; 0x138a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    13b4:	08 95       	ret

000013b6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    13b6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    13b8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    13ba:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    13bc:	20 91 41 01 	lds	r18, 0x0141
    or tmpreg1, ddrreg
    13c0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    13c2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13c6:	30 91 41 01 	lds	r19, 0x0141
    13ca:	20 30       	cpi	r18, 0x00	; 0
    13cc:	29 f0       	breq	.+10     	; 0x13d8 <message_send+0x22>
    13ce:	00 00       	nop
    13d0:	25 b1       	in	r18, 0x05	; 5
    13d2:	23 2b       	or	r18, r19
    13d4:	25 b9       	out	0x05, r18	; 5
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <message_send+0x2a>
    13d8:	00 00       	nop
    13da:	00 00       	nop
    13dc:	00 00       	nop
    13de:	00 c0       	rjmp	.+0      	; 0x13e0 <message_send+0x2a>
    13e0:	00 00       	nop
    13e2:	00 00       	nop
    13e4:	00 00       	nop
    13e6:	30 95       	com	r19
    13e8:	25 b1       	in	r18, 0x05	; 5
    13ea:	23 23       	and	r18, r19
    13ec:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    13ee:	2e ea       	ldi	r18, 0xAE	; 174
    13f0:	2a 95       	dec	r18
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    13f4:	2b ee       	ldi	r18, 0xEB	; 235

000013f6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    13f6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    13f8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    13fa:	0a c0       	rjmp	.+20     	; 0x1410 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13fc:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13fe:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    1402:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1404:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1406:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1408:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    140a:	0f be       	out	0x3f, r0	; 63
    return 0
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	08 95       	ret

00001410 <nocollision>:
nocollision:
    nop
    1410:	00 00       	nop
    dec tmpreg1
    1412:	2a 95       	dec	r18
    brne checkcollision
    1414:	81 f7       	brne	.-32     	; 0x13f6 <checkcollision>

    ldi tmpreg1, 0x01
    1416:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1418:	30 91 41 01 	lds	r19, 0x0141
    141c:	20 30       	cpi	r18, 0x00	; 0
    141e:	29 f0       	breq	.+10     	; 0x142a <nocollision+0x1a>
    1420:	00 00       	nop
    1422:	25 b1       	in	r18, 0x05	; 5
    1424:	23 2b       	or	r18, r19
    1426:	25 b9       	out	0x05, r18	; 5
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <nocollision+0x22>
    142a:	00 00       	nop
    142c:	00 00       	nop
    142e:	00 00       	nop
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <nocollision+0x22>
    1432:	00 00       	nop
    1434:	00 00       	nop
    1436:	00 00       	nop
    1438:	30 95       	com	r19
    143a:	25 b1       	in	r18, 0x05	; 5
    143c:	23 23       	and	r18, r19
    143e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1440:	00 00       	nop
    1442:	24 e5       	ldi	r18, 0x54	; 84
    1444:	2a 95       	dec	r18
    1446:	f1 f7       	brne	.-4      	; 0x1444 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1448:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    144a:	8c e0       	ldi	r24, 0x0C	; 12

0000144c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    144c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    144e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1450:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1452:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1454:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1456:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1458:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    145a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    145c:	50 e0       	ldi	r21, 0x00	; 0

0000145e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    145e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1460:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1462:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1464:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1466:	30 91 41 01 	lds	r19, 0x0141
    146a:	20 30       	cpi	r18, 0x00	; 0
    146c:	29 f0       	breq	.+10     	; 0x1478 <sendbit+0x1a>
    146e:	00 00       	nop
    1470:	25 b1       	in	r18, 0x05	; 5
    1472:	23 2b       	or	r18, r19
    1474:	25 b9       	out	0x05, r18	; 5
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <sendbit+0x22>
    1478:	00 00       	nop
    147a:	00 00       	nop
    147c:	00 00       	nop
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <sendbit+0x22>
    1480:	00 00       	nop
    1482:	00 00       	nop
    1484:	00 00       	nop
    1486:	30 95       	com	r19
    1488:	25 b1       	in	r18, 0x05	; 5
    148a:	23 23       	and	r18, r19
    148c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    148e:	00 00       	nop
    1490:	21 e5       	ldi	r18, 0x51	; 81
    1492:	2a 95       	dec	r18
    1494:	f1 f7       	brne	.-4      	; 0x1492 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1496:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1498:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    149a:	9a 95       	dec	r25
    brne sendbit
    149c:	01 f7       	brne	.-64     	; 0x145e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    149e:	8a 95       	dec	r24
    brne sendbyte
    14a0:	a9 f6       	brne	.-86     	; 0x144c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14a2:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14a4:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14a6:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14a8:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14aa:	30 91 41 01 	lds	r19, 0x0141
    com tmpreg2
    14ae:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14b0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14b2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14b4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14b6:	0f be       	out	0x3f, r0	; 63
    return 1
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	08 95       	ret

000014bc <main>:
}


int main()
{
  kilo_init();
    14bc:	0e 94 ef 00 	call	0x1de	; 0x1de <kilo_init>
    kilo_message_tx = message_tx;
    14c0:	81 e7       	ldi	r24, 0x71	; 113
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	90 93 04 01 	sts	0x0104, r25
    14c8:	80 93 03 01 	sts	0x0103, r24
    // Register the message_tx_success callback function.
    kilo_message_tx_success = message_tx_success;
    14cc:	84 e7       	ldi	r24, 0x74	; 116
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	90 93 02 01 	sts	0x0102, r25
    14d4:	80 93 01 01 	sts	0x0101, r24
  kilo_start(setup, loop);
    14d8:	6d e9       	ldi	r22, 0x9D	; 157
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	8b e7       	ldi	r24, 0x7B	; 123
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <kilo_start>
    
  return 0;
}
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	08 95       	ret

000014ea <__divmodhi4>:
    14ea:	97 fb       	bst	r25, 7
    14ec:	07 2e       	mov	r0, r23
    14ee:	16 f4       	brtc	.+4      	; 0x14f4 <__divmodhi4+0xa>
    14f0:	00 94       	com	r0
    14f2:	07 d0       	rcall	.+14     	; 0x1502 <__divmodhi4_neg1>
    14f4:	77 fd       	sbrc	r23, 7
    14f6:	09 d0       	rcall	.+18     	; 0x150a <__divmodhi4_neg2>
    14f8:	0e 94 9e 0a 	call	0x153c	; 0x153c <__udivmodhi4>
    14fc:	07 fc       	sbrc	r0, 7
    14fe:	05 d0       	rcall	.+10     	; 0x150a <__divmodhi4_neg2>
    1500:	3e f4       	brtc	.+14     	; 0x1510 <__divmodhi4_exit>

00001502 <__divmodhi4_neg1>:
    1502:	90 95       	com	r25
    1504:	81 95       	neg	r24
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	08 95       	ret

0000150a <__divmodhi4_neg2>:
    150a:	70 95       	com	r23
    150c:	61 95       	neg	r22
    150e:	7f 4f       	sbci	r23, 0xFF	; 255

00001510 <__divmodhi4_exit>:
    1510:	08 95       	ret

00001512 <__tablejump2__>:
    1512:	ee 0f       	add	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	05 90       	lpm	r0, Z+
    1518:	f4 91       	lpm	r31, Z
    151a:	e0 2d       	mov	r30, r0
    151c:	09 94       	ijmp

0000151e <__umulhisi3>:
    151e:	a2 9f       	mul	r26, r18
    1520:	b0 01       	movw	r22, r0
    1522:	b3 9f       	mul	r27, r19
    1524:	c0 01       	movw	r24, r0
    1526:	a3 9f       	mul	r26, r19
    1528:	70 0d       	add	r23, r0
    152a:	81 1d       	adc	r24, r1
    152c:	11 24       	eor	r1, r1
    152e:	91 1d       	adc	r25, r1
    1530:	b2 9f       	mul	r27, r18
    1532:	70 0d       	add	r23, r0
    1534:	81 1d       	adc	r24, r1
    1536:	11 24       	eor	r1, r1
    1538:	91 1d       	adc	r25, r1
    153a:	08 95       	ret

0000153c <__udivmodhi4>:
    153c:	aa 1b       	sub	r26, r26
    153e:	bb 1b       	sub	r27, r27
    1540:	51 e1       	ldi	r21, 0x11	; 17
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <__udivmodhi4_ep>

00001544 <__udivmodhi4_loop>:
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	a6 17       	cp	r26, r22
    154a:	b7 07       	cpc	r27, r23
    154c:	10 f0       	brcs	.+4      	; 0x1552 <__udivmodhi4_ep>
    154e:	a6 1b       	sub	r26, r22
    1550:	b7 0b       	sbc	r27, r23

00001552 <__udivmodhi4_ep>:
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	5a 95       	dec	r21
    1558:	a9 f7       	brne	.-22     	; 0x1544 <__udivmodhi4_loop>
    155a:	80 95       	com	r24
    155c:	90 95       	com	r25
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	08 95       	ret

00001564 <__subsf3>:
    1564:	50 58       	subi	r21, 0x80	; 128

00001566 <__addsf3>:
    1566:	bb 27       	eor	r27, r27
    1568:	aa 27       	eor	r26, r26
    156a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__addsf3x>
    156e:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_round>
    1572:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_pscA>
    1576:	38 f0       	brcs	.+14     	; 0x1586 <__addsf3+0x20>
    1578:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_pscB>
    157c:	20 f0       	brcs	.+8      	; 0x1586 <__addsf3+0x20>
    157e:	39 f4       	brne	.+14     	; 0x158e <__addsf3+0x28>
    1580:	9f 3f       	cpi	r25, 0xFF	; 255
    1582:	19 f4       	brne	.+6      	; 0x158a <__addsf3+0x24>
    1584:	26 f4       	brtc	.+8      	; 0x158e <__addsf3+0x28>
    1586:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_nan>
    158a:	0e f4       	brtc	.+2      	; 0x158e <__addsf3+0x28>
    158c:	e0 95       	com	r30
    158e:	e7 fb       	bst	r30, 7
    1590:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_inf>

00001594 <__addsf3x>:
    1594:	e9 2f       	mov	r30, r25
    1596:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_split3>
    159a:	58 f3       	brcs	.-42     	; 0x1572 <__addsf3+0xc>
    159c:	ba 17       	cp	r27, r26
    159e:	62 07       	cpc	r22, r18
    15a0:	73 07       	cpc	r23, r19
    15a2:	84 07       	cpc	r24, r20
    15a4:	95 07       	cpc	r25, r21
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <__addsf3x+0x1c>
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <__addsf3x+0x34>
    15aa:	a6 f5       	brtc	.+104    	; 0x1614 <__addsf3x+0x80>
    15ac:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__fp_zero>
    15b0:	0e f4       	brtc	.+2      	; 0x15b4 <__addsf3x+0x20>
    15b2:	e0 95       	com	r30
    15b4:	0b 2e       	mov	r0, r27
    15b6:	ba 2f       	mov	r27, r26
    15b8:	a0 2d       	mov	r26, r0
    15ba:	0b 01       	movw	r0, r22
    15bc:	b9 01       	movw	r22, r18
    15be:	90 01       	movw	r18, r0
    15c0:	0c 01       	movw	r0, r24
    15c2:	ca 01       	movw	r24, r20
    15c4:	a0 01       	movw	r20, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	ff 27       	eor	r31, r31
    15ca:	59 1b       	sub	r21, r25
    15cc:	99 f0       	breq	.+38     	; 0x15f4 <__addsf3x+0x60>
    15ce:	59 3f       	cpi	r21, 0xF9	; 249
    15d0:	50 f4       	brcc	.+20     	; 0x15e6 <__addsf3x+0x52>
    15d2:	50 3e       	cpi	r21, 0xE0	; 224
    15d4:	68 f1       	brcs	.+90     	; 0x1630 <__addsf3x+0x9c>
    15d6:	1a 16       	cp	r1, r26
    15d8:	f0 40       	sbci	r31, 0x00	; 0
    15da:	a2 2f       	mov	r26, r18
    15dc:	23 2f       	mov	r18, r19
    15de:	34 2f       	mov	r19, r20
    15e0:	44 27       	eor	r20, r20
    15e2:	58 5f       	subi	r21, 0xF8	; 248
    15e4:	f3 cf       	rjmp	.-26     	; 0x15cc <__addsf3x+0x38>
    15e6:	46 95       	lsr	r20
    15e8:	37 95       	ror	r19
    15ea:	27 95       	ror	r18
    15ec:	a7 95       	ror	r26
    15ee:	f0 40       	sbci	r31, 0x00	; 0
    15f0:	53 95       	inc	r21
    15f2:	c9 f7       	brne	.-14     	; 0x15e6 <__addsf3x+0x52>
    15f4:	7e f4       	brtc	.+30     	; 0x1614 <__addsf3x+0x80>
    15f6:	1f 16       	cp	r1, r31
    15f8:	ba 0b       	sbc	r27, r26
    15fa:	62 0b       	sbc	r22, r18
    15fc:	73 0b       	sbc	r23, r19
    15fe:	84 0b       	sbc	r24, r20
    1600:	ba f0       	brmi	.+46     	; 0x1630 <__addsf3x+0x9c>
    1602:	91 50       	subi	r25, 0x01	; 1
    1604:	a1 f0       	breq	.+40     	; 0x162e <__addsf3x+0x9a>
    1606:	ff 0f       	add	r31, r31
    1608:	bb 1f       	adc	r27, r27
    160a:	66 1f       	adc	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	c2 f7       	brpl	.-16     	; 0x1602 <__addsf3x+0x6e>
    1612:	0e c0       	rjmp	.+28     	; 0x1630 <__addsf3x+0x9c>
    1614:	ba 0f       	add	r27, r26
    1616:	62 1f       	adc	r22, r18
    1618:	73 1f       	adc	r23, r19
    161a:	84 1f       	adc	r24, r20
    161c:	48 f4       	brcc	.+18     	; 0x1630 <__addsf3x+0x9c>
    161e:	87 95       	ror	r24
    1620:	77 95       	ror	r23
    1622:	67 95       	ror	r22
    1624:	b7 95       	ror	r27
    1626:	f7 95       	ror	r31
    1628:	9e 3f       	cpi	r25, 0xFE	; 254
    162a:	08 f0       	brcs	.+2      	; 0x162e <__addsf3x+0x9a>
    162c:	b0 cf       	rjmp	.-160    	; 0x158e <__addsf3+0x28>
    162e:	93 95       	inc	r25
    1630:	88 0f       	add	r24, r24
    1632:	08 f0       	brcs	.+2      	; 0x1636 <__addsf3x+0xa2>
    1634:	99 27       	eor	r25, r25
    1636:	ee 0f       	add	r30, r30
    1638:	97 95       	ror	r25
    163a:	87 95       	ror	r24
    163c:	08 95       	ret

0000163e <__divsf3>:
    163e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divsf3x>
    1642:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_round>
    1646:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_pscB>
    164a:	58 f0       	brcs	.+22     	; 0x1662 <__divsf3+0x24>
    164c:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_pscA>
    1650:	40 f0       	brcs	.+16     	; 0x1662 <__divsf3+0x24>
    1652:	29 f4       	brne	.+10     	; 0x165e <__divsf3+0x20>
    1654:	5f 3f       	cpi	r21, 0xFF	; 255
    1656:	29 f0       	breq	.+10     	; 0x1662 <__divsf3+0x24>
    1658:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_inf>
    165c:	51 11       	cpse	r21, r1
    165e:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__fp_szero>
    1662:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_nan>

00001666 <__divsf3x>:
    1666:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_split3>
    166a:	68 f3       	brcs	.-38     	; 0x1646 <__divsf3+0x8>

0000166c <__divsf3_pse>:
    166c:	99 23       	and	r25, r25
    166e:	b1 f3       	breq	.-20     	; 0x165c <__divsf3+0x1e>
    1670:	55 23       	and	r21, r21
    1672:	91 f3       	breq	.-28     	; 0x1658 <__divsf3+0x1a>
    1674:	95 1b       	sub	r25, r21
    1676:	55 0b       	sbc	r21, r21
    1678:	bb 27       	eor	r27, r27
    167a:	aa 27       	eor	r26, r26
    167c:	62 17       	cp	r22, r18
    167e:	73 07       	cpc	r23, r19
    1680:	84 07       	cpc	r24, r20
    1682:	38 f0       	brcs	.+14     	; 0x1692 <__divsf3_pse+0x26>
    1684:	9f 5f       	subi	r25, 0xFF	; 255
    1686:	5f 4f       	sbci	r21, 0xFF	; 255
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	44 1f       	adc	r20, r20
    168e:	aa 1f       	adc	r26, r26
    1690:	a9 f3       	breq	.-22     	; 0x167c <__divsf3_pse+0x10>
    1692:	35 d0       	rcall	.+106    	; 0x16fe <__divsf3_pse+0x92>
    1694:	0e 2e       	mov	r0, r30
    1696:	3a f0       	brmi	.+14     	; 0x16a6 <__divsf3_pse+0x3a>
    1698:	e0 e8       	ldi	r30, 0x80	; 128
    169a:	32 d0       	rcall	.+100    	; 0x1700 <__divsf3_pse+0x94>
    169c:	91 50       	subi	r25, 0x01	; 1
    169e:	50 40       	sbci	r21, 0x00	; 0
    16a0:	e6 95       	lsr	r30
    16a2:	00 1c       	adc	r0, r0
    16a4:	ca f7       	brpl	.-14     	; 0x1698 <__divsf3_pse+0x2c>
    16a6:	2b d0       	rcall	.+86     	; 0x16fe <__divsf3_pse+0x92>
    16a8:	fe 2f       	mov	r31, r30
    16aa:	29 d0       	rcall	.+82     	; 0x16fe <__divsf3_pse+0x92>
    16ac:	66 0f       	add	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	bb 1f       	adc	r27, r27
    16b4:	26 17       	cp	r18, r22
    16b6:	37 07       	cpc	r19, r23
    16b8:	48 07       	cpc	r20, r24
    16ba:	ab 07       	cpc	r26, r27
    16bc:	b0 e8       	ldi	r27, 0x80	; 128
    16be:	09 f0       	breq	.+2      	; 0x16c2 <__divsf3_pse+0x56>
    16c0:	bb 0b       	sbc	r27, r27
    16c2:	80 2d       	mov	r24, r0
    16c4:	bf 01       	movw	r22, r30
    16c6:	ff 27       	eor	r31, r31
    16c8:	93 58       	subi	r25, 0x83	; 131
    16ca:	5f 4f       	sbci	r21, 0xFF	; 255
    16cc:	3a f0       	brmi	.+14     	; 0x16dc <__divsf3_pse+0x70>
    16ce:	9e 3f       	cpi	r25, 0xFE	; 254
    16d0:	51 05       	cpc	r21, r1
    16d2:	78 f0       	brcs	.+30     	; 0x16f2 <__divsf3_pse+0x86>
    16d4:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_inf>
    16d8:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__fp_szero>
    16dc:	5f 3f       	cpi	r21, 0xFF	; 255
    16de:	e4 f3       	brlt	.-8      	; 0x16d8 <__divsf3_pse+0x6c>
    16e0:	98 3e       	cpi	r25, 0xE8	; 232
    16e2:	d4 f3       	brlt	.-12     	; 0x16d8 <__divsf3_pse+0x6c>
    16e4:	86 95       	lsr	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	b7 95       	ror	r27
    16ec:	f7 95       	ror	r31
    16ee:	9f 5f       	subi	r25, 0xFF	; 255
    16f0:	c9 f7       	brne	.-14     	; 0x16e4 <__divsf3_pse+0x78>
    16f2:	88 0f       	add	r24, r24
    16f4:	91 1d       	adc	r25, r1
    16f6:	96 95       	lsr	r25
    16f8:	87 95       	ror	r24
    16fa:	97 f9       	bld	r25, 7
    16fc:	08 95       	ret
    16fe:	e1 e0       	ldi	r30, 0x01	; 1
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	bb 1f       	adc	r27, r27
    1708:	62 17       	cp	r22, r18
    170a:	73 07       	cpc	r23, r19
    170c:	84 07       	cpc	r24, r20
    170e:	ba 07       	cpc	r27, r26
    1710:	20 f0       	brcs	.+8      	; 0x171a <__divsf3_pse+0xae>
    1712:	62 1b       	sub	r22, r18
    1714:	73 0b       	sbc	r23, r19
    1716:	84 0b       	sbc	r24, r20
    1718:	ba 0b       	sbc	r27, r26
    171a:	ee 1f       	adc	r30, r30
    171c:	88 f7       	brcc	.-30     	; 0x1700 <__divsf3_pse+0x94>
    171e:	e0 95       	com	r30
    1720:	08 95       	ret

00001722 <__fixsfsi>:
    1722:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixunssfsi>
    1726:	68 94       	set
    1728:	b1 11       	cpse	r27, r1
    172a:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__fp_szero>
    172e:	08 95       	ret

00001730 <__fixunssfsi>:
    1730:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fp_splitA>
    1734:	88 f0       	brcs	.+34     	; 0x1758 <__fixunssfsi+0x28>
    1736:	9f 57       	subi	r25, 0x7F	; 127
    1738:	98 f0       	brcs	.+38     	; 0x1760 <__fixunssfsi+0x30>
    173a:	b9 2f       	mov	r27, r25
    173c:	99 27       	eor	r25, r25
    173e:	b7 51       	subi	r27, 0x17	; 23
    1740:	b0 f0       	brcs	.+44     	; 0x176e <__fixunssfsi+0x3e>
    1742:	e1 f0       	breq	.+56     	; 0x177c <__fixunssfsi+0x4c>
    1744:	66 0f       	add	r22, r22
    1746:	77 1f       	adc	r23, r23
    1748:	88 1f       	adc	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	1a f0       	brmi	.+6      	; 0x1754 <__fixunssfsi+0x24>
    174e:	ba 95       	dec	r27
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__fixunssfsi+0x14>
    1752:	14 c0       	rjmp	.+40     	; 0x177c <__fixunssfsi+0x4c>
    1754:	b1 30       	cpi	r27, 0x01	; 1
    1756:	91 f0       	breq	.+36     	; 0x177c <__fixunssfsi+0x4c>
    1758:	0e 94 4e 0c 	call	0x189c	; 0x189c <__fp_zero>
    175c:	b1 e0       	ldi	r27, 0x01	; 1
    175e:	08 95       	ret
    1760:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__fp_zero>
    1764:	67 2f       	mov	r22, r23
    1766:	78 2f       	mov	r23, r24
    1768:	88 27       	eor	r24, r24
    176a:	b8 5f       	subi	r27, 0xF8	; 248
    176c:	39 f0       	breq	.+14     	; 0x177c <__fixunssfsi+0x4c>
    176e:	b9 3f       	cpi	r27, 0xF9	; 249
    1770:	cc f3       	brlt	.-14     	; 0x1764 <__fixunssfsi+0x34>
    1772:	86 95       	lsr	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	b3 95       	inc	r27
    177a:	d9 f7       	brne	.-10     	; 0x1772 <__fixunssfsi+0x42>
    177c:	3e f4       	brtc	.+14     	; 0x178c <__fixunssfsi+0x5c>
    177e:	90 95       	com	r25
    1780:	80 95       	com	r24
    1782:	70 95       	com	r23
    1784:	61 95       	neg	r22
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	8f 4f       	sbci	r24, 0xFF	; 255
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	08 95       	ret

0000178e <__floatunsisf>:
    178e:	e8 94       	clt
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <__floatsisf+0x12>

00001792 <__floatsisf>:
    1792:	97 fb       	bst	r25, 7
    1794:	3e f4       	brtc	.+14     	; 0x17a4 <__floatsisf+0x12>
    1796:	90 95       	com	r25
    1798:	80 95       	com	r24
    179a:	70 95       	com	r23
    179c:	61 95       	neg	r22
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	8f 4f       	sbci	r24, 0xFF	; 255
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	99 23       	and	r25, r25
    17a6:	a9 f0       	breq	.+42     	; 0x17d2 <__floatsisf+0x40>
    17a8:	f9 2f       	mov	r31, r25
    17aa:	96 e9       	ldi	r25, 0x96	; 150
    17ac:	bb 27       	eor	r27, r27
    17ae:	93 95       	inc	r25
    17b0:	f6 95       	lsr	r31
    17b2:	87 95       	ror	r24
    17b4:	77 95       	ror	r23
    17b6:	67 95       	ror	r22
    17b8:	b7 95       	ror	r27
    17ba:	f1 11       	cpse	r31, r1
    17bc:	f8 cf       	rjmp	.-16     	; 0x17ae <__floatsisf+0x1c>
    17be:	fa f4       	brpl	.+62     	; 0x17fe <__floatsisf+0x6c>
    17c0:	bb 0f       	add	r27, r27
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <__floatsisf+0x36>
    17c4:	60 ff       	sbrs	r22, 0
    17c6:	1b c0       	rjmp	.+54     	; 0x17fe <__floatsisf+0x6c>
    17c8:	6f 5f       	subi	r22, 0xFF	; 255
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	16 c0       	rjmp	.+44     	; 0x17fe <__floatsisf+0x6c>
    17d2:	88 23       	and	r24, r24
    17d4:	11 f0       	breq	.+4      	; 0x17da <__floatsisf+0x48>
    17d6:	96 e9       	ldi	r25, 0x96	; 150
    17d8:	11 c0       	rjmp	.+34     	; 0x17fc <__floatsisf+0x6a>
    17da:	77 23       	and	r23, r23
    17dc:	21 f0       	breq	.+8      	; 0x17e6 <__floatsisf+0x54>
    17de:	9e e8       	ldi	r25, 0x8E	; 142
    17e0:	87 2f       	mov	r24, r23
    17e2:	76 2f       	mov	r23, r22
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <__floatsisf+0x5e>
    17e6:	66 23       	and	r22, r22
    17e8:	71 f0       	breq	.+28     	; 0x1806 <__floatsisf+0x74>
    17ea:	96 e8       	ldi	r25, 0x86	; 134
    17ec:	86 2f       	mov	r24, r22
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	2a f0       	brmi	.+10     	; 0x17fe <__floatsisf+0x6c>
    17f4:	9a 95       	dec	r25
    17f6:	66 0f       	add	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	da f7       	brpl	.-10     	; 0x17f4 <__floatsisf+0x62>
    17fe:	88 0f       	add	r24, r24
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	97 f9       	bld	r25, 7
    1806:	08 95       	ret

00001808 <__fp_inf>:
    1808:	97 f9       	bld	r25, 7
    180a:	9f 67       	ori	r25, 0x7F	; 127
    180c:	80 e8       	ldi	r24, 0x80	; 128
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	08 95       	ret

00001814 <__fp_nan>:
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	80 ec       	ldi	r24, 0xC0	; 192
    1818:	08 95       	ret

0000181a <__fp_pscA>:
    181a:	00 24       	eor	r0, r0
    181c:	0a 94       	dec	r0
    181e:	16 16       	cp	r1, r22
    1820:	17 06       	cpc	r1, r23
    1822:	18 06       	cpc	r1, r24
    1824:	09 06       	cpc	r0, r25
    1826:	08 95       	ret

00001828 <__fp_pscB>:
    1828:	00 24       	eor	r0, r0
    182a:	0a 94       	dec	r0
    182c:	12 16       	cp	r1, r18
    182e:	13 06       	cpc	r1, r19
    1830:	14 06       	cpc	r1, r20
    1832:	05 06       	cpc	r0, r21
    1834:	08 95       	ret

00001836 <__fp_round>:
    1836:	09 2e       	mov	r0, r25
    1838:	03 94       	inc	r0
    183a:	00 0c       	add	r0, r0
    183c:	11 f4       	brne	.+4      	; 0x1842 <__fp_round+0xc>
    183e:	88 23       	and	r24, r24
    1840:	52 f0       	brmi	.+20     	; 0x1856 <__fp_round+0x20>
    1842:	bb 0f       	add	r27, r27
    1844:	40 f4       	brcc	.+16     	; 0x1856 <__fp_round+0x20>
    1846:	bf 2b       	or	r27, r31
    1848:	11 f4       	brne	.+4      	; 0x184e <__fp_round+0x18>
    184a:	60 ff       	sbrs	r22, 0
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <__fp_round+0x20>
    184e:	6f 5f       	subi	r22, 0xFF	; 255
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	8f 4f       	sbci	r24, 0xFF	; 255
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	08 95       	ret

00001858 <__fp_split3>:
    1858:	57 fd       	sbrc	r21, 7
    185a:	90 58       	subi	r25, 0x80	; 128
    185c:	44 0f       	add	r20, r20
    185e:	55 1f       	adc	r21, r21
    1860:	59 f0       	breq	.+22     	; 0x1878 <__fp_splitA+0x10>
    1862:	5f 3f       	cpi	r21, 0xFF	; 255
    1864:	71 f0       	breq	.+28     	; 0x1882 <__fp_splitA+0x1a>
    1866:	47 95       	ror	r20

00001868 <__fp_splitA>:
    1868:	88 0f       	add	r24, r24
    186a:	97 fb       	bst	r25, 7
    186c:	99 1f       	adc	r25, r25
    186e:	61 f0       	breq	.+24     	; 0x1888 <__fp_splitA+0x20>
    1870:	9f 3f       	cpi	r25, 0xFF	; 255
    1872:	79 f0       	breq	.+30     	; 0x1892 <__fp_splitA+0x2a>
    1874:	87 95       	ror	r24
    1876:	08 95       	ret
    1878:	12 16       	cp	r1, r18
    187a:	13 06       	cpc	r1, r19
    187c:	14 06       	cpc	r1, r20
    187e:	55 1f       	adc	r21, r21
    1880:	f2 cf       	rjmp	.-28     	; 0x1866 <__fp_split3+0xe>
    1882:	46 95       	lsr	r20
    1884:	f1 df       	rcall	.-30     	; 0x1868 <__fp_splitA>
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <__fp_splitA+0x30>
    1888:	16 16       	cp	r1, r22
    188a:	17 06       	cpc	r1, r23
    188c:	18 06       	cpc	r1, r24
    188e:	99 1f       	adc	r25, r25
    1890:	f1 cf       	rjmp	.-30     	; 0x1874 <__fp_splitA+0xc>
    1892:	86 95       	lsr	r24
    1894:	71 05       	cpc	r23, r1
    1896:	61 05       	cpc	r22, r1
    1898:	08 94       	sec
    189a:	08 95       	ret

0000189c <__fp_zero>:
    189c:	e8 94       	clt

0000189e <__fp_szero>:
    189e:	bb 27       	eor	r27, r27
    18a0:	66 27       	eor	r22, r22
    18a2:	77 27       	eor	r23, r23
    18a4:	cb 01       	movw	r24, r22
    18a6:	97 f9       	bld	r25, 7
    18a8:	08 95       	ret

000018aa <__mulsf3>:
    18aa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__mulsf3x>
    18ae:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_round>
    18b2:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_pscA>
    18b6:	38 f0       	brcs	.+14     	; 0x18c6 <__mulsf3+0x1c>
    18b8:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_pscB>
    18bc:	20 f0       	brcs	.+8      	; 0x18c6 <__mulsf3+0x1c>
    18be:	95 23       	and	r25, r21
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <__mulsf3+0x1c>
    18c2:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_inf>
    18c6:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__fp_nan>
    18ca:	11 24       	eor	r1, r1
    18cc:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__fp_szero>

000018d0 <__mulsf3x>:
    18d0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_split3>
    18d4:	70 f3       	brcs	.-36     	; 0x18b2 <__mulsf3+0x8>

000018d6 <__mulsf3_pse>:
    18d6:	95 9f       	mul	r25, r21
    18d8:	c1 f3       	breq	.-16     	; 0x18ca <__mulsf3+0x20>
    18da:	95 0f       	add	r25, r21
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	55 1f       	adc	r21, r21
    18e0:	62 9f       	mul	r22, r18
    18e2:	f0 01       	movw	r30, r0
    18e4:	72 9f       	mul	r23, r18
    18e6:	bb 27       	eor	r27, r27
    18e8:	f0 0d       	add	r31, r0
    18ea:	b1 1d       	adc	r27, r1
    18ec:	63 9f       	mul	r22, r19
    18ee:	aa 27       	eor	r26, r26
    18f0:	f0 0d       	add	r31, r0
    18f2:	b1 1d       	adc	r27, r1
    18f4:	aa 1f       	adc	r26, r26
    18f6:	64 9f       	mul	r22, r20
    18f8:	66 27       	eor	r22, r22
    18fa:	b0 0d       	add	r27, r0
    18fc:	a1 1d       	adc	r26, r1
    18fe:	66 1f       	adc	r22, r22
    1900:	82 9f       	mul	r24, r18
    1902:	22 27       	eor	r18, r18
    1904:	b0 0d       	add	r27, r0
    1906:	a1 1d       	adc	r26, r1
    1908:	62 1f       	adc	r22, r18
    190a:	73 9f       	mul	r23, r19
    190c:	b0 0d       	add	r27, r0
    190e:	a1 1d       	adc	r26, r1
    1910:	62 1f       	adc	r22, r18
    1912:	83 9f       	mul	r24, r19
    1914:	a0 0d       	add	r26, r0
    1916:	61 1d       	adc	r22, r1
    1918:	22 1f       	adc	r18, r18
    191a:	74 9f       	mul	r23, r20
    191c:	33 27       	eor	r19, r19
    191e:	a0 0d       	add	r26, r0
    1920:	61 1d       	adc	r22, r1
    1922:	23 1f       	adc	r18, r19
    1924:	84 9f       	mul	r24, r20
    1926:	60 0d       	add	r22, r0
    1928:	21 1d       	adc	r18, r1
    192a:	82 2f       	mov	r24, r18
    192c:	76 2f       	mov	r23, r22
    192e:	6a 2f       	mov	r22, r26
    1930:	11 24       	eor	r1, r1
    1932:	9f 57       	subi	r25, 0x7F	; 127
    1934:	50 40       	sbci	r21, 0x00	; 0
    1936:	9a f0       	brmi	.+38     	; 0x195e <__mulsf3_pse+0x88>
    1938:	f1 f0       	breq	.+60     	; 0x1976 <__mulsf3_pse+0xa0>
    193a:	88 23       	and	r24, r24
    193c:	4a f0       	brmi	.+18     	; 0x1950 <__mulsf3_pse+0x7a>
    193e:	ee 0f       	add	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	bb 1f       	adc	r27, r27
    1944:	66 1f       	adc	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	88 1f       	adc	r24, r24
    194a:	91 50       	subi	r25, 0x01	; 1
    194c:	50 40       	sbci	r21, 0x00	; 0
    194e:	a9 f7       	brne	.-22     	; 0x193a <__mulsf3_pse+0x64>
    1950:	9e 3f       	cpi	r25, 0xFE	; 254
    1952:	51 05       	cpc	r21, r1
    1954:	80 f0       	brcs	.+32     	; 0x1976 <__mulsf3_pse+0xa0>
    1956:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_inf>
    195a:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__fp_szero>
    195e:	5f 3f       	cpi	r21, 0xFF	; 255
    1960:	e4 f3       	brlt	.-8      	; 0x195a <__mulsf3_pse+0x84>
    1962:	98 3e       	cpi	r25, 0xE8	; 232
    1964:	d4 f3       	brlt	.-12     	; 0x195a <__mulsf3_pse+0x84>
    1966:	86 95       	lsr	r24
    1968:	77 95       	ror	r23
    196a:	67 95       	ror	r22
    196c:	b7 95       	ror	r27
    196e:	f7 95       	ror	r31
    1970:	e7 95       	ror	r30
    1972:	9f 5f       	subi	r25, 0xFF	; 255
    1974:	c1 f7       	brne	.-16     	; 0x1966 <__mulsf3_pse+0x90>
    1976:	fe 2b       	or	r31, r30
    1978:	88 0f       	add	r24, r24
    197a:	91 1d       	adc	r25, r1
    197c:	96 95       	lsr	r25
    197e:	87 95       	ror	r24
    1980:	97 f9       	bld	r25, 7
    1982:	08 95       	ret

00001984 <do_rand>:
    1984:	8f 92       	push	r8
    1986:	9f 92       	push	r9
    1988:	af 92       	push	r10
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	ec 01       	movw	r28, r24
    199a:	68 81       	ld	r22, Y
    199c:	79 81       	ldd	r23, Y+1	; 0x01
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	61 15       	cp	r22, r1
    19a4:	71 05       	cpc	r23, r1
    19a6:	81 05       	cpc	r24, r1
    19a8:	91 05       	cpc	r25, r1
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <do_rand+0x30>
    19ac:	64 e2       	ldi	r22, 0x24	; 36
    19ae:	79 ed       	ldi	r23, 0xD9	; 217
    19b0:	8b e5       	ldi	r24, 0x5B	; 91
    19b2:	97 e0       	ldi	r25, 0x07	; 7
    19b4:	2d e1       	ldi	r18, 0x1D	; 29
    19b6:	33 ef       	ldi	r19, 0xF3	; 243
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__divmodsi4>
    19c0:	49 01       	movw	r8, r18
    19c2:	5a 01       	movw	r10, r20
    19c4:	9b 01       	movw	r18, r22
    19c6:	ac 01       	movw	r20, r24
    19c8:	a7 ea       	ldi	r26, 0xA7	; 167
    19ca:	b1 e4       	ldi	r27, 0x41	; 65
    19cc:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__muluhisi3>
    19d0:	6b 01       	movw	r12, r22
    19d2:	7c 01       	movw	r14, r24
    19d4:	ac ee       	ldi	r26, 0xEC	; 236
    19d6:	b4 ef       	ldi	r27, 0xF4	; 244
    19d8:	a5 01       	movw	r20, r10
    19da:	94 01       	movw	r18, r8
    19dc:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__mulohisi3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8c 0d       	add	r24, r12
    19e6:	9d 1d       	adc	r25, r13
    19e8:	ae 1d       	adc	r26, r14
    19ea:	bf 1d       	adc	r27, r15
    19ec:	b7 ff       	sbrs	r27, 7
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <do_rand+0x72>
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	a1 09       	sbc	r26, r1
    19f4:	b0 48       	sbci	r27, 0x80	; 128
    19f6:	88 83       	st	Y, r24
    19f8:	99 83       	std	Y+1, r25	; 0x01
    19fa:	aa 83       	std	Y+2, r26	; 0x02
    19fc:	bb 83       	std	Y+3, r27	; 0x03
    19fe:	9f 77       	andi	r25, 0x7F	; 127
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	bf 90       	pop	r11
    1a0e:	af 90       	pop	r10
    1a10:	9f 90       	pop	r9
    1a12:	8f 90       	pop	r8
    1a14:	08 95       	ret

00001a16 <rand_r>:
    1a16:	0e 94 c2 0c 	call	0x1984	; 0x1984 <do_rand>
    1a1a:	08 95       	ret

00001a1c <rand>:
    1a1c:	87 e0       	ldi	r24, 0x07	; 7
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	0e 94 c2 0c 	call	0x1984	; 0x1984 <do_rand>
    1a24:	08 95       	ret

00001a26 <srand>:
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	80 93 07 01 	sts	0x0107, r24
    1a2e:	90 93 08 01 	sts	0x0108, r25
    1a32:	a0 93 09 01 	sts	0x0109, r26
    1a36:	b0 93 0a 01 	sts	0x010A, r27
    1a3a:	08 95       	ret

00001a3c <eeprom_read_byte>:
    1a3c:	f9 99       	sbic	0x1f, 1	; 31
    1a3e:	fe cf       	rjmp	.-4      	; 0x1a3c <eeprom_read_byte>
    1a40:	92 bd       	out	0x22, r25	; 34
    1a42:	81 bd       	out	0x21, r24	; 33
    1a44:	f8 9a       	sbi	0x1f, 0	; 31
    1a46:	99 27       	eor	r25, r25
    1a48:	80 b5       	in	r24, 0x20	; 32
    1a4a:	08 95       	ret

00001a4c <eeprom_write_byte>:
    1a4c:	26 2f       	mov	r18, r22

00001a4e <eeprom_write_r18>:
    1a4e:	f9 99       	sbic	0x1f, 1	; 31
    1a50:	fe cf       	rjmp	.-4      	; 0x1a4e <eeprom_write_r18>
    1a52:	1f ba       	out	0x1f, r1	; 31
    1a54:	92 bd       	out	0x22, r25	; 34
    1a56:	81 bd       	out	0x21, r24	; 33
    1a58:	20 bd       	out	0x20, r18	; 32
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	fa 9a       	sbi	0x1f, 2	; 31
    1a60:	f9 9a       	sbi	0x1f, 1	; 31
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	08 95       	ret

00001a68 <__divmodsi4>:
    1a68:	05 2e       	mov	r0, r21
    1a6a:	97 fb       	bst	r25, 7
    1a6c:	1e f4       	brtc	.+6      	; 0x1a74 <__divmodsi4+0xc>
    1a6e:	00 94       	com	r0
    1a70:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__negsi2>
    1a74:	57 fd       	sbrc	r21, 7
    1a76:	07 d0       	rcall	.+14     	; 0x1a86 <__divmodsi4_neg2>
    1a78:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__udivmodsi4>
    1a7c:	07 fc       	sbrc	r0, 7
    1a7e:	03 d0       	rcall	.+6      	; 0x1a86 <__divmodsi4_neg2>
    1a80:	4e f4       	brtc	.+18     	; 0x1a94 <__divmodsi4_exit>
    1a82:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__negsi2>

00001a86 <__divmodsi4_neg2>:
    1a86:	50 95       	com	r21
    1a88:	40 95       	com	r20
    1a8a:	30 95       	com	r19
    1a8c:	21 95       	neg	r18
    1a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a90:	4f 4f       	sbci	r20, 0xFF	; 255
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255

00001a94 <__divmodsi4_exit>:
    1a94:	08 95       	ret

00001a96 <__negsi2>:
    1a96:	90 95       	com	r25
    1a98:	80 95       	com	r24
    1a9a:	70 95       	com	r23
    1a9c:	61 95       	neg	r22
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	08 95       	ret

00001aa6 <__muluhisi3>:
    1aa6:	0e 94 8f 0a 	call	0x151e	; 0x151e <__umulhisi3>
    1aaa:	a5 9f       	mul	r26, r21
    1aac:	90 0d       	add	r25, r0
    1aae:	b4 9f       	mul	r27, r20
    1ab0:	90 0d       	add	r25, r0
    1ab2:	a4 9f       	mul	r26, r20
    1ab4:	80 0d       	add	r24, r0
    1ab6:	91 1d       	adc	r25, r1
    1ab8:	11 24       	eor	r1, r1
    1aba:	08 95       	ret

00001abc <__mulshisi3>:
    1abc:	b7 ff       	sbrs	r27, 7
    1abe:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__muluhisi3>

00001ac2 <__mulohisi3>:
    1ac2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__muluhisi3>
    1ac6:	82 1b       	sub	r24, r18
    1ac8:	93 0b       	sbc	r25, r19
    1aca:	08 95       	ret

00001acc <__udivmodsi4>:
    1acc:	a1 e2       	ldi	r26, 0x21	; 33
    1ace:	1a 2e       	mov	r1, r26
    1ad0:	aa 1b       	sub	r26, r26
    1ad2:	bb 1b       	sub	r27, r27
    1ad4:	fd 01       	movw	r30, r26
    1ad6:	0d c0       	rjmp	.+26     	; 0x1af2 <__udivmodsi4_ep>

00001ad8 <__udivmodsi4_loop>:
    1ad8:	aa 1f       	adc	r26, r26
    1ada:	bb 1f       	adc	r27, r27
    1adc:	ee 1f       	adc	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	a2 17       	cp	r26, r18
    1ae2:	b3 07       	cpc	r27, r19
    1ae4:	e4 07       	cpc	r30, r20
    1ae6:	f5 07       	cpc	r31, r21
    1ae8:	20 f0       	brcs	.+8      	; 0x1af2 <__udivmodsi4_ep>
    1aea:	a2 1b       	sub	r26, r18
    1aec:	b3 0b       	sbc	r27, r19
    1aee:	e4 0b       	sbc	r30, r20
    1af0:	f5 0b       	sbc	r31, r21

00001af2 <__udivmodsi4_ep>:
    1af2:	66 1f       	adc	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	1a 94       	dec	r1
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <__udivmodsi4_loop>
    1afe:	60 95       	com	r22
    1b00:	70 95       	com	r23
    1b02:	80 95       	com	r24
    1b04:	90 95       	com	r25
    1b06:	9b 01       	movw	r18, r22
    1b08:	ac 01       	movw	r20, r24
    1b0a:	bd 01       	movw	r22, r26
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	08 95       	ret

00001b10 <_exit>:
    1b10:	f8 94       	cli

00001b12 <__stop_program>:
    1b12:	ff cf       	rjmp	.-2      	; 0x1b12 <__stop_program>
