
build/sync.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 17 08 	jmp	0x102e	; 0x102e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	5e 03       	fmul	r21, r22
      6a:	da 03       	fmulsu	r21, r18
      6c:	32 03       	mulsu	r19, r18
      6e:	29 03       	fmul	r18, r17
      70:	2f 03       	fmul	r18, r23
      72:	bc 03       	fmulsu	r19, r20
      74:	b1 03       	fmuls	r19, r17
      76:	3c 0a       	sbc	r3, r28
      78:	19 09       	sbc	r17, r9
      7a:	19 09       	sbc	r17, r9
      7c:	39 0a       	sbc	r3, r25
      7e:	45 0a       	sbc	r4, r21
      80:	35 0a       	sbc	r3, r21
      82:	4c 0a       	sbc	r4, r28
      84:	48 0a       	sbc	r4, r24
      86:	50 0a       	sbc	r5, r16
      88:	08 0a       	sbc	r0, r24
      8a:	da 09       	sbc	r29, r10

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e5       	ldi	r30, 0x5C	; 92
      b8:	fd e1       	ldi	r31, 0x1D	; 29
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a8 38       	cpi	r26, 0x88	; 136
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 82 0b 	call	0x1704	; 0x1704 <main>
      da:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	8e e1       	ldi	r24, 0x1E	; 30
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
    int my_timer = kilo_ticks - last_reset;
      e8:	40 91 4d 01 	lds	r20, 0x014D
      ec:	50 91 4e 01 	lds	r21, 0x014E
      f0:	60 91 4f 01 	lds	r22, 0x014F
      f4:	70 91 50 01 	lds	r23, 0x0150
      f8:	20 91 0e 01 	lds	r18, 0x010E
      fc:	30 91 0f 01 	lds	r19, 0x010F
     100:	42 1b       	sub	r20, r18
     102:	53 0b       	sbc	r21, r19
    int rx_timer = m->data[0];
     104:	fc 01       	movw	r30, r24
     106:	80 81       	ld	r24, Z
    int timer_discrepancy = my_timer - rx_timer;
     108:	48 1b       	sub	r20, r24
     10a:	51 09       	sbc	r21, r1
    
    // Reset time adjustment due to this message - to be combined with the
    // overall reset time adjustment.
    int rx_reset_time_adjustment = 0;
    
    if (timer_discrepancy > 0)
     10c:	14 16       	cp	r1, r20
     10e:	15 06       	cpc	r1, r21
     110:	b4 f4       	brge	.+44     	; 0x13e <message_rx+0x56>
    {
        // The neighbor is trailing behind: move the reset time forward
        // (reset later).
        if (timer_discrepancy < (PERIOD / 2))
     112:	49 31       	cpi	r20, 0x19	; 25
     114:	51 05       	cpc	r21, r1
     116:	5c f4       	brge	.+22     	; 0x12e <message_rx+0x46>
        }
    }

    // Combine the reset time adjustment due to this message with the overall
    // reset time adjustment.
    reset_time_adjustment = reset_time_adjustment + rx_reset_time_adjustment;
     118:	80 91 0c 01 	lds	r24, 0x010C
     11c:	90 91 0d 01 	lds	r25, 0x010D
     120:	48 0f       	add	r20, r24
     122:	59 1f       	adc	r21, r25
     124:	50 93 0d 01 	sts	0x010D, r21
     128:	40 93 0c 01 	sts	0x010C, r20
     12c:	08 95       	ret
        }
        // The neighbor is running ahead: move the reset time backward
        // (reset sooner).
        else
        {
            rx_reset_time_adjustment = - (PERIOD - timer_discrepancy) % PERIOD;
     12e:	ca 01       	movw	r24, r20
     130:	c2 97       	sbiw	r24, 0x32	; 50
     132:	62 e3       	ldi	r22, 0x32	; 50
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 99 0b 	call	0x1732	; 0x1732 <__divmodhi4>
     13a:	ac 01       	movw	r20, r24
     13c:	ed cf       	rjmp	.-38     	; 0x118 <message_rx+0x30>
        }
    }
    else if (timer_discrepancy < 0)
     13e:	41 15       	cp	r20, r1
     140:	51 05       	cpc	r21, r1
     142:	51 f3       	breq	.-44     	; 0x118 <message_rx+0x30>
    {
        // The neighbor is running ahead: move the reset time backward
        // (reset sooner).
        if (- timer_discrepancy < (PERIOD / 2))
     144:	88 27       	eor	r24, r24
     146:	99 27       	eor	r25, r25
     148:	84 1b       	sub	r24, r20
     14a:	95 0b       	sbc	r25, r21
     14c:	49 97       	sbiw	r24, 0x19	; 25
     14e:	24 f3       	brlt	.-56     	; 0x118 <message_rx+0x30>
        }
        // The neighbor is trailing behind: move the reset time forward
        // (reset later).
        else
        {
            rx_reset_time_adjustment = (PERIOD + timer_discrepancy) % PERIOD;
     150:	ca 01       	movw	r24, r20
     152:	c2 96       	adiw	r24, 0x32	; 50
     154:	62 e3       	ldi	r22, 0x32	; 50
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	0e 94 99 0b 	call	0x1732	; 0x1732 <__divmodhi4>
     15c:	ac 01       	movw	r20, r24
     15e:	dc cf       	rjmp	.-72     	; 0x118 <message_rx+0x30>

00000160 <setup>:
        }
    }
}

void setup()
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
    // Set the message.
    message.type = NORMAL;
     164:	ce e1       	ldi	r28, 0x1E	; 30
     166:	d1 e0       	ldi	r29, 0x01	; 1
     168:	19 86       	std	Y+9, r1	; 0x09
    message.data[0] = 0;
     16a:	18 82       	st	Y, r1
    message.crc = message_crc(&message);
     16c:	ce 01       	movw	r24, r28
     16e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <message_crc>
     172:	9b 87       	std	Y+11, r25	; 0x0b
     174:	8a 87       	std	Y+10, r24	; 0x0a
    // Introduce a random delay so the robots don't become instantly
    // synchronized by the run signal.
    //set_color(RGB(1, 0, 0));
    //delay(10 * rand_hard());
    //set_color(RGB(0, 0, 0));
}
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <loop>:

void loop()
{
     17c:	cf 93       	push	r28
    if (kilo_ticks >= reset_time)
     17e:	40 91 4d 01 	lds	r20, 0x014D
     182:	50 91 4e 01 	lds	r21, 0x014E
     186:	60 91 4f 01 	lds	r22, 0x014F
     18a:	70 91 50 01 	lds	r23, 0x0150
     18e:	80 91 12 01 	lds	r24, 0x0112
     192:	90 91 13 01 	lds	r25, 0x0113
     196:	a0 91 14 01 	lds	r26, 0x0114
     19a:	b0 91 15 01 	lds	r27, 0x0115
     19e:	48 17       	cp	r20, r24
     1a0:	59 07       	cpc	r21, r25
     1a2:	6a 07       	cpc	r22, r26
     1a4:	7b 07       	cpc	r23, r27
     1a6:	08 f4       	brcc	.+2      	; 0x1aa <loop+0x2e>
     1a8:	6a c0       	rjmp	.+212    	; 0x27e <loop+0x102>
    {
        reset_time_adjustment = (reset_time_adjustment / RESET_TIME_ADJUSTMENT_DIVIDER);
     1aa:	80 91 0c 01 	lds	r24, 0x010C
     1ae:	90 91 0d 01 	lds	r25, 0x010D
     1b2:	68 e7       	ldi	r22, 0x78	; 120
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	0e 94 99 0b 	call	0x1732	; 0x1732 <__divmodhi4>
        
        // Apply a cap to the absolute value of the reset time adjustment.
        if (reset_time_adjustment < - RESET_TIME_ADJUSTMENT_MAX)
     1ba:	62 3e       	cpi	r22, 0xE2	; 226
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	78 07       	cpc	r23, r24
     1c0:	0c f0       	brlt	.+2      	; 0x1c4 <loop+0x48>
     1c2:	7c c0       	rjmp	.+248    	; 0x2bc <loop+0x140>
     1c4:	82 ee       	ldi	r24, 0xE2	; 226
     1c6:	9f ef       	ldi	r25, 0xFF	; 255
     1c8:	af ef       	ldi	r26, 0xFF	; 255
     1ca:	bf ef       	ldi	r27, 0xFF	; 255
        else if (reset_time_adjustment > RESET_TIME_ADJUSTMENT_MAX)
        {
            reset_time_adjustment = RESET_TIME_ADJUSTMENT_MAX;
        }
        
        last_reset = kilo_ticks;
     1cc:	40 91 4d 01 	lds	r20, 0x014D
     1d0:	50 91 4e 01 	lds	r21, 0x014E
     1d4:	60 91 4f 01 	lds	r22, 0x014F
     1d8:	70 91 50 01 	lds	r23, 0x0150
     1dc:	40 93 0e 01 	sts	0x010E, r20
     1e0:	50 93 0f 01 	sts	0x010F, r21
     1e4:	60 93 10 01 	sts	0x0110, r22
     1e8:	70 93 11 01 	sts	0x0111, r23
        reset_time = kilo_ticks + PERIOD + reset_time_adjustment;
     1ec:	40 91 4d 01 	lds	r20, 0x014D
     1f0:	50 91 4e 01 	lds	r21, 0x014E
     1f4:	60 91 4f 01 	lds	r22, 0x014F
     1f8:	70 91 50 01 	lds	r23, 0x0150
     1fc:	4e 5c       	subi	r20, 0xCE	; 206
     1fe:	5f 4f       	sbci	r21, 0xFF	; 255
     200:	6f 4f       	sbci	r22, 0xFF	; 255
     202:	7f 4f       	sbci	r23, 0xFF	; 255
     204:	84 0f       	add	r24, r20
     206:	95 1f       	adc	r25, r21
     208:	a6 1f       	adc	r26, r22
     20a:	b7 1f       	adc	r27, r23
     20c:	80 93 12 01 	sts	0x0112, r24
     210:	90 93 13 01 	sts	0x0113, r25
     214:	a0 93 14 01 	sts	0x0114, r26
     218:	b0 93 15 01 	sts	0x0115, r27
        
        reset_time_adjustment = 0;
     21c:	10 92 0d 01 	sts	0x010D, r1
     220:	10 92 0c 01 	sts	0x010C, r1
        
        // Set the LED white and turn the motors on.

        int random_number = rand_hard();
     224:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <rand_hard>
     228:	28 2f       	mov	r18, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
        int rand_color = random_number%7;
     22c:	67 e0       	ldi	r22, 0x07	; 7
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 99 0b 	call	0x1732	; 0x1732 <__divmodhi4>
        int rand_dir = random_number%4;
     234:	c2 2f       	mov	r28, r18
     236:	c3 70       	andi	r28, 0x03	; 3
        if (rand_color == 0){
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	09 f4       	brne	.+2      	; 0x23e <loop+0xc2>
     23c:	7a c0       	rjmp	.+244    	; 0x332 <loop+0x1b6>
        	set_color(RGB(0, 0, 1));
        }
        else if (rand_color == 1){
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	91 05       	cpc	r25, r1
     242:	09 f4       	brne	.+2      	; 0x246 <loop+0xca>
     244:	90 c0       	rjmp	.+288    	; 0x366 <loop+0x1ea>
        	set_color(RGB(0, 1, 0));
        }
        else if (rand_color == 2){
     246:	82 30       	cpi	r24, 0x02	; 2
     248:	91 05       	cpc	r25, r1
     24a:	09 f4       	brne	.+2      	; 0x24e <loop+0xd2>
     24c:	90 c0       	rjmp	.+288    	; 0x36e <loop+0x1f2>
        	set_color(RGB(0, 1, 1));
        }
        else if (rand_color == 3){
     24e:	83 30       	cpi	r24, 0x03	; 3
     250:	91 05       	cpc	r25, r1
     252:	09 f4       	brne	.+2      	; 0x256 <loop+0xda>
     254:	90 c0       	rjmp	.+288    	; 0x376 <loop+0x1fa>
        	set_color(RGB(1, 0, 0));
        }
        else if (rand_color == 4){
     256:	84 30       	cpi	r24, 0x04	; 4
     258:	91 05       	cpc	r25, r1
     25a:	09 f4       	brne	.+2      	; 0x25e <loop+0xe2>
     25c:	80 c0       	rjmp	.+256    	; 0x35e <loop+0x1e2>
        	set_color(RGB(1, 0, 1));
        }
        else if (rand_color == 5){
     25e:	05 97       	sbiw	r24, 0x05	; 5
     260:	09 f4       	brne	.+2      	; 0x264 <loop+0xe8>
     262:	8d c0       	rjmp	.+282    	; 0x37e <loop+0x202>
        	set_color(RGB(1, 1, 0));
        }
        else if (rand_color == 6){
        	set_color(RGB(1, 1, 1));
     264:	85 e1       	ldi	r24, 0x15	; 21
     266:	0e 94 93 08 	call	0x1126	; 0x1126 <set_color>
        }


        if (rand_dir == 0){
     26a:	c2 30       	cpi	r28, 0x02	; 2
     26c:	08 f4       	brcc	.+2      	; 0x270 <loop+0xf4>
     26e:	48 c0       	rjmp	.+144    	; 0x300 <loop+0x184>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     270:	80 91 18 01 	lds	r24, 0x0118
     274:	90 91 19 01 	lds	r25, 0x0119
     278:	03 97       	sbiw	r24, 0x03	; 3
     27a:	09 f0       	breq	.+2      	; 0x27e <loop+0x102>
     27c:	5e c0       	rjmp	.+188    	; 0x33a <loop+0x1be>
    }*/
    
    // Only send the current time if it can fit in 1 byte (8 bits), which
    // corresponds to a maximum of 2^8 - 1 = 255. Otherwise, set the message
    // CRC to 0 so neighbors ignore the message.
    if ((kilo_ticks - last_reset) < 255)
     27e:	80 91 4d 01 	lds	r24, 0x014D
     282:	90 91 4e 01 	lds	r25, 0x014E
     286:	a0 91 4f 01 	lds	r26, 0x014F
     28a:	b0 91 50 01 	lds	r27, 0x0150
     28e:	40 91 0e 01 	lds	r20, 0x010E
     292:	50 91 0f 01 	lds	r21, 0x010F
     296:	60 91 10 01 	lds	r22, 0x0110
     29a:	70 91 11 01 	lds	r23, 0x0111
     29e:	84 1b       	sub	r24, r20
     2a0:	95 0b       	sbc	r25, r21
     2a2:	a6 0b       	sbc	r26, r22
     2a4:	b7 0b       	sbc	r27, r23
     2a6:	8f 3f       	cpi	r24, 0xFF	; 255
     2a8:	91 05       	cpc	r25, r1
     2aa:	a1 05       	cpc	r26, r1
     2ac:	b1 05       	cpc	r27, r1
     2ae:	70 f0       	brcs	.+28     	; 0x2cc <loop+0x150>
        message.data[0] = kilo_ticks - last_reset;
        message.crc = message_crc(&message);
    }
    else
    {
        message.crc = 0;
     2b0:	10 92 29 01 	sts	0x0129, r1
     2b4:	10 92 28 01 	sts	0x0128, r1
    }
}
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret
        // Apply a cap to the absolute value of the reset time adjustment.
        if (reset_time_adjustment < - RESET_TIME_ADJUSTMENT_MAX)
        {
            reset_time_adjustment = - RESET_TIME_ADJUSTMENT_MAX;
        }
        else if (reset_time_adjustment > RESET_TIME_ADJUSTMENT_MAX)
     2bc:	6f 31       	cpi	r22, 0x1F	; 31
     2be:	71 05       	cpc	r23, r1
     2c0:	d4 f0       	brlt	.+52     	; 0x2f6 <loop+0x17a>
     2c2:	8e e1       	ldi	r24, 0x1E	; 30
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	a0 e0       	ldi	r26, 0x00	; 0
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	80 cf       	rjmp	.-256    	; 0x1cc <loop+0x50>
    // Only send the current time if it can fit in 1 byte (8 bits), which
    // corresponds to a maximum of 2^8 - 1 = 255. Otherwise, set the message
    // CRC to 0 so neighbors ignore the message.
    if ((kilo_ticks - last_reset) < 255)
    {
        message.data[0] = kilo_ticks - last_reset;
     2cc:	80 91 4d 01 	lds	r24, 0x014D
     2d0:	90 91 4e 01 	lds	r25, 0x014E
     2d4:	a0 91 4f 01 	lds	r26, 0x014F
     2d8:	b0 91 50 01 	lds	r27, 0x0150
     2dc:	84 1b       	sub	r24, r20
     2de:	80 93 1e 01 	sts	0x011E, r24
        message.crc = message_crc(&message);
     2e2:	8e e1       	ldi	r24, 0x1E	; 30
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <message_crc>
     2ea:	90 93 29 01 	sts	0x0129, r25
     2ee:	80 93 28 01 	sts	0x0128, r24
    }
    else
    {
        message.crc = 0;
    }
}
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret
     2f6:	cb 01       	movw	r24, r22
     2f8:	77 0f       	add	r23, r23
     2fa:	aa 0b       	sbc	r26, r26
     2fc:	bb 0b       	sbc	r27, r27
     2fe:	66 cf       	rjmp	.-308    	; 0x1cc <loop+0x50>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     300:	80 91 18 01 	lds	r24, 0x0118
     304:	90 91 19 01 	lds	r25, 0x0119
     308:	02 97       	sbiw	r24, 0x02	; 2
     30a:	09 f4       	brne	.+2      	; 0x30e <loop+0x192>
     30c:	b8 cf       	rjmp	.-144    	; 0x27e <loop+0x102>
    {
        current_motion = new_motion;
     30e:	82 e0       	ldi	r24, 0x02	; 2
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 19 01 	sts	0x0119, r25
     316:	80 93 18 01 	sts	0x0118, r24
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            //if(both_spined == 0)
                spinup_motors();
     31a:	0e 94 77 04 	call	0x8ee	; 0x8ee <spinup_motors>
            set_motors(kilo_turn_left, 0);
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	80 91 87 01 	lds	r24, 0x0187
     324:	0e 94 72 04 	call	0x8e4	; 0x8e4 <set_motors>
            both_spined = 0;
     328:	10 92 17 01 	sts	0x0117, r1
     32c:	10 92 16 01 	sts	0x0116, r1
     330:	a6 cf       	rjmp	.-180    	; 0x27e <loop+0x102>

        int random_number = rand_hard();
        int rand_color = random_number%7;
        int rand_dir = random_number%4;
        if (rand_color == 0){
        	set_color(RGB(0, 0, 1));
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	0e 94 93 08 	call	0x1126	; 0x1126 <set_color>
     338:	98 cf       	rjmp	.-208    	; 0x26a <loop+0xee>
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
    {
        current_motion = new_motion;
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	90 93 19 01 	sts	0x0119, r25
     342:	80 93 18 01 	sts	0x0118, r24
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            //if(both_spined == 0)
                spinup_motors();
     346:	0e 94 77 04 	call	0x8ee	; 0x8ee <spinup_motors>
            set_motors(0, kilo_turn_right);
     34a:	60 91 73 01 	lds	r22, 0x0173
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0e 94 72 04 	call	0x8e4	; 0x8e4 <set_motors>
            both_spined = 0;
     354:	10 92 17 01 	sts	0x0117, r1
     358:	10 92 16 01 	sts	0x0116, r1
     35c:	90 cf       	rjmp	.-224    	; 0x27e <loop+0x102>
        }
        else if (rand_color == 3){
        	set_color(RGB(1, 0, 0));
        }
        else if (rand_color == 4){
        	set_color(RGB(1, 0, 1));
     35e:	81 e1       	ldi	r24, 0x11	; 17
     360:	0e 94 93 08 	call	0x1126	; 0x1126 <set_color>
     364:	82 cf       	rjmp	.-252    	; 0x26a <loop+0xee>
        int rand_dir = random_number%4;
        if (rand_color == 0){
        	set_color(RGB(0, 0, 1));
        }
        else if (rand_color == 1){
        	set_color(RGB(0, 1, 0));
     366:	84 e0       	ldi	r24, 0x04	; 4
     368:	0e 94 93 08 	call	0x1126	; 0x1126 <set_color>
     36c:	7e cf       	rjmp	.-260    	; 0x26a <loop+0xee>
        }
        else if (rand_color == 2){
        	set_color(RGB(0, 1, 1));
     36e:	84 e1       	ldi	r24, 0x14	; 20
     370:	0e 94 93 08 	call	0x1126	; 0x1126 <set_color>
     374:	7a cf       	rjmp	.-268    	; 0x26a <loop+0xee>
        }
        else if (rand_color == 3){
        	set_color(RGB(1, 0, 0));
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 93 08 	call	0x1126	; 0x1126 <set_color>
     37c:	76 cf       	rjmp	.-276    	; 0x26a <loop+0xee>
        }
        else if (rand_color == 4){
        	set_color(RGB(1, 0, 1));
        }
        else if (rand_color == 5){
        	set_color(RGB(1, 1, 0));
     37e:	85 e0       	ldi	r24, 0x05	; 5
     380:	0e 94 93 08 	call	0x1126	; 0x1126 <set_color>
     384:	72 cf       	rjmp	.-284    	; 0x26a <loop+0xee>

00000386 <set_motion>:
uint32_t last_reset = 0;
int reset_time_adjustment = 0;
message_t message;

void set_motion(int new_motion)
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     38a:	20 91 18 01 	lds	r18, 0x0118
     38e:	30 91 19 01 	lds	r19, 0x0119
     392:	28 17       	cp	r18, r24
     394:	39 07       	cpc	r19, r25
     396:	79 f0       	breq	.+30     	; 0x3b6 <set_motion+0x30>
     398:	ec 01       	movw	r28, r24
    {
        current_motion = new_motion;
     39a:	90 93 19 01 	sts	0x0119, r25
     39e:	80 93 18 01 	sts	0x0118, r24
        
        if (current_motion == STOP)
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	c9 f0       	breq	.+50     	; 0x3d8 <set_motion+0x52>
        {
            set_motors(0, 0);
            both_spined = 0;
        }
        else if (current_motion == FORWARD)
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	91 05       	cpc	r25, r1
     3aa:	09 f1       	breq	.+66     	; 0x3ee <set_motion+0x68>
            spinup_motors();
            //set_motors(kilo_straight_left, kilo_straight_right);
            set_motors(0,0);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	91 05       	cpc	r25, r1
     3b0:	49 f1       	breq	.+82     	; 0x404 <set_motion+0x7e>
            //if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     3b2:	03 97       	sbiw	r24, 0x03	; 3
     3b4:	19 f0       	breq	.+6      	; 0x3bc <set_motion+0x36>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            //if(both_spined == 0)
                spinup_motors();
     3bc:	0e 94 77 04 	call	0x8ee	; 0x8ee <spinup_motors>
            set_motors(0, kilo_turn_right);
     3c0:	60 91 73 01 	lds	r22, 0x0173
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <set_motors>
            both_spined = 0;
     3ca:	10 92 17 01 	sts	0x0117, r1
     3ce:	10 92 16 01 	sts	0x0116, r1
        }
    }
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <set_motors>
            both_spined = 0;
     3e0:	10 92 17 01 	sts	0x0117, r1
     3e4:	10 92 16 01 	sts	0x0116, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret
            both_spined = 0;
        }
        else if (current_motion == FORWARD)
        {
            //if(both_spined == 0)
            spinup_motors();
     3ee:	0e 94 77 04 	call	0x8ee	; 0x8ee <spinup_motors>
            //set_motors(kilo_straight_left, kilo_straight_right);
            set_motors(0,0);
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <set_motors>
            both_spined = 1;
     3fa:	d0 93 17 01 	sts	0x0117, r29
     3fe:	c0 93 16 01 	sts	0x0116, r28
     402:	d9 cf       	rjmp	.-78     	; 0x3b6 <set_motion+0x30>
        }
        else if (current_motion == LEFT)
        {
            //if(both_spined == 0)
                spinup_motors();
     404:	0e 94 77 04 	call	0x8ee	; 0x8ee <spinup_motors>
            set_motors(kilo_turn_left, 0);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	80 91 87 01 	lds	r24, 0x0187
     40e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <set_motors>
            both_spined = 0;
     412:	10 92 17 01 	sts	0x0117, r1
     416:	10 92 16 01 	sts	0x0116, r1
     41a:	cd cf       	rjmp	.-102    	; 0x3b6 <set_motion+0x30>

0000041c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     41c:	08 95       	ret

0000041e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	08 95       	ret

00000424 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     424:	08 95       	ret

00000426 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
    cli();
     434:	f8 94       	cli

    ports_off();
     436:	14 b8       	out	0x04, r1	; 4
     438:	17 b8       	out	0x07, r1	; 7
     43a:	1a b8       	out	0x0a, r1	; 10
     43c:	15 b8       	out	0x05, r1	; 5
     43e:	18 b8       	out	0x08, r1	; 8
     440:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     442:	52 9a       	sbi	0x0a, 2	; 10
     444:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     446:	14 bc       	out	0x24, r1	; 36
     448:	85 e0       	ldi	r24, 0x05	; 5
     44a:	85 bd       	out	0x25, r24	; 37
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	87 bd       	out	0x27, r24	; 39
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     456:	10 92 80 00 	sts	0x0080, r1
     45a:	10 92 81 00 	sts	0x0081, r1
     45e:	2f e8       	ldi	r18, 0x8F	; 143
     460:	3b e0       	ldi	r19, 0x0B	; 11
     462:	30 93 89 00 	sts	0x0089, r19
     466:	20 93 88 00 	sts	0x0088, r18
     46a:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     46e:	53 98       	cbi	0x0a, 3	; 10
     470:	23 98       	cbi	0x04, 3	; 4
     472:	91 ea       	ldi	r25, 0xA1	; 161
     474:	90 93 b0 00 	sts	0x00B0, r25
     478:	80 93 b1 00 	sts	0x00B1, r24
     47c:	10 92 b4 00 	sts	0x00B4, r1
     480:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     484:	8b e0       	ldi	r24, 0x0B	; 11
     486:	80 bf       	out	0x30, r24	; 48
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     48e:	86 e0       	ldi	r24, 0x06	; 6
     490:	80 93 7c 00 	sts	0x007C, r24
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	80 93 7a 00 	sts	0x007A, r24
     49a:	80 91 7a 00 	lds	r24, 0x007A
     49e:	80 64       	ori	r24, 0x40	; 64
     4a0:	80 93 7a 00 	sts	0x007A, r24
     4a4:	80 91 7a 00 	lds	r24, 0x007A
     4a8:	86 fd       	sbrc	r24, 6
     4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     4ac:	10 92 7c 00 	sts	0x007C, r1
     4b0:	83 ea       	ldi	r24, 0xA3	; 163
     4b2:	80 93 7a 00 	sts	0x007A, r24
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
    if (osccal != 0xFF)
     4c4:	8f 3f       	cpi	r24, 0xFF	; 255
     4c6:	11 f0       	breq	.+4      	; 0x4cc <kilo_init+0xa6>
        OSCCAL = osccal;
     4c8:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     4cc:	10 92 51 01 	sts	0x0151, r1
    rx_leadingbit = 1;
     4d0:	c1 e0       	ldi	r28, 0x01	; 1
     4d2:	c0 93 2a 01 	sts	0x012A, r28
    rx_leadingbyte = 1;
     4d6:	c0 93 6e 01 	sts	0x016E, r28
    rx_byteindex = 0;
     4da:	10 92 48 01 	sts	0x0148, r1
    rx_bytevalue = 0;
     4de:	10 92 82 01 	sts	0x0182, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     4e2:	80 e9       	ldi	r24, 0x90	; 144
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     4ea:	80 93 47 01 	sts	0x0147, r24
    if (tx_mask & ~TX_MASK_MAX)
     4ee:	80 91 47 01 	lds	r24, 0x0147
     4f2:	88 73       	andi	r24, 0x38	; 56
     4f4:	11 f0       	breq	.+4      	; 0x4fa <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     4f6:	c0 93 47 01 	sts	0x0147, r28
    tx_clock = 0;
     4fa:	10 92 72 01 	sts	0x0172, r1
     4fe:	10 92 71 01 	sts	0x0171, r1
    tx_increment = 255;
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	90 93 70 01 	sts	0x0170, r25
     50a:	80 93 6f 01 	sts	0x016F, r24
    kilo_ticks = 0;
     50e:	10 92 4d 01 	sts	0x014D, r1
     512:	10 92 4e 01 	sts	0x014E, r1
     516:	10 92 4f 01 	sts	0x014F, r1
     51a:	10 92 50 01 	sts	0x0150, r1
    kilo_state = IDLE;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 1d 01 	sts	0x011D, r24
    kilo_tx_period = 3906;
     524:	82 e4       	ldi	r24, 0x42	; 66
     526:	9f e0       	ldi	r25, 0x0F	; 15
     528:	90 93 81 01 	sts	0x0181, r25
     52c:	80 93 80 01 	sts	0x0180, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     530:	80 eb       	ldi	r24, 0xB0	; 176
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     538:	c8 2f       	mov	r28, r24
     53a:	81 eb       	ldi	r24, 0xB1	; 177
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     542:	2c 2f       	mov	r18, r28
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	38 2b       	or	r19, r24
     548:	30 93 84 01 	sts	0x0184, r19
     54c:	20 93 83 01 	sts	0x0183, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     558:	80 93 87 01 	sts	0x0187, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     55c:	89 e0       	ldi	r24, 0x09	; 9
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     564:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     568:	8c e0       	ldi	r24, 0x0C	; 12
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     570:	80 93 85 01 	sts	0x0185, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     574:	84 e1       	ldi	r24, 0x14	; 20
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     57c:	80 93 86 01 	sts	0x0186, r24
     580:	52 e5       	ldi	r21, 0x52	; 82
     582:	e5 2e       	mov	r14, r21
     584:	51 e0       	ldi	r21, 0x01	; 1
     586:	f5 2e       	mov	r15, r21
     588:	0b e2       	ldi	r16, 0x2B	; 43
     58a:	11 e0       	ldi	r17, 0x01	; 1
     58c:	c0 e2       	ldi	r28, 0x20	; 32
     58e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     590:	ce 01       	movw	r24, r28
     592:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     596:	d8 2e       	mov	r13, r24
     598:	ce 01       	movw	r24, r28
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     5a0:	2d 2d       	mov	r18, r13
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	32 2f       	mov	r19, r18
     5a6:	22 27       	eor	r18, r18
     5a8:	28 2b       	or	r18, r24
     5aa:	f7 01       	movw	r30, r14
     5ac:	21 93       	st	Z+, r18
     5ae:	31 93       	st	Z+, r19
     5b0:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     5b2:	ce 01       	movw	r24, r28
     5b4:	c0 96       	adiw	r24, 0x30	; 48
     5b6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     5ba:	d8 2e       	mov	r13, r24
     5bc:	ce 01       	movw	r24, r28
     5be:	c1 96       	adiw	r24, 0x31	; 49
     5c0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <eeprom_read_byte>
     5c4:	2d 2d       	mov	r18, r13
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	32 2f       	mov	r19, r18
     5ca:	22 27       	eor	r18, r18
     5cc:	28 2b       	or	r18, r24
     5ce:	f8 01       	movw	r30, r16
     5d0:	21 93       	st	Z+, r18
     5d2:	31 93       	st	Z+, r19
     5d4:	8f 01       	movw	r16, r30
     5d6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5d8:	cc 33       	cpi	r28, 0x3C	; 60
     5da:	d1 05       	cpc	r29, r1
     5dc:	c9 f6       	brne	.-78     	; 0x590 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     5de:	78 94       	sei
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	08 95       	ret

000005f0 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	8f 93       	push	r24
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	a8 95       	wdr
     602:	80 91 60 00 	lds	r24, 0x0060
     606:	88 61       	ori	r24, 0x18	; 24
     608:	80 93 60 00 	sts	0x0060, r24
     60c:	10 92 60 00 	sts	0x0060, r1
     610:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     612:	8f 91       	pop	r24
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     61e:	3c 01       	movw	r6, r24
     620:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     622:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     624:	99 24       	eor	r9, r9
     626:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     628:	84 e0       	ldi	r24, 0x04	; 4
     62a:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     62c:	96 e0       	ldi	r25, 0x06	; 6
     62e:	a9 2e       	mov	r10, r25
     630:	23 e8       	ldi	r18, 0x83	; 131
     632:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     634:	38 e1       	ldi	r19, 0x18	; 24
     636:	d3 2e       	mov	r13, r19
     638:	49 e2       	ldi	r20, 0x29	; 41
     63a:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     63c:	90 91 1d 01 	lds	r25, 0x011D
     640:	e9 2f       	mov	r30, r25
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e7 30       	cpi	r30, 0x07	; 7
     646:	f1 05       	cpc	r31, r1
     648:	c8 f7       	brcc	.-14     	; 0x63c <kilo_start+0x1e>
     64a:	ec 5c       	subi	r30, 0xCC	; 204
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     652:	11 23       	and	r17, r17
     654:	09 f4       	brne	.+2      	; 0x658 <kilo_start+0x3a>
     656:	fc c0       	rjmp	.+504    	; 0x850 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     658:	c0 92 1d 01 	sts	0x011D, r12
     65c:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     65e:	fe 01       	movw	r30, r28
     660:	09 95       	icall
                break;
     662:	ec cf       	rjmp	.-40     	; 0x63c <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     664:	80 91 51 01 	lds	r24, 0x0151
     668:	81 11       	cpse	r24, r1
     66a:	eb c0       	rjmp	.+470    	; 0x842 <kilo_start+0x224>
        cli();                                    // disable interrupts
     66c:	f8 94       	cli
        adc_setup_conversion(6);
     66e:	a0 92 7c 00 	sts	0x007C, r10
     672:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     676:	80 91 7a 00 	lds	r24, 0x007A
     67a:	80 64       	ori	r24, 0x40	; 64
     67c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     680:	90 91 7a 00 	lds	r25, 0x007A
     684:	96 fd       	sbrc	r25, 6
     686:	fc cf       	rjmp	.-8      	; 0x680 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     688:	80 91 78 00 	lds	r24, 0x0078
     68c:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     690:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     692:	8b 3a       	cpi	r24, 0xAB	; 171
     694:	e2 e0       	ldi	r30, 0x02	; 2
     696:	9e 07       	cpc	r25, r30
     698:	0c f0       	brlt	.+2      	; 0x69c <kilo_start+0x7e>
     69a:	ed c0       	rjmp	.+474    	; 0x876 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     69c:	89 38       	cpi	r24, 0x89	; 137
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	9f 07       	cpc	r25, r31
     6a2:	0c f0       	brlt	.+2      	; 0x6a6 <kilo_start+0x88>
     6a4:	ef c0       	rjmp	.+478    	; 0x884 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     6a6:	87 36       	cpi	r24, 0x67	; 103
     6a8:	92 40       	sbci	r25, 0x02	; 2
     6aa:	0c f4       	brge	.+2      	; 0x6ae <kilo_start+0x90>
     6ac:	ca c0       	rjmp	.+404    	; 0x842 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6ae:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6b0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6b2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6b4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6b6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6b8:	3c 98       	cbi	0x07, 4	; 7
     6ba:	c0 cf       	rjmp	.-128    	; 0x63c <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     6bc:	f8 94       	cli
                acomp_off();
     6be:	80 b7       	in	r24, 0x30	; 48
     6c0:	87 7f       	andi	r24, 0xF7	; 247
     6c2:	80 bf       	out	0x30, r24	; 48
                adc_off();
     6c4:	80 91 7a 00 	lds	r24, 0x007A
     6c8:	8f 77       	andi	r24, 0x7F	; 127
     6ca:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     6ce:	14 b8       	out	0x04, r1	; 4
     6d0:	17 b8       	out	0x07, r1	; 7
     6d2:	1a b8       	out	0x0a, r1	; 10
     6d4:	15 b8       	out	0x05, r1	; 5
     6d6:	18 b8       	out	0x08, r1	; 8
     6d8:	1b b8       	out	0x0b, r1	; 11
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	a8 95       	wdr
     6e0:	d0 92 60 00 	sts	0x0060, r13
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     6ea:	80 91 60 00 	lds	r24, 0x0060
     6ee:	80 64       	ori	r24, 0x40	; 64
     6f0:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     6f4:	93 b7       	in	r25, 0x33	; 51
     6f6:	91 7f       	andi	r25, 0xF1	; 241
     6f8:	94 60       	ori	r25, 0x04	; 4
     6fa:	93 bf       	out	0x33, r25	; 51
                cli();
     6fc:	f8 94       	cli
                sleep_enable();
     6fe:	83 b7       	in	r24, 0x33	; 51
     700:	81 60       	ori	r24, 0x01	; 1
     702:	83 bf       	out	0x33, r24	; 51
                sei();
     704:	78 94       	sei
                sleep_cpu();
     706:	88 95       	sleep
                sleep_disable();
     708:	83 b7       	in	r24, 0x33	; 51
     70a:	8e 7f       	andi	r24, 0xFE	; 254
     70c:	83 bf       	out	0x33, r24	; 51
                sei();
     70e:	78 94       	sei
                rx_busy = 0;
     710:	10 92 51 01 	sts	0x0151, r1
                ports_on();
     714:	52 9a       	sbi	0x0a, 2	; 10
     716:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     718:	80 91 7a 00 	lds	r24, 0x007A
     71c:	80 68       	ori	r24, 0x80	; 128
     71e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     722:	87 e5       	ldi	r24, 0x57	; 87
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <kilo_start+0x108>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <kilo_start+0x10e>
     72c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     72e:	80 b7       	in	r24, 0x30	; 48
     730:	88 61       	ori	r24, 0x18	; 24
     732:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     734:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     736:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     738:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     73a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     73c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     73e:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     740:	ef e1       	ldi	r30, 0x1F	; 31
     742:	fe e4       	ldi	r31, 0x4E	; 78
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <kilo_start+0x126>
     748:	00 c0       	rjmp	.+0      	; 0x74a <kilo_start+0x12c>
     74a:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     74c:	80 91 51 01 	lds	r24, 0x0151
     750:	81 11       	cpse	r24, r1
     752:	81 c0       	rjmp	.+258    	; 0x856 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     754:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     756:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     758:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     75a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     75c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     75e:	3c 98       	cbi	0x07, 4	; 7
     760:	6d cf       	rjmp	.-294    	; 0x63c <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     762:	80 91 1b 01 	lds	r24, 0x011B
     766:	81 11       	cpse	r24, r1
     768:	41 c0       	rjmp	.+130    	; 0x7ec <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     76a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     76e:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     772:	10 92 1c 01 	sts	0x011C, r1
     776:	62 cf       	rjmp	.-316    	; 0x63c <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     778:	48 99       	sbic	0x09, 0	; 9
     77a:	ec cf       	rjmp	.-40     	; 0x754 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     77c:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     77e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     780:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     782:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     784:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     786:	3c 98       	cbi	0x07, 4	; 7
     788:	8f ec       	ldi	r24, 0xCF	; 207
     78a:	97 e0       	ldi	r25, 0x07	; 7
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <kilo_start+0x16e>
     790:	00 c0       	rjmp	.+0      	; 0x792 <kilo_start+0x174>
     792:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     794:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     796:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     798:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     79a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     79c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     79e:	3c 98       	cbi	0x07, 4	; 7
     7a0:	9f ef       	ldi	r25, 0xFF	; 255
     7a2:	e1 ee       	ldi	r30, 0xE1	; 225
     7a4:	f4 e0       	ldi	r31, 0x04	; 4
     7a6:	91 50       	subi	r25, 0x01	; 1
     7a8:	e0 40       	sbci	r30, 0x00	; 0
     7aa:	f0 40       	sbci	r31, 0x00	; 0
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <kilo_start+0x188>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <kilo_start+0x192>
     7b0:	00 00       	nop
     7b2:	44 cf       	rjmp	.-376    	; 0x63c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7b4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7b6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7b8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7ba:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7bc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7be:	3c 98       	cbi	0x07, 4	; 7
     7c0:	ef ec       	ldi	r30, 0xCF	; 207
     7c2:	f7 e0       	ldi	r31, 0x07	; 7
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <kilo_start+0x1a6>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <kilo_start+0x1ac>
     7ca:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7cc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7ce:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7d0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7d2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7d4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7d6:	3c 98       	cbi	0x07, 4	; 7
     7d8:	ff ef       	ldi	r31, 0xFF	; 255
     7da:	21 ee       	ldi	r18, 0xE1	; 225
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	f1 50       	subi	r31, 0x01	; 1
     7e0:	20 40       	sbci	r18, 0x00	; 0
     7e2:	80 40       	sbci	r24, 0x00	; 0
     7e4:	e1 f7       	brne	.-8      	; 0x7de <kilo_start+0x1c0>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <kilo_start+0x1ca>
     7e8:	00 00       	nop
     7ea:	28 cf       	rjmp	.-432    	; 0x63c <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     7ec:	90 91 1b 01 	lds	r25, 0x011B
     7f0:	80 91 1c 01 	lds	r24, 0x011C
     7f4:	98 17       	cp	r25, r24
     7f6:	09 f4       	brne	.+2      	; 0x7fa <kilo_start+0x1dc>
     7f8:	21 cf       	rjmp	.-446    	; 0x63c <kilo_start+0x1e>
                        prev_motion = cur_motion;
     7fa:	80 91 1b 01 	lds	r24, 0x011B
     7fe:	80 93 1c 01 	sts	0x011C, r24
                        if (cur_motion == MOVE_LEFT) {
     802:	80 91 1b 01 	lds	r24, 0x011B
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f4       	brne	.+2      	; 0x80c <kilo_start+0x1ee>
     80a:	50 c0       	rjmp	.+160    	; 0x8ac <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     80c:	80 91 1b 01 	lds	r24, 0x011B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     810:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     814:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	d9 f1       	breq	.+118    	; 0x892 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     81c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     820:	90 92 b4 00 	sts	0x00B4, r9
     824:	8f e2       	ldi	r24, 0x2F	; 47
     826:	95 e7       	ldi	r25, 0x75	; 117
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <kilo_start+0x20a>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <kilo_start+0x210>
     82e:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     830:	80 91 86 01 	lds	r24, 0x0186
     834:	90 91 85 01 	lds	r25, 0x0185
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     838:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     83c:	80 93 b4 00 	sts	0x00B4, r24
     840:	fd ce       	rjmp	.-518    	; 0x63c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     842:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     844:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     846:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     848:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     84a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     84c:	3c 98       	cbi	0x07, 4	; 7
     84e:	f6 ce       	rjmp	.-532    	; 0x63c <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     850:	f3 01       	movw	r30, r6
     852:	09 95       	icall
     854:	01 cf       	rjmp	.-510    	; 0x658 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     856:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     858:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     85a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     85c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     85e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     860:	3c 98       	cbi	0x07, 4	; 7
     862:	ff ef       	ldi	r31, 0xFF	; 255
     864:	20 e7       	ldi	r18, 0x70	; 112
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	f1 50       	subi	r31, 0x01	; 1
     86a:	20 40       	sbci	r18, 0x00	; 0
     86c:	80 40       	sbci	r24, 0x00	; 0
     86e:	e1 f7       	brne	.-8      	; 0x868 <kilo_start+0x24a>
     870:	00 c0       	rjmp	.+0      	; 0x872 <kilo_start+0x254>
     872:	00 00       	nop
     874:	6f cf       	rjmp	.-290    	; 0x754 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     876:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     878:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     87a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     87c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     87e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     880:	3c 98       	cbi	0x07, 4	; 7
     882:	dc ce       	rjmp	.-584    	; 0x63c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     884:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     886:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     888:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     88a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     88c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     88e:	3c 9a       	sbi	0x07, 4	; 7
     890:	d5 ce       	rjmp	.-598    	; 0x63c <kilo_start+0x1e>
     892:	ef e2       	ldi	r30, 0x2F	; 47
     894:	f5 e7       	ldi	r31, 0x75	; 117
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <kilo_start+0x278>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <kilo_start+0x27e>
     89c:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     89e:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8a2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     8a6:	80 93 b4 00 	sts	0x00B4, r24
     8aa:	c8 ce       	rjmp	.-624    	; 0x63c <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8ac:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     8b0:	10 92 b4 00 	sts	0x00B4, r1
     8b4:	8f e2       	ldi	r24, 0x2F	; 47
     8b6:	95 e7       	ldi	r25, 0x75	; 117
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <kilo_start+0x29a>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <kilo_start+0x2a0>
     8be:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     8c0:	80 91 87 01 	lds	r24, 0x0187
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8c4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8c8:	10 92 b4 00 	sts	0x00B4, r1
     8cc:	b7 ce       	rjmp	.-658    	; 0x63c <kilo_start+0x1e>

000008ce <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     8ce:	07 c0       	rjmp	.+14     	; 0x8de <delay+0x10>
     8d0:	ef ec       	ldi	r30, 0xCF	; 207
     8d2:	f7 e0       	ldi	r31, 0x07	; 7
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <delay+0x6>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <delay+0xc>
     8da:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     8dc:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	b9 f7       	brne	.-18     	; 0x8d0 <delay+0x2>
     8e2:	08 95       	ret

000008e4 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8e4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8e8:	60 93 b4 00 	sts	0x00B4, r22
     8ec:	08 95       	ret

000008ee <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8f4:	80 93 b4 00 	sts	0x00B4, r24
     8f8:	8f e0       	ldi	r24, 0x0F	; 15
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	ef ec       	ldi	r30, 0xCF	; 207
     8fe:	f7 e0       	ldi	r31, 0x07	; 7
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x1>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
     908:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     90a:	c1 f7       	brne	.-16     	; 0x8fc <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     90c:	08 95       	ret

0000090e <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     90e:	80 91 51 01 	lds	r24, 0x0151
     912:	81 11       	cpse	r24, r1
     914:	1e c0       	rjmp	.+60     	; 0x952 <get_ambientlight+0x44>
        cli();
     916:	f8 94       	cli
        adc_setup_conversion(7);
     918:	87 e0       	ldi	r24, 0x07	; 7
     91a:	80 93 7c 00 	sts	0x007C, r24
     91e:	83 e8       	ldi	r24, 0x83	; 131
     920:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     924:	80 91 7a 00 	lds	r24, 0x007A
     928:	80 64       	ori	r24, 0x40	; 64
     92a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     92e:	80 91 7a 00 	lds	r24, 0x007A
     932:	86 fd       	sbrc	r24, 6
     934:	fc cf       	rjmp	.-8      	; 0x92e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     936:	80 91 78 00 	lds	r24, 0x0078
     93a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     93e:	10 92 7c 00 	sts	0x007C, r1
     942:	23 ea       	ldi	r18, 0xA3	; 163
     944:	20 93 7a 00 	sts	0x007A, r18
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     94e:	78 94       	sei
     950:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     956:	08 95       	ret

00000958 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     958:	80 91 51 01 	lds	r24, 0x0151
     95c:	81 11       	cpse	r24, r1
     95e:	1e c0       	rjmp	.+60     	; 0x99c <get_temperature+0x44>
        cli();
     960:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     962:	88 ec       	ldi	r24, 0xC8	; 200
     964:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     968:	87 e8       	ldi	r24, 0x87	; 135
     96a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     96e:	80 91 7a 00 	lds	r24, 0x007A
     972:	80 64       	ori	r24, 0x40	; 64
     974:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     978:	80 91 7a 00 	lds	r24, 0x007A
     97c:	86 fd       	sbrc	r24, 6
     97e:	fc cf       	rjmp	.-8      	; 0x978 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     980:	80 91 78 00 	lds	r24, 0x0078
     984:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     988:	10 92 7c 00 	sts	0x007C, r1
     98c:	23 ea       	ldi	r18, 0xA3	; 163
     98e:	20 93 7a 00 	sts	0x007A, r18
     992:	21 e0       	ldi	r18, 0x01	; 1
     994:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     998:	78 94       	sei
     99a:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     9a0:	08 95       	ret

000009a2 <rand_hard>:

uint8_t rand_hard() {
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	e0 e0       	ldi	r30, 0x00	; 0
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     9b0:	03 ea       	ldi	r16, 0xA3	; 163
     9b2:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     9b4:	d6 e0       	ldi	r29, 0x06	; 6
     9b6:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     9b8:	a1 e0       	ldi	r26, 0x01	; 1
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     9bc:	60 e8       	ldi	r22, 0x80	; 128
     9be:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     9c0:	f8 94       	cli
            adc_setup_conversion(6);
     9c2:	d0 93 7c 00 	sts	0x007C, r29
     9c6:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     9ca:	90 91 7a 00 	lds	r25, 0x007A
     9ce:	90 64       	ori	r25, 0x40	; 64
     9d0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9d4:	90 91 7a 00 	lds	r25, 0x007A
     9d8:	96 fd       	sbrc	r25, 6
     9da:	fc cf       	rjmp	.-8      	; 0x9d4 <rand_hard+0x32>
            a = ADCW&0x1;
     9dc:	20 91 78 00 	lds	r18, 0x0078
     9e0:	30 91 79 00 	lds	r19, 0x0079
     9e4:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     9e6:	90 91 7a 00 	lds	r25, 0x007A
     9ea:	90 64       	ori	r25, 0x40	; 64
     9ec:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9f0:	90 91 7a 00 	lds	r25, 0x007A
     9f4:	96 fd       	sbrc	r25, 6
     9f6:	fc cf       	rjmp	.-8      	; 0x9f0 <rand_hard+0x4e>
            b = ADCW&0x1;
     9f8:	40 91 78 00 	lds	r20, 0x0078
     9fc:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     a00:	10 92 7c 00 	sts	0x007C, r1
     a04:	00 93 7a 00 	sts	0x007A, r16
     a08:	10 93 7b 00 	sts	0x007B, r17
            sei();
     a0c:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     a0e:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     a10:	24 13       	cpse	r18, r20
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <rand_hard+0x78>
     a14:	61 50       	subi	r22, 0x01	; 1
     a16:	71 09       	sbc	r23, r1
     a18:	99 f6       	brne	.-90     	; 0x9c0 <rand_hard+0x1e>
        if (a)
     a1a:	22 23       	and	r18, r18
     a1c:	39 f0       	breq	.+14     	; 0xa2c <rand_hard+0x8a>
            num |= (1<<i);
     a1e:	9d 01       	movw	r18, r26
     a20:	0e 2e       	mov	r0, r30
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <rand_hard+0x84>
     a24:	22 0f       	add	r18, r18
     a26:	0a 94       	dec	r0
     a28:	ea f7       	brpl	.-6      	; 0xa24 <rand_hard+0x82>
     a2a:	82 2b       	or	r24, r18
     a2c:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     a2e:	e8 30       	cpi	r30, 0x08	; 8
     a30:	f1 05       	cpc	r31, r1
     a32:	09 f0       	breq	.+2      	; 0xa36 <rand_hard+0x94>
     a34:	c3 cf       	rjmp	.-122    	; 0x9bc <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a40:	80 91 00 01 	lds	r24, 0x0100
     a44:	98 2f       	mov	r25, r24
     a46:	99 0f       	add	r25, r25
     a48:	99 0f       	add	r25, r25
     a4a:	99 0f       	add	r25, r25
     a4c:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a4e:	90 91 1a 01 	lds	r25, 0x011A
     a52:	21 e0       	ldi	r18, 0x01	; 1
     a54:	29 0f       	add	r18, r25
     a56:	20 93 1a 01 	sts	0x011A, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     a5a:	28 2f       	mov	r18, r24
     a5c:	22 95       	swap	r18
     a5e:	26 95       	lsr	r18
     a60:	27 70       	andi	r18, 0x07	; 7
     a62:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     a64:	96 95       	lsr	r25
     a66:	96 95       	lsr	r25
     a68:	89 27       	eor	r24, r25
     a6a:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     a6e:	08 95       	ret

00000a70 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a70:	80 93 00 01 	sts	0x0100, r24
     a74:	08 95       	ret

00000a76 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a76:	80 91 51 01 	lds	r24, 0x0151
     a7a:	81 11       	cpse	r24, r1
     a7c:	16 c0       	rjmp	.+44     	; 0xaaa <get_voltage+0x34>
        cli();                                    // disable interrupts
     a7e:	f8 94       	cli
        adc_setup_conversion(6);
     a80:	86 e0       	ldi	r24, 0x06	; 6
     a82:	80 93 7c 00 	sts	0x007C, r24
     a86:	83 e8       	ldi	r24, 0x83	; 131
     a88:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a8c:	80 91 7a 00 	lds	r24, 0x007A
     a90:	80 64       	ori	r24, 0x40	; 64
     a92:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a96:	80 91 7a 00 	lds	r24, 0x007A
     a9a:	86 fd       	sbrc	r24, 6
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a9e:	80 91 78 00 	lds	r24, 0x0078
     aa2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     aa6:	78 94       	sei
     aa8:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     aae:	08 95       	ret

00000ab0 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     ab0:	2f 92       	push	r2
     ab2:	3f 92       	push	r3
     ab4:	4f 92       	push	r4
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <estimate_distance+0x26>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <estimate_distance+0x28>
     ad8:	00 d0       	rcall	.+0      	; 0xada <estimate_distance+0x2a>
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     ae0:	dc 01       	movw	r26, r24
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	0d 90       	ld	r0, X+
     ae6:	bc 91       	ld	r27, X
     ae8:	a0 2d       	mov	r26, r0
     aea:	be 83       	std	Y+6, r27	; 0x06
     aec:	ad 83       	std	Y+5, r26	; 0x05
     aee:	a4 38       	cpi	r26, 0x84	; 132
     af0:	e3 e0       	ldi	r30, 0x03	; 3
     af2:	be 07       	cpc	r27, r30
     af4:	0c f0       	brlt	.+2      	; 0xaf8 <estimate_distance+0x48>
     af6:	c9 c0       	rjmp	.+402    	; 0xc8a <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     af8:	80 91 2b 01 	lds	r24, 0x012B
     afc:	90 91 2c 01 	lds	r25, 0x012C
     b00:	8a 17       	cp	r24, r26
     b02:	9b 07       	cpc	r25, r27
     b04:	08 f4       	brcc	.+2      	; 0xb08 <estimate_distance+0x58>
     b06:	37 c1       	rjmp	.+622    	; 0xd76 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     b08:	00 91 2d 01 	lds	r16, 0x012D
     b0c:	10 91 2e 01 	lds	r17, 0x012E
     b10:	0a 17       	cp	r16, r26
     b12:	1b 07       	cpc	r17, r27
     b14:	08 f4       	brcc	.+2      	; 0xb18 <estimate_distance+0x68>
     b16:	2f c2       	rjmp	.+1118   	; 0xf76 <estimate_distance+0x4c6>
     b18:	00 91 2f 01 	lds	r16, 0x012F
     b1c:	10 91 30 01 	lds	r17, 0x0130
     b20:	0a 17       	cp	r16, r26
     b22:	1b 07       	cpc	r17, r27
     b24:	08 f4       	brcc	.+2      	; 0xb28 <estimate_distance+0x78>
     b26:	2f c2       	rjmp	.+1118   	; 0xf86 <estimate_distance+0x4d6>
     b28:	00 91 31 01 	lds	r16, 0x0131
     b2c:	10 91 32 01 	lds	r17, 0x0132
     b30:	0a 17       	cp	r16, r26
     b32:	1b 07       	cpc	r17, r27
     b34:	08 f4       	brcc	.+2      	; 0xb38 <estimate_distance+0x88>
     b36:	2f c2       	rjmp	.+1118   	; 0xf96 <estimate_distance+0x4e6>
     b38:	00 91 33 01 	lds	r16, 0x0133
     b3c:	10 91 34 01 	lds	r17, 0x0134
     b40:	0a 17       	cp	r16, r26
     b42:	1b 07       	cpc	r17, r27
     b44:	08 f4       	brcc	.+2      	; 0xb48 <estimate_distance+0x98>
     b46:	2f c2       	rjmp	.+1118   	; 0xfa6 <estimate_distance+0x4f6>
     b48:	00 91 35 01 	lds	r16, 0x0135
     b4c:	10 91 36 01 	lds	r17, 0x0136
     b50:	0a 17       	cp	r16, r26
     b52:	1b 07       	cpc	r17, r27
     b54:	08 f4       	brcc	.+2      	; 0xb58 <estimate_distance+0xa8>
     b56:	ef c1       	rjmp	.+990    	; 0xf36 <estimate_distance+0x486>
     b58:	00 91 37 01 	lds	r16, 0x0137
     b5c:	10 91 38 01 	lds	r17, 0x0138
     b60:	0a 17       	cp	r16, r26
     b62:	1b 07       	cpc	r17, r27
     b64:	08 f4       	brcc	.+2      	; 0xb68 <estimate_distance+0xb8>
     b66:	27 c2       	rjmp	.+1102   	; 0xfb6 <estimate_distance+0x506>
     b68:	00 91 39 01 	lds	r16, 0x0139
     b6c:	10 91 3a 01 	lds	r17, 0x013A
     b70:	0a 17       	cp	r16, r26
     b72:	1b 07       	cpc	r17, r27
     b74:	08 f4       	brcc	.+2      	; 0xb78 <estimate_distance+0xc8>
     b76:	27 c2       	rjmp	.+1102   	; 0xfc6 <estimate_distance+0x516>
     b78:	00 91 3b 01 	lds	r16, 0x013B
     b7c:	10 91 3c 01 	lds	r17, 0x013C
     b80:	0a 17       	cp	r16, r26
     b82:	1b 07       	cpc	r17, r27
     b84:	08 f4       	brcc	.+2      	; 0xb88 <estimate_distance+0xd8>
     b86:	27 c2       	rjmp	.+1102   	; 0xfd6 <estimate_distance+0x526>
     b88:	00 91 3d 01 	lds	r16, 0x013D
     b8c:	10 91 3e 01 	lds	r17, 0x013E
     b90:	0a 17       	cp	r16, r26
     b92:	1b 07       	cpc	r17, r27
     b94:	08 f4       	brcc	.+2      	; 0xb98 <estimate_distance+0xe8>
     b96:	27 c2       	rjmp	.+1102   	; 0xfe6 <estimate_distance+0x536>
     b98:	00 91 3f 01 	lds	r16, 0x013F
     b9c:	10 91 40 01 	lds	r17, 0x0140
     ba0:	0a 17       	cp	r16, r26
     ba2:	1b 07       	cpc	r17, r27
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <estimate_distance+0xf8>
     ba6:	27 c2       	rjmp	.+1102   	; 0xff6 <estimate_distance+0x546>
     ba8:	00 91 41 01 	lds	r16, 0x0141
     bac:	10 91 42 01 	lds	r17, 0x0142
     bb0:	0a 17       	cp	r16, r26
     bb2:	1b 07       	cpc	r17, r27
     bb4:	08 f4       	brcc	.+2      	; 0xbb8 <estimate_distance+0x108>
     bb6:	23 c2       	rjmp	.+1094   	; 0xffe <estimate_distance+0x54e>
     bb8:	00 91 43 01 	lds	r16, 0x0143
     bbc:	10 91 44 01 	lds	r17, 0x0144
     bc0:	0a 17       	cp	r16, r26
     bc2:	1b 07       	cpc	r17, r27
     bc4:	08 f4       	brcc	.+2      	; 0xbc8 <estimate_distance+0x118>
     bc6:	23 c2       	rjmp	.+1094   	; 0x100e <estimate_distance+0x55e>
     bc8:	00 91 45 01 	lds	r16, 0x0145
     bcc:	10 91 46 01 	lds	r17, 0x0146
     bd0:	0a 17       	cp	r16, r26
     bd2:	1b 07       	cpc	r17, r27
     bd4:	08 f4       	brcc	.+2      	; 0xbd8 <estimate_distance+0x128>
     bd6:	23 c2       	rjmp	.+1094   	; 0x101e <estimate_distance+0x56e>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	a0 ed       	ldi	r26, 0xD0	; 208
     bde:	b0 e4       	ldi	r27, 0x40	; 64
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	9a 83       	std	Y+2, r25	; 0x02
     be4:	ab 83       	std	Y+3, r26	; 0x03
     be6:	bc 83       	std	Y+4, r27	; 0x04
     be8:	4c e0       	ldi	r20, 0x0C	; 12
     bea:	e4 2e       	mov	r14, r20
     bec:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bee:	f7 01       	movw	r30, r14
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	e5 5d       	subi	r30, 0xD5	; 213
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	80 81       	ld	r24, Z
     bfa:	91 81       	ldd	r25, Z+1	; 0x01
     bfc:	b8 01       	movw	r22, r16
     bfe:	68 1b       	sub	r22, r24
     c00:	79 0b       	sbc	r23, r25
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__addsf3>
     c12:	6b 01       	movw	r12, r22
     c14:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c16:	ad 81       	ldd	r26, Y+5	; 0x05
     c18:	be 81       	ldd	r27, Y+6	; 0x06
     c1a:	bd 01       	movw	r22, r26
     c1c:	bb 0f       	add	r27, r27
     c1e:	88 0b       	sbc	r24, r24
     c20:	99 0b       	sbc	r25, r25
     c22:	0e 94 ed 0c 	call	0x19da	; 0x19da <__floatsisf>
     c26:	4b 01       	movw	r8, r22
     c28:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     c2a:	b8 01       	movw	r22, r16
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     c34:	2b 01       	movw	r4, r22
     c36:	3c 01       	movw	r6, r24
     c38:	29 81       	ldd	r18, Y+1	; 0x01
     c3a:	3a 81       	ldd	r19, Y+2	; 0x02
     c3c:	4b 81       	ldd	r20, Y+3	; 0x03
     c3e:	5c 81       	ldd	r21, Y+4	; 0x04
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
     c48:	9b 01       	movw	r18, r22
     c4a:	ac 01       	movw	r20, r24
     c4c:	c3 01       	movw	r24, r6
     c4e:	b2 01       	movw	r22, r4
     c50:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__subsf3>
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c58:	c5 01       	movw	r24, r10
     c5a:	b4 01       	movw	r22, r8
     c5c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__subsf3>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e2       	ldi	r20, 0x20	; 32
     c66:	51 e4       	ldi	r21, 0x41	; 65
     c68:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
            b=((int)((int)b/(int)slope));
     c6c:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixsfsi>
     c70:	8b 01       	movw	r16, r22
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixsfsi>
     c7a:	ab 01       	movw	r20, r22
     c7c:	bc 01       	movw	r22, r24
     c7e:	c8 01       	movw	r24, r16
     c80:	ba 01       	movw	r22, r20
     c82:	0e 94 99 0b 	call	0x1732	; 0x1732 <__divmodhi4>
            dist_high=b;
     c86:	16 2f       	mov	r17, r22
     c88:	77 c0       	rjmp	.+238    	; 0xd78 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c8a:	dc 01       	movw	r26, r24
     c8c:	cd 90       	ld	r12, X+
     c8e:	dc 90       	ld	r13, X
     c90:	80 91 52 01 	lds	r24, 0x0152
     c94:	90 91 53 01 	lds	r25, 0x0153
     c98:	8c 15       	cp	r24, r12
     c9a:	9d 05       	cpc	r25, r13
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <estimate_distance+0x1f0>
     c9e:	8c c0       	rjmp	.+280    	; 0xdb8 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     ca0:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ca2:	e0 90 54 01 	lds	r14, 0x0154
     ca6:	f0 90 55 01 	lds	r15, 0x0155
     caa:	ec 14       	cp	r14, r12
     cac:	fd 04       	cpc	r15, r13
     cae:	08 f4       	brcc	.+2      	; 0xcb2 <estimate_distance+0x202>
     cb0:	5e c1       	rjmp	.+700    	; 0xf6e <estimate_distance+0x4be>
     cb2:	e0 90 56 01 	lds	r14, 0x0156
     cb6:	f0 90 57 01 	lds	r15, 0x0157
     cba:	ec 14       	cp	r14, r12
     cbc:	fd 04       	cpc	r15, r13
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <estimate_distance+0x212>
     cc0:	5e c1       	rjmp	.+700    	; 0xf7e <estimate_distance+0x4ce>
     cc2:	e0 90 58 01 	lds	r14, 0x0158
     cc6:	f0 90 59 01 	lds	r15, 0x0159
     cca:	ec 14       	cp	r14, r12
     ccc:	fd 04       	cpc	r15, r13
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <estimate_distance+0x222>
     cd0:	5e c1       	rjmp	.+700    	; 0xf8e <estimate_distance+0x4de>
     cd2:	e0 90 5a 01 	lds	r14, 0x015A
     cd6:	f0 90 5b 01 	lds	r15, 0x015B
     cda:	ec 14       	cp	r14, r12
     cdc:	fd 04       	cpc	r15, r13
     cde:	08 f4       	brcc	.+2      	; 0xce2 <estimate_distance+0x232>
     ce0:	5e c1       	rjmp	.+700    	; 0xf9e <estimate_distance+0x4ee>
     ce2:	e0 90 5c 01 	lds	r14, 0x015C
     ce6:	f0 90 5d 01 	lds	r15, 0x015D
     cea:	ec 14       	cp	r14, r12
     cec:	fd 04       	cpc	r15, r13
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <estimate_distance+0x242>
     cf0:	c3 c0       	rjmp	.+390    	; 0xe78 <estimate_distance+0x3c8>
     cf2:	e0 90 5e 01 	lds	r14, 0x015E
     cf6:	f0 90 5f 01 	lds	r15, 0x015F
     cfa:	ec 14       	cp	r14, r12
     cfc:	fd 04       	cpc	r15, r13
     cfe:	08 f4       	brcc	.+2      	; 0xd02 <estimate_distance+0x252>
     d00:	56 c1       	rjmp	.+684    	; 0xfae <estimate_distance+0x4fe>
     d02:	e0 90 60 01 	lds	r14, 0x0160
     d06:	f0 90 61 01 	lds	r15, 0x0161
     d0a:	ec 14       	cp	r14, r12
     d0c:	fd 04       	cpc	r15, r13
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <estimate_distance+0x262>
     d10:	56 c1       	rjmp	.+684    	; 0xfbe <estimate_distance+0x50e>
     d12:	e0 90 62 01 	lds	r14, 0x0162
     d16:	f0 90 63 01 	lds	r15, 0x0163
     d1a:	ec 14       	cp	r14, r12
     d1c:	fd 04       	cpc	r15, r13
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <estimate_distance+0x272>
     d20:	56 c1       	rjmp	.+684    	; 0xfce <estimate_distance+0x51e>
     d22:	e0 90 64 01 	lds	r14, 0x0164
     d26:	f0 90 65 01 	lds	r15, 0x0165
     d2a:	ec 14       	cp	r14, r12
     d2c:	fd 04       	cpc	r15, r13
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <estimate_distance+0x282>
     d30:	56 c1       	rjmp	.+684    	; 0xfde <estimate_distance+0x52e>
     d32:	e0 90 66 01 	lds	r14, 0x0166
     d36:	f0 90 67 01 	lds	r15, 0x0167
     d3a:	ec 14       	cp	r14, r12
     d3c:	fd 04       	cpc	r15, r13
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <estimate_distance+0x292>
     d40:	56 c1       	rjmp	.+684    	; 0xfee <estimate_distance+0x53e>
     d42:	e0 90 68 01 	lds	r14, 0x0168
     d46:	f0 90 69 01 	lds	r15, 0x0169
     d4a:	ec 14       	cp	r14, r12
     d4c:	fd 04       	cpc	r15, r13
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <estimate_distance+0x2a2>
     d50:	5a c1       	rjmp	.+692    	; 0x1006 <estimate_distance+0x556>
     d52:	e0 90 6a 01 	lds	r14, 0x016A
     d56:	f0 90 6b 01 	lds	r15, 0x016B
     d5a:	ec 14       	cp	r14, r12
     d5c:	fd 04       	cpc	r15, r13
     d5e:	08 f4       	brcc	.+2      	; 0xd62 <estimate_distance+0x2b2>
     d60:	5a c1       	rjmp	.+692    	; 0x1016 <estimate_distance+0x566>
     d62:	e0 90 6c 01 	lds	r14, 0x016C
     d66:	f0 90 6d 01 	lds	r15, 0x016D
     d6a:	ec 14       	cp	r14, r12
     d6c:	fd 04       	cpc	r15, r13
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <estimate_distance+0x2c2>
     d70:	5a c1       	rjmp	.+692    	; 0x1026 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d72:	0a e5       	ldi	r16, 0x5A	; 90
     d74:	31 c0       	rjmp	.+98     	; 0xdd8 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     d76:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     d78:	ed 81       	ldd	r30, Y+5	; 0x05
     d7a:	fe 81       	ldd	r31, Y+6	; 0x06
     d7c:	ed 3b       	cpi	r30, 0xBD	; 189
     d7e:	f2 40       	sbci	r31, 0x02	; 2
     d80:	fc f4       	brge	.+62     	; 0xdc0 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     d82:	81 e2       	ldi	r24, 0x21	; 33
     d84:	81 0f       	add	r24, r17
    }
}
     d86:	26 96       	adiw	r28, 0x06	; 6
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	9f 90       	pop	r9
     da8:	8f 90       	pop	r8
     daa:	7f 90       	pop	r7
     dac:	6f 90       	pop	r6
     dae:	5f 90       	pop	r5
     db0:	4f 90       	pop	r4
     db2:	3f 90       	pop	r3
     db4:	2f 90       	pop	r2
     db6:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     db8:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     dba:	81 e2       	ldi	r24, 0x21	; 33
     dbc:	80 0f       	add	r24, r16
     dbe:	e3 cf       	rjmp	.-58     	; 0xd86 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     dc0:	d1 01       	movw	r26, r2
     dc2:	cd 90       	ld	r12, X+
     dc4:	dc 90       	ld	r13, X
     dc6:	80 91 52 01 	lds	r24, 0x0152
     dca:	90 91 53 01 	lds	r25, 0x0153
     dce:	8c 15       	cp	r24, r12
     dd0:	9d 05       	cpc	r25, r13
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <estimate_distance+0x326>
     dd4:	66 cf       	rjmp	.-308    	; 0xca2 <estimate_distance+0x1f2>
            dist_low=0;
     dd6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     dd8:	1f 3f       	cpi	r17, 0xFF	; 255
     dda:	79 f3       	breq	.-34     	; 0xdba <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     ddc:	ed 81       	ldd	r30, Y+5	; 0x05
     dde:	fe 81       	ldd	r31, Y+6	; 0x06
     de0:	bf 01       	movw	r22, r30
     de2:	ff 0f       	add	r31, r31
     de4:	88 0b       	sbc	r24, r24
     de6:	99 0b       	sbc	r25, r25
     de8:	0e 94 ed 0c 	call	0x19da	; 0x19da <__floatsisf>
     dec:	6b 01       	movw	r12, r22
     dee:	7c 01       	movw	r14, r24
     df0:	61 2f       	mov	r22, r17
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     dfc:	4b 01       	movw	r8, r22
     dfe:	5c 01       	movw	r10, r24
     e00:	a7 01       	movw	r20, r14
     e02:	96 01       	movw	r18, r12
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	81 e6       	ldi	r24, 0x61	; 97
     e0a:	94 e4       	ldi	r25, 0x44	; 68
     e0c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__subsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	c5 01       	movw	r24, r10
     e16:	b4 01       	movw	r22, r8
     e18:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
     e1c:	4b 01       	movw	r8, r22
     e1e:	5c 01       	movw	r10, r24
     e20:	60 2f       	mov	r22, r16
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     e2c:	2b 01       	movw	r4, r22
     e2e:	3c 01       	movw	r6, r24
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	4f e2       	ldi	r20, 0x2F	; 47
     e36:	54 e4       	ldi	r21, 0x44	; 68
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__subsf3>
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	c3 01       	movw	r24, r6
     e46:	b2 01       	movw	r22, r4
     e48:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	c5 01       	movw	r24, r10
     e52:	b4 01       	movw	r22, r8
     e54:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__addsf3>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	48 e4       	ldi	r20, 0x48	; 72
     e5e:	53 e4       	ldi	r21, 0x43	; 67
     e60:	0e 94 43 0c 	call	0x1886	; 0x1886 <__divsf3>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	44 e0       	ldi	r20, 0x04	; 4
     e6a:	52 e4       	ldi	r21, 0x42	; 66
     e6c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__addsf3>
     e70:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fixunssfsi>
     e74:	86 2f       	mov	r24, r22
     e76:	87 cf       	rjmp	.-242    	; 0xd86 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e78:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     e7a:	85 e0       	ldi	r24, 0x05	; 5
     e7c:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	fc 01       	movw	r30, r24
     e84:	e0 5b       	subi	r30, 0xB0	; 176
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	b7 01       	movw	r22, r14
     e8e:	68 1b       	sub	r22, r24
     e90:	79 0b       	sbc	r23, r25
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__addsf3>
     ea2:	4b 01       	movw	r8, r22
     ea4:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ea6:	b6 01       	movw	r22, r12
     ea8:	dd 0c       	add	r13, r13
     eaa:	88 0b       	sbc	r24, r24
     eac:	99 0b       	sbc	r25, r25
     eae:	0e 94 ed 0c 	call	0x19da	; 0x19da <__floatsisf>
     eb2:	2b 01       	movw	r4, r22
     eb4:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     eb6:	b7 01       	movw	r22, r14
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     ec0:	6b 01       	movw	r12, r22
     ec2:	7c 01       	movw	r14, r24
     ec4:	60 2f       	mov	r22, r16
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	5f e3       	ldi	r21, 0x3F	; 63
     ed8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	a9 01       	movw	r20, r18
     ee2:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__addsf3>
     ee6:	a5 01       	movw	r20, r10
     ee8:	94 01       	movw	r18, r8
     eea:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__subsf3>
     efa:	9b 01       	movw	r18, r22
     efc:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     efe:	c3 01       	movw	r24, r6
     f00:	b2 01       	movw	r22, r4
     f02:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__subsf3>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e2       	ldi	r20, 0x20	; 32
     f0c:	51 e4       	ldi	r21, 0x41	; 65
     f0e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
                b=((int)((int)b/(int)slope));
     f12:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixsfsi>
     f16:	7b 01       	movw	r14, r22
     f18:	c5 01       	movw	r24, r10
     f1a:	b4 01       	movw	r22, r8
     f1c:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixsfsi>
     f20:	ab 01       	movw	r20, r22
     f22:	bc 01       	movw	r22, r24
     f24:	c7 01       	movw	r24, r14
     f26:	ba 01       	movw	r22, r20
     f28:	0e 94 99 0b 	call	0x1732	; 0x1732 <__divmodhi4>
                dist_low=b;
     f2c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     f2e:	6f 3f       	cpi	r22, 0xFF	; 255
     f30:	09 f0       	breq	.+2      	; 0xf34 <estimate_distance+0x484>
     f32:	52 cf       	rjmp	.-348    	; 0xdd8 <estimate_distance+0x328>
     f34:	26 cf       	rjmp	.-436    	; 0xd82 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f36:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     f38:	85 e0       	ldi	r24, 0x05	; 5
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	7c 01       	movw	r14, r24
     f3e:	f1 e0       	ldi	r31, 0x01	; 1
     f40:	ef 1a       	sub	r14, r31
     f42:	f1 08       	sbc	r15, r1
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__floatunsisf>
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__mulsf3>
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	a9 01       	movw	r20, r18
     f60:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__addsf3>
     f64:	69 83       	std	Y+1, r22	; 0x01
     f66:	7a 83       	std	Y+2, r23	; 0x02
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     f6c:	40 ce       	rjmp	.-896    	; 0xbee <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f6e:	01 e0       	ldi	r16, 0x01	; 1
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	84 cf       	rjmp	.-248    	; 0xe7e <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	df cf       	rjmp	.-66     	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f7e:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	7c cf       	rjmp	.-264    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f86:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	d7 cf       	rjmp	.-82     	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f8e:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	74 cf       	rjmp	.-280    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f96:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	cf cf       	rjmp	.-98     	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f9e:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     fa0:	84 e0       	ldi	r24, 0x04	; 4
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	6c cf       	rjmp	.-296    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fa6:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	c7 cf       	rjmp	.-114    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fae:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     fb0:	86 e0       	ldi	r24, 0x06	; 6
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	64 cf       	rjmp	.-312    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fb6:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     fb8:	86 e0       	ldi	r24, 0x06	; 6
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	bf cf       	rjmp	.-130    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fbe:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     fc0:	87 e0       	ldi	r24, 0x07	; 7
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	5c cf       	rjmp	.-328    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fc6:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     fc8:	87 e0       	ldi	r24, 0x07	; 7
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	b7 cf       	rjmp	.-146    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fce:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	54 cf       	rjmp	.-344    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fd6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     fd8:	88 e0       	ldi	r24, 0x08	; 8
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	af cf       	rjmp	.-162    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fde:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     fe0:	89 e0       	ldi	r24, 0x09	; 9
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	4c cf       	rjmp	.-360    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fe6:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     fe8:	89 e0       	ldi	r24, 0x09	; 9
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a7 cf       	rjmp	.-178    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fee:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     ff0:	8a e0       	ldi	r24, 0x0A	; 10
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	44 cf       	rjmp	.-376    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ff6:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     ff8:	8a e0       	ldi	r24, 0x0A	; 10
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9f cf       	rjmp	.-194    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ffe:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1000:	8b e0       	ldi	r24, 0x0B	; 11
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9b cf       	rjmp	.-202    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1006:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    1008:	8b e0       	ldi	r24, 0x0B	; 11
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	38 cf       	rjmp	.-400    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    100e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1010:	8c e0       	ldi	r24, 0x0C	; 12
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	93 cf       	rjmp	.-218    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1016:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    1018:	8c e0       	ldi	r24, 0x0C	; 12
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	30 cf       	rjmp	.-416    	; 0xe7e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    101e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1020:	8d e0       	ldi	r24, 0x0D	; 13
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	8b cf       	rjmp	.-234    	; 0xf3c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1026:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    1028:	8d e0       	ldi	r24, 0x0D	; 13
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	28 cf       	rjmp	.-432    	; 0xe7e <estimate_distance+0x3ce>

0000102e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	4f 93       	push	r20
    103e:	5f 93       	push	r21
    1040:	6f 93       	push	r22
    1042:	7f 93       	push	r23
    1044:	8f 93       	push	r24
    1046:	9f 93       	push	r25
    1048:	af 93       	push	r26
    104a:	bf 93       	push	r27
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
    tx_clock += tx_increment;
    1050:	20 91 71 01 	lds	r18, 0x0171
    1054:	30 91 72 01 	lds	r19, 0x0172
    1058:	80 91 6f 01 	lds	r24, 0x016F
    105c:	90 91 70 01 	lds	r25, 0x0170
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	90 93 72 01 	sts	0x0172, r25
    1068:	80 93 71 01 	sts	0x0171, r24
    tx_increment = 0xFF;
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	90 93 70 01 	sts	0x0170, r25
    1074:	80 93 6f 01 	sts	0x016F, r24
    OCR0A = tx_increment;
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    107c:	80 91 4d 01 	lds	r24, 0x014D
    1080:	90 91 4e 01 	lds	r25, 0x014E
    1084:	a0 91 4f 01 	lds	r26, 0x014F
    1088:	b0 91 50 01 	lds	r27, 0x0150
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	a1 1d       	adc	r26, r1
    1090:	b1 1d       	adc	r27, r1
    1092:	80 93 4d 01 	sts	0x014D, r24
    1096:	90 93 4e 01 	sts	0x014E, r25
    109a:	a0 93 4f 01 	sts	0x014F, r26
    109e:	b0 93 50 01 	sts	0x0150, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    10a2:	80 91 51 01 	lds	r24, 0x0151
    10a6:	81 11       	cpse	r24, r1
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <__vector_14+0x9a>
    10aa:	80 91 80 01 	lds	r24, 0x0180
    10ae:	90 91 81 01 	lds	r25, 0x0181
    10b2:	20 91 71 01 	lds	r18, 0x0171
    10b6:	30 91 72 01 	lds	r19, 0x0172
    10ba:	82 17       	cp	r24, r18
    10bc:	93 07       	cpc	r25, r19
    10be:	20 f4       	brcc	.+8      	; 0x10c8 <__vector_14+0x9a>
    10c0:	80 91 1d 01 	lds	r24, 0x011D
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	89 f0       	breq	.+34     	; 0x10ea <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    10ea:	e0 91 03 01 	lds	r30, 0x0103
    10ee:	f0 91 04 01 	lds	r31, 0x0104
    10f2:	09 95       	icall
        if (msg) {
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	41 f3       	breq	.-48     	; 0x10c8 <__vector_14+0x9a>
            if (message_send(msg)) {
    10f8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <message_send>
    10fc:	81 11       	cpse	r24, r1
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1100:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <rand>
    1104:	99 27       	eor	r25, r25
    1106:	90 93 70 01 	sts	0x0170, r25
    110a:	80 93 6f 01 	sts	0x016F, r24
                OCR0A = tx_increment;
    110e:	87 bd       	out	0x27, r24	; 39
    1110:	db cf       	rjmp	.-74     	; 0x10c8 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1112:	e0 91 01 01 	lds	r30, 0x0101
    1116:	f0 91 02 01 	lds	r31, 0x0102
    111a:	09 95       	icall
                tx_clock = 0;
    111c:	10 92 72 01 	sts	0x0172, r1
    1120:	10 92 71 01 	sts	0x0171, r1
    1124:	d1 cf       	rjmp	.-94     	; 0x10c8 <__vector_14+0x9a>

00001126 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1126:	80 ff       	sbrs	r24, 0
    1128:	11 c0       	rjmp	.+34     	; 0x114c <set_color+0x26>
        DDRD |= (1<<5);
    112a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    112c:	81 ff       	sbrs	r24, 1
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <set_color+0x2c>
        DDRD |= (1<<4);
    1130:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1132:	82 ff       	sbrs	r24, 2
    1134:	11 c0       	rjmp	.+34     	; 0x1158 <set_color+0x32>
        DDRC |= (1<<3);
    1136:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1138:	83 ff       	sbrs	r24, 3
    113a:	11 c0       	rjmp	.+34     	; 0x115e <set_color+0x38>
        DDRC |= (1<<2);
    113c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    113e:	84 ff       	sbrs	r24, 4
    1140:	11 c0       	rjmp	.+34     	; 0x1164 <set_color+0x3e>
        DDRC |= (1<<5);
    1142:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1144:	85 fd       	sbrc	r24, 5
    1146:	11 c0       	rjmp	.+34     	; 0x116a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1148:	3c 98       	cbi	0x07, 4	; 7
    114a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    114c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    114e:	81 fd       	sbrc	r24, 1
    1150:	ef cf       	rjmp	.-34     	; 0x1130 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1152:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1154:	82 fd       	sbrc	r24, 2
    1156:	ef cf       	rjmp	.-34     	; 0x1136 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1158:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    115a:	83 fd       	sbrc	r24, 3
    115c:	ef cf       	rjmp	.-34     	; 0x113c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    115e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1160:	84 fd       	sbrc	r24, 4
    1162:	ef cf       	rjmp	.-34     	; 0x1142 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1164:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1166:	85 ff       	sbrs	r24, 5
    1168:	ef cf       	rjmp	.-34     	; 0x1148 <set_color+0x22>
        DDRC |= (1<<4);
    116a:	3c 9a       	sbi	0x07, 4	; 7
    116c:	08 95       	ret

0000116e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25
    rx_timer_off();
    117c:	10 92 81 00 	sts	0x0081, r1
    1180:	10 92 85 00 	sts	0x0085, r1
    1184:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 2a 01 	sts	0x012A, r24
    rx_leadingbyte = 1;
    118e:	80 93 6e 01 	sts	0x016E, r24
    rx_busy = 0;
    1192:	10 92 51 01 	sts	0x0151, r1
    adc_trigger_high_gain();
    1196:	10 92 7c 00 	sts	0x007C, r1
    119a:	93 ea       	ldi	r25, 0xA3	; 163
    119c:	90 93 7a 00 	sts	0x007A, r25
    11a0:	80 93 7b 00 	sts	0x007B, r24
}
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	2f 93       	push	r18
    11be:	3f 93       	push	r19
    11c0:	4f 93       	push	r20
    11c2:	5f 93       	push	r21
    11c4:	6f 93       	push	r22
    11c6:	7f 93       	push	r23
    11c8:	8f 93       	push	r24
    11ca:	9f 93       	push	r25
    11cc:	af 93       	push	r26
    11ce:	bf 93       	push	r27
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    11d8:	20 91 84 00 	lds	r18, 0x0084
    11dc:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	40 93 51 01 	sts	0x0151, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    11e6:	80 91 2a 01 	lds	r24, 0x012A
    11ea:	88 23       	and	r24, r24
    11ec:	a9 f1       	breq	.+106    	; 0x1258 <__vector_23+0xa6>
        rx_timer_on();
    11ee:	10 92 85 00 	sts	0x0085, r1
    11f2:	10 92 84 00 	sts	0x0084, r1
    11f6:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    11fa:	10 92 82 01 	sts	0x0182, r1
        rx_leadingbit = 0;
    11fe:	10 92 2a 01 	sts	0x012A, r1
        if (rx_leadingbyte) {
    1202:	80 91 6e 01 	lds	r24, 0x016E
    1206:	88 23       	and	r24, r24
    1208:	a1 f0       	breq	.+40     	; 0x1232 <__vector_23+0x80>
            adc_finish_conversion();
    120a:	80 91 7a 00 	lds	r24, 0x007A
    120e:	86 fd       	sbrc	r24, 6
    1210:	fc cf       	rjmp	.-8      	; 0x120a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1212:	80 91 78 00 	lds	r24, 0x0078
    1216:	90 91 79 00 	lds	r25, 0x0079
    121a:	90 93 4c 01 	sts	0x014C, r25
    121e:	80 93 4b 01 	sts	0x014B, r24
            adc_trigger_low_gain();
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 7c 00 	sts	0x007C, r24
    1228:	93 ea       	ldi	r25, 0xA3	; 163
    122a:	90 93 7a 00 	sts	0x007A, r25
    122e:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1258:	c9 01       	movw	r24, r18
    125a:	87 58       	subi	r24, 0x87	; 135
    125c:	91 09       	sbc	r25, r1
    125e:	84 37       	cpi	r24, 0x74	; 116
    1260:	99 40       	sbci	r25, 0x09	; 9
    1262:	08 f0       	brcs	.+2      	; 0x1266 <__vector_23+0xb4>
    1264:	52 c0       	rjmp	.+164    	; 0x130a <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1266:	26 58       	subi	r18, 0x86	; 134
    1268:	31 09       	sbc	r19, r1
    126a:	a4 ef       	ldi	r26, 0xF4	; 244
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__umulhisi3>
    1272:	aa 27       	eor	r26, r26
    1274:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1276:	88 30       	cpi	r24, 0x08	; 8
    1278:	91 05       	cpc	r25, r1
    127a:	a1 05       	cpc	r26, r1
    127c:	b1 05       	cpc	r27, r1
    127e:	08 f4       	brcc	.+2      	; 0x1282 <__vector_23+0xd0>
    1280:	7b c0       	rjmp	.+246    	; 0x1378 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1282:	40 93 2a 01 	sts	0x012A, r20
                if (rx_leadingbyte) {
    1286:	80 91 6e 01 	lds	r24, 0x016E
    128a:	81 11       	cpse	r24, r1
    128c:	52 c0       	rjmp	.+164    	; 0x1332 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    128e:	80 91 48 01 	lds	r24, 0x0148
    1292:	e8 2f       	mov	r30, r24
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	ec 58       	subi	r30, 0x8C	; 140
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	90 91 82 01 	lds	r25, 0x0182
    129e:	90 83       	st	Z, r25
                    rx_byteindex++;
    12a0:	8f 5f       	subi	r24, 0xFF	; 255
    12a2:	80 93 48 01 	sts	0x0148, r24
                    if (rx_byteindex == sizeof(message_t)) {
    12a6:	8c 30       	cpi	r24, 0x0C	; 12
    12a8:	21 f6       	brne	.-120    	; 0x1232 <__vector_23+0x80>
                        rx_timer_off();
    12aa:	10 92 81 00 	sts	0x0081, r1
    12ae:	10 92 85 00 	sts	0x0085, r1
    12b2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12b6:	40 93 6e 01 	sts	0x016E, r20
                        rx_busy = 0;
    12ba:	10 92 51 01 	sts	0x0151, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    12be:	c0 91 7e 01 	lds	r28, 0x017E
    12c2:	d0 91 7f 01 	lds	r29, 0x017F
    12c6:	84 e7       	ldi	r24, 0x74	; 116
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <message_crc>
    12ce:	c8 17       	cp	r28, r24
    12d0:	d9 07       	cpc	r29, r25
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <__vector_23+0x124>
    12d4:	ae cf       	rjmp	.-164    	; 0x1232 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    12d6:	80 91 7d 01 	lds	r24, 0x017D
    12da:	87 ff       	sbrs	r24, 7
    12dc:	61 c0       	rjmp	.+194    	; 0x13a0 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12de:	98 e7       	ldi	r25, 0x78	; 120
    12e0:	98 0f       	add	r25, r24
    12e2:	93 30       	cpi	r25, 0x03	; 3
    12e4:	30 f0       	brcs	.+12     	; 0x12f2 <__vector_23+0x140>
        motors_off();
    12e6:	53 98       	cbi	0x0a, 3	; 10
    12e8:	23 98       	cbi	0x04, 3	; 4
    12ea:	10 92 b4 00 	sts	0x00B4, r1
    12ee:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	fc 01       	movw	r30, r24
    12f6:	e0 58       	subi	r30, 0x80	; 128
    12f8:	f1 09       	sbc	r31, r1
    12fa:	eb 30       	cpi	r30, 0x0B	; 11
    12fc:	f1 05       	cpc	r31, r1
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <__vector_23+0x150>
    1300:	98 cf       	rjmp	.-208    	; 0x1232 <__vector_23+0x80>
    1302:	e5 5c       	subi	r30, 0xC5	; 197
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    130a:	10 92 81 00 	sts	0x0081, r1
    130e:	10 92 85 00 	sts	0x0085, r1
    1312:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1316:	40 93 2a 01 	sts	0x012A, r20
            rx_leadingbyte = 1;
    131a:	40 93 6e 01 	sts	0x016E, r20
            rx_busy = 0;
    131e:	10 92 51 01 	sts	0x0151, r1
            adc_trigger_high_gain();
    1322:	10 92 7c 00 	sts	0x007C, r1
    1326:	83 ea       	ldi	r24, 0xA3	; 163
    1328:	80 93 7a 00 	sts	0x007A, r24
    132c:	40 93 7b 00 	sts	0x007B, r20
    1330:	80 cf       	rjmp	.-256    	; 0x1232 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1332:	80 91 7a 00 	lds	r24, 0x007A
    1336:	86 fd       	sbrc	r24, 6
    1338:	fc cf       	rjmp	.-8      	; 0x1332 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    133a:	80 91 78 00 	lds	r24, 0x0078
    133e:	90 91 79 00 	lds	r25, 0x0079
    1342:	90 93 4a 01 	sts	0x014A, r25
    1346:	80 93 49 01 	sts	0x0149, r24
                    adc_trigger_high_gain();
    134a:	10 92 7c 00 	sts	0x007C, r1
    134e:	83 ea       	ldi	r24, 0xA3	; 163
    1350:	80 93 7a 00 	sts	0x007A, r24
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    135a:	90 91 82 01 	lds	r25, 0x0182
    135e:	99 23       	and	r25, r25
    1360:	d1 f0       	breq	.+52     	; 0x1396 <__vector_23+0x1e4>
                        rx_timer_off();
    1362:	10 92 81 00 	sts	0x0081, r1
    1366:	10 92 85 00 	sts	0x0085, r1
    136a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    136e:	80 93 6e 01 	sts	0x016E, r24
                        rx_busy = 0;
    1372:	10 92 51 01 	sts	0x0151, r1
    1376:	5d cf       	rjmp	.-326    	; 0x1232 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	f9 01       	movw	r30, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <__vector_23+0x1d2>
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <__vector_23+0x1ce>
    1388:	cf 01       	movw	r24, r30
    138a:	90 91 82 01 	lds	r25, 0x0182
    138e:	89 2b       	or	r24, r25
    1390:	80 93 82 01 	sts	0x0182, r24
    1394:	4e cf       	rjmp	.-356    	; 0x1232 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1396:	10 92 6e 01 	sts	0x016E, r1
                        rx_byteindex = 0;
    139a:	10 92 48 01 	sts	0x0148, r1
    139e:	49 cf       	rjmp	.-366    	; 0x1232 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    13a0:	e0 91 05 01 	lds	r30, 0x0105
    13a4:	f0 91 06 01 	lds	r31, 0x0106
    13a8:	69 e4       	ldi	r22, 0x49	; 73
    13aa:	71 e0       	ldi	r23, 0x01	; 1
    13ac:	84 e7       	ldi	r24, 0x74	; 116
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	09 95       	icall
    13b2:	3f cf       	rjmp	.-386    	; 0x1232 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13b4:	80 91 74 01 	lds	r24, 0x0174
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	09 f4       	brne	.+2      	; 0x13be <__vector_23+0x20c>
    13bc:	dd c0       	rjmp	.+442    	; 0x1578 <__vector_23+0x3c6>
    13be:	08 f4       	brcc	.+2      	; 0x13c2 <__vector_23+0x210>
    13c0:	ba c0       	rjmp	.+372    	; 0x1536 <__vector_23+0x384>
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <__vector_23+0x216>
    13c6:	c6 c0       	rjmp	.+396    	; 0x1554 <__vector_23+0x3a2>
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__vector_23+0x21c>
    13cc:	b1 c0       	rjmp	.+354    	; 0x1530 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13ce:	80 91 1b 01 	lds	r24, 0x011B
    13d2:	90 91 7a 01 	lds	r25, 0x017A
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	09 f4       	brne	.+2      	; 0x13dc <__vector_23+0x22a>
    13da:	e3 c0       	rjmp	.+454    	; 0x15a2 <__vector_23+0x3f0>
    13dc:	80 91 79 01 	lds	r24, 0x0179
                        prev_motion = MOVE_STOP;
    13e0:	10 92 1c 01 	sts	0x011C, r1
                        cur_motion = MOVE_STRAIGHT;
    13e4:	23 e0       	ldi	r18, 0x03	; 3
    13e6:	20 93 1b 01 	sts	0x011B, r18
                        kilo_straight_left = calibmsg->straight_left;
    13ea:	80 93 85 01 	sts	0x0185, r24
                        kilo_straight_right = calibmsg->straight_right;
    13ee:	90 93 86 01 	sts	0x0186, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13f2:	80 91 1d 01 	lds	r24, 0x011D
    13f6:	86 30       	cpi	r24, 0x06	; 6
    13f8:	09 f4       	brne	.+2      	; 0x13fc <__vector_23+0x24a>
    13fa:	1b cf       	rjmp	.-458    	; 0x1232 <__vector_23+0x80>
                motors_on();
    13fc:	53 9a       	sbi	0x0a, 3	; 10
    13fe:	23 9a       	sbi	0x04, 3	; 4
    1400:	10 92 b4 00 	sts	0x00B4, r1
    1404:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1408:	86 e0       	ldi	r24, 0x06	; 6
    140a:	80 93 1d 01 	sts	0x011D, r24
    140e:	11 cf       	rjmp	.-478    	; 0x1232 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1410:	80 91 1d 01 	lds	r24, 0x011D
    1414:	86 30       	cpi	r24, 0x06	; 6
    1416:	99 f0       	breq	.+38     	; 0x143e <__vector_23+0x28c>
                motors_on();
    1418:	53 9a       	sbi	0x0a, 3	; 10
    141a:	23 9a       	sbi	0x04, 3	; 4
    141c:	10 92 b4 00 	sts	0x00B4, r1
    1420:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1424:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1426:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1428:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    142a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    142c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    142e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1430:	10 92 1b 01 	sts	0x011B, r1
    1434:	10 92 1c 01 	sts	0x011C, r1
                kilo_state = MOVING;
    1438:	86 e0       	ldi	r24, 0x06	; 6
    143a:	80 93 1d 01 	sts	0x011D, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 01       	movw	r18, r24
    1444:	00 90 74 01 	lds	r0, 0x0174
    1448:	02 c0       	rjmp	.+4      	; 0x144e <__vector_23+0x29c>
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <__vector_23+0x298>
    1452:	80 91 83 01 	lds	r24, 0x0183
    1456:	90 91 84 01 	lds	r25, 0x0184
    145a:	82 23       	and	r24, r18
    145c:	93 23       	and	r25, r19
    145e:	89 2b       	or	r24, r25
    1460:	09 f0       	breq	.+2      	; 0x1464 <__vector_23+0x2b2>
    1462:	86 c0       	rjmp	.+268    	; 0x1570 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1464:	10 92 1b 01 	sts	0x011B, r1
    1468:	e4 ce       	rjmp	.-568    	; 0x1232 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 1d 01 	sts	0x011D, r24
    1470:	e0 ce       	rjmp	.-576    	; 0x1232 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1472:	e0 e0       	ldi	r30, 0x00	; 0
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1478:	80 91 6e 00 	lds	r24, 0x006E
    147c:	8d 7f       	andi	r24, 0xFD	; 253
    147e:	80 93 6e 00 	sts	0x006E, r24
    1482:	16 bc       	out	0x26, r1	; 38
            bootload();
    1484:	e0 e0       	ldi	r30, 0x00	; 0
    1486:	f0 e7       	ldi	r31, 0x70	; 112
    1488:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    148a:	10 92 1d 01 	sts	0x011D, r1
    148e:	d1 ce       	rjmp	.-606    	; 0x1232 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	80 93 1d 01 	sts	0x011D, r24
    1496:	cd ce       	rjmp	.-614    	; 0x1232 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1498:	85 e0       	ldi	r24, 0x05	; 5
    149a:	80 93 1d 01 	sts	0x011D, r24
    149e:	c9 ce       	rjmp	.-622    	; 0x1232 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    14a0:	80 91 1d 01 	lds	r24, 0x011D
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	09 f4       	brne	.+2      	; 0x14aa <__vector_23+0x2f8>
    14a8:	c4 ce       	rjmp	.-632    	; 0x1232 <__vector_23+0x80>
    14aa:	80 91 1d 01 	lds	r24, 0x011D
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <__vector_23+0x302>
    14b2:	bf ce       	rjmp	.-642    	; 0x1232 <__vector_23+0x80>
                motors_on();
    14b4:	53 9a       	sbi	0x0a, 3	; 10
    14b6:	23 9a       	sbi	0x04, 3	; 4
    14b8:	10 92 b4 00 	sts	0x00B4, r1
    14bc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	80 93 1d 01 	sts	0x011D, r24
    14c6:	b5 ce       	rjmp	.-662    	; 0x1232 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    14c8:	80 91 1d 01 	lds	r24, 0x011D
    14cc:	86 30       	cpi	r24, 0x06	; 6
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <__vector_23+0x320>
    14d0:	b0 ce       	rjmp	.-672    	; 0x1232 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    14d2:	60 91 83 01 	lds	r22, 0x0183
    14d6:	80 eb       	ldi	r24, 0xB0	; 176
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    14de:	60 91 84 01 	lds	r22, 0x0184
    14e2:	81 eb       	ldi	r24, 0xB1	; 177
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    14ea:	60 91 87 01 	lds	r22, 0x0187
    14ee:	85 e0       	ldi	r24, 0x05	; 5
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    14f6:	60 91 73 01 	lds	r22, 0x0173
    14fa:	89 e0       	ldi	r24, 0x09	; 9
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1502:	60 91 85 01 	lds	r22, 0x0185
    1506:	8c e0       	ldi	r24, 0x0C	; 12
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    150e:	60 91 86 01 	lds	r22, 0x0186
    1512:	84 e1       	ldi	r24, 0x14	; 20
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eeprom_write_byte>
                        motors_off();
    151a:	53 98       	cbi	0x0a, 3	; 10
    151c:	23 98       	cbi	0x04, 3	; 4
    151e:	10 92 b4 00 	sts	0x00B4, r1
    1522:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 1d 01 	sts	0x011D, r24
    152c:	80 91 74 01 	lds	r24, 0x0174
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1530:	81 11       	cpse	r24, r1
    1532:	5f cf       	rjmp	.-322    	; 0x13f2 <__vector_23+0x240>
    1534:	7e ce       	rjmp	.-772    	; 0x1232 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1536:	88 23       	and	r24, r24
    1538:	39 f2       	breq	.-114    	; 0x14c8 <__vector_23+0x316>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	c9 f7       	brne	.-14     	; 0x1530 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    153e:	80 91 75 01 	lds	r24, 0x0175
    1542:	90 91 76 01 	lds	r25, 0x0176
    1546:	90 93 84 01 	sts	0x0184, r25
    154a:	80 93 83 01 	sts	0x0183, r24
                    cur_motion = MOVE_STOP;
    154e:	10 92 1b 01 	sts	0x011B, r1
    1552:	4f cf       	rjmp	.-354    	; 0x13f2 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1554:	80 91 1b 01 	lds	r24, 0x011B
    1558:	82 30       	cpi	r24, 0x02	; 2
    155a:	71 f1       	breq	.+92     	; 0x15b8 <__vector_23+0x406>
    155c:	80 91 78 01 	lds	r24, 0x0178
                        prev_motion = MOVE_STOP;
    1560:	10 92 1c 01 	sts	0x011C, r1
                        cur_motion = MOVE_RIGHT;
    1564:	92 e0       	ldi	r25, 0x02	; 2
    1566:	90 93 1b 01 	sts	0x011B, r25
                        kilo_turn_right = calibmsg->turn_right;
    156a:	80 93 73 01 	sts	0x0173, r24
    156e:	41 cf       	rjmp	.-382    	; 0x13f2 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	80 93 1b 01 	sts	0x011B, r24
    1576:	5d ce       	rjmp	.-838    	; 0x1232 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1578:	80 91 1b 01 	lds	r24, 0x011B
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	51 f0       	breq	.+20     	; 0x1594 <__vector_23+0x3e2>
    1580:	80 91 77 01 	lds	r24, 0x0177
                        prev_motion = MOVE_STOP;
    1584:	10 92 1c 01 	sts	0x011C, r1
                        cur_motion = MOVE_LEFT;
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	90 93 1b 01 	sts	0x011B, r25
                        kilo_turn_left = calibmsg->turn_left;
    158e:	80 93 87 01 	sts	0x0187, r24
    1592:	2f cf       	rjmp	.-418    	; 0x13f2 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1594:	80 91 77 01 	lds	r24, 0x0177
    1598:	90 91 87 01 	lds	r25, 0x0187
    159c:	89 13       	cpse	r24, r25
    159e:	f2 cf       	rjmp	.-28     	; 0x1584 <__vector_23+0x3d2>
    15a0:	28 cf       	rjmp	.-432    	; 0x13f2 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    15a2:	80 91 86 01 	lds	r24, 0x0186
    15a6:	98 13       	cpse	r25, r24
    15a8:	19 cf       	rjmp	.-462    	; 0x13dc <__vector_23+0x22a>
    15aa:	80 91 79 01 	lds	r24, 0x0179
    15ae:	20 91 85 01 	lds	r18, 0x0185
    15b2:	82 13       	cpse	r24, r18
    15b4:	15 cf       	rjmp	.-470    	; 0x13e0 <__vector_23+0x22e>
    15b6:	1d cf       	rjmp	.-454    	; 0x13f2 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    15b8:	80 91 78 01 	lds	r24, 0x0178
    15bc:	90 91 73 01 	lds	r25, 0x0173
    15c0:	89 13       	cpse	r24, r25
    15c2:	ce cf       	rjmp	.-100    	; 0x1560 <__vector_23+0x3ae>
    15c4:	16 cf       	rjmp	.-468    	; 0x13f2 <__vector_23+0x240>

000015c6 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    15c6:	fc 01       	movw	r30, r24
    15c8:	ac 01       	movw	r20, r24
    15ca:	46 5f       	subi	r20, 0xF6	; 246
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    15d2:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    15d4:	82 27       	eor	r24, r18
    15d6:	08 2e       	mov	r0, r24
    15d8:	82 95       	swap	r24
    15da:	80 7f       	andi	r24, 0xF0	; 240
    15dc:	80 25       	eor	r24, r0
    15de:	09 2e       	mov	r0, r25
    15e0:	98 2f       	mov	r25, r24
    15e2:	82 95       	swap	r24
    15e4:	8f 70       	andi	r24, 0x0F	; 15
    15e6:	08 26       	eor	r0, r24
    15e8:	86 95       	lsr	r24
    15ea:	98 27       	eor	r25, r24
    15ec:	89 27       	eor	r24, r25
    15ee:	88 0f       	add	r24, r24
    15f0:	88 0f       	add	r24, r24
    15f2:	88 0f       	add	r24, r24
    15f4:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    15f6:	e4 17       	cp	r30, r20
    15f8:	f5 07       	cpc	r31, r21
    15fa:	59 f7       	brne	.-42     	; 0x15d2 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    15fc:	08 95       	ret

000015fe <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    15fe:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1600:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1602:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1604:	20 91 47 01 	lds	r18, 0x0147
    or tmpreg1, ddrreg
    1608:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    160a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    160c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    160e:	30 91 47 01 	lds	r19, 0x0147
    1612:	20 30       	cpi	r18, 0x00	; 0
    1614:	29 f0       	breq	.+10     	; 0x1620 <message_send+0x22>
    1616:	00 00       	nop
    1618:	25 b1       	in	r18, 0x05	; 5
    161a:	23 2b       	or	r18, r19
    161c:	25 b9       	out	0x05, r18	; 5
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <message_send+0x2a>
    1620:	00 00       	nop
    1622:	00 00       	nop
    1624:	00 00       	nop
    1626:	00 c0       	rjmp	.+0      	; 0x1628 <message_send+0x2a>
    1628:	00 00       	nop
    162a:	00 00       	nop
    162c:	00 00       	nop
    162e:	30 95       	com	r19
    1630:	25 b1       	in	r18, 0x05	; 5
    1632:	23 23       	and	r18, r19
    1634:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1636:	2e ea       	ldi	r18, 0xAE	; 174
    1638:	2a 95       	dec	r18
    163a:	f1 f7       	brne	.-4      	; 0x1638 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    163c:	2b ee       	ldi	r18, 0xEB	; 235

0000163e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    163e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1640:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1642:	0a c0       	rjmp	.+20     	; 0x1658 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1644:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1646:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    164a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    164c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    164e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1650:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1652:	0f be       	out	0x3f, r0	; 63
    return 0
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	08 95       	ret

00001658 <nocollision>:
nocollision:
    nop
    1658:	00 00       	nop
    dec tmpreg1
    165a:	2a 95       	dec	r18
    brne checkcollision
    165c:	81 f7       	brne	.-32     	; 0x163e <checkcollision>

    ldi tmpreg1, 0x01
    165e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1660:	30 91 47 01 	lds	r19, 0x0147
    1664:	20 30       	cpi	r18, 0x00	; 0
    1666:	29 f0       	breq	.+10     	; 0x1672 <nocollision+0x1a>
    1668:	00 00       	nop
    166a:	25 b1       	in	r18, 0x05	; 5
    166c:	23 2b       	or	r18, r19
    166e:	25 b9       	out	0x05, r18	; 5
    1670:	04 c0       	rjmp	.+8      	; 0x167a <nocollision+0x22>
    1672:	00 00       	nop
    1674:	00 00       	nop
    1676:	00 00       	nop
    1678:	00 c0       	rjmp	.+0      	; 0x167a <nocollision+0x22>
    167a:	00 00       	nop
    167c:	00 00       	nop
    167e:	00 00       	nop
    1680:	30 95       	com	r19
    1682:	25 b1       	in	r18, 0x05	; 5
    1684:	23 23       	and	r18, r19
    1686:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1688:	00 00       	nop
    168a:	24 e5       	ldi	r18, 0x54	; 84
    168c:	2a 95       	dec	r18
    168e:	f1 f7       	brne	.-4      	; 0x168c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1690:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1692:	8c e0       	ldi	r24, 0x0C	; 12

00001694 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1694:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1696:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1698:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    169a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    169c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    169e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    16a0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    16a4:	50 e0       	ldi	r21, 0x00	; 0

000016a6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    16a6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    16a8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    16aa:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    16ac:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    16ae:	30 91 47 01 	lds	r19, 0x0147
    16b2:	20 30       	cpi	r18, 0x00	; 0
    16b4:	29 f0       	breq	.+10     	; 0x16c0 <sendbit+0x1a>
    16b6:	00 00       	nop
    16b8:	25 b1       	in	r18, 0x05	; 5
    16ba:	23 2b       	or	r18, r19
    16bc:	25 b9       	out	0x05, r18	; 5
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <sendbit+0x22>
    16c0:	00 00       	nop
    16c2:	00 00       	nop
    16c4:	00 00       	nop
    16c6:	00 c0       	rjmp	.+0      	; 0x16c8 <sendbit+0x22>
    16c8:	00 00       	nop
    16ca:	00 00       	nop
    16cc:	00 00       	nop
    16ce:	30 95       	com	r19
    16d0:	25 b1       	in	r18, 0x05	; 5
    16d2:	23 23       	and	r18, r19
    16d4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    16d6:	00 00       	nop
    16d8:	21 e5       	ldi	r18, 0x51	; 81
    16da:	2a 95       	dec	r18
    16dc:	f1 f7       	brne	.-4      	; 0x16da <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    16de:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    16e0:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    16e2:	9a 95       	dec	r25
    brne sendbit
    16e4:	01 f7       	brne	.-64     	; 0x16a6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    16e6:	8a 95       	dec	r24
    brne sendbyte
    16e8:	a9 f6       	brne	.-86     	; 0x1694 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    16ea:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    16ec:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    16ee:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    16f0:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    16f2:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    16f6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    16f8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    16fa:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    16fc:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    16fe:	0f be       	out	0x3f, r0	; 63
    return 1
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	08 95       	ret

00001704 <main>:
    reset_time_adjustment = reset_time_adjustment + rx_reset_time_adjustment;
}

int main()
{
    kilo_init();
    1704:	0e 94 13 02 	call	0x426	; 0x426 <kilo_init>
    kilo_message_rx = message_rx;
    1708:	84 e7       	ldi	r24, 0x74	; 116
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	90 93 06 01 	sts	0x0106, r25
    1710:	80 93 05 01 	sts	0x0105, r24
    kilo_message_tx = message_tx;
    1714:	81 e7       	ldi	r24, 0x71	; 113
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	90 93 04 01 	sts	0x0104, r25
    171c:	80 93 03 01 	sts	0x0103, r24
    kilo_start(setup, loop);
    1720:	6e eb       	ldi	r22, 0xBE	; 190
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	80 eb       	ldi	r24, 0xB0	; 176
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 0f 03 	call	0x61e	; 0x61e <kilo_start>
    
    return 0;
}
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	08 95       	ret

00001732 <__divmodhi4>:
    1732:	97 fb       	bst	r25, 7
    1734:	07 2e       	mov	r0, r23
    1736:	16 f4       	brtc	.+4      	; 0x173c <__divmodhi4+0xa>
    1738:	00 94       	com	r0
    173a:	07 d0       	rcall	.+14     	; 0x174a <__divmodhi4_neg1>
    173c:	77 fd       	sbrc	r23, 7
    173e:	09 d0       	rcall	.+18     	; 0x1752 <__divmodhi4_neg2>
    1740:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__udivmodhi4>
    1744:	07 fc       	sbrc	r0, 7
    1746:	05 d0       	rcall	.+10     	; 0x1752 <__divmodhi4_neg2>
    1748:	3e f4       	brtc	.+14     	; 0x1758 <__divmodhi4_exit>

0000174a <__divmodhi4_neg1>:
    174a:	90 95       	com	r25
    174c:	81 95       	neg	r24
    174e:	9f 4f       	sbci	r25, 0xFF	; 255
    1750:	08 95       	ret

00001752 <__divmodhi4_neg2>:
    1752:	70 95       	com	r23
    1754:	61 95       	neg	r22
    1756:	7f 4f       	sbci	r23, 0xFF	; 255

00001758 <__divmodhi4_exit>:
    1758:	08 95       	ret

0000175a <__tablejump2__>:
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	05 90       	lpm	r0, Z+
    1760:	f4 91       	lpm	r31, Z
    1762:	e0 2d       	mov	r30, r0
    1764:	09 94       	ijmp

00001766 <__umulhisi3>:
    1766:	a2 9f       	mul	r26, r18
    1768:	b0 01       	movw	r22, r0
    176a:	b3 9f       	mul	r27, r19
    176c:	c0 01       	movw	r24, r0
    176e:	a3 9f       	mul	r26, r19
    1770:	70 0d       	add	r23, r0
    1772:	81 1d       	adc	r24, r1
    1774:	11 24       	eor	r1, r1
    1776:	91 1d       	adc	r25, r1
    1778:	b2 9f       	mul	r27, r18
    177a:	70 0d       	add	r23, r0
    177c:	81 1d       	adc	r24, r1
    177e:	11 24       	eor	r1, r1
    1780:	91 1d       	adc	r25, r1
    1782:	08 95       	ret

00001784 <__udivmodhi4>:
    1784:	aa 1b       	sub	r26, r26
    1786:	bb 1b       	sub	r27, r27
    1788:	51 e1       	ldi	r21, 0x11	; 17
    178a:	07 c0       	rjmp	.+14     	; 0x179a <__udivmodhi4_ep>

0000178c <__udivmodhi4_loop>:
    178c:	aa 1f       	adc	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	a6 17       	cp	r26, r22
    1792:	b7 07       	cpc	r27, r23
    1794:	10 f0       	brcs	.+4      	; 0x179a <__udivmodhi4_ep>
    1796:	a6 1b       	sub	r26, r22
    1798:	b7 0b       	sbc	r27, r23

0000179a <__udivmodhi4_ep>:
    179a:	88 1f       	adc	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	5a 95       	dec	r21
    17a0:	a9 f7       	brne	.-22     	; 0x178c <__udivmodhi4_loop>
    17a2:	80 95       	com	r24
    17a4:	90 95       	com	r25
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	08 95       	ret

000017ac <__subsf3>:
    17ac:	50 58       	subi	r21, 0x80	; 128

000017ae <__addsf3>:
    17ae:	bb 27       	eor	r27, r27
    17b0:	aa 27       	eor	r26, r26
    17b2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__addsf3x>
    17b6:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_round>
    17ba:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_pscA>
    17be:	38 f0       	brcs	.+14     	; 0x17ce <__addsf3+0x20>
    17c0:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_pscB>
    17c4:	20 f0       	brcs	.+8      	; 0x17ce <__addsf3+0x20>
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <__addsf3+0x28>
    17c8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ca:	19 f4       	brne	.+6      	; 0x17d2 <__addsf3+0x24>
    17cc:	26 f4       	brtc	.+8      	; 0x17d6 <__addsf3+0x28>
    17ce:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__fp_nan>
    17d2:	0e f4       	brtc	.+2      	; 0x17d6 <__addsf3+0x28>
    17d4:	e0 95       	com	r30
    17d6:	e7 fb       	bst	r30, 7
    17d8:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__fp_inf>

000017dc <__addsf3x>:
    17dc:	e9 2f       	mov	r30, r25
    17de:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fp_split3>
    17e2:	58 f3       	brcs	.-42     	; 0x17ba <__addsf3+0xc>
    17e4:	ba 17       	cp	r27, r26
    17e6:	62 07       	cpc	r22, r18
    17e8:	73 07       	cpc	r23, r19
    17ea:	84 07       	cpc	r24, r20
    17ec:	95 07       	cpc	r25, r21
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <__addsf3x+0x1c>
    17f0:	79 f4       	brne	.+30     	; 0x1810 <__addsf3x+0x34>
    17f2:	a6 f5       	brtc	.+104    	; 0x185c <__addsf3x+0x80>
    17f4:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_zero>
    17f8:	0e f4       	brtc	.+2      	; 0x17fc <__addsf3x+0x20>
    17fa:	e0 95       	com	r30
    17fc:	0b 2e       	mov	r0, r27
    17fe:	ba 2f       	mov	r27, r26
    1800:	a0 2d       	mov	r26, r0
    1802:	0b 01       	movw	r0, r22
    1804:	b9 01       	movw	r22, r18
    1806:	90 01       	movw	r18, r0
    1808:	0c 01       	movw	r0, r24
    180a:	ca 01       	movw	r24, r20
    180c:	a0 01       	movw	r20, r0
    180e:	11 24       	eor	r1, r1
    1810:	ff 27       	eor	r31, r31
    1812:	59 1b       	sub	r21, r25
    1814:	99 f0       	breq	.+38     	; 0x183c <__addsf3x+0x60>
    1816:	59 3f       	cpi	r21, 0xF9	; 249
    1818:	50 f4       	brcc	.+20     	; 0x182e <__addsf3x+0x52>
    181a:	50 3e       	cpi	r21, 0xE0	; 224
    181c:	68 f1       	brcs	.+90     	; 0x1878 <__addsf3x+0x9c>
    181e:	1a 16       	cp	r1, r26
    1820:	f0 40       	sbci	r31, 0x00	; 0
    1822:	a2 2f       	mov	r26, r18
    1824:	23 2f       	mov	r18, r19
    1826:	34 2f       	mov	r19, r20
    1828:	44 27       	eor	r20, r20
    182a:	58 5f       	subi	r21, 0xF8	; 248
    182c:	f3 cf       	rjmp	.-26     	; 0x1814 <__addsf3x+0x38>
    182e:	46 95       	lsr	r20
    1830:	37 95       	ror	r19
    1832:	27 95       	ror	r18
    1834:	a7 95       	ror	r26
    1836:	f0 40       	sbci	r31, 0x00	; 0
    1838:	53 95       	inc	r21
    183a:	c9 f7       	brne	.-14     	; 0x182e <__addsf3x+0x52>
    183c:	7e f4       	brtc	.+30     	; 0x185c <__addsf3x+0x80>
    183e:	1f 16       	cp	r1, r31
    1840:	ba 0b       	sbc	r27, r26
    1842:	62 0b       	sbc	r22, r18
    1844:	73 0b       	sbc	r23, r19
    1846:	84 0b       	sbc	r24, r20
    1848:	ba f0       	brmi	.+46     	; 0x1878 <__addsf3x+0x9c>
    184a:	91 50       	subi	r25, 0x01	; 1
    184c:	a1 f0       	breq	.+40     	; 0x1876 <__addsf3x+0x9a>
    184e:	ff 0f       	add	r31, r31
    1850:	bb 1f       	adc	r27, r27
    1852:	66 1f       	adc	r22, r22
    1854:	77 1f       	adc	r23, r23
    1856:	88 1f       	adc	r24, r24
    1858:	c2 f7       	brpl	.-16     	; 0x184a <__addsf3x+0x6e>
    185a:	0e c0       	rjmp	.+28     	; 0x1878 <__addsf3x+0x9c>
    185c:	ba 0f       	add	r27, r26
    185e:	62 1f       	adc	r22, r18
    1860:	73 1f       	adc	r23, r19
    1862:	84 1f       	adc	r24, r20
    1864:	48 f4       	brcc	.+18     	; 0x1878 <__addsf3x+0x9c>
    1866:	87 95       	ror	r24
    1868:	77 95       	ror	r23
    186a:	67 95       	ror	r22
    186c:	b7 95       	ror	r27
    186e:	f7 95       	ror	r31
    1870:	9e 3f       	cpi	r25, 0xFE	; 254
    1872:	08 f0       	brcs	.+2      	; 0x1876 <__addsf3x+0x9a>
    1874:	b0 cf       	rjmp	.-160    	; 0x17d6 <__addsf3+0x28>
    1876:	93 95       	inc	r25
    1878:	88 0f       	add	r24, r24
    187a:	08 f0       	brcs	.+2      	; 0x187e <__addsf3x+0xa2>
    187c:	99 27       	eor	r25, r25
    187e:	ee 0f       	add	r30, r30
    1880:	97 95       	ror	r25
    1882:	87 95       	ror	r24
    1884:	08 95       	ret

00001886 <__divsf3>:
    1886:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3x>
    188a:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_round>
    188e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_pscB>
    1892:	58 f0       	brcs	.+22     	; 0x18aa <__divsf3+0x24>
    1894:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_pscA>
    1898:	40 f0       	brcs	.+16     	; 0x18aa <__divsf3+0x24>
    189a:	29 f4       	brne	.+10     	; 0x18a6 <__divsf3+0x20>
    189c:	5f 3f       	cpi	r21, 0xFF	; 255
    189e:	29 f0       	breq	.+10     	; 0x18aa <__divsf3+0x24>
    18a0:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__fp_inf>
    18a4:	51 11       	cpse	r21, r1
    18a6:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__fp_szero>
    18aa:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__fp_nan>

000018ae <__divsf3x>:
    18ae:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fp_split3>
    18b2:	68 f3       	brcs	.-38     	; 0x188e <__divsf3+0x8>

000018b4 <__divsf3_pse>:
    18b4:	99 23       	and	r25, r25
    18b6:	b1 f3       	breq	.-20     	; 0x18a4 <__divsf3+0x1e>
    18b8:	55 23       	and	r21, r21
    18ba:	91 f3       	breq	.-28     	; 0x18a0 <__divsf3+0x1a>
    18bc:	95 1b       	sub	r25, r21
    18be:	55 0b       	sbc	r21, r21
    18c0:	bb 27       	eor	r27, r27
    18c2:	aa 27       	eor	r26, r26
    18c4:	62 17       	cp	r22, r18
    18c6:	73 07       	cpc	r23, r19
    18c8:	84 07       	cpc	r24, r20
    18ca:	38 f0       	brcs	.+14     	; 0x18da <__divsf3_pse+0x26>
    18cc:	9f 5f       	subi	r25, 0xFF	; 255
    18ce:	5f 4f       	sbci	r21, 0xFF	; 255
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	44 1f       	adc	r20, r20
    18d6:	aa 1f       	adc	r26, r26
    18d8:	a9 f3       	breq	.-22     	; 0x18c4 <__divsf3_pse+0x10>
    18da:	35 d0       	rcall	.+106    	; 0x1946 <__divsf3_pse+0x92>
    18dc:	0e 2e       	mov	r0, r30
    18de:	3a f0       	brmi	.+14     	; 0x18ee <__divsf3_pse+0x3a>
    18e0:	e0 e8       	ldi	r30, 0x80	; 128
    18e2:	32 d0       	rcall	.+100    	; 0x1948 <__divsf3_pse+0x94>
    18e4:	91 50       	subi	r25, 0x01	; 1
    18e6:	50 40       	sbci	r21, 0x00	; 0
    18e8:	e6 95       	lsr	r30
    18ea:	00 1c       	adc	r0, r0
    18ec:	ca f7       	brpl	.-14     	; 0x18e0 <__divsf3_pse+0x2c>
    18ee:	2b d0       	rcall	.+86     	; 0x1946 <__divsf3_pse+0x92>
    18f0:	fe 2f       	mov	r31, r30
    18f2:	29 d0       	rcall	.+82     	; 0x1946 <__divsf3_pse+0x92>
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	bb 1f       	adc	r27, r27
    18fc:	26 17       	cp	r18, r22
    18fe:	37 07       	cpc	r19, r23
    1900:	48 07       	cpc	r20, r24
    1902:	ab 07       	cpc	r26, r27
    1904:	b0 e8       	ldi	r27, 0x80	; 128
    1906:	09 f0       	breq	.+2      	; 0x190a <__divsf3_pse+0x56>
    1908:	bb 0b       	sbc	r27, r27
    190a:	80 2d       	mov	r24, r0
    190c:	bf 01       	movw	r22, r30
    190e:	ff 27       	eor	r31, r31
    1910:	93 58       	subi	r25, 0x83	; 131
    1912:	5f 4f       	sbci	r21, 0xFF	; 255
    1914:	3a f0       	brmi	.+14     	; 0x1924 <__divsf3_pse+0x70>
    1916:	9e 3f       	cpi	r25, 0xFE	; 254
    1918:	51 05       	cpc	r21, r1
    191a:	78 f0       	brcs	.+30     	; 0x193a <__divsf3_pse+0x86>
    191c:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__fp_inf>
    1920:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__fp_szero>
    1924:	5f 3f       	cpi	r21, 0xFF	; 255
    1926:	e4 f3       	brlt	.-8      	; 0x1920 <__divsf3_pse+0x6c>
    1928:	98 3e       	cpi	r25, 0xE8	; 232
    192a:	d4 f3       	brlt	.-12     	; 0x1920 <__divsf3_pse+0x6c>
    192c:	86 95       	lsr	r24
    192e:	77 95       	ror	r23
    1930:	67 95       	ror	r22
    1932:	b7 95       	ror	r27
    1934:	f7 95       	ror	r31
    1936:	9f 5f       	subi	r25, 0xFF	; 255
    1938:	c9 f7       	brne	.-14     	; 0x192c <__divsf3_pse+0x78>
    193a:	88 0f       	add	r24, r24
    193c:	91 1d       	adc	r25, r1
    193e:	96 95       	lsr	r25
    1940:	87 95       	ror	r24
    1942:	97 f9       	bld	r25, 7
    1944:	08 95       	ret
    1946:	e1 e0       	ldi	r30, 0x01	; 1
    1948:	66 0f       	add	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	bb 1f       	adc	r27, r27
    1950:	62 17       	cp	r22, r18
    1952:	73 07       	cpc	r23, r19
    1954:	84 07       	cpc	r24, r20
    1956:	ba 07       	cpc	r27, r26
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__divsf3_pse+0xae>
    195a:	62 1b       	sub	r22, r18
    195c:	73 0b       	sbc	r23, r19
    195e:	84 0b       	sbc	r24, r20
    1960:	ba 0b       	sbc	r27, r26
    1962:	ee 1f       	adc	r30, r30
    1964:	88 f7       	brcc	.-30     	; 0x1948 <__divsf3_pse+0x94>
    1966:	e0 95       	com	r30
    1968:	08 95       	ret

0000196a <__fixsfsi>:
    196a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fixunssfsi>
    196e:	68 94       	set
    1970:	b1 11       	cpse	r27, r1
    1972:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__fp_szero>
    1976:	08 95       	ret

00001978 <__fixunssfsi>:
    1978:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_splitA>
    197c:	88 f0       	brcs	.+34     	; 0x19a0 <__fixunssfsi+0x28>
    197e:	9f 57       	subi	r25, 0x7F	; 127
    1980:	98 f0       	brcs	.+38     	; 0x19a8 <__fixunssfsi+0x30>
    1982:	b9 2f       	mov	r27, r25
    1984:	99 27       	eor	r25, r25
    1986:	b7 51       	subi	r27, 0x17	; 23
    1988:	b0 f0       	brcs	.+44     	; 0x19b6 <__fixunssfsi+0x3e>
    198a:	e1 f0       	breq	.+56     	; 0x19c4 <__fixunssfsi+0x4c>
    198c:	66 0f       	add	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	88 1f       	adc	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	1a f0       	brmi	.+6      	; 0x199c <__fixunssfsi+0x24>
    1996:	ba 95       	dec	r27
    1998:	c9 f7       	brne	.-14     	; 0x198c <__fixunssfsi+0x14>
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <__fixunssfsi+0x4c>
    199c:	b1 30       	cpi	r27, 0x01	; 1
    199e:	91 f0       	breq	.+36     	; 0x19c4 <__fixunssfsi+0x4c>
    19a0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__fp_zero>
    19a4:	b1 e0       	ldi	r27, 0x01	; 1
    19a6:	08 95       	ret
    19a8:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_zero>
    19ac:	67 2f       	mov	r22, r23
    19ae:	78 2f       	mov	r23, r24
    19b0:	88 27       	eor	r24, r24
    19b2:	b8 5f       	subi	r27, 0xF8	; 248
    19b4:	39 f0       	breq	.+14     	; 0x19c4 <__fixunssfsi+0x4c>
    19b6:	b9 3f       	cpi	r27, 0xF9	; 249
    19b8:	cc f3       	brlt	.-14     	; 0x19ac <__fixunssfsi+0x34>
    19ba:	86 95       	lsr	r24
    19bc:	77 95       	ror	r23
    19be:	67 95       	ror	r22
    19c0:	b3 95       	inc	r27
    19c2:	d9 f7       	brne	.-10     	; 0x19ba <__fixunssfsi+0x42>
    19c4:	3e f4       	brtc	.+14     	; 0x19d4 <__fixunssfsi+0x5c>
    19c6:	90 95       	com	r25
    19c8:	80 95       	com	r24
    19ca:	70 95       	com	r23
    19cc:	61 95       	neg	r22
    19ce:	7f 4f       	sbci	r23, 0xFF	; 255
    19d0:	8f 4f       	sbci	r24, 0xFF	; 255
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	08 95       	ret

000019d6 <__floatunsisf>:
    19d6:	e8 94       	clt
    19d8:	09 c0       	rjmp	.+18     	; 0x19ec <__floatsisf+0x12>

000019da <__floatsisf>:
    19da:	97 fb       	bst	r25, 7
    19dc:	3e f4       	brtc	.+14     	; 0x19ec <__floatsisf+0x12>
    19de:	90 95       	com	r25
    19e0:	80 95       	com	r24
    19e2:	70 95       	com	r23
    19e4:	61 95       	neg	r22
    19e6:	7f 4f       	sbci	r23, 0xFF	; 255
    19e8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	99 23       	and	r25, r25
    19ee:	a9 f0       	breq	.+42     	; 0x1a1a <__floatsisf+0x40>
    19f0:	f9 2f       	mov	r31, r25
    19f2:	96 e9       	ldi	r25, 0x96	; 150
    19f4:	bb 27       	eor	r27, r27
    19f6:	93 95       	inc	r25
    19f8:	f6 95       	lsr	r31
    19fa:	87 95       	ror	r24
    19fc:	77 95       	ror	r23
    19fe:	67 95       	ror	r22
    1a00:	b7 95       	ror	r27
    1a02:	f1 11       	cpse	r31, r1
    1a04:	f8 cf       	rjmp	.-16     	; 0x19f6 <__floatsisf+0x1c>
    1a06:	fa f4       	brpl	.+62     	; 0x1a46 <__floatsisf+0x6c>
    1a08:	bb 0f       	add	r27, r27
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <__floatsisf+0x36>
    1a0c:	60 ff       	sbrs	r22, 0
    1a0e:	1b c0       	rjmp	.+54     	; 0x1a46 <__floatsisf+0x6c>
    1a10:	6f 5f       	subi	r22, 0xFF	; 255
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	8f 4f       	sbci	r24, 0xFF	; 255
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	16 c0       	rjmp	.+44     	; 0x1a46 <__floatsisf+0x6c>
    1a1a:	88 23       	and	r24, r24
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <__floatsisf+0x48>
    1a1e:	96 e9       	ldi	r25, 0x96	; 150
    1a20:	11 c0       	rjmp	.+34     	; 0x1a44 <__floatsisf+0x6a>
    1a22:	77 23       	and	r23, r23
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <__floatsisf+0x54>
    1a26:	9e e8       	ldi	r25, 0x8E	; 142
    1a28:	87 2f       	mov	r24, r23
    1a2a:	76 2f       	mov	r23, r22
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <__floatsisf+0x5e>
    1a2e:	66 23       	and	r22, r22
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <__floatsisf+0x74>
    1a32:	96 e8       	ldi	r25, 0x86	; 134
    1a34:	86 2f       	mov	r24, r22
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	2a f0       	brmi	.+10     	; 0x1a46 <__floatsisf+0x6c>
    1a3c:	9a 95       	dec	r25
    1a3e:	66 0f       	add	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	88 1f       	adc	r24, r24
    1a44:	da f7       	brpl	.-10     	; 0x1a3c <__floatsisf+0x62>
    1a46:	88 0f       	add	r24, r24
    1a48:	96 95       	lsr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	97 f9       	bld	r25, 7
    1a4e:	08 95       	ret

00001a50 <__fp_inf>:
    1a50:	97 f9       	bld	r25, 7
    1a52:	9f 67       	ori	r25, 0x7F	; 127
    1a54:	80 e8       	ldi	r24, 0x80	; 128
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	08 95       	ret

00001a5c <__fp_nan>:
    1a5c:	9f ef       	ldi	r25, 0xFF	; 255
    1a5e:	80 ec       	ldi	r24, 0xC0	; 192
    1a60:	08 95       	ret

00001a62 <__fp_pscA>:
    1a62:	00 24       	eor	r0, r0
    1a64:	0a 94       	dec	r0
    1a66:	16 16       	cp	r1, r22
    1a68:	17 06       	cpc	r1, r23
    1a6a:	18 06       	cpc	r1, r24
    1a6c:	09 06       	cpc	r0, r25
    1a6e:	08 95       	ret

00001a70 <__fp_pscB>:
    1a70:	00 24       	eor	r0, r0
    1a72:	0a 94       	dec	r0
    1a74:	12 16       	cp	r1, r18
    1a76:	13 06       	cpc	r1, r19
    1a78:	14 06       	cpc	r1, r20
    1a7a:	05 06       	cpc	r0, r21
    1a7c:	08 95       	ret

00001a7e <__fp_round>:
    1a7e:	09 2e       	mov	r0, r25
    1a80:	03 94       	inc	r0
    1a82:	00 0c       	add	r0, r0
    1a84:	11 f4       	brne	.+4      	; 0x1a8a <__fp_round+0xc>
    1a86:	88 23       	and	r24, r24
    1a88:	52 f0       	brmi	.+20     	; 0x1a9e <__fp_round+0x20>
    1a8a:	bb 0f       	add	r27, r27
    1a8c:	40 f4       	brcc	.+16     	; 0x1a9e <__fp_round+0x20>
    1a8e:	bf 2b       	or	r27, r31
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <__fp_round+0x18>
    1a92:	60 ff       	sbrs	r22, 0
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <__fp_round+0x20>
    1a96:	6f 5f       	subi	r22, 0xFF	; 255
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	08 95       	ret

00001aa0 <__fp_split3>:
    1aa0:	57 fd       	sbrc	r21, 7
    1aa2:	90 58       	subi	r25, 0x80	; 128
    1aa4:	44 0f       	add	r20, r20
    1aa6:	55 1f       	adc	r21, r21
    1aa8:	59 f0       	breq	.+22     	; 0x1ac0 <__fp_splitA+0x10>
    1aaa:	5f 3f       	cpi	r21, 0xFF	; 255
    1aac:	71 f0       	breq	.+28     	; 0x1aca <__fp_splitA+0x1a>
    1aae:	47 95       	ror	r20

00001ab0 <__fp_splitA>:
    1ab0:	88 0f       	add	r24, r24
    1ab2:	97 fb       	bst	r25, 7
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	61 f0       	breq	.+24     	; 0x1ad0 <__fp_splitA+0x20>
    1ab8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aba:	79 f0       	breq	.+30     	; 0x1ada <__fp_splitA+0x2a>
    1abc:	87 95       	ror	r24
    1abe:	08 95       	ret
    1ac0:	12 16       	cp	r1, r18
    1ac2:	13 06       	cpc	r1, r19
    1ac4:	14 06       	cpc	r1, r20
    1ac6:	55 1f       	adc	r21, r21
    1ac8:	f2 cf       	rjmp	.-28     	; 0x1aae <__fp_split3+0xe>
    1aca:	46 95       	lsr	r20
    1acc:	f1 df       	rcall	.-30     	; 0x1ab0 <__fp_splitA>
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <__fp_splitA+0x30>
    1ad0:	16 16       	cp	r1, r22
    1ad2:	17 06       	cpc	r1, r23
    1ad4:	18 06       	cpc	r1, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	f1 cf       	rjmp	.-30     	; 0x1abc <__fp_splitA+0xc>
    1ada:	86 95       	lsr	r24
    1adc:	71 05       	cpc	r23, r1
    1ade:	61 05       	cpc	r22, r1
    1ae0:	08 94       	sec
    1ae2:	08 95       	ret

00001ae4 <__fp_zero>:
    1ae4:	e8 94       	clt

00001ae6 <__fp_szero>:
    1ae6:	bb 27       	eor	r27, r27
    1ae8:	66 27       	eor	r22, r22
    1aea:	77 27       	eor	r23, r23
    1aec:	cb 01       	movw	r24, r22
    1aee:	97 f9       	bld	r25, 7
    1af0:	08 95       	ret

00001af2 <__mulsf3>:
    1af2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3x>
    1af6:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_round>
    1afa:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_pscA>
    1afe:	38 f0       	brcs	.+14     	; 0x1b0e <__mulsf3+0x1c>
    1b00:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_pscB>
    1b04:	20 f0       	brcs	.+8      	; 0x1b0e <__mulsf3+0x1c>
    1b06:	95 23       	and	r25, r21
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <__mulsf3+0x1c>
    1b0a:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__fp_inf>
    1b0e:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__fp_nan>
    1b12:	11 24       	eor	r1, r1
    1b14:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__fp_szero>

00001b18 <__mulsf3x>:
    1b18:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fp_split3>
    1b1c:	70 f3       	brcs	.-36     	; 0x1afa <__mulsf3+0x8>

00001b1e <__mulsf3_pse>:
    1b1e:	95 9f       	mul	r25, r21
    1b20:	c1 f3       	breq	.-16     	; 0x1b12 <__mulsf3+0x20>
    1b22:	95 0f       	add	r25, r21
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	55 1f       	adc	r21, r21
    1b28:	62 9f       	mul	r22, r18
    1b2a:	f0 01       	movw	r30, r0
    1b2c:	72 9f       	mul	r23, r18
    1b2e:	bb 27       	eor	r27, r27
    1b30:	f0 0d       	add	r31, r0
    1b32:	b1 1d       	adc	r27, r1
    1b34:	63 9f       	mul	r22, r19
    1b36:	aa 27       	eor	r26, r26
    1b38:	f0 0d       	add	r31, r0
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	aa 1f       	adc	r26, r26
    1b3e:	64 9f       	mul	r22, r20
    1b40:	66 27       	eor	r22, r22
    1b42:	b0 0d       	add	r27, r0
    1b44:	a1 1d       	adc	r26, r1
    1b46:	66 1f       	adc	r22, r22
    1b48:	82 9f       	mul	r24, r18
    1b4a:	22 27       	eor	r18, r18
    1b4c:	b0 0d       	add	r27, r0
    1b4e:	a1 1d       	adc	r26, r1
    1b50:	62 1f       	adc	r22, r18
    1b52:	73 9f       	mul	r23, r19
    1b54:	b0 0d       	add	r27, r0
    1b56:	a1 1d       	adc	r26, r1
    1b58:	62 1f       	adc	r22, r18
    1b5a:	83 9f       	mul	r24, r19
    1b5c:	a0 0d       	add	r26, r0
    1b5e:	61 1d       	adc	r22, r1
    1b60:	22 1f       	adc	r18, r18
    1b62:	74 9f       	mul	r23, r20
    1b64:	33 27       	eor	r19, r19
    1b66:	a0 0d       	add	r26, r0
    1b68:	61 1d       	adc	r22, r1
    1b6a:	23 1f       	adc	r18, r19
    1b6c:	84 9f       	mul	r24, r20
    1b6e:	60 0d       	add	r22, r0
    1b70:	21 1d       	adc	r18, r1
    1b72:	82 2f       	mov	r24, r18
    1b74:	76 2f       	mov	r23, r22
    1b76:	6a 2f       	mov	r22, r26
    1b78:	11 24       	eor	r1, r1
    1b7a:	9f 57       	subi	r25, 0x7F	; 127
    1b7c:	50 40       	sbci	r21, 0x00	; 0
    1b7e:	9a f0       	brmi	.+38     	; 0x1ba6 <__mulsf3_pse+0x88>
    1b80:	f1 f0       	breq	.+60     	; 0x1bbe <__mulsf3_pse+0xa0>
    1b82:	88 23       	and	r24, r24
    1b84:	4a f0       	brmi	.+18     	; 0x1b98 <__mulsf3_pse+0x7a>
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	66 1f       	adc	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	91 50       	subi	r25, 0x01	; 1
    1b94:	50 40       	sbci	r21, 0x00	; 0
    1b96:	a9 f7       	brne	.-22     	; 0x1b82 <__mulsf3_pse+0x64>
    1b98:	9e 3f       	cpi	r25, 0xFE	; 254
    1b9a:	51 05       	cpc	r21, r1
    1b9c:	80 f0       	brcs	.+32     	; 0x1bbe <__mulsf3_pse+0xa0>
    1b9e:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__fp_inf>
    1ba2:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__fp_szero>
    1ba6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba8:	e4 f3       	brlt	.-8      	; 0x1ba2 <__mulsf3_pse+0x84>
    1baa:	98 3e       	cpi	r25, 0xE8	; 232
    1bac:	d4 f3       	brlt	.-12     	; 0x1ba2 <__mulsf3_pse+0x84>
    1bae:	86 95       	lsr	r24
    1bb0:	77 95       	ror	r23
    1bb2:	67 95       	ror	r22
    1bb4:	b7 95       	ror	r27
    1bb6:	f7 95       	ror	r31
    1bb8:	e7 95       	ror	r30
    1bba:	9f 5f       	subi	r25, 0xFF	; 255
    1bbc:	c1 f7       	brne	.-16     	; 0x1bae <__mulsf3_pse+0x90>
    1bbe:	fe 2b       	or	r31, r30
    1bc0:	88 0f       	add	r24, r24
    1bc2:	91 1d       	adc	r25, r1
    1bc4:	96 95       	lsr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	97 f9       	bld	r25, 7
    1bca:	08 95       	ret

00001bcc <do_rand>:
    1bcc:	8f 92       	push	r8
    1bce:	9f 92       	push	r9
    1bd0:	af 92       	push	r10
    1bd2:	bf 92       	push	r11
    1bd4:	cf 92       	push	r12
    1bd6:	df 92       	push	r13
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	ec 01       	movw	r28, r24
    1be2:	68 81       	ld	r22, Y
    1be4:	79 81       	ldd	r23, Y+1	; 0x01
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	61 15       	cp	r22, r1
    1bec:	71 05       	cpc	r23, r1
    1bee:	81 05       	cpc	r24, r1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	21 f4       	brne	.+8      	; 0x1bfc <do_rand+0x30>
    1bf4:	64 e2       	ldi	r22, 0x24	; 36
    1bf6:	79 ed       	ldi	r23, 0xD9	; 217
    1bf8:	8b e5       	ldi	r24, 0x5B	; 91
    1bfa:	97 e0       	ldi	r25, 0x07	; 7
    1bfc:	2d e1       	ldi	r18, 0x1D	; 29
    1bfe:	33 ef       	ldi	r19, 0xF3	; 243
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__divmodsi4>
    1c08:	49 01       	movw	r8, r18
    1c0a:	5a 01       	movw	r10, r20
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
    1c10:	a7 ea       	ldi	r26, 0xA7	; 167
    1c12:	b1 e4       	ldi	r27, 0x41	; 65
    1c14:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__muluhisi3>
    1c18:	6b 01       	movw	r12, r22
    1c1a:	7c 01       	movw	r14, r24
    1c1c:	ac ee       	ldi	r26, 0xEC	; 236
    1c1e:	b4 ef       	ldi	r27, 0xF4	; 244
    1c20:	a5 01       	movw	r20, r10
    1c22:	94 01       	movw	r18, r8
    1c24:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__mulohisi3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	8c 0d       	add	r24, r12
    1c2e:	9d 1d       	adc	r25, r13
    1c30:	ae 1d       	adc	r26, r14
    1c32:	bf 1d       	adc	r27, r15
    1c34:	b7 ff       	sbrs	r27, 7
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <do_rand+0x72>
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	a1 09       	sbc	r26, r1
    1c3c:	b0 48       	sbci	r27, 0x80	; 128
    1c3e:	88 83       	st	Y, r24
    1c40:	99 83       	std	Y+1, r25	; 0x01
    1c42:	aa 83       	std	Y+2, r26	; 0x02
    1c44:	bb 83       	std	Y+3, r27	; 0x03
    1c46:	9f 77       	andi	r25, 0x7F	; 127
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	df 90       	pop	r13
    1c52:	cf 90       	pop	r12
    1c54:	bf 90       	pop	r11
    1c56:	af 90       	pop	r10
    1c58:	9f 90       	pop	r9
    1c5a:	8f 90       	pop	r8
    1c5c:	08 95       	ret

00001c5e <rand_r>:
    1c5e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <do_rand>
    1c62:	08 95       	ret

00001c64 <rand>:
    1c64:	87 e0       	ldi	r24, 0x07	; 7
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <do_rand>
    1c6c:	08 95       	ret

00001c6e <srand>:
    1c6e:	a0 e0       	ldi	r26, 0x00	; 0
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	80 93 07 01 	sts	0x0107, r24
    1c76:	90 93 08 01 	sts	0x0108, r25
    1c7a:	a0 93 09 01 	sts	0x0109, r26
    1c7e:	b0 93 0a 01 	sts	0x010A, r27
    1c82:	08 95       	ret

00001c84 <eeprom_read_byte>:
    1c84:	f9 99       	sbic	0x1f, 1	; 31
    1c86:	fe cf       	rjmp	.-4      	; 0x1c84 <eeprom_read_byte>
    1c88:	92 bd       	out	0x22, r25	; 34
    1c8a:	81 bd       	out	0x21, r24	; 33
    1c8c:	f8 9a       	sbi	0x1f, 0	; 31
    1c8e:	99 27       	eor	r25, r25
    1c90:	80 b5       	in	r24, 0x20	; 32
    1c92:	08 95       	ret

00001c94 <eeprom_write_byte>:
    1c94:	26 2f       	mov	r18, r22

00001c96 <eeprom_write_r18>:
    1c96:	f9 99       	sbic	0x1f, 1	; 31
    1c98:	fe cf       	rjmp	.-4      	; 0x1c96 <eeprom_write_r18>
    1c9a:	1f ba       	out	0x1f, r1	; 31
    1c9c:	92 bd       	out	0x22, r25	; 34
    1c9e:	81 bd       	out	0x21, r24	; 33
    1ca0:	20 bd       	out	0x20, r18	; 32
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	fa 9a       	sbi	0x1f, 2	; 31
    1ca8:	f9 9a       	sbi	0x1f, 1	; 31
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	08 95       	ret

00001cb0 <__divmodsi4>:
    1cb0:	05 2e       	mov	r0, r21
    1cb2:	97 fb       	bst	r25, 7
    1cb4:	1e f4       	brtc	.+6      	; 0x1cbc <__divmodsi4+0xc>
    1cb6:	00 94       	com	r0
    1cb8:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__negsi2>
    1cbc:	57 fd       	sbrc	r21, 7
    1cbe:	07 d0       	rcall	.+14     	; 0x1cce <__divmodsi4_neg2>
    1cc0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
    1cc4:	07 fc       	sbrc	r0, 7
    1cc6:	03 d0       	rcall	.+6      	; 0x1cce <__divmodsi4_neg2>
    1cc8:	4e f4       	brtc	.+18     	; 0x1cdc <__divmodsi4_exit>
    1cca:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__negsi2>

00001cce <__divmodsi4_neg2>:
    1cce:	50 95       	com	r21
    1cd0:	40 95       	com	r20
    1cd2:	30 95       	com	r19
    1cd4:	21 95       	neg	r18
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	4f 4f       	sbci	r20, 0xFF	; 255
    1cda:	5f 4f       	sbci	r21, 0xFF	; 255

00001cdc <__divmodsi4_exit>:
    1cdc:	08 95       	ret

00001cde <__negsi2>:
    1cde:	90 95       	com	r25
    1ce0:	80 95       	com	r24
    1ce2:	70 95       	com	r23
    1ce4:	61 95       	neg	r22
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cea:	9f 4f       	sbci	r25, 0xFF	; 255
    1cec:	08 95       	ret

00001cee <__muluhisi3>:
    1cee:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__umulhisi3>
    1cf2:	a5 9f       	mul	r26, r21
    1cf4:	90 0d       	add	r25, r0
    1cf6:	b4 9f       	mul	r27, r20
    1cf8:	90 0d       	add	r25, r0
    1cfa:	a4 9f       	mul	r26, r20
    1cfc:	80 0d       	add	r24, r0
    1cfe:	91 1d       	adc	r25, r1
    1d00:	11 24       	eor	r1, r1
    1d02:	08 95       	ret

00001d04 <__mulshisi3>:
    1d04:	b7 ff       	sbrs	r27, 7
    1d06:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__muluhisi3>

00001d0a <__mulohisi3>:
    1d0a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__muluhisi3>
    1d0e:	82 1b       	sub	r24, r18
    1d10:	93 0b       	sbc	r25, r19
    1d12:	08 95       	ret

00001d14 <__udivmodsi4>:
    1d14:	a1 e2       	ldi	r26, 0x21	; 33
    1d16:	1a 2e       	mov	r1, r26
    1d18:	aa 1b       	sub	r26, r26
    1d1a:	bb 1b       	sub	r27, r27
    1d1c:	fd 01       	movw	r30, r26
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <__udivmodsi4_ep>

00001d20 <__udivmodsi4_loop>:
    1d20:	aa 1f       	adc	r26, r26
    1d22:	bb 1f       	adc	r27, r27
    1d24:	ee 1f       	adc	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	a2 17       	cp	r26, r18
    1d2a:	b3 07       	cpc	r27, r19
    1d2c:	e4 07       	cpc	r30, r20
    1d2e:	f5 07       	cpc	r31, r21
    1d30:	20 f0       	brcs	.+8      	; 0x1d3a <__udivmodsi4_ep>
    1d32:	a2 1b       	sub	r26, r18
    1d34:	b3 0b       	sbc	r27, r19
    1d36:	e4 0b       	sbc	r30, r20
    1d38:	f5 0b       	sbc	r31, r21

00001d3a <__udivmodsi4_ep>:
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	1a 94       	dec	r1
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <__udivmodsi4_loop>
    1d46:	60 95       	com	r22
    1d48:	70 95       	com	r23
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	9b 01       	movw	r18, r22
    1d50:	ac 01       	movw	r20, r24
    1d52:	bd 01       	movw	r22, r26
    1d54:	cf 01       	movw	r24, r30
    1d56:	08 95       	ret

00001d58 <_exit>:
    1d58:	f8 94       	cli

00001d5a <__stop_program>:
    1d5a:	ff cf       	rjmp	.-2      	; 0x1d5a <__stop_program>
