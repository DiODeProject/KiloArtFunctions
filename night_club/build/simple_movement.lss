
build/simple_movement.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	3c 04       	cpc	r3, r12
      6a:	b8 04       	cpc	r11, r8
      6c:	10 04       	cpc	r1, r0
      6e:	07 04       	cpc	r0, r7
      70:	0d 04       	cpc	r0, r13
      72:	9a 04       	cpc	r9, r10
      74:	8f 04       	cpc	r8, r15
      76:	1a 0b       	sbc	r17, r26
      78:	f7 09       	sbc	r31, r7
      7a:	f7 09       	sbc	r31, r7
      7c:	17 0b       	sbc	r17, r23
      7e:	23 0b       	sbc	r18, r19
      80:	13 0b       	sbc	r17, r19
      82:	2a 0b       	sbc	r18, r26
      84:	26 0b       	sbc	r18, r22
      86:	2e 0b       	sbc	r18, r30
      88:	e6 0a       	sbc	r14, r22
      8a:	b8 0a       	sbc	r11, r24

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e1       	ldi	r30, 0x18	; 24
      b8:	ff e1       	ldi	r31, 0x1F	; 31
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a0 31       	cpi	r26, 0x10	; 16
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a0 e1       	ldi	r26, 0x10	; 16
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 39       	cpi	r26, 0x90	; 144
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <main>
      da:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	86 e2       	ldi	r24, 0x26	; 38
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <setup>:
        }
    }*/
}

void setup()
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
    reset_time = kilo_ticks%64;
      ec:	80 91 55 01 	lds	r24, 0x0155
      f0:	90 91 56 01 	lds	r25, 0x0156
      f4:	a0 91 57 01 	lds	r26, 0x0157
      f8:	b0 91 58 01 	lds	r27, 0x0158
      fc:	8f 73       	andi	r24, 0x3F	; 63
      fe:	99 27       	eor	r25, r25
     100:	aa 27       	eor	r26, r26
     102:	bb 27       	eor	r27, r27
     104:	80 93 1e 01 	sts	0x011E, r24
     108:	90 93 1f 01 	sts	0x011F, r25
     10c:	a0 93 20 01 	sts	0x0120, r26
     110:	b0 93 21 01 	sts	0x0121, r27
    last_reset = kilo_ticks;
     114:	40 91 55 01 	lds	r20, 0x0155
     118:	50 91 56 01 	lds	r21, 0x0156
     11c:	60 91 57 01 	lds	r22, 0x0157
     120:	70 91 58 01 	lds	r23, 0x0158
     124:	40 93 1a 01 	sts	0x011A, r20
     128:	50 93 1b 01 	sts	0x011B, r21
     12c:	60 93 1c 01 	sts	0x011C, r22
     130:	70 93 1d 01 	sts	0x011D, r23
    previous_motion = LEFT;
     134:	22 e0       	ldi	r18, 0x02	; 2
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	30 93 01 01 	sts	0x0101, r19
     13c:	20 93 00 01 	sts	0x0100, r18
    message.type = NORMAL;
     140:	c6 e2       	ldi	r28, 0x26	; 38
     142:	d1 e0       	ldi	r29, 0x01	; 1
     144:	19 86       	std	Y+9, r1	; 0x09
    message.data[0] = kilo_uid;
     146:	20 91 8b 01 	lds	r18, 0x018B
     14a:	28 83       	st	Y, r18
    message.data[1] = reset_time;
     14c:	89 83       	std	Y+1, r24	; 0x01
    message.crc = message_crc(&message);
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 c1 0b 	call	0x1782	; 0x1782 <message_crc>
     154:	9b 87       	std	Y+11, r25	; 0x0b
     156:	8a 87       	std	Y+10, r24	; 0x0a
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <message_rx>:
}

void message_rx(message_t *m, distance_measurement_t *d)
{
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
     15e:	20 91 10 01 	lds	r18, 0x0110
     162:	30 91 11 01 	lds	r19, 0x0111
     166:	23 2b       	or	r18, r19
     168:	99 f4       	brne	.+38     	; 0x190 <message_rx+0x32>
    {
        new_message = 1;
     16a:	21 e0       	ldi	r18, 0x01	; 1
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	30 93 11 01 	sts	0x0111, r19
     172:	20 93 10 01 	sts	0x0110, r18
        received_id = m->data[0];
     176:	fc 01       	movw	r30, r24
     178:	20 81       	ld	r18, Z
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	30 93 15 01 	sts	0x0115, r19
     180:	20 93 14 01 	sts	0x0114, r18
        received_ticks = m->data[1];
     184:	81 81       	ldd	r24, Z+1	; 0x01
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 13 01 	sts	0x0113, r25
     18c:	80 93 12 01 	sts	0x0112, r24
     190:	08 95       	ret

00000192 <loop>:
    message.data[1] = reset_time;
    message.crc = message_crc(&message);
}

void loop()
{
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
        if (kilo_uid != LEADER_ID){
     196:	80 91 8b 01 	lds	r24, 0x018B
     19a:	90 91 8c 01 	lds	r25, 0x018C
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	09 f4       	brne	.+2      	; 0x1a4 <loop+0x12>
     1a2:	56 c0       	rjmp	.+172    	; 0x250 <loop+0xbe>
            if(new_message == 1){
     1a4:	80 91 10 01 	lds	r24, 0x0110
     1a8:	90 91 11 01 	lds	r25, 0x0111
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <loop+0x20>
     1b0:	bc c0       	rjmp	.+376    	; 0x32a <loop+0x198>
     1b2:	40 91 1e 01 	lds	r20, 0x011E
     1b6:	50 91 1f 01 	lds	r21, 0x011F
     1ba:	60 91 20 01 	lds	r22, 0x0120
     1be:	70 91 21 01 	lds	r23, 0x0121

            //message.type = NORMAL;
            //message.data[0] = kilo_uid;
            //message.data[1] = received_ticks;
            //message.crc = message_crc(&message);
            reset_time += (kilo_ticks-last_reset);
     1c2:	80 91 55 01 	lds	r24, 0x0155
     1c6:	90 91 56 01 	lds	r25, 0x0156
     1ca:	a0 91 57 01 	lds	r26, 0x0157
     1ce:	b0 91 58 01 	lds	r27, 0x0158
     1d2:	00 91 1a 01 	lds	r16, 0x011A
     1d6:	10 91 1b 01 	lds	r17, 0x011B
     1da:	20 91 1c 01 	lds	r18, 0x011C
     1de:	30 91 1d 01 	lds	r19, 0x011D
     1e2:	80 1b       	sub	r24, r16
     1e4:	91 0b       	sbc	r25, r17
     1e6:	a2 0b       	sbc	r26, r18
     1e8:	b3 0b       	sbc	r27, r19
     1ea:	84 0f       	add	r24, r20
     1ec:	95 1f       	adc	r25, r21
     1ee:	a6 1f       	adc	r26, r22
     1f0:	b7 1f       	adc	r27, r23
            reset_time %= 64;
     1f2:	8f 73       	andi	r24, 0x3F	; 63
     1f4:	99 27       	eor	r25, r25
     1f6:	aa 27       	eor	r26, r26
     1f8:	bb 27       	eor	r27, r27
     1fa:	80 93 1e 01 	sts	0x011E, r24
     1fe:	90 93 1f 01 	sts	0x011F, r25
     202:	a0 93 20 01 	sts	0x0120, r26
     206:	b0 93 21 01 	sts	0x0121, r27
            //if (received_id == LEADER_ID){

            if (reset_time >= 30 && reset_time < 34){
     20a:	4e 97       	sbiw	r24, 0x1e	; 30
     20c:	a1 09       	sbc	r26, r1
     20e:	b1 09       	sbc	r27, r1
     210:	04 97       	sbiw	r24, 0x04	; 4
     212:	a1 05       	cpc	r26, r1
     214:	b1 05       	cpc	r27, r1
     216:	08 f4       	brcc	.+2      	; 0x21a <loop+0x88>
     218:	5c c0       	rjmp	.+184    	; 0x2d2 <loop+0x140>
                turn();
                //turned = 1;
            }
            else{
                //turned = 0;
                previous_motion = current_motion;
     21a:	80 91 02 01 	lds	r24, 0x0102
     21e:	90 91 03 01 	lds	r25, 0x0103
     222:	90 93 01 01 	sts	0x0101, r25
     226:	80 93 00 01 	sts	0x0100, r24
            }
            last_reset = kilo_ticks;
     22a:	80 91 55 01 	lds	r24, 0x0155
     22e:	90 91 56 01 	lds	r25, 0x0156
     232:	a0 91 57 01 	lds	r26, 0x0157
     236:	b0 91 58 01 	lds	r27, 0x0158
     23a:	80 93 1a 01 	sts	0x011A, r24
     23e:	90 93 1b 01 	sts	0x011B, r25
     242:	a0 93 1c 01 	sts	0x011C, r26
     246:	b0 93 1d 01 	sts	0x011D, r27
    // Set the LED off.
    set_color(RGB(0, 0, 0));
    // Stop for half a second (500 ms).
    set_motors(0, 0);
    delay(500);*/
}
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	08 95       	ret
            }
            last_reset = kilo_ticks;
            //}
        }
        else{
            reset_time = kilo_ticks%64;
     250:	80 91 55 01 	lds	r24, 0x0155
     254:	90 91 56 01 	lds	r25, 0x0156
     258:	a0 91 57 01 	lds	r26, 0x0157
     25c:	b0 91 58 01 	lds	r27, 0x0158
     260:	8f 73       	andi	r24, 0x3F	; 63
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 1e 01 	sts	0x011E, r24
     26c:	90 93 1f 01 	sts	0x011F, r25
     270:	a0 93 20 01 	sts	0x0120, r26
     274:	b0 93 21 01 	sts	0x0121, r27

            if(kilo_ticks>last_reset+64){
     278:	00 91 55 01 	lds	r16, 0x0155
     27c:	10 91 56 01 	lds	r17, 0x0156
     280:	20 91 57 01 	lds	r18, 0x0157
     284:	30 91 58 01 	lds	r19, 0x0158
     288:	40 91 1a 01 	lds	r20, 0x011A
     28c:	50 91 1b 01 	lds	r21, 0x011B
     290:	60 91 1c 01 	lds	r22, 0x011C
     294:	70 91 1d 01 	lds	r23, 0x011D
     298:	40 5c       	subi	r20, 0xC0	; 192
     29a:	5f 4f       	sbci	r21, 0xFF	; 255
     29c:	6f 4f       	sbci	r22, 0xFF	; 255
     29e:	7f 4f       	sbci	r23, 0xFF	; 255
     2a0:	40 17       	cp	r20, r16
     2a2:	51 07       	cpc	r21, r17
     2a4:	62 07       	cpc	r22, r18
     2a6:	73 07       	cpc	r23, r19
     2a8:	08 f4       	brcc	.+2      	; 0x2ac <loop+0x11a>
     2aa:	53 c0       	rjmp	.+166    	; 0x352 <loop+0x1c0>
                message.data[0] = kilo_uid;
                message.data[1] = reset_time;
                message.crc = message_crc(&message);

            }
            if (reset_time >= 30 && reset_time < 34){
     2ac:	4e 97       	sbiw	r24, 0x1e	; 30
     2ae:	a1 09       	sbc	r26, r1
     2b0:	b1 09       	sbc	r27, r1
     2b2:	04 97       	sbiw	r24, 0x04	; 4
     2b4:	a1 05       	cpc	r26, r1
     2b6:	b1 05       	cpc	r27, r1
     2b8:	08 f4       	brcc	.+2      	; 0x2bc <loop+0x12a>
     2ba:	73 c0       	rjmp	.+230    	; 0x3a2 <loop+0x210>
                turn();
                //turned = 1;
            }
            else{
                //turned = 0;
                previous_motion = current_motion;
     2bc:	80 91 02 01 	lds	r24, 0x0102
     2c0:	90 91 03 01 	lds	r25, 0x0103
     2c4:	90 93 01 01 	sts	0x0101, r25
     2c8:	80 93 00 01 	sts	0x0100, r24
    // Set the LED off.
    set_color(RGB(0, 0, 0));
    // Stop for half a second (500 ms).
    set_motors(0, 0);
    delay(500);*/
}
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	08 95       	ret
        }
    }
}

void turn(){
    if (previous_motion == RIGHT)
     2d2:	80 91 00 01 	lds	r24, 0x0100
     2d6:	90 91 01 01 	lds	r25, 0x0101
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	09 f4       	brne	.+2      	; 0x2e2 <loop+0x150>
     2e0:	8c c0       	rjmp	.+280    	; 0x3fa <loop+0x268>
    {
        set_color(RGB(1, 0, 0));
        set_motion(LEFT);
    }
    else if (previous_motion == LEFT)
     2e2:	02 97       	sbiw	r24, 0x02	; 2
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <loop+0x156>
     2e6:	a1 cf       	rjmp	.-190    	; 0x22a <loop+0x98>
    {
        set_color(RGB(0, 0, 1));
     2e8:	80 e1       	ldi	r24, 0x10	; 16
     2ea:	0e 94 71 09 	call	0x12e2	; 0x12e2 <set_color>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2ee:	80 91 02 01 	lds	r24, 0x0102
     2f2:	90 91 03 01 	lds	r25, 0x0103
     2f6:	03 97       	sbiw	r24, 0x03	; 3
     2f8:	09 f4       	brne	.+2      	; 0x2fc <loop+0x16a>
     2fa:	97 cf       	rjmp	.-210    	; 0x22a <loop+0x98>
    {
        current_motion = new_motion;
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	90 93 03 01 	sts	0x0103, r25
     304:	80 93 02 01 	sts	0x0102, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     308:	80 91 18 01 	lds	r24, 0x0118
     30c:	90 91 19 01 	lds	r25, 0x0119
     310:	89 2b       	or	r24, r25
     312:	09 f4       	brne	.+2      	; 0x316 <loop+0x184>
     314:	94 c0       	rjmp	.+296    	; 0x43e <loop+0x2ac>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     316:	60 91 7b 01 	lds	r22, 0x017B
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     320:	10 92 19 01 	sts	0x0119, r1
     324:	10 92 18 01 	sts	0x0118, r1
     328:	80 cf       	rjmp	.-256    	; 0x22a <loop+0x98>

void loop()
{
        if (kilo_uid != LEADER_ID){
            if(new_message == 1){
                new_message = 0;
     32a:	10 92 11 01 	sts	0x0111, r1
     32e:	10 92 10 01 	sts	0x0110, r1
                if (received_id == LEADER_ID){
     332:	80 91 14 01 	lds	r24, 0x0114
     336:	90 91 15 01 	lds	r25, 0x0115
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	09 f0       	breq	.+2      	; 0x340 <loop+0x1ae>
     33e:	39 cf       	rjmp	.-398    	; 0x1b2 <loop+0x20>
                    reset_time = received_ticks;
     340:	80 91 12 01 	lds	r24, 0x0112
     344:	90 91 13 01 	lds	r25, 0x0113
     348:	ac 01       	movw	r20, r24
     34a:	99 0f       	add	r25, r25
     34c:	66 0b       	sbc	r22, r22
     34e:	77 0b       	sbc	r23, r23
     350:	38 cf       	rjmp	.-400    	; 0x1c2 <loop+0x30>
        }
        else{
            reset_time = kilo_ticks%64;

            if(kilo_ticks>last_reset+64){
                last_reset = kilo_ticks;
     352:	40 91 55 01 	lds	r20, 0x0155
     356:	50 91 56 01 	lds	r21, 0x0156
     35a:	60 91 57 01 	lds	r22, 0x0157
     35e:	70 91 58 01 	lds	r23, 0x0158
     362:	40 93 1a 01 	sts	0x011A, r20
     366:	50 93 1b 01 	sts	0x011B, r21
     36a:	60 93 1c 01 	sts	0x011C, r22
     36e:	70 93 1d 01 	sts	0x011D, r23
                message.type = NORMAL;
     372:	10 92 2f 01 	sts	0x012F, r1
                message.data[0] = kilo_uid;
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	20 93 26 01 	sts	0x0126, r18
                message.data[1] = reset_time;
     37c:	80 93 27 01 	sts	0x0127, r24
                message.crc = message_crc(&message);
     380:	86 e2       	ldi	r24, 0x26	; 38
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 c1 0b 	call	0x1782	; 0x1782 <message_crc>
     388:	90 93 31 01 	sts	0x0131, r25
     38c:	80 93 30 01 	sts	0x0130, r24
     390:	80 91 1e 01 	lds	r24, 0x011E
     394:	90 91 1f 01 	lds	r25, 0x011F
     398:	a0 91 20 01 	lds	r26, 0x0120
     39c:	b0 91 21 01 	lds	r27, 0x0121
     3a0:	85 cf       	rjmp	.-246    	; 0x2ac <loop+0x11a>
        }
    }
}

void turn(){
    if (previous_motion == RIGHT)
     3a2:	80 91 00 01 	lds	r24, 0x0100
     3a6:	90 91 01 01 	lds	r25, 0x0101
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	91 05       	cpc	r25, r1
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <loop+0x220>
     3b0:	49 c0       	rjmp	.+146    	; 0x444 <loop+0x2b2>
    {
        set_color(RGB(1, 0, 0));
        set_motion(LEFT);
    }
    else if (previous_motion == LEFT)
     3b2:	02 97       	sbiw	r24, 0x02	; 2
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <loop+0x226>
     3b6:	49 cf       	rjmp	.-366    	; 0x24a <loop+0xb8>
    {
        set_color(RGB(0, 0, 1));
     3b8:	80 e1       	ldi	r24, 0x10	; 16
     3ba:	0e 94 71 09 	call	0x12e2	; 0x12e2 <set_color>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     3be:	80 91 02 01 	lds	r24, 0x0102
     3c2:	90 91 03 01 	lds	r25, 0x0103
     3c6:	03 97       	sbiw	r24, 0x03	; 3
     3c8:	09 f4       	brne	.+2      	; 0x3cc <loop+0x23a>
     3ca:	3f cf       	rjmp	.-386    	; 0x24a <loop+0xb8>
    {
        current_motion = new_motion;
     3cc:	83 e0       	ldi	r24, 0x03	; 3
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	90 93 03 01 	sts	0x0103, r25
     3d4:	80 93 02 01 	sts	0x0102, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     3d8:	80 91 18 01 	lds	r24, 0x0118
     3dc:	90 91 19 01 	lds	r25, 0x0119
     3e0:	89 2b       	or	r24, r25
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <loop+0x254>
     3e4:	51 c0       	rjmp	.+162    	; 0x488 <loop+0x2f6>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     3e6:	60 91 7b 01 	lds	r22, 0x017B
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     3f0:	10 92 19 01 	sts	0x0119, r1
     3f4:	10 92 18 01 	sts	0x0118, r1
     3f8:	28 cf       	rjmp	.-432    	; 0x24a <loop+0xb8>
}

void turn(){
    if (previous_motion == RIGHT)
    {
        set_color(RGB(1, 0, 0));
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <set_color>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     400:	80 91 02 01 	lds	r24, 0x0102
     404:	90 91 03 01 	lds	r25, 0x0103
     408:	02 97       	sbiw	r24, 0x02	; 2
     40a:	09 f4       	brne	.+2      	; 0x40e <loop+0x27c>
     40c:	0e cf       	rjmp	.-484    	; 0x22a <loop+0x98>
    {
        current_motion = new_motion;
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 03 01 	sts	0x0103, r25
     416:	80 93 02 01 	sts	0x0102, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     41a:	80 91 18 01 	lds	r24, 0x0118
     41e:	90 91 19 01 	lds	r25, 0x0119
     422:	89 2b       	or	r24, r25
     424:	11 f4       	brne	.+4      	; 0x42a <loop+0x298>
                spinup_motors();
     426:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
            set_motors(kilo_turn_left, 0);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	80 91 8f 01 	lds	r24, 0x018F
     430:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     434:	10 92 19 01 	sts	0x0119, r1
     438:	10 92 18 01 	sts	0x0118, r1
     43c:	f6 ce       	rjmp	.-532    	; 0x22a <loop+0x98>
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     43e:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
     442:	69 cf       	rjmp	.-302    	; 0x316 <loop+0x184>
}

void turn(){
    if (previous_motion == RIGHT)
    {
        set_color(RGB(1, 0, 0));
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 71 09 	call	0x12e2	; 0x12e2 <set_color>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     44a:	80 91 02 01 	lds	r24, 0x0102
     44e:	90 91 03 01 	lds	r25, 0x0103
     452:	02 97       	sbiw	r24, 0x02	; 2
     454:	09 f4       	brne	.+2      	; 0x458 <loop+0x2c6>
     456:	f9 ce       	rjmp	.-526    	; 0x24a <loop+0xb8>
    {
        current_motion = new_motion;
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 03 01 	sts	0x0103, r25
     460:	80 93 02 01 	sts	0x0102, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     464:	80 91 18 01 	lds	r24, 0x0118
     468:	90 91 19 01 	lds	r25, 0x0119
     46c:	89 2b       	or	r24, r25
     46e:	11 f4       	brne	.+4      	; 0x474 <loop+0x2e2>
                spinup_motors();
     470:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
            set_motors(kilo_turn_left, 0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	80 91 8f 01 	lds	r24, 0x018F
     47a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     47e:	10 92 19 01 	sts	0x0119, r1
     482:	10 92 18 01 	sts	0x0118, r1
     486:	e1 ce       	rjmp	.-574    	; 0x24a <loop+0xb8>
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     488:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
     48c:	ac cf       	rjmp	.-168    	; 0x3e6 <loop+0x254>

0000048e <set_motion>:
int received_ticks = 0;
int new_message = 0;
message_t message;

void set_motion(int new_motion)
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     492:	20 91 02 01 	lds	r18, 0x0102
     496:	30 91 03 01 	lds	r19, 0x0103
     49a:	28 17       	cp	r18, r24
     49c:	39 07       	cpc	r19, r25
     49e:	79 f0       	breq	.+30     	; 0x4be <set_motion+0x30>
    {
        current_motion = new_motion;
     4a0:	90 93 03 01 	sts	0x0103, r25
     4a4:	80 93 02 01 	sts	0x0102, r24
        
        if (current_motion == STOP)
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	91 f1       	breq	.+100    	; 0x510 <set_motion+0x82>
     4ac:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	91 05       	cpc	r25, r1
     4b2:	a1 f1       	breq	.+104    	; 0x51c <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	91 05       	cpc	r25, r1
     4b8:	29 f0       	breq	.+10     	; 0x4c4 <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     4ba:	03 97       	sbiw	r24, 0x03	; 3
     4bc:	b9 f0       	breq	.+46     	; 0x4ec <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     4c4:	80 91 18 01 	lds	r24, 0x0118
     4c8:	90 91 19 01 	lds	r25, 0x0119
     4cc:	89 2b       	or	r24, r25
     4ce:	11 f4       	brne	.+4      	; 0x4d4 <set_motion+0x46>
                spinup_motors();
     4d0:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
            set_motors(kilo_turn_left, 0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	80 91 8f 01 	lds	r24, 0x018F
     4da:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     4de:	10 92 19 01 	sts	0x0119, r1
     4e2:	10 92 18 01 	sts	0x0118, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     4ec:	80 91 18 01 	lds	r24, 0x0118
     4f0:	90 91 19 01 	lds	r25, 0x0119
     4f4:	89 2b       	or	r24, r25
     4f6:	f9 f0       	breq	.+62     	; 0x536 <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     4f8:	60 91 7b 01 	lds	r22, 0x017B
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     502:	10 92 19 01 	sts	0x0119, r1
     506:	10 92 18 01 	sts	0x0118, r1
        }
    }
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     518:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     51c:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     520:	60 91 8e 01 	lds	r22, 0x018E
     524:	80 91 8d 01 	lds	r24, 0x018D
     528:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 1;
     52c:	d0 93 19 01 	sts	0x0119, r29
     530:	c0 93 18 01 	sts	0x0118, r28
     534:	c4 cf       	rjmp	.-120    	; 0x4be <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     536:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
     53a:	de cf       	rjmp	.-68     	; 0x4f8 <set_motion+0x6a>

0000053c <turn>:
        }
    }
}

void turn(){
    if (previous_motion == RIGHT)
     53c:	80 91 00 01 	lds	r24, 0x0100
     540:	90 91 01 01 	lds	r25, 0x0101
     544:	83 30       	cpi	r24, 0x03	; 3
     546:	91 05       	cpc	r25, r1
     548:	11 f1       	breq	.+68     	; 0x58e <turn+0x52>
    {
        set_color(RGB(1, 0, 0));
        set_motion(LEFT);
    }
    else if (previous_motion == LEFT)
     54a:	02 97       	sbiw	r24, 0x02	; 2
     54c:	09 f0       	breq	.+2      	; 0x550 <turn+0x14>
     54e:	08 95       	ret
    {
        set_color(RGB(0, 0, 1));
     550:	80 e1       	ldi	r24, 0x10	; 16
     552:	0e 94 71 09 	call	0x12e2	; 0x12e2 <set_color>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     556:	80 91 02 01 	lds	r24, 0x0102
     55a:	90 91 03 01 	lds	r25, 0x0103
     55e:	03 97       	sbiw	r24, 0x03	; 3
     560:	b1 f3       	breq	.-20     	; 0x54e <turn+0x12>
    {
        current_motion = new_motion;
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	90 93 03 01 	sts	0x0103, r25
     56a:	80 93 02 01 	sts	0x0102, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     56e:	80 91 18 01 	lds	r24, 0x0118
     572:	90 91 19 01 	lds	r25, 0x0119
     576:	89 2b       	or	r24, r25
     578:	61 f1       	breq	.+88     	; 0x5d2 <turn+0x96>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     57a:	60 91 7b 01 	lds	r22, 0x017B
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     584:	10 92 19 01 	sts	0x0119, r1
     588:	10 92 18 01 	sts	0x0118, r1
     58c:	08 95       	ret
}

void turn(){
    if (previous_motion == RIGHT)
    {
        set_color(RGB(1, 0, 0));
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 71 09 	call	0x12e2	; 0x12e2 <set_color>
message_t message;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     594:	80 91 02 01 	lds	r24, 0x0102
     598:	90 91 03 01 	lds	r25, 0x0103
     59c:	02 97       	sbiw	r24, 0x02	; 2
     59e:	b9 f2       	breq	.-82     	; 0x54e <turn+0x12>
    {
        current_motion = new_motion;
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 03 01 	sts	0x0103, r25
     5a8:	80 93 02 01 	sts	0x0102, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     5ac:	80 91 18 01 	lds	r24, 0x0118
     5b0:	90 91 19 01 	lds	r25, 0x0119
     5b4:	89 2b       	or	r24, r25
     5b6:	51 f0       	breq	.+20     	; 0x5cc <turn+0x90>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	80 91 8f 01 	lds	r24, 0x018F
     5be:	0e 94 50 05 	call	0xaa0	; 0xaa0 <set_motors>
            both_spined = 0;
     5c2:	10 92 19 01 	sts	0x0119, r1
     5c6:	10 92 18 01 	sts	0x0118, r1
     5ca:	08 95       	ret
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     5cc:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
     5d0:	f3 cf       	rjmp	.-26     	; 0x5b8 <turn+0x7c>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     5d2:	0e 94 55 05 	call	0xaaa	; 0xaaa <spinup_motors>
     5d6:	d1 cf       	rjmp	.-94     	; 0x57a <turn+0x3e>

000005d8 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     5d8:	08 95       	ret

000005da <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 95       	ret

000005e0 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     5e0:	08 95       	ret

000005e2 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
    cli();
     5f0:	f8 94       	cli

    ports_off();
     5f2:	14 b8       	out	0x04, r1	; 4
     5f4:	17 b8       	out	0x07, r1	; 7
     5f6:	1a b8       	out	0x0a, r1	; 10
     5f8:	15 b8       	out	0x05, r1	; 5
     5fa:	18 b8       	out	0x08, r1	; 8
     5fc:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     5fe:	52 9a       	sbi	0x0a, 2	; 10
     600:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     602:	14 bc       	out	0x24, r1	; 36
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	85 bd       	out	0x25, r24	; 37
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	87 bd       	out	0x27, r24	; 39
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     612:	10 92 80 00 	sts	0x0080, r1
     616:	10 92 81 00 	sts	0x0081, r1
     61a:	2f e8       	ldi	r18, 0x8F	; 143
     61c:	3b e0       	ldi	r19, 0x0B	; 11
     61e:	30 93 89 00 	sts	0x0089, r19
     622:	20 93 88 00 	sts	0x0088, r18
     626:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     62a:	53 98       	cbi	0x0a, 3	; 10
     62c:	23 98       	cbi	0x04, 3	; 4
     62e:	91 ea       	ldi	r25, 0xA1	; 161
     630:	90 93 b0 00 	sts	0x00B0, r25
     634:	80 93 b1 00 	sts	0x00B1, r24
     638:	10 92 b4 00 	sts	0x00B4, r1
     63c:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     640:	8b e0       	ldi	r24, 0x0B	; 11
     642:	80 bf       	out	0x30, r24	; 48
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     64a:	86 e0       	ldi	r24, 0x06	; 6
     64c:	80 93 7c 00 	sts	0x007C, r24
     650:	83 e8       	ldi	r24, 0x83	; 131
     652:	80 93 7a 00 	sts	0x007A, r24
     656:	80 91 7a 00 	lds	r24, 0x007A
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	80 93 7a 00 	sts	0x007A, r24
     660:	80 91 7a 00 	lds	r24, 0x007A
     664:	86 fd       	sbrc	r24, 6
     666:	fc cf       	rjmp	.-8      	; 0x660 <kilo_init+0x7e>
    adc_trigger_high_gain();
     668:	10 92 7c 00 	sts	0x007C, r1
     66c:	83 ea       	ldi	r24, 0xA3	; 163
     66e:	80 93 7a 00 	sts	0x007A, r24
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
    if (osccal != 0xFF)
     680:	8f 3f       	cpi	r24, 0xFF	; 255
     682:	11 f0       	breq	.+4      	; 0x688 <kilo_init+0xa6>
        OSCCAL = osccal;
     684:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     688:	10 92 59 01 	sts	0x0159, r1
    rx_leadingbit = 1;
     68c:	c1 e0       	ldi	r28, 0x01	; 1
     68e:	c0 93 32 01 	sts	0x0132, r28
    rx_leadingbyte = 1;
     692:	c0 93 76 01 	sts	0x0176, r28
    rx_byteindex = 0;
     696:	10 92 50 01 	sts	0x0150, r1
    rx_bytevalue = 0;
     69a:	10 92 8a 01 	sts	0x018A, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     69e:	80 e9       	ldi	r24, 0x90	; 144
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     6a6:	80 93 4f 01 	sts	0x014F, r24
    if (tx_mask & ~TX_MASK_MAX)
     6aa:	80 91 4f 01 	lds	r24, 0x014F
     6ae:	88 73       	andi	r24, 0x38	; 56
     6b0:	11 f0       	breq	.+4      	; 0x6b6 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     6b2:	c0 93 4f 01 	sts	0x014F, r28
    tx_clock = 0;
     6b6:	10 92 7a 01 	sts	0x017A, r1
     6ba:	10 92 79 01 	sts	0x0179, r1
    tx_increment = 255;
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	90 93 78 01 	sts	0x0178, r25
     6c6:	80 93 77 01 	sts	0x0177, r24
    kilo_ticks = 0;
     6ca:	10 92 55 01 	sts	0x0155, r1
     6ce:	10 92 56 01 	sts	0x0156, r1
     6d2:	10 92 57 01 	sts	0x0157, r1
     6d6:	10 92 58 01 	sts	0x0158, r1
    kilo_state = IDLE;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 25 01 	sts	0x0125, r24
    kilo_tx_period = 3906;
     6e0:	82 e4       	ldi	r24, 0x42	; 66
     6e2:	9f e0       	ldi	r25, 0x0F	; 15
     6e4:	90 93 89 01 	sts	0x0189, r25
     6e8:	80 93 88 01 	sts	0x0188, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     6ec:	80 eb       	ldi	r24, 0xB0	; 176
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     6f4:	c8 2f       	mov	r28, r24
     6f6:	81 eb       	ldi	r24, 0xB1	; 177
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     6fe:	2c 2f       	mov	r18, r28
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	38 2b       	or	r19, r24
     704:	30 93 8c 01 	sts	0x018C, r19
     708:	20 93 8b 01 	sts	0x018B, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     70c:	85 e0       	ldi	r24, 0x05	; 5
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     714:	80 93 8f 01 	sts	0x018F, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     718:	89 e0       	ldi	r24, 0x09	; 9
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     720:	80 93 7b 01 	sts	0x017B, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     724:	8c e0       	ldi	r24, 0x0C	; 12
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     72c:	80 93 8d 01 	sts	0x018D, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     730:	84 e1       	ldi	r24, 0x14	; 20
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     738:	80 93 8e 01 	sts	0x018E, r24
     73c:	5a e5       	ldi	r21, 0x5A	; 90
     73e:	e5 2e       	mov	r14, r21
     740:	51 e0       	ldi	r21, 0x01	; 1
     742:	f5 2e       	mov	r15, r21
     744:	03 e3       	ldi	r16, 0x33	; 51
     746:	11 e0       	ldi	r17, 0x01	; 1
     748:	c0 e2       	ldi	r28, 0x20	; 32
     74a:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     74c:	ce 01       	movw	r24, r28
     74e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     752:	d8 2e       	mov	r13, r24
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     75c:	2d 2d       	mov	r18, r13
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	32 2f       	mov	r19, r18
     762:	22 27       	eor	r18, r18
     764:	28 2b       	or	r18, r24
     766:	f7 01       	movw	r30, r14
     768:	21 93       	st	Z+, r18
     76a:	31 93       	st	Z+, r19
     76c:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     76e:	ce 01       	movw	r24, r28
     770:	c0 96       	adiw	r24, 0x30	; 48
     772:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     776:	d8 2e       	mov	r13, r24
     778:	ce 01       	movw	r24, r28
     77a:	c1 96       	adiw	r24, 0x31	; 49
     77c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <eeprom_read_byte>
     780:	2d 2d       	mov	r18, r13
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	32 2f       	mov	r19, r18
     786:	22 27       	eor	r18, r18
     788:	28 2b       	or	r18, r24
     78a:	f8 01       	movw	r30, r16
     78c:	21 93       	st	Z+, r18
     78e:	31 93       	st	Z+, r19
     790:	8f 01       	movw	r16, r30
     792:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     794:	cc 33       	cpi	r28, 0x3C	; 60
     796:	d1 05       	cpc	r29, r1
     798:	c9 f6       	brne	.-78     	; 0x74c <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     79a:	78 94       	sei
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	08 95       	ret

000007ac <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	8f 93       	push	r24
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	a8 95       	wdr
     7be:	80 91 60 00 	lds	r24, 0x0060
     7c2:	88 61       	ori	r24, 0x18	; 24
     7c4:	80 93 60 00 	sts	0x0060, r24
     7c8:	10 92 60 00 	sts	0x0060, r1
     7cc:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     7ce:	8f 91       	pop	r24
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     7da:	3c 01       	movw	r6, r24
     7dc:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     7de:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     7e0:	99 24       	eor	r9, r9
     7e2:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     7e8:	96 e0       	ldi	r25, 0x06	; 6
     7ea:	a9 2e       	mov	r10, r25
     7ec:	23 e8       	ldi	r18, 0x83	; 131
     7ee:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     7f0:	38 e1       	ldi	r19, 0x18	; 24
     7f2:	d3 2e       	mov	r13, r19
     7f4:	49 e2       	ldi	r20, 0x29	; 41
     7f6:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     7f8:	90 91 25 01 	lds	r25, 0x0125
     7fc:	e9 2f       	mov	r30, r25
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	e7 30       	cpi	r30, 0x07	; 7
     802:	f1 05       	cpc	r31, r1
     804:	c8 f7       	brcc	.-14     	; 0x7f8 <kilo_start+0x1e>
     806:	ec 5c       	subi	r30, 0xCC	; 204
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     80e:	11 23       	and	r17, r17
     810:	09 f4       	brne	.+2      	; 0x814 <kilo_start+0x3a>
     812:	fc c0       	rjmp	.+504    	; 0xa0c <__stack+0x10d>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     814:	c0 92 25 01 	sts	0x0125, r12
     818:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     81a:	fe 01       	movw	r30, r28
     81c:	09 95       	icall
                break;
     81e:	ec cf       	rjmp	.-40     	; 0x7f8 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     820:	80 91 59 01 	lds	r24, 0x0159
     824:	81 11       	cpse	r24, r1
     826:	eb c0       	rjmp	.+470    	; 0x9fe <__stack+0xff>
        cli();                                    // disable interrupts
     828:	f8 94       	cli
        adc_setup_conversion(6);
     82a:	a0 92 7c 00 	sts	0x007C, r10
     82e:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     832:	80 91 7a 00 	lds	r24, 0x007A
     836:	80 64       	ori	r24, 0x40	; 64
     838:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     83c:	90 91 7a 00 	lds	r25, 0x007A
     840:	96 fd       	sbrc	r25, 6
     842:	fc cf       	rjmp	.-8      	; 0x83c <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     844:	80 91 78 00 	lds	r24, 0x0078
     848:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     84c:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     84e:	8b 3a       	cpi	r24, 0xAB	; 171
     850:	e2 e0       	ldi	r30, 0x02	; 2
     852:	9e 07       	cpc	r25, r30
     854:	0c f0       	brlt	.+2      	; 0x858 <kilo_start+0x7e>
     856:	ed c0       	rjmp	.+474    	; 0xa32 <__stack+0x133>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     858:	89 38       	cpi	r24, 0x89	; 137
     85a:	f2 e0       	ldi	r31, 0x02	; 2
     85c:	9f 07       	cpc	r25, r31
     85e:	0c f0       	brlt	.+2      	; 0x862 <kilo_start+0x88>
     860:	ef c0       	rjmp	.+478    	; 0xa40 <__stack+0x141>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     862:	87 36       	cpi	r24, 0x67	; 103
     864:	92 40       	sbci	r25, 0x02	; 2
     866:	0c f4       	brge	.+2      	; 0x86a <kilo_start+0x90>
     868:	ca c0       	rjmp	.+404    	; 0x9fe <__stack+0xff>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     86a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     86c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     86e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     870:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     872:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     874:	3c 98       	cbi	0x07, 4	; 7
     876:	c0 cf       	rjmp	.-128    	; 0x7f8 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     878:	f8 94       	cli
                acomp_off();
     87a:	80 b7       	in	r24, 0x30	; 48
     87c:	87 7f       	andi	r24, 0xF7	; 247
     87e:	80 bf       	out	0x30, r24	; 48
                adc_off();
     880:	80 91 7a 00 	lds	r24, 0x007A
     884:	8f 77       	andi	r24, 0x7F	; 127
     886:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     88a:	14 b8       	out	0x04, r1	; 4
     88c:	17 b8       	out	0x07, r1	; 7
     88e:	1a b8       	out	0x0a, r1	; 10
     890:	15 b8       	out	0x05, r1	; 5
     892:	18 b8       	out	0x08, r1	; 8
     894:	1b b8       	out	0x0b, r1	; 11
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	a8 95       	wdr
     89c:	d0 92 60 00 	sts	0x0060, r13
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     8a6:	80 91 60 00 	lds	r24, 0x0060
     8aa:	80 64       	ori	r24, 0x40	; 64
     8ac:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     8b0:	93 b7       	in	r25, 0x33	; 51
     8b2:	91 7f       	andi	r25, 0xF1	; 241
     8b4:	94 60       	ori	r25, 0x04	; 4
     8b6:	93 bf       	out	0x33, r25	; 51
                cli();
     8b8:	f8 94       	cli
                sleep_enable();
     8ba:	83 b7       	in	r24, 0x33	; 51
     8bc:	81 60       	ori	r24, 0x01	; 1
     8be:	83 bf       	out	0x33, r24	; 51
                sei();
     8c0:	78 94       	sei
                sleep_cpu();
     8c2:	88 95       	sleep
                sleep_disable();
     8c4:	83 b7       	in	r24, 0x33	; 51
     8c6:	8e 7f       	andi	r24, 0xFE	; 254
     8c8:	83 bf       	out	0x33, r24	; 51
                sei();
     8ca:	78 94       	sei
                rx_busy = 0;
     8cc:	10 92 59 01 	sts	0x0159, r1
                ports_on();
     8d0:	52 9a       	sbi	0x0a, 2	; 10
     8d2:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     8d4:	80 91 7a 00 	lds	r24, 0x007A
     8d8:	80 68       	ori	r24, 0x80	; 128
     8da:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8de:	87 e5       	ldi	r24, 0x57	; 87
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <kilo_start+0x108>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <kilo_start+0x10e>
     8e8:	00 00       	nop
                _delay_us(300);
                acomp_on();
     8ea:	80 b7       	in	r24, 0x30	; 48
     8ec:	88 61       	ori	r24, 0x18	; 24
     8ee:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     8f0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     8f2:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     8f4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     8f6:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     8f8:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     8fa:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fc:	ef e1       	ldi	r30, 0x1F	; 31
     8fe:	fe e4       	ldi	r31, 0x4E	; 78
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x1>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     908:	80 91 59 01 	lds	r24, 0x0159
     90c:	81 11       	cpse	r24, r1
     90e:	81 c0       	rjmp	.+258    	; 0xa12 <__stack+0x113>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     910:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     912:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     914:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     916:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     918:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     91a:	3c 98       	cbi	0x07, 4	; 7
     91c:	6d cf       	rjmp	.-294    	; 0x7f8 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     91e:	80 91 23 01 	lds	r24, 0x0123
     922:	81 11       	cpse	r24, r1
     924:	41 c0       	rjmp	.+130    	; 0x9a8 <__stack+0xa9>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     926:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     92a:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     92e:	10 92 24 01 	sts	0x0124, r1
     932:	62 cf       	rjmp	.-316    	; 0x7f8 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     934:	48 99       	sbic	0x09, 0	; 9
     936:	ec cf       	rjmp	.-40     	; 0x910 <__stack+0x11>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     938:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     93a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     93c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     93e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     940:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     942:	3c 98       	cbi	0x07, 4	; 7
     944:	8f ec       	ldi	r24, 0xCF	; 207
     946:	97 e0       	ldi	r25, 0x07	; 7
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <__stack+0x49>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <__stack+0x4f>
     94e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     950:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     952:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     954:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     956:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     958:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     95a:	3c 98       	cbi	0x07, 4	; 7
     95c:	9f ef       	ldi	r25, 0xFF	; 255
     95e:	e1 ee       	ldi	r30, 0xE1	; 225
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	91 50       	subi	r25, 0x01	; 1
     964:	e0 40       	sbci	r30, 0x00	; 0
     966:	f0 40       	sbci	r31, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <__stack+0x63>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <__stack+0x6d>
     96c:	00 00       	nop
     96e:	44 cf       	rjmp	.-376    	; 0x7f8 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     970:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     972:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     974:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     976:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     978:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     97a:	3c 98       	cbi	0x07, 4	; 7
     97c:	ef ec       	ldi	r30, 0xCF	; 207
     97e:	f7 e0       	ldi	r31, 0x07	; 7
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	f1 f7       	brne	.-4      	; 0x980 <__stack+0x81>
     984:	00 c0       	rjmp	.+0      	; 0x986 <__stack+0x87>
     986:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     988:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     98a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     98c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     98e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     990:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     992:	3c 98       	cbi	0x07, 4	; 7
     994:	ff ef       	ldi	r31, 0xFF	; 255
     996:	21 ee       	ldi	r18, 0xE1	; 225
     998:	84 e0       	ldi	r24, 0x04	; 4
     99a:	f1 50       	subi	r31, 0x01	; 1
     99c:	20 40       	sbci	r18, 0x00	; 0
     99e:	80 40       	sbci	r24, 0x00	; 0
     9a0:	e1 f7       	brne	.-8      	; 0x99a <__stack+0x9b>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <__stack+0xa5>
     9a4:	00 00       	nop
     9a6:	28 cf       	rjmp	.-432    	; 0x7f8 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     9a8:	90 91 23 01 	lds	r25, 0x0123
     9ac:	80 91 24 01 	lds	r24, 0x0124
     9b0:	98 17       	cp	r25, r24
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	21 cf       	rjmp	.-446    	; 0x7f8 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     9b6:	80 91 23 01 	lds	r24, 0x0123
     9ba:	80 93 24 01 	sts	0x0124, r24
                        if (cur_motion == MOVE_LEFT) {
     9be:	80 91 23 01 	lds	r24, 0x0123
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	50 c0       	rjmp	.+160    	; 0xa68 <__stack+0x169>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     9c8:	80 91 23 01 	lds	r24, 0x0123
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9cc:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     9d0:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	d9 f1       	breq	.+118    	; 0xa4e <__stack+0x14f>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9d8:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     9dc:	90 92 b4 00 	sts	0x00B4, r9
     9e0:	8f e2       	ldi	r24, 0x2F	; 47
     9e2:	95 e7       	ldi	r25, 0x75	; 117
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <__stack+0xe5>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <__stack+0xeb>
     9ea:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     9ec:	80 91 8e 01 	lds	r24, 0x018E
     9f0:	90 91 8d 01 	lds	r25, 0x018D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9f4:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     9f8:	80 93 b4 00 	sts	0x00B4, r24
     9fc:	fd ce       	rjmp	.-518    	; 0x7f8 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     9fe:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     a00:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     a02:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     a04:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     a06:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     a08:	3c 98       	cbi	0x07, 4	; 7
     a0a:	f6 ce       	rjmp	.-532    	; 0x7f8 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     a0c:	f3 01       	movw	r30, r6
     a0e:	09 95       	icall
     a10:	01 cf       	rjmp	.-510    	; 0x814 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     a12:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     a14:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     a16:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     a18:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     a1a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     a1c:	3c 98       	cbi	0x07, 4	; 7
     a1e:	ff ef       	ldi	r31, 0xFF	; 255
     a20:	20 e7       	ldi	r18, 0x70	; 112
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	f1 50       	subi	r31, 0x01	; 1
     a26:	20 40       	sbci	r18, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <__stack+0x125>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <__stack+0x12f>
     a2e:	00 00       	nop
     a30:	6f cf       	rjmp	.-290    	; 0x910 <__stack+0x11>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     a32:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     a34:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     a36:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     a38:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     a3a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     a3c:	3c 98       	cbi	0x07, 4	; 7
     a3e:	dc ce       	rjmp	.-584    	; 0x7f8 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     a40:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     a42:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     a44:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     a46:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     a48:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     a4a:	3c 9a       	sbi	0x07, 4	; 7
     a4c:	d5 ce       	rjmp	.-598    	; 0x7f8 <kilo_start+0x1e>
     a4e:	ef e2       	ldi	r30, 0x2F	; 47
     a50:	f5 e7       	ldi	r31, 0x75	; 117
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <__stack+0x153>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <__stack+0x159>
     a58:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     a5a:	80 91 7b 01 	lds	r24, 0x017B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a5e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     a62:	80 93 b4 00 	sts	0x00B4, r24
     a66:	c8 ce       	rjmp	.-624    	; 0x7f8 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a68:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     a6c:	10 92 b4 00 	sts	0x00B4, r1
     a70:	8f e2       	ldi	r24, 0x2F	; 47
     a72:	95 e7       	ldi	r25, 0x75	; 117
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <__stack+0x175>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <__stack+0x17b>
     a7a:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     a7c:	80 91 8f 01 	lds	r24, 0x018F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a80:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     a84:	10 92 b4 00 	sts	0x00B4, r1
     a88:	b7 ce       	rjmp	.-658    	; 0x7f8 <kilo_start+0x1e>

00000a8a <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <delay+0x10>
     a8c:	ef ec       	ldi	r30, 0xCF	; 207
     a8e:	f7 e0       	ldi	r31, 0x07	; 7
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <delay+0x6>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <delay+0xc>
     a96:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     a98:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	b9 f7       	brne	.-18     	; 0xa8c <delay+0x2>
     a9e:	08 95       	ret

00000aa0 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aa0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     aa4:	60 93 b4 00 	sts	0x00B4, r22
     aa8:	08 95       	ret

00000aaa <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     ab0:	80 93 b4 00 	sts	0x00B4, r24
     ab4:	8f e0       	ldi	r24, 0x0F	; 15
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	ef ec       	ldi	r30, 0xCF	; 207
     aba:	f7 e0       	ldi	r31, 0x07	; 7
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <spinup_motors+0x12>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <spinup_motors+0x18>
     ac2:	00 00       	nop
     ac4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     ac6:	c1 f7       	brne	.-16     	; 0xab8 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     ac8:	08 95       	ret

00000aca <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     aca:	80 91 59 01 	lds	r24, 0x0159
     ace:	81 11       	cpse	r24, r1
     ad0:	1e c0       	rjmp	.+60     	; 0xb0e <get_ambientlight+0x44>
        cli();
     ad2:	f8 94       	cli
        adc_setup_conversion(7);
     ad4:	87 e0       	ldi	r24, 0x07	; 7
     ad6:	80 93 7c 00 	sts	0x007C, r24
     ada:	83 e8       	ldi	r24, 0x83	; 131
     adc:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     ae0:	80 91 7a 00 	lds	r24, 0x007A
     ae4:	80 64       	ori	r24, 0x40	; 64
     ae6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     aea:	80 91 7a 00 	lds	r24, 0x007A
     aee:	86 fd       	sbrc	r24, 6
     af0:	fc cf       	rjmp	.-8      	; 0xaea <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     af2:	80 91 78 00 	lds	r24, 0x0078
     af6:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     afa:	10 92 7c 00 	sts	0x007C, r1
     afe:	23 ea       	ldi	r18, 0xA3	; 163
     b00:	20 93 7a 00 	sts	0x007A, r18
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     b0a:	78 94       	sei
     b0c:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     b12:	08 95       	ret

00000b14 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     b14:	80 91 59 01 	lds	r24, 0x0159
     b18:	81 11       	cpse	r24, r1
     b1a:	1e c0       	rjmp	.+60     	; 0xb58 <get_temperature+0x44>
        cli();
     b1c:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     b1e:	88 ec       	ldi	r24, 0xC8	; 200
     b20:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     b24:	87 e8       	ldi	r24, 0x87	; 135
     b26:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     b2a:	80 91 7a 00 	lds	r24, 0x007A
     b2e:	80 64       	ori	r24, 0x40	; 64
     b30:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     b34:	80 91 7a 00 	lds	r24, 0x007A
     b38:	86 fd       	sbrc	r24, 6
     b3a:	fc cf       	rjmp	.-8      	; 0xb34 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     b3c:	80 91 78 00 	lds	r24, 0x0078
     b40:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     b44:	10 92 7c 00 	sts	0x007C, r1
     b48:	23 ea       	ldi	r18, 0xA3	; 163
     b4a:	20 93 7a 00 	sts	0x007A, r18
     b4e:	21 e0       	ldi	r18, 0x01	; 1
     b50:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     b54:	78 94       	sei
     b56:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     b5c:	08 95       	ret

00000b5e <rand_hard>:

uint8_t rand_hard() {
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	e0 e0       	ldi	r30, 0x00	; 0
     b68:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     b6c:	03 ea       	ldi	r16, 0xA3	; 163
     b6e:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     b70:	d6 e0       	ldi	r29, 0x06	; 6
     b72:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     b74:	a1 e0       	ldi	r26, 0x01	; 1
     b76:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     b78:	60 e8       	ldi	r22, 0x80	; 128
     b7a:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     b7c:	f8 94       	cli
            adc_setup_conversion(6);
     b7e:	d0 93 7c 00 	sts	0x007C, r29
     b82:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     b86:	90 91 7a 00 	lds	r25, 0x007A
     b8a:	90 64       	ori	r25, 0x40	; 64
     b8c:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     b90:	90 91 7a 00 	lds	r25, 0x007A
     b94:	96 fd       	sbrc	r25, 6
     b96:	fc cf       	rjmp	.-8      	; 0xb90 <rand_hard+0x32>
            a = ADCW&0x1;
     b98:	20 91 78 00 	lds	r18, 0x0078
     b9c:	30 91 79 00 	lds	r19, 0x0079
     ba0:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     ba2:	90 91 7a 00 	lds	r25, 0x007A
     ba6:	90 64       	ori	r25, 0x40	; 64
     ba8:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     bac:	90 91 7a 00 	lds	r25, 0x007A
     bb0:	96 fd       	sbrc	r25, 6
     bb2:	fc cf       	rjmp	.-8      	; 0xbac <rand_hard+0x4e>
            b = ADCW&0x1;
     bb4:	40 91 78 00 	lds	r20, 0x0078
     bb8:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     bbc:	10 92 7c 00 	sts	0x007C, r1
     bc0:	00 93 7a 00 	sts	0x007A, r16
     bc4:	10 93 7b 00 	sts	0x007B, r17
            sei();
     bc8:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     bca:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     bcc:	24 13       	cpse	r18, r20
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <rand_hard+0x78>
     bd0:	61 50       	subi	r22, 0x01	; 1
     bd2:	71 09       	sbc	r23, r1
     bd4:	99 f6       	brne	.-90     	; 0xb7c <rand_hard+0x1e>
        if (a)
     bd6:	22 23       	and	r18, r18
     bd8:	39 f0       	breq	.+14     	; 0xbe8 <rand_hard+0x8a>
            num |= (1<<i);
     bda:	9d 01       	movw	r18, r26
     bdc:	0e 2e       	mov	r0, r30
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <rand_hard+0x84>
     be0:	22 0f       	add	r18, r18
     be2:	0a 94       	dec	r0
     be4:	ea f7       	brpl	.-6      	; 0xbe0 <rand_hard+0x82>
     be6:	82 2b       	or	r24, r18
     be8:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     bea:	e8 30       	cpi	r30, 0x08	; 8
     bec:	f1 05       	cpc	r31, r1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <rand_hard+0x94>
     bf0:	c3 cf       	rjmp	.-122    	; 0xb78 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     bfc:	80 91 04 01 	lds	r24, 0x0104
     c00:	98 2f       	mov	r25, r24
     c02:	99 0f       	add	r25, r25
     c04:	99 0f       	add	r25, r25
     c06:	99 0f       	add	r25, r25
     c08:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     c0a:	90 91 22 01 	lds	r25, 0x0122
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	29 0f       	add	r18, r25
     c12:	20 93 22 01 	sts	0x0122, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     c16:	28 2f       	mov	r18, r24
     c18:	22 95       	swap	r18
     c1a:	26 95       	lsr	r18
     c1c:	27 70       	andi	r18, 0x07	; 7
     c1e:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     c20:	96 95       	lsr	r25
     c22:	96 95       	lsr	r25
     c24:	89 27       	eor	r24, r25
     c26:	80 93 04 01 	sts	0x0104, r24
    return seed;
}
     c2a:	08 95       	ret

00000c2c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     c2c:	80 93 04 01 	sts	0x0104, r24
     c30:	08 95       	ret

00000c32 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     c32:	80 91 59 01 	lds	r24, 0x0159
     c36:	81 11       	cpse	r24, r1
     c38:	16 c0       	rjmp	.+44     	; 0xc66 <get_voltage+0x34>
        cli();                                    // disable interrupts
     c3a:	f8 94       	cli
        adc_setup_conversion(6);
     c3c:	86 e0       	ldi	r24, 0x06	; 6
     c3e:	80 93 7c 00 	sts	0x007C, r24
     c42:	83 e8       	ldi	r24, 0x83	; 131
     c44:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     c48:	80 91 7a 00 	lds	r24, 0x007A
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     c52:	80 91 7a 00 	lds	r24, 0x007A
     c56:	86 fd       	sbrc	r24, 6
     c58:	fc cf       	rjmp	.-8      	; 0xc52 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     c5a:	80 91 78 00 	lds	r24, 0x0078
     c5e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     c62:	78 94       	sei
     c64:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     c6a:	08 95       	ret

00000c6c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     c6c:	2f 92       	push	r2
     c6e:	3f 92       	push	r3
     c70:	4f 92       	push	r4
     c72:	5f 92       	push	r5
     c74:	6f 92       	push	r6
     c76:	7f 92       	push	r7
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	00 d0       	rcall	.+0      	; 0xc92 <estimate_distance+0x26>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <estimate_distance+0x28>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <estimate_distance+0x2a>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     c9c:	dc 01       	movw	r26, r24
     c9e:	12 96       	adiw	r26, 0x02	; 2
     ca0:	0d 90       	ld	r0, X+
     ca2:	bc 91       	ld	r27, X
     ca4:	a0 2d       	mov	r26, r0
     ca6:	be 83       	std	Y+6, r27	; 0x06
     ca8:	ad 83       	std	Y+5, r26	; 0x05
     caa:	a4 38       	cpi	r26, 0x84	; 132
     cac:	e3 e0       	ldi	r30, 0x03	; 3
     cae:	be 07       	cpc	r27, r30
     cb0:	0c f0       	brlt	.+2      	; 0xcb4 <estimate_distance+0x48>
     cb2:	c9 c0       	rjmp	.+402    	; 0xe46 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     cb4:	80 91 33 01 	lds	r24, 0x0133
     cb8:	90 91 34 01 	lds	r25, 0x0134
     cbc:	8a 17       	cp	r24, r26
     cbe:	9b 07       	cpc	r25, r27
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <estimate_distance+0x58>
     cc2:	37 c1       	rjmp	.+622    	; 0xf32 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     cc4:	00 91 35 01 	lds	r16, 0x0135
     cc8:	10 91 36 01 	lds	r17, 0x0136
     ccc:	0a 17       	cp	r16, r26
     cce:	1b 07       	cpc	r17, r27
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <estimate_distance+0x68>
     cd2:	2f c2       	rjmp	.+1118   	; 0x1132 <estimate_distance+0x4c6>
     cd4:	00 91 37 01 	lds	r16, 0x0137
     cd8:	10 91 38 01 	lds	r17, 0x0138
     cdc:	0a 17       	cp	r16, r26
     cde:	1b 07       	cpc	r17, r27
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <estimate_distance+0x78>
     ce2:	2f c2       	rjmp	.+1118   	; 0x1142 <estimate_distance+0x4d6>
     ce4:	00 91 39 01 	lds	r16, 0x0139
     ce8:	10 91 3a 01 	lds	r17, 0x013A
     cec:	0a 17       	cp	r16, r26
     cee:	1b 07       	cpc	r17, r27
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <estimate_distance+0x88>
     cf2:	2f c2       	rjmp	.+1118   	; 0x1152 <estimate_distance+0x4e6>
     cf4:	00 91 3b 01 	lds	r16, 0x013B
     cf8:	10 91 3c 01 	lds	r17, 0x013C
     cfc:	0a 17       	cp	r16, r26
     cfe:	1b 07       	cpc	r17, r27
     d00:	08 f4       	brcc	.+2      	; 0xd04 <estimate_distance+0x98>
     d02:	2f c2       	rjmp	.+1118   	; 0x1162 <estimate_distance+0x4f6>
     d04:	00 91 3d 01 	lds	r16, 0x013D
     d08:	10 91 3e 01 	lds	r17, 0x013E
     d0c:	0a 17       	cp	r16, r26
     d0e:	1b 07       	cpc	r17, r27
     d10:	08 f4       	brcc	.+2      	; 0xd14 <estimate_distance+0xa8>
     d12:	ef c1       	rjmp	.+990    	; 0x10f2 <estimate_distance+0x486>
     d14:	00 91 3f 01 	lds	r16, 0x013F
     d18:	10 91 40 01 	lds	r17, 0x0140
     d1c:	0a 17       	cp	r16, r26
     d1e:	1b 07       	cpc	r17, r27
     d20:	08 f4       	brcc	.+2      	; 0xd24 <estimate_distance+0xb8>
     d22:	27 c2       	rjmp	.+1102   	; 0x1172 <estimate_distance+0x506>
     d24:	00 91 41 01 	lds	r16, 0x0141
     d28:	10 91 42 01 	lds	r17, 0x0142
     d2c:	0a 17       	cp	r16, r26
     d2e:	1b 07       	cpc	r17, r27
     d30:	08 f4       	brcc	.+2      	; 0xd34 <estimate_distance+0xc8>
     d32:	27 c2       	rjmp	.+1102   	; 0x1182 <estimate_distance+0x516>
     d34:	00 91 43 01 	lds	r16, 0x0143
     d38:	10 91 44 01 	lds	r17, 0x0144
     d3c:	0a 17       	cp	r16, r26
     d3e:	1b 07       	cpc	r17, r27
     d40:	08 f4       	brcc	.+2      	; 0xd44 <estimate_distance+0xd8>
     d42:	27 c2       	rjmp	.+1102   	; 0x1192 <estimate_distance+0x526>
     d44:	00 91 45 01 	lds	r16, 0x0145
     d48:	10 91 46 01 	lds	r17, 0x0146
     d4c:	0a 17       	cp	r16, r26
     d4e:	1b 07       	cpc	r17, r27
     d50:	08 f4       	brcc	.+2      	; 0xd54 <estimate_distance+0xe8>
     d52:	27 c2       	rjmp	.+1102   	; 0x11a2 <estimate_distance+0x536>
     d54:	00 91 47 01 	lds	r16, 0x0147
     d58:	10 91 48 01 	lds	r17, 0x0148
     d5c:	0a 17       	cp	r16, r26
     d5e:	1b 07       	cpc	r17, r27
     d60:	08 f4       	brcc	.+2      	; 0xd64 <estimate_distance+0xf8>
     d62:	27 c2       	rjmp	.+1102   	; 0x11b2 <estimate_distance+0x546>
     d64:	00 91 49 01 	lds	r16, 0x0149
     d68:	10 91 4a 01 	lds	r17, 0x014A
     d6c:	0a 17       	cp	r16, r26
     d6e:	1b 07       	cpc	r17, r27
     d70:	08 f4       	brcc	.+2      	; 0xd74 <estimate_distance+0x108>
     d72:	23 c2       	rjmp	.+1094   	; 0x11ba <estimate_distance+0x54e>
     d74:	00 91 4b 01 	lds	r16, 0x014B
     d78:	10 91 4c 01 	lds	r17, 0x014C
     d7c:	0a 17       	cp	r16, r26
     d7e:	1b 07       	cpc	r17, r27
     d80:	08 f4       	brcc	.+2      	; 0xd84 <estimate_distance+0x118>
     d82:	23 c2       	rjmp	.+1094   	; 0x11ca <estimate_distance+0x55e>
     d84:	00 91 4d 01 	lds	r16, 0x014D
     d88:	10 91 4e 01 	lds	r17, 0x014E
     d8c:	0a 17       	cp	r16, r26
     d8e:	1b 07       	cpc	r17, r27
     d90:	08 f4       	brcc	.+2      	; 0xd94 <estimate_distance+0x128>
     d92:	23 c2       	rjmp	.+1094   	; 0x11da <estimate_distance+0x56e>
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a0 ed       	ldi	r26, 0xD0	; 208
     d9a:	b0 e4       	ldi	r27, 0x40	; 64
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	ab 83       	std	Y+3, r26	; 0x03
     da2:	bc 83       	std	Y+4, r27	; 0x04
     da4:	4c e0       	ldi	r20, 0x0C	; 12
     da6:	e4 2e       	mov	r14, r20
     da8:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     daa:	f7 01       	movw	r30, r14
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	ed 5c       	subi	r30, 0xCD	; 205
     db2:	fe 4f       	sbci	r31, 0xFE	; 254
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	b8 01       	movw	r22, r16
     dba:	68 1b       	sub	r22, r24
     dbc:	79 0b       	sbc	r23, r25
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
     dc6:	9b 01       	movw	r18, r22
     dc8:	ac 01       	movw	r20, r24
     dca:	0e 94 b5 0c 	call	0x196a	; 0x196a <__addsf3>
     dce:	6b 01       	movw	r12, r22
     dd0:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     dd2:	ad 81       	ldd	r26, Y+5	; 0x05
     dd4:	be 81       	ldd	r27, Y+6	; 0x06
     dd6:	bd 01       	movw	r22, r26
     dd8:	bb 0f       	add	r27, r27
     dda:	88 0b       	sbc	r24, r24
     ddc:	99 0b       	sbc	r25, r25
     dde:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__floatsisf>
     de2:	4b 01       	movw	r8, r22
     de4:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     de6:	b8 01       	movw	r22, r16
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
     df0:	2b 01       	movw	r4, r22
     df2:	3c 01       	movw	r6, r24
     df4:	29 81       	ldd	r18, Y+1	; 0x01
     df6:	3a 81       	ldd	r19, Y+2	; 0x02
     df8:	4b 81       	ldd	r20, Y+3	; 0x03
     dfa:	5c 81       	ldd	r21, Y+4	; 0x04
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__subsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     e14:	c5 01       	movw	r24, r10
     e16:	b4 01       	movw	r22, r8
     e18:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__subsf3>
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
            b=((int)((int)b/(int)slope));
     e28:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
     e2c:	8b 01       	movw	r16, r22
     e2e:	c7 01       	movw	r24, r14
     e30:	b6 01       	movw	r22, r12
     e32:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
     e36:	ab 01       	movw	r20, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	c8 01       	movw	r24, r16
     e3c:	ba 01       	movw	r22, r20
     e3e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__divmodhi4>
            dist_high=b;
     e42:	16 2f       	mov	r17, r22
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     e46:	dc 01       	movw	r26, r24
     e48:	cd 90       	ld	r12, X+
     e4a:	dc 90       	ld	r13, X
     e4c:	80 91 5a 01 	lds	r24, 0x015A
     e50:	90 91 5b 01 	lds	r25, 0x015B
     e54:	8c 15       	cp	r24, r12
     e56:	9d 05       	cpc	r25, r13
     e58:	08 f4       	brcc	.+2      	; 0xe5c <estimate_distance+0x1f0>
     e5a:	8c c0       	rjmp	.+280    	; 0xf74 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     e5c:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e5e:	e0 90 5c 01 	lds	r14, 0x015C
     e62:	f0 90 5d 01 	lds	r15, 0x015D
     e66:	ec 14       	cp	r14, r12
     e68:	fd 04       	cpc	r15, r13
     e6a:	08 f4       	brcc	.+2      	; 0xe6e <estimate_distance+0x202>
     e6c:	5e c1       	rjmp	.+700    	; 0x112a <estimate_distance+0x4be>
     e6e:	e0 90 5e 01 	lds	r14, 0x015E
     e72:	f0 90 5f 01 	lds	r15, 0x015F
     e76:	ec 14       	cp	r14, r12
     e78:	fd 04       	cpc	r15, r13
     e7a:	08 f4       	brcc	.+2      	; 0xe7e <estimate_distance+0x212>
     e7c:	5e c1       	rjmp	.+700    	; 0x113a <estimate_distance+0x4ce>
     e7e:	e0 90 60 01 	lds	r14, 0x0160
     e82:	f0 90 61 01 	lds	r15, 0x0161
     e86:	ec 14       	cp	r14, r12
     e88:	fd 04       	cpc	r15, r13
     e8a:	08 f4       	brcc	.+2      	; 0xe8e <estimate_distance+0x222>
     e8c:	5e c1       	rjmp	.+700    	; 0x114a <estimate_distance+0x4de>
     e8e:	e0 90 62 01 	lds	r14, 0x0162
     e92:	f0 90 63 01 	lds	r15, 0x0163
     e96:	ec 14       	cp	r14, r12
     e98:	fd 04       	cpc	r15, r13
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <estimate_distance+0x232>
     e9c:	5e c1       	rjmp	.+700    	; 0x115a <estimate_distance+0x4ee>
     e9e:	e0 90 64 01 	lds	r14, 0x0164
     ea2:	f0 90 65 01 	lds	r15, 0x0165
     ea6:	ec 14       	cp	r14, r12
     ea8:	fd 04       	cpc	r15, r13
     eaa:	08 f4       	brcc	.+2      	; 0xeae <estimate_distance+0x242>
     eac:	c3 c0       	rjmp	.+390    	; 0x1034 <estimate_distance+0x3c8>
     eae:	e0 90 66 01 	lds	r14, 0x0166
     eb2:	f0 90 67 01 	lds	r15, 0x0167
     eb6:	ec 14       	cp	r14, r12
     eb8:	fd 04       	cpc	r15, r13
     eba:	08 f4       	brcc	.+2      	; 0xebe <estimate_distance+0x252>
     ebc:	56 c1       	rjmp	.+684    	; 0x116a <estimate_distance+0x4fe>
     ebe:	e0 90 68 01 	lds	r14, 0x0168
     ec2:	f0 90 69 01 	lds	r15, 0x0169
     ec6:	ec 14       	cp	r14, r12
     ec8:	fd 04       	cpc	r15, r13
     eca:	08 f4       	brcc	.+2      	; 0xece <estimate_distance+0x262>
     ecc:	56 c1       	rjmp	.+684    	; 0x117a <estimate_distance+0x50e>
     ece:	e0 90 6a 01 	lds	r14, 0x016A
     ed2:	f0 90 6b 01 	lds	r15, 0x016B
     ed6:	ec 14       	cp	r14, r12
     ed8:	fd 04       	cpc	r15, r13
     eda:	08 f4       	brcc	.+2      	; 0xede <estimate_distance+0x272>
     edc:	56 c1       	rjmp	.+684    	; 0x118a <estimate_distance+0x51e>
     ede:	e0 90 6c 01 	lds	r14, 0x016C
     ee2:	f0 90 6d 01 	lds	r15, 0x016D
     ee6:	ec 14       	cp	r14, r12
     ee8:	fd 04       	cpc	r15, r13
     eea:	08 f4       	brcc	.+2      	; 0xeee <estimate_distance+0x282>
     eec:	56 c1       	rjmp	.+684    	; 0x119a <estimate_distance+0x52e>
     eee:	e0 90 6e 01 	lds	r14, 0x016E
     ef2:	f0 90 6f 01 	lds	r15, 0x016F
     ef6:	ec 14       	cp	r14, r12
     ef8:	fd 04       	cpc	r15, r13
     efa:	08 f4       	brcc	.+2      	; 0xefe <estimate_distance+0x292>
     efc:	56 c1       	rjmp	.+684    	; 0x11aa <estimate_distance+0x53e>
     efe:	e0 90 70 01 	lds	r14, 0x0170
     f02:	f0 90 71 01 	lds	r15, 0x0171
     f06:	ec 14       	cp	r14, r12
     f08:	fd 04       	cpc	r15, r13
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <estimate_distance+0x2a2>
     f0c:	5a c1       	rjmp	.+692    	; 0x11c2 <estimate_distance+0x556>
     f0e:	e0 90 72 01 	lds	r14, 0x0172
     f12:	f0 90 73 01 	lds	r15, 0x0173
     f16:	ec 14       	cp	r14, r12
     f18:	fd 04       	cpc	r15, r13
     f1a:	08 f4       	brcc	.+2      	; 0xf1e <estimate_distance+0x2b2>
     f1c:	5a c1       	rjmp	.+692    	; 0x11d2 <estimate_distance+0x566>
     f1e:	e0 90 74 01 	lds	r14, 0x0174
     f22:	f0 90 75 01 	lds	r15, 0x0175
     f26:	ec 14       	cp	r14, r12
     f28:	fd 04       	cpc	r15, r13
     f2a:	08 f4       	brcc	.+2      	; 0xf2e <estimate_distance+0x2c2>
     f2c:	5a c1       	rjmp	.+692    	; 0x11e2 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     f2e:	0a e5       	ldi	r16, 0x5A	; 90
     f30:	31 c0       	rjmp	.+98     	; 0xf94 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     f32:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     f34:	ed 81       	ldd	r30, Y+5	; 0x05
     f36:	fe 81       	ldd	r31, Y+6	; 0x06
     f38:	ed 3b       	cpi	r30, 0xBD	; 189
     f3a:	f2 40       	sbci	r31, 0x02	; 2
     f3c:	fc f4       	brge	.+62     	; 0xf7c <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     f3e:	81 e2       	ldi	r24, 0x21	; 33
     f40:	81 0f       	add	r24, r17
    }
}
     f42:	26 96       	adiw	r28, 0x06	; 6
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	bf 90       	pop	r11
     f60:	af 90       	pop	r10
     f62:	9f 90       	pop	r9
     f64:	8f 90       	pop	r8
     f66:	7f 90       	pop	r7
     f68:	6f 90       	pop	r6
     f6a:	5f 90       	pop	r5
     f6c:	4f 90       	pop	r4
     f6e:	3f 90       	pop	r3
     f70:	2f 90       	pop	r2
     f72:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     f74:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     f76:	81 e2       	ldi	r24, 0x21	; 33
     f78:	80 0f       	add	r24, r16
     f7a:	e3 cf       	rjmp	.-58     	; 0xf42 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     f7c:	d1 01       	movw	r26, r2
     f7e:	cd 90       	ld	r12, X+
     f80:	dc 90       	ld	r13, X
     f82:	80 91 5a 01 	lds	r24, 0x015A
     f86:	90 91 5b 01 	lds	r25, 0x015B
     f8a:	8c 15       	cp	r24, r12
     f8c:	9d 05       	cpc	r25, r13
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <estimate_distance+0x326>
     f90:	66 cf       	rjmp	.-308    	; 0xe5e <estimate_distance+0x1f2>
            dist_low=0;
     f92:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     f94:	1f 3f       	cpi	r17, 0xFF	; 255
     f96:	79 f3       	breq	.-34     	; 0xf76 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     f98:	ed 81       	ldd	r30, Y+5	; 0x05
     f9a:	fe 81       	ldd	r31, Y+6	; 0x06
     f9c:	bf 01       	movw	r22, r30
     f9e:	ff 0f       	add	r31, r31
     fa0:	88 0b       	sbc	r24, r24
     fa2:	99 0b       	sbc	r25, r25
     fa4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__floatsisf>
     fa8:	6b 01       	movw	r12, r22
     faa:	7c 01       	movw	r14, r24
     fac:	61 2f       	mov	r22, r17
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
     fb8:	4b 01       	movw	r8, r22
     fba:	5c 01       	movw	r10, r24
     fbc:	a7 01       	movw	r20, r14
     fbe:	96 01       	movw	r18, r12
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	81 e6       	ldi	r24, 0x61	; 97
     fc6:	94 e4       	ldi	r25, 0x44	; 68
     fc8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__subsf3>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	c5 01       	movw	r24, r10
     fd2:	b4 01       	movw	r22, r8
     fd4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
     fd8:	4b 01       	movw	r8, r22
     fda:	5c 01       	movw	r10, r24
     fdc:	60 2f       	mov	r22, r16
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
     fe8:	2b 01       	movw	r4, r22
     fea:	3c 01       	movw	r6, r24
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4f e2       	ldi	r20, 0x2F	; 47
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	c7 01       	movw	r24, r14
     ff6:	b6 01       	movw	r22, r12
     ff8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__subsf3>
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	c3 01       	movw	r24, r6
    1002:	b2 01       	movw	r22, r4
    1004:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	c5 01       	movw	r24, r10
    100e:	b4 01       	movw	r22, r8
    1010:	0e 94 b5 0c 	call	0x196a	; 0x196a <__addsf3>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	48 e4       	ldi	r20, 0x48	; 72
    101a:	53 e4       	ldi	r21, 0x43	; 67
    101c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__divsf3>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	44 e0       	ldi	r20, 0x04	; 4
    1026:	52 e4       	ldi	r21, 0x42	; 66
    1028:	0e 94 b5 0c 	call	0x196a	; 0x196a <__addsf3>
    102c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__fixunssfsi>
    1030:	86 2f       	mov	r24, r22
    1032:	87 cf       	rjmp	.-242    	; 0xf42 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1034:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
    1036:	85 e0       	ldi	r24, 0x05	; 5
    1038:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	fc 01       	movw	r30, r24
    1040:	e8 5a       	subi	r30, 0xA8	; 168
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	b7 01       	movw	r22, r14
    104a:	68 1b       	sub	r22, r24
    104c:	79 0b       	sbc	r23, r25
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	0e 94 b5 0c 	call	0x196a	; 0x196a <__addsf3>
    105e:	4b 01       	movw	r8, r22
    1060:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1062:	b6 01       	movw	r22, r12
    1064:	dd 0c       	add	r13, r13
    1066:	88 0b       	sbc	r24, r24
    1068:	99 0b       	sbc	r25, r25
    106a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__floatsisf>
    106e:	2b 01       	movw	r4, r22
    1070:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    1072:	b7 01       	movw	r22, r14
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
    107c:	6b 01       	movw	r12, r22
    107e:	7c 01       	movw	r14, r24
    1080:	60 2f       	mov	r22, r16
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	0e 94 b5 0c 	call	0x196a	; 0x196a <__addsf3>
    10a2:	a5 01       	movw	r20, r10
    10a4:	94 01       	movw	r18, r8
    10a6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	c7 01       	movw	r24, r14
    10b0:	b6 01       	movw	r22, r12
    10b2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__subsf3>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    10ba:	c3 01       	movw	r24, r6
    10bc:	b2 01       	movw	r22, r4
    10be:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__subsf3>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
                b=((int)((int)b/(int)slope));
    10ce:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
    10d2:	7b 01       	movw	r14, r22
    10d4:	c5 01       	movw	r24, r10
    10d6:	b4 01       	movw	r22, r8
    10d8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
    10dc:	ab 01       	movw	r20, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	c7 01       	movw	r24, r14
    10e2:	ba 01       	movw	r22, r20
    10e4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__divmodhi4>
                dist_low=b;
    10e8:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
    10ea:	6f 3f       	cpi	r22, 0xFF	; 255
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <estimate_distance+0x484>
    10ee:	52 cf       	rjmp	.-348    	; 0xf94 <estimate_distance+0x328>
    10f0:	26 cf       	rjmp	.-436    	; 0xf3e <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10f2:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    10f4:	85 e0       	ldi	r24, 0x05	; 5
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	7c 01       	movw	r14, r24
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	ef 1a       	sub	r14, r31
    10fe:	f1 08       	sbc	r15, r1
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__mulsf3>
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	a9 01       	movw	r20, r18
    111c:	0e 94 b5 0c 	call	0x196a	; 0x196a <__addsf3>
    1120:	69 83       	std	Y+1, r22	; 0x01
    1122:	7a 83       	std	Y+2, r23	; 0x02
    1124:	8b 83       	std	Y+3, r24	; 0x03
    1126:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
    1128:	40 ce       	rjmp	.-896    	; 0xdaa <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    112a:	01 e0       	ldi	r16, 0x01	; 1
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	84 cf       	rjmp	.-248    	; 0x103a <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	df cf       	rjmp	.-66     	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    113a:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	7c cf       	rjmp	.-264    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1142:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	d7 cf       	rjmp	.-82     	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    114a:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	74 cf       	rjmp	.-280    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1152:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	cf cf       	rjmp	.-98     	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    115a:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	6c cf       	rjmp	.-296    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1162:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    1164:	84 e0       	ldi	r24, 0x04	; 4
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	c7 cf       	rjmp	.-114    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    116a:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	64 cf       	rjmp	.-312    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1172:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    1174:	86 e0       	ldi	r24, 0x06	; 6
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	bf cf       	rjmp	.-130    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    117a:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
    117c:	87 e0       	ldi	r24, 0x07	; 7
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	5c cf       	rjmp	.-328    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1182:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    1184:	87 e0       	ldi	r24, 0x07	; 7
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	b7 cf       	rjmp	.-146    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    118a:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
    118c:	88 e0       	ldi	r24, 0x08	; 8
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	54 cf       	rjmp	.-344    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1192:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    1194:	88 e0       	ldi	r24, 0x08	; 8
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	af cf       	rjmp	.-162    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    119a:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    119c:	89 e0       	ldi	r24, 0x09	; 9
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	4c cf       	rjmp	.-360    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    11a2:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    11a4:	89 e0       	ldi	r24, 0x09	; 9
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a7 cf       	rjmp	.-178    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    11aa:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    11ac:	8a e0       	ldi	r24, 0x0A	; 10
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	44 cf       	rjmp	.-376    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    11b2:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    11b4:	8a e0       	ldi	r24, 0x0A	; 10
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9f cf       	rjmp	.-194    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    11ba:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    11bc:	8b e0       	ldi	r24, 0x0B	; 11
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9b cf       	rjmp	.-202    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    11c2:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    11c4:	8b e0       	ldi	r24, 0x0B	; 11
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	38 cf       	rjmp	.-400    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    11ca:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    11cc:	8c e0       	ldi	r24, 0x0C	; 12
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	93 cf       	rjmp	.-218    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    11d2:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    11d4:	8c e0       	ldi	r24, 0x0C	; 12
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	30 cf       	rjmp	.-416    	; 0x103a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    11da:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	8b cf       	rjmp	.-234    	; 0x10f8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    11e2:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    11e4:	8d e0       	ldi	r24, 0x0D	; 13
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	28 cf       	rjmp	.-432    	; 0x103a <estimate_distance+0x3ce>

000011ea <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	2f 93       	push	r18
    11f6:	3f 93       	push	r19
    11f8:	4f 93       	push	r20
    11fa:	5f 93       	push	r21
    11fc:	6f 93       	push	r22
    11fe:	7f 93       	push	r23
    1200:	8f 93       	push	r24
    1202:	9f 93       	push	r25
    1204:	af 93       	push	r26
    1206:	bf 93       	push	r27
    1208:	ef 93       	push	r30
    120a:	ff 93       	push	r31
    tx_clock += tx_increment;
    120c:	20 91 79 01 	lds	r18, 0x0179
    1210:	30 91 7a 01 	lds	r19, 0x017A
    1214:	80 91 77 01 	lds	r24, 0x0177
    1218:	90 91 78 01 	lds	r25, 0x0178
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	90 93 7a 01 	sts	0x017A, r25
    1224:	80 93 79 01 	sts	0x0179, r24
    tx_increment = 0xFF;
    1228:	8f ef       	ldi	r24, 0xFF	; 255
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	90 93 78 01 	sts	0x0178, r25
    1230:	80 93 77 01 	sts	0x0177, r24
    OCR0A = tx_increment;
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1238:	80 91 55 01 	lds	r24, 0x0155
    123c:	90 91 56 01 	lds	r25, 0x0156
    1240:	a0 91 57 01 	lds	r26, 0x0157
    1244:	b0 91 58 01 	lds	r27, 0x0158
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	a1 1d       	adc	r26, r1
    124c:	b1 1d       	adc	r27, r1
    124e:	80 93 55 01 	sts	0x0155, r24
    1252:	90 93 56 01 	sts	0x0156, r25
    1256:	a0 93 57 01 	sts	0x0157, r26
    125a:	b0 93 58 01 	sts	0x0158, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    125e:	80 91 59 01 	lds	r24, 0x0159
    1262:	81 11       	cpse	r24, r1
    1264:	0f c0       	rjmp	.+30     	; 0x1284 <__vector_14+0x9a>
    1266:	80 91 88 01 	lds	r24, 0x0188
    126a:	90 91 89 01 	lds	r25, 0x0189
    126e:	20 91 79 01 	lds	r18, 0x0179
    1272:	30 91 7a 01 	lds	r19, 0x017A
    1276:	82 17       	cp	r24, r18
    1278:	93 07       	cpc	r25, r19
    127a:	20 f4       	brcc	.+8      	; 0x1284 <__vector_14+0x9a>
    127c:	80 91 25 01 	lds	r24, 0x0125
    1280:	84 30       	cpi	r24, 0x04	; 4
    1282:	89 f0       	breq	.+34     	; 0x12a6 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	bf 91       	pop	r27
    128a:	af 91       	pop	r26
    128c:	9f 91       	pop	r25
    128e:	8f 91       	pop	r24
    1290:	7f 91       	pop	r23
    1292:	6f 91       	pop	r22
    1294:	5f 91       	pop	r21
    1296:	4f 91       	pop	r20
    1298:	3f 91       	pop	r19
    129a:	2f 91       	pop	r18
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    12a6:	e0 91 07 01 	lds	r30, 0x0107
    12aa:	f0 91 08 01 	lds	r31, 0x0108
    12ae:	09 95       	icall
        if (msg) {
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	41 f3       	breq	.-48     	; 0x1284 <__vector_14+0x9a>
            if (message_send(msg)) {
    12b4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <message_send>
    12b8:	81 11       	cpse	r24, r1
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    12bc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <rand>
    12c0:	99 27       	eor	r25, r25
    12c2:	90 93 78 01 	sts	0x0178, r25
    12c6:	80 93 77 01 	sts	0x0177, r24
                OCR0A = tx_increment;
    12ca:	87 bd       	out	0x27, r24	; 39
    12cc:	db cf       	rjmp	.-74     	; 0x1284 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    12ce:	e0 91 05 01 	lds	r30, 0x0105
    12d2:	f0 91 06 01 	lds	r31, 0x0106
    12d6:	09 95       	icall
                tx_clock = 0;
    12d8:	10 92 7a 01 	sts	0x017A, r1
    12dc:	10 92 79 01 	sts	0x0179, r1
    12e0:	d1 cf       	rjmp	.-94     	; 0x1284 <__vector_14+0x9a>

000012e2 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    12e2:	80 ff       	sbrs	r24, 0
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <set_color+0x26>
        DDRD |= (1<<5);
    12e6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    12e8:	81 ff       	sbrs	r24, 1
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <set_color+0x2c>
        DDRD |= (1<<4);
    12ec:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    12ee:	82 ff       	sbrs	r24, 2
    12f0:	11 c0       	rjmp	.+34     	; 0x1314 <set_color+0x32>
        DDRC |= (1<<3);
    12f2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    12f4:	83 ff       	sbrs	r24, 3
    12f6:	11 c0       	rjmp	.+34     	; 0x131a <set_color+0x38>
        DDRC |= (1<<2);
    12f8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    12fa:	84 ff       	sbrs	r24, 4
    12fc:	11 c0       	rjmp	.+34     	; 0x1320 <set_color+0x3e>
        DDRC |= (1<<5);
    12fe:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1300:	85 fd       	sbrc	r24, 5
    1302:	11 c0       	rjmp	.+34     	; 0x1326 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1304:	3c 98       	cbi	0x07, 4	; 7
    1306:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1308:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    130a:	81 fd       	sbrc	r24, 1
    130c:	ef cf       	rjmp	.-34     	; 0x12ec <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    130e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1310:	82 fd       	sbrc	r24, 2
    1312:	ef cf       	rjmp	.-34     	; 0x12f2 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1314:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1316:	83 fd       	sbrc	r24, 3
    1318:	ef cf       	rjmp	.-34     	; 0x12f8 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    131a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    131c:	84 fd       	sbrc	r24, 4
    131e:	ef cf       	rjmp	.-34     	; 0x12fe <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1320:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1322:	85 ff       	sbrs	r24, 5
    1324:	ef cf       	rjmp	.-34     	; 0x1304 <set_color+0x22>
        DDRC |= (1<<4);
    1326:	3c 9a       	sbi	0x07, 4	; 7
    1328:	08 95       	ret

0000132a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    rx_timer_off();
    1338:	10 92 81 00 	sts	0x0081, r1
    133c:	10 92 85 00 	sts	0x0085, r1
    1340:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	80 93 32 01 	sts	0x0132, r24
    rx_leadingbyte = 1;
    134a:	80 93 76 01 	sts	0x0176, r24
    rx_busy = 0;
    134e:	10 92 59 01 	sts	0x0159, r1
    adc_trigger_high_gain();
    1352:	10 92 7c 00 	sts	0x007C, r1
    1356:	93 ea       	ldi	r25, 0xA3	; 163
    1358:	90 93 7a 00 	sts	0x007A, r25
    135c:	80 93 7b 00 	sts	0x007B, r24
}
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1394:	20 91 84 00 	lds	r18, 0x0084
    1398:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	40 93 59 01 	sts	0x0159, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    13a2:	80 91 32 01 	lds	r24, 0x0132
    13a6:	88 23       	and	r24, r24
    13a8:	a9 f1       	breq	.+106    	; 0x1414 <__vector_23+0xa6>
        rx_timer_on();
    13aa:	10 92 85 00 	sts	0x0085, r1
    13ae:	10 92 84 00 	sts	0x0084, r1
    13b2:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    13b6:	10 92 8a 01 	sts	0x018A, r1
        rx_leadingbit = 0;
    13ba:	10 92 32 01 	sts	0x0132, r1
        if (rx_leadingbyte) {
    13be:	80 91 76 01 	lds	r24, 0x0176
    13c2:	88 23       	and	r24, r24
    13c4:	a1 f0       	breq	.+40     	; 0x13ee <__vector_23+0x80>
            adc_finish_conversion();
    13c6:	80 91 7a 00 	lds	r24, 0x007A
    13ca:	86 fd       	sbrc	r24, 6
    13cc:	fc cf       	rjmp	.-8      	; 0x13c6 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    13ce:	80 91 78 00 	lds	r24, 0x0078
    13d2:	90 91 79 00 	lds	r25, 0x0079
    13d6:	90 93 54 01 	sts	0x0154, r25
    13da:	80 93 53 01 	sts	0x0153, r24
            adc_trigger_low_gain();
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 7c 00 	sts	0x007C, r24
    13e4:	93 ea       	ldi	r25, 0xA3	; 163
    13e6:	90 93 7a 00 	sts	0x007A, r25
    13ea:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1414:	c9 01       	movw	r24, r18
    1416:	87 58       	subi	r24, 0x87	; 135
    1418:	91 09       	sbc	r25, r1
    141a:	84 37       	cpi	r24, 0x74	; 116
    141c:	99 40       	sbci	r25, 0x09	; 9
    141e:	08 f0       	brcs	.+2      	; 0x1422 <__vector_23+0xb4>
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1422:	26 58       	subi	r18, 0x86	; 134
    1424:	31 09       	sbc	r19, r1
    1426:	a4 ef       	ldi	r26, 0xF4	; 244
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	0e 94 91 0c 	call	0x1922	; 0x1922 <__umulhisi3>
    142e:	aa 27       	eor	r26, r26
    1430:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	91 05       	cpc	r25, r1
    1436:	a1 05       	cpc	r26, r1
    1438:	b1 05       	cpc	r27, r1
    143a:	08 f4       	brcc	.+2      	; 0x143e <__vector_23+0xd0>
    143c:	7b c0       	rjmp	.+246    	; 0x1534 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    143e:	40 93 32 01 	sts	0x0132, r20
                if (rx_leadingbyte) {
    1442:	80 91 76 01 	lds	r24, 0x0176
    1446:	81 11       	cpse	r24, r1
    1448:	52 c0       	rjmp	.+164    	; 0x14ee <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    144a:	80 91 50 01 	lds	r24, 0x0150
    144e:	e8 2f       	mov	r30, r24
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	e4 58       	subi	r30, 0x84	; 132
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	90 91 8a 01 	lds	r25, 0x018A
    145a:	90 83       	st	Z, r25
                    rx_byteindex++;
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	80 93 50 01 	sts	0x0150, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1462:	8c 30       	cpi	r24, 0x0C	; 12
    1464:	21 f6       	brne	.-120    	; 0x13ee <__vector_23+0x80>
                        rx_timer_off();
    1466:	10 92 81 00 	sts	0x0081, r1
    146a:	10 92 85 00 	sts	0x0085, r1
    146e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1472:	40 93 76 01 	sts	0x0176, r20
                        rx_busy = 0;
    1476:	10 92 59 01 	sts	0x0159, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    147a:	c0 91 86 01 	lds	r28, 0x0186
    147e:	d0 91 87 01 	lds	r29, 0x0187
    1482:	8c e7       	ldi	r24, 0x7C	; 124
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	0e 94 c1 0b 	call	0x1782	; 0x1782 <message_crc>
    148a:	c8 17       	cp	r28, r24
    148c:	d9 07       	cpc	r29, r25
    148e:	09 f0       	breq	.+2      	; 0x1492 <__vector_23+0x124>
    1490:	ae cf       	rjmp	.-164    	; 0x13ee <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1492:	80 91 85 01 	lds	r24, 0x0185
    1496:	87 ff       	sbrs	r24, 7
    1498:	61 c0       	rjmp	.+194    	; 0x155c <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    149a:	98 e7       	ldi	r25, 0x78	; 120
    149c:	98 0f       	add	r25, r24
    149e:	93 30       	cpi	r25, 0x03	; 3
    14a0:	30 f0       	brcs	.+12     	; 0x14ae <__vector_23+0x140>
        motors_off();
    14a2:	53 98       	cbi	0x0a, 3	; 10
    14a4:	23 98       	cbi	0x04, 3	; 4
    14a6:	10 92 b4 00 	sts	0x00B4, r1
    14aa:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	fc 01       	movw	r30, r24
    14b2:	e0 58       	subi	r30, 0x80	; 128
    14b4:	f1 09       	sbc	r31, r1
    14b6:	eb 30       	cpi	r30, 0x0B	; 11
    14b8:	f1 05       	cpc	r31, r1
    14ba:	08 f0       	brcs	.+2      	; 0x14be <__vector_23+0x150>
    14bc:	98 cf       	rjmp	.-208    	; 0x13ee <__vector_23+0x80>
    14be:	e5 5c       	subi	r30, 0xC5	; 197
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    14c6:	10 92 81 00 	sts	0x0081, r1
    14ca:	10 92 85 00 	sts	0x0085, r1
    14ce:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    14d2:	40 93 32 01 	sts	0x0132, r20
            rx_leadingbyte = 1;
    14d6:	40 93 76 01 	sts	0x0176, r20
            rx_busy = 0;
    14da:	10 92 59 01 	sts	0x0159, r1
            adc_trigger_high_gain();
    14de:	10 92 7c 00 	sts	0x007C, r1
    14e2:	83 ea       	ldi	r24, 0xA3	; 163
    14e4:	80 93 7a 00 	sts	0x007A, r24
    14e8:	40 93 7b 00 	sts	0x007B, r20
    14ec:	80 cf       	rjmp	.-256    	; 0x13ee <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    14ee:	80 91 7a 00 	lds	r24, 0x007A
    14f2:	86 fd       	sbrc	r24, 6
    14f4:	fc cf       	rjmp	.-8      	; 0x14ee <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    14f6:	80 91 78 00 	lds	r24, 0x0078
    14fa:	90 91 79 00 	lds	r25, 0x0079
    14fe:	90 93 52 01 	sts	0x0152, r25
    1502:	80 93 51 01 	sts	0x0151, r24
                    adc_trigger_high_gain();
    1506:	10 92 7c 00 	sts	0x007C, r1
    150a:	83 ea       	ldi	r24, 0xA3	; 163
    150c:	80 93 7a 00 	sts	0x007A, r24
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1516:	90 91 8a 01 	lds	r25, 0x018A
    151a:	99 23       	and	r25, r25
    151c:	d1 f0       	breq	.+52     	; 0x1552 <__vector_23+0x1e4>
                        rx_timer_off();
    151e:	10 92 81 00 	sts	0x0081, r1
    1522:	10 92 85 00 	sts	0x0085, r1
    1526:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    152a:	80 93 76 01 	sts	0x0176, r24
                        rx_busy = 0;
    152e:	10 92 59 01 	sts	0x0159, r1
    1532:	5d cf       	rjmp	.-326    	; 0x13ee <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	f9 01       	movw	r30, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <__vector_23+0x1d2>
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	8a 95       	dec	r24
    1542:	e2 f7       	brpl	.-8      	; 0x153c <__vector_23+0x1ce>
    1544:	cf 01       	movw	r24, r30
    1546:	90 91 8a 01 	lds	r25, 0x018A
    154a:	89 2b       	or	r24, r25
    154c:	80 93 8a 01 	sts	0x018A, r24
    1550:	4e cf       	rjmp	.-356    	; 0x13ee <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1552:	10 92 76 01 	sts	0x0176, r1
                        rx_byteindex = 0;
    1556:	10 92 50 01 	sts	0x0150, r1
    155a:	49 cf       	rjmp	.-366    	; 0x13ee <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    155c:	e0 91 09 01 	lds	r30, 0x0109
    1560:	f0 91 0a 01 	lds	r31, 0x010A
    1564:	61 e5       	ldi	r22, 0x51	; 81
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	8c e7       	ldi	r24, 0x7C	; 124
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	09 95       	icall
    156e:	3f cf       	rjmp	.-386    	; 0x13ee <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1570:	80 91 7c 01 	lds	r24, 0x017C
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	09 f4       	brne	.+2      	; 0x157a <__vector_23+0x20c>
    1578:	dd c0       	rjmp	.+442    	; 0x1734 <__vector_23+0x3c6>
    157a:	08 f4       	brcc	.+2      	; 0x157e <__vector_23+0x210>
    157c:	ba c0       	rjmp	.+372    	; 0x16f2 <__vector_23+0x384>
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	09 f4       	brne	.+2      	; 0x1584 <__vector_23+0x216>
    1582:	c6 c0       	rjmp	.+396    	; 0x1710 <__vector_23+0x3a2>
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	09 f0       	breq	.+2      	; 0x158a <__vector_23+0x21c>
    1588:	b1 c0       	rjmp	.+354    	; 0x16ec <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    158a:	80 91 23 01 	lds	r24, 0x0123
    158e:	90 91 82 01 	lds	r25, 0x0182
    1592:	83 30       	cpi	r24, 0x03	; 3
    1594:	09 f4       	brne	.+2      	; 0x1598 <__vector_23+0x22a>
    1596:	e3 c0       	rjmp	.+454    	; 0x175e <__vector_23+0x3f0>
    1598:	80 91 81 01 	lds	r24, 0x0181
                        prev_motion = MOVE_STOP;
    159c:	10 92 24 01 	sts	0x0124, r1
                        cur_motion = MOVE_STRAIGHT;
    15a0:	23 e0       	ldi	r18, 0x03	; 3
    15a2:	20 93 23 01 	sts	0x0123, r18
                        kilo_straight_left = calibmsg->straight_left;
    15a6:	80 93 8d 01 	sts	0x018D, r24
                        kilo_straight_right = calibmsg->straight_right;
    15aa:	90 93 8e 01 	sts	0x018E, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    15ae:	80 91 25 01 	lds	r24, 0x0125
    15b2:	86 30       	cpi	r24, 0x06	; 6
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__vector_23+0x24a>
    15b6:	1b cf       	rjmp	.-458    	; 0x13ee <__vector_23+0x80>
                motors_on();
    15b8:	53 9a       	sbi	0x0a, 3	; 10
    15ba:	23 9a       	sbi	0x04, 3	; 4
    15bc:	10 92 b4 00 	sts	0x00B4, r1
    15c0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    15c4:	86 e0       	ldi	r24, 0x06	; 6
    15c6:	80 93 25 01 	sts	0x0125, r24
    15ca:	11 cf       	rjmp	.-478    	; 0x13ee <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    15cc:	80 91 25 01 	lds	r24, 0x0125
    15d0:	86 30       	cpi	r24, 0x06	; 6
    15d2:	99 f0       	breq	.+38     	; 0x15fa <__vector_23+0x28c>
                motors_on();
    15d4:	53 9a       	sbi	0x0a, 3	; 10
    15d6:	23 9a       	sbi	0x04, 3	; 4
    15d8:	10 92 b4 00 	sts	0x00B4, r1
    15dc:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    15e0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    15e2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    15e4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    15e6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    15e8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    15ea:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    15ec:	10 92 23 01 	sts	0x0123, r1
    15f0:	10 92 24 01 	sts	0x0124, r1
                kilo_state = MOVING;
    15f4:	86 e0       	ldi	r24, 0x06	; 6
    15f6:	80 93 25 01 	sts	0x0125, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9c 01       	movw	r18, r24
    1600:	00 90 7c 01 	lds	r0, 0x017C
    1604:	02 c0       	rjmp	.+4      	; 0x160a <__vector_23+0x29c>
    1606:	22 0f       	add	r18, r18
    1608:	33 1f       	adc	r19, r19
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <__vector_23+0x298>
    160e:	80 91 8b 01 	lds	r24, 0x018B
    1612:	90 91 8c 01 	lds	r25, 0x018C
    1616:	82 23       	and	r24, r18
    1618:	93 23       	and	r25, r19
    161a:	89 2b       	or	r24, r25
    161c:	09 f0       	breq	.+2      	; 0x1620 <__vector_23+0x2b2>
    161e:	86 c0       	rjmp	.+268    	; 0x172c <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1620:	10 92 23 01 	sts	0x0123, r1
    1624:	e4 ce       	rjmp	.-568    	; 0x13ee <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 25 01 	sts	0x0125, r24
    162c:	e0 ce       	rjmp	.-576    	; 0x13ee <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    162e:	e0 e0       	ldi	r30, 0x00	; 0
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1634:	80 91 6e 00 	lds	r24, 0x006E
    1638:	8d 7f       	andi	r24, 0xFD	; 253
    163a:	80 93 6e 00 	sts	0x006E, r24
    163e:	16 bc       	out	0x26, r1	; 38
            bootload();
    1640:	e0 e0       	ldi	r30, 0x00	; 0
    1642:	f0 e7       	ldi	r31, 0x70	; 112
    1644:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1646:	10 92 25 01 	sts	0x0125, r1
    164a:	d1 ce       	rjmp	.-606    	; 0x13ee <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	80 93 25 01 	sts	0x0125, r24
    1652:	cd ce       	rjmp	.-614    	; 0x13ee <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1654:	85 e0       	ldi	r24, 0x05	; 5
    1656:	80 93 25 01 	sts	0x0125, r24
    165a:	c9 ce       	rjmp	.-622    	; 0x13ee <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    165c:	80 91 25 01 	lds	r24, 0x0125
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	09 f4       	brne	.+2      	; 0x1666 <__vector_23+0x2f8>
    1664:	c4 ce       	rjmp	.-632    	; 0x13ee <__vector_23+0x80>
    1666:	80 91 25 01 	lds	r24, 0x0125
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	09 f4       	brne	.+2      	; 0x1670 <__vector_23+0x302>
    166e:	bf ce       	rjmp	.-642    	; 0x13ee <__vector_23+0x80>
                motors_on();
    1670:	53 9a       	sbi	0x0a, 3	; 10
    1672:	23 9a       	sbi	0x04, 3	; 4
    1674:	10 92 b4 00 	sts	0x00B4, r1
    1678:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	80 93 25 01 	sts	0x0125, r24
    1682:	b5 ce       	rjmp	.-662    	; 0x13ee <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1684:	80 91 25 01 	lds	r24, 0x0125
    1688:	86 30       	cpi	r24, 0x06	; 6
    168a:	09 f0       	breq	.+2      	; 0x168e <__vector_23+0x320>
    168c:	b0 ce       	rjmp	.-672    	; 0x13ee <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    168e:	60 91 8b 01 	lds	r22, 0x018B
    1692:	80 eb       	ldi	r24, 0xB0	; 176
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    169a:	60 91 8c 01 	lds	r22, 0x018C
    169e:	81 eb       	ldi	r24, 0xB1	; 177
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    16a6:	60 91 8f 01 	lds	r22, 0x018F
    16aa:	85 e0       	ldi	r24, 0x05	; 5
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    16b2:	60 91 7b 01 	lds	r22, 0x017B
    16b6:	89 e0       	ldi	r24, 0x09	; 9
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    16be:	60 91 8d 01 	lds	r22, 0x018D
    16c2:	8c e0       	ldi	r24, 0x0C	; 12
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    16ca:	60 91 8e 01 	lds	r22, 0x018E
    16ce:	84 e1       	ldi	r24, 0x14	; 20
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <eeprom_write_byte>
                        motors_off();
    16d6:	53 98       	cbi	0x0a, 3	; 10
    16d8:	23 98       	cbi	0x04, 3	; 4
    16da:	10 92 b4 00 	sts	0x00B4, r1
    16de:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	80 93 25 01 	sts	0x0125, r24
    16e8:	80 91 7c 01 	lds	r24, 0x017C
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    16ec:	81 11       	cpse	r24, r1
    16ee:	5f cf       	rjmp	.-322    	; 0x15ae <__vector_23+0x240>
    16f0:	7e ce       	rjmp	.-772    	; 0x13ee <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    16f2:	88 23       	and	r24, r24
    16f4:	39 f2       	breq	.-114    	; 0x1684 <__vector_23+0x316>
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	c9 f7       	brne	.-14     	; 0x16ec <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    16fa:	80 91 7d 01 	lds	r24, 0x017D
    16fe:	90 91 7e 01 	lds	r25, 0x017E
    1702:	90 93 8c 01 	sts	0x018C, r25
    1706:	80 93 8b 01 	sts	0x018B, r24
                    cur_motion = MOVE_STOP;
    170a:	10 92 23 01 	sts	0x0123, r1
    170e:	4f cf       	rjmp	.-354    	; 0x15ae <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1710:	80 91 23 01 	lds	r24, 0x0123
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	71 f1       	breq	.+92     	; 0x1774 <__vector_23+0x406>
    1718:	80 91 80 01 	lds	r24, 0x0180
                        prev_motion = MOVE_STOP;
    171c:	10 92 24 01 	sts	0x0124, r1
                        cur_motion = MOVE_RIGHT;
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	90 93 23 01 	sts	0x0123, r25
                        kilo_turn_right = calibmsg->turn_right;
    1726:	80 93 7b 01 	sts	0x017B, r24
    172a:	41 cf       	rjmp	.-382    	; 0x15ae <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 23 01 	sts	0x0123, r24
    1732:	5d ce       	rjmp	.-838    	; 0x13ee <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1734:	80 91 23 01 	lds	r24, 0x0123
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	51 f0       	breq	.+20     	; 0x1750 <__vector_23+0x3e2>
    173c:	80 91 7f 01 	lds	r24, 0x017F
                        prev_motion = MOVE_STOP;
    1740:	10 92 24 01 	sts	0x0124, r1
                        cur_motion = MOVE_LEFT;
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	90 93 23 01 	sts	0x0123, r25
                        kilo_turn_left = calibmsg->turn_left;
    174a:	80 93 8f 01 	sts	0x018F, r24
    174e:	2f cf       	rjmp	.-418    	; 0x15ae <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1750:	80 91 7f 01 	lds	r24, 0x017F
    1754:	90 91 8f 01 	lds	r25, 0x018F
    1758:	89 13       	cpse	r24, r25
    175a:	f2 cf       	rjmp	.-28     	; 0x1740 <__vector_23+0x3d2>
    175c:	28 cf       	rjmp	.-432    	; 0x15ae <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    175e:	80 91 8e 01 	lds	r24, 0x018E
    1762:	98 13       	cpse	r25, r24
    1764:	19 cf       	rjmp	.-462    	; 0x1598 <__vector_23+0x22a>
    1766:	80 91 81 01 	lds	r24, 0x0181
    176a:	20 91 8d 01 	lds	r18, 0x018D
    176e:	82 13       	cpse	r24, r18
    1770:	15 cf       	rjmp	.-470    	; 0x159c <__vector_23+0x22e>
    1772:	1d cf       	rjmp	.-454    	; 0x15ae <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1774:	80 91 80 01 	lds	r24, 0x0180
    1778:	90 91 7b 01 	lds	r25, 0x017B
    177c:	89 13       	cpse	r24, r25
    177e:	ce cf       	rjmp	.-100    	; 0x171c <__vector_23+0x3ae>
    1780:	16 cf       	rjmp	.-468    	; 0x15ae <__vector_23+0x240>

00001782 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1782:	fc 01       	movw	r30, r24
    1784:	ac 01       	movw	r20, r24
    1786:	46 5f       	subi	r20, 0xF6	; 246
    1788:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    178a:	8f ef       	ldi	r24, 0xFF	; 255
    178c:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    178e:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1790:	82 27       	eor	r24, r18
    1792:	08 2e       	mov	r0, r24
    1794:	82 95       	swap	r24
    1796:	80 7f       	andi	r24, 0xF0	; 240
    1798:	80 25       	eor	r24, r0
    179a:	09 2e       	mov	r0, r25
    179c:	98 2f       	mov	r25, r24
    179e:	82 95       	swap	r24
    17a0:	8f 70       	andi	r24, 0x0F	; 15
    17a2:	08 26       	eor	r0, r24
    17a4:	86 95       	lsr	r24
    17a6:	98 27       	eor	r25, r24
    17a8:	89 27       	eor	r24, r25
    17aa:	88 0f       	add	r24, r24
    17ac:	88 0f       	add	r24, r24
    17ae:	88 0f       	add	r24, r24
    17b0:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    17b2:	e4 17       	cp	r30, r20
    17b4:	f5 07       	cpc	r31, r21
    17b6:	59 f7       	brne	.-42     	; 0x178e <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    17b8:	08 95       	ret

000017ba <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    17ba:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    17bc:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    17be:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    17c0:	20 91 4f 01 	lds	r18, 0x014F
    or tmpreg1, ddrreg
    17c4:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    17c6:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    17c8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    17ca:	30 91 4f 01 	lds	r19, 0x014F
    17ce:	20 30       	cpi	r18, 0x00	; 0
    17d0:	29 f0       	breq	.+10     	; 0x17dc <message_send+0x22>
    17d2:	00 00       	nop
    17d4:	25 b1       	in	r18, 0x05	; 5
    17d6:	23 2b       	or	r18, r19
    17d8:	25 b9       	out	0x05, r18	; 5
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <message_send+0x2a>
    17dc:	00 00       	nop
    17de:	00 00       	nop
    17e0:	00 00       	nop
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <message_send+0x2a>
    17e4:	00 00       	nop
    17e6:	00 00       	nop
    17e8:	00 00       	nop
    17ea:	30 95       	com	r19
    17ec:	25 b1       	in	r18, 0x05	; 5
    17ee:	23 23       	and	r18, r19
    17f0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    17f2:	2e ea       	ldi	r18, 0xAE	; 174
    17f4:	2a 95       	dec	r18
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    17f8:	2b ee       	ldi	r18, 0xEB	; 235

000017fa <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    17fa:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    17fc:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    17fe:	0a c0       	rjmp	.+20     	; 0x1814 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1800:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1802:	30 91 4f 01 	lds	r19, 0x014F
    com tmpreg2
    1806:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1808:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    180a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    180c:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    180e:	0f be       	out	0x3f, r0	; 63
    return 0
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	08 95       	ret

00001814 <nocollision>:
nocollision:
    nop
    1814:	00 00       	nop
    dec tmpreg1
    1816:	2a 95       	dec	r18
    brne checkcollision
    1818:	81 f7       	brne	.-32     	; 0x17fa <checkcollision>

    ldi tmpreg1, 0x01
    181a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    181c:	30 91 4f 01 	lds	r19, 0x014F
    1820:	20 30       	cpi	r18, 0x00	; 0
    1822:	29 f0       	breq	.+10     	; 0x182e <nocollision+0x1a>
    1824:	00 00       	nop
    1826:	25 b1       	in	r18, 0x05	; 5
    1828:	23 2b       	or	r18, r19
    182a:	25 b9       	out	0x05, r18	; 5
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <nocollision+0x22>
    182e:	00 00       	nop
    1830:	00 00       	nop
    1832:	00 00       	nop
    1834:	00 c0       	rjmp	.+0      	; 0x1836 <nocollision+0x22>
    1836:	00 00       	nop
    1838:	00 00       	nop
    183a:	00 00       	nop
    183c:	30 95       	com	r19
    183e:	25 b1       	in	r18, 0x05	; 5
    1840:	23 23       	and	r18, r19
    1842:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1844:	00 00       	nop
    1846:	24 e5       	ldi	r18, 0x54	; 84
    1848:	2a 95       	dec	r18
    184a:	f1 f7       	brne	.-4      	; 0x1848 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    184c:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    184e:	8c e0       	ldi	r24, 0x0C	; 12

00001850 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1850:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1852:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1854:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1856:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1858:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    185a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    185c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    185e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1860:	50 e0       	ldi	r21, 0x00	; 0

00001862 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1862:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1864:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1866:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1868:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    186a:	30 91 4f 01 	lds	r19, 0x014F
    186e:	20 30       	cpi	r18, 0x00	; 0
    1870:	29 f0       	breq	.+10     	; 0x187c <sendbit+0x1a>
    1872:	00 00       	nop
    1874:	25 b1       	in	r18, 0x05	; 5
    1876:	23 2b       	or	r18, r19
    1878:	25 b9       	out	0x05, r18	; 5
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <sendbit+0x22>
    187c:	00 00       	nop
    187e:	00 00       	nop
    1880:	00 00       	nop
    1882:	00 c0       	rjmp	.+0      	; 0x1884 <sendbit+0x22>
    1884:	00 00       	nop
    1886:	00 00       	nop
    1888:	00 00       	nop
    188a:	30 95       	com	r19
    188c:	25 b1       	in	r18, 0x05	; 5
    188e:	23 23       	and	r18, r19
    1890:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1892:	00 00       	nop
    1894:	21 e5       	ldi	r18, 0x51	; 81
    1896:	2a 95       	dec	r18
    1898:	f1 f7       	brne	.-4      	; 0x1896 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    189a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    189c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    189e:	9a 95       	dec	r25
    brne sendbit
    18a0:	01 f7       	brne	.-64     	; 0x1862 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    18a2:	8a 95       	dec	r24
    brne sendbyte
    18a4:	a9 f6       	brne	.-86     	; 0x1850 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    18a6:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    18a8:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    18aa:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    18ac:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    18ae:	30 91 4f 01 	lds	r19, 0x014F
    com tmpreg2
    18b2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    18b4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    18b6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    18b8:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    18ba:	0f be       	out	0x3f, r0	; 63
    return 1
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	08 95       	ret

000018c0 <main>:
    }
}

int main()
{
    kilo_init();
    18c0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <kilo_init>
    kilo_message_rx = message_rx;
    18c4:	8f ea       	ldi	r24, 0xAF	; 175
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	90 93 0a 01 	sts	0x010A, r25
    18cc:	80 93 09 01 	sts	0x0109, r24
    kilo_message_tx = message_tx;
    18d0:	81 e7       	ldi	r24, 0x71	; 113
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	90 93 08 01 	sts	0x0108, r25
    18d8:	80 93 07 01 	sts	0x0107, r24
    kilo_start(setup, loop);
    18dc:	69 ec       	ldi	r22, 0xC9	; 201
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	84 e7       	ldi	r24, 0x74	; 116
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 ed 03 	call	0x7da	; 0x7da <kilo_start>
    
    return 0;
}
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	08 95       	ret

000018ee <__divmodhi4>:
    18ee:	97 fb       	bst	r25, 7
    18f0:	07 2e       	mov	r0, r23
    18f2:	16 f4       	brtc	.+4      	; 0x18f8 <__divmodhi4+0xa>
    18f4:	00 94       	com	r0
    18f6:	07 d0       	rcall	.+14     	; 0x1906 <__divmodhi4_neg1>
    18f8:	77 fd       	sbrc	r23, 7
    18fa:	09 d0       	rcall	.+18     	; 0x190e <__divmodhi4_neg2>
    18fc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__udivmodhi4>
    1900:	07 fc       	sbrc	r0, 7
    1902:	05 d0       	rcall	.+10     	; 0x190e <__divmodhi4_neg2>
    1904:	3e f4       	brtc	.+14     	; 0x1914 <__divmodhi4_exit>

00001906 <__divmodhi4_neg1>:
    1906:	90 95       	com	r25
    1908:	81 95       	neg	r24
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	08 95       	ret

0000190e <__divmodhi4_neg2>:
    190e:	70 95       	com	r23
    1910:	61 95       	neg	r22
    1912:	7f 4f       	sbci	r23, 0xFF	; 255

00001914 <__divmodhi4_exit>:
    1914:	08 95       	ret

00001916 <__tablejump2__>:
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	05 90       	lpm	r0, Z+
    191c:	f4 91       	lpm	r31, Z
    191e:	e0 2d       	mov	r30, r0
    1920:	09 94       	ijmp

00001922 <__umulhisi3>:
    1922:	a2 9f       	mul	r26, r18
    1924:	b0 01       	movw	r22, r0
    1926:	b3 9f       	mul	r27, r19
    1928:	c0 01       	movw	r24, r0
    192a:	a3 9f       	mul	r26, r19
    192c:	70 0d       	add	r23, r0
    192e:	81 1d       	adc	r24, r1
    1930:	11 24       	eor	r1, r1
    1932:	91 1d       	adc	r25, r1
    1934:	b2 9f       	mul	r27, r18
    1936:	70 0d       	add	r23, r0
    1938:	81 1d       	adc	r24, r1
    193a:	11 24       	eor	r1, r1
    193c:	91 1d       	adc	r25, r1
    193e:	08 95       	ret

00001940 <__udivmodhi4>:
    1940:	aa 1b       	sub	r26, r26
    1942:	bb 1b       	sub	r27, r27
    1944:	51 e1       	ldi	r21, 0x11	; 17
    1946:	07 c0       	rjmp	.+14     	; 0x1956 <__udivmodhi4_ep>

00001948 <__udivmodhi4_loop>:
    1948:	aa 1f       	adc	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	a6 17       	cp	r26, r22
    194e:	b7 07       	cpc	r27, r23
    1950:	10 f0       	brcs	.+4      	; 0x1956 <__udivmodhi4_ep>
    1952:	a6 1b       	sub	r26, r22
    1954:	b7 0b       	sbc	r27, r23

00001956 <__udivmodhi4_ep>:
    1956:	88 1f       	adc	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	5a 95       	dec	r21
    195c:	a9 f7       	brne	.-22     	; 0x1948 <__udivmodhi4_loop>
    195e:	80 95       	com	r24
    1960:	90 95       	com	r25
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	08 95       	ret

00001968 <__subsf3>:
    1968:	50 58       	subi	r21, 0x80	; 128

0000196a <__addsf3>:
    196a:	bb 27       	eor	r27, r27
    196c:	aa 27       	eor	r26, r26
    196e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__addsf3x>
    1972:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__fp_round>
    1976:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscA>
    197a:	38 f0       	brcs	.+14     	; 0x198a <__addsf3+0x20>
    197c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_pscB>
    1980:	20 f0       	brcs	.+8      	; 0x198a <__addsf3+0x20>
    1982:	39 f4       	brne	.+14     	; 0x1992 <__addsf3+0x28>
    1984:	9f 3f       	cpi	r25, 0xFF	; 255
    1986:	19 f4       	brne	.+6      	; 0x198e <__addsf3+0x24>
    1988:	26 f4       	brtc	.+8      	; 0x1992 <__addsf3+0x28>
    198a:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_nan>
    198e:	0e f4       	brtc	.+2      	; 0x1992 <__addsf3+0x28>
    1990:	e0 95       	com	r30
    1992:	e7 fb       	bst	r30, 7
    1994:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_inf>

00001998 <__addsf3x>:
    1998:	e9 2f       	mov	r30, r25
    199a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_split3>
    199e:	58 f3       	brcs	.-42     	; 0x1976 <__addsf3+0xc>
    19a0:	ba 17       	cp	r27, r26
    19a2:	62 07       	cpc	r22, r18
    19a4:	73 07       	cpc	r23, r19
    19a6:	84 07       	cpc	r24, r20
    19a8:	95 07       	cpc	r25, r21
    19aa:	20 f0       	brcs	.+8      	; 0x19b4 <__addsf3x+0x1c>
    19ac:	79 f4       	brne	.+30     	; 0x19cc <__addsf3x+0x34>
    19ae:	a6 f5       	brtc	.+104    	; 0x1a18 <__addsf3x+0x80>
    19b0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_zero>
    19b4:	0e f4       	brtc	.+2      	; 0x19b8 <__addsf3x+0x20>
    19b6:	e0 95       	com	r30
    19b8:	0b 2e       	mov	r0, r27
    19ba:	ba 2f       	mov	r27, r26
    19bc:	a0 2d       	mov	r26, r0
    19be:	0b 01       	movw	r0, r22
    19c0:	b9 01       	movw	r22, r18
    19c2:	90 01       	movw	r18, r0
    19c4:	0c 01       	movw	r0, r24
    19c6:	ca 01       	movw	r24, r20
    19c8:	a0 01       	movw	r20, r0
    19ca:	11 24       	eor	r1, r1
    19cc:	ff 27       	eor	r31, r31
    19ce:	59 1b       	sub	r21, r25
    19d0:	99 f0       	breq	.+38     	; 0x19f8 <__addsf3x+0x60>
    19d2:	59 3f       	cpi	r21, 0xF9	; 249
    19d4:	50 f4       	brcc	.+20     	; 0x19ea <__addsf3x+0x52>
    19d6:	50 3e       	cpi	r21, 0xE0	; 224
    19d8:	68 f1       	brcs	.+90     	; 0x1a34 <__addsf3x+0x9c>
    19da:	1a 16       	cp	r1, r26
    19dc:	f0 40       	sbci	r31, 0x00	; 0
    19de:	a2 2f       	mov	r26, r18
    19e0:	23 2f       	mov	r18, r19
    19e2:	34 2f       	mov	r19, r20
    19e4:	44 27       	eor	r20, r20
    19e6:	58 5f       	subi	r21, 0xF8	; 248
    19e8:	f3 cf       	rjmp	.-26     	; 0x19d0 <__addsf3x+0x38>
    19ea:	46 95       	lsr	r20
    19ec:	37 95       	ror	r19
    19ee:	27 95       	ror	r18
    19f0:	a7 95       	ror	r26
    19f2:	f0 40       	sbci	r31, 0x00	; 0
    19f4:	53 95       	inc	r21
    19f6:	c9 f7       	brne	.-14     	; 0x19ea <__addsf3x+0x52>
    19f8:	7e f4       	brtc	.+30     	; 0x1a18 <__addsf3x+0x80>
    19fa:	1f 16       	cp	r1, r31
    19fc:	ba 0b       	sbc	r27, r26
    19fe:	62 0b       	sbc	r22, r18
    1a00:	73 0b       	sbc	r23, r19
    1a02:	84 0b       	sbc	r24, r20
    1a04:	ba f0       	brmi	.+46     	; 0x1a34 <__addsf3x+0x9c>
    1a06:	91 50       	subi	r25, 0x01	; 1
    1a08:	a1 f0       	breq	.+40     	; 0x1a32 <__addsf3x+0x9a>
    1a0a:	ff 0f       	add	r31, r31
    1a0c:	bb 1f       	adc	r27, r27
    1a0e:	66 1f       	adc	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	88 1f       	adc	r24, r24
    1a14:	c2 f7       	brpl	.-16     	; 0x1a06 <__addsf3x+0x6e>
    1a16:	0e c0       	rjmp	.+28     	; 0x1a34 <__addsf3x+0x9c>
    1a18:	ba 0f       	add	r27, r26
    1a1a:	62 1f       	adc	r22, r18
    1a1c:	73 1f       	adc	r23, r19
    1a1e:	84 1f       	adc	r24, r20
    1a20:	48 f4       	brcc	.+18     	; 0x1a34 <__addsf3x+0x9c>
    1a22:	87 95       	ror	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	b7 95       	ror	r27
    1a2a:	f7 95       	ror	r31
    1a2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <__addsf3x+0x9a>
    1a30:	b0 cf       	rjmp	.-160    	; 0x1992 <__addsf3+0x28>
    1a32:	93 95       	inc	r25
    1a34:	88 0f       	add	r24, r24
    1a36:	08 f0       	brcs	.+2      	; 0x1a3a <__addsf3x+0xa2>
    1a38:	99 27       	eor	r25, r25
    1a3a:	ee 0f       	add	r30, r30
    1a3c:	97 95       	ror	r25
    1a3e:	87 95       	ror	r24
    1a40:	08 95       	ret

00001a42 <__divsf3>:
    1a42:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3x>
    1a46:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__fp_round>
    1a4a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_pscB>
    1a4e:	58 f0       	brcs	.+22     	; 0x1a66 <__divsf3+0x24>
    1a50:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscA>
    1a54:	40 f0       	brcs	.+16     	; 0x1a66 <__divsf3+0x24>
    1a56:	29 f4       	brne	.+10     	; 0x1a62 <__divsf3+0x20>
    1a58:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <__divsf3+0x24>
    1a5c:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_inf>
    1a60:	51 11       	cpse	r21, r1
    1a62:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1a66:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_nan>

00001a6a <__divsf3x>:
    1a6a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_split3>
    1a6e:	68 f3       	brcs	.-38     	; 0x1a4a <__divsf3+0x8>

00001a70 <__divsf3_pse>:
    1a70:	99 23       	and	r25, r25
    1a72:	b1 f3       	breq	.-20     	; 0x1a60 <__divsf3+0x1e>
    1a74:	55 23       	and	r21, r21
    1a76:	91 f3       	breq	.-28     	; 0x1a5c <__divsf3+0x1a>
    1a78:	95 1b       	sub	r25, r21
    1a7a:	55 0b       	sbc	r21, r21
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	aa 27       	eor	r26, r26
    1a80:	62 17       	cp	r22, r18
    1a82:	73 07       	cpc	r23, r19
    1a84:	84 07       	cpc	r24, r20
    1a86:	38 f0       	brcs	.+14     	; 0x1a96 <__divsf3_pse+0x26>
    1a88:	9f 5f       	subi	r25, 0xFF	; 255
    1a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	44 1f       	adc	r20, r20
    1a92:	aa 1f       	adc	r26, r26
    1a94:	a9 f3       	breq	.-22     	; 0x1a80 <__divsf3_pse+0x10>
    1a96:	35 d0       	rcall	.+106    	; 0x1b02 <__divsf3_pse+0x92>
    1a98:	0e 2e       	mov	r0, r30
    1a9a:	3a f0       	brmi	.+14     	; 0x1aaa <__divsf3_pse+0x3a>
    1a9c:	e0 e8       	ldi	r30, 0x80	; 128
    1a9e:	32 d0       	rcall	.+100    	; 0x1b04 <__divsf3_pse+0x94>
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	50 40       	sbci	r21, 0x00	; 0
    1aa4:	e6 95       	lsr	r30
    1aa6:	00 1c       	adc	r0, r0
    1aa8:	ca f7       	brpl	.-14     	; 0x1a9c <__divsf3_pse+0x2c>
    1aaa:	2b d0       	rcall	.+86     	; 0x1b02 <__divsf3_pse+0x92>
    1aac:	fe 2f       	mov	r31, r30
    1aae:	29 d0       	rcall	.+82     	; 0x1b02 <__divsf3_pse+0x92>
    1ab0:	66 0f       	add	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	bb 1f       	adc	r27, r27
    1ab8:	26 17       	cp	r18, r22
    1aba:	37 07       	cpc	r19, r23
    1abc:	48 07       	cpc	r20, r24
    1abe:	ab 07       	cpc	r26, r27
    1ac0:	b0 e8       	ldi	r27, 0x80	; 128
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <__divsf3_pse+0x56>
    1ac4:	bb 0b       	sbc	r27, r27
    1ac6:	80 2d       	mov	r24, r0
    1ac8:	bf 01       	movw	r22, r30
    1aca:	ff 27       	eor	r31, r31
    1acc:	93 58       	subi	r25, 0x83	; 131
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad0:	3a f0       	brmi	.+14     	; 0x1ae0 <__divsf3_pse+0x70>
    1ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad4:	51 05       	cpc	r21, r1
    1ad6:	78 f0       	brcs	.+30     	; 0x1af6 <__divsf3_pse+0x86>
    1ad8:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_inf>
    1adc:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1ae0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae2:	e4 f3       	brlt	.-8      	; 0x1adc <__divsf3_pse+0x6c>
    1ae4:	98 3e       	cpi	r25, 0xE8	; 232
    1ae6:	d4 f3       	brlt	.-12     	; 0x1adc <__divsf3_pse+0x6c>
    1ae8:	86 95       	lsr	r24
    1aea:	77 95       	ror	r23
    1aec:	67 95       	ror	r22
    1aee:	b7 95       	ror	r27
    1af0:	f7 95       	ror	r31
    1af2:	9f 5f       	subi	r25, 0xFF	; 255
    1af4:	c9 f7       	brne	.-14     	; 0x1ae8 <__divsf3_pse+0x78>
    1af6:	88 0f       	add	r24, r24
    1af8:	91 1d       	adc	r25, r1
    1afa:	96 95       	lsr	r25
    1afc:	87 95       	ror	r24
    1afe:	97 f9       	bld	r25, 7
    1b00:	08 95       	ret
    1b02:	e1 e0       	ldi	r30, 0x01	; 1
    1b04:	66 0f       	add	r22, r22
    1b06:	77 1f       	adc	r23, r23
    1b08:	88 1f       	adc	r24, r24
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	62 17       	cp	r22, r18
    1b0e:	73 07       	cpc	r23, r19
    1b10:	84 07       	cpc	r24, r20
    1b12:	ba 07       	cpc	r27, r26
    1b14:	20 f0       	brcs	.+8      	; 0x1b1e <__divsf3_pse+0xae>
    1b16:	62 1b       	sub	r22, r18
    1b18:	73 0b       	sbc	r23, r19
    1b1a:	84 0b       	sbc	r24, r20
    1b1c:	ba 0b       	sbc	r27, r26
    1b1e:	ee 1f       	adc	r30, r30
    1b20:	88 f7       	brcc	.-30     	; 0x1b04 <__divsf3_pse+0x94>
    1b22:	e0 95       	com	r30
    1b24:	08 95       	ret

00001b26 <__fixsfsi>:
    1b26:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__fixunssfsi>
    1b2a:	68 94       	set
    1b2c:	b1 11       	cpse	r27, r1
    1b2e:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1b32:	08 95       	ret

00001b34 <__fixunssfsi>:
    1b34:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_splitA>
    1b38:	88 f0       	brcs	.+34     	; 0x1b5c <__fixunssfsi+0x28>
    1b3a:	9f 57       	subi	r25, 0x7F	; 127
    1b3c:	98 f0       	brcs	.+38     	; 0x1b64 <__fixunssfsi+0x30>
    1b3e:	b9 2f       	mov	r27, r25
    1b40:	99 27       	eor	r25, r25
    1b42:	b7 51       	subi	r27, 0x17	; 23
    1b44:	b0 f0       	brcs	.+44     	; 0x1b72 <__fixunssfsi+0x3e>
    1b46:	e1 f0       	breq	.+56     	; 0x1b80 <__fixunssfsi+0x4c>
    1b48:	66 0f       	add	r22, r22
    1b4a:	77 1f       	adc	r23, r23
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	1a f0       	brmi	.+6      	; 0x1b58 <__fixunssfsi+0x24>
    1b52:	ba 95       	dec	r27
    1b54:	c9 f7       	brne	.-14     	; 0x1b48 <__fixunssfsi+0x14>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <__fixunssfsi+0x4c>
    1b58:	b1 30       	cpi	r27, 0x01	; 1
    1b5a:	91 f0       	breq	.+36     	; 0x1b80 <__fixunssfsi+0x4c>
    1b5c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fp_zero>
    1b60:	b1 e0       	ldi	r27, 0x01	; 1
    1b62:	08 95       	ret
    1b64:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_zero>
    1b68:	67 2f       	mov	r22, r23
    1b6a:	78 2f       	mov	r23, r24
    1b6c:	88 27       	eor	r24, r24
    1b6e:	b8 5f       	subi	r27, 0xF8	; 248
    1b70:	39 f0       	breq	.+14     	; 0x1b80 <__fixunssfsi+0x4c>
    1b72:	b9 3f       	cpi	r27, 0xF9	; 249
    1b74:	cc f3       	brlt	.-14     	; 0x1b68 <__fixunssfsi+0x34>
    1b76:	86 95       	lsr	r24
    1b78:	77 95       	ror	r23
    1b7a:	67 95       	ror	r22
    1b7c:	b3 95       	inc	r27
    1b7e:	d9 f7       	brne	.-10     	; 0x1b76 <__fixunssfsi+0x42>
    1b80:	3e f4       	brtc	.+14     	; 0x1b90 <__fixunssfsi+0x5c>
    1b82:	90 95       	com	r25
    1b84:	80 95       	com	r24
    1b86:	70 95       	com	r23
    1b88:	61 95       	neg	r22
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	08 95       	ret

00001b92 <__floatunsisf>:
    1b92:	e8 94       	clt
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <__floatsisf+0x12>

00001b96 <__floatsisf>:
    1b96:	97 fb       	bst	r25, 7
    1b98:	3e f4       	brtc	.+14     	; 0x1ba8 <__floatsisf+0x12>
    1b9a:	90 95       	com	r25
    1b9c:	80 95       	com	r24
    1b9e:	70 95       	com	r23
    1ba0:	61 95       	neg	r22
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	99 23       	and	r25, r25
    1baa:	a9 f0       	breq	.+42     	; 0x1bd6 <__floatsisf+0x40>
    1bac:	f9 2f       	mov	r31, r25
    1bae:	96 e9       	ldi	r25, 0x96	; 150
    1bb0:	bb 27       	eor	r27, r27
    1bb2:	93 95       	inc	r25
    1bb4:	f6 95       	lsr	r31
    1bb6:	87 95       	ror	r24
    1bb8:	77 95       	ror	r23
    1bba:	67 95       	ror	r22
    1bbc:	b7 95       	ror	r27
    1bbe:	f1 11       	cpse	r31, r1
    1bc0:	f8 cf       	rjmp	.-16     	; 0x1bb2 <__floatsisf+0x1c>
    1bc2:	fa f4       	brpl	.+62     	; 0x1c02 <__floatsisf+0x6c>
    1bc4:	bb 0f       	add	r27, r27
    1bc6:	11 f4       	brne	.+4      	; 0x1bcc <__floatsisf+0x36>
    1bc8:	60 ff       	sbrs	r22, 0
    1bca:	1b c0       	rjmp	.+54     	; 0x1c02 <__floatsisf+0x6c>
    1bcc:	6f 5f       	subi	r22, 0xFF	; 255
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	16 c0       	rjmp	.+44     	; 0x1c02 <__floatsisf+0x6c>
    1bd6:	88 23       	and	r24, r24
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <__floatsisf+0x48>
    1bda:	96 e9       	ldi	r25, 0x96	; 150
    1bdc:	11 c0       	rjmp	.+34     	; 0x1c00 <__floatsisf+0x6a>
    1bde:	77 23       	and	r23, r23
    1be0:	21 f0       	breq	.+8      	; 0x1bea <__floatsisf+0x54>
    1be2:	9e e8       	ldi	r25, 0x8E	; 142
    1be4:	87 2f       	mov	r24, r23
    1be6:	76 2f       	mov	r23, r22
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <__floatsisf+0x5e>
    1bea:	66 23       	and	r22, r22
    1bec:	71 f0       	breq	.+28     	; 0x1c0a <__floatsisf+0x74>
    1bee:	96 e8       	ldi	r25, 0x86	; 134
    1bf0:	86 2f       	mov	r24, r22
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	2a f0       	brmi	.+10     	; 0x1c02 <__floatsisf+0x6c>
    1bf8:	9a 95       	dec	r25
    1bfa:	66 0f       	add	r22, r22
    1bfc:	77 1f       	adc	r23, r23
    1bfe:	88 1f       	adc	r24, r24
    1c00:	da f7       	brpl	.-10     	; 0x1bf8 <__floatsisf+0x62>
    1c02:	88 0f       	add	r24, r24
    1c04:	96 95       	lsr	r25
    1c06:	87 95       	ror	r24
    1c08:	97 f9       	bld	r25, 7
    1c0a:	08 95       	ret

00001c0c <__fp_inf>:
    1c0c:	97 f9       	bld	r25, 7
    1c0e:	9f 67       	ori	r25, 0x7F	; 127
    1c10:	80 e8       	ldi	r24, 0x80	; 128
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	08 95       	ret

00001c18 <__fp_nan>:
    1c18:	9f ef       	ldi	r25, 0xFF	; 255
    1c1a:	80 ec       	ldi	r24, 0xC0	; 192
    1c1c:	08 95       	ret

00001c1e <__fp_pscA>:
    1c1e:	00 24       	eor	r0, r0
    1c20:	0a 94       	dec	r0
    1c22:	16 16       	cp	r1, r22
    1c24:	17 06       	cpc	r1, r23
    1c26:	18 06       	cpc	r1, r24
    1c28:	09 06       	cpc	r0, r25
    1c2a:	08 95       	ret

00001c2c <__fp_pscB>:
    1c2c:	00 24       	eor	r0, r0
    1c2e:	0a 94       	dec	r0
    1c30:	12 16       	cp	r1, r18
    1c32:	13 06       	cpc	r1, r19
    1c34:	14 06       	cpc	r1, r20
    1c36:	05 06       	cpc	r0, r21
    1c38:	08 95       	ret

00001c3a <__fp_round>:
    1c3a:	09 2e       	mov	r0, r25
    1c3c:	03 94       	inc	r0
    1c3e:	00 0c       	add	r0, r0
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <__fp_round+0xc>
    1c42:	88 23       	and	r24, r24
    1c44:	52 f0       	brmi	.+20     	; 0x1c5a <__fp_round+0x20>
    1c46:	bb 0f       	add	r27, r27
    1c48:	40 f4       	brcc	.+16     	; 0x1c5a <__fp_round+0x20>
    1c4a:	bf 2b       	or	r27, r31
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <__fp_round+0x18>
    1c4e:	60 ff       	sbrs	r22, 0
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <__fp_round+0x20>
    1c52:	6f 5f       	subi	r22, 0xFF	; 255
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	8f 4f       	sbci	r24, 0xFF	; 255
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	08 95       	ret

00001c5c <__fp_split3>:
    1c5c:	57 fd       	sbrc	r21, 7
    1c5e:	90 58       	subi	r25, 0x80	; 128
    1c60:	44 0f       	add	r20, r20
    1c62:	55 1f       	adc	r21, r21
    1c64:	59 f0       	breq	.+22     	; 0x1c7c <__fp_splitA+0x10>
    1c66:	5f 3f       	cpi	r21, 0xFF	; 255
    1c68:	71 f0       	breq	.+28     	; 0x1c86 <__fp_splitA+0x1a>
    1c6a:	47 95       	ror	r20

00001c6c <__fp_splitA>:
    1c6c:	88 0f       	add	r24, r24
    1c6e:	97 fb       	bst	r25, 7
    1c70:	99 1f       	adc	r25, r25
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <__fp_splitA+0x20>
    1c74:	9f 3f       	cpi	r25, 0xFF	; 255
    1c76:	79 f0       	breq	.+30     	; 0x1c96 <__fp_splitA+0x2a>
    1c78:	87 95       	ror	r24
    1c7a:	08 95       	ret
    1c7c:	12 16       	cp	r1, r18
    1c7e:	13 06       	cpc	r1, r19
    1c80:	14 06       	cpc	r1, r20
    1c82:	55 1f       	adc	r21, r21
    1c84:	f2 cf       	rjmp	.-28     	; 0x1c6a <__fp_split3+0xe>
    1c86:	46 95       	lsr	r20
    1c88:	f1 df       	rcall	.-30     	; 0x1c6c <__fp_splitA>
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <__fp_splitA+0x30>
    1c8c:	16 16       	cp	r1, r22
    1c8e:	17 06       	cpc	r1, r23
    1c90:	18 06       	cpc	r1, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	f1 cf       	rjmp	.-30     	; 0x1c78 <__fp_splitA+0xc>
    1c96:	86 95       	lsr	r24
    1c98:	71 05       	cpc	r23, r1
    1c9a:	61 05       	cpc	r22, r1
    1c9c:	08 94       	sec
    1c9e:	08 95       	ret

00001ca0 <__fp_zero>:
    1ca0:	e8 94       	clt

00001ca2 <__fp_szero>:
    1ca2:	bb 27       	eor	r27, r27
    1ca4:	66 27       	eor	r22, r22
    1ca6:	77 27       	eor	r23, r23
    1ca8:	cb 01       	movw	r24, r22
    1caa:	97 f9       	bld	r25, 7
    1cac:	08 95       	ret

00001cae <__mulsf3>:
    1cae:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3x>
    1cb2:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__fp_round>
    1cb6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscA>
    1cba:	38 f0       	brcs	.+14     	; 0x1cca <__mulsf3+0x1c>
    1cbc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_pscB>
    1cc0:	20 f0       	brcs	.+8      	; 0x1cca <__mulsf3+0x1c>
    1cc2:	95 23       	and	r25, r21
    1cc4:	11 f0       	breq	.+4      	; 0x1cca <__mulsf3+0x1c>
    1cc6:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_inf>
    1cca:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_nan>
    1cce:	11 24       	eor	r1, r1
    1cd0:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>

00001cd4 <__mulsf3x>:
    1cd4:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fp_split3>
    1cd8:	70 f3       	brcs	.-36     	; 0x1cb6 <__mulsf3+0x8>

00001cda <__mulsf3_pse>:
    1cda:	95 9f       	mul	r25, r21
    1cdc:	c1 f3       	breq	.-16     	; 0x1cce <__mulsf3+0x20>
    1cde:	95 0f       	add	r25, r21
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	55 1f       	adc	r21, r21
    1ce4:	62 9f       	mul	r22, r18
    1ce6:	f0 01       	movw	r30, r0
    1ce8:	72 9f       	mul	r23, r18
    1cea:	bb 27       	eor	r27, r27
    1cec:	f0 0d       	add	r31, r0
    1cee:	b1 1d       	adc	r27, r1
    1cf0:	63 9f       	mul	r22, r19
    1cf2:	aa 27       	eor	r26, r26
    1cf4:	f0 0d       	add	r31, r0
    1cf6:	b1 1d       	adc	r27, r1
    1cf8:	aa 1f       	adc	r26, r26
    1cfa:	64 9f       	mul	r22, r20
    1cfc:	66 27       	eor	r22, r22
    1cfe:	b0 0d       	add	r27, r0
    1d00:	a1 1d       	adc	r26, r1
    1d02:	66 1f       	adc	r22, r22
    1d04:	82 9f       	mul	r24, r18
    1d06:	22 27       	eor	r18, r18
    1d08:	b0 0d       	add	r27, r0
    1d0a:	a1 1d       	adc	r26, r1
    1d0c:	62 1f       	adc	r22, r18
    1d0e:	73 9f       	mul	r23, r19
    1d10:	b0 0d       	add	r27, r0
    1d12:	a1 1d       	adc	r26, r1
    1d14:	62 1f       	adc	r22, r18
    1d16:	83 9f       	mul	r24, r19
    1d18:	a0 0d       	add	r26, r0
    1d1a:	61 1d       	adc	r22, r1
    1d1c:	22 1f       	adc	r18, r18
    1d1e:	74 9f       	mul	r23, r20
    1d20:	33 27       	eor	r19, r19
    1d22:	a0 0d       	add	r26, r0
    1d24:	61 1d       	adc	r22, r1
    1d26:	23 1f       	adc	r18, r19
    1d28:	84 9f       	mul	r24, r20
    1d2a:	60 0d       	add	r22, r0
    1d2c:	21 1d       	adc	r18, r1
    1d2e:	82 2f       	mov	r24, r18
    1d30:	76 2f       	mov	r23, r22
    1d32:	6a 2f       	mov	r22, r26
    1d34:	11 24       	eor	r1, r1
    1d36:	9f 57       	subi	r25, 0x7F	; 127
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	9a f0       	brmi	.+38     	; 0x1d62 <__mulsf3_pse+0x88>
    1d3c:	f1 f0       	breq	.+60     	; 0x1d7a <__mulsf3_pse+0xa0>
    1d3e:	88 23       	and	r24, r24
    1d40:	4a f0       	brmi	.+18     	; 0x1d54 <__mulsf3_pse+0x7a>
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	bb 1f       	adc	r27, r27
    1d48:	66 1f       	adc	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	91 50       	subi	r25, 0x01	; 1
    1d50:	50 40       	sbci	r21, 0x00	; 0
    1d52:	a9 f7       	brne	.-22     	; 0x1d3e <__mulsf3_pse+0x64>
    1d54:	9e 3f       	cpi	r25, 0xFE	; 254
    1d56:	51 05       	cpc	r21, r1
    1d58:	80 f0       	brcs	.+32     	; 0x1d7a <__mulsf3_pse+0xa0>
    1d5a:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_inf>
    1d5e:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_szero>
    1d62:	5f 3f       	cpi	r21, 0xFF	; 255
    1d64:	e4 f3       	brlt	.-8      	; 0x1d5e <__mulsf3_pse+0x84>
    1d66:	98 3e       	cpi	r25, 0xE8	; 232
    1d68:	d4 f3       	brlt	.-12     	; 0x1d5e <__mulsf3_pse+0x84>
    1d6a:	86 95       	lsr	r24
    1d6c:	77 95       	ror	r23
    1d6e:	67 95       	ror	r22
    1d70:	b7 95       	ror	r27
    1d72:	f7 95       	ror	r31
    1d74:	e7 95       	ror	r30
    1d76:	9f 5f       	subi	r25, 0xFF	; 255
    1d78:	c1 f7       	brne	.-16     	; 0x1d6a <__mulsf3_pse+0x90>
    1d7a:	fe 2b       	or	r31, r30
    1d7c:	88 0f       	add	r24, r24
    1d7e:	91 1d       	adc	r25, r1
    1d80:	96 95       	lsr	r25
    1d82:	87 95       	ror	r24
    1d84:	97 f9       	bld	r25, 7
    1d86:	08 95       	ret

00001d88 <do_rand>:
    1d88:	8f 92       	push	r8
    1d8a:	9f 92       	push	r9
    1d8c:	af 92       	push	r10
    1d8e:	bf 92       	push	r11
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	ec 01       	movw	r28, r24
    1d9e:	68 81       	ld	r22, Y
    1da0:	79 81       	ldd	r23, Y+1	; 0x01
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	61 15       	cp	r22, r1
    1da8:	71 05       	cpc	r23, r1
    1daa:	81 05       	cpc	r24, r1
    1dac:	91 05       	cpc	r25, r1
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <do_rand+0x30>
    1db0:	64 e2       	ldi	r22, 0x24	; 36
    1db2:	79 ed       	ldi	r23, 0xD9	; 217
    1db4:	8b e5       	ldi	r24, 0x5B	; 91
    1db6:	97 e0       	ldi	r25, 0x07	; 7
    1db8:	2d e1       	ldi	r18, 0x1D	; 29
    1dba:	33 ef       	ldi	r19, 0xF3	; 243
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__divmodsi4>
    1dc4:	49 01       	movw	r8, r18
    1dc6:	5a 01       	movw	r10, r20
    1dc8:	9b 01       	movw	r18, r22
    1dca:	ac 01       	movw	r20, r24
    1dcc:	a7 ea       	ldi	r26, 0xA7	; 167
    1dce:	b1 e4       	ldi	r27, 0x41	; 65
    1dd0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__muluhisi3>
    1dd4:	6b 01       	movw	r12, r22
    1dd6:	7c 01       	movw	r14, r24
    1dd8:	ac ee       	ldi	r26, 0xEC	; 236
    1dda:	b4 ef       	ldi	r27, 0xF4	; 244
    1ddc:	a5 01       	movw	r20, r10
    1dde:	94 01       	movw	r18, r8
    1de0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__mulohisi3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	8c 0d       	add	r24, r12
    1dea:	9d 1d       	adc	r25, r13
    1dec:	ae 1d       	adc	r26, r14
    1dee:	bf 1d       	adc	r27, r15
    1df0:	b7 ff       	sbrs	r27, 7
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <do_rand+0x72>
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	a1 09       	sbc	r26, r1
    1df8:	b0 48       	sbci	r27, 0x80	; 128
    1dfa:	88 83       	st	Y, r24
    1dfc:	99 83       	std	Y+1, r25	; 0x01
    1dfe:	aa 83       	std	Y+2, r26	; 0x02
    1e00:	bb 83       	std	Y+3, r27	; 0x03
    1e02:	9f 77       	andi	r25, 0x7F	; 127
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	bf 90       	pop	r11
    1e12:	af 90       	pop	r10
    1e14:	9f 90       	pop	r9
    1e16:	8f 90       	pop	r8
    1e18:	08 95       	ret

00001e1a <rand_r>:
    1e1a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <do_rand>
    1e1e:	08 95       	ret

00001e20 <rand>:
    1e20:	8b e0       	ldi	r24, 0x0B	; 11
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <do_rand>
    1e28:	08 95       	ret

00001e2a <srand>:
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	80 93 0b 01 	sts	0x010B, r24
    1e32:	90 93 0c 01 	sts	0x010C, r25
    1e36:	a0 93 0d 01 	sts	0x010D, r26
    1e3a:	b0 93 0e 01 	sts	0x010E, r27
    1e3e:	08 95       	ret

00001e40 <eeprom_read_byte>:
    1e40:	f9 99       	sbic	0x1f, 1	; 31
    1e42:	fe cf       	rjmp	.-4      	; 0x1e40 <eeprom_read_byte>
    1e44:	92 bd       	out	0x22, r25	; 34
    1e46:	81 bd       	out	0x21, r24	; 33
    1e48:	f8 9a       	sbi	0x1f, 0	; 31
    1e4a:	99 27       	eor	r25, r25
    1e4c:	80 b5       	in	r24, 0x20	; 32
    1e4e:	08 95       	ret

00001e50 <eeprom_write_byte>:
    1e50:	26 2f       	mov	r18, r22

00001e52 <eeprom_write_r18>:
    1e52:	f9 99       	sbic	0x1f, 1	; 31
    1e54:	fe cf       	rjmp	.-4      	; 0x1e52 <eeprom_write_r18>
    1e56:	1f ba       	out	0x1f, r1	; 31
    1e58:	92 bd       	out	0x22, r25	; 34
    1e5a:	81 bd       	out	0x21, r24	; 33
    1e5c:	20 bd       	out	0x20, r18	; 32
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	fa 9a       	sbi	0x1f, 2	; 31
    1e64:	f9 9a       	sbi	0x1f, 1	; 31
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	08 95       	ret

00001e6c <__divmodsi4>:
    1e6c:	05 2e       	mov	r0, r21
    1e6e:	97 fb       	bst	r25, 7
    1e70:	1e f4       	brtc	.+6      	; 0x1e78 <__divmodsi4+0xc>
    1e72:	00 94       	com	r0
    1e74:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__negsi2>
    1e78:	57 fd       	sbrc	r21, 7
    1e7a:	07 d0       	rcall	.+14     	; 0x1e8a <__divmodsi4_neg2>
    1e7c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
    1e80:	07 fc       	sbrc	r0, 7
    1e82:	03 d0       	rcall	.+6      	; 0x1e8a <__divmodsi4_neg2>
    1e84:	4e f4       	brtc	.+18     	; 0x1e98 <__divmodsi4_exit>
    1e86:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__negsi2>

00001e8a <__divmodsi4_neg2>:
    1e8a:	50 95       	com	r21
    1e8c:	40 95       	com	r20
    1e8e:	30 95       	com	r19
    1e90:	21 95       	neg	r18
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	4f 4f       	sbci	r20, 0xFF	; 255
    1e96:	5f 4f       	sbci	r21, 0xFF	; 255

00001e98 <__divmodsi4_exit>:
    1e98:	08 95       	ret

00001e9a <__negsi2>:
    1e9a:	90 95       	com	r25
    1e9c:	80 95       	com	r24
    1e9e:	70 95       	com	r23
    1ea0:	61 95       	neg	r22
    1ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea8:	08 95       	ret

00001eaa <__muluhisi3>:
    1eaa:	0e 94 91 0c 	call	0x1922	; 0x1922 <__umulhisi3>
    1eae:	a5 9f       	mul	r26, r21
    1eb0:	90 0d       	add	r25, r0
    1eb2:	b4 9f       	mul	r27, r20
    1eb4:	90 0d       	add	r25, r0
    1eb6:	a4 9f       	mul	r26, r20
    1eb8:	80 0d       	add	r24, r0
    1eba:	91 1d       	adc	r25, r1
    1ebc:	11 24       	eor	r1, r1
    1ebe:	08 95       	ret

00001ec0 <__mulshisi3>:
    1ec0:	b7 ff       	sbrs	r27, 7
    1ec2:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__muluhisi3>

00001ec6 <__mulohisi3>:
    1ec6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__muluhisi3>
    1eca:	82 1b       	sub	r24, r18
    1ecc:	93 0b       	sbc	r25, r19
    1ece:	08 95       	ret

00001ed0 <__udivmodsi4>:
    1ed0:	a1 e2       	ldi	r26, 0x21	; 33
    1ed2:	1a 2e       	mov	r1, r26
    1ed4:	aa 1b       	sub	r26, r26
    1ed6:	bb 1b       	sub	r27, r27
    1ed8:	fd 01       	movw	r30, r26
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <__udivmodsi4_ep>

00001edc <__udivmodsi4_loop>:
    1edc:	aa 1f       	adc	r26, r26
    1ede:	bb 1f       	adc	r27, r27
    1ee0:	ee 1f       	adc	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	a2 17       	cp	r26, r18
    1ee6:	b3 07       	cpc	r27, r19
    1ee8:	e4 07       	cpc	r30, r20
    1eea:	f5 07       	cpc	r31, r21
    1eec:	20 f0       	brcs	.+8      	; 0x1ef6 <__udivmodsi4_ep>
    1eee:	a2 1b       	sub	r26, r18
    1ef0:	b3 0b       	sbc	r27, r19
    1ef2:	e4 0b       	sbc	r30, r20
    1ef4:	f5 0b       	sbc	r31, r21

00001ef6 <__udivmodsi4_ep>:
    1ef6:	66 1f       	adc	r22, r22
    1ef8:	77 1f       	adc	r23, r23
    1efa:	88 1f       	adc	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	1a 94       	dec	r1
    1f00:	69 f7       	brne	.-38     	; 0x1edc <__udivmodsi4_loop>
    1f02:	60 95       	com	r22
    1f04:	70 95       	com	r23
    1f06:	80 95       	com	r24
    1f08:	90 95       	com	r25
    1f0a:	9b 01       	movw	r18, r22
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	bd 01       	movw	r22, r26
    1f10:	cf 01       	movw	r24, r30
    1f12:	08 95       	ret

00001f14 <_exit>:
    1f14:	f8 94       	cli

00001f16 <__stop_program>:
    1f16:	ff cf       	rjmp	.-2      	; 0x1f16 <__stop_program>
