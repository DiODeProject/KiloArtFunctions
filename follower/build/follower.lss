
build/follower.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	b4 02       	muls	r27, r20
      6a:	30 03       	mulsu	r19, r16
      6c:	88 02       	muls	r24, r24
      6e:	7f 02       	muls	r23, r31
      70:	85 02       	muls	r24, r21
      72:	12 03       	mulsu	r17, r18
      74:	07 03       	mulsu	r16, r23
      76:	92 09       	sbc	r25, r2
      78:	6f 08       	sbc	r6, r15
      7a:	6f 08       	sbc	r6, r15
      7c:	8f 09       	sbc	r24, r15
      7e:	9b 09       	sbc	r25, r11
      80:	8b 09       	sbc	r24, r11
      82:	a2 09       	sbc	r26, r2
      84:	9e 09       	sbc	r25, r14
      86:	a6 09       	sbc	r26, r6
      88:	5e 09       	sbc	r21, r14
      8a:	30 09       	sbc	r19, r0

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e0       	ldi	r30, 0x00	; 0
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 31       	cpi	r26, 0x1A	; 26
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e1       	ldi	r26, 0x1A	; 26
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <main>
      da:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <message_rx>:
}

void message_rx(message_t *m, distance_measurement_t *d)
{
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
      f4:	20 91 1c 01 	lds	r18, 0x011C
      f8:	30 91 1d 01 	lds	r19, 0x011D
      fc:	23 2b       	or	r18, r19
      fe:	69 f4       	brne	.+26     	; 0x11a <message_rx+0x26>
    {
        new_message = 1;
     100:	21 e0       	ldi	r18, 0x01	; 1
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	30 93 1d 01 	sts	0x011D, r19
     108:	20 93 1c 01 	sts	0x011C, r18
        received_message = m->data[0];
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 1f 01 	sts	0x011F, r25
     116:	80 93 1e 01 	sts	0x011E, r24
     11a:	08 95       	ret

0000011c <setup>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     11c:	80 91 1a 01 	lds	r24, 0x011A
     120:	90 91 1b 01 	lds	r25, 0x011B
     124:	01 97       	sbiw	r24, 0x01	; 1
     126:	71 f0       	breq	.+28     	; 0x144 <setup+0x28>
    {
        current_motion = new_motion;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	90 93 1b 01 	sts	0x011B, r25
     130:	80 93 1a 01 	sts	0x011A, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     134:	0e 94 cd 03 	call	0x79a	; 0x79a <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     138:	60 91 84 01 	lds	r22, 0x0184
     13c:	80 91 83 01 	lds	r24, 0x0183
     140:	0e 94 c8 03 	call	0x790	; 0x790 <set_motors>

void setup()
{
    // This ensures that the robot starts moving.
    set_motion(FORWARD);
    last_update = kilo_ticks;
     144:	80 91 4b 01 	lds	r24, 0x014B
     148:	90 91 4c 01 	lds	r25, 0x014C
     14c:	a0 91 4d 01 	lds	r26, 0x014D
     150:	b0 91 4e 01 	lds	r27, 0x014E
     154:	80 93 24 01 	sts	0x0124, r24
     158:	90 93 25 01 	sts	0x0125, r25
     15c:	a0 93 26 01 	sts	0x0126, r26
     160:	b0 93 27 01 	sts	0x0127, r27
     164:	08 95       	ret

00000166 <loop>:
}

void loop()
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
    //printf("light intensity: %d\n", get_ambientlight());
    //sample_light();
    //if (kilo_ticks > (last_update + 32))
    //{
    //   last_update = kilo_ticks;
    if (new_message == 1){
     16a:	c0 91 1c 01 	lds	r28, 0x011C
     16e:	d0 91 1d 01 	lds	r29, 0x011D
     172:	c1 30       	cpi	r28, 0x01	; 1
     174:	d1 05       	cpc	r29, r1
     176:	19 f0       	breq	.+6      	; 0x17e <loop+0x18>
        }
    }

        //previous_light = current_light;
    //}
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret
    //sample_light();
    //if (kilo_ticks > (last_update + 32))
    //{
    //   last_update = kilo_ticks;
    if (new_message == 1){
        new_message = 0;
     17e:	10 92 1d 01 	sts	0x011D, r1
     182:	10 92 1c 01 	sts	0x011C, r1
        if (received_message)
     186:	80 91 1e 01 	lds	r24, 0x011E
     18a:	90 91 1f 01 	lds	r25, 0x011F
     18e:	89 2b       	or	r24, r25
     190:	e1 f4       	brne	.+56     	; 0x1ca <loop+0x64>
            set_color(RGB(0, 1, 0));
            set_motion(FORWARD);
        }
        
        else{
            int random_number = rand_hard();
     192:	0e 94 27 04 	call	0x84e	; 0x84e <rand_hard>
            int random_direction = (random_number % 2);

            if (random_direction == 0)
     196:	80 ff       	sbrs	r24, 0
     198:	2f c0       	rjmp	.+94     	; 0x1f8 <loop+0x92>
                set_color(RGB(1, 0, 0));
                set_motion(LEFT);
            }
            else if (random_direction == 1)
            {
                set_color(RGB(0, 0, 1));
     19a:	80 e1       	ldi	r24, 0x10	; 16
     19c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1a0:	80 91 1a 01 	lds	r24, 0x011A
     1a4:	90 91 1b 01 	lds	r25, 0x011B
     1a8:	03 97       	sbiw	r24, 0x03	; 3
     1aa:	31 f3       	breq	.-52     	; 0x178 <loop+0x12>
    {
        current_motion = new_motion;
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	90 93 1b 01 	sts	0x011B, r25
     1b4:	80 93 1a 01 	sts	0x011A, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     1b8:	0e 94 cd 03 	call	0x79a	; 0x79a <spinup_motors>
            set_motors(0, kilo_turn_right);
     1bc:	60 91 71 01 	lds	r22, 0x0171
     1c0:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

        //previous_light = current_light;
    //}
}
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
            set_motors(0, kilo_turn_right);
     1c6:	0c 94 c8 03 	jmp	0x790	; 0x790 <set_motors>
    //   last_update = kilo_ticks;
    if (new_message == 1){
        new_message = 0;
        if (received_message)
        {
            set_color(RGB(0, 1, 0));
     1ca:	84 e0       	ldi	r24, 0x04	; 4
     1cc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1d0:	80 91 1a 01 	lds	r24, 0x011A
     1d4:	90 91 1b 01 	lds	r25, 0x011B
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	71 f2       	breq	.-100    	; 0x178 <loop+0x12>
    {
        current_motion = new_motion;
     1dc:	d0 93 1b 01 	sts	0x011B, r29
     1e0:	c0 93 1a 01 	sts	0x011A, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     1e4:	0e 94 cd 03 	call	0x79a	; 0x79a <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     1e8:	60 91 84 01 	lds	r22, 0x0184
     1ec:	80 91 83 01 	lds	r24, 0x0183
        }
    }

        //previous_light = current_light;
    //}
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     1f4:	0c 94 c8 03 	jmp	0x790	; 0x790 <set_motors>
            int random_number = rand_hard();
            int random_direction = (random_number % 2);

            if (random_direction == 0)
            {
                set_color(RGB(1, 0, 0));
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1fe:	80 91 1a 01 	lds	r24, 0x011A
     202:	90 91 1b 01 	lds	r25, 0x011B
     206:	02 97       	sbiw	r24, 0x02	; 2
     208:	09 f4       	brne	.+2      	; 0x20c <loop+0xa6>
     20a:	b6 cf       	rjmp	.-148    	; 0x178 <loop+0x12>
    {
        current_motion = new_motion;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 1b 01 	sts	0x011B, r25
     214:	80 93 1a 01 	sts	0x011A, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     218:	0e 94 cd 03 	call	0x79a	; 0x79a <spinup_motors>
            set_motors(kilo_turn_left, 0);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	80 91 85 01 	lds	r24, 0x0185
        }
    }

        //previous_light = current_light;
    //}
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
     226:	0c 94 c8 03 	jmp	0x790	; 0x790 <set_motors>

0000022a <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     22a:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     22c:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     22e:	8c e0       	ldi	r24, 0x0C	; 12
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	90 93 c5 00 	sts	0x00C5, r25
     236:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     23a:	e0 ec       	ldi	r30, 0xC0	; 192
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	8d 7f       	andi	r24, 0xFD	; 253
     242:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     244:	e2 ec       	ldi	r30, 0xC2	; 194
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	86 60       	ori	r24, 0x06	; 6
     24c:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	88 60       	ori	r24, 0x08	; 8
     256:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	90 93 89 01 	sts	0x0189, r25
     260:	80 93 88 01 	sts	0x0188, r24
    sei();
     264:	78 94       	sei
     266:	08 95       	ret

00000268 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     268:	20 91 1a 01 	lds	r18, 0x011A
     26c:	30 91 1b 01 	lds	r19, 0x011B
     270:	28 17       	cp	r18, r24
     272:	39 07       	cpc	r19, r25
     274:	71 f0       	breq	.+28     	; 0x292 <set_motion+0x2a>
    {
        current_motion = new_motion;
     276:	90 93 1b 01 	sts	0x011B, r25
     27a:	80 93 1a 01 	sts	0x011A, r24
        
        if (current_motion == STOP)
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	81 f0       	breq	.+32     	; 0x2a2 <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     282:	81 30       	cpi	r24, 0x01	; 1
     284:	91 05       	cpc	r25, r1
     286:	89 f0       	breq	.+34     	; 0x2aa <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     288:	82 30       	cpi	r24, 0x02	; 2
     28a:	91 05       	cpc	r25, r1
     28c:	b1 f0       	breq	.+44     	; 0x2ba <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     28e:	03 97       	sbiw	r24, 0x03	; 3
     290:	09 f0       	breq	.+2      	; 0x294 <set_motion+0x2c>
     292:	08 95       	ret
        {
            spinup_motors();
     294:	0e 94 cd 03 	call	0x79a	; 0x79a <spinup_motors>
            set_motors(0, kilo_turn_right);
     298:	60 91 71 01 	lds	r22, 0x0171
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0c 94 c8 03 	jmp	0x790	; 0x790 <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0c 94 c8 03 	jmp	0x790	; 0x790 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2aa:	0e 94 cd 03 	call	0x79a	; 0x79a <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2ae:	60 91 84 01 	lds	r22, 0x0184
     2b2:	80 91 83 01 	lds	r24, 0x0183
     2b6:	0c 94 c8 03 	jmp	0x790	; 0x790 <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     2ba:	0e 94 cd 03 	call	0x79a	; 0x79a <spinup_motors>
            set_motors(kilo_turn_left, 0);
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	80 91 85 01 	lds	r24, 0x0185
     2c4:	0c 94 c8 03 	jmp	0x790	; 0x790 <set_motors>

000002c8 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     2c8:	08 95       	ret

000002ca <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	08 95       	ret

000002d0 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     2d0:	08 95       	ret

000002d2 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
    cli();
     2e0:	f8 94       	cli

    ports_off();
     2e2:	14 b8       	out	0x04, r1	; 4
     2e4:	17 b8       	out	0x07, r1	; 7
     2e6:	1a b8       	out	0x0a, r1	; 10
     2e8:	15 b8       	out	0x05, r1	; 5
     2ea:	18 b8       	out	0x08, r1	; 8
     2ec:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2ee:	52 9a       	sbi	0x0a, 2	; 10
     2f0:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2f2:	14 bc       	out	0x24, r1	; 36
     2f4:	85 e0       	ldi	r24, 0x05	; 5
     2f6:	85 bd       	out	0x25, r24	; 37
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	87 bd       	out	0x27, r24	; 39
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     302:	10 92 80 00 	sts	0x0080, r1
     306:	10 92 81 00 	sts	0x0081, r1
     30a:	2f e8       	ldi	r18, 0x8F	; 143
     30c:	3b e0       	ldi	r19, 0x0B	; 11
     30e:	30 93 89 00 	sts	0x0089, r19
     312:	20 93 88 00 	sts	0x0088, r18
     316:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     31a:	53 98       	cbi	0x0a, 3	; 10
     31c:	23 98       	cbi	0x04, 3	; 4
     31e:	91 ea       	ldi	r25, 0xA1	; 161
     320:	90 93 b0 00 	sts	0x00B0, r25
     324:	80 93 b1 00 	sts	0x00B1, r24
     328:	10 92 b4 00 	sts	0x00B4, r1
     32c:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     330:	8b e0       	ldi	r24, 0x0B	; 11
     332:	80 bf       	out	0x30, r24	; 48
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	80 93 7c 00 	sts	0x007C, r24
     340:	83 e8       	ldi	r24, 0x83	; 131
     342:	80 93 7a 00 	sts	0x007A, r24
     346:	80 91 7a 00 	lds	r24, 0x007A
     34a:	80 64       	ori	r24, 0x40	; 64
     34c:	80 93 7a 00 	sts	0x007A, r24
     350:	80 91 7a 00 	lds	r24, 0x007A
     354:	86 fd       	sbrc	r24, 6
     356:	fc cf       	rjmp	.-8      	; 0x350 <kilo_init+0x7e>
    adc_trigger_high_gain();
     358:	10 92 7c 00 	sts	0x007C, r1
     35c:	83 ea       	ldi	r24, 0xA3	; 163
     35e:	80 93 7a 00 	sts	0x007A, r24
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
    if (osccal != 0xFF)
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	11 f0       	breq	.+4      	; 0x378 <kilo_init+0xa6>
        OSCCAL = osccal;
     374:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     378:	10 92 4f 01 	sts	0x014F, r1
    rx_leadingbit = 1;
     37c:	c1 e0       	ldi	r28, 0x01	; 1
     37e:	c0 93 28 01 	sts	0x0128, r28
    rx_leadingbyte = 1;
     382:	c0 93 6c 01 	sts	0x016C, r28
    rx_byteindex = 0;
     386:	10 92 46 01 	sts	0x0146, r1
    rx_bytevalue = 0;
     38a:	10 92 80 01 	sts	0x0180, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     38e:	80 e9       	ldi	r24, 0x90	; 144
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     396:	80 93 45 01 	sts	0x0145, r24
    if (tx_mask & ~TX_MASK_MAX)
     39a:	80 91 45 01 	lds	r24, 0x0145
     39e:	88 73       	andi	r24, 0x38	; 56
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3a2:	c0 93 45 01 	sts	0x0145, r28
    tx_clock = 0;
     3a6:	10 92 70 01 	sts	0x0170, r1
     3aa:	10 92 6f 01 	sts	0x016F, r1
    tx_increment = 255;
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	90 93 6e 01 	sts	0x016E, r25
     3b6:	80 93 6d 01 	sts	0x016D, r24
    kilo_ticks = 0;
     3ba:	10 92 4b 01 	sts	0x014B, r1
     3be:	10 92 4c 01 	sts	0x014C, r1
     3c2:	10 92 4d 01 	sts	0x014D, r1
     3c6:	10 92 4e 01 	sts	0x014E, r1
    kilo_state = IDLE;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 23 01 	sts	0x0123, r24
    kilo_tx_period = 3906;
     3d0:	82 e4       	ldi	r24, 0x42	; 66
     3d2:	9f e0       	ldi	r25, 0x0F	; 15
     3d4:	90 93 7f 01 	sts	0x017F, r25
     3d8:	80 93 7e 01 	sts	0x017E, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3dc:	80 eb       	ldi	r24, 0xB0	; 176
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     3e4:	c8 2f       	mov	r28, r24
     3e6:	81 eb       	ldi	r24, 0xB1	; 177
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     3ee:	2c 2f       	mov	r18, r28
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	38 2b       	or	r19, r24
     3f4:	30 93 82 01 	sts	0x0182, r19
     3f8:	20 93 81 01 	sts	0x0181, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3fc:	85 e0       	ldi	r24, 0x05	; 5
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     404:	80 93 85 01 	sts	0x0185, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     408:	89 e0       	ldi	r24, 0x09	; 9
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     410:	80 93 71 01 	sts	0x0171, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     414:	8c e0       	ldi	r24, 0x0C	; 12
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     41c:	80 93 83 01 	sts	0x0183, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     420:	84 e1       	ldi	r24, 0x14	; 20
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     428:	80 93 84 01 	sts	0x0184, r24
     42c:	50 e5       	ldi	r21, 0x50	; 80
     42e:	e5 2e       	mov	r14, r21
     430:	51 e0       	ldi	r21, 0x01	; 1
     432:	f5 2e       	mov	r15, r21
     434:	09 e2       	ldi	r16, 0x29	; 41
     436:	11 e0       	ldi	r17, 0x01	; 1
     438:	c0 e2       	ldi	r28, 0x20	; 32
     43a:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     442:	d8 2e       	mov	r13, r24
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     44c:	2d 2d       	mov	r18, r13
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	32 2f       	mov	r19, r18
     452:	22 27       	eor	r18, r18
     454:	28 2b       	or	r18, r24
     456:	f7 01       	movw	r30, r14
     458:	21 93       	st	Z+, r18
     45a:	31 93       	st	Z+, r19
     45c:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     45e:	ce 01       	movw	r24, r28
     460:	c0 96       	adiw	r24, 0x30	; 48
     462:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     466:	d8 2e       	mov	r13, r24
     468:	ce 01       	movw	r24, r28
     46a:	c1 96       	adiw	r24, 0x31	; 49
     46c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <eeprom_read_byte>
     470:	2d 2d       	mov	r18, r13
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	32 2f       	mov	r19, r18
     476:	22 27       	eor	r18, r18
     478:	28 2b       	or	r18, r24
     47a:	f8 01       	movw	r30, r16
     47c:	21 93       	st	Z+, r18
     47e:	31 93       	st	Z+, r19
     480:	8f 01       	movw	r16, r30
     482:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     484:	cc 33       	cpi	r28, 0x3C	; 60
     486:	d1 05       	cpc	r29, r1
     488:	c9 f6       	brne	.-78     	; 0x43c <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     48a:	78 94       	sei
}
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	08 95       	ret

0000049c <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	8f 93       	push	r24
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	a8 95       	wdr
     4ae:	80 91 60 00 	lds	r24, 0x0060
     4b2:	88 61       	ori	r24, 0x18	; 24
     4b4:	80 93 60 00 	sts	0x0060, r24
     4b8:	10 92 60 00 	sts	0x0060, r1
     4bc:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     4be:	8f 91       	pop	r24
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     4ca:	3c 01       	movw	r6, r24
     4cc:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     4ce:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     4d0:	99 24       	eor	r9, r9
     4d2:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     4d8:	96 e0       	ldi	r25, 0x06	; 6
     4da:	a9 2e       	mov	r10, r25
     4dc:	23 e8       	ldi	r18, 0x83	; 131
     4de:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     4e0:	38 e1       	ldi	r19, 0x18	; 24
     4e2:	d3 2e       	mov	r13, r19
     4e4:	49 e2       	ldi	r20, 0x29	; 41
     4e6:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     4e8:	90 91 23 01 	lds	r25, 0x0123
     4ec:	e9 2f       	mov	r30, r25
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	e7 30       	cpi	r30, 0x07	; 7
     4f2:	f1 05       	cpc	r31, r1
     4f4:	c8 f7       	brcc	.-14     	; 0x4e8 <kilo_start+0x1e>
     4f6:	ec 5c       	subi	r30, 0xCC	; 204
     4f8:	ff 4f       	sbci	r31, 0xFF	; 255
     4fa:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     4fe:	11 23       	and	r17, r17
     500:	09 f4       	brne	.+2      	; 0x504 <kilo_start+0x3a>
     502:	fc c0       	rjmp	.+504    	; 0x6fc <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     504:	c0 92 23 01 	sts	0x0123, r12
     508:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     50a:	fe 01       	movw	r30, r28
     50c:	09 95       	icall
                break;
     50e:	ec cf       	rjmp	.-40     	; 0x4e8 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     510:	80 91 4f 01 	lds	r24, 0x014F
     514:	81 11       	cpse	r24, r1
     516:	eb c0       	rjmp	.+470    	; 0x6ee <kilo_start+0x224>
        cli();                                    // disable interrupts
     518:	f8 94       	cli
        adc_setup_conversion(6);
     51a:	a0 92 7c 00 	sts	0x007C, r10
     51e:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     522:	80 91 7a 00 	lds	r24, 0x007A
     526:	80 64       	ori	r24, 0x40	; 64
     528:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     52c:	90 91 7a 00 	lds	r25, 0x007A
     530:	96 fd       	sbrc	r25, 6
     532:	fc cf       	rjmp	.-8      	; 0x52c <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     534:	80 91 78 00 	lds	r24, 0x0078
     538:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     53c:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     53e:	8b 3a       	cpi	r24, 0xAB	; 171
     540:	e2 e0       	ldi	r30, 0x02	; 2
     542:	9e 07       	cpc	r25, r30
     544:	0c f0       	brlt	.+2      	; 0x548 <kilo_start+0x7e>
     546:	ed c0       	rjmp	.+474    	; 0x722 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     548:	89 38       	cpi	r24, 0x89	; 137
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	9f 07       	cpc	r25, r31
     54e:	0c f0       	brlt	.+2      	; 0x552 <kilo_start+0x88>
     550:	ef c0       	rjmp	.+478    	; 0x730 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     552:	87 36       	cpi	r24, 0x67	; 103
     554:	92 40       	sbci	r25, 0x02	; 2
     556:	0c f4       	brge	.+2      	; 0x55a <kilo_start+0x90>
     558:	ca c0       	rjmp	.+404    	; 0x6ee <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     55a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     55c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     55e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     560:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     562:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     564:	3c 98       	cbi	0x07, 4	; 7
     566:	c0 cf       	rjmp	.-128    	; 0x4e8 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     568:	f8 94       	cli
                acomp_off();
     56a:	80 b7       	in	r24, 0x30	; 48
     56c:	87 7f       	andi	r24, 0xF7	; 247
     56e:	80 bf       	out	0x30, r24	; 48
                adc_off();
     570:	80 91 7a 00 	lds	r24, 0x007A
     574:	8f 77       	andi	r24, 0x7F	; 127
     576:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     57a:	14 b8       	out	0x04, r1	; 4
     57c:	17 b8       	out	0x07, r1	; 7
     57e:	1a b8       	out	0x0a, r1	; 10
     580:	15 b8       	out	0x05, r1	; 5
     582:	18 b8       	out	0x08, r1	; 8
     584:	1b b8       	out	0x0b, r1	; 11
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	a8 95       	wdr
     58c:	d0 92 60 00 	sts	0x0060, r13
     590:	0f be       	out	0x3f, r0	; 63
     592:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     596:	80 91 60 00 	lds	r24, 0x0060
     59a:	80 64       	ori	r24, 0x40	; 64
     59c:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     5a0:	93 b7       	in	r25, 0x33	; 51
     5a2:	91 7f       	andi	r25, 0xF1	; 241
     5a4:	94 60       	ori	r25, 0x04	; 4
     5a6:	93 bf       	out	0x33, r25	; 51
                cli();
     5a8:	f8 94       	cli
                sleep_enable();
     5aa:	83 b7       	in	r24, 0x33	; 51
     5ac:	81 60       	ori	r24, 0x01	; 1
     5ae:	83 bf       	out	0x33, r24	; 51
                sei();
     5b0:	78 94       	sei
                sleep_cpu();
     5b2:	88 95       	sleep
                sleep_disable();
     5b4:	83 b7       	in	r24, 0x33	; 51
     5b6:	8e 7f       	andi	r24, 0xFE	; 254
     5b8:	83 bf       	out	0x33, r24	; 51
                sei();
     5ba:	78 94       	sei
                rx_busy = 0;
     5bc:	10 92 4f 01 	sts	0x014F, r1
                ports_on();
     5c0:	52 9a       	sbi	0x0a, 2	; 10
     5c2:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     5c4:	80 91 7a 00 	lds	r24, 0x007A
     5c8:	80 68       	ori	r24, 0x80	; 128
     5ca:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ce:	87 e5       	ldi	r24, 0x57	; 87
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <kilo_start+0x108>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <kilo_start+0x10e>
     5d8:	00 00       	nop
                _delay_us(300);
                acomp_on();
     5da:	80 b7       	in	r24, 0x30	; 48
     5dc:	88 61       	ori	r24, 0x18	; 24
     5de:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5e0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5e2:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5e4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5e6:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5e8:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5ea:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ec:	ef e1       	ldi	r30, 0x1F	; 31
     5ee:	fe e4       	ldi	r31, 0x4E	; 78
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <kilo_start+0x126>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <kilo_start+0x12c>
     5f6:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     5f8:	80 91 4f 01 	lds	r24, 0x014F
     5fc:	81 11       	cpse	r24, r1
     5fe:	81 c0       	rjmp	.+258    	; 0x702 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     600:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     602:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     604:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     606:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     608:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     60a:	3c 98       	cbi	0x07, 4	; 7
     60c:	6d cf       	rjmp	.-294    	; 0x4e8 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     60e:	80 91 21 01 	lds	r24, 0x0121
     612:	81 11       	cpse	r24, r1
     614:	41 c0       	rjmp	.+130    	; 0x698 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     616:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     61a:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     61e:	10 92 22 01 	sts	0x0122, r1
     622:	62 cf       	rjmp	.-316    	; 0x4e8 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     624:	48 99       	sbic	0x09, 0	; 9
     626:	ec cf       	rjmp	.-40     	; 0x600 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     628:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     62a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     62c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     62e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     630:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     632:	3c 98       	cbi	0x07, 4	; 7
     634:	8f ec       	ldi	r24, 0xCF	; 207
     636:	97 e0       	ldi	r25, 0x07	; 7
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <kilo_start+0x16e>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <kilo_start+0x174>
     63e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     640:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     642:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     644:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     646:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     648:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     64a:	3c 98       	cbi	0x07, 4	; 7
     64c:	9f ef       	ldi	r25, 0xFF	; 255
     64e:	e1 ee       	ldi	r30, 0xE1	; 225
     650:	f4 e0       	ldi	r31, 0x04	; 4
     652:	91 50       	subi	r25, 0x01	; 1
     654:	e0 40       	sbci	r30, 0x00	; 0
     656:	f0 40       	sbci	r31, 0x00	; 0
     658:	e1 f7       	brne	.-8      	; 0x652 <kilo_start+0x188>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <kilo_start+0x192>
     65c:	00 00       	nop
     65e:	44 cf       	rjmp	.-376    	; 0x4e8 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     660:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     662:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     664:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     666:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     668:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     66a:	3c 98       	cbi	0x07, 4	; 7
     66c:	ef ec       	ldi	r30, 0xCF	; 207
     66e:	f7 e0       	ldi	r31, 0x07	; 7
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <kilo_start+0x1a6>
     674:	00 c0       	rjmp	.+0      	; 0x676 <kilo_start+0x1ac>
     676:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     678:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     67a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     67c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     67e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     680:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     682:	3c 98       	cbi	0x07, 4	; 7
     684:	ff ef       	ldi	r31, 0xFF	; 255
     686:	21 ee       	ldi	r18, 0xE1	; 225
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	f1 50       	subi	r31, 0x01	; 1
     68c:	20 40       	sbci	r18, 0x00	; 0
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	e1 f7       	brne	.-8      	; 0x68a <kilo_start+0x1c0>
     692:	00 c0       	rjmp	.+0      	; 0x694 <kilo_start+0x1ca>
     694:	00 00       	nop
     696:	28 cf       	rjmp	.-432    	; 0x4e8 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     698:	90 91 21 01 	lds	r25, 0x0121
     69c:	80 91 22 01 	lds	r24, 0x0122
     6a0:	98 17       	cp	r25, r24
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <kilo_start+0x1dc>
     6a4:	21 cf       	rjmp	.-446    	; 0x4e8 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     6a6:	80 91 21 01 	lds	r24, 0x0121
     6aa:	80 93 22 01 	sts	0x0122, r24
                        if (cur_motion == MOVE_LEFT) {
     6ae:	80 91 21 01 	lds	r24, 0x0121
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <kilo_start+0x1ee>
     6b6:	50 c0       	rjmp	.+160    	; 0x758 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6b8:	80 91 21 01 	lds	r24, 0x0121
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6bc:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6c0:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	d9 f1       	breq	.+118    	; 0x73e <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6c8:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     6cc:	90 92 b4 00 	sts	0x00B4, r9
     6d0:	8f e2       	ldi	r24, 0x2F	; 47
     6d2:	95 e7       	ldi	r25, 0x75	; 117
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <kilo_start+0x20a>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <kilo_start+0x210>
     6da:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     6dc:	80 91 84 01 	lds	r24, 0x0184
     6e0:	90 91 83 01 	lds	r25, 0x0183
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6e4:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     6e8:	80 93 b4 00 	sts	0x00B4, r24
     6ec:	fd ce       	rjmp	.-518    	; 0x4e8 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6ee:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6f0:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6f2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6f4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6f6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6f8:	3c 98       	cbi	0x07, 4	; 7
     6fa:	f6 ce       	rjmp	.-532    	; 0x4e8 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     6fc:	f3 01       	movw	r30, r6
     6fe:	09 95       	icall
     700:	01 cf       	rjmp	.-510    	; 0x504 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     702:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     704:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     706:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     708:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     70a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     70c:	3c 98       	cbi	0x07, 4	; 7
     70e:	ff ef       	ldi	r31, 0xFF	; 255
     710:	20 e7       	ldi	r18, 0x70	; 112
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	f1 50       	subi	r31, 0x01	; 1
     716:	20 40       	sbci	r18, 0x00	; 0
     718:	80 40       	sbci	r24, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <kilo_start+0x24a>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <kilo_start+0x254>
     71e:	00 00       	nop
     720:	6f cf       	rjmp	.-290    	; 0x600 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     722:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     724:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     726:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     728:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     72a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     72c:	3c 98       	cbi	0x07, 4	; 7
     72e:	dc ce       	rjmp	.-584    	; 0x4e8 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     730:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     732:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     734:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     736:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     738:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     73a:	3c 9a       	sbi	0x07, 4	; 7
     73c:	d5 ce       	rjmp	.-598    	; 0x4e8 <kilo_start+0x1e>
     73e:	ef e2       	ldi	r30, 0x2F	; 47
     740:	f5 e7       	ldi	r31, 0x75	; 117
     742:	31 97       	sbiw	r30, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <kilo_start+0x278>
     746:	00 c0       	rjmp	.+0      	; 0x748 <kilo_start+0x27e>
     748:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     74a:	80 91 71 01 	lds	r24, 0x0171
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     74e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     752:	80 93 b4 00 	sts	0x00B4, r24
     756:	c8 ce       	rjmp	.-624    	; 0x4e8 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     758:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     75c:	10 92 b4 00 	sts	0x00B4, r1
     760:	8f e2       	ldi	r24, 0x2F	; 47
     762:	95 e7       	ldi	r25, 0x75	; 117
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <kilo_start+0x29a>
     768:	00 c0       	rjmp	.+0      	; 0x76a <kilo_start+0x2a0>
     76a:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     76c:	80 91 85 01 	lds	r24, 0x0185
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     770:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     774:	10 92 b4 00 	sts	0x00B4, r1
     778:	b7 ce       	rjmp	.-658    	; 0x4e8 <kilo_start+0x1e>

0000077a <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     77a:	07 c0       	rjmp	.+14     	; 0x78a <delay+0x10>
     77c:	ef ec       	ldi	r30, 0xCF	; 207
     77e:	f7 e0       	ldi	r31, 0x07	; 7
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <delay+0x6>
     784:	00 c0       	rjmp	.+0      	; 0x786 <delay+0xc>
     786:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     788:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	b9 f7       	brne	.-18     	; 0x77c <delay+0x2>
     78e:	08 95       	ret

00000790 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     790:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     794:	60 93 b4 00 	sts	0x00B4, r22
     798:	08 95       	ret

0000079a <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7a0:	80 93 b4 00 	sts	0x00B4, r24
     7a4:	8f e0       	ldi	r24, 0x0F	; 15
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	ef ec       	ldi	r30, 0xCF	; 207
     7aa:	f7 e0       	ldi	r31, 0x07	; 7
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <spinup_motors+0x12>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <spinup_motors+0x18>
     7b2:	00 00       	nop
     7b4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7b6:	c1 f7       	brne	.-16     	; 0x7a8 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     7b8:	08 95       	ret

000007ba <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     7ba:	80 91 4f 01 	lds	r24, 0x014F
     7be:	81 11       	cpse	r24, r1
     7c0:	1e c0       	rjmp	.+60     	; 0x7fe <get_ambientlight+0x44>
        cli();
     7c2:	f8 94       	cli
        adc_setup_conversion(7);
     7c4:	87 e0       	ldi	r24, 0x07	; 7
     7c6:	80 93 7c 00 	sts	0x007C, r24
     7ca:	83 e8       	ldi	r24, 0x83	; 131
     7cc:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7d0:	80 91 7a 00 	lds	r24, 0x007A
     7d4:	80 64       	ori	r24, 0x40	; 64
     7d6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7da:	80 91 7a 00 	lds	r24, 0x007A
     7de:	86 fd       	sbrc	r24, 6
     7e0:	fc cf       	rjmp	.-8      	; 0x7da <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     7e2:	80 91 78 00 	lds	r24, 0x0078
     7e6:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     7ea:	10 92 7c 00 	sts	0x007C, r1
     7ee:	23 ea       	ldi	r18, 0xA3	; 163
     7f0:	20 93 7a 00 	sts	0x007A, r18
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     7fa:	78 94       	sei
     7fc:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     802:	08 95       	ret

00000804 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     804:	80 91 4f 01 	lds	r24, 0x014F
     808:	81 11       	cpse	r24, r1
     80a:	1e c0       	rjmp	.+60     	; 0x848 <get_temperature+0x44>
        cli();
     80c:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     80e:	88 ec       	ldi	r24, 0xC8	; 200
     810:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     814:	87 e8       	ldi	r24, 0x87	; 135
     816:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     81a:	80 91 7a 00 	lds	r24, 0x007A
     81e:	80 64       	ori	r24, 0x40	; 64
     820:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     824:	80 91 7a 00 	lds	r24, 0x007A
     828:	86 fd       	sbrc	r24, 6
     82a:	fc cf       	rjmp	.-8      	; 0x824 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     82c:	80 91 78 00 	lds	r24, 0x0078
     830:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     834:	10 92 7c 00 	sts	0x007C, r1
     838:	23 ea       	ldi	r18, 0xA3	; 163
     83a:	20 93 7a 00 	sts	0x007A, r18
     83e:	21 e0       	ldi	r18, 0x01	; 1
     840:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     844:	78 94       	sei
     846:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     84c:	08 95       	ret

0000084e <rand_hard>:

uint8_t rand_hard() {
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	e0 e0       	ldi	r30, 0x00	; 0
     858:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     85a:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     85c:	03 ea       	ldi	r16, 0xA3	; 163
     85e:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     860:	d6 e0       	ldi	r29, 0x06	; 6
     862:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     864:	a1 e0       	ldi	r26, 0x01	; 1
     866:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     868:	60 e8       	ldi	r22, 0x80	; 128
     86a:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     86c:	f8 94       	cli
            adc_setup_conversion(6);
     86e:	d0 93 7c 00 	sts	0x007C, r29
     872:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     876:	90 91 7a 00 	lds	r25, 0x007A
     87a:	90 64       	ori	r25, 0x40	; 64
     87c:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     880:	90 91 7a 00 	lds	r25, 0x007A
     884:	96 fd       	sbrc	r25, 6
     886:	fc cf       	rjmp	.-8      	; 0x880 <rand_hard+0x32>
            a = ADCW&0x1;
     888:	20 91 78 00 	lds	r18, 0x0078
     88c:	30 91 79 00 	lds	r19, 0x0079
     890:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     892:	90 91 7a 00 	lds	r25, 0x007A
     896:	90 64       	ori	r25, 0x40	; 64
     898:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     89c:	90 91 7a 00 	lds	r25, 0x007A
     8a0:	96 fd       	sbrc	r25, 6
     8a2:	fc cf       	rjmp	.-8      	; 0x89c <rand_hard+0x4e>
            b = ADCW&0x1;
     8a4:	40 91 78 00 	lds	r20, 0x0078
     8a8:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     8ac:	10 92 7c 00 	sts	0x007C, r1
     8b0:	00 93 7a 00 	sts	0x007A, r16
     8b4:	10 93 7b 00 	sts	0x007B, r17
            sei();
     8b8:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     8ba:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     8bc:	24 13       	cpse	r18, r20
     8be:	03 c0       	rjmp	.+6      	; 0x8c6 <rand_hard+0x78>
     8c0:	61 50       	subi	r22, 0x01	; 1
     8c2:	71 09       	sbc	r23, r1
     8c4:	99 f6       	brne	.-90     	; 0x86c <rand_hard+0x1e>
        if (a)
     8c6:	22 23       	and	r18, r18
     8c8:	39 f0       	breq	.+14     	; 0x8d8 <rand_hard+0x8a>
            num |= (1<<i);
     8ca:	9d 01       	movw	r18, r26
     8cc:	0e 2e       	mov	r0, r30
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <rand_hard+0x84>
     8d0:	22 0f       	add	r18, r18
     8d2:	0a 94       	dec	r0
     8d4:	ea f7       	brpl	.-6      	; 0x8d0 <rand_hard+0x82>
     8d6:	82 2b       	or	r24, r18
     8d8:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     8da:	e8 30       	cpi	r30, 0x08	; 8
     8dc:	f1 05       	cpc	r31, r1
     8de:	09 f0       	breq	.+2      	; 0x8e2 <rand_hard+0x94>
     8e0:	c3 cf       	rjmp	.-122    	; 0x868 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     8ec:	80 91 0e 01 	lds	r24, 0x010E
     8f0:	98 2f       	mov	r25, r24
     8f2:	99 0f       	add	r25, r25
     8f4:	99 0f       	add	r25, r25
     8f6:	99 0f       	add	r25, r25
     8f8:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     8fa:	90 91 20 01 	lds	r25, 0x0120
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	29 0f       	add	r18, r25
     902:	20 93 20 01 	sts	0x0120, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     906:	28 2f       	mov	r18, r24
     908:	22 95       	swap	r18
     90a:	26 95       	lsr	r18
     90c:	27 70       	andi	r18, 0x07	; 7
     90e:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     910:	96 95       	lsr	r25
     912:	96 95       	lsr	r25
     914:	89 27       	eor	r24, r25
     916:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     91a:	08 95       	ret

0000091c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     91c:	80 93 0e 01 	sts	0x010E, r24
     920:	08 95       	ret

00000922 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     922:	80 91 4f 01 	lds	r24, 0x014F
     926:	81 11       	cpse	r24, r1
     928:	16 c0       	rjmp	.+44     	; 0x956 <get_voltage+0x34>
        cli();                                    // disable interrupts
     92a:	f8 94       	cli
        adc_setup_conversion(6);
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	80 93 7c 00 	sts	0x007C, r24
     932:	83 e8       	ldi	r24, 0x83	; 131
     934:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     938:	80 91 7a 00 	lds	r24, 0x007A
     93c:	80 64       	ori	r24, 0x40	; 64
     93e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     942:	80 91 7a 00 	lds	r24, 0x007A
     946:	86 fd       	sbrc	r24, 6
     948:	fc cf       	rjmp	.-8      	; 0x942 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     94a:	80 91 78 00 	lds	r24, 0x0078
     94e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     952:	78 94       	sei
     954:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     95a:	08 95       	ret

0000095c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     95c:	2f 92       	push	r2
     95e:	3f 92       	push	r3
     960:	4f 92       	push	r4
     962:	5f 92       	push	r5
     964:	6f 92       	push	r6
     966:	7f 92       	push	r7
     968:	8f 92       	push	r8
     96a:	9f 92       	push	r9
     96c:	af 92       	push	r10
     96e:	bf 92       	push	r11
     970:	cf 92       	push	r12
     972:	df 92       	push	r13
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	00 d0       	rcall	.+0      	; 0x982 <estimate_distance+0x26>
     982:	00 d0       	rcall	.+0      	; 0x984 <estimate_distance+0x28>
     984:	00 d0       	rcall	.+0      	; 0x986 <estimate_distance+0x2a>
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     98c:	dc 01       	movw	r26, r24
     98e:	12 96       	adiw	r26, 0x02	; 2
     990:	0d 90       	ld	r0, X+
     992:	bc 91       	ld	r27, X
     994:	a0 2d       	mov	r26, r0
     996:	be 83       	std	Y+6, r27	; 0x06
     998:	ad 83       	std	Y+5, r26	; 0x05
     99a:	a4 38       	cpi	r26, 0x84	; 132
     99c:	e3 e0       	ldi	r30, 0x03	; 3
     99e:	be 07       	cpc	r27, r30
     9a0:	0c f0       	brlt	.+2      	; 0x9a4 <estimate_distance+0x48>
     9a2:	c9 c0       	rjmp	.+402    	; 0xb36 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     9a4:	80 91 29 01 	lds	r24, 0x0129
     9a8:	90 91 2a 01 	lds	r25, 0x012A
     9ac:	8a 17       	cp	r24, r26
     9ae:	9b 07       	cpc	r25, r27
     9b0:	08 f4       	brcc	.+2      	; 0x9b4 <estimate_distance+0x58>
     9b2:	37 c1       	rjmp	.+622    	; 0xc22 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     9b4:	00 91 2b 01 	lds	r16, 0x012B
     9b8:	10 91 2c 01 	lds	r17, 0x012C
     9bc:	0a 17       	cp	r16, r26
     9be:	1b 07       	cpc	r17, r27
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <estimate_distance+0x68>
     9c2:	2f c2       	rjmp	.+1118   	; 0xe22 <estimate_distance+0x4c6>
     9c4:	00 91 2d 01 	lds	r16, 0x012D
     9c8:	10 91 2e 01 	lds	r17, 0x012E
     9cc:	0a 17       	cp	r16, r26
     9ce:	1b 07       	cpc	r17, r27
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <estimate_distance+0x78>
     9d2:	2f c2       	rjmp	.+1118   	; 0xe32 <estimate_distance+0x4d6>
     9d4:	00 91 2f 01 	lds	r16, 0x012F
     9d8:	10 91 30 01 	lds	r17, 0x0130
     9dc:	0a 17       	cp	r16, r26
     9de:	1b 07       	cpc	r17, r27
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <estimate_distance+0x88>
     9e2:	2f c2       	rjmp	.+1118   	; 0xe42 <estimate_distance+0x4e6>
     9e4:	00 91 31 01 	lds	r16, 0x0131
     9e8:	10 91 32 01 	lds	r17, 0x0132
     9ec:	0a 17       	cp	r16, r26
     9ee:	1b 07       	cpc	r17, r27
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <estimate_distance+0x98>
     9f2:	2f c2       	rjmp	.+1118   	; 0xe52 <estimate_distance+0x4f6>
     9f4:	00 91 33 01 	lds	r16, 0x0133
     9f8:	10 91 34 01 	lds	r17, 0x0134
     9fc:	0a 17       	cp	r16, r26
     9fe:	1b 07       	cpc	r17, r27
     a00:	08 f4       	brcc	.+2      	; 0xa04 <estimate_distance+0xa8>
     a02:	ef c1       	rjmp	.+990    	; 0xde2 <estimate_distance+0x486>
     a04:	00 91 35 01 	lds	r16, 0x0135
     a08:	10 91 36 01 	lds	r17, 0x0136
     a0c:	0a 17       	cp	r16, r26
     a0e:	1b 07       	cpc	r17, r27
     a10:	08 f4       	brcc	.+2      	; 0xa14 <estimate_distance+0xb8>
     a12:	27 c2       	rjmp	.+1102   	; 0xe62 <estimate_distance+0x506>
     a14:	00 91 37 01 	lds	r16, 0x0137
     a18:	10 91 38 01 	lds	r17, 0x0138
     a1c:	0a 17       	cp	r16, r26
     a1e:	1b 07       	cpc	r17, r27
     a20:	08 f4       	brcc	.+2      	; 0xa24 <estimate_distance+0xc8>
     a22:	27 c2       	rjmp	.+1102   	; 0xe72 <estimate_distance+0x516>
     a24:	00 91 39 01 	lds	r16, 0x0139
     a28:	10 91 3a 01 	lds	r17, 0x013A
     a2c:	0a 17       	cp	r16, r26
     a2e:	1b 07       	cpc	r17, r27
     a30:	08 f4       	brcc	.+2      	; 0xa34 <estimate_distance+0xd8>
     a32:	27 c2       	rjmp	.+1102   	; 0xe82 <estimate_distance+0x526>
     a34:	00 91 3b 01 	lds	r16, 0x013B
     a38:	10 91 3c 01 	lds	r17, 0x013C
     a3c:	0a 17       	cp	r16, r26
     a3e:	1b 07       	cpc	r17, r27
     a40:	08 f4       	brcc	.+2      	; 0xa44 <estimate_distance+0xe8>
     a42:	27 c2       	rjmp	.+1102   	; 0xe92 <estimate_distance+0x536>
     a44:	00 91 3d 01 	lds	r16, 0x013D
     a48:	10 91 3e 01 	lds	r17, 0x013E
     a4c:	0a 17       	cp	r16, r26
     a4e:	1b 07       	cpc	r17, r27
     a50:	08 f4       	brcc	.+2      	; 0xa54 <estimate_distance+0xf8>
     a52:	27 c2       	rjmp	.+1102   	; 0xea2 <estimate_distance+0x546>
     a54:	00 91 3f 01 	lds	r16, 0x013F
     a58:	10 91 40 01 	lds	r17, 0x0140
     a5c:	0a 17       	cp	r16, r26
     a5e:	1b 07       	cpc	r17, r27
     a60:	08 f4       	brcc	.+2      	; 0xa64 <estimate_distance+0x108>
     a62:	23 c2       	rjmp	.+1094   	; 0xeaa <estimate_distance+0x54e>
     a64:	00 91 41 01 	lds	r16, 0x0141
     a68:	10 91 42 01 	lds	r17, 0x0142
     a6c:	0a 17       	cp	r16, r26
     a6e:	1b 07       	cpc	r17, r27
     a70:	08 f4       	brcc	.+2      	; 0xa74 <estimate_distance+0x118>
     a72:	23 c2       	rjmp	.+1094   	; 0xeba <estimate_distance+0x55e>
     a74:	00 91 43 01 	lds	r16, 0x0143
     a78:	10 91 44 01 	lds	r17, 0x0144
     a7c:	0a 17       	cp	r16, r26
     a7e:	1b 07       	cpc	r17, r27
     a80:	08 f4       	brcc	.+2      	; 0xa84 <estimate_distance+0x128>
     a82:	23 c2       	rjmp	.+1094   	; 0xeca <estimate_distance+0x56e>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	a0 ed       	ldi	r26, 0xD0	; 208
     a8a:	b0 e4       	ldi	r27, 0x40	; 64
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	9a 83       	std	Y+2, r25	; 0x02
     a90:	ab 83       	std	Y+3, r26	; 0x03
     a92:	bc 83       	std	Y+4, r27	; 0x04
     a94:	4c e0       	ldi	r20, 0x0C	; 12
     a96:	e4 2e       	mov	r14, r20
     a98:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     a9a:	f7 01       	movw	r30, r14
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	e7 5d       	subi	r30, 0xD7	; 215
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	b8 01       	movw	r22, r16
     aaa:	68 1b       	sub	r22, r24
     aac:	79 0b       	sbc	r23, r25
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     ab6:	9b 01       	movw	r18, r22
     ab8:	ac 01       	movw	r20, r24
     aba:	0e 94 29 0b 	call	0x1652	; 0x1652 <__addsf3>
     abe:	6b 01       	movw	r12, r22
     ac0:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     ac2:	ad 81       	ldd	r26, Y+5	; 0x05
     ac4:	be 81       	ldd	r27, Y+6	; 0x06
     ac6:	bd 01       	movw	r22, r26
     ac8:	bb 0f       	add	r27, r27
     aca:	88 0b       	sbc	r24, r24
     acc:	99 0b       	sbc	r25, r25
     ace:	0e 94 3f 0c 	call	0x187e	; 0x187e <__floatsisf>
     ad2:	4b 01       	movw	r8, r22
     ad4:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     ad6:	b8 01       	movw	r22, r16
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     ae0:	2b 01       	movw	r4, r22
     ae2:	3c 01       	movw	r6, r24
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	3a 81       	ldd	r19, Y+2	; 0x02
     ae8:	4b 81       	ldd	r20, Y+3	; 0x03
     aea:	5c 81       	ldd	r21, Y+4	; 0x04
     aec:	c7 01       	movw	r24, r14
     aee:	b6 01       	movw	r22, r12
     af0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	c3 01       	movw	r24, r6
     afa:	b2 01       	movw	r22, r4
     afc:	0e 94 28 0b 	call	0x1650	; 0x1650 <__subsf3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b04:	c5 01       	movw	r24, r10
     b06:	b4 01       	movw	r22, r8
     b08:	0e 94 28 0b 	call	0x1650	; 0x1650 <__subsf3>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e2       	ldi	r20, 0x20	; 32
     b12:	51 e4       	ldi	r21, 0x41	; 65
     b14:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
            b=((int)((int)b/(int)slope));
     b18:	0e 94 07 0c 	call	0x180e	; 0x180e <__fixsfsi>
     b1c:	8b 01       	movw	r16, r22
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	0e 94 07 0c 	call	0x180e	; 0x180e <__fixsfsi>
     b26:	ab 01       	movw	r20, r22
     b28:	bc 01       	movw	r22, r24
     b2a:	c8 01       	movw	r24, r16
     b2c:	ba 01       	movw	r22, r20
     b2e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__divmodhi4>
            dist_high=b;
     b32:	16 2f       	mov	r17, r22
     b34:	77 c0       	rjmp	.+238    	; 0xc24 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b36:	dc 01       	movw	r26, r24
     b38:	cd 90       	ld	r12, X+
     b3a:	dc 90       	ld	r13, X
     b3c:	80 91 50 01 	lds	r24, 0x0150
     b40:	90 91 51 01 	lds	r25, 0x0151
     b44:	8c 15       	cp	r24, r12
     b46:	9d 05       	cpc	r25, r13
     b48:	08 f4       	brcc	.+2      	; 0xb4c <estimate_distance+0x1f0>
     b4a:	8c c0       	rjmp	.+280    	; 0xc64 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b4c:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b4e:	e0 90 52 01 	lds	r14, 0x0152
     b52:	f0 90 53 01 	lds	r15, 0x0153
     b56:	ec 14       	cp	r14, r12
     b58:	fd 04       	cpc	r15, r13
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <estimate_distance+0x202>
     b5c:	5e c1       	rjmp	.+700    	; 0xe1a <estimate_distance+0x4be>
     b5e:	e0 90 54 01 	lds	r14, 0x0154
     b62:	f0 90 55 01 	lds	r15, 0x0155
     b66:	ec 14       	cp	r14, r12
     b68:	fd 04       	cpc	r15, r13
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <estimate_distance+0x212>
     b6c:	5e c1       	rjmp	.+700    	; 0xe2a <estimate_distance+0x4ce>
     b6e:	e0 90 56 01 	lds	r14, 0x0156
     b72:	f0 90 57 01 	lds	r15, 0x0157
     b76:	ec 14       	cp	r14, r12
     b78:	fd 04       	cpc	r15, r13
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <estimate_distance+0x222>
     b7c:	5e c1       	rjmp	.+700    	; 0xe3a <estimate_distance+0x4de>
     b7e:	e0 90 58 01 	lds	r14, 0x0158
     b82:	f0 90 59 01 	lds	r15, 0x0159
     b86:	ec 14       	cp	r14, r12
     b88:	fd 04       	cpc	r15, r13
     b8a:	08 f4       	brcc	.+2      	; 0xb8e <estimate_distance+0x232>
     b8c:	5e c1       	rjmp	.+700    	; 0xe4a <estimate_distance+0x4ee>
     b8e:	e0 90 5a 01 	lds	r14, 0x015A
     b92:	f0 90 5b 01 	lds	r15, 0x015B
     b96:	ec 14       	cp	r14, r12
     b98:	fd 04       	cpc	r15, r13
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <estimate_distance+0x242>
     b9c:	c3 c0       	rjmp	.+390    	; 0xd24 <estimate_distance+0x3c8>
     b9e:	e0 90 5c 01 	lds	r14, 0x015C
     ba2:	f0 90 5d 01 	lds	r15, 0x015D
     ba6:	ec 14       	cp	r14, r12
     ba8:	fd 04       	cpc	r15, r13
     baa:	08 f4       	brcc	.+2      	; 0xbae <estimate_distance+0x252>
     bac:	56 c1       	rjmp	.+684    	; 0xe5a <estimate_distance+0x4fe>
     bae:	e0 90 5e 01 	lds	r14, 0x015E
     bb2:	f0 90 5f 01 	lds	r15, 0x015F
     bb6:	ec 14       	cp	r14, r12
     bb8:	fd 04       	cpc	r15, r13
     bba:	08 f4       	brcc	.+2      	; 0xbbe <estimate_distance+0x262>
     bbc:	56 c1       	rjmp	.+684    	; 0xe6a <estimate_distance+0x50e>
     bbe:	e0 90 60 01 	lds	r14, 0x0160
     bc2:	f0 90 61 01 	lds	r15, 0x0161
     bc6:	ec 14       	cp	r14, r12
     bc8:	fd 04       	cpc	r15, r13
     bca:	08 f4       	brcc	.+2      	; 0xbce <estimate_distance+0x272>
     bcc:	56 c1       	rjmp	.+684    	; 0xe7a <estimate_distance+0x51e>
     bce:	e0 90 62 01 	lds	r14, 0x0162
     bd2:	f0 90 63 01 	lds	r15, 0x0163
     bd6:	ec 14       	cp	r14, r12
     bd8:	fd 04       	cpc	r15, r13
     bda:	08 f4       	brcc	.+2      	; 0xbde <estimate_distance+0x282>
     bdc:	56 c1       	rjmp	.+684    	; 0xe8a <estimate_distance+0x52e>
     bde:	e0 90 64 01 	lds	r14, 0x0164
     be2:	f0 90 65 01 	lds	r15, 0x0165
     be6:	ec 14       	cp	r14, r12
     be8:	fd 04       	cpc	r15, r13
     bea:	08 f4       	brcc	.+2      	; 0xbee <estimate_distance+0x292>
     bec:	56 c1       	rjmp	.+684    	; 0xe9a <estimate_distance+0x53e>
     bee:	e0 90 66 01 	lds	r14, 0x0166
     bf2:	f0 90 67 01 	lds	r15, 0x0167
     bf6:	ec 14       	cp	r14, r12
     bf8:	fd 04       	cpc	r15, r13
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <estimate_distance+0x2a2>
     bfc:	5a c1       	rjmp	.+692    	; 0xeb2 <estimate_distance+0x556>
     bfe:	e0 90 68 01 	lds	r14, 0x0168
     c02:	f0 90 69 01 	lds	r15, 0x0169
     c06:	ec 14       	cp	r14, r12
     c08:	fd 04       	cpc	r15, r13
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <estimate_distance+0x2b2>
     c0c:	5a c1       	rjmp	.+692    	; 0xec2 <estimate_distance+0x566>
     c0e:	e0 90 6a 01 	lds	r14, 0x016A
     c12:	f0 90 6b 01 	lds	r15, 0x016B
     c16:	ec 14       	cp	r14, r12
     c18:	fd 04       	cpc	r15, r13
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <estimate_distance+0x2c2>
     c1c:	5a c1       	rjmp	.+692    	; 0xed2 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     c1e:	0a e5       	ldi	r16, 0x5A	; 90
     c20:	31 c0       	rjmp	.+98     	; 0xc84 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     c22:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     c24:	ed 81       	ldd	r30, Y+5	; 0x05
     c26:	fe 81       	ldd	r31, Y+6	; 0x06
     c28:	ed 3b       	cpi	r30, 0xBD	; 189
     c2a:	f2 40       	sbci	r31, 0x02	; 2
     c2c:	fc f4       	brge	.+62     	; 0xc6c <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c2e:	81 e2       	ldi	r24, 0x21	; 33
     c30:	81 0f       	add	r24, r17
    }
}
     c32:	26 96       	adiw	r28, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	6f 90       	pop	r6
     c5a:	5f 90       	pop	r5
     c5c:	4f 90       	pop	r4
     c5e:	3f 90       	pop	r3
     c60:	2f 90       	pop	r2
     c62:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c64:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     c66:	81 e2       	ldi	r24, 0x21	; 33
     c68:	80 0f       	add	r24, r16
     c6a:	e3 cf       	rjmp	.-58     	; 0xc32 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c6c:	d1 01       	movw	r26, r2
     c6e:	cd 90       	ld	r12, X+
     c70:	dc 90       	ld	r13, X
     c72:	80 91 50 01 	lds	r24, 0x0150
     c76:	90 91 51 01 	lds	r25, 0x0151
     c7a:	8c 15       	cp	r24, r12
     c7c:	9d 05       	cpc	r25, r13
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <estimate_distance+0x326>
     c80:	66 cf       	rjmp	.-308    	; 0xb4e <estimate_distance+0x1f2>
            dist_low=0;
     c82:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     c84:	1f 3f       	cpi	r17, 0xFF	; 255
     c86:	79 f3       	breq	.-34     	; 0xc66 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     c88:	ed 81       	ldd	r30, Y+5	; 0x05
     c8a:	fe 81       	ldd	r31, Y+6	; 0x06
     c8c:	bf 01       	movw	r22, r30
     c8e:	ff 0f       	add	r31, r31
     c90:	88 0b       	sbc	r24, r24
     c92:	99 0b       	sbc	r25, r25
     c94:	0e 94 3f 0c 	call	0x187e	; 0x187e <__floatsisf>
     c98:	6b 01       	movw	r12, r22
     c9a:	7c 01       	movw	r14, r24
     c9c:	61 2f       	mov	r22, r17
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     ca8:	4b 01       	movw	r8, r22
     caa:	5c 01       	movw	r10, r24
     cac:	a7 01       	movw	r20, r14
     cae:	96 01       	movw	r18, r12
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	81 e6       	ldi	r24, 0x61	; 97
     cb6:	94 e4       	ldi	r25, 0x44	; 68
     cb8:	0e 94 28 0b 	call	0x1650	; 0x1650 <__subsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
     cc8:	4b 01       	movw	r8, r22
     cca:	5c 01       	movw	r10, r24
     ccc:	60 2f       	mov	r22, r16
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     cd8:	2b 01       	movw	r4, r22
     cda:	3c 01       	movw	r6, r24
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4f e2       	ldi	r20, 0x2F	; 47
     ce2:	54 e4       	ldi	r21, 0x44	; 68
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	0e 94 28 0b 	call	0x1650	; 0x1650 <__subsf3>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	c3 01       	movw	r24, r6
     cf2:	b2 01       	movw	r22, r4
     cf4:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	c5 01       	movw	r24, r10
     cfe:	b4 01       	movw	r22, r8
     d00:	0e 94 29 0b 	call	0x1652	; 0x1652 <__addsf3>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	48 e4       	ldi	r20, 0x48	; 72
     d0a:	53 e4       	ldi	r21, 0x43	; 67
     d0c:	0e 94 95 0b 	call	0x172a	; 0x172a <__divsf3>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	44 e0       	ldi	r20, 0x04	; 4
     d16:	52 e4       	ldi	r21, 0x42	; 66
     d18:	0e 94 29 0b 	call	0x1652	; 0x1652 <__addsf3>
     d1c:	0e 94 0e 0c 	call	0x181c	; 0x181c <__fixunssfsi>
     d20:	86 2f       	mov	r24, r22
     d22:	87 cf       	rjmp	.-242    	; 0xc32 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d24:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     d26:	85 e0       	ldi	r24, 0x05	; 5
     d28:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	fc 01       	movw	r30, r24
     d30:	e2 5b       	subi	r30, 0xB2	; 178
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	b7 01       	movw	r22, r14
     d3a:	68 1b       	sub	r22, r24
     d3c:	79 0b       	sbc	r23, r25
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	0e 94 29 0b 	call	0x1652	; 0x1652 <__addsf3>
     d4e:	4b 01       	movw	r8, r22
     d50:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d52:	b6 01       	movw	r22, r12
     d54:	dd 0c       	add	r13, r13
     d56:	88 0b       	sbc	r24, r24
     d58:	99 0b       	sbc	r25, r25
     d5a:	0e 94 3f 0c 	call	0x187e	; 0x187e <__floatsisf>
     d5e:	2b 01       	movw	r4, r22
     d60:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     d62:	b7 01       	movw	r22, r14
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     d6c:	6b 01       	movw	r12, r22
     d6e:	7c 01       	movw	r14, r24
     d70:	60 2f       	mov	r22, r16
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	a9 01       	movw	r20, r18
     d8e:	0e 94 29 0b 	call	0x1652	; 0x1652 <__addsf3>
     d92:	a5 01       	movw	r20, r10
     d94:	94 01       	movw	r18, r8
     d96:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	c7 01       	movw	r24, r14
     da0:	b6 01       	movw	r22, r12
     da2:	0e 94 28 0b 	call	0x1650	; 0x1650 <__subsf3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     daa:	c3 01       	movw	r24, r6
     dac:	b2 01       	movw	r22, r4
     dae:	0e 94 28 0b 	call	0x1650	; 0x1650 <__subsf3>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
                b=((int)((int)b/(int)slope));
     dbe:	0e 94 07 0c 	call	0x180e	; 0x180e <__fixsfsi>
     dc2:	7b 01       	movw	r14, r22
     dc4:	c5 01       	movw	r24, r10
     dc6:	b4 01       	movw	r22, r8
     dc8:	0e 94 07 0c 	call	0x180e	; 0x180e <__fixsfsi>
     dcc:	ab 01       	movw	r20, r22
     dce:	bc 01       	movw	r22, r24
     dd0:	c7 01       	movw	r24, r14
     dd2:	ba 01       	movw	r22, r20
     dd4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__divmodhi4>
                dist_low=b;
     dd8:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     dda:	6f 3f       	cpi	r22, 0xFF	; 255
     ddc:	09 f0       	breq	.+2      	; 0xde0 <estimate_distance+0x484>
     dde:	52 cf       	rjmp	.-348    	; 0xc84 <estimate_distance+0x328>
     de0:	26 cf       	rjmp	.-436    	; 0xc2e <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     de2:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	7c 01       	movw	r14, r24
     dea:	f1 e0       	ldi	r31, 0x01	; 1
     dec:	ef 1a       	sub	r14, r31
     dee:	f1 08       	sbc	r15, r1
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	a9 01       	movw	r20, r18
     e0c:	0e 94 29 0b 	call	0x1652	; 0x1652 <__addsf3>
     e10:	69 83       	std	Y+1, r22	; 0x01
     e12:	7a 83       	std	Y+2, r23	; 0x02
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     e18:	40 ce       	rjmp	.-896    	; 0xa9a <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e1a:	01 e0       	ldi	r16, 0x01	; 1
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	84 cf       	rjmp	.-248    	; 0xd2a <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	df cf       	rjmp	.-66     	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e2a:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	7c cf       	rjmp	.-264    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e32:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	d7 cf       	rjmp	.-82     	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e3a:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	74 cf       	rjmp	.-280    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e42:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	cf cf       	rjmp	.-98     	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e4a:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	6c cf       	rjmp	.-296    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e52:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	c7 cf       	rjmp	.-114    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e5a:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     e5c:	86 e0       	ldi	r24, 0x06	; 6
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	64 cf       	rjmp	.-312    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e62:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	bf cf       	rjmp	.-130    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e6a:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     e6c:	87 e0       	ldi	r24, 0x07	; 7
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	5c cf       	rjmp	.-328    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e72:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     e74:	87 e0       	ldi	r24, 0x07	; 7
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	b7 cf       	rjmp	.-146    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e7a:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	54 cf       	rjmp	.-344    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e82:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     e84:	88 e0       	ldi	r24, 0x08	; 8
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	af cf       	rjmp	.-162    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e8a:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     e8c:	89 e0       	ldi	r24, 0x09	; 9
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	4c cf       	rjmp	.-360    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e92:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a7 cf       	rjmp	.-178    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e9a:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	44 cf       	rjmp	.-376    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ea2:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     ea4:	8a e0       	ldi	r24, 0x0A	; 10
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9f cf       	rjmp	.-194    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eaa:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     eac:	8b e0       	ldi	r24, 0x0B	; 11
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	9b cf       	rjmp	.-202    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eb2:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     eb4:	8b e0       	ldi	r24, 0x0B	; 11
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	38 cf       	rjmp	.-400    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eba:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	93 cf       	rjmp	.-218    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ec2:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     ec4:	8c e0       	ldi	r24, 0x0C	; 12
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	30 cf       	rjmp	.-416    	; 0xd2a <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eca:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     ecc:	8d e0       	ldi	r24, 0x0D	; 13
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	8b cf       	rjmp	.-234    	; 0xde8 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ed2:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     ed4:	8d e0       	ldi	r24, 0x0D	; 13
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	28 cf       	rjmp	.-432    	; 0xd2a <estimate_distance+0x3ce>

00000eda <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
    tx_clock += tx_increment;
     efc:	20 91 6f 01 	lds	r18, 0x016F
     f00:	30 91 70 01 	lds	r19, 0x0170
     f04:	80 91 6d 01 	lds	r24, 0x016D
     f08:	90 91 6e 01 	lds	r25, 0x016E
     f0c:	82 0f       	add	r24, r18
     f0e:	93 1f       	adc	r25, r19
     f10:	90 93 70 01 	sts	0x0170, r25
     f14:	80 93 6f 01 	sts	0x016F, r24
    tx_increment = 0xFF;
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	90 93 6e 01 	sts	0x016E, r25
     f20:	80 93 6d 01 	sts	0x016D, r24
    OCR0A = tx_increment;
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f28:	80 91 4b 01 	lds	r24, 0x014B
     f2c:	90 91 4c 01 	lds	r25, 0x014C
     f30:	a0 91 4d 01 	lds	r26, 0x014D
     f34:	b0 91 4e 01 	lds	r27, 0x014E
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	a1 1d       	adc	r26, r1
     f3c:	b1 1d       	adc	r27, r1
     f3e:	80 93 4b 01 	sts	0x014B, r24
     f42:	90 93 4c 01 	sts	0x014C, r25
     f46:	a0 93 4d 01 	sts	0x014D, r26
     f4a:	b0 93 4e 01 	sts	0x014E, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f4e:	80 91 4f 01 	lds	r24, 0x014F
     f52:	81 11       	cpse	r24, r1
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <__vector_14+0x9a>
     f56:	80 91 7e 01 	lds	r24, 0x017E
     f5a:	90 91 7f 01 	lds	r25, 0x017F
     f5e:	20 91 6f 01 	lds	r18, 0x016F
     f62:	30 91 70 01 	lds	r19, 0x0170
     f66:	82 17       	cp	r24, r18
     f68:	93 07       	cpc	r25, r19
     f6a:	20 f4       	brcc	.+8      	; 0xf74 <__vector_14+0x9a>
     f6c:	80 91 23 01 	lds	r24, 0x0123
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	89 f0       	breq	.+34     	; 0xf96 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     f74:	ff 91       	pop	r31
     f76:	ef 91       	pop	r30
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     f96:	e0 91 11 01 	lds	r30, 0x0111
     f9a:	f0 91 12 01 	lds	r31, 0x0112
     f9e:	09 95       	icall
        if (msg) {
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	41 f3       	breq	.-48     	; 0xf74 <__vector_14+0x9a>
            if (message_send(msg)) {
     fa4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <message_send>
     fa8:	81 11       	cpse	r24, r1
     faa:	09 c0       	rjmp	.+18     	; 0xfbe <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     fac:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <rand>
     fb0:	99 27       	eor	r25, r25
     fb2:	90 93 6e 01 	sts	0x016E, r25
     fb6:	80 93 6d 01 	sts	0x016D, r24
                OCR0A = tx_increment;
     fba:	87 bd       	out	0x27, r24	; 39
     fbc:	db cf       	rjmp	.-74     	; 0xf74 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     fbe:	e0 91 0f 01 	lds	r30, 0x010F
     fc2:	f0 91 10 01 	lds	r31, 0x0110
     fc6:	09 95       	icall
                tx_clock = 0;
     fc8:	10 92 70 01 	sts	0x0170, r1
     fcc:	10 92 6f 01 	sts	0x016F, r1
     fd0:	d1 cf       	rjmp	.-94     	; 0xf74 <__vector_14+0x9a>

00000fd2 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     fd2:	80 ff       	sbrs	r24, 0
     fd4:	11 c0       	rjmp	.+34     	; 0xff8 <set_color+0x26>
        DDRD |= (1<<5);
     fd6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     fd8:	81 ff       	sbrs	r24, 1
     fda:	11 c0       	rjmp	.+34     	; 0xffe <set_color+0x2c>
        DDRD |= (1<<4);
     fdc:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     fde:	82 ff       	sbrs	r24, 2
     fe0:	11 c0       	rjmp	.+34     	; 0x1004 <set_color+0x32>
        DDRC |= (1<<3);
     fe2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     fe4:	83 ff       	sbrs	r24, 3
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <set_color+0x38>
        DDRC |= (1<<2);
     fe8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     fea:	84 ff       	sbrs	r24, 4
     fec:	11 c0       	rjmp	.+34     	; 0x1010 <set_color+0x3e>
        DDRC |= (1<<5);
     fee:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     ff0:	85 fd       	sbrc	r24, 5
     ff2:	11 c0       	rjmp	.+34     	; 0x1016 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ff4:	3c 98       	cbi	0x07, 4	; 7
     ff6:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     ff8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     ffa:	81 fd       	sbrc	r24, 1
     ffc:	ef cf       	rjmp	.-34     	; 0xfdc <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     ffe:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1000:	82 fd       	sbrc	r24, 2
    1002:	ef cf       	rjmp	.-34     	; 0xfe2 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1004:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1006:	83 fd       	sbrc	r24, 3
    1008:	ef cf       	rjmp	.-34     	; 0xfe8 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    100a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    100c:	84 fd       	sbrc	r24, 4
    100e:	ef cf       	rjmp	.-34     	; 0xfee <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1010:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1012:	85 ff       	sbrs	r24, 5
    1014:	ef cf       	rjmp	.-34     	; 0xff4 <set_color+0x22>
        DDRC |= (1<<4);
    1016:	3c 9a       	sbi	0x07, 4	; 7
    1018:	08 95       	ret

0000101a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	8f 93       	push	r24
    1026:	9f 93       	push	r25
    rx_timer_off();
    1028:	10 92 81 00 	sts	0x0081, r1
    102c:	10 92 85 00 	sts	0x0085, r1
    1030:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 28 01 	sts	0x0128, r24
    rx_leadingbyte = 1;
    103a:	80 93 6c 01 	sts	0x016C, r24
    rx_busy = 0;
    103e:	10 92 4f 01 	sts	0x014F, r1
    adc_trigger_high_gain();
    1042:	10 92 7c 00 	sts	0x007C, r1
    1046:	93 ea       	ldi	r25, 0xA3	; 163
    1048:	90 93 7a 00 	sts	0x007A, r25
    104c:	80 93 7b 00 	sts	0x007B, r24
}
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1084:	20 91 84 00 	lds	r18, 0x0084
    1088:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	40 93 4f 01 	sts	0x014F, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1092:	80 91 28 01 	lds	r24, 0x0128
    1096:	88 23       	and	r24, r24
    1098:	a9 f1       	breq	.+106    	; 0x1104 <__vector_23+0xa6>
        rx_timer_on();
    109a:	10 92 85 00 	sts	0x0085, r1
    109e:	10 92 84 00 	sts	0x0084, r1
    10a2:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    10a6:	10 92 80 01 	sts	0x0180, r1
        rx_leadingbit = 0;
    10aa:	10 92 28 01 	sts	0x0128, r1
        if (rx_leadingbyte) {
    10ae:	80 91 6c 01 	lds	r24, 0x016C
    10b2:	88 23       	and	r24, r24
    10b4:	a1 f0       	breq	.+40     	; 0x10de <__vector_23+0x80>
            adc_finish_conversion();
    10b6:	80 91 7a 00 	lds	r24, 0x007A
    10ba:	86 fd       	sbrc	r24, 6
    10bc:	fc cf       	rjmp	.-8      	; 0x10b6 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    10be:	80 91 78 00 	lds	r24, 0x0078
    10c2:	90 91 79 00 	lds	r25, 0x0079
    10c6:	90 93 4a 01 	sts	0x014A, r25
    10ca:	80 93 49 01 	sts	0x0149, r24
            adc_trigger_low_gain();
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	80 93 7c 00 	sts	0x007C, r24
    10d4:	93 ea       	ldi	r25, 0xA3	; 163
    10d6:	90 93 7a 00 	sts	0x007A, r25
    10da:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1104:	c9 01       	movw	r24, r18
    1106:	87 58       	subi	r24, 0x87	; 135
    1108:	91 09       	sbc	r25, r1
    110a:	84 37       	cpi	r24, 0x74	; 116
    110c:	99 40       	sbci	r25, 0x09	; 9
    110e:	08 f0       	brcs	.+2      	; 0x1112 <__vector_23+0xb4>
    1110:	52 c0       	rjmp	.+164    	; 0x11b6 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1112:	26 58       	subi	r18, 0x86	; 134
    1114:	31 09       	sbc	r19, r1
    1116:	a4 ef       	ldi	r26, 0xF4	; 244
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	0e 94 05 0b 	call	0x160a	; 0x160a <__umulhisi3>
    111e:	aa 27       	eor	r26, r26
    1120:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1122:	88 30       	cpi	r24, 0x08	; 8
    1124:	91 05       	cpc	r25, r1
    1126:	a1 05       	cpc	r26, r1
    1128:	b1 05       	cpc	r27, r1
    112a:	08 f4       	brcc	.+2      	; 0x112e <__vector_23+0xd0>
    112c:	7b c0       	rjmp	.+246    	; 0x1224 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    112e:	40 93 28 01 	sts	0x0128, r20
                if (rx_leadingbyte) {
    1132:	80 91 6c 01 	lds	r24, 0x016C
    1136:	81 11       	cpse	r24, r1
    1138:	52 c0       	rjmp	.+164    	; 0x11de <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    113a:	80 91 46 01 	lds	r24, 0x0146
    113e:	e8 2f       	mov	r30, r24
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	ee 58       	subi	r30, 0x8E	; 142
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	90 91 80 01 	lds	r25, 0x0180
    114a:	90 83       	st	Z, r25
                    rx_byteindex++;
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	80 93 46 01 	sts	0x0146, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1152:	8c 30       	cpi	r24, 0x0C	; 12
    1154:	21 f6       	brne	.-120    	; 0x10de <__vector_23+0x80>
                        rx_timer_off();
    1156:	10 92 81 00 	sts	0x0081, r1
    115a:	10 92 85 00 	sts	0x0085, r1
    115e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1162:	40 93 6c 01 	sts	0x016C, r20
                        rx_busy = 0;
    1166:	10 92 4f 01 	sts	0x014F, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    116a:	c0 91 7c 01 	lds	r28, 0x017C
    116e:	d0 91 7d 01 	lds	r29, 0x017D
    1172:	82 e7       	ldi	r24, 0x72	; 114
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 39 0a 	call	0x1472	; 0x1472 <message_crc>
    117a:	c8 17       	cp	r28, r24
    117c:	d9 07       	cpc	r29, r25
    117e:	09 f0       	breq	.+2      	; 0x1182 <__vector_23+0x124>
    1180:	ae cf       	rjmp	.-164    	; 0x10de <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1182:	80 91 7b 01 	lds	r24, 0x017B
    1186:	87 ff       	sbrs	r24, 7
    1188:	61 c0       	rjmp	.+194    	; 0x124c <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    118a:	98 e7       	ldi	r25, 0x78	; 120
    118c:	98 0f       	add	r25, r24
    118e:	93 30       	cpi	r25, 0x03	; 3
    1190:	30 f0       	brcs	.+12     	; 0x119e <__vector_23+0x140>
        motors_off();
    1192:	53 98       	cbi	0x0a, 3	; 10
    1194:	23 98       	cbi	0x04, 3	; 4
    1196:	10 92 b4 00 	sts	0x00B4, r1
    119a:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	fc 01       	movw	r30, r24
    11a2:	e0 58       	subi	r30, 0x80	; 128
    11a4:	f1 09       	sbc	r31, r1
    11a6:	eb 30       	cpi	r30, 0x0B	; 11
    11a8:	f1 05       	cpc	r31, r1
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <__vector_23+0x150>
    11ac:	98 cf       	rjmp	.-208    	; 0x10de <__vector_23+0x80>
    11ae:	e5 5c       	subi	r30, 0xC5	; 197
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    11b6:	10 92 81 00 	sts	0x0081, r1
    11ba:	10 92 85 00 	sts	0x0085, r1
    11be:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    11c2:	40 93 28 01 	sts	0x0128, r20
            rx_leadingbyte = 1;
    11c6:	40 93 6c 01 	sts	0x016C, r20
            rx_busy = 0;
    11ca:	10 92 4f 01 	sts	0x014F, r1
            adc_trigger_high_gain();
    11ce:	10 92 7c 00 	sts	0x007C, r1
    11d2:	83 ea       	ldi	r24, 0xA3	; 163
    11d4:	80 93 7a 00 	sts	0x007A, r24
    11d8:	40 93 7b 00 	sts	0x007B, r20
    11dc:	80 cf       	rjmp	.-256    	; 0x10de <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    11de:	80 91 7a 00 	lds	r24, 0x007A
    11e2:	86 fd       	sbrc	r24, 6
    11e4:	fc cf       	rjmp	.-8      	; 0x11de <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    11e6:	80 91 78 00 	lds	r24, 0x0078
    11ea:	90 91 79 00 	lds	r25, 0x0079
    11ee:	90 93 48 01 	sts	0x0148, r25
    11f2:	80 93 47 01 	sts	0x0147, r24
                    adc_trigger_high_gain();
    11f6:	10 92 7c 00 	sts	0x007C, r1
    11fa:	83 ea       	ldi	r24, 0xA3	; 163
    11fc:	80 93 7a 00 	sts	0x007A, r24
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1206:	90 91 80 01 	lds	r25, 0x0180
    120a:	99 23       	and	r25, r25
    120c:	d1 f0       	breq	.+52     	; 0x1242 <__vector_23+0x1e4>
                        rx_timer_off();
    120e:	10 92 81 00 	sts	0x0081, r1
    1212:	10 92 85 00 	sts	0x0085, r1
    1216:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    121a:	80 93 6c 01 	sts	0x016C, r24
                        rx_busy = 0;
    121e:	10 92 4f 01 	sts	0x014F, r1
    1222:	5d cf       	rjmp	.-326    	; 0x10de <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	f9 01       	movw	r30, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <__vector_23+0x1d2>
    122c:	ee 0f       	add	r30, r30
    122e:	ff 1f       	adc	r31, r31
    1230:	8a 95       	dec	r24
    1232:	e2 f7       	brpl	.-8      	; 0x122c <__vector_23+0x1ce>
    1234:	cf 01       	movw	r24, r30
    1236:	90 91 80 01 	lds	r25, 0x0180
    123a:	89 2b       	or	r24, r25
    123c:	80 93 80 01 	sts	0x0180, r24
    1240:	4e cf       	rjmp	.-356    	; 0x10de <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1242:	10 92 6c 01 	sts	0x016C, r1
                        rx_byteindex = 0;
    1246:	10 92 46 01 	sts	0x0146, r1
    124a:	49 cf       	rjmp	.-366    	; 0x10de <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    124c:	e0 91 13 01 	lds	r30, 0x0113
    1250:	f0 91 14 01 	lds	r31, 0x0114
    1254:	67 e4       	ldi	r22, 0x47	; 71
    1256:	71 e0       	ldi	r23, 0x01	; 1
    1258:	82 e7       	ldi	r24, 0x72	; 114
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	09 95       	icall
    125e:	3f cf       	rjmp	.-386    	; 0x10de <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1260:	80 91 72 01 	lds	r24, 0x0172
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	09 f4       	brne	.+2      	; 0x126a <__vector_23+0x20c>
    1268:	dd c0       	rjmp	.+442    	; 0x1424 <__vector_23+0x3c6>
    126a:	08 f4       	brcc	.+2      	; 0x126e <__vector_23+0x210>
    126c:	ba c0       	rjmp	.+372    	; 0x13e2 <__vector_23+0x384>
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	09 f4       	brne	.+2      	; 0x1274 <__vector_23+0x216>
    1272:	c6 c0       	rjmp	.+396    	; 0x1400 <__vector_23+0x3a2>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	09 f0       	breq	.+2      	; 0x127a <__vector_23+0x21c>
    1278:	b1 c0       	rjmp	.+354    	; 0x13dc <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    127a:	80 91 21 01 	lds	r24, 0x0121
    127e:	90 91 78 01 	lds	r25, 0x0178
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	09 f4       	brne	.+2      	; 0x1288 <__vector_23+0x22a>
    1286:	e3 c0       	rjmp	.+454    	; 0x144e <__vector_23+0x3f0>
    1288:	80 91 77 01 	lds	r24, 0x0177
                        prev_motion = MOVE_STOP;
    128c:	10 92 22 01 	sts	0x0122, r1
                        cur_motion = MOVE_STRAIGHT;
    1290:	23 e0       	ldi	r18, 0x03	; 3
    1292:	20 93 21 01 	sts	0x0121, r18
                        kilo_straight_left = calibmsg->straight_left;
    1296:	80 93 83 01 	sts	0x0183, r24
                        kilo_straight_right = calibmsg->straight_right;
    129a:	90 93 84 01 	sts	0x0184, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    129e:	80 91 23 01 	lds	r24, 0x0123
    12a2:	86 30       	cpi	r24, 0x06	; 6
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <__vector_23+0x24a>
    12a6:	1b cf       	rjmp	.-458    	; 0x10de <__vector_23+0x80>
                motors_on();
    12a8:	53 9a       	sbi	0x0a, 3	; 10
    12aa:	23 9a       	sbi	0x04, 3	; 4
    12ac:	10 92 b4 00 	sts	0x00B4, r1
    12b0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    12b4:	86 e0       	ldi	r24, 0x06	; 6
    12b6:	80 93 23 01 	sts	0x0123, r24
    12ba:	11 cf       	rjmp	.-478    	; 0x10de <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    12bc:	80 91 23 01 	lds	r24, 0x0123
    12c0:	86 30       	cpi	r24, 0x06	; 6
    12c2:	99 f0       	breq	.+38     	; 0x12ea <__vector_23+0x28c>
                motors_on();
    12c4:	53 9a       	sbi	0x0a, 3	; 10
    12c6:	23 9a       	sbi	0x04, 3	; 4
    12c8:	10 92 b4 00 	sts	0x00B4, r1
    12cc:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    12d0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    12d2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    12d4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    12d6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    12d8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    12da:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    12dc:	10 92 21 01 	sts	0x0121, r1
    12e0:	10 92 22 01 	sts	0x0122, r1
                kilo_state = MOVING;
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	80 93 23 01 	sts	0x0123, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9c 01       	movw	r18, r24
    12f0:	00 90 72 01 	lds	r0, 0x0172
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <__vector_23+0x29c>
    12f6:	22 0f       	add	r18, r18
    12f8:	33 1f       	adc	r19, r19
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <__vector_23+0x298>
    12fe:	80 91 81 01 	lds	r24, 0x0181
    1302:	90 91 82 01 	lds	r25, 0x0182
    1306:	82 23       	and	r24, r18
    1308:	93 23       	and	r25, r19
    130a:	89 2b       	or	r24, r25
    130c:	09 f0       	breq	.+2      	; 0x1310 <__vector_23+0x2b2>
    130e:	86 c0       	rjmp	.+268    	; 0x141c <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1310:	10 92 21 01 	sts	0x0121, r1
    1314:	e4 ce       	rjmp	.-568    	; 0x10de <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 23 01 	sts	0x0123, r24
    131c:	e0 ce       	rjmp	.-576    	; 0x10de <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    131e:	e0 e0       	ldi	r30, 0x00	; 0
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1324:	80 91 6e 00 	lds	r24, 0x006E
    1328:	8d 7f       	andi	r24, 0xFD	; 253
    132a:	80 93 6e 00 	sts	0x006E, r24
    132e:	16 bc       	out	0x26, r1	; 38
            bootload();
    1330:	e0 e0       	ldi	r30, 0x00	; 0
    1332:	f0 e7       	ldi	r31, 0x70	; 112
    1334:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1336:	10 92 23 01 	sts	0x0123, r1
    133a:	d1 ce       	rjmp	.-606    	; 0x10de <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	80 93 23 01 	sts	0x0123, r24
    1342:	cd ce       	rjmp	.-614    	; 0x10de <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1344:	85 e0       	ldi	r24, 0x05	; 5
    1346:	80 93 23 01 	sts	0x0123, r24
    134a:	c9 ce       	rjmp	.-622    	; 0x10de <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    134c:	80 91 23 01 	lds	r24, 0x0123
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	09 f4       	brne	.+2      	; 0x1356 <__vector_23+0x2f8>
    1354:	c4 ce       	rjmp	.-632    	; 0x10de <__vector_23+0x80>
    1356:	80 91 23 01 	lds	r24, 0x0123
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	09 f4       	brne	.+2      	; 0x1360 <__vector_23+0x302>
    135e:	bf ce       	rjmp	.-642    	; 0x10de <__vector_23+0x80>
                motors_on();
    1360:	53 9a       	sbi	0x0a, 3	; 10
    1362:	23 9a       	sbi	0x04, 3	; 4
    1364:	10 92 b4 00 	sts	0x00B4, r1
    1368:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	80 93 23 01 	sts	0x0123, r24
    1372:	b5 ce       	rjmp	.-662    	; 0x10de <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1374:	80 91 23 01 	lds	r24, 0x0123
    1378:	86 30       	cpi	r24, 0x06	; 6
    137a:	09 f0       	breq	.+2      	; 0x137e <__vector_23+0x320>
    137c:	b0 ce       	rjmp	.-672    	; 0x10de <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    137e:	60 91 81 01 	lds	r22, 0x0181
    1382:	80 eb       	ldi	r24, 0xB0	; 176
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    138a:	60 91 82 01 	lds	r22, 0x0182
    138e:	81 eb       	ldi	r24, 0xB1	; 177
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1396:	60 91 85 01 	lds	r22, 0x0185
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    13a2:	60 91 71 01 	lds	r22, 0x0171
    13a6:	89 e0       	ldi	r24, 0x09	; 9
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    13ae:	60 91 83 01 	lds	r22, 0x0183
    13b2:	8c e0       	ldi	r24, 0x0C	; 12
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    13ba:	60 91 84 01 	lds	r22, 0x0184
    13be:	84 e1       	ldi	r24, 0x14	; 20
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <eeprom_write_byte>
                        motors_off();
    13c6:	53 98       	cbi	0x0a, 3	; 10
    13c8:	23 98       	cbi	0x04, 3	; 4
    13ca:	10 92 b4 00 	sts	0x00B4, r1
    13ce:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 23 01 	sts	0x0123, r24
    13d8:	80 91 72 01 	lds	r24, 0x0172
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13dc:	81 11       	cpse	r24, r1
    13de:	5f cf       	rjmp	.-322    	; 0x129e <__vector_23+0x240>
    13e0:	7e ce       	rjmp	.-772    	; 0x10de <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13e2:	88 23       	and	r24, r24
    13e4:	39 f2       	breq	.-114    	; 0x1374 <__vector_23+0x316>
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	c9 f7       	brne	.-14     	; 0x13dc <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    13ea:	80 91 73 01 	lds	r24, 0x0173
    13ee:	90 91 74 01 	lds	r25, 0x0174
    13f2:	90 93 82 01 	sts	0x0182, r25
    13f6:	80 93 81 01 	sts	0x0181, r24
                    cur_motion = MOVE_STOP;
    13fa:	10 92 21 01 	sts	0x0121, r1
    13fe:	4f cf       	rjmp	.-354    	; 0x129e <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1400:	80 91 21 01 	lds	r24, 0x0121
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	71 f1       	breq	.+92     	; 0x1464 <__vector_23+0x406>
    1408:	80 91 76 01 	lds	r24, 0x0176
                        prev_motion = MOVE_STOP;
    140c:	10 92 22 01 	sts	0x0122, r1
                        cur_motion = MOVE_RIGHT;
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	90 93 21 01 	sts	0x0121, r25
                        kilo_turn_right = calibmsg->turn_right;
    1416:	80 93 71 01 	sts	0x0171, r24
    141a:	41 cf       	rjmp	.-382    	; 0x129e <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 21 01 	sts	0x0121, r24
    1422:	5d ce       	rjmp	.-838    	; 0x10de <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1424:	80 91 21 01 	lds	r24, 0x0121
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	51 f0       	breq	.+20     	; 0x1440 <__vector_23+0x3e2>
    142c:	80 91 75 01 	lds	r24, 0x0175
                        prev_motion = MOVE_STOP;
    1430:	10 92 22 01 	sts	0x0122, r1
                        cur_motion = MOVE_LEFT;
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	90 93 21 01 	sts	0x0121, r25
                        kilo_turn_left = calibmsg->turn_left;
    143a:	80 93 85 01 	sts	0x0185, r24
    143e:	2f cf       	rjmp	.-418    	; 0x129e <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1440:	80 91 75 01 	lds	r24, 0x0175
    1444:	90 91 85 01 	lds	r25, 0x0185
    1448:	89 13       	cpse	r24, r25
    144a:	f2 cf       	rjmp	.-28     	; 0x1430 <__vector_23+0x3d2>
    144c:	28 cf       	rjmp	.-432    	; 0x129e <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    144e:	80 91 84 01 	lds	r24, 0x0184
    1452:	98 13       	cpse	r25, r24
    1454:	19 cf       	rjmp	.-462    	; 0x1288 <__vector_23+0x22a>
    1456:	80 91 77 01 	lds	r24, 0x0177
    145a:	20 91 83 01 	lds	r18, 0x0183
    145e:	82 13       	cpse	r24, r18
    1460:	15 cf       	rjmp	.-470    	; 0x128c <__vector_23+0x22e>
    1462:	1d cf       	rjmp	.-454    	; 0x129e <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1464:	80 91 76 01 	lds	r24, 0x0176
    1468:	90 91 71 01 	lds	r25, 0x0171
    146c:	89 13       	cpse	r24, r25
    146e:	ce cf       	rjmp	.-100    	; 0x140c <__vector_23+0x3ae>
    1470:	16 cf       	rjmp	.-468    	; 0x129e <__vector_23+0x240>

00001472 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1472:	fc 01       	movw	r30, r24
    1474:	ac 01       	movw	r20, r24
    1476:	46 5f       	subi	r20, 0xF6	; 246
    1478:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    147e:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1480:	82 27       	eor	r24, r18
    1482:	08 2e       	mov	r0, r24
    1484:	82 95       	swap	r24
    1486:	80 7f       	andi	r24, 0xF0	; 240
    1488:	80 25       	eor	r24, r0
    148a:	09 2e       	mov	r0, r25
    148c:	98 2f       	mov	r25, r24
    148e:	82 95       	swap	r24
    1490:	8f 70       	andi	r24, 0x0F	; 15
    1492:	08 26       	eor	r0, r24
    1494:	86 95       	lsr	r24
    1496:	98 27       	eor	r25, r24
    1498:	89 27       	eor	r24, r25
    149a:	88 0f       	add	r24, r24
    149c:	88 0f       	add	r24, r24
    149e:	88 0f       	add	r24, r24
    14a0:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    14a2:	e4 17       	cp	r30, r20
    14a4:	f5 07       	cpc	r31, r21
    14a6:	59 f7       	brne	.-42     	; 0x147e <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    14a8:	08 95       	ret

000014aa <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    14aa:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    14ac:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    14ae:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    14b0:	20 91 45 01 	lds	r18, 0x0145
    or tmpreg1, ddrreg
    14b4:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    14b6:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14ba:	30 91 45 01 	lds	r19, 0x0145
    14be:	20 30       	cpi	r18, 0x00	; 0
    14c0:	29 f0       	breq	.+10     	; 0x14cc <message_send+0x22>
    14c2:	00 00       	nop
    14c4:	25 b1       	in	r18, 0x05	; 5
    14c6:	23 2b       	or	r18, r19
    14c8:	25 b9       	out	0x05, r18	; 5
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <message_send+0x2a>
    14cc:	00 00       	nop
    14ce:	00 00       	nop
    14d0:	00 00       	nop
    14d2:	00 c0       	rjmp	.+0      	; 0x14d4 <message_send+0x2a>
    14d4:	00 00       	nop
    14d6:	00 00       	nop
    14d8:	00 00       	nop
    14da:	30 95       	com	r19
    14dc:	25 b1       	in	r18, 0x05	; 5
    14de:	23 23       	and	r18, r19
    14e0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    14e2:	2e ea       	ldi	r18, 0xAE	; 174
    14e4:	2a 95       	dec	r18
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    14e8:	2b ee       	ldi	r18, 0xEB	; 235

000014ea <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    14ea:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    14ec:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    14ee:	0a c0       	rjmp	.+20     	; 0x1504 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14f0:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14f2:	30 91 45 01 	lds	r19, 0x0145
    com tmpreg2
    14f6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14f8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14fa:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14fc:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14fe:	0f be       	out	0x3f, r0	; 63
    return 0
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	08 95       	ret

00001504 <nocollision>:
nocollision:
    nop
    1504:	00 00       	nop
    dec tmpreg1
    1506:	2a 95       	dec	r18
    brne checkcollision
    1508:	81 f7       	brne	.-32     	; 0x14ea <checkcollision>

    ldi tmpreg1, 0x01
    150a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    150c:	30 91 45 01 	lds	r19, 0x0145
    1510:	20 30       	cpi	r18, 0x00	; 0
    1512:	29 f0       	breq	.+10     	; 0x151e <nocollision+0x1a>
    1514:	00 00       	nop
    1516:	25 b1       	in	r18, 0x05	; 5
    1518:	23 2b       	or	r18, r19
    151a:	25 b9       	out	0x05, r18	; 5
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <nocollision+0x22>
    151e:	00 00       	nop
    1520:	00 00       	nop
    1522:	00 00       	nop
    1524:	00 c0       	rjmp	.+0      	; 0x1526 <nocollision+0x22>
    1526:	00 00       	nop
    1528:	00 00       	nop
    152a:	00 00       	nop
    152c:	30 95       	com	r19
    152e:	25 b1       	in	r18, 0x05	; 5
    1530:	23 23       	and	r18, r19
    1532:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1534:	00 00       	nop
    1536:	24 e5       	ldi	r18, 0x54	; 84
    1538:	2a 95       	dec	r18
    153a:	f1 f7       	brne	.-4      	; 0x1538 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    153c:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    153e:	8c e0       	ldi	r24, 0x0C	; 12

00001540 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1540:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1542:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1544:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1546:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1548:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    154a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    154c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    154e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1550:	50 e0       	ldi	r21, 0x00	; 0

00001552 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1552:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1554:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1556:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1558:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    155a:	30 91 45 01 	lds	r19, 0x0145
    155e:	20 30       	cpi	r18, 0x00	; 0
    1560:	29 f0       	breq	.+10     	; 0x156c <sendbit+0x1a>
    1562:	00 00       	nop
    1564:	25 b1       	in	r18, 0x05	; 5
    1566:	23 2b       	or	r18, r19
    1568:	25 b9       	out	0x05, r18	; 5
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <sendbit+0x22>
    156c:	00 00       	nop
    156e:	00 00       	nop
    1570:	00 00       	nop
    1572:	00 c0       	rjmp	.+0      	; 0x1574 <sendbit+0x22>
    1574:	00 00       	nop
    1576:	00 00       	nop
    1578:	00 00       	nop
    157a:	30 95       	com	r19
    157c:	25 b1       	in	r18, 0x05	; 5
    157e:	23 23       	and	r18, r19
    1580:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1582:	00 00       	nop
    1584:	21 e5       	ldi	r18, 0x51	; 81
    1586:	2a 95       	dec	r18
    1588:	f1 f7       	brne	.-4      	; 0x1586 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    158a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    158c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    158e:	9a 95       	dec	r25
    brne sendbit
    1590:	01 f7       	brne	.-64     	; 0x1552 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1592:	8a 95       	dec	r24
    brne sendbyte
    1594:	a9 f6       	brne	.-86     	; 0x1540 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1596:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1598:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    159a:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    159c:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    159e:	30 91 45 01 	lds	r19, 0x0145
    com tmpreg2
    15a2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15a4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15a6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15a8:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15aa:	0f be       	out	0x3f, r0	; 63
    return 1
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	08 95       	ret

000015b0 <main>:
    }
}

int main()
{
    kilo_init();
    15b0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <kilo_init>
    kilo_message_rx = message_rx;
    15b4:	8a e7       	ldi	r24, 0x7A	; 122
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	90 93 14 01 	sts	0x0114, r25
    15bc:	80 93 13 01 	sts	0x0113, r24
    debug_init();
    15c0:	0e 94 15 01 	call	0x22a	; 0x22a <debug_init>
    kilo_start(setup, loop);
    15c4:	63 eb       	ldi	r22, 0xB3	; 179
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	8e e8       	ldi	r24, 0x8E	; 142
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 65 02 	call	0x4ca	; 0x4ca <kilo_start>

    return 0;
}
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	08 95       	ret

000015d6 <__divmodhi4>:
    15d6:	97 fb       	bst	r25, 7
    15d8:	07 2e       	mov	r0, r23
    15da:	16 f4       	brtc	.+4      	; 0x15e0 <__divmodhi4+0xa>
    15dc:	00 94       	com	r0
    15de:	07 d0       	rcall	.+14     	; 0x15ee <__divmodhi4_neg1>
    15e0:	77 fd       	sbrc	r23, 7
    15e2:	09 d0       	rcall	.+18     	; 0x15f6 <__divmodhi4_neg2>
    15e4:	0e 94 14 0b 	call	0x1628	; 0x1628 <__udivmodhi4>
    15e8:	07 fc       	sbrc	r0, 7
    15ea:	05 d0       	rcall	.+10     	; 0x15f6 <__divmodhi4_neg2>
    15ec:	3e f4       	brtc	.+14     	; 0x15fc <__divmodhi4_exit>

000015ee <__divmodhi4_neg1>:
    15ee:	90 95       	com	r25
    15f0:	81 95       	neg	r24
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	08 95       	ret

000015f6 <__divmodhi4_neg2>:
    15f6:	70 95       	com	r23
    15f8:	61 95       	neg	r22
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255

000015fc <__divmodhi4_exit>:
    15fc:	08 95       	ret

000015fe <__tablejump2__>:
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	05 90       	lpm	r0, Z+
    1604:	f4 91       	lpm	r31, Z
    1606:	e0 2d       	mov	r30, r0
    1608:	09 94       	ijmp

0000160a <__umulhisi3>:
    160a:	a2 9f       	mul	r26, r18
    160c:	b0 01       	movw	r22, r0
    160e:	b3 9f       	mul	r27, r19
    1610:	c0 01       	movw	r24, r0
    1612:	a3 9f       	mul	r26, r19
    1614:	70 0d       	add	r23, r0
    1616:	81 1d       	adc	r24, r1
    1618:	11 24       	eor	r1, r1
    161a:	91 1d       	adc	r25, r1
    161c:	b2 9f       	mul	r27, r18
    161e:	70 0d       	add	r23, r0
    1620:	81 1d       	adc	r24, r1
    1622:	11 24       	eor	r1, r1
    1624:	91 1d       	adc	r25, r1
    1626:	08 95       	ret

00001628 <__udivmodhi4>:
    1628:	aa 1b       	sub	r26, r26
    162a:	bb 1b       	sub	r27, r27
    162c:	51 e1       	ldi	r21, 0x11	; 17
    162e:	07 c0       	rjmp	.+14     	; 0x163e <__udivmodhi4_ep>

00001630 <__udivmodhi4_loop>:
    1630:	aa 1f       	adc	r26, r26
    1632:	bb 1f       	adc	r27, r27
    1634:	a6 17       	cp	r26, r22
    1636:	b7 07       	cpc	r27, r23
    1638:	10 f0       	brcs	.+4      	; 0x163e <__udivmodhi4_ep>
    163a:	a6 1b       	sub	r26, r22
    163c:	b7 0b       	sbc	r27, r23

0000163e <__udivmodhi4_ep>:
    163e:	88 1f       	adc	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	5a 95       	dec	r21
    1644:	a9 f7       	brne	.-22     	; 0x1630 <__udivmodhi4_loop>
    1646:	80 95       	com	r24
    1648:	90 95       	com	r25
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	08 95       	ret

00001650 <__subsf3>:
    1650:	50 58       	subi	r21, 0x80	; 128

00001652 <__addsf3>:
    1652:	bb 27       	eor	r27, r27
    1654:	aa 27       	eor	r26, r26
    1656:	0e 94 40 0b 	call	0x1680	; 0x1680 <__addsf3x>
    165a:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_round>
    165e:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fp_pscA>
    1662:	38 f0       	brcs	.+14     	; 0x1672 <__addsf3+0x20>
    1664:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fp_pscB>
    1668:	20 f0       	brcs	.+8      	; 0x1672 <__addsf3+0x20>
    166a:	39 f4       	brne	.+14     	; 0x167a <__addsf3+0x28>
    166c:	9f 3f       	cpi	r25, 0xFF	; 255
    166e:	19 f4       	brne	.+6      	; 0x1676 <__addsf3+0x24>
    1670:	26 f4       	brtc	.+8      	; 0x167a <__addsf3+0x28>
    1672:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__fp_nan>
    1676:	0e f4       	brtc	.+2      	; 0x167a <__addsf3+0x28>
    1678:	e0 95       	com	r30
    167a:	e7 fb       	bst	r30, 7
    167c:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_inf>

00001680 <__addsf3x>:
    1680:	e9 2f       	mov	r30, r25
    1682:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__fp_split3>
    1686:	58 f3       	brcs	.-42     	; 0x165e <__addsf3+0xc>
    1688:	ba 17       	cp	r27, r26
    168a:	62 07       	cpc	r22, r18
    168c:	73 07       	cpc	r23, r19
    168e:	84 07       	cpc	r24, r20
    1690:	95 07       	cpc	r25, r21
    1692:	20 f0       	brcs	.+8      	; 0x169c <__addsf3x+0x1c>
    1694:	79 f4       	brne	.+30     	; 0x16b4 <__addsf3x+0x34>
    1696:	a6 f5       	brtc	.+104    	; 0x1700 <__addsf3x+0x80>
    1698:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__fp_zero>
    169c:	0e f4       	brtc	.+2      	; 0x16a0 <__addsf3x+0x20>
    169e:	e0 95       	com	r30
    16a0:	0b 2e       	mov	r0, r27
    16a2:	ba 2f       	mov	r27, r26
    16a4:	a0 2d       	mov	r26, r0
    16a6:	0b 01       	movw	r0, r22
    16a8:	b9 01       	movw	r22, r18
    16aa:	90 01       	movw	r18, r0
    16ac:	0c 01       	movw	r0, r24
    16ae:	ca 01       	movw	r24, r20
    16b0:	a0 01       	movw	r20, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	ff 27       	eor	r31, r31
    16b6:	59 1b       	sub	r21, r25
    16b8:	99 f0       	breq	.+38     	; 0x16e0 <__addsf3x+0x60>
    16ba:	59 3f       	cpi	r21, 0xF9	; 249
    16bc:	50 f4       	brcc	.+20     	; 0x16d2 <__addsf3x+0x52>
    16be:	50 3e       	cpi	r21, 0xE0	; 224
    16c0:	68 f1       	brcs	.+90     	; 0x171c <__addsf3x+0x9c>
    16c2:	1a 16       	cp	r1, r26
    16c4:	f0 40       	sbci	r31, 0x00	; 0
    16c6:	a2 2f       	mov	r26, r18
    16c8:	23 2f       	mov	r18, r19
    16ca:	34 2f       	mov	r19, r20
    16cc:	44 27       	eor	r20, r20
    16ce:	58 5f       	subi	r21, 0xF8	; 248
    16d0:	f3 cf       	rjmp	.-26     	; 0x16b8 <__addsf3x+0x38>
    16d2:	46 95       	lsr	r20
    16d4:	37 95       	ror	r19
    16d6:	27 95       	ror	r18
    16d8:	a7 95       	ror	r26
    16da:	f0 40       	sbci	r31, 0x00	; 0
    16dc:	53 95       	inc	r21
    16de:	c9 f7       	brne	.-14     	; 0x16d2 <__addsf3x+0x52>
    16e0:	7e f4       	brtc	.+30     	; 0x1700 <__addsf3x+0x80>
    16e2:	1f 16       	cp	r1, r31
    16e4:	ba 0b       	sbc	r27, r26
    16e6:	62 0b       	sbc	r22, r18
    16e8:	73 0b       	sbc	r23, r19
    16ea:	84 0b       	sbc	r24, r20
    16ec:	ba f0       	brmi	.+46     	; 0x171c <__addsf3x+0x9c>
    16ee:	91 50       	subi	r25, 0x01	; 1
    16f0:	a1 f0       	breq	.+40     	; 0x171a <__addsf3x+0x9a>
    16f2:	ff 0f       	add	r31, r31
    16f4:	bb 1f       	adc	r27, r27
    16f6:	66 1f       	adc	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	c2 f7       	brpl	.-16     	; 0x16ee <__addsf3x+0x6e>
    16fe:	0e c0       	rjmp	.+28     	; 0x171c <__addsf3x+0x9c>
    1700:	ba 0f       	add	r27, r26
    1702:	62 1f       	adc	r22, r18
    1704:	73 1f       	adc	r23, r19
    1706:	84 1f       	adc	r24, r20
    1708:	48 f4       	brcc	.+18     	; 0x171c <__addsf3x+0x9c>
    170a:	87 95       	ror	r24
    170c:	77 95       	ror	r23
    170e:	67 95       	ror	r22
    1710:	b7 95       	ror	r27
    1712:	f7 95       	ror	r31
    1714:	9e 3f       	cpi	r25, 0xFE	; 254
    1716:	08 f0       	brcs	.+2      	; 0x171a <__addsf3x+0x9a>
    1718:	b0 cf       	rjmp	.-160    	; 0x167a <__addsf3+0x28>
    171a:	93 95       	inc	r25
    171c:	88 0f       	add	r24, r24
    171e:	08 f0       	brcs	.+2      	; 0x1722 <__addsf3x+0xa2>
    1720:	99 27       	eor	r25, r25
    1722:	ee 0f       	add	r30, r30
    1724:	97 95       	ror	r25
    1726:	87 95       	ror	r24
    1728:	08 95       	ret

0000172a <__divsf3>:
    172a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divsf3x>
    172e:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_round>
    1732:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fp_pscB>
    1736:	58 f0       	brcs	.+22     	; 0x174e <__divsf3+0x24>
    1738:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fp_pscA>
    173c:	40 f0       	brcs	.+16     	; 0x174e <__divsf3+0x24>
    173e:	29 f4       	brne	.+10     	; 0x174a <__divsf3+0x20>
    1740:	5f 3f       	cpi	r21, 0xFF	; 255
    1742:	29 f0       	breq	.+10     	; 0x174e <__divsf3+0x24>
    1744:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_inf>
    1748:	51 11       	cpse	r21, r1
    174a:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_szero>
    174e:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__fp_nan>

00001752 <__divsf3x>:
    1752:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__fp_split3>
    1756:	68 f3       	brcs	.-38     	; 0x1732 <__divsf3+0x8>

00001758 <__divsf3_pse>:
    1758:	99 23       	and	r25, r25
    175a:	b1 f3       	breq	.-20     	; 0x1748 <__divsf3+0x1e>
    175c:	55 23       	and	r21, r21
    175e:	91 f3       	breq	.-28     	; 0x1744 <__divsf3+0x1a>
    1760:	95 1b       	sub	r25, r21
    1762:	55 0b       	sbc	r21, r21
    1764:	bb 27       	eor	r27, r27
    1766:	aa 27       	eor	r26, r26
    1768:	62 17       	cp	r22, r18
    176a:	73 07       	cpc	r23, r19
    176c:	84 07       	cpc	r24, r20
    176e:	38 f0       	brcs	.+14     	; 0x177e <__divsf3_pse+0x26>
    1770:	9f 5f       	subi	r25, 0xFF	; 255
    1772:	5f 4f       	sbci	r21, 0xFF	; 255
    1774:	22 0f       	add	r18, r18
    1776:	33 1f       	adc	r19, r19
    1778:	44 1f       	adc	r20, r20
    177a:	aa 1f       	adc	r26, r26
    177c:	a9 f3       	breq	.-22     	; 0x1768 <__divsf3_pse+0x10>
    177e:	35 d0       	rcall	.+106    	; 0x17ea <__divsf3_pse+0x92>
    1780:	0e 2e       	mov	r0, r30
    1782:	3a f0       	brmi	.+14     	; 0x1792 <__divsf3_pse+0x3a>
    1784:	e0 e8       	ldi	r30, 0x80	; 128
    1786:	32 d0       	rcall	.+100    	; 0x17ec <__divsf3_pse+0x94>
    1788:	91 50       	subi	r25, 0x01	; 1
    178a:	50 40       	sbci	r21, 0x00	; 0
    178c:	e6 95       	lsr	r30
    178e:	00 1c       	adc	r0, r0
    1790:	ca f7       	brpl	.-14     	; 0x1784 <__divsf3_pse+0x2c>
    1792:	2b d0       	rcall	.+86     	; 0x17ea <__divsf3_pse+0x92>
    1794:	fe 2f       	mov	r31, r30
    1796:	29 d0       	rcall	.+82     	; 0x17ea <__divsf3_pse+0x92>
    1798:	66 0f       	add	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	88 1f       	adc	r24, r24
    179e:	bb 1f       	adc	r27, r27
    17a0:	26 17       	cp	r18, r22
    17a2:	37 07       	cpc	r19, r23
    17a4:	48 07       	cpc	r20, r24
    17a6:	ab 07       	cpc	r26, r27
    17a8:	b0 e8       	ldi	r27, 0x80	; 128
    17aa:	09 f0       	breq	.+2      	; 0x17ae <__divsf3_pse+0x56>
    17ac:	bb 0b       	sbc	r27, r27
    17ae:	80 2d       	mov	r24, r0
    17b0:	bf 01       	movw	r22, r30
    17b2:	ff 27       	eor	r31, r31
    17b4:	93 58       	subi	r25, 0x83	; 131
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	3a f0       	brmi	.+14     	; 0x17c8 <__divsf3_pse+0x70>
    17ba:	9e 3f       	cpi	r25, 0xFE	; 254
    17bc:	51 05       	cpc	r21, r1
    17be:	78 f0       	brcs	.+30     	; 0x17de <__divsf3_pse+0x86>
    17c0:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_inf>
    17c4:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_szero>
    17c8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ca:	e4 f3       	brlt	.-8      	; 0x17c4 <__divsf3_pse+0x6c>
    17cc:	98 3e       	cpi	r25, 0xE8	; 232
    17ce:	d4 f3       	brlt	.-12     	; 0x17c4 <__divsf3_pse+0x6c>
    17d0:	86 95       	lsr	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	b7 95       	ror	r27
    17d8:	f7 95       	ror	r31
    17da:	9f 5f       	subi	r25, 0xFF	; 255
    17dc:	c9 f7       	brne	.-14     	; 0x17d0 <__divsf3_pse+0x78>
    17de:	88 0f       	add	r24, r24
    17e0:	91 1d       	adc	r25, r1
    17e2:	96 95       	lsr	r25
    17e4:	87 95       	ror	r24
    17e6:	97 f9       	bld	r25, 7
    17e8:	08 95       	ret
    17ea:	e1 e0       	ldi	r30, 0x01	; 1
    17ec:	66 0f       	add	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	88 1f       	adc	r24, r24
    17f2:	bb 1f       	adc	r27, r27
    17f4:	62 17       	cp	r22, r18
    17f6:	73 07       	cpc	r23, r19
    17f8:	84 07       	cpc	r24, r20
    17fa:	ba 07       	cpc	r27, r26
    17fc:	20 f0       	brcs	.+8      	; 0x1806 <__divsf3_pse+0xae>
    17fe:	62 1b       	sub	r22, r18
    1800:	73 0b       	sbc	r23, r19
    1802:	84 0b       	sbc	r24, r20
    1804:	ba 0b       	sbc	r27, r26
    1806:	ee 1f       	adc	r30, r30
    1808:	88 f7       	brcc	.-30     	; 0x17ec <__divsf3_pse+0x94>
    180a:	e0 95       	com	r30
    180c:	08 95       	ret

0000180e <__fixsfsi>:
    180e:	0e 94 0e 0c 	call	0x181c	; 0x181c <__fixunssfsi>
    1812:	68 94       	set
    1814:	b1 11       	cpse	r27, r1
    1816:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_szero>
    181a:	08 95       	ret

0000181c <__fixunssfsi>:
    181c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__fp_splitA>
    1820:	88 f0       	brcs	.+34     	; 0x1844 <__fixunssfsi+0x28>
    1822:	9f 57       	subi	r25, 0x7F	; 127
    1824:	98 f0       	brcs	.+38     	; 0x184c <__fixunssfsi+0x30>
    1826:	b9 2f       	mov	r27, r25
    1828:	99 27       	eor	r25, r25
    182a:	b7 51       	subi	r27, 0x17	; 23
    182c:	b0 f0       	brcs	.+44     	; 0x185a <__fixunssfsi+0x3e>
    182e:	e1 f0       	breq	.+56     	; 0x1868 <__fixunssfsi+0x4c>
    1830:	66 0f       	add	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	88 1f       	adc	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	1a f0       	brmi	.+6      	; 0x1840 <__fixunssfsi+0x24>
    183a:	ba 95       	dec	r27
    183c:	c9 f7       	brne	.-14     	; 0x1830 <__fixunssfsi+0x14>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <__fixunssfsi+0x4c>
    1840:	b1 30       	cpi	r27, 0x01	; 1
    1842:	91 f0       	breq	.+36     	; 0x1868 <__fixunssfsi+0x4c>
    1844:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_zero>
    1848:	b1 e0       	ldi	r27, 0x01	; 1
    184a:	08 95       	ret
    184c:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__fp_zero>
    1850:	67 2f       	mov	r22, r23
    1852:	78 2f       	mov	r23, r24
    1854:	88 27       	eor	r24, r24
    1856:	b8 5f       	subi	r27, 0xF8	; 248
    1858:	39 f0       	breq	.+14     	; 0x1868 <__fixunssfsi+0x4c>
    185a:	b9 3f       	cpi	r27, 0xF9	; 249
    185c:	cc f3       	brlt	.-14     	; 0x1850 <__fixunssfsi+0x34>
    185e:	86 95       	lsr	r24
    1860:	77 95       	ror	r23
    1862:	67 95       	ror	r22
    1864:	b3 95       	inc	r27
    1866:	d9 f7       	brne	.-10     	; 0x185e <__fixunssfsi+0x42>
    1868:	3e f4       	brtc	.+14     	; 0x1878 <__fixunssfsi+0x5c>
    186a:	90 95       	com	r25
    186c:	80 95       	com	r24
    186e:	70 95       	com	r23
    1870:	61 95       	neg	r22
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8f 4f       	sbci	r24, 0xFF	; 255
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	08 95       	ret

0000187a <__floatunsisf>:
    187a:	e8 94       	clt
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <__floatsisf+0x12>

0000187e <__floatsisf>:
    187e:	97 fb       	bst	r25, 7
    1880:	3e f4       	brtc	.+14     	; 0x1890 <__floatsisf+0x12>
    1882:	90 95       	com	r25
    1884:	80 95       	com	r24
    1886:	70 95       	com	r23
    1888:	61 95       	neg	r22
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	8f 4f       	sbci	r24, 0xFF	; 255
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	99 23       	and	r25, r25
    1892:	a9 f0       	breq	.+42     	; 0x18be <__floatsisf+0x40>
    1894:	f9 2f       	mov	r31, r25
    1896:	96 e9       	ldi	r25, 0x96	; 150
    1898:	bb 27       	eor	r27, r27
    189a:	93 95       	inc	r25
    189c:	f6 95       	lsr	r31
    189e:	87 95       	ror	r24
    18a0:	77 95       	ror	r23
    18a2:	67 95       	ror	r22
    18a4:	b7 95       	ror	r27
    18a6:	f1 11       	cpse	r31, r1
    18a8:	f8 cf       	rjmp	.-16     	; 0x189a <__floatsisf+0x1c>
    18aa:	fa f4       	brpl	.+62     	; 0x18ea <__floatsisf+0x6c>
    18ac:	bb 0f       	add	r27, r27
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <__floatsisf+0x36>
    18b0:	60 ff       	sbrs	r22, 0
    18b2:	1b c0       	rjmp	.+54     	; 0x18ea <__floatsisf+0x6c>
    18b4:	6f 5f       	subi	r22, 0xFF	; 255
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	16 c0       	rjmp	.+44     	; 0x18ea <__floatsisf+0x6c>
    18be:	88 23       	and	r24, r24
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <__floatsisf+0x48>
    18c2:	96 e9       	ldi	r25, 0x96	; 150
    18c4:	11 c0       	rjmp	.+34     	; 0x18e8 <__floatsisf+0x6a>
    18c6:	77 23       	and	r23, r23
    18c8:	21 f0       	breq	.+8      	; 0x18d2 <__floatsisf+0x54>
    18ca:	9e e8       	ldi	r25, 0x8E	; 142
    18cc:	87 2f       	mov	r24, r23
    18ce:	76 2f       	mov	r23, r22
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <__floatsisf+0x5e>
    18d2:	66 23       	and	r22, r22
    18d4:	71 f0       	breq	.+28     	; 0x18f2 <__floatsisf+0x74>
    18d6:	96 e8       	ldi	r25, 0x86	; 134
    18d8:	86 2f       	mov	r24, r22
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	2a f0       	brmi	.+10     	; 0x18ea <__floatsisf+0x6c>
    18e0:	9a 95       	dec	r25
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	da f7       	brpl	.-10     	; 0x18e0 <__floatsisf+0x62>
    18ea:	88 0f       	add	r24, r24
    18ec:	96 95       	lsr	r25
    18ee:	87 95       	ror	r24
    18f0:	97 f9       	bld	r25, 7
    18f2:	08 95       	ret

000018f4 <__fp_inf>:
    18f4:	97 f9       	bld	r25, 7
    18f6:	9f 67       	ori	r25, 0x7F	; 127
    18f8:	80 e8       	ldi	r24, 0x80	; 128
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	08 95       	ret

00001900 <__fp_nan>:
    1900:	9f ef       	ldi	r25, 0xFF	; 255
    1902:	80 ec       	ldi	r24, 0xC0	; 192
    1904:	08 95       	ret

00001906 <__fp_pscA>:
    1906:	00 24       	eor	r0, r0
    1908:	0a 94       	dec	r0
    190a:	16 16       	cp	r1, r22
    190c:	17 06       	cpc	r1, r23
    190e:	18 06       	cpc	r1, r24
    1910:	09 06       	cpc	r0, r25
    1912:	08 95       	ret

00001914 <__fp_pscB>:
    1914:	00 24       	eor	r0, r0
    1916:	0a 94       	dec	r0
    1918:	12 16       	cp	r1, r18
    191a:	13 06       	cpc	r1, r19
    191c:	14 06       	cpc	r1, r20
    191e:	05 06       	cpc	r0, r21
    1920:	08 95       	ret

00001922 <__fp_round>:
    1922:	09 2e       	mov	r0, r25
    1924:	03 94       	inc	r0
    1926:	00 0c       	add	r0, r0
    1928:	11 f4       	brne	.+4      	; 0x192e <__fp_round+0xc>
    192a:	88 23       	and	r24, r24
    192c:	52 f0       	brmi	.+20     	; 0x1942 <__fp_round+0x20>
    192e:	bb 0f       	add	r27, r27
    1930:	40 f4       	brcc	.+16     	; 0x1942 <__fp_round+0x20>
    1932:	bf 2b       	or	r27, r31
    1934:	11 f4       	brne	.+4      	; 0x193a <__fp_round+0x18>
    1936:	60 ff       	sbrs	r22, 0
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <__fp_round+0x20>
    193a:	6f 5f       	subi	r22, 0xFF	; 255
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	8f 4f       	sbci	r24, 0xFF	; 255
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	08 95       	ret

00001944 <__fp_split3>:
    1944:	57 fd       	sbrc	r21, 7
    1946:	90 58       	subi	r25, 0x80	; 128
    1948:	44 0f       	add	r20, r20
    194a:	55 1f       	adc	r21, r21
    194c:	59 f0       	breq	.+22     	; 0x1964 <__fp_splitA+0x10>
    194e:	5f 3f       	cpi	r21, 0xFF	; 255
    1950:	71 f0       	breq	.+28     	; 0x196e <__fp_splitA+0x1a>
    1952:	47 95       	ror	r20

00001954 <__fp_splitA>:
    1954:	88 0f       	add	r24, r24
    1956:	97 fb       	bst	r25, 7
    1958:	99 1f       	adc	r25, r25
    195a:	61 f0       	breq	.+24     	; 0x1974 <__fp_splitA+0x20>
    195c:	9f 3f       	cpi	r25, 0xFF	; 255
    195e:	79 f0       	breq	.+30     	; 0x197e <__fp_splitA+0x2a>
    1960:	87 95       	ror	r24
    1962:	08 95       	ret
    1964:	12 16       	cp	r1, r18
    1966:	13 06       	cpc	r1, r19
    1968:	14 06       	cpc	r1, r20
    196a:	55 1f       	adc	r21, r21
    196c:	f2 cf       	rjmp	.-28     	; 0x1952 <__fp_split3+0xe>
    196e:	46 95       	lsr	r20
    1970:	f1 df       	rcall	.-30     	; 0x1954 <__fp_splitA>
    1972:	08 c0       	rjmp	.+16     	; 0x1984 <__fp_splitA+0x30>
    1974:	16 16       	cp	r1, r22
    1976:	17 06       	cpc	r1, r23
    1978:	18 06       	cpc	r1, r24
    197a:	99 1f       	adc	r25, r25
    197c:	f1 cf       	rjmp	.-30     	; 0x1960 <__fp_splitA+0xc>
    197e:	86 95       	lsr	r24
    1980:	71 05       	cpc	r23, r1
    1982:	61 05       	cpc	r22, r1
    1984:	08 94       	sec
    1986:	08 95       	ret

00001988 <__fp_zero>:
    1988:	e8 94       	clt

0000198a <__fp_szero>:
    198a:	bb 27       	eor	r27, r27
    198c:	66 27       	eor	r22, r22
    198e:	77 27       	eor	r23, r23
    1990:	cb 01       	movw	r24, r22
    1992:	97 f9       	bld	r25, 7
    1994:	08 95       	ret

00001996 <__mulsf3>:
    1996:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3x>
    199a:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_round>
    199e:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fp_pscA>
    19a2:	38 f0       	brcs	.+14     	; 0x19b2 <__mulsf3+0x1c>
    19a4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fp_pscB>
    19a8:	20 f0       	brcs	.+8      	; 0x19b2 <__mulsf3+0x1c>
    19aa:	95 23       	and	r25, r21
    19ac:	11 f0       	breq	.+4      	; 0x19b2 <__mulsf3+0x1c>
    19ae:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_inf>
    19b2:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__fp_nan>
    19b6:	11 24       	eor	r1, r1
    19b8:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_szero>

000019bc <__mulsf3x>:
    19bc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__fp_split3>
    19c0:	70 f3       	brcs	.-36     	; 0x199e <__mulsf3+0x8>

000019c2 <__mulsf3_pse>:
    19c2:	95 9f       	mul	r25, r21
    19c4:	c1 f3       	breq	.-16     	; 0x19b6 <__mulsf3+0x20>
    19c6:	95 0f       	add	r25, r21
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	55 1f       	adc	r21, r21
    19cc:	62 9f       	mul	r22, r18
    19ce:	f0 01       	movw	r30, r0
    19d0:	72 9f       	mul	r23, r18
    19d2:	bb 27       	eor	r27, r27
    19d4:	f0 0d       	add	r31, r0
    19d6:	b1 1d       	adc	r27, r1
    19d8:	63 9f       	mul	r22, r19
    19da:	aa 27       	eor	r26, r26
    19dc:	f0 0d       	add	r31, r0
    19de:	b1 1d       	adc	r27, r1
    19e0:	aa 1f       	adc	r26, r26
    19e2:	64 9f       	mul	r22, r20
    19e4:	66 27       	eor	r22, r22
    19e6:	b0 0d       	add	r27, r0
    19e8:	a1 1d       	adc	r26, r1
    19ea:	66 1f       	adc	r22, r22
    19ec:	82 9f       	mul	r24, r18
    19ee:	22 27       	eor	r18, r18
    19f0:	b0 0d       	add	r27, r0
    19f2:	a1 1d       	adc	r26, r1
    19f4:	62 1f       	adc	r22, r18
    19f6:	73 9f       	mul	r23, r19
    19f8:	b0 0d       	add	r27, r0
    19fa:	a1 1d       	adc	r26, r1
    19fc:	62 1f       	adc	r22, r18
    19fe:	83 9f       	mul	r24, r19
    1a00:	a0 0d       	add	r26, r0
    1a02:	61 1d       	adc	r22, r1
    1a04:	22 1f       	adc	r18, r18
    1a06:	74 9f       	mul	r23, r20
    1a08:	33 27       	eor	r19, r19
    1a0a:	a0 0d       	add	r26, r0
    1a0c:	61 1d       	adc	r22, r1
    1a0e:	23 1f       	adc	r18, r19
    1a10:	84 9f       	mul	r24, r20
    1a12:	60 0d       	add	r22, r0
    1a14:	21 1d       	adc	r18, r1
    1a16:	82 2f       	mov	r24, r18
    1a18:	76 2f       	mov	r23, r22
    1a1a:	6a 2f       	mov	r22, r26
    1a1c:	11 24       	eor	r1, r1
    1a1e:	9f 57       	subi	r25, 0x7F	; 127
    1a20:	50 40       	sbci	r21, 0x00	; 0
    1a22:	9a f0       	brmi	.+38     	; 0x1a4a <__mulsf3_pse+0x88>
    1a24:	f1 f0       	breq	.+60     	; 0x1a62 <__mulsf3_pse+0xa0>
    1a26:	88 23       	and	r24, r24
    1a28:	4a f0       	brmi	.+18     	; 0x1a3c <__mulsf3_pse+0x7a>
    1a2a:	ee 0f       	add	r30, r30
    1a2c:	ff 1f       	adc	r31, r31
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	66 1f       	adc	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	91 50       	subi	r25, 0x01	; 1
    1a38:	50 40       	sbci	r21, 0x00	; 0
    1a3a:	a9 f7       	brne	.-22     	; 0x1a26 <__mulsf3_pse+0x64>
    1a3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a3e:	51 05       	cpc	r21, r1
    1a40:	80 f0       	brcs	.+32     	; 0x1a62 <__mulsf3_pse+0xa0>
    1a42:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__fp_inf>
    1a46:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_szero>
    1a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a4c:	e4 f3       	brlt	.-8      	; 0x1a46 <__mulsf3_pse+0x84>
    1a4e:	98 3e       	cpi	r25, 0xE8	; 232
    1a50:	d4 f3       	brlt	.-12     	; 0x1a46 <__mulsf3_pse+0x84>
    1a52:	86 95       	lsr	r24
    1a54:	77 95       	ror	r23
    1a56:	67 95       	ror	r22
    1a58:	b7 95       	ror	r27
    1a5a:	f7 95       	ror	r31
    1a5c:	e7 95       	ror	r30
    1a5e:	9f 5f       	subi	r25, 0xFF	; 255
    1a60:	c1 f7       	brne	.-16     	; 0x1a52 <__mulsf3_pse+0x90>
    1a62:	fe 2b       	or	r31, r30
    1a64:	88 0f       	add	r24, r24
    1a66:	91 1d       	adc	r25, r1
    1a68:	96 95       	lsr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	97 f9       	bld	r25, 7
    1a6e:	08 95       	ret

00001a70 <do_rand>:
    1a70:	8f 92       	push	r8
    1a72:	9f 92       	push	r9
    1a74:	af 92       	push	r10
    1a76:	bf 92       	push	r11
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
    1a86:	68 81       	ld	r22, Y
    1a88:	79 81       	ldd	r23, Y+1	; 0x01
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	61 15       	cp	r22, r1
    1a90:	71 05       	cpc	r23, r1
    1a92:	81 05       	cpc	r24, r1
    1a94:	91 05       	cpc	r25, r1
    1a96:	21 f4       	brne	.+8      	; 0x1aa0 <do_rand+0x30>
    1a98:	64 e2       	ldi	r22, 0x24	; 36
    1a9a:	79 ed       	ldi	r23, 0xD9	; 217
    1a9c:	8b e5       	ldi	r24, 0x5B	; 91
    1a9e:	97 e0       	ldi	r25, 0x07	; 7
    1aa0:	2d e1       	ldi	r18, 0x1D	; 29
    1aa2:	33 ef       	ldi	r19, 0xF3	; 243
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__divmodsi4>
    1aac:	49 01       	movw	r8, r18
    1aae:	5a 01       	movw	r10, r20
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	a7 ea       	ldi	r26, 0xA7	; 167
    1ab6:	b1 e4       	ldi	r27, 0x41	; 65
    1ab8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__muluhisi3>
    1abc:	6b 01       	movw	r12, r22
    1abe:	7c 01       	movw	r14, r24
    1ac0:	ac ee       	ldi	r26, 0xEC	; 236
    1ac2:	b4 ef       	ldi	r27, 0xF4	; 244
    1ac4:	a5 01       	movw	r20, r10
    1ac6:	94 01       	movw	r18, r8
    1ac8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulohisi3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8c 0d       	add	r24, r12
    1ad2:	9d 1d       	adc	r25, r13
    1ad4:	ae 1d       	adc	r26, r14
    1ad6:	bf 1d       	adc	r27, r15
    1ad8:	b7 ff       	sbrs	r27, 7
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <do_rand+0x72>
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	a1 09       	sbc	r26, r1
    1ae0:	b0 48       	sbci	r27, 0x80	; 128
    1ae2:	88 83       	st	Y, r24
    1ae4:	99 83       	std	Y+1, r25	; 0x01
    1ae6:	aa 83       	std	Y+2, r26	; 0x02
    1ae8:	bb 83       	std	Y+3, r27	; 0x03
    1aea:	9f 77       	andi	r25, 0x7F	; 127
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	bf 90       	pop	r11
    1afa:	af 90       	pop	r10
    1afc:	9f 90       	pop	r9
    1afe:	8f 90       	pop	r8
    1b00:	08 95       	ret

00001b02 <rand_r>:
    1b02:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <do_rand>
    1b06:	08 95       	ret

00001b08 <rand>:
    1b08:	85 e1       	ldi	r24, 0x15	; 21
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <do_rand>
    1b10:	08 95       	ret

00001b12 <srand>:
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	80 93 15 01 	sts	0x0115, r24
    1b1a:	90 93 16 01 	sts	0x0116, r25
    1b1e:	a0 93 17 01 	sts	0x0117, r26
    1b22:	b0 93 18 01 	sts	0x0118, r27
    1b26:	08 95       	ret

00001b28 <eeprom_read_byte>:
    1b28:	f9 99       	sbic	0x1f, 1	; 31
    1b2a:	fe cf       	rjmp	.-4      	; 0x1b28 <eeprom_read_byte>
    1b2c:	92 bd       	out	0x22, r25	; 34
    1b2e:	81 bd       	out	0x21, r24	; 33
    1b30:	f8 9a       	sbi	0x1f, 0	; 31
    1b32:	99 27       	eor	r25, r25
    1b34:	80 b5       	in	r24, 0x20	; 32
    1b36:	08 95       	ret

00001b38 <eeprom_write_byte>:
    1b38:	26 2f       	mov	r18, r22

00001b3a <eeprom_write_r18>:
    1b3a:	f9 99       	sbic	0x1f, 1	; 31
    1b3c:	fe cf       	rjmp	.-4      	; 0x1b3a <eeprom_write_r18>
    1b3e:	1f ba       	out	0x1f, r1	; 31
    1b40:	92 bd       	out	0x22, r25	; 34
    1b42:	81 bd       	out	0x21, r24	; 33
    1b44:	20 bd       	out	0x20, r18	; 32
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	fa 9a       	sbi	0x1f, 2	; 31
    1b4c:	f9 9a       	sbi	0x1f, 1	; 31
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	08 95       	ret

00001b54 <__divmodsi4>:
    1b54:	05 2e       	mov	r0, r21
    1b56:	97 fb       	bst	r25, 7
    1b58:	1e f4       	brtc	.+6      	; 0x1b60 <__divmodsi4+0xc>
    1b5a:	00 94       	com	r0
    1b5c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__negsi2>
    1b60:	57 fd       	sbrc	r21, 7
    1b62:	07 d0       	rcall	.+14     	; 0x1b72 <__divmodsi4_neg2>
    1b64:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__udivmodsi4>
    1b68:	07 fc       	sbrc	r0, 7
    1b6a:	03 d0       	rcall	.+6      	; 0x1b72 <__divmodsi4_neg2>
    1b6c:	4e f4       	brtc	.+18     	; 0x1b80 <__divmodsi4_exit>
    1b6e:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__negsi2>

00001b72 <__divmodsi4_neg2>:
    1b72:	50 95       	com	r21
    1b74:	40 95       	com	r20
    1b76:	30 95       	com	r19
    1b78:	21 95       	neg	r18
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255

00001b80 <__divmodsi4_exit>:
    1b80:	08 95       	ret

00001b82 <__negsi2>:
    1b82:	90 95       	com	r25
    1b84:	80 95       	com	r24
    1b86:	70 95       	com	r23
    1b88:	61 95       	neg	r22
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	08 95       	ret

00001b92 <__muluhisi3>:
    1b92:	0e 94 05 0b 	call	0x160a	; 0x160a <__umulhisi3>
    1b96:	a5 9f       	mul	r26, r21
    1b98:	90 0d       	add	r25, r0
    1b9a:	b4 9f       	mul	r27, r20
    1b9c:	90 0d       	add	r25, r0
    1b9e:	a4 9f       	mul	r26, r20
    1ba0:	80 0d       	add	r24, r0
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	11 24       	eor	r1, r1
    1ba6:	08 95       	ret

00001ba8 <__mulshisi3>:
    1ba8:	b7 ff       	sbrs	r27, 7
    1baa:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__muluhisi3>

00001bae <__mulohisi3>:
    1bae:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__muluhisi3>
    1bb2:	82 1b       	sub	r24, r18
    1bb4:	93 0b       	sbc	r25, r19
    1bb6:	08 95       	ret

00001bb8 <__udivmodsi4>:
    1bb8:	a1 e2       	ldi	r26, 0x21	; 33
    1bba:	1a 2e       	mov	r1, r26
    1bbc:	aa 1b       	sub	r26, r26
    1bbe:	bb 1b       	sub	r27, r27
    1bc0:	fd 01       	movw	r30, r26
    1bc2:	0d c0       	rjmp	.+26     	; 0x1bde <__udivmodsi4_ep>

00001bc4 <__udivmodsi4_loop>:
    1bc4:	aa 1f       	adc	r26, r26
    1bc6:	bb 1f       	adc	r27, r27
    1bc8:	ee 1f       	adc	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	a2 17       	cp	r26, r18
    1bce:	b3 07       	cpc	r27, r19
    1bd0:	e4 07       	cpc	r30, r20
    1bd2:	f5 07       	cpc	r31, r21
    1bd4:	20 f0       	brcs	.+8      	; 0x1bde <__udivmodsi4_ep>
    1bd6:	a2 1b       	sub	r26, r18
    1bd8:	b3 0b       	sbc	r27, r19
    1bda:	e4 0b       	sbc	r30, r20
    1bdc:	f5 0b       	sbc	r31, r21

00001bde <__udivmodsi4_ep>:
    1bde:	66 1f       	adc	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	1a 94       	dec	r1
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <__udivmodsi4_loop>
    1bea:	60 95       	com	r22
    1bec:	70 95       	com	r23
    1bee:	80 95       	com	r24
    1bf0:	90 95       	com	r25
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	bd 01       	movw	r22, r26
    1bf8:	cf 01       	movw	r24, r30
    1bfa:	08 95       	ret

00001bfc <_exit>:
    1bfc:	f8 94       	cli

00001bfe <__stop_program>:
    1bfe:	ff cf       	rjmp	.-2      	; 0x1bfe <__stop_program>
