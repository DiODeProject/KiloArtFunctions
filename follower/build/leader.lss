
build/leader.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0a 03       	fmul	r16, r18
      6a:	86 03       	fmuls	r16, r22
      6c:	de 02       	muls	r29, r30
      6e:	d5 02       	muls	r29, r21
      70:	db 02       	muls	r29, r27
      72:	68 03       	fmul	r22, r16
      74:	5d 03       	fmul	r21, r21
      76:	e8 09       	sbc	r30, r8
      78:	c5 08       	sbc	r12, r5
      7a:	c5 08       	sbc	r12, r5
      7c:	e5 09       	sbc	r30, r5
      7e:	f1 09       	sbc	r31, r1
      80:	e1 09       	sbc	r30, r1
      82:	f8 09       	sbc	r31, r8
      84:	f4 09       	sbc	r31, r4
      86:	fc 09       	sbc	r31, r12
      88:	b4 09       	sbc	r27, r4
      8a:	86 09       	sbc	r24, r6

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 eb       	ldi	r30, 0xB4	; 180
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 38       	cpi	r26, 0x8A	; 138
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 2e 0b 	call	0x165c	; 0x165c <main>
      da:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	8c e1       	ldi	r24, 0x1C	; 28
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_succes>:

void message_tx_succes()
{
    message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 17 01 	sts	0x0117, r25
      f0:	80 93 16 01 	sts	0x0116, r24
      f4:	08 95       	ret

000000f6 <setup>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
      f6:	80 91 10 01 	lds	r24, 0x0110
      fa:	90 91 11 01 	lds	r25, 0x0111
      fe:	02 97       	sbiw	r24, 0x02	; 2
     100:	69 f0       	breq	.+26     	; 0x11c <setup+0x26>
    {
        current_motion = new_motion;
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 11 01 	sts	0x0111, r25
     10a:	80 93 10 01 	sts	0x0110, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     10e:	0e 94 23 04 	call	0x846	; 0x846 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	80 91 89 01 	lds	r24, 0x0189
     118:	0e 94 1e 04 	call	0x83c	; 0x83c <set_motors>
}

void setup()
{
    set_motion(LEFT);
    last_update = kilo_ticks;
     11c:	80 91 4f 01 	lds	r24, 0x014F
     120:	90 91 50 01 	lds	r25, 0x0150
     124:	a0 91 51 01 	lds	r26, 0x0151
     128:	b0 91 52 01 	lds	r27, 0x0152
     12c:	80 93 28 01 	sts	0x0128, r24
     130:	90 93 29 01 	sts	0x0129, r25
     134:	a0 93 2a 01 	sts	0x012A, r26
     138:	b0 93 2b 01 	sts	0x012B, r27
     13c:	08 95       	ret

0000013e <loop>:
}

void loop()
{
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
    // Toggle even/odd message every 64 clock ticks (roughly 2 seconds).
    if (kilo_ticks > last_update + 16)
     146:	40 91 4f 01 	lds	r20, 0x014F
     14a:	50 91 50 01 	lds	r21, 0x0150
     14e:	60 91 51 01 	lds	r22, 0x0151
     152:	70 91 52 01 	lds	r23, 0x0152
     156:	80 91 28 01 	lds	r24, 0x0128
     15a:	90 91 29 01 	lds	r25, 0x0129
     15e:	a0 91 2a 01 	lds	r26, 0x012A
     162:	b0 91 2b 01 	lds	r27, 0x012B
     166:	40 96       	adiw	r24, 0x10	; 16
     168:	a1 1d       	adc	r26, r1
     16a:	b1 1d       	adc	r27, r1
     16c:	84 17       	cp	r24, r20
     16e:	95 07       	cpc	r25, r21
     170:	a6 07       	cpc	r26, r22
     172:	b7 07       	cpc	r27, r23
     174:	08 f4       	brcc	.+2      	; 0x178 <loop+0x3a>
     176:	4a c0       	rjmp	.+148    	; 0x20c <loop+0xce>
        }*/

    }
    
    // Blink the LED magenta whenever a message is sent.
    if (message_sent)
     178:	80 91 16 01 	lds	r24, 0x0116
     17c:	90 91 17 01 	lds	r25, 0x0117
     180:	89 2b       	or	r24, r25
     182:	29 f4       	brne	.+10     	; 0x18e <loop+0x50>
        }
        delay(100);
        set_color(RGB(0, 0, 0));
    }*/
    }
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	08 95       	ret
     18e:	c0 e0       	ldi	r28, 0x00	; 0
     190:	d0 e0       	ldi	r29, 0x00	; 0
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	10 e0       	ldi	r17, 0x00	; 0
    int sum = 0;


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     196:	0e 94 33 04 	call	0x866	; 0x866 <get_ambientlight>
        
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
     19a:	8f 3f       	cpi	r24, 0xFF	; 255
     19c:	2f ef       	ldi	r18, 0xFF	; 255
     19e:	92 07       	cpc	r25, r18
     1a0:	19 f0       	breq	.+6      	; 0x1a8 <loop+0x6a>
        {
            sum = sum + sample;
     1a2:	08 0f       	add	r16, r24
     1a4:	19 1f       	adc	r17, r25
            number_of_samples = number_of_samples + 1;
     1a6:	21 96       	adiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int sum = 0;


    while (number_of_samples < 300)
     1a8:	cc 32       	cpi	r28, 0x2C	; 44
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	d8 07       	cpc	r29, r24
     1ae:	9c f3       	brlt	.-26     	; 0x196 <loop+0x58>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    current_light = sum / number_of_samples;
     1b0:	c8 01       	movw	r24, r16
     1b2:	be 01       	movw	r22, r28
     1b4:	0e 94 45 0b 	call	0x168a	; 0x168a <__divmodhi4>
     1b8:	70 93 0f 01 	sts	0x010F, r23
     1bc:	60 93 0e 01 	sts	0x010E, r22
    
    // Blink the LED magenta whenever a message is sent.
    if (message_sent)
    {
    	sample_light();
        message_sent = 0;
     1c0:	10 92 17 01 	sts	0x0117, r1
     1c4:	10 92 16 01 	sts	0x0116, r1
    message.type = NORMAL;
     1c8:	10 92 25 01 	sts	0x0125, r1
    message.data[0] = (current_light > previous_light);
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	20 91 0c 01 	lds	r18, 0x010C
     1d2:	30 91 0d 01 	lds	r19, 0x010D
     1d6:	26 17       	cp	r18, r22
     1d8:	37 07       	cpc	r19, r23
     1da:	0c f0       	brlt	.+2      	; 0x1de <loop+0xa0>
     1dc:	46 c0       	rjmp	.+140    	; 0x26a <loop+0x12c>
     1de:	80 93 1c 01 	sts	0x011C, r24
    message.crc = message_crc(&message);
     1e2:	8c e1       	ldi	r24, 0x1C	; 28
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 8f 0a 	call	0x151e	; 0x151e <message_crc>
     1ea:	90 93 27 01 	sts	0x0127, r25
     1ee:	80 93 26 01 	sts	0x0126, r24
    previous_light = current_light;
     1f2:	80 91 0e 01 	lds	r24, 0x010E
     1f6:	90 91 0f 01 	lds	r25, 0x010F
     1fa:	90 93 0d 01 	sts	0x010D, r25
     1fe:	80 93 0c 01 	sts	0x010C, r24
        }
        delay(100);
        set_color(RGB(0, 0, 0));
    }*/
    }
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	08 95       	ret
void loop()
{
    // Toggle even/odd message every 64 clock ticks (roughly 2 seconds).
    if (kilo_ticks > last_update + 16)
    {
        last_update = kilo_ticks;
     20c:	80 91 4f 01 	lds	r24, 0x014F
     210:	90 91 50 01 	lds	r25, 0x0150
     214:	a0 91 51 01 	lds	r26, 0x0151
     218:	b0 91 52 01 	lds	r27, 0x0152
     21c:	80 93 28 01 	sts	0x0128, r24
     220:	90 93 29 01 	sts	0x0129, r25
     224:	a0 93 2a 01 	sts	0x012A, r26
     228:	b0 93 2b 01 	sts	0x012B, r27
        
            int random_number = rand_hard();
     22c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <rand_hard>
            int random_direction = (random_number % 4);
     230:	83 70       	andi	r24, 0x03	; 3

            if ((random_direction == 0) || (random_direction == 1))
     232:	82 30       	cpi	r24, 0x02	; 2
     234:	e0 f0       	brcs	.+56     	; 0x26e <loop+0x130>
            {
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
            }
            else if (random_direction == 2)
     236:	82 30       	cpi	r24, 0x02	; 2
     238:	99 f1       	breq	.+102    	; 0x2a0 <loop+0x162>
                set_color(RGB(1, 0, 0));
                set_motion(LEFT);
            }
            else if (random_direction == 3)
            {
                set_color(RGB(0, 0, 1));
     23a:	80 e1       	ldi	r24, 0x10	; 16
     23c:	0e 94 3f 08 	call	0x107e	; 0x107e <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     240:	80 91 10 01 	lds	r24, 0x0110
     244:	90 91 11 01 	lds	r25, 0x0111
     248:	03 97       	sbiw	r24, 0x03	; 3
     24a:	09 f4       	brne	.+2      	; 0x24e <loop+0x110>
     24c:	95 cf       	rjmp	.-214    	; 0x178 <loop+0x3a>
    {
        current_motion = new_motion;
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	90 93 11 01 	sts	0x0111, r25
     256:	80 93 10 01 	sts	0x0110, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     25a:	0e 94 23 04 	call	0x846	; 0x846 <spinup_motors>
            set_motors(0, kilo_turn_right);
     25e:	60 91 75 01 	lds	r22, 0x0175
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	0e 94 1e 04 	call	0x83c	; 0x83c <set_motors>
     268:	87 cf       	rjmp	.-242    	; 0x178 <loop+0x3a>
    if (message_sent)
    {
    	sample_light();
        message_sent = 0;
    message.type = NORMAL;
    message.data[0] = (current_light > previous_light);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	b8 cf       	rjmp	.-144    	; 0x1de <loop+0xa0>
            int random_number = rand_hard();
            int random_direction = (random_number % 4);

            if ((random_direction == 0) || (random_direction == 1))
            {
                set_color(RGB(0, 1, 0));
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	0e 94 3f 08 	call	0x107e	; 0x107e <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     274:	80 91 10 01 	lds	r24, 0x0110
     278:	90 91 11 01 	lds	r25, 0x0111
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	09 f4       	brne	.+2      	; 0x282 <loop+0x144>
     280:	7b cf       	rjmp	.-266    	; 0x178 <loop+0x3a>
    {
        current_motion = new_motion;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	90 93 11 01 	sts	0x0111, r25
     28a:	80 93 10 01 	sts	0x0110, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     28e:	0e 94 23 04 	call	0x846	; 0x846 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     292:	60 91 88 01 	lds	r22, 0x0188
     296:	80 91 87 01 	lds	r24, 0x0187
     29a:	0e 94 1e 04 	call	0x83c	; 0x83c <set_motors>
     29e:	6c cf       	rjmp	.-296    	; 0x178 <loop+0x3a>
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
            }
            else if (random_direction == 2)
            {
                set_color(RGB(1, 0, 0));
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	0e 94 3f 08 	call	0x107e	; 0x107e <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2a6:	80 91 10 01 	lds	r24, 0x0110
     2aa:	90 91 11 01 	lds	r25, 0x0111
     2ae:	02 97       	sbiw	r24, 0x02	; 2
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <loop+0x176>
     2b2:	62 cf       	rjmp	.-316    	; 0x178 <loop+0x3a>
    {
        current_motion = new_motion;
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 11 01 	sts	0x0111, r25
     2bc:	80 93 10 01 	sts	0x0110, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     2c0:	0e 94 23 04 	call	0x846	; 0x846 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	80 91 89 01 	lds	r24, 0x0189
     2ca:	0e 94 1e 04 	call	0x83c	; 0x83c <set_motors>
     2ce:	54 cf       	rjmp	.-344    	; 0x178 <loop+0x3a>

000002d0 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2d0:	20 91 10 01 	lds	r18, 0x0110
     2d4:	30 91 11 01 	lds	r19, 0x0111
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	71 f0       	breq	.+28     	; 0x2fa <set_motion+0x2a>
    {
        current_motion = new_motion;
     2de:	90 93 11 01 	sts	0x0111, r25
     2e2:	80 93 10 01 	sts	0x0110, r24
        
        if (current_motion == STOP)
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	81 f0       	breq	.+32     	; 0x30a <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	91 05       	cpc	r25, r1
     2ee:	89 f0       	breq	.+34     	; 0x312 <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	91 05       	cpc	r25, r1
     2f4:	b1 f0       	breq	.+44     	; 0x322 <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     2f6:	03 97       	sbiw	r24, 0x03	; 3
     2f8:	09 f0       	breq	.+2      	; 0x2fc <set_motion+0x2c>
     2fa:	08 95       	ret
        {
            spinup_motors();
     2fc:	0e 94 23 04 	call	0x846	; 0x846 <spinup_motors>
            set_motors(0, kilo_turn_right);
     300:	60 91 75 01 	lds	r22, 0x0175
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0c 94 1e 04 	jmp	0x83c	; 0x83c <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0c 94 1e 04 	jmp	0x83c	; 0x83c <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     312:	0e 94 23 04 	call	0x846	; 0x846 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     316:	60 91 88 01 	lds	r22, 0x0188
     31a:	80 91 87 01 	lds	r24, 0x0187
     31e:	0c 94 1e 04 	jmp	0x83c	; 0x83c <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     322:	0e 94 23 04 	call	0x846	; 0x846 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	80 91 89 01 	lds	r24, 0x0189
     32c:	0c 94 1e 04 	jmp	0x83c	; 0x83c <set_motors>

00000330 <sample_light>:
    }
}

// Function to sample light.
void sample_light()
{
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int sum = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
void sample_light()
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
     33c:	c0 e0       	ldi	r28, 0x00	; 0
     33e:	d0 e0       	ldi	r29, 0x00	; 0
    int sum = 0;


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     340:	0e 94 33 04 	call	0x866	; 0x866 <get_ambientlight>
        
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
     344:	8f 3f       	cpi	r24, 0xFF	; 255
     346:	2f ef       	ldi	r18, 0xFF	; 255
     348:	92 07       	cpc	r25, r18
     34a:	19 f0       	breq	.+6      	; 0x352 <sample_light+0x22>
        {
            sum = sum + sample;
     34c:	08 0f       	add	r16, r24
     34e:	19 1f       	adc	r17, r25
            number_of_samples = number_of_samples + 1;
     350:	21 96       	adiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int sum = 0;


    while (number_of_samples < 300)
     352:	cc 32       	cpi	r28, 0x2C	; 44
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	d8 07       	cpc	r29, r24
     358:	9c f3       	brlt	.-26     	; 0x340 <sample_light+0x10>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    current_light = sum / number_of_samples;
     35a:	c8 01       	movw	r24, r16
     35c:	be 01       	movw	r22, r28
     35e:	0e 94 45 0b 	call	0x168a	; 0x168a <__divmodhi4>
     362:	70 93 0f 01 	sts	0x010F, r23
     366:	60 93 0e 01 	sts	0x010E, r22
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	08 95       	ret

00000374 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     374:	08 95       	ret

00000376 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	08 95       	ret

0000037c <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     37c:	08 95       	ret

0000037e <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
    cli();
     38c:	f8 94       	cli

    ports_off();
     38e:	14 b8       	out	0x04, r1	; 4
     390:	17 b8       	out	0x07, r1	; 7
     392:	1a b8       	out	0x0a, r1	; 10
     394:	15 b8       	out	0x05, r1	; 5
     396:	18 b8       	out	0x08, r1	; 8
     398:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     39a:	52 9a       	sbi	0x0a, 2	; 10
     39c:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     39e:	14 bc       	out	0x24, r1	; 36
     3a0:	85 e0       	ldi	r24, 0x05	; 5
     3a2:	85 bd       	out	0x25, r24	; 37
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	87 bd       	out	0x27, r24	; 39
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     3ae:	10 92 80 00 	sts	0x0080, r1
     3b2:	10 92 81 00 	sts	0x0081, r1
     3b6:	2f e8       	ldi	r18, 0x8F	; 143
     3b8:	3b e0       	ldi	r19, 0x0B	; 11
     3ba:	30 93 89 00 	sts	0x0089, r19
     3be:	20 93 88 00 	sts	0x0088, r18
     3c2:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     3c6:	53 98       	cbi	0x0a, 3	; 10
     3c8:	23 98       	cbi	0x04, 3	; 4
     3ca:	91 ea       	ldi	r25, 0xA1	; 161
     3cc:	90 93 b0 00 	sts	0x00B0, r25
     3d0:	80 93 b1 00 	sts	0x00B1, r24
     3d4:	10 92 b4 00 	sts	0x00B4, r1
     3d8:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     3dc:	8b e0       	ldi	r24, 0x0B	; 11
     3de:	80 bf       	out	0x30, r24	; 48
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     3e6:	86 e0       	ldi	r24, 0x06	; 6
     3e8:	80 93 7c 00 	sts	0x007C, r24
     3ec:	83 e8       	ldi	r24, 0x83	; 131
     3ee:	80 93 7a 00 	sts	0x007A, r24
     3f2:	80 91 7a 00 	lds	r24, 0x007A
     3f6:	80 64       	ori	r24, 0x40	; 64
     3f8:	80 93 7a 00 	sts	0x007A, r24
     3fc:	80 91 7a 00 	lds	r24, 0x007A
     400:	86 fd       	sbrc	r24, 6
     402:	fc cf       	rjmp	.-8      	; 0x3fc <kilo_init+0x7e>
    adc_trigger_high_gain();
     404:	10 92 7c 00 	sts	0x007C, r1
     408:	83 ea       	ldi	r24, 0xA3	; 163
     40a:	80 93 7a 00 	sts	0x007A, r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
    if (osccal != 0xFF)
     41c:	8f 3f       	cpi	r24, 0xFF	; 255
     41e:	11 f0       	breq	.+4      	; 0x424 <kilo_init+0xa6>
        OSCCAL = osccal;
     420:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     424:	10 92 53 01 	sts	0x0153, r1
    rx_leadingbit = 1;
     428:	c1 e0       	ldi	r28, 0x01	; 1
     42a:	c0 93 2c 01 	sts	0x012C, r28
    rx_leadingbyte = 1;
     42e:	c0 93 70 01 	sts	0x0170, r28
    rx_byteindex = 0;
     432:	10 92 4a 01 	sts	0x014A, r1
    rx_bytevalue = 0;
     436:	10 92 84 01 	sts	0x0184, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     43a:	80 e9       	ldi	r24, 0x90	; 144
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     442:	80 93 49 01 	sts	0x0149, r24
    if (tx_mask & ~TX_MASK_MAX)
     446:	80 91 49 01 	lds	r24, 0x0149
     44a:	88 73       	andi	r24, 0x38	; 56
     44c:	11 f0       	breq	.+4      	; 0x452 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     44e:	c0 93 49 01 	sts	0x0149, r28
    tx_clock = 0;
     452:	10 92 74 01 	sts	0x0174, r1
     456:	10 92 73 01 	sts	0x0173, r1
    tx_increment = 255;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 72 01 	sts	0x0172, r25
     462:	80 93 71 01 	sts	0x0171, r24
    kilo_ticks = 0;
     466:	10 92 4f 01 	sts	0x014F, r1
     46a:	10 92 50 01 	sts	0x0150, r1
     46e:	10 92 51 01 	sts	0x0151, r1
     472:	10 92 52 01 	sts	0x0152, r1
    kilo_state = IDLE;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 1b 01 	sts	0x011B, r24
    kilo_tx_period = 3906;
     47c:	82 e4       	ldi	r24, 0x42	; 66
     47e:	9f e0       	ldi	r25, 0x0F	; 15
     480:	90 93 83 01 	sts	0x0183, r25
     484:	80 93 82 01 	sts	0x0182, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     488:	80 eb       	ldi	r24, 0xB0	; 176
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     490:	c8 2f       	mov	r28, r24
     492:	81 eb       	ldi	r24, 0xB1	; 177
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     49a:	2c 2f       	mov	r18, r28
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	38 2b       	or	r19, r24
     4a0:	30 93 86 01 	sts	0x0186, r19
     4a4:	20 93 85 01 	sts	0x0185, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     4a8:	85 e0       	ldi	r24, 0x05	; 5
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     4b0:	80 93 89 01 	sts	0x0189, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     4b4:	89 e0       	ldi	r24, 0x09	; 9
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     4bc:	80 93 75 01 	sts	0x0175, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     4c0:	8c e0       	ldi	r24, 0x0C	; 12
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     4c8:	80 93 87 01 	sts	0x0187, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     4cc:	84 e1       	ldi	r24, 0x14	; 20
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     4d4:	80 93 88 01 	sts	0x0188, r24
     4d8:	54 e5       	ldi	r21, 0x54	; 84
     4da:	e5 2e       	mov	r14, r21
     4dc:	51 e0       	ldi	r21, 0x01	; 1
     4de:	f5 2e       	mov	r15, r21
     4e0:	0d e2       	ldi	r16, 0x2D	; 45
     4e2:	11 e0       	ldi	r17, 0x01	; 1
     4e4:	c0 e2       	ldi	r28, 0x20	; 32
     4e6:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4e8:	ce 01       	movw	r24, r28
     4ea:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     4ee:	d8 2e       	mov	r13, r24
     4f0:	ce 01       	movw	r24, r28
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     4f8:	2d 2d       	mov	r18, r13
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	32 2f       	mov	r19, r18
     4fe:	22 27       	eor	r18, r18
     500:	28 2b       	or	r18, r24
     502:	f7 01       	movw	r30, r14
     504:	21 93       	st	Z+, r18
     506:	31 93       	st	Z+, r19
     508:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     50a:	ce 01       	movw	r24, r28
     50c:	c0 96       	adiw	r24, 0x30	; 48
     50e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     512:	d8 2e       	mov	r13, r24
     514:	ce 01       	movw	r24, r28
     516:	c1 96       	adiw	r24, 0x31	; 49
     518:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <eeprom_read_byte>
     51c:	2d 2d       	mov	r18, r13
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	32 2f       	mov	r19, r18
     522:	22 27       	eor	r18, r18
     524:	28 2b       	or	r18, r24
     526:	f8 01       	movw	r30, r16
     528:	21 93       	st	Z+, r18
     52a:	31 93       	st	Z+, r19
     52c:	8f 01       	movw	r16, r30
     52e:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     530:	cc 33       	cpi	r28, 0x3C	; 60
     532:	d1 05       	cpc	r29, r1
     534:	c9 f6       	brne	.-78     	; 0x4e8 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     536:	78 94       	sei
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	08 95       	ret

00000548 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	a8 95       	wdr
     55a:	80 91 60 00 	lds	r24, 0x0060
     55e:	88 61       	ori	r24, 0x18	; 24
     560:	80 93 60 00 	sts	0x0060, r24
     564:	10 92 60 00 	sts	0x0060, r1
     568:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     56a:	8f 91       	pop	r24
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     576:	3c 01       	movw	r6, r24
     578:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     57a:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     57c:	99 24       	eor	r9, r9
     57e:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     584:	96 e0       	ldi	r25, 0x06	; 6
     586:	a9 2e       	mov	r10, r25
     588:	23 e8       	ldi	r18, 0x83	; 131
     58a:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     58c:	38 e1       	ldi	r19, 0x18	; 24
     58e:	d3 2e       	mov	r13, r19
     590:	49 e2       	ldi	r20, 0x29	; 41
     592:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     594:	90 91 1b 01 	lds	r25, 0x011B
     598:	e9 2f       	mov	r30, r25
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	e7 30       	cpi	r30, 0x07	; 7
     59e:	f1 05       	cpc	r31, r1
     5a0:	c8 f7       	brcc	.-14     	; 0x594 <kilo_start+0x1e>
     5a2:	ec 5c       	subi	r30, 0xCC	; 204
     5a4:	ff 4f       	sbci	r31, 0xFF	; 255
     5a6:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     5aa:	11 23       	and	r17, r17
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <kilo_start+0x3a>
     5ae:	fc c0       	rjmp	.+504    	; 0x7a8 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5b0:	c0 92 1b 01 	sts	0x011B, r12
     5b4:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     5b6:	fe 01       	movw	r30, r28
     5b8:	09 95       	icall
                break;
     5ba:	ec cf       	rjmp	.-40     	; 0x594 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     5bc:	80 91 53 01 	lds	r24, 0x0153
     5c0:	81 11       	cpse	r24, r1
     5c2:	eb c0       	rjmp	.+470    	; 0x79a <kilo_start+0x224>
        cli();                                    // disable interrupts
     5c4:	f8 94       	cli
        adc_setup_conversion(6);
     5c6:	a0 92 7c 00 	sts	0x007C, r10
     5ca:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     5ce:	80 91 7a 00 	lds	r24, 0x007A
     5d2:	80 64       	ori	r24, 0x40	; 64
     5d4:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     5d8:	90 91 7a 00 	lds	r25, 0x007A
     5dc:	96 fd       	sbrc	r25, 6
     5de:	fc cf       	rjmp	.-8      	; 0x5d8 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     5e0:	80 91 78 00 	lds	r24, 0x0078
     5e4:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5e8:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     5ea:	8b 3a       	cpi	r24, 0xAB	; 171
     5ec:	e2 e0       	ldi	r30, 0x02	; 2
     5ee:	9e 07       	cpc	r25, r30
     5f0:	0c f0       	brlt	.+2      	; 0x5f4 <kilo_start+0x7e>
     5f2:	ed c0       	rjmp	.+474    	; 0x7ce <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     5f4:	89 38       	cpi	r24, 0x89	; 137
     5f6:	f2 e0       	ldi	r31, 0x02	; 2
     5f8:	9f 07       	cpc	r25, r31
     5fa:	0c f0       	brlt	.+2      	; 0x5fe <kilo_start+0x88>
     5fc:	ef c0       	rjmp	.+478    	; 0x7dc <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     5fe:	87 36       	cpi	r24, 0x67	; 103
     600:	92 40       	sbci	r25, 0x02	; 2
     602:	0c f4       	brge	.+2      	; 0x606 <kilo_start+0x90>
     604:	ca c0       	rjmp	.+404    	; 0x79a <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     606:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     608:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     60a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     60c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     60e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     610:	3c 98       	cbi	0x07, 4	; 7
     612:	c0 cf       	rjmp	.-128    	; 0x594 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     614:	f8 94       	cli
                acomp_off();
     616:	80 b7       	in	r24, 0x30	; 48
     618:	87 7f       	andi	r24, 0xF7	; 247
     61a:	80 bf       	out	0x30, r24	; 48
                adc_off();
     61c:	80 91 7a 00 	lds	r24, 0x007A
     620:	8f 77       	andi	r24, 0x7F	; 127
     622:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     626:	14 b8       	out	0x04, r1	; 4
     628:	17 b8       	out	0x07, r1	; 7
     62a:	1a b8       	out	0x0a, r1	; 10
     62c:	15 b8       	out	0x05, r1	; 5
     62e:	18 b8       	out	0x08, r1	; 8
     630:	1b b8       	out	0x0b, r1	; 11
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	a8 95       	wdr
     638:	d0 92 60 00 	sts	0x0060, r13
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     642:	80 91 60 00 	lds	r24, 0x0060
     646:	80 64       	ori	r24, 0x40	; 64
     648:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     64c:	93 b7       	in	r25, 0x33	; 51
     64e:	91 7f       	andi	r25, 0xF1	; 241
     650:	94 60       	ori	r25, 0x04	; 4
     652:	93 bf       	out	0x33, r25	; 51
                cli();
     654:	f8 94       	cli
                sleep_enable();
     656:	83 b7       	in	r24, 0x33	; 51
     658:	81 60       	ori	r24, 0x01	; 1
     65a:	83 bf       	out	0x33, r24	; 51
                sei();
     65c:	78 94       	sei
                sleep_cpu();
     65e:	88 95       	sleep
                sleep_disable();
     660:	83 b7       	in	r24, 0x33	; 51
     662:	8e 7f       	andi	r24, 0xFE	; 254
     664:	83 bf       	out	0x33, r24	; 51
                sei();
     666:	78 94       	sei
                rx_busy = 0;
     668:	10 92 53 01 	sts	0x0153, r1
                ports_on();
     66c:	52 9a       	sbi	0x0a, 2	; 10
     66e:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     670:	80 91 7a 00 	lds	r24, 0x007A
     674:	80 68       	ori	r24, 0x80	; 128
     676:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	87 e5       	ldi	r24, 0x57	; 87
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <kilo_start+0x108>
     682:	00 c0       	rjmp	.+0      	; 0x684 <kilo_start+0x10e>
     684:	00 00       	nop
                _delay_us(300);
                acomp_on();
     686:	80 b7       	in	r24, 0x30	; 48
     688:	88 61       	ori	r24, 0x18	; 24
     68a:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     68c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     68e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     690:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     692:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     694:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     696:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     698:	ef e1       	ldi	r30, 0x1F	; 31
     69a:	fe e4       	ldi	r31, 0x4E	; 78
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <kilo_start+0x126>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <kilo_start+0x12c>
     6a2:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     6a4:	80 91 53 01 	lds	r24, 0x0153
     6a8:	81 11       	cpse	r24, r1
     6aa:	81 c0       	rjmp	.+258    	; 0x7ae <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6ac:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6ae:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6b0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6b2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6b4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6b6:	3c 98       	cbi	0x07, 4	; 7
     6b8:	6d cf       	rjmp	.-294    	; 0x594 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     6ba:	80 91 19 01 	lds	r24, 0x0119
     6be:	81 11       	cpse	r24, r1
     6c0:	41 c0       	rjmp	.+130    	; 0x744 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6c2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6c6:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     6ca:	10 92 1a 01 	sts	0x011A, r1
     6ce:	62 cf       	rjmp	.-316    	; 0x594 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     6d0:	48 99       	sbic	0x09, 0	; 9
     6d2:	ec cf       	rjmp	.-40     	; 0x6ac <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6d4:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6d6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6d8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6da:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6dc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6de:	3c 98       	cbi	0x07, 4	; 7
     6e0:	8f ec       	ldi	r24, 0xCF	; 207
     6e2:	97 e0       	ldi	r25, 0x07	; 7
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <kilo_start+0x16e>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <kilo_start+0x174>
     6ea:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6ec:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6ee:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6f0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6f2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6f4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6f6:	3c 98       	cbi	0x07, 4	; 7
     6f8:	9f ef       	ldi	r25, 0xFF	; 255
     6fa:	e1 ee       	ldi	r30, 0xE1	; 225
     6fc:	f4 e0       	ldi	r31, 0x04	; 4
     6fe:	91 50       	subi	r25, 0x01	; 1
     700:	e0 40       	sbci	r30, 0x00	; 0
     702:	f0 40       	sbci	r31, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <kilo_start+0x188>
     706:	00 c0       	rjmp	.+0      	; 0x708 <kilo_start+0x192>
     708:	00 00       	nop
     70a:	44 cf       	rjmp	.-376    	; 0x594 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     70c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     70e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     710:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     712:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     714:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     716:	3c 98       	cbi	0x07, 4	; 7
     718:	ef ec       	ldi	r30, 0xCF	; 207
     71a:	f7 e0       	ldi	r31, 0x07	; 7
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <kilo_start+0x1a6>
     720:	00 c0       	rjmp	.+0      	; 0x722 <kilo_start+0x1ac>
     722:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     724:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     726:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     728:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     72a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     72c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     72e:	3c 98       	cbi	0x07, 4	; 7
     730:	ff ef       	ldi	r31, 0xFF	; 255
     732:	21 ee       	ldi	r18, 0xE1	; 225
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	f1 50       	subi	r31, 0x01	; 1
     738:	20 40       	sbci	r18, 0x00	; 0
     73a:	80 40       	sbci	r24, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <kilo_start+0x1c0>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <kilo_start+0x1ca>
     740:	00 00       	nop
     742:	28 cf       	rjmp	.-432    	; 0x594 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     744:	90 91 19 01 	lds	r25, 0x0119
     748:	80 91 1a 01 	lds	r24, 0x011A
     74c:	98 17       	cp	r25, r24
     74e:	09 f4       	brne	.+2      	; 0x752 <kilo_start+0x1dc>
     750:	21 cf       	rjmp	.-446    	; 0x594 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     752:	80 91 19 01 	lds	r24, 0x0119
     756:	80 93 1a 01 	sts	0x011A, r24
                        if (cur_motion == MOVE_LEFT) {
     75a:	80 91 19 01 	lds	r24, 0x0119
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	09 f4       	brne	.+2      	; 0x764 <kilo_start+0x1ee>
     762:	50 c0       	rjmp	.+160    	; 0x804 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     764:	80 91 19 01 	lds	r24, 0x0119
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     768:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     76c:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	d9 f1       	breq	.+118    	; 0x7ea <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     774:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     778:	90 92 b4 00 	sts	0x00B4, r9
     77c:	8f e2       	ldi	r24, 0x2F	; 47
     77e:	95 e7       	ldi	r25, 0x75	; 117
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <kilo_start+0x20a>
     784:	00 c0       	rjmp	.+0      	; 0x786 <kilo_start+0x210>
     786:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     788:	80 91 88 01 	lds	r24, 0x0188
     78c:	90 91 87 01 	lds	r25, 0x0187
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     790:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     794:	80 93 b4 00 	sts	0x00B4, r24
     798:	fd ce       	rjmp	.-518    	; 0x594 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     79a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     79c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     79e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7a0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7a4:	3c 98       	cbi	0x07, 4	; 7
     7a6:	f6 ce       	rjmp	.-532    	; 0x594 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     7a8:	f3 01       	movw	r30, r6
     7aa:	09 95       	icall
     7ac:	01 cf       	rjmp	.-510    	; 0x5b0 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7ae:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7b0:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7b2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7b4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7b6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7b8:	3c 98       	cbi	0x07, 4	; 7
     7ba:	ff ef       	ldi	r31, 0xFF	; 255
     7bc:	20 e7       	ldi	r18, 0x70	; 112
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	f1 50       	subi	r31, 0x01	; 1
     7c2:	20 40       	sbci	r18, 0x00	; 0
     7c4:	80 40       	sbci	r24, 0x00	; 0
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <kilo_start+0x24a>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <kilo_start+0x254>
     7ca:	00 00       	nop
     7cc:	6f cf       	rjmp	.-290    	; 0x6ac <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7ce:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7d0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7d2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7d4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7d6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7d8:	3c 98       	cbi	0x07, 4	; 7
     7da:	dc ce       	rjmp	.-584    	; 0x594 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7dc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7de:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     7e4:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     7e6:	3c 9a       	sbi	0x07, 4	; 7
     7e8:	d5 ce       	rjmp	.-598    	; 0x594 <kilo_start+0x1e>
     7ea:	ef e2       	ldi	r30, 0x2F	; 47
     7ec:	f5 e7       	ldi	r31, 0x75	; 117
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <kilo_start+0x278>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <kilo_start+0x27e>
     7f4:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     7f6:	80 91 75 01 	lds	r24, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7fa:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7fe:	80 93 b4 00 	sts	0x00B4, r24
     802:	c8 ce       	rjmp	.-624    	; 0x594 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     804:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     808:	10 92 b4 00 	sts	0x00B4, r1
     80c:	8f e2       	ldi	r24, 0x2F	; 47
     80e:	95 e7       	ldi	r25, 0x75	; 117
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <kilo_start+0x29a>
     814:	00 c0       	rjmp	.+0      	; 0x816 <kilo_start+0x2a0>
     816:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     818:	80 91 89 01 	lds	r24, 0x0189
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     81c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     820:	10 92 b4 00 	sts	0x00B4, r1
     824:	b7 ce       	rjmp	.-658    	; 0x594 <kilo_start+0x1e>

00000826 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     826:	07 c0       	rjmp	.+14     	; 0x836 <delay+0x10>
     828:	ef ec       	ldi	r30, 0xCF	; 207
     82a:	f7 e0       	ldi	r31, 0x07	; 7
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <delay+0x6>
     830:	00 c0       	rjmp	.+0      	; 0x832 <delay+0xc>
     832:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     834:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	b9 f7       	brne	.-18     	; 0x828 <delay+0x2>
     83a:	08 95       	ret

0000083c <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     83c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     840:	60 93 b4 00 	sts	0x00B4, r22
     844:	08 95       	ret

00000846 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     84c:	80 93 b4 00 	sts	0x00B4, r24
     850:	8f e0       	ldi	r24, 0x0F	; 15
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	ef ec       	ldi	r30, 0xCF	; 207
     856:	f7 e0       	ldi	r31, 0x07	; 7
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <spinup_motors+0x12>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <spinup_motors+0x18>
     85e:	00 00       	nop
     860:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     862:	c1 f7       	brne	.-16     	; 0x854 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     864:	08 95       	ret

00000866 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     866:	80 91 53 01 	lds	r24, 0x0153
     86a:	81 11       	cpse	r24, r1
     86c:	1e c0       	rjmp	.+60     	; 0x8aa <get_ambientlight+0x44>
        cli();
     86e:	f8 94       	cli
        adc_setup_conversion(7);
     870:	87 e0       	ldi	r24, 0x07	; 7
     872:	80 93 7c 00 	sts	0x007C, r24
     876:	83 e8       	ldi	r24, 0x83	; 131
     878:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     87c:	80 91 7a 00 	lds	r24, 0x007A
     880:	80 64       	ori	r24, 0x40	; 64
     882:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     886:	80 91 7a 00 	lds	r24, 0x007A
     88a:	86 fd       	sbrc	r24, 6
     88c:	fc cf       	rjmp	.-8      	; 0x886 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     88e:	80 91 78 00 	lds	r24, 0x0078
     892:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     896:	10 92 7c 00 	sts	0x007C, r1
     89a:	23 ea       	ldi	r18, 0xA3	; 163
     89c:	20 93 7a 00 	sts	0x007A, r18
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8a6:	78 94       	sei
     8a8:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     8ae:	08 95       	ret

000008b0 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     8b0:	80 91 53 01 	lds	r24, 0x0153
     8b4:	81 11       	cpse	r24, r1
     8b6:	1e c0       	rjmp	.+60     	; 0x8f4 <get_temperature+0x44>
        cli();
     8b8:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     8ba:	88 ec       	ldi	r24, 0xC8	; 200
     8bc:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     8c0:	87 e8       	ldi	r24, 0x87	; 135
     8c2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8c6:	80 91 7a 00 	lds	r24, 0x007A
     8ca:	80 64       	ori	r24, 0x40	; 64
     8cc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8d0:	80 91 7a 00 	lds	r24, 0x007A
     8d4:	86 fd       	sbrc	r24, 6
     8d6:	fc cf       	rjmp	.-8      	; 0x8d0 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     8d8:	80 91 78 00 	lds	r24, 0x0078
     8dc:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8e0:	10 92 7c 00 	sts	0x007C, r1
     8e4:	23 ea       	ldi	r18, 0xA3	; 163
     8e6:	20 93 7a 00 	sts	0x007A, r18
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8f0:	78 94       	sei
     8f2:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     8f8:	08 95       	ret

000008fa <rand_hard>:

uint8_t rand_hard() {
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	e0 e0       	ldi	r30, 0x00	; 0
     904:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     906:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     908:	03 ea       	ldi	r16, 0xA3	; 163
     90a:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     90c:	d6 e0       	ldi	r29, 0x06	; 6
     90e:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     910:	a1 e0       	ldi	r26, 0x01	; 1
     912:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     914:	60 e8       	ldi	r22, 0x80	; 128
     916:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     918:	f8 94       	cli
            adc_setup_conversion(6);
     91a:	d0 93 7c 00 	sts	0x007C, r29
     91e:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     922:	90 91 7a 00 	lds	r25, 0x007A
     926:	90 64       	ori	r25, 0x40	; 64
     928:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     92c:	90 91 7a 00 	lds	r25, 0x007A
     930:	96 fd       	sbrc	r25, 6
     932:	fc cf       	rjmp	.-8      	; 0x92c <__stack+0x2d>
            a = ADCW&0x1;
     934:	20 91 78 00 	lds	r18, 0x0078
     938:	30 91 79 00 	lds	r19, 0x0079
     93c:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     93e:	90 91 7a 00 	lds	r25, 0x007A
     942:	90 64       	ori	r25, 0x40	; 64
     944:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     948:	90 91 7a 00 	lds	r25, 0x007A
     94c:	96 fd       	sbrc	r25, 6
     94e:	fc cf       	rjmp	.-8      	; 0x948 <__stack+0x49>
            b = ADCW&0x1;
     950:	40 91 78 00 	lds	r20, 0x0078
     954:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     958:	10 92 7c 00 	sts	0x007C, r1
     95c:	00 93 7a 00 	sts	0x007A, r16
     960:	10 93 7b 00 	sts	0x007B, r17
            sei();
     964:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     966:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     968:	24 13       	cpse	r18, r20
     96a:	03 c0       	rjmp	.+6      	; 0x972 <__stack+0x73>
     96c:	61 50       	subi	r22, 0x01	; 1
     96e:	71 09       	sbc	r23, r1
     970:	99 f6       	brne	.-90     	; 0x918 <__stack+0x19>
        if (a)
     972:	22 23       	and	r18, r18
     974:	39 f0       	breq	.+14     	; 0x984 <__stack+0x85>
            num |= (1<<i);
     976:	9d 01       	movw	r18, r26
     978:	0e 2e       	mov	r0, r30
     97a:	01 c0       	rjmp	.+2      	; 0x97e <__stack+0x7f>
     97c:	22 0f       	add	r18, r18
     97e:	0a 94       	dec	r0
     980:	ea f7       	brpl	.-6      	; 0x97c <__stack+0x7d>
     982:	82 2b       	or	r24, r18
     984:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     986:	e8 30       	cpi	r30, 0x08	; 8
     988:	f1 05       	cpc	r31, r1
     98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x8f>
     98c:	c3 cf       	rjmp	.-122    	; 0x914 <__stack+0x15>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     998:	80 91 00 01 	lds	r24, 0x0100
     99c:	98 2f       	mov	r25, r24
     99e:	99 0f       	add	r25, r25
     9a0:	99 0f       	add	r25, r25
     9a2:	99 0f       	add	r25, r25
     9a4:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     9a6:	90 91 18 01 	lds	r25, 0x0118
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	29 0f       	add	r18, r25
     9ae:	20 93 18 01 	sts	0x0118, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     9b2:	28 2f       	mov	r18, r24
     9b4:	22 95       	swap	r18
     9b6:	26 95       	lsr	r18
     9b8:	27 70       	andi	r18, 0x07	; 7
     9ba:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     9bc:	96 95       	lsr	r25
     9be:	96 95       	lsr	r25
     9c0:	89 27       	eor	r24, r25
     9c2:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     9c6:	08 95       	ret

000009c8 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     9c8:	80 93 00 01 	sts	0x0100, r24
     9cc:	08 95       	ret

000009ce <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     9ce:	80 91 53 01 	lds	r24, 0x0153
     9d2:	81 11       	cpse	r24, r1
     9d4:	16 c0       	rjmp	.+44     	; 0xa02 <get_voltage+0x34>
        cli();                                    // disable interrupts
     9d6:	f8 94       	cli
        adc_setup_conversion(6);
     9d8:	86 e0       	ldi	r24, 0x06	; 6
     9da:	80 93 7c 00 	sts	0x007C, r24
     9de:	83 e8       	ldi	r24, 0x83	; 131
     9e0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9e4:	80 91 7a 00 	lds	r24, 0x007A
     9e8:	80 64       	ori	r24, 0x40	; 64
     9ea:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9ee:	80 91 7a 00 	lds	r24, 0x007A
     9f2:	86 fd       	sbrc	r24, 6
     9f4:	fc cf       	rjmp	.-8      	; 0x9ee <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     9f6:	80 91 78 00 	lds	r24, 0x0078
     9fa:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     9fe:	78 94       	sei
     a00:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a06:	08 95       	ret

00000a08 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a08:	2f 92       	push	r2
     a0a:	3f 92       	push	r3
     a0c:	4f 92       	push	r4
     a0e:	5f 92       	push	r5
     a10:	6f 92       	push	r6
     a12:	7f 92       	push	r7
     a14:	8f 92       	push	r8
     a16:	9f 92       	push	r9
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <estimate_distance+0x26>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <estimate_distance+0x28>
     a30:	00 d0       	rcall	.+0      	; 0xa32 <estimate_distance+0x2a>
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     a38:	dc 01       	movw	r26, r24
     a3a:	12 96       	adiw	r26, 0x02	; 2
     a3c:	0d 90       	ld	r0, X+
     a3e:	bc 91       	ld	r27, X
     a40:	a0 2d       	mov	r26, r0
     a42:	be 83       	std	Y+6, r27	; 0x06
     a44:	ad 83       	std	Y+5, r26	; 0x05
     a46:	a4 38       	cpi	r26, 0x84	; 132
     a48:	e3 e0       	ldi	r30, 0x03	; 3
     a4a:	be 07       	cpc	r27, r30
     a4c:	0c f0       	brlt	.+2      	; 0xa50 <estimate_distance+0x48>
     a4e:	c9 c0       	rjmp	.+402    	; 0xbe2 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a50:	80 91 2d 01 	lds	r24, 0x012D
     a54:	90 91 2e 01 	lds	r25, 0x012E
     a58:	8a 17       	cp	r24, r26
     a5a:	9b 07       	cpc	r25, r27
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <estimate_distance+0x58>
     a5e:	37 c1       	rjmp	.+622    	; 0xcce <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a60:	00 91 2f 01 	lds	r16, 0x012F
     a64:	10 91 30 01 	lds	r17, 0x0130
     a68:	0a 17       	cp	r16, r26
     a6a:	1b 07       	cpc	r17, r27
     a6c:	08 f4       	brcc	.+2      	; 0xa70 <estimate_distance+0x68>
     a6e:	2f c2       	rjmp	.+1118   	; 0xece <estimate_distance+0x4c6>
     a70:	00 91 31 01 	lds	r16, 0x0131
     a74:	10 91 32 01 	lds	r17, 0x0132
     a78:	0a 17       	cp	r16, r26
     a7a:	1b 07       	cpc	r17, r27
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <estimate_distance+0x78>
     a7e:	2f c2       	rjmp	.+1118   	; 0xede <estimate_distance+0x4d6>
     a80:	00 91 33 01 	lds	r16, 0x0133
     a84:	10 91 34 01 	lds	r17, 0x0134
     a88:	0a 17       	cp	r16, r26
     a8a:	1b 07       	cpc	r17, r27
     a8c:	08 f4       	brcc	.+2      	; 0xa90 <estimate_distance+0x88>
     a8e:	2f c2       	rjmp	.+1118   	; 0xeee <estimate_distance+0x4e6>
     a90:	00 91 35 01 	lds	r16, 0x0135
     a94:	10 91 36 01 	lds	r17, 0x0136
     a98:	0a 17       	cp	r16, r26
     a9a:	1b 07       	cpc	r17, r27
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <estimate_distance+0x98>
     a9e:	2f c2       	rjmp	.+1118   	; 0xefe <estimate_distance+0x4f6>
     aa0:	00 91 37 01 	lds	r16, 0x0137
     aa4:	10 91 38 01 	lds	r17, 0x0138
     aa8:	0a 17       	cp	r16, r26
     aaa:	1b 07       	cpc	r17, r27
     aac:	08 f4       	brcc	.+2      	; 0xab0 <estimate_distance+0xa8>
     aae:	ef c1       	rjmp	.+990    	; 0xe8e <estimate_distance+0x486>
     ab0:	00 91 39 01 	lds	r16, 0x0139
     ab4:	10 91 3a 01 	lds	r17, 0x013A
     ab8:	0a 17       	cp	r16, r26
     aba:	1b 07       	cpc	r17, r27
     abc:	08 f4       	brcc	.+2      	; 0xac0 <estimate_distance+0xb8>
     abe:	27 c2       	rjmp	.+1102   	; 0xf0e <estimate_distance+0x506>
     ac0:	00 91 3b 01 	lds	r16, 0x013B
     ac4:	10 91 3c 01 	lds	r17, 0x013C
     ac8:	0a 17       	cp	r16, r26
     aca:	1b 07       	cpc	r17, r27
     acc:	08 f4       	brcc	.+2      	; 0xad0 <estimate_distance+0xc8>
     ace:	27 c2       	rjmp	.+1102   	; 0xf1e <estimate_distance+0x516>
     ad0:	00 91 3d 01 	lds	r16, 0x013D
     ad4:	10 91 3e 01 	lds	r17, 0x013E
     ad8:	0a 17       	cp	r16, r26
     ada:	1b 07       	cpc	r17, r27
     adc:	08 f4       	brcc	.+2      	; 0xae0 <estimate_distance+0xd8>
     ade:	27 c2       	rjmp	.+1102   	; 0xf2e <estimate_distance+0x526>
     ae0:	00 91 3f 01 	lds	r16, 0x013F
     ae4:	10 91 40 01 	lds	r17, 0x0140
     ae8:	0a 17       	cp	r16, r26
     aea:	1b 07       	cpc	r17, r27
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <estimate_distance+0xe8>
     aee:	27 c2       	rjmp	.+1102   	; 0xf3e <estimate_distance+0x536>
     af0:	00 91 41 01 	lds	r16, 0x0141
     af4:	10 91 42 01 	lds	r17, 0x0142
     af8:	0a 17       	cp	r16, r26
     afa:	1b 07       	cpc	r17, r27
     afc:	08 f4       	brcc	.+2      	; 0xb00 <estimate_distance+0xf8>
     afe:	27 c2       	rjmp	.+1102   	; 0xf4e <estimate_distance+0x546>
     b00:	00 91 43 01 	lds	r16, 0x0143
     b04:	10 91 44 01 	lds	r17, 0x0144
     b08:	0a 17       	cp	r16, r26
     b0a:	1b 07       	cpc	r17, r27
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <estimate_distance+0x108>
     b0e:	23 c2       	rjmp	.+1094   	; 0xf56 <estimate_distance+0x54e>
     b10:	00 91 45 01 	lds	r16, 0x0145
     b14:	10 91 46 01 	lds	r17, 0x0146
     b18:	0a 17       	cp	r16, r26
     b1a:	1b 07       	cpc	r17, r27
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <estimate_distance+0x118>
     b1e:	23 c2       	rjmp	.+1094   	; 0xf66 <estimate_distance+0x55e>
     b20:	00 91 47 01 	lds	r16, 0x0147
     b24:	10 91 48 01 	lds	r17, 0x0148
     b28:	0a 17       	cp	r16, r26
     b2a:	1b 07       	cpc	r17, r27
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <estimate_distance+0x128>
     b2e:	23 c2       	rjmp	.+1094   	; 0xf76 <estimate_distance+0x56e>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 ed       	ldi	r26, 0xD0	; 208
     b36:	b0 e4       	ldi	r27, 0x40	; 64
     b38:	89 83       	std	Y+1, r24	; 0x01
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	ab 83       	std	Y+3, r26	; 0x03
     b3e:	bc 83       	std	Y+4, r27	; 0x04
     b40:	4c e0       	ldi	r20, 0x0C	; 12
     b42:	e4 2e       	mov	r14, r20
     b44:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     b46:	f7 01       	movw	r30, r14
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	e3 5d       	subi	r30, 0xD3	; 211
     b4e:	fe 4f       	sbci	r31, 0xFE	; 254
     b50:	80 81       	ld	r24, Z
     b52:	91 81       	ldd	r25, Z+1	; 0x01
     b54:	b8 01       	movw	r22, r16
     b56:	68 1b       	sub	r22, r24
     b58:	79 0b       	sbc	r23, r25
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     b62:	9b 01       	movw	r18, r22
     b64:	ac 01       	movw	r20, r24
     b66:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     b6a:	6b 01       	movw	r12, r22
     b6c:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b6e:	ad 81       	ldd	r26, Y+5	; 0x05
     b70:	be 81       	ldd	r27, Y+6	; 0x06
     b72:	bd 01       	movw	r22, r26
     b74:	bb 0f       	add	r27, r27
     b76:	88 0b       	sbc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	0e 94 99 0c 	call	0x1932	; 0x1932 <__floatsisf>
     b7e:	4b 01       	movw	r8, r22
     b80:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b82:	b8 01       	movw	r22, r16
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     b8c:	2b 01       	movw	r4, r22
     b8e:	3c 01       	movw	r6, r24
     b90:	29 81       	ldd	r18, Y+1	; 0x01
     b92:	3a 81       	ldd	r19, Y+2	; 0x02
     b94:	4b 81       	ldd	r20, Y+3	; 0x03
     b96:	5c 81       	ldd	r21, Y+4	; 0x04
     b98:	c7 01       	movw	r24, r14
     b9a:	b6 01       	movw	r22, r12
     b9c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c3 01       	movw	r24, r6
     ba6:	b2 01       	movw	r22, r4
     ba8:	0e 94 82 0b 	call	0x1704	; 0x1704 <__subsf3>
     bac:	9b 01       	movw	r18, r22
     bae:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bb0:	c5 01       	movw	r24, r10
     bb2:	b4 01       	movw	r22, r8
     bb4:	0e 94 82 0b 	call	0x1704	; 0x1704 <__subsf3>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e2       	ldi	r20, 0x20	; 32
     bbe:	51 e4       	ldi	r21, 0x41	; 65
     bc0:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
            b=((int)((int)b/(int)slope));
     bc4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fixsfsi>
     bc8:	8b 01       	movw	r16, r22
     bca:	c7 01       	movw	r24, r14
     bcc:	b6 01       	movw	r22, r12
     bce:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fixsfsi>
     bd2:	ab 01       	movw	r20, r22
     bd4:	bc 01       	movw	r22, r24
     bd6:	c8 01       	movw	r24, r16
     bd8:	ba 01       	movw	r22, r20
     bda:	0e 94 45 0b 	call	0x168a	; 0x168a <__divmodhi4>
            dist_high=b;
     bde:	16 2f       	mov	r17, r22
     be0:	77 c0       	rjmp	.+238    	; 0xcd0 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     be2:	dc 01       	movw	r26, r24
     be4:	cd 90       	ld	r12, X+
     be6:	dc 90       	ld	r13, X
     be8:	80 91 54 01 	lds	r24, 0x0154
     bec:	90 91 55 01 	lds	r25, 0x0155
     bf0:	8c 15       	cp	r24, r12
     bf2:	9d 05       	cpc	r25, r13
     bf4:	08 f4       	brcc	.+2      	; 0xbf8 <estimate_distance+0x1f0>
     bf6:	8c c0       	rjmp	.+280    	; 0xd10 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     bf8:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     bfa:	e0 90 56 01 	lds	r14, 0x0156
     bfe:	f0 90 57 01 	lds	r15, 0x0157
     c02:	ec 14       	cp	r14, r12
     c04:	fd 04       	cpc	r15, r13
     c06:	08 f4       	brcc	.+2      	; 0xc0a <estimate_distance+0x202>
     c08:	5e c1       	rjmp	.+700    	; 0xec6 <estimate_distance+0x4be>
     c0a:	e0 90 58 01 	lds	r14, 0x0158
     c0e:	f0 90 59 01 	lds	r15, 0x0159
     c12:	ec 14       	cp	r14, r12
     c14:	fd 04       	cpc	r15, r13
     c16:	08 f4       	brcc	.+2      	; 0xc1a <estimate_distance+0x212>
     c18:	5e c1       	rjmp	.+700    	; 0xed6 <estimate_distance+0x4ce>
     c1a:	e0 90 5a 01 	lds	r14, 0x015A
     c1e:	f0 90 5b 01 	lds	r15, 0x015B
     c22:	ec 14       	cp	r14, r12
     c24:	fd 04       	cpc	r15, r13
     c26:	08 f4       	brcc	.+2      	; 0xc2a <estimate_distance+0x222>
     c28:	5e c1       	rjmp	.+700    	; 0xee6 <estimate_distance+0x4de>
     c2a:	e0 90 5c 01 	lds	r14, 0x015C
     c2e:	f0 90 5d 01 	lds	r15, 0x015D
     c32:	ec 14       	cp	r14, r12
     c34:	fd 04       	cpc	r15, r13
     c36:	08 f4       	brcc	.+2      	; 0xc3a <estimate_distance+0x232>
     c38:	5e c1       	rjmp	.+700    	; 0xef6 <estimate_distance+0x4ee>
     c3a:	e0 90 5e 01 	lds	r14, 0x015E
     c3e:	f0 90 5f 01 	lds	r15, 0x015F
     c42:	ec 14       	cp	r14, r12
     c44:	fd 04       	cpc	r15, r13
     c46:	08 f4       	brcc	.+2      	; 0xc4a <estimate_distance+0x242>
     c48:	c3 c0       	rjmp	.+390    	; 0xdd0 <estimate_distance+0x3c8>
     c4a:	e0 90 60 01 	lds	r14, 0x0160
     c4e:	f0 90 61 01 	lds	r15, 0x0161
     c52:	ec 14       	cp	r14, r12
     c54:	fd 04       	cpc	r15, r13
     c56:	08 f4       	brcc	.+2      	; 0xc5a <estimate_distance+0x252>
     c58:	56 c1       	rjmp	.+684    	; 0xf06 <estimate_distance+0x4fe>
     c5a:	e0 90 62 01 	lds	r14, 0x0162
     c5e:	f0 90 63 01 	lds	r15, 0x0163
     c62:	ec 14       	cp	r14, r12
     c64:	fd 04       	cpc	r15, r13
     c66:	08 f4       	brcc	.+2      	; 0xc6a <estimate_distance+0x262>
     c68:	56 c1       	rjmp	.+684    	; 0xf16 <estimate_distance+0x50e>
     c6a:	e0 90 64 01 	lds	r14, 0x0164
     c6e:	f0 90 65 01 	lds	r15, 0x0165
     c72:	ec 14       	cp	r14, r12
     c74:	fd 04       	cpc	r15, r13
     c76:	08 f4       	brcc	.+2      	; 0xc7a <estimate_distance+0x272>
     c78:	56 c1       	rjmp	.+684    	; 0xf26 <estimate_distance+0x51e>
     c7a:	e0 90 66 01 	lds	r14, 0x0166
     c7e:	f0 90 67 01 	lds	r15, 0x0167
     c82:	ec 14       	cp	r14, r12
     c84:	fd 04       	cpc	r15, r13
     c86:	08 f4       	brcc	.+2      	; 0xc8a <estimate_distance+0x282>
     c88:	56 c1       	rjmp	.+684    	; 0xf36 <estimate_distance+0x52e>
     c8a:	e0 90 68 01 	lds	r14, 0x0168
     c8e:	f0 90 69 01 	lds	r15, 0x0169
     c92:	ec 14       	cp	r14, r12
     c94:	fd 04       	cpc	r15, r13
     c96:	08 f4       	brcc	.+2      	; 0xc9a <estimate_distance+0x292>
     c98:	56 c1       	rjmp	.+684    	; 0xf46 <estimate_distance+0x53e>
     c9a:	e0 90 6a 01 	lds	r14, 0x016A
     c9e:	f0 90 6b 01 	lds	r15, 0x016B
     ca2:	ec 14       	cp	r14, r12
     ca4:	fd 04       	cpc	r15, r13
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <estimate_distance+0x2a2>
     ca8:	5a c1       	rjmp	.+692    	; 0xf5e <estimate_distance+0x556>
     caa:	e0 90 6c 01 	lds	r14, 0x016C
     cae:	f0 90 6d 01 	lds	r15, 0x016D
     cb2:	ec 14       	cp	r14, r12
     cb4:	fd 04       	cpc	r15, r13
     cb6:	08 f4       	brcc	.+2      	; 0xcba <estimate_distance+0x2b2>
     cb8:	5a c1       	rjmp	.+692    	; 0xf6e <estimate_distance+0x566>
     cba:	e0 90 6e 01 	lds	r14, 0x016E
     cbe:	f0 90 6f 01 	lds	r15, 0x016F
     cc2:	ec 14       	cp	r14, r12
     cc4:	fd 04       	cpc	r15, r13
     cc6:	08 f4       	brcc	.+2      	; 0xcca <estimate_distance+0x2c2>
     cc8:	5a c1       	rjmp	.+692    	; 0xf7e <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     cca:	0a e5       	ldi	r16, 0x5A	; 90
     ccc:	31 c0       	rjmp	.+98     	; 0xd30 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     cce:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     cd0:	ed 81       	ldd	r30, Y+5	; 0x05
     cd2:	fe 81       	ldd	r31, Y+6	; 0x06
     cd4:	ed 3b       	cpi	r30, 0xBD	; 189
     cd6:	f2 40       	sbci	r31, 0x02	; 2
     cd8:	fc f4       	brge	.+62     	; 0xd18 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     cda:	81 e2       	ldi	r24, 0x21	; 33
     cdc:	81 0f       	add	r24, r17
    }
}
     cde:	26 96       	adiw	r28, 0x06	; 6
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	3f 90       	pop	r3
     d0c:	2f 90       	pop	r2
     d0e:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d10:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d12:	81 e2       	ldi	r24, 0x21	; 33
     d14:	80 0f       	add	r24, r16
     d16:	e3 cf       	rjmp	.-58     	; 0xcde <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d18:	d1 01       	movw	r26, r2
     d1a:	cd 90       	ld	r12, X+
     d1c:	dc 90       	ld	r13, X
     d1e:	80 91 54 01 	lds	r24, 0x0154
     d22:	90 91 55 01 	lds	r25, 0x0155
     d26:	8c 15       	cp	r24, r12
     d28:	9d 05       	cpc	r25, r13
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <estimate_distance+0x326>
     d2c:	66 cf       	rjmp	.-308    	; 0xbfa <estimate_distance+0x1f2>
            dist_low=0;
     d2e:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d30:	1f 3f       	cpi	r17, 0xFF	; 255
     d32:	79 f3       	breq	.-34     	; 0xd12 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d34:	ed 81       	ldd	r30, Y+5	; 0x05
     d36:	fe 81       	ldd	r31, Y+6	; 0x06
     d38:	bf 01       	movw	r22, r30
     d3a:	ff 0f       	add	r31, r31
     d3c:	88 0b       	sbc	r24, r24
     d3e:	99 0b       	sbc	r25, r25
     d40:	0e 94 99 0c 	call	0x1932	; 0x1932 <__floatsisf>
     d44:	6b 01       	movw	r12, r22
     d46:	7c 01       	movw	r14, r24
     d48:	61 2f       	mov	r22, r17
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     d54:	4b 01       	movw	r8, r22
     d56:	5c 01       	movw	r10, r24
     d58:	a7 01       	movw	r20, r14
     d5a:	96 01       	movw	r18, r12
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	81 e6       	ldi	r24, 0x61	; 97
     d62:	94 e4       	ldi	r25, 0x44	; 68
     d64:	0e 94 82 0b 	call	0x1704	; 0x1704 <__subsf3>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	c5 01       	movw	r24, r10
     d6e:	b4 01       	movw	r22, r8
     d70:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
     d74:	4b 01       	movw	r8, r22
     d76:	5c 01       	movw	r10, r24
     d78:	60 2f       	mov	r22, r16
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     d84:	2b 01       	movw	r4, r22
     d86:	3c 01       	movw	r6, r24
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4f e2       	ldi	r20, 0x2F	; 47
     d8e:	54 e4       	ldi	r21, 0x44	; 68
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	0e 94 82 0b 	call	0x1704	; 0x1704 <__subsf3>
     d98:	9b 01       	movw	r18, r22
     d9a:	ac 01       	movw	r20, r24
     d9c:	c3 01       	movw	r24, r6
     d9e:	b2 01       	movw	r22, r4
     da0:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	c5 01       	movw	r24, r10
     daa:	b4 01       	movw	r22, r8
     dac:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	48 e4       	ldi	r20, 0x48	; 72
     db6:	53 e4       	ldi	r21, 0x43	; 67
     db8:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divsf3>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	44 e0       	ldi	r20, 0x04	; 4
     dc2:	52 e4       	ldi	r21, 0x42	; 66
     dc4:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     dc8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     dcc:	86 2f       	mov	r24, r22
     dce:	87 cf       	rjmp	.-242    	; 0xcde <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd0:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     dd2:	85 e0       	ldi	r24, 0x05	; 5
     dd4:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	fc 01       	movw	r30, r24
     ddc:	ee 5a       	subi	r30, 0xAE	; 174
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	b7 01       	movw	r22, r14
     de6:	68 1b       	sub	r22, r24
     de8:	79 0b       	sbc	r23, r25
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     dfa:	4b 01       	movw	r8, r22
     dfc:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     dfe:	b6 01       	movw	r22, r12
     e00:	dd 0c       	add	r13, r13
     e02:	88 0b       	sbc	r24, r24
     e04:	99 0b       	sbc	r25, r25
     e06:	0e 94 99 0c 	call	0x1932	; 0x1932 <__floatsisf>
     e0a:	2b 01       	movw	r4, r22
     e0c:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e0e:	b7 01       	movw	r22, r14
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     e18:	6b 01       	movw	r12, r22
     e1a:	7c 01       	movw	r14, r24
     e1c:	60 2f       	mov	r22, r16
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	5f e3       	ldi	r21, 0x3F	; 63
     e30:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	a9 01       	movw	r20, r18
     e3a:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     e3e:	a5 01       	movw	r20, r10
     e40:	94 01       	movw	r18, r8
     e42:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
     e4a:	c7 01       	movw	r24, r14
     e4c:	b6 01       	movw	r22, r12
     e4e:	0e 94 82 0b 	call	0x1704	; 0x1704 <__subsf3>
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e56:	c3 01       	movw	r24, r6
     e58:	b2 01       	movw	r22, r4
     e5a:	0e 94 82 0b 	call	0x1704	; 0x1704 <__subsf3>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
                b=((int)((int)b/(int)slope));
     e6a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fixsfsi>
     e6e:	7b 01       	movw	r14, r22
     e70:	c5 01       	movw	r24, r10
     e72:	b4 01       	movw	r22, r8
     e74:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fixsfsi>
     e78:	ab 01       	movw	r20, r22
     e7a:	bc 01       	movw	r22, r24
     e7c:	c7 01       	movw	r24, r14
     e7e:	ba 01       	movw	r22, r20
     e80:	0e 94 45 0b 	call	0x168a	; 0x168a <__divmodhi4>
                dist_low=b;
     e84:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e86:	6f 3f       	cpi	r22, 0xFF	; 255
     e88:	09 f0       	breq	.+2      	; 0xe8c <estimate_distance+0x484>
     e8a:	52 cf       	rjmp	.-348    	; 0xd30 <estimate_distance+0x328>
     e8c:	26 cf       	rjmp	.-436    	; 0xcda <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e8e:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	7c 01       	movw	r14, r24
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	ef 1a       	sub	r14, r31
     e9a:	f1 08       	sbc	r15, r1
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 97 0c 	call	0x192e	; 0x192e <__floatunsisf>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__mulsf3>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	a9 01       	movw	r20, r18
     eb8:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     ebc:	69 83       	std	Y+1, r22	; 0x01
     ebe:	7a 83       	std	Y+2, r23	; 0x02
     ec0:	8b 83       	std	Y+3, r24	; 0x03
     ec2:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     ec4:	40 ce       	rjmp	.-896    	; 0xb46 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ec6:	01 e0       	ldi	r16, 0x01	; 1
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	84 cf       	rjmp	.-248    	; 0xdd6 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	df cf       	rjmp	.-66     	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ed6:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	7c cf       	rjmp	.-264    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ede:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	d7 cf       	rjmp	.-82     	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ee6:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	74 cf       	rjmp	.-280    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eee:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	cf cf       	rjmp	.-98     	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef6:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     ef8:	84 e0       	ldi	r24, 0x04	; 4
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	6c cf       	rjmp	.-296    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     efe:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	c7 cf       	rjmp	.-114    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f06:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	64 cf       	rjmp	.-312    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f0e:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	bf cf       	rjmp	.-130    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f16:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     f18:	87 e0       	ldi	r24, 0x07	; 7
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	5c cf       	rjmp	.-328    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f1e:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f20:	87 e0       	ldi	r24, 0x07	; 7
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	b7 cf       	rjmp	.-146    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f26:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	54 cf       	rjmp	.-344    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f2e:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f30:	88 e0       	ldi	r24, 0x08	; 8
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	af cf       	rjmp	.-162    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f36:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     f38:	89 e0       	ldi	r24, 0x09	; 9
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	4c cf       	rjmp	.-360    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f3e:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     f40:	89 e0       	ldi	r24, 0x09	; 9
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a7 cf       	rjmp	.-178    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f46:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     f48:	8a e0       	ldi	r24, 0x0A	; 10
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	44 cf       	rjmp	.-376    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f4e:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f50:	8a e0       	ldi	r24, 0x0A	; 10
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9f cf       	rjmp	.-194    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f56:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f58:	8b e0       	ldi	r24, 0x0B	; 11
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9b cf       	rjmp	.-202    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f5e:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     f60:	8b e0       	ldi	r24, 0x0B	; 11
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	38 cf       	rjmp	.-400    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f66:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     f68:	8c e0       	ldi	r24, 0x0C	; 12
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	93 cf       	rjmp	.-218    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f6e:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     f70:	8c e0       	ldi	r24, 0x0C	; 12
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	30 cf       	rjmp	.-416    	; 0xdd6 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f76:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f78:	8d e0       	ldi	r24, 0x0D	; 13
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	8b cf       	rjmp	.-234    	; 0xe94 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f7e:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f80:	8d e0       	ldi	r24, 0x0D	; 13
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	28 cf       	rjmp	.-432    	; 0xdd6 <estimate_distance+0x3ce>

00000f86 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f86:	1f 92       	push	r1
     f88:	0f 92       	push	r0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	2f 93       	push	r18
     f92:	3f 93       	push	r19
     f94:	4f 93       	push	r20
     f96:	5f 93       	push	r21
     f98:	6f 93       	push	r22
     f9a:	7f 93       	push	r23
     f9c:	8f 93       	push	r24
     f9e:	9f 93       	push	r25
     fa0:	af 93       	push	r26
     fa2:	bf 93       	push	r27
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31
    tx_clock += tx_increment;
     fa8:	20 91 73 01 	lds	r18, 0x0173
     fac:	30 91 74 01 	lds	r19, 0x0174
     fb0:	80 91 71 01 	lds	r24, 0x0171
     fb4:	90 91 72 01 	lds	r25, 0x0172
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	90 93 74 01 	sts	0x0174, r25
     fc0:	80 93 73 01 	sts	0x0173, r24
    tx_increment = 0xFF;
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	90 93 72 01 	sts	0x0172, r25
     fcc:	80 93 71 01 	sts	0x0171, r24
    OCR0A = tx_increment;
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     fd4:	80 91 4f 01 	lds	r24, 0x014F
     fd8:	90 91 50 01 	lds	r25, 0x0150
     fdc:	a0 91 51 01 	lds	r26, 0x0151
     fe0:	b0 91 52 01 	lds	r27, 0x0152
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	a1 1d       	adc	r26, r1
     fe8:	b1 1d       	adc	r27, r1
     fea:	80 93 4f 01 	sts	0x014F, r24
     fee:	90 93 50 01 	sts	0x0150, r25
     ff2:	a0 93 51 01 	sts	0x0151, r26
     ff6:	b0 93 52 01 	sts	0x0152, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     ffa:	80 91 53 01 	lds	r24, 0x0153
     ffe:	81 11       	cpse	r24, r1
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <__vector_14+0x9a>
    1002:	80 91 82 01 	lds	r24, 0x0182
    1006:	90 91 83 01 	lds	r25, 0x0183
    100a:	20 91 73 01 	lds	r18, 0x0173
    100e:	30 91 74 01 	lds	r19, 0x0174
    1012:	82 17       	cp	r24, r18
    1014:	93 07       	cpc	r25, r19
    1016:	20 f4       	brcc	.+8      	; 0x1020 <__vector_14+0x9a>
    1018:	80 91 1b 01 	lds	r24, 0x011B
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	89 f0       	breq	.+34     	; 0x1042 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1042:	e0 91 03 01 	lds	r30, 0x0103
    1046:	f0 91 04 01 	lds	r31, 0x0104
    104a:	09 95       	icall
        if (msg) {
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	41 f3       	breq	.-48     	; 0x1020 <__vector_14+0x9a>
            if (message_send(msg)) {
    1050:	0e 94 ab 0a 	call	0x1556	; 0x1556 <message_send>
    1054:	81 11       	cpse	r24, r1
    1056:	09 c0       	rjmp	.+18     	; 0x106a <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1058:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <rand>
    105c:	99 27       	eor	r25, r25
    105e:	90 93 72 01 	sts	0x0172, r25
    1062:	80 93 71 01 	sts	0x0171, r24
                OCR0A = tx_increment;
    1066:	87 bd       	out	0x27, r24	; 39
    1068:	db cf       	rjmp	.-74     	; 0x1020 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    106a:	e0 91 01 01 	lds	r30, 0x0101
    106e:	f0 91 02 01 	lds	r31, 0x0102
    1072:	09 95       	icall
                tx_clock = 0;
    1074:	10 92 74 01 	sts	0x0174, r1
    1078:	10 92 73 01 	sts	0x0173, r1
    107c:	d1 cf       	rjmp	.-94     	; 0x1020 <__vector_14+0x9a>

0000107e <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    107e:	80 ff       	sbrs	r24, 0
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <set_color+0x26>
        DDRD |= (1<<5);
    1082:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1084:	81 ff       	sbrs	r24, 1
    1086:	11 c0       	rjmp	.+34     	; 0x10aa <set_color+0x2c>
        DDRD |= (1<<4);
    1088:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    108a:	82 ff       	sbrs	r24, 2
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <set_color+0x32>
        DDRC |= (1<<3);
    108e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1090:	83 ff       	sbrs	r24, 3
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <set_color+0x38>
        DDRC |= (1<<2);
    1094:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1096:	84 ff       	sbrs	r24, 4
    1098:	11 c0       	rjmp	.+34     	; 0x10bc <set_color+0x3e>
        DDRC |= (1<<5);
    109a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    109c:	85 fd       	sbrc	r24, 5
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    10a0:	3c 98       	cbi	0x07, 4	; 7
    10a2:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    10a4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    10a6:	81 fd       	sbrc	r24, 1
    10a8:	ef cf       	rjmp	.-34     	; 0x1088 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    10aa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    10ac:	82 fd       	sbrc	r24, 2
    10ae:	ef cf       	rjmp	.-34     	; 0x108e <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    10b0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    10b2:	83 fd       	sbrc	r24, 3
    10b4:	ef cf       	rjmp	.-34     	; 0x1094 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    10b6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    10b8:	84 fd       	sbrc	r24, 4
    10ba:	ef cf       	rjmp	.-34     	; 0x109a <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    10bc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    10be:	85 ff       	sbrs	r24, 5
    10c0:	ef cf       	rjmp	.-34     	; 0x10a0 <set_color+0x22>
        DDRC |= (1<<4);
    10c2:	3c 9a       	sbi	0x07, 4	; 7
    10c4:	08 95       	ret

000010c6 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	8f 93       	push	r24
    10d2:	9f 93       	push	r25
    rx_timer_off();
    10d4:	10 92 81 00 	sts	0x0081, r1
    10d8:	10 92 85 00 	sts	0x0085, r1
    10dc:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 2c 01 	sts	0x012C, r24
    rx_leadingbyte = 1;
    10e6:	80 93 70 01 	sts	0x0170, r24
    rx_busy = 0;
    10ea:	10 92 53 01 	sts	0x0153, r1
    adc_trigger_high_gain();
    10ee:	10 92 7c 00 	sts	0x007C, r1
    10f2:	93 ea       	ldi	r25, 0xA3	; 163
    10f4:	90 93 7a 00 	sts	0x007A, r25
    10f8:	80 93 7b 00 	sts	0x007B, r24
}
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1130:	20 91 84 00 	lds	r18, 0x0084
    1134:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	40 93 53 01 	sts	0x0153, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    113e:	80 91 2c 01 	lds	r24, 0x012C
    1142:	88 23       	and	r24, r24
    1144:	a9 f1       	breq	.+106    	; 0x11b0 <__vector_23+0xa6>
        rx_timer_on();
    1146:	10 92 85 00 	sts	0x0085, r1
    114a:	10 92 84 00 	sts	0x0084, r1
    114e:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1152:	10 92 84 01 	sts	0x0184, r1
        rx_leadingbit = 0;
    1156:	10 92 2c 01 	sts	0x012C, r1
        if (rx_leadingbyte) {
    115a:	80 91 70 01 	lds	r24, 0x0170
    115e:	88 23       	and	r24, r24
    1160:	a1 f0       	breq	.+40     	; 0x118a <__vector_23+0x80>
            adc_finish_conversion();
    1162:	80 91 7a 00 	lds	r24, 0x007A
    1166:	86 fd       	sbrc	r24, 6
    1168:	fc cf       	rjmp	.-8      	; 0x1162 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    116a:	80 91 78 00 	lds	r24, 0x0078
    116e:	90 91 79 00 	lds	r25, 0x0079
    1172:	90 93 4e 01 	sts	0x014E, r25
    1176:	80 93 4d 01 	sts	0x014D, r24
            adc_trigger_low_gain();
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 7c 00 	sts	0x007C, r24
    1180:	93 ea       	ldi	r25, 0xA3	; 163
    1182:	90 93 7a 00 	sts	0x007A, r25
    1186:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    11b0:	c9 01       	movw	r24, r18
    11b2:	87 58       	subi	r24, 0x87	; 135
    11b4:	91 09       	sbc	r25, r1
    11b6:	84 37       	cpi	r24, 0x74	; 116
    11b8:	99 40       	sbci	r25, 0x09	; 9
    11ba:	08 f0       	brcs	.+2      	; 0x11be <__vector_23+0xb4>
    11bc:	52 c0       	rjmp	.+164    	; 0x1262 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    11be:	26 58       	subi	r18, 0x86	; 134
    11c0:	31 09       	sbc	r19, r1
    11c2:	a4 ef       	ldi	r26, 0xF4	; 244
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	0e 94 5f 0b 	call	0x16be	; 0x16be <__umulhisi3>
    11ca:	aa 27       	eor	r26, r26
    11cc:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    11ce:	88 30       	cpi	r24, 0x08	; 8
    11d0:	91 05       	cpc	r25, r1
    11d2:	a1 05       	cpc	r26, r1
    11d4:	b1 05       	cpc	r27, r1
    11d6:	08 f4       	brcc	.+2      	; 0x11da <__vector_23+0xd0>
    11d8:	7b c0       	rjmp	.+246    	; 0x12d0 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    11da:	40 93 2c 01 	sts	0x012C, r20
                if (rx_leadingbyte) {
    11de:	80 91 70 01 	lds	r24, 0x0170
    11e2:	81 11       	cpse	r24, r1
    11e4:	52 c0       	rjmp	.+164    	; 0x128a <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    11e6:	80 91 4a 01 	lds	r24, 0x014A
    11ea:	e8 2f       	mov	r30, r24
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	ea 58       	subi	r30, 0x8A	; 138
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	90 91 84 01 	lds	r25, 0x0184
    11f6:	90 83       	st	Z, r25
                    rx_byteindex++;
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	80 93 4a 01 	sts	0x014A, r24
                    if (rx_byteindex == sizeof(message_t)) {
    11fe:	8c 30       	cpi	r24, 0x0C	; 12
    1200:	21 f6       	brne	.-120    	; 0x118a <__vector_23+0x80>
                        rx_timer_off();
    1202:	10 92 81 00 	sts	0x0081, r1
    1206:	10 92 85 00 	sts	0x0085, r1
    120a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    120e:	40 93 70 01 	sts	0x0170, r20
                        rx_busy = 0;
    1212:	10 92 53 01 	sts	0x0153, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1216:	c0 91 80 01 	lds	r28, 0x0180
    121a:	d0 91 81 01 	lds	r29, 0x0181
    121e:	86 e7       	ldi	r24, 0x76	; 118
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 8f 0a 	call	0x151e	; 0x151e <message_crc>
    1226:	c8 17       	cp	r28, r24
    1228:	d9 07       	cpc	r29, r25
    122a:	09 f0       	breq	.+2      	; 0x122e <__vector_23+0x124>
    122c:	ae cf       	rjmp	.-164    	; 0x118a <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    122e:	80 91 7f 01 	lds	r24, 0x017F
    1232:	87 ff       	sbrs	r24, 7
    1234:	61 c0       	rjmp	.+194    	; 0x12f8 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1236:	98 e7       	ldi	r25, 0x78	; 120
    1238:	98 0f       	add	r25, r24
    123a:	93 30       	cpi	r25, 0x03	; 3
    123c:	30 f0       	brcs	.+12     	; 0x124a <__vector_23+0x140>
        motors_off();
    123e:	53 98       	cbi	0x0a, 3	; 10
    1240:	23 98       	cbi	0x04, 3	; 4
    1242:	10 92 b4 00 	sts	0x00B4, r1
    1246:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	fc 01       	movw	r30, r24
    124e:	e0 58       	subi	r30, 0x80	; 128
    1250:	f1 09       	sbc	r31, r1
    1252:	eb 30       	cpi	r30, 0x0B	; 11
    1254:	f1 05       	cpc	r31, r1
    1256:	08 f0       	brcs	.+2      	; 0x125a <__vector_23+0x150>
    1258:	98 cf       	rjmp	.-208    	; 0x118a <__vector_23+0x80>
    125a:	e5 5c       	subi	r30, 0xC5	; 197
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1262:	10 92 81 00 	sts	0x0081, r1
    1266:	10 92 85 00 	sts	0x0085, r1
    126a:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    126e:	40 93 2c 01 	sts	0x012C, r20
            rx_leadingbyte = 1;
    1272:	40 93 70 01 	sts	0x0170, r20
            rx_busy = 0;
    1276:	10 92 53 01 	sts	0x0153, r1
            adc_trigger_high_gain();
    127a:	10 92 7c 00 	sts	0x007C, r1
    127e:	83 ea       	ldi	r24, 0xA3	; 163
    1280:	80 93 7a 00 	sts	0x007A, r24
    1284:	40 93 7b 00 	sts	0x007B, r20
    1288:	80 cf       	rjmp	.-256    	; 0x118a <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    128a:	80 91 7a 00 	lds	r24, 0x007A
    128e:	86 fd       	sbrc	r24, 6
    1290:	fc cf       	rjmp	.-8      	; 0x128a <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1292:	80 91 78 00 	lds	r24, 0x0078
    1296:	90 91 79 00 	lds	r25, 0x0079
    129a:	90 93 4c 01 	sts	0x014C, r25
    129e:	80 93 4b 01 	sts	0x014B, r24
                    adc_trigger_high_gain();
    12a2:	10 92 7c 00 	sts	0x007C, r1
    12a6:	83 ea       	ldi	r24, 0xA3	; 163
    12a8:	80 93 7a 00 	sts	0x007A, r24
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    12b2:	90 91 84 01 	lds	r25, 0x0184
    12b6:	99 23       	and	r25, r25
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <__vector_23+0x1e4>
                        rx_timer_off();
    12ba:	10 92 81 00 	sts	0x0081, r1
    12be:	10 92 85 00 	sts	0x0085, r1
    12c2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12c6:	80 93 70 01 	sts	0x0170, r24
                        rx_busy = 0;
    12ca:	10 92 53 01 	sts	0x0153, r1
    12ce:	5d cf       	rjmp	.-326    	; 0x118a <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    12d0:	21 e0       	ldi	r18, 0x01	; 1
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	f9 01       	movw	r30, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <__vector_23+0x1d2>
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	8a 95       	dec	r24
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <__vector_23+0x1ce>
    12e0:	cf 01       	movw	r24, r30
    12e2:	90 91 84 01 	lds	r25, 0x0184
    12e6:	89 2b       	or	r24, r25
    12e8:	80 93 84 01 	sts	0x0184, r24
    12ec:	4e cf       	rjmp	.-356    	; 0x118a <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    12ee:	10 92 70 01 	sts	0x0170, r1
                        rx_byteindex = 0;
    12f2:	10 92 4a 01 	sts	0x014A, r1
    12f6:	49 cf       	rjmp	.-366    	; 0x118a <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    12f8:	e0 91 05 01 	lds	r30, 0x0105
    12fc:	f0 91 06 01 	lds	r31, 0x0106
    1300:	6b e4       	ldi	r22, 0x4B	; 75
    1302:	71 e0       	ldi	r23, 0x01	; 1
    1304:	86 e7       	ldi	r24, 0x76	; 118
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	09 95       	icall
    130a:	3f cf       	rjmp	.-386    	; 0x118a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    130c:	80 91 76 01 	lds	r24, 0x0176
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	09 f4       	brne	.+2      	; 0x1316 <__vector_23+0x20c>
    1314:	dd c0       	rjmp	.+442    	; 0x14d0 <__vector_23+0x3c6>
    1316:	08 f4       	brcc	.+2      	; 0x131a <__vector_23+0x210>
    1318:	ba c0       	rjmp	.+372    	; 0x148e <__vector_23+0x384>
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	09 f4       	brne	.+2      	; 0x1320 <__vector_23+0x216>
    131e:	c6 c0       	rjmp	.+396    	; 0x14ac <__vector_23+0x3a2>
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	09 f0       	breq	.+2      	; 0x1326 <__vector_23+0x21c>
    1324:	b1 c0       	rjmp	.+354    	; 0x1488 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1326:	80 91 19 01 	lds	r24, 0x0119
    132a:	90 91 7c 01 	lds	r25, 0x017C
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	09 f4       	brne	.+2      	; 0x1334 <__vector_23+0x22a>
    1332:	e3 c0       	rjmp	.+454    	; 0x14fa <__vector_23+0x3f0>
    1334:	80 91 7b 01 	lds	r24, 0x017B
                        prev_motion = MOVE_STOP;
    1338:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_STRAIGHT;
    133c:	23 e0       	ldi	r18, 0x03	; 3
    133e:	20 93 19 01 	sts	0x0119, r18
                        kilo_straight_left = calibmsg->straight_left;
    1342:	80 93 87 01 	sts	0x0187, r24
                        kilo_straight_right = calibmsg->straight_right;
    1346:	90 93 88 01 	sts	0x0188, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    134a:	80 91 1b 01 	lds	r24, 0x011B
    134e:	86 30       	cpi	r24, 0x06	; 6
    1350:	09 f4       	brne	.+2      	; 0x1354 <__vector_23+0x24a>
    1352:	1b cf       	rjmp	.-458    	; 0x118a <__vector_23+0x80>
                motors_on();
    1354:	53 9a       	sbi	0x0a, 3	; 10
    1356:	23 9a       	sbi	0x04, 3	; 4
    1358:	10 92 b4 00 	sts	0x00B4, r1
    135c:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1360:	86 e0       	ldi	r24, 0x06	; 6
    1362:	80 93 1b 01 	sts	0x011B, r24
    1366:	11 cf       	rjmp	.-478    	; 0x118a <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1368:	80 91 1b 01 	lds	r24, 0x011B
    136c:	86 30       	cpi	r24, 0x06	; 6
    136e:	99 f0       	breq	.+38     	; 0x1396 <__vector_23+0x28c>
                motors_on();
    1370:	53 9a       	sbi	0x0a, 3	; 10
    1372:	23 9a       	sbi	0x04, 3	; 4
    1374:	10 92 b4 00 	sts	0x00B4, r1
    1378:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    137c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    137e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1380:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1382:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1384:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1386:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1388:	10 92 19 01 	sts	0x0119, r1
    138c:	10 92 1a 01 	sts	0x011A, r1
                kilo_state = MOVING;
    1390:	86 e0       	ldi	r24, 0x06	; 6
    1392:	80 93 1b 01 	sts	0x011B, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9c 01       	movw	r18, r24
    139c:	00 90 76 01 	lds	r0, 0x0176
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <__vector_23+0x29c>
    13a2:	22 0f       	add	r18, r18
    13a4:	33 1f       	adc	r19, r19
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <__vector_23+0x298>
    13aa:	80 91 85 01 	lds	r24, 0x0185
    13ae:	90 91 86 01 	lds	r25, 0x0186
    13b2:	82 23       	and	r24, r18
    13b4:	93 23       	and	r25, r19
    13b6:	89 2b       	or	r24, r25
    13b8:	09 f0       	breq	.+2      	; 0x13bc <__vector_23+0x2b2>
    13ba:	86 c0       	rjmp	.+268    	; 0x14c8 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    13bc:	10 92 19 01 	sts	0x0119, r1
    13c0:	e4 ce       	rjmp	.-568    	; 0x118a <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	80 93 1b 01 	sts	0x011B, r24
    13c8:	e0 ce       	rjmp	.-576    	; 0x118a <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    13ca:	e0 e0       	ldi	r30, 0x00	; 0
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    13d0:	80 91 6e 00 	lds	r24, 0x006E
    13d4:	8d 7f       	andi	r24, 0xFD	; 253
    13d6:	80 93 6e 00 	sts	0x006E, r24
    13da:	16 bc       	out	0x26, r1	; 38
            bootload();
    13dc:	e0 e0       	ldi	r30, 0x00	; 0
    13de:	f0 e7       	ldi	r31, 0x70	; 112
    13e0:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    13e2:	10 92 1b 01 	sts	0x011B, r1
    13e6:	d1 ce       	rjmp	.-606    	; 0x118a <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	80 93 1b 01 	sts	0x011B, r24
    13ee:	cd ce       	rjmp	.-614    	; 0x118a <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    13f0:	85 e0       	ldi	r24, 0x05	; 5
    13f2:	80 93 1b 01 	sts	0x011B, r24
    13f6:	c9 ce       	rjmp	.-622    	; 0x118a <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    13f8:	80 91 1b 01 	lds	r24, 0x011B
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__vector_23+0x2f8>
    1400:	c4 ce       	rjmp	.-632    	; 0x118a <__vector_23+0x80>
    1402:	80 91 1b 01 	lds	r24, 0x011B
    1406:	84 30       	cpi	r24, 0x04	; 4
    1408:	09 f4       	brne	.+2      	; 0x140c <__vector_23+0x302>
    140a:	bf ce       	rjmp	.-642    	; 0x118a <__vector_23+0x80>
                motors_on();
    140c:	53 9a       	sbi	0x0a, 3	; 10
    140e:	23 9a       	sbi	0x04, 3	; 4
    1410:	10 92 b4 00 	sts	0x00B4, r1
    1414:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	80 93 1b 01 	sts	0x011B, r24
    141e:	b5 ce       	rjmp	.-662    	; 0x118a <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1420:	80 91 1b 01 	lds	r24, 0x011B
    1424:	86 30       	cpi	r24, 0x06	; 6
    1426:	09 f0       	breq	.+2      	; 0x142a <__vector_23+0x320>
    1428:	b0 ce       	rjmp	.-672    	; 0x118a <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    142a:	60 91 85 01 	lds	r22, 0x0185
    142e:	80 eb       	ldi	r24, 0xB0	; 176
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1436:	60 91 86 01 	lds	r22, 0x0186
    143a:	81 eb       	ldi	r24, 0xB1	; 177
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1442:	60 91 89 01 	lds	r22, 0x0189
    1446:	85 e0       	ldi	r24, 0x05	; 5
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    144e:	60 91 75 01 	lds	r22, 0x0175
    1452:	89 e0       	ldi	r24, 0x09	; 9
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    145a:	60 91 87 01 	lds	r22, 0x0187
    145e:	8c e0       	ldi	r24, 0x0C	; 12
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1466:	60 91 88 01 	lds	r22, 0x0188
    146a:	84 e1       	ldi	r24, 0x14	; 20
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <eeprom_write_byte>
                        motors_off();
    1472:	53 98       	cbi	0x0a, 3	; 10
    1474:	23 98       	cbi	0x04, 3	; 4
    1476:	10 92 b4 00 	sts	0x00B4, r1
    147a:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 1b 01 	sts	0x011B, r24
    1484:	80 91 76 01 	lds	r24, 0x0176
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1488:	81 11       	cpse	r24, r1
    148a:	5f cf       	rjmp	.-322    	; 0x134a <__vector_23+0x240>
    148c:	7e ce       	rjmp	.-772    	; 0x118a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    148e:	88 23       	and	r24, r24
    1490:	39 f2       	breq	.-114    	; 0x1420 <__vector_23+0x316>
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	c9 f7       	brne	.-14     	; 0x1488 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1496:	80 91 77 01 	lds	r24, 0x0177
    149a:	90 91 78 01 	lds	r25, 0x0178
    149e:	90 93 86 01 	sts	0x0186, r25
    14a2:	80 93 85 01 	sts	0x0185, r24
                    cur_motion = MOVE_STOP;
    14a6:	10 92 19 01 	sts	0x0119, r1
    14aa:	4f cf       	rjmp	.-354    	; 0x134a <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14ac:	80 91 19 01 	lds	r24, 0x0119
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	71 f1       	breq	.+92     	; 0x1510 <__vector_23+0x406>
    14b4:	80 91 7a 01 	lds	r24, 0x017A
                        prev_motion = MOVE_STOP;
    14b8:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_RIGHT;
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_right = calibmsg->turn_right;
    14c2:	80 93 75 01 	sts	0x0175, r24
    14c6:	41 cf       	rjmp	.-382    	; 0x134a <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 19 01 	sts	0x0119, r24
    14ce:	5d ce       	rjmp	.-838    	; 0x118a <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14d0:	80 91 19 01 	lds	r24, 0x0119
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	51 f0       	breq	.+20     	; 0x14ec <__vector_23+0x3e2>
    14d8:	80 91 79 01 	lds	r24, 0x0179
                        prev_motion = MOVE_STOP;
    14dc:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_LEFT;
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_left = calibmsg->turn_left;
    14e6:	80 93 89 01 	sts	0x0189, r24
    14ea:	2f cf       	rjmp	.-418    	; 0x134a <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14ec:	80 91 79 01 	lds	r24, 0x0179
    14f0:	90 91 89 01 	lds	r25, 0x0189
    14f4:	89 13       	cpse	r24, r25
    14f6:	f2 cf       	rjmp	.-28     	; 0x14dc <__vector_23+0x3d2>
    14f8:	28 cf       	rjmp	.-432    	; 0x134a <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    14fa:	80 91 88 01 	lds	r24, 0x0188
    14fe:	98 13       	cpse	r25, r24
    1500:	19 cf       	rjmp	.-462    	; 0x1334 <__vector_23+0x22a>
    1502:	80 91 7b 01 	lds	r24, 0x017B
    1506:	20 91 87 01 	lds	r18, 0x0187
    150a:	82 13       	cpse	r24, r18
    150c:	15 cf       	rjmp	.-470    	; 0x1338 <__vector_23+0x22e>
    150e:	1d cf       	rjmp	.-454    	; 0x134a <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1510:	80 91 7a 01 	lds	r24, 0x017A
    1514:	90 91 75 01 	lds	r25, 0x0175
    1518:	89 13       	cpse	r24, r25
    151a:	ce cf       	rjmp	.-100    	; 0x14b8 <__vector_23+0x3ae>
    151c:	16 cf       	rjmp	.-468    	; 0x134a <__vector_23+0x240>

0000151e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    151e:	fc 01       	movw	r30, r24
    1520:	ac 01       	movw	r20, r24
    1522:	46 5f       	subi	r20, 0xF6	; 246
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    152a:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    152c:	82 27       	eor	r24, r18
    152e:	08 2e       	mov	r0, r24
    1530:	82 95       	swap	r24
    1532:	80 7f       	andi	r24, 0xF0	; 240
    1534:	80 25       	eor	r24, r0
    1536:	09 2e       	mov	r0, r25
    1538:	98 2f       	mov	r25, r24
    153a:	82 95       	swap	r24
    153c:	8f 70       	andi	r24, 0x0F	; 15
    153e:	08 26       	eor	r0, r24
    1540:	86 95       	lsr	r24
    1542:	98 27       	eor	r25, r24
    1544:	89 27       	eor	r24, r25
    1546:	88 0f       	add	r24, r24
    1548:	88 0f       	add	r24, r24
    154a:	88 0f       	add	r24, r24
    154c:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    154e:	e4 17       	cp	r30, r20
    1550:	f5 07       	cpc	r31, r21
    1552:	59 f7       	brne	.-42     	; 0x152a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1554:	08 95       	ret

00001556 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1556:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1558:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    155a:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    155c:	20 91 49 01 	lds	r18, 0x0149
    or tmpreg1, ddrreg
    1560:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1562:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1564:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1566:	30 91 49 01 	lds	r19, 0x0149
    156a:	20 30       	cpi	r18, 0x00	; 0
    156c:	29 f0       	breq	.+10     	; 0x1578 <message_send+0x22>
    156e:	00 00       	nop
    1570:	25 b1       	in	r18, 0x05	; 5
    1572:	23 2b       	or	r18, r19
    1574:	25 b9       	out	0x05, r18	; 5
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <message_send+0x2a>
    1578:	00 00       	nop
    157a:	00 00       	nop
    157c:	00 00       	nop
    157e:	00 c0       	rjmp	.+0      	; 0x1580 <message_send+0x2a>
    1580:	00 00       	nop
    1582:	00 00       	nop
    1584:	00 00       	nop
    1586:	30 95       	com	r19
    1588:	25 b1       	in	r18, 0x05	; 5
    158a:	23 23       	and	r18, r19
    158c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    158e:	2e ea       	ldi	r18, 0xAE	; 174
    1590:	2a 95       	dec	r18
    1592:	f1 f7       	brne	.-4      	; 0x1590 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1594:	2b ee       	ldi	r18, 0xEB	; 235

00001596 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1596:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1598:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    159a:	0a c0       	rjmp	.+20     	; 0x15b0 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    159c:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    159e:	30 91 49 01 	lds	r19, 0x0149
    com tmpreg2
    15a2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15a4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15a6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15a8:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15aa:	0f be       	out	0x3f, r0	; 63
    return 0
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	08 95       	ret

000015b0 <nocollision>:
nocollision:
    nop
    15b0:	00 00       	nop
    dec tmpreg1
    15b2:	2a 95       	dec	r18
    brne checkcollision
    15b4:	81 f7       	brne	.-32     	; 0x1596 <checkcollision>

    ldi tmpreg1, 0x01
    15b6:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15b8:	30 91 49 01 	lds	r19, 0x0149
    15bc:	20 30       	cpi	r18, 0x00	; 0
    15be:	29 f0       	breq	.+10     	; 0x15ca <nocollision+0x1a>
    15c0:	00 00       	nop
    15c2:	25 b1       	in	r18, 0x05	; 5
    15c4:	23 2b       	or	r18, r19
    15c6:	25 b9       	out	0x05, r18	; 5
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <nocollision+0x22>
    15ca:	00 00       	nop
    15cc:	00 00       	nop
    15ce:	00 00       	nop
    15d0:	00 c0       	rjmp	.+0      	; 0x15d2 <nocollision+0x22>
    15d2:	00 00       	nop
    15d4:	00 00       	nop
    15d6:	00 00       	nop
    15d8:	30 95       	com	r19
    15da:	25 b1       	in	r18, 0x05	; 5
    15dc:	23 23       	and	r18, r19
    15de:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    15e0:	00 00       	nop
    15e2:	24 e5       	ldi	r18, 0x54	; 84
    15e4:	2a 95       	dec	r18
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    15e8:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    15ea:	8c e0       	ldi	r24, 0x0C	; 12

000015ec <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    15ec:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    15f0:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    15f2:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    15f4:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    15f6:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    15f8:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    15fc:	50 e0       	ldi	r21, 0x00	; 0

000015fe <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    15fe:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1600:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1602:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1604:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1606:	30 91 49 01 	lds	r19, 0x0149
    160a:	20 30       	cpi	r18, 0x00	; 0
    160c:	29 f0       	breq	.+10     	; 0x1618 <sendbit+0x1a>
    160e:	00 00       	nop
    1610:	25 b1       	in	r18, 0x05	; 5
    1612:	23 2b       	or	r18, r19
    1614:	25 b9       	out	0x05, r18	; 5
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <sendbit+0x22>
    1618:	00 00       	nop
    161a:	00 00       	nop
    161c:	00 00       	nop
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <sendbit+0x22>
    1620:	00 00       	nop
    1622:	00 00       	nop
    1624:	00 00       	nop
    1626:	30 95       	com	r19
    1628:	25 b1       	in	r18, 0x05	; 5
    162a:	23 23       	and	r18, r19
    162c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    162e:	00 00       	nop
    1630:	21 e5       	ldi	r18, 0x51	; 81
    1632:	2a 95       	dec	r18
    1634:	f1 f7       	brne	.-4      	; 0x1632 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1636:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1638:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    163a:	9a 95       	dec	r25
    brne sendbit
    163c:	01 f7       	brne	.-64     	; 0x15fe <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    163e:	8a 95       	dec	r24
    brne sendbyte
    1640:	a9 f6       	brne	.-86     	; 0x15ec <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1642:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1644:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1646:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1648:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    164a:	30 91 49 01 	lds	r19, 0x0149
    com tmpreg2
    164e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1650:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1652:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1654:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1656:	0f be       	out	0x3f, r0	; 63
    return 1
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	08 95       	ret

0000165c <main>:
    message_sent = 1;
}

int main()
{
    kilo_init();
    165c:	0e 94 bf 01 	call	0x37e	; 0x37e <kilo_init>
    kilo_message_tx = message_tx;
    1660:	81 e7       	ldi	r24, 0x71	; 113
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	90 93 04 01 	sts	0x0104, r25
    1668:	80 93 03 01 	sts	0x0103, r24
    kilo_message_tx_success = message_tx_succes;
    166c:	84 e7       	ldi	r24, 0x74	; 116
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	90 93 02 01 	sts	0x0102, r25
    1674:	80 93 01 01 	sts	0x0101, r24
    kilo_start(setup, loop);
    1678:	6f e9       	ldi	r22, 0x9F	; 159
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	8b e7       	ldi	r24, 0x7B	; 123
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 bb 02 	call	0x576	; 0x576 <kilo_start>

    return 0;
}
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	08 95       	ret

0000168a <__divmodhi4>:
    168a:	97 fb       	bst	r25, 7
    168c:	07 2e       	mov	r0, r23
    168e:	16 f4       	brtc	.+4      	; 0x1694 <__divmodhi4+0xa>
    1690:	00 94       	com	r0
    1692:	07 d0       	rcall	.+14     	; 0x16a2 <__divmodhi4_neg1>
    1694:	77 fd       	sbrc	r23, 7
    1696:	09 d0       	rcall	.+18     	; 0x16aa <__divmodhi4_neg2>
    1698:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__udivmodhi4>
    169c:	07 fc       	sbrc	r0, 7
    169e:	05 d0       	rcall	.+10     	; 0x16aa <__divmodhi4_neg2>
    16a0:	3e f4       	brtc	.+14     	; 0x16b0 <__divmodhi4_exit>

000016a2 <__divmodhi4_neg1>:
    16a2:	90 95       	com	r25
    16a4:	81 95       	neg	r24
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	08 95       	ret

000016aa <__divmodhi4_neg2>:
    16aa:	70 95       	com	r23
    16ac:	61 95       	neg	r22
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255

000016b0 <__divmodhi4_exit>:
    16b0:	08 95       	ret

000016b2 <__tablejump2__>:
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	05 90       	lpm	r0, Z+
    16b8:	f4 91       	lpm	r31, Z
    16ba:	e0 2d       	mov	r30, r0
    16bc:	09 94       	ijmp

000016be <__umulhisi3>:
    16be:	a2 9f       	mul	r26, r18
    16c0:	b0 01       	movw	r22, r0
    16c2:	b3 9f       	mul	r27, r19
    16c4:	c0 01       	movw	r24, r0
    16c6:	a3 9f       	mul	r26, r19
    16c8:	70 0d       	add	r23, r0
    16ca:	81 1d       	adc	r24, r1
    16cc:	11 24       	eor	r1, r1
    16ce:	91 1d       	adc	r25, r1
    16d0:	b2 9f       	mul	r27, r18
    16d2:	70 0d       	add	r23, r0
    16d4:	81 1d       	adc	r24, r1
    16d6:	11 24       	eor	r1, r1
    16d8:	91 1d       	adc	r25, r1
    16da:	08 95       	ret

000016dc <__udivmodhi4>:
    16dc:	aa 1b       	sub	r26, r26
    16de:	bb 1b       	sub	r27, r27
    16e0:	51 e1       	ldi	r21, 0x11	; 17
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <__udivmodhi4_ep>

000016e4 <__udivmodhi4_loop>:
    16e4:	aa 1f       	adc	r26, r26
    16e6:	bb 1f       	adc	r27, r27
    16e8:	a6 17       	cp	r26, r22
    16ea:	b7 07       	cpc	r27, r23
    16ec:	10 f0       	brcs	.+4      	; 0x16f2 <__udivmodhi4_ep>
    16ee:	a6 1b       	sub	r26, r22
    16f0:	b7 0b       	sbc	r27, r23

000016f2 <__udivmodhi4_ep>:
    16f2:	88 1f       	adc	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	5a 95       	dec	r21
    16f8:	a9 f7       	brne	.-22     	; 0x16e4 <__udivmodhi4_loop>
    16fa:	80 95       	com	r24
    16fc:	90 95       	com	r25
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	08 95       	ret

00001704 <__subsf3>:
    1704:	50 58       	subi	r21, 0x80	; 128

00001706 <__addsf3>:
    1706:	bb 27       	eor	r27, r27
    1708:	aa 27       	eor	r26, r26
    170a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__addsf3x>
    170e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__fp_round>
    1712:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__fp_pscA>
    1716:	38 f0       	brcs	.+14     	; 0x1726 <__addsf3+0x20>
    1718:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fp_pscB>
    171c:	20 f0       	brcs	.+8      	; 0x1726 <__addsf3+0x20>
    171e:	39 f4       	brne	.+14     	; 0x172e <__addsf3+0x28>
    1720:	9f 3f       	cpi	r25, 0xFF	; 255
    1722:	19 f4       	brne	.+6      	; 0x172a <__addsf3+0x24>
    1724:	26 f4       	brtc	.+8      	; 0x172e <__addsf3+0x28>
    1726:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__fp_nan>
    172a:	0e f4       	brtc	.+2      	; 0x172e <__addsf3+0x28>
    172c:	e0 95       	com	r30
    172e:	e7 fb       	bst	r30, 7
    1730:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_inf>

00001734 <__addsf3x>:
    1734:	e9 2f       	mov	r30, r25
    1736:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fp_split3>
    173a:	58 f3       	brcs	.-42     	; 0x1712 <__addsf3+0xc>
    173c:	ba 17       	cp	r27, r26
    173e:	62 07       	cpc	r22, r18
    1740:	73 07       	cpc	r23, r19
    1742:	84 07       	cpc	r24, r20
    1744:	95 07       	cpc	r25, r21
    1746:	20 f0       	brcs	.+8      	; 0x1750 <__addsf3x+0x1c>
    1748:	79 f4       	brne	.+30     	; 0x1768 <__addsf3x+0x34>
    174a:	a6 f5       	brtc	.+104    	; 0x17b4 <__addsf3x+0x80>
    174c:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_zero>
    1750:	0e f4       	brtc	.+2      	; 0x1754 <__addsf3x+0x20>
    1752:	e0 95       	com	r30
    1754:	0b 2e       	mov	r0, r27
    1756:	ba 2f       	mov	r27, r26
    1758:	a0 2d       	mov	r26, r0
    175a:	0b 01       	movw	r0, r22
    175c:	b9 01       	movw	r22, r18
    175e:	90 01       	movw	r18, r0
    1760:	0c 01       	movw	r0, r24
    1762:	ca 01       	movw	r24, r20
    1764:	a0 01       	movw	r20, r0
    1766:	11 24       	eor	r1, r1
    1768:	ff 27       	eor	r31, r31
    176a:	59 1b       	sub	r21, r25
    176c:	99 f0       	breq	.+38     	; 0x1794 <__addsf3x+0x60>
    176e:	59 3f       	cpi	r21, 0xF9	; 249
    1770:	50 f4       	brcc	.+20     	; 0x1786 <__addsf3x+0x52>
    1772:	50 3e       	cpi	r21, 0xE0	; 224
    1774:	68 f1       	brcs	.+90     	; 0x17d0 <__addsf3x+0x9c>
    1776:	1a 16       	cp	r1, r26
    1778:	f0 40       	sbci	r31, 0x00	; 0
    177a:	a2 2f       	mov	r26, r18
    177c:	23 2f       	mov	r18, r19
    177e:	34 2f       	mov	r19, r20
    1780:	44 27       	eor	r20, r20
    1782:	58 5f       	subi	r21, 0xF8	; 248
    1784:	f3 cf       	rjmp	.-26     	; 0x176c <__addsf3x+0x38>
    1786:	46 95       	lsr	r20
    1788:	37 95       	ror	r19
    178a:	27 95       	ror	r18
    178c:	a7 95       	ror	r26
    178e:	f0 40       	sbci	r31, 0x00	; 0
    1790:	53 95       	inc	r21
    1792:	c9 f7       	brne	.-14     	; 0x1786 <__addsf3x+0x52>
    1794:	7e f4       	brtc	.+30     	; 0x17b4 <__addsf3x+0x80>
    1796:	1f 16       	cp	r1, r31
    1798:	ba 0b       	sbc	r27, r26
    179a:	62 0b       	sbc	r22, r18
    179c:	73 0b       	sbc	r23, r19
    179e:	84 0b       	sbc	r24, r20
    17a0:	ba f0       	brmi	.+46     	; 0x17d0 <__addsf3x+0x9c>
    17a2:	91 50       	subi	r25, 0x01	; 1
    17a4:	a1 f0       	breq	.+40     	; 0x17ce <__addsf3x+0x9a>
    17a6:	ff 0f       	add	r31, r31
    17a8:	bb 1f       	adc	r27, r27
    17aa:	66 1f       	adc	r22, r22
    17ac:	77 1f       	adc	r23, r23
    17ae:	88 1f       	adc	r24, r24
    17b0:	c2 f7       	brpl	.-16     	; 0x17a2 <__addsf3x+0x6e>
    17b2:	0e c0       	rjmp	.+28     	; 0x17d0 <__addsf3x+0x9c>
    17b4:	ba 0f       	add	r27, r26
    17b6:	62 1f       	adc	r22, r18
    17b8:	73 1f       	adc	r23, r19
    17ba:	84 1f       	adc	r24, r20
    17bc:	48 f4       	brcc	.+18     	; 0x17d0 <__addsf3x+0x9c>
    17be:	87 95       	ror	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b7 95       	ror	r27
    17c6:	f7 95       	ror	r31
    17c8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <__addsf3x+0x9a>
    17cc:	b0 cf       	rjmp	.-160    	; 0x172e <__addsf3+0x28>
    17ce:	93 95       	inc	r25
    17d0:	88 0f       	add	r24, r24
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <__addsf3x+0xa2>
    17d4:	99 27       	eor	r25, r25
    17d6:	ee 0f       	add	r30, r30
    17d8:	97 95       	ror	r25
    17da:	87 95       	ror	r24
    17dc:	08 95       	ret

000017de <__divsf3>:
    17de:	0e 94 03 0c 	call	0x1806	; 0x1806 <__divsf3x>
    17e2:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__fp_round>
    17e6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fp_pscB>
    17ea:	58 f0       	brcs	.+22     	; 0x1802 <__divsf3+0x24>
    17ec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__fp_pscA>
    17f0:	40 f0       	brcs	.+16     	; 0x1802 <__divsf3+0x24>
    17f2:	29 f4       	brne	.+10     	; 0x17fe <__divsf3+0x20>
    17f4:	5f 3f       	cpi	r21, 0xFF	; 255
    17f6:	29 f0       	breq	.+10     	; 0x1802 <__divsf3+0x24>
    17f8:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_inf>
    17fc:	51 11       	cpse	r21, r1
    17fe:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_szero>
    1802:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__fp_nan>

00001806 <__divsf3x>:
    1806:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fp_split3>
    180a:	68 f3       	brcs	.-38     	; 0x17e6 <__divsf3+0x8>

0000180c <__divsf3_pse>:
    180c:	99 23       	and	r25, r25
    180e:	b1 f3       	breq	.-20     	; 0x17fc <__divsf3+0x1e>
    1810:	55 23       	and	r21, r21
    1812:	91 f3       	breq	.-28     	; 0x17f8 <__divsf3+0x1a>
    1814:	95 1b       	sub	r25, r21
    1816:	55 0b       	sbc	r21, r21
    1818:	bb 27       	eor	r27, r27
    181a:	aa 27       	eor	r26, r26
    181c:	62 17       	cp	r22, r18
    181e:	73 07       	cpc	r23, r19
    1820:	84 07       	cpc	r24, r20
    1822:	38 f0       	brcs	.+14     	; 0x1832 <__divsf3_pse+0x26>
    1824:	9f 5f       	subi	r25, 0xFF	; 255
    1826:	5f 4f       	sbci	r21, 0xFF	; 255
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	44 1f       	adc	r20, r20
    182e:	aa 1f       	adc	r26, r26
    1830:	a9 f3       	breq	.-22     	; 0x181c <__divsf3_pse+0x10>
    1832:	35 d0       	rcall	.+106    	; 0x189e <__divsf3_pse+0x92>
    1834:	0e 2e       	mov	r0, r30
    1836:	3a f0       	brmi	.+14     	; 0x1846 <__divsf3_pse+0x3a>
    1838:	e0 e8       	ldi	r30, 0x80	; 128
    183a:	32 d0       	rcall	.+100    	; 0x18a0 <__divsf3_pse+0x94>
    183c:	91 50       	subi	r25, 0x01	; 1
    183e:	50 40       	sbci	r21, 0x00	; 0
    1840:	e6 95       	lsr	r30
    1842:	00 1c       	adc	r0, r0
    1844:	ca f7       	brpl	.-14     	; 0x1838 <__divsf3_pse+0x2c>
    1846:	2b d0       	rcall	.+86     	; 0x189e <__divsf3_pse+0x92>
    1848:	fe 2f       	mov	r31, r30
    184a:	29 d0       	rcall	.+82     	; 0x189e <__divsf3_pse+0x92>
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	bb 1f       	adc	r27, r27
    1854:	26 17       	cp	r18, r22
    1856:	37 07       	cpc	r19, r23
    1858:	48 07       	cpc	r20, r24
    185a:	ab 07       	cpc	r26, r27
    185c:	b0 e8       	ldi	r27, 0x80	; 128
    185e:	09 f0       	breq	.+2      	; 0x1862 <__divsf3_pse+0x56>
    1860:	bb 0b       	sbc	r27, r27
    1862:	80 2d       	mov	r24, r0
    1864:	bf 01       	movw	r22, r30
    1866:	ff 27       	eor	r31, r31
    1868:	93 58       	subi	r25, 0x83	; 131
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	3a f0       	brmi	.+14     	; 0x187c <__divsf3_pse+0x70>
    186e:	9e 3f       	cpi	r25, 0xFE	; 254
    1870:	51 05       	cpc	r21, r1
    1872:	78 f0       	brcs	.+30     	; 0x1892 <__divsf3_pse+0x86>
    1874:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_inf>
    1878:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_szero>
    187c:	5f 3f       	cpi	r21, 0xFF	; 255
    187e:	e4 f3       	brlt	.-8      	; 0x1878 <__divsf3_pse+0x6c>
    1880:	98 3e       	cpi	r25, 0xE8	; 232
    1882:	d4 f3       	brlt	.-12     	; 0x1878 <__divsf3_pse+0x6c>
    1884:	86 95       	lsr	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b7 95       	ror	r27
    188c:	f7 95       	ror	r31
    188e:	9f 5f       	subi	r25, 0xFF	; 255
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__divsf3_pse+0x78>
    1892:	88 0f       	add	r24, r24
    1894:	91 1d       	adc	r25, r1
    1896:	96 95       	lsr	r25
    1898:	87 95       	ror	r24
    189a:	97 f9       	bld	r25, 7
    189c:	08 95       	ret
    189e:	e1 e0       	ldi	r30, 0x01	; 1
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	bb 1f       	adc	r27, r27
    18a8:	62 17       	cp	r22, r18
    18aa:	73 07       	cpc	r23, r19
    18ac:	84 07       	cpc	r24, r20
    18ae:	ba 07       	cpc	r27, r26
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <__divsf3_pse+0xae>
    18b2:	62 1b       	sub	r22, r18
    18b4:	73 0b       	sbc	r23, r19
    18b6:	84 0b       	sbc	r24, r20
    18b8:	ba 0b       	sbc	r27, r26
    18ba:	ee 1f       	adc	r30, r30
    18bc:	88 f7       	brcc	.-30     	; 0x18a0 <__divsf3_pse+0x94>
    18be:	e0 95       	com	r30
    18c0:	08 95       	ret

000018c2 <__fixsfsi>:
    18c2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
    18c6:	68 94       	set
    18c8:	b1 11       	cpse	r27, r1
    18ca:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_szero>
    18ce:	08 95       	ret

000018d0 <__fixunssfsi>:
    18d0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__fp_splitA>
    18d4:	88 f0       	brcs	.+34     	; 0x18f8 <__fixunssfsi+0x28>
    18d6:	9f 57       	subi	r25, 0x7F	; 127
    18d8:	98 f0       	brcs	.+38     	; 0x1900 <__fixunssfsi+0x30>
    18da:	b9 2f       	mov	r27, r25
    18dc:	99 27       	eor	r25, r25
    18de:	b7 51       	subi	r27, 0x17	; 23
    18e0:	b0 f0       	brcs	.+44     	; 0x190e <__fixunssfsi+0x3e>
    18e2:	e1 f0       	breq	.+56     	; 0x191c <__fixunssfsi+0x4c>
    18e4:	66 0f       	add	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	1a f0       	brmi	.+6      	; 0x18f4 <__fixunssfsi+0x24>
    18ee:	ba 95       	dec	r27
    18f0:	c9 f7       	brne	.-14     	; 0x18e4 <__fixunssfsi+0x14>
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <__fixunssfsi+0x4c>
    18f4:	b1 30       	cpi	r27, 0x01	; 1
    18f6:	91 f0       	breq	.+36     	; 0x191c <__fixunssfsi+0x4c>
    18f8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__fp_zero>
    18fc:	b1 e0       	ldi	r27, 0x01	; 1
    18fe:	08 95       	ret
    1900:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_zero>
    1904:	67 2f       	mov	r22, r23
    1906:	78 2f       	mov	r23, r24
    1908:	88 27       	eor	r24, r24
    190a:	b8 5f       	subi	r27, 0xF8	; 248
    190c:	39 f0       	breq	.+14     	; 0x191c <__fixunssfsi+0x4c>
    190e:	b9 3f       	cpi	r27, 0xF9	; 249
    1910:	cc f3       	brlt	.-14     	; 0x1904 <__fixunssfsi+0x34>
    1912:	86 95       	lsr	r24
    1914:	77 95       	ror	r23
    1916:	67 95       	ror	r22
    1918:	b3 95       	inc	r27
    191a:	d9 f7       	brne	.-10     	; 0x1912 <__fixunssfsi+0x42>
    191c:	3e f4       	brtc	.+14     	; 0x192c <__fixunssfsi+0x5c>
    191e:	90 95       	com	r25
    1920:	80 95       	com	r24
    1922:	70 95       	com	r23
    1924:	61 95       	neg	r22
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	8f 4f       	sbci	r24, 0xFF	; 255
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	08 95       	ret

0000192e <__floatunsisf>:
    192e:	e8 94       	clt
    1930:	09 c0       	rjmp	.+18     	; 0x1944 <__floatsisf+0x12>

00001932 <__floatsisf>:
    1932:	97 fb       	bst	r25, 7
    1934:	3e f4       	brtc	.+14     	; 0x1944 <__floatsisf+0x12>
    1936:	90 95       	com	r25
    1938:	80 95       	com	r24
    193a:	70 95       	com	r23
    193c:	61 95       	neg	r22
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	8f 4f       	sbci	r24, 0xFF	; 255
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	99 23       	and	r25, r25
    1946:	a9 f0       	breq	.+42     	; 0x1972 <__floatsisf+0x40>
    1948:	f9 2f       	mov	r31, r25
    194a:	96 e9       	ldi	r25, 0x96	; 150
    194c:	bb 27       	eor	r27, r27
    194e:	93 95       	inc	r25
    1950:	f6 95       	lsr	r31
    1952:	87 95       	ror	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	b7 95       	ror	r27
    195a:	f1 11       	cpse	r31, r1
    195c:	f8 cf       	rjmp	.-16     	; 0x194e <__floatsisf+0x1c>
    195e:	fa f4       	brpl	.+62     	; 0x199e <__floatsisf+0x6c>
    1960:	bb 0f       	add	r27, r27
    1962:	11 f4       	brne	.+4      	; 0x1968 <__floatsisf+0x36>
    1964:	60 ff       	sbrs	r22, 0
    1966:	1b c0       	rjmp	.+54     	; 0x199e <__floatsisf+0x6c>
    1968:	6f 5f       	subi	r22, 0xFF	; 255
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	8f 4f       	sbci	r24, 0xFF	; 255
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	16 c0       	rjmp	.+44     	; 0x199e <__floatsisf+0x6c>
    1972:	88 23       	and	r24, r24
    1974:	11 f0       	breq	.+4      	; 0x197a <__floatsisf+0x48>
    1976:	96 e9       	ldi	r25, 0x96	; 150
    1978:	11 c0       	rjmp	.+34     	; 0x199c <__floatsisf+0x6a>
    197a:	77 23       	and	r23, r23
    197c:	21 f0       	breq	.+8      	; 0x1986 <__floatsisf+0x54>
    197e:	9e e8       	ldi	r25, 0x8E	; 142
    1980:	87 2f       	mov	r24, r23
    1982:	76 2f       	mov	r23, r22
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <__floatsisf+0x5e>
    1986:	66 23       	and	r22, r22
    1988:	71 f0       	breq	.+28     	; 0x19a6 <__floatsisf+0x74>
    198a:	96 e8       	ldi	r25, 0x86	; 134
    198c:	86 2f       	mov	r24, r22
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	2a f0       	brmi	.+10     	; 0x199e <__floatsisf+0x6c>
    1994:	9a 95       	dec	r25
    1996:	66 0f       	add	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	da f7       	brpl	.-10     	; 0x1994 <__floatsisf+0x62>
    199e:	88 0f       	add	r24, r24
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	97 f9       	bld	r25, 7
    19a6:	08 95       	ret

000019a8 <__fp_inf>:
    19a8:	97 f9       	bld	r25, 7
    19aa:	9f 67       	ori	r25, 0x7F	; 127
    19ac:	80 e8       	ldi	r24, 0x80	; 128
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	08 95       	ret

000019b4 <__fp_nan>:
    19b4:	9f ef       	ldi	r25, 0xFF	; 255
    19b6:	80 ec       	ldi	r24, 0xC0	; 192
    19b8:	08 95       	ret

000019ba <__fp_pscA>:
    19ba:	00 24       	eor	r0, r0
    19bc:	0a 94       	dec	r0
    19be:	16 16       	cp	r1, r22
    19c0:	17 06       	cpc	r1, r23
    19c2:	18 06       	cpc	r1, r24
    19c4:	09 06       	cpc	r0, r25
    19c6:	08 95       	ret

000019c8 <__fp_pscB>:
    19c8:	00 24       	eor	r0, r0
    19ca:	0a 94       	dec	r0
    19cc:	12 16       	cp	r1, r18
    19ce:	13 06       	cpc	r1, r19
    19d0:	14 06       	cpc	r1, r20
    19d2:	05 06       	cpc	r0, r21
    19d4:	08 95       	ret

000019d6 <__fp_round>:
    19d6:	09 2e       	mov	r0, r25
    19d8:	03 94       	inc	r0
    19da:	00 0c       	add	r0, r0
    19dc:	11 f4       	brne	.+4      	; 0x19e2 <__fp_round+0xc>
    19de:	88 23       	and	r24, r24
    19e0:	52 f0       	brmi	.+20     	; 0x19f6 <__fp_round+0x20>
    19e2:	bb 0f       	add	r27, r27
    19e4:	40 f4       	brcc	.+16     	; 0x19f6 <__fp_round+0x20>
    19e6:	bf 2b       	or	r27, r31
    19e8:	11 f4       	brne	.+4      	; 0x19ee <__fp_round+0x18>
    19ea:	60 ff       	sbrs	r22, 0
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <__fp_round+0x20>
    19ee:	6f 5f       	subi	r22, 0xFF	; 255
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	8f 4f       	sbci	r24, 0xFF	; 255
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	08 95       	ret

000019f8 <__fp_split3>:
    19f8:	57 fd       	sbrc	r21, 7
    19fa:	90 58       	subi	r25, 0x80	; 128
    19fc:	44 0f       	add	r20, r20
    19fe:	55 1f       	adc	r21, r21
    1a00:	59 f0       	breq	.+22     	; 0x1a18 <__fp_splitA+0x10>
    1a02:	5f 3f       	cpi	r21, 0xFF	; 255
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <__fp_splitA+0x1a>
    1a06:	47 95       	ror	r20

00001a08 <__fp_splitA>:
    1a08:	88 0f       	add	r24, r24
    1a0a:	97 fb       	bst	r25, 7
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <__fp_splitA+0x20>
    1a10:	9f 3f       	cpi	r25, 0xFF	; 255
    1a12:	79 f0       	breq	.+30     	; 0x1a32 <__fp_splitA+0x2a>
    1a14:	87 95       	ror	r24
    1a16:	08 95       	ret
    1a18:	12 16       	cp	r1, r18
    1a1a:	13 06       	cpc	r1, r19
    1a1c:	14 06       	cpc	r1, r20
    1a1e:	55 1f       	adc	r21, r21
    1a20:	f2 cf       	rjmp	.-28     	; 0x1a06 <__fp_split3+0xe>
    1a22:	46 95       	lsr	r20
    1a24:	f1 df       	rcall	.-30     	; 0x1a08 <__fp_splitA>
    1a26:	08 c0       	rjmp	.+16     	; 0x1a38 <__fp_splitA+0x30>
    1a28:	16 16       	cp	r1, r22
    1a2a:	17 06       	cpc	r1, r23
    1a2c:	18 06       	cpc	r1, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	f1 cf       	rjmp	.-30     	; 0x1a14 <__fp_splitA+0xc>
    1a32:	86 95       	lsr	r24
    1a34:	71 05       	cpc	r23, r1
    1a36:	61 05       	cpc	r22, r1
    1a38:	08 94       	sec
    1a3a:	08 95       	ret

00001a3c <__fp_zero>:
    1a3c:	e8 94       	clt

00001a3e <__fp_szero>:
    1a3e:	bb 27       	eor	r27, r27
    1a40:	66 27       	eor	r22, r22
    1a42:	77 27       	eor	r23, r23
    1a44:	cb 01       	movw	r24, r22
    1a46:	97 f9       	bld	r25, 7
    1a48:	08 95       	ret

00001a4a <__mulsf3>:
    1a4a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__mulsf3x>
    1a4e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__fp_round>
    1a52:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__fp_pscA>
    1a56:	38 f0       	brcs	.+14     	; 0x1a66 <__mulsf3+0x1c>
    1a58:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fp_pscB>
    1a5c:	20 f0       	brcs	.+8      	; 0x1a66 <__mulsf3+0x1c>
    1a5e:	95 23       	and	r25, r21
    1a60:	11 f0       	breq	.+4      	; 0x1a66 <__mulsf3+0x1c>
    1a62:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_inf>
    1a66:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__fp_nan>
    1a6a:	11 24       	eor	r1, r1
    1a6c:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_szero>

00001a70 <__mulsf3x>:
    1a70:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fp_split3>
    1a74:	70 f3       	brcs	.-36     	; 0x1a52 <__mulsf3+0x8>

00001a76 <__mulsf3_pse>:
    1a76:	95 9f       	mul	r25, r21
    1a78:	c1 f3       	breq	.-16     	; 0x1a6a <__mulsf3+0x20>
    1a7a:	95 0f       	add	r25, r21
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	55 1f       	adc	r21, r21
    1a80:	62 9f       	mul	r22, r18
    1a82:	f0 01       	movw	r30, r0
    1a84:	72 9f       	mul	r23, r18
    1a86:	bb 27       	eor	r27, r27
    1a88:	f0 0d       	add	r31, r0
    1a8a:	b1 1d       	adc	r27, r1
    1a8c:	63 9f       	mul	r22, r19
    1a8e:	aa 27       	eor	r26, r26
    1a90:	f0 0d       	add	r31, r0
    1a92:	b1 1d       	adc	r27, r1
    1a94:	aa 1f       	adc	r26, r26
    1a96:	64 9f       	mul	r22, r20
    1a98:	66 27       	eor	r22, r22
    1a9a:	b0 0d       	add	r27, r0
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	66 1f       	adc	r22, r22
    1aa0:	82 9f       	mul	r24, r18
    1aa2:	22 27       	eor	r18, r18
    1aa4:	b0 0d       	add	r27, r0
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	62 1f       	adc	r22, r18
    1aaa:	73 9f       	mul	r23, r19
    1aac:	b0 0d       	add	r27, r0
    1aae:	a1 1d       	adc	r26, r1
    1ab0:	62 1f       	adc	r22, r18
    1ab2:	83 9f       	mul	r24, r19
    1ab4:	a0 0d       	add	r26, r0
    1ab6:	61 1d       	adc	r22, r1
    1ab8:	22 1f       	adc	r18, r18
    1aba:	74 9f       	mul	r23, r20
    1abc:	33 27       	eor	r19, r19
    1abe:	a0 0d       	add	r26, r0
    1ac0:	61 1d       	adc	r22, r1
    1ac2:	23 1f       	adc	r18, r19
    1ac4:	84 9f       	mul	r24, r20
    1ac6:	60 0d       	add	r22, r0
    1ac8:	21 1d       	adc	r18, r1
    1aca:	82 2f       	mov	r24, r18
    1acc:	76 2f       	mov	r23, r22
    1ace:	6a 2f       	mov	r22, r26
    1ad0:	11 24       	eor	r1, r1
    1ad2:	9f 57       	subi	r25, 0x7F	; 127
    1ad4:	50 40       	sbci	r21, 0x00	; 0
    1ad6:	9a f0       	brmi	.+38     	; 0x1afe <__mulsf3_pse+0x88>
    1ad8:	f1 f0       	breq	.+60     	; 0x1b16 <__mulsf3_pse+0xa0>
    1ada:	88 23       	and	r24, r24
    1adc:	4a f0       	brmi	.+18     	; 0x1af0 <__mulsf3_pse+0x7a>
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	bb 1f       	adc	r27, r27
    1ae4:	66 1f       	adc	r22, r22
    1ae6:	77 1f       	adc	r23, r23
    1ae8:	88 1f       	adc	r24, r24
    1aea:	91 50       	subi	r25, 0x01	; 1
    1aec:	50 40       	sbci	r21, 0x00	; 0
    1aee:	a9 f7       	brne	.-22     	; 0x1ada <__mulsf3_pse+0x64>
    1af0:	9e 3f       	cpi	r25, 0xFE	; 254
    1af2:	51 05       	cpc	r21, r1
    1af4:	80 f0       	brcs	.+32     	; 0x1b16 <__mulsf3_pse+0xa0>
    1af6:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_inf>
    1afa:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_szero>
    1afe:	5f 3f       	cpi	r21, 0xFF	; 255
    1b00:	e4 f3       	brlt	.-8      	; 0x1afa <__mulsf3_pse+0x84>
    1b02:	98 3e       	cpi	r25, 0xE8	; 232
    1b04:	d4 f3       	brlt	.-12     	; 0x1afa <__mulsf3_pse+0x84>
    1b06:	86 95       	lsr	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	b7 95       	ror	r27
    1b0e:	f7 95       	ror	r31
    1b10:	e7 95       	ror	r30
    1b12:	9f 5f       	subi	r25, 0xFF	; 255
    1b14:	c1 f7       	brne	.-16     	; 0x1b06 <__mulsf3_pse+0x90>
    1b16:	fe 2b       	or	r31, r30
    1b18:	88 0f       	add	r24, r24
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	97 f9       	bld	r25, 7
    1b22:	08 95       	ret

00001b24 <do_rand>:
    1b24:	8f 92       	push	r8
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	ec 01       	movw	r28, r24
    1b3a:	68 81       	ld	r22, Y
    1b3c:	79 81       	ldd	r23, Y+1	; 0x01
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	61 15       	cp	r22, r1
    1b44:	71 05       	cpc	r23, r1
    1b46:	81 05       	cpc	r24, r1
    1b48:	91 05       	cpc	r25, r1
    1b4a:	21 f4       	brne	.+8      	; 0x1b54 <do_rand+0x30>
    1b4c:	64 e2       	ldi	r22, 0x24	; 36
    1b4e:	79 ed       	ldi	r23, 0xD9	; 217
    1b50:	8b e5       	ldi	r24, 0x5B	; 91
    1b52:	97 e0       	ldi	r25, 0x07	; 7
    1b54:	2d e1       	ldi	r18, 0x1D	; 29
    1b56:	33 ef       	ldi	r19, 0xF3	; 243
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divmodsi4>
    1b60:	49 01       	movw	r8, r18
    1b62:	5a 01       	movw	r10, r20
    1b64:	9b 01       	movw	r18, r22
    1b66:	ac 01       	movw	r20, r24
    1b68:	a7 ea       	ldi	r26, 0xA7	; 167
    1b6a:	b1 e4       	ldi	r27, 0x41	; 65
    1b6c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__muluhisi3>
    1b70:	6b 01       	movw	r12, r22
    1b72:	7c 01       	movw	r14, r24
    1b74:	ac ee       	ldi	r26, 0xEC	; 236
    1b76:	b4 ef       	ldi	r27, 0xF4	; 244
    1b78:	a5 01       	movw	r20, r10
    1b7a:	94 01       	movw	r18, r8
    1b7c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulohisi3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8c 0d       	add	r24, r12
    1b86:	9d 1d       	adc	r25, r13
    1b88:	ae 1d       	adc	r26, r14
    1b8a:	bf 1d       	adc	r27, r15
    1b8c:	b7 ff       	sbrs	r27, 7
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <do_rand+0x72>
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	a1 09       	sbc	r26, r1
    1b94:	b0 48       	sbci	r27, 0x80	; 128
    1b96:	88 83       	st	Y, r24
    1b98:	99 83       	std	Y+1, r25	; 0x01
    1b9a:	aa 83       	std	Y+2, r26	; 0x02
    1b9c:	bb 83       	std	Y+3, r27	; 0x03
    1b9e:	9f 77       	andi	r25, 0x7F	; 127
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	8f 90       	pop	r8
    1bb4:	08 95       	ret

00001bb6 <rand_r>:
    1bb6:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <do_rand>
    1bba:	08 95       	ret

00001bbc <rand>:
    1bbc:	87 e0       	ldi	r24, 0x07	; 7
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <do_rand>
    1bc4:	08 95       	ret

00001bc6 <srand>:
    1bc6:	a0 e0       	ldi	r26, 0x00	; 0
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	80 93 07 01 	sts	0x0107, r24
    1bce:	90 93 08 01 	sts	0x0108, r25
    1bd2:	a0 93 09 01 	sts	0x0109, r26
    1bd6:	b0 93 0a 01 	sts	0x010A, r27
    1bda:	08 95       	ret

00001bdc <eeprom_read_byte>:
    1bdc:	f9 99       	sbic	0x1f, 1	; 31
    1bde:	fe cf       	rjmp	.-4      	; 0x1bdc <eeprom_read_byte>
    1be0:	92 bd       	out	0x22, r25	; 34
    1be2:	81 bd       	out	0x21, r24	; 33
    1be4:	f8 9a       	sbi	0x1f, 0	; 31
    1be6:	99 27       	eor	r25, r25
    1be8:	80 b5       	in	r24, 0x20	; 32
    1bea:	08 95       	ret

00001bec <eeprom_write_byte>:
    1bec:	26 2f       	mov	r18, r22

00001bee <eeprom_write_r18>:
    1bee:	f9 99       	sbic	0x1f, 1	; 31
    1bf0:	fe cf       	rjmp	.-4      	; 0x1bee <eeprom_write_r18>
    1bf2:	1f ba       	out	0x1f, r1	; 31
    1bf4:	92 bd       	out	0x22, r25	; 34
    1bf6:	81 bd       	out	0x21, r24	; 33
    1bf8:	20 bd       	out	0x20, r18	; 32
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	fa 9a       	sbi	0x1f, 2	; 31
    1c00:	f9 9a       	sbi	0x1f, 1	; 31
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	08 95       	ret

00001c08 <__divmodsi4>:
    1c08:	05 2e       	mov	r0, r21
    1c0a:	97 fb       	bst	r25, 7
    1c0c:	1e f4       	brtc	.+6      	; 0x1c14 <__divmodsi4+0xc>
    1c0e:	00 94       	com	r0
    1c10:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__negsi2>
    1c14:	57 fd       	sbrc	r21, 7
    1c16:	07 d0       	rcall	.+14     	; 0x1c26 <__divmodsi4_neg2>
    1c18:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__udivmodsi4>
    1c1c:	07 fc       	sbrc	r0, 7
    1c1e:	03 d0       	rcall	.+6      	; 0x1c26 <__divmodsi4_neg2>
    1c20:	4e f4       	brtc	.+18     	; 0x1c34 <__divmodsi4_exit>
    1c22:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__negsi2>

00001c26 <__divmodsi4_neg2>:
    1c26:	50 95       	com	r21
    1c28:	40 95       	com	r20
    1c2a:	30 95       	com	r19
    1c2c:	21 95       	neg	r18
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	4f 4f       	sbci	r20, 0xFF	; 255
    1c32:	5f 4f       	sbci	r21, 0xFF	; 255

00001c34 <__divmodsi4_exit>:
    1c34:	08 95       	ret

00001c36 <__negsi2>:
    1c36:	90 95       	com	r25
    1c38:	80 95       	com	r24
    1c3a:	70 95       	com	r23
    1c3c:	61 95       	neg	r22
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	8f 4f       	sbci	r24, 0xFF	; 255
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	08 95       	ret

00001c46 <__muluhisi3>:
    1c46:	0e 94 5f 0b 	call	0x16be	; 0x16be <__umulhisi3>
    1c4a:	a5 9f       	mul	r26, r21
    1c4c:	90 0d       	add	r25, r0
    1c4e:	b4 9f       	mul	r27, r20
    1c50:	90 0d       	add	r25, r0
    1c52:	a4 9f       	mul	r26, r20
    1c54:	80 0d       	add	r24, r0
    1c56:	91 1d       	adc	r25, r1
    1c58:	11 24       	eor	r1, r1
    1c5a:	08 95       	ret

00001c5c <__mulshisi3>:
    1c5c:	b7 ff       	sbrs	r27, 7
    1c5e:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__muluhisi3>

00001c62 <__mulohisi3>:
    1c62:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__muluhisi3>
    1c66:	82 1b       	sub	r24, r18
    1c68:	93 0b       	sbc	r25, r19
    1c6a:	08 95       	ret

00001c6c <__udivmodsi4>:
    1c6c:	a1 e2       	ldi	r26, 0x21	; 33
    1c6e:	1a 2e       	mov	r1, r26
    1c70:	aa 1b       	sub	r26, r26
    1c72:	bb 1b       	sub	r27, r27
    1c74:	fd 01       	movw	r30, r26
    1c76:	0d c0       	rjmp	.+26     	; 0x1c92 <__udivmodsi4_ep>

00001c78 <__udivmodsi4_loop>:
    1c78:	aa 1f       	adc	r26, r26
    1c7a:	bb 1f       	adc	r27, r27
    1c7c:	ee 1f       	adc	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	a2 17       	cp	r26, r18
    1c82:	b3 07       	cpc	r27, r19
    1c84:	e4 07       	cpc	r30, r20
    1c86:	f5 07       	cpc	r31, r21
    1c88:	20 f0       	brcs	.+8      	; 0x1c92 <__udivmodsi4_ep>
    1c8a:	a2 1b       	sub	r26, r18
    1c8c:	b3 0b       	sbc	r27, r19
    1c8e:	e4 0b       	sbc	r30, r20
    1c90:	f5 0b       	sbc	r31, r21

00001c92 <__udivmodsi4_ep>:
    1c92:	66 1f       	adc	r22, r22
    1c94:	77 1f       	adc	r23, r23
    1c96:	88 1f       	adc	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	1a 94       	dec	r1
    1c9c:	69 f7       	brne	.-38     	; 0x1c78 <__udivmodsi4_loop>
    1c9e:	60 95       	com	r22
    1ca0:	70 95       	com	r23
    1ca2:	80 95       	com	r24
    1ca4:	90 95       	com	r25
    1ca6:	9b 01       	movw	r18, r22
    1ca8:	ac 01       	movw	r20, r24
    1caa:	bd 01       	movw	r22, r26
    1cac:	cf 01       	movw	r24, r30
    1cae:	08 95       	ret

00001cb0 <_exit>:
    1cb0:	f8 94       	cli

00001cb2 <__stop_program>:
    1cb2:	ff cf       	rjmp	.-2      	; 0x1cb2 <__stop_program>
