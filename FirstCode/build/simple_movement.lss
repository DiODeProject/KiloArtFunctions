
build/simple_movement.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	03 02       	muls	r16, r19
      6a:	7f 02       	muls	r23, r31
      6c:	d7 01       	movw	r26, r14
      6e:	ce 01       	movw	r24, r28
      70:	d4 01       	movw	r26, r8
      72:	61 02       	muls	r22, r17
      74:	56 02       	muls	r21, r22
      76:	e1 08       	sbc	r14, r1
      78:	be 07       	cpc	r27, r30
      7a:	be 07       	cpc	r27, r30
      7c:	de 08       	sbc	r13, r14
      7e:	ea 08       	sbc	r14, r10
      80:	da 08       	sbc	r13, r10
      82:	f1 08       	sbc	r15, r1
      84:	ed 08       	sbc	r14, r13
      86:	f5 08       	sbc	r15, r5
      88:	ad 08       	sbc	r10, r13
      8a:	7f 08       	sbc	r7, r15

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee e8       	ldi	r30, 0x8E	; 142
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 36       	cpi	r26, 0x6E	; 110
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 27 0a 	call	0x144e	; 0x144e <main>
      da:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
#include <kilolib.h>

void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
}

void loop()
{
    // Set the LED green.
    set_color(RGB(0, 1, 0));
      e4:	84 e0       	ldi	r24, 0x04	; 4
      e6:	0e 94 38 07 	call	0xe70	; 0xe70 <set_color>
    // Spinup the motors to overcome friction.
    spinup_motors();
      ea:	0e 94 1c 03 	call	0x638	; 0x638 <spinup_motors>
    // Move straight for 2 seconds (2000 ms).
    set_motors(kilo_straight_left, kilo_straight_right);
      ee:	60 91 6c 01 	lds	r22, 0x016C
      f2:	80 91 6b 01 	lds	r24, 0x016B
      f6:	0e 94 17 03 	call	0x62e	; 0x62e <set_motors>
    delay(1000);
      fa:	88 ee       	ldi	r24, 0xE8	; 232
      fc:	93 e0       	ldi	r25, 0x03	; 3
      fe:	0e 94 0c 03 	call	0x618	; 0x618 <delay>
    
    // Set the LED red.
    set_color(RGB(1, 0, 0));
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	0e 94 38 07 	call	0xe70	; 0xe70 <set_color>
    // Spinup the motors to overcome friction.
    //spinup_motors();
    // Turn left for 2 seconds (2000 ms).
    set_motors(kilo_turn_left, 0);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	80 91 6d 01 	lds	r24, 0x016D
     10e:	0e 94 17 03 	call	0x62e	; 0x62e <set_motors>
    delay(500);
     112:	84 ef       	ldi	r24, 0xF4	; 244
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 0c 03 	call	0x618	; 0x618 <delay>
    
    // Set the LED green.
    set_color(RGB(0, 1, 0));
     11a:	84 e0       	ldi	r24, 0x04	; 4
     11c:	0e 94 38 07 	call	0xe70	; 0xe70 <set_color>
    // Spinup the motors to overcome friction.
    spinup_motors();
     120:	0e 94 1c 03 	call	0x638	; 0x638 <spinup_motors>
    // Move straight for 2 seconds (2000 ms).
    set_motors(kilo_straight_left, kilo_straight_right);
     124:	60 91 6c 01 	lds	r22, 0x016C
     128:	80 91 6b 01 	lds	r24, 0x016B
     12c:	0e 94 17 03 	call	0x62e	; 0x62e <set_motors>
    delay(1000);
     130:	88 ee       	ldi	r24, 0xE8	; 232
     132:	93 e0       	ldi	r25, 0x03	; 3
     134:	0e 94 0c 03 	call	0x618	; 0x618 <delay>
    
    // Set the LED blue.
    set_color(RGB(0, 0, 1));
     138:	80 e1       	ldi	r24, 0x10	; 16
     13a:	0e 94 38 07 	call	0xe70	; 0xe70 <set_color>
    // Spinup the motors to overcome friction.
    //spinup_motors();
    // Turn right for 2 seconds (2000 ms).
    set_motors(0, kilo_turn_right);
     13e:	60 91 59 01 	lds	r22, 0x0159
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 17 03 	call	0x62e	; 0x62e <set_motors>
    delay(500);
     148:	84 ef       	ldi	r24, 0xF4	; 244
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 0c 03 	call	0x618	; 0x618 <delay>
    
    // Set the LED off.
    set_color(RGB(0, 0, 0));
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 38 07 	call	0xe70	; 0xe70 <set_color>
    // Stop for half a second (500 ms).
    set_motors(0, 0);
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	0e 94 17 03 	call	0x62e	; 0x62e <set_motors>
    delay(500);
     15e:	84 ef       	ldi	r24, 0xF4	; 244
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	0c 94 0c 03 	jmp	0x618	; 0x618 <delay>

00000166 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     166:	08 95       	ret

00000168 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	08 95       	ret

0000016e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     16e:	08 95       	ret

00000170 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
    cli();
     17e:	f8 94       	cli

    ports_off();
     180:	14 b8       	out	0x04, r1	; 4
     182:	17 b8       	out	0x07, r1	; 7
     184:	1a b8       	out	0x0a, r1	; 10
     186:	15 b8       	out	0x05, r1	; 5
     188:	18 b8       	out	0x08, r1	; 8
     18a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     18c:	52 9a       	sbi	0x0a, 2	; 10
     18e:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     190:	14 bc       	out	0x24, r1	; 36
     192:	85 e0       	ldi	r24, 0x05	; 5
     194:	85 bd       	out	0x25, r24	; 37
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	87 bd       	out	0x27, r24	; 39
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     1a0:	10 92 80 00 	sts	0x0080, r1
     1a4:	10 92 81 00 	sts	0x0081, r1
     1a8:	2f e8       	ldi	r18, 0x8F	; 143
     1aa:	3b e0       	ldi	r19, 0x0B	; 11
     1ac:	30 93 89 00 	sts	0x0089, r19
     1b0:	20 93 88 00 	sts	0x0088, r18
     1b4:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     1b8:	53 98       	cbi	0x0a, 3	; 10
     1ba:	23 98       	cbi	0x04, 3	; 4
     1bc:	91 ea       	ldi	r25, 0xA1	; 161
     1be:	90 93 b0 00 	sts	0x00B0, r25
     1c2:	80 93 b1 00 	sts	0x00B1, r24
     1c6:	10 92 b4 00 	sts	0x00B4, r1
     1ca:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     1ce:	8b e0       	ldi	r24, 0x0B	; 11
     1d0:	80 bf       	out	0x30, r24	; 48
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     1d8:	86 e0       	ldi	r24, 0x06	; 6
     1da:	80 93 7c 00 	sts	0x007C, r24
     1de:	83 e8       	ldi	r24, 0x83	; 131
     1e0:	80 93 7a 00 	sts	0x007A, r24
     1e4:	80 91 7a 00 	lds	r24, 0x007A
     1e8:	80 64       	ori	r24, 0x40	; 64
     1ea:	80 93 7a 00 	sts	0x007A, r24
     1ee:	80 91 7a 00 	lds	r24, 0x007A
     1f2:	86 fd       	sbrc	r24, 6
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <kilo_init+0x7e>
    adc_trigger_high_gain();
     1f6:	10 92 7c 00 	sts	0x007C, r1
     1fa:	83 ea       	ldi	r24, 0xA3	; 163
     1fc:	80 93 7a 00 	sts	0x007A, r24
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
    if (osccal != 0xFF)
     20e:	8f 3f       	cpi	r24, 0xFF	; 255
     210:	11 f0       	breq	.+4      	; 0x216 <kilo_init+0xa6>
        OSCCAL = osccal;
     212:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     216:	10 92 37 01 	sts	0x0137, r1
    rx_leadingbit = 1;
     21a:	c1 e0       	ldi	r28, 0x01	; 1
     21c:	c0 93 10 01 	sts	0x0110, r28
    rx_leadingbyte = 1;
     220:	c0 93 54 01 	sts	0x0154, r28
    rx_byteindex = 0;
     224:	10 92 2e 01 	sts	0x012E, r1
    rx_bytevalue = 0;
     228:	10 92 68 01 	sts	0x0168, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     22c:	80 e9       	ldi	r24, 0x90	; 144
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     234:	80 93 2d 01 	sts	0x012D, r24
    if (tx_mask & ~TX_MASK_MAX)
     238:	80 91 2d 01 	lds	r24, 0x012D
     23c:	88 73       	andi	r24, 0x38	; 56
     23e:	11 f0       	breq	.+4      	; 0x244 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     240:	c0 93 2d 01 	sts	0x012D, r28
    tx_clock = 0;
     244:	10 92 58 01 	sts	0x0158, r1
     248:	10 92 57 01 	sts	0x0157, r1
    tx_increment = 255;
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 56 01 	sts	0x0156, r25
     254:	80 93 55 01 	sts	0x0155, r24
    kilo_ticks = 0;
     258:	10 92 33 01 	sts	0x0133, r1
     25c:	10 92 34 01 	sts	0x0134, r1
     260:	10 92 35 01 	sts	0x0135, r1
     264:	10 92 36 01 	sts	0x0136, r1
    kilo_state = IDLE;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     26e:	82 e4       	ldi	r24, 0x42	; 66
     270:	9f e0       	ldi	r25, 0x0F	; 15
     272:	90 93 67 01 	sts	0x0167, r25
     276:	80 93 66 01 	sts	0x0166, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     27a:	80 eb       	ldi	r24, 0xB0	; 176
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     282:	c8 2f       	mov	r28, r24
     284:	81 eb       	ldi	r24, 0xB1	; 177
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     28c:	2c 2f       	mov	r18, r28
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	38 2b       	or	r19, r24
     292:	30 93 6a 01 	sts	0x016A, r19
     296:	20 93 69 01 	sts	0x0169, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     29a:	85 e0       	ldi	r24, 0x05	; 5
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     2a2:	80 93 6d 01 	sts	0x016D, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     2a6:	89 e0       	ldi	r24, 0x09	; 9
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     2ae:	80 93 59 01 	sts	0x0159, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     2b2:	8c e0       	ldi	r24, 0x0C	; 12
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     2ba:	80 93 6b 01 	sts	0x016B, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2be:	84 e1       	ldi	r24, 0x14	; 20
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     2c6:	80 93 6c 01 	sts	0x016C, r24
     2ca:	58 e3       	ldi	r21, 0x38	; 56
     2cc:	e5 2e       	mov	r14, r21
     2ce:	51 e0       	ldi	r21, 0x01	; 1
     2d0:	f5 2e       	mov	r15, r21
     2d2:	01 e1       	ldi	r16, 0x11	; 17
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	c0 e2       	ldi	r28, 0x20	; 32
     2d8:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2da:	ce 01       	movw	r24, r28
     2dc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     2e0:	d8 2e       	mov	r13, r24
     2e2:	ce 01       	movw	r24, r28
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     2ea:	2d 2d       	mov	r18, r13
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	32 2f       	mov	r19, r18
     2f0:	22 27       	eor	r18, r18
     2f2:	28 2b       	or	r18, r24
     2f4:	f7 01       	movw	r30, r14
     2f6:	21 93       	st	Z+, r18
     2f8:	31 93       	st	Z+, r19
     2fa:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2fc:	ce 01       	movw	r24, r28
     2fe:	c0 96       	adiw	r24, 0x30	; 48
     300:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     304:	d8 2e       	mov	r13, r24
     306:	ce 01       	movw	r24, r28
     308:	c1 96       	adiw	r24, 0x31	; 49
     30a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_read_byte>
     30e:	2d 2d       	mov	r18, r13
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	32 2f       	mov	r19, r18
     314:	22 27       	eor	r18, r18
     316:	28 2b       	or	r18, r24
     318:	f8 01       	movw	r30, r16
     31a:	21 93       	st	Z+, r18
     31c:	31 93       	st	Z+, r19
     31e:	8f 01       	movw	r16, r30
     320:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     322:	cc 33       	cpi	r28, 0x3C	; 60
     324:	d1 05       	cpc	r29, r1
     326:	c9 f6       	brne	.-78     	; 0x2da <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     328:	78 94       	sei
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	08 95       	ret

0000033a <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     33a:	1f 92       	push	r1
     33c:	0f 92       	push	r0
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	0f 92       	push	r0
     342:	11 24       	eor	r1, r1
     344:	8f 93       	push	r24
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	a8 95       	wdr
     34c:	80 91 60 00 	lds	r24, 0x0060
     350:	88 61       	ori	r24, 0x18	; 24
     352:	80 93 60 00 	sts	0x0060, r24
     356:	10 92 60 00 	sts	0x0060, r1
     35a:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     35c:	8f 91       	pop	r24
     35e:	0f 90       	pop	r0
     360:	0f be       	out	0x3f, r0	; 63
     362:	0f 90       	pop	r0
     364:	1f 90       	pop	r1
     366:	18 95       	reti

00000368 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     368:	3c 01       	movw	r6, r24
     36a:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     36c:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     36e:	99 24       	eor	r9, r9
     370:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     372:	84 e0       	ldi	r24, 0x04	; 4
     374:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     376:	96 e0       	ldi	r25, 0x06	; 6
     378:	a9 2e       	mov	r10, r25
     37a:	23 e8       	ldi	r18, 0x83	; 131
     37c:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     37e:	38 e1       	ldi	r19, 0x18	; 24
     380:	d3 2e       	mov	r13, r19
     382:	49 e2       	ldi	r20, 0x29	; 41
     384:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     386:	90 91 0f 01 	lds	r25, 0x010F
     38a:	e9 2f       	mov	r30, r25
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	e7 30       	cpi	r30, 0x07	; 7
     390:	f1 05       	cpc	r31, r1
     392:	c8 f7       	brcc	.-14     	; 0x386 <kilo_start+0x1e>
     394:	ec 5c       	subi	r30, 0xCC	; 204
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     39c:	11 23       	and	r17, r17
     39e:	09 f4       	brne	.+2      	; 0x3a2 <kilo_start+0x3a>
     3a0:	fc c0       	rjmp	.+504    	; 0x59a <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3a2:	c0 92 0f 01 	sts	0x010F, r12
     3a6:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     3a8:	fe 01       	movw	r30, r28
     3aa:	09 95       	icall
                break;
     3ac:	ec cf       	rjmp	.-40     	; 0x386 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     3ae:	80 91 37 01 	lds	r24, 0x0137
     3b2:	81 11       	cpse	r24, r1
     3b4:	eb c0       	rjmp	.+470    	; 0x58c <kilo_start+0x224>
        cli();                                    // disable interrupts
     3b6:	f8 94       	cli
        adc_setup_conversion(6);
     3b8:	a0 92 7c 00 	sts	0x007C, r10
     3bc:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     3c0:	80 91 7a 00 	lds	r24, 0x007A
     3c4:	80 64       	ori	r24, 0x40	; 64
     3c6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3ca:	90 91 7a 00 	lds	r25, 0x007A
     3ce:	96 fd       	sbrc	r25, 6
     3d0:	fc cf       	rjmp	.-8      	; 0x3ca <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     3d2:	80 91 78 00 	lds	r24, 0x0078
     3d6:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3da:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3dc:	8b 3a       	cpi	r24, 0xAB	; 171
     3de:	e2 e0       	ldi	r30, 0x02	; 2
     3e0:	9e 07       	cpc	r25, r30
     3e2:	0c f0       	brlt	.+2      	; 0x3e6 <kilo_start+0x7e>
     3e4:	ed c0       	rjmp	.+474    	; 0x5c0 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3e6:	89 38       	cpi	r24, 0x89	; 137
     3e8:	f2 e0       	ldi	r31, 0x02	; 2
     3ea:	9f 07       	cpc	r25, r31
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <kilo_start+0x88>
     3ee:	ef c0       	rjmp	.+478    	; 0x5ce <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3f0:	87 36       	cpi	r24, 0x67	; 103
     3f2:	92 40       	sbci	r25, 0x02	; 2
     3f4:	0c f4       	brge	.+2      	; 0x3f8 <kilo_start+0x90>
     3f6:	ca c0       	rjmp	.+404    	; 0x58c <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3f8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3fa:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3fc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3fe:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     400:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     402:	3c 98       	cbi	0x07, 4	; 7
     404:	c0 cf       	rjmp	.-128    	; 0x386 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     406:	f8 94       	cli
                acomp_off();
     408:	80 b7       	in	r24, 0x30	; 48
     40a:	87 7f       	andi	r24, 0xF7	; 247
     40c:	80 bf       	out	0x30, r24	; 48
                adc_off();
     40e:	80 91 7a 00 	lds	r24, 0x007A
     412:	8f 77       	andi	r24, 0x7F	; 127
     414:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     418:	14 b8       	out	0x04, r1	; 4
     41a:	17 b8       	out	0x07, r1	; 7
     41c:	1a b8       	out	0x0a, r1	; 10
     41e:	15 b8       	out	0x05, r1	; 5
     420:	18 b8       	out	0x08, r1	; 8
     422:	1b b8       	out	0x0b, r1	; 11
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	a8 95       	wdr
     42a:	d0 92 60 00 	sts	0x0060, r13
     42e:	0f be       	out	0x3f, r0	; 63
     430:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     434:	80 91 60 00 	lds	r24, 0x0060
     438:	80 64       	ori	r24, 0x40	; 64
     43a:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     43e:	93 b7       	in	r25, 0x33	; 51
     440:	91 7f       	andi	r25, 0xF1	; 241
     442:	94 60       	ori	r25, 0x04	; 4
     444:	93 bf       	out	0x33, r25	; 51
                cli();
     446:	f8 94       	cli
                sleep_enable();
     448:	83 b7       	in	r24, 0x33	; 51
     44a:	81 60       	ori	r24, 0x01	; 1
     44c:	83 bf       	out	0x33, r24	; 51
                sei();
     44e:	78 94       	sei
                sleep_cpu();
     450:	88 95       	sleep
                sleep_disable();
     452:	83 b7       	in	r24, 0x33	; 51
     454:	8e 7f       	andi	r24, 0xFE	; 254
     456:	83 bf       	out	0x33, r24	; 51
                sei();
     458:	78 94       	sei
                rx_busy = 0;
     45a:	10 92 37 01 	sts	0x0137, r1
                ports_on();
     45e:	52 9a       	sbi	0x0a, 2	; 10
     460:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     462:	80 91 7a 00 	lds	r24, 0x007A
     466:	80 68       	ori	r24, 0x80	; 128
     468:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	87 e5       	ldi	r24, 0x57	; 87
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <kilo_start+0x108>
     474:	00 c0       	rjmp	.+0      	; 0x476 <kilo_start+0x10e>
     476:	00 00       	nop
                _delay_us(300);
                acomp_on();
     478:	80 b7       	in	r24, 0x30	; 48
     47a:	88 61       	ori	r24, 0x18	; 24
     47c:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     47e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     480:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     482:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     484:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     486:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     488:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	ef e1       	ldi	r30, 0x1F	; 31
     48c:	fe e4       	ldi	r31, 0x4E	; 78
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <kilo_start+0x126>
     492:	00 c0       	rjmp	.+0      	; 0x494 <kilo_start+0x12c>
     494:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     496:	80 91 37 01 	lds	r24, 0x0137
     49a:	81 11       	cpse	r24, r1
     49c:	81 c0       	rjmp	.+258    	; 0x5a0 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     49e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4a0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4a2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4a4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4a6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4a8:	3c 98       	cbi	0x07, 4	; 7
     4aa:	6d cf       	rjmp	.-294    	; 0x386 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     4ac:	80 91 0d 01 	lds	r24, 0x010D
     4b0:	81 11       	cpse	r24, r1
     4b2:	41 c0       	rjmp	.+130    	; 0x536 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4b4:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4b8:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     4bc:	10 92 0e 01 	sts	0x010E, r1
     4c0:	62 cf       	rjmp	.-316    	; 0x386 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     4c2:	48 99       	sbic	0x09, 0	; 9
     4c4:	ec cf       	rjmp	.-40     	; 0x49e <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4c6:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4c8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4ca:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4cc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4ce:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4d0:	3c 98       	cbi	0x07, 4	; 7
     4d2:	8f ec       	ldi	r24, 0xCF	; 207
     4d4:	97 e0       	ldi	r25, 0x07	; 7
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <kilo_start+0x16e>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <kilo_start+0x174>
     4dc:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4de:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4e0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4e2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4e4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4e6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4e8:	3c 98       	cbi	0x07, 4	; 7
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	e1 ee       	ldi	r30, 0xE1	; 225
     4ee:	f4 e0       	ldi	r31, 0x04	; 4
     4f0:	91 50       	subi	r25, 0x01	; 1
     4f2:	e0 40       	sbci	r30, 0x00	; 0
     4f4:	f0 40       	sbci	r31, 0x00	; 0
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <kilo_start+0x188>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <kilo_start+0x192>
     4fa:	00 00       	nop
     4fc:	44 cf       	rjmp	.-376    	; 0x386 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4fe:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     500:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     502:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     504:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     506:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     508:	3c 98       	cbi	0x07, 4	; 7
     50a:	ef ec       	ldi	r30, 0xCF	; 207
     50c:	f7 e0       	ldi	r31, 0x07	; 7
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <kilo_start+0x1a6>
     512:	00 c0       	rjmp	.+0      	; 0x514 <kilo_start+0x1ac>
     514:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     516:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     518:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     51a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     51c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     51e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     520:	3c 98       	cbi	0x07, 4	; 7
     522:	ff ef       	ldi	r31, 0xFF	; 255
     524:	21 ee       	ldi	r18, 0xE1	; 225
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	f1 50       	subi	r31, 0x01	; 1
     52a:	20 40       	sbci	r18, 0x00	; 0
     52c:	80 40       	sbci	r24, 0x00	; 0
     52e:	e1 f7       	brne	.-8      	; 0x528 <kilo_start+0x1c0>
     530:	00 c0       	rjmp	.+0      	; 0x532 <kilo_start+0x1ca>
     532:	00 00       	nop
     534:	28 cf       	rjmp	.-432    	; 0x386 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     536:	90 91 0d 01 	lds	r25, 0x010D
     53a:	80 91 0e 01 	lds	r24, 0x010E
     53e:	98 17       	cp	r25, r24
     540:	09 f4       	brne	.+2      	; 0x544 <kilo_start+0x1dc>
     542:	21 cf       	rjmp	.-446    	; 0x386 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     544:	80 91 0d 01 	lds	r24, 0x010D
     548:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     54c:	80 91 0d 01 	lds	r24, 0x010D
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	09 f4       	brne	.+2      	; 0x556 <kilo_start+0x1ee>
     554:	50 c0       	rjmp	.+160    	; 0x5f6 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     556:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     55a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     55e:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     562:	82 30       	cpi	r24, 0x02	; 2
     564:	d9 f1       	breq	.+118    	; 0x5dc <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     566:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     56a:	90 92 b4 00 	sts	0x00B4, r9
     56e:	8f e2       	ldi	r24, 0x2F	; 47
     570:	95 e7       	ldi	r25, 0x75	; 117
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <kilo_start+0x20a>
     576:	00 c0       	rjmp	.+0      	; 0x578 <kilo_start+0x210>
     578:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     57a:	80 91 6c 01 	lds	r24, 0x016C
     57e:	90 91 6b 01 	lds	r25, 0x016B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     582:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     586:	80 93 b4 00 	sts	0x00B4, r24
     58a:	fd ce       	rjmp	.-518    	; 0x386 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     58c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     58e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     590:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     592:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     594:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     596:	3c 98       	cbi	0x07, 4	; 7
     598:	f6 ce       	rjmp	.-532    	; 0x386 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     59a:	f3 01       	movw	r30, r6
     59c:	09 95       	icall
     59e:	01 cf       	rjmp	.-510    	; 0x3a2 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5a0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5a2:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5a4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5a6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5a8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5aa:	3c 98       	cbi	0x07, 4	; 7
     5ac:	ff ef       	ldi	r31, 0xFF	; 255
     5ae:	20 e7       	ldi	r18, 0x70	; 112
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	f1 50       	subi	r31, 0x01	; 1
     5b4:	20 40       	sbci	r18, 0x00	; 0
     5b6:	80 40       	sbci	r24, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <kilo_start+0x24a>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <kilo_start+0x254>
     5bc:	00 00       	nop
     5be:	6f cf       	rjmp	.-290    	; 0x49e <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5c0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5c2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5c4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5c6:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5c8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5ca:	3c 98       	cbi	0x07, 4	; 7
     5cc:	dc ce       	rjmp	.-584    	; 0x386 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5ce:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5d0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5d2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5d4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5d6:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5d8:	3c 9a       	sbi	0x07, 4	; 7
     5da:	d5 ce       	rjmp	.-598    	; 0x386 <kilo_start+0x1e>
     5dc:	ef e2       	ldi	r30, 0x2F	; 47
     5de:	f5 e7       	ldi	r31, 0x75	; 117
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <kilo_start+0x278>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <kilo_start+0x27e>
     5e6:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5e8:	80 91 59 01 	lds	r24, 0x0159
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ec:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5f0:	80 93 b4 00 	sts	0x00B4, r24
     5f4:	c8 ce       	rjmp	.-624    	; 0x386 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f6:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5fa:	10 92 b4 00 	sts	0x00B4, r1
     5fe:	8f e2       	ldi	r24, 0x2F	; 47
     600:	95 e7       	ldi	r25, 0x75	; 117
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <kilo_start+0x29a>
     606:	00 c0       	rjmp	.+0      	; 0x608 <kilo_start+0x2a0>
     608:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     60a:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     60e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     612:	10 92 b4 00 	sts	0x00B4, r1
     616:	b7 ce       	rjmp	.-658    	; 0x386 <kilo_start+0x1e>

00000618 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     618:	07 c0       	rjmp	.+14     	; 0x628 <delay+0x10>
     61a:	ef ec       	ldi	r30, 0xCF	; 207
     61c:	f7 e0       	ldi	r31, 0x07	; 7
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <delay+0x6>
     622:	00 c0       	rjmp	.+0      	; 0x624 <delay+0xc>
     624:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     626:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	b9 f7       	brne	.-18     	; 0x61a <delay+0x2>
     62c:	08 95       	ret

0000062e <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     62e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     632:	60 93 b4 00 	sts	0x00B4, r22
     636:	08 95       	ret

00000638 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     63e:	80 93 b4 00 	sts	0x00B4, r24
     642:	8f e0       	ldi	r24, 0x0F	; 15
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	ef ec       	ldi	r30, 0xCF	; 207
     648:	f7 e0       	ldi	r31, 0x07	; 7
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <spinup_motors+0x12>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <spinup_motors+0x18>
     650:	00 00       	nop
     652:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     654:	c1 f7       	brne	.-16     	; 0x646 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     656:	08 95       	ret

00000658 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     658:	80 91 37 01 	lds	r24, 0x0137
     65c:	81 11       	cpse	r24, r1
     65e:	1e c0       	rjmp	.+60     	; 0x69c <get_ambientlight+0x44>
        cli();
     660:	f8 94       	cli
        adc_setup_conversion(7);
     662:	87 e0       	ldi	r24, 0x07	; 7
     664:	80 93 7c 00 	sts	0x007C, r24
     668:	83 e8       	ldi	r24, 0x83	; 131
     66a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     66e:	80 91 7a 00 	lds	r24, 0x007A
     672:	80 64       	ori	r24, 0x40	; 64
     674:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     678:	80 91 7a 00 	lds	r24, 0x007A
     67c:	86 fd       	sbrc	r24, 6
     67e:	fc cf       	rjmp	.-8      	; 0x678 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     680:	80 91 78 00 	lds	r24, 0x0078
     684:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     688:	10 92 7c 00 	sts	0x007C, r1
     68c:	23 ea       	ldi	r18, 0xA3	; 163
     68e:	20 93 7a 00 	sts	0x007A, r18
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     698:	78 94       	sei
     69a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     6a0:	08 95       	ret

000006a2 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     6a2:	80 91 37 01 	lds	r24, 0x0137
     6a6:	81 11       	cpse	r24, r1
     6a8:	1e c0       	rjmp	.+60     	; 0x6e6 <get_temperature+0x44>
        cli();
     6aa:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     6ac:	88 ec       	ldi	r24, 0xC8	; 200
     6ae:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     6b2:	87 e8       	ldi	r24, 0x87	; 135
     6b4:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6b8:	80 91 7a 00 	lds	r24, 0x007A
     6bc:	80 64       	ori	r24, 0x40	; 64
     6be:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6c2:	80 91 7a 00 	lds	r24, 0x007A
     6c6:	86 fd       	sbrc	r24, 6
     6c8:	fc cf       	rjmp	.-8      	; 0x6c2 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6ca:	80 91 78 00 	lds	r24, 0x0078
     6ce:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6d2:	10 92 7c 00 	sts	0x007C, r1
     6d6:	23 ea       	ldi	r18, 0xA3	; 163
     6d8:	20 93 7a 00 	sts	0x007A, r18
     6dc:	21 e0       	ldi	r18, 0x01	; 1
     6de:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6e2:	78 94       	sei
     6e4:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6ea:	08 95       	ret

000006ec <rand_hard>:

uint8_t rand_hard() {
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	e0 e0       	ldi	r30, 0x00	; 0
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6fa:	03 ea       	ldi	r16, 0xA3	; 163
     6fc:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6fe:	d6 e0       	ldi	r29, 0x06	; 6
     700:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     702:	a1 e0       	ldi	r26, 0x01	; 1
     704:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     706:	60 e8       	ldi	r22, 0x80	; 128
     708:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     70a:	f8 94       	cli
            adc_setup_conversion(6);
     70c:	d0 93 7c 00 	sts	0x007C, r29
     710:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     714:	90 91 7a 00 	lds	r25, 0x007A
     718:	90 64       	ori	r25, 0x40	; 64
     71a:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     71e:	90 91 7a 00 	lds	r25, 0x007A
     722:	96 fd       	sbrc	r25, 6
     724:	fc cf       	rjmp	.-8      	; 0x71e <rand_hard+0x32>
            a = ADCW&0x1;
     726:	20 91 78 00 	lds	r18, 0x0078
     72a:	30 91 79 00 	lds	r19, 0x0079
     72e:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     730:	90 91 7a 00 	lds	r25, 0x007A
     734:	90 64       	ori	r25, 0x40	; 64
     736:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     73a:	90 91 7a 00 	lds	r25, 0x007A
     73e:	96 fd       	sbrc	r25, 6
     740:	fc cf       	rjmp	.-8      	; 0x73a <rand_hard+0x4e>
            b = ADCW&0x1;
     742:	40 91 78 00 	lds	r20, 0x0078
     746:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     74a:	10 92 7c 00 	sts	0x007C, r1
     74e:	00 93 7a 00 	sts	0x007A, r16
     752:	10 93 7b 00 	sts	0x007B, r17
            sei();
     756:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     758:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     75a:	24 13       	cpse	r18, r20
     75c:	03 c0       	rjmp	.+6      	; 0x764 <rand_hard+0x78>
     75e:	61 50       	subi	r22, 0x01	; 1
     760:	71 09       	sbc	r23, r1
     762:	99 f6       	brne	.-90     	; 0x70a <rand_hard+0x1e>
        if (a)
     764:	22 23       	and	r18, r18
     766:	39 f0       	breq	.+14     	; 0x776 <rand_hard+0x8a>
            num |= (1<<i);
     768:	9d 01       	movw	r18, r26
     76a:	0e 2e       	mov	r0, r30
     76c:	01 c0       	rjmp	.+2      	; 0x770 <rand_hard+0x84>
     76e:	22 0f       	add	r18, r18
     770:	0a 94       	dec	r0
     772:	ea f7       	brpl	.-6      	; 0x76e <rand_hard+0x82>
     774:	82 2b       	or	r24, r18
     776:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     778:	e8 30       	cpi	r30, 0x08	; 8
     77a:	f1 05       	cpc	r31, r1
     77c:	09 f0       	breq	.+2      	; 0x780 <rand_hard+0x94>
     77e:	c3 cf       	rjmp	.-122    	; 0x706 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     78a:	80 91 00 01 	lds	r24, 0x0100
     78e:	98 2f       	mov	r25, r24
     790:	99 0f       	add	r25, r25
     792:	99 0f       	add	r25, r25
     794:	99 0f       	add	r25, r25
     796:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     798:	90 91 0c 01 	lds	r25, 0x010C
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	29 0f       	add	r18, r25
     7a0:	20 93 0c 01 	sts	0x010C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     7a4:	28 2f       	mov	r18, r24
     7a6:	22 95       	swap	r18
     7a8:	26 95       	lsr	r18
     7aa:	27 70       	andi	r18, 0x07	; 7
     7ac:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     7ae:	96 95       	lsr	r25
     7b0:	96 95       	lsr	r25
     7b2:	89 27       	eor	r24, r25
     7b4:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     7b8:	08 95       	ret

000007ba <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     7ba:	80 93 00 01 	sts	0x0100, r24
     7be:	08 95       	ret

000007c0 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     7c0:	80 91 37 01 	lds	r24, 0x0137
     7c4:	81 11       	cpse	r24, r1
     7c6:	16 c0       	rjmp	.+44     	; 0x7f4 <get_voltage+0x34>
        cli();                                    // disable interrupts
     7c8:	f8 94       	cli
        adc_setup_conversion(6);
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	80 93 7c 00 	sts	0x007C, r24
     7d0:	83 e8       	ldi	r24, 0x83	; 131
     7d2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7d6:	80 91 7a 00 	lds	r24, 0x007A
     7da:	80 64       	ori	r24, 0x40	; 64
     7dc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7e0:	80 91 7a 00 	lds	r24, 0x007A
     7e4:	86 fd       	sbrc	r24, 6
     7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7e8:	80 91 78 00 	lds	r24, 0x0078
     7ec:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7f0:	78 94       	sei
     7f2:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7f8:	08 95       	ret

000007fa <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7fa:	2f 92       	push	r2
     7fc:	3f 92       	push	r3
     7fe:	4f 92       	push	r4
     800:	5f 92       	push	r5
     802:	6f 92       	push	r6
     804:	7f 92       	push	r7
     806:	8f 92       	push	r8
     808:	9f 92       	push	r9
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	00 d0       	rcall	.+0      	; 0x820 <estimate_distance+0x26>
     820:	00 d0       	rcall	.+0      	; 0x822 <estimate_distance+0x28>
     822:	00 d0       	rcall	.+0      	; 0x824 <estimate_distance+0x2a>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     82a:	dc 01       	movw	r26, r24
     82c:	12 96       	adiw	r26, 0x02	; 2
     82e:	0d 90       	ld	r0, X+
     830:	bc 91       	ld	r27, X
     832:	a0 2d       	mov	r26, r0
     834:	be 83       	std	Y+6, r27	; 0x06
     836:	ad 83       	std	Y+5, r26	; 0x05
     838:	a4 38       	cpi	r26, 0x84	; 132
     83a:	e3 e0       	ldi	r30, 0x03	; 3
     83c:	be 07       	cpc	r27, r30
     83e:	0c f0       	brlt	.+2      	; 0x842 <estimate_distance+0x48>
     840:	c9 c0       	rjmp	.+402    	; 0x9d4 <__stack+0xd5>
        if (dist->high_gain > kilo_irhigh[0]) {
     842:	80 91 11 01 	lds	r24, 0x0111
     846:	90 91 12 01 	lds	r25, 0x0112
     84a:	8a 17       	cp	r24, r26
     84c:	9b 07       	cpc	r25, r27
     84e:	08 f4       	brcc	.+2      	; 0x852 <estimate_distance+0x58>
     850:	37 c1       	rjmp	.+622    	; 0xac0 <__stack+0x1c1>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     852:	00 91 13 01 	lds	r16, 0x0113
     856:	10 91 14 01 	lds	r17, 0x0114
     85a:	0a 17       	cp	r16, r26
     85c:	1b 07       	cpc	r17, r27
     85e:	08 f4       	brcc	.+2      	; 0x862 <estimate_distance+0x68>
     860:	2f c2       	rjmp	.+1118   	; 0xcc0 <__stack+0x3c1>
     862:	00 91 15 01 	lds	r16, 0x0115
     866:	10 91 16 01 	lds	r17, 0x0116
     86a:	0a 17       	cp	r16, r26
     86c:	1b 07       	cpc	r17, r27
     86e:	08 f4       	brcc	.+2      	; 0x872 <estimate_distance+0x78>
     870:	2f c2       	rjmp	.+1118   	; 0xcd0 <__stack+0x3d1>
     872:	00 91 17 01 	lds	r16, 0x0117
     876:	10 91 18 01 	lds	r17, 0x0118
     87a:	0a 17       	cp	r16, r26
     87c:	1b 07       	cpc	r17, r27
     87e:	08 f4       	brcc	.+2      	; 0x882 <estimate_distance+0x88>
     880:	2f c2       	rjmp	.+1118   	; 0xce0 <__stack+0x3e1>
     882:	00 91 19 01 	lds	r16, 0x0119
     886:	10 91 1a 01 	lds	r17, 0x011A
     88a:	0a 17       	cp	r16, r26
     88c:	1b 07       	cpc	r17, r27
     88e:	08 f4       	brcc	.+2      	; 0x892 <estimate_distance+0x98>
     890:	2f c2       	rjmp	.+1118   	; 0xcf0 <__stack+0x3f1>
     892:	00 91 1b 01 	lds	r16, 0x011B
     896:	10 91 1c 01 	lds	r17, 0x011C
     89a:	0a 17       	cp	r16, r26
     89c:	1b 07       	cpc	r17, r27
     89e:	08 f4       	brcc	.+2      	; 0x8a2 <estimate_distance+0xa8>
     8a0:	ef c1       	rjmp	.+990    	; 0xc80 <__stack+0x381>
     8a2:	00 91 1d 01 	lds	r16, 0x011D
     8a6:	10 91 1e 01 	lds	r17, 0x011E
     8aa:	0a 17       	cp	r16, r26
     8ac:	1b 07       	cpc	r17, r27
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <estimate_distance+0xb8>
     8b0:	27 c2       	rjmp	.+1102   	; 0xd00 <__stack+0x401>
     8b2:	00 91 1f 01 	lds	r16, 0x011F
     8b6:	10 91 20 01 	lds	r17, 0x0120
     8ba:	0a 17       	cp	r16, r26
     8bc:	1b 07       	cpc	r17, r27
     8be:	08 f4       	brcc	.+2      	; 0x8c2 <estimate_distance+0xc8>
     8c0:	27 c2       	rjmp	.+1102   	; 0xd10 <__stack+0x411>
     8c2:	00 91 21 01 	lds	r16, 0x0121
     8c6:	10 91 22 01 	lds	r17, 0x0122
     8ca:	0a 17       	cp	r16, r26
     8cc:	1b 07       	cpc	r17, r27
     8ce:	08 f4       	brcc	.+2      	; 0x8d2 <estimate_distance+0xd8>
     8d0:	27 c2       	rjmp	.+1102   	; 0xd20 <__stack+0x421>
     8d2:	00 91 23 01 	lds	r16, 0x0123
     8d6:	10 91 24 01 	lds	r17, 0x0124
     8da:	0a 17       	cp	r16, r26
     8dc:	1b 07       	cpc	r17, r27
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <estimate_distance+0xe8>
     8e0:	27 c2       	rjmp	.+1102   	; 0xd30 <__stack+0x431>
     8e2:	00 91 25 01 	lds	r16, 0x0125
     8e6:	10 91 26 01 	lds	r17, 0x0126
     8ea:	0a 17       	cp	r16, r26
     8ec:	1b 07       	cpc	r17, r27
     8ee:	08 f4       	brcc	.+2      	; 0x8f2 <estimate_distance+0xf8>
     8f0:	27 c2       	rjmp	.+1102   	; 0xd40 <__stack+0x441>
     8f2:	00 91 27 01 	lds	r16, 0x0127
     8f6:	10 91 28 01 	lds	r17, 0x0128
     8fa:	0a 17       	cp	r16, r26
     8fc:	1b 07       	cpc	r17, r27
     8fe:	08 f4       	brcc	.+2      	; 0x902 <__stack+0x3>
     900:	23 c2       	rjmp	.+1094   	; 0xd48 <__stack+0x449>
     902:	00 91 29 01 	lds	r16, 0x0129
     906:	10 91 2a 01 	lds	r17, 0x012A
     90a:	0a 17       	cp	r16, r26
     90c:	1b 07       	cpc	r17, r27
     90e:	08 f4       	brcc	.+2      	; 0x912 <__stack+0x13>
     910:	23 c2       	rjmp	.+1094   	; 0xd58 <__stack+0x459>
     912:	00 91 2b 01 	lds	r16, 0x012B
     916:	10 91 2c 01 	lds	r17, 0x012C
     91a:	0a 17       	cp	r16, r26
     91c:	1b 07       	cpc	r17, r27
     91e:	08 f4       	brcc	.+2      	; 0x922 <__stack+0x23>
     920:	23 c2       	rjmp	.+1094   	; 0xd68 <__stack+0x469>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 ed       	ldi	r26, 0xD0	; 208
     928:	b0 e4       	ldi	r27, 0x40	; 64
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	ab 83       	std	Y+3, r26	; 0x03
     930:	bc 83       	std	Y+4, r27	; 0x04
     932:	4c e0       	ldi	r20, 0x0C	; 12
     934:	e4 2e       	mov	r14, r20
     936:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     938:	f7 01       	movw	r30, r14
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	ef 5e       	subi	r30, 0xEF	; 239
     940:	fe 4f       	sbci	r31, 0xFE	; 254
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	b8 01       	movw	r22, r16
     948:	68 1b       	sub	r22, r24
     94a:	79 0b       	sbc	r23, r25
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     954:	9b 01       	movw	r18, r22
     956:	ac 01       	movw	r20, r24
     958:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     95c:	6b 01       	movw	r12, r22
     95e:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     960:	ad 81       	ldd	r26, Y+5	; 0x05
     962:	be 81       	ldd	r27, Y+6	; 0x06
     964:	bd 01       	movw	r22, r26
     966:	bb 0f       	add	r27, r27
     968:	88 0b       	sbc	r24, r24
     96a:	99 0b       	sbc	r25, r25
     96c:	0e 94 86 0b 	call	0x170c	; 0x170c <__floatsisf>
     970:	4b 01       	movw	r8, r22
     972:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     974:	b8 01       	movw	r22, r16
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     97e:	2b 01       	movw	r4, r22
     980:	3c 01       	movw	r6, r24
     982:	29 81       	ldd	r18, Y+1	; 0x01
     984:	3a 81       	ldd	r19, Y+2	; 0x02
     986:	4b 81       	ldd	r20, Y+3	; 0x03
     988:	5c 81       	ldd	r21, Y+4	; 0x04
     98a:	c7 01       	movw	r24, r14
     98c:	b6 01       	movw	r22, r12
     98e:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	c3 01       	movw	r24, r6
     998:	b2 01       	movw	r22, r4
     99a:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9a2:	c5 01       	movw	r24, r10
     9a4:	b4 01       	movw	r22, r8
     9a6:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e2       	ldi	r20, 0x20	; 32
     9b0:	51 e4       	ldi	r21, 0x41	; 65
     9b2:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
            b=((int)((int)b/(int)slope));
     9b6:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixsfsi>
     9ba:	8b 01       	movw	r16, r22
     9bc:	c7 01       	movw	r24, r14
     9be:	b6 01       	movw	r22, r12
     9c0:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixsfsi>
     9c4:	ab 01       	movw	r20, r22
     9c6:	bc 01       	movw	r22, r24
     9c8:	c8 01       	movw	r24, r16
     9ca:	ba 01       	movw	r22, r20
     9cc:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divmodhi4>
            dist_high=b;
     9d0:	16 2f       	mov	r17, r22
     9d2:	77 c0       	rjmp	.+238    	; 0xac2 <__stack+0x1c3>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9d4:	dc 01       	movw	r26, r24
     9d6:	cd 90       	ld	r12, X+
     9d8:	dc 90       	ld	r13, X
     9da:	80 91 38 01 	lds	r24, 0x0138
     9de:	90 91 39 01 	lds	r25, 0x0139
     9e2:	8c 15       	cp	r24, r12
     9e4:	9d 05       	cpc	r25, r13
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	8c c0       	rjmp	.+280    	; 0xb02 <__stack+0x203>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9ea:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9ec:	e0 90 3a 01 	lds	r14, 0x013A
     9f0:	f0 90 3b 01 	lds	r15, 0x013B
     9f4:	ec 14       	cp	r14, r12
     9f6:	fd 04       	cpc	r15, r13
     9f8:	08 f4       	brcc	.+2      	; 0x9fc <__stack+0xfd>
     9fa:	5e c1       	rjmp	.+700    	; 0xcb8 <__stack+0x3b9>
     9fc:	e0 90 3c 01 	lds	r14, 0x013C
     a00:	f0 90 3d 01 	lds	r15, 0x013D
     a04:	ec 14       	cp	r14, r12
     a06:	fd 04       	cpc	r15, r13
     a08:	08 f4       	brcc	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	5e c1       	rjmp	.+700    	; 0xcc8 <__stack+0x3c9>
     a0c:	e0 90 3e 01 	lds	r14, 0x013E
     a10:	f0 90 3f 01 	lds	r15, 0x013F
     a14:	ec 14       	cp	r14, r12
     a16:	fd 04       	cpc	r15, r13
     a18:	08 f4       	brcc	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	5e c1       	rjmp	.+700    	; 0xcd8 <__stack+0x3d9>
     a1c:	e0 90 40 01 	lds	r14, 0x0140
     a20:	f0 90 41 01 	lds	r15, 0x0141
     a24:	ec 14       	cp	r14, r12
     a26:	fd 04       	cpc	r15, r13
     a28:	08 f4       	brcc	.+2      	; 0xa2c <__stack+0x12d>
     a2a:	5e c1       	rjmp	.+700    	; 0xce8 <__stack+0x3e9>
     a2c:	e0 90 42 01 	lds	r14, 0x0142
     a30:	f0 90 43 01 	lds	r15, 0x0143
     a34:	ec 14       	cp	r14, r12
     a36:	fd 04       	cpc	r15, r13
     a38:	08 f4       	brcc	.+2      	; 0xa3c <__stack+0x13d>
     a3a:	c3 c0       	rjmp	.+390    	; 0xbc2 <__stack+0x2c3>
     a3c:	e0 90 44 01 	lds	r14, 0x0144
     a40:	f0 90 45 01 	lds	r15, 0x0145
     a44:	ec 14       	cp	r14, r12
     a46:	fd 04       	cpc	r15, r13
     a48:	08 f4       	brcc	.+2      	; 0xa4c <__stack+0x14d>
     a4a:	56 c1       	rjmp	.+684    	; 0xcf8 <__stack+0x3f9>
     a4c:	e0 90 46 01 	lds	r14, 0x0146
     a50:	f0 90 47 01 	lds	r15, 0x0147
     a54:	ec 14       	cp	r14, r12
     a56:	fd 04       	cpc	r15, r13
     a58:	08 f4       	brcc	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	56 c1       	rjmp	.+684    	; 0xd08 <__stack+0x409>
     a5c:	e0 90 48 01 	lds	r14, 0x0148
     a60:	f0 90 49 01 	lds	r15, 0x0149
     a64:	ec 14       	cp	r14, r12
     a66:	fd 04       	cpc	r15, r13
     a68:	08 f4       	brcc	.+2      	; 0xa6c <__stack+0x16d>
     a6a:	56 c1       	rjmp	.+684    	; 0xd18 <__stack+0x419>
     a6c:	e0 90 4a 01 	lds	r14, 0x014A
     a70:	f0 90 4b 01 	lds	r15, 0x014B
     a74:	ec 14       	cp	r14, r12
     a76:	fd 04       	cpc	r15, r13
     a78:	08 f4       	brcc	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	56 c1       	rjmp	.+684    	; 0xd28 <__stack+0x429>
     a7c:	e0 90 4c 01 	lds	r14, 0x014C
     a80:	f0 90 4d 01 	lds	r15, 0x014D
     a84:	ec 14       	cp	r14, r12
     a86:	fd 04       	cpc	r15, r13
     a88:	08 f4       	brcc	.+2      	; 0xa8c <__stack+0x18d>
     a8a:	56 c1       	rjmp	.+684    	; 0xd38 <__stack+0x439>
     a8c:	e0 90 4e 01 	lds	r14, 0x014E
     a90:	f0 90 4f 01 	lds	r15, 0x014F
     a94:	ec 14       	cp	r14, r12
     a96:	fd 04       	cpc	r15, r13
     a98:	08 f4       	brcc	.+2      	; 0xa9c <__stack+0x19d>
     a9a:	5a c1       	rjmp	.+692    	; 0xd50 <__stack+0x451>
     a9c:	e0 90 50 01 	lds	r14, 0x0150
     aa0:	f0 90 51 01 	lds	r15, 0x0151
     aa4:	ec 14       	cp	r14, r12
     aa6:	fd 04       	cpc	r15, r13
     aa8:	08 f4       	brcc	.+2      	; 0xaac <__stack+0x1ad>
     aaa:	5a c1       	rjmp	.+692    	; 0xd60 <__stack+0x461>
     aac:	e0 90 52 01 	lds	r14, 0x0152
     ab0:	f0 90 53 01 	lds	r15, 0x0153
     ab4:	ec 14       	cp	r14, r12
     ab6:	fd 04       	cpc	r15, r13
     ab8:	08 f4       	brcc	.+2      	; 0xabc <__stack+0x1bd>
     aba:	5a c1       	rjmp	.+692    	; 0xd70 <__stack+0x471>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     abc:	0a e5       	ldi	r16, 0x5A	; 90
     abe:	31 c0       	rjmp	.+98     	; 0xb22 <__stack+0x223>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     ac0:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     ac2:	ed 81       	ldd	r30, Y+5	; 0x05
     ac4:	fe 81       	ldd	r31, Y+6	; 0x06
     ac6:	ed 3b       	cpi	r30, 0xBD	; 189
     ac8:	f2 40       	sbci	r31, 0x02	; 2
     aca:	fc f4       	brge	.+62     	; 0xb0a <__stack+0x20b>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     acc:	81 e2       	ldi	r24, 0x21	; 33
     ace:	81 0f       	add	r24, r17
    }
}
     ad0:	26 96       	adiw	r28, 0x06	; 6
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	5f 90       	pop	r5
     afa:	4f 90       	pop	r4
     afc:	3f 90       	pop	r3
     afe:	2f 90       	pop	r2
     b00:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b02:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b04:	81 e2       	ldi	r24, 0x21	; 33
     b06:	80 0f       	add	r24, r16
     b08:	e3 cf       	rjmp	.-58     	; 0xad0 <__stack+0x1d1>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b0a:	d1 01       	movw	r26, r2
     b0c:	cd 90       	ld	r12, X+
     b0e:	dc 90       	ld	r13, X
     b10:	80 91 38 01 	lds	r24, 0x0138
     b14:	90 91 39 01 	lds	r25, 0x0139
     b18:	8c 15       	cp	r24, r12
     b1a:	9d 05       	cpc	r25, r13
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <__stack+0x221>
     b1e:	66 cf       	rjmp	.-308    	; 0x9ec <__stack+0xed>
            dist_low=0;
     b20:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b22:	1f 3f       	cpi	r17, 0xFF	; 255
     b24:	79 f3       	breq	.-34     	; 0xb04 <__stack+0x205>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b26:	ed 81       	ldd	r30, Y+5	; 0x05
     b28:	fe 81       	ldd	r31, Y+6	; 0x06
     b2a:	bf 01       	movw	r22, r30
     b2c:	ff 0f       	add	r31, r31
     b2e:	88 0b       	sbc	r24, r24
     b30:	99 0b       	sbc	r25, r25
     b32:	0e 94 86 0b 	call	0x170c	; 0x170c <__floatsisf>
     b36:	6b 01       	movw	r12, r22
     b38:	7c 01       	movw	r14, r24
     b3a:	61 2f       	mov	r22, r17
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     b46:	4b 01       	movw	r8, r22
     b48:	5c 01       	movw	r10, r24
     b4a:	a7 01       	movw	r20, r14
     b4c:	96 01       	movw	r18, r12
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	81 e6       	ldi	r24, 0x61	; 97
     b54:	94 e4       	ldi	r25, 0x44	; 68
     b56:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     b5a:	9b 01       	movw	r18, r22
     b5c:	ac 01       	movw	r20, r24
     b5e:	c5 01       	movw	r24, r10
     b60:	b4 01       	movw	r22, r8
     b62:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
     b66:	4b 01       	movw	r8, r22
     b68:	5c 01       	movw	r10, r24
     b6a:	60 2f       	mov	r22, r16
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     b76:	2b 01       	movw	r4, r22
     b78:	3c 01       	movw	r6, r24
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	4f e2       	ldi	r20, 0x2F	; 47
     b80:	54 e4       	ldi	r21, 0x44	; 68
     b82:	c7 01       	movw	r24, r14
     b84:	b6 01       	movw	r22, r12
     b86:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	c3 01       	movw	r24, r6
     b90:	b2 01       	movw	r22, r4
     b92:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c5 01       	movw	r24, r10
     b9c:	b4 01       	movw	r22, r8
     b9e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	48 e4       	ldi	r20, 0x48	; 72
     ba8:	53 e4       	ldi	r21, 0x43	; 67
     baa:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__divsf3>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	44 e0       	ldi	r20, 0x04	; 4
     bb4:	52 e4       	ldi	r21, 0x42	; 66
     bb6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     bba:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__fixunssfsi>
     bbe:	86 2f       	mov	r24, r22
     bc0:	87 cf       	rjmp	.-242    	; 0xad0 <__stack+0x1d1>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     bc2:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     bc4:	85 e0       	ldi	r24, 0x05	; 5
     bc6:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	fc 01       	movw	r30, r24
     bce:	ea 5c       	subi	r30, 0xCA	; 202
     bd0:	fe 4f       	sbci	r31, 0xFE	; 254
     bd2:	80 81       	ld	r24, Z
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
     bd6:	b7 01       	movw	r22, r14
     bd8:	68 1b       	sub	r22, r24
     bda:	79 0b       	sbc	r23, r25
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     bec:	4b 01       	movw	r8, r22
     bee:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bf0:	b6 01       	movw	r22, r12
     bf2:	dd 0c       	add	r13, r13
     bf4:	88 0b       	sbc	r24, r24
     bf6:	99 0b       	sbc	r25, r25
     bf8:	0e 94 86 0b 	call	0x170c	; 0x170c <__floatsisf>
     bfc:	2b 01       	movw	r4, r22
     bfe:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c00:	b7 01       	movw	r22, r14
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     c0a:	6b 01       	movw	r12, r22
     c0c:	7c 01       	movw	r14, r24
     c0e:	60 2f       	mov	r22, r16
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	a9 01       	movw	r20, r18
     c2c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     c30:	a5 01       	movw	r20, r10
     c32:	94 01       	movw	r18, r8
     c34:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
     c38:	9b 01       	movw	r18, r22
     c3a:	ac 01       	movw	r20, r24
     c3c:	c7 01       	movw	r24, r14
     c3e:	b6 01       	movw	r22, r12
     c40:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     c44:	9b 01       	movw	r18, r22
     c46:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c48:	c3 01       	movw	r24, r6
     c4a:	b2 01       	movw	r22, r4
     c4c:	0e 94 6f 0a 	call	0x14de	; 0x14de <__subsf3>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e2       	ldi	r20, 0x20	; 32
     c56:	51 e4       	ldi	r21, 0x41	; 65
     c58:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c5c:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixsfsi>
     c60:	7b 01       	movw	r14, r22
     c62:	c5 01       	movw	r24, r10
     c64:	b4 01       	movw	r22, r8
     c66:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixsfsi>
     c6a:	ab 01       	movw	r20, r22
     c6c:	bc 01       	movw	r22, r24
     c6e:	c7 01       	movw	r24, r14
     c70:	ba 01       	movw	r22, r20
     c72:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divmodhi4>
                dist_low=b;
     c76:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c78:	6f 3f       	cpi	r22, 0xFF	; 255
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__stack+0x37f>
     c7c:	52 cf       	rjmp	.-348    	; 0xb22 <__stack+0x223>
     c7e:	26 cf       	rjmp	.-436    	; 0xacc <__stack+0x1cd>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c80:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c82:	85 e0       	ldi	r24, 0x05	; 5
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	7c 01       	movw	r14, r24
     c88:	f1 e0       	ldi	r31, 0x01	; 1
     c8a:	ef 1a       	sub	r14, r31
     c8c:	f1 08       	sbc	r15, r1
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 84 0b 	call	0x1708	; 0x1708 <__floatunsisf>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	5f e3       	ldi	r21, 0x3F	; 63
     ca0:	0e 94 12 0c 	call	0x1824	; 0x1824 <__mulsf3>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	a9 01       	movw	r20, r18
     caa:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__addsf3>
     cae:	69 83       	std	Y+1, r22	; 0x01
     cb0:	7a 83       	std	Y+2, r23	; 0x02
     cb2:	8b 83       	std	Y+3, r24	; 0x03
     cb4:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     cb6:	40 ce       	rjmp	.-896    	; 0x938 <__stack+0x39>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     cb8:	01 e0       	ldi	r16, 0x01	; 1
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	84 cf       	rjmp	.-248    	; 0xbc8 <__stack+0x2c9>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	df cf       	rjmp	.-66     	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc8:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	7c cf       	rjmp	.-264    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd0:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	d7 cf       	rjmp	.-82     	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd8:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	74 cf       	rjmp	.-280    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce0:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	cf cf       	rjmp	.-98     	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce8:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	6c cf       	rjmp	.-296    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf0:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	c7 cf       	rjmp	.-114    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf8:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     cfa:	86 e0       	ldi	r24, 0x06	; 6
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	64 cf       	rjmp	.-312    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d00:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	bf cf       	rjmp	.-130    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d08:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d0a:	87 e0       	ldi	r24, 0x07	; 7
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	5c cf       	rjmp	.-328    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d10:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	b7 cf       	rjmp	.-146    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d18:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d1a:	88 e0       	ldi	r24, 0x08	; 8
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	54 cf       	rjmp	.-344    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d20:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d22:	88 e0       	ldi	r24, 0x08	; 8
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	af cf       	rjmp	.-162    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d28:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d2a:	89 e0       	ldi	r24, 0x09	; 9
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	4c cf       	rjmp	.-360    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d30:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d32:	89 e0       	ldi	r24, 0x09	; 9
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a7 cf       	rjmp	.-178    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d38:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d3a:	8a e0       	ldi	r24, 0x0A	; 10
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	44 cf       	rjmp	.-376    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d40:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d42:	8a e0       	ldi	r24, 0x0A	; 10
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9f cf       	rjmp	.-194    	; 0xc86 <__stack+0x387>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d48:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d4a:	8b e0       	ldi	r24, 0x0B	; 11
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9b cf       	rjmp	.-202    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d50:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d52:	8b e0       	ldi	r24, 0x0B	; 11
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	38 cf       	rjmp	.-400    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d58:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d5a:	8c e0       	ldi	r24, 0x0C	; 12
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	93 cf       	rjmp	.-218    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d60:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d62:	8c e0       	ldi	r24, 0x0C	; 12
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	30 cf       	rjmp	.-416    	; 0xbc8 <__stack+0x2c9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d68:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d6a:	8d e0       	ldi	r24, 0x0D	; 13
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	8b cf       	rjmp	.-234    	; 0xc86 <__stack+0x387>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d70:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d72:	8d e0       	ldi	r24, 0x0D	; 13
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	28 cf       	rjmp	.-432    	; 0xbc8 <__stack+0x2c9>

00000d78 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
    tx_clock += tx_increment;
     d9a:	20 91 57 01 	lds	r18, 0x0157
     d9e:	30 91 58 01 	lds	r19, 0x0158
     da2:	80 91 55 01 	lds	r24, 0x0155
     da6:	90 91 56 01 	lds	r25, 0x0156
     daa:	82 0f       	add	r24, r18
     dac:	93 1f       	adc	r25, r19
     dae:	90 93 58 01 	sts	0x0158, r25
     db2:	80 93 57 01 	sts	0x0157, r24
    tx_increment = 0xFF;
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	90 93 56 01 	sts	0x0156, r25
     dbe:	80 93 55 01 	sts	0x0155, r24
    OCR0A = tx_increment;
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     dc6:	80 91 33 01 	lds	r24, 0x0133
     dca:	90 91 34 01 	lds	r25, 0x0134
     dce:	a0 91 35 01 	lds	r26, 0x0135
     dd2:	b0 91 36 01 	lds	r27, 0x0136
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	a1 1d       	adc	r26, r1
     dda:	b1 1d       	adc	r27, r1
     ddc:	80 93 33 01 	sts	0x0133, r24
     de0:	90 93 34 01 	sts	0x0134, r25
     de4:	a0 93 35 01 	sts	0x0135, r26
     de8:	b0 93 36 01 	sts	0x0136, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     dec:	80 91 37 01 	lds	r24, 0x0137
     df0:	81 11       	cpse	r24, r1
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <__vector_14+0x9a>
     df4:	80 91 66 01 	lds	r24, 0x0166
     df8:	90 91 67 01 	lds	r25, 0x0167
     dfc:	20 91 57 01 	lds	r18, 0x0157
     e00:	30 91 58 01 	lds	r19, 0x0158
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	20 f4       	brcc	.+8      	; 0xe12 <__vector_14+0x9a>
     e0a:	80 91 0f 01 	lds	r24, 0x010F
     e0e:	84 30       	cpi	r24, 0x04	; 4
     e10:	89 f0       	breq	.+34     	; 0xe34 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e34:	e0 91 03 01 	lds	r30, 0x0103
     e38:	f0 91 04 01 	lds	r31, 0x0104
     e3c:	09 95       	icall
        if (msg) {
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	41 f3       	breq	.-48     	; 0xe12 <__vector_14+0x9a>
            if (message_send(msg)) {
     e42:	0e 94 a4 09 	call	0x1348	; 0x1348 <message_send>
     e46:	81 11       	cpse	r24, r1
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e4a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <rand>
     e4e:	99 27       	eor	r25, r25
     e50:	90 93 56 01 	sts	0x0156, r25
     e54:	80 93 55 01 	sts	0x0155, r24
                OCR0A = tx_increment;
     e58:	87 bd       	out	0x27, r24	; 39
     e5a:	db cf       	rjmp	.-74     	; 0xe12 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e5c:	e0 91 01 01 	lds	r30, 0x0101
     e60:	f0 91 02 01 	lds	r31, 0x0102
     e64:	09 95       	icall
                tx_clock = 0;
     e66:	10 92 58 01 	sts	0x0158, r1
     e6a:	10 92 57 01 	sts	0x0157, r1
     e6e:	d1 cf       	rjmp	.-94     	; 0xe12 <__vector_14+0x9a>

00000e70 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e70:	80 ff       	sbrs	r24, 0
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <set_color+0x26>
        DDRD |= (1<<5);
     e74:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e76:	81 ff       	sbrs	r24, 1
     e78:	11 c0       	rjmp	.+34     	; 0xe9c <set_color+0x2c>
        DDRD |= (1<<4);
     e7a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e7c:	82 ff       	sbrs	r24, 2
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <set_color+0x32>
        DDRC |= (1<<3);
     e80:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e82:	83 ff       	sbrs	r24, 3
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <set_color+0x38>
        DDRC |= (1<<2);
     e86:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e88:	84 ff       	sbrs	r24, 4
     e8a:	11 c0       	rjmp	.+34     	; 0xeae <set_color+0x3e>
        DDRC |= (1<<5);
     e8c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e8e:	85 fd       	sbrc	r24, 5
     e90:	11 c0       	rjmp	.+34     	; 0xeb4 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e92:	3c 98       	cbi	0x07, 4	; 7
     e94:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e96:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e98:	81 fd       	sbrc	r24, 1
     e9a:	ef cf       	rjmp	.-34     	; 0xe7a <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e9c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e9e:	82 fd       	sbrc	r24, 2
     ea0:	ef cf       	rjmp	.-34     	; 0xe80 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     ea2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     ea4:	83 fd       	sbrc	r24, 3
     ea6:	ef cf       	rjmp	.-34     	; 0xe86 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ea8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     eaa:	84 fd       	sbrc	r24, 4
     eac:	ef cf       	rjmp	.-34     	; 0xe8c <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     eae:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     eb0:	85 ff       	sbrs	r24, 5
     eb2:	ef cf       	rjmp	.-34     	; 0xe92 <set_color+0x22>
        DDRC |= (1<<4);
     eb4:	3c 9a       	sbi	0x07, 4	; 7
     eb6:	08 95       	ret

00000eb8 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
    rx_timer_off();
     ec6:	10 92 81 00 	sts	0x0081, r1
     eca:	10 92 85 00 	sts	0x0085, r1
     ece:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 10 01 	sts	0x0110, r24
    rx_leadingbyte = 1;
     ed8:	80 93 54 01 	sts	0x0154, r24
    rx_busy = 0;
     edc:	10 92 37 01 	sts	0x0137, r1
    adc_trigger_high_gain();
     ee0:	10 92 7c 00 	sts	0x007C, r1
     ee4:	93 ea       	ldi	r25, 0xA3	; 163
     ee6:	90 93 7a 00 	sts	0x007A, r25
     eea:	80 93 7b 00 	sts	0x007B, r24
}
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f22:	20 91 84 00 	lds	r18, 0x0084
     f26:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	40 93 37 01 	sts	0x0137, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f30:	80 91 10 01 	lds	r24, 0x0110
     f34:	88 23       	and	r24, r24
     f36:	a9 f1       	breq	.+106    	; 0xfa2 <__vector_23+0xa6>
        rx_timer_on();
     f38:	10 92 85 00 	sts	0x0085, r1
     f3c:	10 92 84 00 	sts	0x0084, r1
     f40:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f44:	10 92 68 01 	sts	0x0168, r1
        rx_leadingbit = 0;
     f48:	10 92 10 01 	sts	0x0110, r1
        if (rx_leadingbyte) {
     f4c:	80 91 54 01 	lds	r24, 0x0154
     f50:	88 23       	and	r24, r24
     f52:	a1 f0       	breq	.+40     	; 0xf7c <__vector_23+0x80>
            adc_finish_conversion();
     f54:	80 91 7a 00 	lds	r24, 0x007A
     f58:	86 fd       	sbrc	r24, 6
     f5a:	fc cf       	rjmp	.-8      	; 0xf54 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f5c:	80 91 78 00 	lds	r24, 0x0078
     f60:	90 91 79 00 	lds	r25, 0x0079
     f64:	90 93 32 01 	sts	0x0132, r25
     f68:	80 93 31 01 	sts	0x0131, r24
            adc_trigger_low_gain();
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 7c 00 	sts	0x007C, r24
     f72:	93 ea       	ldi	r25, 0xA3	; 163
     f74:	90 93 7a 00 	sts	0x007A, r25
     f78:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	bf 91       	pop	r27
     f86:	af 91       	pop	r26
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	7f 91       	pop	r23
     f8e:	6f 91       	pop	r22
     f90:	5f 91       	pop	r21
     f92:	4f 91       	pop	r20
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     fa2:	c9 01       	movw	r24, r18
     fa4:	87 58       	subi	r24, 0x87	; 135
     fa6:	91 09       	sbc	r25, r1
     fa8:	84 37       	cpi	r24, 0x74	; 116
     faa:	99 40       	sbci	r25, 0x09	; 9
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <__vector_23+0xb4>
     fae:	52 c0       	rjmp	.+164    	; 0x1054 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     fb0:	26 58       	subi	r18, 0x86	; 134
     fb2:	31 09       	sbc	r19, r1
     fb4:	a4 ef       	ldi	r26, 0xF4	; 244
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__umulhisi3>
     fbc:	aa 27       	eor	r26, r26
     fbe:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	91 05       	cpc	r25, r1
     fc4:	a1 05       	cpc	r26, r1
     fc6:	b1 05       	cpc	r27, r1
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <__vector_23+0xd0>
     fca:	7b c0       	rjmp	.+246    	; 0x10c2 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     fcc:	40 93 10 01 	sts	0x0110, r20
                if (rx_leadingbyte) {
     fd0:	80 91 54 01 	lds	r24, 0x0154
     fd4:	81 11       	cpse	r24, r1
     fd6:	52 c0       	rjmp	.+164    	; 0x107c <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     fd8:	80 91 2e 01 	lds	r24, 0x012E
     fdc:	e8 2f       	mov	r30, r24
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	e6 5a       	subi	r30, 0xA6	; 166
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	90 91 68 01 	lds	r25, 0x0168
     fe8:	90 83       	st	Z, r25
                    rx_byteindex++;
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	80 93 2e 01 	sts	0x012E, r24
                    if (rx_byteindex == sizeof(message_t)) {
     ff0:	8c 30       	cpi	r24, 0x0C	; 12
     ff2:	21 f6       	brne	.-120    	; 0xf7c <__vector_23+0x80>
                        rx_timer_off();
     ff4:	10 92 81 00 	sts	0x0081, r1
     ff8:	10 92 85 00 	sts	0x0085, r1
     ffc:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1000:	40 93 54 01 	sts	0x0154, r20
                        rx_busy = 0;
    1004:	10 92 37 01 	sts	0x0137, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1008:	c0 91 64 01 	lds	r28, 0x0164
    100c:	d0 91 65 01 	lds	r29, 0x0165
    1010:	8a e5       	ldi	r24, 0x5A	; 90
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 88 09 	call	0x1310	; 0x1310 <message_crc>
    1018:	c8 17       	cp	r28, r24
    101a:	d9 07       	cpc	r29, r25
    101c:	09 f0       	breq	.+2      	; 0x1020 <__vector_23+0x124>
    101e:	ae cf       	rjmp	.-164    	; 0xf7c <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1020:	80 91 63 01 	lds	r24, 0x0163
    1024:	87 ff       	sbrs	r24, 7
    1026:	61 c0       	rjmp	.+194    	; 0x10ea <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1028:	98 e7       	ldi	r25, 0x78	; 120
    102a:	98 0f       	add	r25, r24
    102c:	93 30       	cpi	r25, 0x03	; 3
    102e:	30 f0       	brcs	.+12     	; 0x103c <__vector_23+0x140>
        motors_off();
    1030:	53 98       	cbi	0x0a, 3	; 10
    1032:	23 98       	cbi	0x04, 3	; 4
    1034:	10 92 b4 00 	sts	0x00B4, r1
    1038:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	e0 58       	subi	r30, 0x80	; 128
    1042:	f1 09       	sbc	r31, r1
    1044:	eb 30       	cpi	r30, 0x0B	; 11
    1046:	f1 05       	cpc	r31, r1
    1048:	08 f0       	brcs	.+2      	; 0x104c <__vector_23+0x150>
    104a:	98 cf       	rjmp	.-208    	; 0xf7c <__vector_23+0x80>
    104c:	e5 5c       	subi	r30, 0xC5	; 197
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1054:	10 92 81 00 	sts	0x0081, r1
    1058:	10 92 85 00 	sts	0x0085, r1
    105c:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1060:	40 93 10 01 	sts	0x0110, r20
            rx_leadingbyte = 1;
    1064:	40 93 54 01 	sts	0x0154, r20
            rx_busy = 0;
    1068:	10 92 37 01 	sts	0x0137, r1
            adc_trigger_high_gain();
    106c:	10 92 7c 00 	sts	0x007C, r1
    1070:	83 ea       	ldi	r24, 0xA3	; 163
    1072:	80 93 7a 00 	sts	0x007A, r24
    1076:	40 93 7b 00 	sts	0x007B, r20
    107a:	80 cf       	rjmp	.-256    	; 0xf7c <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    107c:	80 91 7a 00 	lds	r24, 0x007A
    1080:	86 fd       	sbrc	r24, 6
    1082:	fc cf       	rjmp	.-8      	; 0x107c <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1084:	80 91 78 00 	lds	r24, 0x0078
    1088:	90 91 79 00 	lds	r25, 0x0079
    108c:	90 93 30 01 	sts	0x0130, r25
    1090:	80 93 2f 01 	sts	0x012F, r24
                    adc_trigger_high_gain();
    1094:	10 92 7c 00 	sts	0x007C, r1
    1098:	83 ea       	ldi	r24, 0xA3	; 163
    109a:	80 93 7a 00 	sts	0x007A, r24
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    10a4:	90 91 68 01 	lds	r25, 0x0168
    10a8:	99 23       	and	r25, r25
    10aa:	d1 f0       	breq	.+52     	; 0x10e0 <__vector_23+0x1e4>
                        rx_timer_off();
    10ac:	10 92 81 00 	sts	0x0081, r1
    10b0:	10 92 85 00 	sts	0x0085, r1
    10b4:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10b8:	80 93 54 01 	sts	0x0154, r24
                        rx_busy = 0;
    10bc:	10 92 37 01 	sts	0x0137, r1
    10c0:	5d cf       	rjmp	.-326    	; 0xf7c <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <__vector_23+0x1d2>
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <__vector_23+0x1ce>
    10d2:	cf 01       	movw	r24, r30
    10d4:	90 91 68 01 	lds	r25, 0x0168
    10d8:	89 2b       	or	r24, r25
    10da:	80 93 68 01 	sts	0x0168, r24
    10de:	4e cf       	rjmp	.-356    	; 0xf7c <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10e0:	10 92 54 01 	sts	0x0154, r1
                        rx_byteindex = 0;
    10e4:	10 92 2e 01 	sts	0x012E, r1
    10e8:	49 cf       	rjmp	.-366    	; 0xf7c <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10ea:	e0 91 05 01 	lds	r30, 0x0105
    10ee:	f0 91 06 01 	lds	r31, 0x0106
    10f2:	6f e2       	ldi	r22, 0x2F	; 47
    10f4:	71 e0       	ldi	r23, 0x01	; 1
    10f6:	8a e5       	ldi	r24, 0x5A	; 90
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	09 95       	icall
    10fc:	3f cf       	rjmp	.-386    	; 0xf7c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10fe:	80 91 5a 01 	lds	r24, 0x015A
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	09 f4       	brne	.+2      	; 0x1108 <__vector_23+0x20c>
    1106:	dd c0       	rjmp	.+442    	; 0x12c2 <__vector_23+0x3c6>
    1108:	08 f4       	brcc	.+2      	; 0x110c <__vector_23+0x210>
    110a:	ba c0       	rjmp	.+372    	; 0x1280 <__vector_23+0x384>
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	09 f4       	brne	.+2      	; 0x1112 <__vector_23+0x216>
    1110:	c6 c0       	rjmp	.+396    	; 0x129e <__vector_23+0x3a2>
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	09 f0       	breq	.+2      	; 0x1118 <__vector_23+0x21c>
    1116:	b1 c0       	rjmp	.+354    	; 0x127a <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1118:	80 91 0d 01 	lds	r24, 0x010D
    111c:	90 91 60 01 	lds	r25, 0x0160
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	09 f4       	brne	.+2      	; 0x1126 <__vector_23+0x22a>
    1124:	e3 c0       	rjmp	.+454    	; 0x12ec <__vector_23+0x3f0>
    1126:	80 91 5f 01 	lds	r24, 0x015F
                        prev_motion = MOVE_STOP;
    112a:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    112e:	23 e0       	ldi	r18, 0x03	; 3
    1130:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    1134:	80 93 6b 01 	sts	0x016B, r24
                        kilo_straight_right = calibmsg->straight_right;
    1138:	90 93 6c 01 	sts	0x016C, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    113c:	80 91 0f 01 	lds	r24, 0x010F
    1140:	86 30       	cpi	r24, 0x06	; 6
    1142:	09 f4       	brne	.+2      	; 0x1146 <__vector_23+0x24a>
    1144:	1b cf       	rjmp	.-458    	; 0xf7c <__vector_23+0x80>
                motors_on();
    1146:	53 9a       	sbi	0x0a, 3	; 10
    1148:	23 9a       	sbi	0x04, 3	; 4
    114a:	10 92 b4 00 	sts	0x00B4, r1
    114e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1152:	86 e0       	ldi	r24, 0x06	; 6
    1154:	80 93 0f 01 	sts	0x010F, r24
    1158:	11 cf       	rjmp	.-478    	; 0xf7c <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    115a:	80 91 0f 01 	lds	r24, 0x010F
    115e:	86 30       	cpi	r24, 0x06	; 6
    1160:	99 f0       	breq	.+38     	; 0x1188 <__vector_23+0x28c>
                motors_on();
    1162:	53 9a       	sbi	0x0a, 3	; 10
    1164:	23 9a       	sbi	0x04, 3	; 4
    1166:	10 92 b4 00 	sts	0x00B4, r1
    116a:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    116e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1170:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1172:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1174:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1176:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1178:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    117a:	10 92 0d 01 	sts	0x010D, r1
    117e:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    1182:	86 e0       	ldi	r24, 0x06	; 6
    1184:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 01       	movw	r18, r24
    118e:	00 90 5a 01 	lds	r0, 0x015A
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <__vector_23+0x29c>
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <__vector_23+0x298>
    119c:	80 91 69 01 	lds	r24, 0x0169
    11a0:	90 91 6a 01 	lds	r25, 0x016A
    11a4:	82 23       	and	r24, r18
    11a6:	93 23       	and	r25, r19
    11a8:	89 2b       	or	r24, r25
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__vector_23+0x2b2>
    11ac:	86 c0       	rjmp	.+268    	; 0x12ba <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    11ae:	10 92 0d 01 	sts	0x010D, r1
    11b2:	e4 ce       	rjmp	.-568    	; 0xf7c <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 0f 01 	sts	0x010F, r24
    11ba:	e0 ce       	rjmp	.-576    	; 0xf7c <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    11bc:	e0 e0       	ldi	r30, 0x00	; 0
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    11c2:	80 91 6e 00 	lds	r24, 0x006E
    11c6:	8d 7f       	andi	r24, 0xFD	; 253
    11c8:	80 93 6e 00 	sts	0x006E, r24
    11cc:	16 bc       	out	0x26, r1	; 38
            bootload();
    11ce:	e0 e0       	ldi	r30, 0x00	; 0
    11d0:	f0 e7       	ldi	r31, 0x70	; 112
    11d2:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11d4:	10 92 0f 01 	sts	0x010F, r1
    11d8:	d1 ce       	rjmp	.-606    	; 0xf7c <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	80 93 0f 01 	sts	0x010F, r24
    11e0:	cd ce       	rjmp	.-614    	; 0xf7c <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11e2:	85 e0       	ldi	r24, 0x05	; 5
    11e4:	80 93 0f 01 	sts	0x010F, r24
    11e8:	c9 ce       	rjmp	.-622    	; 0xf7c <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11ea:	80 91 0f 01 	lds	r24, 0x010F
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__vector_23+0x2f8>
    11f2:	c4 ce       	rjmp	.-632    	; 0xf7c <__vector_23+0x80>
    11f4:	80 91 0f 01 	lds	r24, 0x010F
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	09 f4       	brne	.+2      	; 0x11fe <__vector_23+0x302>
    11fc:	bf ce       	rjmp	.-642    	; 0xf7c <__vector_23+0x80>
                motors_on();
    11fe:	53 9a       	sbi	0x0a, 3	; 10
    1200:	23 9a       	sbi	0x04, 3	; 4
    1202:	10 92 b4 00 	sts	0x00B4, r1
    1206:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	80 93 0f 01 	sts	0x010F, r24
    1210:	b5 ce       	rjmp	.-662    	; 0xf7c <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1212:	80 91 0f 01 	lds	r24, 0x010F
    1216:	86 30       	cpi	r24, 0x06	; 6
    1218:	09 f0       	breq	.+2      	; 0x121c <__vector_23+0x320>
    121a:	b0 ce       	rjmp	.-672    	; 0xf7c <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    121c:	60 91 69 01 	lds	r22, 0x0169
    1220:	80 eb       	ldi	r24, 0xB0	; 176
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1228:	60 91 6a 01 	lds	r22, 0x016A
    122c:	81 eb       	ldi	r24, 0xB1	; 177
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1234:	60 91 6d 01 	lds	r22, 0x016D
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1240:	60 91 59 01 	lds	r22, 0x0159
    1244:	89 e0       	ldi	r24, 0x09	; 9
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    124c:	60 91 6b 01 	lds	r22, 0x016B
    1250:	8c e0       	ldi	r24, 0x0C	; 12
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1258:	60 91 6c 01 	lds	r22, 0x016C
    125c:	84 e1       	ldi	r24, 0x14	; 20
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <eeprom_write_byte>
                        motors_off();
    1264:	53 98       	cbi	0x0a, 3	; 10
    1266:	23 98       	cbi	0x04, 3	; 4
    1268:	10 92 b4 00 	sts	0x00B4, r1
    126c:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 0f 01 	sts	0x010F, r24
    1276:	80 91 5a 01 	lds	r24, 0x015A
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    127a:	81 11       	cpse	r24, r1
    127c:	5f cf       	rjmp	.-322    	; 0x113c <__vector_23+0x240>
    127e:	7e ce       	rjmp	.-772    	; 0xf7c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1280:	88 23       	and	r24, r24
    1282:	39 f2       	breq	.-114    	; 0x1212 <__vector_23+0x316>
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	c9 f7       	brne	.-14     	; 0x127a <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1288:	80 91 5b 01 	lds	r24, 0x015B
    128c:	90 91 5c 01 	lds	r25, 0x015C
    1290:	90 93 6a 01 	sts	0x016A, r25
    1294:	80 93 69 01 	sts	0x0169, r24
                    cur_motion = MOVE_STOP;
    1298:	10 92 0d 01 	sts	0x010D, r1
    129c:	4f cf       	rjmp	.-354    	; 0x113c <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    129e:	80 91 0d 01 	lds	r24, 0x010D
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	71 f1       	breq	.+92     	; 0x1302 <__vector_23+0x406>
    12a6:	80 91 5e 01 	lds	r24, 0x015E
                        prev_motion = MOVE_STOP;
    12aa:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    12b4:	80 93 59 01 	sts	0x0159, r24
    12b8:	41 cf       	rjmp	.-382    	; 0x113c <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 0d 01 	sts	0x010D, r24
    12c0:	5d ce       	rjmp	.-838    	; 0xf7c <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12c2:	80 91 0d 01 	lds	r24, 0x010D
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	51 f0       	breq	.+20     	; 0x12de <__vector_23+0x3e2>
    12ca:	80 91 5d 01 	lds	r24, 0x015D
                        prev_motion = MOVE_STOP;
    12ce:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    12d8:	80 93 6d 01 	sts	0x016D, r24
    12dc:	2f cf       	rjmp	.-418    	; 0x113c <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12de:	80 91 5d 01 	lds	r24, 0x015D
    12e2:	90 91 6d 01 	lds	r25, 0x016D
    12e6:	89 13       	cpse	r24, r25
    12e8:	f2 cf       	rjmp	.-28     	; 0x12ce <__vector_23+0x3d2>
    12ea:	28 cf       	rjmp	.-432    	; 0x113c <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12ec:	80 91 6c 01 	lds	r24, 0x016C
    12f0:	98 13       	cpse	r25, r24
    12f2:	19 cf       	rjmp	.-462    	; 0x1126 <__vector_23+0x22a>
    12f4:	80 91 5f 01 	lds	r24, 0x015F
    12f8:	20 91 6b 01 	lds	r18, 0x016B
    12fc:	82 13       	cpse	r24, r18
    12fe:	15 cf       	rjmp	.-470    	; 0x112a <__vector_23+0x22e>
    1300:	1d cf       	rjmp	.-454    	; 0x113c <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1302:	80 91 5e 01 	lds	r24, 0x015E
    1306:	90 91 59 01 	lds	r25, 0x0159
    130a:	89 13       	cpse	r24, r25
    130c:	ce cf       	rjmp	.-100    	; 0x12aa <__vector_23+0x3ae>
    130e:	16 cf       	rjmp	.-468    	; 0x113c <__vector_23+0x240>

00001310 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1310:	fc 01       	movw	r30, r24
    1312:	ac 01       	movw	r20, r24
    1314:	46 5f       	subi	r20, 0xF6	; 246
    1316:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    131c:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    131e:	82 27       	eor	r24, r18
    1320:	08 2e       	mov	r0, r24
    1322:	82 95       	swap	r24
    1324:	80 7f       	andi	r24, 0xF0	; 240
    1326:	80 25       	eor	r24, r0
    1328:	09 2e       	mov	r0, r25
    132a:	98 2f       	mov	r25, r24
    132c:	82 95       	swap	r24
    132e:	8f 70       	andi	r24, 0x0F	; 15
    1330:	08 26       	eor	r0, r24
    1332:	86 95       	lsr	r24
    1334:	98 27       	eor	r25, r24
    1336:	89 27       	eor	r24, r25
    1338:	88 0f       	add	r24, r24
    133a:	88 0f       	add	r24, r24
    133c:	88 0f       	add	r24, r24
    133e:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1340:	e4 17       	cp	r30, r20
    1342:	f5 07       	cpc	r31, r21
    1344:	59 f7       	brne	.-42     	; 0x131c <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1346:	08 95       	ret

00001348 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1348:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    134a:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    134c:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    134e:	20 91 2d 01 	lds	r18, 0x012D
    or tmpreg1, ddrreg
    1352:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1354:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1356:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1358:	30 91 2d 01 	lds	r19, 0x012D
    135c:	20 30       	cpi	r18, 0x00	; 0
    135e:	29 f0       	breq	.+10     	; 0x136a <message_send+0x22>
    1360:	00 00       	nop
    1362:	25 b1       	in	r18, 0x05	; 5
    1364:	23 2b       	or	r18, r19
    1366:	25 b9       	out	0x05, r18	; 5
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <message_send+0x2a>
    136a:	00 00       	nop
    136c:	00 00       	nop
    136e:	00 00       	nop
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <message_send+0x2a>
    1372:	00 00       	nop
    1374:	00 00       	nop
    1376:	00 00       	nop
    1378:	30 95       	com	r19
    137a:	25 b1       	in	r18, 0x05	; 5
    137c:	23 23       	and	r18, r19
    137e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1380:	2e ea       	ldi	r18, 0xAE	; 174
    1382:	2a 95       	dec	r18
    1384:	f1 f7       	brne	.-4      	; 0x1382 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1386:	2b ee       	ldi	r18, 0xEB	; 235

00001388 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1388:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    138a:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    138c:	0a c0       	rjmp	.+20     	; 0x13a2 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    138e:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1390:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    1394:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1396:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1398:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    139a:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    139c:	0f be       	out	0x3f, r0	; 63
    return 0
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	08 95       	ret

000013a2 <nocollision>:
nocollision:
    nop
    13a2:	00 00       	nop
    dec tmpreg1
    13a4:	2a 95       	dec	r18
    brne checkcollision
    13a6:	81 f7       	brne	.-32     	; 0x1388 <checkcollision>

    ldi tmpreg1, 0x01
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13aa:	30 91 2d 01 	lds	r19, 0x012D
    13ae:	20 30       	cpi	r18, 0x00	; 0
    13b0:	29 f0       	breq	.+10     	; 0x13bc <nocollision+0x1a>
    13b2:	00 00       	nop
    13b4:	25 b1       	in	r18, 0x05	; 5
    13b6:	23 2b       	or	r18, r19
    13b8:	25 b9       	out	0x05, r18	; 5
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <nocollision+0x22>
    13bc:	00 00       	nop
    13be:	00 00       	nop
    13c0:	00 00       	nop
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <nocollision+0x22>
    13c4:	00 00       	nop
    13c6:	00 00       	nop
    13c8:	00 00       	nop
    13ca:	30 95       	com	r19
    13cc:	25 b1       	in	r18, 0x05	; 5
    13ce:	23 23       	and	r18, r19
    13d0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    13d2:	00 00       	nop
    13d4:	24 e5       	ldi	r18, 0x54	; 84
    13d6:	2a 95       	dec	r18
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13da:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13dc:	8c e0       	ldi	r24, 0x0C	; 12

000013de <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13de:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13e2:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13e4:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    13e6:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    13e8:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13ea:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13ee:	50 e0       	ldi	r21, 0x00	; 0

000013f0 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13f0:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13f2:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13f4:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13f6:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13f8:	30 91 2d 01 	lds	r19, 0x012D
    13fc:	20 30       	cpi	r18, 0x00	; 0
    13fe:	29 f0       	breq	.+10     	; 0x140a <sendbit+0x1a>
    1400:	00 00       	nop
    1402:	25 b1       	in	r18, 0x05	; 5
    1404:	23 2b       	or	r18, r19
    1406:	25 b9       	out	0x05, r18	; 5
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <sendbit+0x22>
    140a:	00 00       	nop
    140c:	00 00       	nop
    140e:	00 00       	nop
    1410:	00 c0       	rjmp	.+0      	; 0x1412 <sendbit+0x22>
    1412:	00 00       	nop
    1414:	00 00       	nop
    1416:	00 00       	nop
    1418:	30 95       	com	r19
    141a:	25 b1       	in	r18, 0x05	; 5
    141c:	23 23       	and	r18, r19
    141e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1420:	00 00       	nop
    1422:	21 e5       	ldi	r18, 0x51	; 81
    1424:	2a 95       	dec	r18
    1426:	f1 f7       	brne	.-4      	; 0x1424 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1428:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    142a:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    142c:	9a 95       	dec	r25
    brne sendbit
    142e:	01 f7       	brne	.-64     	; 0x13f0 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1430:	8a 95       	dec	r24
    brne sendbyte
    1432:	a9 f6       	brne	.-86     	; 0x13de <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1434:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1436:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1438:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    143a:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    143c:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    1440:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1442:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1444:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1446:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1448:	0f be       	out	0x3f, r0	; 63
    return 1
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret

0000144e <main>:
}

int main()
{
    kilo_init();
    144e:	0e 94 b8 00 	call	0x170	; 0x170 <kilo_init>
    kilo_start(setup, loop);
    1452:	62 e7       	ldi	r22, 0x72	; 114
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	81 e7       	ldi	r24, 0x71	; 113
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 b4 01 	call	0x368	; 0x368 <kilo_start>
    
    return 0;
}
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	08 95       	ret

00001464 <__divmodhi4>:
    1464:	97 fb       	bst	r25, 7
    1466:	07 2e       	mov	r0, r23
    1468:	16 f4       	brtc	.+4      	; 0x146e <__divmodhi4+0xa>
    146a:	00 94       	com	r0
    146c:	07 d0       	rcall	.+14     	; 0x147c <__divmodhi4_neg1>
    146e:	77 fd       	sbrc	r23, 7
    1470:	09 d0       	rcall	.+18     	; 0x1484 <__divmodhi4_neg2>
    1472:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodhi4>
    1476:	07 fc       	sbrc	r0, 7
    1478:	05 d0       	rcall	.+10     	; 0x1484 <__divmodhi4_neg2>
    147a:	3e f4       	brtc	.+14     	; 0x148a <__divmodhi4_exit>

0000147c <__divmodhi4_neg1>:
    147c:	90 95       	com	r25
    147e:	81 95       	neg	r24
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	08 95       	ret

00001484 <__divmodhi4_neg2>:
    1484:	70 95       	com	r23
    1486:	61 95       	neg	r22
    1488:	7f 4f       	sbci	r23, 0xFF	; 255

0000148a <__divmodhi4_exit>:
    148a:	08 95       	ret

0000148c <__tablejump2__>:
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	05 90       	lpm	r0, Z+
    1492:	f4 91       	lpm	r31, Z
    1494:	e0 2d       	mov	r30, r0
    1496:	09 94       	ijmp

00001498 <__umulhisi3>:
    1498:	a2 9f       	mul	r26, r18
    149a:	b0 01       	movw	r22, r0
    149c:	b3 9f       	mul	r27, r19
    149e:	c0 01       	movw	r24, r0
    14a0:	a3 9f       	mul	r26, r19
    14a2:	70 0d       	add	r23, r0
    14a4:	81 1d       	adc	r24, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	91 1d       	adc	r25, r1
    14aa:	b2 9f       	mul	r27, r18
    14ac:	70 0d       	add	r23, r0
    14ae:	81 1d       	adc	r24, r1
    14b0:	11 24       	eor	r1, r1
    14b2:	91 1d       	adc	r25, r1
    14b4:	08 95       	ret

000014b6 <__udivmodhi4>:
    14b6:	aa 1b       	sub	r26, r26
    14b8:	bb 1b       	sub	r27, r27
    14ba:	51 e1       	ldi	r21, 0x11	; 17
    14bc:	07 c0       	rjmp	.+14     	; 0x14cc <__udivmodhi4_ep>

000014be <__udivmodhi4_loop>:
    14be:	aa 1f       	adc	r26, r26
    14c0:	bb 1f       	adc	r27, r27
    14c2:	a6 17       	cp	r26, r22
    14c4:	b7 07       	cpc	r27, r23
    14c6:	10 f0       	brcs	.+4      	; 0x14cc <__udivmodhi4_ep>
    14c8:	a6 1b       	sub	r26, r22
    14ca:	b7 0b       	sbc	r27, r23

000014cc <__udivmodhi4_ep>:
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	5a 95       	dec	r21
    14d2:	a9 f7       	brne	.-22     	; 0x14be <__udivmodhi4_loop>
    14d4:	80 95       	com	r24
    14d6:	90 95       	com	r25
    14d8:	bc 01       	movw	r22, r24
    14da:	cd 01       	movw	r24, r26
    14dc:	08 95       	ret

000014de <__subsf3>:
    14de:	50 58       	subi	r21, 0x80	; 128

000014e0 <__addsf3>:
    14e0:	bb 27       	eor	r27, r27
    14e2:	aa 27       	eor	r26, r26
    14e4:	0e 94 87 0a 	call	0x150e	; 0x150e <__addsf3x>
    14e8:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__fp_round>
    14ec:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_pscA>
    14f0:	38 f0       	brcs	.+14     	; 0x1500 <__addsf3+0x20>
    14f2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscB>
    14f6:	20 f0       	brcs	.+8      	; 0x1500 <__addsf3+0x20>
    14f8:	39 f4       	brne	.+14     	; 0x1508 <__addsf3+0x28>
    14fa:	9f 3f       	cpi	r25, 0xFF	; 255
    14fc:	19 f4       	brne	.+6      	; 0x1504 <__addsf3+0x24>
    14fe:	26 f4       	brtc	.+8      	; 0x1508 <__addsf3+0x28>
    1500:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_nan>
    1504:	0e f4       	brtc	.+2      	; 0x1508 <__addsf3+0x28>
    1506:	e0 95       	com	r30
    1508:	e7 fb       	bst	r30, 7
    150a:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_inf>

0000150e <__addsf3x>:
    150e:	e9 2f       	mov	r30, r25
    1510:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_split3>
    1514:	58 f3       	brcs	.-42     	; 0x14ec <__addsf3+0xc>
    1516:	ba 17       	cp	r27, r26
    1518:	62 07       	cpc	r22, r18
    151a:	73 07       	cpc	r23, r19
    151c:	84 07       	cpc	r24, r20
    151e:	95 07       	cpc	r25, r21
    1520:	20 f0       	brcs	.+8      	; 0x152a <__addsf3x+0x1c>
    1522:	79 f4       	brne	.+30     	; 0x1542 <__addsf3x+0x34>
    1524:	a6 f5       	brtc	.+104    	; 0x158e <__addsf3x+0x80>
    1526:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_zero>
    152a:	0e f4       	brtc	.+2      	; 0x152e <__addsf3x+0x20>
    152c:	e0 95       	com	r30
    152e:	0b 2e       	mov	r0, r27
    1530:	ba 2f       	mov	r27, r26
    1532:	a0 2d       	mov	r26, r0
    1534:	0b 01       	movw	r0, r22
    1536:	b9 01       	movw	r22, r18
    1538:	90 01       	movw	r18, r0
    153a:	0c 01       	movw	r0, r24
    153c:	ca 01       	movw	r24, r20
    153e:	a0 01       	movw	r20, r0
    1540:	11 24       	eor	r1, r1
    1542:	ff 27       	eor	r31, r31
    1544:	59 1b       	sub	r21, r25
    1546:	99 f0       	breq	.+38     	; 0x156e <__addsf3x+0x60>
    1548:	59 3f       	cpi	r21, 0xF9	; 249
    154a:	50 f4       	brcc	.+20     	; 0x1560 <__addsf3x+0x52>
    154c:	50 3e       	cpi	r21, 0xE0	; 224
    154e:	68 f1       	brcs	.+90     	; 0x15aa <__addsf3x+0x9c>
    1550:	1a 16       	cp	r1, r26
    1552:	f0 40       	sbci	r31, 0x00	; 0
    1554:	a2 2f       	mov	r26, r18
    1556:	23 2f       	mov	r18, r19
    1558:	34 2f       	mov	r19, r20
    155a:	44 27       	eor	r20, r20
    155c:	58 5f       	subi	r21, 0xF8	; 248
    155e:	f3 cf       	rjmp	.-26     	; 0x1546 <__addsf3x+0x38>
    1560:	46 95       	lsr	r20
    1562:	37 95       	ror	r19
    1564:	27 95       	ror	r18
    1566:	a7 95       	ror	r26
    1568:	f0 40       	sbci	r31, 0x00	; 0
    156a:	53 95       	inc	r21
    156c:	c9 f7       	brne	.-14     	; 0x1560 <__addsf3x+0x52>
    156e:	7e f4       	brtc	.+30     	; 0x158e <__addsf3x+0x80>
    1570:	1f 16       	cp	r1, r31
    1572:	ba 0b       	sbc	r27, r26
    1574:	62 0b       	sbc	r22, r18
    1576:	73 0b       	sbc	r23, r19
    1578:	84 0b       	sbc	r24, r20
    157a:	ba f0       	brmi	.+46     	; 0x15aa <__addsf3x+0x9c>
    157c:	91 50       	subi	r25, 0x01	; 1
    157e:	a1 f0       	breq	.+40     	; 0x15a8 <__addsf3x+0x9a>
    1580:	ff 0f       	add	r31, r31
    1582:	bb 1f       	adc	r27, r27
    1584:	66 1f       	adc	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	c2 f7       	brpl	.-16     	; 0x157c <__addsf3x+0x6e>
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <__addsf3x+0x9c>
    158e:	ba 0f       	add	r27, r26
    1590:	62 1f       	adc	r22, r18
    1592:	73 1f       	adc	r23, r19
    1594:	84 1f       	adc	r24, r20
    1596:	48 f4       	brcc	.+18     	; 0x15aa <__addsf3x+0x9c>
    1598:	87 95       	ror	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	b7 95       	ror	r27
    15a0:	f7 95       	ror	r31
    15a2:	9e 3f       	cpi	r25, 0xFE	; 254
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <__addsf3x+0x9a>
    15a6:	b0 cf       	rjmp	.-160    	; 0x1508 <__addsf3+0x28>
    15a8:	93 95       	inc	r25
    15aa:	88 0f       	add	r24, r24
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <__addsf3x+0xa2>
    15ae:	99 27       	eor	r25, r25
    15b0:	ee 0f       	add	r30, r30
    15b2:	97 95       	ror	r25
    15b4:	87 95       	ror	r24
    15b6:	08 95       	ret

000015b8 <__divsf3>:
    15b8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__divsf3x>
    15bc:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__fp_round>
    15c0:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscB>
    15c4:	58 f0       	brcs	.+22     	; 0x15dc <__divsf3+0x24>
    15c6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_pscA>
    15ca:	40 f0       	brcs	.+16     	; 0x15dc <__divsf3+0x24>
    15cc:	29 f4       	brne	.+10     	; 0x15d8 <__divsf3+0x20>
    15ce:	5f 3f       	cpi	r21, 0xFF	; 255
    15d0:	29 f0       	breq	.+10     	; 0x15dc <__divsf3+0x24>
    15d2:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_inf>
    15d6:	51 11       	cpse	r21, r1
    15d8:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_szero>
    15dc:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_nan>

000015e0 <__divsf3x>:
    15e0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_split3>
    15e4:	68 f3       	brcs	.-38     	; 0x15c0 <__divsf3+0x8>

000015e6 <__divsf3_pse>:
    15e6:	99 23       	and	r25, r25
    15e8:	b1 f3       	breq	.-20     	; 0x15d6 <__divsf3+0x1e>
    15ea:	55 23       	and	r21, r21
    15ec:	91 f3       	breq	.-28     	; 0x15d2 <__divsf3+0x1a>
    15ee:	95 1b       	sub	r25, r21
    15f0:	55 0b       	sbc	r21, r21
    15f2:	bb 27       	eor	r27, r27
    15f4:	aa 27       	eor	r26, r26
    15f6:	62 17       	cp	r22, r18
    15f8:	73 07       	cpc	r23, r19
    15fa:	84 07       	cpc	r24, r20
    15fc:	38 f0       	brcs	.+14     	; 0x160c <__divsf3_pse+0x26>
    15fe:	9f 5f       	subi	r25, 0xFF	; 255
    1600:	5f 4f       	sbci	r21, 0xFF	; 255
    1602:	22 0f       	add	r18, r18
    1604:	33 1f       	adc	r19, r19
    1606:	44 1f       	adc	r20, r20
    1608:	aa 1f       	adc	r26, r26
    160a:	a9 f3       	breq	.-22     	; 0x15f6 <__divsf3_pse+0x10>
    160c:	35 d0       	rcall	.+106    	; 0x1678 <__divsf3_pse+0x92>
    160e:	0e 2e       	mov	r0, r30
    1610:	3a f0       	brmi	.+14     	; 0x1620 <__divsf3_pse+0x3a>
    1612:	e0 e8       	ldi	r30, 0x80	; 128
    1614:	32 d0       	rcall	.+100    	; 0x167a <__divsf3_pse+0x94>
    1616:	91 50       	subi	r25, 0x01	; 1
    1618:	50 40       	sbci	r21, 0x00	; 0
    161a:	e6 95       	lsr	r30
    161c:	00 1c       	adc	r0, r0
    161e:	ca f7       	brpl	.-14     	; 0x1612 <__divsf3_pse+0x2c>
    1620:	2b d0       	rcall	.+86     	; 0x1678 <__divsf3_pse+0x92>
    1622:	fe 2f       	mov	r31, r30
    1624:	29 d0       	rcall	.+82     	; 0x1678 <__divsf3_pse+0x92>
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	bb 1f       	adc	r27, r27
    162e:	26 17       	cp	r18, r22
    1630:	37 07       	cpc	r19, r23
    1632:	48 07       	cpc	r20, r24
    1634:	ab 07       	cpc	r26, r27
    1636:	b0 e8       	ldi	r27, 0x80	; 128
    1638:	09 f0       	breq	.+2      	; 0x163c <__divsf3_pse+0x56>
    163a:	bb 0b       	sbc	r27, r27
    163c:	80 2d       	mov	r24, r0
    163e:	bf 01       	movw	r22, r30
    1640:	ff 27       	eor	r31, r31
    1642:	93 58       	subi	r25, 0x83	; 131
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
    1646:	3a f0       	brmi	.+14     	; 0x1656 <__divsf3_pse+0x70>
    1648:	9e 3f       	cpi	r25, 0xFE	; 254
    164a:	51 05       	cpc	r21, r1
    164c:	78 f0       	brcs	.+30     	; 0x166c <__divsf3_pse+0x86>
    164e:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_inf>
    1652:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_szero>
    1656:	5f 3f       	cpi	r21, 0xFF	; 255
    1658:	e4 f3       	brlt	.-8      	; 0x1652 <__divsf3_pse+0x6c>
    165a:	98 3e       	cpi	r25, 0xE8	; 232
    165c:	d4 f3       	brlt	.-12     	; 0x1652 <__divsf3_pse+0x6c>
    165e:	86 95       	lsr	r24
    1660:	77 95       	ror	r23
    1662:	67 95       	ror	r22
    1664:	b7 95       	ror	r27
    1666:	f7 95       	ror	r31
    1668:	9f 5f       	subi	r25, 0xFF	; 255
    166a:	c9 f7       	brne	.-14     	; 0x165e <__divsf3_pse+0x78>
    166c:	88 0f       	add	r24, r24
    166e:	91 1d       	adc	r25, r1
    1670:	96 95       	lsr	r25
    1672:	87 95       	ror	r24
    1674:	97 f9       	bld	r25, 7
    1676:	08 95       	ret
    1678:	e1 e0       	ldi	r30, 0x01	; 1
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	bb 1f       	adc	r27, r27
    1682:	62 17       	cp	r22, r18
    1684:	73 07       	cpc	r23, r19
    1686:	84 07       	cpc	r24, r20
    1688:	ba 07       	cpc	r27, r26
    168a:	20 f0       	brcs	.+8      	; 0x1694 <__divsf3_pse+0xae>
    168c:	62 1b       	sub	r22, r18
    168e:	73 0b       	sbc	r23, r19
    1690:	84 0b       	sbc	r24, r20
    1692:	ba 0b       	sbc	r27, r26
    1694:	ee 1f       	adc	r30, r30
    1696:	88 f7       	brcc	.-30     	; 0x167a <__divsf3_pse+0x94>
    1698:	e0 95       	com	r30
    169a:	08 95       	ret

0000169c <__fixsfsi>:
    169c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__fixunssfsi>
    16a0:	68 94       	set
    16a2:	b1 11       	cpse	r27, r1
    16a4:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_szero>
    16a8:	08 95       	ret

000016aa <__fixunssfsi>:
    16aa:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_splitA>
    16ae:	88 f0       	brcs	.+34     	; 0x16d2 <__fixunssfsi+0x28>
    16b0:	9f 57       	subi	r25, 0x7F	; 127
    16b2:	98 f0       	brcs	.+38     	; 0x16da <__fixunssfsi+0x30>
    16b4:	b9 2f       	mov	r27, r25
    16b6:	99 27       	eor	r25, r25
    16b8:	b7 51       	subi	r27, 0x17	; 23
    16ba:	b0 f0       	brcs	.+44     	; 0x16e8 <__fixunssfsi+0x3e>
    16bc:	e1 f0       	breq	.+56     	; 0x16f6 <__fixunssfsi+0x4c>
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	88 1f       	adc	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	1a f0       	brmi	.+6      	; 0x16ce <__fixunssfsi+0x24>
    16c8:	ba 95       	dec	r27
    16ca:	c9 f7       	brne	.-14     	; 0x16be <__fixunssfsi+0x14>
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <__fixunssfsi+0x4c>
    16ce:	b1 30       	cpi	r27, 0x01	; 1
    16d0:	91 f0       	breq	.+36     	; 0x16f6 <__fixunssfsi+0x4c>
    16d2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fp_zero>
    16d6:	b1 e0       	ldi	r27, 0x01	; 1
    16d8:	08 95       	ret
    16da:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_zero>
    16de:	67 2f       	mov	r22, r23
    16e0:	78 2f       	mov	r23, r24
    16e2:	88 27       	eor	r24, r24
    16e4:	b8 5f       	subi	r27, 0xF8	; 248
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <__fixunssfsi+0x4c>
    16e8:	b9 3f       	cpi	r27, 0xF9	; 249
    16ea:	cc f3       	brlt	.-14     	; 0x16de <__fixunssfsi+0x34>
    16ec:	86 95       	lsr	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	b3 95       	inc	r27
    16f4:	d9 f7       	brne	.-10     	; 0x16ec <__fixunssfsi+0x42>
    16f6:	3e f4       	brtc	.+14     	; 0x1706 <__fixunssfsi+0x5c>
    16f8:	90 95       	com	r25
    16fa:	80 95       	com	r24
    16fc:	70 95       	com	r23
    16fe:	61 95       	neg	r22
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	08 95       	ret

00001708 <__floatunsisf>:
    1708:	e8 94       	clt
    170a:	09 c0       	rjmp	.+18     	; 0x171e <__floatsisf+0x12>

0000170c <__floatsisf>:
    170c:	97 fb       	bst	r25, 7
    170e:	3e f4       	brtc	.+14     	; 0x171e <__floatsisf+0x12>
    1710:	90 95       	com	r25
    1712:	80 95       	com	r24
    1714:	70 95       	com	r23
    1716:	61 95       	neg	r22
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	8f 4f       	sbci	r24, 0xFF	; 255
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	99 23       	and	r25, r25
    1720:	a9 f0       	breq	.+42     	; 0x174c <__floatsisf+0x40>
    1722:	f9 2f       	mov	r31, r25
    1724:	96 e9       	ldi	r25, 0x96	; 150
    1726:	bb 27       	eor	r27, r27
    1728:	93 95       	inc	r25
    172a:	f6 95       	lsr	r31
    172c:	87 95       	ror	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	b7 95       	ror	r27
    1734:	f1 11       	cpse	r31, r1
    1736:	f8 cf       	rjmp	.-16     	; 0x1728 <__floatsisf+0x1c>
    1738:	fa f4       	brpl	.+62     	; 0x1778 <__floatsisf+0x6c>
    173a:	bb 0f       	add	r27, r27
    173c:	11 f4       	brne	.+4      	; 0x1742 <__floatsisf+0x36>
    173e:	60 ff       	sbrs	r22, 0
    1740:	1b c0       	rjmp	.+54     	; 0x1778 <__floatsisf+0x6c>
    1742:	6f 5f       	subi	r22, 0xFF	; 255
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	16 c0       	rjmp	.+44     	; 0x1778 <__floatsisf+0x6c>
    174c:	88 23       	and	r24, r24
    174e:	11 f0       	breq	.+4      	; 0x1754 <__floatsisf+0x48>
    1750:	96 e9       	ldi	r25, 0x96	; 150
    1752:	11 c0       	rjmp	.+34     	; 0x1776 <__floatsisf+0x6a>
    1754:	77 23       	and	r23, r23
    1756:	21 f0       	breq	.+8      	; 0x1760 <__floatsisf+0x54>
    1758:	9e e8       	ldi	r25, 0x8E	; 142
    175a:	87 2f       	mov	r24, r23
    175c:	76 2f       	mov	r23, r22
    175e:	05 c0       	rjmp	.+10     	; 0x176a <__floatsisf+0x5e>
    1760:	66 23       	and	r22, r22
    1762:	71 f0       	breq	.+28     	; 0x1780 <__floatsisf+0x74>
    1764:	96 e8       	ldi	r25, 0x86	; 134
    1766:	86 2f       	mov	r24, r22
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	2a f0       	brmi	.+10     	; 0x1778 <__floatsisf+0x6c>
    176e:	9a 95       	dec	r25
    1770:	66 0f       	add	r22, r22
    1772:	77 1f       	adc	r23, r23
    1774:	88 1f       	adc	r24, r24
    1776:	da f7       	brpl	.-10     	; 0x176e <__floatsisf+0x62>
    1778:	88 0f       	add	r24, r24
    177a:	96 95       	lsr	r25
    177c:	87 95       	ror	r24
    177e:	97 f9       	bld	r25, 7
    1780:	08 95       	ret

00001782 <__fp_inf>:
    1782:	97 f9       	bld	r25, 7
    1784:	9f 67       	ori	r25, 0x7F	; 127
    1786:	80 e8       	ldi	r24, 0x80	; 128
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	08 95       	ret

0000178e <__fp_nan>:
    178e:	9f ef       	ldi	r25, 0xFF	; 255
    1790:	80 ec       	ldi	r24, 0xC0	; 192
    1792:	08 95       	ret

00001794 <__fp_pscA>:
    1794:	00 24       	eor	r0, r0
    1796:	0a 94       	dec	r0
    1798:	16 16       	cp	r1, r22
    179a:	17 06       	cpc	r1, r23
    179c:	18 06       	cpc	r1, r24
    179e:	09 06       	cpc	r0, r25
    17a0:	08 95       	ret

000017a2 <__fp_pscB>:
    17a2:	00 24       	eor	r0, r0
    17a4:	0a 94       	dec	r0
    17a6:	12 16       	cp	r1, r18
    17a8:	13 06       	cpc	r1, r19
    17aa:	14 06       	cpc	r1, r20
    17ac:	05 06       	cpc	r0, r21
    17ae:	08 95       	ret

000017b0 <__fp_round>:
    17b0:	09 2e       	mov	r0, r25
    17b2:	03 94       	inc	r0
    17b4:	00 0c       	add	r0, r0
    17b6:	11 f4       	brne	.+4      	; 0x17bc <__fp_round+0xc>
    17b8:	88 23       	and	r24, r24
    17ba:	52 f0       	brmi	.+20     	; 0x17d0 <__fp_round+0x20>
    17bc:	bb 0f       	add	r27, r27
    17be:	40 f4       	brcc	.+16     	; 0x17d0 <__fp_round+0x20>
    17c0:	bf 2b       	or	r27, r31
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <__fp_round+0x18>
    17c4:	60 ff       	sbrs	r22, 0
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <__fp_round+0x20>
    17c8:	6f 5f       	subi	r22, 0xFF	; 255
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	08 95       	ret

000017d2 <__fp_split3>:
    17d2:	57 fd       	sbrc	r21, 7
    17d4:	90 58       	subi	r25, 0x80	; 128
    17d6:	44 0f       	add	r20, r20
    17d8:	55 1f       	adc	r21, r21
    17da:	59 f0       	breq	.+22     	; 0x17f2 <__fp_splitA+0x10>
    17dc:	5f 3f       	cpi	r21, 0xFF	; 255
    17de:	71 f0       	breq	.+28     	; 0x17fc <__fp_splitA+0x1a>
    17e0:	47 95       	ror	r20

000017e2 <__fp_splitA>:
    17e2:	88 0f       	add	r24, r24
    17e4:	97 fb       	bst	r25, 7
    17e6:	99 1f       	adc	r25, r25
    17e8:	61 f0       	breq	.+24     	; 0x1802 <__fp_splitA+0x20>
    17ea:	9f 3f       	cpi	r25, 0xFF	; 255
    17ec:	79 f0       	breq	.+30     	; 0x180c <__fp_splitA+0x2a>
    17ee:	87 95       	ror	r24
    17f0:	08 95       	ret
    17f2:	12 16       	cp	r1, r18
    17f4:	13 06       	cpc	r1, r19
    17f6:	14 06       	cpc	r1, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	f2 cf       	rjmp	.-28     	; 0x17e0 <__fp_split3+0xe>
    17fc:	46 95       	lsr	r20
    17fe:	f1 df       	rcall	.-30     	; 0x17e2 <__fp_splitA>
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <__fp_splitA+0x30>
    1802:	16 16       	cp	r1, r22
    1804:	17 06       	cpc	r1, r23
    1806:	18 06       	cpc	r1, r24
    1808:	99 1f       	adc	r25, r25
    180a:	f1 cf       	rjmp	.-30     	; 0x17ee <__fp_splitA+0xc>
    180c:	86 95       	lsr	r24
    180e:	71 05       	cpc	r23, r1
    1810:	61 05       	cpc	r22, r1
    1812:	08 94       	sec
    1814:	08 95       	ret

00001816 <__fp_zero>:
    1816:	e8 94       	clt

00001818 <__fp_szero>:
    1818:	bb 27       	eor	r27, r27
    181a:	66 27       	eor	r22, r22
    181c:	77 27       	eor	r23, r23
    181e:	cb 01       	movw	r24, r22
    1820:	97 f9       	bld	r25, 7
    1822:	08 95       	ret

00001824 <__mulsf3>:
    1824:	0e 94 25 0c 	call	0x184a	; 0x184a <__mulsf3x>
    1828:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__fp_round>
    182c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_pscA>
    1830:	38 f0       	brcs	.+14     	; 0x1840 <__mulsf3+0x1c>
    1832:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscB>
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__mulsf3+0x1c>
    1838:	95 23       	and	r25, r21
    183a:	11 f0       	breq	.+4      	; 0x1840 <__mulsf3+0x1c>
    183c:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_inf>
    1840:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_nan>
    1844:	11 24       	eor	r1, r1
    1846:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_szero>

0000184a <__mulsf3x>:
    184a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_split3>
    184e:	70 f3       	brcs	.-36     	; 0x182c <__mulsf3+0x8>

00001850 <__mulsf3_pse>:
    1850:	95 9f       	mul	r25, r21
    1852:	c1 f3       	breq	.-16     	; 0x1844 <__mulsf3+0x20>
    1854:	95 0f       	add	r25, r21
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	55 1f       	adc	r21, r21
    185a:	62 9f       	mul	r22, r18
    185c:	f0 01       	movw	r30, r0
    185e:	72 9f       	mul	r23, r18
    1860:	bb 27       	eor	r27, r27
    1862:	f0 0d       	add	r31, r0
    1864:	b1 1d       	adc	r27, r1
    1866:	63 9f       	mul	r22, r19
    1868:	aa 27       	eor	r26, r26
    186a:	f0 0d       	add	r31, r0
    186c:	b1 1d       	adc	r27, r1
    186e:	aa 1f       	adc	r26, r26
    1870:	64 9f       	mul	r22, r20
    1872:	66 27       	eor	r22, r22
    1874:	b0 0d       	add	r27, r0
    1876:	a1 1d       	adc	r26, r1
    1878:	66 1f       	adc	r22, r22
    187a:	82 9f       	mul	r24, r18
    187c:	22 27       	eor	r18, r18
    187e:	b0 0d       	add	r27, r0
    1880:	a1 1d       	adc	r26, r1
    1882:	62 1f       	adc	r22, r18
    1884:	73 9f       	mul	r23, r19
    1886:	b0 0d       	add	r27, r0
    1888:	a1 1d       	adc	r26, r1
    188a:	62 1f       	adc	r22, r18
    188c:	83 9f       	mul	r24, r19
    188e:	a0 0d       	add	r26, r0
    1890:	61 1d       	adc	r22, r1
    1892:	22 1f       	adc	r18, r18
    1894:	74 9f       	mul	r23, r20
    1896:	33 27       	eor	r19, r19
    1898:	a0 0d       	add	r26, r0
    189a:	61 1d       	adc	r22, r1
    189c:	23 1f       	adc	r18, r19
    189e:	84 9f       	mul	r24, r20
    18a0:	60 0d       	add	r22, r0
    18a2:	21 1d       	adc	r18, r1
    18a4:	82 2f       	mov	r24, r18
    18a6:	76 2f       	mov	r23, r22
    18a8:	6a 2f       	mov	r22, r26
    18aa:	11 24       	eor	r1, r1
    18ac:	9f 57       	subi	r25, 0x7F	; 127
    18ae:	50 40       	sbci	r21, 0x00	; 0
    18b0:	9a f0       	brmi	.+38     	; 0x18d8 <__mulsf3_pse+0x88>
    18b2:	f1 f0       	breq	.+60     	; 0x18f0 <__mulsf3_pse+0xa0>
    18b4:	88 23       	and	r24, r24
    18b6:	4a f0       	brmi	.+18     	; 0x18ca <__mulsf3_pse+0x7a>
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	bb 1f       	adc	r27, r27
    18be:	66 1f       	adc	r22, r22
    18c0:	77 1f       	adc	r23, r23
    18c2:	88 1f       	adc	r24, r24
    18c4:	91 50       	subi	r25, 0x01	; 1
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <__mulsf3_pse+0x64>
    18ca:	9e 3f       	cpi	r25, 0xFE	; 254
    18cc:	51 05       	cpc	r21, r1
    18ce:	80 f0       	brcs	.+32     	; 0x18f0 <__mulsf3_pse+0xa0>
    18d0:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_inf>
    18d4:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_szero>
    18d8:	5f 3f       	cpi	r21, 0xFF	; 255
    18da:	e4 f3       	brlt	.-8      	; 0x18d4 <__mulsf3_pse+0x84>
    18dc:	98 3e       	cpi	r25, 0xE8	; 232
    18de:	d4 f3       	brlt	.-12     	; 0x18d4 <__mulsf3_pse+0x84>
    18e0:	86 95       	lsr	r24
    18e2:	77 95       	ror	r23
    18e4:	67 95       	ror	r22
    18e6:	b7 95       	ror	r27
    18e8:	f7 95       	ror	r31
    18ea:	e7 95       	ror	r30
    18ec:	9f 5f       	subi	r25, 0xFF	; 255
    18ee:	c1 f7       	brne	.-16     	; 0x18e0 <__mulsf3_pse+0x90>
    18f0:	fe 2b       	or	r31, r30
    18f2:	88 0f       	add	r24, r24
    18f4:	91 1d       	adc	r25, r1
    18f6:	96 95       	lsr	r25
    18f8:	87 95       	ror	r24
    18fa:	97 f9       	bld	r25, 7
    18fc:	08 95       	ret

000018fe <do_rand>:
    18fe:	8f 92       	push	r8
    1900:	9f 92       	push	r9
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	ec 01       	movw	r28, r24
    1914:	68 81       	ld	r22, Y
    1916:	79 81       	ldd	r23, Y+1	; 0x01
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	9b 81       	ldd	r25, Y+3	; 0x03
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	81 05       	cpc	r24, r1
    1922:	91 05       	cpc	r25, r1
    1924:	21 f4       	brne	.+8      	; 0x192e <do_rand+0x30>
    1926:	64 e2       	ldi	r22, 0x24	; 36
    1928:	79 ed       	ldi	r23, 0xD9	; 217
    192a:	8b e5       	ldi	r24, 0x5B	; 91
    192c:	97 e0       	ldi	r25, 0x07	; 7
    192e:	2d e1       	ldi	r18, 0x1D	; 29
    1930:	33 ef       	ldi	r19, 0xF3	; 243
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__divmodsi4>
    193a:	49 01       	movw	r8, r18
    193c:	5a 01       	movw	r10, r20
    193e:	9b 01       	movw	r18, r22
    1940:	ac 01       	movw	r20, r24
    1942:	a7 ea       	ldi	r26, 0xA7	; 167
    1944:	b1 e4       	ldi	r27, 0x41	; 65
    1946:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__muluhisi3>
    194a:	6b 01       	movw	r12, r22
    194c:	7c 01       	movw	r14, r24
    194e:	ac ee       	ldi	r26, 0xEC	; 236
    1950:	b4 ef       	ldi	r27, 0xF4	; 244
    1952:	a5 01       	movw	r20, r10
    1954:	94 01       	movw	r18, r8
    1956:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__mulohisi3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8c 0d       	add	r24, r12
    1960:	9d 1d       	adc	r25, r13
    1962:	ae 1d       	adc	r26, r14
    1964:	bf 1d       	adc	r27, r15
    1966:	b7 ff       	sbrs	r27, 7
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <do_rand+0x72>
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	a1 09       	sbc	r26, r1
    196e:	b0 48       	sbci	r27, 0x80	; 128
    1970:	88 83       	st	Y, r24
    1972:	99 83       	std	Y+1, r25	; 0x01
    1974:	aa 83       	std	Y+2, r26	; 0x02
    1976:	bb 83       	std	Y+3, r27	; 0x03
    1978:	9f 77       	andi	r25, 0x7F	; 127
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	bf 90       	pop	r11
    1988:	af 90       	pop	r10
    198a:	9f 90       	pop	r9
    198c:	8f 90       	pop	r8
    198e:	08 95       	ret

00001990 <rand_r>:
    1990:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <do_rand>
    1994:	08 95       	ret

00001996 <rand>:
    1996:	87 e0       	ldi	r24, 0x07	; 7
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <do_rand>
    199e:	08 95       	ret

000019a0 <srand>:
    19a0:	a0 e0       	ldi	r26, 0x00	; 0
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	80 93 07 01 	sts	0x0107, r24
    19a8:	90 93 08 01 	sts	0x0108, r25
    19ac:	a0 93 09 01 	sts	0x0109, r26
    19b0:	b0 93 0a 01 	sts	0x010A, r27
    19b4:	08 95       	ret

000019b6 <eeprom_read_byte>:
    19b6:	f9 99       	sbic	0x1f, 1	; 31
    19b8:	fe cf       	rjmp	.-4      	; 0x19b6 <eeprom_read_byte>
    19ba:	92 bd       	out	0x22, r25	; 34
    19bc:	81 bd       	out	0x21, r24	; 33
    19be:	f8 9a       	sbi	0x1f, 0	; 31
    19c0:	99 27       	eor	r25, r25
    19c2:	80 b5       	in	r24, 0x20	; 32
    19c4:	08 95       	ret

000019c6 <eeprom_write_byte>:
    19c6:	26 2f       	mov	r18, r22

000019c8 <eeprom_write_r18>:
    19c8:	f9 99       	sbic	0x1f, 1	; 31
    19ca:	fe cf       	rjmp	.-4      	; 0x19c8 <eeprom_write_r18>
    19cc:	1f ba       	out	0x1f, r1	; 31
    19ce:	92 bd       	out	0x22, r25	; 34
    19d0:	81 bd       	out	0x21, r24	; 33
    19d2:	20 bd       	out	0x20, r18	; 32
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	fa 9a       	sbi	0x1f, 2	; 31
    19da:	f9 9a       	sbi	0x1f, 1	; 31
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	08 95       	ret

000019e2 <__divmodsi4>:
    19e2:	05 2e       	mov	r0, r21
    19e4:	97 fb       	bst	r25, 7
    19e6:	1e f4       	brtc	.+6      	; 0x19ee <__divmodsi4+0xc>
    19e8:	00 94       	com	r0
    19ea:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__negsi2>
    19ee:	57 fd       	sbrc	r21, 7
    19f0:	07 d0       	rcall	.+14     	; 0x1a00 <__divmodsi4_neg2>
    19f2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__udivmodsi4>
    19f6:	07 fc       	sbrc	r0, 7
    19f8:	03 d0       	rcall	.+6      	; 0x1a00 <__divmodsi4_neg2>
    19fa:	4e f4       	brtc	.+18     	; 0x1a0e <__divmodsi4_exit>
    19fc:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__negsi2>

00001a00 <__divmodsi4_neg2>:
    1a00:	50 95       	com	r21
    1a02:	40 95       	com	r20
    1a04:	30 95       	com	r19
    1a06:	21 95       	neg	r18
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a0c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a0e <__divmodsi4_exit>:
    1a0e:	08 95       	ret

00001a10 <__negsi2>:
    1a10:	90 95       	com	r25
    1a12:	80 95       	com	r24
    1a14:	70 95       	com	r23
    1a16:	61 95       	neg	r22
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	08 95       	ret

00001a20 <__muluhisi3>:
    1a20:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__umulhisi3>
    1a24:	a5 9f       	mul	r26, r21
    1a26:	90 0d       	add	r25, r0
    1a28:	b4 9f       	mul	r27, r20
    1a2a:	90 0d       	add	r25, r0
    1a2c:	a4 9f       	mul	r26, r20
    1a2e:	80 0d       	add	r24, r0
    1a30:	91 1d       	adc	r25, r1
    1a32:	11 24       	eor	r1, r1
    1a34:	08 95       	ret

00001a36 <__mulshisi3>:
    1a36:	b7 ff       	sbrs	r27, 7
    1a38:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__muluhisi3>

00001a3c <__mulohisi3>:
    1a3c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__muluhisi3>
    1a40:	82 1b       	sub	r24, r18
    1a42:	93 0b       	sbc	r25, r19
    1a44:	08 95       	ret

00001a46 <__udivmodsi4>:
    1a46:	a1 e2       	ldi	r26, 0x21	; 33
    1a48:	1a 2e       	mov	r1, r26
    1a4a:	aa 1b       	sub	r26, r26
    1a4c:	bb 1b       	sub	r27, r27
    1a4e:	fd 01       	movw	r30, r26
    1a50:	0d c0       	rjmp	.+26     	; 0x1a6c <__udivmodsi4_ep>

00001a52 <__udivmodsi4_loop>:
    1a52:	aa 1f       	adc	r26, r26
    1a54:	bb 1f       	adc	r27, r27
    1a56:	ee 1f       	adc	r30, r30
    1a58:	ff 1f       	adc	r31, r31
    1a5a:	a2 17       	cp	r26, r18
    1a5c:	b3 07       	cpc	r27, r19
    1a5e:	e4 07       	cpc	r30, r20
    1a60:	f5 07       	cpc	r31, r21
    1a62:	20 f0       	brcs	.+8      	; 0x1a6c <__udivmodsi4_ep>
    1a64:	a2 1b       	sub	r26, r18
    1a66:	b3 0b       	sbc	r27, r19
    1a68:	e4 0b       	sbc	r30, r20
    1a6a:	f5 0b       	sbc	r31, r21

00001a6c <__udivmodsi4_ep>:
    1a6c:	66 1f       	adc	r22, r22
    1a6e:	77 1f       	adc	r23, r23
    1a70:	88 1f       	adc	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	1a 94       	dec	r1
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <__udivmodsi4_loop>
    1a78:	60 95       	com	r22
    1a7a:	70 95       	com	r23
    1a7c:	80 95       	com	r24
    1a7e:	90 95       	com	r25
    1a80:	9b 01       	movw	r18, r22
    1a82:	ac 01       	movw	r20, r24
    1a84:	bd 01       	movw	r22, r26
    1a86:	cf 01       	movw	r24, r30
    1a88:	08 95       	ret

00001a8a <_exit>:
    1a8a:	f8 94       	cli

00001a8c <__stop_program>:
    1a8c:	ff cf       	rjmp	.-2      	; 0x1a8c <__stop_program>
