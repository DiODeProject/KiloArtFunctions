
build/gradient_adaptive.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	9d 02       	muls	r25, r29
      6a:	19 03       	fmul	r17, r17
      6c:	71 02       	muls	r23, r17
      6e:	68 02       	muls	r22, r24
      70:	6e 02       	muls	r22, r30
      72:	fb 02       	muls	r31, r27
      74:	f0 02       	muls	r31, r16
      76:	7b 09       	sbc	r23, r11
      78:	58 08       	sbc	r5, r8
      7a:	58 08       	sbc	r5, r8
      7c:	78 09       	sbc	r23, r8
      7e:	84 09       	sbc	r24, r4
      80:	74 09       	sbc	r23, r4
      82:	8b 09       	sbc	r24, r11
      84:	87 09       	sbc	r24, r7
      86:	8f 09       	sbc	r24, r15
      88:	47 09       	sbc	r20, r7
      8a:	19 09       	sbc	r17, r9

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea ed       	ldi	r30, 0xDA	; 218
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 30       	cpi	r26, 0x0E	; 14
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e0       	ldi	r26, 0x0E	; 14
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 38       	cpi	r26, 0x84	; 132
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <main>
      da:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	86 e1       	ldi	r24, 0x16	; 22
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
      e8:	20 91 0e 01 	lds	r18, 0x010E
      ec:	30 91 0f 01 	lds	r19, 0x010F
      f0:	23 2b       	or	r18, r19
      f2:	69 f4       	brne	.+26     	; 0x10e <message_rx+0x26>
    {
        new_message = 1;
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	30 93 0f 01 	sts	0x010F, r19
      fc:	20 93 0e 01 	sts	0x010E, r18
        received_gradient = m->data[0];
     100:	fc 01       	movw	r30, r24
     102:	80 81       	ld	r24, Z
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 11 01 	sts	0x0111, r25
     10a:	80 93 10 01 	sts	0x0110, r24
     10e:	08 95       	ret

00000110 <setup>:

void setup()
{
    //If the robot is the seed, its gradient should be 0: overwrite the 
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
     110:	80 91 7f 01 	lds	r24, 0x017F
     114:	90 91 80 01 	lds	r25, 0x0180
     118:	8a 97       	sbiw	r24, 0x2a	; 42
     11a:	79 f0       	breq	.+30     	; 0x13a <setup+0x2a>
     11c:	80 91 00 01 	lds	r24, 0x0100
    {
        own_gradient = 0;
    }
    
    // Set the transmission message.
    message.type = NORMAL;
     120:	10 92 1f 01 	sts	0x011F, r1
    message.data[0] = own_gradient;
     124:	80 93 16 01 	sts	0x0116, r24
    message.crc = message_crc(&message);
     128:	86 e1       	ldi	r24, 0x16	; 22
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 22 0a 	call	0x1444	; 0x1444 <message_crc>
     130:	90 93 21 01 	sts	0x0121, r25
     134:	80 93 20 01 	sts	0x0120, r24
     138:	08 95       	ret
{
    //If the robot is the seed, its gradient should be 0: overwrite the 
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
    {
        own_gradient = 0;
     13a:	10 92 01 01 	sts	0x0101, r1
     13e:	10 92 00 01 	sts	0x0100, r1
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	ed cf       	rjmp	.-38     	; 0x120 <setup+0x10>

00000146 <loop>:
    message.type = NORMAL;
    message.data[0] = own_gradient;
    message.crc = message_crc(&message);
}

void loop() {
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
    // Only pay attention to messages if this robot is not the seed.
    if (kilo_uid != SEED_ID)
     14a:	80 91 7f 01 	lds	r24, 0x017F
     14e:	90 91 80 01 	lds	r25, 0x0180
     152:	8a 97       	sbiw	r24, 0x2a	; 42
     154:	09 f4       	brne	.+2      	; 0x158 <loop+0x12>
     156:	4e c0       	rjmp	.+156    	; 0x1f4 <loop+0xae>
    {
        if (new_message == 1)
     158:	80 91 0e 01 	lds	r24, 0x010E
     15c:	90 91 0f 01 	lds	r25, 0x010F
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	09 f4       	brne	.+2      	; 0x166 <loop+0x20>
     164:	4c c0       	rjmp	.+152    	; 0x1fe <loop+0xb8>
     166:	80 91 00 01 	lds	r24, 0x0100
     16a:	90 91 01 01 	lds	r25, 0x0101
            new_message = 0;
        }
		
        // If no neighbor with a gradient of 1 or more less than this robot's
        // gradient is detected within 2 seconds, increment the latter by 1.
        if ((kilo_ticks > (last_gradient_anchored + 64)) && (own_gradient < GRADIENT_MAX))
     16e:	00 91 49 01 	lds	r16, 0x0149
     172:	10 91 4a 01 	lds	r17, 0x014A
     176:	20 91 4b 01 	lds	r18, 0x014B
     17a:	30 91 4c 01 	lds	r19, 0x014C
     17e:	40 91 22 01 	lds	r20, 0x0122
     182:	50 91 23 01 	lds	r21, 0x0123
     186:	60 91 24 01 	lds	r22, 0x0124
     18a:	70 91 25 01 	lds	r23, 0x0125
     18e:	40 5c       	subi	r20, 0xC0	; 192
     190:	5f 4f       	sbci	r21, 0xFF	; 255
     192:	6f 4f       	sbci	r22, 0xFF	; 255
     194:	7f 4f       	sbci	r23, 0xFF	; 255
     196:	40 17       	cp	r20, r16
     198:	51 07       	cpc	r21, r17
     19a:	62 07       	cpc	r22, r18
     19c:	73 07       	cpc	r23, r19
     19e:	b0 f0       	brcs	.+44     	; 0x1cc <loop+0x86>
            own_gradient = own_gradient + 1;
        }
    }
	
    // Set the LED color based on the gradient.
    if (own_gradient == 0)
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	f1 f0       	breq	.+60     	; 0x1e0 <loop+0x9a>
    {
        set_color(RGB(1, 1, 1)); // White
    }
    else if (own_gradient == 1)
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	91 05       	cpc	r25, r1
     1a8:	09 f4       	brne	.+2      	; 0x1ac <loop+0x66>
     1aa:	63 c0       	rjmp	.+198    	; 0x272 <loop+0x12c>
    {
        set_color(RGB(1, 0, 0)); // Red
    }
    else if (own_gradient == 2)
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	91 05       	cpc	r25, r1
     1b0:	09 f4       	brne	.+2      	; 0x1b4 <loop+0x6e>
     1b2:	64 c0       	rjmp	.+200    	; 0x27c <loop+0x136>
    {
        set_color(RGB(0, 1, 0)); // Green
    }
    else if (own_gradient == 3)
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	91 05       	cpc	r25, r1
     1b8:	09 f4       	brne	.+2      	; 0x1bc <loop+0x76>
     1ba:	65 c0       	rjmp	.+202    	; 0x286 <loop+0x140>
    {
        set_color(RGB(0, 0, 1)); // Blue
    }
    else if (own_gradient == 4)
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	91 05       	cpc	r25, r1
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <loop+0x7e>
     1c2:	66 c0       	rjmp	.+204    	; 0x290 <loop+0x14a>
    {
        set_color(RGB(1, 0, 1)); // Magenta
    }
    else if (own_gradient >= 5)
     1c4:	94 f4       	brge	.+36     	; 0x1ea <loop+0xa4>
    {
        set_color(RGB(1, 1, 0)); // Yellow
    }
}
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	08 95       	ret
            new_message = 0;
        }
		
        // If no neighbor with a gradient of 1 or more less than this robot's
        // gradient is detected within 2 seconds, increment the latter by 1.
        if ((kilo_ticks > (last_gradient_anchored + 64)) && (own_gradient < GRADIENT_MAX))
     1cc:	8f 3f       	cpi	r24, 0xFF	; 255
     1ce:	91 05       	cpc	r25, r1
     1d0:	4c f7       	brge	.-46     	; 0x1a4 <loop+0x5e>
        {
            own_gradient = own_gradient + 1;
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	90 93 01 01 	sts	0x0101, r25
     1d8:	80 93 00 01 	sts	0x0100, r24
        }
    }
	
    // Set the LED color based on the gradient.
    if (own_gradient == 0)
     1dc:	00 97       	sbiw	r24, 0x00	; 0
     1de:	11 f7       	brne	.-60     	; 0x1a4 <loop+0x5e>
    {
        set_color(RGB(1, 1, 1)); // White
     1e0:	85 e1       	ldi	r24, 0x15	; 21
    }
    else if (own_gradient >= 5)
    {
        set_color(RGB(1, 1, 0)); // Yellow
    }
}
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
    }
	
    // Set the LED color based on the gradient.
    if (own_gradient == 0)
    {
        set_color(RGB(1, 1, 1)); // White
     1e6:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <set_color>
    {
        set_color(RGB(1, 0, 1)); // Magenta
    }
    else if (own_gradient >= 5)
    {
        set_color(RGB(1, 1, 0)); // Yellow
     1ea:	85 e0       	ldi	r24, 0x05	; 5
    }
}
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
    {
        set_color(RGB(1, 0, 1)); // Magenta
    }
    else if (own_gradient >= 5)
    {
        set_color(RGB(1, 1, 0)); // Yellow
     1f0:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <set_color>
     1f4:	80 91 00 01 	lds	r24, 0x0100
     1f8:	90 91 01 01 	lds	r25, 0x0101
     1fc:	d1 cf       	rjmp	.-94     	; 0x1a0 <loop+0x5a>
        {
            // If a neighbor's gradient is 1 or more less than this robot's
            // gradient, the latter should not increase.
            // Set last_gradient_anchored to kilo_ticks to inhibit activation of
            // the increment statement.
            if (own_gradient >= received_gradient + 1)
     1fe:	20 91 10 01 	lds	r18, 0x0110
     202:	30 91 11 01 	lds	r19, 0x0111
     206:	80 91 00 01 	lds	r24, 0x0100
     20a:	90 91 01 01 	lds	r25, 0x0101
     20e:	28 17       	cp	r18, r24
     210:	39 07       	cpc	r19, r25
     212:	84 f4       	brge	.+32     	; 0x234 <loop+0xee>
            {
            	last_gradient_anchored = kilo_ticks;
     214:	40 91 49 01 	lds	r20, 0x0149
     218:	50 91 4a 01 	lds	r21, 0x014A
     21c:	60 91 4b 01 	lds	r22, 0x014B
     220:	70 91 4c 01 	lds	r23, 0x014C
     224:	40 93 22 01 	sts	0x0122, r20
     228:	50 93 23 01 	sts	0x0123, r21
     22c:	60 93 24 01 	sts	0x0124, r22
     230:	70 93 25 01 	sts	0x0125, r23
            }			
	 
            // If a neighbor's gradient is 2 or more less than this robot's 
            // gradient, reduce the latter to the neighbor's gradient + 1.
            if (own_gradient > received_gradient + 1)
     234:	2f 5f       	subi	r18, 0xFF	; 255
     236:	3f 4f       	sbci	r19, 0xFF	; 255
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	2c f0       	brlt	.+10     	; 0x248 <loop+0x102>
                message.type = NORMAL;
                message.data[0] = own_gradient;
                message.crc = message_crc(&message);
            }
            
            new_message = 0;
     23e:	10 92 0f 01 	sts	0x010F, r1
     242:	10 92 0e 01 	sts	0x010E, r1
     246:	93 cf       	rjmp	.-218    	; 0x16e <loop+0x28>
	 
            // If a neighbor's gradient is 2 or more less than this robot's 
            // gradient, reduce the latter to the neighbor's gradient + 1.
            if (own_gradient > received_gradient + 1)
            {
                own_gradient = received_gradient + 1;
     248:	30 93 01 01 	sts	0x0101, r19
     24c:	20 93 00 01 	sts	0x0100, r18
                
                // Update the transmission message whenever the gradient changes.
                message.type = NORMAL;
     250:	10 92 1f 01 	sts	0x011F, r1
                message.data[0] = own_gradient;
     254:	20 93 16 01 	sts	0x0116, r18
                message.crc = message_crc(&message);
     258:	86 e1       	ldi	r24, 0x16	; 22
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 22 0a 	call	0x1444	; 0x1444 <message_crc>
     260:	90 93 21 01 	sts	0x0121, r25
     264:	80 93 20 01 	sts	0x0120, r24
     268:	80 91 00 01 	lds	r24, 0x0100
     26c:	90 91 01 01 	lds	r25, 0x0101
     270:	e6 cf       	rjmp	.-52     	; 0x23e <loop+0xf8>
    {
        set_color(RGB(1, 1, 1)); // White
    }
    else if (own_gradient == 1)
    {
        set_color(RGB(1, 0, 0)); // Red
     272:	81 e0       	ldi	r24, 0x01	; 1
    }
    else if (own_gradient >= 5)
    {
        set_color(RGB(1, 1, 0)); // Yellow
    }
}
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
    {
        set_color(RGB(1, 1, 1)); // White
    }
    else if (own_gradient == 1)
    {
        set_color(RGB(1, 0, 0)); // Red
     278:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <set_color>
    }
    else if (own_gradient == 2)
    {
        set_color(RGB(0, 1, 0)); // Green
     27c:	84 e0       	ldi	r24, 0x04	; 4
    }
    else if (own_gradient >= 5)
    {
        set_color(RGB(1, 1, 0)); // Yellow
    }
}
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
    {
        set_color(RGB(1, 0, 0)); // Red
    }
    else if (own_gradient == 2)
    {
        set_color(RGB(0, 1, 0)); // Green
     282:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <set_color>
    }
    else if (own_gradient == 3)
    {
        set_color(RGB(0, 0, 1)); // Blue
     286:	80 e1       	ldi	r24, 0x10	; 16
    }
    else if (own_gradient >= 5)
    {
        set_color(RGB(1, 1, 0)); // Yellow
    }
}
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
    {
        set_color(RGB(0, 1, 0)); // Green
    }
    else if (own_gradient == 3)
    {
        set_color(RGB(0, 0, 1)); // Blue
     28c:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <set_color>
    }
    else if (own_gradient == 4)
    {
        set_color(RGB(1, 0, 1)); // Magenta
     290:	81 e1       	ldi	r24, 0x11	; 17
    }
    else if (own_gradient >= 5)
    {
        set_color(RGB(1, 1, 0)); // Yellow
    }
}
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
    {
        set_color(RGB(0, 0, 1)); // Blue
    }
    else if (own_gradient == 4)
    {
        set_color(RGB(1, 0, 1)); // Magenta
     296:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <set_color>

0000029a <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     29a:	08 95       	ret

0000029c <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	08 95       	ret

000002a2 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     2a2:	08 95       	ret

000002a4 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
    cli();
     2b2:	f8 94       	cli

    ports_off();
     2b4:	14 b8       	out	0x04, r1	; 4
     2b6:	17 b8       	out	0x07, r1	; 7
     2b8:	1a b8       	out	0x0a, r1	; 10
     2ba:	15 b8       	out	0x05, r1	; 5
     2bc:	18 b8       	out	0x08, r1	; 8
     2be:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2c0:	52 9a       	sbi	0x0a, 2	; 10
     2c2:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2c4:	14 bc       	out	0x24, r1	; 36
     2c6:	85 e0       	ldi	r24, 0x05	; 5
     2c8:	85 bd       	out	0x25, r24	; 37
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	87 bd       	out	0x27, r24	; 39
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     2d4:	10 92 80 00 	sts	0x0080, r1
     2d8:	10 92 81 00 	sts	0x0081, r1
     2dc:	2f e8       	ldi	r18, 0x8F	; 143
     2de:	3b e0       	ldi	r19, 0x0B	; 11
     2e0:	30 93 89 00 	sts	0x0089, r19
     2e4:	20 93 88 00 	sts	0x0088, r18
     2e8:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     2ec:	53 98       	cbi	0x0a, 3	; 10
     2ee:	23 98       	cbi	0x04, 3	; 4
     2f0:	91 ea       	ldi	r25, 0xA1	; 161
     2f2:	90 93 b0 00 	sts	0x00B0, r25
     2f6:	80 93 b1 00 	sts	0x00B1, r24
     2fa:	10 92 b4 00 	sts	0x00B4, r1
     2fe:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     302:	8b e0       	ldi	r24, 0x0B	; 11
     304:	80 bf       	out	0x30, r24	; 48
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	80 93 7c 00 	sts	0x007C, r24
     312:	83 e8       	ldi	r24, 0x83	; 131
     314:	80 93 7a 00 	sts	0x007A, r24
     318:	80 91 7a 00 	lds	r24, 0x007A
     31c:	80 64       	ori	r24, 0x40	; 64
     31e:	80 93 7a 00 	sts	0x007A, r24
     322:	80 91 7a 00 	lds	r24, 0x007A
     326:	86 fd       	sbrc	r24, 6
     328:	fc cf       	rjmp	.-8      	; 0x322 <kilo_init+0x7e>
    adc_trigger_high_gain();
     32a:	10 92 7c 00 	sts	0x007C, r1
     32e:	83 ea       	ldi	r24, 0xA3	; 163
     330:	80 93 7a 00 	sts	0x007A, r24
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
    if (osccal != 0xFF)
     342:	8f 3f       	cpi	r24, 0xFF	; 255
     344:	11 f0       	breq	.+4      	; 0x34a <kilo_init+0xa6>
        OSCCAL = osccal;
     346:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     34a:	10 92 4d 01 	sts	0x014D, r1
    rx_leadingbit = 1;
     34e:	c1 e0       	ldi	r28, 0x01	; 1
     350:	c0 93 26 01 	sts	0x0126, r28
    rx_leadingbyte = 1;
     354:	c0 93 6a 01 	sts	0x016A, r28
    rx_byteindex = 0;
     358:	10 92 44 01 	sts	0x0144, r1
    rx_bytevalue = 0;
     35c:	10 92 7e 01 	sts	0x017E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     360:	80 e9       	ldi	r24, 0x90	; 144
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     368:	80 93 43 01 	sts	0x0143, r24
    if (tx_mask & ~TX_MASK_MAX)
     36c:	80 91 43 01 	lds	r24, 0x0143
     370:	88 73       	andi	r24, 0x38	; 56
     372:	11 f0       	breq	.+4      	; 0x378 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     374:	c0 93 43 01 	sts	0x0143, r28
    tx_clock = 0;
     378:	10 92 6e 01 	sts	0x016E, r1
     37c:	10 92 6d 01 	sts	0x016D, r1
    tx_increment = 255;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 6c 01 	sts	0x016C, r25
     388:	80 93 6b 01 	sts	0x016B, r24
    kilo_ticks = 0;
     38c:	10 92 49 01 	sts	0x0149, r1
     390:	10 92 4a 01 	sts	0x014A, r1
     394:	10 92 4b 01 	sts	0x014B, r1
     398:	10 92 4c 01 	sts	0x014C, r1
    kilo_state = IDLE;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 15 01 	sts	0x0115, r24
    kilo_tx_period = 3906;
     3a2:	82 e4       	ldi	r24, 0x42	; 66
     3a4:	9f e0       	ldi	r25, 0x0F	; 15
     3a6:	90 93 7d 01 	sts	0x017D, r25
     3aa:	80 93 7c 01 	sts	0x017C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3ae:	80 eb       	ldi	r24, 0xB0	; 176
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     3b6:	c8 2f       	mov	r28, r24
     3b8:	81 eb       	ldi	r24, 0xB1	; 177
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     3c0:	2c 2f       	mov	r18, r28
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	38 2b       	or	r19, r24
     3c6:	30 93 80 01 	sts	0x0180, r19
     3ca:	20 93 7f 01 	sts	0x017F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3ce:	85 e0       	ldi	r24, 0x05	; 5
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     3d6:	80 93 83 01 	sts	0x0183, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3da:	89 e0       	ldi	r24, 0x09	; 9
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     3e2:	80 93 6f 01 	sts	0x016F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     3e6:	8c e0       	ldi	r24, 0x0C	; 12
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     3ee:	80 93 81 01 	sts	0x0181, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     3f2:	84 e1       	ldi	r24, 0x14	; 20
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     3fa:	80 93 82 01 	sts	0x0182, r24
     3fe:	5e e4       	ldi	r21, 0x4E	; 78
     400:	e5 2e       	mov	r14, r21
     402:	51 e0       	ldi	r21, 0x01	; 1
     404:	f5 2e       	mov	r15, r21
     406:	07 e2       	ldi	r16, 0x27	; 39
     408:	11 e0       	ldi	r17, 0x01	; 1
     40a:	c0 e2       	ldi	r28, 0x20	; 32
     40c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     40e:	ce 01       	movw	r24, r28
     410:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     414:	d8 2e       	mov	r13, r24
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     41e:	2d 2d       	mov	r18, r13
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	32 2f       	mov	r19, r18
     424:	22 27       	eor	r18, r18
     426:	28 2b       	or	r18, r24
     428:	f7 01       	movw	r30, r14
     42a:	21 93       	st	Z+, r18
     42c:	31 93       	st	Z+, r19
     42e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     430:	ce 01       	movw	r24, r28
     432:	c0 96       	adiw	r24, 0x30	; 48
     434:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     438:	d8 2e       	mov	r13, r24
     43a:	ce 01       	movw	r24, r28
     43c:	c1 96       	adiw	r24, 0x31	; 49
     43e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <eeprom_read_byte>
     442:	2d 2d       	mov	r18, r13
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	32 2f       	mov	r19, r18
     448:	22 27       	eor	r18, r18
     44a:	28 2b       	or	r18, r24
     44c:	f8 01       	movw	r30, r16
     44e:	21 93       	st	Z+, r18
     450:	31 93       	st	Z+, r19
     452:	8f 01       	movw	r16, r30
     454:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     456:	cc 33       	cpi	r28, 0x3C	; 60
     458:	d1 05       	cpc	r29, r1
     45a:	c9 f6       	brne	.-78     	; 0x40e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     45c:	78 94       	sei
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	08 95       	ret

0000046e <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	8f 93       	push	r24
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	a8 95       	wdr
     480:	80 91 60 00 	lds	r24, 0x0060
     484:	88 61       	ori	r24, 0x18	; 24
     486:	80 93 60 00 	sts	0x0060, r24
     48a:	10 92 60 00 	sts	0x0060, r1
     48e:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     490:	8f 91       	pop	r24
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     49c:	3c 01       	movw	r6, r24
     49e:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     4a0:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     4a2:	99 24       	eor	r9, r9
     4a4:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     4aa:	96 e0       	ldi	r25, 0x06	; 6
     4ac:	a9 2e       	mov	r10, r25
     4ae:	23 e8       	ldi	r18, 0x83	; 131
     4b0:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     4b2:	38 e1       	ldi	r19, 0x18	; 24
     4b4:	d3 2e       	mov	r13, r19
     4b6:	49 e2       	ldi	r20, 0x29	; 41
     4b8:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     4ba:	90 91 15 01 	lds	r25, 0x0115
     4be:	e9 2f       	mov	r30, r25
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	e7 30       	cpi	r30, 0x07	; 7
     4c4:	f1 05       	cpc	r31, r1
     4c6:	c8 f7       	brcc	.-14     	; 0x4ba <kilo_start+0x1e>
     4c8:	ec 5c       	subi	r30, 0xCC	; 204
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     4d0:	11 23       	and	r17, r17
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <kilo_start+0x3a>
     4d4:	fc c0       	rjmp	.+504    	; 0x6ce <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     4d6:	c0 92 15 01 	sts	0x0115, r12
     4da:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     4dc:	fe 01       	movw	r30, r28
     4de:	09 95       	icall
                break;
     4e0:	ec cf       	rjmp	.-40     	; 0x4ba <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4e2:	80 91 4d 01 	lds	r24, 0x014D
     4e6:	81 11       	cpse	r24, r1
     4e8:	eb c0       	rjmp	.+470    	; 0x6c0 <kilo_start+0x224>
        cli();                                    // disable interrupts
     4ea:	f8 94       	cli
        adc_setup_conversion(6);
     4ec:	a0 92 7c 00 	sts	0x007C, r10
     4f0:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     4f4:	80 91 7a 00 	lds	r24, 0x007A
     4f8:	80 64       	ori	r24, 0x40	; 64
     4fa:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     4fe:	90 91 7a 00 	lds	r25, 0x007A
     502:	96 fd       	sbrc	r25, 6
     504:	fc cf       	rjmp	.-8      	; 0x4fe <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     506:	80 91 78 00 	lds	r24, 0x0078
     50a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     50e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     510:	8b 3a       	cpi	r24, 0xAB	; 171
     512:	e2 e0       	ldi	r30, 0x02	; 2
     514:	9e 07       	cpc	r25, r30
     516:	0c f0       	brlt	.+2      	; 0x51a <kilo_start+0x7e>
     518:	ed c0       	rjmp	.+474    	; 0x6f4 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     51a:	89 38       	cpi	r24, 0x89	; 137
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	9f 07       	cpc	r25, r31
     520:	0c f0       	brlt	.+2      	; 0x524 <kilo_start+0x88>
     522:	ef c0       	rjmp	.+478    	; 0x702 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     524:	87 36       	cpi	r24, 0x67	; 103
     526:	92 40       	sbci	r25, 0x02	; 2
     528:	0c f4       	brge	.+2      	; 0x52c <kilo_start+0x90>
     52a:	ca c0       	rjmp	.+404    	; 0x6c0 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     52c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     52e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     530:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     532:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     534:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     536:	3c 98       	cbi	0x07, 4	; 7
     538:	c0 cf       	rjmp	.-128    	; 0x4ba <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     53a:	f8 94       	cli
                acomp_off();
     53c:	80 b7       	in	r24, 0x30	; 48
     53e:	87 7f       	andi	r24, 0xF7	; 247
     540:	80 bf       	out	0x30, r24	; 48
                adc_off();
     542:	80 91 7a 00 	lds	r24, 0x007A
     546:	8f 77       	andi	r24, 0x7F	; 127
     548:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     54c:	14 b8       	out	0x04, r1	; 4
     54e:	17 b8       	out	0x07, r1	; 7
     550:	1a b8       	out	0x0a, r1	; 10
     552:	15 b8       	out	0x05, r1	; 5
     554:	18 b8       	out	0x08, r1	; 8
     556:	1b b8       	out	0x0b, r1	; 11
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	a8 95       	wdr
     55e:	d0 92 60 00 	sts	0x0060, r13
     562:	0f be       	out	0x3f, r0	; 63
     564:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     568:	80 91 60 00 	lds	r24, 0x0060
     56c:	80 64       	ori	r24, 0x40	; 64
     56e:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     572:	93 b7       	in	r25, 0x33	; 51
     574:	91 7f       	andi	r25, 0xF1	; 241
     576:	94 60       	ori	r25, 0x04	; 4
     578:	93 bf       	out	0x33, r25	; 51
                cli();
     57a:	f8 94       	cli
                sleep_enable();
     57c:	83 b7       	in	r24, 0x33	; 51
     57e:	81 60       	ori	r24, 0x01	; 1
     580:	83 bf       	out	0x33, r24	; 51
                sei();
     582:	78 94       	sei
                sleep_cpu();
     584:	88 95       	sleep
                sleep_disable();
     586:	83 b7       	in	r24, 0x33	; 51
     588:	8e 7f       	andi	r24, 0xFE	; 254
     58a:	83 bf       	out	0x33, r24	; 51
                sei();
     58c:	78 94       	sei
                rx_busy = 0;
     58e:	10 92 4d 01 	sts	0x014D, r1
                ports_on();
     592:	52 9a       	sbi	0x0a, 2	; 10
     594:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     596:	80 91 7a 00 	lds	r24, 0x007A
     59a:	80 68       	ori	r24, 0x80	; 128
     59c:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a0:	87 e5       	ldi	r24, 0x57	; 87
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <kilo_start+0x108>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <kilo_start+0x10e>
     5aa:	00 00       	nop
                _delay_us(300);
                acomp_on();
     5ac:	80 b7       	in	r24, 0x30	; 48
     5ae:	88 61       	ori	r24, 0x18	; 24
     5b0:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5b2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5b4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5b6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5b8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5ba:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5bc:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5be:	ef e1       	ldi	r30, 0x1F	; 31
     5c0:	fe e4       	ldi	r31, 0x4E	; 78
     5c2:	31 97       	sbiw	r30, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <kilo_start+0x126>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <kilo_start+0x12c>
     5c8:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     5ca:	80 91 4d 01 	lds	r24, 0x014D
     5ce:	81 11       	cpse	r24, r1
     5d0:	81 c0       	rjmp	.+258    	; 0x6d4 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5d2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5d4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5d6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5d8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5da:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5dc:	3c 98       	cbi	0x07, 4	; 7
     5de:	6d cf       	rjmp	.-294    	; 0x4ba <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     5e0:	80 91 13 01 	lds	r24, 0x0113
     5e4:	81 11       	cpse	r24, r1
     5e6:	41 c0       	rjmp	.+130    	; 0x66a <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5ec:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     5f0:	10 92 14 01 	sts	0x0114, r1
     5f4:	62 cf       	rjmp	.-316    	; 0x4ba <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     5f6:	48 99       	sbic	0x09, 0	; 9
     5f8:	ec cf       	rjmp	.-40     	; 0x5d2 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5fa:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5fc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5fe:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     600:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     602:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     604:	3c 98       	cbi	0x07, 4	; 7
     606:	8f ec       	ldi	r24, 0xCF	; 207
     608:	97 e0       	ldi	r25, 0x07	; 7
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <kilo_start+0x16e>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <kilo_start+0x174>
     610:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     612:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     614:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     616:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     618:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     61a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     61c:	3c 98       	cbi	0x07, 4	; 7
     61e:	9f ef       	ldi	r25, 0xFF	; 255
     620:	e1 ee       	ldi	r30, 0xE1	; 225
     622:	f4 e0       	ldi	r31, 0x04	; 4
     624:	91 50       	subi	r25, 0x01	; 1
     626:	e0 40       	sbci	r30, 0x00	; 0
     628:	f0 40       	sbci	r31, 0x00	; 0
     62a:	e1 f7       	brne	.-8      	; 0x624 <kilo_start+0x188>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <kilo_start+0x192>
     62e:	00 00       	nop
     630:	44 cf       	rjmp	.-376    	; 0x4ba <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     632:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     634:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     636:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     638:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     63a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     63c:	3c 98       	cbi	0x07, 4	; 7
     63e:	ef ec       	ldi	r30, 0xCF	; 207
     640:	f7 e0       	ldi	r31, 0x07	; 7
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <kilo_start+0x1a6>
     646:	00 c0       	rjmp	.+0      	; 0x648 <kilo_start+0x1ac>
     648:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     64a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     64c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     64e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     650:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     652:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     654:	3c 98       	cbi	0x07, 4	; 7
     656:	ff ef       	ldi	r31, 0xFF	; 255
     658:	21 ee       	ldi	r18, 0xE1	; 225
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	f1 50       	subi	r31, 0x01	; 1
     65e:	20 40       	sbci	r18, 0x00	; 0
     660:	80 40       	sbci	r24, 0x00	; 0
     662:	e1 f7       	brne	.-8      	; 0x65c <kilo_start+0x1c0>
     664:	00 c0       	rjmp	.+0      	; 0x666 <kilo_start+0x1ca>
     666:	00 00       	nop
     668:	28 cf       	rjmp	.-432    	; 0x4ba <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     66a:	90 91 13 01 	lds	r25, 0x0113
     66e:	80 91 14 01 	lds	r24, 0x0114
     672:	98 17       	cp	r25, r24
     674:	09 f4       	brne	.+2      	; 0x678 <kilo_start+0x1dc>
     676:	21 cf       	rjmp	.-446    	; 0x4ba <kilo_start+0x1e>
                        prev_motion = cur_motion;
     678:	80 91 13 01 	lds	r24, 0x0113
     67c:	80 93 14 01 	sts	0x0114, r24
                        if (cur_motion == MOVE_LEFT) {
     680:	80 91 13 01 	lds	r24, 0x0113
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	09 f4       	brne	.+2      	; 0x68a <kilo_start+0x1ee>
     688:	50 c0       	rjmp	.+160    	; 0x72a <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     68a:	80 91 13 01 	lds	r24, 0x0113
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     68e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     692:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	d9 f1       	breq	.+118    	; 0x710 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     69a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     69e:	90 92 b4 00 	sts	0x00B4, r9
     6a2:	8f e2       	ldi	r24, 0x2F	; 47
     6a4:	95 e7       	ldi	r25, 0x75	; 117
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <kilo_start+0x20a>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <kilo_start+0x210>
     6ac:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     6ae:	80 91 82 01 	lds	r24, 0x0182
     6b2:	90 91 81 01 	lds	r25, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6b6:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     6ba:	80 93 b4 00 	sts	0x00B4, r24
     6be:	fd ce       	rjmp	.-518    	; 0x4ba <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6c0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6c2:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6c4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6c6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6c8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6ca:	3c 98       	cbi	0x07, 4	; 7
     6cc:	f6 ce       	rjmp	.-532    	; 0x4ba <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     6ce:	f3 01       	movw	r30, r6
     6d0:	09 95       	icall
     6d2:	01 cf       	rjmp	.-510    	; 0x4d6 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6d4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6d6:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6d8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6da:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6dc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6de:	3c 98       	cbi	0x07, 4	; 7
     6e0:	ff ef       	ldi	r31, 0xFF	; 255
     6e2:	20 e7       	ldi	r18, 0x70	; 112
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	f1 50       	subi	r31, 0x01	; 1
     6e8:	20 40       	sbci	r18, 0x00	; 0
     6ea:	80 40       	sbci	r24, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <kilo_start+0x24a>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <kilo_start+0x254>
     6f0:	00 00       	nop
     6f2:	6f cf       	rjmp	.-290    	; 0x5d2 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6f4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6f6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6f8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6fa:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6fc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6fe:	3c 98       	cbi	0x07, 4	; 7
     700:	dc ce       	rjmp	.-584    	; 0x4ba <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     702:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     704:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     706:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     708:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     70a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     70c:	3c 9a       	sbi	0x07, 4	; 7
     70e:	d5 ce       	rjmp	.-598    	; 0x4ba <kilo_start+0x1e>
     710:	ef e2       	ldi	r30, 0x2F	; 47
     712:	f5 e7       	ldi	r31, 0x75	; 117
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <kilo_start+0x278>
     718:	00 c0       	rjmp	.+0      	; 0x71a <kilo_start+0x27e>
     71a:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     71c:	80 91 6f 01 	lds	r24, 0x016F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     720:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     724:	80 93 b4 00 	sts	0x00B4, r24
     728:	c8 ce       	rjmp	.-624    	; 0x4ba <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     72a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     72e:	10 92 b4 00 	sts	0x00B4, r1
     732:	8f e2       	ldi	r24, 0x2F	; 47
     734:	95 e7       	ldi	r25, 0x75	; 117
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <kilo_start+0x29a>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <kilo_start+0x2a0>
     73c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     73e:	80 91 83 01 	lds	r24, 0x0183
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     742:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     746:	10 92 b4 00 	sts	0x00B4, r1
     74a:	b7 ce       	rjmp	.-658    	; 0x4ba <kilo_start+0x1e>

0000074c <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     74c:	07 c0       	rjmp	.+14     	; 0x75c <delay+0x10>
     74e:	ef ec       	ldi	r30, 0xCF	; 207
     750:	f7 e0       	ldi	r31, 0x07	; 7
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <delay+0x6>
     756:	00 c0       	rjmp	.+0      	; 0x758 <delay+0xc>
     758:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     75a:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     75c:	00 97       	sbiw	r24, 0x00	; 0
     75e:	b9 f7       	brne	.-18     	; 0x74e <delay+0x2>
     760:	08 95       	ret

00000762 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     762:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     766:	60 93 b4 00 	sts	0x00B4, r22
     76a:	08 95       	ret

0000076c <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     772:	80 93 b4 00 	sts	0x00B4, r24
     776:	8f e0       	ldi	r24, 0x0F	; 15
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	ef ec       	ldi	r30, 0xCF	; 207
     77c:	f7 e0       	ldi	r31, 0x07	; 7
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <spinup_motors+0x12>
     782:	00 c0       	rjmp	.+0      	; 0x784 <spinup_motors+0x18>
     784:	00 00       	nop
     786:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     788:	c1 f7       	brne	.-16     	; 0x77a <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     78a:	08 95       	ret

0000078c <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     78c:	80 91 4d 01 	lds	r24, 0x014D
     790:	81 11       	cpse	r24, r1
     792:	1e c0       	rjmp	.+60     	; 0x7d0 <get_ambientlight+0x44>
        cli();
     794:	f8 94       	cli
        adc_setup_conversion(7);
     796:	87 e0       	ldi	r24, 0x07	; 7
     798:	80 93 7c 00 	sts	0x007C, r24
     79c:	83 e8       	ldi	r24, 0x83	; 131
     79e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7a2:	80 91 7a 00 	lds	r24, 0x007A
     7a6:	80 64       	ori	r24, 0x40	; 64
     7a8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7ac:	80 91 7a 00 	lds	r24, 0x007A
     7b0:	86 fd       	sbrc	r24, 6
     7b2:	fc cf       	rjmp	.-8      	; 0x7ac <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     7b4:	80 91 78 00 	lds	r24, 0x0078
     7b8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     7bc:	10 92 7c 00 	sts	0x007C, r1
     7c0:	23 ea       	ldi	r18, 0xA3	; 163
     7c2:	20 93 7a 00 	sts	0x007A, r18
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     7cc:	78 94       	sei
     7ce:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     7d4:	08 95       	ret

000007d6 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     7d6:	80 91 4d 01 	lds	r24, 0x014D
     7da:	81 11       	cpse	r24, r1
     7dc:	1e c0       	rjmp	.+60     	; 0x81a <get_temperature+0x44>
        cli();
     7de:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     7e0:	88 ec       	ldi	r24, 0xC8	; 200
     7e2:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     7e6:	87 e8       	ldi	r24, 0x87	; 135
     7e8:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7ec:	80 91 7a 00 	lds	r24, 0x007A
     7f0:	80 64       	ori	r24, 0x40	; 64
     7f2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7f6:	80 91 7a 00 	lds	r24, 0x007A
     7fa:	86 fd       	sbrc	r24, 6
     7fc:	fc cf       	rjmp	.-8      	; 0x7f6 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     7fe:	80 91 78 00 	lds	r24, 0x0078
     802:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     806:	10 92 7c 00 	sts	0x007C, r1
     80a:	23 ea       	ldi	r18, 0xA3	; 163
     80c:	20 93 7a 00 	sts	0x007A, r18
     810:	21 e0       	ldi	r18, 0x01	; 1
     812:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     816:	78 94       	sei
     818:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     81a:	8f ef       	ldi	r24, 0xFF	; 255
     81c:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     81e:	08 95       	ret

00000820 <rand_hard>:

uint8_t rand_hard() {
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	e0 e0       	ldi	r30, 0x00	; 0
     82a:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     82c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     82e:	03 ea       	ldi	r16, 0xA3	; 163
     830:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     832:	d6 e0       	ldi	r29, 0x06	; 6
     834:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     836:	a1 e0       	ldi	r26, 0x01	; 1
     838:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     83a:	60 e8       	ldi	r22, 0x80	; 128
     83c:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     83e:	f8 94       	cli
            adc_setup_conversion(6);
     840:	d0 93 7c 00 	sts	0x007C, r29
     844:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     848:	90 91 7a 00 	lds	r25, 0x007A
     84c:	90 64       	ori	r25, 0x40	; 64
     84e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     852:	90 91 7a 00 	lds	r25, 0x007A
     856:	96 fd       	sbrc	r25, 6
     858:	fc cf       	rjmp	.-8      	; 0x852 <rand_hard+0x32>
            a = ADCW&0x1;
     85a:	20 91 78 00 	lds	r18, 0x0078
     85e:	30 91 79 00 	lds	r19, 0x0079
     862:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     864:	90 91 7a 00 	lds	r25, 0x007A
     868:	90 64       	ori	r25, 0x40	; 64
     86a:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     86e:	90 91 7a 00 	lds	r25, 0x007A
     872:	96 fd       	sbrc	r25, 6
     874:	fc cf       	rjmp	.-8      	; 0x86e <rand_hard+0x4e>
            b = ADCW&0x1;
     876:	40 91 78 00 	lds	r20, 0x0078
     87a:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     87e:	10 92 7c 00 	sts	0x007C, r1
     882:	00 93 7a 00 	sts	0x007A, r16
     886:	10 93 7b 00 	sts	0x007B, r17
            sei();
     88a:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     88c:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     88e:	24 13       	cpse	r18, r20
     890:	03 c0       	rjmp	.+6      	; 0x898 <rand_hard+0x78>
     892:	61 50       	subi	r22, 0x01	; 1
     894:	71 09       	sbc	r23, r1
     896:	99 f6       	brne	.-90     	; 0x83e <rand_hard+0x1e>
        if (a)
     898:	22 23       	and	r18, r18
     89a:	39 f0       	breq	.+14     	; 0x8aa <rand_hard+0x8a>
            num |= (1<<i);
     89c:	9d 01       	movw	r18, r26
     89e:	0e 2e       	mov	r0, r30
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <rand_hard+0x84>
     8a2:	22 0f       	add	r18, r18
     8a4:	0a 94       	dec	r0
     8a6:	ea f7       	brpl	.-6      	; 0x8a2 <rand_hard+0x82>
     8a8:	82 2b       	or	r24, r18
     8aa:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     8ac:	e8 30       	cpi	r30, 0x08	; 8
     8ae:	f1 05       	cpc	r31, r1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <rand_hard+0x94>
     8b2:	c3 cf       	rjmp	.-122    	; 0x83a <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     8be:	80 91 02 01 	lds	r24, 0x0102
     8c2:	98 2f       	mov	r25, r24
     8c4:	99 0f       	add	r25, r25
     8c6:	99 0f       	add	r25, r25
     8c8:	99 0f       	add	r25, r25
     8ca:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     8cc:	90 91 12 01 	lds	r25, 0x0112
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	29 0f       	add	r18, r25
     8d4:	20 93 12 01 	sts	0x0112, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     8d8:	28 2f       	mov	r18, r24
     8da:	22 95       	swap	r18
     8dc:	26 95       	lsr	r18
     8de:	27 70       	andi	r18, 0x07	; 7
     8e0:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     8e2:	96 95       	lsr	r25
     8e4:	96 95       	lsr	r25
     8e6:	89 27       	eor	r24, r25
     8e8:	80 93 02 01 	sts	0x0102, r24
    return seed;
}
     8ec:	08 95       	ret

000008ee <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     8ee:	80 93 02 01 	sts	0x0102, r24
     8f2:	08 95       	ret

000008f4 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     8f4:	80 91 4d 01 	lds	r24, 0x014D
     8f8:	81 11       	cpse	r24, r1
     8fa:	16 c0       	rjmp	.+44     	; 0x928 <__stack+0x29>
        cli();                                    // disable interrupts
     8fc:	f8 94       	cli
        adc_setup_conversion(6);
     8fe:	86 e0       	ldi	r24, 0x06	; 6
     900:	80 93 7c 00 	sts	0x007C, r24
     904:	83 e8       	ldi	r24, 0x83	; 131
     906:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     90a:	80 91 7a 00 	lds	r24, 0x007A
     90e:	80 64       	ori	r24, 0x40	; 64
     910:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     914:	80 91 7a 00 	lds	r24, 0x007A
     918:	86 fd       	sbrc	r24, 6
     91a:	fc cf       	rjmp	.-8      	; 0x914 <__stack+0x15>
        voltage = ADCW;                           // store AD result
     91c:	80 91 78 00 	lds	r24, 0x0078
     920:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     924:	78 94       	sei
     926:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     92c:	08 95       	ret

0000092e <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     92e:	2f 92       	push	r2
     930:	3f 92       	push	r3
     932:	4f 92       	push	r4
     934:	5f 92       	push	r5
     936:	6f 92       	push	r6
     938:	7f 92       	push	r7
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	00 d0       	rcall	.+0      	; 0x954 <estimate_distance+0x26>
     954:	00 d0       	rcall	.+0      	; 0x956 <estimate_distance+0x28>
     956:	00 d0       	rcall	.+0      	; 0x958 <estimate_distance+0x2a>
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     95e:	dc 01       	movw	r26, r24
     960:	12 96       	adiw	r26, 0x02	; 2
     962:	0d 90       	ld	r0, X+
     964:	bc 91       	ld	r27, X
     966:	a0 2d       	mov	r26, r0
     968:	be 83       	std	Y+6, r27	; 0x06
     96a:	ad 83       	std	Y+5, r26	; 0x05
     96c:	a4 38       	cpi	r26, 0x84	; 132
     96e:	e3 e0       	ldi	r30, 0x03	; 3
     970:	be 07       	cpc	r27, r30
     972:	0c f0       	brlt	.+2      	; 0x976 <estimate_distance+0x48>
     974:	c9 c0       	rjmp	.+402    	; 0xb08 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     976:	80 91 27 01 	lds	r24, 0x0127
     97a:	90 91 28 01 	lds	r25, 0x0128
     97e:	8a 17       	cp	r24, r26
     980:	9b 07       	cpc	r25, r27
     982:	08 f4       	brcc	.+2      	; 0x986 <estimate_distance+0x58>
     984:	37 c1       	rjmp	.+622    	; 0xbf4 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     986:	00 91 29 01 	lds	r16, 0x0129
     98a:	10 91 2a 01 	lds	r17, 0x012A
     98e:	0a 17       	cp	r16, r26
     990:	1b 07       	cpc	r17, r27
     992:	08 f4       	brcc	.+2      	; 0x996 <estimate_distance+0x68>
     994:	2f c2       	rjmp	.+1118   	; 0xdf4 <estimate_distance+0x4c6>
     996:	00 91 2b 01 	lds	r16, 0x012B
     99a:	10 91 2c 01 	lds	r17, 0x012C
     99e:	0a 17       	cp	r16, r26
     9a0:	1b 07       	cpc	r17, r27
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <estimate_distance+0x78>
     9a4:	2f c2       	rjmp	.+1118   	; 0xe04 <estimate_distance+0x4d6>
     9a6:	00 91 2d 01 	lds	r16, 0x012D
     9aa:	10 91 2e 01 	lds	r17, 0x012E
     9ae:	0a 17       	cp	r16, r26
     9b0:	1b 07       	cpc	r17, r27
     9b2:	08 f4       	brcc	.+2      	; 0x9b6 <estimate_distance+0x88>
     9b4:	2f c2       	rjmp	.+1118   	; 0xe14 <estimate_distance+0x4e6>
     9b6:	00 91 2f 01 	lds	r16, 0x012F
     9ba:	10 91 30 01 	lds	r17, 0x0130
     9be:	0a 17       	cp	r16, r26
     9c0:	1b 07       	cpc	r17, r27
     9c2:	08 f4       	brcc	.+2      	; 0x9c6 <estimate_distance+0x98>
     9c4:	2f c2       	rjmp	.+1118   	; 0xe24 <estimate_distance+0x4f6>
     9c6:	00 91 31 01 	lds	r16, 0x0131
     9ca:	10 91 32 01 	lds	r17, 0x0132
     9ce:	0a 17       	cp	r16, r26
     9d0:	1b 07       	cpc	r17, r27
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <estimate_distance+0xa8>
     9d4:	ef c1       	rjmp	.+990    	; 0xdb4 <estimate_distance+0x486>
     9d6:	00 91 33 01 	lds	r16, 0x0133
     9da:	10 91 34 01 	lds	r17, 0x0134
     9de:	0a 17       	cp	r16, r26
     9e0:	1b 07       	cpc	r17, r27
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <estimate_distance+0xb8>
     9e4:	27 c2       	rjmp	.+1102   	; 0xe34 <estimate_distance+0x506>
     9e6:	00 91 35 01 	lds	r16, 0x0135
     9ea:	10 91 36 01 	lds	r17, 0x0136
     9ee:	0a 17       	cp	r16, r26
     9f0:	1b 07       	cpc	r17, r27
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <estimate_distance+0xc8>
     9f4:	27 c2       	rjmp	.+1102   	; 0xe44 <estimate_distance+0x516>
     9f6:	00 91 37 01 	lds	r16, 0x0137
     9fa:	10 91 38 01 	lds	r17, 0x0138
     9fe:	0a 17       	cp	r16, r26
     a00:	1b 07       	cpc	r17, r27
     a02:	08 f4       	brcc	.+2      	; 0xa06 <estimate_distance+0xd8>
     a04:	27 c2       	rjmp	.+1102   	; 0xe54 <estimate_distance+0x526>
     a06:	00 91 39 01 	lds	r16, 0x0139
     a0a:	10 91 3a 01 	lds	r17, 0x013A
     a0e:	0a 17       	cp	r16, r26
     a10:	1b 07       	cpc	r17, r27
     a12:	08 f4       	brcc	.+2      	; 0xa16 <estimate_distance+0xe8>
     a14:	27 c2       	rjmp	.+1102   	; 0xe64 <estimate_distance+0x536>
     a16:	00 91 3b 01 	lds	r16, 0x013B
     a1a:	10 91 3c 01 	lds	r17, 0x013C
     a1e:	0a 17       	cp	r16, r26
     a20:	1b 07       	cpc	r17, r27
     a22:	08 f4       	brcc	.+2      	; 0xa26 <estimate_distance+0xf8>
     a24:	27 c2       	rjmp	.+1102   	; 0xe74 <estimate_distance+0x546>
     a26:	00 91 3d 01 	lds	r16, 0x013D
     a2a:	10 91 3e 01 	lds	r17, 0x013E
     a2e:	0a 17       	cp	r16, r26
     a30:	1b 07       	cpc	r17, r27
     a32:	08 f4       	brcc	.+2      	; 0xa36 <estimate_distance+0x108>
     a34:	23 c2       	rjmp	.+1094   	; 0xe7c <estimate_distance+0x54e>
     a36:	00 91 3f 01 	lds	r16, 0x013F
     a3a:	10 91 40 01 	lds	r17, 0x0140
     a3e:	0a 17       	cp	r16, r26
     a40:	1b 07       	cpc	r17, r27
     a42:	08 f4       	brcc	.+2      	; 0xa46 <estimate_distance+0x118>
     a44:	23 c2       	rjmp	.+1094   	; 0xe8c <estimate_distance+0x55e>
     a46:	00 91 41 01 	lds	r16, 0x0141
     a4a:	10 91 42 01 	lds	r17, 0x0142
     a4e:	0a 17       	cp	r16, r26
     a50:	1b 07       	cpc	r17, r27
     a52:	08 f4       	brcc	.+2      	; 0xa56 <estimate_distance+0x128>
     a54:	23 c2       	rjmp	.+1094   	; 0xe9c <estimate_distance+0x56e>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	a0 ed       	ldi	r26, 0xD0	; 208
     a5c:	b0 e4       	ldi	r27, 0x40	; 64
     a5e:	89 83       	std	Y+1, r24	; 0x01
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	ab 83       	std	Y+3, r26	; 0x03
     a64:	bc 83       	std	Y+4, r27	; 0x04
     a66:	4c e0       	ldi	r20, 0x0C	; 12
     a68:	e4 2e       	mov	r14, r20
     a6a:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     a6c:	f7 01       	movw	r30, r14
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	e9 5d       	subi	r30, 0xD9	; 217
     a74:	fe 4f       	sbci	r31, 0xFE	; 254
     a76:	80 81       	ld	r24, Z
     a78:	91 81       	ldd	r25, Z+1	; 0x01
     a7a:	b8 01       	movw	r22, r16
     a7c:	68 1b       	sub	r22, r24
     a7e:	79 0b       	sbc	r23, r25
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3>
     a90:	6b 01       	movw	r12, r22
     a92:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a94:	ad 81       	ldd	r26, Y+5	; 0x05
     a96:	be 81       	ldd	r27, Y+6	; 0x06
     a98:	bd 01       	movw	r22, r26
     a9a:	bb 0f       	add	r27, r27
     a9c:	88 0b       	sbc	r24, r24
     a9e:	99 0b       	sbc	r25, r25
     aa0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatsisf>
     aa4:	4b 01       	movw	r8, r22
     aa6:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     aa8:	b8 01       	movw	r22, r16
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     ab2:	2b 01       	movw	r4, r22
     ab4:	3c 01       	movw	r6, r24
     ab6:	29 81       	ldd	r18, Y+1	; 0x01
     ab8:	3a 81       	ldd	r19, Y+2	; 0x02
     aba:	4b 81       	ldd	r20, Y+3	; 0x03
     abc:	5c 81       	ldd	r21, Y+4	; 0x04
     abe:	c7 01       	movw	r24, r14
     ac0:	b6 01       	movw	r22, r12
     ac2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c3 01       	movw	r24, r6
     acc:	b2 01       	movw	r22, r4
     ace:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     ad6:	c5 01       	movw	r24, r10
     ad8:	b4 01       	movw	r22, r8
     ada:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e2       	ldi	r20, 0x20	; 32
     ae4:	51 e4       	ldi	r21, 0x41	; 65
     ae6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
            b=((int)((int)b/(int)slope));
     aea:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fixsfsi>
     aee:	8b 01       	movw	r16, r22
     af0:	c7 01       	movw	r24, r14
     af2:	b6 01       	movw	r22, r12
     af4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fixsfsi>
     af8:	ab 01       	movw	r20, r22
     afa:	bc 01       	movw	r22, r24
     afc:	c8 01       	movw	r24, r16
     afe:	ba 01       	movw	r22, r20
     b00:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divmodhi4>
            dist_high=b;
     b04:	16 2f       	mov	r17, r22
     b06:	77 c0       	rjmp	.+238    	; 0xbf6 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b08:	dc 01       	movw	r26, r24
     b0a:	cd 90       	ld	r12, X+
     b0c:	dc 90       	ld	r13, X
     b0e:	80 91 4e 01 	lds	r24, 0x014E
     b12:	90 91 4f 01 	lds	r25, 0x014F
     b16:	8c 15       	cp	r24, r12
     b18:	9d 05       	cpc	r25, r13
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <estimate_distance+0x1f0>
     b1c:	8c c0       	rjmp	.+280    	; 0xc36 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b1e:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b20:	e0 90 50 01 	lds	r14, 0x0150
     b24:	f0 90 51 01 	lds	r15, 0x0151
     b28:	ec 14       	cp	r14, r12
     b2a:	fd 04       	cpc	r15, r13
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <estimate_distance+0x202>
     b2e:	5e c1       	rjmp	.+700    	; 0xdec <estimate_distance+0x4be>
     b30:	e0 90 52 01 	lds	r14, 0x0152
     b34:	f0 90 53 01 	lds	r15, 0x0153
     b38:	ec 14       	cp	r14, r12
     b3a:	fd 04       	cpc	r15, r13
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <estimate_distance+0x212>
     b3e:	5e c1       	rjmp	.+700    	; 0xdfc <estimate_distance+0x4ce>
     b40:	e0 90 54 01 	lds	r14, 0x0154
     b44:	f0 90 55 01 	lds	r15, 0x0155
     b48:	ec 14       	cp	r14, r12
     b4a:	fd 04       	cpc	r15, r13
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <estimate_distance+0x222>
     b4e:	5e c1       	rjmp	.+700    	; 0xe0c <estimate_distance+0x4de>
     b50:	e0 90 56 01 	lds	r14, 0x0156
     b54:	f0 90 57 01 	lds	r15, 0x0157
     b58:	ec 14       	cp	r14, r12
     b5a:	fd 04       	cpc	r15, r13
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <estimate_distance+0x232>
     b5e:	5e c1       	rjmp	.+700    	; 0xe1c <estimate_distance+0x4ee>
     b60:	e0 90 58 01 	lds	r14, 0x0158
     b64:	f0 90 59 01 	lds	r15, 0x0159
     b68:	ec 14       	cp	r14, r12
     b6a:	fd 04       	cpc	r15, r13
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <estimate_distance+0x242>
     b6e:	c3 c0       	rjmp	.+390    	; 0xcf6 <estimate_distance+0x3c8>
     b70:	e0 90 5a 01 	lds	r14, 0x015A
     b74:	f0 90 5b 01 	lds	r15, 0x015B
     b78:	ec 14       	cp	r14, r12
     b7a:	fd 04       	cpc	r15, r13
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <estimate_distance+0x252>
     b7e:	56 c1       	rjmp	.+684    	; 0xe2c <estimate_distance+0x4fe>
     b80:	e0 90 5c 01 	lds	r14, 0x015C
     b84:	f0 90 5d 01 	lds	r15, 0x015D
     b88:	ec 14       	cp	r14, r12
     b8a:	fd 04       	cpc	r15, r13
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <estimate_distance+0x262>
     b8e:	56 c1       	rjmp	.+684    	; 0xe3c <estimate_distance+0x50e>
     b90:	e0 90 5e 01 	lds	r14, 0x015E
     b94:	f0 90 5f 01 	lds	r15, 0x015F
     b98:	ec 14       	cp	r14, r12
     b9a:	fd 04       	cpc	r15, r13
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <estimate_distance+0x272>
     b9e:	56 c1       	rjmp	.+684    	; 0xe4c <estimate_distance+0x51e>
     ba0:	e0 90 60 01 	lds	r14, 0x0160
     ba4:	f0 90 61 01 	lds	r15, 0x0161
     ba8:	ec 14       	cp	r14, r12
     baa:	fd 04       	cpc	r15, r13
     bac:	08 f4       	brcc	.+2      	; 0xbb0 <estimate_distance+0x282>
     bae:	56 c1       	rjmp	.+684    	; 0xe5c <estimate_distance+0x52e>
     bb0:	e0 90 62 01 	lds	r14, 0x0162
     bb4:	f0 90 63 01 	lds	r15, 0x0163
     bb8:	ec 14       	cp	r14, r12
     bba:	fd 04       	cpc	r15, r13
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <estimate_distance+0x292>
     bbe:	56 c1       	rjmp	.+684    	; 0xe6c <estimate_distance+0x53e>
     bc0:	e0 90 64 01 	lds	r14, 0x0164
     bc4:	f0 90 65 01 	lds	r15, 0x0165
     bc8:	ec 14       	cp	r14, r12
     bca:	fd 04       	cpc	r15, r13
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <estimate_distance+0x2a2>
     bce:	5a c1       	rjmp	.+692    	; 0xe84 <estimate_distance+0x556>
     bd0:	e0 90 66 01 	lds	r14, 0x0166
     bd4:	f0 90 67 01 	lds	r15, 0x0167
     bd8:	ec 14       	cp	r14, r12
     bda:	fd 04       	cpc	r15, r13
     bdc:	08 f4       	brcc	.+2      	; 0xbe0 <estimate_distance+0x2b2>
     bde:	5a c1       	rjmp	.+692    	; 0xe94 <estimate_distance+0x566>
     be0:	e0 90 68 01 	lds	r14, 0x0168
     be4:	f0 90 69 01 	lds	r15, 0x0169
     be8:	ec 14       	cp	r14, r12
     bea:	fd 04       	cpc	r15, r13
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <estimate_distance+0x2c2>
     bee:	5a c1       	rjmp	.+692    	; 0xea4 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     bf0:	0a e5       	ldi	r16, 0x5A	; 90
     bf2:	31 c0       	rjmp	.+98     	; 0xc56 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     bf4:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     bf6:	ed 81       	ldd	r30, Y+5	; 0x05
     bf8:	fe 81       	ldd	r31, Y+6	; 0x06
     bfa:	ed 3b       	cpi	r30, 0xBD	; 189
     bfc:	f2 40       	sbci	r31, 0x02	; 2
     bfe:	fc f4       	brge	.+62     	; 0xc3e <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c00:	81 e2       	ldi	r24, 0x21	; 33
     c02:	81 0f       	add	r24, r17
    }
}
     c04:	26 96       	adiw	r28, 0x06	; 6
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	3f 90       	pop	r3
     c32:	2f 90       	pop	r2
     c34:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c36:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     c38:	81 e2       	ldi	r24, 0x21	; 33
     c3a:	80 0f       	add	r24, r16
     c3c:	e3 cf       	rjmp	.-58     	; 0xc04 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c3e:	d1 01       	movw	r26, r2
     c40:	cd 90       	ld	r12, X+
     c42:	dc 90       	ld	r13, X
     c44:	80 91 4e 01 	lds	r24, 0x014E
     c48:	90 91 4f 01 	lds	r25, 0x014F
     c4c:	8c 15       	cp	r24, r12
     c4e:	9d 05       	cpc	r25, r13
     c50:	08 f0       	brcs	.+2      	; 0xc54 <estimate_distance+0x326>
     c52:	66 cf       	rjmp	.-308    	; 0xb20 <estimate_distance+0x1f2>
            dist_low=0;
     c54:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     c56:	1f 3f       	cpi	r17, 0xFF	; 255
     c58:	79 f3       	breq	.-34     	; 0xc38 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     c5a:	ed 81       	ldd	r30, Y+5	; 0x05
     c5c:	fe 81       	ldd	r31, Y+6	; 0x06
     c5e:	bf 01       	movw	r22, r30
     c60:	ff 0f       	add	r31, r31
     c62:	88 0b       	sbc	r24, r24
     c64:	99 0b       	sbc	r25, r25
     c66:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatsisf>
     c6a:	6b 01       	movw	r12, r22
     c6c:	7c 01       	movw	r14, r24
     c6e:	61 2f       	mov	r22, r17
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     c7a:	4b 01       	movw	r8, r22
     c7c:	5c 01       	movw	r10, r24
     c7e:	a7 01       	movw	r20, r14
     c80:	96 01       	movw	r18, r12
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	81 e6       	ldi	r24, 0x61	; 97
     c88:	94 e4       	ldi	r25, 0x44	; 68
     c8a:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	c5 01       	movw	r24, r10
     c94:	b4 01       	movw	r22, r8
     c96:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
     c9a:	4b 01       	movw	r8, r22
     c9c:	5c 01       	movw	r10, r24
     c9e:	60 2f       	mov	r22, r16
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     caa:	2b 01       	movw	r4, r22
     cac:	3c 01       	movw	r6, r24
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4f e2       	ldi	r20, 0x2F	; 47
     cb4:	54 e4       	ldi	r21, 0x44	; 68
     cb6:	c7 01       	movw	r24, r14
     cb8:	b6 01       	movw	r22, r12
     cba:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     cbe:	9b 01       	movw	r18, r22
     cc0:	ac 01       	movw	r20, r24
     cc2:	c3 01       	movw	r24, r6
     cc4:	b2 01       	movw	r22, r4
     cc6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
     cca:	9b 01       	movw	r18, r22
     ccc:	ac 01       	movw	r20, r24
     cce:	c5 01       	movw	r24, r10
     cd0:	b4 01       	movw	r22, r8
     cd2:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	48 e4       	ldi	r20, 0x48	; 72
     cdc:	53 e4       	ldi	r21, 0x43	; 67
     cde:	0e 94 82 0b 	call	0x1704	; 0x1704 <__divsf3>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	44 e0       	ldi	r20, 0x04	; 4
     ce8:	52 e4       	ldi	r21, 0x42	; 66
     cea:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3>
     cee:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fixunssfsi>
     cf2:	86 2f       	mov	r24, r22
     cf4:	87 cf       	rjmp	.-242    	; 0xc04 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf6:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     cf8:	85 e0       	ldi	r24, 0x05	; 5
     cfa:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	fc 01       	movw	r30, r24
     d02:	e4 5b       	subi	r30, 0xB4	; 180
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	b7 01       	movw	r22, r14
     d0c:	68 1b       	sub	r22, r24
     d0e:	79 0b       	sbc	r23, r25
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3>
     d20:	4b 01       	movw	r8, r22
     d22:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d24:	b6 01       	movw	r22, r12
     d26:	dd 0c       	add	r13, r13
     d28:	88 0b       	sbc	r24, r24
     d2a:	99 0b       	sbc	r25, r25
     d2c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatsisf>
     d30:	2b 01       	movw	r4, r22
     d32:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     d34:	b7 01       	movw	r22, r14
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     d3e:	6b 01       	movw	r12, r22
     d40:	7c 01       	movw	r14, r24
     d42:	60 2f       	mov	r22, r16
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	5f e3       	ldi	r21, 0x3F	; 63
     d56:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3>
     d64:	a5 01       	movw	r20, r10
     d66:	94 01       	movw	r18, r8
     d68:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
     d6c:	9b 01       	movw	r18, r22
     d6e:	ac 01       	movw	r20, r24
     d70:	c7 01       	movw	r24, r14
     d72:	b6 01       	movw	r22, r12
     d74:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     d78:	9b 01       	movw	r18, r22
     d7a:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d7c:	c3 01       	movw	r24, r6
     d7e:	b2 01       	movw	r22, r4
     d80:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
                b=((int)((int)b/(int)slope));
     d90:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fixsfsi>
     d94:	7b 01       	movw	r14, r22
     d96:	c5 01       	movw	r24, r10
     d98:	b4 01       	movw	r22, r8
     d9a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fixsfsi>
     d9e:	ab 01       	movw	r20, r22
     da0:	bc 01       	movw	r22, r24
     da2:	c7 01       	movw	r24, r14
     da4:	ba 01       	movw	r22, r20
     da6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divmodhi4>
                dist_low=b;
     daa:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     dac:	6f 3f       	cpi	r22, 0xFF	; 255
     dae:	09 f0       	breq	.+2      	; 0xdb2 <estimate_distance+0x484>
     db0:	52 cf       	rjmp	.-348    	; 0xc56 <estimate_distance+0x328>
     db2:	26 cf       	rjmp	.-436    	; 0xc00 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db4:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     db6:	85 e0       	ldi	r24, 0x05	; 5
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	7c 01       	movw	r14, r24
     dbc:	f1 e0       	ldi	r31, 0x01	; 1
     dbe:	ef 1a       	sub	r14, r31
     dc0:	f1 08       	sbc	r15, r1
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatunsisf>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	5f e3       	ldi	r21, 0x3F	; 63
     dd4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__mulsf3>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	a9 01       	movw	r20, r18
     dde:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3>
     de2:	69 83       	std	Y+1, r22	; 0x01
     de4:	7a 83       	std	Y+2, r23	; 0x02
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     dea:	40 ce       	rjmp	.-896    	; 0xa6c <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     dec:	01 e0       	ldi	r16, 0x01	; 1
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	84 cf       	rjmp	.-248    	; 0xcfc <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	df cf       	rjmp	.-66     	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dfc:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	7c cf       	rjmp	.-264    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e04:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	d7 cf       	rjmp	.-82     	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e0c:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	74 cf       	rjmp	.-280    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e14:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	cf cf       	rjmp	.-98     	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e1c:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	6c cf       	rjmp	.-296    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e24:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	c7 cf       	rjmp	.-114    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e2c:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     e2e:	86 e0       	ldi	r24, 0x06	; 6
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	64 cf       	rjmp	.-312    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e34:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     e36:	86 e0       	ldi	r24, 0x06	; 6
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	bf cf       	rjmp	.-130    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e3c:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     e3e:	87 e0       	ldi	r24, 0x07	; 7
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	5c cf       	rjmp	.-328    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e44:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     e46:	87 e0       	ldi	r24, 0x07	; 7
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	b7 cf       	rjmp	.-146    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e4c:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     e4e:	88 e0       	ldi	r24, 0x08	; 8
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	54 cf       	rjmp	.-344    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e54:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     e56:	88 e0       	ldi	r24, 0x08	; 8
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	af cf       	rjmp	.-162    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e5c:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     e5e:	89 e0       	ldi	r24, 0x09	; 9
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	4c cf       	rjmp	.-360    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e64:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     e66:	89 e0       	ldi	r24, 0x09	; 9
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a7 cf       	rjmp	.-178    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e6c:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     e6e:	8a e0       	ldi	r24, 0x0A	; 10
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	44 cf       	rjmp	.-376    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e74:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     e76:	8a e0       	ldi	r24, 0x0A	; 10
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9f cf       	rjmp	.-194    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e7c:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     e7e:	8b e0       	ldi	r24, 0x0B	; 11
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9b cf       	rjmp	.-202    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e84:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     e86:	8b e0       	ldi	r24, 0x0B	; 11
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	38 cf       	rjmp	.-400    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e8c:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     e8e:	8c e0       	ldi	r24, 0x0C	; 12
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	93 cf       	rjmp	.-218    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e94:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     e96:	8c e0       	ldi	r24, 0x0C	; 12
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	30 cf       	rjmp	.-416    	; 0xcfc <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e9c:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     e9e:	8d e0       	ldi	r24, 0x0D	; 13
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	8b cf       	rjmp	.-234    	; 0xdba <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ea4:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     ea6:	8d e0       	ldi	r24, 0x0D	; 13
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	28 cf       	rjmp	.-432    	; 0xcfc <estimate_distance+0x3ce>

00000eac <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
    tx_clock += tx_increment;
     ece:	20 91 6d 01 	lds	r18, 0x016D
     ed2:	30 91 6e 01 	lds	r19, 0x016E
     ed6:	80 91 6b 01 	lds	r24, 0x016B
     eda:	90 91 6c 01 	lds	r25, 0x016C
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	90 93 6e 01 	sts	0x016E, r25
     ee6:	80 93 6d 01 	sts	0x016D, r24
    tx_increment = 0xFF;
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	90 93 6c 01 	sts	0x016C, r25
     ef2:	80 93 6b 01 	sts	0x016B, r24
    OCR0A = tx_increment;
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     efa:	80 91 49 01 	lds	r24, 0x0149
     efe:	90 91 4a 01 	lds	r25, 0x014A
     f02:	a0 91 4b 01 	lds	r26, 0x014B
     f06:	b0 91 4c 01 	lds	r27, 0x014C
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	a1 1d       	adc	r26, r1
     f0e:	b1 1d       	adc	r27, r1
     f10:	80 93 49 01 	sts	0x0149, r24
     f14:	90 93 4a 01 	sts	0x014A, r25
     f18:	a0 93 4b 01 	sts	0x014B, r26
     f1c:	b0 93 4c 01 	sts	0x014C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f20:	80 91 4d 01 	lds	r24, 0x014D
     f24:	81 11       	cpse	r24, r1
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <__vector_14+0x9a>
     f28:	80 91 7c 01 	lds	r24, 0x017C
     f2c:	90 91 7d 01 	lds	r25, 0x017D
     f30:	20 91 6d 01 	lds	r18, 0x016D
     f34:	30 91 6e 01 	lds	r19, 0x016E
     f38:	82 17       	cp	r24, r18
     f3a:	93 07       	cpc	r25, r19
     f3c:	20 f4       	brcc	.+8      	; 0xf46 <__vector_14+0x9a>
     f3e:	80 91 15 01 	lds	r24, 0x0115
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	89 f0       	breq	.+34     	; 0xf68 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     f68:	e0 91 05 01 	lds	r30, 0x0105
     f6c:	f0 91 06 01 	lds	r31, 0x0106
     f70:	09 95       	icall
        if (msg) {
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	41 f3       	breq	.-48     	; 0xf46 <__vector_14+0x9a>
            if (message_send(msg)) {
     f76:	0e 94 3e 0a 	call	0x147c	; 0x147c <message_send>
     f7a:	81 11       	cpse	r24, r1
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     f7e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <rand>
     f82:	99 27       	eor	r25, r25
     f84:	90 93 6c 01 	sts	0x016C, r25
     f88:	80 93 6b 01 	sts	0x016B, r24
                OCR0A = tx_increment;
     f8c:	87 bd       	out	0x27, r24	; 39
     f8e:	db cf       	rjmp	.-74     	; 0xf46 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     f90:	e0 91 03 01 	lds	r30, 0x0103
     f94:	f0 91 04 01 	lds	r31, 0x0104
     f98:	09 95       	icall
                tx_clock = 0;
     f9a:	10 92 6e 01 	sts	0x016E, r1
     f9e:	10 92 6d 01 	sts	0x016D, r1
     fa2:	d1 cf       	rjmp	.-94     	; 0xf46 <__vector_14+0x9a>

00000fa4 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     fa4:	80 ff       	sbrs	r24, 0
     fa6:	11 c0       	rjmp	.+34     	; 0xfca <set_color+0x26>
        DDRD |= (1<<5);
     fa8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     faa:	81 ff       	sbrs	r24, 1
     fac:	11 c0       	rjmp	.+34     	; 0xfd0 <set_color+0x2c>
        DDRD |= (1<<4);
     fae:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     fb0:	82 ff       	sbrs	r24, 2
     fb2:	11 c0       	rjmp	.+34     	; 0xfd6 <set_color+0x32>
        DDRC |= (1<<3);
     fb4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     fb6:	83 ff       	sbrs	r24, 3
     fb8:	11 c0       	rjmp	.+34     	; 0xfdc <set_color+0x38>
        DDRC |= (1<<2);
     fba:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     fbc:	84 ff       	sbrs	r24, 4
     fbe:	11 c0       	rjmp	.+34     	; 0xfe2 <set_color+0x3e>
        DDRC |= (1<<5);
     fc0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     fc2:	85 fd       	sbrc	r24, 5
     fc4:	11 c0       	rjmp	.+34     	; 0xfe8 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     fc6:	3c 98       	cbi	0x07, 4	; 7
     fc8:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     fca:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     fcc:	81 fd       	sbrc	r24, 1
     fce:	ef cf       	rjmp	.-34     	; 0xfae <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     fd0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     fd2:	82 fd       	sbrc	r24, 2
     fd4:	ef cf       	rjmp	.-34     	; 0xfb4 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     fd6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     fd8:	83 fd       	sbrc	r24, 3
     fda:	ef cf       	rjmp	.-34     	; 0xfba <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     fdc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     fde:	84 fd       	sbrc	r24, 4
     fe0:	ef cf       	rjmp	.-34     	; 0xfc0 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     fe2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     fe4:	85 ff       	sbrs	r24, 5
     fe6:	ef cf       	rjmp	.-34     	; 0xfc6 <set_color+0x22>
        DDRC |= (1<<4);
     fe8:	3c 9a       	sbi	0x07, 4	; 7
     fea:	08 95       	ret

00000fec <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	8f 93       	push	r24
     ff8:	9f 93       	push	r25
    rx_timer_off();
     ffa:	10 92 81 00 	sts	0x0081, r1
     ffe:	10 92 85 00 	sts	0x0085, r1
    1002:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 26 01 	sts	0x0126, r24
    rx_leadingbyte = 1;
    100c:	80 93 6a 01 	sts	0x016A, r24
    rx_busy = 0;
    1010:	10 92 4d 01 	sts	0x014D, r1
    adc_trigger_high_gain();
    1014:	10 92 7c 00 	sts	0x007C, r1
    1018:	93 ea       	ldi	r25, 0xA3	; 163
    101a:	90 93 7a 00 	sts	0x007A, r25
    101e:	80 93 7b 00 	sts	0x007B, r24
}
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1056:	20 91 84 00 	lds	r18, 0x0084
    105a:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	40 93 4d 01 	sts	0x014D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1064:	80 91 26 01 	lds	r24, 0x0126
    1068:	88 23       	and	r24, r24
    106a:	a9 f1       	breq	.+106    	; 0x10d6 <__vector_23+0xa6>
        rx_timer_on();
    106c:	10 92 85 00 	sts	0x0085, r1
    1070:	10 92 84 00 	sts	0x0084, r1
    1074:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1078:	10 92 7e 01 	sts	0x017E, r1
        rx_leadingbit = 0;
    107c:	10 92 26 01 	sts	0x0126, r1
        if (rx_leadingbyte) {
    1080:	80 91 6a 01 	lds	r24, 0x016A
    1084:	88 23       	and	r24, r24
    1086:	a1 f0       	breq	.+40     	; 0x10b0 <__vector_23+0x80>
            adc_finish_conversion();
    1088:	80 91 7a 00 	lds	r24, 0x007A
    108c:	86 fd       	sbrc	r24, 6
    108e:	fc cf       	rjmp	.-8      	; 0x1088 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1090:	80 91 78 00 	lds	r24, 0x0078
    1094:	90 91 79 00 	lds	r25, 0x0079
    1098:	90 93 48 01 	sts	0x0148, r25
    109c:	80 93 47 01 	sts	0x0147, r24
            adc_trigger_low_gain();
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 7c 00 	sts	0x007C, r24
    10a6:	93 ea       	ldi	r25, 0xA3	; 163
    10a8:	90 93 7a 00 	sts	0x007A, r25
    10ac:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    10d6:	c9 01       	movw	r24, r18
    10d8:	87 58       	subi	r24, 0x87	; 135
    10da:	91 09       	sbc	r25, r1
    10dc:	84 37       	cpi	r24, 0x74	; 116
    10de:	99 40       	sbci	r25, 0x09	; 9
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <__vector_23+0xb4>
    10e2:	52 c0       	rjmp	.+164    	; 0x1188 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    10e4:	26 58       	subi	r18, 0x86	; 134
    10e6:	31 09       	sbc	r19, r1
    10e8:	a4 ef       	ldi	r26, 0xF4	; 244
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__umulhisi3>
    10f0:	aa 27       	eor	r26, r26
    10f2:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    10f4:	88 30       	cpi	r24, 0x08	; 8
    10f6:	91 05       	cpc	r25, r1
    10f8:	a1 05       	cpc	r26, r1
    10fa:	b1 05       	cpc	r27, r1
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <__vector_23+0xd0>
    10fe:	7b c0       	rjmp	.+246    	; 0x11f6 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1100:	40 93 26 01 	sts	0x0126, r20
                if (rx_leadingbyte) {
    1104:	80 91 6a 01 	lds	r24, 0x016A
    1108:	81 11       	cpse	r24, r1
    110a:	52 c0       	rjmp	.+164    	; 0x11b0 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    110c:	80 91 44 01 	lds	r24, 0x0144
    1110:	e8 2f       	mov	r30, r24
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	e0 59       	subi	r30, 0x90	; 144
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	90 91 7e 01 	lds	r25, 0x017E
    111c:	90 83       	st	Z, r25
                    rx_byteindex++;
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	80 93 44 01 	sts	0x0144, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1124:	8c 30       	cpi	r24, 0x0C	; 12
    1126:	21 f6       	brne	.-120    	; 0x10b0 <__vector_23+0x80>
                        rx_timer_off();
    1128:	10 92 81 00 	sts	0x0081, r1
    112c:	10 92 85 00 	sts	0x0085, r1
    1130:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1134:	40 93 6a 01 	sts	0x016A, r20
                        rx_busy = 0;
    1138:	10 92 4d 01 	sts	0x014D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    113c:	c0 91 7a 01 	lds	r28, 0x017A
    1140:	d0 91 7b 01 	lds	r29, 0x017B
    1144:	80 e7       	ldi	r24, 0x70	; 112
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	0e 94 22 0a 	call	0x1444	; 0x1444 <message_crc>
    114c:	c8 17       	cp	r28, r24
    114e:	d9 07       	cpc	r29, r25
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_23+0x124>
    1152:	ae cf       	rjmp	.-164    	; 0x10b0 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1154:	80 91 79 01 	lds	r24, 0x0179
    1158:	87 ff       	sbrs	r24, 7
    115a:	61 c0       	rjmp	.+194    	; 0x121e <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    115c:	98 e7       	ldi	r25, 0x78	; 120
    115e:	98 0f       	add	r25, r24
    1160:	93 30       	cpi	r25, 0x03	; 3
    1162:	30 f0       	brcs	.+12     	; 0x1170 <__vector_23+0x140>
        motors_off();
    1164:	53 98       	cbi	0x0a, 3	; 10
    1166:	23 98       	cbi	0x04, 3	; 4
    1168:	10 92 b4 00 	sts	0x00B4, r1
    116c:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	fc 01       	movw	r30, r24
    1174:	e0 58       	subi	r30, 0x80	; 128
    1176:	f1 09       	sbc	r31, r1
    1178:	eb 30       	cpi	r30, 0x0B	; 11
    117a:	f1 05       	cpc	r31, r1
    117c:	08 f0       	brcs	.+2      	; 0x1180 <__vector_23+0x150>
    117e:	98 cf       	rjmp	.-208    	; 0x10b0 <__vector_23+0x80>
    1180:	e5 5c       	subi	r30, 0xC5	; 197
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1188:	10 92 81 00 	sts	0x0081, r1
    118c:	10 92 85 00 	sts	0x0085, r1
    1190:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1194:	40 93 26 01 	sts	0x0126, r20
            rx_leadingbyte = 1;
    1198:	40 93 6a 01 	sts	0x016A, r20
            rx_busy = 0;
    119c:	10 92 4d 01 	sts	0x014D, r1
            adc_trigger_high_gain();
    11a0:	10 92 7c 00 	sts	0x007C, r1
    11a4:	83 ea       	ldi	r24, 0xA3	; 163
    11a6:	80 93 7a 00 	sts	0x007A, r24
    11aa:	40 93 7b 00 	sts	0x007B, r20
    11ae:	80 cf       	rjmp	.-256    	; 0x10b0 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    11b0:	80 91 7a 00 	lds	r24, 0x007A
    11b4:	86 fd       	sbrc	r24, 6
    11b6:	fc cf       	rjmp	.-8      	; 0x11b0 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    11b8:	80 91 78 00 	lds	r24, 0x0078
    11bc:	90 91 79 00 	lds	r25, 0x0079
    11c0:	90 93 46 01 	sts	0x0146, r25
    11c4:	80 93 45 01 	sts	0x0145, r24
                    adc_trigger_high_gain();
    11c8:	10 92 7c 00 	sts	0x007C, r1
    11cc:	83 ea       	ldi	r24, 0xA3	; 163
    11ce:	80 93 7a 00 	sts	0x007A, r24
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    11d8:	90 91 7e 01 	lds	r25, 0x017E
    11dc:	99 23       	and	r25, r25
    11de:	d1 f0       	breq	.+52     	; 0x1214 <__vector_23+0x1e4>
                        rx_timer_off();
    11e0:	10 92 81 00 	sts	0x0081, r1
    11e4:	10 92 85 00 	sts	0x0085, r1
    11e8:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    11ec:	80 93 6a 01 	sts	0x016A, r24
                        rx_busy = 0;
    11f0:	10 92 4d 01 	sts	0x014D, r1
    11f4:	5d cf       	rjmp	.-326    	; 0x10b0 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	f9 01       	movw	r30, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <__vector_23+0x1d2>
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <__vector_23+0x1ce>
    1206:	cf 01       	movw	r24, r30
    1208:	90 91 7e 01 	lds	r25, 0x017E
    120c:	89 2b       	or	r24, r25
    120e:	80 93 7e 01 	sts	0x017E, r24
    1212:	4e cf       	rjmp	.-356    	; 0x10b0 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1214:	10 92 6a 01 	sts	0x016A, r1
                        rx_byteindex = 0;
    1218:	10 92 44 01 	sts	0x0144, r1
    121c:	49 cf       	rjmp	.-366    	; 0x10b0 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    121e:	e0 91 07 01 	lds	r30, 0x0107
    1222:	f0 91 08 01 	lds	r31, 0x0108
    1226:	65 e4       	ldi	r22, 0x45	; 69
    1228:	71 e0       	ldi	r23, 0x01	; 1
    122a:	80 e7       	ldi	r24, 0x70	; 112
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	09 95       	icall
    1230:	3f cf       	rjmp	.-386    	; 0x10b0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1232:	80 91 70 01 	lds	r24, 0x0170
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	09 f4       	brne	.+2      	; 0x123c <__vector_23+0x20c>
    123a:	dd c0       	rjmp	.+442    	; 0x13f6 <__vector_23+0x3c6>
    123c:	08 f4       	brcc	.+2      	; 0x1240 <__vector_23+0x210>
    123e:	ba c0       	rjmp	.+372    	; 0x13b4 <__vector_23+0x384>
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	09 f4       	brne	.+2      	; 0x1246 <__vector_23+0x216>
    1244:	c6 c0       	rjmp	.+396    	; 0x13d2 <__vector_23+0x3a2>
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	09 f0       	breq	.+2      	; 0x124c <__vector_23+0x21c>
    124a:	b1 c0       	rjmp	.+354    	; 0x13ae <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    124c:	80 91 13 01 	lds	r24, 0x0113
    1250:	90 91 76 01 	lds	r25, 0x0176
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	09 f4       	brne	.+2      	; 0x125a <__vector_23+0x22a>
    1258:	e3 c0       	rjmp	.+454    	; 0x1420 <__vector_23+0x3f0>
    125a:	80 91 75 01 	lds	r24, 0x0175
                        prev_motion = MOVE_STOP;
    125e:	10 92 14 01 	sts	0x0114, r1
                        cur_motion = MOVE_STRAIGHT;
    1262:	23 e0       	ldi	r18, 0x03	; 3
    1264:	20 93 13 01 	sts	0x0113, r18
                        kilo_straight_left = calibmsg->straight_left;
    1268:	80 93 81 01 	sts	0x0181, r24
                        kilo_straight_right = calibmsg->straight_right;
    126c:	90 93 82 01 	sts	0x0182, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1270:	80 91 15 01 	lds	r24, 0x0115
    1274:	86 30       	cpi	r24, 0x06	; 6
    1276:	09 f4       	brne	.+2      	; 0x127a <__vector_23+0x24a>
    1278:	1b cf       	rjmp	.-458    	; 0x10b0 <__vector_23+0x80>
                motors_on();
    127a:	53 9a       	sbi	0x0a, 3	; 10
    127c:	23 9a       	sbi	0x04, 3	; 4
    127e:	10 92 b4 00 	sts	0x00B4, r1
    1282:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1286:	86 e0       	ldi	r24, 0x06	; 6
    1288:	80 93 15 01 	sts	0x0115, r24
    128c:	11 cf       	rjmp	.-478    	; 0x10b0 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    128e:	80 91 15 01 	lds	r24, 0x0115
    1292:	86 30       	cpi	r24, 0x06	; 6
    1294:	99 f0       	breq	.+38     	; 0x12bc <__vector_23+0x28c>
                motors_on();
    1296:	53 9a       	sbi	0x0a, 3	; 10
    1298:	23 9a       	sbi	0x04, 3	; 4
    129a:	10 92 b4 00 	sts	0x00B4, r1
    129e:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    12a2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    12a4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    12a6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    12a8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    12aa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    12ac:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    12ae:	10 92 13 01 	sts	0x0113, r1
    12b2:	10 92 14 01 	sts	0x0114, r1
                kilo_state = MOVING;
    12b6:	86 e0       	ldi	r24, 0x06	; 6
    12b8:	80 93 15 01 	sts	0x0115, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9c 01       	movw	r18, r24
    12c2:	00 90 70 01 	lds	r0, 0x0170
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <__vector_23+0x29c>
    12c8:	22 0f       	add	r18, r18
    12ca:	33 1f       	adc	r19, r19
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <__vector_23+0x298>
    12d0:	80 91 7f 01 	lds	r24, 0x017F
    12d4:	90 91 80 01 	lds	r25, 0x0180
    12d8:	82 23       	and	r24, r18
    12da:	93 23       	and	r25, r19
    12dc:	89 2b       	or	r24, r25
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__vector_23+0x2b2>
    12e0:	86 c0       	rjmp	.+268    	; 0x13ee <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    12e2:	10 92 13 01 	sts	0x0113, r1
    12e6:	e4 ce       	rjmp	.-568    	; 0x10b0 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 15 01 	sts	0x0115, r24
    12ee:	e0 ce       	rjmp	.-576    	; 0x10b0 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    12f0:	e0 e0       	ldi	r30, 0x00	; 0
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    12f6:	80 91 6e 00 	lds	r24, 0x006E
    12fa:	8d 7f       	andi	r24, 0xFD	; 253
    12fc:	80 93 6e 00 	sts	0x006E, r24
    1300:	16 bc       	out	0x26, r1	; 38
            bootload();
    1302:	e0 e0       	ldi	r30, 0x00	; 0
    1304:	f0 e7       	ldi	r31, 0x70	; 112
    1306:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1308:	10 92 15 01 	sts	0x0115, r1
    130c:	d1 ce       	rjmp	.-606    	; 0x10b0 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	80 93 15 01 	sts	0x0115, r24
    1314:	cd ce       	rjmp	.-614    	; 0x10b0 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1316:	85 e0       	ldi	r24, 0x05	; 5
    1318:	80 93 15 01 	sts	0x0115, r24
    131c:	c9 ce       	rjmp	.-622    	; 0x10b0 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    131e:	80 91 15 01 	lds	r24, 0x0115
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	09 f4       	brne	.+2      	; 0x1328 <__vector_23+0x2f8>
    1326:	c4 ce       	rjmp	.-632    	; 0x10b0 <__vector_23+0x80>
    1328:	80 91 15 01 	lds	r24, 0x0115
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	09 f4       	brne	.+2      	; 0x1332 <__vector_23+0x302>
    1330:	bf ce       	rjmp	.-642    	; 0x10b0 <__vector_23+0x80>
                motors_on();
    1332:	53 9a       	sbi	0x0a, 3	; 10
    1334:	23 9a       	sbi	0x04, 3	; 4
    1336:	10 92 b4 00 	sts	0x00B4, r1
    133a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	80 93 15 01 	sts	0x0115, r24
    1344:	b5 ce       	rjmp	.-662    	; 0x10b0 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1346:	80 91 15 01 	lds	r24, 0x0115
    134a:	86 30       	cpi	r24, 0x06	; 6
    134c:	09 f0       	breq	.+2      	; 0x1350 <__vector_23+0x320>
    134e:	b0 ce       	rjmp	.-672    	; 0x10b0 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1350:	60 91 7f 01 	lds	r22, 0x017F
    1354:	80 eb       	ldi	r24, 0xB0	; 176
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    135c:	60 91 80 01 	lds	r22, 0x0180
    1360:	81 eb       	ldi	r24, 0xB1	; 177
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1368:	60 91 83 01 	lds	r22, 0x0183
    136c:	85 e0       	ldi	r24, 0x05	; 5
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1374:	60 91 6f 01 	lds	r22, 0x016F
    1378:	89 e0       	ldi	r24, 0x09	; 9
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1380:	60 91 81 01 	lds	r22, 0x0181
    1384:	8c e0       	ldi	r24, 0x0C	; 12
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    138c:	60 91 82 01 	lds	r22, 0x0182
    1390:	84 e1       	ldi	r24, 0x14	; 20
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <eeprom_write_byte>
                        motors_off();
    1398:	53 98       	cbi	0x0a, 3	; 10
    139a:	23 98       	cbi	0x04, 3	; 4
    139c:	10 92 b4 00 	sts	0x00B4, r1
    13a0:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	80 93 15 01 	sts	0x0115, r24
    13aa:	80 91 70 01 	lds	r24, 0x0170
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13ae:	81 11       	cpse	r24, r1
    13b0:	5f cf       	rjmp	.-322    	; 0x1270 <__vector_23+0x240>
    13b2:	7e ce       	rjmp	.-772    	; 0x10b0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13b4:	88 23       	and	r24, r24
    13b6:	39 f2       	breq	.-114    	; 0x1346 <__vector_23+0x316>
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	c9 f7       	brne	.-14     	; 0x13ae <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    13bc:	80 91 71 01 	lds	r24, 0x0171
    13c0:	90 91 72 01 	lds	r25, 0x0172
    13c4:	90 93 80 01 	sts	0x0180, r25
    13c8:	80 93 7f 01 	sts	0x017F, r24
                    cur_motion = MOVE_STOP;
    13cc:	10 92 13 01 	sts	0x0113, r1
    13d0:	4f cf       	rjmp	.-354    	; 0x1270 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    13d2:	80 91 13 01 	lds	r24, 0x0113
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	71 f1       	breq	.+92     	; 0x1436 <__vector_23+0x406>
    13da:	80 91 74 01 	lds	r24, 0x0174
                        prev_motion = MOVE_STOP;
    13de:	10 92 14 01 	sts	0x0114, r1
                        cur_motion = MOVE_RIGHT;
    13e2:	92 e0       	ldi	r25, 0x02	; 2
    13e4:	90 93 13 01 	sts	0x0113, r25
                        kilo_turn_right = calibmsg->turn_right;
    13e8:	80 93 6f 01 	sts	0x016F, r24
    13ec:	41 cf       	rjmp	.-382    	; 0x1270 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 13 01 	sts	0x0113, r24
    13f4:	5d ce       	rjmp	.-838    	; 0x10b0 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    13f6:	80 91 13 01 	lds	r24, 0x0113
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	51 f0       	breq	.+20     	; 0x1412 <__vector_23+0x3e2>
    13fe:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    1402:	10 92 14 01 	sts	0x0114, r1
                        cur_motion = MOVE_LEFT;
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	90 93 13 01 	sts	0x0113, r25
                        kilo_turn_left = calibmsg->turn_left;
    140c:	80 93 83 01 	sts	0x0183, r24
    1410:	2f cf       	rjmp	.-418    	; 0x1270 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1412:	80 91 73 01 	lds	r24, 0x0173
    1416:	90 91 83 01 	lds	r25, 0x0183
    141a:	89 13       	cpse	r24, r25
    141c:	f2 cf       	rjmp	.-28     	; 0x1402 <__vector_23+0x3d2>
    141e:	28 cf       	rjmp	.-432    	; 0x1270 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1420:	80 91 82 01 	lds	r24, 0x0182
    1424:	98 13       	cpse	r25, r24
    1426:	19 cf       	rjmp	.-462    	; 0x125a <__vector_23+0x22a>
    1428:	80 91 75 01 	lds	r24, 0x0175
    142c:	20 91 81 01 	lds	r18, 0x0181
    1430:	82 13       	cpse	r24, r18
    1432:	15 cf       	rjmp	.-470    	; 0x125e <__vector_23+0x22e>
    1434:	1d cf       	rjmp	.-454    	; 0x1270 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1436:	80 91 74 01 	lds	r24, 0x0174
    143a:	90 91 6f 01 	lds	r25, 0x016F
    143e:	89 13       	cpse	r24, r25
    1440:	ce cf       	rjmp	.-100    	; 0x13de <__vector_23+0x3ae>
    1442:	16 cf       	rjmp	.-468    	; 0x1270 <__vector_23+0x240>

00001444 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1444:	fc 01       	movw	r30, r24
    1446:	ac 01       	movw	r20, r24
    1448:	46 5f       	subi	r20, 0xF6	; 246
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1450:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1452:	82 27       	eor	r24, r18
    1454:	08 2e       	mov	r0, r24
    1456:	82 95       	swap	r24
    1458:	80 7f       	andi	r24, 0xF0	; 240
    145a:	80 25       	eor	r24, r0
    145c:	09 2e       	mov	r0, r25
    145e:	98 2f       	mov	r25, r24
    1460:	82 95       	swap	r24
    1462:	8f 70       	andi	r24, 0x0F	; 15
    1464:	08 26       	eor	r0, r24
    1466:	86 95       	lsr	r24
    1468:	98 27       	eor	r25, r24
    146a:	89 27       	eor	r24, r25
    146c:	88 0f       	add	r24, r24
    146e:	88 0f       	add	r24, r24
    1470:	88 0f       	add	r24, r24
    1472:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1474:	e4 17       	cp	r30, r20
    1476:	f5 07       	cpc	r31, r21
    1478:	59 f7       	brne	.-42     	; 0x1450 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    147a:	08 95       	ret

0000147c <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    147c:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    147e:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1480:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1482:	20 91 43 01 	lds	r18, 0x0143
    or tmpreg1, ddrreg
    1486:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1488:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    148a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    148c:	30 91 43 01 	lds	r19, 0x0143
    1490:	20 30       	cpi	r18, 0x00	; 0
    1492:	29 f0       	breq	.+10     	; 0x149e <message_send+0x22>
    1494:	00 00       	nop
    1496:	25 b1       	in	r18, 0x05	; 5
    1498:	23 2b       	or	r18, r19
    149a:	25 b9       	out	0x05, r18	; 5
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <message_send+0x2a>
    149e:	00 00       	nop
    14a0:	00 00       	nop
    14a2:	00 00       	nop
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <message_send+0x2a>
    14a6:	00 00       	nop
    14a8:	00 00       	nop
    14aa:	00 00       	nop
    14ac:	30 95       	com	r19
    14ae:	25 b1       	in	r18, 0x05	; 5
    14b0:	23 23       	and	r18, r19
    14b2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    14b4:	2e ea       	ldi	r18, 0xAE	; 174
    14b6:	2a 95       	dec	r18
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    14ba:	2b ee       	ldi	r18, 0xEB	; 235

000014bc <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    14bc:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    14be:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    14c0:	0a c0       	rjmp	.+20     	; 0x14d6 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14c2:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14c4:	30 91 43 01 	lds	r19, 0x0143
    com tmpreg2
    14c8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14ca:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14cc:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14ce:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14d0:	0f be       	out	0x3f, r0	; 63
    return 0
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	08 95       	ret

000014d6 <nocollision>:
nocollision:
    nop
    14d6:	00 00       	nop
    dec tmpreg1
    14d8:	2a 95       	dec	r18
    brne checkcollision
    14da:	81 f7       	brne	.-32     	; 0x14bc <checkcollision>

    ldi tmpreg1, 0x01
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14de:	30 91 43 01 	lds	r19, 0x0143
    14e2:	20 30       	cpi	r18, 0x00	; 0
    14e4:	29 f0       	breq	.+10     	; 0x14f0 <nocollision+0x1a>
    14e6:	00 00       	nop
    14e8:	25 b1       	in	r18, 0x05	; 5
    14ea:	23 2b       	or	r18, r19
    14ec:	25 b9       	out	0x05, r18	; 5
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <nocollision+0x22>
    14f0:	00 00       	nop
    14f2:	00 00       	nop
    14f4:	00 00       	nop
    14f6:	00 c0       	rjmp	.+0      	; 0x14f8 <nocollision+0x22>
    14f8:	00 00       	nop
    14fa:	00 00       	nop
    14fc:	00 00       	nop
    14fe:	30 95       	com	r19
    1500:	25 b1       	in	r18, 0x05	; 5
    1502:	23 23       	and	r18, r19
    1504:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1506:	00 00       	nop
    1508:	24 e5       	ldi	r18, 0x54	; 84
    150a:	2a 95       	dec	r18
    150c:	f1 f7       	brne	.-4      	; 0x150a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    150e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1510:	8c e0       	ldi	r24, 0x0C	; 12

00001512 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1512:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1514:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1516:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1518:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    151a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    151c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    151e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1520:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1522:	50 e0       	ldi	r21, 0x00	; 0

00001524 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1524:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1526:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1528:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    152a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    152c:	30 91 43 01 	lds	r19, 0x0143
    1530:	20 30       	cpi	r18, 0x00	; 0
    1532:	29 f0       	breq	.+10     	; 0x153e <sendbit+0x1a>
    1534:	00 00       	nop
    1536:	25 b1       	in	r18, 0x05	; 5
    1538:	23 2b       	or	r18, r19
    153a:	25 b9       	out	0x05, r18	; 5
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <sendbit+0x22>
    153e:	00 00       	nop
    1540:	00 00       	nop
    1542:	00 00       	nop
    1544:	00 c0       	rjmp	.+0      	; 0x1546 <sendbit+0x22>
    1546:	00 00       	nop
    1548:	00 00       	nop
    154a:	00 00       	nop
    154c:	30 95       	com	r19
    154e:	25 b1       	in	r18, 0x05	; 5
    1550:	23 23       	and	r18, r19
    1552:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1554:	00 00       	nop
    1556:	21 e5       	ldi	r18, 0x51	; 81
    1558:	2a 95       	dec	r18
    155a:	f1 f7       	brne	.-4      	; 0x1558 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    155c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    155e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1560:	9a 95       	dec	r25
    brne sendbit
    1562:	01 f7       	brne	.-64     	; 0x1524 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1564:	8a 95       	dec	r24
    brne sendbyte
    1566:	a9 f6       	brne	.-86     	; 0x1512 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1568:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    156a:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    156c:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    156e:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1570:	30 91 43 01 	lds	r19, 0x0143
    com tmpreg2
    1574:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1576:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1578:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    157a:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    157c:	0f be       	out	0x3f, r0	; 63
    return 1
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	08 95       	ret

00001582 <main>:
    }
}

int main()
{
    kilo_init();
    1582:	0e 94 52 01 	call	0x2a4	; 0x2a4 <kilo_init>
    kilo_message_rx = message_rx;
    1586:	84 e7       	ldi	r24, 0x74	; 116
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	90 93 08 01 	sts	0x0108, r25
    158e:	80 93 07 01 	sts	0x0107, r24
    kilo_message_tx = message_tx;
    1592:	81 e7       	ldi	r24, 0x71	; 113
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	90 93 06 01 	sts	0x0106, r25
    159a:	80 93 05 01 	sts	0x0105, r24
    kilo_start(setup, loop);
    159e:	63 ea       	ldi	r22, 0xA3	; 163
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	88 e8       	ldi	r24, 0x88	; 136
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 4e 02 	call	0x49c	; 0x49c <kilo_start>
    
    return 0;
}
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	08 95       	ret

000015b0 <__divmodhi4>:
    15b0:	97 fb       	bst	r25, 7
    15b2:	07 2e       	mov	r0, r23
    15b4:	16 f4       	brtc	.+4      	; 0x15ba <__divmodhi4+0xa>
    15b6:	00 94       	com	r0
    15b8:	07 d0       	rcall	.+14     	; 0x15c8 <__divmodhi4_neg1>
    15ba:	77 fd       	sbrc	r23, 7
    15bc:	09 d0       	rcall	.+18     	; 0x15d0 <__divmodhi4_neg2>
    15be:	0e 94 01 0b 	call	0x1602	; 0x1602 <__udivmodhi4>
    15c2:	07 fc       	sbrc	r0, 7
    15c4:	05 d0       	rcall	.+10     	; 0x15d0 <__divmodhi4_neg2>
    15c6:	3e f4       	brtc	.+14     	; 0x15d6 <__divmodhi4_exit>

000015c8 <__divmodhi4_neg1>:
    15c8:	90 95       	com	r25
    15ca:	81 95       	neg	r24
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	08 95       	ret

000015d0 <__divmodhi4_neg2>:
    15d0:	70 95       	com	r23
    15d2:	61 95       	neg	r22
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255

000015d6 <__divmodhi4_exit>:
    15d6:	08 95       	ret

000015d8 <__tablejump2__>:
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	05 90       	lpm	r0, Z+
    15de:	f4 91       	lpm	r31, Z
    15e0:	e0 2d       	mov	r30, r0
    15e2:	09 94       	ijmp

000015e4 <__umulhisi3>:
    15e4:	a2 9f       	mul	r26, r18
    15e6:	b0 01       	movw	r22, r0
    15e8:	b3 9f       	mul	r27, r19
    15ea:	c0 01       	movw	r24, r0
    15ec:	a3 9f       	mul	r26, r19
    15ee:	70 0d       	add	r23, r0
    15f0:	81 1d       	adc	r24, r1
    15f2:	11 24       	eor	r1, r1
    15f4:	91 1d       	adc	r25, r1
    15f6:	b2 9f       	mul	r27, r18
    15f8:	70 0d       	add	r23, r0
    15fa:	81 1d       	adc	r24, r1
    15fc:	11 24       	eor	r1, r1
    15fe:	91 1d       	adc	r25, r1
    1600:	08 95       	ret

00001602 <__udivmodhi4>:
    1602:	aa 1b       	sub	r26, r26
    1604:	bb 1b       	sub	r27, r27
    1606:	51 e1       	ldi	r21, 0x11	; 17
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <__udivmodhi4_ep>

0000160a <__udivmodhi4_loop>:
    160a:	aa 1f       	adc	r26, r26
    160c:	bb 1f       	adc	r27, r27
    160e:	a6 17       	cp	r26, r22
    1610:	b7 07       	cpc	r27, r23
    1612:	10 f0       	brcs	.+4      	; 0x1618 <__udivmodhi4_ep>
    1614:	a6 1b       	sub	r26, r22
    1616:	b7 0b       	sbc	r27, r23

00001618 <__udivmodhi4_ep>:
    1618:	88 1f       	adc	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	5a 95       	dec	r21
    161e:	a9 f7       	brne	.-22     	; 0x160a <__udivmodhi4_loop>
    1620:	80 95       	com	r24
    1622:	90 95       	com	r25
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	08 95       	ret

0000162a <__subsf3>:
    162a:	50 58       	subi	r21, 0x80	; 128

0000162c <__addsf3>:
    162c:	bb 27       	eor	r27, r27
    162e:	aa 27       	eor	r26, r26
    1630:	0e 94 2d 0b 	call	0x165a	; 0x165a <__addsf3x>
    1634:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_round>
    1638:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fp_pscA>
    163c:	38 f0       	brcs	.+14     	; 0x164c <__addsf3+0x20>
    163e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_pscB>
    1642:	20 f0       	brcs	.+8      	; 0x164c <__addsf3+0x20>
    1644:	39 f4       	brne	.+14     	; 0x1654 <__addsf3+0x28>
    1646:	9f 3f       	cpi	r25, 0xFF	; 255
    1648:	19 f4       	brne	.+6      	; 0x1650 <__addsf3+0x24>
    164a:	26 f4       	brtc	.+8      	; 0x1654 <__addsf3+0x28>
    164c:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_nan>
    1650:	0e f4       	brtc	.+2      	; 0x1654 <__addsf3+0x28>
    1652:	e0 95       	com	r30
    1654:	e7 fb       	bst	r30, 7
    1656:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__fp_inf>

0000165a <__addsf3x>:
    165a:	e9 2f       	mov	r30, r25
    165c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_split3>
    1660:	58 f3       	brcs	.-42     	; 0x1638 <__addsf3+0xc>
    1662:	ba 17       	cp	r27, r26
    1664:	62 07       	cpc	r22, r18
    1666:	73 07       	cpc	r23, r19
    1668:	84 07       	cpc	r24, r20
    166a:	95 07       	cpc	r25, r21
    166c:	20 f0       	brcs	.+8      	; 0x1676 <__addsf3x+0x1c>
    166e:	79 f4       	brne	.+30     	; 0x168e <__addsf3x+0x34>
    1670:	a6 f5       	brtc	.+104    	; 0x16da <__addsf3x+0x80>
    1672:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_zero>
    1676:	0e f4       	brtc	.+2      	; 0x167a <__addsf3x+0x20>
    1678:	e0 95       	com	r30
    167a:	0b 2e       	mov	r0, r27
    167c:	ba 2f       	mov	r27, r26
    167e:	a0 2d       	mov	r26, r0
    1680:	0b 01       	movw	r0, r22
    1682:	b9 01       	movw	r22, r18
    1684:	90 01       	movw	r18, r0
    1686:	0c 01       	movw	r0, r24
    1688:	ca 01       	movw	r24, r20
    168a:	a0 01       	movw	r20, r0
    168c:	11 24       	eor	r1, r1
    168e:	ff 27       	eor	r31, r31
    1690:	59 1b       	sub	r21, r25
    1692:	99 f0       	breq	.+38     	; 0x16ba <__addsf3x+0x60>
    1694:	59 3f       	cpi	r21, 0xF9	; 249
    1696:	50 f4       	brcc	.+20     	; 0x16ac <__addsf3x+0x52>
    1698:	50 3e       	cpi	r21, 0xE0	; 224
    169a:	68 f1       	brcs	.+90     	; 0x16f6 <__addsf3x+0x9c>
    169c:	1a 16       	cp	r1, r26
    169e:	f0 40       	sbci	r31, 0x00	; 0
    16a0:	a2 2f       	mov	r26, r18
    16a2:	23 2f       	mov	r18, r19
    16a4:	34 2f       	mov	r19, r20
    16a6:	44 27       	eor	r20, r20
    16a8:	58 5f       	subi	r21, 0xF8	; 248
    16aa:	f3 cf       	rjmp	.-26     	; 0x1692 <__addsf3x+0x38>
    16ac:	46 95       	lsr	r20
    16ae:	37 95       	ror	r19
    16b0:	27 95       	ror	r18
    16b2:	a7 95       	ror	r26
    16b4:	f0 40       	sbci	r31, 0x00	; 0
    16b6:	53 95       	inc	r21
    16b8:	c9 f7       	brne	.-14     	; 0x16ac <__addsf3x+0x52>
    16ba:	7e f4       	brtc	.+30     	; 0x16da <__addsf3x+0x80>
    16bc:	1f 16       	cp	r1, r31
    16be:	ba 0b       	sbc	r27, r26
    16c0:	62 0b       	sbc	r22, r18
    16c2:	73 0b       	sbc	r23, r19
    16c4:	84 0b       	sbc	r24, r20
    16c6:	ba f0       	brmi	.+46     	; 0x16f6 <__addsf3x+0x9c>
    16c8:	91 50       	subi	r25, 0x01	; 1
    16ca:	a1 f0       	breq	.+40     	; 0x16f4 <__addsf3x+0x9a>
    16cc:	ff 0f       	add	r31, r31
    16ce:	bb 1f       	adc	r27, r27
    16d0:	66 1f       	adc	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	c2 f7       	brpl	.-16     	; 0x16c8 <__addsf3x+0x6e>
    16d8:	0e c0       	rjmp	.+28     	; 0x16f6 <__addsf3x+0x9c>
    16da:	ba 0f       	add	r27, r26
    16dc:	62 1f       	adc	r22, r18
    16de:	73 1f       	adc	r23, r19
    16e0:	84 1f       	adc	r24, r20
    16e2:	48 f4       	brcc	.+18     	; 0x16f6 <__addsf3x+0x9c>
    16e4:	87 95       	ror	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	b7 95       	ror	r27
    16ec:	f7 95       	ror	r31
    16ee:	9e 3f       	cpi	r25, 0xFE	; 254
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <__addsf3x+0x9a>
    16f2:	b0 cf       	rjmp	.-160    	; 0x1654 <__addsf3+0x28>
    16f4:	93 95       	inc	r25
    16f6:	88 0f       	add	r24, r24
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <__addsf3x+0xa2>
    16fa:	99 27       	eor	r25, r25
    16fc:	ee 0f       	add	r30, r30
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	08 95       	ret

00001704 <__divsf3>:
    1704:	0e 94 96 0b 	call	0x172c	; 0x172c <__divsf3x>
    1708:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_round>
    170c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_pscB>
    1710:	58 f0       	brcs	.+22     	; 0x1728 <__divsf3+0x24>
    1712:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fp_pscA>
    1716:	40 f0       	brcs	.+16     	; 0x1728 <__divsf3+0x24>
    1718:	29 f4       	brne	.+10     	; 0x1724 <__divsf3+0x20>
    171a:	5f 3f       	cpi	r21, 0xFF	; 255
    171c:	29 f0       	breq	.+10     	; 0x1728 <__divsf3+0x24>
    171e:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__fp_inf>
    1722:	51 11       	cpse	r21, r1
    1724:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_szero>
    1728:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_nan>

0000172c <__divsf3x>:
    172c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_split3>
    1730:	68 f3       	brcs	.-38     	; 0x170c <__divsf3+0x8>

00001732 <__divsf3_pse>:
    1732:	99 23       	and	r25, r25
    1734:	b1 f3       	breq	.-20     	; 0x1722 <__divsf3+0x1e>
    1736:	55 23       	and	r21, r21
    1738:	91 f3       	breq	.-28     	; 0x171e <__divsf3+0x1a>
    173a:	95 1b       	sub	r25, r21
    173c:	55 0b       	sbc	r21, r21
    173e:	bb 27       	eor	r27, r27
    1740:	aa 27       	eor	r26, r26
    1742:	62 17       	cp	r22, r18
    1744:	73 07       	cpc	r23, r19
    1746:	84 07       	cpc	r24, r20
    1748:	38 f0       	brcs	.+14     	; 0x1758 <__divsf3_pse+0x26>
    174a:	9f 5f       	subi	r25, 0xFF	; 255
    174c:	5f 4f       	sbci	r21, 0xFF	; 255
    174e:	22 0f       	add	r18, r18
    1750:	33 1f       	adc	r19, r19
    1752:	44 1f       	adc	r20, r20
    1754:	aa 1f       	adc	r26, r26
    1756:	a9 f3       	breq	.-22     	; 0x1742 <__divsf3_pse+0x10>
    1758:	35 d0       	rcall	.+106    	; 0x17c4 <__divsf3_pse+0x92>
    175a:	0e 2e       	mov	r0, r30
    175c:	3a f0       	brmi	.+14     	; 0x176c <__divsf3_pse+0x3a>
    175e:	e0 e8       	ldi	r30, 0x80	; 128
    1760:	32 d0       	rcall	.+100    	; 0x17c6 <__divsf3_pse+0x94>
    1762:	91 50       	subi	r25, 0x01	; 1
    1764:	50 40       	sbci	r21, 0x00	; 0
    1766:	e6 95       	lsr	r30
    1768:	00 1c       	adc	r0, r0
    176a:	ca f7       	brpl	.-14     	; 0x175e <__divsf3_pse+0x2c>
    176c:	2b d0       	rcall	.+86     	; 0x17c4 <__divsf3_pse+0x92>
    176e:	fe 2f       	mov	r31, r30
    1770:	29 d0       	rcall	.+82     	; 0x17c4 <__divsf3_pse+0x92>
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	bb 1f       	adc	r27, r27
    177a:	26 17       	cp	r18, r22
    177c:	37 07       	cpc	r19, r23
    177e:	48 07       	cpc	r20, r24
    1780:	ab 07       	cpc	r26, r27
    1782:	b0 e8       	ldi	r27, 0x80	; 128
    1784:	09 f0       	breq	.+2      	; 0x1788 <__divsf3_pse+0x56>
    1786:	bb 0b       	sbc	r27, r27
    1788:	80 2d       	mov	r24, r0
    178a:	bf 01       	movw	r22, r30
    178c:	ff 27       	eor	r31, r31
    178e:	93 58       	subi	r25, 0x83	; 131
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	3a f0       	brmi	.+14     	; 0x17a2 <__divsf3_pse+0x70>
    1794:	9e 3f       	cpi	r25, 0xFE	; 254
    1796:	51 05       	cpc	r21, r1
    1798:	78 f0       	brcs	.+30     	; 0x17b8 <__divsf3_pse+0x86>
    179a:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__fp_inf>
    179e:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_szero>
    17a2:	5f 3f       	cpi	r21, 0xFF	; 255
    17a4:	e4 f3       	brlt	.-8      	; 0x179e <__divsf3_pse+0x6c>
    17a6:	98 3e       	cpi	r25, 0xE8	; 232
    17a8:	d4 f3       	brlt	.-12     	; 0x179e <__divsf3_pse+0x6c>
    17aa:	86 95       	lsr	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b7 95       	ror	r27
    17b2:	f7 95       	ror	r31
    17b4:	9f 5f       	subi	r25, 0xFF	; 255
    17b6:	c9 f7       	brne	.-14     	; 0x17aa <__divsf3_pse+0x78>
    17b8:	88 0f       	add	r24, r24
    17ba:	91 1d       	adc	r25, r1
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	97 f9       	bld	r25, 7
    17c2:	08 95       	ret
    17c4:	e1 e0       	ldi	r30, 0x01	; 1
    17c6:	66 0f       	add	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	88 1f       	adc	r24, r24
    17cc:	bb 1f       	adc	r27, r27
    17ce:	62 17       	cp	r22, r18
    17d0:	73 07       	cpc	r23, r19
    17d2:	84 07       	cpc	r24, r20
    17d4:	ba 07       	cpc	r27, r26
    17d6:	20 f0       	brcs	.+8      	; 0x17e0 <__divsf3_pse+0xae>
    17d8:	62 1b       	sub	r22, r18
    17da:	73 0b       	sbc	r23, r19
    17dc:	84 0b       	sbc	r24, r20
    17de:	ba 0b       	sbc	r27, r26
    17e0:	ee 1f       	adc	r30, r30
    17e2:	88 f7       	brcc	.-30     	; 0x17c6 <__divsf3_pse+0x94>
    17e4:	e0 95       	com	r30
    17e6:	08 95       	ret

000017e8 <__fixsfsi>:
    17e8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fixunssfsi>
    17ec:	68 94       	set
    17ee:	b1 11       	cpse	r27, r1
    17f0:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_szero>
    17f4:	08 95       	ret

000017f6 <__fixunssfsi>:
    17f6:	0e 94 97 0c 	call	0x192e	; 0x192e <__fp_splitA>
    17fa:	88 f0       	brcs	.+34     	; 0x181e <__fixunssfsi+0x28>
    17fc:	9f 57       	subi	r25, 0x7F	; 127
    17fe:	98 f0       	brcs	.+38     	; 0x1826 <__fixunssfsi+0x30>
    1800:	b9 2f       	mov	r27, r25
    1802:	99 27       	eor	r25, r25
    1804:	b7 51       	subi	r27, 0x17	; 23
    1806:	b0 f0       	brcs	.+44     	; 0x1834 <__fixunssfsi+0x3e>
    1808:	e1 f0       	breq	.+56     	; 0x1842 <__fixunssfsi+0x4c>
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	88 1f       	adc	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	1a f0       	brmi	.+6      	; 0x181a <__fixunssfsi+0x24>
    1814:	ba 95       	dec	r27
    1816:	c9 f7       	brne	.-14     	; 0x180a <__fixunssfsi+0x14>
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <__fixunssfsi+0x4c>
    181a:	b1 30       	cpi	r27, 0x01	; 1
    181c:	91 f0       	breq	.+36     	; 0x1842 <__fixunssfsi+0x4c>
    181e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__fp_zero>
    1822:	b1 e0       	ldi	r27, 0x01	; 1
    1824:	08 95       	ret
    1826:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_zero>
    182a:	67 2f       	mov	r22, r23
    182c:	78 2f       	mov	r23, r24
    182e:	88 27       	eor	r24, r24
    1830:	b8 5f       	subi	r27, 0xF8	; 248
    1832:	39 f0       	breq	.+14     	; 0x1842 <__fixunssfsi+0x4c>
    1834:	b9 3f       	cpi	r27, 0xF9	; 249
    1836:	cc f3       	brlt	.-14     	; 0x182a <__fixunssfsi+0x34>
    1838:	86 95       	lsr	r24
    183a:	77 95       	ror	r23
    183c:	67 95       	ror	r22
    183e:	b3 95       	inc	r27
    1840:	d9 f7       	brne	.-10     	; 0x1838 <__fixunssfsi+0x42>
    1842:	3e f4       	brtc	.+14     	; 0x1852 <__fixunssfsi+0x5c>
    1844:	90 95       	com	r25
    1846:	80 95       	com	r24
    1848:	70 95       	com	r23
    184a:	61 95       	neg	r22
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	8f 4f       	sbci	r24, 0xFF	; 255
    1850:	9f 4f       	sbci	r25, 0xFF	; 255
    1852:	08 95       	ret

00001854 <__floatunsisf>:
    1854:	e8 94       	clt
    1856:	09 c0       	rjmp	.+18     	; 0x186a <__floatsisf+0x12>

00001858 <__floatsisf>:
    1858:	97 fb       	bst	r25, 7
    185a:	3e f4       	brtc	.+14     	; 0x186a <__floatsisf+0x12>
    185c:	90 95       	com	r25
    185e:	80 95       	com	r24
    1860:	70 95       	com	r23
    1862:	61 95       	neg	r22
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	8f 4f       	sbci	r24, 0xFF	; 255
    1868:	9f 4f       	sbci	r25, 0xFF	; 255
    186a:	99 23       	and	r25, r25
    186c:	a9 f0       	breq	.+42     	; 0x1898 <__floatsisf+0x40>
    186e:	f9 2f       	mov	r31, r25
    1870:	96 e9       	ldi	r25, 0x96	; 150
    1872:	bb 27       	eor	r27, r27
    1874:	93 95       	inc	r25
    1876:	f6 95       	lsr	r31
    1878:	87 95       	ror	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	b7 95       	ror	r27
    1880:	f1 11       	cpse	r31, r1
    1882:	f8 cf       	rjmp	.-16     	; 0x1874 <__floatsisf+0x1c>
    1884:	fa f4       	brpl	.+62     	; 0x18c4 <__floatsisf+0x6c>
    1886:	bb 0f       	add	r27, r27
    1888:	11 f4       	brne	.+4      	; 0x188e <__floatsisf+0x36>
    188a:	60 ff       	sbrs	r22, 0
    188c:	1b c0       	rjmp	.+54     	; 0x18c4 <__floatsisf+0x6c>
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	16 c0       	rjmp	.+44     	; 0x18c4 <__floatsisf+0x6c>
    1898:	88 23       	and	r24, r24
    189a:	11 f0       	breq	.+4      	; 0x18a0 <__floatsisf+0x48>
    189c:	96 e9       	ldi	r25, 0x96	; 150
    189e:	11 c0       	rjmp	.+34     	; 0x18c2 <__floatsisf+0x6a>
    18a0:	77 23       	and	r23, r23
    18a2:	21 f0       	breq	.+8      	; 0x18ac <__floatsisf+0x54>
    18a4:	9e e8       	ldi	r25, 0x8E	; 142
    18a6:	87 2f       	mov	r24, r23
    18a8:	76 2f       	mov	r23, r22
    18aa:	05 c0       	rjmp	.+10     	; 0x18b6 <__floatsisf+0x5e>
    18ac:	66 23       	and	r22, r22
    18ae:	71 f0       	breq	.+28     	; 0x18cc <__floatsisf+0x74>
    18b0:	96 e8       	ldi	r25, 0x86	; 134
    18b2:	86 2f       	mov	r24, r22
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	2a f0       	brmi	.+10     	; 0x18c4 <__floatsisf+0x6c>
    18ba:	9a 95       	dec	r25
    18bc:	66 0f       	add	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	88 1f       	adc	r24, r24
    18c2:	da f7       	brpl	.-10     	; 0x18ba <__floatsisf+0x62>
    18c4:	88 0f       	add	r24, r24
    18c6:	96 95       	lsr	r25
    18c8:	87 95       	ror	r24
    18ca:	97 f9       	bld	r25, 7
    18cc:	08 95       	ret

000018ce <__fp_inf>:
    18ce:	97 f9       	bld	r25, 7
    18d0:	9f 67       	ori	r25, 0x7F	; 127
    18d2:	80 e8       	ldi	r24, 0x80	; 128
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	08 95       	ret

000018da <__fp_nan>:
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	80 ec       	ldi	r24, 0xC0	; 192
    18de:	08 95       	ret

000018e0 <__fp_pscA>:
    18e0:	00 24       	eor	r0, r0
    18e2:	0a 94       	dec	r0
    18e4:	16 16       	cp	r1, r22
    18e6:	17 06       	cpc	r1, r23
    18e8:	18 06       	cpc	r1, r24
    18ea:	09 06       	cpc	r0, r25
    18ec:	08 95       	ret

000018ee <__fp_pscB>:
    18ee:	00 24       	eor	r0, r0
    18f0:	0a 94       	dec	r0
    18f2:	12 16       	cp	r1, r18
    18f4:	13 06       	cpc	r1, r19
    18f6:	14 06       	cpc	r1, r20
    18f8:	05 06       	cpc	r0, r21
    18fa:	08 95       	ret

000018fc <__fp_round>:
    18fc:	09 2e       	mov	r0, r25
    18fe:	03 94       	inc	r0
    1900:	00 0c       	add	r0, r0
    1902:	11 f4       	brne	.+4      	; 0x1908 <__fp_round+0xc>
    1904:	88 23       	and	r24, r24
    1906:	52 f0       	brmi	.+20     	; 0x191c <__fp_round+0x20>
    1908:	bb 0f       	add	r27, r27
    190a:	40 f4       	brcc	.+16     	; 0x191c <__fp_round+0x20>
    190c:	bf 2b       	or	r27, r31
    190e:	11 f4       	brne	.+4      	; 0x1914 <__fp_round+0x18>
    1910:	60 ff       	sbrs	r22, 0
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__fp_round+0x20>
    1914:	6f 5f       	subi	r22, 0xFF	; 255
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	8f 4f       	sbci	r24, 0xFF	; 255
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	08 95       	ret

0000191e <__fp_split3>:
    191e:	57 fd       	sbrc	r21, 7
    1920:	90 58       	subi	r25, 0x80	; 128
    1922:	44 0f       	add	r20, r20
    1924:	55 1f       	adc	r21, r21
    1926:	59 f0       	breq	.+22     	; 0x193e <__fp_splitA+0x10>
    1928:	5f 3f       	cpi	r21, 0xFF	; 255
    192a:	71 f0       	breq	.+28     	; 0x1948 <__fp_splitA+0x1a>
    192c:	47 95       	ror	r20

0000192e <__fp_splitA>:
    192e:	88 0f       	add	r24, r24
    1930:	97 fb       	bst	r25, 7
    1932:	99 1f       	adc	r25, r25
    1934:	61 f0       	breq	.+24     	; 0x194e <__fp_splitA+0x20>
    1936:	9f 3f       	cpi	r25, 0xFF	; 255
    1938:	79 f0       	breq	.+30     	; 0x1958 <__fp_splitA+0x2a>
    193a:	87 95       	ror	r24
    193c:	08 95       	ret
    193e:	12 16       	cp	r1, r18
    1940:	13 06       	cpc	r1, r19
    1942:	14 06       	cpc	r1, r20
    1944:	55 1f       	adc	r21, r21
    1946:	f2 cf       	rjmp	.-28     	; 0x192c <__fp_split3+0xe>
    1948:	46 95       	lsr	r20
    194a:	f1 df       	rcall	.-30     	; 0x192e <__fp_splitA>
    194c:	08 c0       	rjmp	.+16     	; 0x195e <__fp_splitA+0x30>
    194e:	16 16       	cp	r1, r22
    1950:	17 06       	cpc	r1, r23
    1952:	18 06       	cpc	r1, r24
    1954:	99 1f       	adc	r25, r25
    1956:	f1 cf       	rjmp	.-30     	; 0x193a <__fp_splitA+0xc>
    1958:	86 95       	lsr	r24
    195a:	71 05       	cpc	r23, r1
    195c:	61 05       	cpc	r22, r1
    195e:	08 94       	sec
    1960:	08 95       	ret

00001962 <__fp_zero>:
    1962:	e8 94       	clt

00001964 <__fp_szero>:
    1964:	bb 27       	eor	r27, r27
    1966:	66 27       	eor	r22, r22
    1968:	77 27       	eor	r23, r23
    196a:	cb 01       	movw	r24, r22
    196c:	97 f9       	bld	r25, 7
    196e:	08 95       	ret

00001970 <__mulsf3>:
    1970:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3x>
    1974:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_round>
    1978:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fp_pscA>
    197c:	38 f0       	brcs	.+14     	; 0x198c <__mulsf3+0x1c>
    197e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_pscB>
    1982:	20 f0       	brcs	.+8      	; 0x198c <__mulsf3+0x1c>
    1984:	95 23       	and	r25, r21
    1986:	11 f0       	breq	.+4      	; 0x198c <__mulsf3+0x1c>
    1988:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__fp_inf>
    198c:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_nan>
    1990:	11 24       	eor	r1, r1
    1992:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_szero>

00001996 <__mulsf3x>:
    1996:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_split3>
    199a:	70 f3       	brcs	.-36     	; 0x1978 <__mulsf3+0x8>

0000199c <__mulsf3_pse>:
    199c:	95 9f       	mul	r25, r21
    199e:	c1 f3       	breq	.-16     	; 0x1990 <__mulsf3+0x20>
    19a0:	95 0f       	add	r25, r21
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	55 1f       	adc	r21, r21
    19a6:	62 9f       	mul	r22, r18
    19a8:	f0 01       	movw	r30, r0
    19aa:	72 9f       	mul	r23, r18
    19ac:	bb 27       	eor	r27, r27
    19ae:	f0 0d       	add	r31, r0
    19b0:	b1 1d       	adc	r27, r1
    19b2:	63 9f       	mul	r22, r19
    19b4:	aa 27       	eor	r26, r26
    19b6:	f0 0d       	add	r31, r0
    19b8:	b1 1d       	adc	r27, r1
    19ba:	aa 1f       	adc	r26, r26
    19bc:	64 9f       	mul	r22, r20
    19be:	66 27       	eor	r22, r22
    19c0:	b0 0d       	add	r27, r0
    19c2:	a1 1d       	adc	r26, r1
    19c4:	66 1f       	adc	r22, r22
    19c6:	82 9f       	mul	r24, r18
    19c8:	22 27       	eor	r18, r18
    19ca:	b0 0d       	add	r27, r0
    19cc:	a1 1d       	adc	r26, r1
    19ce:	62 1f       	adc	r22, r18
    19d0:	73 9f       	mul	r23, r19
    19d2:	b0 0d       	add	r27, r0
    19d4:	a1 1d       	adc	r26, r1
    19d6:	62 1f       	adc	r22, r18
    19d8:	83 9f       	mul	r24, r19
    19da:	a0 0d       	add	r26, r0
    19dc:	61 1d       	adc	r22, r1
    19de:	22 1f       	adc	r18, r18
    19e0:	74 9f       	mul	r23, r20
    19e2:	33 27       	eor	r19, r19
    19e4:	a0 0d       	add	r26, r0
    19e6:	61 1d       	adc	r22, r1
    19e8:	23 1f       	adc	r18, r19
    19ea:	84 9f       	mul	r24, r20
    19ec:	60 0d       	add	r22, r0
    19ee:	21 1d       	adc	r18, r1
    19f0:	82 2f       	mov	r24, r18
    19f2:	76 2f       	mov	r23, r22
    19f4:	6a 2f       	mov	r22, r26
    19f6:	11 24       	eor	r1, r1
    19f8:	9f 57       	subi	r25, 0x7F	; 127
    19fa:	50 40       	sbci	r21, 0x00	; 0
    19fc:	9a f0       	brmi	.+38     	; 0x1a24 <__mulsf3_pse+0x88>
    19fe:	f1 f0       	breq	.+60     	; 0x1a3c <__mulsf3_pse+0xa0>
    1a00:	88 23       	and	r24, r24
    1a02:	4a f0       	brmi	.+18     	; 0x1a16 <__mulsf3_pse+0x7a>
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	66 1f       	adc	r22, r22
    1a0c:	77 1f       	adc	r23, r23
    1a0e:	88 1f       	adc	r24, r24
    1a10:	91 50       	subi	r25, 0x01	; 1
    1a12:	50 40       	sbci	r21, 0x00	; 0
    1a14:	a9 f7       	brne	.-22     	; 0x1a00 <__mulsf3_pse+0x64>
    1a16:	9e 3f       	cpi	r25, 0xFE	; 254
    1a18:	51 05       	cpc	r21, r1
    1a1a:	80 f0       	brcs	.+32     	; 0x1a3c <__mulsf3_pse+0xa0>
    1a1c:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__fp_inf>
    1a20:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_szero>
    1a24:	5f 3f       	cpi	r21, 0xFF	; 255
    1a26:	e4 f3       	brlt	.-8      	; 0x1a20 <__mulsf3_pse+0x84>
    1a28:	98 3e       	cpi	r25, 0xE8	; 232
    1a2a:	d4 f3       	brlt	.-12     	; 0x1a20 <__mulsf3_pse+0x84>
    1a2c:	86 95       	lsr	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	b7 95       	ror	r27
    1a34:	f7 95       	ror	r31
    1a36:	e7 95       	ror	r30
    1a38:	9f 5f       	subi	r25, 0xFF	; 255
    1a3a:	c1 f7       	brne	.-16     	; 0x1a2c <__mulsf3_pse+0x90>
    1a3c:	fe 2b       	or	r31, r30
    1a3e:	88 0f       	add	r24, r24
    1a40:	91 1d       	adc	r25, r1
    1a42:	96 95       	lsr	r25
    1a44:	87 95       	ror	r24
    1a46:	97 f9       	bld	r25, 7
    1a48:	08 95       	ret

00001a4a <do_rand>:
    1a4a:	8f 92       	push	r8
    1a4c:	9f 92       	push	r9
    1a4e:	af 92       	push	r10
    1a50:	bf 92       	push	r11
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	ec 01       	movw	r28, r24
    1a60:	68 81       	ld	r22, Y
    1a62:	79 81       	ldd	r23, Y+1	; 0x01
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	61 15       	cp	r22, r1
    1a6a:	71 05       	cpc	r23, r1
    1a6c:	81 05       	cpc	r24, r1
    1a6e:	91 05       	cpc	r25, r1
    1a70:	21 f4       	brne	.+8      	; 0x1a7a <do_rand+0x30>
    1a72:	64 e2       	ldi	r22, 0x24	; 36
    1a74:	79 ed       	ldi	r23, 0xD9	; 217
    1a76:	8b e5       	ldi	r24, 0x5B	; 91
    1a78:	97 e0       	ldi	r25, 0x07	; 7
    1a7a:	2d e1       	ldi	r18, 0x1D	; 29
    1a7c:	33 ef       	ldi	r19, 0xF3	; 243
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__divmodsi4>
    1a86:	49 01       	movw	r8, r18
    1a88:	5a 01       	movw	r10, r20
    1a8a:	9b 01       	movw	r18, r22
    1a8c:	ac 01       	movw	r20, r24
    1a8e:	a7 ea       	ldi	r26, 0xA7	; 167
    1a90:	b1 e4       	ldi	r27, 0x41	; 65
    1a92:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__muluhisi3>
    1a96:	6b 01       	movw	r12, r22
    1a98:	7c 01       	movw	r14, r24
    1a9a:	ac ee       	ldi	r26, 0xEC	; 236
    1a9c:	b4 ef       	ldi	r27, 0xF4	; 244
    1a9e:	a5 01       	movw	r20, r10
    1aa0:	94 01       	movw	r18, r8
    1aa2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__mulohisi3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8c 0d       	add	r24, r12
    1aac:	9d 1d       	adc	r25, r13
    1aae:	ae 1d       	adc	r26, r14
    1ab0:	bf 1d       	adc	r27, r15
    1ab2:	b7 ff       	sbrs	r27, 7
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <do_rand+0x72>
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	a1 09       	sbc	r26, r1
    1aba:	b0 48       	sbci	r27, 0x80	; 128
    1abc:	88 83       	st	Y, r24
    1abe:	99 83       	std	Y+1, r25	; 0x01
    1ac0:	aa 83       	std	Y+2, r26	; 0x02
    1ac2:	bb 83       	std	Y+3, r27	; 0x03
    1ac4:	9f 77       	andi	r25, 0x7F	; 127
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	bf 90       	pop	r11
    1ad4:	af 90       	pop	r10
    1ad6:	9f 90       	pop	r9
    1ad8:	8f 90       	pop	r8
    1ada:	08 95       	ret

00001adc <rand_r>:
    1adc:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <do_rand>
    1ae0:	08 95       	ret

00001ae2 <rand>:
    1ae2:	89 e0       	ldi	r24, 0x09	; 9
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <do_rand>
    1aea:	08 95       	ret

00001aec <srand>:
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	80 93 09 01 	sts	0x0109, r24
    1af4:	90 93 0a 01 	sts	0x010A, r25
    1af8:	a0 93 0b 01 	sts	0x010B, r26
    1afc:	b0 93 0c 01 	sts	0x010C, r27
    1b00:	08 95       	ret

00001b02 <eeprom_read_byte>:
    1b02:	f9 99       	sbic	0x1f, 1	; 31
    1b04:	fe cf       	rjmp	.-4      	; 0x1b02 <eeprom_read_byte>
    1b06:	92 bd       	out	0x22, r25	; 34
    1b08:	81 bd       	out	0x21, r24	; 33
    1b0a:	f8 9a       	sbi	0x1f, 0	; 31
    1b0c:	99 27       	eor	r25, r25
    1b0e:	80 b5       	in	r24, 0x20	; 32
    1b10:	08 95       	ret

00001b12 <eeprom_write_byte>:
    1b12:	26 2f       	mov	r18, r22

00001b14 <eeprom_write_r18>:
    1b14:	f9 99       	sbic	0x1f, 1	; 31
    1b16:	fe cf       	rjmp	.-4      	; 0x1b14 <eeprom_write_r18>
    1b18:	1f ba       	out	0x1f, r1	; 31
    1b1a:	92 bd       	out	0x22, r25	; 34
    1b1c:	81 bd       	out	0x21, r24	; 33
    1b1e:	20 bd       	out	0x20, r18	; 32
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	fa 9a       	sbi	0x1f, 2	; 31
    1b26:	f9 9a       	sbi	0x1f, 1	; 31
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	08 95       	ret

00001b2e <__divmodsi4>:
    1b2e:	05 2e       	mov	r0, r21
    1b30:	97 fb       	bst	r25, 7
    1b32:	1e f4       	brtc	.+6      	; 0x1b3a <__divmodsi4+0xc>
    1b34:	00 94       	com	r0
    1b36:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__negsi2>
    1b3a:	57 fd       	sbrc	r21, 7
    1b3c:	07 d0       	rcall	.+14     	; 0x1b4c <__divmodsi4_neg2>
    1b3e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__udivmodsi4>
    1b42:	07 fc       	sbrc	r0, 7
    1b44:	03 d0       	rcall	.+6      	; 0x1b4c <__divmodsi4_neg2>
    1b46:	4e f4       	brtc	.+18     	; 0x1b5a <__divmodsi4_exit>
    1b48:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__negsi2>

00001b4c <__divmodsi4_neg2>:
    1b4c:	50 95       	com	r21
    1b4e:	40 95       	com	r20
    1b50:	30 95       	com	r19
    1b52:	21 95       	neg	r18
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	4f 4f       	sbci	r20, 0xFF	; 255
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255

00001b5a <__divmodsi4_exit>:
    1b5a:	08 95       	ret

00001b5c <__negsi2>:
    1b5c:	90 95       	com	r25
    1b5e:	80 95       	com	r24
    1b60:	70 95       	com	r23
    1b62:	61 95       	neg	r22
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	8f 4f       	sbci	r24, 0xFF	; 255
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	08 95       	ret

00001b6c <__muluhisi3>:
    1b6c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__umulhisi3>
    1b70:	a5 9f       	mul	r26, r21
    1b72:	90 0d       	add	r25, r0
    1b74:	b4 9f       	mul	r27, r20
    1b76:	90 0d       	add	r25, r0
    1b78:	a4 9f       	mul	r26, r20
    1b7a:	80 0d       	add	r24, r0
    1b7c:	91 1d       	adc	r25, r1
    1b7e:	11 24       	eor	r1, r1
    1b80:	08 95       	ret

00001b82 <__mulshisi3>:
    1b82:	b7 ff       	sbrs	r27, 7
    1b84:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__muluhisi3>

00001b88 <__mulohisi3>:
    1b88:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__muluhisi3>
    1b8c:	82 1b       	sub	r24, r18
    1b8e:	93 0b       	sbc	r25, r19
    1b90:	08 95       	ret

00001b92 <__udivmodsi4>:
    1b92:	a1 e2       	ldi	r26, 0x21	; 33
    1b94:	1a 2e       	mov	r1, r26
    1b96:	aa 1b       	sub	r26, r26
    1b98:	bb 1b       	sub	r27, r27
    1b9a:	fd 01       	movw	r30, r26
    1b9c:	0d c0       	rjmp	.+26     	; 0x1bb8 <__udivmodsi4_ep>

00001b9e <__udivmodsi4_loop>:
    1b9e:	aa 1f       	adc	r26, r26
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	ee 1f       	adc	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	a2 17       	cp	r26, r18
    1ba8:	b3 07       	cpc	r27, r19
    1baa:	e4 07       	cpc	r30, r20
    1bac:	f5 07       	cpc	r31, r21
    1bae:	20 f0       	brcs	.+8      	; 0x1bb8 <__udivmodsi4_ep>
    1bb0:	a2 1b       	sub	r26, r18
    1bb2:	b3 0b       	sbc	r27, r19
    1bb4:	e4 0b       	sbc	r30, r20
    1bb6:	f5 0b       	sbc	r31, r21

00001bb8 <__udivmodsi4_ep>:
    1bb8:	66 1f       	adc	r22, r22
    1bba:	77 1f       	adc	r23, r23
    1bbc:	88 1f       	adc	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	1a 94       	dec	r1
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <__udivmodsi4_loop>
    1bc4:	60 95       	com	r22
    1bc6:	70 95       	com	r23
    1bc8:	80 95       	com	r24
    1bca:	90 95       	com	r25
    1bcc:	9b 01       	movw	r18, r22
    1bce:	ac 01       	movw	r20, r24
    1bd0:	bd 01       	movw	r22, r26
    1bd2:	cf 01       	movw	r24, r30
    1bd4:	08 95       	ret

00001bd6 <_exit>:
    1bd6:	f8 94       	cli

00001bd8 <__stop_program>:
    1bd8:	ff cf       	rjmp	.-2      	; 0x1bd8 <__stop_program>
