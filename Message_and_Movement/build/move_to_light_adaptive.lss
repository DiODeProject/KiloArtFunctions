
build/move_to_light_adaptive.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	f9 02       	muls	r31, r25
      6a:	75 03       	mulsu	r23, r21
      6c:	cd 02       	muls	r28, r29
      6e:	c4 02       	muls	r28, r20
      70:	ca 02       	muls	r28, r26
      72:	57 03       	mulsu	r21, r23
      74:	4c 03       	fmul	r20, r20
      76:	d7 09       	sbc	r29, r7
      78:	b4 08       	sbc	r11, r4
      7a:	b4 08       	sbc	r11, r4
      7c:	d4 09       	sbc	r29, r4
      7e:	e0 09       	sbc	r30, r0
      80:	d0 09       	sbc	r29, r0
      82:	e7 09       	sbc	r30, r7
      84:	e3 09       	sbc	r30, r3
      86:	eb 09       	sbc	r30, r11
      88:	a3 09       	sbc	r26, r3
      8a:	75 09       	sbc	r23, r5

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e1       	ldi	r30, 0x14	; 20
      b8:	f2 e2       	ldi	r31, 0x22	; 34
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 32       	cpi	r26, 0x2E	; 46
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e2       	ldi	r26, 0x2E	; 46
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 3a       	cpi	r26, 0xA0	; 160
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 1d 0b 	call	0x163a	; 0x163a <main>
      da:	0c 94 08 11 	jmp	0x2210	; 0x2210 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
      f4:	80 91 32 01 	lds	r24, 0x0132
      f8:	90 91 33 01 	lds	r25, 0x0133
      fc:	02 97       	sbiw	r24, 0x02	; 2
      fe:	69 f0       	breq	.+26     	; 0x11a <setup+0x26>
    {
        current_motion = new_motion;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 33 01 	sts	0x0133, r25
     108:	80 93 32 01 	sts	0x0132, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     10c:	0e 94 12 04 	call	0x824	; 0x824 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	80 91 99 01 	lds	r24, 0x0199
     116:	0e 94 0d 04 	call	0x81a	; 0x81a <set_motors>

void setup()
{
    // This ensures that the robot starts moving.
    set_motion(LEFT);
    last_update = kilo_ticks;
     11a:	80 91 5f 01 	lds	r24, 0x015F
     11e:	90 91 60 01 	lds	r25, 0x0160
     122:	a0 91 61 01 	lds	r26, 0x0161
     126:	b0 91 62 01 	lds	r27, 0x0162
     12a:	80 93 38 01 	sts	0x0138, r24
     12e:	90 93 39 01 	sts	0x0139, r25
     132:	a0 93 3a 01 	sts	0x013A, r26
     136:	b0 93 3b 01 	sts	0x013B, r27
     13a:	08 95       	ret

0000013c <loop>:
}

void loop()
{
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
    printf("light intensity: %d\n", get_ambientlight());
     144:	0e 94 22 04 	call	0x844	; 0x844 <get_ambientlight>
     148:	9f 93       	push	r25
     14a:	8f 93       	push	r24
     14c:	89 e1       	ldi	r24, 0x19	; 25
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	9f 93       	push	r25
     152:	8f 93       	push	r24
     154:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <printf>
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	0f 90       	pop	r0
void sample_light()
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
     160:	c0 e0       	ldi	r28, 0x00	; 0
     162:	d0 e0       	ldi	r29, 0x00	; 0
    int sum = 0;
     164:	00 e0       	ldi	r16, 0x00	; 0
     166:	10 e0       	ldi	r17, 0x00	; 0


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     168:	0e 94 22 04 	call	0x844	; 0x844 <get_ambientlight>
        
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
     16c:	8f 3f       	cpi	r24, 0xFF	; 255
     16e:	2f ef       	ldi	r18, 0xFF	; 255
     170:	92 07       	cpc	r25, r18
     172:	19 f0       	breq	.+6      	; 0x17a <loop+0x3e>
        {
            sum = sum + sample;
     174:	08 0f       	add	r16, r24
     176:	19 1f       	adc	r17, r25
            number_of_samples = number_of_samples + 1;
     178:	21 96       	adiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int sum = 0;


    while (number_of_samples < 300)
     17a:	cc 32       	cpi	r28, 0x2C	; 44
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	d8 07       	cpc	r29, r24
     180:	9c f3       	brlt	.-26     	; 0x168 <loop+0x2c>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    current_light = sum / number_of_samples;
     182:	c8 01       	movw	r24, r16
     184:	be 01       	movw	r22, r28
     186:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divmodhi4>
     18a:	70 93 31 01 	sts	0x0131, r23
     18e:	60 93 30 01 	sts	0x0130, r22

void loop()
{
    printf("light intensity: %d\n", get_ambientlight());
    sample_light();
    if (kilo_ticks > (last_update + 32))
     192:	00 91 5f 01 	lds	r16, 0x015F
     196:	10 91 60 01 	lds	r17, 0x0160
     19a:	20 91 61 01 	lds	r18, 0x0161
     19e:	30 91 62 01 	lds	r19, 0x0162
     1a2:	80 91 38 01 	lds	r24, 0x0138
     1a6:	90 91 39 01 	lds	r25, 0x0139
     1aa:	a0 91 3a 01 	lds	r26, 0x013A
     1ae:	b0 91 3b 01 	lds	r27, 0x013B
     1b2:	80 96       	adiw	r24, 0x20	; 32
     1b4:	a1 1d       	adc	r26, r1
     1b6:	b1 1d       	adc	r27, r1
     1b8:	80 17       	cp	r24, r16
     1ba:	91 07       	cpc	r25, r17
     1bc:	a2 07       	cpc	r26, r18
     1be:	b3 07       	cpc	r27, r19
     1c0:	10 f5       	brcc	.+68     	; 0x206 <loop+0xca>
    {
        last_update = kilo_ticks;
     1c2:	80 91 5f 01 	lds	r24, 0x015F
     1c6:	90 91 60 01 	lds	r25, 0x0160
     1ca:	a0 91 61 01 	lds	r26, 0x0161
     1ce:	b0 91 62 01 	lds	r27, 0x0162
     1d2:	80 93 38 01 	sts	0x0138, r24
     1d6:	90 93 39 01 	sts	0x0139, r25
     1da:	a0 93 3a 01 	sts	0x013A, r26
     1de:	b0 93 3b 01 	sts	0x013B, r27
        if (current_light < (previous_light-DIFF_THRE))
     1e2:	80 91 2e 01 	lds	r24, 0x012E
     1e6:	90 91 2f 01 	lds	r25, 0x012F
     1ea:	9c 01       	movw	r18, r24
     1ec:	2c 53       	subi	r18, 0x3C	; 60
     1ee:	31 09       	sbc	r19, r1
     1f0:	62 17       	cp	r22, r18
     1f2:	73 07       	cpc	r23, r19
     1f4:	6c f0       	brlt	.+26     	; 0x210 <loop+0xd4>
        {
            set_motion(RIGHT);
        }
        else if (current_light > (previous_light+DIFF_THRE))
     1f6:	cc 96       	adiw	r24, 0x3c	; 60
     1f8:	86 17       	cp	r24, r22
     1fa:	97 07       	cpc	r25, r23
     1fc:	0c f1       	brlt	.+66     	; 0x240 <loop+0x104>
        {
            set_motion(LEFT);
        }
        previous_light = current_light;
     1fe:	70 93 2f 01 	sts	0x012F, r23
     202:	60 93 2e 01 	sts	0x012E, r22
    }
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	08 95       	ret

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     210:	80 91 32 01 	lds	r24, 0x0132
     214:	90 91 33 01 	lds	r25, 0x0133
     218:	03 97       	sbiw	r24, 0x03	; 3
     21a:	89 f3       	breq	.-30     	; 0x1fe <loop+0xc2>
    {
        current_motion = new_motion;
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	90 93 33 01 	sts	0x0133, r25
     224:	80 93 32 01 	sts	0x0132, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     228:	0e 94 12 04 	call	0x824	; 0x824 <spinup_motors>
            set_motors(0, kilo_turn_right);
     22c:	60 91 85 01 	lds	r22, 0x0185
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 0d 04 	call	0x81a	; 0x81a <set_motors>
     236:	60 91 30 01 	lds	r22, 0x0130
     23a:	70 91 31 01 	lds	r23, 0x0131
     23e:	df cf       	rjmp	.-66     	; 0x1fe <loop+0xc2>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     240:	80 91 32 01 	lds	r24, 0x0132
     244:	90 91 33 01 	lds	r25, 0x0133
     248:	02 97       	sbiw	r24, 0x02	; 2
     24a:	c9 f2       	breq	.-78     	; 0x1fe <loop+0xc2>
    {
        current_motion = new_motion;
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 33 01 	sts	0x0133, r25
     254:	80 93 32 01 	sts	0x0132, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     258:	0e 94 12 04 	call	0x824	; 0x824 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	80 91 99 01 	lds	r24, 0x0199
     262:	0e 94 0d 04 	call	0x81a	; 0x81a <set_motors>
     266:	60 91 30 01 	lds	r22, 0x0130
     26a:	70 91 31 01 	lds	r23, 0x0131
     26e:	c7 cf       	rjmp	.-114    	; 0x1fe <loop+0xc2>

00000270 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     270:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     272:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     274:	8c e0       	ldi	r24, 0x0C	; 12
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	90 93 c5 00 	sts	0x00C5, r25
     27c:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     280:	e0 ec       	ldi	r30, 0xC0	; 192
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8d 7f       	andi	r24, 0xFD	; 253
     288:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     28a:	e2 ec       	ldi	r30, 0xC2	; 194
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	86 60       	ori	r24, 0x06	; 6
     292:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     294:	e1 ec       	ldi	r30, 0xC1	; 193
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	88 60       	ori	r24, 0x08	; 8
     29c:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	90 93 9d 01 	sts	0x019D, r25
     2a6:	80 93 9c 01 	sts	0x019C, r24
    sei();
     2aa:	78 94       	sei
     2ac:	08 95       	ret

000002ae <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2ae:	20 91 32 01 	lds	r18, 0x0132
     2b2:	30 91 33 01 	lds	r19, 0x0133
     2b6:	28 17       	cp	r18, r24
     2b8:	39 07       	cpc	r19, r25
     2ba:	71 f0       	breq	.+28     	; 0x2d8 <set_motion+0x2a>
    {
        current_motion = new_motion;
     2bc:	90 93 33 01 	sts	0x0133, r25
     2c0:	80 93 32 01 	sts	0x0132, r24
        
        if (current_motion == STOP)
     2c4:	00 97       	sbiw	r24, 0x00	; 0
     2c6:	81 f0       	breq	.+32     	; 0x2e8 <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	91 05       	cpc	r25, r1
     2cc:	89 f0       	breq	.+34     	; 0x2f0 <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	91 05       	cpc	r25, r1
     2d2:	b1 f0       	breq	.+44     	; 0x300 <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     2d4:	03 97       	sbiw	r24, 0x03	; 3
     2d6:	09 f0       	breq	.+2      	; 0x2da <set_motion+0x2c>
     2d8:	08 95       	ret
        {
            spinup_motors();
     2da:	0e 94 12 04 	call	0x824	; 0x824 <spinup_motors>
            set_motors(0, kilo_turn_right);
     2de:	60 91 85 01 	lds	r22, 0x0185
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	0c 94 0d 04 	jmp	0x81a	; 0x81a <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0c 94 0d 04 	jmp	0x81a	; 0x81a <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2f0:	0e 94 12 04 	call	0x824	; 0x824 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2f4:	60 91 98 01 	lds	r22, 0x0198
     2f8:	80 91 97 01 	lds	r24, 0x0197
     2fc:	0c 94 0d 04 	jmp	0x81a	; 0x81a <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     300:	0e 94 12 04 	call	0x824	; 0x824 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	80 91 99 01 	lds	r24, 0x0199
     30a:	0c 94 0d 04 	jmp	0x81a	; 0x81a <set_motors>

0000030e <sample_light>:
    }
}

// Function to sample light.
void sample_light()
{
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int sum = 0;
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	10 e0       	ldi	r17, 0x00	; 0
void sample_light()
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
     31a:	c0 e0       	ldi	r28, 0x00	; 0
     31c:	d0 e0       	ldi	r29, 0x00	; 0
    int sum = 0;


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     31e:	0e 94 22 04 	call	0x844	; 0x844 <get_ambientlight>
        
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
     322:	8f 3f       	cpi	r24, 0xFF	; 255
     324:	2f ef       	ldi	r18, 0xFF	; 255
     326:	92 07       	cpc	r25, r18
     328:	19 f0       	breq	.+6      	; 0x330 <sample_light+0x22>
        {
            sum = sum + sample;
     32a:	08 0f       	add	r16, r24
     32c:	19 1f       	adc	r17, r25
            number_of_samples = number_of_samples + 1;
     32e:	21 96       	adiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int sum = 0;


    while (number_of_samples < 300)
     330:	cc 32       	cpi	r28, 0x2C	; 44
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	d8 07       	cpc	r29, r24
     336:	9c f3       	brlt	.-26     	; 0x31e <sample_light+0x10>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    current_light = sum / number_of_samples;
     338:	c8 01       	movw	r24, r16
     33a:	be 01       	movw	r22, r28
     33c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divmodhi4>
     340:	70 93 31 01 	sts	0x0131, r23
     344:	60 93 30 01 	sts	0x0130, r22
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	08 95       	ret

00000352 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     352:	08 95       	ret

00000354 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	08 95       	ret

0000035a <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     35a:	08 95       	ret

0000035c <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
    cli();
     36a:	f8 94       	cli

    ports_off();
     36c:	14 b8       	out	0x04, r1	; 4
     36e:	17 b8       	out	0x07, r1	; 7
     370:	1a b8       	out	0x0a, r1	; 10
     372:	15 b8       	out	0x05, r1	; 5
     374:	18 b8       	out	0x08, r1	; 8
     376:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     378:	52 9a       	sbi	0x0a, 2	; 10
     37a:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     37c:	14 bc       	out	0x24, r1	; 36
     37e:	85 e0       	ldi	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
     382:	8f ef       	ldi	r24, 0xFF	; 255
     384:	87 bd       	out	0x27, r24	; 39
     386:	82 e0       	ldi	r24, 0x02	; 2
     388:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     38c:	10 92 80 00 	sts	0x0080, r1
     390:	10 92 81 00 	sts	0x0081, r1
     394:	2f e8       	ldi	r18, 0x8F	; 143
     396:	3b e0       	ldi	r19, 0x0B	; 11
     398:	30 93 89 00 	sts	0x0089, r19
     39c:	20 93 88 00 	sts	0x0088, r18
     3a0:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     3a4:	53 98       	cbi	0x0a, 3	; 10
     3a6:	23 98       	cbi	0x04, 3	; 4
     3a8:	91 ea       	ldi	r25, 0xA1	; 161
     3aa:	90 93 b0 00 	sts	0x00B0, r25
     3ae:	80 93 b1 00 	sts	0x00B1, r24
     3b2:	10 92 b4 00 	sts	0x00B4, r1
     3b6:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     3ba:	8b e0       	ldi	r24, 0x0B	; 11
     3bc:	80 bf       	out	0x30, r24	; 48
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     3c4:	86 e0       	ldi	r24, 0x06	; 6
     3c6:	80 93 7c 00 	sts	0x007C, r24
     3ca:	83 e8       	ldi	r24, 0x83	; 131
     3cc:	80 93 7a 00 	sts	0x007A, r24
     3d0:	80 91 7a 00 	lds	r24, 0x007A
     3d4:	80 64       	ori	r24, 0x40	; 64
     3d6:	80 93 7a 00 	sts	0x007A, r24
     3da:	80 91 7a 00 	lds	r24, 0x007A
     3de:	86 fd       	sbrc	r24, 6
     3e0:	fc cf       	rjmp	.-8      	; 0x3da <kilo_init+0x7e>
    adc_trigger_high_gain();
     3e2:	10 92 7c 00 	sts	0x007C, r1
     3e6:	83 ea       	ldi	r24, 0xA3	; 163
     3e8:	80 93 7a 00 	sts	0x007A, r24
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
    if (osccal != 0xFF)
     3fa:	8f 3f       	cpi	r24, 0xFF	; 255
     3fc:	11 f0       	breq	.+4      	; 0x402 <kilo_init+0xa6>
        OSCCAL = osccal;
     3fe:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     402:	10 92 63 01 	sts	0x0163, r1
    rx_leadingbit = 1;
     406:	c1 e0       	ldi	r28, 0x01	; 1
     408:	c0 93 3c 01 	sts	0x013C, r28
    rx_leadingbyte = 1;
     40c:	c0 93 80 01 	sts	0x0180, r28
    rx_byteindex = 0;
     410:	10 92 5a 01 	sts	0x015A, r1
    rx_bytevalue = 0;
     414:	10 92 94 01 	sts	0x0194, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     418:	80 e9       	ldi	r24, 0x90	; 144
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     420:	80 93 59 01 	sts	0x0159, r24
    if (tx_mask & ~TX_MASK_MAX)
     424:	80 91 59 01 	lds	r24, 0x0159
     428:	88 73       	andi	r24, 0x38	; 56
     42a:	11 f0       	breq	.+4      	; 0x430 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     42c:	c0 93 59 01 	sts	0x0159, r28
    tx_clock = 0;
     430:	10 92 84 01 	sts	0x0184, r1
     434:	10 92 83 01 	sts	0x0183, r1
    tx_increment = 255;
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	90 93 82 01 	sts	0x0182, r25
     440:	80 93 81 01 	sts	0x0181, r24
    kilo_ticks = 0;
     444:	10 92 5f 01 	sts	0x015F, r1
     448:	10 92 60 01 	sts	0x0160, r1
     44c:	10 92 61 01 	sts	0x0161, r1
     450:	10 92 62 01 	sts	0x0162, r1
    kilo_state = IDLE;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 37 01 	sts	0x0137, r24
    kilo_tx_period = 3906;
     45a:	82 e4       	ldi	r24, 0x42	; 66
     45c:	9f e0       	ldi	r25, 0x0F	; 15
     45e:	90 93 93 01 	sts	0x0193, r25
     462:	80 93 92 01 	sts	0x0192, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     466:	80 eb       	ldi	r24, 0xB0	; 176
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     46e:	c8 2f       	mov	r28, r24
     470:	81 eb       	ldi	r24, 0xB1	; 177
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     478:	2c 2f       	mov	r18, r28
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	38 2b       	or	r19, r24
     47e:	30 93 96 01 	sts	0x0196, r19
     482:	20 93 95 01 	sts	0x0195, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     48e:	80 93 99 01 	sts	0x0199, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     492:	89 e0       	ldi	r24, 0x09	; 9
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     49a:	80 93 85 01 	sts	0x0185, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     4a6:	80 93 97 01 	sts	0x0197, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     4aa:	84 e1       	ldi	r24, 0x14	; 20
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     4b2:	80 93 98 01 	sts	0x0198, r24
     4b6:	54 e6       	ldi	r21, 0x64	; 100
     4b8:	e5 2e       	mov	r14, r21
     4ba:	51 e0       	ldi	r21, 0x01	; 1
     4bc:	f5 2e       	mov	r15, r21
     4be:	0d e3       	ldi	r16, 0x3D	; 61
     4c0:	11 e0       	ldi	r17, 0x01	; 1
     4c2:	c0 e2       	ldi	r28, 0x20	; 32
     4c4:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4c6:	ce 01       	movw	r24, r28
     4c8:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     4cc:	d8 2e       	mov	r13, r24
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     4d6:	2d 2d       	mov	r18, r13
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	32 2f       	mov	r19, r18
     4dc:	22 27       	eor	r18, r18
     4de:	28 2b       	or	r18, r24
     4e0:	f7 01       	movw	r30, r14
     4e2:	21 93       	st	Z+, r18
     4e4:	31 93       	st	Z+, r19
     4e6:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     4e8:	ce 01       	movw	r24, r28
     4ea:	c0 96       	adiw	r24, 0x30	; 48
     4ec:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     4f0:	d8 2e       	mov	r13, r24
     4f2:	ce 01       	movw	r24, r28
     4f4:	c1 96       	adiw	r24, 0x31	; 49
     4f6:	0e 94 67 10 	call	0x20ce	; 0x20ce <eeprom_read_byte>
     4fa:	2d 2d       	mov	r18, r13
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	32 2f       	mov	r19, r18
     500:	22 27       	eor	r18, r18
     502:	28 2b       	or	r18, r24
     504:	f8 01       	movw	r30, r16
     506:	21 93       	st	Z+, r18
     508:	31 93       	st	Z+, r19
     50a:	8f 01       	movw	r16, r30
     50c:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     50e:	cc 33       	cpi	r28, 0x3C	; 60
     510:	d1 05       	cpc	r29, r1
     512:	c9 f6       	brne	.-78     	; 0x4c6 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     514:	78 94       	sei
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	08 95       	ret

00000526 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	8f 93       	push	r24
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	a8 95       	wdr
     538:	80 91 60 00 	lds	r24, 0x0060
     53c:	88 61       	ori	r24, 0x18	; 24
     53e:	80 93 60 00 	sts	0x0060, r24
     542:	10 92 60 00 	sts	0x0060, r1
     546:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     548:	8f 91       	pop	r24
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     554:	3c 01       	movw	r6, r24
     556:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     558:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     55a:	99 24       	eor	r9, r9
     55c:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     562:	96 e0       	ldi	r25, 0x06	; 6
     564:	a9 2e       	mov	r10, r25
     566:	23 e8       	ldi	r18, 0x83	; 131
     568:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     56a:	38 e1       	ldi	r19, 0x18	; 24
     56c:	d3 2e       	mov	r13, r19
     56e:	49 e2       	ldi	r20, 0x29	; 41
     570:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     572:	90 91 37 01 	lds	r25, 0x0137
     576:	e9 2f       	mov	r30, r25
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	e7 30       	cpi	r30, 0x07	; 7
     57c:	f1 05       	cpc	r31, r1
     57e:	c8 f7       	brcc	.-14     	; 0x572 <kilo_start+0x1e>
     580:	ec 5c       	subi	r30, 0xCC	; 204
     582:	ff 4f       	sbci	r31, 0xFF	; 255
     584:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     588:	11 23       	and	r17, r17
     58a:	09 f4       	brne	.+2      	; 0x58e <kilo_start+0x3a>
     58c:	fc c0       	rjmp	.+504    	; 0x786 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     58e:	c0 92 37 01 	sts	0x0137, r12
     592:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     594:	fe 01       	movw	r30, r28
     596:	09 95       	icall
                break;
     598:	ec cf       	rjmp	.-40     	; 0x572 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     59a:	80 91 63 01 	lds	r24, 0x0163
     59e:	81 11       	cpse	r24, r1
     5a0:	eb c0       	rjmp	.+470    	; 0x778 <kilo_start+0x224>
        cli();                                    // disable interrupts
     5a2:	f8 94       	cli
        adc_setup_conversion(6);
     5a4:	a0 92 7c 00 	sts	0x007C, r10
     5a8:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     5ac:	80 91 7a 00 	lds	r24, 0x007A
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     5b6:	90 91 7a 00 	lds	r25, 0x007A
     5ba:	96 fd       	sbrc	r25, 6
     5bc:	fc cf       	rjmp	.-8      	; 0x5b6 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     5be:	80 91 78 00 	lds	r24, 0x0078
     5c2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5c6:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     5c8:	8b 3a       	cpi	r24, 0xAB	; 171
     5ca:	e2 e0       	ldi	r30, 0x02	; 2
     5cc:	9e 07       	cpc	r25, r30
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <kilo_start+0x7e>
     5d0:	ed c0       	rjmp	.+474    	; 0x7ac <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     5d2:	89 38       	cpi	r24, 0x89	; 137
     5d4:	f2 e0       	ldi	r31, 0x02	; 2
     5d6:	9f 07       	cpc	r25, r31
     5d8:	0c f0       	brlt	.+2      	; 0x5dc <kilo_start+0x88>
     5da:	ef c0       	rjmp	.+478    	; 0x7ba <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     5dc:	87 36       	cpi	r24, 0x67	; 103
     5de:	92 40       	sbci	r25, 0x02	; 2
     5e0:	0c f4       	brge	.+2      	; 0x5e4 <kilo_start+0x90>
     5e2:	ca c0       	rjmp	.+404    	; 0x778 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5e4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5e6:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5e8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5ea:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5ec:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5ee:	3c 98       	cbi	0x07, 4	; 7
     5f0:	c0 cf       	rjmp	.-128    	; 0x572 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     5f2:	f8 94       	cli
                acomp_off();
     5f4:	80 b7       	in	r24, 0x30	; 48
     5f6:	87 7f       	andi	r24, 0xF7	; 247
     5f8:	80 bf       	out	0x30, r24	; 48
                adc_off();
     5fa:	80 91 7a 00 	lds	r24, 0x007A
     5fe:	8f 77       	andi	r24, 0x7F	; 127
     600:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     604:	14 b8       	out	0x04, r1	; 4
     606:	17 b8       	out	0x07, r1	; 7
     608:	1a b8       	out	0x0a, r1	; 10
     60a:	15 b8       	out	0x05, r1	; 5
     60c:	18 b8       	out	0x08, r1	; 8
     60e:	1b b8       	out	0x0b, r1	; 11
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	a8 95       	wdr
     616:	d0 92 60 00 	sts	0x0060, r13
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     620:	80 91 60 00 	lds	r24, 0x0060
     624:	80 64       	ori	r24, 0x40	; 64
     626:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     62a:	93 b7       	in	r25, 0x33	; 51
     62c:	91 7f       	andi	r25, 0xF1	; 241
     62e:	94 60       	ori	r25, 0x04	; 4
     630:	93 bf       	out	0x33, r25	; 51
                cli();
     632:	f8 94       	cli
                sleep_enable();
     634:	83 b7       	in	r24, 0x33	; 51
     636:	81 60       	ori	r24, 0x01	; 1
     638:	83 bf       	out	0x33, r24	; 51
                sei();
     63a:	78 94       	sei
                sleep_cpu();
     63c:	88 95       	sleep
                sleep_disable();
     63e:	83 b7       	in	r24, 0x33	; 51
     640:	8e 7f       	andi	r24, 0xFE	; 254
     642:	83 bf       	out	0x33, r24	; 51
                sei();
     644:	78 94       	sei
                rx_busy = 0;
     646:	10 92 63 01 	sts	0x0163, r1
                ports_on();
     64a:	52 9a       	sbi	0x0a, 2	; 10
     64c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     64e:	80 91 7a 00 	lds	r24, 0x007A
     652:	80 68       	ori	r24, 0x80	; 128
     654:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     658:	87 e5       	ldi	r24, 0x57	; 87
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <kilo_start+0x108>
     660:	00 c0       	rjmp	.+0      	; 0x662 <kilo_start+0x10e>
     662:	00 00       	nop
                _delay_us(300);
                acomp_on();
     664:	80 b7       	in	r24, 0x30	; 48
     666:	88 61       	ori	r24, 0x18	; 24
     668:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     66a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     66c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     66e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     670:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     672:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     674:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     676:	ef e1       	ldi	r30, 0x1F	; 31
     678:	fe e4       	ldi	r31, 0x4E	; 78
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <kilo_start+0x126>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <kilo_start+0x12c>
     680:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     682:	80 91 63 01 	lds	r24, 0x0163
     686:	81 11       	cpse	r24, r1
     688:	81 c0       	rjmp	.+258    	; 0x78c <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     68a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     68c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     68e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     690:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     692:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     694:	3c 98       	cbi	0x07, 4	; 7
     696:	6d cf       	rjmp	.-294    	; 0x572 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     698:	80 91 35 01 	lds	r24, 0x0135
     69c:	81 11       	cpse	r24, r1
     69e:	41 c0       	rjmp	.+130    	; 0x722 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6a4:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     6a8:	10 92 36 01 	sts	0x0136, r1
     6ac:	62 cf       	rjmp	.-316    	; 0x572 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     6ae:	48 99       	sbic	0x09, 0	; 9
     6b0:	ec cf       	rjmp	.-40     	; 0x68a <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6b2:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6b4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6b6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6b8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6ba:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6bc:	3c 98       	cbi	0x07, 4	; 7
     6be:	8f ec       	ldi	r24, 0xCF	; 207
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <kilo_start+0x16e>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <kilo_start+0x174>
     6c8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6ca:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6cc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6ce:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6d0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6d2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6d4:	3c 98       	cbi	0x07, 4	; 7
     6d6:	9f ef       	ldi	r25, 0xFF	; 255
     6d8:	e1 ee       	ldi	r30, 0xE1	; 225
     6da:	f4 e0       	ldi	r31, 0x04	; 4
     6dc:	91 50       	subi	r25, 0x01	; 1
     6de:	e0 40       	sbci	r30, 0x00	; 0
     6e0:	f0 40       	sbci	r31, 0x00	; 0
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <kilo_start+0x188>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <kilo_start+0x192>
     6e6:	00 00       	nop
     6e8:	44 cf       	rjmp	.-376    	; 0x572 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6ea:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6ec:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6ee:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6f0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6f2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6f4:	3c 98       	cbi	0x07, 4	; 7
     6f6:	ef ec       	ldi	r30, 0xCF	; 207
     6f8:	f7 e0       	ldi	r31, 0x07	; 7
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <kilo_start+0x1a6>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <kilo_start+0x1ac>
     700:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     702:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     704:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     706:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     708:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     70a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     70c:	3c 98       	cbi	0x07, 4	; 7
     70e:	ff ef       	ldi	r31, 0xFF	; 255
     710:	21 ee       	ldi	r18, 0xE1	; 225
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	f1 50       	subi	r31, 0x01	; 1
     716:	20 40       	sbci	r18, 0x00	; 0
     718:	80 40       	sbci	r24, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <kilo_start+0x1c0>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <kilo_start+0x1ca>
     71e:	00 00       	nop
     720:	28 cf       	rjmp	.-432    	; 0x572 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     722:	90 91 35 01 	lds	r25, 0x0135
     726:	80 91 36 01 	lds	r24, 0x0136
     72a:	98 17       	cp	r25, r24
     72c:	09 f4       	brne	.+2      	; 0x730 <kilo_start+0x1dc>
     72e:	21 cf       	rjmp	.-446    	; 0x572 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     730:	80 91 35 01 	lds	r24, 0x0135
     734:	80 93 36 01 	sts	0x0136, r24
                        if (cur_motion == MOVE_LEFT) {
     738:	80 91 35 01 	lds	r24, 0x0135
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	09 f4       	brne	.+2      	; 0x742 <kilo_start+0x1ee>
     740:	50 c0       	rjmp	.+160    	; 0x7e2 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     742:	80 91 35 01 	lds	r24, 0x0135
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     746:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     74a:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	d9 f1       	breq	.+118    	; 0x7c8 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     752:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     756:	90 92 b4 00 	sts	0x00B4, r9
     75a:	8f e2       	ldi	r24, 0x2F	; 47
     75c:	95 e7       	ldi	r25, 0x75	; 117
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <kilo_start+0x20a>
     762:	00 c0       	rjmp	.+0      	; 0x764 <kilo_start+0x210>
     764:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     766:	80 91 98 01 	lds	r24, 0x0198
     76a:	90 91 97 01 	lds	r25, 0x0197
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     76e:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     772:	80 93 b4 00 	sts	0x00B4, r24
     776:	fd ce       	rjmp	.-518    	; 0x572 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     778:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     77a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     77c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     77e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     780:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     782:	3c 98       	cbi	0x07, 4	; 7
     784:	f6 ce       	rjmp	.-532    	; 0x572 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     786:	f3 01       	movw	r30, r6
     788:	09 95       	icall
     78a:	01 cf       	rjmp	.-510    	; 0x58e <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     78c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     78e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     790:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     792:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     794:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     796:	3c 98       	cbi	0x07, 4	; 7
     798:	ff ef       	ldi	r31, 0xFF	; 255
     79a:	20 e7       	ldi	r18, 0x70	; 112
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	f1 50       	subi	r31, 0x01	; 1
     7a0:	20 40       	sbci	r18, 0x00	; 0
     7a2:	80 40       	sbci	r24, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <kilo_start+0x24a>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <kilo_start+0x254>
     7a8:	00 00       	nop
     7aa:	6f cf       	rjmp	.-290    	; 0x68a <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7ac:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7ae:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7b0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7b2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7b4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7b6:	3c 98       	cbi	0x07, 4	; 7
     7b8:	dc ce       	rjmp	.-584    	; 0x572 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7ba:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7bc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7be:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7c0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     7c2:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     7c4:	3c 9a       	sbi	0x07, 4	; 7
     7c6:	d5 ce       	rjmp	.-598    	; 0x572 <kilo_start+0x1e>
     7c8:	ef e2       	ldi	r30, 0x2F	; 47
     7ca:	f5 e7       	ldi	r31, 0x75	; 117
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <kilo_start+0x278>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <kilo_start+0x27e>
     7d2:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     7d4:	80 91 85 01 	lds	r24, 0x0185
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7d8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7dc:	80 93 b4 00 	sts	0x00B4, r24
     7e0:	c8 ce       	rjmp	.-624    	; 0x572 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7e2:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     7e6:	10 92 b4 00 	sts	0x00B4, r1
     7ea:	8f e2       	ldi	r24, 0x2F	; 47
     7ec:	95 e7       	ldi	r25, 0x75	; 117
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <kilo_start+0x29a>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <kilo_start+0x2a0>
     7f4:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     7f6:	80 91 99 01 	lds	r24, 0x0199
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7fa:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7fe:	10 92 b4 00 	sts	0x00B4, r1
     802:	b7 ce       	rjmp	.-658    	; 0x572 <kilo_start+0x1e>

00000804 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     804:	07 c0       	rjmp	.+14     	; 0x814 <delay+0x10>
     806:	ef ec       	ldi	r30, 0xCF	; 207
     808:	f7 e0       	ldi	r31, 0x07	; 7
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <delay+0x6>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <delay+0xc>
     810:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     812:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     814:	00 97       	sbiw	r24, 0x00	; 0
     816:	b9 f7       	brne	.-18     	; 0x806 <delay+0x2>
     818:	08 95       	ret

0000081a <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     81a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     81e:	60 93 b4 00 	sts	0x00B4, r22
     822:	08 95       	ret

00000824 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     82a:	80 93 b4 00 	sts	0x00B4, r24
     82e:	8f e0       	ldi	r24, 0x0F	; 15
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	ef ec       	ldi	r30, 0xCF	; 207
     834:	f7 e0       	ldi	r31, 0x07	; 7
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <spinup_motors+0x12>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <spinup_motors+0x18>
     83c:	00 00       	nop
     83e:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     840:	c1 f7       	brne	.-16     	; 0x832 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     842:	08 95       	ret

00000844 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     844:	80 91 63 01 	lds	r24, 0x0163
     848:	81 11       	cpse	r24, r1
     84a:	1e c0       	rjmp	.+60     	; 0x888 <get_ambientlight+0x44>
        cli();
     84c:	f8 94       	cli
        adc_setup_conversion(7);
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	80 93 7c 00 	sts	0x007C, r24
     854:	83 e8       	ldi	r24, 0x83	; 131
     856:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     85a:	80 91 7a 00 	lds	r24, 0x007A
     85e:	80 64       	ori	r24, 0x40	; 64
     860:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     864:	80 91 7a 00 	lds	r24, 0x007A
     868:	86 fd       	sbrc	r24, 6
     86a:	fc cf       	rjmp	.-8      	; 0x864 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     86c:	80 91 78 00 	lds	r24, 0x0078
     870:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     874:	10 92 7c 00 	sts	0x007C, r1
     878:	23 ea       	ldi	r18, 0xA3	; 163
     87a:	20 93 7a 00 	sts	0x007A, r18
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     884:	78 94       	sei
     886:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     88c:	08 95       	ret

0000088e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     88e:	80 91 63 01 	lds	r24, 0x0163
     892:	81 11       	cpse	r24, r1
     894:	1e c0       	rjmp	.+60     	; 0x8d2 <get_temperature+0x44>
        cli();
     896:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     898:	88 ec       	ldi	r24, 0xC8	; 200
     89a:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     89e:	87 e8       	ldi	r24, 0x87	; 135
     8a0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8a4:	80 91 7a 00 	lds	r24, 0x007A
     8a8:	80 64       	ori	r24, 0x40	; 64
     8aa:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8ae:	80 91 7a 00 	lds	r24, 0x007A
     8b2:	86 fd       	sbrc	r24, 6
     8b4:	fc cf       	rjmp	.-8      	; 0x8ae <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     8b6:	80 91 78 00 	lds	r24, 0x0078
     8ba:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8be:	10 92 7c 00 	sts	0x007C, r1
     8c2:	23 ea       	ldi	r18, 0xA3	; 163
     8c4:	20 93 7a 00 	sts	0x007A, r18
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8ce:	78 94       	sei
     8d0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     8d6:	08 95       	ret

000008d8 <rand_hard>:

uint8_t rand_hard() {
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     8e6:	03 ea       	ldi	r16, 0xA3	; 163
     8e8:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     8ea:	d6 e0       	ldi	r29, 0x06	; 6
     8ec:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     8ee:	a1 e0       	ldi	r26, 0x01	; 1
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     8f2:	60 e8       	ldi	r22, 0x80	; 128
     8f4:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     8f6:	f8 94       	cli
            adc_setup_conversion(6);
     8f8:	d0 93 7c 00 	sts	0x007C, r29
     8fc:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     900:	90 91 7a 00 	lds	r25, 0x007A
     904:	90 64       	ori	r25, 0x40	; 64
     906:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     90a:	90 91 7a 00 	lds	r25, 0x007A
     90e:	96 fd       	sbrc	r25, 6
     910:	fc cf       	rjmp	.-8      	; 0x90a <__stack+0xb>
            a = ADCW&0x1;
     912:	20 91 78 00 	lds	r18, 0x0078
     916:	30 91 79 00 	lds	r19, 0x0079
     91a:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     91c:	90 91 7a 00 	lds	r25, 0x007A
     920:	90 64       	ori	r25, 0x40	; 64
     922:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     926:	90 91 7a 00 	lds	r25, 0x007A
     92a:	96 fd       	sbrc	r25, 6
     92c:	fc cf       	rjmp	.-8      	; 0x926 <__stack+0x27>
            b = ADCW&0x1;
     92e:	40 91 78 00 	lds	r20, 0x0078
     932:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     936:	10 92 7c 00 	sts	0x007C, r1
     93a:	00 93 7a 00 	sts	0x007A, r16
     93e:	10 93 7b 00 	sts	0x007B, r17
            sei();
     942:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     944:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     946:	24 13       	cpse	r18, r20
     948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
     94a:	61 50       	subi	r22, 0x01	; 1
     94c:	71 09       	sbc	r23, r1
     94e:	99 f6       	brne	.-90     	; 0x8f6 <rand_hard+0x1e>
        if (a)
     950:	22 23       	and	r18, r18
     952:	39 f0       	breq	.+14     	; 0x962 <__stack+0x63>
            num |= (1<<i);
     954:	9d 01       	movw	r18, r26
     956:	0e 2e       	mov	r0, r30
     958:	01 c0       	rjmp	.+2      	; 0x95c <__stack+0x5d>
     95a:	22 0f       	add	r18, r18
     95c:	0a 94       	dec	r0
     95e:	ea f7       	brpl	.-6      	; 0x95a <__stack+0x5b>
     960:	82 2b       	or	r24, r18
     962:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     964:	e8 30       	cpi	r30, 0x08	; 8
     966:	f1 05       	cpc	r31, r1
     968:	09 f0       	breq	.+2      	; 0x96c <__stack+0x6d>
     96a:	c3 cf       	rjmp	.-122    	; 0x8f2 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     976:	80 91 0e 01 	lds	r24, 0x010E
     97a:	98 2f       	mov	r25, r24
     97c:	99 0f       	add	r25, r25
     97e:	99 0f       	add	r25, r25
     980:	99 0f       	add	r25, r25
     982:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     984:	90 91 34 01 	lds	r25, 0x0134
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	29 0f       	add	r18, r25
     98c:	20 93 34 01 	sts	0x0134, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     990:	28 2f       	mov	r18, r24
     992:	22 95       	swap	r18
     994:	26 95       	lsr	r18
     996:	27 70       	andi	r18, 0x07	; 7
     998:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     99a:	96 95       	lsr	r25
     99c:	96 95       	lsr	r25
     99e:	89 27       	eor	r24, r25
     9a0:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     9a4:	08 95       	ret

000009a6 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     9a6:	80 93 0e 01 	sts	0x010E, r24
     9aa:	08 95       	ret

000009ac <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     9ac:	80 91 63 01 	lds	r24, 0x0163
     9b0:	81 11       	cpse	r24, r1
     9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <get_voltage+0x34>
        cli();                                    // disable interrupts
     9b4:	f8 94       	cli
        adc_setup_conversion(6);
     9b6:	86 e0       	ldi	r24, 0x06	; 6
     9b8:	80 93 7c 00 	sts	0x007C, r24
     9bc:	83 e8       	ldi	r24, 0x83	; 131
     9be:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9c2:	80 91 7a 00 	lds	r24, 0x007A
     9c6:	80 64       	ori	r24, 0x40	; 64
     9c8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9cc:	80 91 7a 00 	lds	r24, 0x007A
     9d0:	86 fd       	sbrc	r24, 6
     9d2:	fc cf       	rjmp	.-8      	; 0x9cc <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     9d4:	80 91 78 00 	lds	r24, 0x0078
     9d8:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     9dc:	78 94       	sei
     9de:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     9e4:	08 95       	ret

000009e6 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     9e6:	2f 92       	push	r2
     9e8:	3f 92       	push	r3
     9ea:	4f 92       	push	r4
     9ec:	5f 92       	push	r5
     9ee:	6f 92       	push	r6
     9f0:	7f 92       	push	r7
     9f2:	8f 92       	push	r8
     9f4:	9f 92       	push	r9
     9f6:	af 92       	push	r10
     9f8:	bf 92       	push	r11
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <estimate_distance+0x26>
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <estimate_distance+0x28>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <estimate_distance+0x2a>
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     a16:	dc 01       	movw	r26, r24
     a18:	12 96       	adiw	r26, 0x02	; 2
     a1a:	0d 90       	ld	r0, X+
     a1c:	bc 91       	ld	r27, X
     a1e:	a0 2d       	mov	r26, r0
     a20:	be 83       	std	Y+6, r27	; 0x06
     a22:	ad 83       	std	Y+5, r26	; 0x05
     a24:	a4 38       	cpi	r26, 0x84	; 132
     a26:	e3 e0       	ldi	r30, 0x03	; 3
     a28:	be 07       	cpc	r27, r30
     a2a:	0c f0       	brlt	.+2      	; 0xa2e <estimate_distance+0x48>
     a2c:	c9 c0       	rjmp	.+402    	; 0xbc0 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a2e:	80 91 3d 01 	lds	r24, 0x013D
     a32:	90 91 3e 01 	lds	r25, 0x013E
     a36:	8a 17       	cp	r24, r26
     a38:	9b 07       	cpc	r25, r27
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <estimate_distance+0x58>
     a3c:	37 c1       	rjmp	.+622    	; 0xcac <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a3e:	00 91 3f 01 	lds	r16, 0x013F
     a42:	10 91 40 01 	lds	r17, 0x0140
     a46:	0a 17       	cp	r16, r26
     a48:	1b 07       	cpc	r17, r27
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <estimate_distance+0x68>
     a4c:	2f c2       	rjmp	.+1118   	; 0xeac <estimate_distance+0x4c6>
     a4e:	00 91 41 01 	lds	r16, 0x0141
     a52:	10 91 42 01 	lds	r17, 0x0142
     a56:	0a 17       	cp	r16, r26
     a58:	1b 07       	cpc	r17, r27
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <estimate_distance+0x78>
     a5c:	2f c2       	rjmp	.+1118   	; 0xebc <estimate_distance+0x4d6>
     a5e:	00 91 43 01 	lds	r16, 0x0143
     a62:	10 91 44 01 	lds	r17, 0x0144
     a66:	0a 17       	cp	r16, r26
     a68:	1b 07       	cpc	r17, r27
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <estimate_distance+0x88>
     a6c:	2f c2       	rjmp	.+1118   	; 0xecc <estimate_distance+0x4e6>
     a6e:	00 91 45 01 	lds	r16, 0x0145
     a72:	10 91 46 01 	lds	r17, 0x0146
     a76:	0a 17       	cp	r16, r26
     a78:	1b 07       	cpc	r17, r27
     a7a:	08 f4       	brcc	.+2      	; 0xa7e <estimate_distance+0x98>
     a7c:	2f c2       	rjmp	.+1118   	; 0xedc <estimate_distance+0x4f6>
     a7e:	00 91 47 01 	lds	r16, 0x0147
     a82:	10 91 48 01 	lds	r17, 0x0148
     a86:	0a 17       	cp	r16, r26
     a88:	1b 07       	cpc	r17, r27
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <estimate_distance+0xa8>
     a8c:	ef c1       	rjmp	.+990    	; 0xe6c <estimate_distance+0x486>
     a8e:	00 91 49 01 	lds	r16, 0x0149
     a92:	10 91 4a 01 	lds	r17, 0x014A
     a96:	0a 17       	cp	r16, r26
     a98:	1b 07       	cpc	r17, r27
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <estimate_distance+0xb8>
     a9c:	27 c2       	rjmp	.+1102   	; 0xeec <estimate_distance+0x506>
     a9e:	00 91 4b 01 	lds	r16, 0x014B
     aa2:	10 91 4c 01 	lds	r17, 0x014C
     aa6:	0a 17       	cp	r16, r26
     aa8:	1b 07       	cpc	r17, r27
     aaa:	08 f4       	brcc	.+2      	; 0xaae <estimate_distance+0xc8>
     aac:	27 c2       	rjmp	.+1102   	; 0xefc <estimate_distance+0x516>
     aae:	00 91 4d 01 	lds	r16, 0x014D
     ab2:	10 91 4e 01 	lds	r17, 0x014E
     ab6:	0a 17       	cp	r16, r26
     ab8:	1b 07       	cpc	r17, r27
     aba:	08 f4       	brcc	.+2      	; 0xabe <estimate_distance+0xd8>
     abc:	27 c2       	rjmp	.+1102   	; 0xf0c <estimate_distance+0x526>
     abe:	00 91 4f 01 	lds	r16, 0x014F
     ac2:	10 91 50 01 	lds	r17, 0x0150
     ac6:	0a 17       	cp	r16, r26
     ac8:	1b 07       	cpc	r17, r27
     aca:	08 f4       	brcc	.+2      	; 0xace <estimate_distance+0xe8>
     acc:	27 c2       	rjmp	.+1102   	; 0xf1c <estimate_distance+0x536>
     ace:	00 91 51 01 	lds	r16, 0x0151
     ad2:	10 91 52 01 	lds	r17, 0x0152
     ad6:	0a 17       	cp	r16, r26
     ad8:	1b 07       	cpc	r17, r27
     ada:	08 f4       	brcc	.+2      	; 0xade <estimate_distance+0xf8>
     adc:	27 c2       	rjmp	.+1102   	; 0xf2c <estimate_distance+0x546>
     ade:	00 91 53 01 	lds	r16, 0x0153
     ae2:	10 91 54 01 	lds	r17, 0x0154
     ae6:	0a 17       	cp	r16, r26
     ae8:	1b 07       	cpc	r17, r27
     aea:	08 f4       	brcc	.+2      	; 0xaee <estimate_distance+0x108>
     aec:	23 c2       	rjmp	.+1094   	; 0xf34 <estimate_distance+0x54e>
     aee:	00 91 55 01 	lds	r16, 0x0155
     af2:	10 91 56 01 	lds	r17, 0x0156
     af6:	0a 17       	cp	r16, r26
     af8:	1b 07       	cpc	r17, r27
     afa:	08 f4       	brcc	.+2      	; 0xafe <estimate_distance+0x118>
     afc:	23 c2       	rjmp	.+1094   	; 0xf44 <estimate_distance+0x55e>
     afe:	00 91 57 01 	lds	r16, 0x0157
     b02:	10 91 58 01 	lds	r17, 0x0158
     b06:	0a 17       	cp	r16, r26
     b08:	1b 07       	cpc	r17, r27
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <estimate_distance+0x128>
     b0c:	23 c2       	rjmp	.+1094   	; 0xf54 <estimate_distance+0x56e>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a0 ed       	ldi	r26, 0xD0	; 208
     b14:	b0 e4       	ldi	r27, 0x40	; 64
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	ab 83       	std	Y+3, r26	; 0x03
     b1c:	bc 83       	std	Y+4, r27	; 0x04
     b1e:	4c e0       	ldi	r20, 0x0C	; 12
     b20:	e4 2e       	mov	r14, r20
     b22:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     b24:	f7 01       	movw	r30, r14
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	e3 5c       	subi	r30, 0xC3	; 195
     b2c:	fe 4f       	sbci	r31, 0xFE	; 254
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	b8 01       	movw	r22, r16
     b34:	68 1b       	sub	r22, r24
     b36:	79 0b       	sbc	r23, r25
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     b48:	6b 01       	movw	r12, r22
     b4a:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b4c:	ad 81       	ldd	r26, Y+5	; 0x05
     b4e:	be 81       	ldd	r27, Y+6	; 0x06
     b50:	bd 01       	movw	r22, r26
     b52:	bb 0f       	add	r27, r27
     b54:	88 0b       	sbc	r24, r24
     b56:	99 0b       	sbc	r25, r25
     b58:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__floatsisf>
     b5c:	4b 01       	movw	r8, r22
     b5e:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b60:	b8 01       	movw	r22, r16
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     b6a:	2b 01       	movw	r4, r22
     b6c:	3c 01       	movw	r6, r24
     b6e:	29 81       	ldd	r18, Y+1	; 0x01
     b70:	3a 81       	ldd	r19, Y+2	; 0x02
     b72:	4b 81       	ldd	r20, Y+3	; 0x03
     b74:	5c 81       	ldd	r21, Y+4	; 0x04
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	c3 01       	movw	r24, r6
     b84:	b2 01       	movw	r22, r4
     b86:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b8e:	c5 01       	movw	r24, r10
     b90:	b4 01       	movw	r22, r8
     b92:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e2       	ldi	r20, 0x20	; 32
     b9c:	51 e4       	ldi	r21, 0x41	; 65
     b9e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
            b=((int)((int)b/(int)slope));
     ba2:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixsfsi>
     ba6:	8b 01       	movw	r16, r22
     ba8:	c7 01       	movw	r24, r14
     baa:	b6 01       	movw	r22, r12
     bac:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixsfsi>
     bb0:	ab 01       	movw	r20, r22
     bb2:	bc 01       	movw	r22, r24
     bb4:	c8 01       	movw	r24, r16
     bb6:	ba 01       	movw	r22, r20
     bb8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divmodhi4>
            dist_high=b;
     bbc:	16 2f       	mov	r17, r22
     bbe:	77 c0       	rjmp	.+238    	; 0xcae <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bc0:	dc 01       	movw	r26, r24
     bc2:	cd 90       	ld	r12, X+
     bc4:	dc 90       	ld	r13, X
     bc6:	80 91 64 01 	lds	r24, 0x0164
     bca:	90 91 65 01 	lds	r25, 0x0165
     bce:	8c 15       	cp	r24, r12
     bd0:	9d 05       	cpc	r25, r13
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <estimate_distance+0x1f0>
     bd4:	8c c0       	rjmp	.+280    	; 0xcee <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     bd6:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     bd8:	e0 90 66 01 	lds	r14, 0x0166
     bdc:	f0 90 67 01 	lds	r15, 0x0167
     be0:	ec 14       	cp	r14, r12
     be2:	fd 04       	cpc	r15, r13
     be4:	08 f4       	brcc	.+2      	; 0xbe8 <estimate_distance+0x202>
     be6:	5e c1       	rjmp	.+700    	; 0xea4 <estimate_distance+0x4be>
     be8:	e0 90 68 01 	lds	r14, 0x0168
     bec:	f0 90 69 01 	lds	r15, 0x0169
     bf0:	ec 14       	cp	r14, r12
     bf2:	fd 04       	cpc	r15, r13
     bf4:	08 f4       	brcc	.+2      	; 0xbf8 <estimate_distance+0x212>
     bf6:	5e c1       	rjmp	.+700    	; 0xeb4 <estimate_distance+0x4ce>
     bf8:	e0 90 6a 01 	lds	r14, 0x016A
     bfc:	f0 90 6b 01 	lds	r15, 0x016B
     c00:	ec 14       	cp	r14, r12
     c02:	fd 04       	cpc	r15, r13
     c04:	08 f4       	brcc	.+2      	; 0xc08 <estimate_distance+0x222>
     c06:	5e c1       	rjmp	.+700    	; 0xec4 <estimate_distance+0x4de>
     c08:	e0 90 6c 01 	lds	r14, 0x016C
     c0c:	f0 90 6d 01 	lds	r15, 0x016D
     c10:	ec 14       	cp	r14, r12
     c12:	fd 04       	cpc	r15, r13
     c14:	08 f4       	brcc	.+2      	; 0xc18 <estimate_distance+0x232>
     c16:	5e c1       	rjmp	.+700    	; 0xed4 <estimate_distance+0x4ee>
     c18:	e0 90 6e 01 	lds	r14, 0x016E
     c1c:	f0 90 6f 01 	lds	r15, 0x016F
     c20:	ec 14       	cp	r14, r12
     c22:	fd 04       	cpc	r15, r13
     c24:	08 f4       	brcc	.+2      	; 0xc28 <estimate_distance+0x242>
     c26:	c3 c0       	rjmp	.+390    	; 0xdae <estimate_distance+0x3c8>
     c28:	e0 90 70 01 	lds	r14, 0x0170
     c2c:	f0 90 71 01 	lds	r15, 0x0171
     c30:	ec 14       	cp	r14, r12
     c32:	fd 04       	cpc	r15, r13
     c34:	08 f4       	brcc	.+2      	; 0xc38 <estimate_distance+0x252>
     c36:	56 c1       	rjmp	.+684    	; 0xee4 <estimate_distance+0x4fe>
     c38:	e0 90 72 01 	lds	r14, 0x0172
     c3c:	f0 90 73 01 	lds	r15, 0x0173
     c40:	ec 14       	cp	r14, r12
     c42:	fd 04       	cpc	r15, r13
     c44:	08 f4       	brcc	.+2      	; 0xc48 <estimate_distance+0x262>
     c46:	56 c1       	rjmp	.+684    	; 0xef4 <estimate_distance+0x50e>
     c48:	e0 90 74 01 	lds	r14, 0x0174
     c4c:	f0 90 75 01 	lds	r15, 0x0175
     c50:	ec 14       	cp	r14, r12
     c52:	fd 04       	cpc	r15, r13
     c54:	08 f4       	brcc	.+2      	; 0xc58 <estimate_distance+0x272>
     c56:	56 c1       	rjmp	.+684    	; 0xf04 <estimate_distance+0x51e>
     c58:	e0 90 76 01 	lds	r14, 0x0176
     c5c:	f0 90 77 01 	lds	r15, 0x0177
     c60:	ec 14       	cp	r14, r12
     c62:	fd 04       	cpc	r15, r13
     c64:	08 f4       	brcc	.+2      	; 0xc68 <estimate_distance+0x282>
     c66:	56 c1       	rjmp	.+684    	; 0xf14 <estimate_distance+0x52e>
     c68:	e0 90 78 01 	lds	r14, 0x0178
     c6c:	f0 90 79 01 	lds	r15, 0x0179
     c70:	ec 14       	cp	r14, r12
     c72:	fd 04       	cpc	r15, r13
     c74:	08 f4       	brcc	.+2      	; 0xc78 <estimate_distance+0x292>
     c76:	56 c1       	rjmp	.+684    	; 0xf24 <estimate_distance+0x53e>
     c78:	e0 90 7a 01 	lds	r14, 0x017A
     c7c:	f0 90 7b 01 	lds	r15, 0x017B
     c80:	ec 14       	cp	r14, r12
     c82:	fd 04       	cpc	r15, r13
     c84:	08 f4       	brcc	.+2      	; 0xc88 <estimate_distance+0x2a2>
     c86:	5a c1       	rjmp	.+692    	; 0xf3c <estimate_distance+0x556>
     c88:	e0 90 7c 01 	lds	r14, 0x017C
     c8c:	f0 90 7d 01 	lds	r15, 0x017D
     c90:	ec 14       	cp	r14, r12
     c92:	fd 04       	cpc	r15, r13
     c94:	08 f4       	brcc	.+2      	; 0xc98 <estimate_distance+0x2b2>
     c96:	5a c1       	rjmp	.+692    	; 0xf4c <estimate_distance+0x566>
     c98:	e0 90 7e 01 	lds	r14, 0x017E
     c9c:	f0 90 7f 01 	lds	r15, 0x017F
     ca0:	ec 14       	cp	r14, r12
     ca2:	fd 04       	cpc	r15, r13
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <estimate_distance+0x2c2>
     ca6:	5a c1       	rjmp	.+692    	; 0xf5c <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     ca8:	0a e5       	ldi	r16, 0x5A	; 90
     caa:	31 c0       	rjmp	.+98     	; 0xd0e <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     cac:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     cae:	ed 81       	ldd	r30, Y+5	; 0x05
     cb0:	fe 81       	ldd	r31, Y+6	; 0x06
     cb2:	ed 3b       	cpi	r30, 0xBD	; 189
     cb4:	f2 40       	sbci	r31, 0x02	; 2
     cb6:	fc f4       	brge	.+62     	; 0xcf6 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     cb8:	81 e2       	ldi	r24, 0x21	; 33
     cba:	81 0f       	add	r24, r17
    }
}
     cbc:	26 96       	adiw	r28, 0x06	; 6
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	7f 90       	pop	r7
     ce2:	6f 90       	pop	r6
     ce4:	5f 90       	pop	r5
     ce6:	4f 90       	pop	r4
     ce8:	3f 90       	pop	r3
     cea:	2f 90       	pop	r2
     cec:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     cee:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     cf0:	81 e2       	ldi	r24, 0x21	; 33
     cf2:	80 0f       	add	r24, r16
     cf4:	e3 cf       	rjmp	.-58     	; 0xcbc <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     cf6:	d1 01       	movw	r26, r2
     cf8:	cd 90       	ld	r12, X+
     cfa:	dc 90       	ld	r13, X
     cfc:	80 91 64 01 	lds	r24, 0x0164
     d00:	90 91 65 01 	lds	r25, 0x0165
     d04:	8c 15       	cp	r24, r12
     d06:	9d 05       	cpc	r25, r13
     d08:	08 f0       	brcs	.+2      	; 0xd0c <estimate_distance+0x326>
     d0a:	66 cf       	rjmp	.-308    	; 0xbd8 <estimate_distance+0x1f2>
            dist_low=0;
     d0c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d0e:	1f 3f       	cpi	r17, 0xFF	; 255
     d10:	79 f3       	breq	.-34     	; 0xcf0 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d12:	ed 81       	ldd	r30, Y+5	; 0x05
     d14:	fe 81       	ldd	r31, Y+6	; 0x06
     d16:	bf 01       	movw	r22, r30
     d18:	ff 0f       	add	r31, r31
     d1a:	88 0b       	sbc	r24, r24
     d1c:	99 0b       	sbc	r25, r25
     d1e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__floatsisf>
     d22:	6b 01       	movw	r12, r22
     d24:	7c 01       	movw	r14, r24
     d26:	61 2f       	mov	r22, r17
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     d32:	4b 01       	movw	r8, r22
     d34:	5c 01       	movw	r10, r24
     d36:	a7 01       	movw	r20, r14
     d38:	96 01       	movw	r18, r12
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	81 e6       	ldi	r24, 0x61	; 97
     d40:	94 e4       	ldi	r25, 0x44	; 68
     d42:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	c5 01       	movw	r24, r10
     d4c:	b4 01       	movw	r22, r8
     d4e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     d52:	4b 01       	movw	r8, r22
     d54:	5c 01       	movw	r10, r24
     d56:	60 2f       	mov	r22, r16
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     d62:	2b 01       	movw	r4, r22
     d64:	3c 01       	movw	r6, r24
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4f e2       	ldi	r20, 0x2F	; 47
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	c7 01       	movw	r24, r14
     d70:	b6 01       	movw	r22, r12
     d72:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     d76:	9b 01       	movw	r18, r22
     d78:	ac 01       	movw	r20, r24
     d7a:	c3 01       	movw	r24, r6
     d7c:	b2 01       	movw	r22, r4
     d7e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     d82:	9b 01       	movw	r18, r22
     d84:	ac 01       	movw	r20, r24
     d86:	c5 01       	movw	r24, r10
     d88:	b4 01       	movw	r22, r8
     d8a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	48 e4       	ldi	r20, 0x48	; 72
     d94:	53 e4       	ldi	r21, 0x43	; 67
     d96:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divsf3>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	44 e0       	ldi	r20, 0x04	; 4
     da0:	52 e4       	ldi	r21, 0x42	; 66
     da2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     da6:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fixunssfsi>
     daa:	86 2f       	mov	r24, r22
     dac:	87 cf       	rjmp	.-242    	; 0xcbc <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dae:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	fc 01       	movw	r30, r24
     dba:	ee 59       	subi	r30, 0x9E	; 158
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	b7 01       	movw	r22, r14
     dc4:	68 1b       	sub	r22, r24
     dc6:	79 0b       	sbc	r23, r25
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     dd8:	4b 01       	movw	r8, r22
     dda:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ddc:	b6 01       	movw	r22, r12
     dde:	dd 0c       	add	r13, r13
     de0:	88 0b       	sbc	r24, r24
     de2:	99 0b       	sbc	r25, r25
     de4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__floatsisf>
     de8:	2b 01       	movw	r4, r22
     dea:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     dec:	b7 01       	movw	r22, r14
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     df6:	6b 01       	movw	r12, r22
     df8:	7c 01       	movw	r14, r24
     dfa:	60 2f       	mov	r22, r16
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	a9 01       	movw	r20, r18
     e18:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     e1c:	a5 01       	movw	r20, r10
     e1e:	94 01       	movw	r18, r8
     e20:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     e24:	9b 01       	movw	r18, r22
     e26:	ac 01       	movw	r20, r24
     e28:	c7 01       	movw	r24, r14
     e2a:	b6 01       	movw	r22, r12
     e2c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     e30:	9b 01       	movw	r18, r22
     e32:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e34:	c3 01       	movw	r24, r6
     e36:	b2 01       	movw	r22, r4
     e38:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
                b=((int)((int)b/(int)slope));
     e48:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixsfsi>
     e4c:	7b 01       	movw	r14, r22
     e4e:	c5 01       	movw	r24, r10
     e50:	b4 01       	movw	r22, r8
     e52:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixsfsi>
     e56:	ab 01       	movw	r20, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	c7 01       	movw	r24, r14
     e5c:	ba 01       	movw	r22, r20
     e5e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divmodhi4>
                dist_low=b;
     e62:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e64:	6f 3f       	cpi	r22, 0xFF	; 255
     e66:	09 f0       	breq	.+2      	; 0xe6a <estimate_distance+0x484>
     e68:	52 cf       	rjmp	.-348    	; 0xd0e <estimate_distance+0x328>
     e6a:	26 cf       	rjmp	.-436    	; 0xcb8 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e6c:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e6e:	85 e0       	ldi	r24, 0x05	; 5
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	7c 01       	movw	r14, r24
     e74:	f1 e0       	ldi	r31, 0x01	; 1
     e76:	ef 1a       	sub	r14, r31
     e78:	f1 08       	sbc	r15, r1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	a9 01       	movw	r20, r18
     e96:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     e9a:	69 83       	std	Y+1, r22	; 0x01
     e9c:	7a 83       	std	Y+2, r23	; 0x02
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     ea2:	40 ce       	rjmp	.-896    	; 0xb24 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ea4:	01 e0       	ldi	r16, 0x01	; 1
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	84 cf       	rjmp	.-248    	; 0xdb4 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	df cf       	rjmp	.-66     	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eb4:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	7c cf       	rjmp	.-264    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ebc:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	d7 cf       	rjmp	.-82     	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ec4:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	74 cf       	rjmp	.-280    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ecc:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	cf cf       	rjmp	.-98     	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ed4:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	6c cf       	rjmp	.-296    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     edc:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     ede:	84 e0       	ldi	r24, 0x04	; 4
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	c7 cf       	rjmp	.-114    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ee4:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     ee6:	86 e0       	ldi	r24, 0x06	; 6
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	64 cf       	rjmp	.-312    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eec:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     eee:	86 e0       	ldi	r24, 0x06	; 6
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	bf cf       	rjmp	.-130    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef4:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	5c cf       	rjmp	.-328    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     efc:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     efe:	87 e0       	ldi	r24, 0x07	; 7
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	b7 cf       	rjmp	.-146    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f04:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	54 cf       	rjmp	.-344    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f0c:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f0e:	88 e0       	ldi	r24, 0x08	; 8
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	af cf       	rjmp	.-162    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f14:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     f16:	89 e0       	ldi	r24, 0x09	; 9
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	4c cf       	rjmp	.-360    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f1c:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     f1e:	89 e0       	ldi	r24, 0x09	; 9
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a7 cf       	rjmp	.-178    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f24:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     f26:	8a e0       	ldi	r24, 0x0A	; 10
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	44 cf       	rjmp	.-376    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f2c:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f2e:	8a e0       	ldi	r24, 0x0A	; 10
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9f cf       	rjmp	.-194    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f34:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f36:	8b e0       	ldi	r24, 0x0B	; 11
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9b cf       	rjmp	.-202    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f3c:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     f3e:	8b e0       	ldi	r24, 0x0B	; 11
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	38 cf       	rjmp	.-400    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f44:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     f46:	8c e0       	ldi	r24, 0x0C	; 12
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	93 cf       	rjmp	.-218    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f4c:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     f4e:	8c e0       	ldi	r24, 0x0C	; 12
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	30 cf       	rjmp	.-416    	; 0xdb4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f54:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f56:	8d e0       	ldi	r24, 0x0D	; 13
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	8b cf       	rjmp	.-234    	; 0xe72 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f5c:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f5e:	8d e0       	ldi	r24, 0x0D	; 13
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	28 cf       	rjmp	.-432    	; 0xdb4 <estimate_distance+0x3ce>

00000f64 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
    tx_clock += tx_increment;
     f86:	20 91 83 01 	lds	r18, 0x0183
     f8a:	30 91 84 01 	lds	r19, 0x0184
     f8e:	80 91 81 01 	lds	r24, 0x0181
     f92:	90 91 82 01 	lds	r25, 0x0182
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	90 93 84 01 	sts	0x0184, r25
     f9e:	80 93 83 01 	sts	0x0183, r24
    tx_increment = 0xFF;
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 82 01 	sts	0x0182, r25
     faa:	80 93 81 01 	sts	0x0181, r24
    OCR0A = tx_increment;
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     fb2:	80 91 5f 01 	lds	r24, 0x015F
     fb6:	90 91 60 01 	lds	r25, 0x0160
     fba:	a0 91 61 01 	lds	r26, 0x0161
     fbe:	b0 91 62 01 	lds	r27, 0x0162
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	a1 1d       	adc	r26, r1
     fc6:	b1 1d       	adc	r27, r1
     fc8:	80 93 5f 01 	sts	0x015F, r24
     fcc:	90 93 60 01 	sts	0x0160, r25
     fd0:	a0 93 61 01 	sts	0x0161, r26
     fd4:	b0 93 62 01 	sts	0x0162, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     fd8:	80 91 63 01 	lds	r24, 0x0163
     fdc:	81 11       	cpse	r24, r1
     fde:	0f c0       	rjmp	.+30     	; 0xffe <__vector_14+0x9a>
     fe0:	80 91 92 01 	lds	r24, 0x0192
     fe4:	90 91 93 01 	lds	r25, 0x0193
     fe8:	20 91 83 01 	lds	r18, 0x0183
     fec:	30 91 84 01 	lds	r19, 0x0184
     ff0:	82 17       	cp	r24, r18
     ff2:	93 07       	cpc	r25, r19
     ff4:	20 f4       	brcc	.+8      	; 0xffe <__vector_14+0x9a>
     ff6:	80 91 37 01 	lds	r24, 0x0137
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	89 f0       	breq	.+34     	; 0x1020 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1020:	e0 91 11 01 	lds	r30, 0x0111
    1024:	f0 91 12 01 	lds	r31, 0x0112
    1028:	09 95       	icall
        if (msg) {
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	41 f3       	breq	.-48     	; 0xffe <__vector_14+0x9a>
            if (message_send(msg)) {
    102e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <message_send>
    1032:	81 11       	cpse	r24, r1
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1036:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <rand>
    103a:	99 27       	eor	r25, r25
    103c:	90 93 82 01 	sts	0x0182, r25
    1040:	80 93 81 01 	sts	0x0181, r24
                OCR0A = tx_increment;
    1044:	87 bd       	out	0x27, r24	; 39
    1046:	db cf       	rjmp	.-74     	; 0xffe <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1048:	e0 91 0f 01 	lds	r30, 0x010F
    104c:	f0 91 10 01 	lds	r31, 0x0110
    1050:	09 95       	icall
                tx_clock = 0;
    1052:	10 92 84 01 	sts	0x0184, r1
    1056:	10 92 83 01 	sts	0x0183, r1
    105a:	d1 cf       	rjmp	.-94     	; 0xffe <__vector_14+0x9a>

0000105c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    105c:	80 ff       	sbrs	r24, 0
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <set_color+0x26>
        DDRD |= (1<<5);
    1060:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1062:	81 ff       	sbrs	r24, 1
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <set_color+0x2c>
        DDRD |= (1<<4);
    1066:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1068:	82 ff       	sbrs	r24, 2
    106a:	11 c0       	rjmp	.+34     	; 0x108e <set_color+0x32>
        DDRC |= (1<<3);
    106c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    106e:	83 ff       	sbrs	r24, 3
    1070:	11 c0       	rjmp	.+34     	; 0x1094 <set_color+0x38>
        DDRC |= (1<<2);
    1072:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1074:	84 ff       	sbrs	r24, 4
    1076:	11 c0       	rjmp	.+34     	; 0x109a <set_color+0x3e>
        DDRC |= (1<<5);
    1078:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    107a:	85 fd       	sbrc	r24, 5
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    107e:	3c 98       	cbi	0x07, 4	; 7
    1080:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1082:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1084:	81 fd       	sbrc	r24, 1
    1086:	ef cf       	rjmp	.-34     	; 0x1066 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1088:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    108a:	82 fd       	sbrc	r24, 2
    108c:	ef cf       	rjmp	.-34     	; 0x106c <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    108e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1090:	83 fd       	sbrc	r24, 3
    1092:	ef cf       	rjmp	.-34     	; 0x1072 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1094:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1096:	84 fd       	sbrc	r24, 4
    1098:	ef cf       	rjmp	.-34     	; 0x1078 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    109a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    109c:	85 ff       	sbrs	r24, 5
    109e:	ef cf       	rjmp	.-34     	; 0x107e <set_color+0x22>
        DDRC |= (1<<4);
    10a0:	3c 9a       	sbi	0x07, 4	; 7
    10a2:	08 95       	ret

000010a4 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    rx_timer_off();
    10b2:	10 92 81 00 	sts	0x0081, r1
    10b6:	10 92 85 00 	sts	0x0085, r1
    10ba:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 3c 01 	sts	0x013C, r24
    rx_leadingbyte = 1;
    10c4:	80 93 80 01 	sts	0x0180, r24
    rx_busy = 0;
    10c8:	10 92 63 01 	sts	0x0163, r1
    adc_trigger_high_gain();
    10cc:	10 92 7c 00 	sts	0x007C, r1
    10d0:	93 ea       	ldi	r25, 0xA3	; 163
    10d2:	90 93 7a 00 	sts	0x007A, r25
    10d6:	80 93 7b 00 	sts	0x007B, r24
}
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    110e:	20 91 84 00 	lds	r18, 0x0084
    1112:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	40 93 63 01 	sts	0x0163, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    111c:	80 91 3c 01 	lds	r24, 0x013C
    1120:	88 23       	and	r24, r24
    1122:	a9 f1       	breq	.+106    	; 0x118e <__vector_23+0xa6>
        rx_timer_on();
    1124:	10 92 85 00 	sts	0x0085, r1
    1128:	10 92 84 00 	sts	0x0084, r1
    112c:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1130:	10 92 94 01 	sts	0x0194, r1
        rx_leadingbit = 0;
    1134:	10 92 3c 01 	sts	0x013C, r1
        if (rx_leadingbyte) {
    1138:	80 91 80 01 	lds	r24, 0x0180
    113c:	88 23       	and	r24, r24
    113e:	a1 f0       	breq	.+40     	; 0x1168 <__vector_23+0x80>
            adc_finish_conversion();
    1140:	80 91 7a 00 	lds	r24, 0x007A
    1144:	86 fd       	sbrc	r24, 6
    1146:	fc cf       	rjmp	.-8      	; 0x1140 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1148:	80 91 78 00 	lds	r24, 0x0078
    114c:	90 91 79 00 	lds	r25, 0x0079
    1150:	90 93 5e 01 	sts	0x015E, r25
    1154:	80 93 5d 01 	sts	0x015D, r24
            adc_trigger_low_gain();
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 7c 00 	sts	0x007C, r24
    115e:	93 ea       	ldi	r25, 0xA3	; 163
    1160:	90 93 7a 00 	sts	0x007A, r25
    1164:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    118e:	c9 01       	movw	r24, r18
    1190:	87 58       	subi	r24, 0x87	; 135
    1192:	91 09       	sbc	r25, r1
    1194:	84 37       	cpi	r24, 0x74	; 116
    1196:	99 40       	sbci	r25, 0x09	; 9
    1198:	08 f0       	brcs	.+2      	; 0x119c <__vector_23+0xb4>
    119a:	52 c0       	rjmp	.+164    	; 0x1240 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    119c:	26 58       	subi	r18, 0x86	; 134
    119e:	31 09       	sbc	r19, r1
    11a0:	a4 ef       	ldi	r26, 0xF4	; 244
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	0e 94 44 0b 	call	0x1688	; 0x1688 <__umulhisi3>
    11a8:	aa 27       	eor	r26, r26
    11aa:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	91 05       	cpc	r25, r1
    11b0:	a1 05       	cpc	r26, r1
    11b2:	b1 05       	cpc	r27, r1
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <__vector_23+0xd0>
    11b6:	7b c0       	rjmp	.+246    	; 0x12ae <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    11b8:	40 93 3c 01 	sts	0x013C, r20
                if (rx_leadingbyte) {
    11bc:	80 91 80 01 	lds	r24, 0x0180
    11c0:	81 11       	cpse	r24, r1
    11c2:	52 c0       	rjmp	.+164    	; 0x1268 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    11c4:	80 91 5a 01 	lds	r24, 0x015A
    11c8:	e8 2f       	mov	r30, r24
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ea 57       	subi	r30, 0x7A	; 122
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	90 91 94 01 	lds	r25, 0x0194
    11d4:	90 83       	st	Z, r25
                    rx_byteindex++;
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	80 93 5a 01 	sts	0x015A, r24
                    if (rx_byteindex == sizeof(message_t)) {
    11dc:	8c 30       	cpi	r24, 0x0C	; 12
    11de:	21 f6       	brne	.-120    	; 0x1168 <__vector_23+0x80>
                        rx_timer_off();
    11e0:	10 92 81 00 	sts	0x0081, r1
    11e4:	10 92 85 00 	sts	0x0085, r1
    11e8:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    11ec:	40 93 80 01 	sts	0x0180, r20
                        rx_busy = 0;
    11f0:	10 92 63 01 	sts	0x0163, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    11f4:	c0 91 90 01 	lds	r28, 0x0190
    11f8:	d0 91 91 01 	lds	r29, 0x0191
    11fc:	86 e8       	ldi	r24, 0x86	; 134
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <message_crc>
    1204:	c8 17       	cp	r28, r24
    1206:	d9 07       	cpc	r29, r25
    1208:	09 f0       	breq	.+2      	; 0x120c <__vector_23+0x124>
    120a:	ae cf       	rjmp	.-164    	; 0x1168 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    120c:	80 91 8f 01 	lds	r24, 0x018F
    1210:	87 ff       	sbrs	r24, 7
    1212:	61 c0       	rjmp	.+194    	; 0x12d6 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1214:	98 e7       	ldi	r25, 0x78	; 120
    1216:	98 0f       	add	r25, r24
    1218:	93 30       	cpi	r25, 0x03	; 3
    121a:	30 f0       	brcs	.+12     	; 0x1228 <__vector_23+0x140>
        motors_off();
    121c:	53 98       	cbi	0x0a, 3	; 10
    121e:	23 98       	cbi	0x04, 3	; 4
    1220:	10 92 b4 00 	sts	0x00B4, r1
    1224:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	fc 01       	movw	r30, r24
    122c:	e0 58       	subi	r30, 0x80	; 128
    122e:	f1 09       	sbc	r31, r1
    1230:	eb 30       	cpi	r30, 0x0B	; 11
    1232:	f1 05       	cpc	r31, r1
    1234:	08 f0       	brcs	.+2      	; 0x1238 <__vector_23+0x150>
    1236:	98 cf       	rjmp	.-208    	; 0x1168 <__vector_23+0x80>
    1238:	e5 5c       	subi	r30, 0xC5	; 197
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1240:	10 92 81 00 	sts	0x0081, r1
    1244:	10 92 85 00 	sts	0x0085, r1
    1248:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    124c:	40 93 3c 01 	sts	0x013C, r20
            rx_leadingbyte = 1;
    1250:	40 93 80 01 	sts	0x0180, r20
            rx_busy = 0;
    1254:	10 92 63 01 	sts	0x0163, r1
            adc_trigger_high_gain();
    1258:	10 92 7c 00 	sts	0x007C, r1
    125c:	83 ea       	ldi	r24, 0xA3	; 163
    125e:	80 93 7a 00 	sts	0x007A, r24
    1262:	40 93 7b 00 	sts	0x007B, r20
    1266:	80 cf       	rjmp	.-256    	; 0x1168 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1268:	80 91 7a 00 	lds	r24, 0x007A
    126c:	86 fd       	sbrc	r24, 6
    126e:	fc cf       	rjmp	.-8      	; 0x1268 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1270:	80 91 78 00 	lds	r24, 0x0078
    1274:	90 91 79 00 	lds	r25, 0x0079
    1278:	90 93 5c 01 	sts	0x015C, r25
    127c:	80 93 5b 01 	sts	0x015B, r24
                    adc_trigger_high_gain();
    1280:	10 92 7c 00 	sts	0x007C, r1
    1284:	83 ea       	ldi	r24, 0xA3	; 163
    1286:	80 93 7a 00 	sts	0x007A, r24
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1290:	90 91 94 01 	lds	r25, 0x0194
    1294:	99 23       	and	r25, r25
    1296:	d1 f0       	breq	.+52     	; 0x12cc <__vector_23+0x1e4>
                        rx_timer_off();
    1298:	10 92 81 00 	sts	0x0081, r1
    129c:	10 92 85 00 	sts	0x0085, r1
    12a0:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12a4:	80 93 80 01 	sts	0x0180, r24
                        rx_busy = 0;
    12a8:	10 92 63 01 	sts	0x0163, r1
    12ac:	5d cf       	rjmp	.-326    	; 0x1168 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	f9 01       	movw	r30, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <__vector_23+0x1d2>
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <__vector_23+0x1ce>
    12be:	cf 01       	movw	r24, r30
    12c0:	90 91 94 01 	lds	r25, 0x0194
    12c4:	89 2b       	or	r24, r25
    12c6:	80 93 94 01 	sts	0x0194, r24
    12ca:	4e cf       	rjmp	.-356    	; 0x1168 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    12cc:	10 92 80 01 	sts	0x0180, r1
                        rx_byteindex = 0;
    12d0:	10 92 5a 01 	sts	0x015A, r1
    12d4:	49 cf       	rjmp	.-366    	; 0x1168 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    12d6:	e0 91 13 01 	lds	r30, 0x0113
    12da:	f0 91 14 01 	lds	r31, 0x0114
    12de:	6b e5       	ldi	r22, 0x5B	; 91
    12e0:	71 e0       	ldi	r23, 0x01	; 1
    12e2:	86 e8       	ldi	r24, 0x86	; 134
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	09 95       	icall
    12e8:	3f cf       	rjmp	.-386    	; 0x1168 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12ea:	80 91 86 01 	lds	r24, 0x0186
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <__vector_23+0x20c>
    12f2:	dd c0       	rjmp	.+442    	; 0x14ae <__vector_23+0x3c6>
    12f4:	08 f4       	brcc	.+2      	; 0x12f8 <__vector_23+0x210>
    12f6:	ba c0       	rjmp	.+372    	; 0x146c <__vector_23+0x384>
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__vector_23+0x216>
    12fc:	c6 c0       	rjmp	.+396    	; 0x148a <__vector_23+0x3a2>
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	09 f0       	breq	.+2      	; 0x1304 <__vector_23+0x21c>
    1302:	b1 c0       	rjmp	.+354    	; 0x1466 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1304:	80 91 35 01 	lds	r24, 0x0135
    1308:	90 91 8c 01 	lds	r25, 0x018C
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	09 f4       	brne	.+2      	; 0x1312 <__vector_23+0x22a>
    1310:	e3 c0       	rjmp	.+454    	; 0x14d8 <__vector_23+0x3f0>
    1312:	80 91 8b 01 	lds	r24, 0x018B
                        prev_motion = MOVE_STOP;
    1316:	10 92 36 01 	sts	0x0136, r1
                        cur_motion = MOVE_STRAIGHT;
    131a:	23 e0       	ldi	r18, 0x03	; 3
    131c:	20 93 35 01 	sts	0x0135, r18
                        kilo_straight_left = calibmsg->straight_left;
    1320:	80 93 97 01 	sts	0x0197, r24
                        kilo_straight_right = calibmsg->straight_right;
    1324:	90 93 98 01 	sts	0x0198, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1328:	80 91 37 01 	lds	r24, 0x0137
    132c:	86 30       	cpi	r24, 0x06	; 6
    132e:	09 f4       	brne	.+2      	; 0x1332 <__vector_23+0x24a>
    1330:	1b cf       	rjmp	.-458    	; 0x1168 <__vector_23+0x80>
                motors_on();
    1332:	53 9a       	sbi	0x0a, 3	; 10
    1334:	23 9a       	sbi	0x04, 3	; 4
    1336:	10 92 b4 00 	sts	0x00B4, r1
    133a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    133e:	86 e0       	ldi	r24, 0x06	; 6
    1340:	80 93 37 01 	sts	0x0137, r24
    1344:	11 cf       	rjmp	.-478    	; 0x1168 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1346:	80 91 37 01 	lds	r24, 0x0137
    134a:	86 30       	cpi	r24, 0x06	; 6
    134c:	99 f0       	breq	.+38     	; 0x1374 <__vector_23+0x28c>
                motors_on();
    134e:	53 9a       	sbi	0x0a, 3	; 10
    1350:	23 9a       	sbi	0x04, 3	; 4
    1352:	10 92 b4 00 	sts	0x00B4, r1
    1356:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    135a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    135c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    135e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1360:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1362:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1364:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1366:	10 92 35 01 	sts	0x0135, r1
    136a:	10 92 36 01 	sts	0x0136, r1
                kilo_state = MOVING;
    136e:	86 e0       	ldi	r24, 0x06	; 6
    1370:	80 93 37 01 	sts	0x0137, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9c 01       	movw	r18, r24
    137a:	00 90 86 01 	lds	r0, 0x0186
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <__vector_23+0x29c>
    1380:	22 0f       	add	r18, r18
    1382:	33 1f       	adc	r19, r19
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <__vector_23+0x298>
    1388:	80 91 95 01 	lds	r24, 0x0195
    138c:	90 91 96 01 	lds	r25, 0x0196
    1390:	82 23       	and	r24, r18
    1392:	93 23       	and	r25, r19
    1394:	89 2b       	or	r24, r25
    1396:	09 f0       	breq	.+2      	; 0x139a <__vector_23+0x2b2>
    1398:	86 c0       	rjmp	.+268    	; 0x14a6 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    139a:	10 92 35 01 	sts	0x0135, r1
    139e:	e4 ce       	rjmp	.-568    	; 0x1168 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	80 93 37 01 	sts	0x0137, r24
    13a6:	e0 ce       	rjmp	.-576    	; 0x1168 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    13a8:	e0 e0       	ldi	r30, 0x00	; 0
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    13ae:	80 91 6e 00 	lds	r24, 0x006E
    13b2:	8d 7f       	andi	r24, 0xFD	; 253
    13b4:	80 93 6e 00 	sts	0x006E, r24
    13b8:	16 bc       	out	0x26, r1	; 38
            bootload();
    13ba:	e0 e0       	ldi	r30, 0x00	; 0
    13bc:	f0 e7       	ldi	r31, 0x70	; 112
    13be:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    13c0:	10 92 37 01 	sts	0x0137, r1
    13c4:	d1 ce       	rjmp	.-606    	; 0x1168 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	80 93 37 01 	sts	0x0137, r24
    13cc:	cd ce       	rjmp	.-614    	; 0x1168 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    13ce:	85 e0       	ldi	r24, 0x05	; 5
    13d0:	80 93 37 01 	sts	0x0137, r24
    13d4:	c9 ce       	rjmp	.-622    	; 0x1168 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    13d6:	80 91 37 01 	lds	r24, 0x0137
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <__vector_23+0x2f8>
    13de:	c4 ce       	rjmp	.-632    	; 0x1168 <__vector_23+0x80>
    13e0:	80 91 37 01 	lds	r24, 0x0137
    13e4:	84 30       	cpi	r24, 0x04	; 4
    13e6:	09 f4       	brne	.+2      	; 0x13ea <__vector_23+0x302>
    13e8:	bf ce       	rjmp	.-642    	; 0x1168 <__vector_23+0x80>
                motors_on();
    13ea:	53 9a       	sbi	0x0a, 3	; 10
    13ec:	23 9a       	sbi	0x04, 3	; 4
    13ee:	10 92 b4 00 	sts	0x00B4, r1
    13f2:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	80 93 37 01 	sts	0x0137, r24
    13fc:	b5 ce       	rjmp	.-662    	; 0x1168 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    13fe:	80 91 37 01 	lds	r24, 0x0137
    1402:	86 30       	cpi	r24, 0x06	; 6
    1404:	09 f0       	breq	.+2      	; 0x1408 <__vector_23+0x320>
    1406:	b0 ce       	rjmp	.-672    	; 0x1168 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1408:	60 91 95 01 	lds	r22, 0x0195
    140c:	80 eb       	ldi	r24, 0xB0	; 176
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 6f 10 	call	0x20de	; 0x20de <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1414:	60 91 96 01 	lds	r22, 0x0196
    1418:	81 eb       	ldi	r24, 0xB1	; 177
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 6f 10 	call	0x20de	; 0x20de <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1420:	60 91 99 01 	lds	r22, 0x0199
    1424:	85 e0       	ldi	r24, 0x05	; 5
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 6f 10 	call	0x20de	; 0x20de <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    142c:	60 91 85 01 	lds	r22, 0x0185
    1430:	89 e0       	ldi	r24, 0x09	; 9
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 6f 10 	call	0x20de	; 0x20de <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1438:	60 91 97 01 	lds	r22, 0x0197
    143c:	8c e0       	ldi	r24, 0x0C	; 12
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 6f 10 	call	0x20de	; 0x20de <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1444:	60 91 98 01 	lds	r22, 0x0198
    1448:	84 e1       	ldi	r24, 0x14	; 20
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 6f 10 	call	0x20de	; 0x20de <eeprom_write_byte>
                        motors_off();
    1450:	53 98       	cbi	0x0a, 3	; 10
    1452:	23 98       	cbi	0x04, 3	; 4
    1454:	10 92 b4 00 	sts	0x00B4, r1
    1458:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 37 01 	sts	0x0137, r24
    1462:	80 91 86 01 	lds	r24, 0x0186
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1466:	81 11       	cpse	r24, r1
    1468:	5f cf       	rjmp	.-322    	; 0x1328 <__vector_23+0x240>
    146a:	7e ce       	rjmp	.-772    	; 0x1168 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    146c:	88 23       	and	r24, r24
    146e:	39 f2       	breq	.-114    	; 0x13fe <__vector_23+0x316>
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	c9 f7       	brne	.-14     	; 0x1466 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1474:	80 91 87 01 	lds	r24, 0x0187
    1478:	90 91 88 01 	lds	r25, 0x0188
    147c:	90 93 96 01 	sts	0x0196, r25
    1480:	80 93 95 01 	sts	0x0195, r24
                    cur_motion = MOVE_STOP;
    1484:	10 92 35 01 	sts	0x0135, r1
    1488:	4f cf       	rjmp	.-354    	; 0x1328 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    148a:	80 91 35 01 	lds	r24, 0x0135
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	71 f1       	breq	.+92     	; 0x14ee <__vector_23+0x406>
    1492:	80 91 8a 01 	lds	r24, 0x018A
                        prev_motion = MOVE_STOP;
    1496:	10 92 36 01 	sts	0x0136, r1
                        cur_motion = MOVE_RIGHT;
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	90 93 35 01 	sts	0x0135, r25
                        kilo_turn_right = calibmsg->turn_right;
    14a0:	80 93 85 01 	sts	0x0185, r24
    14a4:	41 cf       	rjmp	.-382    	; 0x1328 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	80 93 35 01 	sts	0x0135, r24
    14ac:	5d ce       	rjmp	.-838    	; 0x1168 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14ae:	80 91 35 01 	lds	r24, 0x0135
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	51 f0       	breq	.+20     	; 0x14ca <__vector_23+0x3e2>
    14b6:	80 91 89 01 	lds	r24, 0x0189
                        prev_motion = MOVE_STOP;
    14ba:	10 92 36 01 	sts	0x0136, r1
                        cur_motion = MOVE_LEFT;
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	90 93 35 01 	sts	0x0135, r25
                        kilo_turn_left = calibmsg->turn_left;
    14c4:	80 93 99 01 	sts	0x0199, r24
    14c8:	2f cf       	rjmp	.-418    	; 0x1328 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14ca:	80 91 89 01 	lds	r24, 0x0189
    14ce:	90 91 99 01 	lds	r25, 0x0199
    14d2:	89 13       	cpse	r24, r25
    14d4:	f2 cf       	rjmp	.-28     	; 0x14ba <__vector_23+0x3d2>
    14d6:	28 cf       	rjmp	.-432    	; 0x1328 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    14d8:	80 91 98 01 	lds	r24, 0x0198
    14dc:	98 13       	cpse	r25, r24
    14de:	19 cf       	rjmp	.-462    	; 0x1312 <__vector_23+0x22a>
    14e0:	80 91 8b 01 	lds	r24, 0x018B
    14e4:	20 91 97 01 	lds	r18, 0x0197
    14e8:	82 13       	cpse	r24, r18
    14ea:	15 cf       	rjmp	.-470    	; 0x1316 <__vector_23+0x22e>
    14ec:	1d cf       	rjmp	.-454    	; 0x1328 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14ee:	80 91 8a 01 	lds	r24, 0x018A
    14f2:	90 91 85 01 	lds	r25, 0x0185
    14f6:	89 13       	cpse	r24, r25
    14f8:	ce cf       	rjmp	.-100    	; 0x1496 <__vector_23+0x3ae>
    14fa:	16 cf       	rjmp	.-468    	; 0x1328 <__vector_23+0x240>

000014fc <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    14fc:	fc 01       	movw	r30, r24
    14fe:	ac 01       	movw	r20, r24
    1500:	46 5f       	subi	r20, 0xF6	; 246
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1508:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    150a:	82 27       	eor	r24, r18
    150c:	08 2e       	mov	r0, r24
    150e:	82 95       	swap	r24
    1510:	80 7f       	andi	r24, 0xF0	; 240
    1512:	80 25       	eor	r24, r0
    1514:	09 2e       	mov	r0, r25
    1516:	98 2f       	mov	r25, r24
    1518:	82 95       	swap	r24
    151a:	8f 70       	andi	r24, 0x0F	; 15
    151c:	08 26       	eor	r0, r24
    151e:	86 95       	lsr	r24
    1520:	98 27       	eor	r25, r24
    1522:	89 27       	eor	r24, r25
    1524:	88 0f       	add	r24, r24
    1526:	88 0f       	add	r24, r24
    1528:	88 0f       	add	r24, r24
    152a:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    152c:	e4 17       	cp	r30, r20
    152e:	f5 07       	cpc	r31, r21
    1530:	59 f7       	brne	.-42     	; 0x1508 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1532:	08 95       	ret

00001534 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1534:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1536:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1538:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    153a:	20 91 59 01 	lds	r18, 0x0159
    or tmpreg1, ddrreg
    153e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1540:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1542:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1544:	30 91 59 01 	lds	r19, 0x0159
    1548:	20 30       	cpi	r18, 0x00	; 0
    154a:	29 f0       	breq	.+10     	; 0x1556 <message_send+0x22>
    154c:	00 00       	nop
    154e:	25 b1       	in	r18, 0x05	; 5
    1550:	23 2b       	or	r18, r19
    1552:	25 b9       	out	0x05, r18	; 5
    1554:	04 c0       	rjmp	.+8      	; 0x155e <message_send+0x2a>
    1556:	00 00       	nop
    1558:	00 00       	nop
    155a:	00 00       	nop
    155c:	00 c0       	rjmp	.+0      	; 0x155e <message_send+0x2a>
    155e:	00 00       	nop
    1560:	00 00       	nop
    1562:	00 00       	nop
    1564:	30 95       	com	r19
    1566:	25 b1       	in	r18, 0x05	; 5
    1568:	23 23       	and	r18, r19
    156a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    156c:	2e ea       	ldi	r18, 0xAE	; 174
    156e:	2a 95       	dec	r18
    1570:	f1 f7       	brne	.-4      	; 0x156e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1572:	2b ee       	ldi	r18, 0xEB	; 235

00001574 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1574:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1576:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1578:	0a c0       	rjmp	.+20     	; 0x158e <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    157a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    157c:	30 91 59 01 	lds	r19, 0x0159
    com tmpreg2
    1580:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1582:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1584:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1586:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1588:	0f be       	out	0x3f, r0	; 63
    return 0
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	08 95       	ret

0000158e <nocollision>:
nocollision:
    nop
    158e:	00 00       	nop
    dec tmpreg1
    1590:	2a 95       	dec	r18
    brne checkcollision
    1592:	81 f7       	brne	.-32     	; 0x1574 <checkcollision>

    ldi tmpreg1, 0x01
    1594:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1596:	30 91 59 01 	lds	r19, 0x0159
    159a:	20 30       	cpi	r18, 0x00	; 0
    159c:	29 f0       	breq	.+10     	; 0x15a8 <nocollision+0x1a>
    159e:	00 00       	nop
    15a0:	25 b1       	in	r18, 0x05	; 5
    15a2:	23 2b       	or	r18, r19
    15a4:	25 b9       	out	0x05, r18	; 5
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <nocollision+0x22>
    15a8:	00 00       	nop
    15aa:	00 00       	nop
    15ac:	00 00       	nop
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <nocollision+0x22>
    15b0:	00 00       	nop
    15b2:	00 00       	nop
    15b4:	00 00       	nop
    15b6:	30 95       	com	r19
    15b8:	25 b1       	in	r18, 0x05	; 5
    15ba:	23 23       	and	r18, r19
    15bc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    15be:	00 00       	nop
    15c0:	24 e5       	ldi	r18, 0x54	; 84
    15c2:	2a 95       	dec	r18
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    15c6:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    15c8:	8c e0       	ldi	r24, 0x0C	; 12

000015ca <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    15ca:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    15ce:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    15d0:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    15d2:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    15d4:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    15d6:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    15da:	50 e0       	ldi	r21, 0x00	; 0

000015dc <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    15dc:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    15de:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    15e0:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    15e2:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    15e4:	30 91 59 01 	lds	r19, 0x0159
    15e8:	20 30       	cpi	r18, 0x00	; 0
    15ea:	29 f0       	breq	.+10     	; 0x15f6 <sendbit+0x1a>
    15ec:	00 00       	nop
    15ee:	25 b1       	in	r18, 0x05	; 5
    15f0:	23 2b       	or	r18, r19
    15f2:	25 b9       	out	0x05, r18	; 5
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <sendbit+0x22>
    15f6:	00 00       	nop
    15f8:	00 00       	nop
    15fa:	00 00       	nop
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <sendbit+0x22>
    15fe:	00 00       	nop
    1600:	00 00       	nop
    1602:	00 00       	nop
    1604:	30 95       	com	r19
    1606:	25 b1       	in	r18, 0x05	; 5
    1608:	23 23       	and	r18, r19
    160a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    160c:	00 00       	nop
    160e:	21 e5       	ldi	r18, 0x51	; 81
    1610:	2a 95       	dec	r18
    1612:	f1 f7       	brne	.-4      	; 0x1610 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1614:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1616:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1618:	9a 95       	dec	r25
    brne sendbit
    161a:	01 f7       	brne	.-64     	; 0x15dc <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    161c:	8a 95       	dec	r24
    brne sendbyte
    161e:	a9 f6       	brne	.-86     	; 0x15ca <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1620:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1622:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1624:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1626:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1628:	30 91 59 01 	lds	r19, 0x0159
    com tmpreg2
    162c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    162e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1630:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1632:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1634:	0f be       	out	0x3f, r0	; 63
    return 1
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	08 95       	ret

0000163a <main>:
    }
}

int main()
{
    kilo_init();
    163a:	0e 94 ae 01 	call	0x35c	; 0x35c <kilo_init>
    debug_init();
    163e:	0e 94 38 01 	call	0x270	; 0x270 <debug_init>
    kilo_start(setup, loop);
    1642:	6e e9       	ldi	r22, 0x9E	; 158
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	8a e7       	ldi	r24, 0x7A	; 122
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 aa 02 	call	0x554	; 0x554 <kilo_start>

    return 0;
}
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	08 95       	ret

00001654 <__divmodhi4>:
    1654:	97 fb       	bst	r25, 7
    1656:	07 2e       	mov	r0, r23
    1658:	16 f4       	brtc	.+4      	; 0x165e <__divmodhi4+0xa>
    165a:	00 94       	com	r0
    165c:	07 d0       	rcall	.+14     	; 0x166c <__divmodhi4_neg1>
    165e:	77 fd       	sbrc	r23, 7
    1660:	09 d0       	rcall	.+18     	; 0x1674 <__divmodhi4_neg2>
    1662:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__udivmodhi4>
    1666:	07 fc       	sbrc	r0, 7
    1668:	05 d0       	rcall	.+10     	; 0x1674 <__divmodhi4_neg2>
    166a:	3e f4       	brtc	.+14     	; 0x167a <__divmodhi4_exit>

0000166c <__divmodhi4_neg1>:
    166c:	90 95       	com	r25
    166e:	81 95       	neg	r24
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	08 95       	ret

00001674 <__divmodhi4_neg2>:
    1674:	70 95       	com	r23
    1676:	61 95       	neg	r22
    1678:	7f 4f       	sbci	r23, 0xFF	; 255

0000167a <__divmodhi4_exit>:
    167a:	08 95       	ret

0000167c <__tablejump2__>:
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	05 90       	lpm	r0, Z+
    1682:	f4 91       	lpm	r31, Z
    1684:	e0 2d       	mov	r30, r0
    1686:	09 94       	ijmp

00001688 <__umulhisi3>:
    1688:	a2 9f       	mul	r26, r18
    168a:	b0 01       	movw	r22, r0
    168c:	b3 9f       	mul	r27, r19
    168e:	c0 01       	movw	r24, r0
    1690:	a3 9f       	mul	r26, r19
    1692:	70 0d       	add	r23, r0
    1694:	81 1d       	adc	r24, r1
    1696:	11 24       	eor	r1, r1
    1698:	91 1d       	adc	r25, r1
    169a:	b2 9f       	mul	r27, r18
    169c:	70 0d       	add	r23, r0
    169e:	81 1d       	adc	r24, r1
    16a0:	11 24       	eor	r1, r1
    16a2:	91 1d       	adc	r25, r1
    16a4:	08 95       	ret

000016a6 <__udivmodhi4>:
    16a6:	aa 1b       	sub	r26, r26
    16a8:	bb 1b       	sub	r27, r27
    16aa:	51 e1       	ldi	r21, 0x11	; 17
    16ac:	07 c0       	rjmp	.+14     	; 0x16bc <__udivmodhi4_ep>

000016ae <__udivmodhi4_loop>:
    16ae:	aa 1f       	adc	r26, r26
    16b0:	bb 1f       	adc	r27, r27
    16b2:	a6 17       	cp	r26, r22
    16b4:	b7 07       	cpc	r27, r23
    16b6:	10 f0       	brcs	.+4      	; 0x16bc <__udivmodhi4_ep>
    16b8:	a6 1b       	sub	r26, r22
    16ba:	b7 0b       	sbc	r27, r23

000016bc <__udivmodhi4_ep>:
    16bc:	88 1f       	adc	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	5a 95       	dec	r21
    16c2:	a9 f7       	brne	.-22     	; 0x16ae <__udivmodhi4_loop>
    16c4:	80 95       	com	r24
    16c6:	90 95       	com	r25
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	08 95       	ret

000016ce <__subsf3>:
    16ce:	50 58       	subi	r21, 0x80	; 128

000016d0 <__addsf3>:
    16d0:	bb 27       	eor	r27, r27
    16d2:	aa 27       	eor	r26, r26
    16d4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__addsf3x>
    16d8:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__fp_round>
    16dc:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__fp_pscA>
    16e0:	38 f0       	brcs	.+14     	; 0x16f0 <__addsf3+0x20>
    16e2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fp_pscB>
    16e6:	20 f0       	brcs	.+8      	; 0x16f0 <__addsf3+0x20>
    16e8:	39 f4       	brne	.+14     	; 0x16f8 <__addsf3+0x28>
    16ea:	9f 3f       	cpi	r25, 0xFF	; 255
    16ec:	19 f4       	brne	.+6      	; 0x16f4 <__addsf3+0x24>
    16ee:	26 f4       	brtc	.+8      	; 0x16f8 <__addsf3+0x28>
    16f0:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__fp_nan>
    16f4:	0e f4       	brtc	.+2      	; 0x16f8 <__addsf3+0x28>
    16f6:	e0 95       	com	r30
    16f8:	e7 fb       	bst	r30, 7
    16fa:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_inf>

000016fe <__addsf3x>:
    16fe:	e9 2f       	mov	r30, r25
    1700:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__fp_split3>
    1704:	58 f3       	brcs	.-42     	; 0x16dc <__addsf3+0xc>
    1706:	ba 17       	cp	r27, r26
    1708:	62 07       	cpc	r22, r18
    170a:	73 07       	cpc	r23, r19
    170c:	84 07       	cpc	r24, r20
    170e:	95 07       	cpc	r25, r21
    1710:	20 f0       	brcs	.+8      	; 0x171a <__addsf3x+0x1c>
    1712:	79 f4       	brne	.+30     	; 0x1732 <__addsf3x+0x34>
    1714:	a6 f5       	brtc	.+104    	; 0x177e <__addsf3x+0x80>
    1716:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_zero>
    171a:	0e f4       	brtc	.+2      	; 0x171e <__addsf3x+0x20>
    171c:	e0 95       	com	r30
    171e:	0b 2e       	mov	r0, r27
    1720:	ba 2f       	mov	r27, r26
    1722:	a0 2d       	mov	r26, r0
    1724:	0b 01       	movw	r0, r22
    1726:	b9 01       	movw	r22, r18
    1728:	90 01       	movw	r18, r0
    172a:	0c 01       	movw	r0, r24
    172c:	ca 01       	movw	r24, r20
    172e:	a0 01       	movw	r20, r0
    1730:	11 24       	eor	r1, r1
    1732:	ff 27       	eor	r31, r31
    1734:	59 1b       	sub	r21, r25
    1736:	99 f0       	breq	.+38     	; 0x175e <__addsf3x+0x60>
    1738:	59 3f       	cpi	r21, 0xF9	; 249
    173a:	50 f4       	brcc	.+20     	; 0x1750 <__addsf3x+0x52>
    173c:	50 3e       	cpi	r21, 0xE0	; 224
    173e:	68 f1       	brcs	.+90     	; 0x179a <__addsf3x+0x9c>
    1740:	1a 16       	cp	r1, r26
    1742:	f0 40       	sbci	r31, 0x00	; 0
    1744:	a2 2f       	mov	r26, r18
    1746:	23 2f       	mov	r18, r19
    1748:	34 2f       	mov	r19, r20
    174a:	44 27       	eor	r20, r20
    174c:	58 5f       	subi	r21, 0xF8	; 248
    174e:	f3 cf       	rjmp	.-26     	; 0x1736 <__addsf3x+0x38>
    1750:	46 95       	lsr	r20
    1752:	37 95       	ror	r19
    1754:	27 95       	ror	r18
    1756:	a7 95       	ror	r26
    1758:	f0 40       	sbci	r31, 0x00	; 0
    175a:	53 95       	inc	r21
    175c:	c9 f7       	brne	.-14     	; 0x1750 <__addsf3x+0x52>
    175e:	7e f4       	brtc	.+30     	; 0x177e <__addsf3x+0x80>
    1760:	1f 16       	cp	r1, r31
    1762:	ba 0b       	sbc	r27, r26
    1764:	62 0b       	sbc	r22, r18
    1766:	73 0b       	sbc	r23, r19
    1768:	84 0b       	sbc	r24, r20
    176a:	ba f0       	brmi	.+46     	; 0x179a <__addsf3x+0x9c>
    176c:	91 50       	subi	r25, 0x01	; 1
    176e:	a1 f0       	breq	.+40     	; 0x1798 <__addsf3x+0x9a>
    1770:	ff 0f       	add	r31, r31
    1772:	bb 1f       	adc	r27, r27
    1774:	66 1f       	adc	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	88 1f       	adc	r24, r24
    177a:	c2 f7       	brpl	.-16     	; 0x176c <__addsf3x+0x6e>
    177c:	0e c0       	rjmp	.+28     	; 0x179a <__addsf3x+0x9c>
    177e:	ba 0f       	add	r27, r26
    1780:	62 1f       	adc	r22, r18
    1782:	73 1f       	adc	r23, r19
    1784:	84 1f       	adc	r24, r20
    1786:	48 f4       	brcc	.+18     	; 0x179a <__addsf3x+0x9c>
    1788:	87 95       	ror	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b7 95       	ror	r27
    1790:	f7 95       	ror	r31
    1792:	9e 3f       	cpi	r25, 0xFE	; 254
    1794:	08 f0       	brcs	.+2      	; 0x1798 <__addsf3x+0x9a>
    1796:	b0 cf       	rjmp	.-160    	; 0x16f8 <__addsf3+0x28>
    1798:	93 95       	inc	r25
    179a:	88 0f       	add	r24, r24
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <__addsf3x+0xa2>
    179e:	99 27       	eor	r25, r25
    17a0:	ee 0f       	add	r30, r30
    17a2:	97 95       	ror	r25
    17a4:	87 95       	ror	r24
    17a6:	08 95       	ret

000017a8 <__divsf3>:
    17a8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__divsf3x>
    17ac:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__fp_round>
    17b0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fp_pscB>
    17b4:	58 f0       	brcs	.+22     	; 0x17cc <__divsf3+0x24>
    17b6:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__fp_pscA>
    17ba:	40 f0       	brcs	.+16     	; 0x17cc <__divsf3+0x24>
    17bc:	29 f4       	brne	.+10     	; 0x17c8 <__divsf3+0x20>
    17be:	5f 3f       	cpi	r21, 0xFF	; 255
    17c0:	29 f0       	breq	.+10     	; 0x17cc <__divsf3+0x24>
    17c2:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_inf>
    17c6:	51 11       	cpse	r21, r1
    17c8:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_szero>
    17cc:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__fp_nan>

000017d0 <__divsf3x>:
    17d0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__fp_split3>
    17d4:	68 f3       	brcs	.-38     	; 0x17b0 <__divsf3+0x8>

000017d6 <__divsf3_pse>:
    17d6:	99 23       	and	r25, r25
    17d8:	b1 f3       	breq	.-20     	; 0x17c6 <__divsf3+0x1e>
    17da:	55 23       	and	r21, r21
    17dc:	91 f3       	breq	.-28     	; 0x17c2 <__divsf3+0x1a>
    17de:	95 1b       	sub	r25, r21
    17e0:	55 0b       	sbc	r21, r21
    17e2:	bb 27       	eor	r27, r27
    17e4:	aa 27       	eor	r26, r26
    17e6:	62 17       	cp	r22, r18
    17e8:	73 07       	cpc	r23, r19
    17ea:	84 07       	cpc	r24, r20
    17ec:	38 f0       	brcs	.+14     	; 0x17fc <__divsf3_pse+0x26>
    17ee:	9f 5f       	subi	r25, 0xFF	; 255
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	44 1f       	adc	r20, r20
    17f8:	aa 1f       	adc	r26, r26
    17fa:	a9 f3       	breq	.-22     	; 0x17e6 <__divsf3_pse+0x10>
    17fc:	35 d0       	rcall	.+106    	; 0x1868 <__divsf3_pse+0x92>
    17fe:	0e 2e       	mov	r0, r30
    1800:	3a f0       	brmi	.+14     	; 0x1810 <__divsf3_pse+0x3a>
    1802:	e0 e8       	ldi	r30, 0x80	; 128
    1804:	32 d0       	rcall	.+100    	; 0x186a <__divsf3_pse+0x94>
    1806:	91 50       	subi	r25, 0x01	; 1
    1808:	50 40       	sbci	r21, 0x00	; 0
    180a:	e6 95       	lsr	r30
    180c:	00 1c       	adc	r0, r0
    180e:	ca f7       	brpl	.-14     	; 0x1802 <__divsf3_pse+0x2c>
    1810:	2b d0       	rcall	.+86     	; 0x1868 <__divsf3_pse+0x92>
    1812:	fe 2f       	mov	r31, r30
    1814:	29 d0       	rcall	.+82     	; 0x1868 <__divsf3_pse+0x92>
    1816:	66 0f       	add	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	bb 1f       	adc	r27, r27
    181e:	26 17       	cp	r18, r22
    1820:	37 07       	cpc	r19, r23
    1822:	48 07       	cpc	r20, r24
    1824:	ab 07       	cpc	r26, r27
    1826:	b0 e8       	ldi	r27, 0x80	; 128
    1828:	09 f0       	breq	.+2      	; 0x182c <__divsf3_pse+0x56>
    182a:	bb 0b       	sbc	r27, r27
    182c:	80 2d       	mov	r24, r0
    182e:	bf 01       	movw	r22, r30
    1830:	ff 27       	eor	r31, r31
    1832:	93 58       	subi	r25, 0x83	; 131
    1834:	5f 4f       	sbci	r21, 0xFF	; 255
    1836:	3a f0       	brmi	.+14     	; 0x1846 <__divsf3_pse+0x70>
    1838:	9e 3f       	cpi	r25, 0xFE	; 254
    183a:	51 05       	cpc	r21, r1
    183c:	78 f0       	brcs	.+30     	; 0x185c <__divsf3_pse+0x86>
    183e:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_inf>
    1842:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_szero>
    1846:	5f 3f       	cpi	r21, 0xFF	; 255
    1848:	e4 f3       	brlt	.-8      	; 0x1842 <__divsf3_pse+0x6c>
    184a:	98 3e       	cpi	r25, 0xE8	; 232
    184c:	d4 f3       	brlt	.-12     	; 0x1842 <__divsf3_pse+0x6c>
    184e:	86 95       	lsr	r24
    1850:	77 95       	ror	r23
    1852:	67 95       	ror	r22
    1854:	b7 95       	ror	r27
    1856:	f7 95       	ror	r31
    1858:	9f 5f       	subi	r25, 0xFF	; 255
    185a:	c9 f7       	brne	.-14     	; 0x184e <__divsf3_pse+0x78>
    185c:	88 0f       	add	r24, r24
    185e:	91 1d       	adc	r25, r1
    1860:	96 95       	lsr	r25
    1862:	87 95       	ror	r24
    1864:	97 f9       	bld	r25, 7
    1866:	08 95       	ret
    1868:	e1 e0       	ldi	r30, 0x01	; 1
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	bb 1f       	adc	r27, r27
    1872:	62 17       	cp	r22, r18
    1874:	73 07       	cpc	r23, r19
    1876:	84 07       	cpc	r24, r20
    1878:	ba 07       	cpc	r27, r26
    187a:	20 f0       	brcs	.+8      	; 0x1884 <__divsf3_pse+0xae>
    187c:	62 1b       	sub	r22, r18
    187e:	73 0b       	sbc	r23, r19
    1880:	84 0b       	sbc	r24, r20
    1882:	ba 0b       	sbc	r27, r26
    1884:	ee 1f       	adc	r30, r30
    1886:	88 f7       	brcc	.-30     	; 0x186a <__divsf3_pse+0x94>
    1888:	e0 95       	com	r30
    188a:	08 95       	ret

0000188c <__fixsfsi>:
    188c:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fixunssfsi>
    1890:	68 94       	set
    1892:	b1 11       	cpse	r27, r1
    1894:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_szero>
    1898:	08 95       	ret

0000189a <__fixunssfsi>:
    189a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fp_splitA>
    189e:	88 f0       	brcs	.+34     	; 0x18c2 <__fixunssfsi+0x28>
    18a0:	9f 57       	subi	r25, 0x7F	; 127
    18a2:	98 f0       	brcs	.+38     	; 0x18ca <__fixunssfsi+0x30>
    18a4:	b9 2f       	mov	r27, r25
    18a6:	99 27       	eor	r25, r25
    18a8:	b7 51       	subi	r27, 0x17	; 23
    18aa:	b0 f0       	brcs	.+44     	; 0x18d8 <__fixunssfsi+0x3e>
    18ac:	e1 f0       	breq	.+56     	; 0x18e6 <__fixunssfsi+0x4c>
    18ae:	66 0f       	add	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	1a f0       	brmi	.+6      	; 0x18be <__fixunssfsi+0x24>
    18b8:	ba 95       	dec	r27
    18ba:	c9 f7       	brne	.-14     	; 0x18ae <__fixunssfsi+0x14>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <__fixunssfsi+0x4c>
    18be:	b1 30       	cpi	r27, 0x01	; 1
    18c0:	91 f0       	breq	.+36     	; 0x18e6 <__fixunssfsi+0x4c>
    18c2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_zero>
    18c6:	b1 e0       	ldi	r27, 0x01	; 1
    18c8:	08 95       	ret
    18ca:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_zero>
    18ce:	67 2f       	mov	r22, r23
    18d0:	78 2f       	mov	r23, r24
    18d2:	88 27       	eor	r24, r24
    18d4:	b8 5f       	subi	r27, 0xF8	; 248
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <__fixunssfsi+0x4c>
    18d8:	b9 3f       	cpi	r27, 0xF9	; 249
    18da:	cc f3       	brlt	.-14     	; 0x18ce <__fixunssfsi+0x34>
    18dc:	86 95       	lsr	r24
    18de:	77 95       	ror	r23
    18e0:	67 95       	ror	r22
    18e2:	b3 95       	inc	r27
    18e4:	d9 f7       	brne	.-10     	; 0x18dc <__fixunssfsi+0x42>
    18e6:	3e f4       	brtc	.+14     	; 0x18f6 <__fixunssfsi+0x5c>
    18e8:	90 95       	com	r25
    18ea:	80 95       	com	r24
    18ec:	70 95       	com	r23
    18ee:	61 95       	neg	r22
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	8f 4f       	sbci	r24, 0xFF	; 255
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	08 95       	ret

000018f8 <__floatunsisf>:
    18f8:	e8 94       	clt
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <__floatsisf+0x12>

000018fc <__floatsisf>:
    18fc:	97 fb       	bst	r25, 7
    18fe:	3e f4       	brtc	.+14     	; 0x190e <__floatsisf+0x12>
    1900:	90 95       	com	r25
    1902:	80 95       	com	r24
    1904:	70 95       	com	r23
    1906:	61 95       	neg	r22
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	8f 4f       	sbci	r24, 0xFF	; 255
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	99 23       	and	r25, r25
    1910:	a9 f0       	breq	.+42     	; 0x193c <__floatsisf+0x40>
    1912:	f9 2f       	mov	r31, r25
    1914:	96 e9       	ldi	r25, 0x96	; 150
    1916:	bb 27       	eor	r27, r27
    1918:	93 95       	inc	r25
    191a:	f6 95       	lsr	r31
    191c:	87 95       	ror	r24
    191e:	77 95       	ror	r23
    1920:	67 95       	ror	r22
    1922:	b7 95       	ror	r27
    1924:	f1 11       	cpse	r31, r1
    1926:	f8 cf       	rjmp	.-16     	; 0x1918 <__floatsisf+0x1c>
    1928:	fa f4       	brpl	.+62     	; 0x1968 <__floatsisf+0x6c>
    192a:	bb 0f       	add	r27, r27
    192c:	11 f4       	brne	.+4      	; 0x1932 <__floatsisf+0x36>
    192e:	60 ff       	sbrs	r22, 0
    1930:	1b c0       	rjmp	.+54     	; 0x1968 <__floatsisf+0x6c>
    1932:	6f 5f       	subi	r22, 0xFF	; 255
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	16 c0       	rjmp	.+44     	; 0x1968 <__floatsisf+0x6c>
    193c:	88 23       	and	r24, r24
    193e:	11 f0       	breq	.+4      	; 0x1944 <__floatsisf+0x48>
    1940:	96 e9       	ldi	r25, 0x96	; 150
    1942:	11 c0       	rjmp	.+34     	; 0x1966 <__floatsisf+0x6a>
    1944:	77 23       	and	r23, r23
    1946:	21 f0       	breq	.+8      	; 0x1950 <__floatsisf+0x54>
    1948:	9e e8       	ldi	r25, 0x8E	; 142
    194a:	87 2f       	mov	r24, r23
    194c:	76 2f       	mov	r23, r22
    194e:	05 c0       	rjmp	.+10     	; 0x195a <__floatsisf+0x5e>
    1950:	66 23       	and	r22, r22
    1952:	71 f0       	breq	.+28     	; 0x1970 <__floatsisf+0x74>
    1954:	96 e8       	ldi	r25, 0x86	; 134
    1956:	86 2f       	mov	r24, r22
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	2a f0       	brmi	.+10     	; 0x1968 <__floatsisf+0x6c>
    195e:	9a 95       	dec	r25
    1960:	66 0f       	add	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	da f7       	brpl	.-10     	; 0x195e <__floatsisf+0x62>
    1968:	88 0f       	add	r24, r24
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	97 f9       	bld	r25, 7
    1970:	08 95       	ret

00001972 <__fp_inf>:
    1972:	97 f9       	bld	r25, 7
    1974:	9f 67       	ori	r25, 0x7F	; 127
    1976:	80 e8       	ldi	r24, 0x80	; 128
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	08 95       	ret

0000197e <__fp_nan>:
    197e:	9f ef       	ldi	r25, 0xFF	; 255
    1980:	80 ec       	ldi	r24, 0xC0	; 192
    1982:	08 95       	ret

00001984 <__fp_pscA>:
    1984:	00 24       	eor	r0, r0
    1986:	0a 94       	dec	r0
    1988:	16 16       	cp	r1, r22
    198a:	17 06       	cpc	r1, r23
    198c:	18 06       	cpc	r1, r24
    198e:	09 06       	cpc	r0, r25
    1990:	08 95       	ret

00001992 <__fp_pscB>:
    1992:	00 24       	eor	r0, r0
    1994:	0a 94       	dec	r0
    1996:	12 16       	cp	r1, r18
    1998:	13 06       	cpc	r1, r19
    199a:	14 06       	cpc	r1, r20
    199c:	05 06       	cpc	r0, r21
    199e:	08 95       	ret

000019a0 <__fp_round>:
    19a0:	09 2e       	mov	r0, r25
    19a2:	03 94       	inc	r0
    19a4:	00 0c       	add	r0, r0
    19a6:	11 f4       	brne	.+4      	; 0x19ac <__fp_round+0xc>
    19a8:	88 23       	and	r24, r24
    19aa:	52 f0       	brmi	.+20     	; 0x19c0 <__fp_round+0x20>
    19ac:	bb 0f       	add	r27, r27
    19ae:	40 f4       	brcc	.+16     	; 0x19c0 <__fp_round+0x20>
    19b0:	bf 2b       	or	r27, r31
    19b2:	11 f4       	brne	.+4      	; 0x19b8 <__fp_round+0x18>
    19b4:	60 ff       	sbrs	r22, 0
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <__fp_round+0x20>
    19b8:	6f 5f       	subi	r22, 0xFF	; 255
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	8f 4f       	sbci	r24, 0xFF	; 255
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	08 95       	ret

000019c2 <__fp_split3>:
    19c2:	57 fd       	sbrc	r21, 7
    19c4:	90 58       	subi	r25, 0x80	; 128
    19c6:	44 0f       	add	r20, r20
    19c8:	55 1f       	adc	r21, r21
    19ca:	59 f0       	breq	.+22     	; 0x19e2 <__fp_splitA+0x10>
    19cc:	5f 3f       	cpi	r21, 0xFF	; 255
    19ce:	71 f0       	breq	.+28     	; 0x19ec <__fp_splitA+0x1a>
    19d0:	47 95       	ror	r20

000019d2 <__fp_splitA>:
    19d2:	88 0f       	add	r24, r24
    19d4:	97 fb       	bst	r25, 7
    19d6:	99 1f       	adc	r25, r25
    19d8:	61 f0       	breq	.+24     	; 0x19f2 <__fp_splitA+0x20>
    19da:	9f 3f       	cpi	r25, 0xFF	; 255
    19dc:	79 f0       	breq	.+30     	; 0x19fc <__fp_splitA+0x2a>
    19de:	87 95       	ror	r24
    19e0:	08 95       	ret
    19e2:	12 16       	cp	r1, r18
    19e4:	13 06       	cpc	r1, r19
    19e6:	14 06       	cpc	r1, r20
    19e8:	55 1f       	adc	r21, r21
    19ea:	f2 cf       	rjmp	.-28     	; 0x19d0 <__fp_split3+0xe>
    19ec:	46 95       	lsr	r20
    19ee:	f1 df       	rcall	.-30     	; 0x19d2 <__fp_splitA>
    19f0:	08 c0       	rjmp	.+16     	; 0x1a02 <__fp_splitA+0x30>
    19f2:	16 16       	cp	r1, r22
    19f4:	17 06       	cpc	r1, r23
    19f6:	18 06       	cpc	r1, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	f1 cf       	rjmp	.-30     	; 0x19de <__fp_splitA+0xc>
    19fc:	86 95       	lsr	r24
    19fe:	71 05       	cpc	r23, r1
    1a00:	61 05       	cpc	r22, r1
    1a02:	08 94       	sec
    1a04:	08 95       	ret

00001a06 <__fp_zero>:
    1a06:	e8 94       	clt

00001a08 <__fp_szero>:
    1a08:	bb 27       	eor	r27, r27
    1a0a:	66 27       	eor	r22, r22
    1a0c:	77 27       	eor	r23, r23
    1a0e:	cb 01       	movw	r24, r22
    1a10:	97 f9       	bld	r25, 7
    1a12:	08 95       	ret

00001a14 <__mulsf3>:
    1a14:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__mulsf3x>
    1a18:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__fp_round>
    1a1c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__fp_pscA>
    1a20:	38 f0       	brcs	.+14     	; 0x1a30 <__mulsf3+0x1c>
    1a22:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fp_pscB>
    1a26:	20 f0       	brcs	.+8      	; 0x1a30 <__mulsf3+0x1c>
    1a28:	95 23       	and	r25, r21
    1a2a:	11 f0       	breq	.+4      	; 0x1a30 <__mulsf3+0x1c>
    1a2c:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_inf>
    1a30:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__fp_nan>
    1a34:	11 24       	eor	r1, r1
    1a36:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_szero>

00001a3a <__mulsf3x>:
    1a3a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__fp_split3>
    1a3e:	70 f3       	brcs	.-36     	; 0x1a1c <__mulsf3+0x8>

00001a40 <__mulsf3_pse>:
    1a40:	95 9f       	mul	r25, r21
    1a42:	c1 f3       	breq	.-16     	; 0x1a34 <__mulsf3+0x20>
    1a44:	95 0f       	add	r25, r21
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	55 1f       	adc	r21, r21
    1a4a:	62 9f       	mul	r22, r18
    1a4c:	f0 01       	movw	r30, r0
    1a4e:	72 9f       	mul	r23, r18
    1a50:	bb 27       	eor	r27, r27
    1a52:	f0 0d       	add	r31, r0
    1a54:	b1 1d       	adc	r27, r1
    1a56:	63 9f       	mul	r22, r19
    1a58:	aa 27       	eor	r26, r26
    1a5a:	f0 0d       	add	r31, r0
    1a5c:	b1 1d       	adc	r27, r1
    1a5e:	aa 1f       	adc	r26, r26
    1a60:	64 9f       	mul	r22, r20
    1a62:	66 27       	eor	r22, r22
    1a64:	b0 0d       	add	r27, r0
    1a66:	a1 1d       	adc	r26, r1
    1a68:	66 1f       	adc	r22, r22
    1a6a:	82 9f       	mul	r24, r18
    1a6c:	22 27       	eor	r18, r18
    1a6e:	b0 0d       	add	r27, r0
    1a70:	a1 1d       	adc	r26, r1
    1a72:	62 1f       	adc	r22, r18
    1a74:	73 9f       	mul	r23, r19
    1a76:	b0 0d       	add	r27, r0
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	62 1f       	adc	r22, r18
    1a7c:	83 9f       	mul	r24, r19
    1a7e:	a0 0d       	add	r26, r0
    1a80:	61 1d       	adc	r22, r1
    1a82:	22 1f       	adc	r18, r18
    1a84:	74 9f       	mul	r23, r20
    1a86:	33 27       	eor	r19, r19
    1a88:	a0 0d       	add	r26, r0
    1a8a:	61 1d       	adc	r22, r1
    1a8c:	23 1f       	adc	r18, r19
    1a8e:	84 9f       	mul	r24, r20
    1a90:	60 0d       	add	r22, r0
    1a92:	21 1d       	adc	r18, r1
    1a94:	82 2f       	mov	r24, r18
    1a96:	76 2f       	mov	r23, r22
    1a98:	6a 2f       	mov	r22, r26
    1a9a:	11 24       	eor	r1, r1
    1a9c:	9f 57       	subi	r25, 0x7F	; 127
    1a9e:	50 40       	sbci	r21, 0x00	; 0
    1aa0:	9a f0       	brmi	.+38     	; 0x1ac8 <__mulsf3_pse+0x88>
    1aa2:	f1 f0       	breq	.+60     	; 0x1ae0 <__mulsf3_pse+0xa0>
    1aa4:	88 23       	and	r24, r24
    1aa6:	4a f0       	brmi	.+18     	; 0x1aba <__mulsf3_pse+0x7a>
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	bb 1f       	adc	r27, r27
    1aae:	66 1f       	adc	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	91 50       	subi	r25, 0x01	; 1
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	a9 f7       	brne	.-22     	; 0x1aa4 <__mulsf3_pse+0x64>
    1aba:	9e 3f       	cpi	r25, 0xFE	; 254
    1abc:	51 05       	cpc	r21, r1
    1abe:	80 f0       	brcs	.+32     	; 0x1ae0 <__mulsf3_pse+0xa0>
    1ac0:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__fp_inf>
    1ac4:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_szero>
    1ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aca:	e4 f3       	brlt	.-8      	; 0x1ac4 <__mulsf3_pse+0x84>
    1acc:	98 3e       	cpi	r25, 0xE8	; 232
    1ace:	d4 f3       	brlt	.-12     	; 0x1ac4 <__mulsf3_pse+0x84>
    1ad0:	86 95       	lsr	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	b7 95       	ror	r27
    1ad8:	f7 95       	ror	r31
    1ada:	e7 95       	ror	r30
    1adc:	9f 5f       	subi	r25, 0xFF	; 255
    1ade:	c1 f7       	brne	.-16     	; 0x1ad0 <__mulsf3_pse+0x90>
    1ae0:	fe 2b       	or	r31, r30
    1ae2:	88 0f       	add	r24, r24
    1ae4:	91 1d       	adc	r25, r1
    1ae6:	96 95       	lsr	r25
    1ae8:	87 95       	ror	r24
    1aea:	97 f9       	bld	r25, 7
    1aec:	08 95       	ret

00001aee <do_rand>:
    1aee:	8f 92       	push	r8
    1af0:	9f 92       	push	r9
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	ec 01       	movw	r28, r24
    1b04:	68 81       	ld	r22, Y
    1b06:	79 81       	ldd	r23, Y+1	; 0x01
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0c:	61 15       	cp	r22, r1
    1b0e:	71 05       	cpc	r23, r1
    1b10:	81 05       	cpc	r24, r1
    1b12:	91 05       	cpc	r25, r1
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <do_rand+0x30>
    1b16:	64 e2       	ldi	r22, 0x24	; 36
    1b18:	79 ed       	ldi	r23, 0xD9	; 217
    1b1a:	8b e5       	ldi	r24, 0x5B	; 91
    1b1c:	97 e0       	ldi	r25, 0x07	; 7
    1b1e:	2d e1       	ldi	r18, 0x1D	; 29
    1b20:	33 ef       	ldi	r19, 0xF3	; 243
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__divmodsi4>
    1b2a:	49 01       	movw	r8, r18
    1b2c:	5a 01       	movw	r10, r20
    1b2e:	9b 01       	movw	r18, r22
    1b30:	ac 01       	movw	r20, r24
    1b32:	a7 ea       	ldi	r26, 0xA7	; 167
    1b34:	b1 e4       	ldi	r27, 0x41	; 65
    1b36:	0e 94 9c 10 	call	0x2138	; 0x2138 <__muluhisi3>
    1b3a:	6b 01       	movw	r12, r22
    1b3c:	7c 01       	movw	r14, r24
    1b3e:	ac ee       	ldi	r26, 0xEC	; 236
    1b40:	b4 ef       	ldi	r27, 0xF4	; 244
    1b42:	a5 01       	movw	r20, r10
    1b44:	94 01       	movw	r18, r8
    1b46:	0e 94 aa 10 	call	0x2154	; 0x2154 <__mulohisi3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8c 0d       	add	r24, r12
    1b50:	9d 1d       	adc	r25, r13
    1b52:	ae 1d       	adc	r26, r14
    1b54:	bf 1d       	adc	r27, r15
    1b56:	b7 ff       	sbrs	r27, 7
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <do_rand+0x72>
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	a1 09       	sbc	r26, r1
    1b5e:	b0 48       	sbci	r27, 0x80	; 128
    1b60:	88 83       	st	Y, r24
    1b62:	99 83       	std	Y+1, r25	; 0x01
    1b64:	aa 83       	std	Y+2, r26	; 0x02
    1b66:	bb 83       	std	Y+3, r27	; 0x03
    1b68:	9f 77       	andi	r25, 0x7F	; 127
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	ff 90       	pop	r15
    1b70:	ef 90       	pop	r14
    1b72:	df 90       	pop	r13
    1b74:	cf 90       	pop	r12
    1b76:	bf 90       	pop	r11
    1b78:	af 90       	pop	r10
    1b7a:	9f 90       	pop	r9
    1b7c:	8f 90       	pop	r8
    1b7e:	08 95       	ret

00001b80 <rand_r>:
    1b80:	0e 94 77 0d 	call	0x1aee	; 0x1aee <do_rand>
    1b84:	08 95       	ret

00001b86 <rand>:
    1b86:	85 e1       	ldi	r24, 0x15	; 21
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <do_rand>
    1b8e:	08 95       	ret

00001b90 <srand>:
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	80 93 15 01 	sts	0x0115, r24
    1b98:	90 93 16 01 	sts	0x0116, r25
    1b9c:	a0 93 17 01 	sts	0x0117, r26
    1ba0:	b0 93 18 01 	sts	0x0118, r27
    1ba4:	08 95       	ret

00001ba6 <printf>:
    1ba6:	a0 e0       	ldi	r26, 0x00	; 0
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e9 ed       	ldi	r30, 0xD9	; 217
    1bac:	fd e0       	ldi	r31, 0x0D	; 13
    1bae:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x20>
    1bb2:	ae 01       	movw	r20, r28
    1bb4:	4b 5f       	subi	r20, 0xFB	; 251
    1bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb8:	fa 01       	movw	r30, r20
    1bba:	61 91       	ld	r22, Z+
    1bbc:	71 91       	ld	r23, Z+
    1bbe:	af 01       	movw	r20, r30
    1bc0:	80 91 9c 01 	lds	r24, 0x019C
    1bc4:	90 91 9d 01 	lds	r25, 0x019D
    1bc8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <vfprintf>
    1bcc:	e2 e0       	ldi	r30, 0x02	; 2
    1bce:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__epilogue_restores__+0x20>

00001bd2 <vfprintf>:
    1bd2:	ac e0       	ldi	r26, 0x0C	; 12
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ef ee       	ldi	r30, 0xEF	; 239
    1bd8:	fd e0       	ldi	r31, 0x0D	; 13
    1bda:	0c 94 af 10 	jmp	0x215e	; 0x215e <__prologue_saves__>
    1bde:	7c 01       	movw	r14, r24
    1be0:	6b 01       	movw	r12, r22
    1be2:	8a 01       	movw	r16, r20
    1be4:	fc 01       	movw	r30, r24
    1be6:	17 82       	std	Z+7, r1	; 0x07
    1be8:	16 82       	std	Z+6, r1	; 0x06
    1bea:	83 81       	ldd	r24, Z+3	; 0x03
    1bec:	81 ff       	sbrs	r24, 1
    1bee:	bd c1       	rjmp	.+890    	; 0x1f6a <vfprintf+0x398>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	4c 01       	movw	r8, r24
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	93 fd       	sbrc	r25, 3
    1bfe:	85 91       	lpm	r24, Z+
    1c00:	93 ff       	sbrs	r25, 3
    1c02:	81 91       	ld	r24, Z+
    1c04:	6f 01       	movw	r12, r30
    1c06:	88 23       	and	r24, r24
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <vfprintf+0x3a>
    1c0a:	ab c1       	rjmp	.+854    	; 0x1f62 <vfprintf+0x390>
    1c0c:	85 32       	cpi	r24, 0x25	; 37
    1c0e:	39 f4       	brne	.+14     	; 0x1c1e <vfprintf+0x4c>
    1c10:	93 fd       	sbrc	r25, 3
    1c12:	85 91       	lpm	r24, Z+
    1c14:	93 ff       	sbrs	r25, 3
    1c16:	81 91       	ld	r24, Z+
    1c18:	6f 01       	movw	r12, r30
    1c1a:	85 32       	cpi	r24, 0x25	; 37
    1c1c:	29 f4       	brne	.+10     	; 0x1c28 <vfprintf+0x56>
    1c1e:	b7 01       	movw	r22, r14
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1c26:	e7 cf       	rjmp	.-50     	; 0x1bf6 <vfprintf+0x24>
    1c28:	51 2c       	mov	r5, r1
    1c2a:	31 2c       	mov	r3, r1
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	20 32       	cpi	r18, 0x20	; 32
    1c30:	a0 f4       	brcc	.+40     	; 0x1c5a <vfprintf+0x88>
    1c32:	8b 32       	cpi	r24, 0x2B	; 43
    1c34:	69 f0       	breq	.+26     	; 0x1c50 <vfprintf+0x7e>
    1c36:	30 f4       	brcc	.+12     	; 0x1c44 <vfprintf+0x72>
    1c38:	80 32       	cpi	r24, 0x20	; 32
    1c3a:	59 f0       	breq	.+22     	; 0x1c52 <vfprintf+0x80>
    1c3c:	83 32       	cpi	r24, 0x23	; 35
    1c3e:	69 f4       	brne	.+26     	; 0x1c5a <vfprintf+0x88>
    1c40:	20 61       	ori	r18, 0x10	; 16
    1c42:	2c c0       	rjmp	.+88     	; 0x1c9c <vfprintf+0xca>
    1c44:	8d 32       	cpi	r24, 0x2D	; 45
    1c46:	39 f0       	breq	.+14     	; 0x1c56 <vfprintf+0x84>
    1c48:	80 33       	cpi	r24, 0x30	; 48
    1c4a:	39 f4       	brne	.+14     	; 0x1c5a <vfprintf+0x88>
    1c4c:	21 60       	ori	r18, 0x01	; 1
    1c4e:	26 c0       	rjmp	.+76     	; 0x1c9c <vfprintf+0xca>
    1c50:	22 60       	ori	r18, 0x02	; 2
    1c52:	24 60       	ori	r18, 0x04	; 4
    1c54:	23 c0       	rjmp	.+70     	; 0x1c9c <vfprintf+0xca>
    1c56:	28 60       	ori	r18, 0x08	; 8
    1c58:	21 c0       	rjmp	.+66     	; 0x1c9c <vfprintf+0xca>
    1c5a:	27 fd       	sbrc	r18, 7
    1c5c:	27 c0       	rjmp	.+78     	; 0x1cac <vfprintf+0xda>
    1c5e:	30 ed       	ldi	r19, 0xD0	; 208
    1c60:	38 0f       	add	r19, r24
    1c62:	3a 30       	cpi	r19, 0x0A	; 10
    1c64:	78 f4       	brcc	.+30     	; 0x1c84 <vfprintf+0xb2>
    1c66:	26 ff       	sbrs	r18, 6
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <vfprintf+0xa4>
    1c6a:	fa e0       	ldi	r31, 0x0A	; 10
    1c6c:	5f 9e       	mul	r5, r31
    1c6e:	30 0d       	add	r19, r0
    1c70:	11 24       	eor	r1, r1
    1c72:	53 2e       	mov	r5, r19
    1c74:	13 c0       	rjmp	.+38     	; 0x1c9c <vfprintf+0xca>
    1c76:	8a e0       	ldi	r24, 0x0A	; 10
    1c78:	38 9e       	mul	r3, r24
    1c7a:	30 0d       	add	r19, r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	33 2e       	mov	r3, r19
    1c80:	20 62       	ori	r18, 0x20	; 32
    1c82:	0c c0       	rjmp	.+24     	; 0x1c9c <vfprintf+0xca>
    1c84:	8e 32       	cpi	r24, 0x2E	; 46
    1c86:	21 f4       	brne	.+8      	; 0x1c90 <vfprintf+0xbe>
    1c88:	26 fd       	sbrc	r18, 6
    1c8a:	6b c1       	rjmp	.+726    	; 0x1f62 <vfprintf+0x390>
    1c8c:	20 64       	ori	r18, 0x40	; 64
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <vfprintf+0xca>
    1c90:	8c 36       	cpi	r24, 0x6C	; 108
    1c92:	11 f4       	brne	.+4      	; 0x1c98 <vfprintf+0xc6>
    1c94:	20 68       	ori	r18, 0x80	; 128
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <vfprintf+0xca>
    1c98:	88 36       	cpi	r24, 0x68	; 104
    1c9a:	41 f4       	brne	.+16     	; 0x1cac <vfprintf+0xda>
    1c9c:	f6 01       	movw	r30, r12
    1c9e:	93 fd       	sbrc	r25, 3
    1ca0:	85 91       	lpm	r24, Z+
    1ca2:	93 ff       	sbrs	r25, 3
    1ca4:	81 91       	ld	r24, Z+
    1ca6:	6f 01       	movw	r12, r30
    1ca8:	81 11       	cpse	r24, r1
    1caa:	c1 cf       	rjmp	.-126    	; 0x1c2e <vfprintf+0x5c>
    1cac:	98 2f       	mov	r25, r24
    1cae:	9f 7d       	andi	r25, 0xDF	; 223
    1cb0:	95 54       	subi	r25, 0x45	; 69
    1cb2:	93 30       	cpi	r25, 0x03	; 3
    1cb4:	28 f4       	brcc	.+10     	; 0x1cc0 <vfprintf+0xee>
    1cb6:	0c 5f       	subi	r16, 0xFC	; 252
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	ff e3       	ldi	r31, 0x3F	; 63
    1cbc:	f9 83       	std	Y+1, r31	; 0x01
    1cbe:	0d c0       	rjmp	.+26     	; 0x1cda <vfprintf+0x108>
    1cc0:	83 36       	cpi	r24, 0x63	; 99
    1cc2:	31 f0       	breq	.+12     	; 0x1cd0 <vfprintf+0xfe>
    1cc4:	83 37       	cpi	r24, 0x73	; 115
    1cc6:	71 f0       	breq	.+28     	; 0x1ce4 <vfprintf+0x112>
    1cc8:	83 35       	cpi	r24, 0x53	; 83
    1cca:	09 f0       	breq	.+2      	; 0x1cce <vfprintf+0xfc>
    1ccc:	5b c0       	rjmp	.+182    	; 0x1d84 <vfprintf+0x1b2>
    1cce:	22 c0       	rjmp	.+68     	; 0x1d14 <vfprintf+0x142>
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	80 81       	ld	r24, Z
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	0e 5f       	subi	r16, 0xFE	; 254
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	44 24       	eor	r4, r4
    1cdc:	43 94       	inc	r4
    1cde:	51 2c       	mov	r5, r1
    1ce0:	54 01       	movw	r10, r8
    1ce2:	15 c0       	rjmp	.+42     	; 0x1d0e <vfprintf+0x13c>
    1ce4:	38 01       	movw	r6, r16
    1ce6:	f2 e0       	ldi	r31, 0x02	; 2
    1ce8:	6f 0e       	add	r6, r31
    1cea:	71 1c       	adc	r7, r1
    1cec:	f8 01       	movw	r30, r16
    1cee:	a0 80       	ld	r10, Z
    1cf0:	b1 80       	ldd	r11, Z+1	; 0x01
    1cf2:	26 ff       	sbrs	r18, 6
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <vfprintf+0x12a>
    1cf6:	65 2d       	mov	r22, r5
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x12e>
    1cfc:	6f ef       	ldi	r22, 0xFF	; 255
    1cfe:	7f ef       	ldi	r23, 0xFF	; 255
    1d00:	c5 01       	movw	r24, r10
    1d02:	2c 87       	std	Y+12, r18	; 0x0c
    1d04:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <strnlen>
    1d08:	2c 01       	movw	r4, r24
    1d0a:	83 01       	movw	r16, r6
    1d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d0e:	2f 77       	andi	r18, 0x7F	; 127
    1d10:	22 2e       	mov	r2, r18
    1d12:	17 c0       	rjmp	.+46     	; 0x1d42 <vfprintf+0x170>
    1d14:	38 01       	movw	r6, r16
    1d16:	f2 e0       	ldi	r31, 0x02	; 2
    1d18:	6f 0e       	add	r6, r31
    1d1a:	71 1c       	adc	r7, r1
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	a0 80       	ld	r10, Z
    1d20:	b1 80       	ldd	r11, Z+1	; 0x01
    1d22:	26 ff       	sbrs	r18, 6
    1d24:	03 c0       	rjmp	.+6      	; 0x1d2c <vfprintf+0x15a>
    1d26:	65 2d       	mov	r22, r5
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x15e>
    1d2c:	6f ef       	ldi	r22, 0xFF	; 255
    1d2e:	7f ef       	ldi	r23, 0xFF	; 255
    1d30:	c5 01       	movw	r24, r10
    1d32:	2c 87       	std	Y+12, r18	; 0x0c
    1d34:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <strnlen_P>
    1d38:	2c 01       	movw	r4, r24
    1d3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d3c:	20 68       	ori	r18, 0x80	; 128
    1d3e:	22 2e       	mov	r2, r18
    1d40:	83 01       	movw	r16, r6
    1d42:	23 fc       	sbrc	r2, 3
    1d44:	1b c0       	rjmp	.+54     	; 0x1d7c <vfprintf+0x1aa>
    1d46:	83 2d       	mov	r24, r3
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	48 16       	cp	r4, r24
    1d4c:	59 06       	cpc	r5, r25
    1d4e:	b0 f4       	brcc	.+44     	; 0x1d7c <vfprintf+0x1aa>
    1d50:	b7 01       	movw	r22, r14
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1d5a:	3a 94       	dec	r3
    1d5c:	f4 cf       	rjmp	.-24     	; 0x1d46 <vfprintf+0x174>
    1d5e:	f5 01       	movw	r30, r10
    1d60:	27 fc       	sbrc	r2, 7
    1d62:	85 91       	lpm	r24, Z+
    1d64:	27 fe       	sbrs	r2, 7
    1d66:	81 91       	ld	r24, Z+
    1d68:	5f 01       	movw	r10, r30
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1d72:	31 10       	cpse	r3, r1
    1d74:	3a 94       	dec	r3
    1d76:	f1 e0       	ldi	r31, 0x01	; 1
    1d78:	4f 1a       	sub	r4, r31
    1d7a:	51 08       	sbc	r5, r1
    1d7c:	41 14       	cp	r4, r1
    1d7e:	51 04       	cpc	r5, r1
    1d80:	71 f7       	brne	.-36     	; 0x1d5e <vfprintf+0x18c>
    1d82:	e5 c0       	rjmp	.+458    	; 0x1f4e <vfprintf+0x37c>
    1d84:	84 36       	cpi	r24, 0x64	; 100
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <vfprintf+0x1ba>
    1d88:	89 36       	cpi	r24, 0x69	; 105
    1d8a:	39 f5       	brne	.+78     	; 0x1dda <vfprintf+0x208>
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	27 ff       	sbrs	r18, 7
    1d90:	07 c0       	rjmp	.+14     	; 0x1da0 <vfprintf+0x1ce>
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	0c 5f       	subi	r16, 0xFC	; 252
    1d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9e:	08 c0       	rjmp	.+16     	; 0x1db0 <vfprintf+0x1de>
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	07 2e       	mov	r0, r23
    1da6:	00 0c       	add	r0, r0
    1da8:	88 0b       	sbc	r24, r24
    1daa:	99 0b       	sbc	r25, r25
    1dac:	0e 5f       	subi	r16, 0xFE	; 254
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	2f 76       	andi	r18, 0x6F	; 111
    1db2:	72 2e       	mov	r7, r18
    1db4:	97 ff       	sbrs	r25, 7
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <vfprintf+0x1f8>
    1db8:	90 95       	com	r25
    1dba:	80 95       	com	r24
    1dbc:	70 95       	com	r23
    1dbe:	61 95       	neg	r22
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	20 68       	ori	r18, 0x80	; 128
    1dc8:	72 2e       	mov	r7, r18
    1dca:	2a e0       	ldi	r18, 0x0A	; 10
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	a4 01       	movw	r20, r8
    1dd0:	0e 94 09 10 	call	0x2012	; 0x2012 <__ultoa_invert>
    1dd4:	a8 2e       	mov	r10, r24
    1dd6:	a8 18       	sub	r10, r8
    1dd8:	44 c0       	rjmp	.+136    	; 0x1e62 <vfprintf+0x290>
    1dda:	85 37       	cpi	r24, 0x75	; 117
    1ddc:	29 f4       	brne	.+10     	; 0x1de8 <vfprintf+0x216>
    1dde:	2f 7e       	andi	r18, 0xEF	; 239
    1de0:	b2 2e       	mov	r11, r18
    1de2:	2a e0       	ldi	r18, 0x0A	; 10
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	25 c0       	rjmp	.+74     	; 0x1e32 <vfprintf+0x260>
    1de8:	f2 2f       	mov	r31, r18
    1dea:	f9 7f       	andi	r31, 0xF9	; 249
    1dec:	bf 2e       	mov	r11, r31
    1dee:	8f 36       	cpi	r24, 0x6F	; 111
    1df0:	c1 f0       	breq	.+48     	; 0x1e22 <vfprintf+0x250>
    1df2:	18 f4       	brcc	.+6      	; 0x1dfa <vfprintf+0x228>
    1df4:	88 35       	cpi	r24, 0x58	; 88
    1df6:	79 f0       	breq	.+30     	; 0x1e16 <vfprintf+0x244>
    1df8:	b4 c0       	rjmp	.+360    	; 0x1f62 <vfprintf+0x390>
    1dfa:	80 37       	cpi	r24, 0x70	; 112
    1dfc:	19 f0       	breq	.+6      	; 0x1e04 <vfprintf+0x232>
    1dfe:	88 37       	cpi	r24, 0x78	; 120
    1e00:	21 f0       	breq	.+8      	; 0x1e0a <vfprintf+0x238>
    1e02:	af c0       	rjmp	.+350    	; 0x1f62 <vfprintf+0x390>
    1e04:	2f 2f       	mov	r18, r31
    1e06:	20 61       	ori	r18, 0x10	; 16
    1e08:	b2 2e       	mov	r11, r18
    1e0a:	b4 fe       	sbrs	r11, 4
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <vfprintf+0x256>
    1e0e:	8b 2d       	mov	r24, r11
    1e10:	84 60       	ori	r24, 0x04	; 4
    1e12:	b8 2e       	mov	r11, r24
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <vfprintf+0x256>
    1e16:	24 ff       	sbrs	r18, 4
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <vfprintf+0x25c>
    1e1a:	9f 2f       	mov	r25, r31
    1e1c:	96 60       	ori	r25, 0x06	; 6
    1e1e:	b9 2e       	mov	r11, r25
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <vfprintf+0x25c>
    1e22:	28 e0       	ldi	r18, 0x08	; 8
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <vfprintf+0x260>
    1e28:	20 e1       	ldi	r18, 0x10	; 16
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <vfprintf+0x260>
    1e2e:	20 e1       	ldi	r18, 0x10	; 16
    1e30:	32 e0       	ldi	r19, 0x02	; 2
    1e32:	f8 01       	movw	r30, r16
    1e34:	b7 fe       	sbrs	r11, 7
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <vfprintf+0x274>
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0c 5f       	subi	r16, 0xFC	; 252
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	06 c0       	rjmp	.+12     	; 0x1e52 <vfprintf+0x280>
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 5f       	subi	r16, 0xFE	; 254
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	a4 01       	movw	r20, r8
    1e54:	0e 94 09 10 	call	0x2012	; 0x2012 <__ultoa_invert>
    1e58:	a8 2e       	mov	r10, r24
    1e5a:	a8 18       	sub	r10, r8
    1e5c:	fb 2d       	mov	r31, r11
    1e5e:	ff 77       	andi	r31, 0x7F	; 127
    1e60:	7f 2e       	mov	r7, r31
    1e62:	76 fe       	sbrs	r7, 6
    1e64:	0b c0       	rjmp	.+22     	; 0x1e7c <vfprintf+0x2aa>
    1e66:	37 2d       	mov	r19, r7
    1e68:	3e 7f       	andi	r19, 0xFE	; 254
    1e6a:	a5 14       	cp	r10, r5
    1e6c:	50 f4       	brcc	.+20     	; 0x1e82 <vfprintf+0x2b0>
    1e6e:	74 fe       	sbrs	r7, 4
    1e70:	0a c0       	rjmp	.+20     	; 0x1e86 <vfprintf+0x2b4>
    1e72:	72 fc       	sbrc	r7, 2
    1e74:	08 c0       	rjmp	.+16     	; 0x1e86 <vfprintf+0x2b4>
    1e76:	37 2d       	mov	r19, r7
    1e78:	3e 7e       	andi	r19, 0xEE	; 238
    1e7a:	05 c0       	rjmp	.+10     	; 0x1e86 <vfprintf+0x2b4>
    1e7c:	ba 2c       	mov	r11, r10
    1e7e:	37 2d       	mov	r19, r7
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <vfprintf+0x2b6>
    1e82:	ba 2c       	mov	r11, r10
    1e84:	01 c0       	rjmp	.+2      	; 0x1e88 <vfprintf+0x2b6>
    1e86:	b5 2c       	mov	r11, r5
    1e88:	34 ff       	sbrs	r19, 4
    1e8a:	0d c0       	rjmp	.+26     	; 0x1ea6 <vfprintf+0x2d4>
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ea 0d       	add	r30, r10
    1e90:	f1 1d       	adc	r31, r1
    1e92:	80 81       	ld	r24, Z
    1e94:	80 33       	cpi	r24, 0x30	; 48
    1e96:	11 f4       	brne	.+4      	; 0x1e9c <vfprintf+0x2ca>
    1e98:	39 7e       	andi	r19, 0xE9	; 233
    1e9a:	09 c0       	rjmp	.+18     	; 0x1eae <vfprintf+0x2dc>
    1e9c:	32 ff       	sbrs	r19, 2
    1e9e:	06 c0       	rjmp	.+12     	; 0x1eac <vfprintf+0x2da>
    1ea0:	b3 94       	inc	r11
    1ea2:	b3 94       	inc	r11
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <vfprintf+0x2dc>
    1ea6:	83 2f       	mov	r24, r19
    1ea8:	86 78       	andi	r24, 0x86	; 134
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <vfprintf+0x2dc>
    1eac:	b3 94       	inc	r11
    1eae:	33 fd       	sbrc	r19, 3
    1eb0:	13 c0       	rjmp	.+38     	; 0x1ed8 <vfprintf+0x306>
    1eb2:	30 ff       	sbrs	r19, 0
    1eb4:	06 c0       	rjmp	.+12     	; 0x1ec2 <vfprintf+0x2f0>
    1eb6:	5a 2c       	mov	r5, r10
    1eb8:	b3 14       	cp	r11, r3
    1eba:	18 f4       	brcc	.+6      	; 0x1ec2 <vfprintf+0x2f0>
    1ebc:	53 0c       	add	r5, r3
    1ebe:	5b 18       	sub	r5, r11
    1ec0:	b3 2c       	mov	r11, r3
    1ec2:	b3 14       	cp	r11, r3
    1ec4:	68 f4       	brcc	.+26     	; 0x1ee0 <vfprintf+0x30e>
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	80 e2       	ldi	r24, 0x20	; 32
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	3c 87       	std	Y+12, r19	; 0x0c
    1ece:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1ed2:	b3 94       	inc	r11
    1ed4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ed6:	f5 cf       	rjmp	.-22     	; 0x1ec2 <vfprintf+0x2f0>
    1ed8:	b3 14       	cp	r11, r3
    1eda:	10 f4       	brcc	.+4      	; 0x1ee0 <vfprintf+0x30e>
    1edc:	3b 18       	sub	r3, r11
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <vfprintf+0x310>
    1ee0:	31 2c       	mov	r3, r1
    1ee2:	34 ff       	sbrs	r19, 4
    1ee4:	12 c0       	rjmp	.+36     	; 0x1f0a <vfprintf+0x338>
    1ee6:	b7 01       	movw	r22, r14
    1ee8:	80 e3       	ldi	r24, 0x30	; 48
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	3c 87       	std	Y+12, r19	; 0x0c
    1eee:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1ef2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ef4:	32 ff       	sbrs	r19, 2
    1ef6:	17 c0       	rjmp	.+46     	; 0x1f26 <vfprintf+0x354>
    1ef8:	31 fd       	sbrc	r19, 1
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <vfprintf+0x330>
    1efc:	88 e7       	ldi	r24, 0x78	; 120
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <vfprintf+0x334>
    1f02:	88 e5       	ldi	r24, 0x58	; 88
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	b7 01       	movw	r22, r14
    1f08:	0c c0       	rjmp	.+24     	; 0x1f22 <vfprintf+0x350>
    1f0a:	83 2f       	mov	r24, r19
    1f0c:	86 78       	andi	r24, 0x86	; 134
    1f0e:	59 f0       	breq	.+22     	; 0x1f26 <vfprintf+0x354>
    1f10:	31 ff       	sbrs	r19, 1
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <vfprintf+0x346>
    1f14:	8b e2       	ldi	r24, 0x2B	; 43
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <vfprintf+0x348>
    1f18:	80 e2       	ldi	r24, 0x20	; 32
    1f1a:	37 fd       	sbrc	r19, 7
    1f1c:	8d e2       	ldi	r24, 0x2D	; 45
    1f1e:	b7 01       	movw	r22, r14
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1f26:	a5 14       	cp	r10, r5
    1f28:	38 f4       	brcc	.+14     	; 0x1f38 <vfprintf+0x366>
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	80 e3       	ldi	r24, 0x30	; 48
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1f34:	5a 94       	dec	r5
    1f36:	f7 cf       	rjmp	.-18     	; 0x1f26 <vfprintf+0x354>
    1f38:	aa 94       	dec	r10
    1f3a:	f4 01       	movw	r30, r8
    1f3c:	ea 0d       	add	r30, r10
    1f3e:	f1 1d       	adc	r31, r1
    1f40:	80 81       	ld	r24, Z
    1f42:	b7 01       	movw	r22, r14
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1f4a:	a1 10       	cpse	r10, r1
    1f4c:	f5 cf       	rjmp	.-22     	; 0x1f38 <vfprintf+0x366>
    1f4e:	33 20       	and	r3, r3
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <vfprintf+0x382>
    1f52:	51 ce       	rjmp	.-862    	; 0x1bf6 <vfprintf+0x24>
    1f54:	b7 01       	movw	r22, r14
    1f56:	80 e2       	ldi	r24, 0x20	; 32
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <fputc>
    1f5e:	3a 94       	dec	r3
    1f60:	f6 cf       	rjmp	.-20     	; 0x1f4e <vfprintf+0x37c>
    1f62:	f7 01       	movw	r30, r14
    1f64:	86 81       	ldd	r24, Z+6	; 0x06
    1f66:	97 81       	ldd	r25, Z+7	; 0x07
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <vfprintf+0x39c>
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	2c 96       	adiw	r28, 0x0c	; 12
    1f70:	e2 e1       	ldi	r30, 0x12	; 18
    1f72:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__epilogue_restores__>

00001f76 <strnlen_P>:
    1f76:	fc 01       	movw	r30, r24
    1f78:	05 90       	lpm	r0, Z+
    1f7a:	61 50       	subi	r22, 0x01	; 1
    1f7c:	70 40       	sbci	r23, 0x00	; 0
    1f7e:	01 10       	cpse	r0, r1
    1f80:	d8 f7       	brcc	.-10     	; 0x1f78 <strnlen_P+0x2>
    1f82:	80 95       	com	r24
    1f84:	90 95       	com	r25
    1f86:	8e 0f       	add	r24, r30
    1f88:	9f 1f       	adc	r25, r31
    1f8a:	08 95       	ret

00001f8c <strnlen>:
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	61 50       	subi	r22, 0x01	; 1
    1f90:	70 40       	sbci	r23, 0x00	; 0
    1f92:	01 90       	ld	r0, Z+
    1f94:	01 10       	cpse	r0, r1
    1f96:	d8 f7       	brcc	.-10     	; 0x1f8e <strnlen+0x2>
    1f98:	80 95       	com	r24
    1f9a:	90 95       	com	r25
    1f9c:	8e 0f       	add	r24, r30
    1f9e:	9f 1f       	adc	r25, r31
    1fa0:	08 95       	ret

00001fa2 <fputc>:
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	fb 01       	movw	r30, r22
    1fac:	23 81       	ldd	r18, Z+3	; 0x03
    1fae:	21 fd       	sbrc	r18, 1
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <fputc+0x16>
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	9f ef       	ldi	r25, 0xFF	; 255
    1fb6:	28 c0       	rjmp	.+80     	; 0x2008 <fputc+0x66>
    1fb8:	22 ff       	sbrs	r18, 2
    1fba:	16 c0       	rjmp	.+44     	; 0x1fe8 <fputc+0x46>
    1fbc:	46 81       	ldd	r20, Z+6	; 0x06
    1fbe:	57 81       	ldd	r21, Z+7	; 0x07
    1fc0:	24 81       	ldd	r18, Z+4	; 0x04
    1fc2:	35 81       	ldd	r19, Z+5	; 0x05
    1fc4:	42 17       	cp	r20, r18
    1fc6:	53 07       	cpc	r21, r19
    1fc8:	44 f4       	brge	.+16     	; 0x1fda <fputc+0x38>
    1fca:	a0 81       	ld	r26, Z
    1fcc:	b1 81       	ldd	r27, Z+1	; 0x01
    1fce:	9d 01       	movw	r18, r26
    1fd0:	2f 5f       	subi	r18, 0xFF	; 255
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd4:	31 83       	std	Z+1, r19	; 0x01
    1fd6:	20 83       	st	Z, r18
    1fd8:	8c 93       	st	X, r24
    1fda:	26 81       	ldd	r18, Z+6	; 0x06
    1fdc:	37 81       	ldd	r19, Z+7	; 0x07
    1fde:	2f 5f       	subi	r18, 0xFF	; 255
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	37 83       	std	Z+7, r19	; 0x07
    1fe4:	26 83       	std	Z+6, r18	; 0x06
    1fe6:	10 c0       	rjmp	.+32     	; 0x2008 <fputc+0x66>
    1fe8:	eb 01       	movw	r28, r22
    1fea:	09 2f       	mov	r16, r25
    1fec:	18 2f       	mov	r17, r24
    1fee:	00 84       	ldd	r0, Z+8	; 0x08
    1ff0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ff2:	e0 2d       	mov	r30, r0
    1ff4:	09 95       	icall
    1ff6:	89 2b       	or	r24, r25
    1ff8:	e1 f6       	brne	.-72     	; 0x1fb2 <fputc+0x10>
    1ffa:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	9f 83       	std	Y+7, r25	; 0x07
    2002:	8e 83       	std	Y+6, r24	; 0x06
    2004:	81 2f       	mov	r24, r17
    2006:	90 2f       	mov	r25, r16
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	08 95       	ret

00002012 <__ultoa_invert>:
    2012:	fa 01       	movw	r30, r20
    2014:	aa 27       	eor	r26, r26
    2016:	28 30       	cpi	r18, 0x08	; 8
    2018:	51 f1       	breq	.+84     	; 0x206e <__ultoa_invert+0x5c>
    201a:	20 31       	cpi	r18, 0x10	; 16
    201c:	81 f1       	breq	.+96     	; 0x207e <__ultoa_invert+0x6c>
    201e:	e8 94       	clt
    2020:	6f 93       	push	r22
    2022:	6e 7f       	andi	r22, 0xFE	; 254
    2024:	6e 5f       	subi	r22, 0xFE	; 254
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	8f 4f       	sbci	r24, 0xFF	; 255
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	af 4f       	sbci	r26, 0xFF	; 255
    202e:	b1 e0       	ldi	r27, 0x01	; 1
    2030:	3e d0       	rcall	.+124    	; 0x20ae <__ultoa_invert+0x9c>
    2032:	b4 e0       	ldi	r27, 0x04	; 4
    2034:	3c d0       	rcall	.+120    	; 0x20ae <__ultoa_invert+0x9c>
    2036:	67 0f       	add	r22, r23
    2038:	78 1f       	adc	r23, r24
    203a:	89 1f       	adc	r24, r25
    203c:	9a 1f       	adc	r25, r26
    203e:	a1 1d       	adc	r26, r1
    2040:	68 0f       	add	r22, r24
    2042:	79 1f       	adc	r23, r25
    2044:	8a 1f       	adc	r24, r26
    2046:	91 1d       	adc	r25, r1
    2048:	a1 1d       	adc	r26, r1
    204a:	6a 0f       	add	r22, r26
    204c:	71 1d       	adc	r23, r1
    204e:	81 1d       	adc	r24, r1
    2050:	91 1d       	adc	r25, r1
    2052:	a1 1d       	adc	r26, r1
    2054:	20 d0       	rcall	.+64     	; 0x2096 <__ultoa_invert+0x84>
    2056:	09 f4       	brne	.+2      	; 0x205a <__ultoa_invert+0x48>
    2058:	68 94       	set
    205a:	3f 91       	pop	r19
    205c:	2a e0       	ldi	r18, 0x0A	; 10
    205e:	26 9f       	mul	r18, r22
    2060:	11 24       	eor	r1, r1
    2062:	30 19       	sub	r19, r0
    2064:	30 5d       	subi	r19, 0xD0	; 208
    2066:	31 93       	st	Z+, r19
    2068:	de f6       	brtc	.-74     	; 0x2020 <__ultoa_invert+0xe>
    206a:	cf 01       	movw	r24, r30
    206c:	08 95       	ret
    206e:	46 2f       	mov	r20, r22
    2070:	47 70       	andi	r20, 0x07	; 7
    2072:	40 5d       	subi	r20, 0xD0	; 208
    2074:	41 93       	st	Z+, r20
    2076:	b3 e0       	ldi	r27, 0x03	; 3
    2078:	0f d0       	rcall	.+30     	; 0x2098 <__ultoa_invert+0x86>
    207a:	c9 f7       	brne	.-14     	; 0x206e <__ultoa_invert+0x5c>
    207c:	f6 cf       	rjmp	.-20     	; 0x206a <__ultoa_invert+0x58>
    207e:	46 2f       	mov	r20, r22
    2080:	4f 70       	andi	r20, 0x0F	; 15
    2082:	40 5d       	subi	r20, 0xD0	; 208
    2084:	4a 33       	cpi	r20, 0x3A	; 58
    2086:	18 f0       	brcs	.+6      	; 0x208e <__ultoa_invert+0x7c>
    2088:	49 5d       	subi	r20, 0xD9	; 217
    208a:	31 fd       	sbrc	r19, 1
    208c:	40 52       	subi	r20, 0x20	; 32
    208e:	41 93       	st	Z+, r20
    2090:	02 d0       	rcall	.+4      	; 0x2096 <__ultoa_invert+0x84>
    2092:	a9 f7       	brne	.-22     	; 0x207e <__ultoa_invert+0x6c>
    2094:	ea cf       	rjmp	.-44     	; 0x206a <__ultoa_invert+0x58>
    2096:	b4 e0       	ldi	r27, 0x04	; 4
    2098:	a6 95       	lsr	r26
    209a:	97 95       	ror	r25
    209c:	87 95       	ror	r24
    209e:	77 95       	ror	r23
    20a0:	67 95       	ror	r22
    20a2:	ba 95       	dec	r27
    20a4:	c9 f7       	brne	.-14     	; 0x2098 <__ultoa_invert+0x86>
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	61 05       	cpc	r22, r1
    20aa:	71 05       	cpc	r23, r1
    20ac:	08 95       	ret
    20ae:	9b 01       	movw	r18, r22
    20b0:	ac 01       	movw	r20, r24
    20b2:	0a 2e       	mov	r0, r26
    20b4:	06 94       	lsr	r0
    20b6:	57 95       	ror	r21
    20b8:	47 95       	ror	r20
    20ba:	37 95       	ror	r19
    20bc:	27 95       	ror	r18
    20be:	ba 95       	dec	r27
    20c0:	c9 f7       	brne	.-14     	; 0x20b4 <__ultoa_invert+0xa2>
    20c2:	62 0f       	add	r22, r18
    20c4:	73 1f       	adc	r23, r19
    20c6:	84 1f       	adc	r24, r20
    20c8:	95 1f       	adc	r25, r21
    20ca:	a0 1d       	adc	r26, r0
    20cc:	08 95       	ret

000020ce <eeprom_read_byte>:
    20ce:	f9 99       	sbic	0x1f, 1	; 31
    20d0:	fe cf       	rjmp	.-4      	; 0x20ce <eeprom_read_byte>
    20d2:	92 bd       	out	0x22, r25	; 34
    20d4:	81 bd       	out	0x21, r24	; 33
    20d6:	f8 9a       	sbi	0x1f, 0	; 31
    20d8:	99 27       	eor	r25, r25
    20da:	80 b5       	in	r24, 0x20	; 32
    20dc:	08 95       	ret

000020de <eeprom_write_byte>:
    20de:	26 2f       	mov	r18, r22

000020e0 <eeprom_write_r18>:
    20e0:	f9 99       	sbic	0x1f, 1	; 31
    20e2:	fe cf       	rjmp	.-4      	; 0x20e0 <eeprom_write_r18>
    20e4:	1f ba       	out	0x1f, r1	; 31
    20e6:	92 bd       	out	0x22, r25	; 34
    20e8:	81 bd       	out	0x21, r24	; 33
    20ea:	20 bd       	out	0x20, r18	; 32
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	fa 9a       	sbi	0x1f, 2	; 31
    20f2:	f9 9a       	sbi	0x1f, 1	; 31
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	08 95       	ret

000020fa <__divmodsi4>:
    20fa:	05 2e       	mov	r0, r21
    20fc:	97 fb       	bst	r25, 7
    20fe:	1e f4       	brtc	.+6      	; 0x2106 <__divmodsi4+0xc>
    2100:	00 94       	com	r0
    2102:	0e 94 94 10 	call	0x2128	; 0x2128 <__negsi2>
    2106:	57 fd       	sbrc	r21, 7
    2108:	07 d0       	rcall	.+14     	; 0x2118 <__divmodsi4_neg2>
    210a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__udivmodsi4>
    210e:	07 fc       	sbrc	r0, 7
    2110:	03 d0       	rcall	.+6      	; 0x2118 <__divmodsi4_neg2>
    2112:	4e f4       	brtc	.+18     	; 0x2126 <__divmodsi4_exit>
    2114:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__negsi2>

00002118 <__divmodsi4_neg2>:
    2118:	50 95       	com	r21
    211a:	40 95       	com	r20
    211c:	30 95       	com	r19
    211e:	21 95       	neg	r18
    2120:	3f 4f       	sbci	r19, 0xFF	; 255
    2122:	4f 4f       	sbci	r20, 0xFF	; 255
    2124:	5f 4f       	sbci	r21, 0xFF	; 255

00002126 <__divmodsi4_exit>:
    2126:	08 95       	ret

00002128 <__negsi2>:
    2128:	90 95       	com	r25
    212a:	80 95       	com	r24
    212c:	70 95       	com	r23
    212e:	61 95       	neg	r22
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8f 4f       	sbci	r24, 0xFF	; 255
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	08 95       	ret

00002138 <__muluhisi3>:
    2138:	0e 94 44 0b 	call	0x1688	; 0x1688 <__umulhisi3>
    213c:	a5 9f       	mul	r26, r21
    213e:	90 0d       	add	r25, r0
    2140:	b4 9f       	mul	r27, r20
    2142:	90 0d       	add	r25, r0
    2144:	a4 9f       	mul	r26, r20
    2146:	80 0d       	add	r24, r0
    2148:	91 1d       	adc	r25, r1
    214a:	11 24       	eor	r1, r1
    214c:	08 95       	ret

0000214e <__mulshisi3>:
    214e:	b7 ff       	sbrs	r27, 7
    2150:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__muluhisi3>

00002154 <__mulohisi3>:
    2154:	0e 94 9c 10 	call	0x2138	; 0x2138 <__muluhisi3>
    2158:	82 1b       	sub	r24, r18
    215a:	93 0b       	sbc	r25, r19
    215c:	08 95       	ret

0000215e <__prologue_saves__>:
    215e:	2f 92       	push	r2
    2160:	3f 92       	push	r3
    2162:	4f 92       	push	r4
    2164:	5f 92       	push	r5
    2166:	6f 92       	push	r6
    2168:	7f 92       	push	r7
    216a:	8f 92       	push	r8
    216c:	9f 92       	push	r9
    216e:	af 92       	push	r10
    2170:	bf 92       	push	r11
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	ca 1b       	sub	r28, r26
    2188:	db 0b       	sbc	r29, r27
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	09 94       	ijmp

00002196 <__epilogue_restores__>:
    2196:	2a 88       	ldd	r2, Y+18	; 0x12
    2198:	39 88       	ldd	r3, Y+17	; 0x11
    219a:	48 88       	ldd	r4, Y+16	; 0x10
    219c:	5f 84       	ldd	r5, Y+15	; 0x0f
    219e:	6e 84       	ldd	r6, Y+14	; 0x0e
    21a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21a8:	b9 84       	ldd	r11, Y+9	; 0x09
    21aa:	c8 84       	ldd	r12, Y+8	; 0x08
    21ac:	df 80       	ldd	r13, Y+7	; 0x07
    21ae:	ee 80       	ldd	r14, Y+6	; 0x06
    21b0:	fd 80       	ldd	r15, Y+5	; 0x05
    21b2:	0c 81       	ldd	r16, Y+4	; 0x04
    21b4:	1b 81       	ldd	r17, Y+3	; 0x03
    21b6:	aa 81       	ldd	r26, Y+2	; 0x02
    21b8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ba:	ce 0f       	add	r28, r30
    21bc:	d1 1d       	adc	r29, r1
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	ed 01       	movw	r28, r26
    21ca:	08 95       	ret

000021cc <__udivmodsi4>:
    21cc:	a1 e2       	ldi	r26, 0x21	; 33
    21ce:	1a 2e       	mov	r1, r26
    21d0:	aa 1b       	sub	r26, r26
    21d2:	bb 1b       	sub	r27, r27
    21d4:	fd 01       	movw	r30, r26
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <__udivmodsi4_ep>

000021d8 <__udivmodsi4_loop>:
    21d8:	aa 1f       	adc	r26, r26
    21da:	bb 1f       	adc	r27, r27
    21dc:	ee 1f       	adc	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	a2 17       	cp	r26, r18
    21e2:	b3 07       	cpc	r27, r19
    21e4:	e4 07       	cpc	r30, r20
    21e6:	f5 07       	cpc	r31, r21
    21e8:	20 f0       	brcs	.+8      	; 0x21f2 <__udivmodsi4_ep>
    21ea:	a2 1b       	sub	r26, r18
    21ec:	b3 0b       	sbc	r27, r19
    21ee:	e4 0b       	sbc	r30, r20
    21f0:	f5 0b       	sbc	r31, r21

000021f2 <__udivmodsi4_ep>:
    21f2:	66 1f       	adc	r22, r22
    21f4:	77 1f       	adc	r23, r23
    21f6:	88 1f       	adc	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	1a 94       	dec	r1
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <__udivmodsi4_loop>
    21fe:	60 95       	com	r22
    2200:	70 95       	com	r23
    2202:	80 95       	com	r24
    2204:	90 95       	com	r25
    2206:	9b 01       	movw	r18, r22
    2208:	ac 01       	movw	r20, r24
    220a:	bd 01       	movw	r22, r26
    220c:	cf 01       	movw	r24, r30
    220e:	08 95       	ret

00002210 <_exit>:
    2210:	f8 94       	cli

00002212 <__stop_program>:
    2212:	ff cf       	rjmp	.-2      	; 0x2212 <__stop_program>
