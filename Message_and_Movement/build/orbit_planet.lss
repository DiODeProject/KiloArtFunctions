
build/orbit_planet.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	c8 02       	muls	r28, r24
      6a:	44 03       	mulsu	r20, r20
      6c:	9c 02       	muls	r25, r28
      6e:	93 02       	muls	r25, r19
      70:	99 02       	muls	r25, r25
      72:	26 03       	mulsu	r18, r22
      74:	1b 03       	fmul	r17, r19
      76:	a6 09       	sbc	r26, r6
      78:	83 08       	sbc	r8, r3
      7a:	83 08       	sbc	r8, r3
      7c:	a3 09       	sbc	r26, r3
      7e:	af 09       	sbc	r26, r15
      80:	9f 09       	sbc	r25, r15
      82:	b6 09       	sbc	r27, r6
      84:	b2 09       	sbc	r27, r2
      86:	ba 09       	sbc	r27, r10
      88:	72 09       	sbc	r23, r2
      8a:	44 09       	sbc	r20, r4

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee eb       	ldi	r30, 0xBE	; 190
      b8:	f1 e2       	ldi	r31, 0x21	; 33
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 31       	cpi	r26, 0x1E	; 30
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e1       	ldi	r26, 0x1E	; 30
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <main>
      da:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:
        }
    }
}

void setup()
{
      f4:	08 95       	ret

000000f6 <message_rx>:
        }
    }
}

void message_rx(message_t *m, distance_measurement_t *d)
{
      f6:	cb 01       	movw	r24, r22
    new_message = 1;
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	30 93 1f 01 	sts	0x011F, r19
     100:	20 93 1e 01 	sts	0x011E, r18
    distance = estimate_distance(d);
     104:	0e 94 c2 04 	call	0x984	; 0x984 <estimate_distance>
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 27 01 	sts	0x0127, r25
     10e:	80 93 26 01 	sts	0x0126, r24
     112:	08 95       	ret

00000114 <loop>:
void setup()
{
}

void loop()
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
    // Update the motion whenever a message is received.
    if (new_message == 1)
     118:	c0 91 1e 01 	lds	r28, 0x011E
     11c:	d0 91 1f 01 	lds	r29, 0x011F
     120:	c1 30       	cpi	r28, 0x01	; 1
     122:	d1 05       	cpc	r29, r1
     124:	19 f0       	breq	.+6      	; 0x12c <loop+0x18>
                set_color(RGB(0, 0, 1));
                set_motion(RIGHT);
            }
        }
    }
}
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	08 95       	ret
void loop()
{
    // Update the motion whenever a message is received.
    if (new_message == 1)
    {
        new_message = 0;
     12c:	10 92 1f 01 	sts	0x011F, r1
     130:	10 92 1e 01 	sts	0x011E, r1
        printf("%d\n",distance);
     134:	80 91 27 01 	lds	r24, 0x0127
     138:	8f 93       	push	r24
     13a:	80 91 26 01 	lds	r24, 0x0126
     13e:	8f 93       	push	r24
     140:	89 e1       	ldi	r24, 0x19	; 25
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	9f 93       	push	r25
     146:	8f 93       	push	r24
     148:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <printf>
        
        // If too close, move forward to get back into orbit.
        if (distance < TOO_CLOSE_DISTANCE)
     14c:	80 91 26 01 	lds	r24, 0x0126
     150:	90 91 27 01 	lds	r25, 0x0127
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	88 32       	cpi	r24, 0x28	; 40
     15e:	91 05       	cpc	r25, r1
     160:	0c f4       	brge	.+2      	; 0x164 <loop+0x50>
     162:	49 c0       	rjmp	.+146    	; 0x1f6 <loop+0xe2>
        }
        // If not too close, turn left or right depending on distance,
        // to maintain orbit.
        else
        {
            if (distance < DESIRED_DISTANCE)
     164:	cc 97       	sbiw	r24, 0x3c	; 60
     166:	1c f1       	brlt	.+70     	; 0x1ae <loop+0x9a>
                set_color(RGB(1, 0, 0));
                set_motion(LEFT);
            }
            else
            {
                set_color(RGB(0, 0, 1));
     168:	80 e1       	ldi	r24, 0x10	; 16
     16a:	0e 94 fd 07 	call	0xffa	; 0xffa <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     16e:	80 91 20 01 	lds	r24, 0x0120
     172:	90 91 21 01 	lds	r25, 0x0121
     176:	03 97       	sbiw	r24, 0x03	; 3
     178:	b1 f2       	breq	.-84     	; 0x126 <loop+0x12>
    {
        current_motion = new_motion;
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	90 93 21 01 	sts	0x0121, r25
     182:	80 93 20 01 	sts	0x0120, r24
            spinup_motors();
            set_motors(kilo_turn_left, kilo_turn_right*3/4);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     186:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <spinup_motors>
            set_motors(kilo_turn_left*3/4, kilo_turn_right);
     18a:	80 91 85 01 	lds	r24, 0x0185
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	9c 01       	movw	r18, r24
     192:	22 0f       	add	r18, r18
     194:	33 1f       	adc	r19, r19
     196:	82 0f       	add	r24, r18
     198:	93 1f       	adc	r25, r19
     19a:	95 95       	asr	r25
     19c:	87 95       	ror	r24
     19e:	95 95       	asr	r25
     1a0:	87 95       	ror	r24
     1a2:	60 91 71 01 	lds	r22, 0x0171
                set_color(RGB(0, 0, 1));
                set_motion(RIGHT);
            }
        }
    }
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
            set_motors(kilo_turn_left, kilo_turn_right*3/4);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
            set_motors(kilo_turn_left*3/4, kilo_turn_right);
     1aa:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <set_motors>
        // to maintain orbit.
        else
        {
            if (distance < DESIRED_DISTANCE)
            {
                set_color(RGB(1, 0, 0));
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	0e 94 fd 07 	call	0xffa	; 0xffa <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1b4:	80 91 20 01 	lds	r24, 0x0120
     1b8:	90 91 21 01 	lds	r25, 0x0121
     1bc:	02 97       	sbiw	r24, 0x02	; 2
     1be:	09 f4       	brne	.+2      	; 0x1c2 <loop+0xae>
     1c0:	b2 cf       	rjmp	.-156    	; 0x126 <loop+0x12>
    {
        current_motion = new_motion;
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	90 93 21 01 	sts	0x0121, r25
     1ca:	80 93 20 01 	sts	0x0120, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     1ce:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <spinup_motors>
            set_motors(kilo_turn_left, kilo_turn_right*3/4);
     1d2:	80 91 71 01 	lds	r24, 0x0171
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	bc 01       	movw	r22, r24
     1da:	66 0f       	add	r22, r22
     1dc:	77 1f       	adc	r23, r23
     1de:	68 0f       	add	r22, r24
     1e0:	79 1f       	adc	r23, r25
     1e2:	75 95       	asr	r23
     1e4:	67 95       	ror	r22
     1e6:	75 95       	asr	r23
     1e8:	67 95       	ror	r22
     1ea:	80 91 85 01 	lds	r24, 0x0185
                set_color(RGB(0, 0, 1));
                set_motion(RIGHT);
            }
        }
    }
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
            set_motors(kilo_turn_left, kilo_turn_right*3/4);
     1f2:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <set_motors>
        printf("%d\n",distance);
        
        // If too close, move forward to get back into orbit.
        if (distance < TOO_CLOSE_DISTANCE)
        {
            set_color(RGB(0, 1, 0));
     1f6:	84 e0       	ldi	r24, 0x04	; 4
     1f8:	0e 94 fd 07 	call	0xffa	; 0xffa <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1fc:	80 91 20 01 	lds	r24, 0x0120
     200:	90 91 21 01 	lds	r25, 0x0121
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	09 f4       	brne	.+2      	; 0x20a <loop+0xf6>
     208:	8e cf       	rjmp	.-228    	; 0x126 <loop+0x12>
    {
        current_motion = new_motion;
     20a:	d0 93 21 01 	sts	0x0121, r29
     20e:	c0 93 20 01 	sts	0x0120, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     212:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     216:	60 91 84 01 	lds	r22, 0x0184
     21a:	80 91 83 01 	lds	r24, 0x0183
                set_color(RGB(0, 0, 1));
                set_motion(RIGHT);
            }
        }
    }
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     222:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <set_motors>

00000226 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     226:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     228:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     22a:	8c e0       	ldi	r24, 0x0C	; 12
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	90 93 c5 00 	sts	0x00C5, r25
     232:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     236:	e0 ec       	ldi	r30, 0xC0	; 192
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8d 7f       	andi	r24, 0xFD	; 253
     23e:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     240:	e2 ec       	ldi	r30, 0xC2	; 194
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	86 60       	ori	r24, 0x06	; 6
     248:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     24a:	e1 ec       	ldi	r30, 0xC1	; 193
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 60       	ori	r24, 0x08	; 8
     252:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	90 93 89 01 	sts	0x0189, r25
     25c:	80 93 88 01 	sts	0x0188, r24
    sei();
     260:	78 94       	sei
     262:	08 95       	ret

00000264 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     264:	20 91 20 01 	lds	r18, 0x0120
     268:	30 91 21 01 	lds	r19, 0x0121
     26c:	28 17       	cp	r18, r24
     26e:	39 07       	cpc	r19, r25
     270:	71 f0       	breq	.+28     	; 0x28e <set_motion+0x2a>
    {
        current_motion = new_motion;
     272:	90 93 21 01 	sts	0x0121, r25
     276:	80 93 20 01 	sts	0x0120, r24
        
        if (current_motion == STOP)
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	d9 f0       	breq	.+54     	; 0x2b4 <set_motion+0x50>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	91 05       	cpc	r25, r1
     282:	e1 f0       	breq	.+56     	; 0x2bc <set_motion+0x58>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	91 05       	cpc	r25, r1
     288:	09 f1       	breq	.+66     	; 0x2cc <set_motion+0x68>
        {
            spinup_motors();
            set_motors(kilo_turn_left, kilo_turn_right*3/4);
        }
        else if (current_motion == RIGHT)
     28a:	03 97       	sbiw	r24, 0x03	; 3
     28c:	09 f0       	breq	.+2      	; 0x290 <set_motion+0x2c>
     28e:	08 95       	ret
        {
            spinup_motors();
     290:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <spinup_motors>
            set_motors(kilo_turn_left*3/4, kilo_turn_right);
     294:	80 91 85 01 	lds	r24, 0x0185
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	9c 01       	movw	r18, r24
     29c:	22 0f       	add	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	82 0f       	add	r24, r18
     2a2:	93 1f       	adc	r25, r19
     2a4:	95 95       	asr	r25
     2a6:	87 95       	ror	r24
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	60 91 71 01 	lds	r22, 0x0171
     2b0:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2bc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2c0:	60 91 84 01 	lds	r22, 0x0184
     2c4:	80 91 83 01 	lds	r24, 0x0183
     2c8:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     2cc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <spinup_motors>
            set_motors(kilo_turn_left, kilo_turn_right*3/4);
     2d0:	80 91 71 01 	lds	r24, 0x0171
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	bc 01       	movw	r22, r24
     2d8:	66 0f       	add	r22, r22
     2da:	77 1f       	adc	r23, r23
     2dc:	68 0f       	add	r22, r24
     2de:	79 1f       	adc	r23, r25
     2e0:	75 95       	asr	r23
     2e2:	67 95       	ror	r22
     2e4:	75 95       	asr	r23
     2e6:	67 95       	ror	r22
     2e8:	80 91 85 01 	lds	r24, 0x0185
     2ec:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <set_motors>

000002f0 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     2f0:	08 95       	ret

000002f2 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	08 95       	ret

000002f8 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     2f8:	08 95       	ret

000002fa <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
    cli();
     308:	f8 94       	cli

    ports_off();
     30a:	14 b8       	out	0x04, r1	; 4
     30c:	17 b8       	out	0x07, r1	; 7
     30e:	1a b8       	out	0x0a, r1	; 10
     310:	15 b8       	out	0x05, r1	; 5
     312:	18 b8       	out	0x08, r1	; 8
     314:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     316:	52 9a       	sbi	0x0a, 2	; 10
     318:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     31a:	14 bc       	out	0x24, r1	; 36
     31c:	85 e0       	ldi	r24, 0x05	; 5
     31e:	85 bd       	out	0x25, r24	; 37
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	87 bd       	out	0x27, r24	; 39
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     32a:	10 92 80 00 	sts	0x0080, r1
     32e:	10 92 81 00 	sts	0x0081, r1
     332:	2f e8       	ldi	r18, 0x8F	; 143
     334:	3b e0       	ldi	r19, 0x0B	; 11
     336:	30 93 89 00 	sts	0x0089, r19
     33a:	20 93 88 00 	sts	0x0088, r18
     33e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     342:	53 98       	cbi	0x0a, 3	; 10
     344:	23 98       	cbi	0x04, 3	; 4
     346:	91 ea       	ldi	r25, 0xA1	; 161
     348:	90 93 b0 00 	sts	0x00B0, r25
     34c:	80 93 b1 00 	sts	0x00B1, r24
     350:	10 92 b4 00 	sts	0x00B4, r1
     354:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     358:	8b e0       	ldi	r24, 0x0B	; 11
     35a:	80 bf       	out	0x30, r24	; 48
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     362:	86 e0       	ldi	r24, 0x06	; 6
     364:	80 93 7c 00 	sts	0x007C, r24
     368:	83 e8       	ldi	r24, 0x83	; 131
     36a:	80 93 7a 00 	sts	0x007A, r24
     36e:	80 91 7a 00 	lds	r24, 0x007A
     372:	80 64       	ori	r24, 0x40	; 64
     374:	80 93 7a 00 	sts	0x007A, r24
     378:	80 91 7a 00 	lds	r24, 0x007A
     37c:	86 fd       	sbrc	r24, 6
     37e:	fc cf       	rjmp	.-8      	; 0x378 <kilo_init+0x7e>
    adc_trigger_high_gain();
     380:	10 92 7c 00 	sts	0x007C, r1
     384:	83 ea       	ldi	r24, 0xA3	; 163
     386:	80 93 7a 00 	sts	0x007A, r24
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
    if (osccal != 0xFF)
     398:	8f 3f       	cpi	r24, 0xFF	; 255
     39a:	11 f0       	breq	.+4      	; 0x3a0 <kilo_init+0xa6>
        OSCCAL = osccal;
     39c:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     3a0:	10 92 4f 01 	sts	0x014F, r1
    rx_leadingbit = 1;
     3a4:	c1 e0       	ldi	r28, 0x01	; 1
     3a6:	c0 93 28 01 	sts	0x0128, r28
    rx_leadingbyte = 1;
     3aa:	c0 93 6c 01 	sts	0x016C, r28
    rx_byteindex = 0;
     3ae:	10 92 46 01 	sts	0x0146, r1
    rx_bytevalue = 0;
     3b2:	10 92 80 01 	sts	0x0180, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3b6:	80 e9       	ldi	r24, 0x90	; 144
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     3be:	80 93 45 01 	sts	0x0145, r24
    if (tx_mask & ~TX_MASK_MAX)
     3c2:	80 91 45 01 	lds	r24, 0x0145
     3c6:	88 73       	andi	r24, 0x38	; 56
     3c8:	11 f0       	breq	.+4      	; 0x3ce <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3ca:	c0 93 45 01 	sts	0x0145, r28
    tx_clock = 0;
     3ce:	10 92 70 01 	sts	0x0170, r1
     3d2:	10 92 6f 01 	sts	0x016F, r1
    tx_increment = 255;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	90 93 6e 01 	sts	0x016E, r25
     3de:	80 93 6d 01 	sts	0x016D, r24
    kilo_ticks = 0;
     3e2:	10 92 4b 01 	sts	0x014B, r1
     3e6:	10 92 4c 01 	sts	0x014C, r1
     3ea:	10 92 4d 01 	sts	0x014D, r1
     3ee:	10 92 4e 01 	sts	0x014E, r1
    kilo_state = IDLE;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 25 01 	sts	0x0125, r24
    kilo_tx_period = 3906;
     3f8:	82 e4       	ldi	r24, 0x42	; 66
     3fa:	9f e0       	ldi	r25, 0x0F	; 15
     3fc:	90 93 7f 01 	sts	0x017F, r25
     400:	80 93 7e 01 	sts	0x017E, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     404:	80 eb       	ldi	r24, 0xB0	; 176
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     40c:	c8 2f       	mov	r28, r24
     40e:	81 eb       	ldi	r24, 0xB1	; 177
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     416:	2c 2f       	mov	r18, r28
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	38 2b       	or	r19, r24
     41c:	30 93 82 01 	sts	0x0182, r19
     420:	20 93 81 01 	sts	0x0181, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     424:	85 e0       	ldi	r24, 0x05	; 5
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     42c:	80 93 85 01 	sts	0x0185, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     430:	89 e0       	ldi	r24, 0x09	; 9
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     438:	80 93 71 01 	sts	0x0171, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     43c:	8c e0       	ldi	r24, 0x0C	; 12
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     444:	80 93 83 01 	sts	0x0183, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     448:	84 e1       	ldi	r24, 0x14	; 20
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     450:	80 93 84 01 	sts	0x0184, r24
     454:	50 e5       	ldi	r21, 0x50	; 80
     456:	e5 2e       	mov	r14, r21
     458:	51 e0       	ldi	r21, 0x01	; 1
     45a:	f5 2e       	mov	r15, r21
     45c:	09 e2       	ldi	r16, 0x29	; 41
     45e:	11 e0       	ldi	r17, 0x01	; 1
     460:	c0 e2       	ldi	r28, 0x20	; 32
     462:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     464:	ce 01       	movw	r24, r28
     466:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     46a:	d8 2e       	mov	r13, r24
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     474:	2d 2d       	mov	r18, r13
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	32 2f       	mov	r19, r18
     47a:	22 27       	eor	r18, r18
     47c:	28 2b       	or	r18, r24
     47e:	f7 01       	movw	r30, r14
     480:	21 93       	st	Z+, r18
     482:	31 93       	st	Z+, r19
     484:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     486:	ce 01       	movw	r24, r28
     488:	c0 96       	adiw	r24, 0x30	; 48
     48a:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     48e:	d8 2e       	mov	r13, r24
     490:	ce 01       	movw	r24, r28
     492:	c1 96       	adiw	r24, 0x31	; 49
     494:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_byte>
     498:	2d 2d       	mov	r18, r13
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	32 2f       	mov	r19, r18
     49e:	22 27       	eor	r18, r18
     4a0:	28 2b       	or	r18, r24
     4a2:	f8 01       	movw	r30, r16
     4a4:	21 93       	st	Z+, r18
     4a6:	31 93       	st	Z+, r19
     4a8:	8f 01       	movw	r16, r30
     4aa:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4ac:	cc 33       	cpi	r28, 0x3C	; 60
     4ae:	d1 05       	cpc	r29, r1
     4b0:	c9 f6       	brne	.-78     	; 0x464 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4b2:	78 94       	sei
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	08 95       	ret

000004c4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	8f 93       	push	r24
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	a8 95       	wdr
     4d6:	80 91 60 00 	lds	r24, 0x0060
     4da:	88 61       	ori	r24, 0x18	; 24
     4dc:	80 93 60 00 	sts	0x0060, r24
     4e0:	10 92 60 00 	sts	0x0060, r1
     4e4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     4e6:	8f 91       	pop	r24
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     4f2:	3c 01       	movw	r6, r24
     4f4:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     4f6:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     4f8:	99 24       	eor	r9, r9
     4fa:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     4fc:	84 e0       	ldi	r24, 0x04	; 4
     4fe:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     500:	96 e0       	ldi	r25, 0x06	; 6
     502:	a9 2e       	mov	r10, r25
     504:	23 e8       	ldi	r18, 0x83	; 131
     506:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     508:	38 e1       	ldi	r19, 0x18	; 24
     50a:	d3 2e       	mov	r13, r19
     50c:	49 e2       	ldi	r20, 0x29	; 41
     50e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     510:	90 91 25 01 	lds	r25, 0x0125
     514:	e9 2f       	mov	r30, r25
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	e7 30       	cpi	r30, 0x07	; 7
     51a:	f1 05       	cpc	r31, r1
     51c:	c8 f7       	brcc	.-14     	; 0x510 <kilo_start+0x1e>
     51e:	ec 5c       	subi	r30, 0xCC	; 204
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     526:	11 23       	and	r17, r17
     528:	09 f4       	brne	.+2      	; 0x52c <kilo_start+0x3a>
     52a:	fc c0       	rjmp	.+504    	; 0x724 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     52c:	c0 92 25 01 	sts	0x0125, r12
     530:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     532:	fe 01       	movw	r30, r28
     534:	09 95       	icall
                break;
     536:	ec cf       	rjmp	.-40     	; 0x510 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     538:	80 91 4f 01 	lds	r24, 0x014F
     53c:	81 11       	cpse	r24, r1
     53e:	eb c0       	rjmp	.+470    	; 0x716 <kilo_start+0x224>
        cli();                                    // disable interrupts
     540:	f8 94       	cli
        adc_setup_conversion(6);
     542:	a0 92 7c 00 	sts	0x007C, r10
     546:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     54a:	80 91 7a 00 	lds	r24, 0x007A
     54e:	80 64       	ori	r24, 0x40	; 64
     550:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     554:	90 91 7a 00 	lds	r25, 0x007A
     558:	96 fd       	sbrc	r25, 6
     55a:	fc cf       	rjmp	.-8      	; 0x554 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     55c:	80 91 78 00 	lds	r24, 0x0078
     560:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     564:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     566:	8b 3a       	cpi	r24, 0xAB	; 171
     568:	e2 e0       	ldi	r30, 0x02	; 2
     56a:	9e 07       	cpc	r25, r30
     56c:	0c f0       	brlt	.+2      	; 0x570 <kilo_start+0x7e>
     56e:	ed c0       	rjmp	.+474    	; 0x74a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     570:	89 38       	cpi	r24, 0x89	; 137
     572:	f2 e0       	ldi	r31, 0x02	; 2
     574:	9f 07       	cpc	r25, r31
     576:	0c f0       	brlt	.+2      	; 0x57a <kilo_start+0x88>
     578:	ef c0       	rjmp	.+478    	; 0x758 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     57a:	87 36       	cpi	r24, 0x67	; 103
     57c:	92 40       	sbci	r25, 0x02	; 2
     57e:	0c f4       	brge	.+2      	; 0x582 <kilo_start+0x90>
     580:	ca c0       	rjmp	.+404    	; 0x716 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     582:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     584:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     586:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     588:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     58a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     58c:	3c 98       	cbi	0x07, 4	; 7
     58e:	c0 cf       	rjmp	.-128    	; 0x510 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     590:	f8 94       	cli
                acomp_off();
     592:	80 b7       	in	r24, 0x30	; 48
     594:	87 7f       	andi	r24, 0xF7	; 247
     596:	80 bf       	out	0x30, r24	; 48
                adc_off();
     598:	80 91 7a 00 	lds	r24, 0x007A
     59c:	8f 77       	andi	r24, 0x7F	; 127
     59e:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     5a2:	14 b8       	out	0x04, r1	; 4
     5a4:	17 b8       	out	0x07, r1	; 7
     5a6:	1a b8       	out	0x0a, r1	; 10
     5a8:	15 b8       	out	0x05, r1	; 5
     5aa:	18 b8       	out	0x08, r1	; 8
     5ac:	1b b8       	out	0x0b, r1	; 11
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	a8 95       	wdr
     5b4:	d0 92 60 00 	sts	0x0060, r13
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     5be:	80 91 60 00 	lds	r24, 0x0060
     5c2:	80 64       	ori	r24, 0x40	; 64
     5c4:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     5c8:	93 b7       	in	r25, 0x33	; 51
     5ca:	91 7f       	andi	r25, 0xF1	; 241
     5cc:	94 60       	ori	r25, 0x04	; 4
     5ce:	93 bf       	out	0x33, r25	; 51
                cli();
     5d0:	f8 94       	cli
                sleep_enable();
     5d2:	83 b7       	in	r24, 0x33	; 51
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	83 bf       	out	0x33, r24	; 51
                sei();
     5d8:	78 94       	sei
                sleep_cpu();
     5da:	88 95       	sleep
                sleep_disable();
     5dc:	83 b7       	in	r24, 0x33	; 51
     5de:	8e 7f       	andi	r24, 0xFE	; 254
     5e0:	83 bf       	out	0x33, r24	; 51
                sei();
     5e2:	78 94       	sei
                rx_busy = 0;
     5e4:	10 92 4f 01 	sts	0x014F, r1
                ports_on();
     5e8:	52 9a       	sbi	0x0a, 2	; 10
     5ea:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     5ec:	80 91 7a 00 	lds	r24, 0x007A
     5f0:	80 68       	ori	r24, 0x80	; 128
     5f2:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f6:	87 e5       	ldi	r24, 0x57	; 87
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <kilo_start+0x108>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <kilo_start+0x10e>
     600:	00 00       	nop
                _delay_us(300);
                acomp_on();
     602:	80 b7       	in	r24, 0x30	; 48
     604:	88 61       	ori	r24, 0x18	; 24
     606:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     608:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     60a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     60c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     60e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     610:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     612:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     614:	ef e1       	ldi	r30, 0x1F	; 31
     616:	fe e4       	ldi	r31, 0x4E	; 78
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <kilo_start+0x126>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <kilo_start+0x12c>
     61e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     620:	80 91 4f 01 	lds	r24, 0x014F
     624:	81 11       	cpse	r24, r1
     626:	81 c0       	rjmp	.+258    	; 0x72a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     628:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     62a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     62c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     62e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     630:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     632:	3c 98       	cbi	0x07, 4	; 7
     634:	6d cf       	rjmp	.-294    	; 0x510 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     636:	80 91 23 01 	lds	r24, 0x0123
     63a:	81 11       	cpse	r24, r1
     63c:	41 c0       	rjmp	.+130    	; 0x6c0 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     63e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     642:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     646:	10 92 24 01 	sts	0x0124, r1
     64a:	62 cf       	rjmp	.-316    	; 0x510 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     64c:	48 99       	sbic	0x09, 0	; 9
     64e:	ec cf       	rjmp	.-40     	; 0x628 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     650:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     652:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     654:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     656:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     658:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     65a:	3c 98       	cbi	0x07, 4	; 7
     65c:	8f ec       	ldi	r24, 0xCF	; 207
     65e:	97 e0       	ldi	r25, 0x07	; 7
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <kilo_start+0x16e>
     664:	00 c0       	rjmp	.+0      	; 0x666 <kilo_start+0x174>
     666:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     668:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     66a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     66c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     66e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     670:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     672:	3c 98       	cbi	0x07, 4	; 7
     674:	9f ef       	ldi	r25, 0xFF	; 255
     676:	e1 ee       	ldi	r30, 0xE1	; 225
     678:	f4 e0       	ldi	r31, 0x04	; 4
     67a:	91 50       	subi	r25, 0x01	; 1
     67c:	e0 40       	sbci	r30, 0x00	; 0
     67e:	f0 40       	sbci	r31, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <kilo_start+0x188>
     682:	00 c0       	rjmp	.+0      	; 0x684 <kilo_start+0x192>
     684:	00 00       	nop
     686:	44 cf       	rjmp	.-376    	; 0x510 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     688:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     68a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     68c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     68e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     690:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     692:	3c 98       	cbi	0x07, 4	; 7
     694:	ef ec       	ldi	r30, 0xCF	; 207
     696:	f7 e0       	ldi	r31, 0x07	; 7
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <kilo_start+0x1a6>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <kilo_start+0x1ac>
     69e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6a0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6a2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6a4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6a6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6a8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6aa:	3c 98       	cbi	0x07, 4	; 7
     6ac:	ff ef       	ldi	r31, 0xFF	; 255
     6ae:	21 ee       	ldi	r18, 0xE1	; 225
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	f1 50       	subi	r31, 0x01	; 1
     6b4:	20 40       	sbci	r18, 0x00	; 0
     6b6:	80 40       	sbci	r24, 0x00	; 0
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <kilo_start+0x1c0>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <kilo_start+0x1ca>
     6bc:	00 00       	nop
     6be:	28 cf       	rjmp	.-432    	; 0x510 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     6c0:	90 91 23 01 	lds	r25, 0x0123
     6c4:	80 91 24 01 	lds	r24, 0x0124
     6c8:	98 17       	cp	r25, r24
     6ca:	09 f4       	brne	.+2      	; 0x6ce <kilo_start+0x1dc>
     6cc:	21 cf       	rjmp	.-446    	; 0x510 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     6ce:	80 91 23 01 	lds	r24, 0x0123
     6d2:	80 93 24 01 	sts	0x0124, r24
                        if (cur_motion == MOVE_LEFT) {
     6d6:	80 91 23 01 	lds	r24, 0x0123
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <kilo_start+0x1ee>
     6de:	50 c0       	rjmp	.+160    	; 0x780 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6e0:	80 91 23 01 	lds	r24, 0x0123
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6e4:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6e8:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	d9 f1       	breq	.+118    	; 0x766 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6f0:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     6f4:	90 92 b4 00 	sts	0x00B4, r9
     6f8:	8f e2       	ldi	r24, 0x2F	; 47
     6fa:	95 e7       	ldi	r25, 0x75	; 117
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <kilo_start+0x20a>
     700:	00 c0       	rjmp	.+0      	; 0x702 <kilo_start+0x210>
     702:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     704:	80 91 84 01 	lds	r24, 0x0184
     708:	90 91 83 01 	lds	r25, 0x0183
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     70c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     710:	80 93 b4 00 	sts	0x00B4, r24
     714:	fd ce       	rjmp	.-518    	; 0x510 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     716:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     718:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     71a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     71c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     71e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     720:	3c 98       	cbi	0x07, 4	; 7
     722:	f6 ce       	rjmp	.-532    	; 0x510 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     724:	f3 01       	movw	r30, r6
     726:	09 95       	icall
     728:	01 cf       	rjmp	.-510    	; 0x52c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     72a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     72c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     72e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     730:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     732:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     734:	3c 98       	cbi	0x07, 4	; 7
     736:	ff ef       	ldi	r31, 0xFF	; 255
     738:	20 e7       	ldi	r18, 0x70	; 112
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	f1 50       	subi	r31, 0x01	; 1
     73e:	20 40       	sbci	r18, 0x00	; 0
     740:	80 40       	sbci	r24, 0x00	; 0
     742:	e1 f7       	brne	.-8      	; 0x73c <kilo_start+0x24a>
     744:	00 c0       	rjmp	.+0      	; 0x746 <kilo_start+0x254>
     746:	00 00       	nop
     748:	6f cf       	rjmp	.-290    	; 0x628 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     74a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     74c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     74e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     750:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     752:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     754:	3c 98       	cbi	0x07, 4	; 7
     756:	dc ce       	rjmp	.-584    	; 0x510 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     758:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     75a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     75c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     75e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     760:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     762:	3c 9a       	sbi	0x07, 4	; 7
     764:	d5 ce       	rjmp	.-598    	; 0x510 <kilo_start+0x1e>
     766:	ef e2       	ldi	r30, 0x2F	; 47
     768:	f5 e7       	ldi	r31, 0x75	; 117
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <kilo_start+0x278>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <kilo_start+0x27e>
     770:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     772:	80 91 71 01 	lds	r24, 0x0171
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     776:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     77a:	80 93 b4 00 	sts	0x00B4, r24
     77e:	c8 ce       	rjmp	.-624    	; 0x510 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     780:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     784:	10 92 b4 00 	sts	0x00B4, r1
     788:	8f e2       	ldi	r24, 0x2F	; 47
     78a:	95 e7       	ldi	r25, 0x75	; 117
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <kilo_start+0x29a>
     790:	00 c0       	rjmp	.+0      	; 0x792 <kilo_start+0x2a0>
     792:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     794:	80 91 85 01 	lds	r24, 0x0185
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     798:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     79c:	10 92 b4 00 	sts	0x00B4, r1
     7a0:	b7 ce       	rjmp	.-658    	; 0x510 <kilo_start+0x1e>

000007a2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     7a2:	07 c0       	rjmp	.+14     	; 0x7b2 <delay+0x10>
     7a4:	ef ec       	ldi	r30, 0xCF	; 207
     7a6:	f7 e0       	ldi	r31, 0x07	; 7
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <delay+0x6>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <delay+0xc>
     7ae:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     7b0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	b9 f7       	brne	.-18     	; 0x7a4 <delay+0x2>
     7b6:	08 95       	ret

000007b8 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7b8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7bc:	60 93 b4 00 	sts	0x00B4, r22
     7c0:	08 95       	ret

000007c2 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     7c8:	80 93 b4 00 	sts	0x00B4, r24
     7cc:	8f e0       	ldi	r24, 0x0F	; 15
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	ef ec       	ldi	r30, 0xCF	; 207
     7d2:	f7 e0       	ldi	r31, 0x07	; 7
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <spinup_motors+0x12>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <spinup_motors+0x18>
     7da:	00 00       	nop
     7dc:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     7de:	c1 f7       	brne	.-16     	; 0x7d0 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     7e0:	08 95       	ret

000007e2 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     7e2:	80 91 4f 01 	lds	r24, 0x014F
     7e6:	81 11       	cpse	r24, r1
     7e8:	1e c0       	rjmp	.+60     	; 0x826 <get_ambientlight+0x44>
        cli();
     7ea:	f8 94       	cli
        adc_setup_conversion(7);
     7ec:	87 e0       	ldi	r24, 0x07	; 7
     7ee:	80 93 7c 00 	sts	0x007C, r24
     7f2:	83 e8       	ldi	r24, 0x83	; 131
     7f4:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7f8:	80 91 7a 00 	lds	r24, 0x007A
     7fc:	80 64       	ori	r24, 0x40	; 64
     7fe:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     802:	80 91 7a 00 	lds	r24, 0x007A
     806:	86 fd       	sbrc	r24, 6
     808:	fc cf       	rjmp	.-8      	; 0x802 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     80a:	80 91 78 00 	lds	r24, 0x0078
     80e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     812:	10 92 7c 00 	sts	0x007C, r1
     816:	23 ea       	ldi	r18, 0xA3	; 163
     818:	20 93 7a 00 	sts	0x007A, r18
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     822:	78 94       	sei
     824:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     82a:	08 95       	ret

0000082c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     82c:	80 91 4f 01 	lds	r24, 0x014F
     830:	81 11       	cpse	r24, r1
     832:	1e c0       	rjmp	.+60     	; 0x870 <get_temperature+0x44>
        cli();
     834:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     836:	88 ec       	ldi	r24, 0xC8	; 200
     838:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     83c:	87 e8       	ldi	r24, 0x87	; 135
     83e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     842:	80 91 7a 00 	lds	r24, 0x007A
     846:	80 64       	ori	r24, 0x40	; 64
     848:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     84c:	80 91 7a 00 	lds	r24, 0x007A
     850:	86 fd       	sbrc	r24, 6
     852:	fc cf       	rjmp	.-8      	; 0x84c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     854:	80 91 78 00 	lds	r24, 0x0078
     858:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     85c:	10 92 7c 00 	sts	0x007C, r1
     860:	23 ea       	ldi	r18, 0xA3	; 163
     862:	20 93 7a 00 	sts	0x007A, r18
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     86c:	78 94       	sei
     86e:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     874:	08 95       	ret

00000876 <rand_hard>:

uint8_t rand_hard() {
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	e0 e0       	ldi	r30, 0x00	; 0
     880:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     882:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     884:	03 ea       	ldi	r16, 0xA3	; 163
     886:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     888:	d6 e0       	ldi	r29, 0x06	; 6
     88a:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     88c:	a1 e0       	ldi	r26, 0x01	; 1
     88e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     890:	60 e8       	ldi	r22, 0x80	; 128
     892:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     894:	f8 94       	cli
            adc_setup_conversion(6);
     896:	d0 93 7c 00 	sts	0x007C, r29
     89a:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     89e:	90 91 7a 00 	lds	r25, 0x007A
     8a2:	90 64       	ori	r25, 0x40	; 64
     8a4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8a8:	90 91 7a 00 	lds	r25, 0x007A
     8ac:	96 fd       	sbrc	r25, 6
     8ae:	fc cf       	rjmp	.-8      	; 0x8a8 <rand_hard+0x32>
            a = ADCW&0x1;
     8b0:	20 91 78 00 	lds	r18, 0x0078
     8b4:	30 91 79 00 	lds	r19, 0x0079
     8b8:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     8ba:	90 91 7a 00 	lds	r25, 0x007A
     8be:	90 64       	ori	r25, 0x40	; 64
     8c0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     8c4:	90 91 7a 00 	lds	r25, 0x007A
     8c8:	96 fd       	sbrc	r25, 6
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <rand_hard+0x4e>
            b = ADCW&0x1;
     8cc:	40 91 78 00 	lds	r20, 0x0078
     8d0:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     8d4:	10 92 7c 00 	sts	0x007C, r1
     8d8:	00 93 7a 00 	sts	0x007A, r16
     8dc:	10 93 7b 00 	sts	0x007B, r17
            sei();
     8e0:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     8e2:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     8e4:	24 13       	cpse	r18, r20
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <rand_hard+0x78>
     8e8:	61 50       	subi	r22, 0x01	; 1
     8ea:	71 09       	sbc	r23, r1
     8ec:	99 f6       	brne	.-90     	; 0x894 <rand_hard+0x1e>
        if (a)
     8ee:	22 23       	and	r18, r18
     8f0:	39 f0       	breq	.+14     	; 0x900 <__stack+0x1>
            num |= (1<<i);
     8f2:	9d 01       	movw	r18, r26
     8f4:	0e 2e       	mov	r0, r30
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <rand_hard+0x84>
     8f8:	22 0f       	add	r18, r18
     8fa:	0a 94       	dec	r0
     8fc:	ea f7       	brpl	.-6      	; 0x8f8 <rand_hard+0x82>
     8fe:	82 2b       	or	r24, r18
     900:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     902:	e8 30       	cpi	r30, 0x08	; 8
     904:	f1 05       	cpc	r31, r1
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xb>
     908:	c3 cf       	rjmp	.-122    	; 0x890 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     914:	80 91 0e 01 	lds	r24, 0x010E
     918:	98 2f       	mov	r25, r24
     91a:	99 0f       	add	r25, r25
     91c:	99 0f       	add	r25, r25
     91e:	99 0f       	add	r25, r25
     920:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     922:	90 91 22 01 	lds	r25, 0x0122
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	29 0f       	add	r18, r25
     92a:	20 93 22 01 	sts	0x0122, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     92e:	28 2f       	mov	r18, r24
     930:	22 95       	swap	r18
     932:	26 95       	lsr	r18
     934:	27 70       	andi	r18, 0x07	; 7
     936:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     938:	96 95       	lsr	r25
     93a:	96 95       	lsr	r25
     93c:	89 27       	eor	r24, r25
     93e:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     942:	08 95       	ret

00000944 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     944:	80 93 0e 01 	sts	0x010E, r24
     948:	08 95       	ret

0000094a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     94a:	80 91 4f 01 	lds	r24, 0x014F
     94e:	81 11       	cpse	r24, r1
     950:	16 c0       	rjmp	.+44     	; 0x97e <get_voltage+0x34>
        cli();                                    // disable interrupts
     952:	f8 94       	cli
        adc_setup_conversion(6);
     954:	86 e0       	ldi	r24, 0x06	; 6
     956:	80 93 7c 00 	sts	0x007C, r24
     95a:	83 e8       	ldi	r24, 0x83	; 131
     95c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     960:	80 91 7a 00 	lds	r24, 0x007A
     964:	80 64       	ori	r24, 0x40	; 64
     966:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     96a:	80 91 7a 00 	lds	r24, 0x007A
     96e:	86 fd       	sbrc	r24, 6
     970:	fc cf       	rjmp	.-8      	; 0x96a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     972:	80 91 78 00 	lds	r24, 0x0078
     976:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     97a:	78 94       	sei
     97c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     982:	08 95       	ret

00000984 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     984:	2f 92       	push	r2
     986:	3f 92       	push	r3
     988:	4f 92       	push	r4
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <estimate_distance+0x26>
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <estimate_distance+0x28>
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <estimate_distance+0x2a>
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     9b4:	dc 01       	movw	r26, r24
     9b6:	12 96       	adiw	r26, 0x02	; 2
     9b8:	0d 90       	ld	r0, X+
     9ba:	bc 91       	ld	r27, X
     9bc:	a0 2d       	mov	r26, r0
     9be:	be 83       	std	Y+6, r27	; 0x06
     9c0:	ad 83       	std	Y+5, r26	; 0x05
     9c2:	a4 38       	cpi	r26, 0x84	; 132
     9c4:	e3 e0       	ldi	r30, 0x03	; 3
     9c6:	be 07       	cpc	r27, r30
     9c8:	0c f0       	brlt	.+2      	; 0x9cc <estimate_distance+0x48>
     9ca:	c9 c0       	rjmp	.+402    	; 0xb5e <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     9cc:	80 91 29 01 	lds	r24, 0x0129
     9d0:	90 91 2a 01 	lds	r25, 0x012A
     9d4:	8a 17       	cp	r24, r26
     9d6:	9b 07       	cpc	r25, r27
     9d8:	08 f4       	brcc	.+2      	; 0x9dc <estimate_distance+0x58>
     9da:	37 c1       	rjmp	.+622    	; 0xc4a <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     9dc:	00 91 2b 01 	lds	r16, 0x012B
     9e0:	10 91 2c 01 	lds	r17, 0x012C
     9e4:	0a 17       	cp	r16, r26
     9e6:	1b 07       	cpc	r17, r27
     9e8:	08 f4       	brcc	.+2      	; 0x9ec <estimate_distance+0x68>
     9ea:	2f c2       	rjmp	.+1118   	; 0xe4a <estimate_distance+0x4c6>
     9ec:	00 91 2d 01 	lds	r16, 0x012D
     9f0:	10 91 2e 01 	lds	r17, 0x012E
     9f4:	0a 17       	cp	r16, r26
     9f6:	1b 07       	cpc	r17, r27
     9f8:	08 f4       	brcc	.+2      	; 0x9fc <estimate_distance+0x78>
     9fa:	2f c2       	rjmp	.+1118   	; 0xe5a <estimate_distance+0x4d6>
     9fc:	00 91 2f 01 	lds	r16, 0x012F
     a00:	10 91 30 01 	lds	r17, 0x0130
     a04:	0a 17       	cp	r16, r26
     a06:	1b 07       	cpc	r17, r27
     a08:	08 f4       	brcc	.+2      	; 0xa0c <estimate_distance+0x88>
     a0a:	2f c2       	rjmp	.+1118   	; 0xe6a <estimate_distance+0x4e6>
     a0c:	00 91 31 01 	lds	r16, 0x0131
     a10:	10 91 32 01 	lds	r17, 0x0132
     a14:	0a 17       	cp	r16, r26
     a16:	1b 07       	cpc	r17, r27
     a18:	08 f4       	brcc	.+2      	; 0xa1c <estimate_distance+0x98>
     a1a:	2f c2       	rjmp	.+1118   	; 0xe7a <estimate_distance+0x4f6>
     a1c:	00 91 33 01 	lds	r16, 0x0133
     a20:	10 91 34 01 	lds	r17, 0x0134
     a24:	0a 17       	cp	r16, r26
     a26:	1b 07       	cpc	r17, r27
     a28:	08 f4       	brcc	.+2      	; 0xa2c <estimate_distance+0xa8>
     a2a:	ef c1       	rjmp	.+990    	; 0xe0a <estimate_distance+0x486>
     a2c:	00 91 35 01 	lds	r16, 0x0135
     a30:	10 91 36 01 	lds	r17, 0x0136
     a34:	0a 17       	cp	r16, r26
     a36:	1b 07       	cpc	r17, r27
     a38:	08 f4       	brcc	.+2      	; 0xa3c <estimate_distance+0xb8>
     a3a:	27 c2       	rjmp	.+1102   	; 0xe8a <estimate_distance+0x506>
     a3c:	00 91 37 01 	lds	r16, 0x0137
     a40:	10 91 38 01 	lds	r17, 0x0138
     a44:	0a 17       	cp	r16, r26
     a46:	1b 07       	cpc	r17, r27
     a48:	08 f4       	brcc	.+2      	; 0xa4c <estimate_distance+0xc8>
     a4a:	27 c2       	rjmp	.+1102   	; 0xe9a <estimate_distance+0x516>
     a4c:	00 91 39 01 	lds	r16, 0x0139
     a50:	10 91 3a 01 	lds	r17, 0x013A
     a54:	0a 17       	cp	r16, r26
     a56:	1b 07       	cpc	r17, r27
     a58:	08 f4       	brcc	.+2      	; 0xa5c <estimate_distance+0xd8>
     a5a:	27 c2       	rjmp	.+1102   	; 0xeaa <estimate_distance+0x526>
     a5c:	00 91 3b 01 	lds	r16, 0x013B
     a60:	10 91 3c 01 	lds	r17, 0x013C
     a64:	0a 17       	cp	r16, r26
     a66:	1b 07       	cpc	r17, r27
     a68:	08 f4       	brcc	.+2      	; 0xa6c <estimate_distance+0xe8>
     a6a:	27 c2       	rjmp	.+1102   	; 0xeba <estimate_distance+0x536>
     a6c:	00 91 3d 01 	lds	r16, 0x013D
     a70:	10 91 3e 01 	lds	r17, 0x013E
     a74:	0a 17       	cp	r16, r26
     a76:	1b 07       	cpc	r17, r27
     a78:	08 f4       	brcc	.+2      	; 0xa7c <estimate_distance+0xf8>
     a7a:	27 c2       	rjmp	.+1102   	; 0xeca <estimate_distance+0x546>
     a7c:	00 91 3f 01 	lds	r16, 0x013F
     a80:	10 91 40 01 	lds	r17, 0x0140
     a84:	0a 17       	cp	r16, r26
     a86:	1b 07       	cpc	r17, r27
     a88:	08 f4       	brcc	.+2      	; 0xa8c <estimate_distance+0x108>
     a8a:	23 c2       	rjmp	.+1094   	; 0xed2 <estimate_distance+0x54e>
     a8c:	00 91 41 01 	lds	r16, 0x0141
     a90:	10 91 42 01 	lds	r17, 0x0142
     a94:	0a 17       	cp	r16, r26
     a96:	1b 07       	cpc	r17, r27
     a98:	08 f4       	brcc	.+2      	; 0xa9c <estimate_distance+0x118>
     a9a:	23 c2       	rjmp	.+1094   	; 0xee2 <estimate_distance+0x55e>
     a9c:	00 91 43 01 	lds	r16, 0x0143
     aa0:	10 91 44 01 	lds	r17, 0x0144
     aa4:	0a 17       	cp	r16, r26
     aa6:	1b 07       	cpc	r17, r27
     aa8:	08 f4       	brcc	.+2      	; 0xaac <estimate_distance+0x128>
     aaa:	23 c2       	rjmp	.+1094   	; 0xef2 <estimate_distance+0x56e>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 ed       	ldi	r26, 0xD0	; 208
     ab2:	b0 e4       	ldi	r27, 0x40	; 64
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	ab 83       	std	Y+3, r26	; 0x03
     aba:	bc 83       	std	Y+4, r27	; 0x04
     abc:	4c e0       	ldi	r20, 0x0C	; 12
     abe:	e4 2e       	mov	r14, r20
     ac0:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     ac2:	f7 01       	movw	r30, r14
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	e7 5d       	subi	r30, 0xD7	; 215
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	b8 01       	movw	r22, r16
     ad2:	68 1b       	sub	r22, r24
     ad4:	79 0b       	sbc	r23, r25
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     ade:	9b 01       	movw	r18, r22
     ae0:	ac 01       	movw	r20, r24
     ae2:	0e 94 3d 0b 	call	0x167a	; 0x167a <__addsf3>
     ae6:	6b 01       	movw	r12, r22
     ae8:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     aea:	ad 81       	ldd	r26, Y+5	; 0x05
     aec:	be 81       	ldd	r27, Y+6	; 0x06
     aee:	bd 01       	movw	r22, r26
     af0:	bb 0f       	add	r27, r27
     af2:	88 0b       	sbc	r24, r24
     af4:	99 0b       	sbc	r25, r25
     af6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__floatsisf>
     afa:	4b 01       	movw	r8, r22
     afc:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     afe:	b8 01       	movw	r22, r16
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     b08:	2b 01       	movw	r4, r22
     b0a:	3c 01       	movw	r6, r24
     b0c:	29 81       	ldd	r18, Y+1	; 0x01
     b0e:	3a 81       	ldd	r19, Y+2	; 0x02
     b10:	4b 81       	ldd	r20, Y+3	; 0x03
     b12:	5c 81       	ldd	r21, Y+4	; 0x04
     b14:	c7 01       	movw	r24, r14
     b16:	b6 01       	movw	r22, r12
     b18:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     b1c:	9b 01       	movw	r18, r22
     b1e:	ac 01       	movw	r20, r24
     b20:	c3 01       	movw	r24, r6
     b22:	b2 01       	movw	r22, r4
     b24:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__subsf3>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b2c:	c5 01       	movw	r24, r10
     b2e:	b4 01       	movw	r22, r8
     b30:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__subsf3>
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e2       	ldi	r20, 0x20	; 32
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
            b=((int)((int)b/(int)slope));
     b40:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixsfsi>
     b44:	8b 01       	movw	r16, r22
     b46:	c7 01       	movw	r24, r14
     b48:	b6 01       	movw	r22, r12
     b4a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixsfsi>
     b4e:	ab 01       	movw	r20, r22
     b50:	bc 01       	movw	r22, r24
     b52:	c8 01       	movw	r24, r16
     b54:	ba 01       	movw	r22, r20
     b56:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__divmodhi4>
            dist_high=b;
     b5a:	16 2f       	mov	r17, r22
     b5c:	77 c0       	rjmp	.+238    	; 0xc4c <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b5e:	dc 01       	movw	r26, r24
     b60:	cd 90       	ld	r12, X+
     b62:	dc 90       	ld	r13, X
     b64:	80 91 50 01 	lds	r24, 0x0150
     b68:	90 91 51 01 	lds	r25, 0x0151
     b6c:	8c 15       	cp	r24, r12
     b6e:	9d 05       	cpc	r25, r13
     b70:	08 f4       	brcc	.+2      	; 0xb74 <estimate_distance+0x1f0>
     b72:	8c c0       	rjmp	.+280    	; 0xc8c <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b74:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b76:	e0 90 52 01 	lds	r14, 0x0152
     b7a:	f0 90 53 01 	lds	r15, 0x0153
     b7e:	ec 14       	cp	r14, r12
     b80:	fd 04       	cpc	r15, r13
     b82:	08 f4       	brcc	.+2      	; 0xb86 <estimate_distance+0x202>
     b84:	5e c1       	rjmp	.+700    	; 0xe42 <estimate_distance+0x4be>
     b86:	e0 90 54 01 	lds	r14, 0x0154
     b8a:	f0 90 55 01 	lds	r15, 0x0155
     b8e:	ec 14       	cp	r14, r12
     b90:	fd 04       	cpc	r15, r13
     b92:	08 f4       	brcc	.+2      	; 0xb96 <estimate_distance+0x212>
     b94:	5e c1       	rjmp	.+700    	; 0xe52 <estimate_distance+0x4ce>
     b96:	e0 90 56 01 	lds	r14, 0x0156
     b9a:	f0 90 57 01 	lds	r15, 0x0157
     b9e:	ec 14       	cp	r14, r12
     ba0:	fd 04       	cpc	r15, r13
     ba2:	08 f4       	brcc	.+2      	; 0xba6 <estimate_distance+0x222>
     ba4:	5e c1       	rjmp	.+700    	; 0xe62 <estimate_distance+0x4de>
     ba6:	e0 90 58 01 	lds	r14, 0x0158
     baa:	f0 90 59 01 	lds	r15, 0x0159
     bae:	ec 14       	cp	r14, r12
     bb0:	fd 04       	cpc	r15, r13
     bb2:	08 f4       	brcc	.+2      	; 0xbb6 <estimate_distance+0x232>
     bb4:	5e c1       	rjmp	.+700    	; 0xe72 <estimate_distance+0x4ee>
     bb6:	e0 90 5a 01 	lds	r14, 0x015A
     bba:	f0 90 5b 01 	lds	r15, 0x015B
     bbe:	ec 14       	cp	r14, r12
     bc0:	fd 04       	cpc	r15, r13
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <estimate_distance+0x242>
     bc4:	c3 c0       	rjmp	.+390    	; 0xd4c <estimate_distance+0x3c8>
     bc6:	e0 90 5c 01 	lds	r14, 0x015C
     bca:	f0 90 5d 01 	lds	r15, 0x015D
     bce:	ec 14       	cp	r14, r12
     bd0:	fd 04       	cpc	r15, r13
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <estimate_distance+0x252>
     bd4:	56 c1       	rjmp	.+684    	; 0xe82 <estimate_distance+0x4fe>
     bd6:	e0 90 5e 01 	lds	r14, 0x015E
     bda:	f0 90 5f 01 	lds	r15, 0x015F
     bde:	ec 14       	cp	r14, r12
     be0:	fd 04       	cpc	r15, r13
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <estimate_distance+0x262>
     be4:	56 c1       	rjmp	.+684    	; 0xe92 <estimate_distance+0x50e>
     be6:	e0 90 60 01 	lds	r14, 0x0160
     bea:	f0 90 61 01 	lds	r15, 0x0161
     bee:	ec 14       	cp	r14, r12
     bf0:	fd 04       	cpc	r15, r13
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <estimate_distance+0x272>
     bf4:	56 c1       	rjmp	.+684    	; 0xea2 <estimate_distance+0x51e>
     bf6:	e0 90 62 01 	lds	r14, 0x0162
     bfa:	f0 90 63 01 	lds	r15, 0x0163
     bfe:	ec 14       	cp	r14, r12
     c00:	fd 04       	cpc	r15, r13
     c02:	08 f4       	brcc	.+2      	; 0xc06 <estimate_distance+0x282>
     c04:	56 c1       	rjmp	.+684    	; 0xeb2 <estimate_distance+0x52e>
     c06:	e0 90 64 01 	lds	r14, 0x0164
     c0a:	f0 90 65 01 	lds	r15, 0x0165
     c0e:	ec 14       	cp	r14, r12
     c10:	fd 04       	cpc	r15, r13
     c12:	08 f4       	brcc	.+2      	; 0xc16 <estimate_distance+0x292>
     c14:	56 c1       	rjmp	.+684    	; 0xec2 <estimate_distance+0x53e>
     c16:	e0 90 66 01 	lds	r14, 0x0166
     c1a:	f0 90 67 01 	lds	r15, 0x0167
     c1e:	ec 14       	cp	r14, r12
     c20:	fd 04       	cpc	r15, r13
     c22:	08 f4       	brcc	.+2      	; 0xc26 <estimate_distance+0x2a2>
     c24:	5a c1       	rjmp	.+692    	; 0xeda <estimate_distance+0x556>
     c26:	e0 90 68 01 	lds	r14, 0x0168
     c2a:	f0 90 69 01 	lds	r15, 0x0169
     c2e:	ec 14       	cp	r14, r12
     c30:	fd 04       	cpc	r15, r13
     c32:	08 f4       	brcc	.+2      	; 0xc36 <estimate_distance+0x2b2>
     c34:	5a c1       	rjmp	.+692    	; 0xeea <estimate_distance+0x566>
     c36:	e0 90 6a 01 	lds	r14, 0x016A
     c3a:	f0 90 6b 01 	lds	r15, 0x016B
     c3e:	ec 14       	cp	r14, r12
     c40:	fd 04       	cpc	r15, r13
     c42:	08 f4       	brcc	.+2      	; 0xc46 <estimate_distance+0x2c2>
     c44:	5a c1       	rjmp	.+692    	; 0xefa <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     c46:	0a e5       	ldi	r16, 0x5A	; 90
     c48:	31 c0       	rjmp	.+98     	; 0xcac <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     c4a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     c4c:	ed 81       	ldd	r30, Y+5	; 0x05
     c4e:	fe 81       	ldd	r31, Y+6	; 0x06
     c50:	ed 3b       	cpi	r30, 0xBD	; 189
     c52:	f2 40       	sbci	r31, 0x02	; 2
     c54:	fc f4       	brge	.+62     	; 0xc94 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c56:	81 e2       	ldi	r24, 0x21	; 33
     c58:	81 0f       	add	r24, r17
    }
}
     c5a:	26 96       	adiw	r28, 0x06	; 6
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	7f 90       	pop	r7
     c80:	6f 90       	pop	r6
     c82:	5f 90       	pop	r5
     c84:	4f 90       	pop	r4
     c86:	3f 90       	pop	r3
     c88:	2f 90       	pop	r2
     c8a:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c8c:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     c8e:	81 e2       	ldi	r24, 0x21	; 33
     c90:	80 0f       	add	r24, r16
     c92:	e3 cf       	rjmp	.-58     	; 0xc5a <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c94:	d1 01       	movw	r26, r2
     c96:	cd 90       	ld	r12, X+
     c98:	dc 90       	ld	r13, X
     c9a:	80 91 50 01 	lds	r24, 0x0150
     c9e:	90 91 51 01 	lds	r25, 0x0151
     ca2:	8c 15       	cp	r24, r12
     ca4:	9d 05       	cpc	r25, r13
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <estimate_distance+0x326>
     ca8:	66 cf       	rjmp	.-308    	; 0xb76 <estimate_distance+0x1f2>
            dist_low=0;
     caa:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     cac:	1f 3f       	cpi	r17, 0xFF	; 255
     cae:	79 f3       	breq	.-34     	; 0xc8e <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     cb0:	ed 81       	ldd	r30, Y+5	; 0x05
     cb2:	fe 81       	ldd	r31, Y+6	; 0x06
     cb4:	bf 01       	movw	r22, r30
     cb6:	ff 0f       	add	r31, r31
     cb8:	88 0b       	sbc	r24, r24
     cba:	99 0b       	sbc	r25, r25
     cbc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__floatsisf>
     cc0:	6b 01       	movw	r12, r22
     cc2:	7c 01       	movw	r14, r24
     cc4:	61 2f       	mov	r22, r17
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     cd0:	4b 01       	movw	r8, r22
     cd2:	5c 01       	movw	r10, r24
     cd4:	a7 01       	movw	r20, r14
     cd6:	96 01       	movw	r18, r12
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	81 e6       	ldi	r24, 0x61	; 97
     cde:	94 e4       	ldi	r25, 0x44	; 68
     ce0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__subsf3>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	c5 01       	movw	r24, r10
     cea:	b4 01       	movw	r22, r8
     cec:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     cf0:	4b 01       	movw	r8, r22
     cf2:	5c 01       	movw	r10, r24
     cf4:	60 2f       	mov	r22, r16
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     d00:	2b 01       	movw	r4, r22
     d02:	3c 01       	movw	r6, r24
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	4f e2       	ldi	r20, 0x2F	; 47
     d0a:	54 e4       	ldi	r21, 0x44	; 68
     d0c:	c7 01       	movw	r24, r14
     d0e:	b6 01       	movw	r22, r12
     d10:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__subsf3>
     d14:	9b 01       	movw	r18, r22
     d16:	ac 01       	movw	r20, r24
     d18:	c3 01       	movw	r24, r6
     d1a:	b2 01       	movw	r22, r4
     d1c:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	c5 01       	movw	r24, r10
     d26:	b4 01       	movw	r22, r8
     d28:	0e 94 3d 0b 	call	0x167a	; 0x167a <__addsf3>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	48 e4       	ldi	r20, 0x48	; 72
     d32:	53 e4       	ldi	r21, 0x43	; 67
     d34:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divsf3>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	44 e0       	ldi	r20, 0x04	; 4
     d3e:	52 e4       	ldi	r21, 0x42	; 66
     d40:	0e 94 3d 0b 	call	0x167a	; 0x167a <__addsf3>
     d44:	0e 94 22 0c 	call	0x1844	; 0x1844 <__fixunssfsi>
     d48:	86 2f       	mov	r24, r22
     d4a:	87 cf       	rjmp	.-242    	; 0xc5a <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d4c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	fc 01       	movw	r30, r24
     d58:	e2 5b       	subi	r30, 0xB2	; 178
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	b7 01       	movw	r22, r14
     d62:	68 1b       	sub	r22, r24
     d64:	79 0b       	sbc	r23, r25
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     d6e:	9b 01       	movw	r18, r22
     d70:	ac 01       	movw	r20, r24
     d72:	0e 94 3d 0b 	call	0x167a	; 0x167a <__addsf3>
     d76:	4b 01       	movw	r8, r22
     d78:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d7a:	b6 01       	movw	r22, r12
     d7c:	dd 0c       	add	r13, r13
     d7e:	88 0b       	sbc	r24, r24
     d80:	99 0b       	sbc	r25, r25
     d82:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__floatsisf>
     d86:	2b 01       	movw	r4, r22
     d88:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     d8a:	b7 01       	movw	r22, r14
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     d94:	6b 01       	movw	r12, r22
     d96:	7c 01       	movw	r14, r24
     d98:	60 2f       	mov	r22, r16
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	a9 01       	movw	r20, r18
     db6:	0e 94 3d 0b 	call	0x167a	; 0x167a <__addsf3>
     dba:	a5 01       	movw	r20, r10
     dbc:	94 01       	movw	r18, r8
     dbe:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	c7 01       	movw	r24, r14
     dc8:	b6 01       	movw	r22, r12
     dca:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__subsf3>
     dce:	9b 01       	movw	r18, r22
     dd0:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     dd2:	c3 01       	movw	r24, r6
     dd4:	b2 01       	movw	r22, r4
     dd6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__subsf3>
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
                b=((int)((int)b/(int)slope));
     de6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixsfsi>
     dea:	7b 01       	movw	r14, r22
     dec:	c5 01       	movw	r24, r10
     dee:	b4 01       	movw	r22, r8
     df0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixsfsi>
     df4:	ab 01       	movw	r20, r22
     df6:	bc 01       	movw	r22, r24
     df8:	c7 01       	movw	r24, r14
     dfa:	ba 01       	movw	r22, r20
     dfc:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__divmodhi4>
                dist_low=b;
     e00:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e02:	6f 3f       	cpi	r22, 0xFF	; 255
     e04:	09 f0       	breq	.+2      	; 0xe08 <estimate_distance+0x484>
     e06:	52 cf       	rjmp	.-348    	; 0xcac <estimate_distance+0x328>
     e08:	26 cf       	rjmp	.-436    	; 0xc56 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e0a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e0c:	85 e0       	ldi	r24, 0x05	; 5
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	7c 01       	movw	r14, r24
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	ef 1a       	sub	r14, r31
     e16:	f1 08       	sbc	r15, r1
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	a9 01       	movw	r20, r18
     e34:	0e 94 3d 0b 	call	0x167a	; 0x167a <__addsf3>
     e38:	69 83       	std	Y+1, r22	; 0x01
     e3a:	7a 83       	std	Y+2, r23	; 0x02
     e3c:	8b 83       	std	Y+3, r24	; 0x03
     e3e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     e40:	40 ce       	rjmp	.-896    	; 0xac2 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e42:	01 e0       	ldi	r16, 0x01	; 1
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	84 cf       	rjmp	.-248    	; 0xd52 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	df cf       	rjmp	.-66     	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e52:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	7c cf       	rjmp	.-264    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e5a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	d7 cf       	rjmp	.-82     	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e62:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	74 cf       	rjmp	.-280    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e6a:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	cf cf       	rjmp	.-98     	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e72:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     e74:	84 e0       	ldi	r24, 0x04	; 4
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	6c cf       	rjmp	.-296    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e7a:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	c7 cf       	rjmp	.-114    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e82:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     e84:	86 e0       	ldi	r24, 0x06	; 6
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	64 cf       	rjmp	.-312    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e8a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	bf cf       	rjmp	.-130    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e92:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	5c cf       	rjmp	.-328    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e9a:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     e9c:	87 e0       	ldi	r24, 0x07	; 7
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	b7 cf       	rjmp	.-146    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ea2:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     ea4:	88 e0       	ldi	r24, 0x08	; 8
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	54 cf       	rjmp	.-344    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eaa:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     eac:	88 e0       	ldi	r24, 0x08	; 8
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	af cf       	rjmp	.-162    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eb2:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     eb4:	89 e0       	ldi	r24, 0x09	; 9
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	4c cf       	rjmp	.-360    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eba:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     ebc:	89 e0       	ldi	r24, 0x09	; 9
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a7 cf       	rjmp	.-178    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ec2:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     ec4:	8a e0       	ldi	r24, 0x0A	; 10
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	44 cf       	rjmp	.-376    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eca:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     ecc:	8a e0       	ldi	r24, 0x0A	; 10
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9f cf       	rjmp	.-194    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ed2:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     ed4:	8b e0       	ldi	r24, 0x0B	; 11
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9b cf       	rjmp	.-202    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eda:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     edc:	8b e0       	ldi	r24, 0x0B	; 11
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	38 cf       	rjmp	.-400    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ee2:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     ee4:	8c e0       	ldi	r24, 0x0C	; 12
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	93 cf       	rjmp	.-218    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eea:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     eec:	8c e0       	ldi	r24, 0x0C	; 12
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	30 cf       	rjmp	.-416    	; 0xd52 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ef2:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     ef4:	8d e0       	ldi	r24, 0x0D	; 13
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	8b cf       	rjmp	.-234    	; 0xe10 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     efa:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     efc:	8d e0       	ldi	r24, 0x0D	; 13
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	28 cf       	rjmp	.-432    	; 0xd52 <estimate_distance+0x3ce>

00000f02 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
    tx_clock += tx_increment;
     f24:	20 91 6f 01 	lds	r18, 0x016F
     f28:	30 91 70 01 	lds	r19, 0x0170
     f2c:	80 91 6d 01 	lds	r24, 0x016D
     f30:	90 91 6e 01 	lds	r25, 0x016E
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	90 93 70 01 	sts	0x0170, r25
     f3c:	80 93 6f 01 	sts	0x016F, r24
    tx_increment = 0xFF;
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	90 93 6e 01 	sts	0x016E, r25
     f48:	80 93 6d 01 	sts	0x016D, r24
    OCR0A = tx_increment;
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f50:	80 91 4b 01 	lds	r24, 0x014B
     f54:	90 91 4c 01 	lds	r25, 0x014C
     f58:	a0 91 4d 01 	lds	r26, 0x014D
     f5c:	b0 91 4e 01 	lds	r27, 0x014E
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	a1 1d       	adc	r26, r1
     f64:	b1 1d       	adc	r27, r1
     f66:	80 93 4b 01 	sts	0x014B, r24
     f6a:	90 93 4c 01 	sts	0x014C, r25
     f6e:	a0 93 4d 01 	sts	0x014D, r26
     f72:	b0 93 4e 01 	sts	0x014E, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f76:	80 91 4f 01 	lds	r24, 0x014F
     f7a:	81 11       	cpse	r24, r1
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <__vector_14+0x9a>
     f7e:	80 91 7e 01 	lds	r24, 0x017E
     f82:	90 91 7f 01 	lds	r25, 0x017F
     f86:	20 91 6f 01 	lds	r18, 0x016F
     f8a:	30 91 70 01 	lds	r19, 0x0170
     f8e:	82 17       	cp	r24, r18
     f90:	93 07       	cpc	r25, r19
     f92:	20 f4       	brcc	.+8      	; 0xf9c <__vector_14+0x9a>
     f94:	80 91 25 01 	lds	r24, 0x0125
     f98:	84 30       	cpi	r24, 0x04	; 4
     f9a:	89 f0       	breq	.+34     	; 0xfbe <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     fbe:	e0 91 11 01 	lds	r30, 0x0111
     fc2:	f0 91 12 01 	lds	r31, 0x0112
     fc6:	09 95       	icall
        if (msg) {
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	41 f3       	breq	.-48     	; 0xf9c <__vector_14+0x9a>
            if (message_send(msg)) {
     fcc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <message_send>
     fd0:	81 11       	cpse	r24, r1
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     fd4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <rand>
     fd8:	99 27       	eor	r25, r25
     fda:	90 93 6e 01 	sts	0x016E, r25
     fde:	80 93 6d 01 	sts	0x016D, r24
                OCR0A = tx_increment;
     fe2:	87 bd       	out	0x27, r24	; 39
     fe4:	db cf       	rjmp	.-74     	; 0xf9c <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     fe6:	e0 91 0f 01 	lds	r30, 0x010F
     fea:	f0 91 10 01 	lds	r31, 0x0110
     fee:	09 95       	icall
                tx_clock = 0;
     ff0:	10 92 70 01 	sts	0x0170, r1
     ff4:	10 92 6f 01 	sts	0x016F, r1
     ff8:	d1 cf       	rjmp	.-94     	; 0xf9c <__vector_14+0x9a>

00000ffa <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     ffa:	80 ff       	sbrs	r24, 0
     ffc:	11 c0       	rjmp	.+34     	; 0x1020 <set_color+0x26>
        DDRD |= (1<<5);
     ffe:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1000:	81 ff       	sbrs	r24, 1
    1002:	11 c0       	rjmp	.+34     	; 0x1026 <set_color+0x2c>
        DDRD |= (1<<4);
    1004:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1006:	82 ff       	sbrs	r24, 2
    1008:	11 c0       	rjmp	.+34     	; 0x102c <set_color+0x32>
        DDRC |= (1<<3);
    100a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    100c:	83 ff       	sbrs	r24, 3
    100e:	11 c0       	rjmp	.+34     	; 0x1032 <set_color+0x38>
        DDRC |= (1<<2);
    1010:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1012:	84 ff       	sbrs	r24, 4
    1014:	11 c0       	rjmp	.+34     	; 0x1038 <set_color+0x3e>
        DDRC |= (1<<5);
    1016:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1018:	85 fd       	sbrc	r24, 5
    101a:	11 c0       	rjmp	.+34     	; 0x103e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    101c:	3c 98       	cbi	0x07, 4	; 7
    101e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1020:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1022:	81 fd       	sbrc	r24, 1
    1024:	ef cf       	rjmp	.-34     	; 0x1004 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1026:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1028:	82 fd       	sbrc	r24, 2
    102a:	ef cf       	rjmp	.-34     	; 0x100a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    102c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    102e:	83 fd       	sbrc	r24, 3
    1030:	ef cf       	rjmp	.-34     	; 0x1010 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1032:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1034:	84 fd       	sbrc	r24, 4
    1036:	ef cf       	rjmp	.-34     	; 0x1016 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1038:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    103a:	85 ff       	sbrs	r24, 5
    103c:	ef cf       	rjmp	.-34     	; 0x101c <set_color+0x22>
        DDRC |= (1<<4);
    103e:	3c 9a       	sbi	0x07, 4	; 7
    1040:	08 95       	ret

00001042 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    rx_timer_off();
    1050:	10 92 81 00 	sts	0x0081, r1
    1054:	10 92 85 00 	sts	0x0085, r1
    1058:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 28 01 	sts	0x0128, r24
    rx_leadingbyte = 1;
    1062:	80 93 6c 01 	sts	0x016C, r24
    rx_busy = 0;
    1066:	10 92 4f 01 	sts	0x014F, r1
    adc_trigger_high_gain();
    106a:	10 92 7c 00 	sts	0x007C, r1
    106e:	93 ea       	ldi	r25, 0xA3	; 163
    1070:	90 93 7a 00 	sts	0x007A, r25
    1074:	80 93 7b 00 	sts	0x007B, r24
}
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    10ac:	20 91 84 00 	lds	r18, 0x0084
    10b0:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    10b4:	41 e0       	ldi	r20, 0x01	; 1
    10b6:	40 93 4f 01 	sts	0x014F, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    10ba:	80 91 28 01 	lds	r24, 0x0128
    10be:	88 23       	and	r24, r24
    10c0:	a9 f1       	breq	.+106    	; 0x112c <__vector_23+0xa6>
        rx_timer_on();
    10c2:	10 92 85 00 	sts	0x0085, r1
    10c6:	10 92 84 00 	sts	0x0084, r1
    10ca:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    10ce:	10 92 80 01 	sts	0x0180, r1
        rx_leadingbit = 0;
    10d2:	10 92 28 01 	sts	0x0128, r1
        if (rx_leadingbyte) {
    10d6:	80 91 6c 01 	lds	r24, 0x016C
    10da:	88 23       	and	r24, r24
    10dc:	a1 f0       	breq	.+40     	; 0x1106 <__vector_23+0x80>
            adc_finish_conversion();
    10de:	80 91 7a 00 	lds	r24, 0x007A
    10e2:	86 fd       	sbrc	r24, 6
    10e4:	fc cf       	rjmp	.-8      	; 0x10de <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    10e6:	80 91 78 00 	lds	r24, 0x0078
    10ea:	90 91 79 00 	lds	r25, 0x0079
    10ee:	90 93 4a 01 	sts	0x014A, r25
    10f2:	80 93 49 01 	sts	0x0149, r24
            adc_trigger_low_gain();
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	80 93 7c 00 	sts	0x007C, r24
    10fc:	93 ea       	ldi	r25, 0xA3	; 163
    10fe:	90 93 7a 00 	sts	0x007A, r25
    1102:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    112c:	c9 01       	movw	r24, r18
    112e:	87 58       	subi	r24, 0x87	; 135
    1130:	91 09       	sbc	r25, r1
    1132:	84 37       	cpi	r24, 0x74	; 116
    1134:	99 40       	sbci	r25, 0x09	; 9
    1136:	08 f0       	brcs	.+2      	; 0x113a <__vector_23+0xb4>
    1138:	52 c0       	rjmp	.+164    	; 0x11de <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    113a:	26 58       	subi	r18, 0x86	; 134
    113c:	31 09       	sbc	r19, r1
    113e:	a4 ef       	ldi	r26, 0xF4	; 244
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	0e 94 19 0b 	call	0x1632	; 0x1632 <__umulhisi3>
    1146:	aa 27       	eor	r26, r26
    1148:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    114a:	88 30       	cpi	r24, 0x08	; 8
    114c:	91 05       	cpc	r25, r1
    114e:	a1 05       	cpc	r26, r1
    1150:	b1 05       	cpc	r27, r1
    1152:	08 f4       	brcc	.+2      	; 0x1156 <__vector_23+0xd0>
    1154:	7b c0       	rjmp	.+246    	; 0x124c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1156:	40 93 28 01 	sts	0x0128, r20
                if (rx_leadingbyte) {
    115a:	80 91 6c 01 	lds	r24, 0x016C
    115e:	81 11       	cpse	r24, r1
    1160:	52 c0       	rjmp	.+164    	; 0x1206 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1162:	80 91 46 01 	lds	r24, 0x0146
    1166:	e8 2f       	mov	r30, r24
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	ee 58       	subi	r30, 0x8E	; 142
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	90 91 80 01 	lds	r25, 0x0180
    1172:	90 83       	st	Z, r25
                    rx_byteindex++;
    1174:	8f 5f       	subi	r24, 0xFF	; 255
    1176:	80 93 46 01 	sts	0x0146, r24
                    if (rx_byteindex == sizeof(message_t)) {
    117a:	8c 30       	cpi	r24, 0x0C	; 12
    117c:	21 f6       	brne	.-120    	; 0x1106 <__vector_23+0x80>
                        rx_timer_off();
    117e:	10 92 81 00 	sts	0x0081, r1
    1182:	10 92 85 00 	sts	0x0085, r1
    1186:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    118a:	40 93 6c 01 	sts	0x016C, r20
                        rx_busy = 0;
    118e:	10 92 4f 01 	sts	0x014F, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1192:	c0 91 7c 01 	lds	r28, 0x017C
    1196:	d0 91 7d 01 	lds	r29, 0x017D
    119a:	82 e7       	ldi	r24, 0x72	; 114
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0e 94 4d 0a 	call	0x149a	; 0x149a <message_crc>
    11a2:	c8 17       	cp	r28, r24
    11a4:	d9 07       	cpc	r29, r25
    11a6:	09 f0       	breq	.+2      	; 0x11aa <__vector_23+0x124>
    11a8:	ae cf       	rjmp	.-164    	; 0x1106 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    11aa:	80 91 7b 01 	lds	r24, 0x017B
    11ae:	87 ff       	sbrs	r24, 7
    11b0:	61 c0       	rjmp	.+194    	; 0x1274 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    11b2:	98 e7       	ldi	r25, 0x78	; 120
    11b4:	98 0f       	add	r25, r24
    11b6:	93 30       	cpi	r25, 0x03	; 3
    11b8:	30 f0       	brcs	.+12     	; 0x11c6 <__vector_23+0x140>
        motors_off();
    11ba:	53 98       	cbi	0x0a, 3	; 10
    11bc:	23 98       	cbi	0x04, 3	; 4
    11be:	10 92 b4 00 	sts	0x00B4, r1
    11c2:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	fc 01       	movw	r30, r24
    11ca:	e0 58       	subi	r30, 0x80	; 128
    11cc:	f1 09       	sbc	r31, r1
    11ce:	eb 30       	cpi	r30, 0x0B	; 11
    11d0:	f1 05       	cpc	r31, r1
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <__vector_23+0x150>
    11d4:	98 cf       	rjmp	.-208    	; 0x1106 <__vector_23+0x80>
    11d6:	e5 5c       	subi	r30, 0xC5	; 197
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    11de:	10 92 81 00 	sts	0x0081, r1
    11e2:	10 92 85 00 	sts	0x0085, r1
    11e6:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    11ea:	40 93 28 01 	sts	0x0128, r20
            rx_leadingbyte = 1;
    11ee:	40 93 6c 01 	sts	0x016C, r20
            rx_busy = 0;
    11f2:	10 92 4f 01 	sts	0x014F, r1
            adc_trigger_high_gain();
    11f6:	10 92 7c 00 	sts	0x007C, r1
    11fa:	83 ea       	ldi	r24, 0xA3	; 163
    11fc:	80 93 7a 00 	sts	0x007A, r24
    1200:	40 93 7b 00 	sts	0x007B, r20
    1204:	80 cf       	rjmp	.-256    	; 0x1106 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1206:	80 91 7a 00 	lds	r24, 0x007A
    120a:	86 fd       	sbrc	r24, 6
    120c:	fc cf       	rjmp	.-8      	; 0x1206 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    120e:	80 91 78 00 	lds	r24, 0x0078
    1212:	90 91 79 00 	lds	r25, 0x0079
    1216:	90 93 48 01 	sts	0x0148, r25
    121a:	80 93 47 01 	sts	0x0147, r24
                    adc_trigger_high_gain();
    121e:	10 92 7c 00 	sts	0x007C, r1
    1222:	83 ea       	ldi	r24, 0xA3	; 163
    1224:	80 93 7a 00 	sts	0x007A, r24
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    122e:	90 91 80 01 	lds	r25, 0x0180
    1232:	99 23       	and	r25, r25
    1234:	d1 f0       	breq	.+52     	; 0x126a <__vector_23+0x1e4>
                        rx_timer_off();
    1236:	10 92 81 00 	sts	0x0081, r1
    123a:	10 92 85 00 	sts	0x0085, r1
    123e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1242:	80 93 6c 01 	sts	0x016C, r24
                        rx_busy = 0;
    1246:	10 92 4f 01 	sts	0x014F, r1
    124a:	5d cf       	rjmp	.-326    	; 0x1106 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	f9 01       	movw	r30, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <__vector_23+0x1d2>
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <__vector_23+0x1ce>
    125c:	cf 01       	movw	r24, r30
    125e:	90 91 80 01 	lds	r25, 0x0180
    1262:	89 2b       	or	r24, r25
    1264:	80 93 80 01 	sts	0x0180, r24
    1268:	4e cf       	rjmp	.-356    	; 0x1106 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    126a:	10 92 6c 01 	sts	0x016C, r1
                        rx_byteindex = 0;
    126e:	10 92 46 01 	sts	0x0146, r1
    1272:	49 cf       	rjmp	.-366    	; 0x1106 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1274:	e0 91 13 01 	lds	r30, 0x0113
    1278:	f0 91 14 01 	lds	r31, 0x0114
    127c:	67 e4       	ldi	r22, 0x47	; 71
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	82 e7       	ldi	r24, 0x72	; 114
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	09 95       	icall
    1286:	3f cf       	rjmp	.-386    	; 0x1106 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1288:	80 91 72 01 	lds	r24, 0x0172
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	09 f4       	brne	.+2      	; 0x1292 <__vector_23+0x20c>
    1290:	dd c0       	rjmp	.+442    	; 0x144c <__vector_23+0x3c6>
    1292:	08 f4       	brcc	.+2      	; 0x1296 <__vector_23+0x210>
    1294:	ba c0       	rjmp	.+372    	; 0x140a <__vector_23+0x384>
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	09 f4       	brne	.+2      	; 0x129c <__vector_23+0x216>
    129a:	c6 c0       	rjmp	.+396    	; 0x1428 <__vector_23+0x3a2>
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__vector_23+0x21c>
    12a0:	b1 c0       	rjmp	.+354    	; 0x1404 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12a2:	80 91 23 01 	lds	r24, 0x0123
    12a6:	90 91 78 01 	lds	r25, 0x0178
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <__vector_23+0x22a>
    12ae:	e3 c0       	rjmp	.+454    	; 0x1476 <__vector_23+0x3f0>
    12b0:	80 91 77 01 	lds	r24, 0x0177
                        prev_motion = MOVE_STOP;
    12b4:	10 92 24 01 	sts	0x0124, r1
                        cur_motion = MOVE_STRAIGHT;
    12b8:	23 e0       	ldi	r18, 0x03	; 3
    12ba:	20 93 23 01 	sts	0x0123, r18
                        kilo_straight_left = calibmsg->straight_left;
    12be:	80 93 83 01 	sts	0x0183, r24
                        kilo_straight_right = calibmsg->straight_right;
    12c2:	90 93 84 01 	sts	0x0184, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12c6:	80 91 25 01 	lds	r24, 0x0125
    12ca:	86 30       	cpi	r24, 0x06	; 6
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <__vector_23+0x24a>
    12ce:	1b cf       	rjmp	.-458    	; 0x1106 <__vector_23+0x80>
                motors_on();
    12d0:	53 9a       	sbi	0x0a, 3	; 10
    12d2:	23 9a       	sbi	0x04, 3	; 4
    12d4:	10 92 b4 00 	sts	0x00B4, r1
    12d8:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    12dc:	86 e0       	ldi	r24, 0x06	; 6
    12de:	80 93 25 01 	sts	0x0125, r24
    12e2:	11 cf       	rjmp	.-478    	; 0x1106 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    12e4:	80 91 25 01 	lds	r24, 0x0125
    12e8:	86 30       	cpi	r24, 0x06	; 6
    12ea:	99 f0       	breq	.+38     	; 0x1312 <__vector_23+0x28c>
                motors_on();
    12ec:	53 9a       	sbi	0x0a, 3	; 10
    12ee:	23 9a       	sbi	0x04, 3	; 4
    12f0:	10 92 b4 00 	sts	0x00B4, r1
    12f4:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    12f8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    12fa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    12fc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    12fe:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1300:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1302:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1304:	10 92 23 01 	sts	0x0123, r1
    1308:	10 92 24 01 	sts	0x0124, r1
                kilo_state = MOVING;
    130c:	86 e0       	ldi	r24, 0x06	; 6
    130e:	80 93 25 01 	sts	0x0125, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9c 01       	movw	r18, r24
    1318:	00 90 72 01 	lds	r0, 0x0172
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <__vector_23+0x29c>
    131e:	22 0f       	add	r18, r18
    1320:	33 1f       	adc	r19, r19
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <__vector_23+0x298>
    1326:	80 91 81 01 	lds	r24, 0x0181
    132a:	90 91 82 01 	lds	r25, 0x0182
    132e:	82 23       	and	r24, r18
    1330:	93 23       	and	r25, r19
    1332:	89 2b       	or	r24, r25
    1334:	09 f0       	breq	.+2      	; 0x1338 <__vector_23+0x2b2>
    1336:	86 c0       	rjmp	.+268    	; 0x1444 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1338:	10 92 23 01 	sts	0x0123, r1
    133c:	e4 ce       	rjmp	.-568    	; 0x1106 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 25 01 	sts	0x0125, r24
    1344:	e0 ce       	rjmp	.-576    	; 0x1106 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1346:	e0 e0       	ldi	r30, 0x00	; 0
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    134c:	80 91 6e 00 	lds	r24, 0x006E
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	80 93 6e 00 	sts	0x006E, r24
    1356:	16 bc       	out	0x26, r1	; 38
            bootload();
    1358:	e0 e0       	ldi	r30, 0x00	; 0
    135a:	f0 e7       	ldi	r31, 0x70	; 112
    135c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    135e:	10 92 25 01 	sts	0x0125, r1
    1362:	d1 ce       	rjmp	.-606    	; 0x1106 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	80 93 25 01 	sts	0x0125, r24
    136a:	cd ce       	rjmp	.-614    	; 0x1106 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    136c:	85 e0       	ldi	r24, 0x05	; 5
    136e:	80 93 25 01 	sts	0x0125, r24
    1372:	c9 ce       	rjmp	.-622    	; 0x1106 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1374:	80 91 25 01 	lds	r24, 0x0125
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	09 f4       	brne	.+2      	; 0x137e <__vector_23+0x2f8>
    137c:	c4 ce       	rjmp	.-632    	; 0x1106 <__vector_23+0x80>
    137e:	80 91 25 01 	lds	r24, 0x0125
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	09 f4       	brne	.+2      	; 0x1388 <__vector_23+0x302>
    1386:	bf ce       	rjmp	.-642    	; 0x1106 <__vector_23+0x80>
                motors_on();
    1388:	53 9a       	sbi	0x0a, 3	; 10
    138a:	23 9a       	sbi	0x04, 3	; 4
    138c:	10 92 b4 00 	sts	0x00B4, r1
    1390:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	80 93 25 01 	sts	0x0125, r24
    139a:	b5 ce       	rjmp	.-662    	; 0x1106 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    139c:	80 91 25 01 	lds	r24, 0x0125
    13a0:	86 30       	cpi	r24, 0x06	; 6
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <__vector_23+0x320>
    13a4:	b0 ce       	rjmp	.-672    	; 0x1106 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    13a6:	60 91 81 01 	lds	r22, 0x0181
    13aa:	80 eb       	ldi	r24, 0xB0	; 176
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 44 10 	call	0x2088	; 0x2088 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    13b2:	60 91 82 01 	lds	r22, 0x0182
    13b6:	81 eb       	ldi	r24, 0xB1	; 177
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 44 10 	call	0x2088	; 0x2088 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    13be:	60 91 85 01 	lds	r22, 0x0185
    13c2:	85 e0       	ldi	r24, 0x05	; 5
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 44 10 	call	0x2088	; 0x2088 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    13ca:	60 91 71 01 	lds	r22, 0x0171
    13ce:	89 e0       	ldi	r24, 0x09	; 9
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 44 10 	call	0x2088	; 0x2088 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    13d6:	60 91 83 01 	lds	r22, 0x0183
    13da:	8c e0       	ldi	r24, 0x0C	; 12
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 44 10 	call	0x2088	; 0x2088 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    13e2:	60 91 84 01 	lds	r22, 0x0184
    13e6:	84 e1       	ldi	r24, 0x14	; 20
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 44 10 	call	0x2088	; 0x2088 <eeprom_write_byte>
                        motors_off();
    13ee:	53 98       	cbi	0x0a, 3	; 10
    13f0:	23 98       	cbi	0x04, 3	; 4
    13f2:	10 92 b4 00 	sts	0x00B4, r1
    13f6:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 25 01 	sts	0x0125, r24
    1400:	80 91 72 01 	lds	r24, 0x0172
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1404:	81 11       	cpse	r24, r1
    1406:	5f cf       	rjmp	.-322    	; 0x12c6 <__vector_23+0x240>
    1408:	7e ce       	rjmp	.-772    	; 0x1106 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    140a:	88 23       	and	r24, r24
    140c:	39 f2       	breq	.-114    	; 0x139c <__vector_23+0x316>
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	c9 f7       	brne	.-14     	; 0x1404 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1412:	80 91 73 01 	lds	r24, 0x0173
    1416:	90 91 74 01 	lds	r25, 0x0174
    141a:	90 93 82 01 	sts	0x0182, r25
    141e:	80 93 81 01 	sts	0x0181, r24
                    cur_motion = MOVE_STOP;
    1422:	10 92 23 01 	sts	0x0123, r1
    1426:	4f cf       	rjmp	.-354    	; 0x12c6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1428:	80 91 23 01 	lds	r24, 0x0123
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	71 f1       	breq	.+92     	; 0x148c <__vector_23+0x406>
    1430:	80 91 76 01 	lds	r24, 0x0176
                        prev_motion = MOVE_STOP;
    1434:	10 92 24 01 	sts	0x0124, r1
                        cur_motion = MOVE_RIGHT;
    1438:	92 e0       	ldi	r25, 0x02	; 2
    143a:	90 93 23 01 	sts	0x0123, r25
                        kilo_turn_right = calibmsg->turn_right;
    143e:	80 93 71 01 	sts	0x0171, r24
    1442:	41 cf       	rjmp	.-382    	; 0x12c6 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 23 01 	sts	0x0123, r24
    144a:	5d ce       	rjmp	.-838    	; 0x1106 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    144c:	80 91 23 01 	lds	r24, 0x0123
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	51 f0       	breq	.+20     	; 0x1468 <__vector_23+0x3e2>
    1454:	80 91 75 01 	lds	r24, 0x0175
                        prev_motion = MOVE_STOP;
    1458:	10 92 24 01 	sts	0x0124, r1
                        cur_motion = MOVE_LEFT;
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	90 93 23 01 	sts	0x0123, r25
                        kilo_turn_left = calibmsg->turn_left;
    1462:	80 93 85 01 	sts	0x0185, r24
    1466:	2f cf       	rjmp	.-418    	; 0x12c6 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1468:	80 91 75 01 	lds	r24, 0x0175
    146c:	90 91 85 01 	lds	r25, 0x0185
    1470:	89 13       	cpse	r24, r25
    1472:	f2 cf       	rjmp	.-28     	; 0x1458 <__vector_23+0x3d2>
    1474:	28 cf       	rjmp	.-432    	; 0x12c6 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1476:	80 91 84 01 	lds	r24, 0x0184
    147a:	98 13       	cpse	r25, r24
    147c:	19 cf       	rjmp	.-462    	; 0x12b0 <__vector_23+0x22a>
    147e:	80 91 77 01 	lds	r24, 0x0177
    1482:	20 91 83 01 	lds	r18, 0x0183
    1486:	82 13       	cpse	r24, r18
    1488:	15 cf       	rjmp	.-470    	; 0x12b4 <__vector_23+0x22e>
    148a:	1d cf       	rjmp	.-454    	; 0x12c6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    148c:	80 91 76 01 	lds	r24, 0x0176
    1490:	90 91 71 01 	lds	r25, 0x0171
    1494:	89 13       	cpse	r24, r25
    1496:	ce cf       	rjmp	.-100    	; 0x1434 <__vector_23+0x3ae>
    1498:	16 cf       	rjmp	.-468    	; 0x12c6 <__vector_23+0x240>

0000149a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    149a:	fc 01       	movw	r30, r24
    149c:	ac 01       	movw	r20, r24
    149e:	46 5f       	subi	r20, 0xF6	; 246
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    14a6:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    14a8:	82 27       	eor	r24, r18
    14aa:	08 2e       	mov	r0, r24
    14ac:	82 95       	swap	r24
    14ae:	80 7f       	andi	r24, 0xF0	; 240
    14b0:	80 25       	eor	r24, r0
    14b2:	09 2e       	mov	r0, r25
    14b4:	98 2f       	mov	r25, r24
    14b6:	82 95       	swap	r24
    14b8:	8f 70       	andi	r24, 0x0F	; 15
    14ba:	08 26       	eor	r0, r24
    14bc:	86 95       	lsr	r24
    14be:	98 27       	eor	r25, r24
    14c0:	89 27       	eor	r24, r25
    14c2:	88 0f       	add	r24, r24
    14c4:	88 0f       	add	r24, r24
    14c6:	88 0f       	add	r24, r24
    14c8:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    14ca:	e4 17       	cp	r30, r20
    14cc:	f5 07       	cpc	r31, r21
    14ce:	59 f7       	brne	.-42     	; 0x14a6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    14d0:	08 95       	ret

000014d2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    14d2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    14d4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    14d6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    14d8:	20 91 45 01 	lds	r18, 0x0145
    or tmpreg1, ddrreg
    14dc:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    14de:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    14e0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14e2:	30 91 45 01 	lds	r19, 0x0145
    14e6:	20 30       	cpi	r18, 0x00	; 0
    14e8:	29 f0       	breq	.+10     	; 0x14f4 <message_send+0x22>
    14ea:	00 00       	nop
    14ec:	25 b1       	in	r18, 0x05	; 5
    14ee:	23 2b       	or	r18, r19
    14f0:	25 b9       	out	0x05, r18	; 5
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <message_send+0x2a>
    14f4:	00 00       	nop
    14f6:	00 00       	nop
    14f8:	00 00       	nop
    14fa:	00 c0       	rjmp	.+0      	; 0x14fc <message_send+0x2a>
    14fc:	00 00       	nop
    14fe:	00 00       	nop
    1500:	00 00       	nop
    1502:	30 95       	com	r19
    1504:	25 b1       	in	r18, 0x05	; 5
    1506:	23 23       	and	r18, r19
    1508:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    150a:	2e ea       	ldi	r18, 0xAE	; 174
    150c:	2a 95       	dec	r18
    150e:	f1 f7       	brne	.-4      	; 0x150c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1510:	2b ee       	ldi	r18, 0xEB	; 235

00001512 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1512:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1514:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1516:	0a c0       	rjmp	.+20     	; 0x152c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1518:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    151a:	30 91 45 01 	lds	r19, 0x0145
    com tmpreg2
    151e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1520:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1522:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1524:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1526:	0f be       	out	0x3f, r0	; 63
    return 0
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	08 95       	ret

0000152c <nocollision>:
nocollision:
    nop
    152c:	00 00       	nop
    dec tmpreg1
    152e:	2a 95       	dec	r18
    brne checkcollision
    1530:	81 f7       	brne	.-32     	; 0x1512 <checkcollision>

    ldi tmpreg1, 0x01
    1532:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1534:	30 91 45 01 	lds	r19, 0x0145
    1538:	20 30       	cpi	r18, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <nocollision+0x1a>
    153c:	00 00       	nop
    153e:	25 b1       	in	r18, 0x05	; 5
    1540:	23 2b       	or	r18, r19
    1542:	25 b9       	out	0x05, r18	; 5
    1544:	04 c0       	rjmp	.+8      	; 0x154e <nocollision+0x22>
    1546:	00 00       	nop
    1548:	00 00       	nop
    154a:	00 00       	nop
    154c:	00 c0       	rjmp	.+0      	; 0x154e <nocollision+0x22>
    154e:	00 00       	nop
    1550:	00 00       	nop
    1552:	00 00       	nop
    1554:	30 95       	com	r19
    1556:	25 b1       	in	r18, 0x05	; 5
    1558:	23 23       	and	r18, r19
    155a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    155c:	00 00       	nop
    155e:	24 e5       	ldi	r18, 0x54	; 84
    1560:	2a 95       	dec	r18
    1562:	f1 f7       	brne	.-4      	; 0x1560 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1564:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1566:	8c e0       	ldi	r24, 0x0C	; 12

00001568 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1568:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    156a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    156c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    156e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1570:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1572:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1574:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1576:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1578:	50 e0       	ldi	r21, 0x00	; 0

0000157a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    157a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    157c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    157e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1580:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1582:	30 91 45 01 	lds	r19, 0x0145
    1586:	20 30       	cpi	r18, 0x00	; 0
    1588:	29 f0       	breq	.+10     	; 0x1594 <sendbit+0x1a>
    158a:	00 00       	nop
    158c:	25 b1       	in	r18, 0x05	; 5
    158e:	23 2b       	or	r18, r19
    1590:	25 b9       	out	0x05, r18	; 5
    1592:	04 c0       	rjmp	.+8      	; 0x159c <sendbit+0x22>
    1594:	00 00       	nop
    1596:	00 00       	nop
    1598:	00 00       	nop
    159a:	00 c0       	rjmp	.+0      	; 0x159c <sendbit+0x22>
    159c:	00 00       	nop
    159e:	00 00       	nop
    15a0:	00 00       	nop
    15a2:	30 95       	com	r19
    15a4:	25 b1       	in	r18, 0x05	; 5
    15a6:	23 23       	and	r18, r19
    15a8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    15aa:	00 00       	nop
    15ac:	21 e5       	ldi	r18, 0x51	; 81
    15ae:	2a 95       	dec	r18
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    15b2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    15b4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    15b6:	9a 95       	dec	r25
    brne sendbit
    15b8:	01 f7       	brne	.-64     	; 0x157a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    15ba:	8a 95       	dec	r24
    brne sendbyte
    15bc:	a9 f6       	brne	.-86     	; 0x1568 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    15be:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    15c0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    15c2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15c4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15c6:	30 91 45 01 	lds	r19, 0x0145
    com tmpreg2
    15ca:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15cc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15ce:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15d0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15d2:	0f be       	out	0x3f, r0	; 63
    return 1
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	08 95       	ret

000015d8 <main>:
    distance = estimate_distance(d);
}

int main()
{
    kilo_init();
    15d8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <kilo_init>
    debug_init();
    15dc:	0e 94 13 01 	call	0x226	; 0x226 <debug_init>
    kilo_message_rx = message_rx;
    15e0:	8b e7       	ldi	r24, 0x7B	; 123
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	90 93 14 01 	sts	0x0114, r25
    15e8:	80 93 13 01 	sts	0x0113, r24
    kilo_start(setup, loop);
    15ec:	6a e8       	ldi	r22, 0x8A	; 138
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	8a e7       	ldi	r24, 0x7A	; 122
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <kilo_start>
    
    return 0;
}
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	08 95       	ret

000015fe <__divmodhi4>:
    15fe:	97 fb       	bst	r25, 7
    1600:	07 2e       	mov	r0, r23
    1602:	16 f4       	brtc	.+4      	; 0x1608 <__divmodhi4+0xa>
    1604:	00 94       	com	r0
    1606:	07 d0       	rcall	.+14     	; 0x1616 <__divmodhi4_neg1>
    1608:	77 fd       	sbrc	r23, 7
    160a:	09 d0       	rcall	.+18     	; 0x161e <__divmodhi4_neg2>
    160c:	0e 94 28 0b 	call	0x1650	; 0x1650 <__udivmodhi4>
    1610:	07 fc       	sbrc	r0, 7
    1612:	05 d0       	rcall	.+10     	; 0x161e <__divmodhi4_neg2>
    1614:	3e f4       	brtc	.+14     	; 0x1624 <__divmodhi4_exit>

00001616 <__divmodhi4_neg1>:
    1616:	90 95       	com	r25
    1618:	81 95       	neg	r24
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	08 95       	ret

0000161e <__divmodhi4_neg2>:
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255

00001624 <__divmodhi4_exit>:
    1624:	08 95       	ret

00001626 <__tablejump2__>:
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	05 90       	lpm	r0, Z+
    162c:	f4 91       	lpm	r31, Z
    162e:	e0 2d       	mov	r30, r0
    1630:	09 94       	ijmp

00001632 <__umulhisi3>:
    1632:	a2 9f       	mul	r26, r18
    1634:	b0 01       	movw	r22, r0
    1636:	b3 9f       	mul	r27, r19
    1638:	c0 01       	movw	r24, r0
    163a:	a3 9f       	mul	r26, r19
    163c:	70 0d       	add	r23, r0
    163e:	81 1d       	adc	r24, r1
    1640:	11 24       	eor	r1, r1
    1642:	91 1d       	adc	r25, r1
    1644:	b2 9f       	mul	r27, r18
    1646:	70 0d       	add	r23, r0
    1648:	81 1d       	adc	r24, r1
    164a:	11 24       	eor	r1, r1
    164c:	91 1d       	adc	r25, r1
    164e:	08 95       	ret

00001650 <__udivmodhi4>:
    1650:	aa 1b       	sub	r26, r26
    1652:	bb 1b       	sub	r27, r27
    1654:	51 e1       	ldi	r21, 0x11	; 17
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <__udivmodhi4_ep>

00001658 <__udivmodhi4_loop>:
    1658:	aa 1f       	adc	r26, r26
    165a:	bb 1f       	adc	r27, r27
    165c:	a6 17       	cp	r26, r22
    165e:	b7 07       	cpc	r27, r23
    1660:	10 f0       	brcs	.+4      	; 0x1666 <__udivmodhi4_ep>
    1662:	a6 1b       	sub	r26, r22
    1664:	b7 0b       	sbc	r27, r23

00001666 <__udivmodhi4_ep>:
    1666:	88 1f       	adc	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	5a 95       	dec	r21
    166c:	a9 f7       	brne	.-22     	; 0x1658 <__udivmodhi4_loop>
    166e:	80 95       	com	r24
    1670:	90 95       	com	r25
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	08 95       	ret

00001678 <__subsf3>:
    1678:	50 58       	subi	r21, 0x80	; 128

0000167a <__addsf3>:
    167a:	bb 27       	eor	r27, r27
    167c:	aa 27       	eor	r26, r26
    167e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__addsf3x>
    1682:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__fp_round>
    1686:	0e 94 97 0c 	call	0x192e	; 0x192e <__fp_pscA>
    168a:	38 f0       	brcs	.+14     	; 0x169a <__addsf3+0x20>
    168c:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fp_pscB>
    1690:	20 f0       	brcs	.+8      	; 0x169a <__addsf3+0x20>
    1692:	39 f4       	brne	.+14     	; 0x16a2 <__addsf3+0x28>
    1694:	9f 3f       	cpi	r25, 0xFF	; 255
    1696:	19 f4       	brne	.+6      	; 0x169e <__addsf3+0x24>
    1698:	26 f4       	brtc	.+8      	; 0x16a2 <__addsf3+0x28>
    169a:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_nan>
    169e:	0e f4       	brtc	.+2      	; 0x16a2 <__addsf3+0x28>
    16a0:	e0 95       	com	r30
    16a2:	e7 fb       	bst	r30, 7
    16a4:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_inf>

000016a8 <__addsf3x>:
    16a8:	e9 2f       	mov	r30, r25
    16aa:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_split3>
    16ae:	58 f3       	brcs	.-42     	; 0x1686 <__addsf3+0xc>
    16b0:	ba 17       	cp	r27, r26
    16b2:	62 07       	cpc	r22, r18
    16b4:	73 07       	cpc	r23, r19
    16b6:	84 07       	cpc	r24, r20
    16b8:	95 07       	cpc	r25, r21
    16ba:	20 f0       	brcs	.+8      	; 0x16c4 <__addsf3x+0x1c>
    16bc:	79 f4       	brne	.+30     	; 0x16dc <__addsf3x+0x34>
    16be:	a6 f5       	brtc	.+104    	; 0x1728 <__addsf3x+0x80>
    16c0:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_zero>
    16c4:	0e f4       	brtc	.+2      	; 0x16c8 <__addsf3x+0x20>
    16c6:	e0 95       	com	r30
    16c8:	0b 2e       	mov	r0, r27
    16ca:	ba 2f       	mov	r27, r26
    16cc:	a0 2d       	mov	r26, r0
    16ce:	0b 01       	movw	r0, r22
    16d0:	b9 01       	movw	r22, r18
    16d2:	90 01       	movw	r18, r0
    16d4:	0c 01       	movw	r0, r24
    16d6:	ca 01       	movw	r24, r20
    16d8:	a0 01       	movw	r20, r0
    16da:	11 24       	eor	r1, r1
    16dc:	ff 27       	eor	r31, r31
    16de:	59 1b       	sub	r21, r25
    16e0:	99 f0       	breq	.+38     	; 0x1708 <__addsf3x+0x60>
    16e2:	59 3f       	cpi	r21, 0xF9	; 249
    16e4:	50 f4       	brcc	.+20     	; 0x16fa <__addsf3x+0x52>
    16e6:	50 3e       	cpi	r21, 0xE0	; 224
    16e8:	68 f1       	brcs	.+90     	; 0x1744 <__addsf3x+0x9c>
    16ea:	1a 16       	cp	r1, r26
    16ec:	f0 40       	sbci	r31, 0x00	; 0
    16ee:	a2 2f       	mov	r26, r18
    16f0:	23 2f       	mov	r18, r19
    16f2:	34 2f       	mov	r19, r20
    16f4:	44 27       	eor	r20, r20
    16f6:	58 5f       	subi	r21, 0xF8	; 248
    16f8:	f3 cf       	rjmp	.-26     	; 0x16e0 <__addsf3x+0x38>
    16fa:	46 95       	lsr	r20
    16fc:	37 95       	ror	r19
    16fe:	27 95       	ror	r18
    1700:	a7 95       	ror	r26
    1702:	f0 40       	sbci	r31, 0x00	; 0
    1704:	53 95       	inc	r21
    1706:	c9 f7       	brne	.-14     	; 0x16fa <__addsf3x+0x52>
    1708:	7e f4       	brtc	.+30     	; 0x1728 <__addsf3x+0x80>
    170a:	1f 16       	cp	r1, r31
    170c:	ba 0b       	sbc	r27, r26
    170e:	62 0b       	sbc	r22, r18
    1710:	73 0b       	sbc	r23, r19
    1712:	84 0b       	sbc	r24, r20
    1714:	ba f0       	brmi	.+46     	; 0x1744 <__addsf3x+0x9c>
    1716:	91 50       	subi	r25, 0x01	; 1
    1718:	a1 f0       	breq	.+40     	; 0x1742 <__addsf3x+0x9a>
    171a:	ff 0f       	add	r31, r31
    171c:	bb 1f       	adc	r27, r27
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	c2 f7       	brpl	.-16     	; 0x1716 <__addsf3x+0x6e>
    1726:	0e c0       	rjmp	.+28     	; 0x1744 <__addsf3x+0x9c>
    1728:	ba 0f       	add	r27, r26
    172a:	62 1f       	adc	r22, r18
    172c:	73 1f       	adc	r23, r19
    172e:	84 1f       	adc	r24, r20
    1730:	48 f4       	brcc	.+18     	; 0x1744 <__addsf3x+0x9c>
    1732:	87 95       	ror	r24
    1734:	77 95       	ror	r23
    1736:	67 95       	ror	r22
    1738:	b7 95       	ror	r27
    173a:	f7 95       	ror	r31
    173c:	9e 3f       	cpi	r25, 0xFE	; 254
    173e:	08 f0       	brcs	.+2      	; 0x1742 <__addsf3x+0x9a>
    1740:	b0 cf       	rjmp	.-160    	; 0x16a2 <__addsf3+0x28>
    1742:	93 95       	inc	r25
    1744:	88 0f       	add	r24, r24
    1746:	08 f0       	brcs	.+2      	; 0x174a <__addsf3x+0xa2>
    1748:	99 27       	eor	r25, r25
    174a:	ee 0f       	add	r30, r30
    174c:	97 95       	ror	r25
    174e:	87 95       	ror	r24
    1750:	08 95       	ret

00001752 <__divsf3>:
    1752:	0e 94 bd 0b 	call	0x177a	; 0x177a <__divsf3x>
    1756:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__fp_round>
    175a:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fp_pscB>
    175e:	58 f0       	brcs	.+22     	; 0x1776 <__divsf3+0x24>
    1760:	0e 94 97 0c 	call	0x192e	; 0x192e <__fp_pscA>
    1764:	40 f0       	brcs	.+16     	; 0x1776 <__divsf3+0x24>
    1766:	29 f4       	brne	.+10     	; 0x1772 <__divsf3+0x20>
    1768:	5f 3f       	cpi	r21, 0xFF	; 255
    176a:	29 f0       	breq	.+10     	; 0x1776 <__divsf3+0x24>
    176c:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_inf>
    1770:	51 11       	cpse	r21, r1
    1772:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_szero>
    1776:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_nan>

0000177a <__divsf3x>:
    177a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_split3>
    177e:	68 f3       	brcs	.-38     	; 0x175a <__divsf3+0x8>

00001780 <__divsf3_pse>:
    1780:	99 23       	and	r25, r25
    1782:	b1 f3       	breq	.-20     	; 0x1770 <__divsf3+0x1e>
    1784:	55 23       	and	r21, r21
    1786:	91 f3       	breq	.-28     	; 0x176c <__divsf3+0x1a>
    1788:	95 1b       	sub	r25, r21
    178a:	55 0b       	sbc	r21, r21
    178c:	bb 27       	eor	r27, r27
    178e:	aa 27       	eor	r26, r26
    1790:	62 17       	cp	r22, r18
    1792:	73 07       	cpc	r23, r19
    1794:	84 07       	cpc	r24, r20
    1796:	38 f0       	brcs	.+14     	; 0x17a6 <__divsf3_pse+0x26>
    1798:	9f 5f       	subi	r25, 0xFF	; 255
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	22 0f       	add	r18, r18
    179e:	33 1f       	adc	r19, r19
    17a0:	44 1f       	adc	r20, r20
    17a2:	aa 1f       	adc	r26, r26
    17a4:	a9 f3       	breq	.-22     	; 0x1790 <__divsf3_pse+0x10>
    17a6:	35 d0       	rcall	.+106    	; 0x1812 <__divsf3_pse+0x92>
    17a8:	0e 2e       	mov	r0, r30
    17aa:	3a f0       	brmi	.+14     	; 0x17ba <__divsf3_pse+0x3a>
    17ac:	e0 e8       	ldi	r30, 0x80	; 128
    17ae:	32 d0       	rcall	.+100    	; 0x1814 <__divsf3_pse+0x94>
    17b0:	91 50       	subi	r25, 0x01	; 1
    17b2:	50 40       	sbci	r21, 0x00	; 0
    17b4:	e6 95       	lsr	r30
    17b6:	00 1c       	adc	r0, r0
    17b8:	ca f7       	brpl	.-14     	; 0x17ac <__divsf3_pse+0x2c>
    17ba:	2b d0       	rcall	.+86     	; 0x1812 <__divsf3_pse+0x92>
    17bc:	fe 2f       	mov	r31, r30
    17be:	29 d0       	rcall	.+82     	; 0x1812 <__divsf3_pse+0x92>
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	bb 1f       	adc	r27, r27
    17c8:	26 17       	cp	r18, r22
    17ca:	37 07       	cpc	r19, r23
    17cc:	48 07       	cpc	r20, r24
    17ce:	ab 07       	cpc	r26, r27
    17d0:	b0 e8       	ldi	r27, 0x80	; 128
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <__divsf3_pse+0x56>
    17d4:	bb 0b       	sbc	r27, r27
    17d6:	80 2d       	mov	r24, r0
    17d8:	bf 01       	movw	r22, r30
    17da:	ff 27       	eor	r31, r31
    17dc:	93 58       	subi	r25, 0x83	; 131
    17de:	5f 4f       	sbci	r21, 0xFF	; 255
    17e0:	3a f0       	brmi	.+14     	; 0x17f0 <__divsf3_pse+0x70>
    17e2:	9e 3f       	cpi	r25, 0xFE	; 254
    17e4:	51 05       	cpc	r21, r1
    17e6:	78 f0       	brcs	.+30     	; 0x1806 <__divsf3_pse+0x86>
    17e8:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_inf>
    17ec:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_szero>
    17f0:	5f 3f       	cpi	r21, 0xFF	; 255
    17f2:	e4 f3       	brlt	.-8      	; 0x17ec <__divsf3_pse+0x6c>
    17f4:	98 3e       	cpi	r25, 0xE8	; 232
    17f6:	d4 f3       	brlt	.-12     	; 0x17ec <__divsf3_pse+0x6c>
    17f8:	86 95       	lsr	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	b7 95       	ror	r27
    1800:	f7 95       	ror	r31
    1802:	9f 5f       	subi	r25, 0xFF	; 255
    1804:	c9 f7       	brne	.-14     	; 0x17f8 <__divsf3_pse+0x78>
    1806:	88 0f       	add	r24, r24
    1808:	91 1d       	adc	r25, r1
    180a:	96 95       	lsr	r25
    180c:	87 95       	ror	r24
    180e:	97 f9       	bld	r25, 7
    1810:	08 95       	ret
    1812:	e1 e0       	ldi	r30, 0x01	; 1
    1814:	66 0f       	add	r22, r22
    1816:	77 1f       	adc	r23, r23
    1818:	88 1f       	adc	r24, r24
    181a:	bb 1f       	adc	r27, r27
    181c:	62 17       	cp	r22, r18
    181e:	73 07       	cpc	r23, r19
    1820:	84 07       	cpc	r24, r20
    1822:	ba 07       	cpc	r27, r26
    1824:	20 f0       	brcs	.+8      	; 0x182e <__divsf3_pse+0xae>
    1826:	62 1b       	sub	r22, r18
    1828:	73 0b       	sbc	r23, r19
    182a:	84 0b       	sbc	r24, r20
    182c:	ba 0b       	sbc	r27, r26
    182e:	ee 1f       	adc	r30, r30
    1830:	88 f7       	brcc	.-30     	; 0x1814 <__divsf3_pse+0x94>
    1832:	e0 95       	com	r30
    1834:	08 95       	ret

00001836 <__fixsfsi>:
    1836:	0e 94 22 0c 	call	0x1844	; 0x1844 <__fixunssfsi>
    183a:	68 94       	set
    183c:	b1 11       	cpse	r27, r1
    183e:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_szero>
    1842:	08 95       	ret

00001844 <__fixunssfsi>:
    1844:	0e 94 be 0c 	call	0x197c	; 0x197c <__fp_splitA>
    1848:	88 f0       	brcs	.+34     	; 0x186c <__fixunssfsi+0x28>
    184a:	9f 57       	subi	r25, 0x7F	; 127
    184c:	98 f0       	brcs	.+38     	; 0x1874 <__fixunssfsi+0x30>
    184e:	b9 2f       	mov	r27, r25
    1850:	99 27       	eor	r25, r25
    1852:	b7 51       	subi	r27, 0x17	; 23
    1854:	b0 f0       	brcs	.+44     	; 0x1882 <__fixunssfsi+0x3e>
    1856:	e1 f0       	breq	.+56     	; 0x1890 <__fixunssfsi+0x4c>
    1858:	66 0f       	add	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	1a f0       	brmi	.+6      	; 0x1868 <__fixunssfsi+0x24>
    1862:	ba 95       	dec	r27
    1864:	c9 f7       	brne	.-14     	; 0x1858 <__fixunssfsi+0x14>
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <__fixunssfsi+0x4c>
    1868:	b1 30       	cpi	r27, 0x01	; 1
    186a:	91 f0       	breq	.+36     	; 0x1890 <__fixunssfsi+0x4c>
    186c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__fp_zero>
    1870:	b1 e0       	ldi	r27, 0x01	; 1
    1872:	08 95       	ret
    1874:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_zero>
    1878:	67 2f       	mov	r22, r23
    187a:	78 2f       	mov	r23, r24
    187c:	88 27       	eor	r24, r24
    187e:	b8 5f       	subi	r27, 0xF8	; 248
    1880:	39 f0       	breq	.+14     	; 0x1890 <__fixunssfsi+0x4c>
    1882:	b9 3f       	cpi	r27, 0xF9	; 249
    1884:	cc f3       	brlt	.-14     	; 0x1878 <__fixunssfsi+0x34>
    1886:	86 95       	lsr	r24
    1888:	77 95       	ror	r23
    188a:	67 95       	ror	r22
    188c:	b3 95       	inc	r27
    188e:	d9 f7       	brne	.-10     	; 0x1886 <__fixunssfsi+0x42>
    1890:	3e f4       	brtc	.+14     	; 0x18a0 <__fixunssfsi+0x5c>
    1892:	90 95       	com	r25
    1894:	80 95       	com	r24
    1896:	70 95       	com	r23
    1898:	61 95       	neg	r22
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
    189c:	8f 4f       	sbci	r24, 0xFF	; 255
    189e:	9f 4f       	sbci	r25, 0xFF	; 255
    18a0:	08 95       	ret

000018a2 <__floatunsisf>:
    18a2:	e8 94       	clt
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <__floatsisf+0x12>

000018a6 <__floatsisf>:
    18a6:	97 fb       	bst	r25, 7
    18a8:	3e f4       	brtc	.+14     	; 0x18b8 <__floatsisf+0x12>
    18aa:	90 95       	com	r25
    18ac:	80 95       	com	r24
    18ae:	70 95       	com	r23
    18b0:	61 95       	neg	r22
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	8f 4f       	sbci	r24, 0xFF	; 255
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	99 23       	and	r25, r25
    18ba:	a9 f0       	breq	.+42     	; 0x18e6 <__floatsisf+0x40>
    18bc:	f9 2f       	mov	r31, r25
    18be:	96 e9       	ldi	r25, 0x96	; 150
    18c0:	bb 27       	eor	r27, r27
    18c2:	93 95       	inc	r25
    18c4:	f6 95       	lsr	r31
    18c6:	87 95       	ror	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f1 11       	cpse	r31, r1
    18d0:	f8 cf       	rjmp	.-16     	; 0x18c2 <__floatsisf+0x1c>
    18d2:	fa f4       	brpl	.+62     	; 0x1912 <__floatsisf+0x6c>
    18d4:	bb 0f       	add	r27, r27
    18d6:	11 f4       	brne	.+4      	; 0x18dc <__floatsisf+0x36>
    18d8:	60 ff       	sbrs	r22, 0
    18da:	1b c0       	rjmp	.+54     	; 0x1912 <__floatsisf+0x6c>
    18dc:	6f 5f       	subi	r22, 0xFF	; 255
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	16 c0       	rjmp	.+44     	; 0x1912 <__floatsisf+0x6c>
    18e6:	88 23       	and	r24, r24
    18e8:	11 f0       	breq	.+4      	; 0x18ee <__floatsisf+0x48>
    18ea:	96 e9       	ldi	r25, 0x96	; 150
    18ec:	11 c0       	rjmp	.+34     	; 0x1910 <__floatsisf+0x6a>
    18ee:	77 23       	and	r23, r23
    18f0:	21 f0       	breq	.+8      	; 0x18fa <__floatsisf+0x54>
    18f2:	9e e8       	ldi	r25, 0x8E	; 142
    18f4:	87 2f       	mov	r24, r23
    18f6:	76 2f       	mov	r23, r22
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <__floatsisf+0x5e>
    18fa:	66 23       	and	r22, r22
    18fc:	71 f0       	breq	.+28     	; 0x191a <__floatsisf+0x74>
    18fe:	96 e8       	ldi	r25, 0x86	; 134
    1900:	86 2f       	mov	r24, r22
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	2a f0       	brmi	.+10     	; 0x1912 <__floatsisf+0x6c>
    1908:	9a 95       	dec	r25
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	da f7       	brpl	.-10     	; 0x1908 <__floatsisf+0x62>
    1912:	88 0f       	add	r24, r24
    1914:	96 95       	lsr	r25
    1916:	87 95       	ror	r24
    1918:	97 f9       	bld	r25, 7
    191a:	08 95       	ret

0000191c <__fp_inf>:
    191c:	97 f9       	bld	r25, 7
    191e:	9f 67       	ori	r25, 0x7F	; 127
    1920:	80 e8       	ldi	r24, 0x80	; 128
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	08 95       	ret

00001928 <__fp_nan>:
    1928:	9f ef       	ldi	r25, 0xFF	; 255
    192a:	80 ec       	ldi	r24, 0xC0	; 192
    192c:	08 95       	ret

0000192e <__fp_pscA>:
    192e:	00 24       	eor	r0, r0
    1930:	0a 94       	dec	r0
    1932:	16 16       	cp	r1, r22
    1934:	17 06       	cpc	r1, r23
    1936:	18 06       	cpc	r1, r24
    1938:	09 06       	cpc	r0, r25
    193a:	08 95       	ret

0000193c <__fp_pscB>:
    193c:	00 24       	eor	r0, r0
    193e:	0a 94       	dec	r0
    1940:	12 16       	cp	r1, r18
    1942:	13 06       	cpc	r1, r19
    1944:	14 06       	cpc	r1, r20
    1946:	05 06       	cpc	r0, r21
    1948:	08 95       	ret

0000194a <__fp_round>:
    194a:	09 2e       	mov	r0, r25
    194c:	03 94       	inc	r0
    194e:	00 0c       	add	r0, r0
    1950:	11 f4       	brne	.+4      	; 0x1956 <__fp_round+0xc>
    1952:	88 23       	and	r24, r24
    1954:	52 f0       	brmi	.+20     	; 0x196a <__fp_round+0x20>
    1956:	bb 0f       	add	r27, r27
    1958:	40 f4       	brcc	.+16     	; 0x196a <__fp_round+0x20>
    195a:	bf 2b       	or	r27, r31
    195c:	11 f4       	brne	.+4      	; 0x1962 <__fp_round+0x18>
    195e:	60 ff       	sbrs	r22, 0
    1960:	04 c0       	rjmp	.+8      	; 0x196a <__fp_round+0x20>
    1962:	6f 5f       	subi	r22, 0xFF	; 255
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	8f 4f       	sbci	r24, 0xFF	; 255
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	08 95       	ret

0000196c <__fp_split3>:
    196c:	57 fd       	sbrc	r21, 7
    196e:	90 58       	subi	r25, 0x80	; 128
    1970:	44 0f       	add	r20, r20
    1972:	55 1f       	adc	r21, r21
    1974:	59 f0       	breq	.+22     	; 0x198c <__fp_splitA+0x10>
    1976:	5f 3f       	cpi	r21, 0xFF	; 255
    1978:	71 f0       	breq	.+28     	; 0x1996 <__fp_splitA+0x1a>
    197a:	47 95       	ror	r20

0000197c <__fp_splitA>:
    197c:	88 0f       	add	r24, r24
    197e:	97 fb       	bst	r25, 7
    1980:	99 1f       	adc	r25, r25
    1982:	61 f0       	breq	.+24     	; 0x199c <__fp_splitA+0x20>
    1984:	9f 3f       	cpi	r25, 0xFF	; 255
    1986:	79 f0       	breq	.+30     	; 0x19a6 <__fp_splitA+0x2a>
    1988:	87 95       	ror	r24
    198a:	08 95       	ret
    198c:	12 16       	cp	r1, r18
    198e:	13 06       	cpc	r1, r19
    1990:	14 06       	cpc	r1, r20
    1992:	55 1f       	adc	r21, r21
    1994:	f2 cf       	rjmp	.-28     	; 0x197a <__fp_split3+0xe>
    1996:	46 95       	lsr	r20
    1998:	f1 df       	rcall	.-30     	; 0x197c <__fp_splitA>
    199a:	08 c0       	rjmp	.+16     	; 0x19ac <__fp_splitA+0x30>
    199c:	16 16       	cp	r1, r22
    199e:	17 06       	cpc	r1, r23
    19a0:	18 06       	cpc	r1, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	f1 cf       	rjmp	.-30     	; 0x1988 <__fp_splitA+0xc>
    19a6:	86 95       	lsr	r24
    19a8:	71 05       	cpc	r23, r1
    19aa:	61 05       	cpc	r22, r1
    19ac:	08 94       	sec
    19ae:	08 95       	ret

000019b0 <__fp_zero>:
    19b0:	e8 94       	clt

000019b2 <__fp_szero>:
    19b2:	bb 27       	eor	r27, r27
    19b4:	66 27       	eor	r22, r22
    19b6:	77 27       	eor	r23, r23
    19b8:	cb 01       	movw	r24, r22
    19ba:	97 f9       	bld	r25, 7
    19bc:	08 95       	ret

000019be <__mulsf3>:
    19be:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__mulsf3x>
    19c2:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__fp_round>
    19c6:	0e 94 97 0c 	call	0x192e	; 0x192e <__fp_pscA>
    19ca:	38 f0       	brcs	.+14     	; 0x19da <__mulsf3+0x1c>
    19cc:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fp_pscB>
    19d0:	20 f0       	brcs	.+8      	; 0x19da <__mulsf3+0x1c>
    19d2:	95 23       	and	r25, r21
    19d4:	11 f0       	breq	.+4      	; 0x19da <__mulsf3+0x1c>
    19d6:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_inf>
    19da:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_nan>
    19de:	11 24       	eor	r1, r1
    19e0:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_szero>

000019e4 <__mulsf3x>:
    19e4:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_split3>
    19e8:	70 f3       	brcs	.-36     	; 0x19c6 <__mulsf3+0x8>

000019ea <__mulsf3_pse>:
    19ea:	95 9f       	mul	r25, r21
    19ec:	c1 f3       	breq	.-16     	; 0x19de <__mulsf3+0x20>
    19ee:	95 0f       	add	r25, r21
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	55 1f       	adc	r21, r21
    19f4:	62 9f       	mul	r22, r18
    19f6:	f0 01       	movw	r30, r0
    19f8:	72 9f       	mul	r23, r18
    19fa:	bb 27       	eor	r27, r27
    19fc:	f0 0d       	add	r31, r0
    19fe:	b1 1d       	adc	r27, r1
    1a00:	63 9f       	mul	r22, r19
    1a02:	aa 27       	eor	r26, r26
    1a04:	f0 0d       	add	r31, r0
    1a06:	b1 1d       	adc	r27, r1
    1a08:	aa 1f       	adc	r26, r26
    1a0a:	64 9f       	mul	r22, r20
    1a0c:	66 27       	eor	r22, r22
    1a0e:	b0 0d       	add	r27, r0
    1a10:	a1 1d       	adc	r26, r1
    1a12:	66 1f       	adc	r22, r22
    1a14:	82 9f       	mul	r24, r18
    1a16:	22 27       	eor	r18, r18
    1a18:	b0 0d       	add	r27, r0
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	62 1f       	adc	r22, r18
    1a1e:	73 9f       	mul	r23, r19
    1a20:	b0 0d       	add	r27, r0
    1a22:	a1 1d       	adc	r26, r1
    1a24:	62 1f       	adc	r22, r18
    1a26:	83 9f       	mul	r24, r19
    1a28:	a0 0d       	add	r26, r0
    1a2a:	61 1d       	adc	r22, r1
    1a2c:	22 1f       	adc	r18, r18
    1a2e:	74 9f       	mul	r23, r20
    1a30:	33 27       	eor	r19, r19
    1a32:	a0 0d       	add	r26, r0
    1a34:	61 1d       	adc	r22, r1
    1a36:	23 1f       	adc	r18, r19
    1a38:	84 9f       	mul	r24, r20
    1a3a:	60 0d       	add	r22, r0
    1a3c:	21 1d       	adc	r18, r1
    1a3e:	82 2f       	mov	r24, r18
    1a40:	76 2f       	mov	r23, r22
    1a42:	6a 2f       	mov	r22, r26
    1a44:	11 24       	eor	r1, r1
    1a46:	9f 57       	subi	r25, 0x7F	; 127
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	9a f0       	brmi	.+38     	; 0x1a72 <__mulsf3_pse+0x88>
    1a4c:	f1 f0       	breq	.+60     	; 0x1a8a <__mulsf3_pse+0xa0>
    1a4e:	88 23       	and	r24, r24
    1a50:	4a f0       	brmi	.+18     	; 0x1a64 <__mulsf3_pse+0x7a>
    1a52:	ee 0f       	add	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	bb 1f       	adc	r27, r27
    1a58:	66 1f       	adc	r22, r22
    1a5a:	77 1f       	adc	r23, r23
    1a5c:	88 1f       	adc	r24, r24
    1a5e:	91 50       	subi	r25, 0x01	; 1
    1a60:	50 40       	sbci	r21, 0x00	; 0
    1a62:	a9 f7       	brne	.-22     	; 0x1a4e <__mulsf3_pse+0x64>
    1a64:	9e 3f       	cpi	r25, 0xFE	; 254
    1a66:	51 05       	cpc	r21, r1
    1a68:	80 f0       	brcs	.+32     	; 0x1a8a <__mulsf3_pse+0xa0>
    1a6a:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_inf>
    1a6e:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_szero>
    1a72:	5f 3f       	cpi	r21, 0xFF	; 255
    1a74:	e4 f3       	brlt	.-8      	; 0x1a6e <__mulsf3_pse+0x84>
    1a76:	98 3e       	cpi	r25, 0xE8	; 232
    1a78:	d4 f3       	brlt	.-12     	; 0x1a6e <__mulsf3_pse+0x84>
    1a7a:	86 95       	lsr	r24
    1a7c:	77 95       	ror	r23
    1a7e:	67 95       	ror	r22
    1a80:	b7 95       	ror	r27
    1a82:	f7 95       	ror	r31
    1a84:	e7 95       	ror	r30
    1a86:	9f 5f       	subi	r25, 0xFF	; 255
    1a88:	c1 f7       	brne	.-16     	; 0x1a7a <__mulsf3_pse+0x90>
    1a8a:	fe 2b       	or	r31, r30
    1a8c:	88 0f       	add	r24, r24
    1a8e:	91 1d       	adc	r25, r1
    1a90:	96 95       	lsr	r25
    1a92:	87 95       	ror	r24
    1a94:	97 f9       	bld	r25, 7
    1a96:	08 95       	ret

00001a98 <do_rand>:
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	ec 01       	movw	r28, r24
    1aae:	68 81       	ld	r22, Y
    1ab0:	79 81       	ldd	r23, Y+1	; 0x01
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab6:	61 15       	cp	r22, r1
    1ab8:	71 05       	cpc	r23, r1
    1aba:	81 05       	cpc	r24, r1
    1abc:	91 05       	cpc	r25, r1
    1abe:	21 f4       	brne	.+8      	; 0x1ac8 <do_rand+0x30>
    1ac0:	64 e2       	ldi	r22, 0x24	; 36
    1ac2:	79 ed       	ldi	r23, 0xD9	; 217
    1ac4:	8b e5       	ldi	r24, 0x5B	; 91
    1ac6:	97 e0       	ldi	r25, 0x07	; 7
    1ac8:	2d e1       	ldi	r18, 0x1D	; 29
    1aca:	33 ef       	ldi	r19, 0xF3	; 243
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__divmodsi4>
    1ad4:	49 01       	movw	r8, r18
    1ad6:	5a 01       	movw	r10, r20
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	a7 ea       	ldi	r26, 0xA7	; 167
    1ade:	b1 e4       	ldi	r27, 0x41	; 65
    1ae0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__muluhisi3>
    1ae4:	6b 01       	movw	r12, r22
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	ac ee       	ldi	r26, 0xEC	; 236
    1aea:	b4 ef       	ldi	r27, 0xF4	; 244
    1aec:	a5 01       	movw	r20, r10
    1aee:	94 01       	movw	r18, r8
    1af0:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__mulohisi3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8c 0d       	add	r24, r12
    1afa:	9d 1d       	adc	r25, r13
    1afc:	ae 1d       	adc	r26, r14
    1afe:	bf 1d       	adc	r27, r15
    1b00:	b7 ff       	sbrs	r27, 7
    1b02:	03 c0       	rjmp	.+6      	; 0x1b0a <do_rand+0x72>
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	a1 09       	sbc	r26, r1
    1b08:	b0 48       	sbci	r27, 0x80	; 128
    1b0a:	88 83       	st	Y, r24
    1b0c:	99 83       	std	Y+1, r25	; 0x01
    1b0e:	aa 83       	std	Y+2, r26	; 0x02
    1b10:	bb 83       	std	Y+3, r27	; 0x03
    1b12:	9f 77       	andi	r25, 0x7F	; 127
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	df 90       	pop	r13
    1b1e:	cf 90       	pop	r12
    1b20:	bf 90       	pop	r11
    1b22:	af 90       	pop	r10
    1b24:	9f 90       	pop	r9
    1b26:	8f 90       	pop	r8
    1b28:	08 95       	ret

00001b2a <rand_r>:
    1b2a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <do_rand>
    1b2e:	08 95       	ret

00001b30 <rand>:
    1b30:	85 e1       	ldi	r24, 0x15	; 21
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <do_rand>
    1b38:	08 95       	ret

00001b3a <srand>:
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	80 93 15 01 	sts	0x0115, r24
    1b42:	90 93 16 01 	sts	0x0116, r25
    1b46:	a0 93 17 01 	sts	0x0117, r26
    1b4a:	b0 93 18 01 	sts	0x0118, r27
    1b4e:	08 95       	ret

00001b50 <printf>:
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ee ea       	ldi	r30, 0xAE	; 174
    1b56:	fd e0       	ldi	r31, 0x0D	; 13
    1b58:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__prologue_saves__+0x20>
    1b5c:	ae 01       	movw	r20, r28
    1b5e:	4b 5f       	subi	r20, 0xFB	; 251
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255
    1b62:	fa 01       	movw	r30, r20
    1b64:	61 91       	ld	r22, Z+
    1b66:	71 91       	ld	r23, Z+
    1b68:	af 01       	movw	r20, r30
    1b6a:	80 91 88 01 	lds	r24, 0x0188
    1b6e:	90 91 89 01 	lds	r25, 0x0189
    1b72:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <vfprintf>
    1b76:	e2 e0       	ldi	r30, 0x02	; 2
    1b78:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__epilogue_restores__+0x20>

00001b7c <vfprintf>:
    1b7c:	ac e0       	ldi	r26, 0x0C	; 12
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e4 ec       	ldi	r30, 0xC4	; 196
    1b82:	fd e0       	ldi	r31, 0x0D	; 13
    1b84:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__prologue_saves__>
    1b88:	7c 01       	movw	r14, r24
    1b8a:	6b 01       	movw	r12, r22
    1b8c:	8a 01       	movw	r16, r20
    1b8e:	fc 01       	movw	r30, r24
    1b90:	17 82       	std	Z+7, r1	; 0x07
    1b92:	16 82       	std	Z+6, r1	; 0x06
    1b94:	83 81       	ldd	r24, Z+3	; 0x03
    1b96:	81 ff       	sbrs	r24, 1
    1b98:	bd c1       	rjmp	.+890    	; 0x1f14 <vfprintf+0x398>
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	4c 01       	movw	r8, r24
    1ba0:	f7 01       	movw	r30, r14
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	f6 01       	movw	r30, r12
    1ba6:	93 fd       	sbrc	r25, 3
    1ba8:	85 91       	lpm	r24, Z+
    1baa:	93 ff       	sbrs	r25, 3
    1bac:	81 91       	ld	r24, Z+
    1bae:	6f 01       	movw	r12, r30
    1bb0:	88 23       	and	r24, r24
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <vfprintf+0x3a>
    1bb4:	ab c1       	rjmp	.+854    	; 0x1f0c <vfprintf+0x390>
    1bb6:	85 32       	cpi	r24, 0x25	; 37
    1bb8:	39 f4       	brne	.+14     	; 0x1bc8 <vfprintf+0x4c>
    1bba:	93 fd       	sbrc	r25, 3
    1bbc:	85 91       	lpm	r24, Z+
    1bbe:	93 ff       	sbrs	r25, 3
    1bc0:	81 91       	ld	r24, Z+
    1bc2:	6f 01       	movw	r12, r30
    1bc4:	85 32       	cpi	r24, 0x25	; 37
    1bc6:	29 f4       	brne	.+10     	; 0x1bd2 <vfprintf+0x56>
    1bc8:	b7 01       	movw	r22, r14
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1bd0:	e7 cf       	rjmp	.-50     	; 0x1ba0 <vfprintf+0x24>
    1bd2:	51 2c       	mov	r5, r1
    1bd4:	31 2c       	mov	r3, r1
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	20 32       	cpi	r18, 0x20	; 32
    1bda:	a0 f4       	brcc	.+40     	; 0x1c04 <vfprintf+0x88>
    1bdc:	8b 32       	cpi	r24, 0x2B	; 43
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <vfprintf+0x7e>
    1be0:	30 f4       	brcc	.+12     	; 0x1bee <vfprintf+0x72>
    1be2:	80 32       	cpi	r24, 0x20	; 32
    1be4:	59 f0       	breq	.+22     	; 0x1bfc <vfprintf+0x80>
    1be6:	83 32       	cpi	r24, 0x23	; 35
    1be8:	69 f4       	brne	.+26     	; 0x1c04 <vfprintf+0x88>
    1bea:	20 61       	ori	r18, 0x10	; 16
    1bec:	2c c0       	rjmp	.+88     	; 0x1c46 <vfprintf+0xca>
    1bee:	8d 32       	cpi	r24, 0x2D	; 45
    1bf0:	39 f0       	breq	.+14     	; 0x1c00 <vfprintf+0x84>
    1bf2:	80 33       	cpi	r24, 0x30	; 48
    1bf4:	39 f4       	brne	.+14     	; 0x1c04 <vfprintf+0x88>
    1bf6:	21 60       	ori	r18, 0x01	; 1
    1bf8:	26 c0       	rjmp	.+76     	; 0x1c46 <vfprintf+0xca>
    1bfa:	22 60       	ori	r18, 0x02	; 2
    1bfc:	24 60       	ori	r18, 0x04	; 4
    1bfe:	23 c0       	rjmp	.+70     	; 0x1c46 <vfprintf+0xca>
    1c00:	28 60       	ori	r18, 0x08	; 8
    1c02:	21 c0       	rjmp	.+66     	; 0x1c46 <vfprintf+0xca>
    1c04:	27 fd       	sbrc	r18, 7
    1c06:	27 c0       	rjmp	.+78     	; 0x1c56 <vfprintf+0xda>
    1c08:	30 ed       	ldi	r19, 0xD0	; 208
    1c0a:	38 0f       	add	r19, r24
    1c0c:	3a 30       	cpi	r19, 0x0A	; 10
    1c0e:	78 f4       	brcc	.+30     	; 0x1c2e <vfprintf+0xb2>
    1c10:	26 ff       	sbrs	r18, 6
    1c12:	06 c0       	rjmp	.+12     	; 0x1c20 <vfprintf+0xa4>
    1c14:	fa e0       	ldi	r31, 0x0A	; 10
    1c16:	5f 9e       	mul	r5, r31
    1c18:	30 0d       	add	r19, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	53 2e       	mov	r5, r19
    1c1e:	13 c0       	rjmp	.+38     	; 0x1c46 <vfprintf+0xca>
    1c20:	8a e0       	ldi	r24, 0x0A	; 10
    1c22:	38 9e       	mul	r3, r24
    1c24:	30 0d       	add	r19, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	33 2e       	mov	r3, r19
    1c2a:	20 62       	ori	r18, 0x20	; 32
    1c2c:	0c c0       	rjmp	.+24     	; 0x1c46 <vfprintf+0xca>
    1c2e:	8e 32       	cpi	r24, 0x2E	; 46
    1c30:	21 f4       	brne	.+8      	; 0x1c3a <vfprintf+0xbe>
    1c32:	26 fd       	sbrc	r18, 6
    1c34:	6b c1       	rjmp	.+726    	; 0x1f0c <vfprintf+0x390>
    1c36:	20 64       	ori	r18, 0x40	; 64
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0xca>
    1c3a:	8c 36       	cpi	r24, 0x6C	; 108
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <vfprintf+0xc6>
    1c3e:	20 68       	ori	r18, 0x80	; 128
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <vfprintf+0xca>
    1c42:	88 36       	cpi	r24, 0x68	; 104
    1c44:	41 f4       	brne	.+16     	; 0x1c56 <vfprintf+0xda>
    1c46:	f6 01       	movw	r30, r12
    1c48:	93 fd       	sbrc	r25, 3
    1c4a:	85 91       	lpm	r24, Z+
    1c4c:	93 ff       	sbrs	r25, 3
    1c4e:	81 91       	ld	r24, Z+
    1c50:	6f 01       	movw	r12, r30
    1c52:	81 11       	cpse	r24, r1
    1c54:	c1 cf       	rjmp	.-126    	; 0x1bd8 <vfprintf+0x5c>
    1c56:	98 2f       	mov	r25, r24
    1c58:	9f 7d       	andi	r25, 0xDF	; 223
    1c5a:	95 54       	subi	r25, 0x45	; 69
    1c5c:	93 30       	cpi	r25, 0x03	; 3
    1c5e:	28 f4       	brcc	.+10     	; 0x1c6a <vfprintf+0xee>
    1c60:	0c 5f       	subi	r16, 0xFC	; 252
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	ff e3       	ldi	r31, 0x3F	; 63
    1c66:	f9 83       	std	Y+1, r31	; 0x01
    1c68:	0d c0       	rjmp	.+26     	; 0x1c84 <vfprintf+0x108>
    1c6a:	83 36       	cpi	r24, 0x63	; 99
    1c6c:	31 f0       	breq	.+12     	; 0x1c7a <vfprintf+0xfe>
    1c6e:	83 37       	cpi	r24, 0x73	; 115
    1c70:	71 f0       	breq	.+28     	; 0x1c8e <vfprintf+0x112>
    1c72:	83 35       	cpi	r24, 0x53	; 83
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <vfprintf+0xfc>
    1c76:	5b c0       	rjmp	.+182    	; 0x1d2e <vfprintf+0x1b2>
    1c78:	22 c0       	rjmp	.+68     	; 0x1cbe <vfprintf+0x142>
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	80 81       	ld	r24, Z
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	0e 5f       	subi	r16, 0xFE	; 254
    1c82:	1f 4f       	sbci	r17, 0xFF	; 255
    1c84:	44 24       	eor	r4, r4
    1c86:	43 94       	inc	r4
    1c88:	51 2c       	mov	r5, r1
    1c8a:	54 01       	movw	r10, r8
    1c8c:	15 c0       	rjmp	.+42     	; 0x1cb8 <vfprintf+0x13c>
    1c8e:	38 01       	movw	r6, r16
    1c90:	f2 e0       	ldi	r31, 0x02	; 2
    1c92:	6f 0e       	add	r6, r31
    1c94:	71 1c       	adc	r7, r1
    1c96:	f8 01       	movw	r30, r16
    1c98:	a0 80       	ld	r10, Z
    1c9a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9c:	26 ff       	sbrs	r18, 6
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <vfprintf+0x12a>
    1ca0:	65 2d       	mov	r22, r5
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <vfprintf+0x12e>
    1ca6:	6f ef       	ldi	r22, 0xFF	; 255
    1ca8:	7f ef       	ldi	r23, 0xFF	; 255
    1caa:	c5 01       	movw	r24, r10
    1cac:	2c 87       	std	Y+12, r18	; 0x0c
    1cae:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <strnlen>
    1cb2:	2c 01       	movw	r4, r24
    1cb4:	83 01       	movw	r16, r6
    1cb6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cb8:	2f 77       	andi	r18, 0x7F	; 127
    1cba:	22 2e       	mov	r2, r18
    1cbc:	17 c0       	rjmp	.+46     	; 0x1cec <vfprintf+0x170>
    1cbe:	38 01       	movw	r6, r16
    1cc0:	f2 e0       	ldi	r31, 0x02	; 2
    1cc2:	6f 0e       	add	r6, r31
    1cc4:	71 1c       	adc	r7, r1
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	a0 80       	ld	r10, Z
    1cca:	b1 80       	ldd	r11, Z+1	; 0x01
    1ccc:	26 ff       	sbrs	r18, 6
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <vfprintf+0x15a>
    1cd0:	65 2d       	mov	r22, r5
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <vfprintf+0x15e>
    1cd6:	6f ef       	ldi	r22, 0xFF	; 255
    1cd8:	7f ef       	ldi	r23, 0xFF	; 255
    1cda:	c5 01       	movw	r24, r10
    1cdc:	2c 87       	std	Y+12, r18	; 0x0c
    1cde:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <strnlen_P>
    1ce2:	2c 01       	movw	r4, r24
    1ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ce6:	20 68       	ori	r18, 0x80	; 128
    1ce8:	22 2e       	mov	r2, r18
    1cea:	83 01       	movw	r16, r6
    1cec:	23 fc       	sbrc	r2, 3
    1cee:	1b c0       	rjmp	.+54     	; 0x1d26 <vfprintf+0x1aa>
    1cf0:	83 2d       	mov	r24, r3
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	48 16       	cp	r4, r24
    1cf6:	59 06       	cpc	r5, r25
    1cf8:	b0 f4       	brcc	.+44     	; 0x1d26 <vfprintf+0x1aa>
    1cfa:	b7 01       	movw	r22, r14
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1d04:	3a 94       	dec	r3
    1d06:	f4 cf       	rjmp	.-24     	; 0x1cf0 <vfprintf+0x174>
    1d08:	f5 01       	movw	r30, r10
    1d0a:	27 fc       	sbrc	r2, 7
    1d0c:	85 91       	lpm	r24, Z+
    1d0e:	27 fe       	sbrs	r2, 7
    1d10:	81 91       	ld	r24, Z+
    1d12:	5f 01       	movw	r10, r30
    1d14:	b7 01       	movw	r22, r14
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1d1c:	31 10       	cpse	r3, r1
    1d1e:	3a 94       	dec	r3
    1d20:	f1 e0       	ldi	r31, 0x01	; 1
    1d22:	4f 1a       	sub	r4, r31
    1d24:	51 08       	sbc	r5, r1
    1d26:	41 14       	cp	r4, r1
    1d28:	51 04       	cpc	r5, r1
    1d2a:	71 f7       	brne	.-36     	; 0x1d08 <vfprintf+0x18c>
    1d2c:	e5 c0       	rjmp	.+458    	; 0x1ef8 <vfprintf+0x37c>
    1d2e:	84 36       	cpi	r24, 0x64	; 100
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <vfprintf+0x1ba>
    1d32:	89 36       	cpi	r24, 0x69	; 105
    1d34:	39 f5       	brne	.+78     	; 0x1d84 <vfprintf+0x208>
    1d36:	f8 01       	movw	r30, r16
    1d38:	27 ff       	sbrs	r18, 7
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <vfprintf+0x1ce>
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0c 5f       	subi	r16, 0xFC	; 252
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	08 c0       	rjmp	.+16     	; 0x1d5a <vfprintf+0x1de>
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	07 2e       	mov	r0, r23
    1d50:	00 0c       	add	r0, r0
    1d52:	88 0b       	sbc	r24, r24
    1d54:	99 0b       	sbc	r25, r25
    1d56:	0e 5f       	subi	r16, 0xFE	; 254
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	2f 76       	andi	r18, 0x6F	; 111
    1d5c:	72 2e       	mov	r7, r18
    1d5e:	97 ff       	sbrs	r25, 7
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <vfprintf+0x1f8>
    1d62:	90 95       	com	r25
    1d64:	80 95       	com	r24
    1d66:	70 95       	com	r23
    1d68:	61 95       	neg	r22
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	20 68       	ori	r18, 0x80	; 128
    1d72:	72 2e       	mov	r7, r18
    1d74:	2a e0       	ldi	r18, 0x0A	; 10
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	a4 01       	movw	r20, r8
    1d7a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__ultoa_invert>
    1d7e:	a8 2e       	mov	r10, r24
    1d80:	a8 18       	sub	r10, r8
    1d82:	44 c0       	rjmp	.+136    	; 0x1e0c <vfprintf+0x290>
    1d84:	85 37       	cpi	r24, 0x75	; 117
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <vfprintf+0x216>
    1d88:	2f 7e       	andi	r18, 0xEF	; 239
    1d8a:	b2 2e       	mov	r11, r18
    1d8c:	2a e0       	ldi	r18, 0x0A	; 10
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	25 c0       	rjmp	.+74     	; 0x1ddc <vfprintf+0x260>
    1d92:	f2 2f       	mov	r31, r18
    1d94:	f9 7f       	andi	r31, 0xF9	; 249
    1d96:	bf 2e       	mov	r11, r31
    1d98:	8f 36       	cpi	r24, 0x6F	; 111
    1d9a:	c1 f0       	breq	.+48     	; 0x1dcc <vfprintf+0x250>
    1d9c:	18 f4       	brcc	.+6      	; 0x1da4 <vfprintf+0x228>
    1d9e:	88 35       	cpi	r24, 0x58	; 88
    1da0:	79 f0       	breq	.+30     	; 0x1dc0 <vfprintf+0x244>
    1da2:	b4 c0       	rjmp	.+360    	; 0x1f0c <vfprintf+0x390>
    1da4:	80 37       	cpi	r24, 0x70	; 112
    1da6:	19 f0       	breq	.+6      	; 0x1dae <vfprintf+0x232>
    1da8:	88 37       	cpi	r24, 0x78	; 120
    1daa:	21 f0       	breq	.+8      	; 0x1db4 <vfprintf+0x238>
    1dac:	af c0       	rjmp	.+350    	; 0x1f0c <vfprintf+0x390>
    1dae:	2f 2f       	mov	r18, r31
    1db0:	20 61       	ori	r18, 0x10	; 16
    1db2:	b2 2e       	mov	r11, r18
    1db4:	b4 fe       	sbrs	r11, 4
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <vfprintf+0x256>
    1db8:	8b 2d       	mov	r24, r11
    1dba:	84 60       	ori	r24, 0x04	; 4
    1dbc:	b8 2e       	mov	r11, r24
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <vfprintf+0x256>
    1dc0:	24 ff       	sbrs	r18, 4
    1dc2:	0a c0       	rjmp	.+20     	; 0x1dd8 <vfprintf+0x25c>
    1dc4:	9f 2f       	mov	r25, r31
    1dc6:	96 60       	ori	r25, 0x06	; 6
    1dc8:	b9 2e       	mov	r11, r25
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <vfprintf+0x25c>
    1dcc:	28 e0       	ldi	r18, 0x08	; 8
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <vfprintf+0x260>
    1dd2:	20 e1       	ldi	r18, 0x10	; 16
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <vfprintf+0x260>
    1dd8:	20 e1       	ldi	r18, 0x10	; 16
    1dda:	32 e0       	ldi	r19, 0x02	; 2
    1ddc:	f8 01       	movw	r30, r16
    1dde:	b7 fe       	sbrs	r11, 7
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <vfprintf+0x274>
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	0c 5f       	subi	r16, 0xFC	; 252
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	06 c0       	rjmp	.+12     	; 0x1dfc <vfprintf+0x280>
    1df0:	60 81       	ld	r22, Z
    1df2:	71 81       	ldd	r23, Z+1	; 0x01
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 5f       	subi	r16, 0xFE	; 254
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	a4 01       	movw	r20, r8
    1dfe:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__ultoa_invert>
    1e02:	a8 2e       	mov	r10, r24
    1e04:	a8 18       	sub	r10, r8
    1e06:	fb 2d       	mov	r31, r11
    1e08:	ff 77       	andi	r31, 0x7F	; 127
    1e0a:	7f 2e       	mov	r7, r31
    1e0c:	76 fe       	sbrs	r7, 6
    1e0e:	0b c0       	rjmp	.+22     	; 0x1e26 <vfprintf+0x2aa>
    1e10:	37 2d       	mov	r19, r7
    1e12:	3e 7f       	andi	r19, 0xFE	; 254
    1e14:	a5 14       	cp	r10, r5
    1e16:	50 f4       	brcc	.+20     	; 0x1e2c <vfprintf+0x2b0>
    1e18:	74 fe       	sbrs	r7, 4
    1e1a:	0a c0       	rjmp	.+20     	; 0x1e30 <vfprintf+0x2b4>
    1e1c:	72 fc       	sbrc	r7, 2
    1e1e:	08 c0       	rjmp	.+16     	; 0x1e30 <vfprintf+0x2b4>
    1e20:	37 2d       	mov	r19, r7
    1e22:	3e 7e       	andi	r19, 0xEE	; 238
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <vfprintf+0x2b4>
    1e26:	ba 2c       	mov	r11, r10
    1e28:	37 2d       	mov	r19, r7
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <vfprintf+0x2b6>
    1e2c:	ba 2c       	mov	r11, r10
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <vfprintf+0x2b6>
    1e30:	b5 2c       	mov	r11, r5
    1e32:	34 ff       	sbrs	r19, 4
    1e34:	0d c0       	rjmp	.+26     	; 0x1e50 <vfprintf+0x2d4>
    1e36:	fe 01       	movw	r30, r28
    1e38:	ea 0d       	add	r30, r10
    1e3a:	f1 1d       	adc	r31, r1
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 33       	cpi	r24, 0x30	; 48
    1e40:	11 f4       	brne	.+4      	; 0x1e46 <vfprintf+0x2ca>
    1e42:	39 7e       	andi	r19, 0xE9	; 233
    1e44:	09 c0       	rjmp	.+18     	; 0x1e58 <vfprintf+0x2dc>
    1e46:	32 ff       	sbrs	r19, 2
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <vfprintf+0x2da>
    1e4a:	b3 94       	inc	r11
    1e4c:	b3 94       	inc	r11
    1e4e:	04 c0       	rjmp	.+8      	; 0x1e58 <vfprintf+0x2dc>
    1e50:	83 2f       	mov	r24, r19
    1e52:	86 78       	andi	r24, 0x86	; 134
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <vfprintf+0x2dc>
    1e56:	b3 94       	inc	r11
    1e58:	33 fd       	sbrc	r19, 3
    1e5a:	13 c0       	rjmp	.+38     	; 0x1e82 <vfprintf+0x306>
    1e5c:	30 ff       	sbrs	r19, 0
    1e5e:	06 c0       	rjmp	.+12     	; 0x1e6c <vfprintf+0x2f0>
    1e60:	5a 2c       	mov	r5, r10
    1e62:	b3 14       	cp	r11, r3
    1e64:	18 f4       	brcc	.+6      	; 0x1e6c <vfprintf+0x2f0>
    1e66:	53 0c       	add	r5, r3
    1e68:	5b 18       	sub	r5, r11
    1e6a:	b3 2c       	mov	r11, r3
    1e6c:	b3 14       	cp	r11, r3
    1e6e:	68 f4       	brcc	.+26     	; 0x1e8a <vfprintf+0x30e>
    1e70:	b7 01       	movw	r22, r14
    1e72:	80 e2       	ldi	r24, 0x20	; 32
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	3c 87       	std	Y+12, r19	; 0x0c
    1e78:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1e7c:	b3 94       	inc	r11
    1e7e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e80:	f5 cf       	rjmp	.-22     	; 0x1e6c <vfprintf+0x2f0>
    1e82:	b3 14       	cp	r11, r3
    1e84:	10 f4       	brcc	.+4      	; 0x1e8a <vfprintf+0x30e>
    1e86:	3b 18       	sub	r3, r11
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <vfprintf+0x310>
    1e8a:	31 2c       	mov	r3, r1
    1e8c:	34 ff       	sbrs	r19, 4
    1e8e:	12 c0       	rjmp	.+36     	; 0x1eb4 <vfprintf+0x338>
    1e90:	b7 01       	movw	r22, r14
    1e92:	80 e3       	ldi	r24, 0x30	; 48
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	3c 87       	std	Y+12, r19	; 0x0c
    1e98:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1e9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e9e:	32 ff       	sbrs	r19, 2
    1ea0:	17 c0       	rjmp	.+46     	; 0x1ed0 <vfprintf+0x354>
    1ea2:	31 fd       	sbrc	r19, 1
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <vfprintf+0x330>
    1ea6:	88 e7       	ldi	r24, 0x78	; 120
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <vfprintf+0x334>
    1eac:	88 e5       	ldi	r24, 0x58	; 88
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	b7 01       	movw	r22, r14
    1eb2:	0c c0       	rjmp	.+24     	; 0x1ecc <vfprintf+0x350>
    1eb4:	83 2f       	mov	r24, r19
    1eb6:	86 78       	andi	r24, 0x86	; 134
    1eb8:	59 f0       	breq	.+22     	; 0x1ed0 <vfprintf+0x354>
    1eba:	31 ff       	sbrs	r19, 1
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <vfprintf+0x346>
    1ebe:	8b e2       	ldi	r24, 0x2B	; 43
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <vfprintf+0x348>
    1ec2:	80 e2       	ldi	r24, 0x20	; 32
    1ec4:	37 fd       	sbrc	r19, 7
    1ec6:	8d e2       	ldi	r24, 0x2D	; 45
    1ec8:	b7 01       	movw	r22, r14
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1ed0:	a5 14       	cp	r10, r5
    1ed2:	38 f4       	brcc	.+14     	; 0x1ee2 <vfprintf+0x366>
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	80 e3       	ldi	r24, 0x30	; 48
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1ede:	5a 94       	dec	r5
    1ee0:	f7 cf       	rjmp	.-18     	; 0x1ed0 <vfprintf+0x354>
    1ee2:	aa 94       	dec	r10
    1ee4:	f4 01       	movw	r30, r8
    1ee6:	ea 0d       	add	r30, r10
    1ee8:	f1 1d       	adc	r31, r1
    1eea:	80 81       	ld	r24, Z
    1eec:	b7 01       	movw	r22, r14
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1ef4:	a1 10       	cpse	r10, r1
    1ef6:	f5 cf       	rjmp	.-22     	; 0x1ee2 <vfprintf+0x366>
    1ef8:	33 20       	and	r3, r3
    1efa:	09 f4       	brne	.+2      	; 0x1efe <vfprintf+0x382>
    1efc:	51 ce       	rjmp	.-862    	; 0x1ba0 <vfprintf+0x24>
    1efe:	b7 01       	movw	r22, r14
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1f08:	3a 94       	dec	r3
    1f0a:	f6 cf       	rjmp	.-20     	; 0x1ef8 <vfprintf+0x37c>
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	86 81       	ldd	r24, Z+6	; 0x06
    1f10:	97 81       	ldd	r25, Z+7	; 0x07
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <vfprintf+0x39c>
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	9f ef       	ldi	r25, 0xFF	; 255
    1f18:	2c 96       	adiw	r28, 0x0c	; 12
    1f1a:	e2 e1       	ldi	r30, 0x12	; 18
    1f1c:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__epilogue_restores__>

00001f20 <strnlen_P>:
    1f20:	fc 01       	movw	r30, r24
    1f22:	05 90       	lpm	r0, Z+
    1f24:	61 50       	subi	r22, 0x01	; 1
    1f26:	70 40       	sbci	r23, 0x00	; 0
    1f28:	01 10       	cpse	r0, r1
    1f2a:	d8 f7       	brcc	.-10     	; 0x1f22 <strnlen_P+0x2>
    1f2c:	80 95       	com	r24
    1f2e:	90 95       	com	r25
    1f30:	8e 0f       	add	r24, r30
    1f32:	9f 1f       	adc	r25, r31
    1f34:	08 95       	ret

00001f36 <strnlen>:
    1f36:	fc 01       	movw	r30, r24
    1f38:	61 50       	subi	r22, 0x01	; 1
    1f3a:	70 40       	sbci	r23, 0x00	; 0
    1f3c:	01 90       	ld	r0, Z+
    1f3e:	01 10       	cpse	r0, r1
    1f40:	d8 f7       	brcc	.-10     	; 0x1f38 <strnlen+0x2>
    1f42:	80 95       	com	r24
    1f44:	90 95       	com	r25
    1f46:	8e 0f       	add	r24, r30
    1f48:	9f 1f       	adc	r25, r31
    1f4a:	08 95       	ret

00001f4c <fputc>:
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	fb 01       	movw	r30, r22
    1f56:	23 81       	ldd	r18, Z+3	; 0x03
    1f58:	21 fd       	sbrc	r18, 1
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <fputc+0x16>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f ef       	ldi	r25, 0xFF	; 255
    1f60:	28 c0       	rjmp	.+80     	; 0x1fb2 <fputc+0x66>
    1f62:	22 ff       	sbrs	r18, 2
    1f64:	16 c0       	rjmp	.+44     	; 0x1f92 <fputc+0x46>
    1f66:	46 81       	ldd	r20, Z+6	; 0x06
    1f68:	57 81       	ldd	r21, Z+7	; 0x07
    1f6a:	24 81       	ldd	r18, Z+4	; 0x04
    1f6c:	35 81       	ldd	r19, Z+5	; 0x05
    1f6e:	42 17       	cp	r20, r18
    1f70:	53 07       	cpc	r21, r19
    1f72:	44 f4       	brge	.+16     	; 0x1f84 <fputc+0x38>
    1f74:	a0 81       	ld	r26, Z
    1f76:	b1 81       	ldd	r27, Z+1	; 0x01
    1f78:	9d 01       	movw	r18, r26
    1f7a:	2f 5f       	subi	r18, 0xFF	; 255
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	31 83       	std	Z+1, r19	; 0x01
    1f80:	20 83       	st	Z, r18
    1f82:	8c 93       	st	X, r24
    1f84:	26 81       	ldd	r18, Z+6	; 0x06
    1f86:	37 81       	ldd	r19, Z+7	; 0x07
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	37 83       	std	Z+7, r19	; 0x07
    1f8e:	26 83       	std	Z+6, r18	; 0x06
    1f90:	10 c0       	rjmp	.+32     	; 0x1fb2 <fputc+0x66>
    1f92:	eb 01       	movw	r28, r22
    1f94:	09 2f       	mov	r16, r25
    1f96:	18 2f       	mov	r17, r24
    1f98:	00 84       	ldd	r0, Z+8	; 0x08
    1f9a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	09 95       	icall
    1fa0:	89 2b       	or	r24, r25
    1fa2:	e1 f6       	brne	.-72     	; 0x1f5c <fputc+0x10>
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	9f 83       	std	Y+7, r25	; 0x07
    1fac:	8e 83       	std	Y+6, r24	; 0x06
    1fae:	81 2f       	mov	r24, r17
    1fb0:	90 2f       	mov	r25, r16
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret

00001fbc <__ultoa_invert>:
    1fbc:	fa 01       	movw	r30, r20
    1fbe:	aa 27       	eor	r26, r26
    1fc0:	28 30       	cpi	r18, 0x08	; 8
    1fc2:	51 f1       	breq	.+84     	; 0x2018 <__ultoa_invert+0x5c>
    1fc4:	20 31       	cpi	r18, 0x10	; 16
    1fc6:	81 f1       	breq	.+96     	; 0x2028 <__ultoa_invert+0x6c>
    1fc8:	e8 94       	clt
    1fca:	6f 93       	push	r22
    1fcc:	6e 7f       	andi	r22, 0xFE	; 254
    1fce:	6e 5f       	subi	r22, 0xFE	; 254
    1fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd6:	af 4f       	sbci	r26, 0xFF	; 255
    1fd8:	b1 e0       	ldi	r27, 0x01	; 1
    1fda:	3e d0       	rcall	.+124    	; 0x2058 <__ultoa_invert+0x9c>
    1fdc:	b4 e0       	ldi	r27, 0x04	; 4
    1fde:	3c d0       	rcall	.+120    	; 0x2058 <__ultoa_invert+0x9c>
    1fe0:	67 0f       	add	r22, r23
    1fe2:	78 1f       	adc	r23, r24
    1fe4:	89 1f       	adc	r24, r25
    1fe6:	9a 1f       	adc	r25, r26
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	68 0f       	add	r22, r24
    1fec:	79 1f       	adc	r23, r25
    1fee:	8a 1f       	adc	r24, r26
    1ff0:	91 1d       	adc	r25, r1
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	6a 0f       	add	r22, r26
    1ff6:	71 1d       	adc	r23, r1
    1ff8:	81 1d       	adc	r24, r1
    1ffa:	91 1d       	adc	r25, r1
    1ffc:	a1 1d       	adc	r26, r1
    1ffe:	20 d0       	rcall	.+64     	; 0x2040 <__ultoa_invert+0x84>
    2000:	09 f4       	brne	.+2      	; 0x2004 <__ultoa_invert+0x48>
    2002:	68 94       	set
    2004:	3f 91       	pop	r19
    2006:	2a e0       	ldi	r18, 0x0A	; 10
    2008:	26 9f       	mul	r18, r22
    200a:	11 24       	eor	r1, r1
    200c:	30 19       	sub	r19, r0
    200e:	30 5d       	subi	r19, 0xD0	; 208
    2010:	31 93       	st	Z+, r19
    2012:	de f6       	brtc	.-74     	; 0x1fca <__ultoa_invert+0xe>
    2014:	cf 01       	movw	r24, r30
    2016:	08 95       	ret
    2018:	46 2f       	mov	r20, r22
    201a:	47 70       	andi	r20, 0x07	; 7
    201c:	40 5d       	subi	r20, 0xD0	; 208
    201e:	41 93       	st	Z+, r20
    2020:	b3 e0       	ldi	r27, 0x03	; 3
    2022:	0f d0       	rcall	.+30     	; 0x2042 <__ultoa_invert+0x86>
    2024:	c9 f7       	brne	.-14     	; 0x2018 <__ultoa_invert+0x5c>
    2026:	f6 cf       	rjmp	.-20     	; 0x2014 <__ultoa_invert+0x58>
    2028:	46 2f       	mov	r20, r22
    202a:	4f 70       	andi	r20, 0x0F	; 15
    202c:	40 5d       	subi	r20, 0xD0	; 208
    202e:	4a 33       	cpi	r20, 0x3A	; 58
    2030:	18 f0       	brcs	.+6      	; 0x2038 <__ultoa_invert+0x7c>
    2032:	49 5d       	subi	r20, 0xD9	; 217
    2034:	31 fd       	sbrc	r19, 1
    2036:	40 52       	subi	r20, 0x20	; 32
    2038:	41 93       	st	Z+, r20
    203a:	02 d0       	rcall	.+4      	; 0x2040 <__ultoa_invert+0x84>
    203c:	a9 f7       	brne	.-22     	; 0x2028 <__ultoa_invert+0x6c>
    203e:	ea cf       	rjmp	.-44     	; 0x2014 <__ultoa_invert+0x58>
    2040:	b4 e0       	ldi	r27, 0x04	; 4
    2042:	a6 95       	lsr	r26
    2044:	97 95       	ror	r25
    2046:	87 95       	ror	r24
    2048:	77 95       	ror	r23
    204a:	67 95       	ror	r22
    204c:	ba 95       	dec	r27
    204e:	c9 f7       	brne	.-14     	; 0x2042 <__ultoa_invert+0x86>
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	61 05       	cpc	r22, r1
    2054:	71 05       	cpc	r23, r1
    2056:	08 95       	ret
    2058:	9b 01       	movw	r18, r22
    205a:	ac 01       	movw	r20, r24
    205c:	0a 2e       	mov	r0, r26
    205e:	06 94       	lsr	r0
    2060:	57 95       	ror	r21
    2062:	47 95       	ror	r20
    2064:	37 95       	ror	r19
    2066:	27 95       	ror	r18
    2068:	ba 95       	dec	r27
    206a:	c9 f7       	brne	.-14     	; 0x205e <__ultoa_invert+0xa2>
    206c:	62 0f       	add	r22, r18
    206e:	73 1f       	adc	r23, r19
    2070:	84 1f       	adc	r24, r20
    2072:	95 1f       	adc	r25, r21
    2074:	a0 1d       	adc	r26, r0
    2076:	08 95       	ret

00002078 <eeprom_read_byte>:
    2078:	f9 99       	sbic	0x1f, 1	; 31
    207a:	fe cf       	rjmp	.-4      	; 0x2078 <eeprom_read_byte>
    207c:	92 bd       	out	0x22, r25	; 34
    207e:	81 bd       	out	0x21, r24	; 33
    2080:	f8 9a       	sbi	0x1f, 0	; 31
    2082:	99 27       	eor	r25, r25
    2084:	80 b5       	in	r24, 0x20	; 32
    2086:	08 95       	ret

00002088 <eeprom_write_byte>:
    2088:	26 2f       	mov	r18, r22

0000208a <eeprom_write_r18>:
    208a:	f9 99       	sbic	0x1f, 1	; 31
    208c:	fe cf       	rjmp	.-4      	; 0x208a <eeprom_write_r18>
    208e:	1f ba       	out	0x1f, r1	; 31
    2090:	92 bd       	out	0x22, r25	; 34
    2092:	81 bd       	out	0x21, r24	; 33
    2094:	20 bd       	out	0x20, r18	; 32
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	fa 9a       	sbi	0x1f, 2	; 31
    209c:	f9 9a       	sbi	0x1f, 1	; 31
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	08 95       	ret

000020a4 <__divmodsi4>:
    20a4:	05 2e       	mov	r0, r21
    20a6:	97 fb       	bst	r25, 7
    20a8:	1e f4       	brtc	.+6      	; 0x20b0 <__divmodsi4+0xc>
    20aa:	00 94       	com	r0
    20ac:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__negsi2>
    20b0:	57 fd       	sbrc	r21, 7
    20b2:	07 d0       	rcall	.+14     	; 0x20c2 <__divmodsi4_neg2>
    20b4:	0e 94 bb 10 	call	0x2176	; 0x2176 <__udivmodsi4>
    20b8:	07 fc       	sbrc	r0, 7
    20ba:	03 d0       	rcall	.+6      	; 0x20c2 <__divmodsi4_neg2>
    20bc:	4e f4       	brtc	.+18     	; 0x20d0 <__divmodsi4_exit>
    20be:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__negsi2>

000020c2 <__divmodsi4_neg2>:
    20c2:	50 95       	com	r21
    20c4:	40 95       	com	r20
    20c6:	30 95       	com	r19
    20c8:	21 95       	neg	r18
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	4f 4f       	sbci	r20, 0xFF	; 255
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255

000020d0 <__divmodsi4_exit>:
    20d0:	08 95       	ret

000020d2 <__negsi2>:
    20d2:	90 95       	com	r25
    20d4:	80 95       	com	r24
    20d6:	70 95       	com	r23
    20d8:	61 95       	neg	r22
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	8f 4f       	sbci	r24, 0xFF	; 255
    20de:	9f 4f       	sbci	r25, 0xFF	; 255
    20e0:	08 95       	ret

000020e2 <__muluhisi3>:
    20e2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__umulhisi3>
    20e6:	a5 9f       	mul	r26, r21
    20e8:	90 0d       	add	r25, r0
    20ea:	b4 9f       	mul	r27, r20
    20ec:	90 0d       	add	r25, r0
    20ee:	a4 9f       	mul	r26, r20
    20f0:	80 0d       	add	r24, r0
    20f2:	91 1d       	adc	r25, r1
    20f4:	11 24       	eor	r1, r1
    20f6:	08 95       	ret

000020f8 <__mulshisi3>:
    20f8:	b7 ff       	sbrs	r27, 7
    20fa:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__muluhisi3>

000020fe <__mulohisi3>:
    20fe:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__muluhisi3>
    2102:	82 1b       	sub	r24, r18
    2104:	93 0b       	sbc	r25, r19
    2106:	08 95       	ret

00002108 <__prologue_saves__>:
    2108:	2f 92       	push	r2
    210a:	3f 92       	push	r3
    210c:	4f 92       	push	r4
    210e:	5f 92       	push	r5
    2110:	6f 92       	push	r6
    2112:	7f 92       	push	r7
    2114:	8f 92       	push	r8
    2116:	9f 92       	push	r9
    2118:	af 92       	push	r10
    211a:	bf 92       	push	r11
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	ca 1b       	sub	r28, r26
    2132:	db 0b       	sbc	r29, r27
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	09 94       	ijmp

00002140 <__epilogue_restores__>:
    2140:	2a 88       	ldd	r2, Y+18	; 0x12
    2142:	39 88       	ldd	r3, Y+17	; 0x11
    2144:	48 88       	ldd	r4, Y+16	; 0x10
    2146:	5f 84       	ldd	r5, Y+15	; 0x0f
    2148:	6e 84       	ldd	r6, Y+14	; 0x0e
    214a:	7d 84       	ldd	r7, Y+13	; 0x0d
    214c:	8c 84       	ldd	r8, Y+12	; 0x0c
    214e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2150:	aa 84       	ldd	r10, Y+10	; 0x0a
    2152:	b9 84       	ldd	r11, Y+9	; 0x09
    2154:	c8 84       	ldd	r12, Y+8	; 0x08
    2156:	df 80       	ldd	r13, Y+7	; 0x07
    2158:	ee 80       	ldd	r14, Y+6	; 0x06
    215a:	fd 80       	ldd	r15, Y+5	; 0x05
    215c:	0c 81       	ldd	r16, Y+4	; 0x04
    215e:	1b 81       	ldd	r17, Y+3	; 0x03
    2160:	aa 81       	ldd	r26, Y+2	; 0x02
    2162:	b9 81       	ldd	r27, Y+1	; 0x01
    2164:	ce 0f       	add	r28, r30
    2166:	d1 1d       	adc	r29, r1
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	ed 01       	movw	r28, r26
    2174:	08 95       	ret

00002176 <__udivmodsi4>:
    2176:	a1 e2       	ldi	r26, 0x21	; 33
    2178:	1a 2e       	mov	r1, r26
    217a:	aa 1b       	sub	r26, r26
    217c:	bb 1b       	sub	r27, r27
    217e:	fd 01       	movw	r30, r26
    2180:	0d c0       	rjmp	.+26     	; 0x219c <__udivmodsi4_ep>

00002182 <__udivmodsi4_loop>:
    2182:	aa 1f       	adc	r26, r26
    2184:	bb 1f       	adc	r27, r27
    2186:	ee 1f       	adc	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	a2 17       	cp	r26, r18
    218c:	b3 07       	cpc	r27, r19
    218e:	e4 07       	cpc	r30, r20
    2190:	f5 07       	cpc	r31, r21
    2192:	20 f0       	brcs	.+8      	; 0x219c <__udivmodsi4_ep>
    2194:	a2 1b       	sub	r26, r18
    2196:	b3 0b       	sbc	r27, r19
    2198:	e4 0b       	sbc	r30, r20
    219a:	f5 0b       	sbc	r31, r21

0000219c <__udivmodsi4_ep>:
    219c:	66 1f       	adc	r22, r22
    219e:	77 1f       	adc	r23, r23
    21a0:	88 1f       	adc	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	1a 94       	dec	r1
    21a6:	69 f7       	brne	.-38     	; 0x2182 <__udivmodsi4_loop>
    21a8:	60 95       	com	r22
    21aa:	70 95       	com	r23
    21ac:	80 95       	com	r24
    21ae:	90 95       	com	r25
    21b0:	9b 01       	movw	r18, r22
    21b2:	ac 01       	movw	r20, r24
    21b4:	bd 01       	movw	r22, r26
    21b6:	cf 01       	movw	r24, r30
    21b8:	08 95       	ret

000021ba <_exit>:
    21ba:	f8 94       	cli

000021bc <__stop_program>:
    21bc:	ff cf       	rjmp	.-2      	; 0x21bc <__stop_program>
