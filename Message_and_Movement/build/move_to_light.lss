
build/move_to_light.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	96 02       	muls	r25, r22
      6a:	12 03       	mulsu	r17, r18
      6c:	6a 02       	muls	r22, r26
      6e:	61 02       	muls	r22, r17
      70:	67 02       	muls	r22, r23
      72:	f4 02       	muls	r31, r20
      74:	e9 02       	muls	r30, r25
      76:	74 09       	sbc	r23, r4
      78:	51 08       	sbc	r5, r1
      7a:	51 08       	sbc	r5, r1
      7c:	71 09       	sbc	r23, r1
      7e:	7d 09       	sbc	r23, r13
      80:	6d 09       	sbc	r22, r13
      82:	84 09       	sbc	r24, r4
      84:	80 09       	sbc	r24, r0
      86:	88 09       	sbc	r24, r8
      88:	40 09       	sbc	r20, r0
      8a:	12 09       	sbc	r17, r2

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee e4       	ldi	r30, 0x4E	; 78
      b8:	f1 e2       	ldi	r31, 0x21	; 33
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 32       	cpi	r26, 0x2E	; 46
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e2       	ldi	r26, 0x2E	; 46
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 39       	cpi	r26, 0x9A	; 154
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <main>
      da:	0c 94 a5 10 	jmp	0x214a	; 0x214a <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
      f4:	80 91 30 01 	lds	r24, 0x0130
      f8:	90 91 31 01 	lds	r25, 0x0131
      fc:	02 97       	sbiw	r24, 0x02	; 2
      fe:	69 f0       	breq	.+26     	; 0x11a <setup+0x26>
    {
        current_motion = new_motion;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 31 01 	sts	0x0131, r25
     108:	80 93 30 01 	sts	0x0130, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     10c:	0e 94 af 03 	call	0x75e	; 0x75e <spinup_motors>
            set_motors(kilo_turn_left, 0);
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	80 91 93 01 	lds	r24, 0x0193
     116:	0c 94 aa 03 	jmp	0x754	; 0x754 <set_motors>
     11a:	08 95       	ret

0000011c <loop>:
    // This ensures that the robot starts moving.
    set_motion(LEFT);
}

void loop()
{
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
    printf("light intensity: %d\n", get_ambientlight());
     124:	0e 94 bf 03 	call	0x77e	; 0x77e <get_ambientlight>
     128:	9f 93       	push	r25
     12a:	8f 93       	push	r24
     12c:	89 e1       	ldi	r24, 0x19	; 25
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	9f 93       	push	r25
     132:	8f 93       	push	r24
     134:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <printf>
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
void sample_light()
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
     140:	c0 e0       	ldi	r28, 0x00	; 0
     142:	d0 e0       	ldi	r29, 0x00	; 0
    int sum = 0;
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	10 e0       	ldi	r17, 0x00	; 0


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     148:	0e 94 bf 03 	call	0x77e	; 0x77e <get_ambientlight>
        
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
     14c:	8f 3f       	cpi	r24, 0xFF	; 255
     14e:	2f ef       	ldi	r18, 0xFF	; 255
     150:	92 07       	cpc	r25, r18
     152:	19 f0       	breq	.+6      	; 0x15a <loop+0x3e>
        {
            sum = sum + sample;
     154:	08 0f       	add	r16, r24
     156:	19 1f       	adc	r17, r25
            number_of_samples = number_of_samples + 1;
     158:	21 96       	adiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int sum = 0;


    while (number_of_samples < 300)
     15a:	cc 32       	cpi	r28, 0x2C	; 44
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	d8 07       	cpc	r29, r24
     160:	9c f3       	brlt	.-26     	; 0x148 <loop+0x2c>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    current_light = sum / number_of_samples;
     162:	c8 01       	movw	r24, r16
     164:	be 01       	movw	r22, r28
     166:	0e 94 c7 0a 	call	0x158e	; 0x158e <__divmodhi4>
     16a:	70 93 2f 01 	sts	0x012F, r23
     16e:	60 93 2e 01 	sts	0x012E, r22

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     172:	80 91 30 01 	lds	r24, 0x0130
     176:	90 91 31 01 	lds	r25, 0x0131
     17a:	03 97       	sbiw	r24, 0x03	; 3
     17c:	89 f0       	breq	.+34     	; 0x1a0 <loop+0x84>
    {
        current_motion = new_motion;
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	90 93 31 01 	sts	0x0131, r25
     186:	80 93 30 01 	sts	0x0130, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     18a:	0e 94 af 03 	call	0x75e	; 0x75e <spinup_motors>
            set_motors(0, kilo_turn_right);
     18e:	60 91 7f 01 	lds	r22, 0x017F
     192:	80 e0       	ldi	r24, 0x00	; 0
    }
    else if (current_light > THRESH_HI)
    {
        set_motion(LEFT);
    }
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
            set_motors(0, kilo_turn_right);
     19c:	0c 94 aa 03 	jmp	0x754	; 0x754 <set_motors>
    }
    else if (current_light > THRESH_HI)
    {
        set_motion(LEFT);
    }
}
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     1aa:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     1ac:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     1ae:	8c e0       	ldi	r24, 0x0C	; 12
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	90 93 c5 00 	sts	0x00C5, r25
     1b6:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     1ba:	e0 ec       	ldi	r30, 0xC0	; 192
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	8d 7f       	andi	r24, 0xFD	; 253
     1c2:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     1c4:	e2 ec       	ldi	r30, 0xC2	; 194
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	86 60       	ori	r24, 0x06	; 6
     1cc:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     1ce:	e1 ec       	ldi	r30, 0xC1	; 193
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	88 60       	ori	r24, 0x08	; 8
     1d6:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	90 93 97 01 	sts	0x0197, r25
     1e0:	80 93 96 01 	sts	0x0196, r24
    sei();
     1e4:	78 94       	sei
     1e6:	08 95       	ret

000001e8 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1e8:	20 91 30 01 	lds	r18, 0x0130
     1ec:	30 91 31 01 	lds	r19, 0x0131
     1f0:	28 17       	cp	r18, r24
     1f2:	39 07       	cpc	r19, r25
     1f4:	71 f0       	breq	.+28     	; 0x212 <set_motion+0x2a>
    {
        current_motion = new_motion;
     1f6:	90 93 31 01 	sts	0x0131, r25
     1fa:	80 93 30 01 	sts	0x0130, r24
        
        if (current_motion == STOP)
     1fe:	00 97       	sbiw	r24, 0x00	; 0
     200:	81 f0       	breq	.+32     	; 0x222 <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	89 f0       	breq	.+34     	; 0x22a <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     208:	82 30       	cpi	r24, 0x02	; 2
     20a:	91 05       	cpc	r25, r1
     20c:	b1 f0       	breq	.+44     	; 0x23a <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     20e:	03 97       	sbiw	r24, 0x03	; 3
     210:	09 f0       	breq	.+2      	; 0x214 <set_motion+0x2c>
     212:	08 95       	ret
        {
            spinup_motors();
     214:	0e 94 af 03 	call	0x75e	; 0x75e <spinup_motors>
            set_motors(0, kilo_turn_right);
     218:	60 91 7f 01 	lds	r22, 0x017F
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0c 94 aa 03 	jmp	0x754	; 0x754 <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0c 94 aa 03 	jmp	0x754	; 0x754 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     22a:	0e 94 af 03 	call	0x75e	; 0x75e <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     22e:	60 91 92 01 	lds	r22, 0x0192
     232:	80 91 91 01 	lds	r24, 0x0191
     236:	0c 94 aa 03 	jmp	0x754	; 0x754 <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     23a:	0e 94 af 03 	call	0x75e	; 0x75e <spinup_motors>
            set_motors(kilo_turn_left, 0);
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	80 91 93 01 	lds	r24, 0x0193
     244:	0c 94 aa 03 	jmp	0x754	; 0x754 <set_motors>

00000248 <sample_light>:
    }
}

// Function to sample light.
void sample_light()
{
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int sum = 0;
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	10 e0       	ldi	r17, 0x00	; 0
void sample_light()
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    
    int number_of_samples = 0;
     254:	c0 e0       	ldi	r28, 0x00	; 0
     256:	d0 e0       	ldi	r29, 0x00	; 0
    int sum = 0;


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     258:	0e 94 bf 03 	call	0x77e	; 0x77e <get_ambientlight>
        
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
     25c:	8f 3f       	cpi	r24, 0xFF	; 255
     25e:	2f ef       	ldi	r18, 0xFF	; 255
     260:	92 07       	cpc	r25, r18
     262:	19 f0       	breq	.+6      	; 0x26a <sample_light+0x22>
        {
            sum = sum + sample;
     264:	08 0f       	add	r16, r24
     266:	19 1f       	adc	r17, r25
            number_of_samples = number_of_samples + 1;
     268:	21 96       	adiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int sum = 0;


    while (number_of_samples < 300)
     26a:	cc 32       	cpi	r28, 0x2C	; 44
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	d8 07       	cpc	r29, r24
     270:	9c f3       	brlt	.-26     	; 0x258 <sample_light+0x10>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    current_light = sum / number_of_samples;
     272:	c8 01       	movw	r24, r16
     274:	be 01       	movw	r22, r28
     276:	0e 94 c7 0a 	call	0x158e	; 0x158e <__divmodhi4>
     27a:	70 93 2f 01 	sts	0x012F, r23
     27e:	60 93 2e 01 	sts	0x012E, r22
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     28c:	08 95       	ret

0000028e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	08 95       	ret

00000294 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     294:	08 95       	ret

00000296 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
    cli();
     2a4:	f8 94       	cli

    ports_off();
     2a6:	14 b8       	out	0x04, r1	; 4
     2a8:	17 b8       	out	0x07, r1	; 7
     2aa:	1a b8       	out	0x0a, r1	; 10
     2ac:	15 b8       	out	0x05, r1	; 5
     2ae:	18 b8       	out	0x08, r1	; 8
     2b0:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2b2:	52 9a       	sbi	0x0a, 2	; 10
     2b4:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2b6:	14 bc       	out	0x24, r1	; 36
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	85 bd       	out	0x25, r24	; 37
     2bc:	8f ef       	ldi	r24, 0xFF	; 255
     2be:	87 bd       	out	0x27, r24	; 39
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     2c6:	10 92 80 00 	sts	0x0080, r1
     2ca:	10 92 81 00 	sts	0x0081, r1
     2ce:	2f e8       	ldi	r18, 0x8F	; 143
     2d0:	3b e0       	ldi	r19, 0x0B	; 11
     2d2:	30 93 89 00 	sts	0x0089, r19
     2d6:	20 93 88 00 	sts	0x0088, r18
     2da:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     2de:	53 98       	cbi	0x0a, 3	; 10
     2e0:	23 98       	cbi	0x04, 3	; 4
     2e2:	91 ea       	ldi	r25, 0xA1	; 161
     2e4:	90 93 b0 00 	sts	0x00B0, r25
     2e8:	80 93 b1 00 	sts	0x00B1, r24
     2ec:	10 92 b4 00 	sts	0x00B4, r1
     2f0:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     2f4:	8b e0       	ldi	r24, 0x0B	; 11
     2f6:	80 bf       	out	0x30, r24	; 48
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     2fe:	86 e0       	ldi	r24, 0x06	; 6
     300:	80 93 7c 00 	sts	0x007C, r24
     304:	83 e8       	ldi	r24, 0x83	; 131
     306:	80 93 7a 00 	sts	0x007A, r24
     30a:	80 91 7a 00 	lds	r24, 0x007A
     30e:	80 64       	ori	r24, 0x40	; 64
     310:	80 93 7a 00 	sts	0x007A, r24
     314:	80 91 7a 00 	lds	r24, 0x007A
     318:	86 fd       	sbrc	r24, 6
     31a:	fc cf       	rjmp	.-8      	; 0x314 <kilo_init+0x7e>
    adc_trigger_high_gain();
     31c:	10 92 7c 00 	sts	0x007C, r1
     320:	83 ea       	ldi	r24, 0xA3	; 163
     322:	80 93 7a 00 	sts	0x007A, r24
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
    if (osccal != 0xFF)
     334:	8f 3f       	cpi	r24, 0xFF	; 255
     336:	11 f0       	breq	.+4      	; 0x33c <kilo_init+0xa6>
        OSCCAL = osccal;
     338:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     33c:	10 92 5d 01 	sts	0x015D, r1
    rx_leadingbit = 1;
     340:	c1 e0       	ldi	r28, 0x01	; 1
     342:	c0 93 36 01 	sts	0x0136, r28
    rx_leadingbyte = 1;
     346:	c0 93 7a 01 	sts	0x017A, r28
    rx_byteindex = 0;
     34a:	10 92 54 01 	sts	0x0154, r1
    rx_bytevalue = 0;
     34e:	10 92 8e 01 	sts	0x018E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     352:	80 e9       	ldi	r24, 0x90	; 144
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     35a:	80 93 53 01 	sts	0x0153, r24
    if (tx_mask & ~TX_MASK_MAX)
     35e:	80 91 53 01 	lds	r24, 0x0153
     362:	88 73       	andi	r24, 0x38	; 56
     364:	11 f0       	breq	.+4      	; 0x36a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     366:	c0 93 53 01 	sts	0x0153, r28
    tx_clock = 0;
     36a:	10 92 7e 01 	sts	0x017E, r1
     36e:	10 92 7d 01 	sts	0x017D, r1
    tx_increment = 255;
     372:	8f ef       	ldi	r24, 0xFF	; 255
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	90 93 7c 01 	sts	0x017C, r25
     37a:	80 93 7b 01 	sts	0x017B, r24
    kilo_ticks = 0;
     37e:	10 92 59 01 	sts	0x0159, r1
     382:	10 92 5a 01 	sts	0x015A, r1
     386:	10 92 5b 01 	sts	0x015B, r1
     38a:	10 92 5c 01 	sts	0x015C, r1
    kilo_state = IDLE;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 35 01 	sts	0x0135, r24
    kilo_tx_period = 3906;
     394:	82 e4       	ldi	r24, 0x42	; 66
     396:	9f e0       	ldi	r25, 0x0F	; 15
     398:	90 93 8d 01 	sts	0x018D, r25
     39c:	80 93 8c 01 	sts	0x018C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3a0:	80 eb       	ldi	r24, 0xB0	; 176
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     3a8:	c8 2f       	mov	r28, r24
     3aa:	81 eb       	ldi	r24, 0xB1	; 177
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     3b2:	2c 2f       	mov	r18, r28
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	38 2b       	or	r19, r24
     3b8:	30 93 90 01 	sts	0x0190, r19
     3bc:	20 93 8f 01 	sts	0x018F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3c0:	85 e0       	ldi	r24, 0x05	; 5
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     3c8:	80 93 93 01 	sts	0x0193, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3cc:	89 e0       	ldi	r24, 0x09	; 9
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     3d4:	80 93 7f 01 	sts	0x017F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     3d8:	8c e0       	ldi	r24, 0x0C	; 12
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     3e0:	80 93 91 01 	sts	0x0191, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     3e4:	84 e1       	ldi	r24, 0x14	; 20
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     3ec:	80 93 92 01 	sts	0x0192, r24
     3f0:	5e e5       	ldi	r21, 0x5E	; 94
     3f2:	e5 2e       	mov	r14, r21
     3f4:	51 e0       	ldi	r21, 0x01	; 1
     3f6:	f5 2e       	mov	r15, r21
     3f8:	07 e3       	ldi	r16, 0x37	; 55
     3fa:	11 e0       	ldi	r17, 0x01	; 1
     3fc:	c0 e2       	ldi	r28, 0x20	; 32
     3fe:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     400:	ce 01       	movw	r24, r28
     402:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     406:	d8 2e       	mov	r13, r24
     408:	ce 01       	movw	r24, r28
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     410:	2d 2d       	mov	r18, r13
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	32 2f       	mov	r19, r18
     416:	22 27       	eor	r18, r18
     418:	28 2b       	or	r18, r24
     41a:	f7 01       	movw	r30, r14
     41c:	21 93       	st	Z+, r18
     41e:	31 93       	st	Z+, r19
     420:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     422:	ce 01       	movw	r24, r28
     424:	c0 96       	adiw	r24, 0x30	; 48
     426:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     42a:	d8 2e       	mov	r13, r24
     42c:	ce 01       	movw	r24, r28
     42e:	c1 96       	adiw	r24, 0x31	; 49
     430:	0e 94 04 10 	call	0x2008	; 0x2008 <eeprom_read_byte>
     434:	2d 2d       	mov	r18, r13
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	32 2f       	mov	r19, r18
     43a:	22 27       	eor	r18, r18
     43c:	28 2b       	or	r18, r24
     43e:	f8 01       	movw	r30, r16
     440:	21 93       	st	Z+, r18
     442:	31 93       	st	Z+, r19
     444:	8f 01       	movw	r16, r30
     446:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     448:	cc 33       	cpi	r28, 0x3C	; 60
     44a:	d1 05       	cpc	r29, r1
     44c:	c9 f6       	brne	.-78     	; 0x400 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     44e:	78 94       	sei
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	08 95       	ret

00000460 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     460:	1f 92       	push	r1
     462:	0f 92       	push	r0
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	0f 92       	push	r0
     468:	11 24       	eor	r1, r1
     46a:	8f 93       	push	r24
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	a8 95       	wdr
     472:	80 91 60 00 	lds	r24, 0x0060
     476:	88 61       	ori	r24, 0x18	; 24
     478:	80 93 60 00 	sts	0x0060, r24
     47c:	10 92 60 00 	sts	0x0060, r1
     480:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     482:	8f 91       	pop	r24
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     48e:	3c 01       	movw	r6, r24
     490:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     492:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     494:	99 24       	eor	r9, r9
     496:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     498:	84 e0       	ldi	r24, 0x04	; 4
     49a:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     49c:	96 e0       	ldi	r25, 0x06	; 6
     49e:	a9 2e       	mov	r10, r25
     4a0:	23 e8       	ldi	r18, 0x83	; 131
     4a2:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     4a4:	38 e1       	ldi	r19, 0x18	; 24
     4a6:	d3 2e       	mov	r13, r19
     4a8:	49 e2       	ldi	r20, 0x29	; 41
     4aa:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     4ac:	90 91 35 01 	lds	r25, 0x0135
     4b0:	e9 2f       	mov	r30, r25
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	e7 30       	cpi	r30, 0x07	; 7
     4b6:	f1 05       	cpc	r31, r1
     4b8:	c8 f7       	brcc	.-14     	; 0x4ac <kilo_start+0x1e>
     4ba:	ec 5c       	subi	r30, 0xCC	; 204
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     4c2:	11 23       	and	r17, r17
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <kilo_start+0x3a>
     4c6:	fc c0       	rjmp	.+504    	; 0x6c0 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     4c8:	c0 92 35 01 	sts	0x0135, r12
     4cc:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     4ce:	fe 01       	movw	r30, r28
     4d0:	09 95       	icall
                break;
     4d2:	ec cf       	rjmp	.-40     	; 0x4ac <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4d4:	80 91 5d 01 	lds	r24, 0x015D
     4d8:	81 11       	cpse	r24, r1
     4da:	eb c0       	rjmp	.+470    	; 0x6b2 <kilo_start+0x224>
        cli();                                    // disable interrupts
     4dc:	f8 94       	cli
        adc_setup_conversion(6);
     4de:	a0 92 7c 00 	sts	0x007C, r10
     4e2:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     4e6:	80 91 7a 00 	lds	r24, 0x007A
     4ea:	80 64       	ori	r24, 0x40	; 64
     4ec:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     4f0:	90 91 7a 00 	lds	r25, 0x007A
     4f4:	96 fd       	sbrc	r25, 6
     4f6:	fc cf       	rjmp	.-8      	; 0x4f0 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     4f8:	80 91 78 00 	lds	r24, 0x0078
     4fc:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     500:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     502:	8b 3a       	cpi	r24, 0xAB	; 171
     504:	e2 e0       	ldi	r30, 0x02	; 2
     506:	9e 07       	cpc	r25, r30
     508:	0c f0       	brlt	.+2      	; 0x50c <kilo_start+0x7e>
     50a:	ed c0       	rjmp	.+474    	; 0x6e6 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     50c:	89 38       	cpi	r24, 0x89	; 137
     50e:	f2 e0       	ldi	r31, 0x02	; 2
     510:	9f 07       	cpc	r25, r31
     512:	0c f0       	brlt	.+2      	; 0x516 <kilo_start+0x88>
     514:	ef c0       	rjmp	.+478    	; 0x6f4 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     516:	87 36       	cpi	r24, 0x67	; 103
     518:	92 40       	sbci	r25, 0x02	; 2
     51a:	0c f4       	brge	.+2      	; 0x51e <kilo_start+0x90>
     51c:	ca c0       	rjmp	.+404    	; 0x6b2 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     51e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     520:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     522:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     524:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     526:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     528:	3c 98       	cbi	0x07, 4	; 7
     52a:	c0 cf       	rjmp	.-128    	; 0x4ac <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     52c:	f8 94       	cli
                acomp_off();
     52e:	80 b7       	in	r24, 0x30	; 48
     530:	87 7f       	andi	r24, 0xF7	; 247
     532:	80 bf       	out	0x30, r24	; 48
                adc_off();
     534:	80 91 7a 00 	lds	r24, 0x007A
     538:	8f 77       	andi	r24, 0x7F	; 127
     53a:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     53e:	14 b8       	out	0x04, r1	; 4
     540:	17 b8       	out	0x07, r1	; 7
     542:	1a b8       	out	0x0a, r1	; 10
     544:	15 b8       	out	0x05, r1	; 5
     546:	18 b8       	out	0x08, r1	; 8
     548:	1b b8       	out	0x0b, r1	; 11
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	a8 95       	wdr
     550:	d0 92 60 00 	sts	0x0060, r13
     554:	0f be       	out	0x3f, r0	; 63
     556:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     55a:	80 91 60 00 	lds	r24, 0x0060
     55e:	80 64       	ori	r24, 0x40	; 64
     560:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     564:	93 b7       	in	r25, 0x33	; 51
     566:	91 7f       	andi	r25, 0xF1	; 241
     568:	94 60       	ori	r25, 0x04	; 4
     56a:	93 bf       	out	0x33, r25	; 51
                cli();
     56c:	f8 94       	cli
                sleep_enable();
     56e:	83 b7       	in	r24, 0x33	; 51
     570:	81 60       	ori	r24, 0x01	; 1
     572:	83 bf       	out	0x33, r24	; 51
                sei();
     574:	78 94       	sei
                sleep_cpu();
     576:	88 95       	sleep
                sleep_disable();
     578:	83 b7       	in	r24, 0x33	; 51
     57a:	8e 7f       	andi	r24, 0xFE	; 254
     57c:	83 bf       	out	0x33, r24	; 51
                sei();
     57e:	78 94       	sei
                rx_busy = 0;
     580:	10 92 5d 01 	sts	0x015D, r1
                ports_on();
     584:	52 9a       	sbi	0x0a, 2	; 10
     586:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     588:	80 91 7a 00 	lds	r24, 0x007A
     58c:	80 68       	ori	r24, 0x80	; 128
     58e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     592:	87 e5       	ldi	r24, 0x57	; 87
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <kilo_start+0x108>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <kilo_start+0x10e>
     59c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     59e:	80 b7       	in	r24, 0x30	; 48
     5a0:	88 61       	ori	r24, 0x18	; 24
     5a2:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5a4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5a6:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5a8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5aa:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5ac:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5ae:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b0:	ef e1       	ldi	r30, 0x1F	; 31
     5b2:	fe e4       	ldi	r31, 0x4E	; 78
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <kilo_start+0x126>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <kilo_start+0x12c>
     5ba:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     5bc:	80 91 5d 01 	lds	r24, 0x015D
     5c0:	81 11       	cpse	r24, r1
     5c2:	81 c0       	rjmp	.+258    	; 0x6c6 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5c4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5c6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5c8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5ca:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5cc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5ce:	3c 98       	cbi	0x07, 4	; 7
     5d0:	6d cf       	rjmp	.-294    	; 0x4ac <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     5d2:	80 91 33 01 	lds	r24, 0x0133
     5d6:	81 11       	cpse	r24, r1
     5d8:	41 c0       	rjmp	.+130    	; 0x65c <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5da:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5de:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     5e2:	10 92 34 01 	sts	0x0134, r1
     5e6:	62 cf       	rjmp	.-316    	; 0x4ac <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     5e8:	48 99       	sbic	0x09, 0	; 9
     5ea:	ec cf       	rjmp	.-40     	; 0x5c4 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5ec:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5ee:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5f0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5f2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5f4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5f6:	3c 98       	cbi	0x07, 4	; 7
     5f8:	8f ec       	ldi	r24, 0xCF	; 207
     5fa:	97 e0       	ldi	r25, 0x07	; 7
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <kilo_start+0x16e>
     600:	00 c0       	rjmp	.+0      	; 0x602 <kilo_start+0x174>
     602:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     604:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     606:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     608:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     60a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     60c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     60e:	3c 98       	cbi	0x07, 4	; 7
     610:	9f ef       	ldi	r25, 0xFF	; 255
     612:	e1 ee       	ldi	r30, 0xE1	; 225
     614:	f4 e0       	ldi	r31, 0x04	; 4
     616:	91 50       	subi	r25, 0x01	; 1
     618:	e0 40       	sbci	r30, 0x00	; 0
     61a:	f0 40       	sbci	r31, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <kilo_start+0x188>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <kilo_start+0x192>
     620:	00 00       	nop
     622:	44 cf       	rjmp	.-376    	; 0x4ac <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     624:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     626:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     628:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     62a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     62c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     62e:	3c 98       	cbi	0x07, 4	; 7
     630:	ef ec       	ldi	r30, 0xCF	; 207
     632:	f7 e0       	ldi	r31, 0x07	; 7
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <kilo_start+0x1a6>
     638:	00 c0       	rjmp	.+0      	; 0x63a <kilo_start+0x1ac>
     63a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     63c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     63e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     640:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     642:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     644:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     646:	3c 98       	cbi	0x07, 4	; 7
     648:	ff ef       	ldi	r31, 0xFF	; 255
     64a:	21 ee       	ldi	r18, 0xE1	; 225
     64c:	84 e0       	ldi	r24, 0x04	; 4
     64e:	f1 50       	subi	r31, 0x01	; 1
     650:	20 40       	sbci	r18, 0x00	; 0
     652:	80 40       	sbci	r24, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <kilo_start+0x1c0>
     656:	00 c0       	rjmp	.+0      	; 0x658 <kilo_start+0x1ca>
     658:	00 00       	nop
     65a:	28 cf       	rjmp	.-432    	; 0x4ac <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     65c:	90 91 33 01 	lds	r25, 0x0133
     660:	80 91 34 01 	lds	r24, 0x0134
     664:	98 17       	cp	r25, r24
     666:	09 f4       	brne	.+2      	; 0x66a <kilo_start+0x1dc>
     668:	21 cf       	rjmp	.-446    	; 0x4ac <kilo_start+0x1e>
                        prev_motion = cur_motion;
     66a:	80 91 33 01 	lds	r24, 0x0133
     66e:	80 93 34 01 	sts	0x0134, r24
                        if (cur_motion == MOVE_LEFT) {
     672:	80 91 33 01 	lds	r24, 0x0133
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	09 f4       	brne	.+2      	; 0x67c <kilo_start+0x1ee>
     67a:	50 c0       	rjmp	.+160    	; 0x71c <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     67c:	80 91 33 01 	lds	r24, 0x0133
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     680:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     684:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	d9 f1       	breq	.+118    	; 0x702 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     68c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     690:	90 92 b4 00 	sts	0x00B4, r9
     694:	8f e2       	ldi	r24, 0x2F	; 47
     696:	95 e7       	ldi	r25, 0x75	; 117
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <kilo_start+0x20a>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <kilo_start+0x210>
     69e:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     6a0:	80 91 92 01 	lds	r24, 0x0192
     6a4:	90 91 91 01 	lds	r25, 0x0191
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a8:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     6ac:	80 93 b4 00 	sts	0x00B4, r24
     6b0:	fd ce       	rjmp	.-518    	; 0x4ac <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6b2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6b4:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6b6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6b8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6ba:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6bc:	3c 98       	cbi	0x07, 4	; 7
     6be:	f6 ce       	rjmp	.-532    	; 0x4ac <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     6c0:	f3 01       	movw	r30, r6
     6c2:	09 95       	icall
     6c4:	01 cf       	rjmp	.-510    	; 0x4c8 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6c6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6c8:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6ca:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6cc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6ce:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6d0:	3c 98       	cbi	0x07, 4	; 7
     6d2:	ff ef       	ldi	r31, 0xFF	; 255
     6d4:	20 e7       	ldi	r18, 0x70	; 112
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	f1 50       	subi	r31, 0x01	; 1
     6da:	20 40       	sbci	r18, 0x00	; 0
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <kilo_start+0x24a>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <kilo_start+0x254>
     6e2:	00 00       	nop
     6e4:	6f cf       	rjmp	.-290    	; 0x5c4 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6e6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6e8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6ea:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6ec:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6ee:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6f0:	3c 98       	cbi	0x07, 4	; 7
     6f2:	dc ce       	rjmp	.-584    	; 0x4ac <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6f4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6f6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6f8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6fa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     6fc:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     6fe:	3c 9a       	sbi	0x07, 4	; 7
     700:	d5 ce       	rjmp	.-598    	; 0x4ac <kilo_start+0x1e>
     702:	ef e2       	ldi	r30, 0x2F	; 47
     704:	f5 e7       	ldi	r31, 0x75	; 117
     706:	31 97       	sbiw	r30, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <kilo_start+0x278>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <kilo_start+0x27e>
     70c:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     70e:	80 91 7f 01 	lds	r24, 0x017F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     712:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     716:	80 93 b4 00 	sts	0x00B4, r24
     71a:	c8 ce       	rjmp	.-624    	; 0x4ac <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     71c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     720:	10 92 b4 00 	sts	0x00B4, r1
     724:	8f e2       	ldi	r24, 0x2F	; 47
     726:	95 e7       	ldi	r25, 0x75	; 117
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <kilo_start+0x29a>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <kilo_start+0x2a0>
     72e:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     730:	80 91 93 01 	lds	r24, 0x0193
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     734:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     738:	10 92 b4 00 	sts	0x00B4, r1
     73c:	b7 ce       	rjmp	.-658    	; 0x4ac <kilo_start+0x1e>

0000073e <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     73e:	07 c0       	rjmp	.+14     	; 0x74e <delay+0x10>
     740:	ef ec       	ldi	r30, 0xCF	; 207
     742:	f7 e0       	ldi	r31, 0x07	; 7
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <delay+0x6>
     748:	00 c0       	rjmp	.+0      	; 0x74a <delay+0xc>
     74a:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     74c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	b9 f7       	brne	.-18     	; 0x740 <delay+0x2>
     752:	08 95       	ret

00000754 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     754:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     758:	60 93 b4 00 	sts	0x00B4, r22
     75c:	08 95       	ret

0000075e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     764:	80 93 b4 00 	sts	0x00B4, r24
     768:	8f e0       	ldi	r24, 0x0F	; 15
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	ef ec       	ldi	r30, 0xCF	; 207
     76e:	f7 e0       	ldi	r31, 0x07	; 7
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <spinup_motors+0x12>
     774:	00 c0       	rjmp	.+0      	; 0x776 <spinup_motors+0x18>
     776:	00 00       	nop
     778:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     77a:	c1 f7       	brne	.-16     	; 0x76c <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     77c:	08 95       	ret

0000077e <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     77e:	80 91 5d 01 	lds	r24, 0x015D
     782:	81 11       	cpse	r24, r1
     784:	1e c0       	rjmp	.+60     	; 0x7c2 <get_ambientlight+0x44>
        cli();
     786:	f8 94       	cli
        adc_setup_conversion(7);
     788:	87 e0       	ldi	r24, 0x07	; 7
     78a:	80 93 7c 00 	sts	0x007C, r24
     78e:	83 e8       	ldi	r24, 0x83	; 131
     790:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     794:	80 91 7a 00 	lds	r24, 0x007A
     798:	80 64       	ori	r24, 0x40	; 64
     79a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     79e:	80 91 7a 00 	lds	r24, 0x007A
     7a2:	86 fd       	sbrc	r24, 6
     7a4:	fc cf       	rjmp	.-8      	; 0x79e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     7a6:	80 91 78 00 	lds	r24, 0x0078
     7aa:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     7ae:	10 92 7c 00 	sts	0x007C, r1
     7b2:	23 ea       	ldi	r18, 0xA3	; 163
     7b4:	20 93 7a 00 	sts	0x007A, r18
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     7be:	78 94       	sei
     7c0:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     7c6:	08 95       	ret

000007c8 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     7c8:	80 91 5d 01 	lds	r24, 0x015D
     7cc:	81 11       	cpse	r24, r1
     7ce:	1e c0       	rjmp	.+60     	; 0x80c <get_temperature+0x44>
        cli();
     7d0:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     7d2:	88 ec       	ldi	r24, 0xC8	; 200
     7d4:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     7d8:	87 e8       	ldi	r24, 0x87	; 135
     7da:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7de:	80 91 7a 00 	lds	r24, 0x007A
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7e8:	80 91 7a 00 	lds	r24, 0x007A
     7ec:	86 fd       	sbrc	r24, 6
     7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     7f0:	80 91 78 00 	lds	r24, 0x0078
     7f4:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     7f8:	10 92 7c 00 	sts	0x007C, r1
     7fc:	23 ea       	ldi	r18, 0xA3	; 163
     7fe:	20 93 7a 00 	sts	0x007A, r18
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     808:	78 94       	sei
     80a:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     810:	08 95       	ret

00000812 <rand_hard>:

uint8_t rand_hard() {
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	e0 e0       	ldi	r30, 0x00	; 0
     81c:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     81e:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     820:	03 ea       	ldi	r16, 0xA3	; 163
     822:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     824:	d6 e0       	ldi	r29, 0x06	; 6
     826:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     828:	a1 e0       	ldi	r26, 0x01	; 1
     82a:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     82c:	60 e8       	ldi	r22, 0x80	; 128
     82e:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     830:	f8 94       	cli
            adc_setup_conversion(6);
     832:	d0 93 7c 00 	sts	0x007C, r29
     836:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     83a:	90 91 7a 00 	lds	r25, 0x007A
     83e:	90 64       	ori	r25, 0x40	; 64
     840:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     844:	90 91 7a 00 	lds	r25, 0x007A
     848:	96 fd       	sbrc	r25, 6
     84a:	fc cf       	rjmp	.-8      	; 0x844 <rand_hard+0x32>
            a = ADCW&0x1;
     84c:	20 91 78 00 	lds	r18, 0x0078
     850:	30 91 79 00 	lds	r19, 0x0079
     854:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     856:	90 91 7a 00 	lds	r25, 0x007A
     85a:	90 64       	ori	r25, 0x40	; 64
     85c:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     860:	90 91 7a 00 	lds	r25, 0x007A
     864:	96 fd       	sbrc	r25, 6
     866:	fc cf       	rjmp	.-8      	; 0x860 <rand_hard+0x4e>
            b = ADCW&0x1;
     868:	40 91 78 00 	lds	r20, 0x0078
     86c:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     870:	10 92 7c 00 	sts	0x007C, r1
     874:	00 93 7a 00 	sts	0x007A, r16
     878:	10 93 7b 00 	sts	0x007B, r17
            sei();
     87c:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     87e:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     880:	24 13       	cpse	r18, r20
     882:	03 c0       	rjmp	.+6      	; 0x88a <rand_hard+0x78>
     884:	61 50       	subi	r22, 0x01	; 1
     886:	71 09       	sbc	r23, r1
     888:	99 f6       	brne	.-90     	; 0x830 <rand_hard+0x1e>
        if (a)
     88a:	22 23       	and	r18, r18
     88c:	39 f0       	breq	.+14     	; 0x89c <rand_hard+0x8a>
            num |= (1<<i);
     88e:	9d 01       	movw	r18, r26
     890:	0e 2e       	mov	r0, r30
     892:	01 c0       	rjmp	.+2      	; 0x896 <rand_hard+0x84>
     894:	22 0f       	add	r18, r18
     896:	0a 94       	dec	r0
     898:	ea f7       	brpl	.-6      	; 0x894 <rand_hard+0x82>
     89a:	82 2b       	or	r24, r18
     89c:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     89e:	e8 30       	cpi	r30, 0x08	; 8
     8a0:	f1 05       	cpc	r31, r1
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <rand_hard+0x94>
     8a4:	c3 cf       	rjmp	.-122    	; 0x82c <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	08 95       	ret

000008b0 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     8b0:	80 91 0e 01 	lds	r24, 0x010E
     8b4:	98 2f       	mov	r25, r24
     8b6:	99 0f       	add	r25, r25
     8b8:	99 0f       	add	r25, r25
     8ba:	99 0f       	add	r25, r25
     8bc:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     8be:	90 91 32 01 	lds	r25, 0x0132
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	29 0f       	add	r18, r25
     8c6:	20 93 32 01 	sts	0x0132, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     8ca:	28 2f       	mov	r18, r24
     8cc:	22 95       	swap	r18
     8ce:	26 95       	lsr	r18
     8d0:	27 70       	andi	r18, 0x07	; 7
     8d2:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     8d4:	96 95       	lsr	r25
     8d6:	96 95       	lsr	r25
     8d8:	89 27       	eor	r24, r25
     8da:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     8de:	08 95       	ret

000008e0 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     8e0:	80 93 0e 01 	sts	0x010E, r24
     8e4:	08 95       	ret

000008e6 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     8e6:	80 91 5d 01 	lds	r24, 0x015D
     8ea:	81 11       	cpse	r24, r1
     8ec:	16 c0       	rjmp	.+44     	; 0x91a <__stack+0x1b>
        cli();                                    // disable interrupts
     8ee:	f8 94       	cli
        adc_setup_conversion(6);
     8f0:	86 e0       	ldi	r24, 0x06	; 6
     8f2:	80 93 7c 00 	sts	0x007C, r24
     8f6:	83 e8       	ldi	r24, 0x83	; 131
     8f8:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8fc:	80 91 7a 00 	lds	r24, 0x007A
     900:	80 64       	ori	r24, 0x40	; 64
     902:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     906:	80 91 7a 00 	lds	r24, 0x007A
     90a:	86 fd       	sbrc	r24, 6
     90c:	fc cf       	rjmp	.-8      	; 0x906 <__stack+0x7>
        voltage = ADCW;                           // store AD result
     90e:	80 91 78 00 	lds	r24, 0x0078
     912:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     916:	78 94       	sei
     918:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     91e:	08 95       	ret

00000920 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     920:	2f 92       	push	r2
     922:	3f 92       	push	r3
     924:	4f 92       	push	r4
     926:	5f 92       	push	r5
     928:	6f 92       	push	r6
     92a:	7f 92       	push	r7
     92c:	8f 92       	push	r8
     92e:	9f 92       	push	r9
     930:	af 92       	push	r10
     932:	bf 92       	push	r11
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	00 d0       	rcall	.+0      	; 0x946 <estimate_distance+0x26>
     946:	00 d0       	rcall	.+0      	; 0x948 <estimate_distance+0x28>
     948:	00 d0       	rcall	.+0      	; 0x94a <estimate_distance+0x2a>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     950:	dc 01       	movw	r26, r24
     952:	12 96       	adiw	r26, 0x02	; 2
     954:	0d 90       	ld	r0, X+
     956:	bc 91       	ld	r27, X
     958:	a0 2d       	mov	r26, r0
     95a:	be 83       	std	Y+6, r27	; 0x06
     95c:	ad 83       	std	Y+5, r26	; 0x05
     95e:	a4 38       	cpi	r26, 0x84	; 132
     960:	e3 e0       	ldi	r30, 0x03	; 3
     962:	be 07       	cpc	r27, r30
     964:	0c f0       	brlt	.+2      	; 0x968 <estimate_distance+0x48>
     966:	c9 c0       	rjmp	.+402    	; 0xafa <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     968:	80 91 37 01 	lds	r24, 0x0137
     96c:	90 91 38 01 	lds	r25, 0x0138
     970:	8a 17       	cp	r24, r26
     972:	9b 07       	cpc	r25, r27
     974:	08 f4       	brcc	.+2      	; 0x978 <estimate_distance+0x58>
     976:	37 c1       	rjmp	.+622    	; 0xbe6 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     978:	00 91 39 01 	lds	r16, 0x0139
     97c:	10 91 3a 01 	lds	r17, 0x013A
     980:	0a 17       	cp	r16, r26
     982:	1b 07       	cpc	r17, r27
     984:	08 f4       	brcc	.+2      	; 0x988 <estimate_distance+0x68>
     986:	2f c2       	rjmp	.+1118   	; 0xde6 <estimate_distance+0x4c6>
     988:	00 91 3b 01 	lds	r16, 0x013B
     98c:	10 91 3c 01 	lds	r17, 0x013C
     990:	0a 17       	cp	r16, r26
     992:	1b 07       	cpc	r17, r27
     994:	08 f4       	brcc	.+2      	; 0x998 <estimate_distance+0x78>
     996:	2f c2       	rjmp	.+1118   	; 0xdf6 <estimate_distance+0x4d6>
     998:	00 91 3d 01 	lds	r16, 0x013D
     99c:	10 91 3e 01 	lds	r17, 0x013E
     9a0:	0a 17       	cp	r16, r26
     9a2:	1b 07       	cpc	r17, r27
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <estimate_distance+0x88>
     9a6:	2f c2       	rjmp	.+1118   	; 0xe06 <estimate_distance+0x4e6>
     9a8:	00 91 3f 01 	lds	r16, 0x013F
     9ac:	10 91 40 01 	lds	r17, 0x0140
     9b0:	0a 17       	cp	r16, r26
     9b2:	1b 07       	cpc	r17, r27
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <estimate_distance+0x98>
     9b6:	2f c2       	rjmp	.+1118   	; 0xe16 <estimate_distance+0x4f6>
     9b8:	00 91 41 01 	lds	r16, 0x0141
     9bc:	10 91 42 01 	lds	r17, 0x0142
     9c0:	0a 17       	cp	r16, r26
     9c2:	1b 07       	cpc	r17, r27
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <estimate_distance+0xa8>
     9c6:	ef c1       	rjmp	.+990    	; 0xda6 <estimate_distance+0x486>
     9c8:	00 91 43 01 	lds	r16, 0x0143
     9cc:	10 91 44 01 	lds	r17, 0x0144
     9d0:	0a 17       	cp	r16, r26
     9d2:	1b 07       	cpc	r17, r27
     9d4:	08 f4       	brcc	.+2      	; 0x9d8 <estimate_distance+0xb8>
     9d6:	27 c2       	rjmp	.+1102   	; 0xe26 <estimate_distance+0x506>
     9d8:	00 91 45 01 	lds	r16, 0x0145
     9dc:	10 91 46 01 	lds	r17, 0x0146
     9e0:	0a 17       	cp	r16, r26
     9e2:	1b 07       	cpc	r17, r27
     9e4:	08 f4       	brcc	.+2      	; 0x9e8 <estimate_distance+0xc8>
     9e6:	27 c2       	rjmp	.+1102   	; 0xe36 <estimate_distance+0x516>
     9e8:	00 91 47 01 	lds	r16, 0x0147
     9ec:	10 91 48 01 	lds	r17, 0x0148
     9f0:	0a 17       	cp	r16, r26
     9f2:	1b 07       	cpc	r17, r27
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <estimate_distance+0xd8>
     9f6:	27 c2       	rjmp	.+1102   	; 0xe46 <estimate_distance+0x526>
     9f8:	00 91 49 01 	lds	r16, 0x0149
     9fc:	10 91 4a 01 	lds	r17, 0x014A
     a00:	0a 17       	cp	r16, r26
     a02:	1b 07       	cpc	r17, r27
     a04:	08 f4       	brcc	.+2      	; 0xa08 <estimate_distance+0xe8>
     a06:	27 c2       	rjmp	.+1102   	; 0xe56 <estimate_distance+0x536>
     a08:	00 91 4b 01 	lds	r16, 0x014B
     a0c:	10 91 4c 01 	lds	r17, 0x014C
     a10:	0a 17       	cp	r16, r26
     a12:	1b 07       	cpc	r17, r27
     a14:	08 f4       	brcc	.+2      	; 0xa18 <estimate_distance+0xf8>
     a16:	27 c2       	rjmp	.+1102   	; 0xe66 <estimate_distance+0x546>
     a18:	00 91 4d 01 	lds	r16, 0x014D
     a1c:	10 91 4e 01 	lds	r17, 0x014E
     a20:	0a 17       	cp	r16, r26
     a22:	1b 07       	cpc	r17, r27
     a24:	08 f4       	brcc	.+2      	; 0xa28 <estimate_distance+0x108>
     a26:	23 c2       	rjmp	.+1094   	; 0xe6e <estimate_distance+0x54e>
     a28:	00 91 4f 01 	lds	r16, 0x014F
     a2c:	10 91 50 01 	lds	r17, 0x0150
     a30:	0a 17       	cp	r16, r26
     a32:	1b 07       	cpc	r17, r27
     a34:	08 f4       	brcc	.+2      	; 0xa38 <estimate_distance+0x118>
     a36:	23 c2       	rjmp	.+1094   	; 0xe7e <estimate_distance+0x55e>
     a38:	00 91 51 01 	lds	r16, 0x0151
     a3c:	10 91 52 01 	lds	r17, 0x0152
     a40:	0a 17       	cp	r16, r26
     a42:	1b 07       	cpc	r17, r27
     a44:	08 f4       	brcc	.+2      	; 0xa48 <estimate_distance+0x128>
     a46:	23 c2       	rjmp	.+1094   	; 0xe8e <estimate_distance+0x56e>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 ed       	ldi	r26, 0xD0	; 208
     a4e:	b0 e4       	ldi	r27, 0x40	; 64
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	ab 83       	std	Y+3, r26	; 0x03
     a56:	bc 83       	std	Y+4, r27	; 0x04
     a58:	4c e0       	ldi	r20, 0x0C	; 12
     a5a:	e4 2e       	mov	r14, r20
     a5c:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     a5e:	f7 01       	movw	r30, r14
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	e9 5c       	subi	r30, 0xC9	; 201
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	80 81       	ld	r24, Z
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	b8 01       	movw	r22, r16
     a6e:	68 1b       	sub	r22, r24
     a70:	79 0b       	sbc	r23, r25
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	0e 94 05 0b 	call	0x160a	; 0x160a <__addsf3>
     a82:	6b 01       	movw	r12, r22
     a84:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a86:	ad 81       	ldd	r26, Y+5	; 0x05
     a88:	be 81       	ldd	r27, Y+6	; 0x06
     a8a:	bd 01       	movw	r22, r26
     a8c:	bb 0f       	add	r27, r27
     a8e:	88 0b       	sbc	r24, r24
     a90:	99 0b       	sbc	r25, r25
     a92:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__floatsisf>
     a96:	4b 01       	movw	r8, r22
     a98:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     a9a:	b8 01       	movw	r22, r16
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     aa4:	2b 01       	movw	r4, r22
     aa6:	3c 01       	movw	r6, r24
     aa8:	29 81       	ldd	r18, Y+1	; 0x01
     aaa:	3a 81       	ldd	r19, Y+2	; 0x02
     aac:	4b 81       	ldd	r20, Y+3	; 0x03
     aae:	5c 81       	ldd	r21, Y+4	; 0x04
     ab0:	c7 01       	movw	r24, r14
     ab2:	b6 01       	movw	r22, r12
     ab4:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c3 01       	movw	r24, r6
     abe:	b2 01       	movw	r22, r4
     ac0:	0e 94 04 0b 	call	0x1608	; 0x1608 <__subsf3>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     ac8:	c5 01       	movw	r24, r10
     aca:	b4 01       	movw	r22, r8
     acc:	0e 94 04 0b 	call	0x1608	; 0x1608 <__subsf3>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e2       	ldi	r20, 0x20	; 32
     ad6:	51 e4       	ldi	r21, 0x41	; 65
     ad8:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
            b=((int)((int)b/(int)slope));
     adc:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fixsfsi>
     ae0:	8b 01       	movw	r16, r22
     ae2:	c7 01       	movw	r24, r14
     ae4:	b6 01       	movw	r22, r12
     ae6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fixsfsi>
     aea:	ab 01       	movw	r20, r22
     aec:	bc 01       	movw	r22, r24
     aee:	c8 01       	movw	r24, r16
     af0:	ba 01       	movw	r22, r20
     af2:	0e 94 c7 0a 	call	0x158e	; 0x158e <__divmodhi4>
            dist_high=b;
     af6:	16 2f       	mov	r17, r22
     af8:	77 c0       	rjmp	.+238    	; 0xbe8 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     afa:	dc 01       	movw	r26, r24
     afc:	cd 90       	ld	r12, X+
     afe:	dc 90       	ld	r13, X
     b00:	80 91 5e 01 	lds	r24, 0x015E
     b04:	90 91 5f 01 	lds	r25, 0x015F
     b08:	8c 15       	cp	r24, r12
     b0a:	9d 05       	cpc	r25, r13
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <estimate_distance+0x1f0>
     b0e:	8c c0       	rjmp	.+280    	; 0xc28 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b10:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b12:	e0 90 60 01 	lds	r14, 0x0160
     b16:	f0 90 61 01 	lds	r15, 0x0161
     b1a:	ec 14       	cp	r14, r12
     b1c:	fd 04       	cpc	r15, r13
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <estimate_distance+0x202>
     b20:	5e c1       	rjmp	.+700    	; 0xdde <estimate_distance+0x4be>
     b22:	e0 90 62 01 	lds	r14, 0x0162
     b26:	f0 90 63 01 	lds	r15, 0x0163
     b2a:	ec 14       	cp	r14, r12
     b2c:	fd 04       	cpc	r15, r13
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <estimate_distance+0x212>
     b30:	5e c1       	rjmp	.+700    	; 0xdee <estimate_distance+0x4ce>
     b32:	e0 90 64 01 	lds	r14, 0x0164
     b36:	f0 90 65 01 	lds	r15, 0x0165
     b3a:	ec 14       	cp	r14, r12
     b3c:	fd 04       	cpc	r15, r13
     b3e:	08 f4       	brcc	.+2      	; 0xb42 <estimate_distance+0x222>
     b40:	5e c1       	rjmp	.+700    	; 0xdfe <estimate_distance+0x4de>
     b42:	e0 90 66 01 	lds	r14, 0x0166
     b46:	f0 90 67 01 	lds	r15, 0x0167
     b4a:	ec 14       	cp	r14, r12
     b4c:	fd 04       	cpc	r15, r13
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <estimate_distance+0x232>
     b50:	5e c1       	rjmp	.+700    	; 0xe0e <estimate_distance+0x4ee>
     b52:	e0 90 68 01 	lds	r14, 0x0168
     b56:	f0 90 69 01 	lds	r15, 0x0169
     b5a:	ec 14       	cp	r14, r12
     b5c:	fd 04       	cpc	r15, r13
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <estimate_distance+0x242>
     b60:	c3 c0       	rjmp	.+390    	; 0xce8 <estimate_distance+0x3c8>
     b62:	e0 90 6a 01 	lds	r14, 0x016A
     b66:	f0 90 6b 01 	lds	r15, 0x016B
     b6a:	ec 14       	cp	r14, r12
     b6c:	fd 04       	cpc	r15, r13
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <estimate_distance+0x252>
     b70:	56 c1       	rjmp	.+684    	; 0xe1e <estimate_distance+0x4fe>
     b72:	e0 90 6c 01 	lds	r14, 0x016C
     b76:	f0 90 6d 01 	lds	r15, 0x016D
     b7a:	ec 14       	cp	r14, r12
     b7c:	fd 04       	cpc	r15, r13
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <estimate_distance+0x262>
     b80:	56 c1       	rjmp	.+684    	; 0xe2e <estimate_distance+0x50e>
     b82:	e0 90 6e 01 	lds	r14, 0x016E
     b86:	f0 90 6f 01 	lds	r15, 0x016F
     b8a:	ec 14       	cp	r14, r12
     b8c:	fd 04       	cpc	r15, r13
     b8e:	08 f4       	brcc	.+2      	; 0xb92 <estimate_distance+0x272>
     b90:	56 c1       	rjmp	.+684    	; 0xe3e <estimate_distance+0x51e>
     b92:	e0 90 70 01 	lds	r14, 0x0170
     b96:	f0 90 71 01 	lds	r15, 0x0171
     b9a:	ec 14       	cp	r14, r12
     b9c:	fd 04       	cpc	r15, r13
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <estimate_distance+0x282>
     ba0:	56 c1       	rjmp	.+684    	; 0xe4e <estimate_distance+0x52e>
     ba2:	e0 90 72 01 	lds	r14, 0x0172
     ba6:	f0 90 73 01 	lds	r15, 0x0173
     baa:	ec 14       	cp	r14, r12
     bac:	fd 04       	cpc	r15, r13
     bae:	08 f4       	brcc	.+2      	; 0xbb2 <estimate_distance+0x292>
     bb0:	56 c1       	rjmp	.+684    	; 0xe5e <estimate_distance+0x53e>
     bb2:	e0 90 74 01 	lds	r14, 0x0174
     bb6:	f0 90 75 01 	lds	r15, 0x0175
     bba:	ec 14       	cp	r14, r12
     bbc:	fd 04       	cpc	r15, r13
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <estimate_distance+0x2a2>
     bc0:	5a c1       	rjmp	.+692    	; 0xe76 <estimate_distance+0x556>
     bc2:	e0 90 76 01 	lds	r14, 0x0176
     bc6:	f0 90 77 01 	lds	r15, 0x0177
     bca:	ec 14       	cp	r14, r12
     bcc:	fd 04       	cpc	r15, r13
     bce:	08 f4       	brcc	.+2      	; 0xbd2 <estimate_distance+0x2b2>
     bd0:	5a c1       	rjmp	.+692    	; 0xe86 <estimate_distance+0x566>
     bd2:	e0 90 78 01 	lds	r14, 0x0178
     bd6:	f0 90 79 01 	lds	r15, 0x0179
     bda:	ec 14       	cp	r14, r12
     bdc:	fd 04       	cpc	r15, r13
     bde:	08 f4       	brcc	.+2      	; 0xbe2 <estimate_distance+0x2c2>
     be0:	5a c1       	rjmp	.+692    	; 0xe96 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     be2:	0a e5       	ldi	r16, 0x5A	; 90
     be4:	31 c0       	rjmp	.+98     	; 0xc48 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     be6:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     be8:	ed 81       	ldd	r30, Y+5	; 0x05
     bea:	fe 81       	ldd	r31, Y+6	; 0x06
     bec:	ed 3b       	cpi	r30, 0xBD	; 189
     bee:	f2 40       	sbci	r31, 0x02	; 2
     bf0:	fc f4       	brge	.+62     	; 0xc30 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     bf2:	81 e2       	ldi	r24, 0x21	; 33
     bf4:	81 0f       	add	r24, r17
    }
}
     bf6:	26 96       	adiw	r28, 0x06	; 6
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	bf 90       	pop	r11
     c14:	af 90       	pop	r10
     c16:	9f 90       	pop	r9
     c18:	8f 90       	pop	r8
     c1a:	7f 90       	pop	r7
     c1c:	6f 90       	pop	r6
     c1e:	5f 90       	pop	r5
     c20:	4f 90       	pop	r4
     c22:	3f 90       	pop	r3
     c24:	2f 90       	pop	r2
     c26:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c28:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     c2a:	81 e2       	ldi	r24, 0x21	; 33
     c2c:	80 0f       	add	r24, r16
     c2e:	e3 cf       	rjmp	.-58     	; 0xbf6 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c30:	d1 01       	movw	r26, r2
     c32:	cd 90       	ld	r12, X+
     c34:	dc 90       	ld	r13, X
     c36:	80 91 5e 01 	lds	r24, 0x015E
     c3a:	90 91 5f 01 	lds	r25, 0x015F
     c3e:	8c 15       	cp	r24, r12
     c40:	9d 05       	cpc	r25, r13
     c42:	08 f0       	brcs	.+2      	; 0xc46 <estimate_distance+0x326>
     c44:	66 cf       	rjmp	.-308    	; 0xb12 <estimate_distance+0x1f2>
            dist_low=0;
     c46:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     c48:	1f 3f       	cpi	r17, 0xFF	; 255
     c4a:	79 f3       	breq	.-34     	; 0xc2a <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     c4c:	ed 81       	ldd	r30, Y+5	; 0x05
     c4e:	fe 81       	ldd	r31, Y+6	; 0x06
     c50:	bf 01       	movw	r22, r30
     c52:	ff 0f       	add	r31, r31
     c54:	88 0b       	sbc	r24, r24
     c56:	99 0b       	sbc	r25, r25
     c58:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__floatsisf>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
     c60:	61 2f       	mov	r22, r17
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     c6c:	4b 01       	movw	r8, r22
     c6e:	5c 01       	movw	r10, r24
     c70:	a7 01       	movw	r20, r14
     c72:	96 01       	movw	r18, r12
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	81 e6       	ldi	r24, 0x61	; 97
     c7a:	94 e4       	ldi	r25, 0x44	; 68
     c7c:	0e 94 04 0b 	call	0x1608	; 0x1608 <__subsf3>
     c80:	9b 01       	movw	r18, r22
     c82:	ac 01       	movw	r20, r24
     c84:	c5 01       	movw	r24, r10
     c86:	b4 01       	movw	r22, r8
     c88:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
     c8c:	4b 01       	movw	r8, r22
     c8e:	5c 01       	movw	r10, r24
     c90:	60 2f       	mov	r22, r16
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     c9c:	2b 01       	movw	r4, r22
     c9e:	3c 01       	movw	r6, r24
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	4f e2       	ldi	r20, 0x2F	; 47
     ca6:	54 e4       	ldi	r21, 0x44	; 68
     ca8:	c7 01       	movw	r24, r14
     caa:	b6 01       	movw	r22, r12
     cac:	0e 94 04 0b 	call	0x1608	; 0x1608 <__subsf3>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c3 01       	movw	r24, r6
     cb6:	b2 01       	movw	r22, r4
     cb8:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	0e 94 05 0b 	call	0x160a	; 0x160a <__addsf3>
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	48 e4       	ldi	r20, 0x48	; 72
     cce:	53 e4       	ldi	r21, 0x43	; 67
     cd0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__divsf3>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	44 e0       	ldi	r20, 0x04	; 4
     cda:	52 e4       	ldi	r21, 0x42	; 66
     cdc:	0e 94 05 0b 	call	0x160a	; 0x160a <__addsf3>
     ce0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fixunssfsi>
     ce4:	86 2f       	mov	r24, r22
     ce6:	87 cf       	rjmp	.-242    	; 0xbf6 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce8:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     cea:	85 e0       	ldi	r24, 0x05	; 5
     cec:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	fc 01       	movw	r30, r24
     cf4:	e4 5a       	subi	r30, 0xA4	; 164
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	b7 01       	movw	r22, r14
     cfe:	68 1b       	sub	r22, r24
     d00:	79 0b       	sbc	r23, r25
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     d0a:	9b 01       	movw	r18, r22
     d0c:	ac 01       	movw	r20, r24
     d0e:	0e 94 05 0b 	call	0x160a	; 0x160a <__addsf3>
     d12:	4b 01       	movw	r8, r22
     d14:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d16:	b6 01       	movw	r22, r12
     d18:	dd 0c       	add	r13, r13
     d1a:	88 0b       	sbc	r24, r24
     d1c:	99 0b       	sbc	r25, r25
     d1e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__floatsisf>
     d22:	2b 01       	movw	r4, r22
     d24:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     d26:	b7 01       	movw	r22, r14
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     d30:	6b 01       	movw	r12, r22
     d32:	7c 01       	movw	r14, r24
     d34:	60 2f       	mov	r22, r16
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	a9 01       	movw	r20, r18
     d52:	0e 94 05 0b 	call	0x160a	; 0x160a <__addsf3>
     d56:	a5 01       	movw	r20, r10
     d58:	94 01       	movw	r18, r8
     d5a:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	c7 01       	movw	r24, r14
     d64:	b6 01       	movw	r22, r12
     d66:	0e 94 04 0b 	call	0x1608	; 0x1608 <__subsf3>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     d6e:	c3 01       	movw	r24, r6
     d70:	b2 01       	movw	r22, r4
     d72:	0e 94 04 0b 	call	0x1608	; 0x1608 <__subsf3>
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e2       	ldi	r20, 0x20	; 32
     d7c:	51 e4       	ldi	r21, 0x41	; 65
     d7e:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
                b=((int)((int)b/(int)slope));
     d82:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fixsfsi>
     d86:	7b 01       	movw	r14, r22
     d88:	c5 01       	movw	r24, r10
     d8a:	b4 01       	movw	r22, r8
     d8c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fixsfsi>
     d90:	ab 01       	movw	r20, r22
     d92:	bc 01       	movw	r22, r24
     d94:	c7 01       	movw	r24, r14
     d96:	ba 01       	movw	r22, r20
     d98:	0e 94 c7 0a 	call	0x158e	; 0x158e <__divmodhi4>
                dist_low=b;
     d9c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     d9e:	6f 3f       	cpi	r22, 0xFF	; 255
     da0:	09 f0       	breq	.+2      	; 0xda4 <estimate_distance+0x484>
     da2:	52 cf       	rjmp	.-348    	; 0xc48 <estimate_distance+0x328>
     da4:	26 cf       	rjmp	.-436    	; 0xbf2 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da6:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     da8:	85 e0       	ldi	r24, 0x05	; 5
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	7c 01       	movw	r14, r24
     dae:	f1 e0       	ldi	r31, 0x01	; 1
     db0:	ef 1a       	sub	r14, r31
     db2:	f1 08       	sbc	r15, r1
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	0e 94 a7 0c 	call	0x194e	; 0x194e <__mulsf3>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	0e 94 05 0b 	call	0x160a	; 0x160a <__addsf3>
     dd4:	69 83       	std	Y+1, r22	; 0x01
     dd6:	7a 83       	std	Y+2, r23	; 0x02
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     ddc:	40 ce       	rjmp	.-896    	; 0xa5e <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     dde:	01 e0       	ldi	r16, 0x01	; 1
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	84 cf       	rjmp	.-248    	; 0xcee <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	df cf       	rjmp	.-66     	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dee:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	7c cf       	rjmp	.-264    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     df6:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	d7 cf       	rjmp	.-82     	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dfe:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	74 cf       	rjmp	.-280    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e06:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	cf cf       	rjmp	.-98     	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e0e:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	6c cf       	rjmp	.-296    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e16:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     e18:	84 e0       	ldi	r24, 0x04	; 4
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	c7 cf       	rjmp	.-114    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e1e:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     e20:	86 e0       	ldi	r24, 0x06	; 6
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	64 cf       	rjmp	.-312    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e26:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     e28:	86 e0       	ldi	r24, 0x06	; 6
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	bf cf       	rjmp	.-130    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e2e:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	5c cf       	rjmp	.-328    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e36:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     e38:	87 e0       	ldi	r24, 0x07	; 7
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	b7 cf       	rjmp	.-146    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e3e:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	54 cf       	rjmp	.-344    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e46:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     e48:	88 e0       	ldi	r24, 0x08	; 8
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	af cf       	rjmp	.-162    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e4e:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     e50:	89 e0       	ldi	r24, 0x09	; 9
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	4c cf       	rjmp	.-360    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e56:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     e58:	89 e0       	ldi	r24, 0x09	; 9
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a7 cf       	rjmp	.-178    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e5e:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     e60:	8a e0       	ldi	r24, 0x0A	; 10
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	44 cf       	rjmp	.-376    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e66:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     e68:	8a e0       	ldi	r24, 0x0A	; 10
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9f cf       	rjmp	.-194    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e6e:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     e70:	8b e0       	ldi	r24, 0x0B	; 11
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9b cf       	rjmp	.-202    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e76:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     e78:	8b e0       	ldi	r24, 0x0B	; 11
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	38 cf       	rjmp	.-400    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e7e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     e80:	8c e0       	ldi	r24, 0x0C	; 12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	93 cf       	rjmp	.-218    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e86:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     e88:	8c e0       	ldi	r24, 0x0C	; 12
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	30 cf       	rjmp	.-416    	; 0xcee <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e8e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     e90:	8d e0       	ldi	r24, 0x0D	; 13
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	8b cf       	rjmp	.-234    	; 0xdac <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e96:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     e98:	8d e0       	ldi	r24, 0x0D	; 13
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	28 cf       	rjmp	.-432    	; 0xcee <estimate_distance+0x3ce>

00000e9e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
    tx_clock += tx_increment;
     ec0:	20 91 7d 01 	lds	r18, 0x017D
     ec4:	30 91 7e 01 	lds	r19, 0x017E
     ec8:	80 91 7b 01 	lds	r24, 0x017B
     ecc:	90 91 7c 01 	lds	r25, 0x017C
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	90 93 7e 01 	sts	0x017E, r25
     ed8:	80 93 7d 01 	sts	0x017D, r24
    tx_increment = 0xFF;
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	90 93 7c 01 	sts	0x017C, r25
     ee4:	80 93 7b 01 	sts	0x017B, r24
    OCR0A = tx_increment;
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     eec:	80 91 59 01 	lds	r24, 0x0159
     ef0:	90 91 5a 01 	lds	r25, 0x015A
     ef4:	a0 91 5b 01 	lds	r26, 0x015B
     ef8:	b0 91 5c 01 	lds	r27, 0x015C
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	a1 1d       	adc	r26, r1
     f00:	b1 1d       	adc	r27, r1
     f02:	80 93 59 01 	sts	0x0159, r24
     f06:	90 93 5a 01 	sts	0x015A, r25
     f0a:	a0 93 5b 01 	sts	0x015B, r26
     f0e:	b0 93 5c 01 	sts	0x015C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f12:	80 91 5d 01 	lds	r24, 0x015D
     f16:	81 11       	cpse	r24, r1
     f18:	0f c0       	rjmp	.+30     	; 0xf38 <__vector_14+0x9a>
     f1a:	80 91 8c 01 	lds	r24, 0x018C
     f1e:	90 91 8d 01 	lds	r25, 0x018D
     f22:	20 91 7d 01 	lds	r18, 0x017D
     f26:	30 91 7e 01 	lds	r19, 0x017E
     f2a:	82 17       	cp	r24, r18
     f2c:	93 07       	cpc	r25, r19
     f2e:	20 f4       	brcc	.+8      	; 0xf38 <__vector_14+0x9a>
     f30:	80 91 35 01 	lds	r24, 0x0135
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	89 f0       	breq	.+34     	; 0xf5a <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     f5a:	e0 91 11 01 	lds	r30, 0x0111
     f5e:	f0 91 12 01 	lds	r31, 0x0112
     f62:	09 95       	icall
        if (msg) {
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	41 f3       	breq	.-48     	; 0xf38 <__vector_14+0x9a>
            if (message_send(msg)) {
     f68:	0e 94 37 0a 	call	0x146e	; 0x146e <message_send>
     f6c:	81 11       	cpse	r24, r1
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     f70:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <rand>
     f74:	99 27       	eor	r25, r25
     f76:	90 93 7c 01 	sts	0x017C, r25
     f7a:	80 93 7b 01 	sts	0x017B, r24
                OCR0A = tx_increment;
     f7e:	87 bd       	out	0x27, r24	; 39
     f80:	db cf       	rjmp	.-74     	; 0xf38 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     f82:	e0 91 0f 01 	lds	r30, 0x010F
     f86:	f0 91 10 01 	lds	r31, 0x0110
     f8a:	09 95       	icall
                tx_clock = 0;
     f8c:	10 92 7e 01 	sts	0x017E, r1
     f90:	10 92 7d 01 	sts	0x017D, r1
     f94:	d1 cf       	rjmp	.-94     	; 0xf38 <__vector_14+0x9a>

00000f96 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     f96:	80 ff       	sbrs	r24, 0
     f98:	11 c0       	rjmp	.+34     	; 0xfbc <set_color+0x26>
        DDRD |= (1<<5);
     f9a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     f9c:	81 ff       	sbrs	r24, 1
     f9e:	11 c0       	rjmp	.+34     	; 0xfc2 <set_color+0x2c>
        DDRD |= (1<<4);
     fa0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     fa2:	82 ff       	sbrs	r24, 2
     fa4:	11 c0       	rjmp	.+34     	; 0xfc8 <set_color+0x32>
        DDRC |= (1<<3);
     fa6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     fa8:	83 ff       	sbrs	r24, 3
     faa:	11 c0       	rjmp	.+34     	; 0xfce <set_color+0x38>
        DDRC |= (1<<2);
     fac:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     fae:	84 ff       	sbrs	r24, 4
     fb0:	11 c0       	rjmp	.+34     	; 0xfd4 <set_color+0x3e>
        DDRC |= (1<<5);
     fb2:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     fb4:	85 fd       	sbrc	r24, 5
     fb6:	11 c0       	rjmp	.+34     	; 0xfda <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     fb8:	3c 98       	cbi	0x07, 4	; 7
     fba:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     fbc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     fbe:	81 fd       	sbrc	r24, 1
     fc0:	ef cf       	rjmp	.-34     	; 0xfa0 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     fc2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     fc4:	82 fd       	sbrc	r24, 2
     fc6:	ef cf       	rjmp	.-34     	; 0xfa6 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     fc8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     fca:	83 fd       	sbrc	r24, 3
     fcc:	ef cf       	rjmp	.-34     	; 0xfac <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     fce:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     fd0:	84 fd       	sbrc	r24, 4
     fd2:	ef cf       	rjmp	.-34     	; 0xfb2 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     fd4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     fd6:	85 ff       	sbrs	r24, 5
     fd8:	ef cf       	rjmp	.-34     	; 0xfb8 <set_color+0x22>
        DDRC |= (1<<4);
     fda:	3c 9a       	sbi	0x07, 4	; 7
     fdc:	08 95       	ret

00000fde <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
    rx_timer_off();
     fec:	10 92 81 00 	sts	0x0081, r1
     ff0:	10 92 85 00 	sts	0x0085, r1
     ff4:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 36 01 	sts	0x0136, r24
    rx_leadingbyte = 1;
     ffe:	80 93 7a 01 	sts	0x017A, r24
    rx_busy = 0;
    1002:	10 92 5d 01 	sts	0x015D, r1
    adc_trigger_high_gain();
    1006:	10 92 7c 00 	sts	0x007C, r1
    100a:	93 ea       	ldi	r25, 0xA3	; 163
    100c:	90 93 7a 00 	sts	0x007A, r25
    1010:	80 93 7b 00 	sts	0x007B, r24
}
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1048:	20 91 84 00 	lds	r18, 0x0084
    104c:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	40 93 5d 01 	sts	0x015D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1056:	80 91 36 01 	lds	r24, 0x0136
    105a:	88 23       	and	r24, r24
    105c:	a9 f1       	breq	.+106    	; 0x10c8 <__vector_23+0xa6>
        rx_timer_on();
    105e:	10 92 85 00 	sts	0x0085, r1
    1062:	10 92 84 00 	sts	0x0084, r1
    1066:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    106a:	10 92 8e 01 	sts	0x018E, r1
        rx_leadingbit = 0;
    106e:	10 92 36 01 	sts	0x0136, r1
        if (rx_leadingbyte) {
    1072:	80 91 7a 01 	lds	r24, 0x017A
    1076:	88 23       	and	r24, r24
    1078:	a1 f0       	breq	.+40     	; 0x10a2 <__vector_23+0x80>
            adc_finish_conversion();
    107a:	80 91 7a 00 	lds	r24, 0x007A
    107e:	86 fd       	sbrc	r24, 6
    1080:	fc cf       	rjmp	.-8      	; 0x107a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1082:	80 91 78 00 	lds	r24, 0x0078
    1086:	90 91 79 00 	lds	r25, 0x0079
    108a:	90 93 58 01 	sts	0x0158, r25
    108e:	80 93 57 01 	sts	0x0157, r24
            adc_trigger_low_gain();
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 7c 00 	sts	0x007C, r24
    1098:	93 ea       	ldi	r25, 0xA3	; 163
    109a:	90 93 7a 00 	sts	0x007A, r25
    109e:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    10c8:	c9 01       	movw	r24, r18
    10ca:	87 58       	subi	r24, 0x87	; 135
    10cc:	91 09       	sbc	r25, r1
    10ce:	84 37       	cpi	r24, 0x74	; 116
    10d0:	99 40       	sbci	r25, 0x09	; 9
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <__vector_23+0xb4>
    10d4:	52 c0       	rjmp	.+164    	; 0x117a <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    10d6:	26 58       	subi	r18, 0x86	; 134
    10d8:	31 09       	sbc	r19, r1
    10da:	a4 ef       	ldi	r26, 0xF4	; 244
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__umulhisi3>
    10e2:	aa 27       	eor	r26, r26
    10e4:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    10e6:	88 30       	cpi	r24, 0x08	; 8
    10e8:	91 05       	cpc	r25, r1
    10ea:	a1 05       	cpc	r26, r1
    10ec:	b1 05       	cpc	r27, r1
    10ee:	08 f4       	brcc	.+2      	; 0x10f2 <__vector_23+0xd0>
    10f0:	7b c0       	rjmp	.+246    	; 0x11e8 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    10f2:	40 93 36 01 	sts	0x0136, r20
                if (rx_leadingbyte) {
    10f6:	80 91 7a 01 	lds	r24, 0x017A
    10fa:	81 11       	cpse	r24, r1
    10fc:	52 c0       	rjmp	.+164    	; 0x11a2 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    10fe:	80 91 54 01 	lds	r24, 0x0154
    1102:	e8 2f       	mov	r30, r24
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	e0 58       	subi	r30, 0x80	; 128
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	90 91 8e 01 	lds	r25, 0x018E
    110e:	90 83       	st	Z, r25
                    rx_byteindex++;
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	80 93 54 01 	sts	0x0154, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1116:	8c 30       	cpi	r24, 0x0C	; 12
    1118:	21 f6       	brne	.-120    	; 0x10a2 <__vector_23+0x80>
                        rx_timer_off();
    111a:	10 92 81 00 	sts	0x0081, r1
    111e:	10 92 85 00 	sts	0x0085, r1
    1122:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1126:	40 93 7a 01 	sts	0x017A, r20
                        rx_busy = 0;
    112a:	10 92 5d 01 	sts	0x015D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    112e:	c0 91 8a 01 	lds	r28, 0x018A
    1132:	d0 91 8b 01 	lds	r29, 0x018B
    1136:	80 e8       	ldi	r24, 0x80	; 128
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <message_crc>
    113e:	c8 17       	cp	r28, r24
    1140:	d9 07       	cpc	r29, r25
    1142:	09 f0       	breq	.+2      	; 0x1146 <__vector_23+0x124>
    1144:	ae cf       	rjmp	.-164    	; 0x10a2 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1146:	80 91 89 01 	lds	r24, 0x0189
    114a:	87 ff       	sbrs	r24, 7
    114c:	61 c0       	rjmp	.+194    	; 0x1210 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    114e:	98 e7       	ldi	r25, 0x78	; 120
    1150:	98 0f       	add	r25, r24
    1152:	93 30       	cpi	r25, 0x03	; 3
    1154:	30 f0       	brcs	.+12     	; 0x1162 <__vector_23+0x140>
        motors_off();
    1156:	53 98       	cbi	0x0a, 3	; 10
    1158:	23 98       	cbi	0x04, 3	; 4
    115a:	10 92 b4 00 	sts	0x00B4, r1
    115e:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	fc 01       	movw	r30, r24
    1166:	e0 58       	subi	r30, 0x80	; 128
    1168:	f1 09       	sbc	r31, r1
    116a:	eb 30       	cpi	r30, 0x0B	; 11
    116c:	f1 05       	cpc	r31, r1
    116e:	08 f0       	brcs	.+2      	; 0x1172 <__vector_23+0x150>
    1170:	98 cf       	rjmp	.-208    	; 0x10a2 <__vector_23+0x80>
    1172:	e5 5c       	subi	r30, 0xC5	; 197
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    117a:	10 92 81 00 	sts	0x0081, r1
    117e:	10 92 85 00 	sts	0x0085, r1
    1182:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1186:	40 93 36 01 	sts	0x0136, r20
            rx_leadingbyte = 1;
    118a:	40 93 7a 01 	sts	0x017A, r20
            rx_busy = 0;
    118e:	10 92 5d 01 	sts	0x015D, r1
            adc_trigger_high_gain();
    1192:	10 92 7c 00 	sts	0x007C, r1
    1196:	83 ea       	ldi	r24, 0xA3	; 163
    1198:	80 93 7a 00 	sts	0x007A, r24
    119c:	40 93 7b 00 	sts	0x007B, r20
    11a0:	80 cf       	rjmp	.-256    	; 0x10a2 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    11a2:	80 91 7a 00 	lds	r24, 0x007A
    11a6:	86 fd       	sbrc	r24, 6
    11a8:	fc cf       	rjmp	.-8      	; 0x11a2 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    11aa:	80 91 78 00 	lds	r24, 0x0078
    11ae:	90 91 79 00 	lds	r25, 0x0079
    11b2:	90 93 56 01 	sts	0x0156, r25
    11b6:	80 93 55 01 	sts	0x0155, r24
                    adc_trigger_high_gain();
    11ba:	10 92 7c 00 	sts	0x007C, r1
    11be:	83 ea       	ldi	r24, 0xA3	; 163
    11c0:	80 93 7a 00 	sts	0x007A, r24
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    11ca:	90 91 8e 01 	lds	r25, 0x018E
    11ce:	99 23       	and	r25, r25
    11d0:	d1 f0       	breq	.+52     	; 0x1206 <__vector_23+0x1e4>
                        rx_timer_off();
    11d2:	10 92 81 00 	sts	0x0081, r1
    11d6:	10 92 85 00 	sts	0x0085, r1
    11da:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    11de:	80 93 7a 01 	sts	0x017A, r24
                        rx_busy = 0;
    11e2:	10 92 5d 01 	sts	0x015D, r1
    11e6:	5d cf       	rjmp	.-326    	; 0x10a2 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	f9 01       	movw	r30, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <__vector_23+0x1d2>
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	8a 95       	dec	r24
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <__vector_23+0x1ce>
    11f8:	cf 01       	movw	r24, r30
    11fa:	90 91 8e 01 	lds	r25, 0x018E
    11fe:	89 2b       	or	r24, r25
    1200:	80 93 8e 01 	sts	0x018E, r24
    1204:	4e cf       	rjmp	.-356    	; 0x10a2 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1206:	10 92 7a 01 	sts	0x017A, r1
                        rx_byteindex = 0;
    120a:	10 92 54 01 	sts	0x0154, r1
    120e:	49 cf       	rjmp	.-366    	; 0x10a2 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1210:	e0 91 13 01 	lds	r30, 0x0113
    1214:	f0 91 14 01 	lds	r31, 0x0114
    1218:	65 e5       	ldi	r22, 0x55	; 85
    121a:	71 e0       	ldi	r23, 0x01	; 1
    121c:	80 e8       	ldi	r24, 0x80	; 128
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	09 95       	icall
    1222:	3f cf       	rjmp	.-386    	; 0x10a2 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1224:	80 91 80 01 	lds	r24, 0x0180
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	09 f4       	brne	.+2      	; 0x122e <__vector_23+0x20c>
    122c:	dd c0       	rjmp	.+442    	; 0x13e8 <__vector_23+0x3c6>
    122e:	08 f4       	brcc	.+2      	; 0x1232 <__vector_23+0x210>
    1230:	ba c0       	rjmp	.+372    	; 0x13a6 <__vector_23+0x384>
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	09 f4       	brne	.+2      	; 0x1238 <__vector_23+0x216>
    1236:	c6 c0       	rjmp	.+396    	; 0x13c4 <__vector_23+0x3a2>
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	09 f0       	breq	.+2      	; 0x123e <__vector_23+0x21c>
    123c:	b1 c0       	rjmp	.+354    	; 0x13a0 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    123e:	80 91 33 01 	lds	r24, 0x0133
    1242:	90 91 86 01 	lds	r25, 0x0186
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	09 f4       	brne	.+2      	; 0x124c <__vector_23+0x22a>
    124a:	e3 c0       	rjmp	.+454    	; 0x1412 <__vector_23+0x3f0>
    124c:	80 91 85 01 	lds	r24, 0x0185
                        prev_motion = MOVE_STOP;
    1250:	10 92 34 01 	sts	0x0134, r1
                        cur_motion = MOVE_STRAIGHT;
    1254:	23 e0       	ldi	r18, 0x03	; 3
    1256:	20 93 33 01 	sts	0x0133, r18
                        kilo_straight_left = calibmsg->straight_left;
    125a:	80 93 91 01 	sts	0x0191, r24
                        kilo_straight_right = calibmsg->straight_right;
    125e:	90 93 92 01 	sts	0x0192, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1262:	80 91 35 01 	lds	r24, 0x0135
    1266:	86 30       	cpi	r24, 0x06	; 6
    1268:	09 f4       	brne	.+2      	; 0x126c <__vector_23+0x24a>
    126a:	1b cf       	rjmp	.-458    	; 0x10a2 <__vector_23+0x80>
                motors_on();
    126c:	53 9a       	sbi	0x0a, 3	; 10
    126e:	23 9a       	sbi	0x04, 3	; 4
    1270:	10 92 b4 00 	sts	0x00B4, r1
    1274:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1278:	86 e0       	ldi	r24, 0x06	; 6
    127a:	80 93 35 01 	sts	0x0135, r24
    127e:	11 cf       	rjmp	.-478    	; 0x10a2 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1280:	80 91 35 01 	lds	r24, 0x0135
    1284:	86 30       	cpi	r24, 0x06	; 6
    1286:	99 f0       	breq	.+38     	; 0x12ae <__vector_23+0x28c>
                motors_on();
    1288:	53 9a       	sbi	0x0a, 3	; 10
    128a:	23 9a       	sbi	0x04, 3	; 4
    128c:	10 92 b4 00 	sts	0x00B4, r1
    1290:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1294:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1296:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1298:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    129a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    129c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    129e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    12a0:	10 92 33 01 	sts	0x0133, r1
    12a4:	10 92 34 01 	sts	0x0134, r1
                kilo_state = MOVING;
    12a8:	86 e0       	ldi	r24, 0x06	; 6
    12aa:	80 93 35 01 	sts	0x0135, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 01       	movw	r18, r24
    12b4:	00 90 80 01 	lds	r0, 0x0180
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <__vector_23+0x29c>
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <__vector_23+0x298>
    12c2:	80 91 8f 01 	lds	r24, 0x018F
    12c6:	90 91 90 01 	lds	r25, 0x0190
    12ca:	82 23       	and	r24, r18
    12cc:	93 23       	and	r25, r19
    12ce:	89 2b       	or	r24, r25
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <__vector_23+0x2b2>
    12d2:	86 c0       	rjmp	.+268    	; 0x13e0 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    12d4:	10 92 33 01 	sts	0x0133, r1
    12d8:	e4 ce       	rjmp	.-568    	; 0x10a2 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	80 93 35 01 	sts	0x0135, r24
    12e0:	e0 ce       	rjmp	.-576    	; 0x10a2 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    12e2:	e0 e0       	ldi	r30, 0x00	; 0
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    12e8:	80 91 6e 00 	lds	r24, 0x006E
    12ec:	8d 7f       	andi	r24, 0xFD	; 253
    12ee:	80 93 6e 00 	sts	0x006E, r24
    12f2:	16 bc       	out	0x26, r1	; 38
            bootload();
    12f4:	e0 e0       	ldi	r30, 0x00	; 0
    12f6:	f0 e7       	ldi	r31, 0x70	; 112
    12f8:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    12fa:	10 92 35 01 	sts	0x0135, r1
    12fe:	d1 ce       	rjmp	.-606    	; 0x10a2 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	80 93 35 01 	sts	0x0135, r24
    1306:	cd ce       	rjmp	.-614    	; 0x10a2 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1308:	85 e0       	ldi	r24, 0x05	; 5
    130a:	80 93 35 01 	sts	0x0135, r24
    130e:	c9 ce       	rjmp	.-622    	; 0x10a2 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1310:	80 91 35 01 	lds	r24, 0x0135
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	09 f4       	brne	.+2      	; 0x131a <__vector_23+0x2f8>
    1318:	c4 ce       	rjmp	.-632    	; 0x10a2 <__vector_23+0x80>
    131a:	80 91 35 01 	lds	r24, 0x0135
    131e:	84 30       	cpi	r24, 0x04	; 4
    1320:	09 f4       	brne	.+2      	; 0x1324 <__vector_23+0x302>
    1322:	bf ce       	rjmp	.-642    	; 0x10a2 <__vector_23+0x80>
                motors_on();
    1324:	53 9a       	sbi	0x0a, 3	; 10
    1326:	23 9a       	sbi	0x04, 3	; 4
    1328:	10 92 b4 00 	sts	0x00B4, r1
    132c:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	80 93 35 01 	sts	0x0135, r24
    1336:	b5 ce       	rjmp	.-662    	; 0x10a2 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1338:	80 91 35 01 	lds	r24, 0x0135
    133c:	86 30       	cpi	r24, 0x06	; 6
    133e:	09 f0       	breq	.+2      	; 0x1342 <__vector_23+0x320>
    1340:	b0 ce       	rjmp	.-672    	; 0x10a2 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1342:	60 91 8f 01 	lds	r22, 0x018F
    1346:	80 eb       	ldi	r24, 0xB0	; 176
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 0c 10 	call	0x2018	; 0x2018 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    134e:	60 91 90 01 	lds	r22, 0x0190
    1352:	81 eb       	ldi	r24, 0xB1	; 177
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 0c 10 	call	0x2018	; 0x2018 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    135a:	60 91 93 01 	lds	r22, 0x0193
    135e:	85 e0       	ldi	r24, 0x05	; 5
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 0c 10 	call	0x2018	; 0x2018 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1366:	60 91 7f 01 	lds	r22, 0x017F
    136a:	89 e0       	ldi	r24, 0x09	; 9
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 0c 10 	call	0x2018	; 0x2018 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1372:	60 91 91 01 	lds	r22, 0x0191
    1376:	8c e0       	ldi	r24, 0x0C	; 12
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 0c 10 	call	0x2018	; 0x2018 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    137e:	60 91 92 01 	lds	r22, 0x0192
    1382:	84 e1       	ldi	r24, 0x14	; 20
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 0c 10 	call	0x2018	; 0x2018 <eeprom_write_byte>
                        motors_off();
    138a:	53 98       	cbi	0x0a, 3	; 10
    138c:	23 98       	cbi	0x04, 3	; 4
    138e:	10 92 b4 00 	sts	0x00B4, r1
    1392:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 35 01 	sts	0x0135, r24
    139c:	80 91 80 01 	lds	r24, 0x0180
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13a0:	81 11       	cpse	r24, r1
    13a2:	5f cf       	rjmp	.-322    	; 0x1262 <__vector_23+0x240>
    13a4:	7e ce       	rjmp	.-772    	; 0x10a2 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13a6:	88 23       	and	r24, r24
    13a8:	39 f2       	breq	.-114    	; 0x1338 <__vector_23+0x316>
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	c9 f7       	brne	.-14     	; 0x13a0 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    13ae:	80 91 81 01 	lds	r24, 0x0181
    13b2:	90 91 82 01 	lds	r25, 0x0182
    13b6:	90 93 90 01 	sts	0x0190, r25
    13ba:	80 93 8f 01 	sts	0x018F, r24
                    cur_motion = MOVE_STOP;
    13be:	10 92 33 01 	sts	0x0133, r1
    13c2:	4f cf       	rjmp	.-354    	; 0x1262 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    13c4:	80 91 33 01 	lds	r24, 0x0133
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	71 f1       	breq	.+92     	; 0x1428 <__vector_23+0x406>
    13cc:	80 91 84 01 	lds	r24, 0x0184
                        prev_motion = MOVE_STOP;
    13d0:	10 92 34 01 	sts	0x0134, r1
                        cur_motion = MOVE_RIGHT;
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	90 93 33 01 	sts	0x0133, r25
                        kilo_turn_right = calibmsg->turn_right;
    13da:	80 93 7f 01 	sts	0x017F, r24
    13de:	41 cf       	rjmp	.-382    	; 0x1262 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	80 93 33 01 	sts	0x0133, r24
    13e6:	5d ce       	rjmp	.-838    	; 0x10a2 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    13e8:	80 91 33 01 	lds	r24, 0x0133
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	51 f0       	breq	.+20     	; 0x1404 <__vector_23+0x3e2>
    13f0:	80 91 83 01 	lds	r24, 0x0183
                        prev_motion = MOVE_STOP;
    13f4:	10 92 34 01 	sts	0x0134, r1
                        cur_motion = MOVE_LEFT;
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	90 93 33 01 	sts	0x0133, r25
                        kilo_turn_left = calibmsg->turn_left;
    13fe:	80 93 93 01 	sts	0x0193, r24
    1402:	2f cf       	rjmp	.-418    	; 0x1262 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1404:	80 91 83 01 	lds	r24, 0x0183
    1408:	90 91 93 01 	lds	r25, 0x0193
    140c:	89 13       	cpse	r24, r25
    140e:	f2 cf       	rjmp	.-28     	; 0x13f4 <__vector_23+0x3d2>
    1410:	28 cf       	rjmp	.-432    	; 0x1262 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1412:	80 91 92 01 	lds	r24, 0x0192
    1416:	98 13       	cpse	r25, r24
    1418:	19 cf       	rjmp	.-462    	; 0x124c <__vector_23+0x22a>
    141a:	80 91 85 01 	lds	r24, 0x0185
    141e:	20 91 91 01 	lds	r18, 0x0191
    1422:	82 13       	cpse	r24, r18
    1424:	15 cf       	rjmp	.-470    	; 0x1250 <__vector_23+0x22e>
    1426:	1d cf       	rjmp	.-454    	; 0x1262 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1428:	80 91 84 01 	lds	r24, 0x0184
    142c:	90 91 7f 01 	lds	r25, 0x017F
    1430:	89 13       	cpse	r24, r25
    1432:	ce cf       	rjmp	.-100    	; 0x13d0 <__vector_23+0x3ae>
    1434:	16 cf       	rjmp	.-468    	; 0x1262 <__vector_23+0x240>

00001436 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1436:	fc 01       	movw	r30, r24
    1438:	ac 01       	movw	r20, r24
    143a:	46 5f       	subi	r20, 0xF6	; 246
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1442:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1444:	82 27       	eor	r24, r18
    1446:	08 2e       	mov	r0, r24
    1448:	82 95       	swap	r24
    144a:	80 7f       	andi	r24, 0xF0	; 240
    144c:	80 25       	eor	r24, r0
    144e:	09 2e       	mov	r0, r25
    1450:	98 2f       	mov	r25, r24
    1452:	82 95       	swap	r24
    1454:	8f 70       	andi	r24, 0x0F	; 15
    1456:	08 26       	eor	r0, r24
    1458:	86 95       	lsr	r24
    145a:	98 27       	eor	r25, r24
    145c:	89 27       	eor	r24, r25
    145e:	88 0f       	add	r24, r24
    1460:	88 0f       	add	r24, r24
    1462:	88 0f       	add	r24, r24
    1464:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1466:	e4 17       	cp	r30, r20
    1468:	f5 07       	cpc	r31, r21
    146a:	59 f7       	brne	.-42     	; 0x1442 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    146c:	08 95       	ret

0000146e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    146e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1470:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1472:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1474:	20 91 53 01 	lds	r18, 0x0153
    or tmpreg1, ddrreg
    1478:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    147a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    147c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    147e:	30 91 53 01 	lds	r19, 0x0153
    1482:	20 30       	cpi	r18, 0x00	; 0
    1484:	29 f0       	breq	.+10     	; 0x1490 <message_send+0x22>
    1486:	00 00       	nop
    1488:	25 b1       	in	r18, 0x05	; 5
    148a:	23 2b       	or	r18, r19
    148c:	25 b9       	out	0x05, r18	; 5
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <message_send+0x2a>
    1490:	00 00       	nop
    1492:	00 00       	nop
    1494:	00 00       	nop
    1496:	00 c0       	rjmp	.+0      	; 0x1498 <message_send+0x2a>
    1498:	00 00       	nop
    149a:	00 00       	nop
    149c:	00 00       	nop
    149e:	30 95       	com	r19
    14a0:	25 b1       	in	r18, 0x05	; 5
    14a2:	23 23       	and	r18, r19
    14a4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    14a6:	2e ea       	ldi	r18, 0xAE	; 174
    14a8:	2a 95       	dec	r18
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    14ac:	2b ee       	ldi	r18, 0xEB	; 235

000014ae <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    14ae:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    14b0:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    14b2:	0a c0       	rjmp	.+20     	; 0x14c8 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14b4:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14b6:	30 91 53 01 	lds	r19, 0x0153
    com tmpreg2
    14ba:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14bc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14be:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14c0:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14c2:	0f be       	out	0x3f, r0	; 63
    return 0
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	08 95       	ret

000014c8 <nocollision>:
nocollision:
    nop
    14c8:	00 00       	nop
    dec tmpreg1
    14ca:	2a 95       	dec	r18
    brne checkcollision
    14cc:	81 f7       	brne	.-32     	; 0x14ae <checkcollision>

    ldi tmpreg1, 0x01
    14ce:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14d0:	30 91 53 01 	lds	r19, 0x0153
    14d4:	20 30       	cpi	r18, 0x00	; 0
    14d6:	29 f0       	breq	.+10     	; 0x14e2 <nocollision+0x1a>
    14d8:	00 00       	nop
    14da:	25 b1       	in	r18, 0x05	; 5
    14dc:	23 2b       	or	r18, r19
    14de:	25 b9       	out	0x05, r18	; 5
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <nocollision+0x22>
    14e2:	00 00       	nop
    14e4:	00 00       	nop
    14e6:	00 00       	nop
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <nocollision+0x22>
    14ea:	00 00       	nop
    14ec:	00 00       	nop
    14ee:	00 00       	nop
    14f0:	30 95       	com	r19
    14f2:	25 b1       	in	r18, 0x05	; 5
    14f4:	23 23       	and	r18, r19
    14f6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    14f8:	00 00       	nop
    14fa:	24 e5       	ldi	r18, 0x54	; 84
    14fc:	2a 95       	dec	r18
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1500:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1502:	8c e0       	ldi	r24, 0x0C	; 12

00001504 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1504:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1506:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1508:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    150a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    150c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    150e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1510:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1512:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1514:	50 e0       	ldi	r21, 0x00	; 0

00001516 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1516:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1518:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    151a:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    151c:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    151e:	30 91 53 01 	lds	r19, 0x0153
    1522:	20 30       	cpi	r18, 0x00	; 0
    1524:	29 f0       	breq	.+10     	; 0x1530 <sendbit+0x1a>
    1526:	00 00       	nop
    1528:	25 b1       	in	r18, 0x05	; 5
    152a:	23 2b       	or	r18, r19
    152c:	25 b9       	out	0x05, r18	; 5
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <sendbit+0x22>
    1530:	00 00       	nop
    1532:	00 00       	nop
    1534:	00 00       	nop
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <sendbit+0x22>
    1538:	00 00       	nop
    153a:	00 00       	nop
    153c:	00 00       	nop
    153e:	30 95       	com	r19
    1540:	25 b1       	in	r18, 0x05	; 5
    1542:	23 23       	and	r18, r19
    1544:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1546:	00 00       	nop
    1548:	21 e5       	ldi	r18, 0x51	; 81
    154a:	2a 95       	dec	r18
    154c:	f1 f7       	brne	.-4      	; 0x154a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    154e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1550:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1552:	9a 95       	dec	r25
    brne sendbit
    1554:	01 f7       	brne	.-64     	; 0x1516 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1556:	8a 95       	dec	r24
    brne sendbyte
    1558:	a9 f6       	brne	.-86     	; 0x1504 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    155a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    155c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    155e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1560:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1562:	30 91 53 01 	lds	r19, 0x0153
    com tmpreg2
    1566:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1568:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    156a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    156c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    156e:	0f be       	out	0x3f, r0	; 63
    return 1
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	08 95       	ret

00001574 <main>:
    }
}

int main()
{
    kilo_init();
    1574:	0e 94 4b 01 	call	0x296	; 0x296 <kilo_init>
    debug_init();
    1578:	0e 94 d5 00 	call	0x1aa	; 0x1aa <debug_init>
    kilo_start(setup, loop);
    157c:	6e e8       	ldi	r22, 0x8E	; 142
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	8a e7       	ldi	r24, 0x7A	; 122
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 47 02 	call	0x48e	; 0x48e <kilo_start>

    return 0;
}
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	08 95       	ret

0000158e <__divmodhi4>:
    158e:	97 fb       	bst	r25, 7
    1590:	07 2e       	mov	r0, r23
    1592:	16 f4       	brtc	.+4      	; 0x1598 <__divmodhi4+0xa>
    1594:	00 94       	com	r0
    1596:	07 d0       	rcall	.+14     	; 0x15a6 <__divmodhi4_neg1>
    1598:	77 fd       	sbrc	r23, 7
    159a:	09 d0       	rcall	.+18     	; 0x15ae <__divmodhi4_neg2>
    159c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__udivmodhi4>
    15a0:	07 fc       	sbrc	r0, 7
    15a2:	05 d0       	rcall	.+10     	; 0x15ae <__divmodhi4_neg2>
    15a4:	3e f4       	brtc	.+14     	; 0x15b4 <__divmodhi4_exit>

000015a6 <__divmodhi4_neg1>:
    15a6:	90 95       	com	r25
    15a8:	81 95       	neg	r24
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	08 95       	ret

000015ae <__divmodhi4_neg2>:
    15ae:	70 95       	com	r23
    15b0:	61 95       	neg	r22
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255

000015b4 <__divmodhi4_exit>:
    15b4:	08 95       	ret

000015b6 <__tablejump2__>:
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	05 90       	lpm	r0, Z+
    15bc:	f4 91       	lpm	r31, Z
    15be:	e0 2d       	mov	r30, r0
    15c0:	09 94       	ijmp

000015c2 <__umulhisi3>:
    15c2:	a2 9f       	mul	r26, r18
    15c4:	b0 01       	movw	r22, r0
    15c6:	b3 9f       	mul	r27, r19
    15c8:	c0 01       	movw	r24, r0
    15ca:	a3 9f       	mul	r26, r19
    15cc:	70 0d       	add	r23, r0
    15ce:	81 1d       	adc	r24, r1
    15d0:	11 24       	eor	r1, r1
    15d2:	91 1d       	adc	r25, r1
    15d4:	b2 9f       	mul	r27, r18
    15d6:	70 0d       	add	r23, r0
    15d8:	81 1d       	adc	r24, r1
    15da:	11 24       	eor	r1, r1
    15dc:	91 1d       	adc	r25, r1
    15de:	08 95       	ret

000015e0 <__udivmodhi4>:
    15e0:	aa 1b       	sub	r26, r26
    15e2:	bb 1b       	sub	r27, r27
    15e4:	51 e1       	ldi	r21, 0x11	; 17
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <__udivmodhi4_ep>

000015e8 <__udivmodhi4_loop>:
    15e8:	aa 1f       	adc	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	a6 17       	cp	r26, r22
    15ee:	b7 07       	cpc	r27, r23
    15f0:	10 f0       	brcs	.+4      	; 0x15f6 <__udivmodhi4_ep>
    15f2:	a6 1b       	sub	r26, r22
    15f4:	b7 0b       	sbc	r27, r23

000015f6 <__udivmodhi4_ep>:
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	5a 95       	dec	r21
    15fc:	a9 f7       	brne	.-22     	; 0x15e8 <__udivmodhi4_loop>
    15fe:	80 95       	com	r24
    1600:	90 95       	com	r25
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	08 95       	ret

00001608 <__subsf3>:
    1608:	50 58       	subi	r21, 0x80	; 128

0000160a <__addsf3>:
    160a:	bb 27       	eor	r27, r27
    160c:	aa 27       	eor	r26, r26
    160e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__addsf3x>
    1612:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_round>
    1616:	0e 94 5f 0c 	call	0x18be	; 0x18be <__fp_pscA>
    161a:	38 f0       	brcs	.+14     	; 0x162a <__addsf3+0x20>
    161c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fp_pscB>
    1620:	20 f0       	brcs	.+8      	; 0x162a <__addsf3+0x20>
    1622:	39 f4       	brne	.+14     	; 0x1632 <__addsf3+0x28>
    1624:	9f 3f       	cpi	r25, 0xFF	; 255
    1626:	19 f4       	brne	.+6      	; 0x162e <__addsf3+0x24>
    1628:	26 f4       	brtc	.+8      	; 0x1632 <__addsf3+0x28>
    162a:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__fp_nan>
    162e:	0e f4       	brtc	.+2      	; 0x1632 <__addsf3+0x28>
    1630:	e0 95       	com	r30
    1632:	e7 fb       	bst	r30, 7
    1634:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__fp_inf>

00001638 <__addsf3x>:
    1638:	e9 2f       	mov	r30, r25
    163a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_split3>
    163e:	58 f3       	brcs	.-42     	; 0x1616 <__addsf3+0xc>
    1640:	ba 17       	cp	r27, r26
    1642:	62 07       	cpc	r22, r18
    1644:	73 07       	cpc	r23, r19
    1646:	84 07       	cpc	r24, r20
    1648:	95 07       	cpc	r25, r21
    164a:	20 f0       	brcs	.+8      	; 0x1654 <__addsf3x+0x1c>
    164c:	79 f4       	brne	.+30     	; 0x166c <__addsf3x+0x34>
    164e:	a6 f5       	brtc	.+104    	; 0x16b8 <__addsf3x+0x80>
    1650:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__fp_zero>
    1654:	0e f4       	brtc	.+2      	; 0x1658 <__addsf3x+0x20>
    1656:	e0 95       	com	r30
    1658:	0b 2e       	mov	r0, r27
    165a:	ba 2f       	mov	r27, r26
    165c:	a0 2d       	mov	r26, r0
    165e:	0b 01       	movw	r0, r22
    1660:	b9 01       	movw	r22, r18
    1662:	90 01       	movw	r18, r0
    1664:	0c 01       	movw	r0, r24
    1666:	ca 01       	movw	r24, r20
    1668:	a0 01       	movw	r20, r0
    166a:	11 24       	eor	r1, r1
    166c:	ff 27       	eor	r31, r31
    166e:	59 1b       	sub	r21, r25
    1670:	99 f0       	breq	.+38     	; 0x1698 <__addsf3x+0x60>
    1672:	59 3f       	cpi	r21, 0xF9	; 249
    1674:	50 f4       	brcc	.+20     	; 0x168a <__addsf3x+0x52>
    1676:	50 3e       	cpi	r21, 0xE0	; 224
    1678:	68 f1       	brcs	.+90     	; 0x16d4 <__addsf3x+0x9c>
    167a:	1a 16       	cp	r1, r26
    167c:	f0 40       	sbci	r31, 0x00	; 0
    167e:	a2 2f       	mov	r26, r18
    1680:	23 2f       	mov	r18, r19
    1682:	34 2f       	mov	r19, r20
    1684:	44 27       	eor	r20, r20
    1686:	58 5f       	subi	r21, 0xF8	; 248
    1688:	f3 cf       	rjmp	.-26     	; 0x1670 <__addsf3x+0x38>
    168a:	46 95       	lsr	r20
    168c:	37 95       	ror	r19
    168e:	27 95       	ror	r18
    1690:	a7 95       	ror	r26
    1692:	f0 40       	sbci	r31, 0x00	; 0
    1694:	53 95       	inc	r21
    1696:	c9 f7       	brne	.-14     	; 0x168a <__addsf3x+0x52>
    1698:	7e f4       	brtc	.+30     	; 0x16b8 <__addsf3x+0x80>
    169a:	1f 16       	cp	r1, r31
    169c:	ba 0b       	sbc	r27, r26
    169e:	62 0b       	sbc	r22, r18
    16a0:	73 0b       	sbc	r23, r19
    16a2:	84 0b       	sbc	r24, r20
    16a4:	ba f0       	brmi	.+46     	; 0x16d4 <__addsf3x+0x9c>
    16a6:	91 50       	subi	r25, 0x01	; 1
    16a8:	a1 f0       	breq	.+40     	; 0x16d2 <__addsf3x+0x9a>
    16aa:	ff 0f       	add	r31, r31
    16ac:	bb 1f       	adc	r27, r27
    16ae:	66 1f       	adc	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	c2 f7       	brpl	.-16     	; 0x16a6 <__addsf3x+0x6e>
    16b6:	0e c0       	rjmp	.+28     	; 0x16d4 <__addsf3x+0x9c>
    16b8:	ba 0f       	add	r27, r26
    16ba:	62 1f       	adc	r22, r18
    16bc:	73 1f       	adc	r23, r19
    16be:	84 1f       	adc	r24, r20
    16c0:	48 f4       	brcc	.+18     	; 0x16d4 <__addsf3x+0x9c>
    16c2:	87 95       	ror	r24
    16c4:	77 95       	ror	r23
    16c6:	67 95       	ror	r22
    16c8:	b7 95       	ror	r27
    16ca:	f7 95       	ror	r31
    16cc:	9e 3f       	cpi	r25, 0xFE	; 254
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <__addsf3x+0x9a>
    16d0:	b0 cf       	rjmp	.-160    	; 0x1632 <__addsf3+0x28>
    16d2:	93 95       	inc	r25
    16d4:	88 0f       	add	r24, r24
    16d6:	08 f0       	brcs	.+2      	; 0x16da <__addsf3x+0xa2>
    16d8:	99 27       	eor	r25, r25
    16da:	ee 0f       	add	r30, r30
    16dc:	97 95       	ror	r25
    16de:	87 95       	ror	r24
    16e0:	08 95       	ret

000016e2 <__divsf3>:
    16e2:	0e 94 85 0b 	call	0x170a	; 0x170a <__divsf3x>
    16e6:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_round>
    16ea:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fp_pscB>
    16ee:	58 f0       	brcs	.+22     	; 0x1706 <__divsf3+0x24>
    16f0:	0e 94 5f 0c 	call	0x18be	; 0x18be <__fp_pscA>
    16f4:	40 f0       	brcs	.+16     	; 0x1706 <__divsf3+0x24>
    16f6:	29 f4       	brne	.+10     	; 0x1702 <__divsf3+0x20>
    16f8:	5f 3f       	cpi	r21, 0xFF	; 255
    16fa:	29 f0       	breq	.+10     	; 0x1706 <__divsf3+0x24>
    16fc:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__fp_inf>
    1700:	51 11       	cpse	r21, r1
    1702:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__fp_szero>
    1706:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__fp_nan>

0000170a <__divsf3x>:
    170a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_split3>
    170e:	68 f3       	brcs	.-38     	; 0x16ea <__divsf3+0x8>

00001710 <__divsf3_pse>:
    1710:	99 23       	and	r25, r25
    1712:	b1 f3       	breq	.-20     	; 0x1700 <__divsf3+0x1e>
    1714:	55 23       	and	r21, r21
    1716:	91 f3       	breq	.-28     	; 0x16fc <__divsf3+0x1a>
    1718:	95 1b       	sub	r25, r21
    171a:	55 0b       	sbc	r21, r21
    171c:	bb 27       	eor	r27, r27
    171e:	aa 27       	eor	r26, r26
    1720:	62 17       	cp	r22, r18
    1722:	73 07       	cpc	r23, r19
    1724:	84 07       	cpc	r24, r20
    1726:	38 f0       	brcs	.+14     	; 0x1736 <__divsf3_pse+0x26>
    1728:	9f 5f       	subi	r25, 0xFF	; 255
    172a:	5f 4f       	sbci	r21, 0xFF	; 255
    172c:	22 0f       	add	r18, r18
    172e:	33 1f       	adc	r19, r19
    1730:	44 1f       	adc	r20, r20
    1732:	aa 1f       	adc	r26, r26
    1734:	a9 f3       	breq	.-22     	; 0x1720 <__divsf3_pse+0x10>
    1736:	35 d0       	rcall	.+106    	; 0x17a2 <__divsf3_pse+0x92>
    1738:	0e 2e       	mov	r0, r30
    173a:	3a f0       	brmi	.+14     	; 0x174a <__divsf3_pse+0x3a>
    173c:	e0 e8       	ldi	r30, 0x80	; 128
    173e:	32 d0       	rcall	.+100    	; 0x17a4 <__divsf3_pse+0x94>
    1740:	91 50       	subi	r25, 0x01	; 1
    1742:	50 40       	sbci	r21, 0x00	; 0
    1744:	e6 95       	lsr	r30
    1746:	00 1c       	adc	r0, r0
    1748:	ca f7       	brpl	.-14     	; 0x173c <__divsf3_pse+0x2c>
    174a:	2b d0       	rcall	.+86     	; 0x17a2 <__divsf3_pse+0x92>
    174c:	fe 2f       	mov	r31, r30
    174e:	29 d0       	rcall	.+82     	; 0x17a2 <__divsf3_pse+0x92>
    1750:	66 0f       	add	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	88 1f       	adc	r24, r24
    1756:	bb 1f       	adc	r27, r27
    1758:	26 17       	cp	r18, r22
    175a:	37 07       	cpc	r19, r23
    175c:	48 07       	cpc	r20, r24
    175e:	ab 07       	cpc	r26, r27
    1760:	b0 e8       	ldi	r27, 0x80	; 128
    1762:	09 f0       	breq	.+2      	; 0x1766 <__divsf3_pse+0x56>
    1764:	bb 0b       	sbc	r27, r27
    1766:	80 2d       	mov	r24, r0
    1768:	bf 01       	movw	r22, r30
    176a:	ff 27       	eor	r31, r31
    176c:	93 58       	subi	r25, 0x83	; 131
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	3a f0       	brmi	.+14     	; 0x1780 <__divsf3_pse+0x70>
    1772:	9e 3f       	cpi	r25, 0xFE	; 254
    1774:	51 05       	cpc	r21, r1
    1776:	78 f0       	brcs	.+30     	; 0x1796 <__divsf3_pse+0x86>
    1778:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__fp_inf>
    177c:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__fp_szero>
    1780:	5f 3f       	cpi	r21, 0xFF	; 255
    1782:	e4 f3       	brlt	.-8      	; 0x177c <__divsf3_pse+0x6c>
    1784:	98 3e       	cpi	r25, 0xE8	; 232
    1786:	d4 f3       	brlt	.-12     	; 0x177c <__divsf3_pse+0x6c>
    1788:	86 95       	lsr	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b7 95       	ror	r27
    1790:	f7 95       	ror	r31
    1792:	9f 5f       	subi	r25, 0xFF	; 255
    1794:	c9 f7       	brne	.-14     	; 0x1788 <__divsf3_pse+0x78>
    1796:	88 0f       	add	r24, r24
    1798:	91 1d       	adc	r25, r1
    179a:	96 95       	lsr	r25
    179c:	87 95       	ror	r24
    179e:	97 f9       	bld	r25, 7
    17a0:	08 95       	ret
    17a2:	e1 e0       	ldi	r30, 0x01	; 1
    17a4:	66 0f       	add	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	bb 1f       	adc	r27, r27
    17ac:	62 17       	cp	r22, r18
    17ae:	73 07       	cpc	r23, r19
    17b0:	84 07       	cpc	r24, r20
    17b2:	ba 07       	cpc	r27, r26
    17b4:	20 f0       	brcs	.+8      	; 0x17be <__divsf3_pse+0xae>
    17b6:	62 1b       	sub	r22, r18
    17b8:	73 0b       	sbc	r23, r19
    17ba:	84 0b       	sbc	r24, r20
    17bc:	ba 0b       	sbc	r27, r26
    17be:	ee 1f       	adc	r30, r30
    17c0:	88 f7       	brcc	.-30     	; 0x17a4 <__divsf3_pse+0x94>
    17c2:	e0 95       	com	r30
    17c4:	08 95       	ret

000017c6 <__fixsfsi>:
    17c6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fixunssfsi>
    17ca:	68 94       	set
    17cc:	b1 11       	cpse	r27, r1
    17ce:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__fp_szero>
    17d2:	08 95       	ret

000017d4 <__fixunssfsi>:
    17d4:	0e 94 86 0c 	call	0x190c	; 0x190c <__fp_splitA>
    17d8:	88 f0       	brcs	.+34     	; 0x17fc <__fixunssfsi+0x28>
    17da:	9f 57       	subi	r25, 0x7F	; 127
    17dc:	98 f0       	brcs	.+38     	; 0x1804 <__fixunssfsi+0x30>
    17de:	b9 2f       	mov	r27, r25
    17e0:	99 27       	eor	r25, r25
    17e2:	b7 51       	subi	r27, 0x17	; 23
    17e4:	b0 f0       	brcs	.+44     	; 0x1812 <__fixunssfsi+0x3e>
    17e6:	e1 f0       	breq	.+56     	; 0x1820 <__fixunssfsi+0x4c>
    17e8:	66 0f       	add	r22, r22
    17ea:	77 1f       	adc	r23, r23
    17ec:	88 1f       	adc	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	1a f0       	brmi	.+6      	; 0x17f8 <__fixunssfsi+0x24>
    17f2:	ba 95       	dec	r27
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__fixunssfsi+0x14>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <__fixunssfsi+0x4c>
    17f8:	b1 30       	cpi	r27, 0x01	; 1
    17fa:	91 f0       	breq	.+36     	; 0x1820 <__fixunssfsi+0x4c>
    17fc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_zero>
    1800:	b1 e0       	ldi	r27, 0x01	; 1
    1802:	08 95       	ret
    1804:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__fp_zero>
    1808:	67 2f       	mov	r22, r23
    180a:	78 2f       	mov	r23, r24
    180c:	88 27       	eor	r24, r24
    180e:	b8 5f       	subi	r27, 0xF8	; 248
    1810:	39 f0       	breq	.+14     	; 0x1820 <__fixunssfsi+0x4c>
    1812:	b9 3f       	cpi	r27, 0xF9	; 249
    1814:	cc f3       	brlt	.-14     	; 0x1808 <__fixunssfsi+0x34>
    1816:	86 95       	lsr	r24
    1818:	77 95       	ror	r23
    181a:	67 95       	ror	r22
    181c:	b3 95       	inc	r27
    181e:	d9 f7       	brne	.-10     	; 0x1816 <__fixunssfsi+0x42>
    1820:	3e f4       	brtc	.+14     	; 0x1830 <__fixunssfsi+0x5c>
    1822:	90 95       	com	r25
    1824:	80 95       	com	r24
    1826:	70 95       	com	r23
    1828:	61 95       	neg	r22
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	08 95       	ret

00001832 <__floatunsisf>:
    1832:	e8 94       	clt
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <__floatsisf+0x12>

00001836 <__floatsisf>:
    1836:	97 fb       	bst	r25, 7
    1838:	3e f4       	brtc	.+14     	; 0x1848 <__floatsisf+0x12>
    183a:	90 95       	com	r25
    183c:	80 95       	com	r24
    183e:	70 95       	com	r23
    1840:	61 95       	neg	r22
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8f 4f       	sbci	r24, 0xFF	; 255
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	99 23       	and	r25, r25
    184a:	a9 f0       	breq	.+42     	; 0x1876 <__floatsisf+0x40>
    184c:	f9 2f       	mov	r31, r25
    184e:	96 e9       	ldi	r25, 0x96	; 150
    1850:	bb 27       	eor	r27, r27
    1852:	93 95       	inc	r25
    1854:	f6 95       	lsr	r31
    1856:	87 95       	ror	r24
    1858:	77 95       	ror	r23
    185a:	67 95       	ror	r22
    185c:	b7 95       	ror	r27
    185e:	f1 11       	cpse	r31, r1
    1860:	f8 cf       	rjmp	.-16     	; 0x1852 <__floatsisf+0x1c>
    1862:	fa f4       	brpl	.+62     	; 0x18a2 <__floatsisf+0x6c>
    1864:	bb 0f       	add	r27, r27
    1866:	11 f4       	brne	.+4      	; 0x186c <__floatsisf+0x36>
    1868:	60 ff       	sbrs	r22, 0
    186a:	1b c0       	rjmp	.+54     	; 0x18a2 <__floatsisf+0x6c>
    186c:	6f 5f       	subi	r22, 0xFF	; 255
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	8f 4f       	sbci	r24, 0xFF	; 255
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	16 c0       	rjmp	.+44     	; 0x18a2 <__floatsisf+0x6c>
    1876:	88 23       	and	r24, r24
    1878:	11 f0       	breq	.+4      	; 0x187e <__floatsisf+0x48>
    187a:	96 e9       	ldi	r25, 0x96	; 150
    187c:	11 c0       	rjmp	.+34     	; 0x18a0 <__floatsisf+0x6a>
    187e:	77 23       	and	r23, r23
    1880:	21 f0       	breq	.+8      	; 0x188a <__floatsisf+0x54>
    1882:	9e e8       	ldi	r25, 0x8E	; 142
    1884:	87 2f       	mov	r24, r23
    1886:	76 2f       	mov	r23, r22
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <__floatsisf+0x5e>
    188a:	66 23       	and	r22, r22
    188c:	71 f0       	breq	.+28     	; 0x18aa <__floatsisf+0x74>
    188e:	96 e8       	ldi	r25, 0x86	; 134
    1890:	86 2f       	mov	r24, r22
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	2a f0       	brmi	.+10     	; 0x18a2 <__floatsisf+0x6c>
    1898:	9a 95       	dec	r25
    189a:	66 0f       	add	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	da f7       	brpl	.-10     	; 0x1898 <__floatsisf+0x62>
    18a2:	88 0f       	add	r24, r24
    18a4:	96 95       	lsr	r25
    18a6:	87 95       	ror	r24
    18a8:	97 f9       	bld	r25, 7
    18aa:	08 95       	ret

000018ac <__fp_inf>:
    18ac:	97 f9       	bld	r25, 7
    18ae:	9f 67       	ori	r25, 0x7F	; 127
    18b0:	80 e8       	ldi	r24, 0x80	; 128
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	08 95       	ret

000018b8 <__fp_nan>:
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	80 ec       	ldi	r24, 0xC0	; 192
    18bc:	08 95       	ret

000018be <__fp_pscA>:
    18be:	00 24       	eor	r0, r0
    18c0:	0a 94       	dec	r0
    18c2:	16 16       	cp	r1, r22
    18c4:	17 06       	cpc	r1, r23
    18c6:	18 06       	cpc	r1, r24
    18c8:	09 06       	cpc	r0, r25
    18ca:	08 95       	ret

000018cc <__fp_pscB>:
    18cc:	00 24       	eor	r0, r0
    18ce:	0a 94       	dec	r0
    18d0:	12 16       	cp	r1, r18
    18d2:	13 06       	cpc	r1, r19
    18d4:	14 06       	cpc	r1, r20
    18d6:	05 06       	cpc	r0, r21
    18d8:	08 95       	ret

000018da <__fp_round>:
    18da:	09 2e       	mov	r0, r25
    18dc:	03 94       	inc	r0
    18de:	00 0c       	add	r0, r0
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <__fp_round+0xc>
    18e2:	88 23       	and	r24, r24
    18e4:	52 f0       	brmi	.+20     	; 0x18fa <__fp_round+0x20>
    18e6:	bb 0f       	add	r27, r27
    18e8:	40 f4       	brcc	.+16     	; 0x18fa <__fp_round+0x20>
    18ea:	bf 2b       	or	r27, r31
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <__fp_round+0x18>
    18ee:	60 ff       	sbrs	r22, 0
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <__fp_round+0x20>
    18f2:	6f 5f       	subi	r22, 0xFF	; 255
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	8f 4f       	sbci	r24, 0xFF	; 255
    18f8:	9f 4f       	sbci	r25, 0xFF	; 255
    18fa:	08 95       	ret

000018fc <__fp_split3>:
    18fc:	57 fd       	sbrc	r21, 7
    18fe:	90 58       	subi	r25, 0x80	; 128
    1900:	44 0f       	add	r20, r20
    1902:	55 1f       	adc	r21, r21
    1904:	59 f0       	breq	.+22     	; 0x191c <__fp_splitA+0x10>
    1906:	5f 3f       	cpi	r21, 0xFF	; 255
    1908:	71 f0       	breq	.+28     	; 0x1926 <__fp_splitA+0x1a>
    190a:	47 95       	ror	r20

0000190c <__fp_splitA>:
    190c:	88 0f       	add	r24, r24
    190e:	97 fb       	bst	r25, 7
    1910:	99 1f       	adc	r25, r25
    1912:	61 f0       	breq	.+24     	; 0x192c <__fp_splitA+0x20>
    1914:	9f 3f       	cpi	r25, 0xFF	; 255
    1916:	79 f0       	breq	.+30     	; 0x1936 <__fp_splitA+0x2a>
    1918:	87 95       	ror	r24
    191a:	08 95       	ret
    191c:	12 16       	cp	r1, r18
    191e:	13 06       	cpc	r1, r19
    1920:	14 06       	cpc	r1, r20
    1922:	55 1f       	adc	r21, r21
    1924:	f2 cf       	rjmp	.-28     	; 0x190a <__fp_split3+0xe>
    1926:	46 95       	lsr	r20
    1928:	f1 df       	rcall	.-30     	; 0x190c <__fp_splitA>
    192a:	08 c0       	rjmp	.+16     	; 0x193c <__fp_splitA+0x30>
    192c:	16 16       	cp	r1, r22
    192e:	17 06       	cpc	r1, r23
    1930:	18 06       	cpc	r1, r24
    1932:	99 1f       	adc	r25, r25
    1934:	f1 cf       	rjmp	.-30     	; 0x1918 <__fp_splitA+0xc>
    1936:	86 95       	lsr	r24
    1938:	71 05       	cpc	r23, r1
    193a:	61 05       	cpc	r22, r1
    193c:	08 94       	sec
    193e:	08 95       	ret

00001940 <__fp_zero>:
    1940:	e8 94       	clt

00001942 <__fp_szero>:
    1942:	bb 27       	eor	r27, r27
    1944:	66 27       	eor	r22, r22
    1946:	77 27       	eor	r23, r23
    1948:	cb 01       	movw	r24, r22
    194a:	97 f9       	bld	r25, 7
    194c:	08 95       	ret

0000194e <__mulsf3>:
    194e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__mulsf3x>
    1952:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_round>
    1956:	0e 94 5f 0c 	call	0x18be	; 0x18be <__fp_pscA>
    195a:	38 f0       	brcs	.+14     	; 0x196a <__mulsf3+0x1c>
    195c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fp_pscB>
    1960:	20 f0       	brcs	.+8      	; 0x196a <__mulsf3+0x1c>
    1962:	95 23       	and	r25, r21
    1964:	11 f0       	breq	.+4      	; 0x196a <__mulsf3+0x1c>
    1966:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__fp_inf>
    196a:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__fp_nan>
    196e:	11 24       	eor	r1, r1
    1970:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__fp_szero>

00001974 <__mulsf3x>:
    1974:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_split3>
    1978:	70 f3       	brcs	.-36     	; 0x1956 <__mulsf3+0x8>

0000197a <__mulsf3_pse>:
    197a:	95 9f       	mul	r25, r21
    197c:	c1 f3       	breq	.-16     	; 0x196e <__mulsf3+0x20>
    197e:	95 0f       	add	r25, r21
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	55 1f       	adc	r21, r21
    1984:	62 9f       	mul	r22, r18
    1986:	f0 01       	movw	r30, r0
    1988:	72 9f       	mul	r23, r18
    198a:	bb 27       	eor	r27, r27
    198c:	f0 0d       	add	r31, r0
    198e:	b1 1d       	adc	r27, r1
    1990:	63 9f       	mul	r22, r19
    1992:	aa 27       	eor	r26, r26
    1994:	f0 0d       	add	r31, r0
    1996:	b1 1d       	adc	r27, r1
    1998:	aa 1f       	adc	r26, r26
    199a:	64 9f       	mul	r22, r20
    199c:	66 27       	eor	r22, r22
    199e:	b0 0d       	add	r27, r0
    19a0:	a1 1d       	adc	r26, r1
    19a2:	66 1f       	adc	r22, r22
    19a4:	82 9f       	mul	r24, r18
    19a6:	22 27       	eor	r18, r18
    19a8:	b0 0d       	add	r27, r0
    19aa:	a1 1d       	adc	r26, r1
    19ac:	62 1f       	adc	r22, r18
    19ae:	73 9f       	mul	r23, r19
    19b0:	b0 0d       	add	r27, r0
    19b2:	a1 1d       	adc	r26, r1
    19b4:	62 1f       	adc	r22, r18
    19b6:	83 9f       	mul	r24, r19
    19b8:	a0 0d       	add	r26, r0
    19ba:	61 1d       	adc	r22, r1
    19bc:	22 1f       	adc	r18, r18
    19be:	74 9f       	mul	r23, r20
    19c0:	33 27       	eor	r19, r19
    19c2:	a0 0d       	add	r26, r0
    19c4:	61 1d       	adc	r22, r1
    19c6:	23 1f       	adc	r18, r19
    19c8:	84 9f       	mul	r24, r20
    19ca:	60 0d       	add	r22, r0
    19cc:	21 1d       	adc	r18, r1
    19ce:	82 2f       	mov	r24, r18
    19d0:	76 2f       	mov	r23, r22
    19d2:	6a 2f       	mov	r22, r26
    19d4:	11 24       	eor	r1, r1
    19d6:	9f 57       	subi	r25, 0x7F	; 127
    19d8:	50 40       	sbci	r21, 0x00	; 0
    19da:	9a f0       	brmi	.+38     	; 0x1a02 <__mulsf3_pse+0x88>
    19dc:	f1 f0       	breq	.+60     	; 0x1a1a <__mulsf3_pse+0xa0>
    19de:	88 23       	and	r24, r24
    19e0:	4a f0       	brmi	.+18     	; 0x19f4 <__mulsf3_pse+0x7a>
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	bb 1f       	adc	r27, r27
    19e8:	66 1f       	adc	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	91 50       	subi	r25, 0x01	; 1
    19f0:	50 40       	sbci	r21, 0x00	; 0
    19f2:	a9 f7       	brne	.-22     	; 0x19de <__mulsf3_pse+0x64>
    19f4:	9e 3f       	cpi	r25, 0xFE	; 254
    19f6:	51 05       	cpc	r21, r1
    19f8:	80 f0       	brcs	.+32     	; 0x1a1a <__mulsf3_pse+0xa0>
    19fa:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__fp_inf>
    19fe:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__fp_szero>
    1a02:	5f 3f       	cpi	r21, 0xFF	; 255
    1a04:	e4 f3       	brlt	.-8      	; 0x19fe <__mulsf3_pse+0x84>
    1a06:	98 3e       	cpi	r25, 0xE8	; 232
    1a08:	d4 f3       	brlt	.-12     	; 0x19fe <__mulsf3_pse+0x84>
    1a0a:	86 95       	lsr	r24
    1a0c:	77 95       	ror	r23
    1a0e:	67 95       	ror	r22
    1a10:	b7 95       	ror	r27
    1a12:	f7 95       	ror	r31
    1a14:	e7 95       	ror	r30
    1a16:	9f 5f       	subi	r25, 0xFF	; 255
    1a18:	c1 f7       	brne	.-16     	; 0x1a0a <__mulsf3_pse+0x90>
    1a1a:	fe 2b       	or	r31, r30
    1a1c:	88 0f       	add	r24, r24
    1a1e:	91 1d       	adc	r25, r1
    1a20:	96 95       	lsr	r25
    1a22:	87 95       	ror	r24
    1a24:	97 f9       	bld	r25, 7
    1a26:	08 95       	ret

00001a28 <do_rand>:
    1a28:	8f 92       	push	r8
    1a2a:	9f 92       	push	r9
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	ec 01       	movw	r28, r24
    1a3e:	68 81       	ld	r22, Y
    1a40:	79 81       	ldd	r23, Y+1	; 0x01
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	9b 81       	ldd	r25, Y+3	; 0x03
    1a46:	61 15       	cp	r22, r1
    1a48:	71 05       	cpc	r23, r1
    1a4a:	81 05       	cpc	r24, r1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	21 f4       	brne	.+8      	; 0x1a58 <do_rand+0x30>
    1a50:	64 e2       	ldi	r22, 0x24	; 36
    1a52:	79 ed       	ldi	r23, 0xD9	; 217
    1a54:	8b e5       	ldi	r24, 0x5B	; 91
    1a56:	97 e0       	ldi	r25, 0x07	; 7
    1a58:	2d e1       	ldi	r18, 0x1D	; 29
    1a5a:	33 ef       	ldi	r19, 0xF3	; 243
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	0e 94 1a 10 	call	0x2034	; 0x2034 <__divmodsi4>
    1a64:	49 01       	movw	r8, r18
    1a66:	5a 01       	movw	r10, r20
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	a7 ea       	ldi	r26, 0xA7	; 167
    1a6e:	b1 e4       	ldi	r27, 0x41	; 65
    1a70:	0e 94 39 10 	call	0x2072	; 0x2072 <__muluhisi3>
    1a74:	6b 01       	movw	r12, r22
    1a76:	7c 01       	movw	r14, r24
    1a78:	ac ee       	ldi	r26, 0xEC	; 236
    1a7a:	b4 ef       	ldi	r27, 0xF4	; 244
    1a7c:	a5 01       	movw	r20, r10
    1a7e:	94 01       	movw	r18, r8
    1a80:	0e 94 47 10 	call	0x208e	; 0x208e <__mulohisi3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8c 0d       	add	r24, r12
    1a8a:	9d 1d       	adc	r25, r13
    1a8c:	ae 1d       	adc	r26, r14
    1a8e:	bf 1d       	adc	r27, r15
    1a90:	b7 ff       	sbrs	r27, 7
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <do_rand+0x72>
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	a1 09       	sbc	r26, r1
    1a98:	b0 48       	sbci	r27, 0x80	; 128
    1a9a:	88 83       	st	Y, r24
    1a9c:	99 83       	std	Y+1, r25	; 0x01
    1a9e:	aa 83       	std	Y+2, r26	; 0x02
    1aa0:	bb 83       	std	Y+3, r27	; 0x03
    1aa2:	9f 77       	andi	r25, 0x7F	; 127
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	9f 90       	pop	r9
    1ab6:	8f 90       	pop	r8
    1ab8:	08 95       	ret

00001aba <rand_r>:
    1aba:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <do_rand>
    1abe:	08 95       	ret

00001ac0 <rand>:
    1ac0:	85 e1       	ldi	r24, 0x15	; 21
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <do_rand>
    1ac8:	08 95       	ret

00001aca <srand>:
    1aca:	a0 e0       	ldi	r26, 0x00	; 0
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	80 93 15 01 	sts	0x0115, r24
    1ad2:	90 93 16 01 	sts	0x0116, r25
    1ad6:	a0 93 17 01 	sts	0x0117, r26
    1ada:	b0 93 18 01 	sts	0x0118, r27
    1ade:	08 95       	ret

00001ae0 <printf>:
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e6 e7       	ldi	r30, 0x76	; 118
    1ae6:	fd e0       	ldi	r31, 0x0D	; 13
    1ae8:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__prologue_saves__+0x20>
    1aec:	ae 01       	movw	r20, r28
    1aee:	4b 5f       	subi	r20, 0xFB	; 251
    1af0:	5f 4f       	sbci	r21, 0xFF	; 255
    1af2:	fa 01       	movw	r30, r20
    1af4:	61 91       	ld	r22, Z+
    1af6:	71 91       	ld	r23, Z+
    1af8:	af 01       	movw	r20, r30
    1afa:	80 91 96 01 	lds	r24, 0x0196
    1afe:	90 91 97 01 	lds	r25, 0x0197
    1b02:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <vfprintf>
    1b06:	e2 e0       	ldi	r30, 0x02	; 2
    1b08:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__epilogue_restores__+0x20>

00001b0c <vfprintf>:
    1b0c:	ac e0       	ldi	r26, 0x0C	; 12
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ec e8       	ldi	r30, 0x8C	; 140
    1b12:	fd e0       	ldi	r31, 0x0D	; 13
    1b14:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__>
    1b18:	7c 01       	movw	r14, r24
    1b1a:	6b 01       	movw	r12, r22
    1b1c:	8a 01       	movw	r16, r20
    1b1e:	fc 01       	movw	r30, r24
    1b20:	17 82       	std	Z+7, r1	; 0x07
    1b22:	16 82       	std	Z+6, r1	; 0x06
    1b24:	83 81       	ldd	r24, Z+3	; 0x03
    1b26:	81 ff       	sbrs	r24, 1
    1b28:	bd c1       	rjmp	.+890    	; 0x1ea4 <vfprintf+0x398>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	4c 01       	movw	r8, r24
    1b30:	f7 01       	movw	r30, r14
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	f6 01       	movw	r30, r12
    1b36:	93 fd       	sbrc	r25, 3
    1b38:	85 91       	lpm	r24, Z+
    1b3a:	93 ff       	sbrs	r25, 3
    1b3c:	81 91       	ld	r24, Z+
    1b3e:	6f 01       	movw	r12, r30
    1b40:	88 23       	and	r24, r24
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <vfprintf+0x3a>
    1b44:	ab c1       	rjmp	.+854    	; 0x1e9c <vfprintf+0x390>
    1b46:	85 32       	cpi	r24, 0x25	; 37
    1b48:	39 f4       	brne	.+14     	; 0x1b58 <vfprintf+0x4c>
    1b4a:	93 fd       	sbrc	r25, 3
    1b4c:	85 91       	lpm	r24, Z+
    1b4e:	93 ff       	sbrs	r25, 3
    1b50:	81 91       	ld	r24, Z+
    1b52:	6f 01       	movw	r12, r30
    1b54:	85 32       	cpi	r24, 0x25	; 37
    1b56:	29 f4       	brne	.+10     	; 0x1b62 <vfprintf+0x56>
    1b58:	b7 01       	movw	r22, r14
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1b60:	e7 cf       	rjmp	.-50     	; 0x1b30 <vfprintf+0x24>
    1b62:	51 2c       	mov	r5, r1
    1b64:	31 2c       	mov	r3, r1
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	20 32       	cpi	r18, 0x20	; 32
    1b6a:	a0 f4       	brcc	.+40     	; 0x1b94 <vfprintf+0x88>
    1b6c:	8b 32       	cpi	r24, 0x2B	; 43
    1b6e:	69 f0       	breq	.+26     	; 0x1b8a <vfprintf+0x7e>
    1b70:	30 f4       	brcc	.+12     	; 0x1b7e <vfprintf+0x72>
    1b72:	80 32       	cpi	r24, 0x20	; 32
    1b74:	59 f0       	breq	.+22     	; 0x1b8c <vfprintf+0x80>
    1b76:	83 32       	cpi	r24, 0x23	; 35
    1b78:	69 f4       	brne	.+26     	; 0x1b94 <vfprintf+0x88>
    1b7a:	20 61       	ori	r18, 0x10	; 16
    1b7c:	2c c0       	rjmp	.+88     	; 0x1bd6 <vfprintf+0xca>
    1b7e:	8d 32       	cpi	r24, 0x2D	; 45
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <vfprintf+0x84>
    1b82:	80 33       	cpi	r24, 0x30	; 48
    1b84:	39 f4       	brne	.+14     	; 0x1b94 <vfprintf+0x88>
    1b86:	21 60       	ori	r18, 0x01	; 1
    1b88:	26 c0       	rjmp	.+76     	; 0x1bd6 <vfprintf+0xca>
    1b8a:	22 60       	ori	r18, 0x02	; 2
    1b8c:	24 60       	ori	r18, 0x04	; 4
    1b8e:	23 c0       	rjmp	.+70     	; 0x1bd6 <vfprintf+0xca>
    1b90:	28 60       	ori	r18, 0x08	; 8
    1b92:	21 c0       	rjmp	.+66     	; 0x1bd6 <vfprintf+0xca>
    1b94:	27 fd       	sbrc	r18, 7
    1b96:	27 c0       	rjmp	.+78     	; 0x1be6 <vfprintf+0xda>
    1b98:	30 ed       	ldi	r19, 0xD0	; 208
    1b9a:	38 0f       	add	r19, r24
    1b9c:	3a 30       	cpi	r19, 0x0A	; 10
    1b9e:	78 f4       	brcc	.+30     	; 0x1bbe <vfprintf+0xb2>
    1ba0:	26 ff       	sbrs	r18, 6
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <vfprintf+0xa4>
    1ba4:	fa e0       	ldi	r31, 0x0A	; 10
    1ba6:	5f 9e       	mul	r5, r31
    1ba8:	30 0d       	add	r19, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	53 2e       	mov	r5, r19
    1bae:	13 c0       	rjmp	.+38     	; 0x1bd6 <vfprintf+0xca>
    1bb0:	8a e0       	ldi	r24, 0x0A	; 10
    1bb2:	38 9e       	mul	r3, r24
    1bb4:	30 0d       	add	r19, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	33 2e       	mov	r3, r19
    1bba:	20 62       	ori	r18, 0x20	; 32
    1bbc:	0c c0       	rjmp	.+24     	; 0x1bd6 <vfprintf+0xca>
    1bbe:	8e 32       	cpi	r24, 0x2E	; 46
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <vfprintf+0xbe>
    1bc2:	26 fd       	sbrc	r18, 6
    1bc4:	6b c1       	rjmp	.+726    	; 0x1e9c <vfprintf+0x390>
    1bc6:	20 64       	ori	r18, 0x40	; 64
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <vfprintf+0xca>
    1bca:	8c 36       	cpi	r24, 0x6C	; 108
    1bcc:	11 f4       	brne	.+4      	; 0x1bd2 <vfprintf+0xc6>
    1bce:	20 68       	ori	r18, 0x80	; 128
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <vfprintf+0xca>
    1bd2:	88 36       	cpi	r24, 0x68	; 104
    1bd4:	41 f4       	brne	.+16     	; 0x1be6 <vfprintf+0xda>
    1bd6:	f6 01       	movw	r30, r12
    1bd8:	93 fd       	sbrc	r25, 3
    1bda:	85 91       	lpm	r24, Z+
    1bdc:	93 ff       	sbrs	r25, 3
    1bde:	81 91       	ld	r24, Z+
    1be0:	6f 01       	movw	r12, r30
    1be2:	81 11       	cpse	r24, r1
    1be4:	c1 cf       	rjmp	.-126    	; 0x1b68 <vfprintf+0x5c>
    1be6:	98 2f       	mov	r25, r24
    1be8:	9f 7d       	andi	r25, 0xDF	; 223
    1bea:	95 54       	subi	r25, 0x45	; 69
    1bec:	93 30       	cpi	r25, 0x03	; 3
    1bee:	28 f4       	brcc	.+10     	; 0x1bfa <vfprintf+0xee>
    1bf0:	0c 5f       	subi	r16, 0xFC	; 252
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	ff e3       	ldi	r31, 0x3F	; 63
    1bf6:	f9 83       	std	Y+1, r31	; 0x01
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <vfprintf+0x108>
    1bfa:	83 36       	cpi	r24, 0x63	; 99
    1bfc:	31 f0       	breq	.+12     	; 0x1c0a <vfprintf+0xfe>
    1bfe:	83 37       	cpi	r24, 0x73	; 115
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <vfprintf+0x112>
    1c02:	83 35       	cpi	r24, 0x53	; 83
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <vfprintf+0xfc>
    1c06:	5b c0       	rjmp	.+182    	; 0x1cbe <vfprintf+0x1b2>
    1c08:	22 c0       	rjmp	.+68     	; 0x1c4e <vfprintf+0x142>
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	80 81       	ld	r24, Z
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	0e 5f       	subi	r16, 0xFE	; 254
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	44 24       	eor	r4, r4
    1c16:	43 94       	inc	r4
    1c18:	51 2c       	mov	r5, r1
    1c1a:	54 01       	movw	r10, r8
    1c1c:	15 c0       	rjmp	.+42     	; 0x1c48 <vfprintf+0x13c>
    1c1e:	38 01       	movw	r6, r16
    1c20:	f2 e0       	ldi	r31, 0x02	; 2
    1c22:	6f 0e       	add	r6, r31
    1c24:	71 1c       	adc	r7, r1
    1c26:	f8 01       	movw	r30, r16
    1c28:	a0 80       	ld	r10, Z
    1c2a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c2c:	26 ff       	sbrs	r18, 6
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <vfprintf+0x12a>
    1c30:	65 2d       	mov	r22, r5
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <vfprintf+0x12e>
    1c36:	6f ef       	ldi	r22, 0xFF	; 255
    1c38:	7f ef       	ldi	r23, 0xFF	; 255
    1c3a:	c5 01       	movw	r24, r10
    1c3c:	2c 87       	std	Y+12, r18	; 0x0c
    1c3e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <strnlen>
    1c42:	2c 01       	movw	r4, r24
    1c44:	83 01       	movw	r16, r6
    1c46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c48:	2f 77       	andi	r18, 0x7F	; 127
    1c4a:	22 2e       	mov	r2, r18
    1c4c:	17 c0       	rjmp	.+46     	; 0x1c7c <vfprintf+0x170>
    1c4e:	38 01       	movw	r6, r16
    1c50:	f2 e0       	ldi	r31, 0x02	; 2
    1c52:	6f 0e       	add	r6, r31
    1c54:	71 1c       	adc	r7, r1
    1c56:	f8 01       	movw	r30, r16
    1c58:	a0 80       	ld	r10, Z
    1c5a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c5c:	26 ff       	sbrs	r18, 6
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <vfprintf+0x15a>
    1c60:	65 2d       	mov	r22, r5
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0x15e>
    1c66:	6f ef       	ldi	r22, 0xFF	; 255
    1c68:	7f ef       	ldi	r23, 0xFF	; 255
    1c6a:	c5 01       	movw	r24, r10
    1c6c:	2c 87       	std	Y+12, r18	; 0x0c
    1c6e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <strnlen_P>
    1c72:	2c 01       	movw	r4, r24
    1c74:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c76:	20 68       	ori	r18, 0x80	; 128
    1c78:	22 2e       	mov	r2, r18
    1c7a:	83 01       	movw	r16, r6
    1c7c:	23 fc       	sbrc	r2, 3
    1c7e:	1b c0       	rjmp	.+54     	; 0x1cb6 <vfprintf+0x1aa>
    1c80:	83 2d       	mov	r24, r3
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	48 16       	cp	r4, r24
    1c86:	59 06       	cpc	r5, r25
    1c88:	b0 f4       	brcc	.+44     	; 0x1cb6 <vfprintf+0x1aa>
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	80 e2       	ldi	r24, 0x20	; 32
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1c94:	3a 94       	dec	r3
    1c96:	f4 cf       	rjmp	.-24     	; 0x1c80 <vfprintf+0x174>
    1c98:	f5 01       	movw	r30, r10
    1c9a:	27 fc       	sbrc	r2, 7
    1c9c:	85 91       	lpm	r24, Z+
    1c9e:	27 fe       	sbrs	r2, 7
    1ca0:	81 91       	ld	r24, Z+
    1ca2:	5f 01       	movw	r10, r30
    1ca4:	b7 01       	movw	r22, r14
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1cac:	31 10       	cpse	r3, r1
    1cae:	3a 94       	dec	r3
    1cb0:	f1 e0       	ldi	r31, 0x01	; 1
    1cb2:	4f 1a       	sub	r4, r31
    1cb4:	51 08       	sbc	r5, r1
    1cb6:	41 14       	cp	r4, r1
    1cb8:	51 04       	cpc	r5, r1
    1cba:	71 f7       	brne	.-36     	; 0x1c98 <vfprintf+0x18c>
    1cbc:	e5 c0       	rjmp	.+458    	; 0x1e88 <vfprintf+0x37c>
    1cbe:	84 36       	cpi	r24, 0x64	; 100
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <vfprintf+0x1ba>
    1cc2:	89 36       	cpi	r24, 0x69	; 105
    1cc4:	39 f5       	brne	.+78     	; 0x1d14 <vfprintf+0x208>
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	27 ff       	sbrs	r18, 7
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <vfprintf+0x1ce>
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	0c 5f       	subi	r16, 0xFC	; 252
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	08 c0       	rjmp	.+16     	; 0x1cea <vfprintf+0x1de>
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	07 2e       	mov	r0, r23
    1ce0:	00 0c       	add	r0, r0
    1ce2:	88 0b       	sbc	r24, r24
    1ce4:	99 0b       	sbc	r25, r25
    1ce6:	0e 5f       	subi	r16, 0xFE	; 254
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	2f 76       	andi	r18, 0x6F	; 111
    1cec:	72 2e       	mov	r7, r18
    1cee:	97 ff       	sbrs	r25, 7
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <vfprintf+0x1f8>
    1cf2:	90 95       	com	r25
    1cf4:	80 95       	com	r24
    1cf6:	70 95       	com	r23
    1cf8:	61 95       	neg	r22
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	20 68       	ori	r18, 0x80	; 128
    1d02:	72 2e       	mov	r7, r18
    1d04:	2a e0       	ldi	r18, 0x0A	; 10
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	a4 01       	movw	r20, r8
    1d0a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__ultoa_invert>
    1d0e:	a8 2e       	mov	r10, r24
    1d10:	a8 18       	sub	r10, r8
    1d12:	44 c0       	rjmp	.+136    	; 0x1d9c <vfprintf+0x290>
    1d14:	85 37       	cpi	r24, 0x75	; 117
    1d16:	29 f4       	brne	.+10     	; 0x1d22 <vfprintf+0x216>
    1d18:	2f 7e       	andi	r18, 0xEF	; 239
    1d1a:	b2 2e       	mov	r11, r18
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	25 c0       	rjmp	.+74     	; 0x1d6c <vfprintf+0x260>
    1d22:	f2 2f       	mov	r31, r18
    1d24:	f9 7f       	andi	r31, 0xF9	; 249
    1d26:	bf 2e       	mov	r11, r31
    1d28:	8f 36       	cpi	r24, 0x6F	; 111
    1d2a:	c1 f0       	breq	.+48     	; 0x1d5c <vfprintf+0x250>
    1d2c:	18 f4       	brcc	.+6      	; 0x1d34 <vfprintf+0x228>
    1d2e:	88 35       	cpi	r24, 0x58	; 88
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <vfprintf+0x244>
    1d32:	b4 c0       	rjmp	.+360    	; 0x1e9c <vfprintf+0x390>
    1d34:	80 37       	cpi	r24, 0x70	; 112
    1d36:	19 f0       	breq	.+6      	; 0x1d3e <vfprintf+0x232>
    1d38:	88 37       	cpi	r24, 0x78	; 120
    1d3a:	21 f0       	breq	.+8      	; 0x1d44 <vfprintf+0x238>
    1d3c:	af c0       	rjmp	.+350    	; 0x1e9c <vfprintf+0x390>
    1d3e:	2f 2f       	mov	r18, r31
    1d40:	20 61       	ori	r18, 0x10	; 16
    1d42:	b2 2e       	mov	r11, r18
    1d44:	b4 fe       	sbrs	r11, 4
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <vfprintf+0x256>
    1d48:	8b 2d       	mov	r24, r11
    1d4a:	84 60       	ori	r24, 0x04	; 4
    1d4c:	b8 2e       	mov	r11, r24
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <vfprintf+0x256>
    1d50:	24 ff       	sbrs	r18, 4
    1d52:	0a c0       	rjmp	.+20     	; 0x1d68 <vfprintf+0x25c>
    1d54:	9f 2f       	mov	r25, r31
    1d56:	96 60       	ori	r25, 0x06	; 6
    1d58:	b9 2e       	mov	r11, r25
    1d5a:	06 c0       	rjmp	.+12     	; 0x1d68 <vfprintf+0x25c>
    1d5c:	28 e0       	ldi	r18, 0x08	; 8
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <vfprintf+0x260>
    1d62:	20 e1       	ldi	r18, 0x10	; 16
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <vfprintf+0x260>
    1d68:	20 e1       	ldi	r18, 0x10	; 16
    1d6a:	32 e0       	ldi	r19, 0x02	; 2
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	b7 fe       	sbrs	r11, 7
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <vfprintf+0x274>
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0c 5f       	subi	r16, 0xFC	; 252
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	06 c0       	rjmp	.+12     	; 0x1d8c <vfprintf+0x280>
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 5f       	subi	r16, 0xFE	; 254
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	a4 01       	movw	r20, r8
    1d8e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__ultoa_invert>
    1d92:	a8 2e       	mov	r10, r24
    1d94:	a8 18       	sub	r10, r8
    1d96:	fb 2d       	mov	r31, r11
    1d98:	ff 77       	andi	r31, 0x7F	; 127
    1d9a:	7f 2e       	mov	r7, r31
    1d9c:	76 fe       	sbrs	r7, 6
    1d9e:	0b c0       	rjmp	.+22     	; 0x1db6 <vfprintf+0x2aa>
    1da0:	37 2d       	mov	r19, r7
    1da2:	3e 7f       	andi	r19, 0xFE	; 254
    1da4:	a5 14       	cp	r10, r5
    1da6:	50 f4       	brcc	.+20     	; 0x1dbc <vfprintf+0x2b0>
    1da8:	74 fe       	sbrs	r7, 4
    1daa:	0a c0       	rjmp	.+20     	; 0x1dc0 <vfprintf+0x2b4>
    1dac:	72 fc       	sbrc	r7, 2
    1dae:	08 c0       	rjmp	.+16     	; 0x1dc0 <vfprintf+0x2b4>
    1db0:	37 2d       	mov	r19, r7
    1db2:	3e 7e       	andi	r19, 0xEE	; 238
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <vfprintf+0x2b4>
    1db6:	ba 2c       	mov	r11, r10
    1db8:	37 2d       	mov	r19, r7
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <vfprintf+0x2b6>
    1dbc:	ba 2c       	mov	r11, r10
    1dbe:	01 c0       	rjmp	.+2      	; 0x1dc2 <vfprintf+0x2b6>
    1dc0:	b5 2c       	mov	r11, r5
    1dc2:	34 ff       	sbrs	r19, 4
    1dc4:	0d c0       	rjmp	.+26     	; 0x1de0 <vfprintf+0x2d4>
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ea 0d       	add	r30, r10
    1dca:	f1 1d       	adc	r31, r1
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 33       	cpi	r24, 0x30	; 48
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <vfprintf+0x2ca>
    1dd2:	39 7e       	andi	r19, 0xE9	; 233
    1dd4:	09 c0       	rjmp	.+18     	; 0x1de8 <vfprintf+0x2dc>
    1dd6:	32 ff       	sbrs	r19, 2
    1dd8:	06 c0       	rjmp	.+12     	; 0x1de6 <vfprintf+0x2da>
    1dda:	b3 94       	inc	r11
    1ddc:	b3 94       	inc	r11
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <vfprintf+0x2dc>
    1de0:	83 2f       	mov	r24, r19
    1de2:	86 78       	andi	r24, 0x86	; 134
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <vfprintf+0x2dc>
    1de6:	b3 94       	inc	r11
    1de8:	33 fd       	sbrc	r19, 3
    1dea:	13 c0       	rjmp	.+38     	; 0x1e12 <vfprintf+0x306>
    1dec:	30 ff       	sbrs	r19, 0
    1dee:	06 c0       	rjmp	.+12     	; 0x1dfc <vfprintf+0x2f0>
    1df0:	5a 2c       	mov	r5, r10
    1df2:	b3 14       	cp	r11, r3
    1df4:	18 f4       	brcc	.+6      	; 0x1dfc <vfprintf+0x2f0>
    1df6:	53 0c       	add	r5, r3
    1df8:	5b 18       	sub	r5, r11
    1dfa:	b3 2c       	mov	r11, r3
    1dfc:	b3 14       	cp	r11, r3
    1dfe:	68 f4       	brcc	.+26     	; 0x1e1a <vfprintf+0x30e>
    1e00:	b7 01       	movw	r22, r14
    1e02:	80 e2       	ldi	r24, 0x20	; 32
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	3c 87       	std	Y+12, r19	; 0x0c
    1e08:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e0c:	b3 94       	inc	r11
    1e0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e10:	f5 cf       	rjmp	.-22     	; 0x1dfc <vfprintf+0x2f0>
    1e12:	b3 14       	cp	r11, r3
    1e14:	10 f4       	brcc	.+4      	; 0x1e1a <vfprintf+0x30e>
    1e16:	3b 18       	sub	r3, r11
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <vfprintf+0x310>
    1e1a:	31 2c       	mov	r3, r1
    1e1c:	34 ff       	sbrs	r19, 4
    1e1e:	12 c0       	rjmp	.+36     	; 0x1e44 <vfprintf+0x338>
    1e20:	b7 01       	movw	r22, r14
    1e22:	80 e3       	ldi	r24, 0x30	; 48
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	3c 87       	std	Y+12, r19	; 0x0c
    1e28:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e2e:	32 ff       	sbrs	r19, 2
    1e30:	17 c0       	rjmp	.+46     	; 0x1e60 <vfprintf+0x354>
    1e32:	31 fd       	sbrc	r19, 1
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <vfprintf+0x330>
    1e36:	88 e7       	ldi	r24, 0x78	; 120
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <vfprintf+0x334>
    1e3c:	88 e5       	ldi	r24, 0x58	; 88
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	b7 01       	movw	r22, r14
    1e42:	0c c0       	rjmp	.+24     	; 0x1e5c <vfprintf+0x350>
    1e44:	83 2f       	mov	r24, r19
    1e46:	86 78       	andi	r24, 0x86	; 134
    1e48:	59 f0       	breq	.+22     	; 0x1e60 <vfprintf+0x354>
    1e4a:	31 ff       	sbrs	r19, 1
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <vfprintf+0x346>
    1e4e:	8b e2       	ldi	r24, 0x2B	; 43
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <vfprintf+0x348>
    1e52:	80 e2       	ldi	r24, 0x20	; 32
    1e54:	37 fd       	sbrc	r19, 7
    1e56:	8d e2       	ldi	r24, 0x2D	; 45
    1e58:	b7 01       	movw	r22, r14
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e60:	a5 14       	cp	r10, r5
    1e62:	38 f4       	brcc	.+14     	; 0x1e72 <vfprintf+0x366>
    1e64:	b7 01       	movw	r22, r14
    1e66:	80 e3       	ldi	r24, 0x30	; 48
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e6e:	5a 94       	dec	r5
    1e70:	f7 cf       	rjmp	.-18     	; 0x1e60 <vfprintf+0x354>
    1e72:	aa 94       	dec	r10
    1e74:	f4 01       	movw	r30, r8
    1e76:	ea 0d       	add	r30, r10
    1e78:	f1 1d       	adc	r31, r1
    1e7a:	80 81       	ld	r24, Z
    1e7c:	b7 01       	movw	r22, r14
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e84:	a1 10       	cpse	r10, r1
    1e86:	f5 cf       	rjmp	.-22     	; 0x1e72 <vfprintf+0x366>
    1e88:	33 20       	and	r3, r3
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <vfprintf+0x382>
    1e8c:	51 ce       	rjmp	.-862    	; 0x1b30 <vfprintf+0x24>
    1e8e:	b7 01       	movw	r22, r14
    1e90:	80 e2       	ldi	r24, 0x20	; 32
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <fputc>
    1e98:	3a 94       	dec	r3
    1e9a:	f6 cf       	rjmp	.-20     	; 0x1e88 <vfprintf+0x37c>
    1e9c:	f7 01       	movw	r30, r14
    1e9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ea0:	97 81       	ldd	r25, Z+7	; 0x07
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <vfprintf+0x39c>
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	2c 96       	adiw	r28, 0x0c	; 12
    1eaa:	e2 e1       	ldi	r30, 0x12	; 18
    1eac:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__>

00001eb0 <strnlen_P>:
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	05 90       	lpm	r0, Z+
    1eb4:	61 50       	subi	r22, 0x01	; 1
    1eb6:	70 40       	sbci	r23, 0x00	; 0
    1eb8:	01 10       	cpse	r0, r1
    1eba:	d8 f7       	brcc	.-10     	; 0x1eb2 <strnlen_P+0x2>
    1ebc:	80 95       	com	r24
    1ebe:	90 95       	com	r25
    1ec0:	8e 0f       	add	r24, r30
    1ec2:	9f 1f       	adc	r25, r31
    1ec4:	08 95       	ret

00001ec6 <strnlen>:
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	61 50       	subi	r22, 0x01	; 1
    1eca:	70 40       	sbci	r23, 0x00	; 0
    1ecc:	01 90       	ld	r0, Z+
    1ece:	01 10       	cpse	r0, r1
    1ed0:	d8 f7       	brcc	.-10     	; 0x1ec8 <strnlen+0x2>
    1ed2:	80 95       	com	r24
    1ed4:	90 95       	com	r25
    1ed6:	8e 0f       	add	r24, r30
    1ed8:	9f 1f       	adc	r25, r31
    1eda:	08 95       	ret

00001edc <fputc>:
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	fb 01       	movw	r30, r22
    1ee6:	23 81       	ldd	r18, Z+3	; 0x03
    1ee8:	21 fd       	sbrc	r18, 1
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <fputc+0x16>
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	9f ef       	ldi	r25, 0xFF	; 255
    1ef0:	28 c0       	rjmp	.+80     	; 0x1f42 <fputc+0x66>
    1ef2:	22 ff       	sbrs	r18, 2
    1ef4:	16 c0       	rjmp	.+44     	; 0x1f22 <fputc+0x46>
    1ef6:	46 81       	ldd	r20, Z+6	; 0x06
    1ef8:	57 81       	ldd	r21, Z+7	; 0x07
    1efa:	24 81       	ldd	r18, Z+4	; 0x04
    1efc:	35 81       	ldd	r19, Z+5	; 0x05
    1efe:	42 17       	cp	r20, r18
    1f00:	53 07       	cpc	r21, r19
    1f02:	44 f4       	brge	.+16     	; 0x1f14 <fputc+0x38>
    1f04:	a0 81       	ld	r26, Z
    1f06:	b1 81       	ldd	r27, Z+1	; 0x01
    1f08:	9d 01       	movw	r18, r26
    1f0a:	2f 5f       	subi	r18, 0xFF	; 255
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	31 83       	std	Z+1, r19	; 0x01
    1f10:	20 83       	st	Z, r18
    1f12:	8c 93       	st	X, r24
    1f14:	26 81       	ldd	r18, Z+6	; 0x06
    1f16:	37 81       	ldd	r19, Z+7	; 0x07
    1f18:	2f 5f       	subi	r18, 0xFF	; 255
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	37 83       	std	Z+7, r19	; 0x07
    1f1e:	26 83       	std	Z+6, r18	; 0x06
    1f20:	10 c0       	rjmp	.+32     	; 0x1f42 <fputc+0x66>
    1f22:	eb 01       	movw	r28, r22
    1f24:	09 2f       	mov	r16, r25
    1f26:	18 2f       	mov	r17, r24
    1f28:	00 84       	ldd	r0, Z+8	; 0x08
    1f2a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	09 95       	icall
    1f30:	89 2b       	or	r24, r25
    1f32:	e1 f6       	brne	.-72     	; 0x1eec <fputc+0x10>
    1f34:	8e 81       	ldd	r24, Y+6	; 0x06
    1f36:	9f 81       	ldd	r25, Y+7	; 0x07
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	9f 83       	std	Y+7, r25	; 0x07
    1f3c:	8e 83       	std	Y+6, r24	; 0x06
    1f3e:	81 2f       	mov	r24, r17
    1f40:	90 2f       	mov	r25, r16
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	08 95       	ret

00001f4c <__ultoa_invert>:
    1f4c:	fa 01       	movw	r30, r20
    1f4e:	aa 27       	eor	r26, r26
    1f50:	28 30       	cpi	r18, 0x08	; 8
    1f52:	51 f1       	breq	.+84     	; 0x1fa8 <__ultoa_invert+0x5c>
    1f54:	20 31       	cpi	r18, 0x10	; 16
    1f56:	81 f1       	breq	.+96     	; 0x1fb8 <__ultoa_invert+0x6c>
    1f58:	e8 94       	clt
    1f5a:	6f 93       	push	r22
    1f5c:	6e 7f       	andi	r22, 0xFE	; 254
    1f5e:	6e 5f       	subi	r22, 0xFE	; 254
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	8f 4f       	sbci	r24, 0xFF	; 255
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	af 4f       	sbci	r26, 0xFF	; 255
    1f68:	b1 e0       	ldi	r27, 0x01	; 1
    1f6a:	3e d0       	rcall	.+124    	; 0x1fe8 <__ultoa_invert+0x9c>
    1f6c:	b4 e0       	ldi	r27, 0x04	; 4
    1f6e:	3c d0       	rcall	.+120    	; 0x1fe8 <__ultoa_invert+0x9c>
    1f70:	67 0f       	add	r22, r23
    1f72:	78 1f       	adc	r23, r24
    1f74:	89 1f       	adc	r24, r25
    1f76:	9a 1f       	adc	r25, r26
    1f78:	a1 1d       	adc	r26, r1
    1f7a:	68 0f       	add	r22, r24
    1f7c:	79 1f       	adc	r23, r25
    1f7e:	8a 1f       	adc	r24, r26
    1f80:	91 1d       	adc	r25, r1
    1f82:	a1 1d       	adc	r26, r1
    1f84:	6a 0f       	add	r22, r26
    1f86:	71 1d       	adc	r23, r1
    1f88:	81 1d       	adc	r24, r1
    1f8a:	91 1d       	adc	r25, r1
    1f8c:	a1 1d       	adc	r26, r1
    1f8e:	20 d0       	rcall	.+64     	; 0x1fd0 <__ultoa_invert+0x84>
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__ultoa_invert+0x48>
    1f92:	68 94       	set
    1f94:	3f 91       	pop	r19
    1f96:	2a e0       	ldi	r18, 0x0A	; 10
    1f98:	26 9f       	mul	r18, r22
    1f9a:	11 24       	eor	r1, r1
    1f9c:	30 19       	sub	r19, r0
    1f9e:	30 5d       	subi	r19, 0xD0	; 208
    1fa0:	31 93       	st	Z+, r19
    1fa2:	de f6       	brtc	.-74     	; 0x1f5a <__ultoa_invert+0xe>
    1fa4:	cf 01       	movw	r24, r30
    1fa6:	08 95       	ret
    1fa8:	46 2f       	mov	r20, r22
    1faa:	47 70       	andi	r20, 0x07	; 7
    1fac:	40 5d       	subi	r20, 0xD0	; 208
    1fae:	41 93       	st	Z+, r20
    1fb0:	b3 e0       	ldi	r27, 0x03	; 3
    1fb2:	0f d0       	rcall	.+30     	; 0x1fd2 <__ultoa_invert+0x86>
    1fb4:	c9 f7       	brne	.-14     	; 0x1fa8 <__ultoa_invert+0x5c>
    1fb6:	f6 cf       	rjmp	.-20     	; 0x1fa4 <__ultoa_invert+0x58>
    1fb8:	46 2f       	mov	r20, r22
    1fba:	4f 70       	andi	r20, 0x0F	; 15
    1fbc:	40 5d       	subi	r20, 0xD0	; 208
    1fbe:	4a 33       	cpi	r20, 0x3A	; 58
    1fc0:	18 f0       	brcs	.+6      	; 0x1fc8 <__ultoa_invert+0x7c>
    1fc2:	49 5d       	subi	r20, 0xD9	; 217
    1fc4:	31 fd       	sbrc	r19, 1
    1fc6:	40 52       	subi	r20, 0x20	; 32
    1fc8:	41 93       	st	Z+, r20
    1fca:	02 d0       	rcall	.+4      	; 0x1fd0 <__ultoa_invert+0x84>
    1fcc:	a9 f7       	brne	.-22     	; 0x1fb8 <__ultoa_invert+0x6c>
    1fce:	ea cf       	rjmp	.-44     	; 0x1fa4 <__ultoa_invert+0x58>
    1fd0:	b4 e0       	ldi	r27, 0x04	; 4
    1fd2:	a6 95       	lsr	r26
    1fd4:	97 95       	ror	r25
    1fd6:	87 95       	ror	r24
    1fd8:	77 95       	ror	r23
    1fda:	67 95       	ror	r22
    1fdc:	ba 95       	dec	r27
    1fde:	c9 f7       	brne	.-14     	; 0x1fd2 <__ultoa_invert+0x86>
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	61 05       	cpc	r22, r1
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	08 95       	ret
    1fe8:	9b 01       	movw	r18, r22
    1fea:	ac 01       	movw	r20, r24
    1fec:	0a 2e       	mov	r0, r26
    1fee:	06 94       	lsr	r0
    1ff0:	57 95       	ror	r21
    1ff2:	47 95       	ror	r20
    1ff4:	37 95       	ror	r19
    1ff6:	27 95       	ror	r18
    1ff8:	ba 95       	dec	r27
    1ffa:	c9 f7       	brne	.-14     	; 0x1fee <__ultoa_invert+0xa2>
    1ffc:	62 0f       	add	r22, r18
    1ffe:	73 1f       	adc	r23, r19
    2000:	84 1f       	adc	r24, r20
    2002:	95 1f       	adc	r25, r21
    2004:	a0 1d       	adc	r26, r0
    2006:	08 95       	ret

00002008 <eeprom_read_byte>:
    2008:	f9 99       	sbic	0x1f, 1	; 31
    200a:	fe cf       	rjmp	.-4      	; 0x2008 <eeprom_read_byte>
    200c:	92 bd       	out	0x22, r25	; 34
    200e:	81 bd       	out	0x21, r24	; 33
    2010:	f8 9a       	sbi	0x1f, 0	; 31
    2012:	99 27       	eor	r25, r25
    2014:	80 b5       	in	r24, 0x20	; 32
    2016:	08 95       	ret

00002018 <eeprom_write_byte>:
    2018:	26 2f       	mov	r18, r22

0000201a <eeprom_write_r18>:
    201a:	f9 99       	sbic	0x1f, 1	; 31
    201c:	fe cf       	rjmp	.-4      	; 0x201a <eeprom_write_r18>
    201e:	1f ba       	out	0x1f, r1	; 31
    2020:	92 bd       	out	0x22, r25	; 34
    2022:	81 bd       	out	0x21, r24	; 33
    2024:	20 bd       	out	0x20, r18	; 32
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	fa 9a       	sbi	0x1f, 2	; 31
    202c:	f9 9a       	sbi	0x1f, 1	; 31
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	08 95       	ret

00002034 <__divmodsi4>:
    2034:	05 2e       	mov	r0, r21
    2036:	97 fb       	bst	r25, 7
    2038:	1e f4       	brtc	.+6      	; 0x2040 <__divmodsi4+0xc>
    203a:	00 94       	com	r0
    203c:	0e 94 31 10 	call	0x2062	; 0x2062 <__negsi2>
    2040:	57 fd       	sbrc	r21, 7
    2042:	07 d0       	rcall	.+14     	; 0x2052 <__divmodsi4_neg2>
    2044:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodsi4>
    2048:	07 fc       	sbrc	r0, 7
    204a:	03 d0       	rcall	.+6      	; 0x2052 <__divmodsi4_neg2>
    204c:	4e f4       	brtc	.+18     	; 0x2060 <__divmodsi4_exit>
    204e:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__negsi2>

00002052 <__divmodsi4_neg2>:
    2052:	50 95       	com	r21
    2054:	40 95       	com	r20
    2056:	30 95       	com	r19
    2058:	21 95       	neg	r18
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	4f 4f       	sbci	r20, 0xFF	; 255
    205e:	5f 4f       	sbci	r21, 0xFF	; 255

00002060 <__divmodsi4_exit>:
    2060:	08 95       	ret

00002062 <__negsi2>:
    2062:	90 95       	com	r25
    2064:	80 95       	com	r24
    2066:	70 95       	com	r23
    2068:	61 95       	neg	r22
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	8f 4f       	sbci	r24, 0xFF	; 255
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	08 95       	ret

00002072 <__muluhisi3>:
    2072:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__umulhisi3>
    2076:	a5 9f       	mul	r26, r21
    2078:	90 0d       	add	r25, r0
    207a:	b4 9f       	mul	r27, r20
    207c:	90 0d       	add	r25, r0
    207e:	a4 9f       	mul	r26, r20
    2080:	80 0d       	add	r24, r0
    2082:	91 1d       	adc	r25, r1
    2084:	11 24       	eor	r1, r1
    2086:	08 95       	ret

00002088 <__mulshisi3>:
    2088:	b7 ff       	sbrs	r27, 7
    208a:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__muluhisi3>

0000208e <__mulohisi3>:
    208e:	0e 94 39 10 	call	0x2072	; 0x2072 <__muluhisi3>
    2092:	82 1b       	sub	r24, r18
    2094:	93 0b       	sbc	r25, r19
    2096:	08 95       	ret

00002098 <__prologue_saves__>:
    2098:	2f 92       	push	r2
    209a:	3f 92       	push	r3
    209c:	4f 92       	push	r4
    209e:	5f 92       	push	r5
    20a0:	6f 92       	push	r6
    20a2:	7f 92       	push	r7
    20a4:	8f 92       	push	r8
    20a6:	9f 92       	push	r9
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	ca 1b       	sub	r28, r26
    20c2:	db 0b       	sbc	r29, r27
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	09 94       	ijmp

000020d0 <__epilogue_restores__>:
    20d0:	2a 88       	ldd	r2, Y+18	; 0x12
    20d2:	39 88       	ldd	r3, Y+17	; 0x11
    20d4:	48 88       	ldd	r4, Y+16	; 0x10
    20d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    20d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    20da:	7d 84       	ldd	r7, Y+13	; 0x0d
    20dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    20de:	9b 84       	ldd	r9, Y+11	; 0x0b
    20e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    20e2:	b9 84       	ldd	r11, Y+9	; 0x09
    20e4:	c8 84       	ldd	r12, Y+8	; 0x08
    20e6:	df 80       	ldd	r13, Y+7	; 0x07
    20e8:	ee 80       	ldd	r14, Y+6	; 0x06
    20ea:	fd 80       	ldd	r15, Y+5	; 0x05
    20ec:	0c 81       	ldd	r16, Y+4	; 0x04
    20ee:	1b 81       	ldd	r17, Y+3	; 0x03
    20f0:	aa 81       	ldd	r26, Y+2	; 0x02
    20f2:	b9 81       	ldd	r27, Y+1	; 0x01
    20f4:	ce 0f       	add	r28, r30
    20f6:	d1 1d       	adc	r29, r1
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	ed 01       	movw	r28, r26
    2104:	08 95       	ret

00002106 <__udivmodsi4>:
    2106:	a1 e2       	ldi	r26, 0x21	; 33
    2108:	1a 2e       	mov	r1, r26
    210a:	aa 1b       	sub	r26, r26
    210c:	bb 1b       	sub	r27, r27
    210e:	fd 01       	movw	r30, r26
    2110:	0d c0       	rjmp	.+26     	; 0x212c <__udivmodsi4_ep>

00002112 <__udivmodsi4_loop>:
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	ee 1f       	adc	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	a2 17       	cp	r26, r18
    211c:	b3 07       	cpc	r27, r19
    211e:	e4 07       	cpc	r30, r20
    2120:	f5 07       	cpc	r31, r21
    2122:	20 f0       	brcs	.+8      	; 0x212c <__udivmodsi4_ep>
    2124:	a2 1b       	sub	r26, r18
    2126:	b3 0b       	sbc	r27, r19
    2128:	e4 0b       	sbc	r30, r20
    212a:	f5 0b       	sbc	r31, r21

0000212c <__udivmodsi4_ep>:
    212c:	66 1f       	adc	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	88 1f       	adc	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	1a 94       	dec	r1
    2136:	69 f7       	brne	.-38     	; 0x2112 <__udivmodsi4_loop>
    2138:	60 95       	com	r22
    213a:	70 95       	com	r23
    213c:	80 95       	com	r24
    213e:	90 95       	com	r25
    2140:	9b 01       	movw	r18, r22
    2142:	ac 01       	movw	r20, r24
    2144:	bd 01       	movw	r22, r26
    2146:	cf 01       	movw	r24, r30
    2148:	08 95       	ret

0000214a <_exit>:
    214a:	f8 94       	cli

0000214c <__stop_program>:
    214c:	ff cf       	rjmp	.-2      	; 0x214c <__stop_program>
