
build/test.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	f9 01       	movw	r30, r18
      6a:	75 02       	muls	r23, r21
      6c:	cd 01       	movw	r24, r26
      6e:	c4 01       	movw	r24, r8
      70:	ca 01       	movw	r24, r20
      72:	57 02       	muls	r21, r23
      74:	4c 02       	muls	r20, r28
      76:	d7 08       	sbc	r13, r7
      78:	b4 07       	cpc	r27, r20
      7a:	b4 07       	cpc	r27, r20
      7c:	d4 08       	sbc	r13, r4
      7e:	e0 08       	sbc	r14, r0
      80:	d0 08       	sbc	r13, r0
      82:	e7 08       	sbc	r14, r7
      84:	e3 08       	sbc	r14, r3
      86:	eb 08       	sbc	r14, r11
      88:	a3 08       	sbc	r10, r3
      8a:	75 08       	sbc	r7, r5

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e1       	ldi	r30, 0x14	; 20
      b8:	f0 e2       	ldi	r31, 0x20	; 32
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a6 32       	cpi	r26, 0x26	; 38
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a6 e2       	ldi	r26, 0x26	; 38
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 38       	cpi	r26, 0x8E	; 142
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 1d 0a 	call	0x143a	; 0x143a <main>
      da:	0c 94 08 10 	jmp	0x2010	; 0x2010 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:
#define DEBUG
#include <debug.h>


void setup()
{
      f4:	08 95       	ret

000000f6 <loop>:
}

void loop()
{
printf("volta : %d\n",get_voltage());
      f6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <get_voltage>
      fa:	9f 93       	push	r25
      fc:	8f 93       	push	r24
      fe:	89 e1       	ldi	r24, 0x19	; 25
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	9f 93       	push	r25
     104:	8f 93       	push	r24
     106:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <printf>
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	08 95       	ret

00000114 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     114:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     116:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     118:	8c e0       	ldi	r24, 0x0C	; 12
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 c5 00 	sts	0x00C5, r25
     120:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     124:	e0 ec       	ldi	r30, 0xC0	; 192
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	8d 7f       	andi	r24, 0xFD	; 253
     12c:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     12e:	e2 ec       	ldi	r30, 0xC2	; 194
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	86 60       	ori	r24, 0x06	; 6
     136:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     138:	e1 ec       	ldi	r30, 0xC1	; 193
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	88 60       	ori	r24, 0x08	; 8
     140:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	90 93 8b 01 	sts	0x018B, r25
     14a:	80 93 8a 01 	sts	0x018A, r24
    sei();
     14e:	78 94       	sei
     150:	08 95       	ret

00000152 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     152:	08 95       	ret

00000154 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     15a:	08 95       	ret

0000015c <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
    cli();
     16a:	f8 94       	cli

    ports_off();
     16c:	14 b8       	out	0x04, r1	; 4
     16e:	17 b8       	out	0x07, r1	; 7
     170:	1a b8       	out	0x0a, r1	; 10
     172:	15 b8       	out	0x05, r1	; 5
     174:	18 b8       	out	0x08, r1	; 8
     176:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     178:	52 9a       	sbi	0x0a, 2	; 10
     17a:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     17c:	14 bc       	out	0x24, r1	; 36
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	85 bd       	out	0x25, r24	; 37
     182:	8f ef       	ldi	r24, 0xFF	; 255
     184:	87 bd       	out	0x27, r24	; 39
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     18c:	10 92 80 00 	sts	0x0080, r1
     190:	10 92 81 00 	sts	0x0081, r1
     194:	2f e8       	ldi	r18, 0x8F	; 143
     196:	3b e0       	ldi	r19, 0x0B	; 11
     198:	30 93 89 00 	sts	0x0089, r19
     19c:	20 93 88 00 	sts	0x0088, r18
     1a0:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     1a4:	53 98       	cbi	0x0a, 3	; 10
     1a6:	23 98       	cbi	0x04, 3	; 4
     1a8:	91 ea       	ldi	r25, 0xA1	; 161
     1aa:	90 93 b0 00 	sts	0x00B0, r25
     1ae:	80 93 b1 00 	sts	0x00B1, r24
     1b2:	10 92 b4 00 	sts	0x00B4, r1
     1b6:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     1ba:	8b e0       	ldi	r24, 0x0B	; 11
     1bc:	80 bf       	out	0x30, r24	; 48
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     1c4:	86 e0       	ldi	r24, 0x06	; 6
     1c6:	80 93 7c 00 	sts	0x007C, r24
     1ca:	83 e8       	ldi	r24, 0x83	; 131
     1cc:	80 93 7a 00 	sts	0x007A, r24
     1d0:	80 91 7a 00 	lds	r24, 0x007A
     1d4:	80 64       	ori	r24, 0x40	; 64
     1d6:	80 93 7a 00 	sts	0x007A, r24
     1da:	80 91 7a 00 	lds	r24, 0x007A
     1de:	86 fd       	sbrc	r24, 6
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <kilo_init+0x7e>
    adc_trigger_high_gain();
     1e2:	10 92 7c 00 	sts	0x007C, r1
     1e6:	83 ea       	ldi	r24, 0xA3	; 163
     1e8:	80 93 7a 00 	sts	0x007A, r24
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
    if (osccal != 0xFF)
     1fa:	8f 3f       	cpi	r24, 0xFF	; 255
     1fc:	11 f0       	breq	.+4      	; 0x202 <kilo_init+0xa6>
        OSCCAL = osccal;
     1fe:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     202:	10 92 51 01 	sts	0x0151, r1
    rx_leadingbit = 1;
     206:	c1 e0       	ldi	r28, 0x01	; 1
     208:	c0 93 2a 01 	sts	0x012A, r28
    rx_leadingbyte = 1;
     20c:	c0 93 6e 01 	sts	0x016E, r28
    rx_byteindex = 0;
     210:	10 92 48 01 	sts	0x0148, r1
    rx_bytevalue = 0;
     214:	10 92 82 01 	sts	0x0182, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     218:	80 e9       	ldi	r24, 0x90	; 144
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     220:	80 93 47 01 	sts	0x0147, r24
    if (tx_mask & ~TX_MASK_MAX)
     224:	80 91 47 01 	lds	r24, 0x0147
     228:	88 73       	andi	r24, 0x38	; 56
     22a:	11 f0       	breq	.+4      	; 0x230 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     22c:	c0 93 47 01 	sts	0x0147, r28
    tx_clock = 0;
     230:	10 92 72 01 	sts	0x0172, r1
     234:	10 92 71 01 	sts	0x0171, r1
    tx_increment = 255;
     238:	8f ef       	ldi	r24, 0xFF	; 255
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 70 01 	sts	0x0170, r25
     240:	80 93 6f 01 	sts	0x016F, r24
    kilo_ticks = 0;
     244:	10 92 4d 01 	sts	0x014D, r1
     248:	10 92 4e 01 	sts	0x014E, r1
     24c:	10 92 4f 01 	sts	0x014F, r1
     250:	10 92 50 01 	sts	0x0150, r1
    kilo_state = IDLE;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	80 93 29 01 	sts	0x0129, r24
    kilo_tx_period = 3906;
     25a:	82 e4       	ldi	r24, 0x42	; 66
     25c:	9f e0       	ldi	r25, 0x0F	; 15
     25e:	90 93 81 01 	sts	0x0181, r25
     262:	80 93 80 01 	sts	0x0180, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     266:	80 eb       	ldi	r24, 0xB0	; 176
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     26e:	c8 2f       	mov	r28, r24
     270:	81 eb       	ldi	r24, 0xB1	; 177
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     278:	2c 2f       	mov	r18, r28
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	38 2b       	or	r19, r24
     27e:	30 93 84 01 	sts	0x0184, r19
     282:	20 93 83 01 	sts	0x0183, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     28e:	80 93 87 01 	sts	0x0187, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     292:	89 e0       	ldi	r24, 0x09	; 9
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     29a:	80 93 73 01 	sts	0x0173, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     29e:	8c e0       	ldi	r24, 0x0C	; 12
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     2a6:	80 93 85 01 	sts	0x0185, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2aa:	84 e1       	ldi	r24, 0x14	; 20
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     2b2:	80 93 86 01 	sts	0x0186, r24
     2b6:	52 e5       	ldi	r21, 0x52	; 82
     2b8:	e5 2e       	mov	r14, r21
     2ba:	51 e0       	ldi	r21, 0x01	; 1
     2bc:	f5 2e       	mov	r15, r21
     2be:	0b e2       	ldi	r16, 0x2B	; 43
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	c0 e2       	ldi	r28, 0x20	; 32
     2c4:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2c6:	ce 01       	movw	r24, r28
     2c8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     2cc:	d8 2e       	mov	r13, r24
     2ce:	ce 01       	movw	r24, r28
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     2d6:	2d 2d       	mov	r18, r13
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	32 2f       	mov	r19, r18
     2dc:	22 27       	eor	r18, r18
     2de:	28 2b       	or	r18, r24
     2e0:	f7 01       	movw	r30, r14
     2e2:	21 93       	st	Z+, r18
     2e4:	31 93       	st	Z+, r19
     2e6:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2e8:	ce 01       	movw	r24, r28
     2ea:	c0 96       	adiw	r24, 0x30	; 48
     2ec:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     2f0:	d8 2e       	mov	r13, r24
     2f2:	ce 01       	movw	r24, r28
     2f4:	c1 96       	adiw	r24, 0x31	; 49
     2f6:	0e 94 67 0f 	call	0x1ece	; 0x1ece <eeprom_read_byte>
     2fa:	2d 2d       	mov	r18, r13
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	32 2f       	mov	r19, r18
     300:	22 27       	eor	r18, r18
     302:	28 2b       	or	r18, r24
     304:	f8 01       	movw	r30, r16
     306:	21 93       	st	Z+, r18
     308:	31 93       	st	Z+, r19
     30a:	8f 01       	movw	r16, r30
     30c:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     30e:	cc 33       	cpi	r28, 0x3C	; 60
     310:	d1 05       	cpc	r29, r1
     312:	c9 f6       	brne	.-78     	; 0x2c6 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     314:	78 94       	sei
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	08 95       	ret

00000326 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	8f 93       	push	r24
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	a8 95       	wdr
     338:	80 91 60 00 	lds	r24, 0x0060
     33c:	88 61       	ori	r24, 0x18	; 24
     33e:	80 93 60 00 	sts	0x0060, r24
     342:	10 92 60 00 	sts	0x0060, r1
     346:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     348:	8f 91       	pop	r24
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     354:	3c 01       	movw	r6, r24
     356:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     358:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     35a:	99 24       	eor	r9, r9
     35c:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     35e:	84 e0       	ldi	r24, 0x04	; 4
     360:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     362:	96 e0       	ldi	r25, 0x06	; 6
     364:	a9 2e       	mov	r10, r25
     366:	23 e8       	ldi	r18, 0x83	; 131
     368:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     36a:	38 e1       	ldi	r19, 0x18	; 24
     36c:	d3 2e       	mov	r13, r19
     36e:	49 e2       	ldi	r20, 0x29	; 41
     370:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     372:	90 91 29 01 	lds	r25, 0x0129
     376:	e9 2f       	mov	r30, r25
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	e7 30       	cpi	r30, 0x07	; 7
     37c:	f1 05       	cpc	r31, r1
     37e:	c8 f7       	brcc	.-14     	; 0x372 <kilo_start+0x1e>
     380:	ec 5c       	subi	r30, 0xCC	; 204
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     388:	11 23       	and	r17, r17
     38a:	09 f4       	brne	.+2      	; 0x38e <kilo_start+0x3a>
     38c:	fc c0       	rjmp	.+504    	; 0x586 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     38e:	c0 92 29 01 	sts	0x0129, r12
     392:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     394:	fe 01       	movw	r30, r28
     396:	09 95       	icall
                break;
     398:	ec cf       	rjmp	.-40     	; 0x372 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     39a:	80 91 51 01 	lds	r24, 0x0151
     39e:	81 11       	cpse	r24, r1
     3a0:	eb c0       	rjmp	.+470    	; 0x578 <kilo_start+0x224>
        cli();                                    // disable interrupts
     3a2:	f8 94       	cli
        adc_setup_conversion(6);
     3a4:	a0 92 7c 00 	sts	0x007C, r10
     3a8:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     3ac:	80 91 7a 00 	lds	r24, 0x007A
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3b6:	90 91 7a 00 	lds	r25, 0x007A
     3ba:	96 fd       	sbrc	r25, 6
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     3be:	80 91 78 00 	lds	r24, 0x0078
     3c2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3c6:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3c8:	8b 3a       	cpi	r24, 0xAB	; 171
     3ca:	e2 e0       	ldi	r30, 0x02	; 2
     3cc:	9e 07       	cpc	r25, r30
     3ce:	0c f0       	brlt	.+2      	; 0x3d2 <kilo_start+0x7e>
     3d0:	ed c0       	rjmp	.+474    	; 0x5ac <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3d2:	89 38       	cpi	r24, 0x89	; 137
     3d4:	f2 e0       	ldi	r31, 0x02	; 2
     3d6:	9f 07       	cpc	r25, r31
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <kilo_start+0x88>
     3da:	ef c0       	rjmp	.+478    	; 0x5ba <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3dc:	87 36       	cpi	r24, 0x67	; 103
     3de:	92 40       	sbci	r25, 0x02	; 2
     3e0:	0c f4       	brge	.+2      	; 0x3e4 <kilo_start+0x90>
     3e2:	ca c0       	rjmp	.+404    	; 0x578 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3e4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3e6:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3e8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3ea:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3ec:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3ee:	3c 98       	cbi	0x07, 4	; 7
     3f0:	c0 cf       	rjmp	.-128    	; 0x372 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3f2:	f8 94       	cli
                acomp_off();
     3f4:	80 b7       	in	r24, 0x30	; 48
     3f6:	87 7f       	andi	r24, 0xF7	; 247
     3f8:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3fa:	80 91 7a 00 	lds	r24, 0x007A
     3fe:	8f 77       	andi	r24, 0x7F	; 127
     400:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     404:	14 b8       	out	0x04, r1	; 4
     406:	17 b8       	out	0x07, r1	; 7
     408:	1a b8       	out	0x0a, r1	; 10
     40a:	15 b8       	out	0x05, r1	; 5
     40c:	18 b8       	out	0x08, r1	; 8
     40e:	1b b8       	out	0x0b, r1	; 11
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	a8 95       	wdr
     416:	d0 92 60 00 	sts	0x0060, r13
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     420:	80 91 60 00 	lds	r24, 0x0060
     424:	80 64       	ori	r24, 0x40	; 64
     426:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     42a:	93 b7       	in	r25, 0x33	; 51
     42c:	91 7f       	andi	r25, 0xF1	; 241
     42e:	94 60       	ori	r25, 0x04	; 4
     430:	93 bf       	out	0x33, r25	; 51
                cli();
     432:	f8 94       	cli
                sleep_enable();
     434:	83 b7       	in	r24, 0x33	; 51
     436:	81 60       	ori	r24, 0x01	; 1
     438:	83 bf       	out	0x33, r24	; 51
                sei();
     43a:	78 94       	sei
                sleep_cpu();
     43c:	88 95       	sleep
                sleep_disable();
     43e:	83 b7       	in	r24, 0x33	; 51
     440:	8e 7f       	andi	r24, 0xFE	; 254
     442:	83 bf       	out	0x33, r24	; 51
                sei();
     444:	78 94       	sei
                rx_busy = 0;
     446:	10 92 51 01 	sts	0x0151, r1
                ports_on();
     44a:	52 9a       	sbi	0x0a, 2	; 10
     44c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     44e:	80 91 7a 00 	lds	r24, 0x007A
     452:	80 68       	ori	r24, 0x80	; 128
     454:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	87 e5       	ldi	r24, 0x57	; 87
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <kilo_start+0x108>
     460:	00 c0       	rjmp	.+0      	; 0x462 <kilo_start+0x10e>
     462:	00 00       	nop
                _delay_us(300);
                acomp_on();
     464:	80 b7       	in	r24, 0x30	; 48
     466:	88 61       	ori	r24, 0x18	; 24
     468:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     46a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     46c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     46e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     470:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     472:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     474:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     476:	ef e1       	ldi	r30, 0x1F	; 31
     478:	fe e4       	ldi	r31, 0x4E	; 78
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <kilo_start+0x126>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <kilo_start+0x12c>
     480:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     482:	80 91 51 01 	lds	r24, 0x0151
     486:	81 11       	cpse	r24, r1
     488:	81 c0       	rjmp	.+258    	; 0x58c <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     48a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     48c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     48e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     490:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     492:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     494:	3c 98       	cbi	0x07, 4	; 7
     496:	6d cf       	rjmp	.-294    	; 0x372 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     498:	80 91 27 01 	lds	r24, 0x0127
     49c:	81 11       	cpse	r24, r1
     49e:	41 c0       	rjmp	.+130    	; 0x522 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4a0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4a4:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     4a8:	10 92 28 01 	sts	0x0128, r1
     4ac:	62 cf       	rjmp	.-316    	; 0x372 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     4ae:	48 99       	sbic	0x09, 0	; 9
     4b0:	ec cf       	rjmp	.-40     	; 0x48a <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4b2:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4b4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4b6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4b8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4ba:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4bc:	3c 98       	cbi	0x07, 4	; 7
     4be:	8f ec       	ldi	r24, 0xCF	; 207
     4c0:	97 e0       	ldi	r25, 0x07	; 7
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <kilo_start+0x16e>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <kilo_start+0x174>
     4c8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4ca:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4cc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4ce:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4d0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4d2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4d4:	3c 98       	cbi	0x07, 4	; 7
     4d6:	9f ef       	ldi	r25, 0xFF	; 255
     4d8:	e1 ee       	ldi	r30, 0xE1	; 225
     4da:	f4 e0       	ldi	r31, 0x04	; 4
     4dc:	91 50       	subi	r25, 0x01	; 1
     4de:	e0 40       	sbci	r30, 0x00	; 0
     4e0:	f0 40       	sbci	r31, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <kilo_start+0x188>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <kilo_start+0x192>
     4e6:	00 00       	nop
     4e8:	44 cf       	rjmp	.-376    	; 0x372 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4ea:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ec:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4ee:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4f0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4f2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4f4:	3c 98       	cbi	0x07, 4	; 7
     4f6:	ef ec       	ldi	r30, 0xCF	; 207
     4f8:	f7 e0       	ldi	r31, 0x07	; 7
     4fa:	31 97       	sbiw	r30, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <kilo_start+0x1a6>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <kilo_start+0x1ac>
     500:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     502:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     504:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     506:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     508:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     50a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     50c:	3c 98       	cbi	0x07, 4	; 7
     50e:	ff ef       	ldi	r31, 0xFF	; 255
     510:	21 ee       	ldi	r18, 0xE1	; 225
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	f1 50       	subi	r31, 0x01	; 1
     516:	20 40       	sbci	r18, 0x00	; 0
     518:	80 40       	sbci	r24, 0x00	; 0
     51a:	e1 f7       	brne	.-8      	; 0x514 <kilo_start+0x1c0>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <kilo_start+0x1ca>
     51e:	00 00       	nop
     520:	28 cf       	rjmp	.-432    	; 0x372 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     522:	90 91 27 01 	lds	r25, 0x0127
     526:	80 91 28 01 	lds	r24, 0x0128
     52a:	98 17       	cp	r25, r24
     52c:	09 f4       	brne	.+2      	; 0x530 <kilo_start+0x1dc>
     52e:	21 cf       	rjmp	.-446    	; 0x372 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     530:	80 91 27 01 	lds	r24, 0x0127
     534:	80 93 28 01 	sts	0x0128, r24
                        if (cur_motion == MOVE_LEFT) {
     538:	80 91 27 01 	lds	r24, 0x0127
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	09 f4       	brne	.+2      	; 0x542 <kilo_start+0x1ee>
     540:	50 c0       	rjmp	.+160    	; 0x5e2 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     542:	80 91 27 01 	lds	r24, 0x0127
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     546:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     54a:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	d9 f1       	breq	.+118    	; 0x5c8 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     552:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     556:	90 92 b4 00 	sts	0x00B4, r9
     55a:	8f e2       	ldi	r24, 0x2F	; 47
     55c:	95 e7       	ldi	r25, 0x75	; 117
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <kilo_start+0x20a>
     562:	00 c0       	rjmp	.+0      	; 0x564 <kilo_start+0x210>
     564:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     566:	80 91 86 01 	lds	r24, 0x0186
     56a:	90 91 85 01 	lds	r25, 0x0185
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     56e:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     572:	80 93 b4 00 	sts	0x00B4, r24
     576:	fd ce       	rjmp	.-518    	; 0x372 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     578:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     57a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     57c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     57e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     580:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     582:	3c 98       	cbi	0x07, 4	; 7
     584:	f6 ce       	rjmp	.-532    	; 0x372 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     586:	f3 01       	movw	r30, r6
     588:	09 95       	icall
     58a:	01 cf       	rjmp	.-510    	; 0x38e <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     58c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     58e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     590:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     592:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     594:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     596:	3c 98       	cbi	0x07, 4	; 7
     598:	ff ef       	ldi	r31, 0xFF	; 255
     59a:	20 e7       	ldi	r18, 0x70	; 112
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	f1 50       	subi	r31, 0x01	; 1
     5a0:	20 40       	sbci	r18, 0x00	; 0
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	e1 f7       	brne	.-8      	; 0x59e <kilo_start+0x24a>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <kilo_start+0x254>
     5a8:	00 00       	nop
     5aa:	6f cf       	rjmp	.-290    	; 0x48a <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5ac:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5ae:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     5b0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5b2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5b4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5b6:	3c 98       	cbi	0x07, 4	; 7
     5b8:	dc ce       	rjmp	.-584    	; 0x372 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5ba:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5bc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5be:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5c0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5c2:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5c4:	3c 9a       	sbi	0x07, 4	; 7
     5c6:	d5 ce       	rjmp	.-598    	; 0x372 <kilo_start+0x1e>
     5c8:	ef e2       	ldi	r30, 0x2F	; 47
     5ca:	f5 e7       	ldi	r31, 0x75	; 117
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <kilo_start+0x278>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <kilo_start+0x27e>
     5d2:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5d4:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5dc:	80 93 b4 00 	sts	0x00B4, r24
     5e0:	c8 ce       	rjmp	.-624    	; 0x372 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e2:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5e6:	10 92 b4 00 	sts	0x00B4, r1
     5ea:	8f e2       	ldi	r24, 0x2F	; 47
     5ec:	95 e7       	ldi	r25, 0x75	; 117
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <kilo_start+0x29a>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <kilo_start+0x2a0>
     5f4:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5f6:	80 91 87 01 	lds	r24, 0x0187
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5fa:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5fe:	10 92 b4 00 	sts	0x00B4, r1
     602:	b7 ce       	rjmp	.-658    	; 0x372 <kilo_start+0x1e>

00000604 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     604:	07 c0       	rjmp	.+14     	; 0x614 <delay+0x10>
     606:	ef ec       	ldi	r30, 0xCF	; 207
     608:	f7 e0       	ldi	r31, 0x07	; 7
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <delay+0x6>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <delay+0xc>
     610:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     612:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	b9 f7       	brne	.-18     	; 0x606 <delay+0x2>
     618:	08 95       	ret

0000061a <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     61a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     61e:	60 93 b4 00 	sts	0x00B4, r22
     622:	08 95       	ret

00000624 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     62a:	80 93 b4 00 	sts	0x00B4, r24
     62e:	8f e0       	ldi	r24, 0x0F	; 15
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	ef ec       	ldi	r30, 0xCF	; 207
     634:	f7 e0       	ldi	r31, 0x07	; 7
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <spinup_motors+0x12>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <spinup_motors+0x18>
     63c:	00 00       	nop
     63e:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     640:	c1 f7       	brne	.-16     	; 0x632 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     642:	08 95       	ret

00000644 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     644:	80 91 51 01 	lds	r24, 0x0151
     648:	81 11       	cpse	r24, r1
     64a:	1e c0       	rjmp	.+60     	; 0x688 <get_ambientlight+0x44>
        cli();
     64c:	f8 94       	cli
        adc_setup_conversion(7);
     64e:	87 e0       	ldi	r24, 0x07	; 7
     650:	80 93 7c 00 	sts	0x007C, r24
     654:	83 e8       	ldi	r24, 0x83	; 131
     656:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     65a:	80 91 7a 00 	lds	r24, 0x007A
     65e:	80 64       	ori	r24, 0x40	; 64
     660:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     664:	80 91 7a 00 	lds	r24, 0x007A
     668:	86 fd       	sbrc	r24, 6
     66a:	fc cf       	rjmp	.-8      	; 0x664 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     66c:	80 91 78 00 	lds	r24, 0x0078
     670:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     674:	10 92 7c 00 	sts	0x007C, r1
     678:	23 ea       	ldi	r18, 0xA3	; 163
     67a:	20 93 7a 00 	sts	0x007A, r18
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     684:	78 94       	sei
     686:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     68c:	08 95       	ret

0000068e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     68e:	80 91 51 01 	lds	r24, 0x0151
     692:	81 11       	cpse	r24, r1
     694:	1e c0       	rjmp	.+60     	; 0x6d2 <get_temperature+0x44>
        cli();
     696:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     698:	88 ec       	ldi	r24, 0xC8	; 200
     69a:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     69e:	87 e8       	ldi	r24, 0x87	; 135
     6a0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6a4:	80 91 7a 00 	lds	r24, 0x007A
     6a8:	80 64       	ori	r24, 0x40	; 64
     6aa:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6ae:	80 91 7a 00 	lds	r24, 0x007A
     6b2:	86 fd       	sbrc	r24, 6
     6b4:	fc cf       	rjmp	.-8      	; 0x6ae <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6b6:	80 91 78 00 	lds	r24, 0x0078
     6ba:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6be:	10 92 7c 00 	sts	0x007C, r1
     6c2:	23 ea       	ldi	r18, 0xA3	; 163
     6c4:	20 93 7a 00 	sts	0x007A, r18
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6ce:	78 94       	sei
     6d0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6d6:	08 95       	ret

000006d8 <rand_hard>:

uint8_t rand_hard() {
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	e0 e0       	ldi	r30, 0x00	; 0
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6e6:	03 ea       	ldi	r16, 0xA3	; 163
     6e8:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6ea:	d6 e0       	ldi	r29, 0x06	; 6
     6ec:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6ee:	a1 e0       	ldi	r26, 0x01	; 1
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6f2:	60 e8       	ldi	r22, 0x80	; 128
     6f4:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6f6:	f8 94       	cli
            adc_setup_conversion(6);
     6f8:	d0 93 7c 00 	sts	0x007C, r29
     6fc:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     700:	90 91 7a 00 	lds	r25, 0x007A
     704:	90 64       	ori	r25, 0x40	; 64
     706:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     70a:	90 91 7a 00 	lds	r25, 0x007A
     70e:	96 fd       	sbrc	r25, 6
     710:	fc cf       	rjmp	.-8      	; 0x70a <rand_hard+0x32>
            a = ADCW&0x1;
     712:	20 91 78 00 	lds	r18, 0x0078
     716:	30 91 79 00 	lds	r19, 0x0079
     71a:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     71c:	90 91 7a 00 	lds	r25, 0x007A
     720:	90 64       	ori	r25, 0x40	; 64
     722:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     726:	90 91 7a 00 	lds	r25, 0x007A
     72a:	96 fd       	sbrc	r25, 6
     72c:	fc cf       	rjmp	.-8      	; 0x726 <rand_hard+0x4e>
            b = ADCW&0x1;
     72e:	40 91 78 00 	lds	r20, 0x0078
     732:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     736:	10 92 7c 00 	sts	0x007C, r1
     73a:	00 93 7a 00 	sts	0x007A, r16
     73e:	10 93 7b 00 	sts	0x007B, r17
            sei();
     742:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     744:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     746:	24 13       	cpse	r18, r20
     748:	03 c0       	rjmp	.+6      	; 0x750 <rand_hard+0x78>
     74a:	61 50       	subi	r22, 0x01	; 1
     74c:	71 09       	sbc	r23, r1
     74e:	99 f6       	brne	.-90     	; 0x6f6 <rand_hard+0x1e>
        if (a)
     750:	22 23       	and	r18, r18
     752:	39 f0       	breq	.+14     	; 0x762 <rand_hard+0x8a>
            num |= (1<<i);
     754:	9d 01       	movw	r18, r26
     756:	0e 2e       	mov	r0, r30
     758:	01 c0       	rjmp	.+2      	; 0x75c <rand_hard+0x84>
     75a:	22 0f       	add	r18, r18
     75c:	0a 94       	dec	r0
     75e:	ea f7       	brpl	.-6      	; 0x75a <rand_hard+0x82>
     760:	82 2b       	or	r24, r18
     762:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     764:	e8 30       	cpi	r30, 0x08	; 8
     766:	f1 05       	cpc	r31, r1
     768:	09 f0       	breq	.+2      	; 0x76c <rand_hard+0x94>
     76a:	c3 cf       	rjmp	.-122    	; 0x6f2 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     776:	80 91 0e 01 	lds	r24, 0x010E
     77a:	98 2f       	mov	r25, r24
     77c:	99 0f       	add	r25, r25
     77e:	99 0f       	add	r25, r25
     780:	99 0f       	add	r25, r25
     782:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     784:	90 91 26 01 	lds	r25, 0x0126
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	29 0f       	add	r18, r25
     78c:	20 93 26 01 	sts	0x0126, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     790:	28 2f       	mov	r18, r24
     792:	22 95       	swap	r18
     794:	26 95       	lsr	r18
     796:	27 70       	andi	r18, 0x07	; 7
     798:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     79a:	96 95       	lsr	r25
     79c:	96 95       	lsr	r25
     79e:	89 27       	eor	r24, r25
     7a0:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     7a4:	08 95       	ret

000007a6 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     7a6:	80 93 0e 01 	sts	0x010E, r24
     7aa:	08 95       	ret

000007ac <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     7ac:	80 91 51 01 	lds	r24, 0x0151
     7b0:	81 11       	cpse	r24, r1
     7b2:	16 c0       	rjmp	.+44     	; 0x7e0 <get_voltage+0x34>
        cli();                                    // disable interrupts
     7b4:	f8 94       	cli
        adc_setup_conversion(6);
     7b6:	86 e0       	ldi	r24, 0x06	; 6
     7b8:	80 93 7c 00 	sts	0x007C, r24
     7bc:	83 e8       	ldi	r24, 0x83	; 131
     7be:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7c2:	80 91 7a 00 	lds	r24, 0x007A
     7c6:	80 64       	ori	r24, 0x40	; 64
     7c8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7cc:	80 91 7a 00 	lds	r24, 0x007A
     7d0:	86 fd       	sbrc	r24, 6
     7d2:	fc cf       	rjmp	.-8      	; 0x7cc <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7d4:	80 91 78 00 	lds	r24, 0x0078
     7d8:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7dc:	78 94       	sei
     7de:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7e4:	08 95       	ret

000007e6 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7e6:	2f 92       	push	r2
     7e8:	3f 92       	push	r3
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <estimate_distance+0x26>
     80c:	00 d0       	rcall	.+0      	; 0x80e <estimate_distance+0x28>
     80e:	00 d0       	rcall	.+0      	; 0x810 <estimate_distance+0x2a>
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     816:	dc 01       	movw	r26, r24
     818:	12 96       	adiw	r26, 0x02	; 2
     81a:	0d 90       	ld	r0, X+
     81c:	bc 91       	ld	r27, X
     81e:	a0 2d       	mov	r26, r0
     820:	be 83       	std	Y+6, r27	; 0x06
     822:	ad 83       	std	Y+5, r26	; 0x05
     824:	a4 38       	cpi	r26, 0x84	; 132
     826:	e3 e0       	ldi	r30, 0x03	; 3
     828:	be 07       	cpc	r27, r30
     82a:	0c f0       	brlt	.+2      	; 0x82e <estimate_distance+0x48>
     82c:	c9 c0       	rjmp	.+402    	; 0x9c0 <__stack+0xc1>
        if (dist->high_gain > kilo_irhigh[0]) {
     82e:	80 91 2b 01 	lds	r24, 0x012B
     832:	90 91 2c 01 	lds	r25, 0x012C
     836:	8a 17       	cp	r24, r26
     838:	9b 07       	cpc	r25, r27
     83a:	08 f4       	brcc	.+2      	; 0x83e <estimate_distance+0x58>
     83c:	37 c1       	rjmp	.+622    	; 0xaac <__stack+0x1ad>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     83e:	00 91 2d 01 	lds	r16, 0x012D
     842:	10 91 2e 01 	lds	r17, 0x012E
     846:	0a 17       	cp	r16, r26
     848:	1b 07       	cpc	r17, r27
     84a:	08 f4       	brcc	.+2      	; 0x84e <estimate_distance+0x68>
     84c:	2f c2       	rjmp	.+1118   	; 0xcac <__stack+0x3ad>
     84e:	00 91 2f 01 	lds	r16, 0x012F
     852:	10 91 30 01 	lds	r17, 0x0130
     856:	0a 17       	cp	r16, r26
     858:	1b 07       	cpc	r17, r27
     85a:	08 f4       	brcc	.+2      	; 0x85e <estimate_distance+0x78>
     85c:	2f c2       	rjmp	.+1118   	; 0xcbc <__stack+0x3bd>
     85e:	00 91 31 01 	lds	r16, 0x0131
     862:	10 91 32 01 	lds	r17, 0x0132
     866:	0a 17       	cp	r16, r26
     868:	1b 07       	cpc	r17, r27
     86a:	08 f4       	brcc	.+2      	; 0x86e <estimate_distance+0x88>
     86c:	2f c2       	rjmp	.+1118   	; 0xccc <__stack+0x3cd>
     86e:	00 91 33 01 	lds	r16, 0x0133
     872:	10 91 34 01 	lds	r17, 0x0134
     876:	0a 17       	cp	r16, r26
     878:	1b 07       	cpc	r17, r27
     87a:	08 f4       	brcc	.+2      	; 0x87e <estimate_distance+0x98>
     87c:	2f c2       	rjmp	.+1118   	; 0xcdc <__stack+0x3dd>
     87e:	00 91 35 01 	lds	r16, 0x0135
     882:	10 91 36 01 	lds	r17, 0x0136
     886:	0a 17       	cp	r16, r26
     888:	1b 07       	cpc	r17, r27
     88a:	08 f4       	brcc	.+2      	; 0x88e <estimate_distance+0xa8>
     88c:	ef c1       	rjmp	.+990    	; 0xc6c <__stack+0x36d>
     88e:	00 91 37 01 	lds	r16, 0x0137
     892:	10 91 38 01 	lds	r17, 0x0138
     896:	0a 17       	cp	r16, r26
     898:	1b 07       	cpc	r17, r27
     89a:	08 f4       	brcc	.+2      	; 0x89e <estimate_distance+0xb8>
     89c:	27 c2       	rjmp	.+1102   	; 0xcec <__stack+0x3ed>
     89e:	00 91 39 01 	lds	r16, 0x0139
     8a2:	10 91 3a 01 	lds	r17, 0x013A
     8a6:	0a 17       	cp	r16, r26
     8a8:	1b 07       	cpc	r17, r27
     8aa:	08 f4       	brcc	.+2      	; 0x8ae <estimate_distance+0xc8>
     8ac:	27 c2       	rjmp	.+1102   	; 0xcfc <__stack+0x3fd>
     8ae:	00 91 3b 01 	lds	r16, 0x013B
     8b2:	10 91 3c 01 	lds	r17, 0x013C
     8b6:	0a 17       	cp	r16, r26
     8b8:	1b 07       	cpc	r17, r27
     8ba:	08 f4       	brcc	.+2      	; 0x8be <estimate_distance+0xd8>
     8bc:	27 c2       	rjmp	.+1102   	; 0xd0c <__stack+0x40d>
     8be:	00 91 3d 01 	lds	r16, 0x013D
     8c2:	10 91 3e 01 	lds	r17, 0x013E
     8c6:	0a 17       	cp	r16, r26
     8c8:	1b 07       	cpc	r17, r27
     8ca:	08 f4       	brcc	.+2      	; 0x8ce <estimate_distance+0xe8>
     8cc:	27 c2       	rjmp	.+1102   	; 0xd1c <__stack+0x41d>
     8ce:	00 91 3f 01 	lds	r16, 0x013F
     8d2:	10 91 40 01 	lds	r17, 0x0140
     8d6:	0a 17       	cp	r16, r26
     8d8:	1b 07       	cpc	r17, r27
     8da:	08 f4       	brcc	.+2      	; 0x8de <estimate_distance+0xf8>
     8dc:	27 c2       	rjmp	.+1102   	; 0xd2c <__stack+0x42d>
     8de:	00 91 41 01 	lds	r16, 0x0141
     8e2:	10 91 42 01 	lds	r17, 0x0142
     8e6:	0a 17       	cp	r16, r26
     8e8:	1b 07       	cpc	r17, r27
     8ea:	08 f4       	brcc	.+2      	; 0x8ee <estimate_distance+0x108>
     8ec:	23 c2       	rjmp	.+1094   	; 0xd34 <__stack+0x435>
     8ee:	00 91 43 01 	lds	r16, 0x0143
     8f2:	10 91 44 01 	lds	r17, 0x0144
     8f6:	0a 17       	cp	r16, r26
     8f8:	1b 07       	cpc	r17, r27
     8fa:	08 f4       	brcc	.+2      	; 0x8fe <estimate_distance+0x118>
     8fc:	23 c2       	rjmp	.+1094   	; 0xd44 <__stack+0x445>
     8fe:	00 91 45 01 	lds	r16, 0x0145
     902:	10 91 46 01 	lds	r17, 0x0146
     906:	0a 17       	cp	r16, r26
     908:	1b 07       	cpc	r17, r27
     90a:	08 f4       	brcc	.+2      	; 0x90e <__stack+0xf>
     90c:	23 c2       	rjmp	.+1094   	; 0xd54 <__stack+0x455>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a0 ed       	ldi	r26, 0xD0	; 208
     914:	b0 e4       	ldi	r27, 0x40	; 64
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	9a 83       	std	Y+2, r25	; 0x02
     91a:	ab 83       	std	Y+3, r26	; 0x03
     91c:	bc 83       	std	Y+4, r27	; 0x04
     91e:	4c e0       	ldi	r20, 0x0C	; 12
     920:	e4 2e       	mov	r14, r20
     922:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     924:	f7 01       	movw	r30, r14
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	e5 5d       	subi	r30, 0xD5	; 213
     92c:	fe 4f       	sbci	r31, 0xFE	; 254
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	b8 01       	movw	r22, r16
     934:	68 1b       	sub	r22, r24
     936:	79 0b       	sbc	r23, r25
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     940:	9b 01       	movw	r18, r22
     942:	ac 01       	movw	r20, r24
     944:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     94c:	ad 81       	ldd	r26, Y+5	; 0x05
     94e:	be 81       	ldd	r27, Y+6	; 0x06
     950:	bd 01       	movw	r22, r26
     952:	bb 0f       	add	r27, r27
     954:	88 0b       	sbc	r24, r24
     956:	99 0b       	sbc	r25, r25
     958:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__floatsisf>
     95c:	4b 01       	movw	r8, r22
     95e:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     960:	b8 01       	movw	r22, r16
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     96a:	2b 01       	movw	r4, r22
     96c:	3c 01       	movw	r6, r24
     96e:	29 81       	ldd	r18, Y+1	; 0x01
     970:	3a 81       	ldd	r19, Y+2	; 0x02
     972:	4b 81       	ldd	r20, Y+3	; 0x03
     974:	5c 81       	ldd	r21, Y+4	; 0x04
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
     97e:	9b 01       	movw	r18, r22
     980:	ac 01       	movw	r20, r24
     982:	c3 01       	movw	r24, r6
     984:	b2 01       	movw	r22, r4
     986:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     98e:	c5 01       	movw	r24, r10
     990:	b4 01       	movw	r22, r8
     992:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e2       	ldi	r20, 0x20	; 32
     99c:	51 e4       	ldi	r21, 0x41	; 65
     99e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
            b=((int)((int)b/(int)slope));
     9a2:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixsfsi>
     9a6:	8b 01       	movw	r16, r22
     9a8:	c7 01       	movw	r24, r14
     9aa:	b6 01       	movw	r22, r12
     9ac:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixsfsi>
     9b0:	ab 01       	movw	r20, r22
     9b2:	bc 01       	movw	r22, r24
     9b4:	c8 01       	movw	r24, r16
     9b6:	ba 01       	movw	r22, r20
     9b8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__divmodhi4>
            dist_high=b;
     9bc:	16 2f       	mov	r17, r22
     9be:	77 c0       	rjmp	.+238    	; 0xaae <__stack+0x1af>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9c0:	dc 01       	movw	r26, r24
     9c2:	cd 90       	ld	r12, X+
     9c4:	dc 90       	ld	r13, X
     9c6:	80 91 52 01 	lds	r24, 0x0152
     9ca:	90 91 53 01 	lds	r25, 0x0153
     9ce:	8c 15       	cp	r24, r12
     9d0:	9d 05       	cpc	r25, r13
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	8c c0       	rjmp	.+280    	; 0xaee <__stack+0x1ef>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9d6:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9d8:	e0 90 54 01 	lds	r14, 0x0154
     9dc:	f0 90 55 01 	lds	r15, 0x0155
     9e0:	ec 14       	cp	r14, r12
     9e2:	fd 04       	cpc	r15, r13
     9e4:	08 f4       	brcc	.+2      	; 0x9e8 <__stack+0xe9>
     9e6:	5e c1       	rjmp	.+700    	; 0xca4 <__stack+0x3a5>
     9e8:	e0 90 56 01 	lds	r14, 0x0156
     9ec:	f0 90 57 01 	lds	r15, 0x0157
     9f0:	ec 14       	cp	r14, r12
     9f2:	fd 04       	cpc	r15, r13
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <__stack+0xf9>
     9f6:	5e c1       	rjmp	.+700    	; 0xcb4 <__stack+0x3b5>
     9f8:	e0 90 58 01 	lds	r14, 0x0158
     9fc:	f0 90 59 01 	lds	r15, 0x0159
     a00:	ec 14       	cp	r14, r12
     a02:	fd 04       	cpc	r15, r13
     a04:	08 f4       	brcc	.+2      	; 0xa08 <__stack+0x109>
     a06:	5e c1       	rjmp	.+700    	; 0xcc4 <__stack+0x3c5>
     a08:	e0 90 5a 01 	lds	r14, 0x015A
     a0c:	f0 90 5b 01 	lds	r15, 0x015B
     a10:	ec 14       	cp	r14, r12
     a12:	fd 04       	cpc	r15, r13
     a14:	08 f4       	brcc	.+2      	; 0xa18 <__stack+0x119>
     a16:	5e c1       	rjmp	.+700    	; 0xcd4 <__stack+0x3d5>
     a18:	e0 90 5c 01 	lds	r14, 0x015C
     a1c:	f0 90 5d 01 	lds	r15, 0x015D
     a20:	ec 14       	cp	r14, r12
     a22:	fd 04       	cpc	r15, r13
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x129>
     a26:	c3 c0       	rjmp	.+390    	; 0xbae <__stack+0x2af>
     a28:	e0 90 5e 01 	lds	r14, 0x015E
     a2c:	f0 90 5f 01 	lds	r15, 0x015F
     a30:	ec 14       	cp	r14, r12
     a32:	fd 04       	cpc	r15, r13
     a34:	08 f4       	brcc	.+2      	; 0xa38 <__stack+0x139>
     a36:	56 c1       	rjmp	.+684    	; 0xce4 <__stack+0x3e5>
     a38:	e0 90 60 01 	lds	r14, 0x0160
     a3c:	f0 90 61 01 	lds	r15, 0x0161
     a40:	ec 14       	cp	r14, r12
     a42:	fd 04       	cpc	r15, r13
     a44:	08 f4       	brcc	.+2      	; 0xa48 <__stack+0x149>
     a46:	56 c1       	rjmp	.+684    	; 0xcf4 <__stack+0x3f5>
     a48:	e0 90 62 01 	lds	r14, 0x0162
     a4c:	f0 90 63 01 	lds	r15, 0x0163
     a50:	ec 14       	cp	r14, r12
     a52:	fd 04       	cpc	r15, r13
     a54:	08 f4       	brcc	.+2      	; 0xa58 <__stack+0x159>
     a56:	56 c1       	rjmp	.+684    	; 0xd04 <__stack+0x405>
     a58:	e0 90 64 01 	lds	r14, 0x0164
     a5c:	f0 90 65 01 	lds	r15, 0x0165
     a60:	ec 14       	cp	r14, r12
     a62:	fd 04       	cpc	r15, r13
     a64:	08 f4       	brcc	.+2      	; 0xa68 <__stack+0x169>
     a66:	56 c1       	rjmp	.+684    	; 0xd14 <__stack+0x415>
     a68:	e0 90 66 01 	lds	r14, 0x0166
     a6c:	f0 90 67 01 	lds	r15, 0x0167
     a70:	ec 14       	cp	r14, r12
     a72:	fd 04       	cpc	r15, r13
     a74:	08 f4       	brcc	.+2      	; 0xa78 <__stack+0x179>
     a76:	56 c1       	rjmp	.+684    	; 0xd24 <__stack+0x425>
     a78:	e0 90 68 01 	lds	r14, 0x0168
     a7c:	f0 90 69 01 	lds	r15, 0x0169
     a80:	ec 14       	cp	r14, r12
     a82:	fd 04       	cpc	r15, r13
     a84:	08 f4       	brcc	.+2      	; 0xa88 <__stack+0x189>
     a86:	5a c1       	rjmp	.+692    	; 0xd3c <__stack+0x43d>
     a88:	e0 90 6a 01 	lds	r14, 0x016A
     a8c:	f0 90 6b 01 	lds	r15, 0x016B
     a90:	ec 14       	cp	r14, r12
     a92:	fd 04       	cpc	r15, r13
     a94:	08 f4       	brcc	.+2      	; 0xa98 <__stack+0x199>
     a96:	5a c1       	rjmp	.+692    	; 0xd4c <__stack+0x44d>
     a98:	e0 90 6c 01 	lds	r14, 0x016C
     a9c:	f0 90 6d 01 	lds	r15, 0x016D
     aa0:	ec 14       	cp	r14, r12
     aa2:	fd 04       	cpc	r15, r13
     aa4:	08 f4       	brcc	.+2      	; 0xaa8 <__stack+0x1a9>
     aa6:	5a c1       	rjmp	.+692    	; 0xd5c <__stack+0x45d>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     aa8:	0a e5       	ldi	r16, 0x5A	; 90
     aaa:	31 c0       	rjmp	.+98     	; 0xb0e <__stack+0x20f>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     aac:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     aae:	ed 81       	ldd	r30, Y+5	; 0x05
     ab0:	fe 81       	ldd	r31, Y+6	; 0x06
     ab2:	ed 3b       	cpi	r30, 0xBD	; 189
     ab4:	f2 40       	sbci	r31, 0x02	; 2
     ab6:	fc f4       	brge	.+62     	; 0xaf6 <__stack+0x1f7>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     ab8:	81 e2       	ldi	r24, 0x21	; 33
     aba:	81 0f       	add	r24, r17
    }
}
     abc:	26 96       	adiw	r28, 0x06	; 6
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	8f 90       	pop	r8
     ae0:	7f 90       	pop	r7
     ae2:	6f 90       	pop	r6
     ae4:	5f 90       	pop	r5
     ae6:	4f 90       	pop	r4
     ae8:	3f 90       	pop	r3
     aea:	2f 90       	pop	r2
     aec:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     aee:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     af0:	81 e2       	ldi	r24, 0x21	; 33
     af2:	80 0f       	add	r24, r16
     af4:	e3 cf       	rjmp	.-58     	; 0xabc <__stack+0x1bd>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     af6:	d1 01       	movw	r26, r2
     af8:	cd 90       	ld	r12, X+
     afa:	dc 90       	ld	r13, X
     afc:	80 91 52 01 	lds	r24, 0x0152
     b00:	90 91 53 01 	lds	r25, 0x0153
     b04:	8c 15       	cp	r24, r12
     b06:	9d 05       	cpc	r25, r13
     b08:	08 f0       	brcs	.+2      	; 0xb0c <__stack+0x20d>
     b0a:	66 cf       	rjmp	.-308    	; 0x9d8 <__stack+0xd9>
            dist_low=0;
     b0c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b0e:	1f 3f       	cpi	r17, 0xFF	; 255
     b10:	79 f3       	breq	.-34     	; 0xaf0 <__stack+0x1f1>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b12:	ed 81       	ldd	r30, Y+5	; 0x05
     b14:	fe 81       	ldd	r31, Y+6	; 0x06
     b16:	bf 01       	movw	r22, r30
     b18:	ff 0f       	add	r31, r31
     b1a:	88 0b       	sbc	r24, r24
     b1c:	99 0b       	sbc	r25, r25
     b1e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__floatsisf>
     b22:	6b 01       	movw	r12, r22
     b24:	7c 01       	movw	r14, r24
     b26:	61 2f       	mov	r22, r17
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     b32:	4b 01       	movw	r8, r22
     b34:	5c 01       	movw	r10, r24
     b36:	a7 01       	movw	r20, r14
     b38:	96 01       	movw	r18, r12
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	81 e6       	ldi	r24, 0x61	; 97
     b40:	94 e4       	ldi	r25, 0x44	; 68
     b42:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     b46:	9b 01       	movw	r18, r22
     b48:	ac 01       	movw	r20, r24
     b4a:	c5 01       	movw	r24, r10
     b4c:	b4 01       	movw	r22, r8
     b4e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
     b52:	4b 01       	movw	r8, r22
     b54:	5c 01       	movw	r10, r24
     b56:	60 2f       	mov	r22, r16
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     b62:	2b 01       	movw	r4, r22
     b64:	3c 01       	movw	r6, r24
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	4f e2       	ldi	r20, 0x2F	; 47
     b6c:	54 e4       	ldi	r21, 0x44	; 68
     b6e:	c7 01       	movw	r24, r14
     b70:	b6 01       	movw	r22, r12
     b72:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     b76:	9b 01       	movw	r18, r22
     b78:	ac 01       	movw	r20, r24
     b7a:	c3 01       	movw	r24, r6
     b7c:	b2 01       	movw	r22, r4
     b7e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	c5 01       	movw	r24, r10
     b88:	b4 01       	movw	r22, r8
     b8a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	48 e4       	ldi	r20, 0x48	; 72
     b94:	53 e4       	ldi	r21, 0x43	; 67
     b96:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__divsf3>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	44 e0       	ldi	r20, 0x04	; 4
     ba0:	52 e4       	ldi	r21, 0x42	; 66
     ba2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     ba6:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fixunssfsi>
     baa:	86 2f       	mov	r24, r22
     bac:	87 cf       	rjmp	.-242    	; 0xabc <__stack+0x1bd>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     bae:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     bb0:	85 e0       	ldi	r24, 0x05	; 5
     bb2:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	fc 01       	movw	r30, r24
     bba:	e0 5b       	subi	r30, 0xB0	; 176
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
     bc2:	b7 01       	movw	r22, r14
     bc4:	68 1b       	sub	r22, r24
     bc6:	79 0b       	sbc	r23, r25
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     bd8:	4b 01       	movw	r8, r22
     bda:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bdc:	b6 01       	movw	r22, r12
     bde:	dd 0c       	add	r13, r13
     be0:	88 0b       	sbc	r24, r24
     be2:	99 0b       	sbc	r25, r25
     be4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__floatsisf>
     be8:	2b 01       	movw	r4, r22
     bea:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bec:	b7 01       	movw	r22, r14
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     bf6:	6b 01       	movw	r12, r22
     bf8:	7c 01       	movw	r14, r24
     bfa:	60 2f       	mov	r22, r16
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	5f e3       	ldi	r21, 0x3F	; 63
     c0e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	a9 01       	movw	r20, r18
     c18:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     c1c:	a5 01       	movw	r20, r10
     c1e:	94 01       	movw	r18, r8
     c20:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
     c24:	9b 01       	movw	r18, r22
     c26:	ac 01       	movw	r20, r24
     c28:	c7 01       	movw	r24, r14
     c2a:	b6 01       	movw	r22, r12
     c2c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c34:	c3 01       	movw	r24, r6
     c36:	b2 01       	movw	r22, r4
     c38:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__subsf3>
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	40 e2       	ldi	r20, 0x20	; 32
     c42:	51 e4       	ldi	r21, 0x41	; 65
     c44:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c48:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixsfsi>
     c4c:	7b 01       	movw	r14, r22
     c4e:	c5 01       	movw	r24, r10
     c50:	b4 01       	movw	r22, r8
     c52:	0e 94 46 0b 	call	0x168c	; 0x168c <__fixsfsi>
     c56:	ab 01       	movw	r20, r22
     c58:	bc 01       	movw	r22, r24
     c5a:	c7 01       	movw	r24, r14
     c5c:	ba 01       	movw	r22, r20
     c5e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__divmodhi4>
                dist_low=b;
     c62:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c64:	6f 3f       	cpi	r22, 0xFF	; 255
     c66:	09 f0       	breq	.+2      	; 0xc6a <__stack+0x36b>
     c68:	52 cf       	rjmp	.-348    	; 0xb0e <__stack+0x20f>
     c6a:	26 cf       	rjmp	.-436    	; 0xab8 <__stack+0x1b9>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c6c:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c6e:	85 e0       	ldi	r24, 0x05	; 5
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	7c 01       	movw	r14, r24
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	ef 1a       	sub	r14, r31
     c78:	f1 08       	sbc	r15, r1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatunsisf>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	5f e3       	ldi	r21, 0x3F	; 63
     c8c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	a9 01       	movw	r20, r18
     c96:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     c9a:	69 83       	std	Y+1, r22	; 0x01
     c9c:	7a 83       	std	Y+2, r23	; 0x02
     c9e:	8b 83       	std	Y+3, r24	; 0x03
     ca0:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     ca2:	40 ce       	rjmp	.-896    	; 0x924 <__stack+0x25>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ca4:	01 e0       	ldi	r16, 0x01	; 1
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	84 cf       	rjmp	.-248    	; 0xbb4 <__stack+0x2b5>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	df cf       	rjmp	.-66     	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb4:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	7c cf       	rjmp	.-264    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cbc:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	d7 cf       	rjmp	.-82     	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc4:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	74 cf       	rjmp	.-280    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ccc:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	cf cf       	rjmp	.-98     	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd4:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	6c cf       	rjmp	.-296    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cdc:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	c7 cf       	rjmp	.-114    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce4:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	64 cf       	rjmp	.-312    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cec:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cee:	86 e0       	ldi	r24, 0x06	; 6
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	bf cf       	rjmp	.-130    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf4:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     cf6:	87 e0       	ldi	r24, 0x07	; 7
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	5c cf       	rjmp	.-328    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cfc:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	b7 cf       	rjmp	.-146    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d04:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d06:	88 e0       	ldi	r24, 0x08	; 8
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	54 cf       	rjmp	.-344    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0c:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d0e:	88 e0       	ldi	r24, 0x08	; 8
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	af cf       	rjmp	.-162    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d14:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d16:	89 e0       	ldi	r24, 0x09	; 9
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	4c cf       	rjmp	.-360    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1c:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d1e:	89 e0       	ldi	r24, 0x09	; 9
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a7 cf       	rjmp	.-178    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d24:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d26:	8a e0       	ldi	r24, 0x0A	; 10
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	44 cf       	rjmp	.-376    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d2c:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d2e:	8a e0       	ldi	r24, 0x0A	; 10
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9f cf       	rjmp	.-194    	; 0xc72 <__stack+0x373>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d34:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d36:	8b e0       	ldi	r24, 0x0B	; 11
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9b cf       	rjmp	.-202    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d3c:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d3e:	8b e0       	ldi	r24, 0x0B	; 11
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	38 cf       	rjmp	.-400    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d44:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d46:	8c e0       	ldi	r24, 0x0C	; 12
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	93 cf       	rjmp	.-218    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d4c:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d4e:	8c e0       	ldi	r24, 0x0C	; 12
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	30 cf       	rjmp	.-416    	; 0xbb4 <__stack+0x2b5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d54:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d56:	8d e0       	ldi	r24, 0x0D	; 13
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	8b cf       	rjmp	.-234    	; 0xc72 <__stack+0x373>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d5c:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d5e:	8d e0       	ldi	r24, 0x0D	; 13
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	28 cf       	rjmp	.-432    	; 0xbb4 <__stack+0x2b5>

00000d64 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	2f 93       	push	r18
     d70:	3f 93       	push	r19
     d72:	4f 93       	push	r20
     d74:	5f 93       	push	r21
     d76:	6f 93       	push	r22
     d78:	7f 93       	push	r23
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	af 93       	push	r26
     d80:	bf 93       	push	r27
     d82:	ef 93       	push	r30
     d84:	ff 93       	push	r31
    tx_clock += tx_increment;
     d86:	20 91 71 01 	lds	r18, 0x0171
     d8a:	30 91 72 01 	lds	r19, 0x0172
     d8e:	80 91 6f 01 	lds	r24, 0x016F
     d92:	90 91 70 01 	lds	r25, 0x0170
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	90 93 72 01 	sts	0x0172, r25
     d9e:	80 93 71 01 	sts	0x0171, r24
    tx_increment = 0xFF;
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	90 93 70 01 	sts	0x0170, r25
     daa:	80 93 6f 01 	sts	0x016F, r24
    OCR0A = tx_increment;
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     db2:	80 91 4d 01 	lds	r24, 0x014D
     db6:	90 91 4e 01 	lds	r25, 0x014E
     dba:	a0 91 4f 01 	lds	r26, 0x014F
     dbe:	b0 91 50 01 	lds	r27, 0x0150
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	a1 1d       	adc	r26, r1
     dc6:	b1 1d       	adc	r27, r1
     dc8:	80 93 4d 01 	sts	0x014D, r24
     dcc:	90 93 4e 01 	sts	0x014E, r25
     dd0:	a0 93 4f 01 	sts	0x014F, r26
     dd4:	b0 93 50 01 	sts	0x0150, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     dd8:	80 91 51 01 	lds	r24, 0x0151
     ddc:	81 11       	cpse	r24, r1
     dde:	0f c0       	rjmp	.+30     	; 0xdfe <__vector_14+0x9a>
     de0:	80 91 80 01 	lds	r24, 0x0180
     de4:	90 91 81 01 	lds	r25, 0x0181
     de8:	20 91 71 01 	lds	r18, 0x0171
     dec:	30 91 72 01 	lds	r19, 0x0172
     df0:	82 17       	cp	r24, r18
     df2:	93 07       	cpc	r25, r19
     df4:	20 f4       	brcc	.+8      	; 0xdfe <__vector_14+0x9a>
     df6:	80 91 29 01 	lds	r24, 0x0129
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	89 f0       	breq	.+34     	; 0xe20 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dfe:	ff 91       	pop	r31
     e00:	ef 91       	pop	r30
     e02:	bf 91       	pop	r27
     e04:	af 91       	pop	r26
     e06:	9f 91       	pop	r25
     e08:	8f 91       	pop	r24
     e0a:	7f 91       	pop	r23
     e0c:	6f 91       	pop	r22
     e0e:	5f 91       	pop	r21
     e10:	4f 91       	pop	r20
     e12:	3f 91       	pop	r19
     e14:	2f 91       	pop	r18
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e20:	e0 91 11 01 	lds	r30, 0x0111
     e24:	f0 91 12 01 	lds	r31, 0x0112
     e28:	09 95       	icall
        if (msg) {
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	41 f3       	breq	.-48     	; 0xdfe <__vector_14+0x9a>
            if (message_send(msg)) {
     e2e:	0e 94 9a 09 	call	0x1334	; 0x1334 <message_send>
     e32:	81 11       	cpse	r24, r1
     e34:	09 c0       	rjmp	.+18     	; 0xe48 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e36:	0e 94 c3 0c 	call	0x1986	; 0x1986 <rand>
     e3a:	99 27       	eor	r25, r25
     e3c:	90 93 70 01 	sts	0x0170, r25
     e40:	80 93 6f 01 	sts	0x016F, r24
                OCR0A = tx_increment;
     e44:	87 bd       	out	0x27, r24	; 39
     e46:	db cf       	rjmp	.-74     	; 0xdfe <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e48:	e0 91 0f 01 	lds	r30, 0x010F
     e4c:	f0 91 10 01 	lds	r31, 0x0110
     e50:	09 95       	icall
                tx_clock = 0;
     e52:	10 92 72 01 	sts	0x0172, r1
     e56:	10 92 71 01 	sts	0x0171, r1
     e5a:	d1 cf       	rjmp	.-94     	; 0xdfe <__vector_14+0x9a>

00000e5c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e5c:	80 ff       	sbrs	r24, 0
     e5e:	11 c0       	rjmp	.+34     	; 0xe82 <set_color+0x26>
        DDRD |= (1<<5);
     e60:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e62:	81 ff       	sbrs	r24, 1
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <set_color+0x2c>
        DDRD |= (1<<4);
     e66:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e68:	82 ff       	sbrs	r24, 2
     e6a:	11 c0       	rjmp	.+34     	; 0xe8e <set_color+0x32>
        DDRC |= (1<<3);
     e6c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e6e:	83 ff       	sbrs	r24, 3
     e70:	11 c0       	rjmp	.+34     	; 0xe94 <set_color+0x38>
        DDRC |= (1<<2);
     e72:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e74:	84 ff       	sbrs	r24, 4
     e76:	11 c0       	rjmp	.+34     	; 0xe9a <set_color+0x3e>
        DDRC |= (1<<5);
     e78:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e7a:	85 fd       	sbrc	r24, 5
     e7c:	11 c0       	rjmp	.+34     	; 0xea0 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e7e:	3c 98       	cbi	0x07, 4	; 7
     e80:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e82:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e84:	81 fd       	sbrc	r24, 1
     e86:	ef cf       	rjmp	.-34     	; 0xe66 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e88:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e8a:	82 fd       	sbrc	r24, 2
     e8c:	ef cf       	rjmp	.-34     	; 0xe6c <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e8e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e90:	83 fd       	sbrc	r24, 3
     e92:	ef cf       	rjmp	.-34     	; 0xe72 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e94:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e96:	84 fd       	sbrc	r24, 4
     e98:	ef cf       	rjmp	.-34     	; 0xe78 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e9a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e9c:	85 ff       	sbrs	r24, 5
     e9e:	ef cf       	rjmp	.-34     	; 0xe7e <set_color+0x22>
        DDRC |= (1<<4);
     ea0:	3c 9a       	sbi	0x07, 4	; 7
     ea2:	08 95       	ret

00000ea4 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
    rx_timer_off();
     eb2:	10 92 81 00 	sts	0x0081, r1
     eb6:	10 92 85 00 	sts	0x0085, r1
     eba:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 2a 01 	sts	0x012A, r24
    rx_leadingbyte = 1;
     ec4:	80 93 6e 01 	sts	0x016E, r24
    rx_busy = 0;
     ec8:	10 92 51 01 	sts	0x0151, r1
    adc_trigger_high_gain();
     ecc:	10 92 7c 00 	sts	0x007C, r1
     ed0:	93 ea       	ldi	r25, 0xA3	; 163
     ed2:	90 93 7a 00 	sts	0x007A, r25
     ed6:	80 93 7b 00 	sts	0x007B, r24
}
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	0f 90       	pop	r0
     ee4:	1f 90       	pop	r1
     ee6:	18 95       	reti

00000ee8 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f0e:	20 91 84 00 	lds	r18, 0x0084
     f12:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	40 93 51 01 	sts	0x0151, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f1c:	80 91 2a 01 	lds	r24, 0x012A
     f20:	88 23       	and	r24, r24
     f22:	a9 f1       	breq	.+106    	; 0xf8e <__vector_23+0xa6>
        rx_timer_on();
     f24:	10 92 85 00 	sts	0x0085, r1
     f28:	10 92 84 00 	sts	0x0084, r1
     f2c:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f30:	10 92 82 01 	sts	0x0182, r1
        rx_leadingbit = 0;
     f34:	10 92 2a 01 	sts	0x012A, r1
        if (rx_leadingbyte) {
     f38:	80 91 6e 01 	lds	r24, 0x016E
     f3c:	88 23       	and	r24, r24
     f3e:	a1 f0       	breq	.+40     	; 0xf68 <__vector_23+0x80>
            adc_finish_conversion();
     f40:	80 91 7a 00 	lds	r24, 0x007A
     f44:	86 fd       	sbrc	r24, 6
     f46:	fc cf       	rjmp	.-8      	; 0xf40 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f48:	80 91 78 00 	lds	r24, 0x0078
     f4c:	90 91 79 00 	lds	r25, 0x0079
     f50:	90 93 4c 01 	sts	0x014C, r25
     f54:	80 93 4b 01 	sts	0x014B, r24
            adc_trigger_low_gain();
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 7c 00 	sts	0x007C, r24
     f5e:	93 ea       	ldi	r25, 0xA3	; 163
     f60:	90 93 7a 00 	sts	0x007A, r25
     f64:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f8e:	c9 01       	movw	r24, r18
     f90:	87 58       	subi	r24, 0x87	; 135
     f92:	91 09       	sbc	r25, r1
     f94:	84 37       	cpi	r24, 0x74	; 116
     f96:	99 40       	sbci	r25, 0x09	; 9
     f98:	08 f0       	brcs	.+2      	; 0xf9c <__vector_23+0xb4>
     f9a:	52 c0       	rjmp	.+164    	; 0x1040 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f9c:	26 58       	subi	r18, 0x86	; 134
     f9e:	31 09       	sbc	r19, r1
     fa0:	a4 ef       	ldi	r26, 0xF4	; 244
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	0e 94 44 0a 	call	0x1488	; 0x1488 <__umulhisi3>
     fa8:	aa 27       	eor	r26, r26
     faa:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	91 05       	cpc	r25, r1
     fb0:	a1 05       	cpc	r26, r1
     fb2:	b1 05       	cpc	r27, r1
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <__vector_23+0xd0>
     fb6:	7b c0       	rjmp	.+246    	; 0x10ae <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     fb8:	40 93 2a 01 	sts	0x012A, r20
                if (rx_leadingbyte) {
     fbc:	80 91 6e 01 	lds	r24, 0x016E
     fc0:	81 11       	cpse	r24, r1
     fc2:	52 c0       	rjmp	.+164    	; 0x1068 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     fc4:	80 91 48 01 	lds	r24, 0x0148
     fc8:	e8 2f       	mov	r30, r24
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ec 58       	subi	r30, 0x8C	; 140
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	90 91 82 01 	lds	r25, 0x0182
     fd4:	90 83       	st	Z, r25
                    rx_byteindex++;
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	80 93 48 01 	sts	0x0148, r24
                    if (rx_byteindex == sizeof(message_t)) {
     fdc:	8c 30       	cpi	r24, 0x0C	; 12
     fde:	21 f6       	brne	.-120    	; 0xf68 <__vector_23+0x80>
                        rx_timer_off();
     fe0:	10 92 81 00 	sts	0x0081, r1
     fe4:	10 92 85 00 	sts	0x0085, r1
     fe8:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fec:	40 93 6e 01 	sts	0x016E, r20
                        rx_busy = 0;
     ff0:	10 92 51 01 	sts	0x0151, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     ff4:	c0 91 7e 01 	lds	r28, 0x017E
     ff8:	d0 91 7f 01 	lds	r29, 0x017F
     ffc:	84 e7       	ldi	r24, 0x74	; 116
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 7e 09 	call	0x12fc	; 0x12fc <message_crc>
    1004:	c8 17       	cp	r28, r24
    1006:	d9 07       	cpc	r29, r25
    1008:	09 f0       	breq	.+2      	; 0x100c <__vector_23+0x124>
    100a:	ae cf       	rjmp	.-164    	; 0xf68 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    100c:	80 91 7d 01 	lds	r24, 0x017D
    1010:	87 ff       	sbrs	r24, 7
    1012:	61 c0       	rjmp	.+194    	; 0x10d6 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1014:	98 e7       	ldi	r25, 0x78	; 120
    1016:	98 0f       	add	r25, r24
    1018:	93 30       	cpi	r25, 0x03	; 3
    101a:	30 f0       	brcs	.+12     	; 0x1028 <__vector_23+0x140>
        motors_off();
    101c:	53 98       	cbi	0x0a, 3	; 10
    101e:	23 98       	cbi	0x04, 3	; 4
    1020:	10 92 b4 00 	sts	0x00B4, r1
    1024:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	fc 01       	movw	r30, r24
    102c:	e0 58       	subi	r30, 0x80	; 128
    102e:	f1 09       	sbc	r31, r1
    1030:	eb 30       	cpi	r30, 0x0B	; 11
    1032:	f1 05       	cpc	r31, r1
    1034:	08 f0       	brcs	.+2      	; 0x1038 <__vector_23+0x150>
    1036:	98 cf       	rjmp	.-208    	; 0xf68 <__vector_23+0x80>
    1038:	e5 5c       	subi	r30, 0xC5	; 197
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1040:	10 92 81 00 	sts	0x0081, r1
    1044:	10 92 85 00 	sts	0x0085, r1
    1048:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    104c:	40 93 2a 01 	sts	0x012A, r20
            rx_leadingbyte = 1;
    1050:	40 93 6e 01 	sts	0x016E, r20
            rx_busy = 0;
    1054:	10 92 51 01 	sts	0x0151, r1
            adc_trigger_high_gain();
    1058:	10 92 7c 00 	sts	0x007C, r1
    105c:	83 ea       	ldi	r24, 0xA3	; 163
    105e:	80 93 7a 00 	sts	0x007A, r24
    1062:	40 93 7b 00 	sts	0x007B, r20
    1066:	80 cf       	rjmp	.-256    	; 0xf68 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1068:	80 91 7a 00 	lds	r24, 0x007A
    106c:	86 fd       	sbrc	r24, 6
    106e:	fc cf       	rjmp	.-8      	; 0x1068 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1070:	80 91 78 00 	lds	r24, 0x0078
    1074:	90 91 79 00 	lds	r25, 0x0079
    1078:	90 93 4a 01 	sts	0x014A, r25
    107c:	80 93 49 01 	sts	0x0149, r24
                    adc_trigger_high_gain();
    1080:	10 92 7c 00 	sts	0x007C, r1
    1084:	83 ea       	ldi	r24, 0xA3	; 163
    1086:	80 93 7a 00 	sts	0x007A, r24
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1090:	90 91 82 01 	lds	r25, 0x0182
    1094:	99 23       	and	r25, r25
    1096:	d1 f0       	breq	.+52     	; 0x10cc <__vector_23+0x1e4>
                        rx_timer_off();
    1098:	10 92 81 00 	sts	0x0081, r1
    109c:	10 92 85 00 	sts	0x0085, r1
    10a0:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10a4:	80 93 6e 01 	sts	0x016E, r24
                        rx_busy = 0;
    10a8:	10 92 51 01 	sts	0x0151, r1
    10ac:	5d cf       	rjmp	.-326    	; 0xf68 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	f9 01       	movw	r30, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <__vector_23+0x1d2>
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	8a 95       	dec	r24
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <__vector_23+0x1ce>
    10be:	cf 01       	movw	r24, r30
    10c0:	90 91 82 01 	lds	r25, 0x0182
    10c4:	89 2b       	or	r24, r25
    10c6:	80 93 82 01 	sts	0x0182, r24
    10ca:	4e cf       	rjmp	.-356    	; 0xf68 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10cc:	10 92 6e 01 	sts	0x016E, r1
                        rx_byteindex = 0;
    10d0:	10 92 48 01 	sts	0x0148, r1
    10d4:	49 cf       	rjmp	.-366    	; 0xf68 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10d6:	e0 91 13 01 	lds	r30, 0x0113
    10da:	f0 91 14 01 	lds	r31, 0x0114
    10de:	69 e4       	ldi	r22, 0x49	; 73
    10e0:	71 e0       	ldi	r23, 0x01	; 1
    10e2:	84 e7       	ldi	r24, 0x74	; 116
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	09 95       	icall
    10e8:	3f cf       	rjmp	.-386    	; 0xf68 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10ea:	80 91 74 01 	lds	r24, 0x0174
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <__vector_23+0x20c>
    10f2:	dd c0       	rjmp	.+442    	; 0x12ae <__vector_23+0x3c6>
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <__vector_23+0x210>
    10f6:	ba c0       	rjmp	.+372    	; 0x126c <__vector_23+0x384>
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	09 f4       	brne	.+2      	; 0x10fe <__vector_23+0x216>
    10fc:	c6 c0       	rjmp	.+396    	; 0x128a <__vector_23+0x3a2>
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	09 f0       	breq	.+2      	; 0x1104 <__vector_23+0x21c>
    1102:	b1 c0       	rjmp	.+354    	; 0x1266 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1104:	80 91 27 01 	lds	r24, 0x0127
    1108:	90 91 7a 01 	lds	r25, 0x017A
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	09 f4       	brne	.+2      	; 0x1112 <__vector_23+0x22a>
    1110:	e3 c0       	rjmp	.+454    	; 0x12d8 <__vector_23+0x3f0>
    1112:	80 91 79 01 	lds	r24, 0x0179
                        prev_motion = MOVE_STOP;
    1116:	10 92 28 01 	sts	0x0128, r1
                        cur_motion = MOVE_STRAIGHT;
    111a:	23 e0       	ldi	r18, 0x03	; 3
    111c:	20 93 27 01 	sts	0x0127, r18
                        kilo_straight_left = calibmsg->straight_left;
    1120:	80 93 85 01 	sts	0x0185, r24
                        kilo_straight_right = calibmsg->straight_right;
    1124:	90 93 86 01 	sts	0x0186, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1128:	80 91 29 01 	lds	r24, 0x0129
    112c:	86 30       	cpi	r24, 0x06	; 6
    112e:	09 f4       	brne	.+2      	; 0x1132 <__vector_23+0x24a>
    1130:	1b cf       	rjmp	.-458    	; 0xf68 <__vector_23+0x80>
                motors_on();
    1132:	53 9a       	sbi	0x0a, 3	; 10
    1134:	23 9a       	sbi	0x04, 3	; 4
    1136:	10 92 b4 00 	sts	0x00B4, r1
    113a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    113e:	86 e0       	ldi	r24, 0x06	; 6
    1140:	80 93 29 01 	sts	0x0129, r24
    1144:	11 cf       	rjmp	.-478    	; 0xf68 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1146:	80 91 29 01 	lds	r24, 0x0129
    114a:	86 30       	cpi	r24, 0x06	; 6
    114c:	99 f0       	breq	.+38     	; 0x1174 <__vector_23+0x28c>
                motors_on();
    114e:	53 9a       	sbi	0x0a, 3	; 10
    1150:	23 9a       	sbi	0x04, 3	; 4
    1152:	10 92 b4 00 	sts	0x00B4, r1
    1156:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    115a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    115c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    115e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1160:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1162:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1164:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1166:	10 92 27 01 	sts	0x0127, r1
    116a:	10 92 28 01 	sts	0x0128, r1
                kilo_state = MOVING;
    116e:	86 e0       	ldi	r24, 0x06	; 6
    1170:	80 93 29 01 	sts	0x0129, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c 01       	movw	r18, r24
    117a:	00 90 74 01 	lds	r0, 0x0174
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <__vector_23+0x29c>
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <__vector_23+0x298>
    1188:	80 91 83 01 	lds	r24, 0x0183
    118c:	90 91 84 01 	lds	r25, 0x0184
    1190:	82 23       	and	r24, r18
    1192:	93 23       	and	r25, r19
    1194:	89 2b       	or	r24, r25
    1196:	09 f0       	breq	.+2      	; 0x119a <__vector_23+0x2b2>
    1198:	86 c0       	rjmp	.+268    	; 0x12a6 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    119a:	10 92 27 01 	sts	0x0127, r1
    119e:	e4 ce       	rjmp	.-568    	; 0xf68 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 29 01 	sts	0x0129, r24
    11a6:	e0 ce       	rjmp	.-576    	; 0xf68 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    11a8:	e0 e0       	ldi	r30, 0x00	; 0
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    11ae:	80 91 6e 00 	lds	r24, 0x006E
    11b2:	8d 7f       	andi	r24, 0xFD	; 253
    11b4:	80 93 6e 00 	sts	0x006E, r24
    11b8:	16 bc       	out	0x26, r1	; 38
            bootload();
    11ba:	e0 e0       	ldi	r30, 0x00	; 0
    11bc:	f0 e7       	ldi	r31, 0x70	; 112
    11be:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11c0:	10 92 29 01 	sts	0x0129, r1
    11c4:	d1 ce       	rjmp	.-606    	; 0xf68 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	80 93 29 01 	sts	0x0129, r24
    11cc:	cd ce       	rjmp	.-614    	; 0xf68 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11ce:	85 e0       	ldi	r24, 0x05	; 5
    11d0:	80 93 29 01 	sts	0x0129, r24
    11d4:	c9 ce       	rjmp	.-622    	; 0xf68 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11d6:	80 91 29 01 	lds	r24, 0x0129
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <__vector_23+0x2f8>
    11de:	c4 ce       	rjmp	.-632    	; 0xf68 <__vector_23+0x80>
    11e0:	80 91 29 01 	lds	r24, 0x0129
    11e4:	84 30       	cpi	r24, 0x04	; 4
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__vector_23+0x302>
    11e8:	bf ce       	rjmp	.-642    	; 0xf68 <__vector_23+0x80>
                motors_on();
    11ea:	53 9a       	sbi	0x0a, 3	; 10
    11ec:	23 9a       	sbi	0x04, 3	; 4
    11ee:	10 92 b4 00 	sts	0x00B4, r1
    11f2:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	80 93 29 01 	sts	0x0129, r24
    11fc:	b5 ce       	rjmp	.-662    	; 0xf68 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11fe:	80 91 29 01 	lds	r24, 0x0129
    1202:	86 30       	cpi	r24, 0x06	; 6
    1204:	09 f0       	breq	.+2      	; 0x1208 <__vector_23+0x320>
    1206:	b0 ce       	rjmp	.-672    	; 0xf68 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1208:	60 91 83 01 	lds	r22, 0x0183
    120c:	80 eb       	ldi	r24, 0xB0	; 176
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1214:	60 91 84 01 	lds	r22, 0x0184
    1218:	81 eb       	ldi	r24, 0xB1	; 177
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1220:	60 91 87 01 	lds	r22, 0x0187
    1224:	85 e0       	ldi	r24, 0x05	; 5
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    122c:	60 91 73 01 	lds	r22, 0x0173
    1230:	89 e0       	ldi	r24, 0x09	; 9
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1238:	60 91 85 01 	lds	r22, 0x0185
    123c:	8c e0       	ldi	r24, 0x0C	; 12
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1244:	60 91 86 01 	lds	r22, 0x0186
    1248:	84 e1       	ldi	r24, 0x14	; 20
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <eeprom_write_byte>
                        motors_off();
    1250:	53 98       	cbi	0x0a, 3	; 10
    1252:	23 98       	cbi	0x04, 3	; 4
    1254:	10 92 b4 00 	sts	0x00B4, r1
    1258:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 29 01 	sts	0x0129, r24
    1262:	80 91 74 01 	lds	r24, 0x0174
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1266:	81 11       	cpse	r24, r1
    1268:	5f cf       	rjmp	.-322    	; 0x1128 <__vector_23+0x240>
    126a:	7e ce       	rjmp	.-772    	; 0xf68 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    126c:	88 23       	and	r24, r24
    126e:	39 f2       	breq	.-114    	; 0x11fe <__vector_23+0x316>
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	c9 f7       	brne	.-14     	; 0x1266 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1274:	80 91 75 01 	lds	r24, 0x0175
    1278:	90 91 76 01 	lds	r25, 0x0176
    127c:	90 93 84 01 	sts	0x0184, r25
    1280:	80 93 83 01 	sts	0x0183, r24
                    cur_motion = MOVE_STOP;
    1284:	10 92 27 01 	sts	0x0127, r1
    1288:	4f cf       	rjmp	.-354    	; 0x1128 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    128a:	80 91 27 01 	lds	r24, 0x0127
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	71 f1       	breq	.+92     	; 0x12ee <__vector_23+0x406>
    1292:	80 91 78 01 	lds	r24, 0x0178
                        prev_motion = MOVE_STOP;
    1296:	10 92 28 01 	sts	0x0128, r1
                        cur_motion = MOVE_RIGHT;
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	90 93 27 01 	sts	0x0127, r25
                        kilo_turn_right = calibmsg->turn_right;
    12a0:	80 93 73 01 	sts	0x0173, r24
    12a4:	41 cf       	rjmp	.-382    	; 0x1128 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 27 01 	sts	0x0127, r24
    12ac:	5d ce       	rjmp	.-838    	; 0xf68 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12ae:	80 91 27 01 	lds	r24, 0x0127
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	51 f0       	breq	.+20     	; 0x12ca <__vector_23+0x3e2>
    12b6:	80 91 77 01 	lds	r24, 0x0177
                        prev_motion = MOVE_STOP;
    12ba:	10 92 28 01 	sts	0x0128, r1
                        cur_motion = MOVE_LEFT;
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	90 93 27 01 	sts	0x0127, r25
                        kilo_turn_left = calibmsg->turn_left;
    12c4:	80 93 87 01 	sts	0x0187, r24
    12c8:	2f cf       	rjmp	.-418    	; 0x1128 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12ca:	80 91 77 01 	lds	r24, 0x0177
    12ce:	90 91 87 01 	lds	r25, 0x0187
    12d2:	89 13       	cpse	r24, r25
    12d4:	f2 cf       	rjmp	.-28     	; 0x12ba <__vector_23+0x3d2>
    12d6:	28 cf       	rjmp	.-432    	; 0x1128 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12d8:	80 91 86 01 	lds	r24, 0x0186
    12dc:	98 13       	cpse	r25, r24
    12de:	19 cf       	rjmp	.-462    	; 0x1112 <__vector_23+0x22a>
    12e0:	80 91 79 01 	lds	r24, 0x0179
    12e4:	20 91 85 01 	lds	r18, 0x0185
    12e8:	82 13       	cpse	r24, r18
    12ea:	15 cf       	rjmp	.-470    	; 0x1116 <__vector_23+0x22e>
    12ec:	1d cf       	rjmp	.-454    	; 0x1128 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12ee:	80 91 78 01 	lds	r24, 0x0178
    12f2:	90 91 73 01 	lds	r25, 0x0173
    12f6:	89 13       	cpse	r24, r25
    12f8:	ce cf       	rjmp	.-100    	; 0x1296 <__vector_23+0x3ae>
    12fa:	16 cf       	rjmp	.-468    	; 0x1128 <__vector_23+0x240>

000012fc <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12fc:	fc 01       	movw	r30, r24
    12fe:	ac 01       	movw	r20, r24
    1300:	46 5f       	subi	r20, 0xF6	; 246
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1308:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    130a:	82 27       	eor	r24, r18
    130c:	08 2e       	mov	r0, r24
    130e:	82 95       	swap	r24
    1310:	80 7f       	andi	r24, 0xF0	; 240
    1312:	80 25       	eor	r24, r0
    1314:	09 2e       	mov	r0, r25
    1316:	98 2f       	mov	r25, r24
    1318:	82 95       	swap	r24
    131a:	8f 70       	andi	r24, 0x0F	; 15
    131c:	08 26       	eor	r0, r24
    131e:	86 95       	lsr	r24
    1320:	98 27       	eor	r25, r24
    1322:	89 27       	eor	r24, r25
    1324:	88 0f       	add	r24, r24
    1326:	88 0f       	add	r24, r24
    1328:	88 0f       	add	r24, r24
    132a:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    132c:	e4 17       	cp	r30, r20
    132e:	f5 07       	cpc	r31, r21
    1330:	59 f7       	brne	.-42     	; 0x1308 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1332:	08 95       	ret

00001334 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1334:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1336:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1338:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    133a:	20 91 47 01 	lds	r18, 0x0147
    or tmpreg1, ddrreg
    133e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1340:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1342:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1344:	30 91 47 01 	lds	r19, 0x0147
    1348:	20 30       	cpi	r18, 0x00	; 0
    134a:	29 f0       	breq	.+10     	; 0x1356 <message_send+0x22>
    134c:	00 00       	nop
    134e:	25 b1       	in	r18, 0x05	; 5
    1350:	23 2b       	or	r18, r19
    1352:	25 b9       	out	0x05, r18	; 5
    1354:	04 c0       	rjmp	.+8      	; 0x135e <message_send+0x2a>
    1356:	00 00       	nop
    1358:	00 00       	nop
    135a:	00 00       	nop
    135c:	00 c0       	rjmp	.+0      	; 0x135e <message_send+0x2a>
    135e:	00 00       	nop
    1360:	00 00       	nop
    1362:	00 00       	nop
    1364:	30 95       	com	r19
    1366:	25 b1       	in	r18, 0x05	; 5
    1368:	23 23       	and	r18, r19
    136a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    136c:	2e ea       	ldi	r18, 0xAE	; 174
    136e:	2a 95       	dec	r18
    1370:	f1 f7       	brne	.-4      	; 0x136e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1372:	2b ee       	ldi	r18, 0xEB	; 235

00001374 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1374:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1376:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1378:	0a c0       	rjmp	.+20     	; 0x138e <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    137a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    137c:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    1380:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1382:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1384:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1386:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1388:	0f be       	out	0x3f, r0	; 63
    return 0
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	08 95       	ret

0000138e <nocollision>:
nocollision:
    nop
    138e:	00 00       	nop
    dec tmpreg1
    1390:	2a 95       	dec	r18
    brne checkcollision
    1392:	81 f7       	brne	.-32     	; 0x1374 <checkcollision>

    ldi tmpreg1, 0x01
    1394:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1396:	30 91 47 01 	lds	r19, 0x0147
    139a:	20 30       	cpi	r18, 0x00	; 0
    139c:	29 f0       	breq	.+10     	; 0x13a8 <nocollision+0x1a>
    139e:	00 00       	nop
    13a0:	25 b1       	in	r18, 0x05	; 5
    13a2:	23 2b       	or	r18, r19
    13a4:	25 b9       	out	0x05, r18	; 5
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <nocollision+0x22>
    13a8:	00 00       	nop
    13aa:	00 00       	nop
    13ac:	00 00       	nop
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <nocollision+0x22>
    13b0:	00 00       	nop
    13b2:	00 00       	nop
    13b4:	00 00       	nop
    13b6:	30 95       	com	r19
    13b8:	25 b1       	in	r18, 0x05	; 5
    13ba:	23 23       	and	r18, r19
    13bc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    13be:	00 00       	nop
    13c0:	24 e5       	ldi	r18, 0x54	; 84
    13c2:	2a 95       	dec	r18
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13c6:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13c8:	8c e0       	ldi	r24, 0x0C	; 12

000013ca <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13ca:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13ce:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13d0:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    13d2:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    13d4:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13d6:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13da:	50 e0       	ldi	r21, 0x00	; 0

000013dc <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13dc:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13de:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13e0:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13e2:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13e4:	30 91 47 01 	lds	r19, 0x0147
    13e8:	20 30       	cpi	r18, 0x00	; 0
    13ea:	29 f0       	breq	.+10     	; 0x13f6 <sendbit+0x1a>
    13ec:	00 00       	nop
    13ee:	25 b1       	in	r18, 0x05	; 5
    13f0:	23 2b       	or	r18, r19
    13f2:	25 b9       	out	0x05, r18	; 5
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <sendbit+0x22>
    13f6:	00 00       	nop
    13f8:	00 00       	nop
    13fa:	00 00       	nop
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <sendbit+0x22>
    13fe:	00 00       	nop
    1400:	00 00       	nop
    1402:	00 00       	nop
    1404:	30 95       	com	r19
    1406:	25 b1       	in	r18, 0x05	; 5
    1408:	23 23       	and	r18, r19
    140a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    140c:	00 00       	nop
    140e:	21 e5       	ldi	r18, 0x51	; 81
    1410:	2a 95       	dec	r18
    1412:	f1 f7       	brne	.-4      	; 0x1410 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1414:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1416:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1418:	9a 95       	dec	r25
    brne sendbit
    141a:	01 f7       	brne	.-64     	; 0x13dc <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    141c:	8a 95       	dec	r24
    brne sendbyte
    141e:	a9 f6       	brne	.-86     	; 0x13ca <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1420:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1422:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1424:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1426:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1428:	30 91 47 01 	lds	r19, 0x0147
    com tmpreg2
    142c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    142e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1430:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1432:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1434:	0f be       	out	0x3f, r0	; 63
    return 1
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	08 95       	ret

0000143a <main>:
}

int main()
{
  kilo_init();
    143a:	0e 94 ae 00 	call	0x15c	; 0x15c <kilo_init>
  debug_init();
    143e:	0e 94 8a 00 	call	0x114	; 0x114 <debug_init>
  kilo_start(setup, loop);
    1442:	6b e7       	ldi	r22, 0x7B	; 123
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	8a e7       	ldi	r24, 0x7A	; 122
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 aa 01 	call	0x354	; 0x354 <kilo_start>
    
  return 0;
}
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	08 95       	ret

00001454 <__divmodhi4>:
    1454:	97 fb       	bst	r25, 7
    1456:	07 2e       	mov	r0, r23
    1458:	16 f4       	brtc	.+4      	; 0x145e <__divmodhi4+0xa>
    145a:	00 94       	com	r0
    145c:	07 d0       	rcall	.+14     	; 0x146c <__divmodhi4_neg1>
    145e:	77 fd       	sbrc	r23, 7
    1460:	09 d0       	rcall	.+18     	; 0x1474 <__divmodhi4_neg2>
    1462:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__udivmodhi4>
    1466:	07 fc       	sbrc	r0, 7
    1468:	05 d0       	rcall	.+10     	; 0x1474 <__divmodhi4_neg2>
    146a:	3e f4       	brtc	.+14     	; 0x147a <__divmodhi4_exit>

0000146c <__divmodhi4_neg1>:
    146c:	90 95       	com	r25
    146e:	81 95       	neg	r24
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	08 95       	ret

00001474 <__divmodhi4_neg2>:
    1474:	70 95       	com	r23
    1476:	61 95       	neg	r22
    1478:	7f 4f       	sbci	r23, 0xFF	; 255

0000147a <__divmodhi4_exit>:
    147a:	08 95       	ret

0000147c <__tablejump2__>:
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	05 90       	lpm	r0, Z+
    1482:	f4 91       	lpm	r31, Z
    1484:	e0 2d       	mov	r30, r0
    1486:	09 94       	ijmp

00001488 <__umulhisi3>:
    1488:	a2 9f       	mul	r26, r18
    148a:	b0 01       	movw	r22, r0
    148c:	b3 9f       	mul	r27, r19
    148e:	c0 01       	movw	r24, r0
    1490:	a3 9f       	mul	r26, r19
    1492:	70 0d       	add	r23, r0
    1494:	81 1d       	adc	r24, r1
    1496:	11 24       	eor	r1, r1
    1498:	91 1d       	adc	r25, r1
    149a:	b2 9f       	mul	r27, r18
    149c:	70 0d       	add	r23, r0
    149e:	81 1d       	adc	r24, r1
    14a0:	11 24       	eor	r1, r1
    14a2:	91 1d       	adc	r25, r1
    14a4:	08 95       	ret

000014a6 <__udivmodhi4>:
    14a6:	aa 1b       	sub	r26, r26
    14a8:	bb 1b       	sub	r27, r27
    14aa:	51 e1       	ldi	r21, 0x11	; 17
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <__udivmodhi4_ep>

000014ae <__udivmodhi4_loop>:
    14ae:	aa 1f       	adc	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	a6 17       	cp	r26, r22
    14b4:	b7 07       	cpc	r27, r23
    14b6:	10 f0       	brcs	.+4      	; 0x14bc <__udivmodhi4_ep>
    14b8:	a6 1b       	sub	r26, r22
    14ba:	b7 0b       	sbc	r27, r23

000014bc <__udivmodhi4_ep>:
    14bc:	88 1f       	adc	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	5a 95       	dec	r21
    14c2:	a9 f7       	brne	.-22     	; 0x14ae <__udivmodhi4_loop>
    14c4:	80 95       	com	r24
    14c6:	90 95       	com	r25
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	08 95       	ret

000014ce <__subsf3>:
    14ce:	50 58       	subi	r21, 0x80	; 128

000014d0 <__addsf3>:
    14d0:	bb 27       	eor	r27, r27
    14d2:	aa 27       	eor	r26, r26
    14d4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__addsf3x>
    14d8:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    14dc:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    14e0:	38 f0       	brcs	.+14     	; 0x14f0 <__addsf3+0x20>
    14e2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    14e6:	20 f0       	brcs	.+8      	; 0x14f0 <__addsf3+0x20>
    14e8:	39 f4       	brne	.+14     	; 0x14f8 <__addsf3+0x28>
    14ea:	9f 3f       	cpi	r25, 0xFF	; 255
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <__addsf3+0x24>
    14ee:	26 f4       	brtc	.+8      	; 0x14f8 <__addsf3+0x28>
    14f0:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>
    14f4:	0e f4       	brtc	.+2      	; 0x14f8 <__addsf3+0x28>
    14f6:	e0 95       	com	r30
    14f8:	e7 fb       	bst	r30, 7
    14fa:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>

000014fe <__addsf3x>:
    14fe:	e9 2f       	mov	r30, r25
    1500:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    1504:	58 f3       	brcs	.-42     	; 0x14dc <__addsf3+0xc>
    1506:	ba 17       	cp	r27, r26
    1508:	62 07       	cpc	r22, r18
    150a:	73 07       	cpc	r23, r19
    150c:	84 07       	cpc	r24, r20
    150e:	95 07       	cpc	r25, r21
    1510:	20 f0       	brcs	.+8      	; 0x151a <__addsf3x+0x1c>
    1512:	79 f4       	brne	.+30     	; 0x1532 <__addsf3x+0x34>
    1514:	a6 f5       	brtc	.+104    	; 0x157e <__addsf3x+0x80>
    1516:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_zero>
    151a:	0e f4       	brtc	.+2      	; 0x151e <__addsf3x+0x20>
    151c:	e0 95       	com	r30
    151e:	0b 2e       	mov	r0, r27
    1520:	ba 2f       	mov	r27, r26
    1522:	a0 2d       	mov	r26, r0
    1524:	0b 01       	movw	r0, r22
    1526:	b9 01       	movw	r22, r18
    1528:	90 01       	movw	r18, r0
    152a:	0c 01       	movw	r0, r24
    152c:	ca 01       	movw	r24, r20
    152e:	a0 01       	movw	r20, r0
    1530:	11 24       	eor	r1, r1
    1532:	ff 27       	eor	r31, r31
    1534:	59 1b       	sub	r21, r25
    1536:	99 f0       	breq	.+38     	; 0x155e <__addsf3x+0x60>
    1538:	59 3f       	cpi	r21, 0xF9	; 249
    153a:	50 f4       	brcc	.+20     	; 0x1550 <__addsf3x+0x52>
    153c:	50 3e       	cpi	r21, 0xE0	; 224
    153e:	68 f1       	brcs	.+90     	; 0x159a <__addsf3x+0x9c>
    1540:	1a 16       	cp	r1, r26
    1542:	f0 40       	sbci	r31, 0x00	; 0
    1544:	a2 2f       	mov	r26, r18
    1546:	23 2f       	mov	r18, r19
    1548:	34 2f       	mov	r19, r20
    154a:	44 27       	eor	r20, r20
    154c:	58 5f       	subi	r21, 0xF8	; 248
    154e:	f3 cf       	rjmp	.-26     	; 0x1536 <__addsf3x+0x38>
    1550:	46 95       	lsr	r20
    1552:	37 95       	ror	r19
    1554:	27 95       	ror	r18
    1556:	a7 95       	ror	r26
    1558:	f0 40       	sbci	r31, 0x00	; 0
    155a:	53 95       	inc	r21
    155c:	c9 f7       	brne	.-14     	; 0x1550 <__addsf3x+0x52>
    155e:	7e f4       	brtc	.+30     	; 0x157e <__addsf3x+0x80>
    1560:	1f 16       	cp	r1, r31
    1562:	ba 0b       	sbc	r27, r26
    1564:	62 0b       	sbc	r22, r18
    1566:	73 0b       	sbc	r23, r19
    1568:	84 0b       	sbc	r24, r20
    156a:	ba f0       	brmi	.+46     	; 0x159a <__addsf3x+0x9c>
    156c:	91 50       	subi	r25, 0x01	; 1
    156e:	a1 f0       	breq	.+40     	; 0x1598 <__addsf3x+0x9a>
    1570:	ff 0f       	add	r31, r31
    1572:	bb 1f       	adc	r27, r27
    1574:	66 1f       	adc	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	88 1f       	adc	r24, r24
    157a:	c2 f7       	brpl	.-16     	; 0x156c <__addsf3x+0x6e>
    157c:	0e c0       	rjmp	.+28     	; 0x159a <__addsf3x+0x9c>
    157e:	ba 0f       	add	r27, r26
    1580:	62 1f       	adc	r22, r18
    1582:	73 1f       	adc	r23, r19
    1584:	84 1f       	adc	r24, r20
    1586:	48 f4       	brcc	.+18     	; 0x159a <__addsf3x+0x9c>
    1588:	87 95       	ror	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b7 95       	ror	r27
    1590:	f7 95       	ror	r31
    1592:	9e 3f       	cpi	r25, 0xFE	; 254
    1594:	08 f0       	brcs	.+2      	; 0x1598 <__addsf3x+0x9a>
    1596:	b0 cf       	rjmp	.-160    	; 0x14f8 <__addsf3+0x28>
    1598:	93 95       	inc	r25
    159a:	88 0f       	add	r24, r24
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <__addsf3x+0xa2>
    159e:	99 27       	eor	r25, r25
    15a0:	ee 0f       	add	r30, r30
    15a2:	97 95       	ror	r25
    15a4:	87 95       	ror	r24
    15a6:	08 95       	ret

000015a8 <__divsf3>:
    15a8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divsf3x>
    15ac:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    15b0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    15b4:	58 f0       	brcs	.+22     	; 0x15cc <__divsf3+0x24>
    15b6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    15ba:	40 f0       	brcs	.+16     	; 0x15cc <__divsf3+0x24>
    15bc:	29 f4       	brne	.+10     	; 0x15c8 <__divsf3+0x20>
    15be:	5f 3f       	cpi	r21, 0xFF	; 255
    15c0:	29 f0       	breq	.+10     	; 0x15cc <__divsf3+0x24>
    15c2:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    15c6:	51 11       	cpse	r21, r1
    15c8:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    15cc:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>

000015d0 <__divsf3x>:
    15d0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    15d4:	68 f3       	brcs	.-38     	; 0x15b0 <__divsf3+0x8>

000015d6 <__divsf3_pse>:
    15d6:	99 23       	and	r25, r25
    15d8:	b1 f3       	breq	.-20     	; 0x15c6 <__divsf3+0x1e>
    15da:	55 23       	and	r21, r21
    15dc:	91 f3       	breq	.-28     	; 0x15c2 <__divsf3+0x1a>
    15de:	95 1b       	sub	r25, r21
    15e0:	55 0b       	sbc	r21, r21
    15e2:	bb 27       	eor	r27, r27
    15e4:	aa 27       	eor	r26, r26
    15e6:	62 17       	cp	r22, r18
    15e8:	73 07       	cpc	r23, r19
    15ea:	84 07       	cpc	r24, r20
    15ec:	38 f0       	brcs	.+14     	; 0x15fc <__divsf3_pse+0x26>
    15ee:	9f 5f       	subi	r25, 0xFF	; 255
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	22 0f       	add	r18, r18
    15f4:	33 1f       	adc	r19, r19
    15f6:	44 1f       	adc	r20, r20
    15f8:	aa 1f       	adc	r26, r26
    15fa:	a9 f3       	breq	.-22     	; 0x15e6 <__divsf3_pse+0x10>
    15fc:	35 d0       	rcall	.+106    	; 0x1668 <__divsf3_pse+0x92>
    15fe:	0e 2e       	mov	r0, r30
    1600:	3a f0       	brmi	.+14     	; 0x1610 <__divsf3_pse+0x3a>
    1602:	e0 e8       	ldi	r30, 0x80	; 128
    1604:	32 d0       	rcall	.+100    	; 0x166a <__divsf3_pse+0x94>
    1606:	91 50       	subi	r25, 0x01	; 1
    1608:	50 40       	sbci	r21, 0x00	; 0
    160a:	e6 95       	lsr	r30
    160c:	00 1c       	adc	r0, r0
    160e:	ca f7       	brpl	.-14     	; 0x1602 <__divsf3_pse+0x2c>
    1610:	2b d0       	rcall	.+86     	; 0x1668 <__divsf3_pse+0x92>
    1612:	fe 2f       	mov	r31, r30
    1614:	29 d0       	rcall	.+82     	; 0x1668 <__divsf3_pse+0x92>
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	bb 1f       	adc	r27, r27
    161e:	26 17       	cp	r18, r22
    1620:	37 07       	cpc	r19, r23
    1622:	48 07       	cpc	r20, r24
    1624:	ab 07       	cpc	r26, r27
    1626:	b0 e8       	ldi	r27, 0x80	; 128
    1628:	09 f0       	breq	.+2      	; 0x162c <__divsf3_pse+0x56>
    162a:	bb 0b       	sbc	r27, r27
    162c:	80 2d       	mov	r24, r0
    162e:	bf 01       	movw	r22, r30
    1630:	ff 27       	eor	r31, r31
    1632:	93 58       	subi	r25, 0x83	; 131
    1634:	5f 4f       	sbci	r21, 0xFF	; 255
    1636:	3a f0       	brmi	.+14     	; 0x1646 <__divsf3_pse+0x70>
    1638:	9e 3f       	cpi	r25, 0xFE	; 254
    163a:	51 05       	cpc	r21, r1
    163c:	78 f0       	brcs	.+30     	; 0x165c <__divsf3_pse+0x86>
    163e:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    1642:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    1646:	5f 3f       	cpi	r21, 0xFF	; 255
    1648:	e4 f3       	brlt	.-8      	; 0x1642 <__divsf3_pse+0x6c>
    164a:	98 3e       	cpi	r25, 0xE8	; 232
    164c:	d4 f3       	brlt	.-12     	; 0x1642 <__divsf3_pse+0x6c>
    164e:	86 95       	lsr	r24
    1650:	77 95       	ror	r23
    1652:	67 95       	ror	r22
    1654:	b7 95       	ror	r27
    1656:	f7 95       	ror	r31
    1658:	9f 5f       	subi	r25, 0xFF	; 255
    165a:	c9 f7       	brne	.-14     	; 0x164e <__divsf3_pse+0x78>
    165c:	88 0f       	add	r24, r24
    165e:	91 1d       	adc	r25, r1
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	97 f9       	bld	r25, 7
    1666:	08 95       	ret
    1668:	e1 e0       	ldi	r30, 0x01	; 1
    166a:	66 0f       	add	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	bb 1f       	adc	r27, r27
    1672:	62 17       	cp	r22, r18
    1674:	73 07       	cpc	r23, r19
    1676:	84 07       	cpc	r24, r20
    1678:	ba 07       	cpc	r27, r26
    167a:	20 f0       	brcs	.+8      	; 0x1684 <__divsf3_pse+0xae>
    167c:	62 1b       	sub	r22, r18
    167e:	73 0b       	sbc	r23, r19
    1680:	84 0b       	sbc	r24, r20
    1682:	ba 0b       	sbc	r27, r26
    1684:	ee 1f       	adc	r30, r30
    1686:	88 f7       	brcc	.-30     	; 0x166a <__divsf3_pse+0x94>
    1688:	e0 95       	com	r30
    168a:	08 95       	ret

0000168c <__fixsfsi>:
    168c:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fixunssfsi>
    1690:	68 94       	set
    1692:	b1 11       	cpse	r27, r1
    1694:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    1698:	08 95       	ret

0000169a <__fixunssfsi>:
    169a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_splitA>
    169e:	88 f0       	brcs	.+34     	; 0x16c2 <__fixunssfsi+0x28>
    16a0:	9f 57       	subi	r25, 0x7F	; 127
    16a2:	98 f0       	brcs	.+38     	; 0x16ca <__fixunssfsi+0x30>
    16a4:	b9 2f       	mov	r27, r25
    16a6:	99 27       	eor	r25, r25
    16a8:	b7 51       	subi	r27, 0x17	; 23
    16aa:	b0 f0       	brcs	.+44     	; 0x16d8 <__fixunssfsi+0x3e>
    16ac:	e1 f0       	breq	.+56     	; 0x16e6 <__fixunssfsi+0x4c>
    16ae:	66 0f       	add	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	1a f0       	brmi	.+6      	; 0x16be <__fixunssfsi+0x24>
    16b8:	ba 95       	dec	r27
    16ba:	c9 f7       	brne	.-14     	; 0x16ae <__fixunssfsi+0x14>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <__fixunssfsi+0x4c>
    16be:	b1 30       	cpi	r27, 0x01	; 1
    16c0:	91 f0       	breq	.+36     	; 0x16e6 <__fixunssfsi+0x4c>
    16c2:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fp_zero>
    16c6:	b1 e0       	ldi	r27, 0x01	; 1
    16c8:	08 95       	ret
    16ca:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_zero>
    16ce:	67 2f       	mov	r22, r23
    16d0:	78 2f       	mov	r23, r24
    16d2:	88 27       	eor	r24, r24
    16d4:	b8 5f       	subi	r27, 0xF8	; 248
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <__fixunssfsi+0x4c>
    16d8:	b9 3f       	cpi	r27, 0xF9	; 249
    16da:	cc f3       	brlt	.-14     	; 0x16ce <__fixunssfsi+0x34>
    16dc:	86 95       	lsr	r24
    16de:	77 95       	ror	r23
    16e0:	67 95       	ror	r22
    16e2:	b3 95       	inc	r27
    16e4:	d9 f7       	brne	.-10     	; 0x16dc <__fixunssfsi+0x42>
    16e6:	3e f4       	brtc	.+14     	; 0x16f6 <__fixunssfsi+0x5c>
    16e8:	90 95       	com	r25
    16ea:	80 95       	com	r24
    16ec:	70 95       	com	r23
    16ee:	61 95       	neg	r22
    16f0:	7f 4f       	sbci	r23, 0xFF	; 255
    16f2:	8f 4f       	sbci	r24, 0xFF	; 255
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	08 95       	ret

000016f8 <__floatunsisf>:
    16f8:	e8 94       	clt
    16fa:	09 c0       	rjmp	.+18     	; 0x170e <__floatsisf+0x12>

000016fc <__floatsisf>:
    16fc:	97 fb       	bst	r25, 7
    16fe:	3e f4       	brtc	.+14     	; 0x170e <__floatsisf+0x12>
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	99 23       	and	r25, r25
    1710:	a9 f0       	breq	.+42     	; 0x173c <__floatsisf+0x40>
    1712:	f9 2f       	mov	r31, r25
    1714:	96 e9       	ldi	r25, 0x96	; 150
    1716:	bb 27       	eor	r27, r27
    1718:	93 95       	inc	r25
    171a:	f6 95       	lsr	r31
    171c:	87 95       	ror	r24
    171e:	77 95       	ror	r23
    1720:	67 95       	ror	r22
    1722:	b7 95       	ror	r27
    1724:	f1 11       	cpse	r31, r1
    1726:	f8 cf       	rjmp	.-16     	; 0x1718 <__floatsisf+0x1c>
    1728:	fa f4       	brpl	.+62     	; 0x1768 <__floatsisf+0x6c>
    172a:	bb 0f       	add	r27, r27
    172c:	11 f4       	brne	.+4      	; 0x1732 <__floatsisf+0x36>
    172e:	60 ff       	sbrs	r22, 0
    1730:	1b c0       	rjmp	.+54     	; 0x1768 <__floatsisf+0x6c>
    1732:	6f 5f       	subi	r22, 0xFF	; 255
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	8f 4f       	sbci	r24, 0xFF	; 255
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	16 c0       	rjmp	.+44     	; 0x1768 <__floatsisf+0x6c>
    173c:	88 23       	and	r24, r24
    173e:	11 f0       	breq	.+4      	; 0x1744 <__floatsisf+0x48>
    1740:	96 e9       	ldi	r25, 0x96	; 150
    1742:	11 c0       	rjmp	.+34     	; 0x1766 <__floatsisf+0x6a>
    1744:	77 23       	and	r23, r23
    1746:	21 f0       	breq	.+8      	; 0x1750 <__floatsisf+0x54>
    1748:	9e e8       	ldi	r25, 0x8E	; 142
    174a:	87 2f       	mov	r24, r23
    174c:	76 2f       	mov	r23, r22
    174e:	05 c0       	rjmp	.+10     	; 0x175a <__floatsisf+0x5e>
    1750:	66 23       	and	r22, r22
    1752:	71 f0       	breq	.+28     	; 0x1770 <__floatsisf+0x74>
    1754:	96 e8       	ldi	r25, 0x86	; 134
    1756:	86 2f       	mov	r24, r22
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	2a f0       	brmi	.+10     	; 0x1768 <__floatsisf+0x6c>
    175e:	9a 95       	dec	r25
    1760:	66 0f       	add	r22, r22
    1762:	77 1f       	adc	r23, r23
    1764:	88 1f       	adc	r24, r24
    1766:	da f7       	brpl	.-10     	; 0x175e <__floatsisf+0x62>
    1768:	88 0f       	add	r24, r24
    176a:	96 95       	lsr	r25
    176c:	87 95       	ror	r24
    176e:	97 f9       	bld	r25, 7
    1770:	08 95       	ret

00001772 <__fp_inf>:
    1772:	97 f9       	bld	r25, 7
    1774:	9f 67       	ori	r25, 0x7F	; 127
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	08 95       	ret

0000177e <__fp_nan>:
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	80 ec       	ldi	r24, 0xC0	; 192
    1782:	08 95       	ret

00001784 <__fp_pscA>:
    1784:	00 24       	eor	r0, r0
    1786:	0a 94       	dec	r0
    1788:	16 16       	cp	r1, r22
    178a:	17 06       	cpc	r1, r23
    178c:	18 06       	cpc	r1, r24
    178e:	09 06       	cpc	r0, r25
    1790:	08 95       	ret

00001792 <__fp_pscB>:
    1792:	00 24       	eor	r0, r0
    1794:	0a 94       	dec	r0
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	14 06       	cpc	r1, r20
    179c:	05 06       	cpc	r0, r21
    179e:	08 95       	ret

000017a0 <__fp_round>:
    17a0:	09 2e       	mov	r0, r25
    17a2:	03 94       	inc	r0
    17a4:	00 0c       	add	r0, r0
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__fp_round+0xc>
    17a8:	88 23       	and	r24, r24
    17aa:	52 f0       	brmi	.+20     	; 0x17c0 <__fp_round+0x20>
    17ac:	bb 0f       	add	r27, r27
    17ae:	40 f4       	brcc	.+16     	; 0x17c0 <__fp_round+0x20>
    17b0:	bf 2b       	or	r27, r31
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <__fp_round+0x18>
    17b4:	60 ff       	sbrs	r22, 0
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <__fp_round+0x20>
    17b8:	6f 5f       	subi	r22, 0xFF	; 255
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	08 95       	ret

000017c2 <__fp_split3>:
    17c2:	57 fd       	sbrc	r21, 7
    17c4:	90 58       	subi	r25, 0x80	; 128
    17c6:	44 0f       	add	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <__fp_splitA+0x10>
    17cc:	5f 3f       	cpi	r21, 0xFF	; 255
    17ce:	71 f0       	breq	.+28     	; 0x17ec <__fp_splitA+0x1a>
    17d0:	47 95       	ror	r20

000017d2 <__fp_splitA>:
    17d2:	88 0f       	add	r24, r24
    17d4:	97 fb       	bst	r25, 7
    17d6:	99 1f       	adc	r25, r25
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <__fp_splitA+0x20>
    17da:	9f 3f       	cpi	r25, 0xFF	; 255
    17dc:	79 f0       	breq	.+30     	; 0x17fc <__fp_splitA+0x2a>
    17de:	87 95       	ror	r24
    17e0:	08 95       	ret
    17e2:	12 16       	cp	r1, r18
    17e4:	13 06       	cpc	r1, r19
    17e6:	14 06       	cpc	r1, r20
    17e8:	55 1f       	adc	r21, r21
    17ea:	f2 cf       	rjmp	.-28     	; 0x17d0 <__fp_split3+0xe>
    17ec:	46 95       	lsr	r20
    17ee:	f1 df       	rcall	.-30     	; 0x17d2 <__fp_splitA>
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <__fp_splitA+0x30>
    17f2:	16 16       	cp	r1, r22
    17f4:	17 06       	cpc	r1, r23
    17f6:	18 06       	cpc	r1, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	f1 cf       	rjmp	.-30     	; 0x17de <__fp_splitA+0xc>
    17fc:	86 95       	lsr	r24
    17fe:	71 05       	cpc	r23, r1
    1800:	61 05       	cpc	r22, r1
    1802:	08 94       	sec
    1804:	08 95       	ret

00001806 <__fp_zero>:
    1806:	e8 94       	clt

00001808 <__fp_szero>:
    1808:	bb 27       	eor	r27, r27
    180a:	66 27       	eor	r22, r22
    180c:	77 27       	eor	r23, r23
    180e:	cb 01       	movw	r24, r22
    1810:	97 f9       	bld	r25, 7
    1812:	08 95       	ret

00001814 <__mulsf3>:
    1814:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3x>
    1818:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    181c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    1820:	38 f0       	brcs	.+14     	; 0x1830 <__mulsf3+0x1c>
    1822:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    1826:	20 f0       	brcs	.+8      	; 0x1830 <__mulsf3+0x1c>
    1828:	95 23       	and	r25, r21
    182a:	11 f0       	breq	.+4      	; 0x1830 <__mulsf3+0x1c>
    182c:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    1830:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>
    1834:	11 24       	eor	r1, r1
    1836:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>

0000183a <__mulsf3x>:
    183a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    183e:	70 f3       	brcs	.-36     	; 0x181c <__mulsf3+0x8>

00001840 <__mulsf3_pse>:
    1840:	95 9f       	mul	r25, r21
    1842:	c1 f3       	breq	.-16     	; 0x1834 <__mulsf3+0x20>
    1844:	95 0f       	add	r25, r21
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	55 1f       	adc	r21, r21
    184a:	62 9f       	mul	r22, r18
    184c:	f0 01       	movw	r30, r0
    184e:	72 9f       	mul	r23, r18
    1850:	bb 27       	eor	r27, r27
    1852:	f0 0d       	add	r31, r0
    1854:	b1 1d       	adc	r27, r1
    1856:	63 9f       	mul	r22, r19
    1858:	aa 27       	eor	r26, r26
    185a:	f0 0d       	add	r31, r0
    185c:	b1 1d       	adc	r27, r1
    185e:	aa 1f       	adc	r26, r26
    1860:	64 9f       	mul	r22, r20
    1862:	66 27       	eor	r22, r22
    1864:	b0 0d       	add	r27, r0
    1866:	a1 1d       	adc	r26, r1
    1868:	66 1f       	adc	r22, r22
    186a:	82 9f       	mul	r24, r18
    186c:	22 27       	eor	r18, r18
    186e:	b0 0d       	add	r27, r0
    1870:	a1 1d       	adc	r26, r1
    1872:	62 1f       	adc	r22, r18
    1874:	73 9f       	mul	r23, r19
    1876:	b0 0d       	add	r27, r0
    1878:	a1 1d       	adc	r26, r1
    187a:	62 1f       	adc	r22, r18
    187c:	83 9f       	mul	r24, r19
    187e:	a0 0d       	add	r26, r0
    1880:	61 1d       	adc	r22, r1
    1882:	22 1f       	adc	r18, r18
    1884:	74 9f       	mul	r23, r20
    1886:	33 27       	eor	r19, r19
    1888:	a0 0d       	add	r26, r0
    188a:	61 1d       	adc	r22, r1
    188c:	23 1f       	adc	r18, r19
    188e:	84 9f       	mul	r24, r20
    1890:	60 0d       	add	r22, r0
    1892:	21 1d       	adc	r18, r1
    1894:	82 2f       	mov	r24, r18
    1896:	76 2f       	mov	r23, r22
    1898:	6a 2f       	mov	r22, r26
    189a:	11 24       	eor	r1, r1
    189c:	9f 57       	subi	r25, 0x7F	; 127
    189e:	50 40       	sbci	r21, 0x00	; 0
    18a0:	9a f0       	brmi	.+38     	; 0x18c8 <__mulsf3_pse+0x88>
    18a2:	f1 f0       	breq	.+60     	; 0x18e0 <__mulsf3_pse+0xa0>
    18a4:	88 23       	and	r24, r24
    18a6:	4a f0       	brmi	.+18     	; 0x18ba <__mulsf3_pse+0x7a>
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	bb 1f       	adc	r27, r27
    18ae:	66 1f       	adc	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	91 50       	subi	r25, 0x01	; 1
    18b6:	50 40       	sbci	r21, 0x00	; 0
    18b8:	a9 f7       	brne	.-22     	; 0x18a4 <__mulsf3_pse+0x64>
    18ba:	9e 3f       	cpi	r25, 0xFE	; 254
    18bc:	51 05       	cpc	r21, r1
    18be:	80 f0       	brcs	.+32     	; 0x18e0 <__mulsf3_pse+0xa0>
    18c0:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    18c4:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    18c8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ca:	e4 f3       	brlt	.-8      	; 0x18c4 <__mulsf3_pse+0x84>
    18cc:	98 3e       	cpi	r25, 0xE8	; 232
    18ce:	d4 f3       	brlt	.-12     	; 0x18c4 <__mulsf3_pse+0x84>
    18d0:	86 95       	lsr	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	b7 95       	ror	r27
    18d8:	f7 95       	ror	r31
    18da:	e7 95       	ror	r30
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	c1 f7       	brne	.-16     	; 0x18d0 <__mulsf3_pse+0x90>
    18e0:	fe 2b       	or	r31, r30
    18e2:	88 0f       	add	r24, r24
    18e4:	91 1d       	adc	r25, r1
    18e6:	96 95       	lsr	r25
    18e8:	87 95       	ror	r24
    18ea:	97 f9       	bld	r25, 7
    18ec:	08 95       	ret

000018ee <do_rand>:
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	ec 01       	movw	r28, r24
    1904:	68 81       	ld	r22, Y
    1906:	79 81       	ldd	r23, Y+1	; 0x01
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	61 15       	cp	r22, r1
    190e:	71 05       	cpc	r23, r1
    1910:	81 05       	cpc	r24, r1
    1912:	91 05       	cpc	r25, r1
    1914:	21 f4       	brne	.+8      	; 0x191e <do_rand+0x30>
    1916:	64 e2       	ldi	r22, 0x24	; 36
    1918:	79 ed       	ldi	r23, 0xD9	; 217
    191a:	8b e5       	ldi	r24, 0x5B	; 91
    191c:	97 e0       	ldi	r25, 0x07	; 7
    191e:	2d e1       	ldi	r18, 0x1D	; 29
    1920:	33 ef       	ldi	r19, 0xF3	; 243
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__divmodsi4>
    192a:	49 01       	movw	r8, r18
    192c:	5a 01       	movw	r10, r20
    192e:	9b 01       	movw	r18, r22
    1930:	ac 01       	movw	r20, r24
    1932:	a7 ea       	ldi	r26, 0xA7	; 167
    1934:	b1 e4       	ldi	r27, 0x41	; 65
    1936:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__muluhisi3>
    193a:	6b 01       	movw	r12, r22
    193c:	7c 01       	movw	r14, r24
    193e:	ac ee       	ldi	r26, 0xEC	; 236
    1940:	b4 ef       	ldi	r27, 0xF4	; 244
    1942:	a5 01       	movw	r20, r10
    1944:	94 01       	movw	r18, r8
    1946:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulohisi3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8c 0d       	add	r24, r12
    1950:	9d 1d       	adc	r25, r13
    1952:	ae 1d       	adc	r26, r14
    1954:	bf 1d       	adc	r27, r15
    1956:	b7 ff       	sbrs	r27, 7
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <do_rand+0x72>
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	a1 09       	sbc	r26, r1
    195e:	b0 48       	sbci	r27, 0x80	; 128
    1960:	88 83       	st	Y, r24
    1962:	99 83       	std	Y+1, r25	; 0x01
    1964:	aa 83       	std	Y+2, r26	; 0x02
    1966:	bb 83       	std	Y+3, r27	; 0x03
    1968:	9f 77       	andi	r25, 0x7F	; 127
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	08 95       	ret

00001980 <rand_r>:
    1980:	0e 94 77 0c 	call	0x18ee	; 0x18ee <do_rand>
    1984:	08 95       	ret

00001986 <rand>:
    1986:	85 e1       	ldi	r24, 0x15	; 21
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <do_rand>
    198e:	08 95       	ret

00001990 <srand>:
    1990:	a0 e0       	ldi	r26, 0x00	; 0
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	80 93 15 01 	sts	0x0115, r24
    1998:	90 93 16 01 	sts	0x0116, r25
    199c:	a0 93 17 01 	sts	0x0117, r26
    19a0:	b0 93 18 01 	sts	0x0118, r27
    19a4:	08 95       	ret

000019a6 <printf>:
    19a6:	a0 e0       	ldi	r26, 0x00	; 0
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e9 ed       	ldi	r30, 0xD9	; 217
    19ac:	fc e0       	ldi	r31, 0x0C	; 12
    19ae:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x20>
    19b2:	ae 01       	movw	r20, r28
    19b4:	4b 5f       	subi	r20, 0xFB	; 251
    19b6:	5f 4f       	sbci	r21, 0xFF	; 255
    19b8:	fa 01       	movw	r30, r20
    19ba:	61 91       	ld	r22, Z+
    19bc:	71 91       	ld	r23, Z+
    19be:	af 01       	movw	r20, r30
    19c0:	80 91 8a 01 	lds	r24, 0x018A
    19c4:	90 91 8b 01 	lds	r25, 0x018B
    19c8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <vfprintf>
    19cc:	e2 e0       	ldi	r30, 0x02	; 2
    19ce:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x20>

000019d2 <vfprintf>:
    19d2:	ac e0       	ldi	r26, 0x0C	; 12
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ef ee       	ldi	r30, 0xEF	; 239
    19d8:	fc e0       	ldi	r31, 0x0C	; 12
    19da:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__>
    19de:	7c 01       	movw	r14, r24
    19e0:	6b 01       	movw	r12, r22
    19e2:	8a 01       	movw	r16, r20
    19e4:	fc 01       	movw	r30, r24
    19e6:	17 82       	std	Z+7, r1	; 0x07
    19e8:	16 82       	std	Z+6, r1	; 0x06
    19ea:	83 81       	ldd	r24, Z+3	; 0x03
    19ec:	81 ff       	sbrs	r24, 1
    19ee:	bd c1       	rjmp	.+890    	; 0x1d6a <vfprintf+0x398>
    19f0:	ce 01       	movw	r24, r28
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	4c 01       	movw	r8, r24
    19f6:	f7 01       	movw	r30, r14
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	f6 01       	movw	r30, r12
    19fc:	93 fd       	sbrc	r25, 3
    19fe:	85 91       	lpm	r24, Z+
    1a00:	93 ff       	sbrs	r25, 3
    1a02:	81 91       	ld	r24, Z+
    1a04:	6f 01       	movw	r12, r30
    1a06:	88 23       	and	r24, r24
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <vfprintf+0x3a>
    1a0a:	ab c1       	rjmp	.+854    	; 0x1d62 <vfprintf+0x390>
    1a0c:	85 32       	cpi	r24, 0x25	; 37
    1a0e:	39 f4       	brne	.+14     	; 0x1a1e <vfprintf+0x4c>
    1a10:	93 fd       	sbrc	r25, 3
    1a12:	85 91       	lpm	r24, Z+
    1a14:	93 ff       	sbrs	r25, 3
    1a16:	81 91       	ld	r24, Z+
    1a18:	6f 01       	movw	r12, r30
    1a1a:	85 32       	cpi	r24, 0x25	; 37
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <vfprintf+0x56>
    1a1e:	b7 01       	movw	r22, r14
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1a26:	e7 cf       	rjmp	.-50     	; 0x19f6 <vfprintf+0x24>
    1a28:	51 2c       	mov	r5, r1
    1a2a:	31 2c       	mov	r3, r1
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	20 32       	cpi	r18, 0x20	; 32
    1a30:	a0 f4       	brcc	.+40     	; 0x1a5a <vfprintf+0x88>
    1a32:	8b 32       	cpi	r24, 0x2B	; 43
    1a34:	69 f0       	breq	.+26     	; 0x1a50 <vfprintf+0x7e>
    1a36:	30 f4       	brcc	.+12     	; 0x1a44 <vfprintf+0x72>
    1a38:	80 32       	cpi	r24, 0x20	; 32
    1a3a:	59 f0       	breq	.+22     	; 0x1a52 <vfprintf+0x80>
    1a3c:	83 32       	cpi	r24, 0x23	; 35
    1a3e:	69 f4       	brne	.+26     	; 0x1a5a <vfprintf+0x88>
    1a40:	20 61       	ori	r18, 0x10	; 16
    1a42:	2c c0       	rjmp	.+88     	; 0x1a9c <vfprintf+0xca>
    1a44:	8d 32       	cpi	r24, 0x2D	; 45
    1a46:	39 f0       	breq	.+14     	; 0x1a56 <vfprintf+0x84>
    1a48:	80 33       	cpi	r24, 0x30	; 48
    1a4a:	39 f4       	brne	.+14     	; 0x1a5a <vfprintf+0x88>
    1a4c:	21 60       	ori	r18, 0x01	; 1
    1a4e:	26 c0       	rjmp	.+76     	; 0x1a9c <vfprintf+0xca>
    1a50:	22 60       	ori	r18, 0x02	; 2
    1a52:	24 60       	ori	r18, 0x04	; 4
    1a54:	23 c0       	rjmp	.+70     	; 0x1a9c <vfprintf+0xca>
    1a56:	28 60       	ori	r18, 0x08	; 8
    1a58:	21 c0       	rjmp	.+66     	; 0x1a9c <vfprintf+0xca>
    1a5a:	27 fd       	sbrc	r18, 7
    1a5c:	27 c0       	rjmp	.+78     	; 0x1aac <vfprintf+0xda>
    1a5e:	30 ed       	ldi	r19, 0xD0	; 208
    1a60:	38 0f       	add	r19, r24
    1a62:	3a 30       	cpi	r19, 0x0A	; 10
    1a64:	78 f4       	brcc	.+30     	; 0x1a84 <vfprintf+0xb2>
    1a66:	26 ff       	sbrs	r18, 6
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <vfprintf+0xa4>
    1a6a:	fa e0       	ldi	r31, 0x0A	; 10
    1a6c:	5f 9e       	mul	r5, r31
    1a6e:	30 0d       	add	r19, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	53 2e       	mov	r5, r19
    1a74:	13 c0       	rjmp	.+38     	; 0x1a9c <vfprintf+0xca>
    1a76:	8a e0       	ldi	r24, 0x0A	; 10
    1a78:	38 9e       	mul	r3, r24
    1a7a:	30 0d       	add	r19, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	33 2e       	mov	r3, r19
    1a80:	20 62       	ori	r18, 0x20	; 32
    1a82:	0c c0       	rjmp	.+24     	; 0x1a9c <vfprintf+0xca>
    1a84:	8e 32       	cpi	r24, 0x2E	; 46
    1a86:	21 f4       	brne	.+8      	; 0x1a90 <vfprintf+0xbe>
    1a88:	26 fd       	sbrc	r18, 6
    1a8a:	6b c1       	rjmp	.+726    	; 0x1d62 <vfprintf+0x390>
    1a8c:	20 64       	ori	r18, 0x40	; 64
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <vfprintf+0xca>
    1a90:	8c 36       	cpi	r24, 0x6C	; 108
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <vfprintf+0xc6>
    1a94:	20 68       	ori	r18, 0x80	; 128
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <vfprintf+0xca>
    1a98:	88 36       	cpi	r24, 0x68	; 104
    1a9a:	41 f4       	brne	.+16     	; 0x1aac <vfprintf+0xda>
    1a9c:	f6 01       	movw	r30, r12
    1a9e:	93 fd       	sbrc	r25, 3
    1aa0:	85 91       	lpm	r24, Z+
    1aa2:	93 ff       	sbrs	r25, 3
    1aa4:	81 91       	ld	r24, Z+
    1aa6:	6f 01       	movw	r12, r30
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	c1 cf       	rjmp	.-126    	; 0x1a2e <vfprintf+0x5c>
    1aac:	98 2f       	mov	r25, r24
    1aae:	9f 7d       	andi	r25, 0xDF	; 223
    1ab0:	95 54       	subi	r25, 0x45	; 69
    1ab2:	93 30       	cpi	r25, 0x03	; 3
    1ab4:	28 f4       	brcc	.+10     	; 0x1ac0 <vfprintf+0xee>
    1ab6:	0c 5f       	subi	r16, 0xFC	; 252
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	ff e3       	ldi	r31, 0x3F	; 63
    1abc:	f9 83       	std	Y+1, r31	; 0x01
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <vfprintf+0x108>
    1ac0:	83 36       	cpi	r24, 0x63	; 99
    1ac2:	31 f0       	breq	.+12     	; 0x1ad0 <vfprintf+0xfe>
    1ac4:	83 37       	cpi	r24, 0x73	; 115
    1ac6:	71 f0       	breq	.+28     	; 0x1ae4 <vfprintf+0x112>
    1ac8:	83 35       	cpi	r24, 0x53	; 83
    1aca:	09 f0       	breq	.+2      	; 0x1ace <vfprintf+0xfc>
    1acc:	5b c0       	rjmp	.+182    	; 0x1b84 <vfprintf+0x1b2>
    1ace:	22 c0       	rjmp	.+68     	; 0x1b14 <vfprintf+0x142>
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	0e 5f       	subi	r16, 0xFE	; 254
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	44 24       	eor	r4, r4
    1adc:	43 94       	inc	r4
    1ade:	51 2c       	mov	r5, r1
    1ae0:	54 01       	movw	r10, r8
    1ae2:	15 c0       	rjmp	.+42     	; 0x1b0e <vfprintf+0x13c>
    1ae4:	38 01       	movw	r6, r16
    1ae6:	f2 e0       	ldi	r31, 0x02	; 2
    1ae8:	6f 0e       	add	r6, r31
    1aea:	71 1c       	adc	r7, r1
    1aec:	f8 01       	movw	r30, r16
    1aee:	a0 80       	ld	r10, Z
    1af0:	b1 80       	ldd	r11, Z+1	; 0x01
    1af2:	26 ff       	sbrs	r18, 6
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <vfprintf+0x12a>
    1af6:	65 2d       	mov	r22, r5
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <vfprintf+0x12e>
    1afc:	6f ef       	ldi	r22, 0xFF	; 255
    1afe:	7f ef       	ldi	r23, 0xFF	; 255
    1b00:	c5 01       	movw	r24, r10
    1b02:	2c 87       	std	Y+12, r18	; 0x0c
    1b04:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <strnlen>
    1b08:	2c 01       	movw	r4, r24
    1b0a:	83 01       	movw	r16, r6
    1b0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b0e:	2f 77       	andi	r18, 0x7F	; 127
    1b10:	22 2e       	mov	r2, r18
    1b12:	17 c0       	rjmp	.+46     	; 0x1b42 <vfprintf+0x170>
    1b14:	38 01       	movw	r6, r16
    1b16:	f2 e0       	ldi	r31, 0x02	; 2
    1b18:	6f 0e       	add	r6, r31
    1b1a:	71 1c       	adc	r7, r1
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	a0 80       	ld	r10, Z
    1b20:	b1 80       	ldd	r11, Z+1	; 0x01
    1b22:	26 ff       	sbrs	r18, 6
    1b24:	03 c0       	rjmp	.+6      	; 0x1b2c <vfprintf+0x15a>
    1b26:	65 2d       	mov	r22, r5
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <vfprintf+0x15e>
    1b2c:	6f ef       	ldi	r22, 0xFF	; 255
    1b2e:	7f ef       	ldi	r23, 0xFF	; 255
    1b30:	c5 01       	movw	r24, r10
    1b32:	2c 87       	std	Y+12, r18	; 0x0c
    1b34:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <strnlen_P>
    1b38:	2c 01       	movw	r4, r24
    1b3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b3c:	20 68       	ori	r18, 0x80	; 128
    1b3e:	22 2e       	mov	r2, r18
    1b40:	83 01       	movw	r16, r6
    1b42:	23 fc       	sbrc	r2, 3
    1b44:	1b c0       	rjmp	.+54     	; 0x1b7c <vfprintf+0x1aa>
    1b46:	83 2d       	mov	r24, r3
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	48 16       	cp	r4, r24
    1b4c:	59 06       	cpc	r5, r25
    1b4e:	b0 f4       	brcc	.+44     	; 0x1b7c <vfprintf+0x1aa>
    1b50:	b7 01       	movw	r22, r14
    1b52:	80 e2       	ldi	r24, 0x20	; 32
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1b5a:	3a 94       	dec	r3
    1b5c:	f4 cf       	rjmp	.-24     	; 0x1b46 <vfprintf+0x174>
    1b5e:	f5 01       	movw	r30, r10
    1b60:	27 fc       	sbrc	r2, 7
    1b62:	85 91       	lpm	r24, Z+
    1b64:	27 fe       	sbrs	r2, 7
    1b66:	81 91       	ld	r24, Z+
    1b68:	5f 01       	movw	r10, r30
    1b6a:	b7 01       	movw	r22, r14
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1b72:	31 10       	cpse	r3, r1
    1b74:	3a 94       	dec	r3
    1b76:	f1 e0       	ldi	r31, 0x01	; 1
    1b78:	4f 1a       	sub	r4, r31
    1b7a:	51 08       	sbc	r5, r1
    1b7c:	41 14       	cp	r4, r1
    1b7e:	51 04       	cpc	r5, r1
    1b80:	71 f7       	brne	.-36     	; 0x1b5e <vfprintf+0x18c>
    1b82:	e5 c0       	rjmp	.+458    	; 0x1d4e <vfprintf+0x37c>
    1b84:	84 36       	cpi	r24, 0x64	; 100
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <vfprintf+0x1ba>
    1b88:	89 36       	cpi	r24, 0x69	; 105
    1b8a:	39 f5       	brne	.+78     	; 0x1bda <vfprintf+0x208>
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	27 ff       	sbrs	r18, 7
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <vfprintf+0x1ce>
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	0c 5f       	subi	r16, 0xFC	; 252
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <vfprintf+0x1de>
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	07 2e       	mov	r0, r23
    1ba6:	00 0c       	add	r0, r0
    1ba8:	88 0b       	sbc	r24, r24
    1baa:	99 0b       	sbc	r25, r25
    1bac:	0e 5f       	subi	r16, 0xFE	; 254
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	2f 76       	andi	r18, 0x6F	; 111
    1bb2:	72 2e       	mov	r7, r18
    1bb4:	97 ff       	sbrs	r25, 7
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <vfprintf+0x1f8>
    1bb8:	90 95       	com	r25
    1bba:	80 95       	com	r24
    1bbc:	70 95       	com	r23
    1bbe:	61 95       	neg	r22
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	20 68       	ori	r18, 0x80	; 128
    1bc8:	72 2e       	mov	r7, r18
    1bca:	2a e0       	ldi	r18, 0x0A	; 10
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	a4 01       	movw	r20, r8
    1bd0:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__ultoa_invert>
    1bd4:	a8 2e       	mov	r10, r24
    1bd6:	a8 18       	sub	r10, r8
    1bd8:	44 c0       	rjmp	.+136    	; 0x1c62 <vfprintf+0x290>
    1bda:	85 37       	cpi	r24, 0x75	; 117
    1bdc:	29 f4       	brne	.+10     	; 0x1be8 <vfprintf+0x216>
    1bde:	2f 7e       	andi	r18, 0xEF	; 239
    1be0:	b2 2e       	mov	r11, r18
    1be2:	2a e0       	ldi	r18, 0x0A	; 10
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	25 c0       	rjmp	.+74     	; 0x1c32 <vfprintf+0x260>
    1be8:	f2 2f       	mov	r31, r18
    1bea:	f9 7f       	andi	r31, 0xF9	; 249
    1bec:	bf 2e       	mov	r11, r31
    1bee:	8f 36       	cpi	r24, 0x6F	; 111
    1bf0:	c1 f0       	breq	.+48     	; 0x1c22 <vfprintf+0x250>
    1bf2:	18 f4       	brcc	.+6      	; 0x1bfa <vfprintf+0x228>
    1bf4:	88 35       	cpi	r24, 0x58	; 88
    1bf6:	79 f0       	breq	.+30     	; 0x1c16 <vfprintf+0x244>
    1bf8:	b4 c0       	rjmp	.+360    	; 0x1d62 <vfprintf+0x390>
    1bfa:	80 37       	cpi	r24, 0x70	; 112
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <vfprintf+0x232>
    1bfe:	88 37       	cpi	r24, 0x78	; 120
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <vfprintf+0x238>
    1c02:	af c0       	rjmp	.+350    	; 0x1d62 <vfprintf+0x390>
    1c04:	2f 2f       	mov	r18, r31
    1c06:	20 61       	ori	r18, 0x10	; 16
    1c08:	b2 2e       	mov	r11, r18
    1c0a:	b4 fe       	sbrs	r11, 4
    1c0c:	0d c0       	rjmp	.+26     	; 0x1c28 <vfprintf+0x256>
    1c0e:	8b 2d       	mov	r24, r11
    1c10:	84 60       	ori	r24, 0x04	; 4
    1c12:	b8 2e       	mov	r11, r24
    1c14:	09 c0       	rjmp	.+18     	; 0x1c28 <vfprintf+0x256>
    1c16:	24 ff       	sbrs	r18, 4
    1c18:	0a c0       	rjmp	.+20     	; 0x1c2e <vfprintf+0x25c>
    1c1a:	9f 2f       	mov	r25, r31
    1c1c:	96 60       	ori	r25, 0x06	; 6
    1c1e:	b9 2e       	mov	r11, r25
    1c20:	06 c0       	rjmp	.+12     	; 0x1c2e <vfprintf+0x25c>
    1c22:	28 e0       	ldi	r18, 0x08	; 8
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	05 c0       	rjmp	.+10     	; 0x1c32 <vfprintf+0x260>
    1c28:	20 e1       	ldi	r18, 0x10	; 16
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <vfprintf+0x260>
    1c2e:	20 e1       	ldi	r18, 0x10	; 16
    1c30:	32 e0       	ldi	r19, 0x02	; 2
    1c32:	f8 01       	movw	r30, r16
    1c34:	b7 fe       	sbrs	r11, 7
    1c36:	07 c0       	rjmp	.+14     	; 0x1c46 <vfprintf+0x274>
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	0c 5f       	subi	r16, 0xFC	; 252
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	06 c0       	rjmp	.+12     	; 0x1c52 <vfprintf+0x280>
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 5f       	subi	r16, 0xFE	; 254
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	a4 01       	movw	r20, r8
    1c54:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__ultoa_invert>
    1c58:	a8 2e       	mov	r10, r24
    1c5a:	a8 18       	sub	r10, r8
    1c5c:	fb 2d       	mov	r31, r11
    1c5e:	ff 77       	andi	r31, 0x7F	; 127
    1c60:	7f 2e       	mov	r7, r31
    1c62:	76 fe       	sbrs	r7, 6
    1c64:	0b c0       	rjmp	.+22     	; 0x1c7c <vfprintf+0x2aa>
    1c66:	37 2d       	mov	r19, r7
    1c68:	3e 7f       	andi	r19, 0xFE	; 254
    1c6a:	a5 14       	cp	r10, r5
    1c6c:	50 f4       	brcc	.+20     	; 0x1c82 <vfprintf+0x2b0>
    1c6e:	74 fe       	sbrs	r7, 4
    1c70:	0a c0       	rjmp	.+20     	; 0x1c86 <vfprintf+0x2b4>
    1c72:	72 fc       	sbrc	r7, 2
    1c74:	08 c0       	rjmp	.+16     	; 0x1c86 <vfprintf+0x2b4>
    1c76:	37 2d       	mov	r19, r7
    1c78:	3e 7e       	andi	r19, 0xEE	; 238
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <vfprintf+0x2b4>
    1c7c:	ba 2c       	mov	r11, r10
    1c7e:	37 2d       	mov	r19, r7
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <vfprintf+0x2b6>
    1c82:	ba 2c       	mov	r11, r10
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <vfprintf+0x2b6>
    1c86:	b5 2c       	mov	r11, r5
    1c88:	34 ff       	sbrs	r19, 4
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <vfprintf+0x2d4>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ea 0d       	add	r30, r10
    1c90:	f1 1d       	adc	r31, r1
    1c92:	80 81       	ld	r24, Z
    1c94:	80 33       	cpi	r24, 0x30	; 48
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <vfprintf+0x2ca>
    1c98:	39 7e       	andi	r19, 0xE9	; 233
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <vfprintf+0x2dc>
    1c9c:	32 ff       	sbrs	r19, 2
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <vfprintf+0x2da>
    1ca0:	b3 94       	inc	r11
    1ca2:	b3 94       	inc	r11
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <vfprintf+0x2dc>
    1ca6:	83 2f       	mov	r24, r19
    1ca8:	86 78       	andi	r24, 0x86	; 134
    1caa:	09 f0       	breq	.+2      	; 0x1cae <vfprintf+0x2dc>
    1cac:	b3 94       	inc	r11
    1cae:	33 fd       	sbrc	r19, 3
    1cb0:	13 c0       	rjmp	.+38     	; 0x1cd8 <vfprintf+0x306>
    1cb2:	30 ff       	sbrs	r19, 0
    1cb4:	06 c0       	rjmp	.+12     	; 0x1cc2 <vfprintf+0x2f0>
    1cb6:	5a 2c       	mov	r5, r10
    1cb8:	b3 14       	cp	r11, r3
    1cba:	18 f4       	brcc	.+6      	; 0x1cc2 <vfprintf+0x2f0>
    1cbc:	53 0c       	add	r5, r3
    1cbe:	5b 18       	sub	r5, r11
    1cc0:	b3 2c       	mov	r11, r3
    1cc2:	b3 14       	cp	r11, r3
    1cc4:	68 f4       	brcc	.+26     	; 0x1ce0 <vfprintf+0x30e>
    1cc6:	b7 01       	movw	r22, r14
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	3c 87       	std	Y+12, r19	; 0x0c
    1cce:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1cd2:	b3 94       	inc	r11
    1cd4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cd6:	f5 cf       	rjmp	.-22     	; 0x1cc2 <vfprintf+0x2f0>
    1cd8:	b3 14       	cp	r11, r3
    1cda:	10 f4       	brcc	.+4      	; 0x1ce0 <vfprintf+0x30e>
    1cdc:	3b 18       	sub	r3, r11
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <vfprintf+0x310>
    1ce0:	31 2c       	mov	r3, r1
    1ce2:	34 ff       	sbrs	r19, 4
    1ce4:	12 c0       	rjmp	.+36     	; 0x1d0a <vfprintf+0x338>
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	80 e3       	ldi	r24, 0x30	; 48
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	3c 87       	std	Y+12, r19	; 0x0c
    1cee:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1cf2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cf4:	32 ff       	sbrs	r19, 2
    1cf6:	17 c0       	rjmp	.+46     	; 0x1d26 <vfprintf+0x354>
    1cf8:	31 fd       	sbrc	r19, 1
    1cfa:	03 c0       	rjmp	.+6      	; 0x1d02 <vfprintf+0x330>
    1cfc:	88 e7       	ldi	r24, 0x78	; 120
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <vfprintf+0x334>
    1d02:	88 e5       	ldi	r24, 0x58	; 88
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	b7 01       	movw	r22, r14
    1d08:	0c c0       	rjmp	.+24     	; 0x1d22 <vfprintf+0x350>
    1d0a:	83 2f       	mov	r24, r19
    1d0c:	86 78       	andi	r24, 0x86	; 134
    1d0e:	59 f0       	breq	.+22     	; 0x1d26 <vfprintf+0x354>
    1d10:	31 ff       	sbrs	r19, 1
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <vfprintf+0x346>
    1d14:	8b e2       	ldi	r24, 0x2B	; 43
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <vfprintf+0x348>
    1d18:	80 e2       	ldi	r24, 0x20	; 32
    1d1a:	37 fd       	sbrc	r19, 7
    1d1c:	8d e2       	ldi	r24, 0x2D	; 45
    1d1e:	b7 01       	movw	r22, r14
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1d26:	a5 14       	cp	r10, r5
    1d28:	38 f4       	brcc	.+14     	; 0x1d38 <vfprintf+0x366>
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	80 e3       	ldi	r24, 0x30	; 48
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1d34:	5a 94       	dec	r5
    1d36:	f7 cf       	rjmp	.-18     	; 0x1d26 <vfprintf+0x354>
    1d38:	aa 94       	dec	r10
    1d3a:	f4 01       	movw	r30, r8
    1d3c:	ea 0d       	add	r30, r10
    1d3e:	f1 1d       	adc	r31, r1
    1d40:	80 81       	ld	r24, Z
    1d42:	b7 01       	movw	r22, r14
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1d4a:	a1 10       	cpse	r10, r1
    1d4c:	f5 cf       	rjmp	.-22     	; 0x1d38 <vfprintf+0x366>
    1d4e:	33 20       	and	r3, r3
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <vfprintf+0x382>
    1d52:	51 ce       	rjmp	.-862    	; 0x19f6 <vfprintf+0x24>
    1d54:	b7 01       	movw	r22, r14
    1d56:	80 e2       	ldi	r24, 0x20	; 32
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <fputc>
    1d5e:	3a 94       	dec	r3
    1d60:	f6 cf       	rjmp	.-20     	; 0x1d4e <vfprintf+0x37c>
    1d62:	f7 01       	movw	r30, r14
    1d64:	86 81       	ldd	r24, Z+6	; 0x06
    1d66:	97 81       	ldd	r25, Z+7	; 0x07
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x39c>
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	9f ef       	ldi	r25, 0xFF	; 255
    1d6e:	2c 96       	adiw	r28, 0x0c	; 12
    1d70:	e2 e1       	ldi	r30, 0x12	; 18
    1d72:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__>

00001d76 <strnlen_P>:
    1d76:	fc 01       	movw	r30, r24
    1d78:	05 90       	lpm	r0, Z+
    1d7a:	61 50       	subi	r22, 0x01	; 1
    1d7c:	70 40       	sbci	r23, 0x00	; 0
    1d7e:	01 10       	cpse	r0, r1
    1d80:	d8 f7       	brcc	.-10     	; 0x1d78 <strnlen_P+0x2>
    1d82:	80 95       	com	r24
    1d84:	90 95       	com	r25
    1d86:	8e 0f       	add	r24, r30
    1d88:	9f 1f       	adc	r25, r31
    1d8a:	08 95       	ret

00001d8c <strnlen>:
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	61 50       	subi	r22, 0x01	; 1
    1d90:	70 40       	sbci	r23, 0x00	; 0
    1d92:	01 90       	ld	r0, Z+
    1d94:	01 10       	cpse	r0, r1
    1d96:	d8 f7       	brcc	.-10     	; 0x1d8e <strnlen+0x2>
    1d98:	80 95       	com	r24
    1d9a:	90 95       	com	r25
    1d9c:	8e 0f       	add	r24, r30
    1d9e:	9f 1f       	adc	r25, r31
    1da0:	08 95       	ret

00001da2 <fputc>:
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	fb 01       	movw	r30, r22
    1dac:	23 81       	ldd	r18, Z+3	; 0x03
    1dae:	21 fd       	sbrc	r18, 1
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <fputc+0x16>
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	9f ef       	ldi	r25, 0xFF	; 255
    1db6:	28 c0       	rjmp	.+80     	; 0x1e08 <fputc+0x66>
    1db8:	22 ff       	sbrs	r18, 2
    1dba:	16 c0       	rjmp	.+44     	; 0x1de8 <fputc+0x46>
    1dbc:	46 81       	ldd	r20, Z+6	; 0x06
    1dbe:	57 81       	ldd	r21, Z+7	; 0x07
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	42 17       	cp	r20, r18
    1dc6:	53 07       	cpc	r21, r19
    1dc8:	44 f4       	brge	.+16     	; 0x1dda <fputc+0x38>
    1dca:	a0 81       	ld	r26, Z
    1dcc:	b1 81       	ldd	r27, Z+1	; 0x01
    1dce:	9d 01       	movw	r18, r26
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	31 83       	std	Z+1, r19	; 0x01
    1dd6:	20 83       	st	Z, r18
    1dd8:	8c 93       	st	X, r24
    1dda:	26 81       	ldd	r18, Z+6	; 0x06
    1ddc:	37 81       	ldd	r19, Z+7	; 0x07
    1dde:	2f 5f       	subi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	37 83       	std	Z+7, r19	; 0x07
    1de4:	26 83       	std	Z+6, r18	; 0x06
    1de6:	10 c0       	rjmp	.+32     	; 0x1e08 <fputc+0x66>
    1de8:	eb 01       	movw	r28, r22
    1dea:	09 2f       	mov	r16, r25
    1dec:	18 2f       	mov	r17, r24
    1dee:	00 84       	ldd	r0, Z+8	; 0x08
    1df0:	f1 85       	ldd	r31, Z+9	; 0x09
    1df2:	e0 2d       	mov	r30, r0
    1df4:	09 95       	icall
    1df6:	89 2b       	or	r24, r25
    1df8:	e1 f6       	brne	.-72     	; 0x1db2 <fputc+0x10>
    1dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	9f 83       	std	Y+7, r25	; 0x07
    1e02:	8e 83       	std	Y+6, r24	; 0x06
    1e04:	81 2f       	mov	r24, r17
    1e06:	90 2f       	mov	r25, r16
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <__ultoa_invert>:
    1e12:	fa 01       	movw	r30, r20
    1e14:	aa 27       	eor	r26, r26
    1e16:	28 30       	cpi	r18, 0x08	; 8
    1e18:	51 f1       	breq	.+84     	; 0x1e6e <__ultoa_invert+0x5c>
    1e1a:	20 31       	cpi	r18, 0x10	; 16
    1e1c:	81 f1       	breq	.+96     	; 0x1e7e <__ultoa_invert+0x6c>
    1e1e:	e8 94       	clt
    1e20:	6f 93       	push	r22
    1e22:	6e 7f       	andi	r22, 0xFE	; 254
    1e24:	6e 5f       	subi	r22, 0xFE	; 254
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	af 4f       	sbci	r26, 0xFF	; 255
    1e2e:	b1 e0       	ldi	r27, 0x01	; 1
    1e30:	3e d0       	rcall	.+124    	; 0x1eae <__ultoa_invert+0x9c>
    1e32:	b4 e0       	ldi	r27, 0x04	; 4
    1e34:	3c d0       	rcall	.+120    	; 0x1eae <__ultoa_invert+0x9c>
    1e36:	67 0f       	add	r22, r23
    1e38:	78 1f       	adc	r23, r24
    1e3a:	89 1f       	adc	r24, r25
    1e3c:	9a 1f       	adc	r25, r26
    1e3e:	a1 1d       	adc	r26, r1
    1e40:	68 0f       	add	r22, r24
    1e42:	79 1f       	adc	r23, r25
    1e44:	8a 1f       	adc	r24, r26
    1e46:	91 1d       	adc	r25, r1
    1e48:	a1 1d       	adc	r26, r1
    1e4a:	6a 0f       	add	r22, r26
    1e4c:	71 1d       	adc	r23, r1
    1e4e:	81 1d       	adc	r24, r1
    1e50:	91 1d       	adc	r25, r1
    1e52:	a1 1d       	adc	r26, r1
    1e54:	20 d0       	rcall	.+64     	; 0x1e96 <__ultoa_invert+0x84>
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <__ultoa_invert+0x48>
    1e58:	68 94       	set
    1e5a:	3f 91       	pop	r19
    1e5c:	2a e0       	ldi	r18, 0x0A	; 10
    1e5e:	26 9f       	mul	r18, r22
    1e60:	11 24       	eor	r1, r1
    1e62:	30 19       	sub	r19, r0
    1e64:	30 5d       	subi	r19, 0xD0	; 208
    1e66:	31 93       	st	Z+, r19
    1e68:	de f6       	brtc	.-74     	; 0x1e20 <__ultoa_invert+0xe>
    1e6a:	cf 01       	movw	r24, r30
    1e6c:	08 95       	ret
    1e6e:	46 2f       	mov	r20, r22
    1e70:	47 70       	andi	r20, 0x07	; 7
    1e72:	40 5d       	subi	r20, 0xD0	; 208
    1e74:	41 93       	st	Z+, r20
    1e76:	b3 e0       	ldi	r27, 0x03	; 3
    1e78:	0f d0       	rcall	.+30     	; 0x1e98 <__ultoa_invert+0x86>
    1e7a:	c9 f7       	brne	.-14     	; 0x1e6e <__ultoa_invert+0x5c>
    1e7c:	f6 cf       	rjmp	.-20     	; 0x1e6a <__ultoa_invert+0x58>
    1e7e:	46 2f       	mov	r20, r22
    1e80:	4f 70       	andi	r20, 0x0F	; 15
    1e82:	40 5d       	subi	r20, 0xD0	; 208
    1e84:	4a 33       	cpi	r20, 0x3A	; 58
    1e86:	18 f0       	brcs	.+6      	; 0x1e8e <__ultoa_invert+0x7c>
    1e88:	49 5d       	subi	r20, 0xD9	; 217
    1e8a:	31 fd       	sbrc	r19, 1
    1e8c:	40 52       	subi	r20, 0x20	; 32
    1e8e:	41 93       	st	Z+, r20
    1e90:	02 d0       	rcall	.+4      	; 0x1e96 <__ultoa_invert+0x84>
    1e92:	a9 f7       	brne	.-22     	; 0x1e7e <__ultoa_invert+0x6c>
    1e94:	ea cf       	rjmp	.-44     	; 0x1e6a <__ultoa_invert+0x58>
    1e96:	b4 e0       	ldi	r27, 0x04	; 4
    1e98:	a6 95       	lsr	r26
    1e9a:	97 95       	ror	r25
    1e9c:	87 95       	ror	r24
    1e9e:	77 95       	ror	r23
    1ea0:	67 95       	ror	r22
    1ea2:	ba 95       	dec	r27
    1ea4:	c9 f7       	brne	.-14     	; 0x1e98 <__ultoa_invert+0x86>
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	61 05       	cpc	r22, r1
    1eaa:	71 05       	cpc	r23, r1
    1eac:	08 95       	ret
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	0a 2e       	mov	r0, r26
    1eb4:	06 94       	lsr	r0
    1eb6:	57 95       	ror	r21
    1eb8:	47 95       	ror	r20
    1eba:	37 95       	ror	r19
    1ebc:	27 95       	ror	r18
    1ebe:	ba 95       	dec	r27
    1ec0:	c9 f7       	brne	.-14     	; 0x1eb4 <__ultoa_invert+0xa2>
    1ec2:	62 0f       	add	r22, r18
    1ec4:	73 1f       	adc	r23, r19
    1ec6:	84 1f       	adc	r24, r20
    1ec8:	95 1f       	adc	r25, r21
    1eca:	a0 1d       	adc	r26, r0
    1ecc:	08 95       	ret

00001ece <eeprom_read_byte>:
    1ece:	f9 99       	sbic	0x1f, 1	; 31
    1ed0:	fe cf       	rjmp	.-4      	; 0x1ece <eeprom_read_byte>
    1ed2:	92 bd       	out	0x22, r25	; 34
    1ed4:	81 bd       	out	0x21, r24	; 33
    1ed6:	f8 9a       	sbi	0x1f, 0	; 31
    1ed8:	99 27       	eor	r25, r25
    1eda:	80 b5       	in	r24, 0x20	; 32
    1edc:	08 95       	ret

00001ede <eeprom_write_byte>:
    1ede:	26 2f       	mov	r18, r22

00001ee0 <eeprom_write_r18>:
    1ee0:	f9 99       	sbic	0x1f, 1	; 31
    1ee2:	fe cf       	rjmp	.-4      	; 0x1ee0 <eeprom_write_r18>
    1ee4:	1f ba       	out	0x1f, r1	; 31
    1ee6:	92 bd       	out	0x22, r25	; 34
    1ee8:	81 bd       	out	0x21, r24	; 33
    1eea:	20 bd       	out	0x20, r18	; 32
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	fa 9a       	sbi	0x1f, 2	; 31
    1ef2:	f9 9a       	sbi	0x1f, 1	; 31
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	08 95       	ret

00001efa <__divmodsi4>:
    1efa:	05 2e       	mov	r0, r21
    1efc:	97 fb       	bst	r25, 7
    1efe:	1e f4       	brtc	.+6      	; 0x1f06 <__divmodsi4+0xc>
    1f00:	00 94       	com	r0
    1f02:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__negsi2>
    1f06:	57 fd       	sbrc	r21, 7
    1f08:	07 d0       	rcall	.+14     	; 0x1f18 <__divmodsi4_neg2>
    1f0a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__udivmodsi4>
    1f0e:	07 fc       	sbrc	r0, 7
    1f10:	03 d0       	rcall	.+6      	; 0x1f18 <__divmodsi4_neg2>
    1f12:	4e f4       	brtc	.+18     	; 0x1f26 <__divmodsi4_exit>
    1f14:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__negsi2>

00001f18 <__divmodsi4_neg2>:
    1f18:	50 95       	com	r21
    1f1a:	40 95       	com	r20
    1f1c:	30 95       	com	r19
    1f1e:	21 95       	neg	r18
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	4f 4f       	sbci	r20, 0xFF	; 255
    1f24:	5f 4f       	sbci	r21, 0xFF	; 255

00001f26 <__divmodsi4_exit>:
    1f26:	08 95       	ret

00001f28 <__negsi2>:
    1f28:	90 95       	com	r25
    1f2a:	80 95       	com	r24
    1f2c:	70 95       	com	r23
    1f2e:	61 95       	neg	r22
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	8f 4f       	sbci	r24, 0xFF	; 255
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	08 95       	ret

00001f38 <__muluhisi3>:
    1f38:	0e 94 44 0a 	call	0x1488	; 0x1488 <__umulhisi3>
    1f3c:	a5 9f       	mul	r26, r21
    1f3e:	90 0d       	add	r25, r0
    1f40:	b4 9f       	mul	r27, r20
    1f42:	90 0d       	add	r25, r0
    1f44:	a4 9f       	mul	r26, r20
    1f46:	80 0d       	add	r24, r0
    1f48:	91 1d       	adc	r25, r1
    1f4a:	11 24       	eor	r1, r1
    1f4c:	08 95       	ret

00001f4e <__mulshisi3>:
    1f4e:	b7 ff       	sbrs	r27, 7
    1f50:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__muluhisi3>

00001f54 <__mulohisi3>:
    1f54:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__muluhisi3>
    1f58:	82 1b       	sub	r24, r18
    1f5a:	93 0b       	sbc	r25, r19
    1f5c:	08 95       	ret

00001f5e <__prologue_saves__>:
    1f5e:	2f 92       	push	r2
    1f60:	3f 92       	push	r3
    1f62:	4f 92       	push	r4
    1f64:	5f 92       	push	r5
    1f66:	6f 92       	push	r6
    1f68:	7f 92       	push	r7
    1f6a:	8f 92       	push	r8
    1f6c:	9f 92       	push	r9
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	ca 1b       	sub	r28, r26
    1f88:	db 0b       	sbc	r29, r27
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	09 94       	ijmp

00001f96 <__epilogue_restores__>:
    1f96:	2a 88       	ldd	r2, Y+18	; 0x12
    1f98:	39 88       	ldd	r3, Y+17	; 0x11
    1f9a:	48 88       	ldd	r4, Y+16	; 0x10
    1f9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fa2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fa6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fa8:	b9 84       	ldd	r11, Y+9	; 0x09
    1faa:	c8 84       	ldd	r12, Y+8	; 0x08
    1fac:	df 80       	ldd	r13, Y+7	; 0x07
    1fae:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb0:	fd 80       	ldd	r15, Y+5	; 0x05
    1fb2:	0c 81       	ldd	r16, Y+4	; 0x04
    1fb4:	1b 81       	ldd	r17, Y+3	; 0x03
    1fb6:	aa 81       	ldd	r26, Y+2	; 0x02
    1fb8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fba:	ce 0f       	add	r28, r30
    1fbc:	d1 1d       	adc	r29, r1
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	ed 01       	movw	r28, r26
    1fca:	08 95       	ret

00001fcc <__udivmodsi4>:
    1fcc:	a1 e2       	ldi	r26, 0x21	; 33
    1fce:	1a 2e       	mov	r1, r26
    1fd0:	aa 1b       	sub	r26, r26
    1fd2:	bb 1b       	sub	r27, r27
    1fd4:	fd 01       	movw	r30, r26
    1fd6:	0d c0       	rjmp	.+26     	; 0x1ff2 <__udivmodsi4_ep>

00001fd8 <__udivmodsi4_loop>:
    1fd8:	aa 1f       	adc	r26, r26
    1fda:	bb 1f       	adc	r27, r27
    1fdc:	ee 1f       	adc	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	a2 17       	cp	r26, r18
    1fe2:	b3 07       	cpc	r27, r19
    1fe4:	e4 07       	cpc	r30, r20
    1fe6:	f5 07       	cpc	r31, r21
    1fe8:	20 f0       	brcs	.+8      	; 0x1ff2 <__udivmodsi4_ep>
    1fea:	a2 1b       	sub	r26, r18
    1fec:	b3 0b       	sbc	r27, r19
    1fee:	e4 0b       	sbc	r30, r20
    1ff0:	f5 0b       	sbc	r31, r21

00001ff2 <__udivmodsi4_ep>:
    1ff2:	66 1f       	adc	r22, r22
    1ff4:	77 1f       	adc	r23, r23
    1ff6:	88 1f       	adc	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	1a 94       	dec	r1
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <__udivmodsi4_loop>
    1ffe:	60 95       	com	r22
    2000:	70 95       	com	r23
    2002:	80 95       	com	r24
    2004:	90 95       	com	r25
    2006:	9b 01       	movw	r18, r22
    2008:	ac 01       	movw	r20, r24
    200a:	bd 01       	movw	r22, r26
    200c:	cf 01       	movw	r24, r30
    200e:	08 95       	ret

00002010 <_exit>:
    2010:	f8 94       	cli

00002012 <__stop_program>:
    2012:	ff cf       	rjmp	.-2      	; 0x2012 <__stop_program>
