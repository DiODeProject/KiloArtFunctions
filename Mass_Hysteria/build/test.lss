
build/test.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	10 03       	mulsu	r17, r16
      6a:	8c 03       	fmulsu	r16, r20
      6c:	e4 02       	muls	r30, r20
      6e:	db 02       	muls	r29, r27
      70:	e1 02       	muls	r30, r17
      72:	6e 03       	fmul	r22, r22
      74:	63 03       	mulsu	r22, r19
      76:	ee 09       	sbc	r30, r14
      78:	cb 08       	sbc	r12, r11
      7a:	cb 08       	sbc	r12, r11
      7c:	eb 09       	sbc	r30, r11
      7e:	f7 09       	sbc	r31, r7
      80:	e7 09       	sbc	r30, r7
      82:	fe 09       	sbc	r31, r14
      84:	fa 09       	sbc	r31, r10
      86:	02 0a       	sbc	r0, r18
      88:	ba 09       	sbc	r27, r10
      8a:	8c 09       	sbc	r24, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 ea       	ldi	r30, 0xA8	; 168
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 37       	cpi	r26, 0x7A	; 122
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 34 0b 	call	0x1668	; 0x1668 <main>
      da:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:

}

void setup()
{
  last_state_update = kilo_ticks;
      e2:	80 91 3f 01 	lds	r24, 0x013F
      e6:	90 91 40 01 	lds	r25, 0x0140
      ea:	a0 91 41 01 	lds	r26, 0x0141
      ee:	b0 91 42 01 	lds	r27, 0x0142
      f2:	80 93 18 01 	sts	0x0118, r24
      f6:	90 93 19 01 	sts	0x0119, r25
      fa:	a0 93 1a 01 	sts	0x011A, r26
      fe:	b0 93 1b 01 	sts	0x011B, r27
     102:	08 95       	ret

00000104 <loop>:
}

void loop()
{
  // Update the state every 64 clock ticks (roughly 2 seconds).
  if (kilo_ticks > (last_state_update + 32))
     104:	40 91 3f 01 	lds	r20, 0x013F
     108:	50 91 40 01 	lds	r21, 0x0140
     10c:	60 91 41 01 	lds	r22, 0x0141
     110:	70 91 42 01 	lds	r23, 0x0142
     114:	80 91 18 01 	lds	r24, 0x0118
     118:	90 91 19 01 	lds	r25, 0x0119
     11c:	a0 91 1a 01 	lds	r26, 0x011A
     120:	b0 91 1b 01 	lds	r27, 0x011B
     124:	80 96       	adiw	r24, 0x20	; 32
     126:	a1 1d       	adc	r26, r1
     128:	b1 1d       	adc	r27, r1
     12a:	84 17       	cp	r24, r20
     12c:	95 07       	cpc	r25, r21
     12e:	a6 07       	cpc	r26, r22
     130:	b7 07       	cpc	r27, r23
     132:	08 f0       	brcs	.+2      	; 0x136 <loop+0x32>
     134:	42 c0       	rjmp	.+132    	; 0x1ba <loop+0xb6>
    {
      last_state_update = kilo_ticks;
     136:	80 91 3f 01 	lds	r24, 0x013F
     13a:	90 91 40 01 	lds	r25, 0x0140
     13e:	a0 91 41 01 	lds	r26, 0x0141
     142:	b0 91 42 01 	lds	r27, 0x0142
     146:	80 93 18 01 	sts	0x0118, r24
     14a:	90 93 19 01 	sts	0x0119, r25
     14e:	a0 93 1a 01 	sts	0x011A, r26
     152:	b0 93 1b 01 	sts	0x011B, r27

        if (current_light > (previous_light))
     156:	80 91 0e 01 	lds	r24, 0x010E
     15a:	90 91 0f 01 	lds	r25, 0x010F
     15e:	20 91 0c 01 	lds	r18, 0x010C
     162:	30 91 0d 01 	lds	r19, 0x010D
     166:	28 17       	cp	r18, r24
     168:	39 07       	cpc	r19, r25
     16a:	44 f5       	brge	.+80     	; 0x1bc <loop+0xb8>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     16c:	20 91 12 01 	lds	r18, 0x0112
     170:	30 91 13 01 	lds	r19, 0x0113
     174:	21 30       	cpi	r18, 0x01	; 1
     176:	31 05       	cpc	r19, r1
     178:	e1 f0       	breq	.+56     	; 0x1b2 <loop+0xae>
    {
        current_motion = new_motion;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	90 93 13 01 	sts	0x0113, r25
     182:	80 93 12 01 	sts	0x0112, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
     186:	80 91 10 01 	lds	r24, 0x0110
     18a:	90 91 11 01 	lds	r25, 0x0111
     18e:	89 2b       	or	r24, r25
     190:	c9 f1       	breq	.+114    	; 0x204 <loop+0x100>
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     192:	60 91 78 01 	lds	r22, 0x0178
     196:	80 91 77 01 	lds	r24, 0x0177
     19a:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	90 93 11 01 	sts	0x0111, r25
     1a6:	80 93 10 01 	sts	0x0110, r24
     1aa:	80 91 0e 01 	lds	r24, 0x010E
     1ae:	90 91 0f 01 	lds	r25, 0x010F
        }
        else
        {
            random_move();
        }
        previous_light = current_light;
     1b2:	90 93 0d 01 	sts	0x010D, r25
     1b6:	80 93 0c 01 	sts	0x010C, r24
     1ba:	08 95       	ret
    }
}

void random_move(){

    int random_number = rand_hard();
     1bc:	0e 94 83 04 	call	0x906	; 0x906 <rand_hard>
    int random_direction = (random_number % 2);
    if(random_direction==0){
     1c0:	80 ff       	sbrs	r24, 0
     1c2:	23 c0       	rjmp	.+70     	; 0x20a <loop+0x106>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1c4:	80 91 12 01 	lds	r24, 0x0112
     1c8:	90 91 13 01 	lds	r25, 0x0113
     1cc:	03 97       	sbiw	r24, 0x03	; 3
     1ce:	a9 f0       	breq	.+42     	; 0x1fa <loop+0xf6>
    {
        current_motion = new_motion;
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	90 93 13 01 	sts	0x0113, r25
     1d8:	80 93 12 01 	sts	0x0112, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     1dc:	80 91 10 01 	lds	r24, 0x0110
     1e0:	90 91 11 01 	lds	r25, 0x0111
     1e4:	89 2b       	or	r24, r25
     1e6:	a1 f1       	breq	.+104    	; 0x250 <loop+0x14c>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     1e8:	60 91 65 01 	lds	r22, 0x0165
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 0;
     1f2:	10 92 11 01 	sts	0x0111, r1
     1f6:	10 92 10 01 	sts	0x0110, r1
     1fa:	80 91 0e 01 	lds	r24, 0x010E
     1fe:	90 91 0f 01 	lds	r25, 0x010F
     202:	d7 cf       	rjmp	.-82     	; 0x1b2 <loop+0xae>
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
                spinup_motors();
     204:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
     208:	c4 cf       	rjmp	.-120    	; 0x192 <loop+0x8e>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     20a:	80 91 12 01 	lds	r24, 0x0112
     20e:	90 91 13 01 	lds	r25, 0x0113
     212:	02 97       	sbiw	r24, 0x02	; 2
     214:	91 f3       	breq	.-28     	; 0x1fa <loop+0xf6>
    {
        current_motion = new_motion;
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	90 93 13 01 	sts	0x0113, r25
     21e:	80 93 12 01 	sts	0x0112, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     222:	80 91 10 01 	lds	r24, 0x0110
     226:	90 91 11 01 	lds	r25, 0x0111
     22a:	89 2b       	or	r24, r25
     22c:	71 f0       	breq	.+28     	; 0x24a <loop+0x146>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	80 91 79 01 	lds	r24, 0x0179
     234:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 0;
     238:	10 92 11 01 	sts	0x0111, r1
     23c:	10 92 10 01 	sts	0x0110, r1
     240:	80 91 0e 01 	lds	r24, 0x010E
     244:	90 91 0f 01 	lds	r25, 0x010F
     248:	b4 cf       	rjmp	.-152    	; 0x1b2 <loop+0xae>
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     24a:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
     24e:	ef cf       	rjmp	.-34     	; 0x22e <loop+0x12a>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     250:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
     254:	c9 cf       	rjmp	.-110    	; 0x1e8 <loop+0xe4>

00000256 <set_motion>:

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     256:	20 91 12 01 	lds	r18, 0x0112
     25a:	30 91 13 01 	lds	r19, 0x0113
     25e:	28 17       	cp	r18, r24
     260:	39 07       	cpc	r19, r25
     262:	71 f0       	breq	.+28     	; 0x280 <set_motion+0x2a>
    {
        current_motion = new_motion;
     264:	90 93 13 01 	sts	0x0113, r25
     268:	80 93 12 01 	sts	0x0112, r24
        
        if (current_motion == STOP)
     26c:	00 97       	sbiw	r24, 0x00	; 0
     26e:	71 f1       	breq	.+92     	; 0x2cc <set_motion+0x76>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	91 05       	cpc	r25, r1
     274:	31 f0       	breq	.+12     	; 0x282 <set_motion+0x2c>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     276:	82 30       	cpi	r24, 0x02	; 2
     278:	91 05       	cpc	r25, r1
     27a:	61 f1       	breq	.+88     	; 0x2d4 <set_motion+0x7e>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     27c:	03 97       	sbiw	r24, 0x03	; 3
     27e:	b1 f0       	breq	.+44     	; 0x2ac <set_motion+0x56>
     280:	08 95       	ret
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
     282:	80 91 10 01 	lds	r24, 0x0110
     286:	90 91 11 01 	lds	r25, 0x0111
     28a:	89 2b       	or	r24, r25
     28c:	11 f4       	brne	.+4      	; 0x292 <set_motion+0x3c>
                spinup_motors();
     28e:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     292:	60 91 78 01 	lds	r22, 0x0178
     296:	80 91 77 01 	lds	r24, 0x0177
     29a:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 1;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	90 93 11 01 	sts	0x0111, r25
     2a6:	80 93 10 01 	sts	0x0110, r24
     2aa:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     2ac:	80 91 10 01 	lds	r24, 0x0110
     2b0:	90 91 11 01 	lds	r25, 0x0111
     2b4:	89 2b       	or	r24, r25
     2b6:	01 f1       	breq	.+64     	; 0x2f8 <set_motion+0xa2>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     2b8:	60 91 65 01 	lds	r22, 0x0165
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 0;
     2c2:	10 92 11 01 	sts	0x0111, r1
     2c6:	10 92 10 01 	sts	0x0110, r1
     2ca:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0c 94 24 04 	jmp	0x848	; 0x848 <set_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     2d4:	80 91 10 01 	lds	r24, 0x0110
     2d8:	90 91 11 01 	lds	r25, 0x0111
     2dc:	89 2b       	or	r24, r25
     2de:	11 f4       	brne	.+4      	; 0x2e4 <set_motion+0x8e>
                spinup_motors();
     2e0:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	80 91 79 01 	lds	r24, 0x0179
     2ea:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 0;
     2ee:	10 92 11 01 	sts	0x0111, r1
     2f2:	10 92 10 01 	sts	0x0110, r1
     2f6:	08 95       	ret
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     2f8:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
     2fc:	dd cf       	rjmp	.-70     	; 0x2b8 <set_motion+0x62>

000002fe <random_move>:
    }
}

void random_move(){

    int random_number = rand_hard();
     2fe:	0e 94 83 04 	call	0x906	; 0x906 <rand_hard>
    int random_direction = (random_number % 2);
    if(random_direction==0){
     302:	80 ff       	sbrs	r24, 0
     304:	1c c0       	rjmp	.+56     	; 0x33e <random_move+0x40>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     306:	80 91 12 01 	lds	r24, 0x0112
     30a:	90 91 13 01 	lds	r25, 0x0113
     30e:	03 97       	sbiw	r24, 0x03	; 3
     310:	a9 f0       	breq	.+42     	; 0x33c <random_move+0x3e>
    {
        current_motion = new_motion;
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	90 93 13 01 	sts	0x0113, r25
     31a:	80 93 12 01 	sts	0x0112, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     31e:	80 91 10 01 	lds	r24, 0x0110
     322:	90 91 11 01 	lds	r25, 0x0111
     326:	89 2b       	or	r24, r25
     328:	41 f1       	breq	.+80     	; 0x37a <random_move+0x7c>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     32a:	60 91 65 01 	lds	r22, 0x0165
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 0;
     334:	10 92 11 01 	sts	0x0111, r1
     338:	10 92 10 01 	sts	0x0110, r1
     33c:	08 95       	ret

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     33e:	80 91 12 01 	lds	r24, 0x0112
     342:	90 91 13 01 	lds	r25, 0x0113
     346:	02 97       	sbiw	r24, 0x02	; 2
     348:	c9 f3       	breq	.-14     	; 0x33c <random_move+0x3e>
    {
        current_motion = new_motion;
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 13 01 	sts	0x0113, r25
     352:	80 93 12 01 	sts	0x0112, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     356:	80 91 10 01 	lds	r24, 0x0110
     35a:	90 91 11 01 	lds	r25, 0x0111
     35e:	89 2b       	or	r24, r25
     360:	11 f4       	brne	.+4      	; 0x366 <random_move+0x68>
                spinup_motors();
     362:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	80 91 79 01 	lds	r24, 0x0179
     36c:	0e 94 24 04 	call	0x848	; 0x848 <set_motors>
            both_spined = 0;
     370:	10 92 11 01 	sts	0x0111, r1
     374:	10 92 10 01 	sts	0x0110, r1
     378:	08 95       	ret
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     37a:	0e 94 29 04 	call	0x852	; 0x852 <spinup_motors>
     37e:	d5 cf       	rjmp	.-86     	; 0x32a <random_move+0x2c>

00000380 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     380:	08 95       	ret

00000382 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	08 95       	ret

00000388 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     388:	08 95       	ret

0000038a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
    cli();
     398:	f8 94       	cli

    ports_off();
     39a:	14 b8       	out	0x04, r1	; 4
     39c:	17 b8       	out	0x07, r1	; 7
     39e:	1a b8       	out	0x0a, r1	; 10
     3a0:	15 b8       	out	0x05, r1	; 5
     3a2:	18 b8       	out	0x08, r1	; 8
     3a4:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     3a6:	52 9a       	sbi	0x0a, 2	; 10
     3a8:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     3aa:	14 bc       	out	0x24, r1	; 36
     3ac:	85 e0       	ldi	r24, 0x05	; 5
     3ae:	85 bd       	out	0x25, r24	; 37
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	87 bd       	out	0x27, r24	; 39
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     3ba:	10 92 80 00 	sts	0x0080, r1
     3be:	10 92 81 00 	sts	0x0081, r1
     3c2:	2f e8       	ldi	r18, 0x8F	; 143
     3c4:	3b e0       	ldi	r19, 0x0B	; 11
     3c6:	30 93 89 00 	sts	0x0089, r19
     3ca:	20 93 88 00 	sts	0x0088, r18
     3ce:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     3d2:	53 98       	cbi	0x0a, 3	; 10
     3d4:	23 98       	cbi	0x04, 3	; 4
     3d6:	91 ea       	ldi	r25, 0xA1	; 161
     3d8:	90 93 b0 00 	sts	0x00B0, r25
     3dc:	80 93 b1 00 	sts	0x00B1, r24
     3e0:	10 92 b4 00 	sts	0x00B4, r1
     3e4:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     3e8:	8b e0       	ldi	r24, 0x0B	; 11
     3ea:	80 bf       	out	0x30, r24	; 48
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     3f2:	86 e0       	ldi	r24, 0x06	; 6
     3f4:	80 93 7c 00 	sts	0x007C, r24
     3f8:	83 e8       	ldi	r24, 0x83	; 131
     3fa:	80 93 7a 00 	sts	0x007A, r24
     3fe:	80 91 7a 00 	lds	r24, 0x007A
     402:	80 64       	ori	r24, 0x40	; 64
     404:	80 93 7a 00 	sts	0x007A, r24
     408:	80 91 7a 00 	lds	r24, 0x007A
     40c:	86 fd       	sbrc	r24, 6
     40e:	fc cf       	rjmp	.-8      	; 0x408 <kilo_init+0x7e>
    adc_trigger_high_gain();
     410:	10 92 7c 00 	sts	0x007C, r1
     414:	83 ea       	ldi	r24, 0xA3	; 163
     416:	80 93 7a 00 	sts	0x007A, r24
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
    if (osccal != 0xFF)
     428:	8f 3f       	cpi	r24, 0xFF	; 255
     42a:	11 f0       	breq	.+4      	; 0x430 <kilo_init+0xa6>
        OSCCAL = osccal;
     42c:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     430:	10 92 43 01 	sts	0x0143, r1
    rx_leadingbit = 1;
     434:	c1 e0       	ldi	r28, 0x01	; 1
     436:	c0 93 1c 01 	sts	0x011C, r28
    rx_leadingbyte = 1;
     43a:	c0 93 60 01 	sts	0x0160, r28
    rx_byteindex = 0;
     43e:	10 92 3a 01 	sts	0x013A, r1
    rx_bytevalue = 0;
     442:	10 92 74 01 	sts	0x0174, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     44e:	80 93 39 01 	sts	0x0139, r24
    if (tx_mask & ~TX_MASK_MAX)
     452:	80 91 39 01 	lds	r24, 0x0139
     456:	88 73       	andi	r24, 0x38	; 56
     458:	11 f0       	breq	.+4      	; 0x45e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     45a:	c0 93 39 01 	sts	0x0139, r28
    tx_clock = 0;
     45e:	10 92 64 01 	sts	0x0164, r1
     462:	10 92 63 01 	sts	0x0163, r1
    tx_increment = 255;
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 62 01 	sts	0x0162, r25
     46e:	80 93 61 01 	sts	0x0161, r24
    kilo_ticks = 0;
     472:	10 92 3f 01 	sts	0x013F, r1
     476:	10 92 40 01 	sts	0x0140, r1
     47a:	10 92 41 01 	sts	0x0141, r1
     47e:	10 92 42 01 	sts	0x0142, r1
    kilo_state = IDLE;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     488:	82 e4       	ldi	r24, 0x42	; 66
     48a:	9f e0       	ldi	r25, 0x0F	; 15
     48c:	90 93 73 01 	sts	0x0173, r25
     490:	80 93 72 01 	sts	0x0172, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     494:	80 eb       	ldi	r24, 0xB0	; 176
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     49c:	c8 2f       	mov	r28, r24
     49e:	81 eb       	ldi	r24, 0xB1	; 177
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     4a6:	2c 2f       	mov	r18, r28
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	38 2b       	or	r19, r24
     4ac:	30 93 76 01 	sts	0x0176, r19
     4b0:	20 93 75 01 	sts	0x0175, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     4b4:	85 e0       	ldi	r24, 0x05	; 5
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     4bc:	80 93 79 01 	sts	0x0179, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     4c0:	89 e0       	ldi	r24, 0x09	; 9
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     4c8:	80 93 65 01 	sts	0x0165, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     4d4:	80 93 77 01 	sts	0x0177, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     4d8:	84 e1       	ldi	r24, 0x14	; 20
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     4e0:	80 93 78 01 	sts	0x0178, r24
     4e4:	54 e4       	ldi	r21, 0x44	; 68
     4e6:	e5 2e       	mov	r14, r21
     4e8:	51 e0       	ldi	r21, 0x01	; 1
     4ea:	f5 2e       	mov	r15, r21
     4ec:	0d e1       	ldi	r16, 0x1D	; 29
     4ee:	11 e0       	ldi	r17, 0x01	; 1
     4f0:	c0 e2       	ldi	r28, 0x20	; 32
     4f2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4f4:	ce 01       	movw	r24, r28
     4f6:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     4fa:	d8 2e       	mov	r13, r24
     4fc:	ce 01       	movw	r24, r28
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     504:	2d 2d       	mov	r18, r13
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	32 2f       	mov	r19, r18
     50a:	22 27       	eor	r18, r18
     50c:	28 2b       	or	r18, r24
     50e:	f7 01       	movw	r30, r14
     510:	21 93       	st	Z+, r18
     512:	31 93       	st	Z+, r19
     514:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     516:	ce 01       	movw	r24, r28
     518:	c0 96       	adiw	r24, 0x30	; 48
     51a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     51e:	d8 2e       	mov	r13, r24
     520:	ce 01       	movw	r24, r28
     522:	c1 96       	adiw	r24, 0x31	; 49
     524:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <eeprom_read_byte>
     528:	2d 2d       	mov	r18, r13
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	32 2f       	mov	r19, r18
     52e:	22 27       	eor	r18, r18
     530:	28 2b       	or	r18, r24
     532:	f8 01       	movw	r30, r16
     534:	21 93       	st	Z+, r18
     536:	31 93       	st	Z+, r19
     538:	8f 01       	movw	r16, r30
     53a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     53c:	cc 33       	cpi	r28, 0x3C	; 60
     53e:	d1 05       	cpc	r29, r1
     540:	c9 f6       	brne	.-78     	; 0x4f4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     542:	78 94       	sei
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	08 95       	ret

00000554 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     554:	1f 92       	push	r1
     556:	0f 92       	push	r0
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	8f 93       	push	r24
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	a8 95       	wdr
     566:	80 91 60 00 	lds	r24, 0x0060
     56a:	88 61       	ori	r24, 0x18	; 24
     56c:	80 93 60 00 	sts	0x0060, r24
     570:	10 92 60 00 	sts	0x0060, r1
     574:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     576:	8f 91       	pop	r24
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     582:	3c 01       	movw	r6, r24
     584:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     586:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     588:	99 24       	eor	r9, r9
     58a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     590:	96 e0       	ldi	r25, 0x06	; 6
     592:	a9 2e       	mov	r10, r25
     594:	23 e8       	ldi	r18, 0x83	; 131
     596:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     598:	38 e1       	ldi	r19, 0x18	; 24
     59a:	d3 2e       	mov	r13, r19
     59c:	49 e2       	ldi	r20, 0x29	; 41
     59e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     5a0:	90 91 17 01 	lds	r25, 0x0117
     5a4:	e9 2f       	mov	r30, r25
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	e7 30       	cpi	r30, 0x07	; 7
     5aa:	f1 05       	cpc	r31, r1
     5ac:	c8 f7       	brcc	.-14     	; 0x5a0 <kilo_start+0x1e>
     5ae:	ec 5c       	subi	r30, 0xCC	; 204
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     5b6:	11 23       	and	r17, r17
     5b8:	09 f4       	brne	.+2      	; 0x5bc <kilo_start+0x3a>
     5ba:	fc c0       	rjmp	.+504    	; 0x7b4 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5bc:	c0 92 17 01 	sts	0x0117, r12
     5c0:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     5c2:	fe 01       	movw	r30, r28
     5c4:	09 95       	icall
                break;
     5c6:	ec cf       	rjmp	.-40     	; 0x5a0 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     5c8:	80 91 43 01 	lds	r24, 0x0143
     5cc:	81 11       	cpse	r24, r1
     5ce:	eb c0       	rjmp	.+470    	; 0x7a6 <kilo_start+0x224>
        cli();                                    // disable interrupts
     5d0:	f8 94       	cli
        adc_setup_conversion(6);
     5d2:	a0 92 7c 00 	sts	0x007C, r10
     5d6:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     5da:	80 91 7a 00 	lds	r24, 0x007A
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     5e4:	90 91 7a 00 	lds	r25, 0x007A
     5e8:	96 fd       	sbrc	r25, 6
     5ea:	fc cf       	rjmp	.-8      	; 0x5e4 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     5ec:	80 91 78 00 	lds	r24, 0x0078
     5f0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5f4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     5f6:	8b 3a       	cpi	r24, 0xAB	; 171
     5f8:	e2 e0       	ldi	r30, 0x02	; 2
     5fa:	9e 07       	cpc	r25, r30
     5fc:	0c f0       	brlt	.+2      	; 0x600 <kilo_start+0x7e>
     5fe:	ed c0       	rjmp	.+474    	; 0x7da <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     600:	89 38       	cpi	r24, 0x89	; 137
     602:	f2 e0       	ldi	r31, 0x02	; 2
     604:	9f 07       	cpc	r25, r31
     606:	0c f0       	brlt	.+2      	; 0x60a <kilo_start+0x88>
     608:	ef c0       	rjmp	.+478    	; 0x7e8 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     60a:	87 36       	cpi	r24, 0x67	; 103
     60c:	92 40       	sbci	r25, 0x02	; 2
     60e:	0c f4       	brge	.+2      	; 0x612 <kilo_start+0x90>
     610:	ca c0       	rjmp	.+404    	; 0x7a6 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     612:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     614:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     616:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     618:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     61a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     61c:	3c 98       	cbi	0x07, 4	; 7
     61e:	c0 cf       	rjmp	.-128    	; 0x5a0 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     620:	f8 94       	cli
                acomp_off();
     622:	80 b7       	in	r24, 0x30	; 48
     624:	87 7f       	andi	r24, 0xF7	; 247
     626:	80 bf       	out	0x30, r24	; 48
                adc_off();
     628:	80 91 7a 00 	lds	r24, 0x007A
     62c:	8f 77       	andi	r24, 0x7F	; 127
     62e:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     632:	14 b8       	out	0x04, r1	; 4
     634:	17 b8       	out	0x07, r1	; 7
     636:	1a b8       	out	0x0a, r1	; 10
     638:	15 b8       	out	0x05, r1	; 5
     63a:	18 b8       	out	0x08, r1	; 8
     63c:	1b b8       	out	0x0b, r1	; 11
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	a8 95       	wdr
     644:	d0 92 60 00 	sts	0x0060, r13
     648:	0f be       	out	0x3f, r0	; 63
     64a:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     64e:	80 91 60 00 	lds	r24, 0x0060
     652:	80 64       	ori	r24, 0x40	; 64
     654:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     658:	93 b7       	in	r25, 0x33	; 51
     65a:	91 7f       	andi	r25, 0xF1	; 241
     65c:	94 60       	ori	r25, 0x04	; 4
     65e:	93 bf       	out	0x33, r25	; 51
                cli();
     660:	f8 94       	cli
                sleep_enable();
     662:	83 b7       	in	r24, 0x33	; 51
     664:	81 60       	ori	r24, 0x01	; 1
     666:	83 bf       	out	0x33, r24	; 51
                sei();
     668:	78 94       	sei
                sleep_cpu();
     66a:	88 95       	sleep
                sleep_disable();
     66c:	83 b7       	in	r24, 0x33	; 51
     66e:	8e 7f       	andi	r24, 0xFE	; 254
     670:	83 bf       	out	0x33, r24	; 51
                sei();
     672:	78 94       	sei
                rx_busy = 0;
     674:	10 92 43 01 	sts	0x0143, r1
                ports_on();
     678:	52 9a       	sbi	0x0a, 2	; 10
     67a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     67c:	80 91 7a 00 	lds	r24, 0x007A
     680:	80 68       	ori	r24, 0x80	; 128
     682:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     686:	87 e5       	ldi	r24, 0x57	; 87
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <kilo_start+0x108>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <kilo_start+0x10e>
     690:	00 00       	nop
                _delay_us(300);
                acomp_on();
     692:	80 b7       	in	r24, 0x30	; 48
     694:	88 61       	ori	r24, 0x18	; 24
     696:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     698:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     69a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     69c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     69e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     6a0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     6a2:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a4:	ef e1       	ldi	r30, 0x1F	; 31
     6a6:	fe e4       	ldi	r31, 0x4E	; 78
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <kilo_start+0x126>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <kilo_start+0x12c>
     6ae:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     6b0:	80 91 43 01 	lds	r24, 0x0143
     6b4:	81 11       	cpse	r24, r1
     6b6:	81 c0       	rjmp	.+258    	; 0x7ba <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6b8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6c2:	3c 98       	cbi	0x07, 4	; 7
     6c4:	6d cf       	rjmp	.-294    	; 0x5a0 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     6c6:	80 91 15 01 	lds	r24, 0x0115
     6ca:	81 11       	cpse	r24, r1
     6cc:	41 c0       	rjmp	.+130    	; 0x750 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6ce:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6d2:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     6d6:	10 92 16 01 	sts	0x0116, r1
     6da:	62 cf       	rjmp	.-316    	; 0x5a0 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     6dc:	48 99       	sbic	0x09, 0	; 9
     6de:	ec cf       	rjmp	.-40     	; 0x6b8 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6e0:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6e2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6e4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6e6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6e8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6ea:	3c 98       	cbi	0x07, 4	; 7
     6ec:	8f ec       	ldi	r24, 0xCF	; 207
     6ee:	97 e0       	ldi	r25, 0x07	; 7
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <kilo_start+0x16e>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <kilo_start+0x174>
     6f6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6f8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6fa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6fc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6fe:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     700:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     702:	3c 98       	cbi	0x07, 4	; 7
     704:	9f ef       	ldi	r25, 0xFF	; 255
     706:	e1 ee       	ldi	r30, 0xE1	; 225
     708:	f4 e0       	ldi	r31, 0x04	; 4
     70a:	91 50       	subi	r25, 0x01	; 1
     70c:	e0 40       	sbci	r30, 0x00	; 0
     70e:	f0 40       	sbci	r31, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <kilo_start+0x188>
     712:	00 c0       	rjmp	.+0      	; 0x714 <kilo_start+0x192>
     714:	00 00       	nop
     716:	44 cf       	rjmp	.-376    	; 0x5a0 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     718:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     71a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     71c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     71e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     720:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     722:	3c 98       	cbi	0x07, 4	; 7
     724:	ef ec       	ldi	r30, 0xCF	; 207
     726:	f7 e0       	ldi	r31, 0x07	; 7
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <kilo_start+0x1a6>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <kilo_start+0x1ac>
     72e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     730:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     732:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     734:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     736:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     738:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     73a:	3c 98       	cbi	0x07, 4	; 7
     73c:	ff ef       	ldi	r31, 0xFF	; 255
     73e:	21 ee       	ldi	r18, 0xE1	; 225
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	f1 50       	subi	r31, 0x01	; 1
     744:	20 40       	sbci	r18, 0x00	; 0
     746:	80 40       	sbci	r24, 0x00	; 0
     748:	e1 f7       	brne	.-8      	; 0x742 <kilo_start+0x1c0>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <kilo_start+0x1ca>
     74c:	00 00       	nop
     74e:	28 cf       	rjmp	.-432    	; 0x5a0 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     750:	90 91 15 01 	lds	r25, 0x0115
     754:	80 91 16 01 	lds	r24, 0x0116
     758:	98 17       	cp	r25, r24
     75a:	09 f4       	brne	.+2      	; 0x75e <kilo_start+0x1dc>
     75c:	21 cf       	rjmp	.-446    	; 0x5a0 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     75e:	80 91 15 01 	lds	r24, 0x0115
     762:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     766:	80 91 15 01 	lds	r24, 0x0115
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	09 f4       	brne	.+2      	; 0x770 <kilo_start+0x1ee>
     76e:	50 c0       	rjmp	.+160    	; 0x810 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     770:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     774:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     778:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	d9 f1       	breq	.+118    	; 0x7f6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     780:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     784:	90 92 b4 00 	sts	0x00B4, r9
     788:	8f e2       	ldi	r24, 0x2F	; 47
     78a:	95 e7       	ldi	r25, 0x75	; 117
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <kilo_start+0x20a>
     790:	00 c0       	rjmp	.+0      	; 0x792 <kilo_start+0x210>
     792:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     794:	80 91 78 01 	lds	r24, 0x0178
     798:	90 91 77 01 	lds	r25, 0x0177
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     79c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     7a0:	80 93 b4 00 	sts	0x00B4, r24
     7a4:	fd ce       	rjmp	.-518    	; 0x5a0 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7a6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7a8:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7aa:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7ac:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7ae:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7b0:	3c 98       	cbi	0x07, 4	; 7
     7b2:	f6 ce       	rjmp	.-532    	; 0x5a0 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     7b4:	f3 01       	movw	r30, r6
     7b6:	09 95       	icall
     7b8:	01 cf       	rjmp	.-510    	; 0x5bc <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7ba:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7bc:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7be:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7c0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7c2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7c4:	3c 98       	cbi	0x07, 4	; 7
     7c6:	ff ef       	ldi	r31, 0xFF	; 255
     7c8:	20 e7       	ldi	r18, 0x70	; 112
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	f1 50       	subi	r31, 0x01	; 1
     7ce:	20 40       	sbci	r18, 0x00	; 0
     7d0:	80 40       	sbci	r24, 0x00	; 0
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <kilo_start+0x24a>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <kilo_start+0x254>
     7d6:	00 00       	nop
     7d8:	6f cf       	rjmp	.-290    	; 0x6b8 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7da:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7dc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7de:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7e0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7e2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7e4:	3c 98       	cbi	0x07, 4	; 7
     7e6:	dc ce       	rjmp	.-584    	; 0x5a0 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7e8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7ea:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7ec:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7ee:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     7f0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     7f2:	3c 9a       	sbi	0x07, 4	; 7
     7f4:	d5 ce       	rjmp	.-598    	; 0x5a0 <kilo_start+0x1e>
     7f6:	ef e2       	ldi	r30, 0x2F	; 47
     7f8:	f5 e7       	ldi	r31, 0x75	; 117
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <kilo_start+0x278>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <kilo_start+0x27e>
     800:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     802:	80 91 65 01 	lds	r24, 0x0165
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     806:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     80a:	80 93 b4 00 	sts	0x00B4, r24
     80e:	c8 ce       	rjmp	.-624    	; 0x5a0 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     810:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     814:	10 92 b4 00 	sts	0x00B4, r1
     818:	8f e2       	ldi	r24, 0x2F	; 47
     81a:	95 e7       	ldi	r25, 0x75	; 117
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <kilo_start+0x29a>
     820:	00 c0       	rjmp	.+0      	; 0x822 <kilo_start+0x2a0>
     822:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     824:	80 91 79 01 	lds	r24, 0x0179
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     828:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     82c:	10 92 b4 00 	sts	0x00B4, r1
     830:	b7 ce       	rjmp	.-658    	; 0x5a0 <kilo_start+0x1e>

00000832 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     832:	07 c0       	rjmp	.+14     	; 0x842 <delay+0x10>
     834:	ef ec       	ldi	r30, 0xCF	; 207
     836:	f7 e0       	ldi	r31, 0x07	; 7
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <delay+0x6>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <delay+0xc>
     83e:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     840:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	b9 f7       	brne	.-18     	; 0x834 <delay+0x2>
     846:	08 95       	ret

00000848 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     848:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     84c:	60 93 b4 00 	sts	0x00B4, r22
     850:	08 95       	ret

00000852 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     858:	80 93 b4 00 	sts	0x00B4, r24
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	ef ec       	ldi	r30, 0xCF	; 207
     862:	f7 e0       	ldi	r31, 0x07	; 7
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <spinup_motors+0x12>
     868:	00 c0       	rjmp	.+0      	; 0x86a <spinup_motors+0x18>
     86a:	00 00       	nop
     86c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     86e:	c1 f7       	brne	.-16     	; 0x860 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     870:	08 95       	ret

00000872 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     872:	80 91 43 01 	lds	r24, 0x0143
     876:	81 11       	cpse	r24, r1
     878:	1e c0       	rjmp	.+60     	; 0x8b6 <get_ambientlight+0x44>
        cli();
     87a:	f8 94       	cli
        adc_setup_conversion(7);
     87c:	87 e0       	ldi	r24, 0x07	; 7
     87e:	80 93 7c 00 	sts	0x007C, r24
     882:	83 e8       	ldi	r24, 0x83	; 131
     884:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     888:	80 91 7a 00 	lds	r24, 0x007A
     88c:	80 64       	ori	r24, 0x40	; 64
     88e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     892:	80 91 7a 00 	lds	r24, 0x007A
     896:	86 fd       	sbrc	r24, 6
     898:	fc cf       	rjmp	.-8      	; 0x892 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     89a:	80 91 78 00 	lds	r24, 0x0078
     89e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8a2:	10 92 7c 00 	sts	0x007C, r1
     8a6:	23 ea       	ldi	r18, 0xA3	; 163
     8a8:	20 93 7a 00 	sts	0x007A, r18
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8b2:	78 94       	sei
     8b4:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     8ba:	08 95       	ret

000008bc <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     8bc:	80 91 43 01 	lds	r24, 0x0143
     8c0:	81 11       	cpse	r24, r1
     8c2:	1e c0       	rjmp	.+60     	; 0x900 <__stack+0x1>
        cli();
     8c4:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     8c6:	88 ec       	ldi	r24, 0xC8	; 200
     8c8:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     8cc:	87 e8       	ldi	r24, 0x87	; 135
     8ce:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8d2:	80 91 7a 00 	lds	r24, 0x007A
     8d6:	80 64       	ori	r24, 0x40	; 64
     8d8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8dc:	80 91 7a 00 	lds	r24, 0x007A
     8e0:	86 fd       	sbrc	r24, 6
     8e2:	fc cf       	rjmp	.-8      	; 0x8dc <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     8e4:	80 91 78 00 	lds	r24, 0x0078
     8e8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8ec:	10 92 7c 00 	sts	0x007C, r1
     8f0:	23 ea       	ldi	r18, 0xA3	; 163
     8f2:	20 93 7a 00 	sts	0x007A, r18
     8f6:	21 e0       	ldi	r18, 0x01	; 1
     8f8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8fc:	78 94       	sei
     8fe:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     904:	08 95       	ret

00000906 <rand_hard>:

uint8_t rand_hard() {
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	e0 e0       	ldi	r30, 0x00	; 0
     910:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     912:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     914:	03 ea       	ldi	r16, 0xA3	; 163
     916:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     918:	d6 e0       	ldi	r29, 0x06	; 6
     91a:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     91c:	a1 e0       	ldi	r26, 0x01	; 1
     91e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     920:	60 e8       	ldi	r22, 0x80	; 128
     922:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     924:	f8 94       	cli
            adc_setup_conversion(6);
     926:	d0 93 7c 00 	sts	0x007C, r29
     92a:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     92e:	90 91 7a 00 	lds	r25, 0x007A
     932:	90 64       	ori	r25, 0x40	; 64
     934:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     938:	90 91 7a 00 	lds	r25, 0x007A
     93c:	96 fd       	sbrc	r25, 6
     93e:	fc cf       	rjmp	.-8      	; 0x938 <rand_hard+0x32>
            a = ADCW&0x1;
     940:	20 91 78 00 	lds	r18, 0x0078
     944:	30 91 79 00 	lds	r19, 0x0079
     948:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     94a:	90 91 7a 00 	lds	r25, 0x007A
     94e:	90 64       	ori	r25, 0x40	; 64
     950:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     954:	90 91 7a 00 	lds	r25, 0x007A
     958:	96 fd       	sbrc	r25, 6
     95a:	fc cf       	rjmp	.-8      	; 0x954 <rand_hard+0x4e>
            b = ADCW&0x1;
     95c:	40 91 78 00 	lds	r20, 0x0078
     960:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     964:	10 92 7c 00 	sts	0x007C, r1
     968:	00 93 7a 00 	sts	0x007A, r16
     96c:	10 93 7b 00 	sts	0x007B, r17
            sei();
     970:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     972:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     974:	24 13       	cpse	r18, r20
     976:	03 c0       	rjmp	.+6      	; 0x97e <rand_hard+0x78>
     978:	61 50       	subi	r22, 0x01	; 1
     97a:	71 09       	sbc	r23, r1
     97c:	99 f6       	brne	.-90     	; 0x924 <rand_hard+0x1e>
        if (a)
     97e:	22 23       	and	r18, r18
     980:	39 f0       	breq	.+14     	; 0x990 <rand_hard+0x8a>
            num |= (1<<i);
     982:	9d 01       	movw	r18, r26
     984:	0e 2e       	mov	r0, r30
     986:	01 c0       	rjmp	.+2      	; 0x98a <rand_hard+0x84>
     988:	22 0f       	add	r18, r18
     98a:	0a 94       	dec	r0
     98c:	ea f7       	brpl	.-6      	; 0x988 <rand_hard+0x82>
     98e:	82 2b       	or	r24, r18
     990:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     992:	e8 30       	cpi	r30, 0x08	; 8
     994:	f1 05       	cpc	r31, r1
     996:	09 f0       	breq	.+2      	; 0x99a <rand_hard+0x94>
     998:	c3 cf       	rjmp	.-122    	; 0x920 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	08 95       	ret

000009a4 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     9a4:	80 91 00 01 	lds	r24, 0x0100
     9a8:	98 2f       	mov	r25, r24
     9aa:	99 0f       	add	r25, r25
     9ac:	99 0f       	add	r25, r25
     9ae:	99 0f       	add	r25, r25
     9b0:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     9b2:	90 91 14 01 	lds	r25, 0x0114
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	29 0f       	add	r18, r25
     9ba:	20 93 14 01 	sts	0x0114, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     9be:	28 2f       	mov	r18, r24
     9c0:	22 95       	swap	r18
     9c2:	26 95       	lsr	r18
     9c4:	27 70       	andi	r18, 0x07	; 7
     9c6:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     9c8:	96 95       	lsr	r25
     9ca:	96 95       	lsr	r25
     9cc:	89 27       	eor	r24, r25
     9ce:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     9d2:	08 95       	ret

000009d4 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     9d4:	80 93 00 01 	sts	0x0100, r24
     9d8:	08 95       	ret

000009da <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     9da:	80 91 43 01 	lds	r24, 0x0143
     9de:	81 11       	cpse	r24, r1
     9e0:	16 c0       	rjmp	.+44     	; 0xa0e <get_voltage+0x34>
        cli();                                    // disable interrupts
     9e2:	f8 94       	cli
        adc_setup_conversion(6);
     9e4:	86 e0       	ldi	r24, 0x06	; 6
     9e6:	80 93 7c 00 	sts	0x007C, r24
     9ea:	83 e8       	ldi	r24, 0x83	; 131
     9ec:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9f0:	80 91 7a 00 	lds	r24, 0x007A
     9f4:	80 64       	ori	r24, 0x40	; 64
     9f6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9fa:	80 91 7a 00 	lds	r24, 0x007A
     9fe:	86 fd       	sbrc	r24, 6
     a00:	fc cf       	rjmp	.-8      	; 0x9fa <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a02:	80 91 78 00 	lds	r24, 0x0078
     a06:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a0a:	78 94       	sei
     a0c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a12:	08 95       	ret

00000a14 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a14:	2f 92       	push	r2
     a16:	3f 92       	push	r3
     a18:	4f 92       	push	r4
     a1a:	5f 92       	push	r5
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <estimate_distance+0x26>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <estimate_distance+0x28>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <estimate_distance+0x2a>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     a44:	dc 01       	movw	r26, r24
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	0d 90       	ld	r0, X+
     a4a:	bc 91       	ld	r27, X
     a4c:	a0 2d       	mov	r26, r0
     a4e:	be 83       	std	Y+6, r27	; 0x06
     a50:	ad 83       	std	Y+5, r26	; 0x05
     a52:	a4 38       	cpi	r26, 0x84	; 132
     a54:	e3 e0       	ldi	r30, 0x03	; 3
     a56:	be 07       	cpc	r27, r30
     a58:	0c f0       	brlt	.+2      	; 0xa5c <estimate_distance+0x48>
     a5a:	c9 c0       	rjmp	.+402    	; 0xbee <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a5c:	80 91 1d 01 	lds	r24, 0x011D
     a60:	90 91 1e 01 	lds	r25, 0x011E
     a64:	8a 17       	cp	r24, r26
     a66:	9b 07       	cpc	r25, r27
     a68:	08 f4       	brcc	.+2      	; 0xa6c <estimate_distance+0x58>
     a6a:	37 c1       	rjmp	.+622    	; 0xcda <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a6c:	00 91 1f 01 	lds	r16, 0x011F
     a70:	10 91 20 01 	lds	r17, 0x0120
     a74:	0a 17       	cp	r16, r26
     a76:	1b 07       	cpc	r17, r27
     a78:	08 f4       	brcc	.+2      	; 0xa7c <estimate_distance+0x68>
     a7a:	2f c2       	rjmp	.+1118   	; 0xeda <estimate_distance+0x4c6>
     a7c:	00 91 21 01 	lds	r16, 0x0121
     a80:	10 91 22 01 	lds	r17, 0x0122
     a84:	0a 17       	cp	r16, r26
     a86:	1b 07       	cpc	r17, r27
     a88:	08 f4       	brcc	.+2      	; 0xa8c <estimate_distance+0x78>
     a8a:	2f c2       	rjmp	.+1118   	; 0xeea <estimate_distance+0x4d6>
     a8c:	00 91 23 01 	lds	r16, 0x0123
     a90:	10 91 24 01 	lds	r17, 0x0124
     a94:	0a 17       	cp	r16, r26
     a96:	1b 07       	cpc	r17, r27
     a98:	08 f4       	brcc	.+2      	; 0xa9c <estimate_distance+0x88>
     a9a:	2f c2       	rjmp	.+1118   	; 0xefa <estimate_distance+0x4e6>
     a9c:	00 91 25 01 	lds	r16, 0x0125
     aa0:	10 91 26 01 	lds	r17, 0x0126
     aa4:	0a 17       	cp	r16, r26
     aa6:	1b 07       	cpc	r17, r27
     aa8:	08 f4       	brcc	.+2      	; 0xaac <estimate_distance+0x98>
     aaa:	2f c2       	rjmp	.+1118   	; 0xf0a <estimate_distance+0x4f6>
     aac:	00 91 27 01 	lds	r16, 0x0127
     ab0:	10 91 28 01 	lds	r17, 0x0128
     ab4:	0a 17       	cp	r16, r26
     ab6:	1b 07       	cpc	r17, r27
     ab8:	08 f4       	brcc	.+2      	; 0xabc <estimate_distance+0xa8>
     aba:	ef c1       	rjmp	.+990    	; 0xe9a <estimate_distance+0x486>
     abc:	00 91 29 01 	lds	r16, 0x0129
     ac0:	10 91 2a 01 	lds	r17, 0x012A
     ac4:	0a 17       	cp	r16, r26
     ac6:	1b 07       	cpc	r17, r27
     ac8:	08 f4       	brcc	.+2      	; 0xacc <estimate_distance+0xb8>
     aca:	27 c2       	rjmp	.+1102   	; 0xf1a <estimate_distance+0x506>
     acc:	00 91 2b 01 	lds	r16, 0x012B
     ad0:	10 91 2c 01 	lds	r17, 0x012C
     ad4:	0a 17       	cp	r16, r26
     ad6:	1b 07       	cpc	r17, r27
     ad8:	08 f4       	brcc	.+2      	; 0xadc <estimate_distance+0xc8>
     ada:	27 c2       	rjmp	.+1102   	; 0xf2a <estimate_distance+0x516>
     adc:	00 91 2d 01 	lds	r16, 0x012D
     ae0:	10 91 2e 01 	lds	r17, 0x012E
     ae4:	0a 17       	cp	r16, r26
     ae6:	1b 07       	cpc	r17, r27
     ae8:	08 f4       	brcc	.+2      	; 0xaec <estimate_distance+0xd8>
     aea:	27 c2       	rjmp	.+1102   	; 0xf3a <estimate_distance+0x526>
     aec:	00 91 2f 01 	lds	r16, 0x012F
     af0:	10 91 30 01 	lds	r17, 0x0130
     af4:	0a 17       	cp	r16, r26
     af6:	1b 07       	cpc	r17, r27
     af8:	08 f4       	brcc	.+2      	; 0xafc <estimate_distance+0xe8>
     afa:	27 c2       	rjmp	.+1102   	; 0xf4a <estimate_distance+0x536>
     afc:	00 91 31 01 	lds	r16, 0x0131
     b00:	10 91 32 01 	lds	r17, 0x0132
     b04:	0a 17       	cp	r16, r26
     b06:	1b 07       	cpc	r17, r27
     b08:	08 f4       	brcc	.+2      	; 0xb0c <estimate_distance+0xf8>
     b0a:	27 c2       	rjmp	.+1102   	; 0xf5a <estimate_distance+0x546>
     b0c:	00 91 33 01 	lds	r16, 0x0133
     b10:	10 91 34 01 	lds	r17, 0x0134
     b14:	0a 17       	cp	r16, r26
     b16:	1b 07       	cpc	r17, r27
     b18:	08 f4       	brcc	.+2      	; 0xb1c <estimate_distance+0x108>
     b1a:	23 c2       	rjmp	.+1094   	; 0xf62 <estimate_distance+0x54e>
     b1c:	00 91 35 01 	lds	r16, 0x0135
     b20:	10 91 36 01 	lds	r17, 0x0136
     b24:	0a 17       	cp	r16, r26
     b26:	1b 07       	cpc	r17, r27
     b28:	08 f4       	brcc	.+2      	; 0xb2c <estimate_distance+0x118>
     b2a:	23 c2       	rjmp	.+1094   	; 0xf72 <estimate_distance+0x55e>
     b2c:	00 91 37 01 	lds	r16, 0x0137
     b30:	10 91 38 01 	lds	r17, 0x0138
     b34:	0a 17       	cp	r16, r26
     b36:	1b 07       	cpc	r17, r27
     b38:	08 f4       	brcc	.+2      	; 0xb3c <estimate_distance+0x128>
     b3a:	23 c2       	rjmp	.+1094   	; 0xf82 <estimate_distance+0x56e>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 ed       	ldi	r26, 0xD0	; 208
     b42:	b0 e4       	ldi	r27, 0x40	; 64
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	ab 83       	std	Y+3, r26	; 0x03
     b4a:	bc 83       	std	Y+4, r27	; 0x04
     b4c:	4c e0       	ldi	r20, 0x0C	; 12
     b4e:	e4 2e       	mov	r14, r20
     b50:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     b52:	f7 01       	movw	r30, r14
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	e3 5e       	subi	r30, 0xE3	; 227
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	b8 01       	movw	r22, r16
     b62:	68 1b       	sub	r22, r24
     b64:	79 0b       	sbc	r23, r25
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__addsf3>
     b76:	6b 01       	movw	r12, r22
     b78:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b7a:	ad 81       	ldd	r26, Y+5	; 0x05
     b7c:	be 81       	ldd	r27, Y+6	; 0x06
     b7e:	bd 01       	movw	r22, r26
     b80:	bb 0f       	add	r27, r27
     b82:	88 0b       	sbc	r24, r24
     b84:	99 0b       	sbc	r25, r25
     b86:	0e 94 93 0c 	call	0x1926	; 0x1926 <__floatsisf>
     b8a:	4b 01       	movw	r8, r22
     b8c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b8e:	b8 01       	movw	r22, r16
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     b98:	2b 01       	movw	r4, r22
     b9a:	3c 01       	movw	r6, r24
     b9c:	29 81       	ldd	r18, Y+1	; 0x01
     b9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ba0:	4b 81       	ldd	r20, Y+3	; 0x03
     ba2:	5c 81       	ldd	r21, Y+4	; 0x04
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     bac:	9b 01       	movw	r18, r22
     bae:	ac 01       	movw	r20, r24
     bb0:	c3 01       	movw	r24, r6
     bb2:	b2 01       	movw	r22, r4
     bb4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__subsf3>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__subsf3>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e2       	ldi	r20, 0x20	; 32
     bca:	51 e4       	ldi	r21, 0x41	; 65
     bcc:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
            b=((int)((int)b/(int)slope));
     bd0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__fixsfsi>
     bd4:	8b 01       	movw	r16, r22
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__fixsfsi>
     bde:	ab 01       	movw	r20, r22
     be0:	bc 01       	movw	r22, r24
     be2:	c8 01       	movw	r24, r16
     be4:	ba 01       	movw	r22, r20
     be6:	0e 94 3f 0b 	call	0x167e	; 0x167e <__divmodhi4>
            dist_high=b;
     bea:	16 2f       	mov	r17, r22
     bec:	77 c0       	rjmp	.+238    	; 0xcdc <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bee:	dc 01       	movw	r26, r24
     bf0:	cd 90       	ld	r12, X+
     bf2:	dc 90       	ld	r13, X
     bf4:	80 91 44 01 	lds	r24, 0x0144
     bf8:	90 91 45 01 	lds	r25, 0x0145
     bfc:	8c 15       	cp	r24, r12
     bfe:	9d 05       	cpc	r25, r13
     c00:	08 f4       	brcc	.+2      	; 0xc04 <estimate_distance+0x1f0>
     c02:	8c c0       	rjmp	.+280    	; 0xd1c <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c04:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c06:	e0 90 46 01 	lds	r14, 0x0146
     c0a:	f0 90 47 01 	lds	r15, 0x0147
     c0e:	ec 14       	cp	r14, r12
     c10:	fd 04       	cpc	r15, r13
     c12:	08 f4       	brcc	.+2      	; 0xc16 <estimate_distance+0x202>
     c14:	5e c1       	rjmp	.+700    	; 0xed2 <estimate_distance+0x4be>
     c16:	e0 90 48 01 	lds	r14, 0x0148
     c1a:	f0 90 49 01 	lds	r15, 0x0149
     c1e:	ec 14       	cp	r14, r12
     c20:	fd 04       	cpc	r15, r13
     c22:	08 f4       	brcc	.+2      	; 0xc26 <estimate_distance+0x212>
     c24:	5e c1       	rjmp	.+700    	; 0xee2 <estimate_distance+0x4ce>
     c26:	e0 90 4a 01 	lds	r14, 0x014A
     c2a:	f0 90 4b 01 	lds	r15, 0x014B
     c2e:	ec 14       	cp	r14, r12
     c30:	fd 04       	cpc	r15, r13
     c32:	08 f4       	brcc	.+2      	; 0xc36 <estimate_distance+0x222>
     c34:	5e c1       	rjmp	.+700    	; 0xef2 <estimate_distance+0x4de>
     c36:	e0 90 4c 01 	lds	r14, 0x014C
     c3a:	f0 90 4d 01 	lds	r15, 0x014D
     c3e:	ec 14       	cp	r14, r12
     c40:	fd 04       	cpc	r15, r13
     c42:	08 f4       	brcc	.+2      	; 0xc46 <estimate_distance+0x232>
     c44:	5e c1       	rjmp	.+700    	; 0xf02 <estimate_distance+0x4ee>
     c46:	e0 90 4e 01 	lds	r14, 0x014E
     c4a:	f0 90 4f 01 	lds	r15, 0x014F
     c4e:	ec 14       	cp	r14, r12
     c50:	fd 04       	cpc	r15, r13
     c52:	08 f4       	brcc	.+2      	; 0xc56 <estimate_distance+0x242>
     c54:	c3 c0       	rjmp	.+390    	; 0xddc <estimate_distance+0x3c8>
     c56:	e0 90 50 01 	lds	r14, 0x0150
     c5a:	f0 90 51 01 	lds	r15, 0x0151
     c5e:	ec 14       	cp	r14, r12
     c60:	fd 04       	cpc	r15, r13
     c62:	08 f4       	brcc	.+2      	; 0xc66 <estimate_distance+0x252>
     c64:	56 c1       	rjmp	.+684    	; 0xf12 <estimate_distance+0x4fe>
     c66:	e0 90 52 01 	lds	r14, 0x0152
     c6a:	f0 90 53 01 	lds	r15, 0x0153
     c6e:	ec 14       	cp	r14, r12
     c70:	fd 04       	cpc	r15, r13
     c72:	08 f4       	brcc	.+2      	; 0xc76 <estimate_distance+0x262>
     c74:	56 c1       	rjmp	.+684    	; 0xf22 <estimate_distance+0x50e>
     c76:	e0 90 54 01 	lds	r14, 0x0154
     c7a:	f0 90 55 01 	lds	r15, 0x0155
     c7e:	ec 14       	cp	r14, r12
     c80:	fd 04       	cpc	r15, r13
     c82:	08 f4       	brcc	.+2      	; 0xc86 <estimate_distance+0x272>
     c84:	56 c1       	rjmp	.+684    	; 0xf32 <estimate_distance+0x51e>
     c86:	e0 90 56 01 	lds	r14, 0x0156
     c8a:	f0 90 57 01 	lds	r15, 0x0157
     c8e:	ec 14       	cp	r14, r12
     c90:	fd 04       	cpc	r15, r13
     c92:	08 f4       	brcc	.+2      	; 0xc96 <estimate_distance+0x282>
     c94:	56 c1       	rjmp	.+684    	; 0xf42 <estimate_distance+0x52e>
     c96:	e0 90 58 01 	lds	r14, 0x0158
     c9a:	f0 90 59 01 	lds	r15, 0x0159
     c9e:	ec 14       	cp	r14, r12
     ca0:	fd 04       	cpc	r15, r13
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <estimate_distance+0x292>
     ca4:	56 c1       	rjmp	.+684    	; 0xf52 <estimate_distance+0x53e>
     ca6:	e0 90 5a 01 	lds	r14, 0x015A
     caa:	f0 90 5b 01 	lds	r15, 0x015B
     cae:	ec 14       	cp	r14, r12
     cb0:	fd 04       	cpc	r15, r13
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <estimate_distance+0x2a2>
     cb4:	5a c1       	rjmp	.+692    	; 0xf6a <estimate_distance+0x556>
     cb6:	e0 90 5c 01 	lds	r14, 0x015C
     cba:	f0 90 5d 01 	lds	r15, 0x015D
     cbe:	ec 14       	cp	r14, r12
     cc0:	fd 04       	cpc	r15, r13
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <estimate_distance+0x2b2>
     cc4:	5a c1       	rjmp	.+692    	; 0xf7a <estimate_distance+0x566>
     cc6:	e0 90 5e 01 	lds	r14, 0x015E
     cca:	f0 90 5f 01 	lds	r15, 0x015F
     cce:	ec 14       	cp	r14, r12
     cd0:	fd 04       	cpc	r15, r13
     cd2:	08 f4       	brcc	.+2      	; 0xcd6 <estimate_distance+0x2c2>
     cd4:	5a c1       	rjmp	.+692    	; 0xf8a <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     cd6:	0a e5       	ldi	r16, 0x5A	; 90
     cd8:	31 c0       	rjmp	.+98     	; 0xd3c <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     cda:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     cdc:	ed 81       	ldd	r30, Y+5	; 0x05
     cde:	fe 81       	ldd	r31, Y+6	; 0x06
     ce0:	ed 3b       	cpi	r30, 0xBD	; 189
     ce2:	f2 40       	sbci	r31, 0x02	; 2
     ce4:	fc f4       	brge	.+62     	; 0xd24 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     ce6:	81 e2       	ldi	r24, 0x21	; 33
     ce8:	81 0f       	add	r24, r17
    }
}
     cea:	26 96       	adiw	r28, 0x06	; 6
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	7f 90       	pop	r7
     d10:	6f 90       	pop	r6
     d12:	5f 90       	pop	r5
     d14:	4f 90       	pop	r4
     d16:	3f 90       	pop	r3
     d18:	2f 90       	pop	r2
     d1a:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d1c:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d1e:	81 e2       	ldi	r24, 0x21	; 33
     d20:	80 0f       	add	r24, r16
     d22:	e3 cf       	rjmp	.-58     	; 0xcea <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d24:	d1 01       	movw	r26, r2
     d26:	cd 90       	ld	r12, X+
     d28:	dc 90       	ld	r13, X
     d2a:	80 91 44 01 	lds	r24, 0x0144
     d2e:	90 91 45 01 	lds	r25, 0x0145
     d32:	8c 15       	cp	r24, r12
     d34:	9d 05       	cpc	r25, r13
     d36:	08 f0       	brcs	.+2      	; 0xd3a <estimate_distance+0x326>
     d38:	66 cf       	rjmp	.-308    	; 0xc06 <estimate_distance+0x1f2>
            dist_low=0;
     d3a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d3c:	1f 3f       	cpi	r17, 0xFF	; 255
     d3e:	79 f3       	breq	.-34     	; 0xd1e <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d40:	ed 81       	ldd	r30, Y+5	; 0x05
     d42:	fe 81       	ldd	r31, Y+6	; 0x06
     d44:	bf 01       	movw	r22, r30
     d46:	ff 0f       	add	r31, r31
     d48:	88 0b       	sbc	r24, r24
     d4a:	99 0b       	sbc	r25, r25
     d4c:	0e 94 93 0c 	call	0x1926	; 0x1926 <__floatsisf>
     d50:	6b 01       	movw	r12, r22
     d52:	7c 01       	movw	r14, r24
     d54:	61 2f       	mov	r22, r17
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     d60:	4b 01       	movw	r8, r22
     d62:	5c 01       	movw	r10, r24
     d64:	a7 01       	movw	r20, r14
     d66:	96 01       	movw	r18, r12
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	81 e6       	ldi	r24, 0x61	; 97
     d6e:	94 e4       	ldi	r25, 0x44	; 68
     d70:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__subsf3>
     d74:	9b 01       	movw	r18, r22
     d76:	ac 01       	movw	r20, r24
     d78:	c5 01       	movw	r24, r10
     d7a:	b4 01       	movw	r22, r8
     d7c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     d80:	4b 01       	movw	r8, r22
     d82:	5c 01       	movw	r10, r24
     d84:	60 2f       	mov	r22, r16
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     d90:	2b 01       	movw	r4, r22
     d92:	3c 01       	movw	r6, r24
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4f e2       	ldi	r20, 0x2F	; 47
     d9a:	54 e4       	ldi	r21, 0x44	; 68
     d9c:	c7 01       	movw	r24, r14
     d9e:	b6 01       	movw	r22, r12
     da0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__subsf3>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	c3 01       	movw	r24, r6
     daa:	b2 01       	movw	r22, r4
     dac:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     db0:	9b 01       	movw	r18, r22
     db2:	ac 01       	movw	r20, r24
     db4:	c5 01       	movw	r24, r10
     db6:	b4 01       	movw	r22, r8
     db8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__addsf3>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	48 e4       	ldi	r20, 0x48	; 72
     dc2:	53 e4       	ldi	r21, 0x43	; 67
     dc4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__divsf3>
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	44 e0       	ldi	r20, 0x04	; 4
     dce:	52 e4       	ldi	r21, 0x42	; 66
     dd0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__addsf3>
     dd4:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixunssfsi>
     dd8:	86 2f       	mov	r24, r22
     dda:	87 cf       	rjmp	.-242    	; 0xcea <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ddc:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	fc 01       	movw	r30, r24
     de8:	ee 5b       	subi	r30, 0xBE	; 190
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	b7 01       	movw	r22, r14
     df2:	68 1b       	sub	r22, r24
     df4:	79 0b       	sbc	r23, r25
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     dfe:	9b 01       	movw	r18, r22
     e00:	ac 01       	movw	r20, r24
     e02:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__addsf3>
     e06:	4b 01       	movw	r8, r22
     e08:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e0a:	b6 01       	movw	r22, r12
     e0c:	dd 0c       	add	r13, r13
     e0e:	88 0b       	sbc	r24, r24
     e10:	99 0b       	sbc	r25, r25
     e12:	0e 94 93 0c 	call	0x1926	; 0x1926 <__floatsisf>
     e16:	2b 01       	movw	r4, r22
     e18:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e1a:	b7 01       	movw	r22, r14
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     e24:	6b 01       	movw	r12, r22
     e26:	7c 01       	movw	r14, r24
     e28:	60 2f       	mov	r22, r16
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__addsf3>
     e4a:	a5 01       	movw	r20, r10
     e4c:	94 01       	movw	r18, r8
     e4e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	c7 01       	movw	r24, r14
     e58:	b6 01       	movw	r22, r12
     e5a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__subsf3>
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e62:	c3 01       	movw	r24, r6
     e64:	b2 01       	movw	r22, r4
     e66:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__subsf3>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e2       	ldi	r20, 0x20	; 32
     e70:	51 e4       	ldi	r21, 0x41	; 65
     e72:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
                b=((int)((int)b/(int)slope));
     e76:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__fixsfsi>
     e7a:	7b 01       	movw	r14, r22
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__fixsfsi>
     e84:	ab 01       	movw	r20, r22
     e86:	bc 01       	movw	r22, r24
     e88:	c7 01       	movw	r24, r14
     e8a:	ba 01       	movw	r22, r20
     e8c:	0e 94 3f 0b 	call	0x167e	; 0x167e <__divmodhi4>
                dist_low=b;
     e90:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e92:	6f 3f       	cpi	r22, 0xFF	; 255
     e94:	09 f0       	breq	.+2      	; 0xe98 <estimate_distance+0x484>
     e96:	52 cf       	rjmp	.-348    	; 0xd3c <estimate_distance+0x328>
     e98:	26 cf       	rjmp	.-436    	; 0xce6 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e9a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     e9c:	85 e0       	ldi	r24, 0x05	; 5
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	7c 01       	movw	r14, r24
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	ef 1a       	sub	r14, r31
     ea6:	f1 08       	sbc	r15, r1
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	5f e3       	ldi	r21, 0x3F	; 63
     eba:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	a9 01       	movw	r20, r18
     ec4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__addsf3>
     ec8:	69 83       	std	Y+1, r22	; 0x01
     eca:	7a 83       	std	Y+2, r23	; 0x02
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     ed0:	40 ce       	rjmp	.-896    	; 0xb52 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ed2:	01 e0       	ldi	r16, 0x01	; 1
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	84 cf       	rjmp	.-248    	; 0xde2 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	df cf       	rjmp	.-66     	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ee2:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	7c cf       	rjmp	.-264    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eea:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	d7 cf       	rjmp	.-82     	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef2:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	74 cf       	rjmp	.-280    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     efa:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	cf cf       	rjmp	.-98     	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f02:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	6c cf       	rjmp	.-296    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f0a:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	c7 cf       	rjmp	.-114    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f12:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f14:	86 e0       	ldi	r24, 0x06	; 6
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	64 cf       	rjmp	.-312    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f1a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f1c:	86 e0       	ldi	r24, 0x06	; 6
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	bf cf       	rjmp	.-130    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f22:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     f24:	87 e0       	ldi	r24, 0x07	; 7
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	5c cf       	rjmp	.-328    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f2a:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f2c:	87 e0       	ldi	r24, 0x07	; 7
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	b7 cf       	rjmp	.-146    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f32:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f34:	88 e0       	ldi	r24, 0x08	; 8
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	54 cf       	rjmp	.-344    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f3a:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f3c:	88 e0       	ldi	r24, 0x08	; 8
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	af cf       	rjmp	.-162    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f42:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     f44:	89 e0       	ldi	r24, 0x09	; 9
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	4c cf       	rjmp	.-360    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f4a:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     f4c:	89 e0       	ldi	r24, 0x09	; 9
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a7 cf       	rjmp	.-178    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f52:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	44 cf       	rjmp	.-376    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f5a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f5c:	8a e0       	ldi	r24, 0x0A	; 10
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9f cf       	rjmp	.-194    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f62:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f64:	8b e0       	ldi	r24, 0x0B	; 11
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9b cf       	rjmp	.-202    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f6a:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     f6c:	8b e0       	ldi	r24, 0x0B	; 11
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	38 cf       	rjmp	.-400    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f72:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     f74:	8c e0       	ldi	r24, 0x0C	; 12
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	93 cf       	rjmp	.-218    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f7a:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     f7c:	8c e0       	ldi	r24, 0x0C	; 12
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	30 cf       	rjmp	.-416    	; 0xde2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f82:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f84:	8d e0       	ldi	r24, 0x0D	; 13
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	8b cf       	rjmp	.-234    	; 0xea0 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f8a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f8c:	8d e0       	ldi	r24, 0x0D	; 13
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	28 cf       	rjmp	.-432    	; 0xde2 <estimate_distance+0x3ce>

00000f92 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
    tx_clock += tx_increment;
     fb4:	20 91 63 01 	lds	r18, 0x0163
     fb8:	30 91 64 01 	lds	r19, 0x0164
     fbc:	80 91 61 01 	lds	r24, 0x0161
     fc0:	90 91 62 01 	lds	r25, 0x0162
     fc4:	82 0f       	add	r24, r18
     fc6:	93 1f       	adc	r25, r19
     fc8:	90 93 64 01 	sts	0x0164, r25
     fcc:	80 93 63 01 	sts	0x0163, r24
    tx_increment = 0xFF;
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 62 01 	sts	0x0162, r25
     fd8:	80 93 61 01 	sts	0x0161, r24
    OCR0A = tx_increment;
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     fe0:	80 91 3f 01 	lds	r24, 0x013F
     fe4:	90 91 40 01 	lds	r25, 0x0140
     fe8:	a0 91 41 01 	lds	r26, 0x0141
     fec:	b0 91 42 01 	lds	r27, 0x0142
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	a1 1d       	adc	r26, r1
     ff4:	b1 1d       	adc	r27, r1
     ff6:	80 93 3f 01 	sts	0x013F, r24
     ffa:	90 93 40 01 	sts	0x0140, r25
     ffe:	a0 93 41 01 	sts	0x0141, r26
    1002:	b0 93 42 01 	sts	0x0142, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1006:	80 91 43 01 	lds	r24, 0x0143
    100a:	81 11       	cpse	r24, r1
    100c:	0f c0       	rjmp	.+30     	; 0x102c <__vector_14+0x9a>
    100e:	80 91 72 01 	lds	r24, 0x0172
    1012:	90 91 73 01 	lds	r25, 0x0173
    1016:	20 91 63 01 	lds	r18, 0x0163
    101a:	30 91 64 01 	lds	r19, 0x0164
    101e:	82 17       	cp	r24, r18
    1020:	93 07       	cpc	r25, r19
    1022:	20 f4       	brcc	.+8      	; 0x102c <__vector_14+0x9a>
    1024:	80 91 17 01 	lds	r24, 0x0117
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	89 f0       	breq	.+34     	; 0x104e <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    104e:	e0 91 03 01 	lds	r30, 0x0103
    1052:	f0 91 04 01 	lds	r31, 0x0104
    1056:	09 95       	icall
        if (msg) {
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	41 f3       	breq	.-48     	; 0x102c <__vector_14+0x9a>
            if (message_send(msg)) {
    105c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <message_send>
    1060:	81 11       	cpse	r24, r1
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1064:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <rand>
    1068:	99 27       	eor	r25, r25
    106a:	90 93 62 01 	sts	0x0162, r25
    106e:	80 93 61 01 	sts	0x0161, r24
                OCR0A = tx_increment;
    1072:	87 bd       	out	0x27, r24	; 39
    1074:	db cf       	rjmp	.-74     	; 0x102c <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1076:	e0 91 01 01 	lds	r30, 0x0101
    107a:	f0 91 02 01 	lds	r31, 0x0102
    107e:	09 95       	icall
                tx_clock = 0;
    1080:	10 92 64 01 	sts	0x0164, r1
    1084:	10 92 63 01 	sts	0x0163, r1
    1088:	d1 cf       	rjmp	.-94     	; 0x102c <__vector_14+0x9a>

0000108a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    108a:	80 ff       	sbrs	r24, 0
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <set_color+0x26>
        DDRD |= (1<<5);
    108e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1090:	81 ff       	sbrs	r24, 1
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <set_color+0x2c>
        DDRD |= (1<<4);
    1094:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1096:	82 ff       	sbrs	r24, 2
    1098:	11 c0       	rjmp	.+34     	; 0x10bc <set_color+0x32>
        DDRC |= (1<<3);
    109a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    109c:	83 ff       	sbrs	r24, 3
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <set_color+0x38>
        DDRC |= (1<<2);
    10a0:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    10a2:	84 ff       	sbrs	r24, 4
    10a4:	11 c0       	rjmp	.+34     	; 0x10c8 <set_color+0x3e>
        DDRC |= (1<<5);
    10a6:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    10a8:	85 fd       	sbrc	r24, 5
    10aa:	11 c0       	rjmp	.+34     	; 0x10ce <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    10ac:	3c 98       	cbi	0x07, 4	; 7
    10ae:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    10b0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    10b2:	81 fd       	sbrc	r24, 1
    10b4:	ef cf       	rjmp	.-34     	; 0x1094 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    10b6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    10b8:	82 fd       	sbrc	r24, 2
    10ba:	ef cf       	rjmp	.-34     	; 0x109a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    10bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    10be:	83 fd       	sbrc	r24, 3
    10c0:	ef cf       	rjmp	.-34     	; 0x10a0 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    10c2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    10c4:	84 fd       	sbrc	r24, 4
    10c6:	ef cf       	rjmp	.-34     	; 0x10a6 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    10c8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    10ca:	85 ff       	sbrs	r24, 5
    10cc:	ef cf       	rjmp	.-34     	; 0x10ac <set_color+0x22>
        DDRC |= (1<<4);
    10ce:	3c 9a       	sbi	0x07, 4	; 7
    10d0:	08 95       	ret

000010d2 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    rx_timer_off();
    10e0:	10 92 81 00 	sts	0x0081, r1
    10e4:	10 92 85 00 	sts	0x0085, r1
    10e8:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 1c 01 	sts	0x011C, r24
    rx_leadingbyte = 1;
    10f2:	80 93 60 01 	sts	0x0160, r24
    rx_busy = 0;
    10f6:	10 92 43 01 	sts	0x0143, r1
    adc_trigger_high_gain();
    10fa:	10 92 7c 00 	sts	0x007C, r1
    10fe:	93 ea       	ldi	r25, 0xA3	; 163
    1100:	90 93 7a 00 	sts	0x007A, r25
    1104:	80 93 7b 00 	sts	0x007B, r24
}
    1108:	9f 91       	pop	r25
    110a:	8f 91       	pop	r24
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    113c:	20 91 84 00 	lds	r18, 0x0084
    1140:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	40 93 43 01 	sts	0x0143, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    114a:	80 91 1c 01 	lds	r24, 0x011C
    114e:	88 23       	and	r24, r24
    1150:	a9 f1       	breq	.+106    	; 0x11bc <__vector_23+0xa6>
        rx_timer_on();
    1152:	10 92 85 00 	sts	0x0085, r1
    1156:	10 92 84 00 	sts	0x0084, r1
    115a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    115e:	10 92 74 01 	sts	0x0174, r1
        rx_leadingbit = 0;
    1162:	10 92 1c 01 	sts	0x011C, r1
        if (rx_leadingbyte) {
    1166:	80 91 60 01 	lds	r24, 0x0160
    116a:	88 23       	and	r24, r24
    116c:	a1 f0       	breq	.+40     	; 0x1196 <__vector_23+0x80>
            adc_finish_conversion();
    116e:	80 91 7a 00 	lds	r24, 0x007A
    1172:	86 fd       	sbrc	r24, 6
    1174:	fc cf       	rjmp	.-8      	; 0x116e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1176:	80 91 78 00 	lds	r24, 0x0078
    117a:	90 91 79 00 	lds	r25, 0x0079
    117e:	90 93 3e 01 	sts	0x013E, r25
    1182:	80 93 3d 01 	sts	0x013D, r24
            adc_trigger_low_gain();
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 7c 00 	sts	0x007C, r24
    118c:	93 ea       	ldi	r25, 0xA3	; 163
    118e:	90 93 7a 00 	sts	0x007A, r25
    1192:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1196:	ff 91       	pop	r31
    1198:	ef 91       	pop	r30
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    11bc:	c9 01       	movw	r24, r18
    11be:	87 58       	subi	r24, 0x87	; 135
    11c0:	91 09       	sbc	r25, r1
    11c2:	84 37       	cpi	r24, 0x74	; 116
    11c4:	99 40       	sbci	r25, 0x09	; 9
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <__vector_23+0xb4>
    11c8:	52 c0       	rjmp	.+164    	; 0x126e <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    11ca:	26 58       	subi	r18, 0x86	; 134
    11cc:	31 09       	sbc	r19, r1
    11ce:	a4 ef       	ldi	r26, 0xF4	; 244
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__umulhisi3>
    11d6:	aa 27       	eor	r26, r26
    11d8:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    11da:	88 30       	cpi	r24, 0x08	; 8
    11dc:	91 05       	cpc	r25, r1
    11de:	a1 05       	cpc	r26, r1
    11e0:	b1 05       	cpc	r27, r1
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <__vector_23+0xd0>
    11e4:	7b c0       	rjmp	.+246    	; 0x12dc <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    11e6:	40 93 1c 01 	sts	0x011C, r20
                if (rx_leadingbyte) {
    11ea:	80 91 60 01 	lds	r24, 0x0160
    11ee:	81 11       	cpse	r24, r1
    11f0:	52 c0       	rjmp	.+164    	; 0x1296 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    11f2:	80 91 3a 01 	lds	r24, 0x013A
    11f6:	e8 2f       	mov	r30, r24
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	ea 59       	subi	r30, 0x9A	; 154
    11fc:	fe 4f       	sbci	r31, 0xFE	; 254
    11fe:	90 91 74 01 	lds	r25, 0x0174
    1202:	90 83       	st	Z, r25
                    rx_byteindex++;
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	80 93 3a 01 	sts	0x013A, r24
                    if (rx_byteindex == sizeof(message_t)) {
    120a:	8c 30       	cpi	r24, 0x0C	; 12
    120c:	21 f6       	brne	.-120    	; 0x1196 <__vector_23+0x80>
                        rx_timer_off();
    120e:	10 92 81 00 	sts	0x0081, r1
    1212:	10 92 85 00 	sts	0x0085, r1
    1216:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    121a:	40 93 60 01 	sts	0x0160, r20
                        rx_busy = 0;
    121e:	10 92 43 01 	sts	0x0143, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1222:	c0 91 70 01 	lds	r28, 0x0170
    1226:	d0 91 71 01 	lds	r29, 0x0171
    122a:	86 e6       	ldi	r24, 0x66	; 102
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 95 0a 	call	0x152a	; 0x152a <message_crc>
    1232:	c8 17       	cp	r28, r24
    1234:	d9 07       	cpc	r29, r25
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_23+0x124>
    1238:	ae cf       	rjmp	.-164    	; 0x1196 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    123a:	80 91 6f 01 	lds	r24, 0x016F
    123e:	87 ff       	sbrs	r24, 7
    1240:	61 c0       	rjmp	.+194    	; 0x1304 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1242:	98 e7       	ldi	r25, 0x78	; 120
    1244:	98 0f       	add	r25, r24
    1246:	93 30       	cpi	r25, 0x03	; 3
    1248:	30 f0       	brcs	.+12     	; 0x1256 <__vector_23+0x140>
        motors_off();
    124a:	53 98       	cbi	0x0a, 3	; 10
    124c:	23 98       	cbi	0x04, 3	; 4
    124e:	10 92 b4 00 	sts	0x00B4, r1
    1252:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	fc 01       	movw	r30, r24
    125a:	e0 58       	subi	r30, 0x80	; 128
    125c:	f1 09       	sbc	r31, r1
    125e:	eb 30       	cpi	r30, 0x0B	; 11
    1260:	f1 05       	cpc	r31, r1
    1262:	08 f0       	brcs	.+2      	; 0x1266 <__vector_23+0x150>
    1264:	98 cf       	rjmp	.-208    	; 0x1196 <__vector_23+0x80>
    1266:	e5 5c       	subi	r30, 0xC5	; 197
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    126e:	10 92 81 00 	sts	0x0081, r1
    1272:	10 92 85 00 	sts	0x0085, r1
    1276:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    127a:	40 93 1c 01 	sts	0x011C, r20
            rx_leadingbyte = 1;
    127e:	40 93 60 01 	sts	0x0160, r20
            rx_busy = 0;
    1282:	10 92 43 01 	sts	0x0143, r1
            adc_trigger_high_gain();
    1286:	10 92 7c 00 	sts	0x007C, r1
    128a:	83 ea       	ldi	r24, 0xA3	; 163
    128c:	80 93 7a 00 	sts	0x007A, r24
    1290:	40 93 7b 00 	sts	0x007B, r20
    1294:	80 cf       	rjmp	.-256    	; 0x1196 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1296:	80 91 7a 00 	lds	r24, 0x007A
    129a:	86 fd       	sbrc	r24, 6
    129c:	fc cf       	rjmp	.-8      	; 0x1296 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    129e:	80 91 78 00 	lds	r24, 0x0078
    12a2:	90 91 79 00 	lds	r25, 0x0079
    12a6:	90 93 3c 01 	sts	0x013C, r25
    12aa:	80 93 3b 01 	sts	0x013B, r24
                    adc_trigger_high_gain();
    12ae:	10 92 7c 00 	sts	0x007C, r1
    12b2:	83 ea       	ldi	r24, 0xA3	; 163
    12b4:	80 93 7a 00 	sts	0x007A, r24
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    12be:	90 91 74 01 	lds	r25, 0x0174
    12c2:	99 23       	and	r25, r25
    12c4:	d1 f0       	breq	.+52     	; 0x12fa <__vector_23+0x1e4>
                        rx_timer_off();
    12c6:	10 92 81 00 	sts	0x0081, r1
    12ca:	10 92 85 00 	sts	0x0085, r1
    12ce:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12d2:	80 93 60 01 	sts	0x0160, r24
                        rx_busy = 0;
    12d6:	10 92 43 01 	sts	0x0143, r1
    12da:	5d cf       	rjmp	.-326    	; 0x1196 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	f9 01       	movw	r30, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <__vector_23+0x1d2>
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <__vector_23+0x1ce>
    12ec:	cf 01       	movw	r24, r30
    12ee:	90 91 74 01 	lds	r25, 0x0174
    12f2:	89 2b       	or	r24, r25
    12f4:	80 93 74 01 	sts	0x0174, r24
    12f8:	4e cf       	rjmp	.-356    	; 0x1196 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    12fa:	10 92 60 01 	sts	0x0160, r1
                        rx_byteindex = 0;
    12fe:	10 92 3a 01 	sts	0x013A, r1
    1302:	49 cf       	rjmp	.-366    	; 0x1196 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1304:	e0 91 05 01 	lds	r30, 0x0105
    1308:	f0 91 06 01 	lds	r31, 0x0106
    130c:	6b e3       	ldi	r22, 0x3B	; 59
    130e:	71 e0       	ldi	r23, 0x01	; 1
    1310:	86 e6       	ldi	r24, 0x66	; 102
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	09 95       	icall
    1316:	3f cf       	rjmp	.-386    	; 0x1196 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1318:	80 91 66 01 	lds	r24, 0x0166
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	09 f4       	brne	.+2      	; 0x1322 <__vector_23+0x20c>
    1320:	dd c0       	rjmp	.+442    	; 0x14dc <__vector_23+0x3c6>
    1322:	08 f4       	brcc	.+2      	; 0x1326 <__vector_23+0x210>
    1324:	ba c0       	rjmp	.+372    	; 0x149a <__vector_23+0x384>
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	09 f4       	brne	.+2      	; 0x132c <__vector_23+0x216>
    132a:	c6 c0       	rjmp	.+396    	; 0x14b8 <__vector_23+0x3a2>
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	09 f0       	breq	.+2      	; 0x1332 <__vector_23+0x21c>
    1330:	b1 c0       	rjmp	.+354    	; 0x1494 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1332:	80 91 15 01 	lds	r24, 0x0115
    1336:	90 91 6c 01 	lds	r25, 0x016C
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	09 f4       	brne	.+2      	; 0x1340 <__vector_23+0x22a>
    133e:	e3 c0       	rjmp	.+454    	; 0x1506 <__vector_23+0x3f0>
    1340:	80 91 6b 01 	lds	r24, 0x016B
                        prev_motion = MOVE_STOP;
    1344:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    1348:	23 e0       	ldi	r18, 0x03	; 3
    134a:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    134e:	80 93 77 01 	sts	0x0177, r24
                        kilo_straight_right = calibmsg->straight_right;
    1352:	90 93 78 01 	sts	0x0178, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1356:	80 91 17 01 	lds	r24, 0x0117
    135a:	86 30       	cpi	r24, 0x06	; 6
    135c:	09 f4       	brne	.+2      	; 0x1360 <__vector_23+0x24a>
    135e:	1b cf       	rjmp	.-458    	; 0x1196 <__vector_23+0x80>
                motors_on();
    1360:	53 9a       	sbi	0x0a, 3	; 10
    1362:	23 9a       	sbi	0x04, 3	; 4
    1364:	10 92 b4 00 	sts	0x00B4, r1
    1368:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	80 93 17 01 	sts	0x0117, r24
    1372:	11 cf       	rjmp	.-478    	; 0x1196 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1374:	80 91 17 01 	lds	r24, 0x0117
    1378:	86 30       	cpi	r24, 0x06	; 6
    137a:	99 f0       	breq	.+38     	; 0x13a2 <__vector_23+0x28c>
                motors_on();
    137c:	53 9a       	sbi	0x0a, 3	; 10
    137e:	23 9a       	sbi	0x04, 3	; 4
    1380:	10 92 b4 00 	sts	0x00B4, r1
    1384:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1388:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    138a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    138c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    138e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1390:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1392:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1394:	10 92 15 01 	sts	0x0115, r1
    1398:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    139c:	86 e0       	ldi	r24, 0x06	; 6
    139e:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9c 01       	movw	r18, r24
    13a8:	00 90 66 01 	lds	r0, 0x0166
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <__vector_23+0x29c>
    13ae:	22 0f       	add	r18, r18
    13b0:	33 1f       	adc	r19, r19
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <__vector_23+0x298>
    13b6:	80 91 75 01 	lds	r24, 0x0175
    13ba:	90 91 76 01 	lds	r25, 0x0176
    13be:	82 23       	and	r24, r18
    13c0:	93 23       	and	r25, r19
    13c2:	89 2b       	or	r24, r25
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <__vector_23+0x2b2>
    13c6:	86 c0       	rjmp	.+268    	; 0x14d4 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    13c8:	10 92 15 01 	sts	0x0115, r1
    13cc:	e4 ce       	rjmp	.-568    	; 0x1196 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 93 17 01 	sts	0x0117, r24
    13d4:	e0 ce       	rjmp	.-576    	; 0x1196 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    13d6:	e0 e0       	ldi	r30, 0x00	; 0
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    13dc:	80 91 6e 00 	lds	r24, 0x006E
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	80 93 6e 00 	sts	0x006E, r24
    13e6:	16 bc       	out	0x26, r1	; 38
            bootload();
    13e8:	e0 e0       	ldi	r30, 0x00	; 0
    13ea:	f0 e7       	ldi	r31, 0x70	; 112
    13ec:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    13ee:	10 92 17 01 	sts	0x0117, r1
    13f2:	d1 ce       	rjmp	.-606    	; 0x1196 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	80 93 17 01 	sts	0x0117, r24
    13fa:	cd ce       	rjmp	.-614    	; 0x1196 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    13fc:	85 e0       	ldi	r24, 0x05	; 5
    13fe:	80 93 17 01 	sts	0x0117, r24
    1402:	c9 ce       	rjmp	.-622    	; 0x1196 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1404:	80 91 17 01 	lds	r24, 0x0117
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	09 f4       	brne	.+2      	; 0x140e <__vector_23+0x2f8>
    140c:	c4 ce       	rjmp	.-632    	; 0x1196 <__vector_23+0x80>
    140e:	80 91 17 01 	lds	r24, 0x0117
    1412:	84 30       	cpi	r24, 0x04	; 4
    1414:	09 f4       	brne	.+2      	; 0x1418 <__vector_23+0x302>
    1416:	bf ce       	rjmp	.-642    	; 0x1196 <__vector_23+0x80>
                motors_on();
    1418:	53 9a       	sbi	0x0a, 3	; 10
    141a:	23 9a       	sbi	0x04, 3	; 4
    141c:	10 92 b4 00 	sts	0x00B4, r1
    1420:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	80 93 17 01 	sts	0x0117, r24
    142a:	b5 ce       	rjmp	.-662    	; 0x1196 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    142c:	80 91 17 01 	lds	r24, 0x0117
    1430:	86 30       	cpi	r24, 0x06	; 6
    1432:	09 f0       	breq	.+2      	; 0x1436 <__vector_23+0x320>
    1434:	b0 ce       	rjmp	.-672    	; 0x1196 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1436:	60 91 75 01 	lds	r22, 0x0175
    143a:	80 eb       	ldi	r24, 0xB0	; 176
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1442:	60 91 76 01 	lds	r22, 0x0176
    1446:	81 eb       	ldi	r24, 0xB1	; 177
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    144e:	60 91 79 01 	lds	r22, 0x0179
    1452:	85 e0       	ldi	r24, 0x05	; 5
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    145a:	60 91 65 01 	lds	r22, 0x0165
    145e:	89 e0       	ldi	r24, 0x09	; 9
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1466:	60 91 77 01 	lds	r22, 0x0177
    146a:	8c e0       	ldi	r24, 0x0C	; 12
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1472:	60 91 78 01 	lds	r22, 0x0178
    1476:	84 e1       	ldi	r24, 0x14	; 20
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <eeprom_write_byte>
                        motors_off();
    147e:	53 98       	cbi	0x0a, 3	; 10
    1480:	23 98       	cbi	0x04, 3	; 4
    1482:	10 92 b4 00 	sts	0x00B4, r1
    1486:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 17 01 	sts	0x0117, r24
    1490:	80 91 66 01 	lds	r24, 0x0166
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1494:	81 11       	cpse	r24, r1
    1496:	5f cf       	rjmp	.-322    	; 0x1356 <__vector_23+0x240>
    1498:	7e ce       	rjmp	.-772    	; 0x1196 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    149a:	88 23       	and	r24, r24
    149c:	39 f2       	breq	.-114    	; 0x142c <__vector_23+0x316>
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	c9 f7       	brne	.-14     	; 0x1494 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    14a2:	80 91 67 01 	lds	r24, 0x0167
    14a6:	90 91 68 01 	lds	r25, 0x0168
    14aa:	90 93 76 01 	sts	0x0176, r25
    14ae:	80 93 75 01 	sts	0x0175, r24
                    cur_motion = MOVE_STOP;
    14b2:	10 92 15 01 	sts	0x0115, r1
    14b6:	4f cf       	rjmp	.-354    	; 0x1356 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14b8:	80 91 15 01 	lds	r24, 0x0115
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	71 f1       	breq	.+92     	; 0x151c <__vector_23+0x406>
    14c0:	80 91 6a 01 	lds	r24, 0x016A
                        prev_motion = MOVE_STOP;
    14c4:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    14ce:	80 93 65 01 	sts	0x0165, r24
    14d2:	41 cf       	rjmp	.-382    	; 0x1356 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 15 01 	sts	0x0115, r24
    14da:	5d ce       	rjmp	.-838    	; 0x1196 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14dc:	80 91 15 01 	lds	r24, 0x0115
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	51 f0       	breq	.+20     	; 0x14f8 <__vector_23+0x3e2>
    14e4:	80 91 69 01 	lds	r24, 0x0169
                        prev_motion = MOVE_STOP;
    14e8:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    14f2:	80 93 79 01 	sts	0x0179, r24
    14f6:	2f cf       	rjmp	.-418    	; 0x1356 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14f8:	80 91 69 01 	lds	r24, 0x0169
    14fc:	90 91 79 01 	lds	r25, 0x0179
    1500:	89 13       	cpse	r24, r25
    1502:	f2 cf       	rjmp	.-28     	; 0x14e8 <__vector_23+0x3d2>
    1504:	28 cf       	rjmp	.-432    	; 0x1356 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1506:	80 91 78 01 	lds	r24, 0x0178
    150a:	98 13       	cpse	r25, r24
    150c:	19 cf       	rjmp	.-462    	; 0x1340 <__vector_23+0x22a>
    150e:	80 91 6b 01 	lds	r24, 0x016B
    1512:	20 91 77 01 	lds	r18, 0x0177
    1516:	82 13       	cpse	r24, r18
    1518:	15 cf       	rjmp	.-470    	; 0x1344 <__vector_23+0x22e>
    151a:	1d cf       	rjmp	.-454    	; 0x1356 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    151c:	80 91 6a 01 	lds	r24, 0x016A
    1520:	90 91 65 01 	lds	r25, 0x0165
    1524:	89 13       	cpse	r24, r25
    1526:	ce cf       	rjmp	.-100    	; 0x14c4 <__vector_23+0x3ae>
    1528:	16 cf       	rjmp	.-468    	; 0x1356 <__vector_23+0x240>

0000152a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    152a:	fc 01       	movw	r30, r24
    152c:	ac 01       	movw	r20, r24
    152e:	46 5f       	subi	r20, 0xF6	; 246
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1536:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1538:	82 27       	eor	r24, r18
    153a:	08 2e       	mov	r0, r24
    153c:	82 95       	swap	r24
    153e:	80 7f       	andi	r24, 0xF0	; 240
    1540:	80 25       	eor	r24, r0
    1542:	09 2e       	mov	r0, r25
    1544:	98 2f       	mov	r25, r24
    1546:	82 95       	swap	r24
    1548:	8f 70       	andi	r24, 0x0F	; 15
    154a:	08 26       	eor	r0, r24
    154c:	86 95       	lsr	r24
    154e:	98 27       	eor	r25, r24
    1550:	89 27       	eor	r24, r25
    1552:	88 0f       	add	r24, r24
    1554:	88 0f       	add	r24, r24
    1556:	88 0f       	add	r24, r24
    1558:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    155a:	e4 17       	cp	r30, r20
    155c:	f5 07       	cpc	r31, r21
    155e:	59 f7       	brne	.-42     	; 0x1536 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1560:	08 95       	ret

00001562 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1562:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1564:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1566:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1568:	20 91 39 01 	lds	r18, 0x0139
    or tmpreg1, ddrreg
    156c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    156e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1570:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1572:	30 91 39 01 	lds	r19, 0x0139
    1576:	20 30       	cpi	r18, 0x00	; 0
    1578:	29 f0       	breq	.+10     	; 0x1584 <message_send+0x22>
    157a:	00 00       	nop
    157c:	25 b1       	in	r18, 0x05	; 5
    157e:	23 2b       	or	r18, r19
    1580:	25 b9       	out	0x05, r18	; 5
    1582:	04 c0       	rjmp	.+8      	; 0x158c <message_send+0x2a>
    1584:	00 00       	nop
    1586:	00 00       	nop
    1588:	00 00       	nop
    158a:	00 c0       	rjmp	.+0      	; 0x158c <message_send+0x2a>
    158c:	00 00       	nop
    158e:	00 00       	nop
    1590:	00 00       	nop
    1592:	30 95       	com	r19
    1594:	25 b1       	in	r18, 0x05	; 5
    1596:	23 23       	and	r18, r19
    1598:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    159a:	2e ea       	ldi	r18, 0xAE	; 174
    159c:	2a 95       	dec	r18
    159e:	f1 f7       	brne	.-4      	; 0x159c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    15a0:	2b ee       	ldi	r18, 0xEB	; 235

000015a2 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    15a2:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    15a4:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    15a6:	0a c0       	rjmp	.+20     	; 0x15bc <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15a8:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15aa:	30 91 39 01 	lds	r19, 0x0139
    com tmpreg2
    15ae:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15b0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15b2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15b4:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15b6:	0f be       	out	0x3f, r0	; 63
    return 0
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	08 95       	ret

000015bc <nocollision>:
nocollision:
    nop
    15bc:	00 00       	nop
    dec tmpreg1
    15be:	2a 95       	dec	r18
    brne checkcollision
    15c0:	81 f7       	brne	.-32     	; 0x15a2 <checkcollision>

    ldi tmpreg1, 0x01
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15c4:	30 91 39 01 	lds	r19, 0x0139
    15c8:	20 30       	cpi	r18, 0x00	; 0
    15ca:	29 f0       	breq	.+10     	; 0x15d6 <nocollision+0x1a>
    15cc:	00 00       	nop
    15ce:	25 b1       	in	r18, 0x05	; 5
    15d0:	23 2b       	or	r18, r19
    15d2:	25 b9       	out	0x05, r18	; 5
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <nocollision+0x22>
    15d6:	00 00       	nop
    15d8:	00 00       	nop
    15da:	00 00       	nop
    15dc:	00 c0       	rjmp	.+0      	; 0x15de <nocollision+0x22>
    15de:	00 00       	nop
    15e0:	00 00       	nop
    15e2:	00 00       	nop
    15e4:	30 95       	com	r19
    15e6:	25 b1       	in	r18, 0x05	; 5
    15e8:	23 23       	and	r18, r19
    15ea:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    15ec:	00 00       	nop
    15ee:	24 e5       	ldi	r18, 0x54	; 84
    15f0:	2a 95       	dec	r18
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    15f4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    15f6:	8c e0       	ldi	r24, 0x0C	; 12

000015f8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    15f8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    15fc:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    15fe:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1600:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1602:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1604:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1606:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1608:	50 e0       	ldi	r21, 0x00	; 0

0000160a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    160a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    160c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    160e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1610:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1612:	30 91 39 01 	lds	r19, 0x0139
    1616:	20 30       	cpi	r18, 0x00	; 0
    1618:	29 f0       	breq	.+10     	; 0x1624 <sendbit+0x1a>
    161a:	00 00       	nop
    161c:	25 b1       	in	r18, 0x05	; 5
    161e:	23 2b       	or	r18, r19
    1620:	25 b9       	out	0x05, r18	; 5
    1622:	04 c0       	rjmp	.+8      	; 0x162c <sendbit+0x22>
    1624:	00 00       	nop
    1626:	00 00       	nop
    1628:	00 00       	nop
    162a:	00 c0       	rjmp	.+0      	; 0x162c <sendbit+0x22>
    162c:	00 00       	nop
    162e:	00 00       	nop
    1630:	00 00       	nop
    1632:	30 95       	com	r19
    1634:	25 b1       	in	r18, 0x05	; 5
    1636:	23 23       	and	r18, r19
    1638:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    163a:	00 00       	nop
    163c:	21 e5       	ldi	r18, 0x51	; 81
    163e:	2a 95       	dec	r18
    1640:	f1 f7       	brne	.-4      	; 0x163e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1642:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1644:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1646:	9a 95       	dec	r25
    brne sendbit
    1648:	01 f7       	brne	.-64     	; 0x160a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    164a:	8a 95       	dec	r24
    brne sendbyte
    164c:	a9 f6       	brne	.-86     	; 0x15f8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    164e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1650:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1652:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1654:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1656:	30 91 39 01 	lds	r19, 0x0139
    com tmpreg2
    165a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    165c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    165e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1660:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1662:	0f be       	out	0x3f, r0	; 63
    return 1
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	08 95       	ret

00001668 <main>:
    }
}

int main()
{
  kilo_init();
    1668:	0e 94 c5 01 	call	0x38a	; 0x38a <kilo_init>
  kilo_start(setup, loop);
    166c:	62 e8       	ldi	r22, 0x82	; 130
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	81 e7       	ldi	r24, 0x71	; 113
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 c1 02 	call	0x582	; 0x582 <kilo_start>
    
  return 0;
}
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	08 95       	ret

0000167e <__divmodhi4>:
    167e:	97 fb       	bst	r25, 7
    1680:	07 2e       	mov	r0, r23
    1682:	16 f4       	brtc	.+4      	; 0x1688 <__divmodhi4+0xa>
    1684:	00 94       	com	r0
    1686:	07 d0       	rcall	.+14     	; 0x1696 <__divmodhi4_neg1>
    1688:	77 fd       	sbrc	r23, 7
    168a:	09 d0       	rcall	.+18     	; 0x169e <__divmodhi4_neg2>
    168c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__udivmodhi4>
    1690:	07 fc       	sbrc	r0, 7
    1692:	05 d0       	rcall	.+10     	; 0x169e <__divmodhi4_neg2>
    1694:	3e f4       	brtc	.+14     	; 0x16a4 <__divmodhi4_exit>

00001696 <__divmodhi4_neg1>:
    1696:	90 95       	com	r25
    1698:	81 95       	neg	r24
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	08 95       	ret

0000169e <__divmodhi4_neg2>:
    169e:	70 95       	com	r23
    16a0:	61 95       	neg	r22
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255

000016a4 <__divmodhi4_exit>:
    16a4:	08 95       	ret

000016a6 <__tablejump2__>:
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	05 90       	lpm	r0, Z+
    16ac:	f4 91       	lpm	r31, Z
    16ae:	e0 2d       	mov	r30, r0
    16b0:	09 94       	ijmp

000016b2 <__umulhisi3>:
    16b2:	a2 9f       	mul	r26, r18
    16b4:	b0 01       	movw	r22, r0
    16b6:	b3 9f       	mul	r27, r19
    16b8:	c0 01       	movw	r24, r0
    16ba:	a3 9f       	mul	r26, r19
    16bc:	70 0d       	add	r23, r0
    16be:	81 1d       	adc	r24, r1
    16c0:	11 24       	eor	r1, r1
    16c2:	91 1d       	adc	r25, r1
    16c4:	b2 9f       	mul	r27, r18
    16c6:	70 0d       	add	r23, r0
    16c8:	81 1d       	adc	r24, r1
    16ca:	11 24       	eor	r1, r1
    16cc:	91 1d       	adc	r25, r1
    16ce:	08 95       	ret

000016d0 <__udivmodhi4>:
    16d0:	aa 1b       	sub	r26, r26
    16d2:	bb 1b       	sub	r27, r27
    16d4:	51 e1       	ldi	r21, 0x11	; 17
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <__udivmodhi4_ep>

000016d8 <__udivmodhi4_loop>:
    16d8:	aa 1f       	adc	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	a6 17       	cp	r26, r22
    16de:	b7 07       	cpc	r27, r23
    16e0:	10 f0       	brcs	.+4      	; 0x16e6 <__udivmodhi4_ep>
    16e2:	a6 1b       	sub	r26, r22
    16e4:	b7 0b       	sbc	r27, r23

000016e6 <__udivmodhi4_ep>:
    16e6:	88 1f       	adc	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	5a 95       	dec	r21
    16ec:	a9 f7       	brne	.-22     	; 0x16d8 <__udivmodhi4_loop>
    16ee:	80 95       	com	r24
    16f0:	90 95       	com	r25
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	08 95       	ret

000016f8 <__subsf3>:
    16f8:	50 58       	subi	r21, 0x80	; 128

000016fa <__addsf3>:
    16fa:	bb 27       	eor	r27, r27
    16fc:	aa 27       	eor	r26, r26
    16fe:	0e 94 94 0b 	call	0x1728	; 0x1728 <__addsf3x>
    1702:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__fp_round>
    1706:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_pscA>
    170a:	38 f0       	brcs	.+14     	; 0x171a <__addsf3+0x20>
    170c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_pscB>
    1710:	20 f0       	brcs	.+8      	; 0x171a <__addsf3+0x20>
    1712:	39 f4       	brne	.+14     	; 0x1722 <__addsf3+0x28>
    1714:	9f 3f       	cpi	r25, 0xFF	; 255
    1716:	19 f4       	brne	.+6      	; 0x171e <__addsf3+0x24>
    1718:	26 f4       	brtc	.+8      	; 0x1722 <__addsf3+0x28>
    171a:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_nan>
    171e:	0e f4       	brtc	.+2      	; 0x1722 <__addsf3+0x28>
    1720:	e0 95       	com	r30
    1722:	e7 fb       	bst	r30, 7
    1724:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__fp_inf>

00001728 <__addsf3x>:
    1728:	e9 2f       	mov	r30, r25
    172a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_split3>
    172e:	58 f3       	brcs	.-42     	; 0x1706 <__addsf3+0xc>
    1730:	ba 17       	cp	r27, r26
    1732:	62 07       	cpc	r22, r18
    1734:	73 07       	cpc	r23, r19
    1736:	84 07       	cpc	r24, r20
    1738:	95 07       	cpc	r25, r21
    173a:	20 f0       	brcs	.+8      	; 0x1744 <__addsf3x+0x1c>
    173c:	79 f4       	brne	.+30     	; 0x175c <__addsf3x+0x34>
    173e:	a6 f5       	brtc	.+104    	; 0x17a8 <__addsf3x+0x80>
    1740:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_zero>
    1744:	0e f4       	brtc	.+2      	; 0x1748 <__addsf3x+0x20>
    1746:	e0 95       	com	r30
    1748:	0b 2e       	mov	r0, r27
    174a:	ba 2f       	mov	r27, r26
    174c:	a0 2d       	mov	r26, r0
    174e:	0b 01       	movw	r0, r22
    1750:	b9 01       	movw	r22, r18
    1752:	90 01       	movw	r18, r0
    1754:	0c 01       	movw	r0, r24
    1756:	ca 01       	movw	r24, r20
    1758:	a0 01       	movw	r20, r0
    175a:	11 24       	eor	r1, r1
    175c:	ff 27       	eor	r31, r31
    175e:	59 1b       	sub	r21, r25
    1760:	99 f0       	breq	.+38     	; 0x1788 <__addsf3x+0x60>
    1762:	59 3f       	cpi	r21, 0xF9	; 249
    1764:	50 f4       	brcc	.+20     	; 0x177a <__addsf3x+0x52>
    1766:	50 3e       	cpi	r21, 0xE0	; 224
    1768:	68 f1       	brcs	.+90     	; 0x17c4 <__addsf3x+0x9c>
    176a:	1a 16       	cp	r1, r26
    176c:	f0 40       	sbci	r31, 0x00	; 0
    176e:	a2 2f       	mov	r26, r18
    1770:	23 2f       	mov	r18, r19
    1772:	34 2f       	mov	r19, r20
    1774:	44 27       	eor	r20, r20
    1776:	58 5f       	subi	r21, 0xF8	; 248
    1778:	f3 cf       	rjmp	.-26     	; 0x1760 <__addsf3x+0x38>
    177a:	46 95       	lsr	r20
    177c:	37 95       	ror	r19
    177e:	27 95       	ror	r18
    1780:	a7 95       	ror	r26
    1782:	f0 40       	sbci	r31, 0x00	; 0
    1784:	53 95       	inc	r21
    1786:	c9 f7       	brne	.-14     	; 0x177a <__addsf3x+0x52>
    1788:	7e f4       	brtc	.+30     	; 0x17a8 <__addsf3x+0x80>
    178a:	1f 16       	cp	r1, r31
    178c:	ba 0b       	sbc	r27, r26
    178e:	62 0b       	sbc	r22, r18
    1790:	73 0b       	sbc	r23, r19
    1792:	84 0b       	sbc	r24, r20
    1794:	ba f0       	brmi	.+46     	; 0x17c4 <__addsf3x+0x9c>
    1796:	91 50       	subi	r25, 0x01	; 1
    1798:	a1 f0       	breq	.+40     	; 0x17c2 <__addsf3x+0x9a>
    179a:	ff 0f       	add	r31, r31
    179c:	bb 1f       	adc	r27, r27
    179e:	66 1f       	adc	r22, r22
    17a0:	77 1f       	adc	r23, r23
    17a2:	88 1f       	adc	r24, r24
    17a4:	c2 f7       	brpl	.-16     	; 0x1796 <__addsf3x+0x6e>
    17a6:	0e c0       	rjmp	.+28     	; 0x17c4 <__addsf3x+0x9c>
    17a8:	ba 0f       	add	r27, r26
    17aa:	62 1f       	adc	r22, r18
    17ac:	73 1f       	adc	r23, r19
    17ae:	84 1f       	adc	r24, r20
    17b0:	48 f4       	brcc	.+18     	; 0x17c4 <__addsf3x+0x9c>
    17b2:	87 95       	ror	r24
    17b4:	77 95       	ror	r23
    17b6:	67 95       	ror	r22
    17b8:	b7 95       	ror	r27
    17ba:	f7 95       	ror	r31
    17bc:	9e 3f       	cpi	r25, 0xFE	; 254
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <__addsf3x+0x9a>
    17c0:	b0 cf       	rjmp	.-160    	; 0x1722 <__addsf3+0x28>
    17c2:	93 95       	inc	r25
    17c4:	88 0f       	add	r24, r24
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <__addsf3x+0xa2>
    17c8:	99 27       	eor	r25, r25
    17ca:	ee 0f       	add	r30, r30
    17cc:	97 95       	ror	r25
    17ce:	87 95       	ror	r24
    17d0:	08 95       	ret

000017d2 <__divsf3>:
    17d2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__divsf3x>
    17d6:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__fp_round>
    17da:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_pscB>
    17de:	58 f0       	brcs	.+22     	; 0x17f6 <__divsf3+0x24>
    17e0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_pscA>
    17e4:	40 f0       	brcs	.+16     	; 0x17f6 <__divsf3+0x24>
    17e6:	29 f4       	brne	.+10     	; 0x17f2 <__divsf3+0x20>
    17e8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ea:	29 f0       	breq	.+10     	; 0x17f6 <__divsf3+0x24>
    17ec:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__fp_inf>
    17f0:	51 11       	cpse	r21, r1
    17f2:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_szero>
    17f6:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_nan>

000017fa <__divsf3x>:
    17fa:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_split3>
    17fe:	68 f3       	brcs	.-38     	; 0x17da <__divsf3+0x8>

00001800 <__divsf3_pse>:
    1800:	99 23       	and	r25, r25
    1802:	b1 f3       	breq	.-20     	; 0x17f0 <__divsf3+0x1e>
    1804:	55 23       	and	r21, r21
    1806:	91 f3       	breq	.-28     	; 0x17ec <__divsf3+0x1a>
    1808:	95 1b       	sub	r25, r21
    180a:	55 0b       	sbc	r21, r21
    180c:	bb 27       	eor	r27, r27
    180e:	aa 27       	eor	r26, r26
    1810:	62 17       	cp	r22, r18
    1812:	73 07       	cpc	r23, r19
    1814:	84 07       	cpc	r24, r20
    1816:	38 f0       	brcs	.+14     	; 0x1826 <__divsf3_pse+0x26>
    1818:	9f 5f       	subi	r25, 0xFF	; 255
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	44 1f       	adc	r20, r20
    1822:	aa 1f       	adc	r26, r26
    1824:	a9 f3       	breq	.-22     	; 0x1810 <__divsf3_pse+0x10>
    1826:	35 d0       	rcall	.+106    	; 0x1892 <__divsf3_pse+0x92>
    1828:	0e 2e       	mov	r0, r30
    182a:	3a f0       	brmi	.+14     	; 0x183a <__divsf3_pse+0x3a>
    182c:	e0 e8       	ldi	r30, 0x80	; 128
    182e:	32 d0       	rcall	.+100    	; 0x1894 <__divsf3_pse+0x94>
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	50 40       	sbci	r21, 0x00	; 0
    1834:	e6 95       	lsr	r30
    1836:	00 1c       	adc	r0, r0
    1838:	ca f7       	brpl	.-14     	; 0x182c <__divsf3_pse+0x2c>
    183a:	2b d0       	rcall	.+86     	; 0x1892 <__divsf3_pse+0x92>
    183c:	fe 2f       	mov	r31, r30
    183e:	29 d0       	rcall	.+82     	; 0x1892 <__divsf3_pse+0x92>
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	88 1f       	adc	r24, r24
    1846:	bb 1f       	adc	r27, r27
    1848:	26 17       	cp	r18, r22
    184a:	37 07       	cpc	r19, r23
    184c:	48 07       	cpc	r20, r24
    184e:	ab 07       	cpc	r26, r27
    1850:	b0 e8       	ldi	r27, 0x80	; 128
    1852:	09 f0       	breq	.+2      	; 0x1856 <__divsf3_pse+0x56>
    1854:	bb 0b       	sbc	r27, r27
    1856:	80 2d       	mov	r24, r0
    1858:	bf 01       	movw	r22, r30
    185a:	ff 27       	eor	r31, r31
    185c:	93 58       	subi	r25, 0x83	; 131
    185e:	5f 4f       	sbci	r21, 0xFF	; 255
    1860:	3a f0       	brmi	.+14     	; 0x1870 <__divsf3_pse+0x70>
    1862:	9e 3f       	cpi	r25, 0xFE	; 254
    1864:	51 05       	cpc	r21, r1
    1866:	78 f0       	brcs	.+30     	; 0x1886 <__divsf3_pse+0x86>
    1868:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__fp_inf>
    186c:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_szero>
    1870:	5f 3f       	cpi	r21, 0xFF	; 255
    1872:	e4 f3       	brlt	.-8      	; 0x186c <__divsf3_pse+0x6c>
    1874:	98 3e       	cpi	r25, 0xE8	; 232
    1876:	d4 f3       	brlt	.-12     	; 0x186c <__divsf3_pse+0x6c>
    1878:	86 95       	lsr	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	b7 95       	ror	r27
    1880:	f7 95       	ror	r31
    1882:	9f 5f       	subi	r25, 0xFF	; 255
    1884:	c9 f7       	brne	.-14     	; 0x1878 <__divsf3_pse+0x78>
    1886:	88 0f       	add	r24, r24
    1888:	91 1d       	adc	r25, r1
    188a:	96 95       	lsr	r25
    188c:	87 95       	ror	r24
    188e:	97 f9       	bld	r25, 7
    1890:	08 95       	ret
    1892:	e1 e0       	ldi	r30, 0x01	; 1
    1894:	66 0f       	add	r22, r22
    1896:	77 1f       	adc	r23, r23
    1898:	88 1f       	adc	r24, r24
    189a:	bb 1f       	adc	r27, r27
    189c:	62 17       	cp	r22, r18
    189e:	73 07       	cpc	r23, r19
    18a0:	84 07       	cpc	r24, r20
    18a2:	ba 07       	cpc	r27, r26
    18a4:	20 f0       	brcs	.+8      	; 0x18ae <__divsf3_pse+0xae>
    18a6:	62 1b       	sub	r22, r18
    18a8:	73 0b       	sbc	r23, r19
    18aa:	84 0b       	sbc	r24, r20
    18ac:	ba 0b       	sbc	r27, r26
    18ae:	ee 1f       	adc	r30, r30
    18b0:	88 f7       	brcc	.-30     	; 0x1894 <__divsf3_pse+0x94>
    18b2:	e0 95       	com	r30
    18b4:	08 95       	ret

000018b6 <__fixsfsi>:
    18b6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fixunssfsi>
    18ba:	68 94       	set
    18bc:	b1 11       	cpse	r27, r1
    18be:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_szero>
    18c2:	08 95       	ret

000018c4 <__fixunssfsi>:
    18c4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__fp_splitA>
    18c8:	88 f0       	brcs	.+34     	; 0x18ec <__fixunssfsi+0x28>
    18ca:	9f 57       	subi	r25, 0x7F	; 127
    18cc:	98 f0       	brcs	.+38     	; 0x18f4 <__fixunssfsi+0x30>
    18ce:	b9 2f       	mov	r27, r25
    18d0:	99 27       	eor	r25, r25
    18d2:	b7 51       	subi	r27, 0x17	; 23
    18d4:	b0 f0       	brcs	.+44     	; 0x1902 <__fixunssfsi+0x3e>
    18d6:	e1 f0       	breq	.+56     	; 0x1910 <__fixunssfsi+0x4c>
    18d8:	66 0f       	add	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	88 1f       	adc	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	1a f0       	brmi	.+6      	; 0x18e8 <__fixunssfsi+0x24>
    18e2:	ba 95       	dec	r27
    18e4:	c9 f7       	brne	.-14     	; 0x18d8 <__fixunssfsi+0x14>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <__fixunssfsi+0x4c>
    18e8:	b1 30       	cpi	r27, 0x01	; 1
    18ea:	91 f0       	breq	.+36     	; 0x1910 <__fixunssfsi+0x4c>
    18ec:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_zero>
    18f0:	b1 e0       	ldi	r27, 0x01	; 1
    18f2:	08 95       	ret
    18f4:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_zero>
    18f8:	67 2f       	mov	r22, r23
    18fa:	78 2f       	mov	r23, r24
    18fc:	88 27       	eor	r24, r24
    18fe:	b8 5f       	subi	r27, 0xF8	; 248
    1900:	39 f0       	breq	.+14     	; 0x1910 <__fixunssfsi+0x4c>
    1902:	b9 3f       	cpi	r27, 0xF9	; 249
    1904:	cc f3       	brlt	.-14     	; 0x18f8 <__fixunssfsi+0x34>
    1906:	86 95       	lsr	r24
    1908:	77 95       	ror	r23
    190a:	67 95       	ror	r22
    190c:	b3 95       	inc	r27
    190e:	d9 f7       	brne	.-10     	; 0x1906 <__fixunssfsi+0x42>
    1910:	3e f4       	brtc	.+14     	; 0x1920 <__fixunssfsi+0x5c>
    1912:	90 95       	com	r25
    1914:	80 95       	com	r24
    1916:	70 95       	com	r23
    1918:	61 95       	neg	r22
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	08 95       	ret

00001922 <__floatunsisf>:
    1922:	e8 94       	clt
    1924:	09 c0       	rjmp	.+18     	; 0x1938 <__floatsisf+0x12>

00001926 <__floatsisf>:
    1926:	97 fb       	bst	r25, 7
    1928:	3e f4       	brtc	.+14     	; 0x1938 <__floatsisf+0x12>
    192a:	90 95       	com	r25
    192c:	80 95       	com	r24
    192e:	70 95       	com	r23
    1930:	61 95       	neg	r22
    1932:	7f 4f       	sbci	r23, 0xFF	; 255
    1934:	8f 4f       	sbci	r24, 0xFF	; 255
    1936:	9f 4f       	sbci	r25, 0xFF	; 255
    1938:	99 23       	and	r25, r25
    193a:	a9 f0       	breq	.+42     	; 0x1966 <__floatsisf+0x40>
    193c:	f9 2f       	mov	r31, r25
    193e:	96 e9       	ldi	r25, 0x96	; 150
    1940:	bb 27       	eor	r27, r27
    1942:	93 95       	inc	r25
    1944:	f6 95       	lsr	r31
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b7 95       	ror	r27
    194e:	f1 11       	cpse	r31, r1
    1950:	f8 cf       	rjmp	.-16     	; 0x1942 <__floatsisf+0x1c>
    1952:	fa f4       	brpl	.+62     	; 0x1992 <__floatsisf+0x6c>
    1954:	bb 0f       	add	r27, r27
    1956:	11 f4       	brne	.+4      	; 0x195c <__floatsisf+0x36>
    1958:	60 ff       	sbrs	r22, 0
    195a:	1b c0       	rjmp	.+54     	; 0x1992 <__floatsisf+0x6c>
    195c:	6f 5f       	subi	r22, 0xFF	; 255
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	16 c0       	rjmp	.+44     	; 0x1992 <__floatsisf+0x6c>
    1966:	88 23       	and	r24, r24
    1968:	11 f0       	breq	.+4      	; 0x196e <__floatsisf+0x48>
    196a:	96 e9       	ldi	r25, 0x96	; 150
    196c:	11 c0       	rjmp	.+34     	; 0x1990 <__floatsisf+0x6a>
    196e:	77 23       	and	r23, r23
    1970:	21 f0       	breq	.+8      	; 0x197a <__floatsisf+0x54>
    1972:	9e e8       	ldi	r25, 0x8E	; 142
    1974:	87 2f       	mov	r24, r23
    1976:	76 2f       	mov	r23, r22
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <__floatsisf+0x5e>
    197a:	66 23       	and	r22, r22
    197c:	71 f0       	breq	.+28     	; 0x199a <__floatsisf+0x74>
    197e:	96 e8       	ldi	r25, 0x86	; 134
    1980:	86 2f       	mov	r24, r22
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	2a f0       	brmi	.+10     	; 0x1992 <__floatsisf+0x6c>
    1988:	9a 95       	dec	r25
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	da f7       	brpl	.-10     	; 0x1988 <__floatsisf+0x62>
    1992:	88 0f       	add	r24, r24
    1994:	96 95       	lsr	r25
    1996:	87 95       	ror	r24
    1998:	97 f9       	bld	r25, 7
    199a:	08 95       	ret

0000199c <__fp_inf>:
    199c:	97 f9       	bld	r25, 7
    199e:	9f 67       	ori	r25, 0x7F	; 127
    19a0:	80 e8       	ldi	r24, 0x80	; 128
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	08 95       	ret

000019a8 <__fp_nan>:
    19a8:	9f ef       	ldi	r25, 0xFF	; 255
    19aa:	80 ec       	ldi	r24, 0xC0	; 192
    19ac:	08 95       	ret

000019ae <__fp_pscA>:
    19ae:	00 24       	eor	r0, r0
    19b0:	0a 94       	dec	r0
    19b2:	16 16       	cp	r1, r22
    19b4:	17 06       	cpc	r1, r23
    19b6:	18 06       	cpc	r1, r24
    19b8:	09 06       	cpc	r0, r25
    19ba:	08 95       	ret

000019bc <__fp_pscB>:
    19bc:	00 24       	eor	r0, r0
    19be:	0a 94       	dec	r0
    19c0:	12 16       	cp	r1, r18
    19c2:	13 06       	cpc	r1, r19
    19c4:	14 06       	cpc	r1, r20
    19c6:	05 06       	cpc	r0, r21
    19c8:	08 95       	ret

000019ca <__fp_round>:
    19ca:	09 2e       	mov	r0, r25
    19cc:	03 94       	inc	r0
    19ce:	00 0c       	add	r0, r0
    19d0:	11 f4       	brne	.+4      	; 0x19d6 <__fp_round+0xc>
    19d2:	88 23       	and	r24, r24
    19d4:	52 f0       	brmi	.+20     	; 0x19ea <__fp_round+0x20>
    19d6:	bb 0f       	add	r27, r27
    19d8:	40 f4       	brcc	.+16     	; 0x19ea <__fp_round+0x20>
    19da:	bf 2b       	or	r27, r31
    19dc:	11 f4       	brne	.+4      	; 0x19e2 <__fp_round+0x18>
    19de:	60 ff       	sbrs	r22, 0
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <__fp_round+0x20>
    19e2:	6f 5f       	subi	r22, 0xFF	; 255
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	08 95       	ret

000019ec <__fp_split3>:
    19ec:	57 fd       	sbrc	r21, 7
    19ee:	90 58       	subi	r25, 0x80	; 128
    19f0:	44 0f       	add	r20, r20
    19f2:	55 1f       	adc	r21, r21
    19f4:	59 f0       	breq	.+22     	; 0x1a0c <__fp_splitA+0x10>
    19f6:	5f 3f       	cpi	r21, 0xFF	; 255
    19f8:	71 f0       	breq	.+28     	; 0x1a16 <__fp_splitA+0x1a>
    19fa:	47 95       	ror	r20

000019fc <__fp_splitA>:
    19fc:	88 0f       	add	r24, r24
    19fe:	97 fb       	bst	r25, 7
    1a00:	99 1f       	adc	r25, r25
    1a02:	61 f0       	breq	.+24     	; 0x1a1c <__fp_splitA+0x20>
    1a04:	9f 3f       	cpi	r25, 0xFF	; 255
    1a06:	79 f0       	breq	.+30     	; 0x1a26 <__fp_splitA+0x2a>
    1a08:	87 95       	ror	r24
    1a0a:	08 95       	ret
    1a0c:	12 16       	cp	r1, r18
    1a0e:	13 06       	cpc	r1, r19
    1a10:	14 06       	cpc	r1, r20
    1a12:	55 1f       	adc	r21, r21
    1a14:	f2 cf       	rjmp	.-28     	; 0x19fa <__fp_split3+0xe>
    1a16:	46 95       	lsr	r20
    1a18:	f1 df       	rcall	.-30     	; 0x19fc <__fp_splitA>
    1a1a:	08 c0       	rjmp	.+16     	; 0x1a2c <__fp_splitA+0x30>
    1a1c:	16 16       	cp	r1, r22
    1a1e:	17 06       	cpc	r1, r23
    1a20:	18 06       	cpc	r1, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	f1 cf       	rjmp	.-30     	; 0x1a08 <__fp_splitA+0xc>
    1a26:	86 95       	lsr	r24
    1a28:	71 05       	cpc	r23, r1
    1a2a:	61 05       	cpc	r22, r1
    1a2c:	08 94       	sec
    1a2e:	08 95       	ret

00001a30 <__fp_zero>:
    1a30:	e8 94       	clt

00001a32 <__fp_szero>:
    1a32:	bb 27       	eor	r27, r27
    1a34:	66 27       	eor	r22, r22
    1a36:	77 27       	eor	r23, r23
    1a38:	cb 01       	movw	r24, r22
    1a3a:	97 f9       	bld	r25, 7
    1a3c:	08 95       	ret

00001a3e <__mulsf3>:
    1a3e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__mulsf3x>
    1a42:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__fp_round>
    1a46:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_pscA>
    1a4a:	38 f0       	brcs	.+14     	; 0x1a5a <__mulsf3+0x1c>
    1a4c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_pscB>
    1a50:	20 f0       	brcs	.+8      	; 0x1a5a <__mulsf3+0x1c>
    1a52:	95 23       	and	r25, r21
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <__mulsf3+0x1c>
    1a56:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__fp_inf>
    1a5a:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__fp_nan>
    1a5e:	11 24       	eor	r1, r1
    1a60:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_szero>

00001a64 <__mulsf3x>:
    1a64:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_split3>
    1a68:	70 f3       	brcs	.-36     	; 0x1a46 <__mulsf3+0x8>

00001a6a <__mulsf3_pse>:
    1a6a:	95 9f       	mul	r25, r21
    1a6c:	c1 f3       	breq	.-16     	; 0x1a5e <__mulsf3+0x20>
    1a6e:	95 0f       	add	r25, r21
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	55 1f       	adc	r21, r21
    1a74:	62 9f       	mul	r22, r18
    1a76:	f0 01       	movw	r30, r0
    1a78:	72 9f       	mul	r23, r18
    1a7a:	bb 27       	eor	r27, r27
    1a7c:	f0 0d       	add	r31, r0
    1a7e:	b1 1d       	adc	r27, r1
    1a80:	63 9f       	mul	r22, r19
    1a82:	aa 27       	eor	r26, r26
    1a84:	f0 0d       	add	r31, r0
    1a86:	b1 1d       	adc	r27, r1
    1a88:	aa 1f       	adc	r26, r26
    1a8a:	64 9f       	mul	r22, r20
    1a8c:	66 27       	eor	r22, r22
    1a8e:	b0 0d       	add	r27, r0
    1a90:	a1 1d       	adc	r26, r1
    1a92:	66 1f       	adc	r22, r22
    1a94:	82 9f       	mul	r24, r18
    1a96:	22 27       	eor	r18, r18
    1a98:	b0 0d       	add	r27, r0
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	62 1f       	adc	r22, r18
    1a9e:	73 9f       	mul	r23, r19
    1aa0:	b0 0d       	add	r27, r0
    1aa2:	a1 1d       	adc	r26, r1
    1aa4:	62 1f       	adc	r22, r18
    1aa6:	83 9f       	mul	r24, r19
    1aa8:	a0 0d       	add	r26, r0
    1aaa:	61 1d       	adc	r22, r1
    1aac:	22 1f       	adc	r18, r18
    1aae:	74 9f       	mul	r23, r20
    1ab0:	33 27       	eor	r19, r19
    1ab2:	a0 0d       	add	r26, r0
    1ab4:	61 1d       	adc	r22, r1
    1ab6:	23 1f       	adc	r18, r19
    1ab8:	84 9f       	mul	r24, r20
    1aba:	60 0d       	add	r22, r0
    1abc:	21 1d       	adc	r18, r1
    1abe:	82 2f       	mov	r24, r18
    1ac0:	76 2f       	mov	r23, r22
    1ac2:	6a 2f       	mov	r22, r26
    1ac4:	11 24       	eor	r1, r1
    1ac6:	9f 57       	subi	r25, 0x7F	; 127
    1ac8:	50 40       	sbci	r21, 0x00	; 0
    1aca:	9a f0       	brmi	.+38     	; 0x1af2 <__mulsf3_pse+0x88>
    1acc:	f1 f0       	breq	.+60     	; 0x1b0a <__mulsf3_pse+0xa0>
    1ace:	88 23       	and	r24, r24
    1ad0:	4a f0       	brmi	.+18     	; 0x1ae4 <__mulsf3_pse+0x7a>
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	66 1f       	adc	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	88 1f       	adc	r24, r24
    1ade:	91 50       	subi	r25, 0x01	; 1
    1ae0:	50 40       	sbci	r21, 0x00	; 0
    1ae2:	a9 f7       	brne	.-22     	; 0x1ace <__mulsf3_pse+0x64>
    1ae4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae6:	51 05       	cpc	r21, r1
    1ae8:	80 f0       	brcs	.+32     	; 0x1b0a <__mulsf3_pse+0xa0>
    1aea:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__fp_inf>
    1aee:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_szero>
    1af2:	5f 3f       	cpi	r21, 0xFF	; 255
    1af4:	e4 f3       	brlt	.-8      	; 0x1aee <__mulsf3_pse+0x84>
    1af6:	98 3e       	cpi	r25, 0xE8	; 232
    1af8:	d4 f3       	brlt	.-12     	; 0x1aee <__mulsf3_pse+0x84>
    1afa:	86 95       	lsr	r24
    1afc:	77 95       	ror	r23
    1afe:	67 95       	ror	r22
    1b00:	b7 95       	ror	r27
    1b02:	f7 95       	ror	r31
    1b04:	e7 95       	ror	r30
    1b06:	9f 5f       	subi	r25, 0xFF	; 255
    1b08:	c1 f7       	brne	.-16     	; 0x1afa <__mulsf3_pse+0x90>
    1b0a:	fe 2b       	or	r31, r30
    1b0c:	88 0f       	add	r24, r24
    1b0e:	91 1d       	adc	r25, r1
    1b10:	96 95       	lsr	r25
    1b12:	87 95       	ror	r24
    1b14:	97 f9       	bld	r25, 7
    1b16:	08 95       	ret

00001b18 <do_rand>:
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	68 81       	ld	r22, Y
    1b30:	79 81       	ldd	r23, Y+1	; 0x01
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	61 15       	cp	r22, r1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	81 05       	cpc	r24, r1
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <do_rand+0x30>
    1b40:	64 e2       	ldi	r22, 0x24	; 36
    1b42:	79 ed       	ldi	r23, 0xD9	; 217
    1b44:	8b e5       	ldi	r24, 0x5B	; 91
    1b46:	97 e0       	ldi	r25, 0x07	; 7
    1b48:	2d e1       	ldi	r18, 0x1D	; 29
    1b4a:	33 ef       	ldi	r19, 0xF3	; 243
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divmodsi4>
    1b54:	49 01       	movw	r8, r18
    1b56:	5a 01       	movw	r10, r20
    1b58:	9b 01       	movw	r18, r22
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	a7 ea       	ldi	r26, 0xA7	; 167
    1b5e:	b1 e4       	ldi	r27, 0x41	; 65
    1b60:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__muluhisi3>
    1b64:	6b 01       	movw	r12, r22
    1b66:	7c 01       	movw	r14, r24
    1b68:	ac ee       	ldi	r26, 0xEC	; 236
    1b6a:	b4 ef       	ldi	r27, 0xF4	; 244
    1b6c:	a5 01       	movw	r20, r10
    1b6e:	94 01       	movw	r18, r8
    1b70:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__mulohisi3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8c 0d       	add	r24, r12
    1b7a:	9d 1d       	adc	r25, r13
    1b7c:	ae 1d       	adc	r26, r14
    1b7e:	bf 1d       	adc	r27, r15
    1b80:	b7 ff       	sbrs	r27, 7
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <do_rand+0x72>
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	a1 09       	sbc	r26, r1
    1b88:	b0 48       	sbci	r27, 0x80	; 128
    1b8a:	88 83       	st	Y, r24
    1b8c:	99 83       	std	Y+1, r25	; 0x01
    1b8e:	aa 83       	std	Y+2, r26	; 0x02
    1b90:	bb 83       	std	Y+3, r27	; 0x03
    1b92:	9f 77       	andi	r25, 0x7F	; 127
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	bf 90       	pop	r11
    1ba2:	af 90       	pop	r10
    1ba4:	9f 90       	pop	r9
    1ba6:	8f 90       	pop	r8
    1ba8:	08 95       	ret

00001baa <rand_r>:
    1baa:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <do_rand>
    1bae:	08 95       	ret

00001bb0 <rand>:
    1bb0:	87 e0       	ldi	r24, 0x07	; 7
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <do_rand>
    1bb8:	08 95       	ret

00001bba <srand>:
    1bba:	a0 e0       	ldi	r26, 0x00	; 0
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	80 93 07 01 	sts	0x0107, r24
    1bc2:	90 93 08 01 	sts	0x0108, r25
    1bc6:	a0 93 09 01 	sts	0x0109, r26
    1bca:	b0 93 0a 01 	sts	0x010A, r27
    1bce:	08 95       	ret

00001bd0 <eeprom_read_byte>:
    1bd0:	f9 99       	sbic	0x1f, 1	; 31
    1bd2:	fe cf       	rjmp	.-4      	; 0x1bd0 <eeprom_read_byte>
    1bd4:	92 bd       	out	0x22, r25	; 34
    1bd6:	81 bd       	out	0x21, r24	; 33
    1bd8:	f8 9a       	sbi	0x1f, 0	; 31
    1bda:	99 27       	eor	r25, r25
    1bdc:	80 b5       	in	r24, 0x20	; 32
    1bde:	08 95       	ret

00001be0 <eeprom_write_byte>:
    1be0:	26 2f       	mov	r18, r22

00001be2 <eeprom_write_r18>:
    1be2:	f9 99       	sbic	0x1f, 1	; 31
    1be4:	fe cf       	rjmp	.-4      	; 0x1be2 <eeprom_write_r18>
    1be6:	1f ba       	out	0x1f, r1	; 31
    1be8:	92 bd       	out	0x22, r25	; 34
    1bea:	81 bd       	out	0x21, r24	; 33
    1bec:	20 bd       	out	0x20, r18	; 32
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	fa 9a       	sbi	0x1f, 2	; 31
    1bf4:	f9 9a       	sbi	0x1f, 1	; 31
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	08 95       	ret

00001bfc <__divmodsi4>:
    1bfc:	05 2e       	mov	r0, r21
    1bfe:	97 fb       	bst	r25, 7
    1c00:	1e f4       	brtc	.+6      	; 0x1c08 <__divmodsi4+0xc>
    1c02:	00 94       	com	r0
    1c04:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__negsi2>
    1c08:	57 fd       	sbrc	r21, 7
    1c0a:	07 d0       	rcall	.+14     	; 0x1c1a <__divmodsi4_neg2>
    1c0c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__udivmodsi4>
    1c10:	07 fc       	sbrc	r0, 7
    1c12:	03 d0       	rcall	.+6      	; 0x1c1a <__divmodsi4_neg2>
    1c14:	4e f4       	brtc	.+18     	; 0x1c28 <__divmodsi4_exit>
    1c16:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__negsi2>

00001c1a <__divmodsi4_neg2>:
    1c1a:	50 95       	com	r21
    1c1c:	40 95       	com	r20
    1c1e:	30 95       	com	r19
    1c20:	21 95       	neg	r18
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	4f 4f       	sbci	r20, 0xFF	; 255
    1c26:	5f 4f       	sbci	r21, 0xFF	; 255

00001c28 <__divmodsi4_exit>:
    1c28:	08 95       	ret

00001c2a <__negsi2>:
    1c2a:	90 95       	com	r25
    1c2c:	80 95       	com	r24
    1c2e:	70 95       	com	r23
    1c30:	61 95       	neg	r22
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	8f 4f       	sbci	r24, 0xFF	; 255
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	08 95       	ret

00001c3a <__muluhisi3>:
    1c3a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__umulhisi3>
    1c3e:	a5 9f       	mul	r26, r21
    1c40:	90 0d       	add	r25, r0
    1c42:	b4 9f       	mul	r27, r20
    1c44:	90 0d       	add	r25, r0
    1c46:	a4 9f       	mul	r26, r20
    1c48:	80 0d       	add	r24, r0
    1c4a:	91 1d       	adc	r25, r1
    1c4c:	11 24       	eor	r1, r1
    1c4e:	08 95       	ret

00001c50 <__mulshisi3>:
    1c50:	b7 ff       	sbrs	r27, 7
    1c52:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__muluhisi3>

00001c56 <__mulohisi3>:
    1c56:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__muluhisi3>
    1c5a:	82 1b       	sub	r24, r18
    1c5c:	93 0b       	sbc	r25, r19
    1c5e:	08 95       	ret

00001c60 <__udivmodsi4>:
    1c60:	a1 e2       	ldi	r26, 0x21	; 33
    1c62:	1a 2e       	mov	r1, r26
    1c64:	aa 1b       	sub	r26, r26
    1c66:	bb 1b       	sub	r27, r27
    1c68:	fd 01       	movw	r30, r26
    1c6a:	0d c0       	rjmp	.+26     	; 0x1c86 <__udivmodsi4_ep>

00001c6c <__udivmodsi4_loop>:
    1c6c:	aa 1f       	adc	r26, r26
    1c6e:	bb 1f       	adc	r27, r27
    1c70:	ee 1f       	adc	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	a2 17       	cp	r26, r18
    1c76:	b3 07       	cpc	r27, r19
    1c78:	e4 07       	cpc	r30, r20
    1c7a:	f5 07       	cpc	r31, r21
    1c7c:	20 f0       	brcs	.+8      	; 0x1c86 <__udivmodsi4_ep>
    1c7e:	a2 1b       	sub	r26, r18
    1c80:	b3 0b       	sbc	r27, r19
    1c82:	e4 0b       	sbc	r30, r20
    1c84:	f5 0b       	sbc	r31, r21

00001c86 <__udivmodsi4_ep>:
    1c86:	66 1f       	adc	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	88 1f       	adc	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	1a 94       	dec	r1
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <__udivmodsi4_loop>
    1c92:	60 95       	com	r22
    1c94:	70 95       	com	r23
    1c96:	80 95       	com	r24
    1c98:	90 95       	com	r25
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	bd 01       	movw	r22, r26
    1ca0:	cf 01       	movw	r24, r30
    1ca2:	08 95       	ret

00001ca4 <_exit>:
    1ca4:	f8 94       	cli

00001ca6 <__stop_program>:
    1ca6:	ff cf       	rjmp	.-2      	; 0x1ca6 <__stop_program>
