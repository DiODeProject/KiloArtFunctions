
build/test.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	d0 01       	movw	r26, r0
      6a:	4c 02       	muls	r20, r28
      6c:	a4 01       	movw	r20, r8
      6e:	9b 01       	movw	r18, r22
      70:	a1 01       	movw	r20, r2
      72:	2e 02       	muls	r18, r30
      74:	23 02       	muls	r18, r19
      76:	ae 08       	sbc	r10, r14
      78:	8b 07       	cpc	r24, r27
      7a:	8b 07       	cpc	r24, r27
      7c:	ab 08       	sbc	r10, r11
      7e:	b7 08       	sbc	r11, r7
      80:	a7 08       	sbc	r10, r7
      82:	be 08       	sbc	r11, r14
      84:	ba 08       	sbc	r11, r10
      86:	c2 08       	sbc	r12, r2
      88:	7a 08       	sbc	r7, r10
      8a:	4c 08       	sbc	r4, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e2       	ldi	r30, 0x28	; 40
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 37       	cpi	r26, 0x74	; 116
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <main>
      da:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
// We need an unsigned 32-bit integer to store clock ticks;
// a regular int would overflow.
uint32_t last_state_update;

void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
  //last_state_update = kilo_ticks;
}

void loop()
{
	spinup_motors();
      e4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <spinup_motors>
	delay(30);
      e8:	8e e1       	ldi	r24, 0x1E	; 30
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <delay>
	set_motors(0,0);
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <set_motors>
	delay(300);
      f8:	8c e2       	ldi	r24, 0x2C	; 44
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <delay>

00000100 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     100:	08 95       	ret

00000102 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	08 95       	ret

00000108 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     108:	08 95       	ret

0000010a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
    cli();
     118:	f8 94       	cli

    ports_off();
     11a:	14 b8       	out	0x04, r1	; 4
     11c:	17 b8       	out	0x07, r1	; 7
     11e:	1a b8       	out	0x0a, r1	; 10
     120:	15 b8       	out	0x05, r1	; 5
     122:	18 b8       	out	0x08, r1	; 8
     124:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     126:	52 9a       	sbi	0x0a, 2	; 10
     128:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     12a:	14 bc       	out	0x24, r1	; 36
     12c:	85 e0       	ldi	r24, 0x05	; 5
     12e:	85 bd       	out	0x25, r24	; 37
     130:	8f ef       	ldi	r24, 0xFF	; 255
     132:	87 bd       	out	0x27, r24	; 39
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     13a:	10 92 80 00 	sts	0x0080, r1
     13e:	10 92 81 00 	sts	0x0081, r1
     142:	2f e8       	ldi	r18, 0x8F	; 143
     144:	3b e0       	ldi	r19, 0x0B	; 11
     146:	30 93 89 00 	sts	0x0089, r19
     14a:	20 93 88 00 	sts	0x0088, r18
     14e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     152:	53 98       	cbi	0x0a, 3	; 10
     154:	23 98       	cbi	0x04, 3	; 4
     156:	91 ea       	ldi	r25, 0xA1	; 161
     158:	90 93 b0 00 	sts	0x00B0, r25
     15c:	80 93 b1 00 	sts	0x00B1, r24
     160:	10 92 b4 00 	sts	0x00B4, r1
     164:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     168:	8b e0       	ldi	r24, 0x0B	; 11
     16a:	80 bf       	out	0x30, r24	; 48
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	80 93 7c 00 	sts	0x007C, r24
     178:	83 e8       	ldi	r24, 0x83	; 131
     17a:	80 93 7a 00 	sts	0x007A, r24
     17e:	80 91 7a 00 	lds	r24, 0x007A
     182:	80 64       	ori	r24, 0x40	; 64
     184:	80 93 7a 00 	sts	0x007A, r24
     188:	80 91 7a 00 	lds	r24, 0x007A
     18c:	86 fd       	sbrc	r24, 6
     18e:	fc cf       	rjmp	.-8      	; 0x188 <kilo_init+0x7e>
    adc_trigger_high_gain();
     190:	10 92 7c 00 	sts	0x007C, r1
     194:	83 ea       	ldi	r24, 0xA3	; 163
     196:	80 93 7a 00 	sts	0x007A, r24
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
    if (osccal != 0xFF)
     1a8:	8f 3f       	cpi	r24, 0xFF	; 255
     1aa:	11 f0       	breq	.+4      	; 0x1b0 <kilo_init+0xa6>
        OSCCAL = osccal;
     1ac:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1b0:	10 92 3d 01 	sts	0x013D, r1
    rx_leadingbit = 1;
     1b4:	c1 e0       	ldi	r28, 0x01	; 1
     1b6:	c0 93 16 01 	sts	0x0116, r28
    rx_leadingbyte = 1;
     1ba:	c0 93 5a 01 	sts	0x015A, r28
    rx_byteindex = 0;
     1be:	10 92 34 01 	sts	0x0134, r1
    rx_bytevalue = 0;
     1c2:	10 92 6e 01 	sts	0x016E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1c6:	80 e9       	ldi	r24, 0x90	; 144
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     1ce:	80 93 33 01 	sts	0x0133, r24
    if (tx_mask & ~TX_MASK_MAX)
     1d2:	80 91 33 01 	lds	r24, 0x0133
     1d6:	88 73       	andi	r24, 0x38	; 56
     1d8:	11 f0       	breq	.+4      	; 0x1de <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1da:	c0 93 33 01 	sts	0x0133, r28
    tx_clock = 0;
     1de:	10 92 5e 01 	sts	0x015E, r1
     1e2:	10 92 5d 01 	sts	0x015D, r1
    tx_increment = 255;
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	90 93 5c 01 	sts	0x015C, r25
     1ee:	80 93 5b 01 	sts	0x015B, r24
    kilo_ticks = 0;
     1f2:	10 92 39 01 	sts	0x0139, r1
     1f6:	10 92 3a 01 	sts	0x013A, r1
     1fa:	10 92 3b 01 	sts	0x013B, r1
     1fe:	10 92 3c 01 	sts	0x013C, r1
    kilo_state = IDLE;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     208:	82 e4       	ldi	r24, 0x42	; 66
     20a:	9f e0       	ldi	r25, 0x0F	; 15
     20c:	90 93 6d 01 	sts	0x016D, r25
     210:	80 93 6c 01 	sts	0x016C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     214:	80 eb       	ldi	r24, 0xB0	; 176
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     21c:	c8 2f       	mov	r28, r24
     21e:	81 eb       	ldi	r24, 0xB1	; 177
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     226:	2c 2f       	mov	r18, r28
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	38 2b       	or	r19, r24
     22c:	30 93 70 01 	sts	0x0170, r19
     230:	20 93 6f 01 	sts	0x016F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     23c:	80 93 73 01 	sts	0x0173, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     240:	89 e0       	ldi	r24, 0x09	; 9
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     248:	80 93 5f 01 	sts	0x015F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     254:	80 93 71 01 	sts	0x0171, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     258:	84 e1       	ldi	r24, 0x14	; 20
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     260:	80 93 72 01 	sts	0x0172, r24
     264:	5e e3       	ldi	r21, 0x3E	; 62
     266:	e5 2e       	mov	r14, r21
     268:	51 e0       	ldi	r21, 0x01	; 1
     26a:	f5 2e       	mov	r15, r21
     26c:	07 e1       	ldi	r16, 0x17	; 23
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	c0 e2       	ldi	r28, 0x20	; 32
     272:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     274:	ce 01       	movw	r24, r28
     276:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     27a:	d8 2e       	mov	r13, r24
     27c:	ce 01       	movw	r24, r28
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     284:	2d 2d       	mov	r18, r13
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	32 2f       	mov	r19, r18
     28a:	22 27       	eor	r18, r18
     28c:	28 2b       	or	r18, r24
     28e:	f7 01       	movw	r30, r14
     290:	21 93       	st	Z+, r18
     292:	31 93       	st	Z+, r19
     294:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     296:	ce 01       	movw	r24, r28
     298:	c0 96       	adiw	r24, 0x30	; 48
     29a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     29e:	d8 2e       	mov	r13, r24
     2a0:	ce 01       	movw	r24, r28
     2a2:	c1 96       	adiw	r24, 0x31	; 49
     2a4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_byte>
     2a8:	2d 2d       	mov	r18, r13
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	32 2f       	mov	r19, r18
     2ae:	22 27       	eor	r18, r18
     2b0:	28 2b       	or	r18, r24
     2b2:	f8 01       	movw	r30, r16
     2b4:	21 93       	st	Z+, r18
     2b6:	31 93       	st	Z+, r19
     2b8:	8f 01       	movw	r16, r30
     2ba:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2bc:	cc 33       	cpi	r28, 0x3C	; 60
     2be:	d1 05       	cpc	r29, r1
     2c0:	c9 f6       	brne	.-78     	; 0x274 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2c2:	78 94       	sei
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	08 95       	ret

000002d4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	8f 93       	push	r24
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	a8 95       	wdr
     2e6:	80 91 60 00 	lds	r24, 0x0060
     2ea:	88 61       	ori	r24, 0x18	; 24
     2ec:	80 93 60 00 	sts	0x0060, r24
     2f0:	10 92 60 00 	sts	0x0060, r1
     2f4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     302:	3c 01       	movw	r6, r24
     304:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     306:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     308:	99 24       	eor	r9, r9
     30a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     310:	96 e0       	ldi	r25, 0x06	; 6
     312:	a9 2e       	mov	r10, r25
     314:	23 e8       	ldi	r18, 0x83	; 131
     316:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     318:	38 e1       	ldi	r19, 0x18	; 24
     31a:	d3 2e       	mov	r13, r19
     31c:	49 e2       	ldi	r20, 0x29	; 41
     31e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     320:	90 91 0f 01 	lds	r25, 0x010F
     324:	e9 2f       	mov	r30, r25
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	e7 30       	cpi	r30, 0x07	; 7
     32a:	f1 05       	cpc	r31, r1
     32c:	c8 f7       	brcc	.-14     	; 0x320 <kilo_start+0x1e>
     32e:	ec 5c       	subi	r30, 0xCC	; 204
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     336:	11 23       	and	r17, r17
     338:	09 f4       	brne	.+2      	; 0x33c <kilo_start+0x3a>
     33a:	fc c0       	rjmp	.+504    	; 0x534 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     33c:	c0 92 0f 01 	sts	0x010F, r12
     340:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     342:	fe 01       	movw	r30, r28
     344:	09 95       	icall
                break;
     346:	ec cf       	rjmp	.-40     	; 0x320 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     348:	80 91 3d 01 	lds	r24, 0x013D
     34c:	81 11       	cpse	r24, r1
     34e:	eb c0       	rjmp	.+470    	; 0x526 <kilo_start+0x224>
        cli();                                    // disable interrupts
     350:	f8 94       	cli
        adc_setup_conversion(6);
     352:	a0 92 7c 00 	sts	0x007C, r10
     356:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     35a:	80 91 7a 00 	lds	r24, 0x007A
     35e:	80 64       	ori	r24, 0x40	; 64
     360:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     364:	90 91 7a 00 	lds	r25, 0x007A
     368:	96 fd       	sbrc	r25, 6
     36a:	fc cf       	rjmp	.-8      	; 0x364 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     36c:	80 91 78 00 	lds	r24, 0x0078
     370:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     374:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     376:	8b 3a       	cpi	r24, 0xAB	; 171
     378:	e2 e0       	ldi	r30, 0x02	; 2
     37a:	9e 07       	cpc	r25, r30
     37c:	0c f0       	brlt	.+2      	; 0x380 <kilo_start+0x7e>
     37e:	ed c0       	rjmp	.+474    	; 0x55a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     380:	89 38       	cpi	r24, 0x89	; 137
     382:	f2 e0       	ldi	r31, 0x02	; 2
     384:	9f 07       	cpc	r25, r31
     386:	0c f0       	brlt	.+2      	; 0x38a <kilo_start+0x88>
     388:	ef c0       	rjmp	.+478    	; 0x568 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     38a:	87 36       	cpi	r24, 0x67	; 103
     38c:	92 40       	sbci	r25, 0x02	; 2
     38e:	0c f4       	brge	.+2      	; 0x392 <kilo_start+0x90>
     390:	ca c0       	rjmp	.+404    	; 0x526 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     392:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     394:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     396:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     398:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     39a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     39c:	3c 98       	cbi	0x07, 4	; 7
     39e:	c0 cf       	rjmp	.-128    	; 0x320 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3a0:	f8 94       	cli
                acomp_off();
     3a2:	80 b7       	in	r24, 0x30	; 48
     3a4:	87 7f       	andi	r24, 0xF7	; 247
     3a6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3a8:	80 91 7a 00 	lds	r24, 0x007A
     3ac:	8f 77       	andi	r24, 0x7F	; 127
     3ae:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3b2:	14 b8       	out	0x04, r1	; 4
     3b4:	17 b8       	out	0x07, r1	; 7
     3b6:	1a b8       	out	0x0a, r1	; 10
     3b8:	15 b8       	out	0x05, r1	; 5
     3ba:	18 b8       	out	0x08, r1	; 8
     3bc:	1b b8       	out	0x0b, r1	; 11
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	a8 95       	wdr
     3c4:	d0 92 60 00 	sts	0x0060, r13
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     3ce:	80 91 60 00 	lds	r24, 0x0060
     3d2:	80 64       	ori	r24, 0x40	; 64
     3d4:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     3d8:	93 b7       	in	r25, 0x33	; 51
     3da:	91 7f       	andi	r25, 0xF1	; 241
     3dc:	94 60       	ori	r25, 0x04	; 4
     3de:	93 bf       	out	0x33, r25	; 51
                cli();
     3e0:	f8 94       	cli
                sleep_enable();
     3e2:	83 b7       	in	r24, 0x33	; 51
     3e4:	81 60       	ori	r24, 0x01	; 1
     3e6:	83 bf       	out	0x33, r24	; 51
                sei();
     3e8:	78 94       	sei
                sleep_cpu();
     3ea:	88 95       	sleep
                sleep_disable();
     3ec:	83 b7       	in	r24, 0x33	; 51
     3ee:	8e 7f       	andi	r24, 0xFE	; 254
     3f0:	83 bf       	out	0x33, r24	; 51
                sei();
     3f2:	78 94       	sei
                rx_busy = 0;
     3f4:	10 92 3d 01 	sts	0x013D, r1
                ports_on();
     3f8:	52 9a       	sbi	0x0a, 2	; 10
     3fa:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     3fc:	80 91 7a 00 	lds	r24, 0x007A
     400:	80 68       	ori	r24, 0x80	; 128
     402:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     406:	87 e5       	ldi	r24, 0x57	; 87
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <kilo_start+0x108>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <kilo_start+0x10e>
     410:	00 00       	nop
                _delay_us(300);
                acomp_on();
     412:	80 b7       	in	r24, 0x30	; 48
     414:	88 61       	ori	r24, 0x18	; 24
     416:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     418:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     41a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     41c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     41e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     420:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     422:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     424:	ef e1       	ldi	r30, 0x1F	; 31
     426:	fe e4       	ldi	r31, 0x4E	; 78
     428:	31 97       	sbiw	r30, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <kilo_start+0x126>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <kilo_start+0x12c>
     42e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     430:	80 91 3d 01 	lds	r24, 0x013D
     434:	81 11       	cpse	r24, r1
     436:	81 c0       	rjmp	.+258    	; 0x53a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     438:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     43a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     43c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     43e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     440:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     442:	3c 98       	cbi	0x07, 4	; 7
     444:	6d cf       	rjmp	.-294    	; 0x320 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     446:	80 91 0d 01 	lds	r24, 0x010D
     44a:	81 11       	cpse	r24, r1
     44c:	41 c0       	rjmp	.+130    	; 0x4d0 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     44e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     452:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     456:	10 92 0e 01 	sts	0x010E, r1
     45a:	62 cf       	rjmp	.-316    	; 0x320 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     45c:	48 99       	sbic	0x09, 0	; 9
     45e:	ec cf       	rjmp	.-40     	; 0x438 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     460:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     462:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     464:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     466:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     468:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     46a:	3c 98       	cbi	0x07, 4	; 7
     46c:	8f ec       	ldi	r24, 0xCF	; 207
     46e:	97 e0       	ldi	r25, 0x07	; 7
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <kilo_start+0x16e>
     474:	00 c0       	rjmp	.+0      	; 0x476 <kilo_start+0x174>
     476:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     478:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     47a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     47c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     47e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     480:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     482:	3c 98       	cbi	0x07, 4	; 7
     484:	9f ef       	ldi	r25, 0xFF	; 255
     486:	e1 ee       	ldi	r30, 0xE1	; 225
     488:	f4 e0       	ldi	r31, 0x04	; 4
     48a:	91 50       	subi	r25, 0x01	; 1
     48c:	e0 40       	sbci	r30, 0x00	; 0
     48e:	f0 40       	sbci	r31, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <kilo_start+0x188>
     492:	00 c0       	rjmp	.+0      	; 0x494 <kilo_start+0x192>
     494:	00 00       	nop
     496:	44 cf       	rjmp	.-376    	; 0x320 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     498:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     49a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     49c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     49e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4a0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4a2:	3c 98       	cbi	0x07, 4	; 7
     4a4:	ef ec       	ldi	r30, 0xCF	; 207
     4a6:	f7 e0       	ldi	r31, 0x07	; 7
     4a8:	31 97       	sbiw	r30, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <kilo_start+0x1a6>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <kilo_start+0x1ac>
     4ae:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4b0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4b2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4b4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4b6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4b8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4ba:	3c 98       	cbi	0x07, 4	; 7
     4bc:	ff ef       	ldi	r31, 0xFF	; 255
     4be:	21 ee       	ldi	r18, 0xE1	; 225
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	f1 50       	subi	r31, 0x01	; 1
     4c4:	20 40       	sbci	r18, 0x00	; 0
     4c6:	80 40       	sbci	r24, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <kilo_start+0x1c0>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <kilo_start+0x1ca>
     4cc:	00 00       	nop
     4ce:	28 cf       	rjmp	.-432    	; 0x320 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4d0:	90 91 0d 01 	lds	r25, 0x010D
     4d4:	80 91 0e 01 	lds	r24, 0x010E
     4d8:	98 17       	cp	r25, r24
     4da:	09 f4       	brne	.+2      	; 0x4de <kilo_start+0x1dc>
     4dc:	21 cf       	rjmp	.-446    	; 0x320 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     4de:	80 91 0d 01 	lds	r24, 0x010D
     4e2:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     4e6:	80 91 0d 01 	lds	r24, 0x010D
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <kilo_start+0x1ee>
     4ee:	50 c0       	rjmp	.+160    	; 0x590 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4f0:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4f4:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4f8:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4fc:	82 30       	cpi	r24, 0x02	; 2
     4fe:	d9 f1       	breq	.+118    	; 0x576 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     500:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     504:	90 92 b4 00 	sts	0x00B4, r9
     508:	8f e2       	ldi	r24, 0x2F	; 47
     50a:	95 e7       	ldi	r25, 0x75	; 117
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <kilo_start+0x20a>
     510:	00 c0       	rjmp	.+0      	; 0x512 <kilo_start+0x210>
     512:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     514:	80 91 72 01 	lds	r24, 0x0172
     518:	90 91 71 01 	lds	r25, 0x0171
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     51c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     520:	80 93 b4 00 	sts	0x00B4, r24
     524:	fd ce       	rjmp	.-518    	; 0x320 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     526:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     528:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     52a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     52c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     52e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     530:	3c 98       	cbi	0x07, 4	; 7
     532:	f6 ce       	rjmp	.-532    	; 0x320 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     534:	f3 01       	movw	r30, r6
     536:	09 95       	icall
     538:	01 cf       	rjmp	.-510    	; 0x33c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     53a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     53c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     53e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     540:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     542:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     544:	3c 98       	cbi	0x07, 4	; 7
     546:	ff ef       	ldi	r31, 0xFF	; 255
     548:	20 e7       	ldi	r18, 0x70	; 112
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	f1 50       	subi	r31, 0x01	; 1
     54e:	20 40       	sbci	r18, 0x00	; 0
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <kilo_start+0x24a>
     554:	00 c0       	rjmp	.+0      	; 0x556 <kilo_start+0x254>
     556:	00 00       	nop
     558:	6f cf       	rjmp	.-290    	; 0x438 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     55a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     55c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     55e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     560:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     562:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     564:	3c 98       	cbi	0x07, 4	; 7
     566:	dc ce       	rjmp	.-584    	; 0x320 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     568:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     56a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     56c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     56e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     570:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     572:	3c 9a       	sbi	0x07, 4	; 7
     574:	d5 ce       	rjmp	.-598    	; 0x320 <kilo_start+0x1e>
     576:	ef e2       	ldi	r30, 0x2F	; 47
     578:	f5 e7       	ldi	r31, 0x75	; 117
     57a:	31 97       	sbiw	r30, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <kilo_start+0x278>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <kilo_start+0x27e>
     580:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     582:	80 91 5f 01 	lds	r24, 0x015F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     586:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     58a:	80 93 b4 00 	sts	0x00B4, r24
     58e:	c8 ce       	rjmp	.-624    	; 0x320 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     590:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     594:	10 92 b4 00 	sts	0x00B4, r1
     598:	8f e2       	ldi	r24, 0x2F	; 47
     59a:	95 e7       	ldi	r25, 0x75	; 117
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <kilo_start+0x29a>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <kilo_start+0x2a0>
     5a2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5a4:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5a8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5ac:	10 92 b4 00 	sts	0x00B4, r1
     5b0:	b7 ce       	rjmp	.-658    	; 0x320 <kilo_start+0x1e>

000005b2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <delay+0x10>
     5b4:	ef ec       	ldi	r30, 0xCF	; 207
     5b6:	f7 e0       	ldi	r31, 0x07	; 7
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <delay+0x6>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <delay+0xc>
     5be:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5c0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	b9 f7       	brne	.-18     	; 0x5b4 <delay+0x2>
     5c6:	08 95       	ret

000005c8 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5cc:	60 93 b4 00 	sts	0x00B4, r22
     5d0:	08 95       	ret

000005d2 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5d8:	80 93 b4 00 	sts	0x00B4, r24
     5dc:	8f e0       	ldi	r24, 0x0F	; 15
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	ef ec       	ldi	r30, 0xCF	; 207
     5e2:	f7 e0       	ldi	r31, 0x07	; 7
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <spinup_motors+0x12>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <spinup_motors+0x18>
     5ea:	00 00       	nop
     5ec:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5ee:	c1 f7       	brne	.-16     	; 0x5e0 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     5f0:	08 95       	ret

000005f2 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     5f2:	80 91 3d 01 	lds	r24, 0x013D
     5f6:	81 11       	cpse	r24, r1
     5f8:	1e c0       	rjmp	.+60     	; 0x636 <get_ambientlight+0x44>
        cli();
     5fa:	f8 94       	cli
        adc_setup_conversion(7);
     5fc:	87 e0       	ldi	r24, 0x07	; 7
     5fe:	80 93 7c 00 	sts	0x007C, r24
     602:	83 e8       	ldi	r24, 0x83	; 131
     604:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     608:	80 91 7a 00 	lds	r24, 0x007A
     60c:	80 64       	ori	r24, 0x40	; 64
     60e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     612:	80 91 7a 00 	lds	r24, 0x007A
     616:	86 fd       	sbrc	r24, 6
     618:	fc cf       	rjmp	.-8      	; 0x612 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     61a:	80 91 78 00 	lds	r24, 0x0078
     61e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     622:	10 92 7c 00 	sts	0x007C, r1
     626:	23 ea       	ldi	r18, 0xA3	; 163
     628:	20 93 7a 00 	sts	0x007A, r18
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     632:	78 94       	sei
     634:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     63a:	08 95       	ret

0000063c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     63c:	80 91 3d 01 	lds	r24, 0x013D
     640:	81 11       	cpse	r24, r1
     642:	1e c0       	rjmp	.+60     	; 0x680 <get_temperature+0x44>
        cli();
     644:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     646:	88 ec       	ldi	r24, 0xC8	; 200
     648:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     64c:	87 e8       	ldi	r24, 0x87	; 135
     64e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     652:	80 91 7a 00 	lds	r24, 0x007A
     656:	80 64       	ori	r24, 0x40	; 64
     658:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     65c:	80 91 7a 00 	lds	r24, 0x007A
     660:	86 fd       	sbrc	r24, 6
     662:	fc cf       	rjmp	.-8      	; 0x65c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     664:	80 91 78 00 	lds	r24, 0x0078
     668:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     66c:	10 92 7c 00 	sts	0x007C, r1
     670:	23 ea       	ldi	r18, 0xA3	; 163
     672:	20 93 7a 00 	sts	0x007A, r18
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     67c:	78 94       	sei
     67e:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     684:	08 95       	ret

00000686 <rand_hard>:

uint8_t rand_hard() {
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	e0 e0       	ldi	r30, 0x00	; 0
     690:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     692:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     694:	03 ea       	ldi	r16, 0xA3	; 163
     696:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     698:	d6 e0       	ldi	r29, 0x06	; 6
     69a:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     69c:	a1 e0       	ldi	r26, 0x01	; 1
     69e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6a0:	60 e8       	ldi	r22, 0x80	; 128
     6a2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6a4:	f8 94       	cli
            adc_setup_conversion(6);
     6a6:	d0 93 7c 00 	sts	0x007C, r29
     6aa:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6ae:	90 91 7a 00 	lds	r25, 0x007A
     6b2:	90 64       	ori	r25, 0x40	; 64
     6b4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6b8:	90 91 7a 00 	lds	r25, 0x007A
     6bc:	96 fd       	sbrc	r25, 6
     6be:	fc cf       	rjmp	.-8      	; 0x6b8 <rand_hard+0x32>
            a = ADCW&0x1;
     6c0:	20 91 78 00 	lds	r18, 0x0078
     6c4:	30 91 79 00 	lds	r19, 0x0079
     6c8:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     6ca:	90 91 7a 00 	lds	r25, 0x007A
     6ce:	90 64       	ori	r25, 0x40	; 64
     6d0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6d4:	90 91 7a 00 	lds	r25, 0x007A
     6d8:	96 fd       	sbrc	r25, 6
     6da:	fc cf       	rjmp	.-8      	; 0x6d4 <rand_hard+0x4e>
            b = ADCW&0x1;
     6dc:	40 91 78 00 	lds	r20, 0x0078
     6e0:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     6e4:	10 92 7c 00 	sts	0x007C, r1
     6e8:	00 93 7a 00 	sts	0x007A, r16
     6ec:	10 93 7b 00 	sts	0x007B, r17
            sei();
     6f0:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     6f2:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     6f4:	24 13       	cpse	r18, r20
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <rand_hard+0x78>
     6f8:	61 50       	subi	r22, 0x01	; 1
     6fa:	71 09       	sbc	r23, r1
     6fc:	99 f6       	brne	.-90     	; 0x6a4 <rand_hard+0x1e>
        if (a)
     6fe:	22 23       	and	r18, r18
     700:	39 f0       	breq	.+14     	; 0x710 <rand_hard+0x8a>
            num |= (1<<i);
     702:	9d 01       	movw	r18, r26
     704:	0e 2e       	mov	r0, r30
     706:	01 c0       	rjmp	.+2      	; 0x70a <rand_hard+0x84>
     708:	22 0f       	add	r18, r18
     70a:	0a 94       	dec	r0
     70c:	ea f7       	brpl	.-6      	; 0x708 <rand_hard+0x82>
     70e:	82 2b       	or	r24, r18
     710:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     712:	e8 30       	cpi	r30, 0x08	; 8
     714:	f1 05       	cpc	r31, r1
     716:	09 f0       	breq	.+2      	; 0x71a <rand_hard+0x94>
     718:	c3 cf       	rjmp	.-122    	; 0x6a0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	08 95       	ret

00000724 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     724:	80 91 00 01 	lds	r24, 0x0100
     728:	98 2f       	mov	r25, r24
     72a:	99 0f       	add	r25, r25
     72c:	99 0f       	add	r25, r25
     72e:	99 0f       	add	r25, r25
     730:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     732:	90 91 0c 01 	lds	r25, 0x010C
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	29 0f       	add	r18, r25
     73a:	20 93 0c 01 	sts	0x010C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     73e:	28 2f       	mov	r18, r24
     740:	22 95       	swap	r18
     742:	26 95       	lsr	r18
     744:	27 70       	andi	r18, 0x07	; 7
     746:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     748:	96 95       	lsr	r25
     74a:	96 95       	lsr	r25
     74c:	89 27       	eor	r24, r25
     74e:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     752:	08 95       	ret

00000754 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     754:	80 93 00 01 	sts	0x0100, r24
     758:	08 95       	ret

0000075a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     75a:	80 91 3d 01 	lds	r24, 0x013D
     75e:	81 11       	cpse	r24, r1
     760:	16 c0       	rjmp	.+44     	; 0x78e <get_voltage+0x34>
        cli();                                    // disable interrupts
     762:	f8 94       	cli
        adc_setup_conversion(6);
     764:	86 e0       	ldi	r24, 0x06	; 6
     766:	80 93 7c 00 	sts	0x007C, r24
     76a:	83 e8       	ldi	r24, 0x83	; 131
     76c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     770:	80 91 7a 00 	lds	r24, 0x007A
     774:	80 64       	ori	r24, 0x40	; 64
     776:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     77a:	80 91 7a 00 	lds	r24, 0x007A
     77e:	86 fd       	sbrc	r24, 6
     780:	fc cf       	rjmp	.-8      	; 0x77a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     782:	80 91 78 00 	lds	r24, 0x0078
     786:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     78a:	78 94       	sei
     78c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     792:	08 95       	ret

00000794 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     794:	2f 92       	push	r2
     796:	3f 92       	push	r3
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <estimate_distance+0x26>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <estimate_distance+0x28>
     7bc:	00 d0       	rcall	.+0      	; 0x7be <estimate_distance+0x2a>
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7c4:	dc 01       	movw	r26, r24
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	0d 90       	ld	r0, X+
     7ca:	bc 91       	ld	r27, X
     7cc:	a0 2d       	mov	r26, r0
     7ce:	be 83       	std	Y+6, r27	; 0x06
     7d0:	ad 83       	std	Y+5, r26	; 0x05
     7d2:	a4 38       	cpi	r26, 0x84	; 132
     7d4:	e3 e0       	ldi	r30, 0x03	; 3
     7d6:	be 07       	cpc	r27, r30
     7d8:	0c f0       	brlt	.+2      	; 0x7dc <estimate_distance+0x48>
     7da:	c9 c0       	rjmp	.+402    	; 0x96e <__stack+0x6f>
        if (dist->high_gain > kilo_irhigh[0]) {
     7dc:	80 91 17 01 	lds	r24, 0x0117
     7e0:	90 91 18 01 	lds	r25, 0x0118
     7e4:	8a 17       	cp	r24, r26
     7e6:	9b 07       	cpc	r25, r27
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <estimate_distance+0x58>
     7ea:	37 c1       	rjmp	.+622    	; 0xa5a <__stack+0x15b>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7ec:	00 91 19 01 	lds	r16, 0x0119
     7f0:	10 91 1a 01 	lds	r17, 0x011A
     7f4:	0a 17       	cp	r16, r26
     7f6:	1b 07       	cpc	r17, r27
     7f8:	08 f4       	brcc	.+2      	; 0x7fc <estimate_distance+0x68>
     7fa:	2f c2       	rjmp	.+1118   	; 0xc5a <__stack+0x35b>
     7fc:	00 91 1b 01 	lds	r16, 0x011B
     800:	10 91 1c 01 	lds	r17, 0x011C
     804:	0a 17       	cp	r16, r26
     806:	1b 07       	cpc	r17, r27
     808:	08 f4       	brcc	.+2      	; 0x80c <estimate_distance+0x78>
     80a:	2f c2       	rjmp	.+1118   	; 0xc6a <__stack+0x36b>
     80c:	00 91 1d 01 	lds	r16, 0x011D
     810:	10 91 1e 01 	lds	r17, 0x011E
     814:	0a 17       	cp	r16, r26
     816:	1b 07       	cpc	r17, r27
     818:	08 f4       	brcc	.+2      	; 0x81c <estimate_distance+0x88>
     81a:	2f c2       	rjmp	.+1118   	; 0xc7a <__stack+0x37b>
     81c:	00 91 1f 01 	lds	r16, 0x011F
     820:	10 91 20 01 	lds	r17, 0x0120
     824:	0a 17       	cp	r16, r26
     826:	1b 07       	cpc	r17, r27
     828:	08 f4       	brcc	.+2      	; 0x82c <estimate_distance+0x98>
     82a:	2f c2       	rjmp	.+1118   	; 0xc8a <__stack+0x38b>
     82c:	00 91 21 01 	lds	r16, 0x0121
     830:	10 91 22 01 	lds	r17, 0x0122
     834:	0a 17       	cp	r16, r26
     836:	1b 07       	cpc	r17, r27
     838:	08 f4       	brcc	.+2      	; 0x83c <estimate_distance+0xa8>
     83a:	ef c1       	rjmp	.+990    	; 0xc1a <__stack+0x31b>
     83c:	00 91 23 01 	lds	r16, 0x0123
     840:	10 91 24 01 	lds	r17, 0x0124
     844:	0a 17       	cp	r16, r26
     846:	1b 07       	cpc	r17, r27
     848:	08 f4       	brcc	.+2      	; 0x84c <estimate_distance+0xb8>
     84a:	27 c2       	rjmp	.+1102   	; 0xc9a <__stack+0x39b>
     84c:	00 91 25 01 	lds	r16, 0x0125
     850:	10 91 26 01 	lds	r17, 0x0126
     854:	0a 17       	cp	r16, r26
     856:	1b 07       	cpc	r17, r27
     858:	08 f4       	brcc	.+2      	; 0x85c <estimate_distance+0xc8>
     85a:	27 c2       	rjmp	.+1102   	; 0xcaa <__stack+0x3ab>
     85c:	00 91 27 01 	lds	r16, 0x0127
     860:	10 91 28 01 	lds	r17, 0x0128
     864:	0a 17       	cp	r16, r26
     866:	1b 07       	cpc	r17, r27
     868:	08 f4       	brcc	.+2      	; 0x86c <estimate_distance+0xd8>
     86a:	27 c2       	rjmp	.+1102   	; 0xcba <__stack+0x3bb>
     86c:	00 91 29 01 	lds	r16, 0x0129
     870:	10 91 2a 01 	lds	r17, 0x012A
     874:	0a 17       	cp	r16, r26
     876:	1b 07       	cpc	r17, r27
     878:	08 f4       	brcc	.+2      	; 0x87c <estimate_distance+0xe8>
     87a:	27 c2       	rjmp	.+1102   	; 0xcca <__stack+0x3cb>
     87c:	00 91 2b 01 	lds	r16, 0x012B
     880:	10 91 2c 01 	lds	r17, 0x012C
     884:	0a 17       	cp	r16, r26
     886:	1b 07       	cpc	r17, r27
     888:	08 f4       	brcc	.+2      	; 0x88c <estimate_distance+0xf8>
     88a:	27 c2       	rjmp	.+1102   	; 0xcda <__stack+0x3db>
     88c:	00 91 2d 01 	lds	r16, 0x012D
     890:	10 91 2e 01 	lds	r17, 0x012E
     894:	0a 17       	cp	r16, r26
     896:	1b 07       	cpc	r17, r27
     898:	08 f4       	brcc	.+2      	; 0x89c <estimate_distance+0x108>
     89a:	23 c2       	rjmp	.+1094   	; 0xce2 <__stack+0x3e3>
     89c:	00 91 2f 01 	lds	r16, 0x012F
     8a0:	10 91 30 01 	lds	r17, 0x0130
     8a4:	0a 17       	cp	r16, r26
     8a6:	1b 07       	cpc	r17, r27
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <estimate_distance+0x118>
     8aa:	23 c2       	rjmp	.+1094   	; 0xcf2 <__stack+0x3f3>
     8ac:	00 91 31 01 	lds	r16, 0x0131
     8b0:	10 91 32 01 	lds	r17, 0x0132
     8b4:	0a 17       	cp	r16, r26
     8b6:	1b 07       	cpc	r17, r27
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <estimate_distance+0x128>
     8ba:	23 c2       	rjmp	.+1094   	; 0xd02 <__stack+0x403>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	a0 ed       	ldi	r26, 0xD0	; 208
     8c2:	b0 e4       	ldi	r27, 0x40	; 64
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	ab 83       	std	Y+3, r26	; 0x03
     8ca:	bc 83       	std	Y+4, r27	; 0x04
     8cc:	4c e0       	ldi	r20, 0x0C	; 12
     8ce:	e4 2e       	mov	r14, r20
     8d0:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8d2:	f7 01       	movw	r30, r14
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	e9 5e       	subi	r30, 0xE9	; 233
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	b8 01       	movw	r22, r16
     8e2:	68 1b       	sub	r22, r24
     8e4:	79 0b       	sbc	r23, r25
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     8ee:	9b 01       	movw	r18, r22
     8f0:	ac 01       	movw	r20, r24
     8f2:	0e 94 3d 0a 	call	0x147a	; 0x147a <__addsf3>
     8f6:	6b 01       	movw	r12, r22
     8f8:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     8fa:	ad 81       	ldd	r26, Y+5	; 0x05
     8fc:	be 81       	ldd	r27, Y+6	; 0x06
     8fe:	bd 01       	movw	r22, r26
     900:	bb 0f       	add	r27, r27
     902:	88 0b       	sbc	r24, r24
     904:	99 0b       	sbc	r25, r25
     906:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__floatsisf>
     90a:	4b 01       	movw	r8, r22
     90c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     90e:	b8 01       	movw	r22, r16
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     918:	2b 01       	movw	r4, r22
     91a:	3c 01       	movw	r6, r24
     91c:	29 81       	ldd	r18, Y+1	; 0x01
     91e:	3a 81       	ldd	r19, Y+2	; 0x02
     920:	4b 81       	ldd	r20, Y+3	; 0x03
     922:	5c 81       	ldd	r21, Y+4	; 0x04
     924:	c7 01       	movw	r24, r14
     926:	b6 01       	movw	r22, r12
     928:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
     92c:	9b 01       	movw	r18, r22
     92e:	ac 01       	movw	r20, r24
     930:	c3 01       	movw	r24, r6
     932:	b2 01       	movw	r22, r4
     934:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__subsf3>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     93c:	c5 01       	movw	r24, r10
     93e:	b4 01       	movw	r22, r8
     940:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__subsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e2       	ldi	r20, 0x20	; 32
     94a:	51 e4       	ldi	r21, 0x41	; 65
     94c:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
            b=((int)((int)b/(int)slope));
     950:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__fixsfsi>
     954:	8b 01       	movw	r16, r22
     956:	c7 01       	movw	r24, r14
     958:	b6 01       	movw	r22, r12
     95a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__fixsfsi>
     95e:	ab 01       	movw	r20, r22
     960:	bc 01       	movw	r22, r24
     962:	c8 01       	movw	r24, r16
     964:	ba 01       	movw	r22, r20
     966:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodhi4>
            dist_high=b;
     96a:	16 2f       	mov	r17, r22
     96c:	77 c0       	rjmp	.+238    	; 0xa5c <__stack+0x15d>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     96e:	dc 01       	movw	r26, r24
     970:	cd 90       	ld	r12, X+
     972:	dc 90       	ld	r13, X
     974:	80 91 3e 01 	lds	r24, 0x013E
     978:	90 91 3f 01 	lds	r25, 0x013F
     97c:	8c 15       	cp	r24, r12
     97e:	9d 05       	cpc	r25, r13
     980:	08 f4       	brcc	.+2      	; 0x984 <__stack+0x85>
     982:	8c c0       	rjmp	.+280    	; 0xa9c <__stack+0x19d>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     984:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     986:	e0 90 40 01 	lds	r14, 0x0140
     98a:	f0 90 41 01 	lds	r15, 0x0141
     98e:	ec 14       	cp	r14, r12
     990:	fd 04       	cpc	r15, r13
     992:	08 f4       	brcc	.+2      	; 0x996 <__stack+0x97>
     994:	5e c1       	rjmp	.+700    	; 0xc52 <__stack+0x353>
     996:	e0 90 42 01 	lds	r14, 0x0142
     99a:	f0 90 43 01 	lds	r15, 0x0143
     99e:	ec 14       	cp	r14, r12
     9a0:	fd 04       	cpc	r15, r13
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	5e c1       	rjmp	.+700    	; 0xc62 <__stack+0x363>
     9a6:	e0 90 44 01 	lds	r14, 0x0144
     9aa:	f0 90 45 01 	lds	r15, 0x0145
     9ae:	ec 14       	cp	r14, r12
     9b0:	fd 04       	cpc	r15, r13
     9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	5e c1       	rjmp	.+700    	; 0xc72 <__stack+0x373>
     9b6:	e0 90 46 01 	lds	r14, 0x0146
     9ba:	f0 90 47 01 	lds	r15, 0x0147
     9be:	ec 14       	cp	r14, r12
     9c0:	fd 04       	cpc	r15, r13
     9c2:	08 f4       	brcc	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	5e c1       	rjmp	.+700    	; 0xc82 <__stack+0x383>
     9c6:	e0 90 48 01 	lds	r14, 0x0148
     9ca:	f0 90 49 01 	lds	r15, 0x0149
     9ce:	ec 14       	cp	r14, r12
     9d0:	fd 04       	cpc	r15, r13
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	c3 c0       	rjmp	.+390    	; 0xb5c <__stack+0x25d>
     9d6:	e0 90 4a 01 	lds	r14, 0x014A
     9da:	f0 90 4b 01 	lds	r15, 0x014B
     9de:	ec 14       	cp	r14, r12
     9e0:	fd 04       	cpc	r15, r13
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	56 c1       	rjmp	.+684    	; 0xc92 <__stack+0x393>
     9e6:	e0 90 4c 01 	lds	r14, 0x014C
     9ea:	f0 90 4d 01 	lds	r15, 0x014D
     9ee:	ec 14       	cp	r14, r12
     9f0:	fd 04       	cpc	r15, r13
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	56 c1       	rjmp	.+684    	; 0xca2 <__stack+0x3a3>
     9f6:	e0 90 4e 01 	lds	r14, 0x014E
     9fa:	f0 90 4f 01 	lds	r15, 0x014F
     9fe:	ec 14       	cp	r14, r12
     a00:	fd 04       	cpc	r15, r13
     a02:	08 f4       	brcc	.+2      	; 0xa06 <__stack+0x107>
     a04:	56 c1       	rjmp	.+684    	; 0xcb2 <__stack+0x3b3>
     a06:	e0 90 50 01 	lds	r14, 0x0150
     a0a:	f0 90 51 01 	lds	r15, 0x0151
     a0e:	ec 14       	cp	r14, r12
     a10:	fd 04       	cpc	r15, r13
     a12:	08 f4       	brcc	.+2      	; 0xa16 <__stack+0x117>
     a14:	56 c1       	rjmp	.+684    	; 0xcc2 <__stack+0x3c3>
     a16:	e0 90 52 01 	lds	r14, 0x0152
     a1a:	f0 90 53 01 	lds	r15, 0x0153
     a1e:	ec 14       	cp	r14, r12
     a20:	fd 04       	cpc	r15, r13
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x127>
     a24:	56 c1       	rjmp	.+684    	; 0xcd2 <__stack+0x3d3>
     a26:	e0 90 54 01 	lds	r14, 0x0154
     a2a:	f0 90 55 01 	lds	r15, 0x0155
     a2e:	ec 14       	cp	r14, r12
     a30:	fd 04       	cpc	r15, r13
     a32:	08 f4       	brcc	.+2      	; 0xa36 <__stack+0x137>
     a34:	5a c1       	rjmp	.+692    	; 0xcea <__stack+0x3eb>
     a36:	e0 90 56 01 	lds	r14, 0x0156
     a3a:	f0 90 57 01 	lds	r15, 0x0157
     a3e:	ec 14       	cp	r14, r12
     a40:	fd 04       	cpc	r15, r13
     a42:	08 f4       	brcc	.+2      	; 0xa46 <__stack+0x147>
     a44:	5a c1       	rjmp	.+692    	; 0xcfa <__stack+0x3fb>
     a46:	e0 90 58 01 	lds	r14, 0x0158
     a4a:	f0 90 59 01 	lds	r15, 0x0159
     a4e:	ec 14       	cp	r14, r12
     a50:	fd 04       	cpc	r15, r13
     a52:	08 f4       	brcc	.+2      	; 0xa56 <__stack+0x157>
     a54:	5a c1       	rjmp	.+692    	; 0xd0a <__stack+0x40b>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a56:	0a e5       	ldi	r16, 0x5A	; 90
     a58:	31 c0       	rjmp	.+98     	; 0xabc <__stack+0x1bd>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a5a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a5c:	ed 81       	ldd	r30, Y+5	; 0x05
     a5e:	fe 81       	ldd	r31, Y+6	; 0x06
     a60:	ed 3b       	cpi	r30, 0xBD	; 189
     a62:	f2 40       	sbci	r31, 0x02	; 2
     a64:	fc f4       	brge	.+62     	; 0xaa4 <__stack+0x1a5>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     a66:	81 e2       	ldi	r24, 0x21	; 33
     a68:	81 0f       	add	r24, r17
    }
}
     a6a:	26 96       	adiw	r28, 0x06	; 6
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	3f 90       	pop	r3
     a98:	2f 90       	pop	r2
     a9a:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     a9c:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     a9e:	81 e2       	ldi	r24, 0x21	; 33
     aa0:	80 0f       	add	r24, r16
     aa2:	e3 cf       	rjmp	.-58     	; 0xa6a <__stack+0x16b>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     aa4:	d1 01       	movw	r26, r2
     aa6:	cd 90       	ld	r12, X+
     aa8:	dc 90       	ld	r13, X
     aaa:	80 91 3e 01 	lds	r24, 0x013E
     aae:	90 91 3f 01 	lds	r25, 0x013F
     ab2:	8c 15       	cp	r24, r12
     ab4:	9d 05       	cpc	r25, r13
     ab6:	08 f0       	brcs	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	66 cf       	rjmp	.-308    	; 0x986 <__stack+0x87>
            dist_low=0;
     aba:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     abc:	1f 3f       	cpi	r17, 0xFF	; 255
     abe:	79 f3       	breq	.-34     	; 0xa9e <__stack+0x19f>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     ac0:	ed 81       	ldd	r30, Y+5	; 0x05
     ac2:	fe 81       	ldd	r31, Y+6	; 0x06
     ac4:	bf 01       	movw	r22, r30
     ac6:	ff 0f       	add	r31, r31
     ac8:	88 0b       	sbc	r24, r24
     aca:	99 0b       	sbc	r25, r25
     acc:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__floatsisf>
     ad0:	6b 01       	movw	r12, r22
     ad2:	7c 01       	movw	r14, r24
     ad4:	61 2f       	mov	r22, r17
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     ae0:	4b 01       	movw	r8, r22
     ae2:	5c 01       	movw	r10, r24
     ae4:	a7 01       	movw	r20, r14
     ae6:	96 01       	movw	r18, r12
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	81 e6       	ldi	r24, 0x61	; 97
     aee:	94 e4       	ldi	r25, 0x44	; 68
     af0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__subsf3>
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	c5 01       	movw	r24, r10
     afa:	b4 01       	movw	r22, r8
     afc:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
     b00:	4b 01       	movw	r8, r22
     b02:	5c 01       	movw	r10, r24
     b04:	60 2f       	mov	r22, r16
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     b10:	2b 01       	movw	r4, r22
     b12:	3c 01       	movw	r6, r24
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	4f e2       	ldi	r20, 0x2F	; 47
     b1a:	54 e4       	ldi	r21, 0x44	; 68
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__subsf3>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
     b28:	c3 01       	movw	r24, r6
     b2a:	b2 01       	movw	r22, r4
     b2c:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	c5 01       	movw	r24, r10
     b36:	b4 01       	movw	r22, r8
     b38:	0e 94 3d 0a 	call	0x147a	; 0x147a <__addsf3>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	48 e4       	ldi	r20, 0x48	; 72
     b42:	53 e4       	ldi	r21, 0x43	; 67
     b44:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divsf3>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	44 e0       	ldi	r20, 0x04	; 4
     b4e:	52 e4       	ldi	r21, 0x42	; 66
     b50:	0e 94 3d 0a 	call	0x147a	; 0x147a <__addsf3>
     b54:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixunssfsi>
     b58:	86 2f       	mov	r24, r22
     b5a:	87 cf       	rjmp	.-242    	; 0xa6a <__stack+0x16b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b5c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	fc 01       	movw	r30, r24
     b68:	e4 5c       	subi	r30, 0xC4	; 196
     b6a:	fe 4f       	sbci	r31, 0xFE	; 254
     b6c:	80 81       	ld	r24, Z
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	b7 01       	movw	r22, r14
     b72:	68 1b       	sub	r22, r24
     b74:	79 0b       	sbc	r23, r25
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	0e 94 3d 0a 	call	0x147a	; 0x147a <__addsf3>
     b86:	4b 01       	movw	r8, r22
     b88:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     b8a:	b6 01       	movw	r22, r12
     b8c:	dd 0c       	add	r13, r13
     b8e:	88 0b       	sbc	r24, r24
     b90:	99 0b       	sbc	r25, r25
     b92:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__floatsisf>
     b96:	2b 01       	movw	r4, r22
     b98:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     b9a:	b7 01       	movw	r22, r14
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
     ba8:	60 2f       	mov	r22, r16
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	a9 01       	movw	r20, r18
     bc6:	0e 94 3d 0a 	call	0x147a	; 0x147a <__addsf3>
     bca:	a5 01       	movw	r20, r10
     bcc:	94 01       	movw	r18, r8
     bce:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__subsf3>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     be2:	c3 01       	movw	r24, r6
     be4:	b2 01       	movw	r22, r4
     be6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__subsf3>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
                b=((int)((int)b/(int)slope));
     bf6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__fixsfsi>
     bfa:	7b 01       	movw	r14, r22
     bfc:	c5 01       	movw	r24, r10
     bfe:	b4 01       	movw	r22, r8
     c00:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__fixsfsi>
     c04:	ab 01       	movw	r20, r22
     c06:	bc 01       	movw	r22, r24
     c08:	c7 01       	movw	r24, r14
     c0a:	ba 01       	movw	r22, r20
     c0c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodhi4>
                dist_low=b;
     c10:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c12:	6f 3f       	cpi	r22, 0xFF	; 255
     c14:	09 f0       	breq	.+2      	; 0xc18 <__stack+0x319>
     c16:	52 cf       	rjmp	.-348    	; 0xabc <__stack+0x1bd>
     c18:	26 cf       	rjmp	.-436    	; 0xa66 <__stack+0x167>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c1a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c1c:	85 e0       	ldi	r24, 0x05	; 5
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	7c 01       	movw	r14, r24
     c22:	f1 e0       	ldi	r31, 0x01	; 1
     c24:	ef 1a       	sub	r14, r31
     c26:	f1 08       	sbc	r15, r1
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__floatunsisf>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	5f e3       	ldi	r21, 0x3F	; 63
     c3a:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3>
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	0e 94 3d 0a 	call	0x147a	; 0x147a <__addsf3>
     c48:	69 83       	std	Y+1, r22	; 0x01
     c4a:	7a 83       	std	Y+2, r23	; 0x02
     c4c:	8b 83       	std	Y+3, r24	; 0x03
     c4e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     c50:	40 ce       	rjmp	.-896    	; 0x8d2 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c52:	01 e0       	ldi	r16, 0x01	; 1
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	84 cf       	rjmp	.-248    	; 0xb62 <__stack+0x263>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	df cf       	rjmp	.-66     	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c62:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	7c cf       	rjmp	.-264    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c6a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	d7 cf       	rjmp	.-82     	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c72:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	74 cf       	rjmp	.-280    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c7a:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	cf cf       	rjmp	.-98     	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c82:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	6c cf       	rjmp	.-296    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c8a:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	c7 cf       	rjmp	.-114    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c92:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     c94:	86 e0       	ldi	r24, 0x06	; 6
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	64 cf       	rjmp	.-312    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c9a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     c9c:	86 e0       	ldi	r24, 0x06	; 6
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	bf cf       	rjmp	.-130    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca2:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	5c cf       	rjmp	.-328    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     caa:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cac:	87 e0       	ldi	r24, 0x07	; 7
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	b7 cf       	rjmp	.-146    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb2:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     cb4:	88 e0       	ldi	r24, 0x08	; 8
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	54 cf       	rjmp	.-344    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cba:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	af cf       	rjmp	.-162    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc2:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     cc4:	89 e0       	ldi	r24, 0x09	; 9
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	4c cf       	rjmp	.-360    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cca:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     ccc:	89 e0       	ldi	r24, 0x09	; 9
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a7 cf       	rjmp	.-178    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd2:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	44 cf       	rjmp	.-376    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cda:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     cdc:	8a e0       	ldi	r24, 0x0A	; 10
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9f cf       	rjmp	.-194    	; 0xc20 <__stack+0x321>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce2:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     ce4:	8b e0       	ldi	r24, 0x0B	; 11
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9b cf       	rjmp	.-202    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cea:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     cec:	8b e0       	ldi	r24, 0x0B	; 11
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	38 cf       	rjmp	.-400    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf2:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     cf4:	8c e0       	ldi	r24, 0x0C	; 12
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	93 cf       	rjmp	.-218    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cfa:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     cfc:	8c e0       	ldi	r24, 0x0C	; 12
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	30 cf       	rjmp	.-416    	; 0xb62 <__stack+0x263>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d02:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d04:	8d e0       	ldi	r24, 0x0D	; 13
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	8b cf       	rjmp	.-234    	; 0xc20 <__stack+0x321>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d0a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	28 cf       	rjmp	.-432    	; 0xb62 <__stack+0x263>

00000d12 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
    tx_clock += tx_increment;
     d34:	20 91 5d 01 	lds	r18, 0x015D
     d38:	30 91 5e 01 	lds	r19, 0x015E
     d3c:	80 91 5b 01 	lds	r24, 0x015B
     d40:	90 91 5c 01 	lds	r25, 0x015C
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	90 93 5e 01 	sts	0x015E, r25
     d4c:	80 93 5d 01 	sts	0x015D, r24
    tx_increment = 0xFF;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	90 93 5c 01 	sts	0x015C, r25
     d58:	80 93 5b 01 	sts	0x015B, r24
    OCR0A = tx_increment;
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d60:	80 91 39 01 	lds	r24, 0x0139
     d64:	90 91 3a 01 	lds	r25, 0x013A
     d68:	a0 91 3b 01 	lds	r26, 0x013B
     d6c:	b0 91 3c 01 	lds	r27, 0x013C
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
     d76:	80 93 39 01 	sts	0x0139, r24
     d7a:	90 93 3a 01 	sts	0x013A, r25
     d7e:	a0 93 3b 01 	sts	0x013B, r26
     d82:	b0 93 3c 01 	sts	0x013C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     d86:	80 91 3d 01 	lds	r24, 0x013D
     d8a:	81 11       	cpse	r24, r1
     d8c:	0f c0       	rjmp	.+30     	; 0xdac <__vector_14+0x9a>
     d8e:	80 91 6c 01 	lds	r24, 0x016C
     d92:	90 91 6d 01 	lds	r25, 0x016D
     d96:	20 91 5d 01 	lds	r18, 0x015D
     d9a:	30 91 5e 01 	lds	r19, 0x015E
     d9e:	82 17       	cp	r24, r18
     da0:	93 07       	cpc	r25, r19
     da2:	20 f4       	brcc	.+8      	; 0xdac <__vector_14+0x9a>
     da4:	80 91 0f 01 	lds	r24, 0x010F
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	89 f0       	breq	.+34     	; 0xdce <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     dce:	e0 91 03 01 	lds	r30, 0x0103
     dd2:	f0 91 04 01 	lds	r31, 0x0104
     dd6:	09 95       	icall
        if (msg) {
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	41 f3       	breq	.-48     	; 0xdac <__vector_14+0x9a>
            if (message_send(msg)) {
     ddc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <message_send>
     de0:	81 11       	cpse	r24, r1
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     de4:	0e 94 98 0c 	call	0x1930	; 0x1930 <rand>
     de8:	99 27       	eor	r25, r25
     dea:	90 93 5c 01 	sts	0x015C, r25
     dee:	80 93 5b 01 	sts	0x015B, r24
                OCR0A = tx_increment;
     df2:	87 bd       	out	0x27, r24	; 39
     df4:	db cf       	rjmp	.-74     	; 0xdac <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     df6:	e0 91 01 01 	lds	r30, 0x0101
     dfa:	f0 91 02 01 	lds	r31, 0x0102
     dfe:	09 95       	icall
                tx_clock = 0;
     e00:	10 92 5e 01 	sts	0x015E, r1
     e04:	10 92 5d 01 	sts	0x015D, r1
     e08:	d1 cf       	rjmp	.-94     	; 0xdac <__vector_14+0x9a>

00000e0a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e0a:	80 ff       	sbrs	r24, 0
     e0c:	11 c0       	rjmp	.+34     	; 0xe30 <set_color+0x26>
        DDRD |= (1<<5);
     e0e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e10:	81 ff       	sbrs	r24, 1
     e12:	11 c0       	rjmp	.+34     	; 0xe36 <set_color+0x2c>
        DDRD |= (1<<4);
     e14:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e16:	82 ff       	sbrs	r24, 2
     e18:	11 c0       	rjmp	.+34     	; 0xe3c <set_color+0x32>
        DDRC |= (1<<3);
     e1a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e1c:	83 ff       	sbrs	r24, 3
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <set_color+0x38>
        DDRC |= (1<<2);
     e20:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e22:	84 ff       	sbrs	r24, 4
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <set_color+0x3e>
        DDRC |= (1<<5);
     e26:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e28:	85 fd       	sbrc	r24, 5
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e2c:	3c 98       	cbi	0x07, 4	; 7
     e2e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e30:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e32:	81 fd       	sbrc	r24, 1
     e34:	ef cf       	rjmp	.-34     	; 0xe14 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e36:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e38:	82 fd       	sbrc	r24, 2
     e3a:	ef cf       	rjmp	.-34     	; 0xe1a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e3c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e3e:	83 fd       	sbrc	r24, 3
     e40:	ef cf       	rjmp	.-34     	; 0xe20 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e42:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e44:	84 fd       	sbrc	r24, 4
     e46:	ef cf       	rjmp	.-34     	; 0xe26 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e48:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e4a:	85 ff       	sbrs	r24, 5
     e4c:	ef cf       	rjmp	.-34     	; 0xe2c <set_color+0x22>
        DDRC |= (1<<4);
     e4e:	3c 9a       	sbi	0x07, 4	; 7
     e50:	08 95       	ret

00000e52 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
    rx_timer_off();
     e60:	10 92 81 00 	sts	0x0081, r1
     e64:	10 92 85 00 	sts	0x0085, r1
     e68:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 93 16 01 	sts	0x0116, r24
    rx_leadingbyte = 1;
     e72:	80 93 5a 01 	sts	0x015A, r24
    rx_busy = 0;
     e76:	10 92 3d 01 	sts	0x013D, r1
    adc_trigger_high_gain();
     e7a:	10 92 7c 00 	sts	0x007C, r1
     e7e:	93 ea       	ldi	r25, 0xA3	; 163
     e80:	90 93 7a 00 	sts	0x007A, r25
     e84:	80 93 7b 00 	sts	0x007B, r24
}
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ebc:	20 91 84 00 	lds	r18, 0x0084
     ec0:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	40 93 3d 01 	sts	0x013D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     eca:	80 91 16 01 	lds	r24, 0x0116
     ece:	88 23       	and	r24, r24
     ed0:	a9 f1       	breq	.+106    	; 0xf3c <__vector_23+0xa6>
        rx_timer_on();
     ed2:	10 92 85 00 	sts	0x0085, r1
     ed6:	10 92 84 00 	sts	0x0084, r1
     eda:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     ede:	10 92 6e 01 	sts	0x016E, r1
        rx_leadingbit = 0;
     ee2:	10 92 16 01 	sts	0x0116, r1
        if (rx_leadingbyte) {
     ee6:	80 91 5a 01 	lds	r24, 0x015A
     eea:	88 23       	and	r24, r24
     eec:	a1 f0       	breq	.+40     	; 0xf16 <__vector_23+0x80>
            adc_finish_conversion();
     eee:	80 91 7a 00 	lds	r24, 0x007A
     ef2:	86 fd       	sbrc	r24, 6
     ef4:	fc cf       	rjmp	.-8      	; 0xeee <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     ef6:	80 91 78 00 	lds	r24, 0x0078
     efa:	90 91 79 00 	lds	r25, 0x0079
     efe:	90 93 38 01 	sts	0x0138, r25
     f02:	80 93 37 01 	sts	0x0137, r24
            adc_trigger_low_gain();
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 7c 00 	sts	0x007C, r24
     f0c:	93 ea       	ldi	r25, 0xA3	; 163
     f0e:	90 93 7a 00 	sts	0x007A, r25
     f12:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f3c:	c9 01       	movw	r24, r18
     f3e:	87 58       	subi	r24, 0x87	; 135
     f40:	91 09       	sbc	r25, r1
     f42:	84 37       	cpi	r24, 0x74	; 116
     f44:	99 40       	sbci	r25, 0x09	; 9
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__vector_23+0xb4>
     f48:	52 c0       	rjmp	.+164    	; 0xfee <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f4a:	26 58       	subi	r18, 0x86	; 134
     f4c:	31 09       	sbc	r19, r1
     f4e:	a4 ef       	ldi	r26, 0xF4	; 244
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
     f56:	aa 27       	eor	r26, r26
     f58:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	91 05       	cpc	r25, r1
     f5e:	a1 05       	cpc	r26, r1
     f60:	b1 05       	cpc	r27, r1
     f62:	08 f4       	brcc	.+2      	; 0xf66 <__vector_23+0xd0>
     f64:	7b c0       	rjmp	.+246    	; 0x105c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f66:	40 93 16 01 	sts	0x0116, r20
                if (rx_leadingbyte) {
     f6a:	80 91 5a 01 	lds	r24, 0x015A
     f6e:	81 11       	cpse	r24, r1
     f70:	52 c0       	rjmp	.+164    	; 0x1016 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f72:	80 91 34 01 	lds	r24, 0x0134
     f76:	e8 2f       	mov	r30, r24
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	e0 5a       	subi	r30, 0xA0	; 160
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	90 91 6e 01 	lds	r25, 0x016E
     f82:	90 83       	st	Z, r25
                    rx_byteindex++;
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	80 93 34 01 	sts	0x0134, r24
                    if (rx_byteindex == sizeof(message_t)) {
     f8a:	8c 30       	cpi	r24, 0x0C	; 12
     f8c:	21 f6       	brne	.-120    	; 0xf16 <__vector_23+0x80>
                        rx_timer_off();
     f8e:	10 92 81 00 	sts	0x0081, r1
     f92:	10 92 85 00 	sts	0x0085, r1
     f96:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     f9a:	40 93 5a 01 	sts	0x015A, r20
                        rx_busy = 0;
     f9e:	10 92 3d 01 	sts	0x013D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     fa2:	c0 91 6a 01 	lds	r28, 0x016A
     fa6:	d0 91 6b 01 	lds	r29, 0x016B
     faa:	80 e6       	ldi	r24, 0x60	; 96
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 55 09 	call	0x12aa	; 0x12aa <message_crc>
     fb2:	c8 17       	cp	r28, r24
     fb4:	d9 07       	cpc	r29, r25
     fb6:	09 f0       	breq	.+2      	; 0xfba <__vector_23+0x124>
     fb8:	ae cf       	rjmp	.-164    	; 0xf16 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fba:	80 91 69 01 	lds	r24, 0x0169
     fbe:	87 ff       	sbrs	r24, 7
     fc0:	61 c0       	rjmp	.+194    	; 0x1084 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fc2:	98 e7       	ldi	r25, 0x78	; 120
     fc4:	98 0f       	add	r25, r24
     fc6:	93 30       	cpi	r25, 0x03	; 3
     fc8:	30 f0       	brcs	.+12     	; 0xfd6 <__vector_23+0x140>
        motors_off();
     fca:	53 98       	cbi	0x0a, 3	; 10
     fcc:	23 98       	cbi	0x04, 3	; 4
     fce:	10 92 b4 00 	sts	0x00B4, r1
     fd2:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	fc 01       	movw	r30, r24
     fda:	e0 58       	subi	r30, 0x80	; 128
     fdc:	f1 09       	sbc	r31, r1
     fde:	eb 30       	cpi	r30, 0x0B	; 11
     fe0:	f1 05       	cpc	r31, r1
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <__vector_23+0x150>
     fe4:	98 cf       	rjmp	.-208    	; 0xf16 <__vector_23+0x80>
     fe6:	e5 5c       	subi	r30, 0xC5	; 197
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
     fee:	10 92 81 00 	sts	0x0081, r1
     ff2:	10 92 85 00 	sts	0x0085, r1
     ff6:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
     ffa:	40 93 16 01 	sts	0x0116, r20
            rx_leadingbyte = 1;
     ffe:	40 93 5a 01 	sts	0x015A, r20
            rx_busy = 0;
    1002:	10 92 3d 01 	sts	0x013D, r1
            adc_trigger_high_gain();
    1006:	10 92 7c 00 	sts	0x007C, r1
    100a:	83 ea       	ldi	r24, 0xA3	; 163
    100c:	80 93 7a 00 	sts	0x007A, r24
    1010:	40 93 7b 00 	sts	0x007B, r20
    1014:	80 cf       	rjmp	.-256    	; 0xf16 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1016:	80 91 7a 00 	lds	r24, 0x007A
    101a:	86 fd       	sbrc	r24, 6
    101c:	fc cf       	rjmp	.-8      	; 0x1016 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    101e:	80 91 78 00 	lds	r24, 0x0078
    1022:	90 91 79 00 	lds	r25, 0x0079
    1026:	90 93 36 01 	sts	0x0136, r25
    102a:	80 93 35 01 	sts	0x0135, r24
                    adc_trigger_high_gain();
    102e:	10 92 7c 00 	sts	0x007C, r1
    1032:	83 ea       	ldi	r24, 0xA3	; 163
    1034:	80 93 7a 00 	sts	0x007A, r24
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    103e:	90 91 6e 01 	lds	r25, 0x016E
    1042:	99 23       	and	r25, r25
    1044:	d1 f0       	breq	.+52     	; 0x107a <__vector_23+0x1e4>
                        rx_timer_off();
    1046:	10 92 81 00 	sts	0x0081, r1
    104a:	10 92 85 00 	sts	0x0085, r1
    104e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1052:	80 93 5a 01 	sts	0x015A, r24
                        rx_busy = 0;
    1056:	10 92 3d 01 	sts	0x013D, r1
    105a:	5d cf       	rjmp	.-326    	; 0xf16 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <__vector_23+0x1d2>
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	8a 95       	dec	r24
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <__vector_23+0x1ce>
    106c:	cf 01       	movw	r24, r30
    106e:	90 91 6e 01 	lds	r25, 0x016E
    1072:	89 2b       	or	r24, r25
    1074:	80 93 6e 01 	sts	0x016E, r24
    1078:	4e cf       	rjmp	.-356    	; 0xf16 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    107a:	10 92 5a 01 	sts	0x015A, r1
                        rx_byteindex = 0;
    107e:	10 92 34 01 	sts	0x0134, r1
    1082:	49 cf       	rjmp	.-366    	; 0xf16 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1084:	e0 91 05 01 	lds	r30, 0x0105
    1088:	f0 91 06 01 	lds	r31, 0x0106
    108c:	65 e3       	ldi	r22, 0x35	; 53
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	80 e6       	ldi	r24, 0x60	; 96
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	09 95       	icall
    1096:	3f cf       	rjmp	.-386    	; 0xf16 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1098:	80 91 60 01 	lds	r24, 0x0160
    109c:	82 30       	cpi	r24, 0x02	; 2
    109e:	09 f4       	brne	.+2      	; 0x10a2 <__vector_23+0x20c>
    10a0:	dd c0       	rjmp	.+442    	; 0x125c <__vector_23+0x3c6>
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <__vector_23+0x210>
    10a4:	ba c0       	rjmp	.+372    	; 0x121a <__vector_23+0x384>
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	09 f4       	brne	.+2      	; 0x10ac <__vector_23+0x216>
    10aa:	c6 c0       	rjmp	.+396    	; 0x1238 <__vector_23+0x3a2>
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__vector_23+0x21c>
    10b0:	b1 c0       	rjmp	.+354    	; 0x1214 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10b2:	80 91 0d 01 	lds	r24, 0x010D
    10b6:	90 91 66 01 	lds	r25, 0x0166
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <__vector_23+0x22a>
    10be:	e3 c0       	rjmp	.+454    	; 0x1286 <__vector_23+0x3f0>
    10c0:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    10c4:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    10c8:	23 e0       	ldi	r18, 0x03	; 3
    10ca:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    10ce:	80 93 71 01 	sts	0x0171, r24
                        kilo_straight_right = calibmsg->straight_right;
    10d2:	90 93 72 01 	sts	0x0172, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10d6:	80 91 0f 01 	lds	r24, 0x010F
    10da:	86 30       	cpi	r24, 0x06	; 6
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <__vector_23+0x24a>
    10de:	1b cf       	rjmp	.-458    	; 0xf16 <__vector_23+0x80>
                motors_on();
    10e0:	53 9a       	sbi	0x0a, 3	; 10
    10e2:	23 9a       	sbi	0x04, 3	; 4
    10e4:	10 92 b4 00 	sts	0x00B4, r1
    10e8:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    10ec:	86 e0       	ldi	r24, 0x06	; 6
    10ee:	80 93 0f 01 	sts	0x010F, r24
    10f2:	11 cf       	rjmp	.-478    	; 0xf16 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10f4:	80 91 0f 01 	lds	r24, 0x010F
    10f8:	86 30       	cpi	r24, 0x06	; 6
    10fa:	99 f0       	breq	.+38     	; 0x1122 <__vector_23+0x28c>
                motors_on();
    10fc:	53 9a       	sbi	0x0a, 3	; 10
    10fe:	23 9a       	sbi	0x04, 3	; 4
    1100:	10 92 b4 00 	sts	0x00B4, r1
    1104:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1108:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    110a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    110c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    110e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1110:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1112:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1114:	10 92 0d 01 	sts	0x010D, r1
    1118:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    111c:	86 e0       	ldi	r24, 0x06	; 6
    111e:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9c 01       	movw	r18, r24
    1128:	00 90 60 01 	lds	r0, 0x0160
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__vector_23+0x29c>
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <__vector_23+0x298>
    1136:	80 91 6f 01 	lds	r24, 0x016F
    113a:	90 91 70 01 	lds	r25, 0x0170
    113e:	82 23       	and	r24, r18
    1140:	93 23       	and	r25, r19
    1142:	89 2b       	or	r24, r25
    1144:	09 f0       	breq	.+2      	; 0x1148 <__vector_23+0x2b2>
    1146:	86 c0       	rjmp	.+268    	; 0x1254 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1148:	10 92 0d 01 	sts	0x010D, r1
    114c:	e4 ce       	rjmp	.-568    	; 0xf16 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 0f 01 	sts	0x010F, r24
    1154:	e0 ce       	rjmp	.-576    	; 0xf16 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1156:	e0 e0       	ldi	r30, 0x00	; 0
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    115c:	80 91 6e 00 	lds	r24, 0x006E
    1160:	8d 7f       	andi	r24, 0xFD	; 253
    1162:	80 93 6e 00 	sts	0x006E, r24
    1166:	16 bc       	out	0x26, r1	; 38
            bootload();
    1168:	e0 e0       	ldi	r30, 0x00	; 0
    116a:	f0 e7       	ldi	r31, 0x70	; 112
    116c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    116e:	10 92 0f 01 	sts	0x010F, r1
    1172:	d1 ce       	rjmp	.-606    	; 0xf16 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	80 93 0f 01 	sts	0x010F, r24
    117a:	cd ce       	rjmp	.-614    	; 0xf16 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	80 93 0f 01 	sts	0x010F, r24
    1182:	c9 ce       	rjmp	.-622    	; 0xf16 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1184:	80 91 0f 01 	lds	r24, 0x010F
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	09 f4       	brne	.+2      	; 0x118e <__vector_23+0x2f8>
    118c:	c4 ce       	rjmp	.-632    	; 0xf16 <__vector_23+0x80>
    118e:	80 91 0f 01 	lds	r24, 0x010F
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	09 f4       	brne	.+2      	; 0x1198 <__vector_23+0x302>
    1196:	bf ce       	rjmp	.-642    	; 0xf16 <__vector_23+0x80>
                motors_on();
    1198:	53 9a       	sbi	0x0a, 3	; 10
    119a:	23 9a       	sbi	0x04, 3	; 4
    119c:	10 92 b4 00 	sts	0x00B4, r1
    11a0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	80 93 0f 01 	sts	0x010F, r24
    11aa:	b5 ce       	rjmp	.-662    	; 0xf16 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11ac:	80 91 0f 01 	lds	r24, 0x010F
    11b0:	86 30       	cpi	r24, 0x06	; 6
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <__vector_23+0x320>
    11b4:	b0 ce       	rjmp	.-672    	; 0xf16 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11b6:	60 91 6f 01 	lds	r22, 0x016F
    11ba:	80 eb       	ldi	r24, 0xB0	; 176
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 b0 0c 	call	0x1960	; 0x1960 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11c2:	60 91 70 01 	lds	r22, 0x0170
    11c6:	81 eb       	ldi	r24, 0xB1	; 177
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 b0 0c 	call	0x1960	; 0x1960 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    11ce:	60 91 73 01 	lds	r22, 0x0173
    11d2:	85 e0       	ldi	r24, 0x05	; 5
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 b0 0c 	call	0x1960	; 0x1960 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    11da:	60 91 5f 01 	lds	r22, 0x015F
    11de:	89 e0       	ldi	r24, 0x09	; 9
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 b0 0c 	call	0x1960	; 0x1960 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    11e6:	60 91 71 01 	lds	r22, 0x0171
    11ea:	8c e0       	ldi	r24, 0x0C	; 12
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 b0 0c 	call	0x1960	; 0x1960 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    11f2:	60 91 72 01 	lds	r22, 0x0172
    11f6:	84 e1       	ldi	r24, 0x14	; 20
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 b0 0c 	call	0x1960	; 0x1960 <eeprom_write_byte>
                        motors_off();
    11fe:	53 98       	cbi	0x0a, 3	; 10
    1200:	23 98       	cbi	0x04, 3	; 4
    1202:	10 92 b4 00 	sts	0x00B4, r1
    1206:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 0f 01 	sts	0x010F, r24
    1210:	80 91 60 01 	lds	r24, 0x0160
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1214:	81 11       	cpse	r24, r1
    1216:	5f cf       	rjmp	.-322    	; 0x10d6 <__vector_23+0x240>
    1218:	7e ce       	rjmp	.-772    	; 0xf16 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    121a:	88 23       	and	r24, r24
    121c:	39 f2       	breq	.-114    	; 0x11ac <__vector_23+0x316>
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	c9 f7       	brne	.-14     	; 0x1214 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1222:	80 91 61 01 	lds	r24, 0x0161
    1226:	90 91 62 01 	lds	r25, 0x0162
    122a:	90 93 70 01 	sts	0x0170, r25
    122e:	80 93 6f 01 	sts	0x016F, r24
                    cur_motion = MOVE_STOP;
    1232:	10 92 0d 01 	sts	0x010D, r1
    1236:	4f cf       	rjmp	.-354    	; 0x10d6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1238:	80 91 0d 01 	lds	r24, 0x010D
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	71 f1       	breq	.+92     	; 0x129c <__vector_23+0x406>
    1240:	80 91 64 01 	lds	r24, 0x0164
                        prev_motion = MOVE_STOP;
    1244:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    124e:	80 93 5f 01 	sts	0x015F, r24
    1252:	41 cf       	rjmp	.-382    	; 0x10d6 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 0d 01 	sts	0x010D, r24
    125a:	5d ce       	rjmp	.-838    	; 0xf16 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    125c:	80 91 0d 01 	lds	r24, 0x010D
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	51 f0       	breq	.+20     	; 0x1278 <__vector_23+0x3e2>
    1264:	80 91 63 01 	lds	r24, 0x0163
                        prev_motion = MOVE_STOP;
    1268:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    1272:	80 93 73 01 	sts	0x0173, r24
    1276:	2f cf       	rjmp	.-418    	; 0x10d6 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1278:	80 91 63 01 	lds	r24, 0x0163
    127c:	90 91 73 01 	lds	r25, 0x0173
    1280:	89 13       	cpse	r24, r25
    1282:	f2 cf       	rjmp	.-28     	; 0x1268 <__vector_23+0x3d2>
    1284:	28 cf       	rjmp	.-432    	; 0x10d6 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1286:	80 91 72 01 	lds	r24, 0x0172
    128a:	98 13       	cpse	r25, r24
    128c:	19 cf       	rjmp	.-462    	; 0x10c0 <__vector_23+0x22a>
    128e:	80 91 65 01 	lds	r24, 0x0165
    1292:	20 91 71 01 	lds	r18, 0x0171
    1296:	82 13       	cpse	r24, r18
    1298:	15 cf       	rjmp	.-470    	; 0x10c4 <__vector_23+0x22e>
    129a:	1d cf       	rjmp	.-454    	; 0x10d6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    129c:	80 91 64 01 	lds	r24, 0x0164
    12a0:	90 91 5f 01 	lds	r25, 0x015F
    12a4:	89 13       	cpse	r24, r25
    12a6:	ce cf       	rjmp	.-100    	; 0x1244 <__vector_23+0x3ae>
    12a8:	16 cf       	rjmp	.-468    	; 0x10d6 <__vector_23+0x240>

000012aa <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12aa:	fc 01       	movw	r30, r24
    12ac:	ac 01       	movw	r20, r24
    12ae:	46 5f       	subi	r20, 0xF6	; 246
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12b6:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12b8:	82 27       	eor	r24, r18
    12ba:	08 2e       	mov	r0, r24
    12bc:	82 95       	swap	r24
    12be:	80 7f       	andi	r24, 0xF0	; 240
    12c0:	80 25       	eor	r24, r0
    12c2:	09 2e       	mov	r0, r25
    12c4:	98 2f       	mov	r25, r24
    12c6:	82 95       	swap	r24
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	08 26       	eor	r0, r24
    12cc:	86 95       	lsr	r24
    12ce:	98 27       	eor	r25, r24
    12d0:	89 27       	eor	r24, r25
    12d2:	88 0f       	add	r24, r24
    12d4:	88 0f       	add	r24, r24
    12d6:	88 0f       	add	r24, r24
    12d8:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    12da:	e4 17       	cp	r30, r20
    12dc:	f5 07       	cpc	r31, r21
    12de:	59 f7       	brne	.-42     	; 0x12b6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    12e0:	08 95       	ret

000012e2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    12e2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    12e4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    12e6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    12e8:	20 91 33 01 	lds	r18, 0x0133
    or tmpreg1, ddrreg
    12ec:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    12ee:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    12f2:	30 91 33 01 	lds	r19, 0x0133
    12f6:	20 30       	cpi	r18, 0x00	; 0
    12f8:	29 f0       	breq	.+10     	; 0x1304 <message_send+0x22>
    12fa:	00 00       	nop
    12fc:	25 b1       	in	r18, 0x05	; 5
    12fe:	23 2b       	or	r18, r19
    1300:	25 b9       	out	0x05, r18	; 5
    1302:	04 c0       	rjmp	.+8      	; 0x130c <message_send+0x2a>
    1304:	00 00       	nop
    1306:	00 00       	nop
    1308:	00 00       	nop
    130a:	00 c0       	rjmp	.+0      	; 0x130c <message_send+0x2a>
    130c:	00 00       	nop
    130e:	00 00       	nop
    1310:	00 00       	nop
    1312:	30 95       	com	r19
    1314:	25 b1       	in	r18, 0x05	; 5
    1316:	23 23       	and	r18, r19
    1318:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    131a:	2e ea       	ldi	r18, 0xAE	; 174
    131c:	2a 95       	dec	r18
    131e:	f1 f7       	brne	.-4      	; 0x131c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1320:	2b ee       	ldi	r18, 0xEB	; 235

00001322 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1322:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1324:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1326:	0a c0       	rjmp	.+20     	; 0x133c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1328:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    132a:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    132e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1330:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1332:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1334:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1336:	0f be       	out	0x3f, r0	; 63
    return 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	08 95       	ret

0000133c <nocollision>:
nocollision:
    nop
    133c:	00 00       	nop
    dec tmpreg1
    133e:	2a 95       	dec	r18
    brne checkcollision
    1340:	81 f7       	brne	.-32     	; 0x1322 <checkcollision>

    ldi tmpreg1, 0x01
    1342:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1344:	30 91 33 01 	lds	r19, 0x0133
    1348:	20 30       	cpi	r18, 0x00	; 0
    134a:	29 f0       	breq	.+10     	; 0x1356 <nocollision+0x1a>
    134c:	00 00       	nop
    134e:	25 b1       	in	r18, 0x05	; 5
    1350:	23 2b       	or	r18, r19
    1352:	25 b9       	out	0x05, r18	; 5
    1354:	04 c0       	rjmp	.+8      	; 0x135e <nocollision+0x22>
    1356:	00 00       	nop
    1358:	00 00       	nop
    135a:	00 00       	nop
    135c:	00 c0       	rjmp	.+0      	; 0x135e <nocollision+0x22>
    135e:	00 00       	nop
    1360:	00 00       	nop
    1362:	00 00       	nop
    1364:	30 95       	com	r19
    1366:	25 b1       	in	r18, 0x05	; 5
    1368:	23 23       	and	r18, r19
    136a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    136c:	00 00       	nop
    136e:	24 e5       	ldi	r18, 0x54	; 84
    1370:	2a 95       	dec	r18
    1372:	f1 f7       	brne	.-4      	; 0x1370 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1374:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1376:	8c e0       	ldi	r24, 0x0C	; 12

00001378 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1378:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    137a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    137c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    137e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1380:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1382:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1384:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1386:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1388:	50 e0       	ldi	r21, 0x00	; 0

0000138a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    138a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    138c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    138e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1390:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1392:	30 91 33 01 	lds	r19, 0x0133
    1396:	20 30       	cpi	r18, 0x00	; 0
    1398:	29 f0       	breq	.+10     	; 0x13a4 <sendbit+0x1a>
    139a:	00 00       	nop
    139c:	25 b1       	in	r18, 0x05	; 5
    139e:	23 2b       	or	r18, r19
    13a0:	25 b9       	out	0x05, r18	; 5
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <sendbit+0x22>
    13a4:	00 00       	nop
    13a6:	00 00       	nop
    13a8:	00 00       	nop
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <sendbit+0x22>
    13ac:	00 00       	nop
    13ae:	00 00       	nop
    13b0:	00 00       	nop
    13b2:	30 95       	com	r19
    13b4:	25 b1       	in	r18, 0x05	; 5
    13b6:	23 23       	and	r18, r19
    13b8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    13ba:	00 00       	nop
    13bc:	21 e5       	ldi	r18, 0x51	; 81
    13be:	2a 95       	dec	r18
    13c0:	f1 f7       	brne	.-4      	; 0x13be <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    13c2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    13c4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    13c6:	9a 95       	dec	r25
    brne sendbit
    13c8:	01 f7       	brne	.-64     	; 0x138a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    13ca:	8a 95       	dec	r24
    brne sendbyte
    13cc:	a9 f6       	brne	.-86     	; 0x1378 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    13ce:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    13d0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    13d2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13d4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13d6:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    13da:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13dc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    13de:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13e0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13e2:	0f be       	out	0x3f, r0	; 63
    return 1
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	08 95       	ret

000013e8 <main>:
    }*/
}

int main()
{
  kilo_init();
    13e8:	0e 94 85 00 	call	0x10a	; 0x10a <kilo_init>
  kilo_start(setup, loop);
    13ec:	62 e7       	ldi	r22, 0x72	; 114
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	81 e7       	ldi	r24, 0x71	; 113
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 81 01 	call	0x302	; 0x302 <kilo_start>
    
  return 0;
}
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	08 95       	ret

000013fe <__divmodhi4>:
    13fe:	97 fb       	bst	r25, 7
    1400:	07 2e       	mov	r0, r23
    1402:	16 f4       	brtc	.+4      	; 0x1408 <__divmodhi4+0xa>
    1404:	00 94       	com	r0
    1406:	07 d0       	rcall	.+14     	; 0x1416 <__divmodhi4_neg1>
    1408:	77 fd       	sbrc	r23, 7
    140a:	09 d0       	rcall	.+18     	; 0x141e <__divmodhi4_neg2>
    140c:	0e 94 28 0a 	call	0x1450	; 0x1450 <__udivmodhi4>
    1410:	07 fc       	sbrc	r0, 7
    1412:	05 d0       	rcall	.+10     	; 0x141e <__divmodhi4_neg2>
    1414:	3e f4       	brtc	.+14     	; 0x1424 <__divmodhi4_exit>

00001416 <__divmodhi4_neg1>:
    1416:	90 95       	com	r25
    1418:	81 95       	neg	r24
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	08 95       	ret

0000141e <__divmodhi4_neg2>:
    141e:	70 95       	com	r23
    1420:	61 95       	neg	r22
    1422:	7f 4f       	sbci	r23, 0xFF	; 255

00001424 <__divmodhi4_exit>:
    1424:	08 95       	ret

00001426 <__tablejump2__>:
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	05 90       	lpm	r0, Z+
    142c:	f4 91       	lpm	r31, Z
    142e:	e0 2d       	mov	r30, r0
    1430:	09 94       	ijmp

00001432 <__umulhisi3>:
    1432:	a2 9f       	mul	r26, r18
    1434:	b0 01       	movw	r22, r0
    1436:	b3 9f       	mul	r27, r19
    1438:	c0 01       	movw	r24, r0
    143a:	a3 9f       	mul	r26, r19
    143c:	70 0d       	add	r23, r0
    143e:	81 1d       	adc	r24, r1
    1440:	11 24       	eor	r1, r1
    1442:	91 1d       	adc	r25, r1
    1444:	b2 9f       	mul	r27, r18
    1446:	70 0d       	add	r23, r0
    1448:	81 1d       	adc	r24, r1
    144a:	11 24       	eor	r1, r1
    144c:	91 1d       	adc	r25, r1
    144e:	08 95       	ret

00001450 <__udivmodhi4>:
    1450:	aa 1b       	sub	r26, r26
    1452:	bb 1b       	sub	r27, r27
    1454:	51 e1       	ldi	r21, 0x11	; 17
    1456:	07 c0       	rjmp	.+14     	; 0x1466 <__udivmodhi4_ep>

00001458 <__udivmodhi4_loop>:
    1458:	aa 1f       	adc	r26, r26
    145a:	bb 1f       	adc	r27, r27
    145c:	a6 17       	cp	r26, r22
    145e:	b7 07       	cpc	r27, r23
    1460:	10 f0       	brcs	.+4      	; 0x1466 <__udivmodhi4_ep>
    1462:	a6 1b       	sub	r26, r22
    1464:	b7 0b       	sbc	r27, r23

00001466 <__udivmodhi4_ep>:
    1466:	88 1f       	adc	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	5a 95       	dec	r21
    146c:	a9 f7       	brne	.-22     	; 0x1458 <__udivmodhi4_loop>
    146e:	80 95       	com	r24
    1470:	90 95       	com	r25
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	08 95       	ret

00001478 <__subsf3>:
    1478:	50 58       	subi	r21, 0x80	; 128

0000147a <__addsf3>:
    147a:	bb 27       	eor	r27, r27
    147c:	aa 27       	eor	r26, r26
    147e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__addsf3x>
    1482:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_round>
    1486:	0e 94 97 0b 	call	0x172e	; 0x172e <__fp_pscA>
    148a:	38 f0       	brcs	.+14     	; 0x149a <__addsf3+0x20>
    148c:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_pscB>
    1490:	20 f0       	brcs	.+8      	; 0x149a <__addsf3+0x20>
    1492:	39 f4       	brne	.+14     	; 0x14a2 <__addsf3+0x28>
    1494:	9f 3f       	cpi	r25, 0xFF	; 255
    1496:	19 f4       	brne	.+6      	; 0x149e <__addsf3+0x24>
    1498:	26 f4       	brtc	.+8      	; 0x14a2 <__addsf3+0x28>
    149a:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__fp_nan>
    149e:	0e f4       	brtc	.+2      	; 0x14a2 <__addsf3+0x28>
    14a0:	e0 95       	com	r30
    14a2:	e7 fb       	bst	r30, 7
    14a4:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_inf>

000014a8 <__addsf3x>:
    14a8:	e9 2f       	mov	r30, r25
    14aa:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fp_split3>
    14ae:	58 f3       	brcs	.-42     	; 0x1486 <__addsf3+0xc>
    14b0:	ba 17       	cp	r27, r26
    14b2:	62 07       	cpc	r22, r18
    14b4:	73 07       	cpc	r23, r19
    14b6:	84 07       	cpc	r24, r20
    14b8:	95 07       	cpc	r25, r21
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__addsf3x+0x1c>
    14bc:	79 f4       	brne	.+30     	; 0x14dc <__addsf3x+0x34>
    14be:	a6 f5       	brtc	.+104    	; 0x1528 <__addsf3x+0x80>
    14c0:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__fp_zero>
    14c4:	0e f4       	brtc	.+2      	; 0x14c8 <__addsf3x+0x20>
    14c6:	e0 95       	com	r30
    14c8:	0b 2e       	mov	r0, r27
    14ca:	ba 2f       	mov	r27, r26
    14cc:	a0 2d       	mov	r26, r0
    14ce:	0b 01       	movw	r0, r22
    14d0:	b9 01       	movw	r22, r18
    14d2:	90 01       	movw	r18, r0
    14d4:	0c 01       	movw	r0, r24
    14d6:	ca 01       	movw	r24, r20
    14d8:	a0 01       	movw	r20, r0
    14da:	11 24       	eor	r1, r1
    14dc:	ff 27       	eor	r31, r31
    14de:	59 1b       	sub	r21, r25
    14e0:	99 f0       	breq	.+38     	; 0x1508 <__addsf3x+0x60>
    14e2:	59 3f       	cpi	r21, 0xF9	; 249
    14e4:	50 f4       	brcc	.+20     	; 0x14fa <__addsf3x+0x52>
    14e6:	50 3e       	cpi	r21, 0xE0	; 224
    14e8:	68 f1       	brcs	.+90     	; 0x1544 <__addsf3x+0x9c>
    14ea:	1a 16       	cp	r1, r26
    14ec:	f0 40       	sbci	r31, 0x00	; 0
    14ee:	a2 2f       	mov	r26, r18
    14f0:	23 2f       	mov	r18, r19
    14f2:	34 2f       	mov	r19, r20
    14f4:	44 27       	eor	r20, r20
    14f6:	58 5f       	subi	r21, 0xF8	; 248
    14f8:	f3 cf       	rjmp	.-26     	; 0x14e0 <__addsf3x+0x38>
    14fa:	46 95       	lsr	r20
    14fc:	37 95       	ror	r19
    14fe:	27 95       	ror	r18
    1500:	a7 95       	ror	r26
    1502:	f0 40       	sbci	r31, 0x00	; 0
    1504:	53 95       	inc	r21
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__addsf3x+0x52>
    1508:	7e f4       	brtc	.+30     	; 0x1528 <__addsf3x+0x80>
    150a:	1f 16       	cp	r1, r31
    150c:	ba 0b       	sbc	r27, r26
    150e:	62 0b       	sbc	r22, r18
    1510:	73 0b       	sbc	r23, r19
    1512:	84 0b       	sbc	r24, r20
    1514:	ba f0       	brmi	.+46     	; 0x1544 <__addsf3x+0x9c>
    1516:	91 50       	subi	r25, 0x01	; 1
    1518:	a1 f0       	breq	.+40     	; 0x1542 <__addsf3x+0x9a>
    151a:	ff 0f       	add	r31, r31
    151c:	bb 1f       	adc	r27, r27
    151e:	66 1f       	adc	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	c2 f7       	brpl	.-16     	; 0x1516 <__addsf3x+0x6e>
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <__addsf3x+0x9c>
    1528:	ba 0f       	add	r27, r26
    152a:	62 1f       	adc	r22, r18
    152c:	73 1f       	adc	r23, r19
    152e:	84 1f       	adc	r24, r20
    1530:	48 f4       	brcc	.+18     	; 0x1544 <__addsf3x+0x9c>
    1532:	87 95       	ror	r24
    1534:	77 95       	ror	r23
    1536:	67 95       	ror	r22
    1538:	b7 95       	ror	r27
    153a:	f7 95       	ror	r31
    153c:	9e 3f       	cpi	r25, 0xFE	; 254
    153e:	08 f0       	brcs	.+2      	; 0x1542 <__addsf3x+0x9a>
    1540:	b0 cf       	rjmp	.-160    	; 0x14a2 <__addsf3+0x28>
    1542:	93 95       	inc	r25
    1544:	88 0f       	add	r24, r24
    1546:	08 f0       	brcs	.+2      	; 0x154a <__addsf3x+0xa2>
    1548:	99 27       	eor	r25, r25
    154a:	ee 0f       	add	r30, r30
    154c:	97 95       	ror	r25
    154e:	87 95       	ror	r24
    1550:	08 95       	ret

00001552 <__divsf3>:
    1552:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divsf3x>
    1556:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_round>
    155a:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_pscB>
    155e:	58 f0       	brcs	.+22     	; 0x1576 <__divsf3+0x24>
    1560:	0e 94 97 0b 	call	0x172e	; 0x172e <__fp_pscA>
    1564:	40 f0       	brcs	.+16     	; 0x1576 <__divsf3+0x24>
    1566:	29 f4       	brne	.+10     	; 0x1572 <__divsf3+0x20>
    1568:	5f 3f       	cpi	r21, 0xFF	; 255
    156a:	29 f0       	breq	.+10     	; 0x1576 <__divsf3+0x24>
    156c:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_inf>
    1570:	51 11       	cpse	r21, r1
    1572:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__fp_szero>
    1576:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__fp_nan>

0000157a <__divsf3x>:
    157a:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fp_split3>
    157e:	68 f3       	brcs	.-38     	; 0x155a <__divsf3+0x8>

00001580 <__divsf3_pse>:
    1580:	99 23       	and	r25, r25
    1582:	b1 f3       	breq	.-20     	; 0x1570 <__divsf3+0x1e>
    1584:	55 23       	and	r21, r21
    1586:	91 f3       	breq	.-28     	; 0x156c <__divsf3+0x1a>
    1588:	95 1b       	sub	r25, r21
    158a:	55 0b       	sbc	r21, r21
    158c:	bb 27       	eor	r27, r27
    158e:	aa 27       	eor	r26, r26
    1590:	62 17       	cp	r22, r18
    1592:	73 07       	cpc	r23, r19
    1594:	84 07       	cpc	r24, r20
    1596:	38 f0       	brcs	.+14     	; 0x15a6 <__divsf3_pse+0x26>
    1598:	9f 5f       	subi	r25, 0xFF	; 255
    159a:	5f 4f       	sbci	r21, 0xFF	; 255
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	44 1f       	adc	r20, r20
    15a2:	aa 1f       	adc	r26, r26
    15a4:	a9 f3       	breq	.-22     	; 0x1590 <__divsf3_pse+0x10>
    15a6:	35 d0       	rcall	.+106    	; 0x1612 <__divsf3_pse+0x92>
    15a8:	0e 2e       	mov	r0, r30
    15aa:	3a f0       	brmi	.+14     	; 0x15ba <__divsf3_pse+0x3a>
    15ac:	e0 e8       	ldi	r30, 0x80	; 128
    15ae:	32 d0       	rcall	.+100    	; 0x1614 <__divsf3_pse+0x94>
    15b0:	91 50       	subi	r25, 0x01	; 1
    15b2:	50 40       	sbci	r21, 0x00	; 0
    15b4:	e6 95       	lsr	r30
    15b6:	00 1c       	adc	r0, r0
    15b8:	ca f7       	brpl	.-14     	; 0x15ac <__divsf3_pse+0x2c>
    15ba:	2b d0       	rcall	.+86     	; 0x1612 <__divsf3_pse+0x92>
    15bc:	fe 2f       	mov	r31, r30
    15be:	29 d0       	rcall	.+82     	; 0x1612 <__divsf3_pse+0x92>
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	bb 1f       	adc	r27, r27
    15c8:	26 17       	cp	r18, r22
    15ca:	37 07       	cpc	r19, r23
    15cc:	48 07       	cpc	r20, r24
    15ce:	ab 07       	cpc	r26, r27
    15d0:	b0 e8       	ldi	r27, 0x80	; 128
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <__divsf3_pse+0x56>
    15d4:	bb 0b       	sbc	r27, r27
    15d6:	80 2d       	mov	r24, r0
    15d8:	bf 01       	movw	r22, r30
    15da:	ff 27       	eor	r31, r31
    15dc:	93 58       	subi	r25, 0x83	; 131
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	3a f0       	brmi	.+14     	; 0x15f0 <__divsf3_pse+0x70>
    15e2:	9e 3f       	cpi	r25, 0xFE	; 254
    15e4:	51 05       	cpc	r21, r1
    15e6:	78 f0       	brcs	.+30     	; 0x1606 <__divsf3_pse+0x86>
    15e8:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_inf>
    15ec:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__fp_szero>
    15f0:	5f 3f       	cpi	r21, 0xFF	; 255
    15f2:	e4 f3       	brlt	.-8      	; 0x15ec <__divsf3_pse+0x6c>
    15f4:	98 3e       	cpi	r25, 0xE8	; 232
    15f6:	d4 f3       	brlt	.-12     	; 0x15ec <__divsf3_pse+0x6c>
    15f8:	86 95       	lsr	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	b7 95       	ror	r27
    1600:	f7 95       	ror	r31
    1602:	9f 5f       	subi	r25, 0xFF	; 255
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <__divsf3_pse+0x78>
    1606:	88 0f       	add	r24, r24
    1608:	91 1d       	adc	r25, r1
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	97 f9       	bld	r25, 7
    1610:	08 95       	ret
    1612:	e1 e0       	ldi	r30, 0x01	; 1
    1614:	66 0f       	add	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	bb 1f       	adc	r27, r27
    161c:	62 17       	cp	r22, r18
    161e:	73 07       	cpc	r23, r19
    1620:	84 07       	cpc	r24, r20
    1622:	ba 07       	cpc	r27, r26
    1624:	20 f0       	brcs	.+8      	; 0x162e <__divsf3_pse+0xae>
    1626:	62 1b       	sub	r22, r18
    1628:	73 0b       	sbc	r23, r19
    162a:	84 0b       	sbc	r24, r20
    162c:	ba 0b       	sbc	r27, r26
    162e:	ee 1f       	adc	r30, r30
    1630:	88 f7       	brcc	.-30     	; 0x1614 <__divsf3_pse+0x94>
    1632:	e0 95       	com	r30
    1634:	08 95       	ret

00001636 <__fixsfsi>:
    1636:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixunssfsi>
    163a:	68 94       	set
    163c:	b1 11       	cpse	r27, r1
    163e:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__fp_szero>
    1642:	08 95       	ret

00001644 <__fixunssfsi>:
    1644:	0e 94 be 0b 	call	0x177c	; 0x177c <__fp_splitA>
    1648:	88 f0       	brcs	.+34     	; 0x166c <__fixunssfsi+0x28>
    164a:	9f 57       	subi	r25, 0x7F	; 127
    164c:	98 f0       	brcs	.+38     	; 0x1674 <__fixunssfsi+0x30>
    164e:	b9 2f       	mov	r27, r25
    1650:	99 27       	eor	r25, r25
    1652:	b7 51       	subi	r27, 0x17	; 23
    1654:	b0 f0       	brcs	.+44     	; 0x1682 <__fixunssfsi+0x3e>
    1656:	e1 f0       	breq	.+56     	; 0x1690 <__fixunssfsi+0x4c>
    1658:	66 0f       	add	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	1a f0       	brmi	.+6      	; 0x1668 <__fixunssfsi+0x24>
    1662:	ba 95       	dec	r27
    1664:	c9 f7       	brne	.-14     	; 0x1658 <__fixunssfsi+0x14>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <__fixunssfsi+0x4c>
    1668:	b1 30       	cpi	r27, 0x01	; 1
    166a:	91 f0       	breq	.+36     	; 0x1690 <__fixunssfsi+0x4c>
    166c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_zero>
    1670:	b1 e0       	ldi	r27, 0x01	; 1
    1672:	08 95       	ret
    1674:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__fp_zero>
    1678:	67 2f       	mov	r22, r23
    167a:	78 2f       	mov	r23, r24
    167c:	88 27       	eor	r24, r24
    167e:	b8 5f       	subi	r27, 0xF8	; 248
    1680:	39 f0       	breq	.+14     	; 0x1690 <__fixunssfsi+0x4c>
    1682:	b9 3f       	cpi	r27, 0xF9	; 249
    1684:	cc f3       	brlt	.-14     	; 0x1678 <__fixunssfsi+0x34>
    1686:	86 95       	lsr	r24
    1688:	77 95       	ror	r23
    168a:	67 95       	ror	r22
    168c:	b3 95       	inc	r27
    168e:	d9 f7       	brne	.-10     	; 0x1686 <__fixunssfsi+0x42>
    1690:	3e f4       	brtc	.+14     	; 0x16a0 <__fixunssfsi+0x5c>
    1692:	90 95       	com	r25
    1694:	80 95       	com	r24
    1696:	70 95       	com	r23
    1698:	61 95       	neg	r22
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	8f 4f       	sbci	r24, 0xFF	; 255
    169e:	9f 4f       	sbci	r25, 0xFF	; 255
    16a0:	08 95       	ret

000016a2 <__floatunsisf>:
    16a2:	e8 94       	clt
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <__floatsisf+0x12>

000016a6 <__floatsisf>:
    16a6:	97 fb       	bst	r25, 7
    16a8:	3e f4       	brtc	.+14     	; 0x16b8 <__floatsisf+0x12>
    16aa:	90 95       	com	r25
    16ac:	80 95       	com	r24
    16ae:	70 95       	com	r23
    16b0:	61 95       	neg	r22
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	8f 4f       	sbci	r24, 0xFF	; 255
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	99 23       	and	r25, r25
    16ba:	a9 f0       	breq	.+42     	; 0x16e6 <__floatsisf+0x40>
    16bc:	f9 2f       	mov	r31, r25
    16be:	96 e9       	ldi	r25, 0x96	; 150
    16c0:	bb 27       	eor	r27, r27
    16c2:	93 95       	inc	r25
    16c4:	f6 95       	lsr	r31
    16c6:	87 95       	ror	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b7 95       	ror	r27
    16ce:	f1 11       	cpse	r31, r1
    16d0:	f8 cf       	rjmp	.-16     	; 0x16c2 <__floatsisf+0x1c>
    16d2:	fa f4       	brpl	.+62     	; 0x1712 <__floatsisf+0x6c>
    16d4:	bb 0f       	add	r27, r27
    16d6:	11 f4       	brne	.+4      	; 0x16dc <__floatsisf+0x36>
    16d8:	60 ff       	sbrs	r22, 0
    16da:	1b c0       	rjmp	.+54     	; 0x1712 <__floatsisf+0x6c>
    16dc:	6f 5f       	subi	r22, 0xFF	; 255
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	8f 4f       	sbci	r24, 0xFF	; 255
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	16 c0       	rjmp	.+44     	; 0x1712 <__floatsisf+0x6c>
    16e6:	88 23       	and	r24, r24
    16e8:	11 f0       	breq	.+4      	; 0x16ee <__floatsisf+0x48>
    16ea:	96 e9       	ldi	r25, 0x96	; 150
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <__floatsisf+0x6a>
    16ee:	77 23       	and	r23, r23
    16f0:	21 f0       	breq	.+8      	; 0x16fa <__floatsisf+0x54>
    16f2:	9e e8       	ldi	r25, 0x8E	; 142
    16f4:	87 2f       	mov	r24, r23
    16f6:	76 2f       	mov	r23, r22
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <__floatsisf+0x5e>
    16fa:	66 23       	and	r22, r22
    16fc:	71 f0       	breq	.+28     	; 0x171a <__floatsisf+0x74>
    16fe:	96 e8       	ldi	r25, 0x86	; 134
    1700:	86 2f       	mov	r24, r22
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	2a f0       	brmi	.+10     	; 0x1712 <__floatsisf+0x6c>
    1708:	9a 95       	dec	r25
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	da f7       	brpl	.-10     	; 0x1708 <__floatsisf+0x62>
    1712:	88 0f       	add	r24, r24
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	97 f9       	bld	r25, 7
    171a:	08 95       	ret

0000171c <__fp_inf>:
    171c:	97 f9       	bld	r25, 7
    171e:	9f 67       	ori	r25, 0x7F	; 127
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	08 95       	ret

00001728 <__fp_nan>:
    1728:	9f ef       	ldi	r25, 0xFF	; 255
    172a:	80 ec       	ldi	r24, 0xC0	; 192
    172c:	08 95       	ret

0000172e <__fp_pscA>:
    172e:	00 24       	eor	r0, r0
    1730:	0a 94       	dec	r0
    1732:	16 16       	cp	r1, r22
    1734:	17 06       	cpc	r1, r23
    1736:	18 06       	cpc	r1, r24
    1738:	09 06       	cpc	r0, r25
    173a:	08 95       	ret

0000173c <__fp_pscB>:
    173c:	00 24       	eor	r0, r0
    173e:	0a 94       	dec	r0
    1740:	12 16       	cp	r1, r18
    1742:	13 06       	cpc	r1, r19
    1744:	14 06       	cpc	r1, r20
    1746:	05 06       	cpc	r0, r21
    1748:	08 95       	ret

0000174a <__fp_round>:
    174a:	09 2e       	mov	r0, r25
    174c:	03 94       	inc	r0
    174e:	00 0c       	add	r0, r0
    1750:	11 f4       	brne	.+4      	; 0x1756 <__fp_round+0xc>
    1752:	88 23       	and	r24, r24
    1754:	52 f0       	brmi	.+20     	; 0x176a <__fp_round+0x20>
    1756:	bb 0f       	add	r27, r27
    1758:	40 f4       	brcc	.+16     	; 0x176a <__fp_round+0x20>
    175a:	bf 2b       	or	r27, r31
    175c:	11 f4       	brne	.+4      	; 0x1762 <__fp_round+0x18>
    175e:	60 ff       	sbrs	r22, 0
    1760:	04 c0       	rjmp	.+8      	; 0x176a <__fp_round+0x20>
    1762:	6f 5f       	subi	r22, 0xFF	; 255
    1764:	7f 4f       	sbci	r23, 0xFF	; 255
    1766:	8f 4f       	sbci	r24, 0xFF	; 255
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	08 95       	ret

0000176c <__fp_split3>:
    176c:	57 fd       	sbrc	r21, 7
    176e:	90 58       	subi	r25, 0x80	; 128
    1770:	44 0f       	add	r20, r20
    1772:	55 1f       	adc	r21, r21
    1774:	59 f0       	breq	.+22     	; 0x178c <__fp_splitA+0x10>
    1776:	5f 3f       	cpi	r21, 0xFF	; 255
    1778:	71 f0       	breq	.+28     	; 0x1796 <__fp_splitA+0x1a>
    177a:	47 95       	ror	r20

0000177c <__fp_splitA>:
    177c:	88 0f       	add	r24, r24
    177e:	97 fb       	bst	r25, 7
    1780:	99 1f       	adc	r25, r25
    1782:	61 f0       	breq	.+24     	; 0x179c <__fp_splitA+0x20>
    1784:	9f 3f       	cpi	r25, 0xFF	; 255
    1786:	79 f0       	breq	.+30     	; 0x17a6 <__fp_splitA+0x2a>
    1788:	87 95       	ror	r24
    178a:	08 95       	ret
    178c:	12 16       	cp	r1, r18
    178e:	13 06       	cpc	r1, r19
    1790:	14 06       	cpc	r1, r20
    1792:	55 1f       	adc	r21, r21
    1794:	f2 cf       	rjmp	.-28     	; 0x177a <__fp_split3+0xe>
    1796:	46 95       	lsr	r20
    1798:	f1 df       	rcall	.-30     	; 0x177c <__fp_splitA>
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <__fp_splitA+0x30>
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	18 06       	cpc	r1, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	f1 cf       	rjmp	.-30     	; 0x1788 <__fp_splitA+0xc>
    17a6:	86 95       	lsr	r24
    17a8:	71 05       	cpc	r23, r1
    17aa:	61 05       	cpc	r22, r1
    17ac:	08 94       	sec
    17ae:	08 95       	ret

000017b0 <__fp_zero>:
    17b0:	e8 94       	clt

000017b2 <__fp_szero>:
    17b2:	bb 27       	eor	r27, r27
    17b4:	66 27       	eor	r22, r22
    17b6:	77 27       	eor	r23, r23
    17b8:	cb 01       	movw	r24, r22
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <__mulsf3>:
    17be:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__mulsf3x>
    17c2:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_round>
    17c6:	0e 94 97 0b 	call	0x172e	; 0x172e <__fp_pscA>
    17ca:	38 f0       	brcs	.+14     	; 0x17da <__mulsf3+0x1c>
    17cc:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_pscB>
    17d0:	20 f0       	brcs	.+8      	; 0x17da <__mulsf3+0x1c>
    17d2:	95 23       	and	r25, r21
    17d4:	11 f0       	breq	.+4      	; 0x17da <__mulsf3+0x1c>
    17d6:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_inf>
    17da:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__fp_nan>
    17de:	11 24       	eor	r1, r1
    17e0:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__fp_szero>

000017e4 <__mulsf3x>:
    17e4:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fp_split3>
    17e8:	70 f3       	brcs	.-36     	; 0x17c6 <__mulsf3+0x8>

000017ea <__mulsf3_pse>:
    17ea:	95 9f       	mul	r25, r21
    17ec:	c1 f3       	breq	.-16     	; 0x17de <__mulsf3+0x20>
    17ee:	95 0f       	add	r25, r21
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	55 1f       	adc	r21, r21
    17f4:	62 9f       	mul	r22, r18
    17f6:	f0 01       	movw	r30, r0
    17f8:	72 9f       	mul	r23, r18
    17fa:	bb 27       	eor	r27, r27
    17fc:	f0 0d       	add	r31, r0
    17fe:	b1 1d       	adc	r27, r1
    1800:	63 9f       	mul	r22, r19
    1802:	aa 27       	eor	r26, r26
    1804:	f0 0d       	add	r31, r0
    1806:	b1 1d       	adc	r27, r1
    1808:	aa 1f       	adc	r26, r26
    180a:	64 9f       	mul	r22, r20
    180c:	66 27       	eor	r22, r22
    180e:	b0 0d       	add	r27, r0
    1810:	a1 1d       	adc	r26, r1
    1812:	66 1f       	adc	r22, r22
    1814:	82 9f       	mul	r24, r18
    1816:	22 27       	eor	r18, r18
    1818:	b0 0d       	add	r27, r0
    181a:	a1 1d       	adc	r26, r1
    181c:	62 1f       	adc	r22, r18
    181e:	73 9f       	mul	r23, r19
    1820:	b0 0d       	add	r27, r0
    1822:	a1 1d       	adc	r26, r1
    1824:	62 1f       	adc	r22, r18
    1826:	83 9f       	mul	r24, r19
    1828:	a0 0d       	add	r26, r0
    182a:	61 1d       	adc	r22, r1
    182c:	22 1f       	adc	r18, r18
    182e:	74 9f       	mul	r23, r20
    1830:	33 27       	eor	r19, r19
    1832:	a0 0d       	add	r26, r0
    1834:	61 1d       	adc	r22, r1
    1836:	23 1f       	adc	r18, r19
    1838:	84 9f       	mul	r24, r20
    183a:	60 0d       	add	r22, r0
    183c:	21 1d       	adc	r18, r1
    183e:	82 2f       	mov	r24, r18
    1840:	76 2f       	mov	r23, r22
    1842:	6a 2f       	mov	r22, r26
    1844:	11 24       	eor	r1, r1
    1846:	9f 57       	subi	r25, 0x7F	; 127
    1848:	50 40       	sbci	r21, 0x00	; 0
    184a:	9a f0       	brmi	.+38     	; 0x1872 <__mulsf3_pse+0x88>
    184c:	f1 f0       	breq	.+60     	; 0x188a <__mulsf3_pse+0xa0>
    184e:	88 23       	and	r24, r24
    1850:	4a f0       	brmi	.+18     	; 0x1864 <__mulsf3_pse+0x7a>
    1852:	ee 0f       	add	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	bb 1f       	adc	r27, r27
    1858:	66 1f       	adc	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	91 50       	subi	r25, 0x01	; 1
    1860:	50 40       	sbci	r21, 0x00	; 0
    1862:	a9 f7       	brne	.-22     	; 0x184e <__mulsf3_pse+0x64>
    1864:	9e 3f       	cpi	r25, 0xFE	; 254
    1866:	51 05       	cpc	r21, r1
    1868:	80 f0       	brcs	.+32     	; 0x188a <__mulsf3_pse+0xa0>
    186a:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_inf>
    186e:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__fp_szero>
    1872:	5f 3f       	cpi	r21, 0xFF	; 255
    1874:	e4 f3       	brlt	.-8      	; 0x186e <__mulsf3_pse+0x84>
    1876:	98 3e       	cpi	r25, 0xE8	; 232
    1878:	d4 f3       	brlt	.-12     	; 0x186e <__mulsf3_pse+0x84>
    187a:	86 95       	lsr	r24
    187c:	77 95       	ror	r23
    187e:	67 95       	ror	r22
    1880:	b7 95       	ror	r27
    1882:	f7 95       	ror	r31
    1884:	e7 95       	ror	r30
    1886:	9f 5f       	subi	r25, 0xFF	; 255
    1888:	c1 f7       	brne	.-16     	; 0x187a <__mulsf3_pse+0x90>
    188a:	fe 2b       	or	r31, r30
    188c:	88 0f       	add	r24, r24
    188e:	91 1d       	adc	r25, r1
    1890:	96 95       	lsr	r25
    1892:	87 95       	ror	r24
    1894:	97 f9       	bld	r25, 7
    1896:	08 95       	ret

00001898 <do_rand>:
    1898:	8f 92       	push	r8
    189a:	9f 92       	push	r9
    189c:	af 92       	push	r10
    189e:	bf 92       	push	r11
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	ec 01       	movw	r28, r24
    18ae:	68 81       	ld	r22, Y
    18b0:	79 81       	ldd	r23, Y+1	; 0x01
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	61 15       	cp	r22, r1
    18b8:	71 05       	cpc	r23, r1
    18ba:	81 05       	cpc	r24, r1
    18bc:	91 05       	cpc	r25, r1
    18be:	21 f4       	brne	.+8      	; 0x18c8 <do_rand+0x30>
    18c0:	64 e2       	ldi	r22, 0x24	; 36
    18c2:	79 ed       	ldi	r23, 0xD9	; 217
    18c4:	8b e5       	ldi	r24, 0x5B	; 91
    18c6:	97 e0       	ldi	r25, 0x07	; 7
    18c8:	2d e1       	ldi	r18, 0x1D	; 29
    18ca:	33 ef       	ldi	r19, 0xF3	; 243
    18cc:	41 e0       	ldi	r20, 0x01	; 1
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	0e 94 be 0c 	call	0x197c	; 0x197c <__divmodsi4>
    18d4:	49 01       	movw	r8, r18
    18d6:	5a 01       	movw	r10, r20
    18d8:	9b 01       	movw	r18, r22
    18da:	ac 01       	movw	r20, r24
    18dc:	a7 ea       	ldi	r26, 0xA7	; 167
    18de:	b1 e4       	ldi	r27, 0x41	; 65
    18e0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__muluhisi3>
    18e4:	6b 01       	movw	r12, r22
    18e6:	7c 01       	movw	r14, r24
    18e8:	ac ee       	ldi	r26, 0xEC	; 236
    18ea:	b4 ef       	ldi	r27, 0xF4	; 244
    18ec:	a5 01       	movw	r20, r10
    18ee:	94 01       	movw	r18, r8
    18f0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__mulohisi3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8c 0d       	add	r24, r12
    18fa:	9d 1d       	adc	r25, r13
    18fc:	ae 1d       	adc	r26, r14
    18fe:	bf 1d       	adc	r27, r15
    1900:	b7 ff       	sbrs	r27, 7
    1902:	03 c0       	rjmp	.+6      	; 0x190a <do_rand+0x72>
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	a1 09       	sbc	r26, r1
    1908:	b0 48       	sbci	r27, 0x80	; 128
    190a:	88 83       	st	Y, r24
    190c:	99 83       	std	Y+1, r25	; 0x01
    190e:	aa 83       	std	Y+2, r26	; 0x02
    1910:	bb 83       	std	Y+3, r27	; 0x03
    1912:	9f 77       	andi	r25, 0x7F	; 127
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	bf 90       	pop	r11
    1922:	af 90       	pop	r10
    1924:	9f 90       	pop	r9
    1926:	8f 90       	pop	r8
    1928:	08 95       	ret

0000192a <rand_r>:
    192a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <do_rand>
    192e:	08 95       	ret

00001930 <rand>:
    1930:	87 e0       	ldi	r24, 0x07	; 7
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	0e 94 4c 0c 	call	0x1898	; 0x1898 <do_rand>
    1938:	08 95       	ret

0000193a <srand>:
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	80 93 07 01 	sts	0x0107, r24
    1942:	90 93 08 01 	sts	0x0108, r25
    1946:	a0 93 09 01 	sts	0x0109, r26
    194a:	b0 93 0a 01 	sts	0x010A, r27
    194e:	08 95       	ret

00001950 <eeprom_read_byte>:
    1950:	f9 99       	sbic	0x1f, 1	; 31
    1952:	fe cf       	rjmp	.-4      	; 0x1950 <eeprom_read_byte>
    1954:	92 bd       	out	0x22, r25	; 34
    1956:	81 bd       	out	0x21, r24	; 33
    1958:	f8 9a       	sbi	0x1f, 0	; 31
    195a:	99 27       	eor	r25, r25
    195c:	80 b5       	in	r24, 0x20	; 32
    195e:	08 95       	ret

00001960 <eeprom_write_byte>:
    1960:	26 2f       	mov	r18, r22

00001962 <eeprom_write_r18>:
    1962:	f9 99       	sbic	0x1f, 1	; 31
    1964:	fe cf       	rjmp	.-4      	; 0x1962 <eeprom_write_r18>
    1966:	1f ba       	out	0x1f, r1	; 31
    1968:	92 bd       	out	0x22, r25	; 34
    196a:	81 bd       	out	0x21, r24	; 33
    196c:	20 bd       	out	0x20, r18	; 32
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	fa 9a       	sbi	0x1f, 2	; 31
    1974:	f9 9a       	sbi	0x1f, 1	; 31
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	08 95       	ret

0000197c <__divmodsi4>:
    197c:	05 2e       	mov	r0, r21
    197e:	97 fb       	bst	r25, 7
    1980:	1e f4       	brtc	.+6      	; 0x1988 <__divmodsi4+0xc>
    1982:	00 94       	com	r0
    1984:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__negsi2>
    1988:	57 fd       	sbrc	r21, 7
    198a:	07 d0       	rcall	.+14     	; 0x199a <__divmodsi4_neg2>
    198c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__udivmodsi4>
    1990:	07 fc       	sbrc	r0, 7
    1992:	03 d0       	rcall	.+6      	; 0x199a <__divmodsi4_neg2>
    1994:	4e f4       	brtc	.+18     	; 0x19a8 <__divmodsi4_exit>
    1996:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__negsi2>

0000199a <__divmodsi4_neg2>:
    199a:	50 95       	com	r21
    199c:	40 95       	com	r20
    199e:	30 95       	com	r19
    19a0:	21 95       	neg	r18
    19a2:	3f 4f       	sbci	r19, 0xFF	; 255
    19a4:	4f 4f       	sbci	r20, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255

000019a8 <__divmodsi4_exit>:
    19a8:	08 95       	ret

000019aa <__negsi2>:
    19aa:	90 95       	com	r25
    19ac:	80 95       	com	r24
    19ae:	70 95       	com	r23
    19b0:	61 95       	neg	r22
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	8f 4f       	sbci	r24, 0xFF	; 255
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	08 95       	ret

000019ba <__muluhisi3>:
    19ba:	0e 94 19 0a 	call	0x1432	; 0x1432 <__umulhisi3>
    19be:	a5 9f       	mul	r26, r21
    19c0:	90 0d       	add	r25, r0
    19c2:	b4 9f       	mul	r27, r20
    19c4:	90 0d       	add	r25, r0
    19c6:	a4 9f       	mul	r26, r20
    19c8:	80 0d       	add	r24, r0
    19ca:	91 1d       	adc	r25, r1
    19cc:	11 24       	eor	r1, r1
    19ce:	08 95       	ret

000019d0 <__mulshisi3>:
    19d0:	b7 ff       	sbrs	r27, 7
    19d2:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__muluhisi3>

000019d6 <__mulohisi3>:
    19d6:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__muluhisi3>
    19da:	82 1b       	sub	r24, r18
    19dc:	93 0b       	sbc	r25, r19
    19de:	08 95       	ret

000019e0 <__udivmodsi4>:
    19e0:	a1 e2       	ldi	r26, 0x21	; 33
    19e2:	1a 2e       	mov	r1, r26
    19e4:	aa 1b       	sub	r26, r26
    19e6:	bb 1b       	sub	r27, r27
    19e8:	fd 01       	movw	r30, r26
    19ea:	0d c0       	rjmp	.+26     	; 0x1a06 <__udivmodsi4_ep>

000019ec <__udivmodsi4_loop>:
    19ec:	aa 1f       	adc	r26, r26
    19ee:	bb 1f       	adc	r27, r27
    19f0:	ee 1f       	adc	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	a2 17       	cp	r26, r18
    19f6:	b3 07       	cpc	r27, r19
    19f8:	e4 07       	cpc	r30, r20
    19fa:	f5 07       	cpc	r31, r21
    19fc:	20 f0       	brcs	.+8      	; 0x1a06 <__udivmodsi4_ep>
    19fe:	a2 1b       	sub	r26, r18
    1a00:	b3 0b       	sbc	r27, r19
    1a02:	e4 0b       	sbc	r30, r20
    1a04:	f5 0b       	sbc	r31, r21

00001a06 <__udivmodsi4_ep>:
    1a06:	66 1f       	adc	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	1a 94       	dec	r1
    1a10:	69 f7       	brne	.-38     	; 0x19ec <__udivmodsi4_loop>
    1a12:	60 95       	com	r22
    1a14:	70 95       	com	r23
    1a16:	80 95       	com	r24
    1a18:	90 95       	com	r25
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	bd 01       	movw	r22, r26
    1a20:	cf 01       	movw	r24, r30
    1a22:	08 95       	ret

00001a24 <_exit>:
    1a24:	f8 94       	cli

00001a26 <__stop_program>:
    1a26:	ff cf       	rjmp	.-2      	; 0x1a26 <__stop_program>
