
build/jokeTeller.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	e3 09       	sbc	r30, r3
      6a:	5f 0a       	sbc	r5, r31
      6c:	b7 09       	sbc	r27, r7
      6e:	ae 09       	sbc	r26, r14
      70:	b4 09       	sbc	r27, r4
      72:	41 0a       	sbc	r4, r17
      74:	36 0a       	sbc	r3, r22
      76:	c1 10       	cpse	r12, r1
      78:	9e 0f       	add	r25, r30
      7a:	9e 0f       	add	r25, r30
      7c:	be 10       	cpse	r11, r14
      7e:	ca 10       	cpse	r12, r10
      80:	ba 10       	cpse	r11, r10
      82:	d1 10       	cpse	r13, r1
      84:	cd 10       	cpse	r12, r13
      86:	d5 10       	cpse	r13, r5
      88:	8d 10       	cpse	r8, r13
      8a:	5f 10       	cpse	r5, r15

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e7       	ldi	r30, 0x72	; 114
      b8:	fa e2       	ldi	r31, 0x2A	; 42
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 07 12 	call	0x240e	; 0x240e <main>
      da:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:

//main functions
void setup()
{
	//state = FORWARD_GREEN;
	last_state_update = kilo_ticks;
      e2:	80 91 51 01 	lds	r24, 0x0151
      e6:	90 91 52 01 	lds	r25, 0x0152
      ea:	a0 91 53 01 	lds	r26, 0x0153
      ee:	b0 91 54 01 	lds	r27, 0x0154
      f2:	80 93 2a 01 	sts	0x012A, r24
      f6:	90 93 2b 01 	sts	0x012B, r25
      fa:	a0 93 2c 01 	sts	0x012C, r26
      fe:	b0 93 2d 01 	sts	0x012D, r27
	if(kilo_uid==FIRST_TELLER_ID){
     102:	80 91 87 01 	lds	r24, 0x0187
     106:	90 91 88 01 	lds	r25, 0x0188
     10a:	8a 97       	sbiw	r24, 0x2a	; 42
     10c:	39 f0       	breq	.+14     	; 0x11c <setup+0x3a>
		role = TELLER;
	}else{
		role = ROADPEOPLE;
     10e:	85 e1       	ldi	r24, 0x15	; 21
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 29 01 	sts	0x0129, r25
     116:	80 93 28 01 	sts	0x0128, r24
     11a:	08 95       	ret
void setup()
{
	//state = FORWARD_GREEN;
	last_state_update = kilo_ticks;
	if(kilo_uid==FIRST_TELLER_ID){
		role = TELLER;
     11c:	84 e1       	ldi	r24, 0x14	; 20
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 29 01 	sts	0x0129, r25
     124:	80 93 28 01 	sts	0x0128, r24
     128:	08 95       	ret

0000012a <message_tx>:

//internal functions
message_t *message_tx()
{
    return &message;
}
     12a:	8a e1       	ldi	r24, 0x1A	; 26
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	08 95       	ret

00000130 <message_tx_success>:

void message_tx_success()
{
    // Set flag on message transmission.
    message_sent = 1;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	90 93 11 01 	sts	0x0111, r25
     138:	80 93 10 01 	sts	0x0110, r24
     13c:	08 95       	ret

0000013e <message_rx>:
}

void message_rx(message_t *m, distance_measurement_t *d)
{
    if (message_recieved == 0){
     13e:	20 91 0e 01 	lds	r18, 0x010E
     142:	30 91 0f 01 	lds	r19, 0x010F
     146:	23 2b       	or	r18, r19
     148:	69 f4       	brne	.+26     	; 0x164 <message_rx+0x26>
        message_recieved = 1;
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	30 93 0f 01 	sts	0x010F, r19
     152:	20 93 0e 01 	sts	0x010E, r18
        message_content = m->data[0];
     156:	fc 01       	movw	r30, r24
     158:	80 81       	ld	r24, Z
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	90 93 0d 01 	sts	0x010D, r25
     160:	80 93 0c 01 	sts	0x010C, r24
     164:	08 95       	ret

00000166 <set_motion>:

int role;

//base functions
void set_motion(int new_motion)
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     16a:	20 91 14 01 	lds	r18, 0x0114
     16e:	30 91 15 01 	lds	r19, 0x0115
     172:	28 17       	cp	r18, r24
     174:	39 07       	cpc	r19, r25
     176:	79 f0       	breq	.+30     	; 0x196 <set_motion+0x30>
    {
        current_motion = new_motion;
     178:	90 93 15 01 	sts	0x0115, r25
     17c:	80 93 14 01 	sts	0x0114, r24
        
        if (current_motion == STOP)
     180:	00 97       	sbiw	r24, 0x00	; 0
     182:	91 f1       	breq	.+100    	; 0x1e8 <set_motion+0x82>
     184:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	91 05       	cpc	r25, r1
     18a:	a1 f1       	breq	.+104    	; 0x1f4 <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	91 05       	cpc	r25, r1
     190:	29 f0       	breq	.+10     	; 0x19c <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     192:	03 97       	sbiw	r24, 0x03	; 3
     194:	b9 f0       	breq	.+46     	; 0x1c4 <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     19c:	80 91 12 01 	lds	r24, 0x0112
     1a0:	90 91 13 01 	lds	r25, 0x0113
     1a4:	89 2b       	or	r24, r25
     1a6:	11 f4       	brne	.+4      	; 0x1ac <set_motion+0x46>
                spinup_motors();
     1a8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	80 91 8b 01 	lds	r24, 0x018B
     1b2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
     1b6:	10 92 13 01 	sts	0x0113, r1
     1ba:	10 92 12 01 	sts	0x0112, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     1c4:	80 91 12 01 	lds	r24, 0x0112
     1c8:	90 91 13 01 	lds	r25, 0x0113
     1cc:	89 2b       	or	r24, r25
     1ce:	f9 f0       	breq	.+62     	; 0x20e <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     1d0:	60 91 77 01 	lds	r22, 0x0177
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
     1da:	10 92 13 01 	sts	0x0113, r1
     1de:	10 92 12 01 	sts	0x0112, r1
        }
    }
}
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     1f0:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     1f4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     1f8:	60 91 8a 01 	lds	r22, 0x018A
     1fc:	80 91 89 01 	lds	r24, 0x0189
     200:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 1;
     204:	d0 93 13 01 	sts	0x0113, r29
     208:	c0 93 12 01 	sts	0x0112, r28
     20c:	c4 cf       	rjmp	.-120    	; 0x196 <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     20e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
     212:	de cf       	rjmp	.-68     	; 0x1d0 <set_motion+0x6a>

00000214 <random_move>:
            both_spined = 0;
        }
    }
}

void random_move(){
     214:	cf 93       	push	r28
     216:	df 93       	push	r29

	int random_number = rand_hard();
     218:	0e 94 56 0b 	call	0x16ac	; 0x16ac <rand_hard>
    int random_direction = (random_number % 4);
     21c:	83 70       	andi	r24, 0x03	; 3

    if(random_direction==0||random_direction==1){
     21e:	82 30       	cpi	r24, 0x02	; 2
     220:	20 f1       	brcs	.+72     	; 0x26a <random_move+0x56>
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	f1 f1       	breq	.+124    	; 0x2a2 <random_move+0x8e>
    	set_color(RGB(1, 0, 0));
		set_motion(LEFT);
    }
    else if(random_direction==3){
    	set_color(RGB(0, 0, 1));
     226:	80 e1       	ldi	r24, 0x10	; 16
     228:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     22c:	80 91 14 01 	lds	r24, 0x0114
     230:	90 91 15 01 	lds	r25, 0x0115
     234:	03 97       	sbiw	r24, 0x03	; 3
     236:	b1 f0       	breq	.+44     	; 0x264 <random_move+0x50>
    {
        current_motion = new_motion;
     238:	83 e0       	ldi	r24, 0x03	; 3
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 15 01 	sts	0x0115, r25
     240:	80 93 14 01 	sts	0x0114, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     244:	80 91 12 01 	lds	r24, 0x0112
     248:	90 91 13 01 	lds	r25, 0x0113
     24c:	89 2b       	or	r24, r25
     24e:	09 f4       	brne	.+2      	; 0x252 <random_move+0x3e>
     250:	4a c0       	rjmp	.+148    	; 0x2e6 <random_move+0xd2>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     252:	60 91 77 01 	lds	r22, 0x0177
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
     25c:	10 92 13 01 	sts	0x0113, r1
     260:	10 92 12 01 	sts	0x0112, r1
    else if(random_direction==3){
    	set_color(RGB(0, 0, 1));
		set_motion(RIGHT);
    }

}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

	int random_number = rand_hard();
    int random_direction = (random_number % 4);

    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     270:	80 91 14 01 	lds	r24, 0x0114
     274:	90 91 15 01 	lds	r25, 0x0115
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	a1 f3       	breq	.-24     	; 0x264 <random_move+0x50>
    {
        current_motion = new_motion;
     27c:	c1 e0       	ldi	r28, 0x01	; 1
     27e:	d0 e0       	ldi	r29, 0x00	; 0
     280:	d0 93 15 01 	sts	0x0115, r29
     284:	c0 93 14 01 	sts	0x0114, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     288:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     28c:	60 91 8a 01 	lds	r22, 0x018A
     290:	80 91 89 01 	lds	r24, 0x0189
     294:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 1;
     298:	d0 93 13 01 	sts	0x0113, r29
     29c:	c0 93 12 01 	sts	0x0112, r28
     2a0:	e1 cf       	rjmp	.-62     	; 0x264 <random_move+0x50>
    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
    	set_color(RGB(1, 0, 0));
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2a8:	80 91 14 01 	lds	r24, 0x0114
     2ac:	90 91 15 01 	lds	r25, 0x0115
     2b0:	02 97       	sbiw	r24, 0x02	; 2
     2b2:	c1 f2       	breq	.-80     	; 0x264 <random_move+0x50>
    {
        current_motion = new_motion;
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 15 01 	sts	0x0115, r25
     2bc:	80 93 14 01 	sts	0x0114, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     2c0:	80 91 12 01 	lds	r24, 0x0112
     2c4:	90 91 13 01 	lds	r25, 0x0113
     2c8:	89 2b       	or	r24, r25
     2ca:	51 f0       	breq	.+20     	; 0x2e0 <random_move+0xcc>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 91 8b 01 	lds	r24, 0x018B
     2d2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
     2d6:	10 92 13 01 	sts	0x0113, r1
     2da:	10 92 12 01 	sts	0x0112, r1
     2de:	c2 cf       	rjmp	.-124    	; 0x264 <random_move+0x50>
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     2e0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
     2e4:	f3 cf       	rjmp	.-26     	; 0x2cc <random_move+0xb8>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     2e6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
     2ea:	b3 cf       	rjmp	.-154    	; 0x252 <random_move+0x3e>

000002ec <flash_led>:

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     2ec:	80 e1       	ldi	r24, 0x10	; 16
     2ee:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     2f2:	84 e6       	ldi	r24, 0x64	; 100
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     2fa:	84 e0       	ldi	r24, 0x04	; 4
     2fc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     300:	84 e6       	ldi	r24, 0x64	; 100
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     308:	84 e1       	ldi	r24, 0x14	; 20
     30a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     30e:	84 e6       	ldi	r24, 0x64	; 100
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     31c:	84 e6       	ldi	r24, 0x64	; 100
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     324:	81 e1       	ldi	r24, 0x11	; 17
     326:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     32a:	84 e6       	ldi	r24, 0x64	; 100
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     332:	85 e0       	ldi	r24, 0x05	; 5
     334:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     338:	84 e6       	ldi	r24, 0x64	; 100
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     340:	85 e1       	ldi	r24, 0x15	; 21
     342:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     346:	84 e6       	ldi	r24, 0x64	; 100
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <delay>

0000034e <laughing>:
}

//advance functions
void laughing(){
	spinup_motors();
     34e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     352:	8e e1       	ldi	r24, 0x1E	; 30
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     362:	86 e9       	ldi	r24, 0x96	; 150
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <delay>

0000036a <find_others>:
}

void find_others(){
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
	// Initialize message:
	// The type is always NORMAL.
	message.type = NORMAL;
     36e:	10 92 23 01 	sts	0x0123, r1
	// Some dummy data as an example.
	message.data[0] = FINDING_MESSAGE;
     372:	8a e0       	ldi	r24, 0x0A	; 10
     374:	80 93 1a 01 	sts	0x011A, r24
	// It's important that the CRC is computed after the data has been set;
	// otherwise it would be wrong.
	message.crc = message_crc(&message);
     378:	8a e1       	ldi	r24, 0x1A	; 26
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <message_crc>
     380:	90 93 25 01 	sts	0x0125, r25
     384:	80 93 24 01 	sts	0x0124, r24
    }
}

void random_move(){

	int random_number = rand_hard();
     388:	0e 94 56 0b 	call	0x16ac	; 0x16ac <rand_hard>
    int random_direction = (random_number % 4);
     38c:	83 70       	andi	r24, 0x03	; 3

    if(random_direction==0||random_direction==1){
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	20 f1       	brcs	.+72     	; 0x3da <find_others+0x70>
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	f1 f1       	breq	.+124    	; 0x412 <find_others+0xa8>
    	set_color(RGB(1, 0, 0));
		set_motion(LEFT);
    }
    else if(random_direction==3){
    	set_color(RGB(0, 0, 1));
     396:	80 e1       	ldi	r24, 0x10	; 16
     398:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     39c:	80 91 14 01 	lds	r24, 0x0114
     3a0:	90 91 15 01 	lds	r25, 0x0115
     3a4:	03 97       	sbiw	r24, 0x03	; 3
     3a6:	b1 f0       	breq	.+44     	; 0x3d4 <find_others+0x6a>
    {
        current_motion = new_motion;
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 15 01 	sts	0x0115, r25
     3b0:	80 93 14 01 	sts	0x0114, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     3b4:	80 91 12 01 	lds	r24, 0x0112
     3b8:	90 91 13 01 	lds	r25, 0x0113
     3bc:	89 2b       	or	r24, r25
     3be:	09 f4       	brne	.+2      	; 0x3c2 <find_others+0x58>
     3c0:	4a c0       	rjmp	.+148    	; 0x456 <find_others+0xec>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     3c2:	60 91 77 01 	lds	r22, 0x0177
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
     3cc:	10 92 13 01 	sts	0x0113, r1
     3d0:	10 92 12 01 	sts	0x0112, r1
	// otherwise it would be wrong.
	message.crc = message_crc(&message);

	random_move();

}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

	int random_number = rand_hard();
    int random_direction = (random_number % 4);

    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     3e0:	80 91 14 01 	lds	r24, 0x0114
     3e4:	90 91 15 01 	lds	r25, 0x0115
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	a1 f3       	breq	.-24     	; 0x3d4 <find_others+0x6a>
    {
        current_motion = new_motion;
     3ec:	c1 e0       	ldi	r28, 0x01	; 1
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	d0 93 15 01 	sts	0x0115, r29
     3f4:	c0 93 14 01 	sts	0x0114, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     3f8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     3fc:	60 91 8a 01 	lds	r22, 0x018A
     400:	80 91 89 01 	lds	r24, 0x0189
     404:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 1;
     408:	d0 93 13 01 	sts	0x0113, r29
     40c:	c0 93 12 01 	sts	0x0112, r28
     410:	e1 cf       	rjmp	.-62     	; 0x3d4 <find_others+0x6a>
    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
    	set_color(RGB(1, 0, 0));
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     418:	80 91 14 01 	lds	r24, 0x0114
     41c:	90 91 15 01 	lds	r25, 0x0115
     420:	02 97       	sbiw	r24, 0x02	; 2
     422:	c1 f2       	breq	.-80     	; 0x3d4 <find_others+0x6a>
    {
        current_motion = new_motion;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 15 01 	sts	0x0115, r25
     42c:	80 93 14 01 	sts	0x0114, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     430:	80 91 12 01 	lds	r24, 0x0112
     434:	90 91 13 01 	lds	r25, 0x0113
     438:	89 2b       	or	r24, r25
     43a:	51 f0       	breq	.+20     	; 0x450 <find_others+0xe6>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	80 91 8b 01 	lds	r24, 0x018B
     442:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
     446:	10 92 13 01 	sts	0x0113, r1
     44a:	10 92 12 01 	sts	0x0112, r1
     44e:	c2 cf       	rjmp	.-124    	; 0x3d4 <find_others+0x6a>
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     450:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
     454:	f3 cf       	rjmp	.-26     	; 0x43c <find_others+0xd2>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     456:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
     45a:	b3 cf       	rjmp	.-154    	; 0x3c2 <find_others+0x58>

0000045c <telling_joke>:

	random_move();

}

void telling_joke(){
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
	// Initialize message:
	// The type is always NORMAL.
	message.type = NORMAL;
     460:	ca e1       	ldi	r28, 0x1A	; 26
     462:	d1 e0       	ldi	r29, 0x01	; 1
     464:	19 86       	std	Y+9, r1	; 0x09
	// Some dummy data as an example.
	message.data[0] = JOKE_MESSAGE;
     466:	8c e0       	ldi	r24, 0x0C	; 12
     468:	88 83       	st	Y, r24
	// It's important that the CRC is computed after the data has been set;
	// otherwise it would be wrong.
	message.crc = message_crc(&message);
     46a:	ce 01       	movw	r24, r28
     46c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <message_crc>
     470:	9b 87       	std	Y+11, r25	; 0x0b
     472:	8a 87       	std	Y+10, r24	; 0x0a

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     474:	80 e1       	ldi	r24, 0x10	; 16
     476:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     47a:	84 e6       	ldi	r24, 0x64	; 100
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     488:	84 e6       	ldi	r24, 0x64	; 100
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     490:	84 e1       	ldi	r24, 0x14	; 20
     492:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     496:	84 e6       	ldi	r24, 0x64	; 100
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     4a4:	84 e6       	ldi	r24, 0x64	; 100
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     4ac:	81 e1       	ldi	r24, 0x11	; 17
     4ae:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     4b2:	84 e6       	ldi	r24, 0x64	; 100
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     4c0:	84 e6       	ldi	r24, 0x64	; 100
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     4c8:	85 e1       	ldi	r24, 0x15	; 21
     4ca:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     4ce:	84 e6       	ldi	r24, 0x64	; 100
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     4d6:	80 e1       	ldi	r24, 0x10	; 16
     4d8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     4dc:	84 e6       	ldi	r24, 0x64	; 100
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     4e4:	84 e0       	ldi	r24, 0x04	; 4
     4e6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     4ea:	84 e6       	ldi	r24, 0x64	; 100
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     4f2:	84 e1       	ldi	r24, 0x14	; 20
     4f4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     4f8:	84 e6       	ldi	r24, 0x64	; 100
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     506:	84 e6       	ldi	r24, 0x64	; 100
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     50e:	81 e1       	ldi	r24, 0x11	; 17
     510:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     514:	84 e6       	ldi	r24, 0x64	; 100
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     51c:	85 e0       	ldi	r24, 0x05	; 5
     51e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     522:	84 e6       	ldi	r24, 0x64	; 100
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     52a:	85 e1       	ldi	r24, 0x15	; 21
     52c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     530:	84 e6       	ldi	r24, 0x64	; 100
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     538:	80 e1       	ldi	r24, 0x10	; 16
     53a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     53e:	84 e6       	ldi	r24, 0x64	; 100
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     546:	84 e0       	ldi	r24, 0x04	; 4
     548:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     54c:	84 e6       	ldi	r24, 0x64	; 100
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     554:	84 e1       	ldi	r24, 0x14	; 20
     556:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     55a:	84 e6       	ldi	r24, 0x64	; 100
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     568:	84 e6       	ldi	r24, 0x64	; 100
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     570:	81 e1       	ldi	r24, 0x11	; 17
     572:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     576:	84 e6       	ldi	r24, 0x64	; 100
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     57e:	85 e0       	ldi	r24, 0x05	; 5
     580:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     584:	84 e6       	ldi	r24, 0x64	; 100
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     58c:	85 e1       	ldi	r24, 0x15	; 21
     58e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     592:	84 e6       	ldi	r24, 0x64	; 100
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
}

//advance functions
void laughing(){
	spinup_motors();
     59a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     59e:	8e e1       	ldi	r24, 0x1E	; 30
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     5ae:	86 e9       	ldi	r24, 0x96	; 150
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     5b6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     5ba:	8e e1       	ldi	r24, 0x1E	; 30
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     5ca:	86 e9       	ldi	r24, 0x96	; 150
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     5d2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     5d6:	8e e1       	ldi	r24, 0x1E	; 30
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     5e6:	86 e9       	ldi	r24, 0x96	; 150
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     5ee:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     5f2:	8e e1       	ldi	r24, 0x1E	; 30
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     602:	86 e9       	ldi	r24, 0x96	; 150
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     60a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     60e:	8e e1       	ldi	r24, 0x1E	; 30
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     61e:	86 e9       	ldi	r24, 0x96	; 150
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     626:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     62a:	8e e1       	ldi	r24, 0x1E	; 30
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     63a:	86 e9       	ldi	r24, 0x96	; 150
     63c:	90 e0       	ldi	r25, 0x00	; 0
	laughing();
	laughing();
	laughing();
	laughing();
	laughing();
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
//advance functions
void laughing(){
	spinup_motors();
	delay(30);
	set_motors(0,0);
	delay(150);
     642:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <delay>

00000646 <listening_joke>:
	laughing();
}

void listening_joke(){

	role = TELLER;
     646:	84 e1       	ldi	r24, 0x14	; 20
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	90 93 29 01 	sts	0x0129, r25
     64e:	80 93 28 01 	sts	0x0128, r24

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     652:	80 e1       	ldi	r24, 0x10	; 16
     654:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     658:	84 e6       	ldi	r24, 0x64	; 100
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     660:	84 e0       	ldi	r24, 0x04	; 4
     662:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     666:	84 e6       	ldi	r24, 0x64	; 100
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     66e:	84 e1       	ldi	r24, 0x14	; 20
     670:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     674:	84 e6       	ldi	r24, 0x64	; 100
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     682:	84 e6       	ldi	r24, 0x64	; 100
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     68a:	81 e1       	ldi	r24, 0x11	; 17
     68c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     690:	84 e6       	ldi	r24, 0x64	; 100
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     698:	85 e0       	ldi	r24, 0x05	; 5
     69a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     69e:	84 e6       	ldi	r24, 0x64	; 100
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     6a6:	85 e1       	ldi	r24, 0x15	; 21
     6a8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     6ac:	84 e6       	ldi	r24, 0x64	; 100
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     6ba:	84 e6       	ldi	r24, 0x64	; 100
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     6c2:	84 e0       	ldi	r24, 0x04	; 4
     6c4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     6c8:	84 e6       	ldi	r24, 0x64	; 100
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     6d0:	84 e1       	ldi	r24, 0x14	; 20
     6d2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     6d6:	84 e6       	ldi	r24, 0x64	; 100
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     6e4:	84 e6       	ldi	r24, 0x64	; 100
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     6ec:	81 e1       	ldi	r24, 0x11	; 17
     6ee:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     6f2:	84 e6       	ldi	r24, 0x64	; 100
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     700:	84 e6       	ldi	r24, 0x64	; 100
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     708:	85 e1       	ldi	r24, 0x15	; 21
     70a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     70e:	84 e6       	ldi	r24, 0x64	; 100
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     716:	80 e1       	ldi	r24, 0x10	; 16
     718:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     71c:	84 e6       	ldi	r24, 0x64	; 100
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     72a:	84 e6       	ldi	r24, 0x64	; 100
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     732:	84 e1       	ldi	r24, 0x14	; 20
     734:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     738:	84 e6       	ldi	r24, 0x64	; 100
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     746:	84 e6       	ldi	r24, 0x64	; 100
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     74e:	81 e1       	ldi	r24, 0x11	; 17
     750:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     754:	84 e6       	ldi	r24, 0x64	; 100
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     762:	84 e6       	ldi	r24, 0x64	; 100
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     76a:	85 e1       	ldi	r24, 0x15	; 21
     76c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     770:	84 e6       	ldi	r24, 0x64	; 100
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
}

//advance functions
void laughing(){
	spinup_motors();
     778:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     77c:	8e e1       	ldi	r24, 0x1E	; 30
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     78c:	86 e9       	ldi	r24, 0x96	; 150
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     794:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     798:	8e e1       	ldi	r24, 0x1E	; 30
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     7a8:	86 e9       	ldi	r24, 0x96	; 150
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     7b0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     7b4:	8e e1       	ldi	r24, 0x1E	; 30
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     7c4:	86 e9       	ldi	r24, 0x96	; 150
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     7cc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     7d0:	8e e1       	ldi	r24, 0x1E	; 30
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     7e0:	86 e9       	ldi	r24, 0x96	; 150
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     7e8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     7ec:	8e e1       	ldi	r24, 0x1E	; 30
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     7fc:	86 e9       	ldi	r24, 0x96	; 150
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     804:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     808:	8e e1       	ldi	r24, 0x1E	; 30
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     818:	86 e9       	ldi	r24, 0x96	; 150
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <delay>

00000820 <find_and_tell>:

}

void find_and_tell(){

    if (message_sent == 1)
     820:	80 91 10 01 	lds	r24, 0x0110
     824:	90 91 11 01 	lds	r25, 0x0111
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	09 f4       	brne	.+2      	; 0x82e <find_and_tell+0xe>
     82c:	4b c1       	rjmp	.+662    	; 0xac4 <__stack+0x1c5>
    {
        message_sent = 0;
    }

	if (kilo_ticks > (last_state_update + 16)){
     82e:	40 91 51 01 	lds	r20, 0x0151
     832:	50 91 52 01 	lds	r21, 0x0152
     836:	60 91 53 01 	lds	r22, 0x0153
     83a:	70 91 54 01 	lds	r23, 0x0154
     83e:	80 91 2a 01 	lds	r24, 0x012A
     842:	90 91 2b 01 	lds	r25, 0x012B
     846:	a0 91 2c 01 	lds	r26, 0x012C
     84a:	b0 91 2d 01 	lds	r27, 0x012D
     84e:	40 96       	adiw	r24, 0x10	; 16
     850:	a1 1d       	adc	r26, r1
     852:	b1 1d       	adc	r27, r1
     854:	84 17       	cp	r24, r20
     856:	95 07       	cpc	r25, r21
     858:	a6 07       	cpc	r26, r22
     85a:	b7 07       	cpc	r27, r23
     85c:	08 f0       	brcs	.+2      	; 0x860 <find_and_tell+0x40>
     85e:	31 c1       	rjmp	.+610    	; 0xac2 <__stack+0x1c3>

		last_state_update = kilo_ticks;
     860:	80 91 51 01 	lds	r24, 0x0151
     864:	90 91 52 01 	lds	r25, 0x0152
     868:	a0 91 53 01 	lds	r26, 0x0153
     86c:	b0 91 54 01 	lds	r27, 0x0154
     870:	80 93 2a 01 	sts	0x012A, r24
     874:	90 93 2b 01 	sts	0x012B, r25
     878:	a0 93 2c 01 	sts	0x012C, r26
     87c:	b0 93 2d 01 	sts	0x012D, r27

	    if(message_recieved == 1){
     880:	80 91 0e 01 	lds	r24, 0x010E
     884:	90 91 0f 01 	lds	r25, 0x010F
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	79 f0       	breq	.+30     	; 0x8aa <find_and_tell+0x8a>
}

void find_others(){
	// Initialize message:
	// The type is always NORMAL.
	message.type = NORMAL;
     88c:	10 92 23 01 	sts	0x0123, r1
	// Some dummy data as an example.
	message.data[0] = FINDING_MESSAGE;
     890:	8a e0       	ldi	r24, 0x0A	; 10
     892:	80 93 1a 01 	sts	0x011A, r24
	// It's important that the CRC is computed after the data has been set;
	// otherwise it would be wrong.
	message.crc = message_crc(&message);
     896:	8a e1       	ldi	r24, 0x1A	; 26
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <message_crc>
     89e:	90 93 25 01 	sts	0x0125, r25
     8a2:	80 93 24 01 	sts	0x0124, r24

	random_move();
     8a6:	0c 94 0a 01 	jmp	0x214	; 0x214 <random_move>
	if (kilo_ticks > (last_state_update + 16)){

		last_state_update = kilo_ticks;

	    if(message_recieved == 1){
	    	message_recieved = 0;
     8aa:	10 92 0f 01 	sts	0x010F, r1
     8ae:	10 92 0e 01 	sts	0x010E, r1
	    	if(message_content==IM_HERE){
     8b2:	80 91 0c 01 	lds	r24, 0x010C
     8b6:	90 91 0d 01 	lds	r25, 0x010D
     8ba:	0b 97       	sbiw	r24, 0x0b	; 11
     8bc:	39 f7       	brne	.-50     	; 0x88c <find_and_tell+0x6c>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     8be:	80 91 14 01 	lds	r24, 0x0114
     8c2:	90 91 15 01 	lds	r25, 0x0115
     8c6:	89 2b       	or	r24, r25
     8c8:	41 f0       	breq	.+16     	; 0x8da <find_and_tell+0xba>
    {
        current_motion = new_motion;
     8ca:	10 92 15 01 	sts	0x0115, r1
     8ce:	10 92 14 01 	sts	0x0114, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
}

void telling_joke(){
	// Initialize message:
	// The type is always NORMAL.
	message.type = NORMAL;
     8da:	10 92 23 01 	sts	0x0123, r1
	// Some dummy data as an example.
	message.data[0] = JOKE_MESSAGE;
     8de:	8c e0       	ldi	r24, 0x0C	; 12
     8e0:	80 93 1a 01 	sts	0x011A, r24
	// It's important that the CRC is computed after the data has been set;
	// otherwise it would be wrong.
	message.crc = message_crc(&message);
     8e4:	8a e1       	ldi	r24, 0x1A	; 26
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <message_crc>
     8ec:	90 93 25 01 	sts	0x0125, r25
     8f0:	80 93 24 01 	sts	0x0124, r24

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     8f4:	80 e1       	ldi	r24, 0x10	; 16
     8f6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     8fa:	84 e6       	ldi	r24, 0x64	; 100
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     908:	84 e6       	ldi	r24, 0x64	; 100
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     910:	84 e1       	ldi	r24, 0x14	; 20
     912:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     916:	84 e6       	ldi	r24, 0x64	; 100
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     924:	84 e6       	ldi	r24, 0x64	; 100
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     92c:	81 e1       	ldi	r24, 0x11	; 17
     92e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     932:	84 e6       	ldi	r24, 0x64	; 100
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     93a:	85 e0       	ldi	r24, 0x05	; 5
     93c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     940:	84 e6       	ldi	r24, 0x64	; 100
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     948:	85 e1       	ldi	r24, 0x15	; 21
     94a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     94e:	84 e6       	ldi	r24, 0x64	; 100
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     956:	80 e1       	ldi	r24, 0x10	; 16
     958:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     95c:	84 e6       	ldi	r24, 0x64	; 100
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     96a:	84 e6       	ldi	r24, 0x64	; 100
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     972:	84 e1       	ldi	r24, 0x14	; 20
     974:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     978:	84 e6       	ldi	r24, 0x64	; 100
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     986:	84 e6       	ldi	r24, 0x64	; 100
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     98e:	81 e1       	ldi	r24, 0x11	; 17
     990:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     994:	84 e6       	ldi	r24, 0x64	; 100
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     99c:	85 e0       	ldi	r24, 0x05	; 5
     99e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     9a2:	84 e6       	ldi	r24, 0x64	; 100
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     9aa:	85 e1       	ldi	r24, 0x15	; 21
     9ac:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     9b0:	84 e6       	ldi	r24, 0x64	; 100
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     9b8:	80 e1       	ldi	r24, 0x10	; 16
     9ba:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     9be:	84 e6       	ldi	r24, 0x64	; 100
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     9cc:	84 e6       	ldi	r24, 0x64	; 100
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     9d4:	84 e1       	ldi	r24, 0x14	; 20
     9d6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     9da:	84 e6       	ldi	r24, 0x64	; 100
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     9e8:	84 e6       	ldi	r24, 0x64	; 100
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     9f0:	81 e1       	ldi	r24, 0x11	; 17
     9f2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     9f6:	84 e6       	ldi	r24, 0x64	; 100
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     a04:	84 e6       	ldi	r24, 0x64	; 100
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     a0c:	85 e1       	ldi	r24, 0x15	; 21
     a0e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     a12:	84 e6       	ldi	r24, 0x64	; 100
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
}

//advance functions
void laughing(){
	spinup_motors();
     a1a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     a1e:	8e e1       	ldi	r24, 0x1E	; 30
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     a2e:	86 e9       	ldi	r24, 0x96	; 150
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     a36:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     a3a:	8e e1       	ldi	r24, 0x1E	; 30
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     a4a:	86 e9       	ldi	r24, 0x96	; 150
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     a52:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     a56:	8e e1       	ldi	r24, 0x1E	; 30
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     a66:	86 e9       	ldi	r24, 0x96	; 150
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     a6e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     a72:	8e e1       	ldi	r24, 0x1E	; 30
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     a82:	86 e9       	ldi	r24, 0x96	; 150
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     a8a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     a8e:	8e e1       	ldi	r24, 0x1E	; 30
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     a9e:	86 e9       	ldi	r24, 0x96	; 150
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     aa6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     aaa:	8e e1       	ldi	r24, 0x1E	; 30
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     aba:	86 e9       	ldi	r24, 0x96	; 150
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <delay>
     ac2:	08 95       	ret

void find_and_tell(){

    if (message_sent == 1)
    {
        message_sent = 0;
     ac4:	10 92 11 01 	sts	0x0111, r1
     ac8:	10 92 10 01 	sts	0x0110, r1
     acc:	b0 ce       	rjmp	.-672    	; 0x82e <find_and_tell+0xe>

00000ace <loop>:
	}
}

void loop()
{
	if(role == TELLER){
     ace:	80 91 28 01 	lds	r24, 0x0128
     ad2:	90 91 29 01 	lds	r25, 0x0129
     ad6:	84 31       	cpi	r24, 0x14	; 20
     ad8:	91 05       	cpc	r25, r1
     ada:	09 f4       	brne	.+2      	; 0xade <loop+0x10>
     adc:	43 c1       	rjmp	.+646    	; 0xd64 <loop+0x296>
		find_and_tell();
	}else
	if(role == ROADPEOPLE){
     ade:	45 97       	sbiw	r24, 0x15	; 21
     ae0:	09 f0       	breq	.+2      	; 0xae4 <loop+0x16>
     ae2:	08 95       	ret
    }
}

void settle_and_listen(){

    if (message_sent == 1)
     ae4:	80 91 10 01 	lds	r24, 0x0110
     ae8:	90 91 11 01 	lds	r25, 0x0111
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <loop+0x24>
     af0:	3d c1       	rjmp	.+634    	; 0xd6c <loop+0x29e>
    {
        message_sent = 0;
    }

	if (kilo_ticks > (last_state_update + 16)){
     af2:	40 91 51 01 	lds	r20, 0x0151
     af6:	50 91 52 01 	lds	r21, 0x0152
     afa:	60 91 53 01 	lds	r22, 0x0153
     afe:	70 91 54 01 	lds	r23, 0x0154
     b02:	80 91 2a 01 	lds	r24, 0x012A
     b06:	90 91 2b 01 	lds	r25, 0x012B
     b0a:	a0 91 2c 01 	lds	r26, 0x012C
     b0e:	b0 91 2d 01 	lds	r27, 0x012D
     b12:	40 96       	adiw	r24, 0x10	; 16
     b14:	a1 1d       	adc	r26, r1
     b16:	b1 1d       	adc	r27, r1
     b18:	84 17       	cp	r24, r20
     b1a:	95 07       	cpc	r25, r21
     b1c:	a6 07       	cpc	r26, r22
     b1e:	b7 07       	cpc	r27, r23
     b20:	00 f7       	brcc	.-64     	; 0xae2 <loop+0x14>

		last_state_update = kilo_ticks;
     b22:	80 91 51 01 	lds	r24, 0x0151
     b26:	90 91 52 01 	lds	r25, 0x0152
     b2a:	a0 91 53 01 	lds	r26, 0x0153
     b2e:	b0 91 54 01 	lds	r27, 0x0154
     b32:	80 93 2a 01 	sts	0x012A, r24
     b36:	90 93 2b 01 	sts	0x012B, r25
     b3a:	a0 93 2c 01 	sts	0x012C, r26
     b3e:	b0 93 2d 01 	sts	0x012D, r27

	    if(message_recieved == 1){
     b42:	80 91 0e 01 	lds	r24, 0x010E
     b46:	90 91 0f 01 	lds	r25, 0x010F
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	09 f0       	breq	.+2      	; 0xb50 <loop+0x82>
     b4e:	0c c1       	rjmp	.+536    	; 0xd68 <loop+0x29a>
	    	message_recieved = 0;
     b50:	10 92 0f 01 	sts	0x010F, r1
     b54:	10 92 0e 01 	sts	0x010E, r1
	    	if(message_content==FINDING_MESSAGE){
     b58:	80 91 0c 01 	lds	r24, 0x010C
     b5c:	90 91 0d 01 	lds	r25, 0x010D
     b60:	8a 30       	cpi	r24, 0x0A	; 10
     b62:	91 05       	cpc	r25, r1
     b64:	09 f4       	brne	.+2      	; 0xb68 <loop+0x9a>
     b66:	07 c1       	rjmp	.+526    	; 0xd76 <loop+0x2a8>
				message.data[0] = IM_HERE;
				// It's important that the CRC is computed after the data has been set;
				// otherwise it would be wrong.
				message.crc = message_crc(&message);
	    	}
	    	if(message_content==JOKE_MESSAGE){
     b68:	0c 97       	sbiw	r24, 0x0c	; 12
     b6a:	09 f0       	breq	.+2      	; 0xb6e <loop+0xa0>
     b6c:	ba cf       	rjmp	.-140    	; 0xae2 <loop+0x14>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     b6e:	80 91 14 01 	lds	r24, 0x0114
     b72:	90 91 15 01 	lds	r25, 0x0115
     b76:	89 2b       	or	r24, r25
     b78:	41 f0       	breq	.+16     	; 0xb8a <loop+0xbc>
    {
        current_motion = new_motion;
     b7a:	10 92 15 01 	sts	0x0115, r1
     b7e:	10 92 14 01 	sts	0x0114, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	laughing();
}

void listening_joke(){

	role = TELLER;
     b8a:	84 e1       	ldi	r24, 0x14	; 20
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	90 93 29 01 	sts	0x0129, r25
     b92:	80 93 28 01 	sts	0x0128, r24

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     b96:	80 e1       	ldi	r24, 0x10	; 16
     b98:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     b9c:	84 e6       	ldi	r24, 0x64	; 100
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     baa:	84 e6       	ldi	r24, 0x64	; 100
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     bb2:	84 e1       	ldi	r24, 0x14	; 20
     bb4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     bb8:	84 e6       	ldi	r24, 0x64	; 100
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     bc6:	84 e6       	ldi	r24, 0x64	; 100
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     bce:	81 e1       	ldi	r24, 0x11	; 17
     bd0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     bd4:	84 e6       	ldi	r24, 0x64	; 100
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     be2:	84 e6       	ldi	r24, 0x64	; 100
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     bea:	85 e1       	ldi	r24, 0x15	; 21
     bec:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     bf0:	84 e6       	ldi	r24, 0x64	; 100
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     bf8:	80 e1       	ldi	r24, 0x10	; 16
     bfa:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     bfe:	84 e6       	ldi	r24, 0x64	; 100
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     c14:	84 e1       	ldi	r24, 0x14	; 20
     c16:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c1a:	84 e6       	ldi	r24, 0x64	; 100
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c28:	84 e6       	ldi	r24, 0x64	; 100
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     c30:	81 e1       	ldi	r24, 0x11	; 17
     c32:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c36:	84 e6       	ldi	r24, 0x64	; 100
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     c3e:	85 e0       	ldi	r24, 0x05	; 5
     c40:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c44:	84 e6       	ldi	r24, 0x64	; 100
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     c4c:	85 e1       	ldi	r24, 0x15	; 21
     c4e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c52:	84 e6       	ldi	r24, 0x64	; 100
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     c5a:	80 e1       	ldi	r24, 0x10	; 16
     c5c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c60:	84 e6       	ldi	r24, 0x64	; 100
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c6e:	84 e6       	ldi	r24, 0x64	; 100
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     c76:	84 e1       	ldi	r24, 0x14	; 20
     c78:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c7c:	84 e6       	ldi	r24, 0x64	; 100
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c8a:	84 e6       	ldi	r24, 0x64	; 100
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     c92:	81 e1       	ldi	r24, 0x11	; 17
     c94:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     c98:	84 e6       	ldi	r24, 0x64	; 100
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     ca0:	85 e0       	ldi	r24, 0x05	; 5
     ca2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     ca6:	84 e6       	ldi	r24, 0x64	; 100
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     cae:	85 e1       	ldi	r24, 0x15	; 21
     cb0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     cb4:	84 e6       	ldi	r24, 0x64	; 100
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
}

//advance functions
void laughing(){
	spinup_motors();
     cbc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     cc0:	8e e1       	ldi	r24, 0x1E	; 30
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     cd0:	86 e9       	ldi	r24, 0x96	; 150
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     cd8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     cdc:	8e e1       	ldi	r24, 0x1E	; 30
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     cec:	86 e9       	ldi	r24, 0x96	; 150
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     cf4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     cf8:	8e e1       	ldi	r24, 0x1E	; 30
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     d08:	86 e9       	ldi	r24, 0x96	; 150
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     d10:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     d14:	8e e1       	ldi	r24, 0x1E	; 30
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     d24:	86 e9       	ldi	r24, 0x96	; 150
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     d2c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     d30:	8e e1       	ldi	r24, 0x1E	; 30
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     d40:	86 e9       	ldi	r24, 0x96	; 150
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     d48:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     d4c:	8e e1       	ldi	r24, 0x1E	; 30
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     d5c:	86 e9       	ldi	r24, 0x96	; 150
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <delay>
}

void loop()
{
	if(role == TELLER){
		find_and_tell();
     d64:	0c 94 10 04 	jmp	0x820	; 0x820 <find_and_tell>
	    		set_motion(STOP);
	    		listening_joke();
	    	}
	    }
	    else{
		    	random_move();
     d68:	0c 94 0a 01 	jmp	0x214	; 0x214 <random_move>

void settle_and_listen(){

    if (message_sent == 1)
    {
        message_sent = 0;
     d6c:	10 92 11 01 	sts	0x0111, r1
     d70:	10 92 10 01 	sts	0x0110, r1
     d74:	be ce       	rjmp	.-644    	; 0xaf2 <loop+0x24>
	    if(message_recieved == 1){
	    	message_recieved = 0;
	    	if(message_content==FINDING_MESSAGE){
				// Initialize message:
				// The type is always NORMAL.
				message.type = NORMAL;
     d76:	10 92 23 01 	sts	0x0123, r1
				// Some dummy data as an example.
				message.data[0] = IM_HERE;
     d7a:	8b e0       	ldi	r24, 0x0B	; 11
     d7c:	80 93 1a 01 	sts	0x011A, r24
				// It's important that the CRC is computed after the data has been set;
				// otherwise it would be wrong.
				message.crc = message_crc(&message);
     d80:	8a e1       	ldi	r24, 0x1A	; 26
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 68 11 	call	0x22d0	; 0x22d0 <message_crc>
     d88:	90 93 25 01 	sts	0x0125, r25
     d8c:	80 93 24 01 	sts	0x0124, r24
     d90:	80 91 0c 01 	lds	r24, 0x010C
     d94:	90 91 0d 01 	lds	r25, 0x010D
     d98:	e7 ce       	rjmp	.-562    	; 0xb68 <loop+0x9a>

00000d9a <settle_and_listen>:

		}
    }
}

void settle_and_listen(){
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29

    if (message_sent == 1)
     d9e:	80 91 10 01 	lds	r24, 0x0110
     da2:	90 91 11 01 	lds	r25, 0x0111
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	09 f4       	brne	.+2      	; 0xdac <settle_and_listen+0x12>
     daa:	64 c1       	rjmp	.+712    	; 0x1074 <settle_and_listen+0x2da>
    {
        message_sent = 0;
    }

	if (kilo_ticks > (last_state_update + 16)){
     dac:	40 91 51 01 	lds	r20, 0x0151
     db0:	50 91 52 01 	lds	r21, 0x0152
     db4:	60 91 53 01 	lds	r22, 0x0153
     db8:	70 91 54 01 	lds	r23, 0x0154
     dbc:	80 91 2a 01 	lds	r24, 0x012A
     dc0:	90 91 2b 01 	lds	r25, 0x012B
     dc4:	a0 91 2c 01 	lds	r26, 0x012C
     dc8:	b0 91 2d 01 	lds	r27, 0x012D
     dcc:	40 96       	adiw	r24, 0x10	; 16
     dce:	a1 1d       	adc	r26, r1
     dd0:	b1 1d       	adc	r27, r1
     dd2:	84 17       	cp	r24, r20
     dd4:	95 07       	cpc	r25, r21
     dd6:	a6 07       	cpc	r26, r22
     dd8:	b7 07       	cpc	r27, r23
     dda:	f0 f5       	brcc	.+124    	; 0xe58 <settle_and_listen+0xbe>

		last_state_update = kilo_ticks;
     ddc:	80 91 51 01 	lds	r24, 0x0151
     de0:	90 91 52 01 	lds	r25, 0x0152
     de4:	a0 91 53 01 	lds	r26, 0x0153
     de8:	b0 91 54 01 	lds	r27, 0x0154
     dec:	80 93 2a 01 	sts	0x012A, r24
     df0:	90 93 2b 01 	sts	0x012B, r25
     df4:	a0 93 2c 01 	sts	0x012C, r26
     df8:	b0 93 2d 01 	sts	0x012D, r27

	    if(message_recieved == 1){
     dfc:	80 91 0e 01 	lds	r24, 0x010E
     e00:	90 91 0f 01 	lds	r25, 0x010F
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	59 f1       	breq	.+86     	; 0xe5e <settle_and_listen+0xc4>
    }
}

void random_move(){

	int random_number = rand_hard();
     e08:	0e 94 56 0b 	call	0x16ac	; 0x16ac <rand_hard>
    int random_direction = (random_number % 4);
     e0c:	83 70       	andi	r24, 0x03	; 3

    if(random_direction==0||random_direction==1){
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	08 f4       	brcc	.+2      	; 0xe14 <settle_and_listen+0x7a>
     e12:	47 c1       	rjmp	.+654    	; 0x10a2 <settle_and_listen+0x308>
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	09 f4       	brne	.+2      	; 0xe1a <settle_and_listen+0x80>
     e18:	61 c1       	rjmp	.+706    	; 0x10dc <settle_and_listen+0x342>
    	set_color(RGB(1, 0, 0));
		set_motion(LEFT);
    }
    else if(random_direction==3){
    	set_color(RGB(0, 0, 1));
     e1a:	80 e1       	ldi	r24, 0x10	; 16
     e1c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     e20:	80 91 14 01 	lds	r24, 0x0114
     e24:	90 91 15 01 	lds	r25, 0x0115
     e28:	03 97       	sbiw	r24, 0x03	; 3
     e2a:	b1 f0       	breq	.+44     	; 0xe58 <settle_and_listen+0xbe>
    {
        current_motion = new_motion;
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	90 93 15 01 	sts	0x0115, r25
     e34:	80 93 14 01 	sts	0x0114, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     e38:	80 91 12 01 	lds	r24, 0x0112
     e3c:	90 91 13 01 	lds	r25, 0x0113
     e40:	89 2b       	or	r24, r25
     e42:	09 f4       	brne	.+2      	; 0xe46 <settle_and_listen+0xac>
     e44:	6d c1       	rjmp	.+730    	; 0x1120 <settle_and_listen+0x386>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     e46:	60 91 77 01 	lds	r22, 0x0177
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
     e50:	10 92 13 01 	sts	0x0113, r1
     e54:	10 92 12 01 	sts	0x0112, r1
	    else{
		    	random_move();

		}
	}
}
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret
	if (kilo_ticks > (last_state_update + 16)){

		last_state_update = kilo_ticks;

	    if(message_recieved == 1){
	    	message_recieved = 0;
     e5e:	10 92 0f 01 	sts	0x010F, r1
     e62:	10 92 0e 01 	sts	0x010E, r1
	    	if(message_content==FINDING_MESSAGE){
     e66:	80 91 0c 01 	lds	r24, 0x010C
     e6a:	90 91 0d 01 	lds	r25, 0x010D
     e6e:	8a 30       	cpi	r24, 0x0A	; 10
     e70:	91 05       	cpc	r25, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <settle_and_listen+0xdc>
     e74:	04 c1       	rjmp	.+520    	; 0x107e <settle_and_listen+0x2e4>
				message.data[0] = IM_HERE;
				// It's important that the CRC is computed after the data has been set;
				// otherwise it would be wrong.
				message.crc = message_crc(&message);
	    	}
	    	if(message_content==JOKE_MESSAGE){
     e76:	0c 97       	sbiw	r24, 0x0c	; 12
     e78:	79 f7       	brne	.-34     	; 0xe58 <settle_and_listen+0xbe>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     e7a:	80 91 14 01 	lds	r24, 0x0114
     e7e:	90 91 15 01 	lds	r25, 0x0115
     e82:	89 2b       	or	r24, r25
     e84:	41 f0       	breq	.+16     	; 0xe96 <settle_and_listen+0xfc>
    {
        current_motion = new_motion;
     e86:	10 92 15 01 	sts	0x0115, r1
     e8a:	10 92 14 01 	sts	0x0114, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	laughing();
}

void listening_joke(){

	role = TELLER;
     e96:	84 e1       	ldi	r24, 0x14	; 20
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	90 93 29 01 	sts	0x0129, r25
     e9e:	80 93 28 01 	sts	0x0128, r24

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     ea2:	80 e1       	ldi	r24, 0x10	; 16
     ea4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     ea8:	84 e6       	ldi	r24, 0x64	; 100
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     eb0:	84 e0       	ldi	r24, 0x04	; 4
     eb2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     eb6:	84 e6       	ldi	r24, 0x64	; 100
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     ebe:	84 e1       	ldi	r24, 0x14	; 20
     ec0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     ec4:	84 e6       	ldi	r24, 0x64	; 100
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     ed2:	84 e6       	ldi	r24, 0x64	; 100
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     eda:	81 e1       	ldi	r24, 0x11	; 17
     edc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     ee0:	84 e6       	ldi	r24, 0x64	; 100
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     ee8:	85 e0       	ldi	r24, 0x05	; 5
     eea:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     eee:	84 e6       	ldi	r24, 0x64	; 100
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     ef6:	85 e1       	ldi	r24, 0x15	; 21
     ef8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     efc:	84 e6       	ldi	r24, 0x64	; 100
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     f04:	80 e1       	ldi	r24, 0x10	; 16
     f06:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f0a:	84 e6       	ldi	r24, 0x64	; 100
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     f12:	84 e0       	ldi	r24, 0x04	; 4
     f14:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f18:	84 e6       	ldi	r24, 0x64	; 100
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     f20:	84 e1       	ldi	r24, 0x14	; 20
     f22:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f26:	84 e6       	ldi	r24, 0x64	; 100
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f34:	84 e6       	ldi	r24, 0x64	; 100
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     f3c:	81 e1       	ldi	r24, 0x11	; 17
     f3e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f42:	84 e6       	ldi	r24, 0x64	; 100
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     f4a:	85 e0       	ldi	r24, 0x05	; 5
     f4c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f50:	84 e6       	ldi	r24, 0x64	; 100
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     f58:	85 e1       	ldi	r24, 0x15	; 21
     f5a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f5e:	84 e6       	ldi	r24, 0x64	; 100
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>

}

void flash_led(){
		
	  		set_color(RGB(0, 0, 1));
     f66:	80 e1       	ldi	r24, 0x10	; 16
     f68:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f6c:	84 e6       	ldi	r24, 0x64	; 100
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 0));
     f74:	84 e0       	ldi	r24, 0x04	; 4
     f76:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f7a:	84 e6       	ldi	r24, 0x64	; 100
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(0, 1, 1));
     f82:	84 e1       	ldi	r24, 0x14	; 20
     f84:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f88:	84 e6       	ldi	r24, 0x64	; 100
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 0));
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     f96:	84 e6       	ldi	r24, 0x64	; 100
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 0, 1));
     f9e:	81 e1       	ldi	r24, 0x11	; 17
     fa0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     fa4:	84 e6       	ldi	r24, 0x64	; 100
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 0));
     fac:	85 e0       	ldi	r24, 0x05	; 5
     fae:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     fb2:	84 e6       	ldi	r24, 0x64	; 100
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		set_color(RGB(1, 1, 1));
     fba:	85 e1       	ldi	r24, 0x15	; 21
     fbc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>
	  		delay(FLASH_DELAY);
     fc0:	84 e6       	ldi	r24, 0x64	; 100
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
}

//advance functions
void laughing(){
	spinup_motors();
     fc8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     fcc:	8e e1       	ldi	r24, 0x1E	; 30
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     fdc:	86 e9       	ldi	r24, 0x96	; 150
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
     fe4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
     fe8:	8e e1       	ldi	r24, 0x1E	; 30
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
     ff8:	86 e9       	ldi	r24, 0x96	; 150
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
    1000:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
    1004:	8e e1       	ldi	r24, 0x1E	; 30
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
    1014:	86 e9       	ldi	r24, 0x96	; 150
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
    101c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
    1020:	8e e1       	ldi	r24, 0x1E	; 30
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
    1030:	86 e9       	ldi	r24, 0x96	; 150
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
    1038:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
    103c:	8e e1       	ldi	r24, 0x1E	; 30
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
    104c:	86 e9       	ldi	r24, 0x96	; 150
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	  		delay(FLASH_DELAY);
}

//advance functions
void laughing(){
	spinup_motors();
    1054:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
	delay(30);
    1058:	8e e1       	ldi	r24, 0x1E	; 30
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <delay>
	set_motors(0,0);
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
	delay(150);
    1068:	86 e9       	ldi	r24, 0x96	; 150
    106a:	90 e0       	ldi	r25, 0x00	; 0
	    else{
		    	random_move();

		}
	}
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
//advance functions
void laughing(){
	spinup_motors();
	delay(30);
	set_motors(0,0);
	delay(150);
    1070:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <delay>

void settle_and_listen(){

    if (message_sent == 1)
    {
        message_sent = 0;
    1074:	10 92 11 01 	sts	0x0111, r1
    1078:	10 92 10 01 	sts	0x0110, r1
    107c:	97 ce       	rjmp	.-722    	; 0xdac <settle_and_listen+0x12>
	    if(message_recieved == 1){
	    	message_recieved = 0;
	    	if(message_content==FINDING_MESSAGE){
				// Initialize message:
				// The type is always NORMAL.
				message.type = NORMAL;
    107e:	10 92 23 01 	sts	0x0123, r1
				// Some dummy data as an example.
				message.data[0] = IM_HERE;
    1082:	8b e0       	ldi	r24, 0x0B	; 11
    1084:	80 93 1a 01 	sts	0x011A, r24
				// It's important that the CRC is computed after the data has been set;
				// otherwise it would be wrong.
				message.crc = message_crc(&message);
    1088:	8a e1       	ldi	r24, 0x1A	; 26
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <message_crc>
    1090:	90 93 25 01 	sts	0x0125, r25
    1094:	80 93 24 01 	sts	0x0124, r24
    1098:	80 91 0c 01 	lds	r24, 0x010C
    109c:	90 91 0d 01 	lds	r25, 0x010D
    10a0:	ea ce       	rjmp	.-556    	; 0xe76 <settle_and_listen+0xdc>

	int random_number = rand_hard();
    int random_direction = (random_number % 4);

    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
    10a8:	80 91 14 01 	lds	r24, 0x0114
    10ac:	90 91 15 01 	lds	r25, 0x0115
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <settle_and_listen+0x31c>
    10b4:	d1 ce       	rjmp	.-606    	; 0xe58 <settle_and_listen+0xbe>
    {
        current_motion = new_motion;
    10b6:	c1 e0       	ldi	r28, 0x01	; 1
    10b8:	d0 e0       	ldi	r29, 0x00	; 0
    10ba:	d0 93 15 01 	sts	0x0115, r29
    10be:	c0 93 14 01 	sts	0x0114, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
    10c2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
    10c6:	60 91 8a 01 	lds	r22, 0x018A
    10ca:	80 91 89 01 	lds	r24, 0x0189
    10ce:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 1;
    10d2:	d0 93 13 01 	sts	0x0113, r29
    10d6:	c0 93 12 01 	sts	0x0112, r28
    10da:	be ce       	rjmp	.-644    	; 0xe58 <settle_and_listen+0xbe>
    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
    	set_color(RGB(1, 0, 0));
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <set_color>

//base functions
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
    10e2:	80 91 14 01 	lds	r24, 0x0114
    10e6:	90 91 15 01 	lds	r25, 0x0115
    10ea:	02 97       	sbiw	r24, 0x02	; 2
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <settle_and_listen+0x356>
    10ee:	b4 ce       	rjmp	.-664    	; 0xe58 <settle_and_listen+0xbe>
    {
        current_motion = new_motion;
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	90 93 15 01 	sts	0x0115, r25
    10f8:	80 93 14 01 	sts	0x0114, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
    10fc:	80 91 12 01 	lds	r24, 0x0112
    1100:	90 91 13 01 	lds	r25, 0x0113
    1104:	89 2b       	or	r24, r25
    1106:	11 f4       	brne	.+4      	; 0x110c <settle_and_listen+0x372>
                spinup_motors();
    1108:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
            set_motors(kilo_turn_left, 0);
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	80 91 8b 01 	lds	r24, 0x018B
    1112:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <set_motors>
            both_spined = 0;
    1116:	10 92 13 01 	sts	0x0113, r1
    111a:	10 92 12 01 	sts	0x0112, r1
    111e:	9c ce       	rjmp	.-712    	; 0xe58 <settle_and_listen+0xbe>
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
    1120:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <spinup_motors>
    1124:	90 ce       	rjmp	.-736    	; 0xe46 <settle_and_listen+0xac>

00001126 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
    1126:	08 95       	ret

00001128 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	08 95       	ret

0000112e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
    112e:	08 95       	ret

00001130 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    cli();
    113e:	f8 94       	cli

    ports_off();
    1140:	14 b8       	out	0x04, r1	; 4
    1142:	17 b8       	out	0x07, r1	; 7
    1144:	1a b8       	out	0x0a, r1	; 10
    1146:	15 b8       	out	0x05, r1	; 5
    1148:	18 b8       	out	0x08, r1	; 8
    114a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
    114c:	52 9a       	sbi	0x0a, 2	; 10
    114e:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
    1150:	14 bc       	out	0x24, r1	; 36
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	85 bd       	out	0x25, r24	; 37
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	87 bd       	out	0x27, r24	; 39
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
    1160:	10 92 80 00 	sts	0x0080, r1
    1164:	10 92 81 00 	sts	0x0081, r1
    1168:	2f e8       	ldi	r18, 0x8F	; 143
    116a:	3b e0       	ldi	r19, 0x0B	; 11
    116c:	30 93 89 00 	sts	0x0089, r19
    1170:	20 93 88 00 	sts	0x0088, r18
    1174:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
    1178:	53 98       	cbi	0x0a, 3	; 10
    117a:	23 98       	cbi	0x04, 3	; 4
    117c:	91 ea       	ldi	r25, 0xA1	; 161
    117e:	90 93 b0 00 	sts	0x00B0, r25
    1182:	80 93 b1 00 	sts	0x00B1, r24
    1186:	10 92 b4 00 	sts	0x00B4, r1
    118a:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
    118e:	8b e0       	ldi	r24, 0x0B	; 11
    1190:	80 bf       	out	0x30, r24	; 48
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
    1198:	86 e0       	ldi	r24, 0x06	; 6
    119a:	80 93 7c 00 	sts	0x007C, r24
    119e:	83 e8       	ldi	r24, 0x83	; 131
    11a0:	80 93 7a 00 	sts	0x007A, r24
    11a4:	80 91 7a 00 	lds	r24, 0x007A
    11a8:	80 64       	ori	r24, 0x40	; 64
    11aa:	80 93 7a 00 	sts	0x007A, r24
    11ae:	80 91 7a 00 	lds	r24, 0x007A
    11b2:	86 fd       	sbrc	r24, 6
    11b4:	fc cf       	rjmp	.-8      	; 0x11ae <kilo_init+0x7e>
    adc_trigger_high_gain();
    11b6:	10 92 7c 00 	sts	0x007C, r1
    11ba:	83 ea       	ldi	r24, 0xA3	; 163
    11bc:	80 93 7a 00 	sts	0x007A, r24
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    if (osccal != 0xFF)
    11ce:	8f 3f       	cpi	r24, 0xFF	; 255
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <kilo_init+0xa6>
        OSCCAL = osccal;
    11d2:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
    11d6:	10 92 55 01 	sts	0x0155, r1
    rx_leadingbit = 1;
    11da:	c1 e0       	ldi	r28, 0x01	; 1
    11dc:	c0 93 2e 01 	sts	0x012E, r28
    rx_leadingbyte = 1;
    11e0:	c0 93 72 01 	sts	0x0172, r28
    rx_byteindex = 0;
    11e4:	10 92 4c 01 	sts	0x014C, r1
    rx_bytevalue = 0;
    11e8:	10 92 86 01 	sts	0x0186, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
    11ec:	80 e9       	ldi	r24, 0x90	; 144
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    11f4:	80 93 4b 01 	sts	0x014B, r24
    if (tx_mask & ~TX_MASK_MAX)
    11f8:	80 91 4b 01 	lds	r24, 0x014B
    11fc:	88 73       	andi	r24, 0x38	; 56
    11fe:	11 f0       	breq	.+4      	; 0x1204 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
    1200:	c0 93 4b 01 	sts	0x014B, r28
    tx_clock = 0;
    1204:	10 92 76 01 	sts	0x0176, r1
    1208:	10 92 75 01 	sts	0x0175, r1
    tx_increment = 255;
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	90 93 74 01 	sts	0x0174, r25
    1214:	80 93 73 01 	sts	0x0173, r24
    kilo_ticks = 0;
    1218:	10 92 51 01 	sts	0x0151, r1
    121c:	10 92 52 01 	sts	0x0152, r1
    1220:	10 92 53 01 	sts	0x0153, r1
    1224:	10 92 54 01 	sts	0x0154, r1
    kilo_state = IDLE;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 19 01 	sts	0x0119, r24
    kilo_tx_period = 3906;
    122e:	82 e4       	ldi	r24, 0x42	; 66
    1230:	9f e0       	ldi	r25, 0x0F	; 15
    1232:	90 93 85 01 	sts	0x0185, r25
    1236:	80 93 84 01 	sts	0x0184, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
    123a:	80 eb       	ldi	r24, 0xB0	; 176
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    1242:	c8 2f       	mov	r28, r24
    1244:	81 eb       	ldi	r24, 0xB1	; 177
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    124c:	2c 2f       	mov	r18, r28
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	38 2b       	or	r19, r24
    1252:	30 93 88 01 	sts	0x0188, r19
    1256:	20 93 87 01 	sts	0x0187, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
    125a:	85 e0       	ldi	r24, 0x05	; 5
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    1262:	80 93 8b 01 	sts	0x018B, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    1266:	89 e0       	ldi	r24, 0x09	; 9
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    126e:	80 93 77 01 	sts	0x0177, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    1272:	8c e0       	ldi	r24, 0x0C	; 12
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    127a:	80 93 89 01 	sts	0x0189, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    1286:	80 93 8a 01 	sts	0x018A, r24
    128a:	56 e5       	ldi	r21, 0x56	; 86
    128c:	e5 2e       	mov	r14, r21
    128e:	51 e0       	ldi	r21, 0x01	; 1
    1290:	f5 2e       	mov	r15, r21
    1292:	0f e2       	ldi	r16, 0x2F	; 47
    1294:	11 e0       	ldi	r17, 0x01	; 1
    1296:	c0 e2       	ldi	r28, 0x20	; 32
    1298:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    129a:	ce 01       	movw	r24, r28
    129c:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    12a0:	d8 2e       	mov	r13, r24
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    12aa:	2d 2d       	mov	r18, r13
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	32 2f       	mov	r19, r18
    12b0:	22 27       	eor	r18, r18
    12b2:	28 2b       	or	r18, r24
    12b4:	f7 01       	movw	r30, r14
    12b6:	21 93       	st	Z+, r18
    12b8:	31 93       	st	Z+, r19
    12ba:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    12bc:	ce 01       	movw	r24, r28
    12be:	c0 96       	adiw	r24, 0x30	; 48
    12c0:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    12c4:	d8 2e       	mov	r13, r24
    12c6:	ce 01       	movw	r24, r28
    12c8:	c1 96       	adiw	r24, 0x31	; 49
    12ca:	0e 94 cd 14 	call	0x299a	; 0x299a <eeprom_read_byte>
    12ce:	2d 2d       	mov	r18, r13
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	32 2f       	mov	r19, r18
    12d4:	22 27       	eor	r18, r18
    12d6:	28 2b       	or	r18, r24
    12d8:	f8 01       	movw	r30, r16
    12da:	21 93       	st	Z+, r18
    12dc:	31 93       	st	Z+, r19
    12de:	8f 01       	movw	r16, r30
    12e0:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
    12e2:	cc 33       	cpi	r28, 0x3C	; 60
    12e4:	d1 05       	cpc	r29, r1
    12e6:	c9 f6       	brne	.-78     	; 0x129a <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
    12e8:	78 94       	sei
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	08 95       	ret

000012fa <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	8f 93       	push	r24
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	a8 95       	wdr
    130c:	80 91 60 00 	lds	r24, 0x0060
    1310:	88 61       	ori	r24, 0x18	; 24
    1312:	80 93 60 00 	sts	0x0060, r24
    1316:	10 92 60 00 	sts	0x0060, r1
    131a:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
    131c:	8f 91       	pop	r24
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    1328:	3c 01       	movw	r6, r24
    132a:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
    132c:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
    132e:	99 24       	eor	r9, r9
    1330:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1332:	84 e0       	ldi	r24, 0x04	; 4
    1334:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
    1336:	96 e0       	ldi	r25, 0x06	; 6
    1338:	a9 2e       	mov	r10, r25
    133a:	23 e8       	ldi	r18, 0x83	; 131
    133c:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    133e:	38 e1       	ldi	r19, 0x18	; 24
    1340:	d3 2e       	mov	r13, r19
    1342:	49 e2       	ldi	r20, 0x29	; 41
    1344:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    1346:	90 91 19 01 	lds	r25, 0x0119
    134a:	e9 2f       	mov	r30, r25
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	e7 30       	cpi	r30, 0x07	; 7
    1350:	f1 05       	cpc	r31, r1
    1352:	c8 f7       	brcc	.-14     	; 0x1346 <kilo_start+0x1e>
    1354:	ec 5c       	subi	r30, 0xCC	; 204
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
    135c:	11 23       	and	r17, r17
    135e:	09 f4       	brne	.+2      	; 0x1362 <kilo_start+0x3a>
    1360:	fc c0       	rjmp	.+504    	; 0x155a <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1362:	c0 92 19 01 	sts	0x0119, r12
    1366:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
    1368:	fe 01       	movw	r30, r28
    136a:	09 95       	icall
                break;
    136c:	ec cf       	rjmp	.-40     	; 0x1346 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    136e:	80 91 55 01 	lds	r24, 0x0155
    1372:	81 11       	cpse	r24, r1
    1374:	eb c0       	rjmp	.+470    	; 0x154c <kilo_start+0x224>
        cli();                                    // disable interrupts
    1376:	f8 94       	cli
        adc_setup_conversion(6);
    1378:	a0 92 7c 00 	sts	0x007C, r10
    137c:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
    1380:	80 91 7a 00 	lds	r24, 0x007A
    1384:	80 64       	ori	r24, 0x40	; 64
    1386:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    138a:	90 91 7a 00 	lds	r25, 0x007A
    138e:	96 fd       	sbrc	r25, 6
    1390:	fc cf       	rjmp	.-8      	; 0x138a <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
    1392:	80 91 78 00 	lds	r24, 0x0078
    1396:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    139a:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
    139c:	8b 3a       	cpi	r24, 0xAB	; 171
    139e:	e2 e0       	ldi	r30, 0x02	; 2
    13a0:	9e 07       	cpc	r25, r30
    13a2:	0c f0       	brlt	.+2      	; 0x13a6 <kilo_start+0x7e>
    13a4:	ed c0       	rjmp	.+474    	; 0x1580 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
    13a6:	89 38       	cpi	r24, 0x89	; 137
    13a8:	f2 e0       	ldi	r31, 0x02	; 2
    13aa:	9f 07       	cpc	r25, r31
    13ac:	0c f0       	brlt	.+2      	; 0x13b0 <kilo_start+0x88>
    13ae:	ef c0       	rjmp	.+478    	; 0x158e <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
    13b0:	87 36       	cpi	r24, 0x67	; 103
    13b2:	92 40       	sbci	r25, 0x02	; 2
    13b4:	0c f4       	brge	.+2      	; 0x13b8 <kilo_start+0x90>
    13b6:	ca c0       	rjmp	.+404    	; 0x154c <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    13b8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    13ba:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    13bc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    13be:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    13c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    13c2:	3c 98       	cbi	0x07, 4	; 7
    13c4:	c0 cf       	rjmp	.-128    	; 0x1346 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
    13c6:	f8 94       	cli
                acomp_off();
    13c8:	80 b7       	in	r24, 0x30	; 48
    13ca:	87 7f       	andi	r24, 0xF7	; 247
    13cc:	80 bf       	out	0x30, r24	; 48
                adc_off();
    13ce:	80 91 7a 00 	lds	r24, 0x007A
    13d2:	8f 77       	andi	r24, 0x7F	; 127
    13d4:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
    13d8:	14 b8       	out	0x04, r1	; 4
    13da:	17 b8       	out	0x07, r1	; 7
    13dc:	1a b8       	out	0x0a, r1	; 10
    13de:	15 b8       	out	0x05, r1	; 5
    13e0:	18 b8       	out	0x08, r1	; 8
    13e2:	1b b8       	out	0x0b, r1	; 11
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	a8 95       	wdr
    13ea:	d0 92 60 00 	sts	0x0060, r13
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
    13f4:	80 91 60 00 	lds	r24, 0x0060
    13f8:	80 64       	ori	r24, 0x40	; 64
    13fa:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    13fe:	93 b7       	in	r25, 0x33	; 51
    1400:	91 7f       	andi	r25, 0xF1	; 241
    1402:	94 60       	ori	r25, 0x04	; 4
    1404:	93 bf       	out	0x33, r25	; 51
                cli();
    1406:	f8 94       	cli
                sleep_enable();
    1408:	83 b7       	in	r24, 0x33	; 51
    140a:	81 60       	ori	r24, 0x01	; 1
    140c:	83 bf       	out	0x33, r24	; 51
                sei();
    140e:	78 94       	sei
                sleep_cpu();
    1410:	88 95       	sleep
                sleep_disable();
    1412:	83 b7       	in	r24, 0x33	; 51
    1414:	8e 7f       	andi	r24, 0xFE	; 254
    1416:	83 bf       	out	0x33, r24	; 51
                sei();
    1418:	78 94       	sei
                rx_busy = 0;
    141a:	10 92 55 01 	sts	0x0155, r1
                ports_on();
    141e:	52 9a       	sbi	0x0a, 2	; 10
    1420:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
    1422:	80 91 7a 00 	lds	r24, 0x007A
    1426:	80 68       	ori	r24, 0x80	; 128
    1428:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    142c:	87 e5       	ldi	r24, 0x57	; 87
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <kilo_start+0x108>
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <kilo_start+0x10e>
    1436:	00 00       	nop
                _delay_us(300);
                acomp_on();
    1438:	80 b7       	in	r24, 0x30	; 48
    143a:	88 61       	ori	r24, 0x18	; 24
    143c:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    143e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    1440:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    1442:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    1444:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    1446:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    1448:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    144a:	ef e1       	ldi	r30, 0x1F	; 31
    144c:	fe e4       	ldi	r31, 0x4E	; 78
    144e:	31 97       	sbiw	r30, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <kilo_start+0x126>
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <kilo_start+0x12c>
    1454:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
    1456:	80 91 55 01 	lds	r24, 0x0155
    145a:	81 11       	cpse	r24, r1
    145c:	81 c0       	rjmp	.+258    	; 0x1560 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    145e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1460:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1462:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1464:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1466:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1468:	3c 98       	cbi	0x07, 4	; 7
    146a:	6d cf       	rjmp	.-294    	; 0x1346 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
    146c:	80 91 17 01 	lds	r24, 0x0117
    1470:	81 11       	cpse	r24, r1
    1472:	41 c0       	rjmp	.+130    	; 0x14f6 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1474:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    1478:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
    147c:	10 92 18 01 	sts	0x0118, r1
    1480:	62 cf       	rjmp	.-316    	; 0x1346 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
    1482:	48 99       	sbic	0x09, 0	; 9
    1484:	ec cf       	rjmp	.-40     	; 0x145e <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    1486:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1488:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    148a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    148c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    148e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1490:	3c 98       	cbi	0x07, 4	; 7
    1492:	8f ec       	ldi	r24, 0xCF	; 207
    1494:	97 e0       	ldi	r25, 0x07	; 7
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <kilo_start+0x16e>
    149a:	00 c0       	rjmp	.+0      	; 0x149c <kilo_start+0x174>
    149c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    149e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    14a0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    14a2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    14a4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    14a6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    14a8:	3c 98       	cbi	0x07, 4	; 7
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	e1 ee       	ldi	r30, 0xE1	; 225
    14ae:	f4 e0       	ldi	r31, 0x04	; 4
    14b0:	91 50       	subi	r25, 0x01	; 1
    14b2:	e0 40       	sbci	r30, 0x00	; 0
    14b4:	f0 40       	sbci	r31, 0x00	; 0
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <kilo_start+0x188>
    14b8:	00 c0       	rjmp	.+0      	; 0x14ba <kilo_start+0x192>
    14ba:	00 00       	nop
    14bc:	44 cf       	rjmp	.-376    	; 0x1346 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    14be:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    14c0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    14c2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    14c4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    14c6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    14c8:	3c 98       	cbi	0x07, 4	; 7
    14ca:	ef ec       	ldi	r30, 0xCF	; 207
    14cc:	f7 e0       	ldi	r31, 0x07	; 7
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <kilo_start+0x1a6>
    14d2:	00 c0       	rjmp	.+0      	; 0x14d4 <kilo_start+0x1ac>
    14d4:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    14d6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    14d8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    14da:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    14dc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    14de:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    14e0:	3c 98       	cbi	0x07, 4	; 7
    14e2:	ff ef       	ldi	r31, 0xFF	; 255
    14e4:	21 ee       	ldi	r18, 0xE1	; 225
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	f1 50       	subi	r31, 0x01	; 1
    14ea:	20 40       	sbci	r18, 0x00	; 0
    14ec:	80 40       	sbci	r24, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <kilo_start+0x1c0>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <kilo_start+0x1ca>
    14f2:	00 00       	nop
    14f4:	28 cf       	rjmp	.-432    	; 0x1346 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
    14f6:	90 91 17 01 	lds	r25, 0x0117
    14fa:	80 91 18 01 	lds	r24, 0x0118
    14fe:	98 17       	cp	r25, r24
    1500:	09 f4       	brne	.+2      	; 0x1504 <kilo_start+0x1dc>
    1502:	21 cf       	rjmp	.-446    	; 0x1346 <kilo_start+0x1e>
                        prev_motion = cur_motion;
    1504:	80 91 17 01 	lds	r24, 0x0117
    1508:	80 93 18 01 	sts	0x0118, r24
                        if (cur_motion == MOVE_LEFT) {
    150c:	80 91 17 01 	lds	r24, 0x0117
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	09 f4       	brne	.+2      	; 0x1516 <kilo_start+0x1ee>
    1514:	50 c0       	rjmp	.+160    	; 0x15b6 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    1516:	80 91 17 01 	lds	r24, 0x0117
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    151a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    151e:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	d9 f1       	breq	.+118    	; 0x159c <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1526:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
    152a:	90 92 b4 00 	sts	0x00B4, r9
    152e:	8f e2       	ldi	r24, 0x2F	; 47
    1530:	95 e7       	ldi	r25, 0x75	; 117
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <kilo_start+0x20a>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <kilo_start+0x210>
    1538:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
    153a:	80 91 8a 01 	lds	r24, 0x018A
    153e:	90 91 89 01 	lds	r25, 0x0189
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1542:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
    1546:	80 93 b4 00 	sts	0x00B4, r24
    154a:	fd ce       	rjmp	.-518    	; 0x1346 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    154c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    154e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1550:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1552:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1554:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1556:	3c 98       	cbi	0x07, 4	; 7
    1558:	f6 ce       	rjmp	.-532    	; 0x1346 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
    155a:	f3 01       	movw	r30, r6
    155c:	09 95       	icall
    155e:	01 cf       	rjmp	.-510    	; 0x1362 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    1560:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    1562:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1564:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1566:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1568:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    156a:	3c 98       	cbi	0x07, 4	; 7
    156c:	ff ef       	ldi	r31, 0xFF	; 255
    156e:	20 e7       	ldi	r18, 0x70	; 112
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	f1 50       	subi	r31, 0x01	; 1
    1574:	20 40       	sbci	r18, 0x00	; 0
    1576:	80 40       	sbci	r24, 0x00	; 0
    1578:	e1 f7       	brne	.-8      	; 0x1572 <kilo_start+0x24a>
    157a:	00 c0       	rjmp	.+0      	; 0x157c <kilo_start+0x254>
    157c:	00 00       	nop
    157e:	6f cf       	rjmp	.-290    	; 0x145e <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1580:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1582:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    1584:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    1586:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1588:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    158a:	3c 98       	cbi	0x07, 4	; 7
    158c:	dc ce       	rjmp	.-584    	; 0x1346 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    158e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1590:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1592:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1594:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    1596:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    1598:	3c 9a       	sbi	0x07, 4	; 7
    159a:	d5 ce       	rjmp	.-598    	; 0x1346 <kilo_start+0x1e>
    159c:	ef e2       	ldi	r30, 0x2F	; 47
    159e:	f5 e7       	ldi	r31, 0x75	; 117
    15a0:	31 97       	sbiw	r30, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <kilo_start+0x278>
    15a4:	00 c0       	rjmp	.+0      	; 0x15a6 <kilo_start+0x27e>
    15a6:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
    15a8:	80 91 77 01 	lds	r24, 0x0177
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    15ac:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    15b0:	80 93 b4 00 	sts	0x00B4, r24
    15b4:	c8 ce       	rjmp	.-624    	; 0x1346 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    15b6:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
    15ba:	10 92 b4 00 	sts	0x00B4, r1
    15be:	8f e2       	ldi	r24, 0x2F	; 47
    15c0:	95 e7       	ldi	r25, 0x75	; 117
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <kilo_start+0x29a>
    15c6:	00 c0       	rjmp	.+0      	; 0x15c8 <kilo_start+0x2a0>
    15c8:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    15ca:	80 91 8b 01 	lds	r24, 0x018B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    15ce:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    15d2:	10 92 b4 00 	sts	0x00B4, r1
    15d6:	b7 ce       	rjmp	.-658    	; 0x1346 <kilo_start+0x1e>

000015d8 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <delay+0x10>
    15da:	ef ec       	ldi	r30, 0xCF	; 207
    15dc:	f7 e0       	ldi	r31, 0x07	; 7
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <delay+0x6>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <delay+0xc>
    15e4:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
    15e6:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	b9 f7       	brne	.-18     	; 0x15da <delay+0x2>
    15ec:	08 95       	ret

000015ee <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    15ee:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    15f2:	60 93 b4 00 	sts	0x00B4, r22
    15f6:	08 95       	ret

000015f8 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    15fe:	80 93 b4 00 	sts	0x00B4, r24
    1602:	8f e0       	ldi	r24, 0x0F	; 15
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	ef ec       	ldi	r30, 0xCF	; 207
    1608:	f7 e0       	ldi	r31, 0x07	; 7
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <spinup_motors+0x12>
    160e:	00 c0       	rjmp	.+0      	; 0x1610 <spinup_motors+0x18>
    1610:	00 00       	nop
    1612:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    1614:	c1 f7       	brne	.-16     	; 0x1606 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
    1616:	08 95       	ret

00001618 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
    1618:	80 91 55 01 	lds	r24, 0x0155
    161c:	81 11       	cpse	r24, r1
    161e:	1e c0       	rjmp	.+60     	; 0x165c <get_ambientlight+0x44>
        cli();
    1620:	f8 94       	cli
        adc_setup_conversion(7);
    1622:	87 e0       	ldi	r24, 0x07	; 7
    1624:	80 93 7c 00 	sts	0x007C, r24
    1628:	83 e8       	ldi	r24, 0x83	; 131
    162a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    162e:	80 91 7a 00 	lds	r24, 0x007A
    1632:	80 64       	ori	r24, 0x40	; 64
    1634:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1638:	80 91 7a 00 	lds	r24, 0x007A
    163c:	86 fd       	sbrc	r24, 6
    163e:	fc cf       	rjmp	.-8      	; 0x1638 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
    1640:	80 91 78 00 	lds	r24, 0x0078
    1644:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    1648:	10 92 7c 00 	sts	0x007C, r1
    164c:	23 ea       	ldi	r18, 0xA3	; 163
    164e:	20 93 7a 00 	sts	0x007A, r18
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    1658:	78 94       	sei
    165a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
    1660:	08 95       	ret

00001662 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
    1662:	80 91 55 01 	lds	r24, 0x0155
    1666:	81 11       	cpse	r24, r1
    1668:	1e c0       	rjmp	.+60     	; 0x16a6 <get_temperature+0x44>
        cli();
    166a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
    166c:	88 ec       	ldi	r24, 0xC8	; 200
    166e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    1672:	87 e8       	ldi	r24, 0x87	; 135
    1674:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    1678:	80 91 7a 00 	lds	r24, 0x007A
    167c:	80 64       	ori	r24, 0x40	; 64
    167e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1682:	80 91 7a 00 	lds	r24, 0x007A
    1686:	86 fd       	sbrc	r24, 6
    1688:	fc cf       	rjmp	.-8      	; 0x1682 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
    168a:	80 91 78 00 	lds	r24, 0x0078
    168e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    1692:	10 92 7c 00 	sts	0x007C, r1
    1696:	23 ea       	ldi	r18, 0xA3	; 163
    1698:	20 93 7a 00 	sts	0x007A, r18
    169c:	21 e0       	ldi	r18, 0x01	; 1
    169e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    16a2:	78 94       	sei
    16a4:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
    16aa:	08 95       	ret

000016ac <rand_hard>:

uint8_t rand_hard() {
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	e0 e0       	ldi	r30, 0x00	; 0
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
    16b8:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
    16ba:	03 ea       	ldi	r16, 0xA3	; 163
    16bc:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
    16be:	d6 e0       	ldi	r29, 0x06	; 6
    16c0:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    16c2:	a1 e0       	ldi	r26, 0x01	; 1
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
    16c6:	60 e8       	ldi	r22, 0x80	; 128
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
    16ca:	f8 94       	cli
            adc_setup_conversion(6);
    16cc:	d0 93 7c 00 	sts	0x007C, r29
    16d0:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
    16d4:	90 91 7a 00 	lds	r25, 0x007A
    16d8:	90 64       	ori	r25, 0x40	; 64
    16da:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    16de:	90 91 7a 00 	lds	r25, 0x007A
    16e2:	96 fd       	sbrc	r25, 6
    16e4:	fc cf       	rjmp	.-8      	; 0x16de <rand_hard+0x32>
            a = ADCW&0x1;
    16e6:	20 91 78 00 	lds	r18, 0x0078
    16ea:	30 91 79 00 	lds	r19, 0x0079
    16ee:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
    16f0:	90 91 7a 00 	lds	r25, 0x007A
    16f4:	90 64       	ori	r25, 0x40	; 64
    16f6:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    16fa:	90 91 7a 00 	lds	r25, 0x007A
    16fe:	96 fd       	sbrc	r25, 6
    1700:	fc cf       	rjmp	.-8      	; 0x16fa <rand_hard+0x4e>
            b = ADCW&0x1;
    1702:	40 91 78 00 	lds	r20, 0x0078
    1706:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
    170a:	10 92 7c 00 	sts	0x007C, r1
    170e:	00 93 7a 00 	sts	0x007A, r16
    1712:	10 93 7b 00 	sts	0x007B, r17
            sei();
    1716:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
    1718:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
    171a:	24 13       	cpse	r18, r20
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <rand_hard+0x78>
    171e:	61 50       	subi	r22, 0x01	; 1
    1720:	71 09       	sbc	r23, r1
    1722:	99 f6       	brne	.-90     	; 0x16ca <rand_hard+0x1e>
        if (a)
    1724:	22 23       	and	r18, r18
    1726:	39 f0       	breq	.+14     	; 0x1736 <rand_hard+0x8a>
            num |= (1<<i);
    1728:	9d 01       	movw	r18, r26
    172a:	0e 2e       	mov	r0, r30
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <rand_hard+0x84>
    172e:	22 0f       	add	r18, r18
    1730:	0a 94       	dec	r0
    1732:	ea f7       	brpl	.-6      	; 0x172e <rand_hard+0x82>
    1734:	82 2b       	or	r24, r18
    1736:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
    1738:	e8 30       	cpi	r30, 0x08	; 8
    173a:	f1 05       	cpc	r31, r1
    173c:	09 f0       	breq	.+2      	; 0x1740 <rand_hard+0x94>
    173e:	c3 cf       	rjmp	.-122    	; 0x16c6 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    174a:	80 91 00 01 	lds	r24, 0x0100
    174e:	98 2f       	mov	r25, r24
    1750:	99 0f       	add	r25, r25
    1752:	99 0f       	add	r25, r25
    1754:	99 0f       	add	r25, r25
    1756:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
    1758:	90 91 16 01 	lds	r25, 0x0116
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	29 0f       	add	r18, r25
    1760:	20 93 16 01 	sts	0x0116, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
    1764:	28 2f       	mov	r18, r24
    1766:	22 95       	swap	r18
    1768:	26 95       	lsr	r18
    176a:	27 70       	andi	r18, 0x07	; 7
    176c:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
    176e:	96 95       	lsr	r25
    1770:	96 95       	lsr	r25
    1772:	89 27       	eor	r24, r25
    1774:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
    1778:	08 95       	ret

0000177a <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
    177a:	80 93 00 01 	sts	0x0100, r24
    177e:	08 95       	ret

00001780 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    1780:	80 91 55 01 	lds	r24, 0x0155
    1784:	81 11       	cpse	r24, r1
    1786:	16 c0       	rjmp	.+44     	; 0x17b4 <get_voltage+0x34>
        cli();                                    // disable interrupts
    1788:	f8 94       	cli
        adc_setup_conversion(6);
    178a:	86 e0       	ldi	r24, 0x06	; 6
    178c:	80 93 7c 00 	sts	0x007C, r24
    1790:	83 e8       	ldi	r24, 0x83	; 131
    1792:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    1796:	80 91 7a 00 	lds	r24, 0x007A
    179a:	80 64       	ori	r24, 0x40	; 64
    179c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    17a0:	80 91 7a 00 	lds	r24, 0x007A
    17a4:	86 fd       	sbrc	r24, 6
    17a6:	fc cf       	rjmp	.-8      	; 0x17a0 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
    17a8:	80 91 78 00 	lds	r24, 0x0078
    17ac:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    17b0:	78 94       	sei
    17b2:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
    17b8:	08 95       	ret

000017ba <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
    17ba:	2f 92       	push	r2
    17bc:	3f 92       	push	r3
    17be:	4f 92       	push	r4
    17c0:	5f 92       	push	r5
    17c2:	6f 92       	push	r6
    17c4:	7f 92       	push	r7
    17c6:	8f 92       	push	r8
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <estimate_distance+0x26>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <estimate_distance+0x28>
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <estimate_distance+0x2a>
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
    17ea:	dc 01       	movw	r26, r24
    17ec:	12 96       	adiw	r26, 0x02	; 2
    17ee:	0d 90       	ld	r0, X+
    17f0:	bc 91       	ld	r27, X
    17f2:	a0 2d       	mov	r26, r0
    17f4:	be 83       	std	Y+6, r27	; 0x06
    17f6:	ad 83       	std	Y+5, r26	; 0x05
    17f8:	a4 38       	cpi	r26, 0x84	; 132
    17fa:	e3 e0       	ldi	r30, 0x03	; 3
    17fc:	be 07       	cpc	r27, r30
    17fe:	0c f0       	brlt	.+2      	; 0x1802 <estimate_distance+0x48>
    1800:	c9 c0       	rjmp	.+402    	; 0x1994 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
    1802:	80 91 2f 01 	lds	r24, 0x012F
    1806:	90 91 30 01 	lds	r25, 0x0130
    180a:	8a 17       	cp	r24, r26
    180c:	9b 07       	cpc	r25, r27
    180e:	08 f4       	brcc	.+2      	; 0x1812 <estimate_distance+0x58>
    1810:	37 c1       	rjmp	.+622    	; 0x1a80 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1812:	00 91 31 01 	lds	r16, 0x0131
    1816:	10 91 32 01 	lds	r17, 0x0132
    181a:	0a 17       	cp	r16, r26
    181c:	1b 07       	cpc	r17, r27
    181e:	08 f4       	brcc	.+2      	; 0x1822 <estimate_distance+0x68>
    1820:	2f c2       	rjmp	.+1118   	; 0x1c80 <estimate_distance+0x4c6>
    1822:	00 91 33 01 	lds	r16, 0x0133
    1826:	10 91 34 01 	lds	r17, 0x0134
    182a:	0a 17       	cp	r16, r26
    182c:	1b 07       	cpc	r17, r27
    182e:	08 f4       	brcc	.+2      	; 0x1832 <estimate_distance+0x78>
    1830:	2f c2       	rjmp	.+1118   	; 0x1c90 <estimate_distance+0x4d6>
    1832:	00 91 35 01 	lds	r16, 0x0135
    1836:	10 91 36 01 	lds	r17, 0x0136
    183a:	0a 17       	cp	r16, r26
    183c:	1b 07       	cpc	r17, r27
    183e:	08 f4       	brcc	.+2      	; 0x1842 <estimate_distance+0x88>
    1840:	2f c2       	rjmp	.+1118   	; 0x1ca0 <estimate_distance+0x4e6>
    1842:	00 91 37 01 	lds	r16, 0x0137
    1846:	10 91 38 01 	lds	r17, 0x0138
    184a:	0a 17       	cp	r16, r26
    184c:	1b 07       	cpc	r17, r27
    184e:	08 f4       	brcc	.+2      	; 0x1852 <estimate_distance+0x98>
    1850:	2f c2       	rjmp	.+1118   	; 0x1cb0 <estimate_distance+0x4f6>
    1852:	00 91 39 01 	lds	r16, 0x0139
    1856:	10 91 3a 01 	lds	r17, 0x013A
    185a:	0a 17       	cp	r16, r26
    185c:	1b 07       	cpc	r17, r27
    185e:	08 f4       	brcc	.+2      	; 0x1862 <estimate_distance+0xa8>
    1860:	ef c1       	rjmp	.+990    	; 0x1c40 <estimate_distance+0x486>
    1862:	00 91 3b 01 	lds	r16, 0x013B
    1866:	10 91 3c 01 	lds	r17, 0x013C
    186a:	0a 17       	cp	r16, r26
    186c:	1b 07       	cpc	r17, r27
    186e:	08 f4       	brcc	.+2      	; 0x1872 <estimate_distance+0xb8>
    1870:	27 c2       	rjmp	.+1102   	; 0x1cc0 <estimate_distance+0x506>
    1872:	00 91 3d 01 	lds	r16, 0x013D
    1876:	10 91 3e 01 	lds	r17, 0x013E
    187a:	0a 17       	cp	r16, r26
    187c:	1b 07       	cpc	r17, r27
    187e:	08 f4       	brcc	.+2      	; 0x1882 <estimate_distance+0xc8>
    1880:	27 c2       	rjmp	.+1102   	; 0x1cd0 <estimate_distance+0x516>
    1882:	00 91 3f 01 	lds	r16, 0x013F
    1886:	10 91 40 01 	lds	r17, 0x0140
    188a:	0a 17       	cp	r16, r26
    188c:	1b 07       	cpc	r17, r27
    188e:	08 f4       	brcc	.+2      	; 0x1892 <estimate_distance+0xd8>
    1890:	27 c2       	rjmp	.+1102   	; 0x1ce0 <estimate_distance+0x526>
    1892:	00 91 41 01 	lds	r16, 0x0141
    1896:	10 91 42 01 	lds	r17, 0x0142
    189a:	0a 17       	cp	r16, r26
    189c:	1b 07       	cpc	r17, r27
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <estimate_distance+0xe8>
    18a0:	27 c2       	rjmp	.+1102   	; 0x1cf0 <estimate_distance+0x536>
    18a2:	00 91 43 01 	lds	r16, 0x0143
    18a6:	10 91 44 01 	lds	r17, 0x0144
    18aa:	0a 17       	cp	r16, r26
    18ac:	1b 07       	cpc	r17, r27
    18ae:	08 f4       	brcc	.+2      	; 0x18b2 <estimate_distance+0xf8>
    18b0:	27 c2       	rjmp	.+1102   	; 0x1d00 <estimate_distance+0x546>
    18b2:	00 91 45 01 	lds	r16, 0x0145
    18b6:	10 91 46 01 	lds	r17, 0x0146
    18ba:	0a 17       	cp	r16, r26
    18bc:	1b 07       	cpc	r17, r27
    18be:	08 f4       	brcc	.+2      	; 0x18c2 <estimate_distance+0x108>
    18c0:	23 c2       	rjmp	.+1094   	; 0x1d08 <estimate_distance+0x54e>
    18c2:	00 91 47 01 	lds	r16, 0x0147
    18c6:	10 91 48 01 	lds	r17, 0x0148
    18ca:	0a 17       	cp	r16, r26
    18cc:	1b 07       	cpc	r17, r27
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <estimate_distance+0x118>
    18d0:	23 c2       	rjmp	.+1094   	; 0x1d18 <estimate_distance+0x55e>
    18d2:	00 91 49 01 	lds	r16, 0x0149
    18d6:	10 91 4a 01 	lds	r17, 0x014A
    18da:	0a 17       	cp	r16, r26
    18dc:	1b 07       	cpc	r17, r27
    18de:	08 f4       	brcc	.+2      	; 0x18e2 <estimate_distance+0x128>
    18e0:	23 c2       	rjmp	.+1094   	; 0x1d28 <estimate_distance+0x56e>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 ed       	ldi	r26, 0xD0	; 208
    18e8:	b0 e4       	ldi	r27, 0x40	; 64
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	ab 83       	std	Y+3, r26	; 0x03
    18f0:	bc 83       	std	Y+4, r27	; 0x04
    18f2:	4c e0       	ldi	r20, 0x0C	; 12
    18f4:	e4 2e       	mov	r14, r20
    18f6:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    18f8:	f7 01       	movw	r30, r14
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	e1 5d       	subi	r30, 0xD1	; 209
    1900:	fe 4f       	sbci	r31, 0xFE	; 254
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	b8 01       	movw	r22, r16
    1908:	68 1b       	sub	r22, r24
    190a:	79 0b       	sbc	r23, r25
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    1914:	9b 01       	movw	r18, r22
    1916:	ac 01       	movw	r20, r24
    1918:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__addsf3>
    191c:	6b 01       	movw	r12, r22
    191e:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1920:	ad 81       	ldd	r26, Y+5	; 0x05
    1922:	be 81       	ldd	r27, Y+6	; 0x06
    1924:	bd 01       	movw	r22, r26
    1926:	bb 0f       	add	r27, r27
    1928:	88 0b       	sbc	r24, r24
    192a:	99 0b       	sbc	r25, r25
    192c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__floatsisf>
    1930:	4b 01       	movw	r8, r22
    1932:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    1934:	b8 01       	movw	r22, r16
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    193e:	2b 01       	movw	r4, r22
    1940:	3c 01       	movw	r6, r24
    1942:	29 81       	ldd	r18, Y+1	; 0x01
    1944:	3a 81       	ldd	r19, Y+2	; 0x02
    1946:	4b 81       	ldd	r20, Y+3	; 0x03
    1948:	5c 81       	ldd	r21, Y+4	; 0x04
    194a:	c7 01       	movw	r24, r14
    194c:	b6 01       	movw	r22, r12
    194e:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
    1952:	9b 01       	movw	r18, r22
    1954:	ac 01       	movw	r20, r24
    1956:	c3 01       	movw	r24, r6
    1958:	b2 01       	movw	r22, r4
    195a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__subsf3>
    195e:	9b 01       	movw	r18, r22
    1960:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1962:	c5 01       	movw	r24, r10
    1964:	b4 01       	movw	r22, r8
    1966:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__subsf3>
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
            b=((int)((int)b/(int)slope));
    1976:	0e 94 40 13 	call	0x2680	; 0x2680 <__fixsfsi>
    197a:	8b 01       	movw	r16, r22
    197c:	c7 01       	movw	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	0e 94 40 13 	call	0x2680	; 0x2680 <__fixsfsi>
    1984:	ab 01       	movw	r20, r22
    1986:	bc 01       	movw	r22, r24
    1988:	c8 01       	movw	r24, r16
    198a:	ba 01       	movw	r22, r20
    198c:	0e 94 24 12 	call	0x2448	; 0x2448 <__divmodhi4>
            dist_high=b;
    1990:	16 2f       	mov	r17, r22
    1992:	77 c0       	rjmp	.+238    	; 0x1a82 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1994:	dc 01       	movw	r26, r24
    1996:	cd 90       	ld	r12, X+
    1998:	dc 90       	ld	r13, X
    199a:	80 91 56 01 	lds	r24, 0x0156
    199e:	90 91 57 01 	lds	r25, 0x0157
    19a2:	8c 15       	cp	r24, r12
    19a4:	9d 05       	cpc	r25, r13
    19a6:	08 f4       	brcc	.+2      	; 0x19aa <estimate_distance+0x1f0>
    19a8:	8c c0       	rjmp	.+280    	; 0x1ac2 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    19aa:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    19ac:	e0 90 58 01 	lds	r14, 0x0158
    19b0:	f0 90 59 01 	lds	r15, 0x0159
    19b4:	ec 14       	cp	r14, r12
    19b6:	fd 04       	cpc	r15, r13
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <estimate_distance+0x202>
    19ba:	5e c1       	rjmp	.+700    	; 0x1c78 <estimate_distance+0x4be>
    19bc:	e0 90 5a 01 	lds	r14, 0x015A
    19c0:	f0 90 5b 01 	lds	r15, 0x015B
    19c4:	ec 14       	cp	r14, r12
    19c6:	fd 04       	cpc	r15, r13
    19c8:	08 f4       	brcc	.+2      	; 0x19cc <estimate_distance+0x212>
    19ca:	5e c1       	rjmp	.+700    	; 0x1c88 <estimate_distance+0x4ce>
    19cc:	e0 90 5c 01 	lds	r14, 0x015C
    19d0:	f0 90 5d 01 	lds	r15, 0x015D
    19d4:	ec 14       	cp	r14, r12
    19d6:	fd 04       	cpc	r15, r13
    19d8:	08 f4       	brcc	.+2      	; 0x19dc <estimate_distance+0x222>
    19da:	5e c1       	rjmp	.+700    	; 0x1c98 <estimate_distance+0x4de>
    19dc:	e0 90 5e 01 	lds	r14, 0x015E
    19e0:	f0 90 5f 01 	lds	r15, 0x015F
    19e4:	ec 14       	cp	r14, r12
    19e6:	fd 04       	cpc	r15, r13
    19e8:	08 f4       	brcc	.+2      	; 0x19ec <estimate_distance+0x232>
    19ea:	5e c1       	rjmp	.+700    	; 0x1ca8 <estimate_distance+0x4ee>
    19ec:	e0 90 60 01 	lds	r14, 0x0160
    19f0:	f0 90 61 01 	lds	r15, 0x0161
    19f4:	ec 14       	cp	r14, r12
    19f6:	fd 04       	cpc	r15, r13
    19f8:	08 f4       	brcc	.+2      	; 0x19fc <estimate_distance+0x242>
    19fa:	c3 c0       	rjmp	.+390    	; 0x1b82 <estimate_distance+0x3c8>
    19fc:	e0 90 62 01 	lds	r14, 0x0162
    1a00:	f0 90 63 01 	lds	r15, 0x0163
    1a04:	ec 14       	cp	r14, r12
    1a06:	fd 04       	cpc	r15, r13
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <estimate_distance+0x252>
    1a0a:	56 c1       	rjmp	.+684    	; 0x1cb8 <estimate_distance+0x4fe>
    1a0c:	e0 90 64 01 	lds	r14, 0x0164
    1a10:	f0 90 65 01 	lds	r15, 0x0165
    1a14:	ec 14       	cp	r14, r12
    1a16:	fd 04       	cpc	r15, r13
    1a18:	08 f4       	brcc	.+2      	; 0x1a1c <estimate_distance+0x262>
    1a1a:	56 c1       	rjmp	.+684    	; 0x1cc8 <estimate_distance+0x50e>
    1a1c:	e0 90 66 01 	lds	r14, 0x0166
    1a20:	f0 90 67 01 	lds	r15, 0x0167
    1a24:	ec 14       	cp	r14, r12
    1a26:	fd 04       	cpc	r15, r13
    1a28:	08 f4       	brcc	.+2      	; 0x1a2c <estimate_distance+0x272>
    1a2a:	56 c1       	rjmp	.+684    	; 0x1cd8 <estimate_distance+0x51e>
    1a2c:	e0 90 68 01 	lds	r14, 0x0168
    1a30:	f0 90 69 01 	lds	r15, 0x0169
    1a34:	ec 14       	cp	r14, r12
    1a36:	fd 04       	cpc	r15, r13
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <estimate_distance+0x282>
    1a3a:	56 c1       	rjmp	.+684    	; 0x1ce8 <estimate_distance+0x52e>
    1a3c:	e0 90 6a 01 	lds	r14, 0x016A
    1a40:	f0 90 6b 01 	lds	r15, 0x016B
    1a44:	ec 14       	cp	r14, r12
    1a46:	fd 04       	cpc	r15, r13
    1a48:	08 f4       	brcc	.+2      	; 0x1a4c <estimate_distance+0x292>
    1a4a:	56 c1       	rjmp	.+684    	; 0x1cf8 <estimate_distance+0x53e>
    1a4c:	e0 90 6c 01 	lds	r14, 0x016C
    1a50:	f0 90 6d 01 	lds	r15, 0x016D
    1a54:	ec 14       	cp	r14, r12
    1a56:	fd 04       	cpc	r15, r13
    1a58:	08 f4       	brcc	.+2      	; 0x1a5c <estimate_distance+0x2a2>
    1a5a:	5a c1       	rjmp	.+692    	; 0x1d10 <estimate_distance+0x556>
    1a5c:	e0 90 6e 01 	lds	r14, 0x016E
    1a60:	f0 90 6f 01 	lds	r15, 0x016F
    1a64:	ec 14       	cp	r14, r12
    1a66:	fd 04       	cpc	r15, r13
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <estimate_distance+0x2b2>
    1a6a:	5a c1       	rjmp	.+692    	; 0x1d20 <estimate_distance+0x566>
    1a6c:	e0 90 70 01 	lds	r14, 0x0170
    1a70:	f0 90 71 01 	lds	r15, 0x0171
    1a74:	ec 14       	cp	r14, r12
    1a76:	fd 04       	cpc	r15, r13
    1a78:	08 f4       	brcc	.+2      	; 0x1a7c <estimate_distance+0x2c2>
    1a7a:	5a c1       	rjmp	.+692    	; 0x1d30 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    1a7c:	0a e5       	ldi	r16, 0x5A	; 90
    1a7e:	31 c0       	rjmp	.+98     	; 0x1ae2 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    1a80:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    1a82:	ed 81       	ldd	r30, Y+5	; 0x05
    1a84:	fe 81       	ldd	r31, Y+6	; 0x06
    1a86:	ed 3b       	cpi	r30, 0xBD	; 189
    1a88:	f2 40       	sbci	r31, 0x02	; 2
    1a8a:	fc f4       	brge	.+62     	; 0x1aca <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    1a8c:	81 e2       	ldi	r24, 0x21	; 33
    1a8e:	81 0f       	add	r24, r17
    }
}
    1a90:	26 96       	adiw	r28, 0x06	; 6
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	df 90       	pop	r13
    1aaa:	cf 90       	pop	r12
    1aac:	bf 90       	pop	r11
    1aae:	af 90       	pop	r10
    1ab0:	9f 90       	pop	r9
    1ab2:	8f 90       	pop	r8
    1ab4:	7f 90       	pop	r7
    1ab6:	6f 90       	pop	r6
    1ab8:	5f 90       	pop	r5
    1aba:	4f 90       	pop	r4
    1abc:	3f 90       	pop	r3
    1abe:	2f 90       	pop	r2
    1ac0:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    1ac2:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    1ac4:	81 e2       	ldi	r24, 0x21	; 33
    1ac6:	80 0f       	add	r24, r16
    1ac8:	e3 cf       	rjmp	.-58     	; 0x1a90 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1aca:	d1 01       	movw	r26, r2
    1acc:	cd 90       	ld	r12, X+
    1ace:	dc 90       	ld	r13, X
    1ad0:	80 91 56 01 	lds	r24, 0x0156
    1ad4:	90 91 57 01 	lds	r25, 0x0157
    1ad8:	8c 15       	cp	r24, r12
    1ada:	9d 05       	cpc	r25, r13
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <estimate_distance+0x326>
    1ade:	66 cf       	rjmp	.-308    	; 0x19ac <estimate_distance+0x1f2>
            dist_low=0;
    1ae0:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    1ae2:	1f 3f       	cpi	r17, 0xFF	; 255
    1ae4:	79 f3       	breq	.-34     	; 0x1ac4 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    1ae6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aea:	bf 01       	movw	r22, r30
    1aec:	ff 0f       	add	r31, r31
    1aee:	88 0b       	sbc	r24, r24
    1af0:	99 0b       	sbc	r25, r25
    1af2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__floatsisf>
    1af6:	6b 01       	movw	r12, r22
    1af8:	7c 01       	movw	r14, r24
    1afa:	61 2f       	mov	r22, r17
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    1b06:	4b 01       	movw	r8, r22
    1b08:	5c 01       	movw	r10, r24
    1b0a:	a7 01       	movw	r20, r14
    1b0c:	96 01       	movw	r18, r12
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	81 e6       	ldi	r24, 0x61	; 97
    1b14:	94 e4       	ldi	r25, 0x44	; 68
    1b16:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__subsf3>
    1b1a:	9b 01       	movw	r18, r22
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	c5 01       	movw	r24, r10
    1b20:	b4 01       	movw	r22, r8
    1b22:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
    1b26:	4b 01       	movw	r8, r22
    1b28:	5c 01       	movw	r10, r24
    1b2a:	60 2f       	mov	r22, r16
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    1b36:	2b 01       	movw	r4, r22
    1b38:	3c 01       	movw	r6, r24
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4f e2       	ldi	r20, 0x2F	; 47
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	c7 01       	movw	r24, r14
    1b44:	b6 01       	movw	r22, r12
    1b46:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__subsf3>
    1b4a:	9b 01       	movw	r18, r22
    1b4c:	ac 01       	movw	r20, r24
    1b4e:	c3 01       	movw	r24, r6
    1b50:	b2 01       	movw	r22, r4
    1b52:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
    1b56:	9b 01       	movw	r18, r22
    1b58:	ac 01       	movw	r20, r24
    1b5a:	c5 01       	movw	r24, r10
    1b5c:	b4 01       	movw	r22, r8
    1b5e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__addsf3>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	48 e4       	ldi	r20, 0x48	; 72
    1b68:	53 e4       	ldi	r21, 0x43	; 67
    1b6a:	0e 94 ce 12 	call	0x259c	; 0x259c <__divsf3>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	44 e0       	ldi	r20, 0x04	; 4
    1b74:	52 e4       	ldi	r21, 0x42	; 66
    1b76:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__addsf3>
    1b7a:	0e 94 47 13 	call	0x268e	; 0x268e <__fixunssfsi>
    1b7e:	86 2f       	mov	r24, r22
    1b80:	87 cf       	rjmp	.-242    	; 0x1a90 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1b82:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
    1b84:	85 e0       	ldi	r24, 0x05	; 5
    1b86:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	ec 5a       	subi	r30, 0xAC	; 172
    1b90:	fe 4f       	sbci	r31, 0xFE	; 254
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	b7 01       	movw	r22, r14
    1b98:	68 1b       	sub	r22, r24
    1b9a:	79 0b       	sbc	r23, r25
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    1ba4:	9b 01       	movw	r18, r22
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__addsf3>
    1bac:	4b 01       	movw	r8, r22
    1bae:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	dd 0c       	add	r13, r13
    1bb4:	88 0b       	sbc	r24, r24
    1bb6:	99 0b       	sbc	r25, r25
    1bb8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__floatsisf>
    1bbc:	2b 01       	movw	r4, r22
    1bbe:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    1bc0:	b7 01       	movw	r22, r14
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    1bca:	6b 01       	movw	r12, r22
    1bcc:	7c 01       	movw	r14, r24
    1bce:	60 2f       	mov	r22, r16
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	a9 01       	movw	r20, r18
    1bec:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__addsf3>
    1bf0:	a5 01       	movw	r20, r10
    1bf2:	94 01       	movw	r18, r8
    1bf4:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	b6 01       	movw	r22, r12
    1c00:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__subsf3>
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1c08:	c3 01       	movw	r24, r6
    1c0a:	b2 01       	movw	r22, r4
    1c0c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__subsf3>
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
                b=((int)((int)b/(int)slope));
    1c1c:	0e 94 40 13 	call	0x2680	; 0x2680 <__fixsfsi>
    1c20:	7b 01       	movw	r14, r22
    1c22:	c5 01       	movw	r24, r10
    1c24:	b4 01       	movw	r22, r8
    1c26:	0e 94 40 13 	call	0x2680	; 0x2680 <__fixsfsi>
    1c2a:	ab 01       	movw	r20, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	c7 01       	movw	r24, r14
    1c30:	ba 01       	movw	r22, r20
    1c32:	0e 94 24 12 	call	0x2448	; 0x2448 <__divmodhi4>
                dist_low=b;
    1c36:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
    1c38:	6f 3f       	cpi	r22, 0xFF	; 255
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <estimate_distance+0x484>
    1c3c:	52 cf       	rjmp	.-348    	; 0x1ae2 <estimate_distance+0x328>
    1c3e:	26 cf       	rjmp	.-436    	; 0x1a8c <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1c40:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    1c42:	85 e0       	ldi	r24, 0x05	; 5
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	7c 01       	movw	r14, r24
    1c48:	f1 e0       	ldi	r31, 0x01	; 1
    1c4a:	ef 1a       	sub	r14, r31
    1c4c:	f1 08       	sbc	r15, r1
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatunsisf>
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3>
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	a9 01       	movw	r20, r18
    1c6a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__addsf3>
    1c6e:	69 83       	std	Y+1, r22	; 0x01
    1c70:	7a 83       	std	Y+2, r23	; 0x02
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    1c74:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
    1c76:	40 ce       	rjmp	.-896    	; 0x18f8 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1c78:	01 e0       	ldi	r16, 0x01	; 1
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	84 cf       	rjmp	.-248    	; 0x1b88 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	df cf       	rjmp	.-66     	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1c88:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	7c cf       	rjmp	.-264    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1c90:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	d7 cf       	rjmp	.-82     	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1c98:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	74 cf       	rjmp	.-280    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1ca0:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	cf cf       	rjmp	.-98     	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1ca8:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
    1caa:	84 e0       	ldi	r24, 0x04	; 4
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	6c cf       	rjmp	.-296    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1cb0:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	c7 cf       	rjmp	.-114    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1cb8:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
    1cba:	86 e0       	ldi	r24, 0x06	; 6
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	64 cf       	rjmp	.-312    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1cc0:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    1cc2:	86 e0       	ldi	r24, 0x06	; 6
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	bf cf       	rjmp	.-130    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1cc8:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
    1cca:	87 e0       	ldi	r24, 0x07	; 7
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	5c cf       	rjmp	.-328    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1cd0:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    1cd2:	87 e0       	ldi	r24, 0x07	; 7
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	b7 cf       	rjmp	.-146    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1cd8:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
    1cda:	88 e0       	ldi	r24, 0x08	; 8
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	54 cf       	rjmp	.-344    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1ce0:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    1ce2:	88 e0       	ldi	r24, 0x08	; 8
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	af cf       	rjmp	.-162    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1ce8:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    1cea:	89 e0       	ldi	r24, 0x09	; 9
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	4c cf       	rjmp	.-360    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1cf0:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    1cf2:	89 e0       	ldi	r24, 0x09	; 9
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a7 cf       	rjmp	.-178    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1cf8:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    1cfa:	8a e0       	ldi	r24, 0x0A	; 10
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	44 cf       	rjmp	.-376    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1d00:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    1d02:	8a e0       	ldi	r24, 0x0A	; 10
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9f cf       	rjmp	.-194    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1d08:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1d0a:	8b e0       	ldi	r24, 0x0B	; 11
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9b cf       	rjmp	.-202    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1d10:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    1d12:	8b e0       	ldi	r24, 0x0B	; 11
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	38 cf       	rjmp	.-400    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1d18:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1d1a:	8c e0       	ldi	r24, 0x0C	; 12
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	93 cf       	rjmp	.-218    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1d20:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    1d22:	8c e0       	ldi	r24, 0x0C	; 12
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	30 cf       	rjmp	.-416    	; 0x1b88 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1d28:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1d2a:	8d e0       	ldi	r24, 0x0D	; 13
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	8b cf       	rjmp	.-234    	; 0x1c46 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1d30:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    1d32:	8d e0       	ldi	r24, 0x0D	; 13
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	28 cf       	rjmp	.-432    	; 0x1b88 <estimate_distance+0x3ce>

00001d38 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1d38:	1f 92       	push	r1
    1d3a:	0f 92       	push	r0
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	0f 92       	push	r0
    1d40:	11 24       	eor	r1, r1
    1d42:	2f 93       	push	r18
    1d44:	3f 93       	push	r19
    1d46:	4f 93       	push	r20
    1d48:	5f 93       	push	r21
    1d4a:	6f 93       	push	r22
    1d4c:	7f 93       	push	r23
    1d4e:	8f 93       	push	r24
    1d50:	9f 93       	push	r25
    1d52:	af 93       	push	r26
    1d54:	bf 93       	push	r27
    1d56:	ef 93       	push	r30
    1d58:	ff 93       	push	r31
    tx_clock += tx_increment;
    1d5a:	20 91 75 01 	lds	r18, 0x0175
    1d5e:	30 91 76 01 	lds	r19, 0x0176
    1d62:	80 91 73 01 	lds	r24, 0x0173
    1d66:	90 91 74 01 	lds	r25, 0x0174
    1d6a:	82 0f       	add	r24, r18
    1d6c:	93 1f       	adc	r25, r19
    1d6e:	90 93 76 01 	sts	0x0176, r25
    1d72:	80 93 75 01 	sts	0x0175, r24
    tx_increment = 0xFF;
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	90 93 74 01 	sts	0x0174, r25
    1d7e:	80 93 73 01 	sts	0x0173, r24
    OCR0A = tx_increment;
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1d86:	80 91 51 01 	lds	r24, 0x0151
    1d8a:	90 91 52 01 	lds	r25, 0x0152
    1d8e:	a0 91 53 01 	lds	r26, 0x0153
    1d92:	b0 91 54 01 	lds	r27, 0x0154
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	a1 1d       	adc	r26, r1
    1d9a:	b1 1d       	adc	r27, r1
    1d9c:	80 93 51 01 	sts	0x0151, r24
    1da0:	90 93 52 01 	sts	0x0152, r25
    1da4:	a0 93 53 01 	sts	0x0153, r26
    1da8:	b0 93 54 01 	sts	0x0154, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1dac:	80 91 55 01 	lds	r24, 0x0155
    1db0:	81 11       	cpse	r24, r1
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <__vector_14+0x9a>
    1db4:	80 91 84 01 	lds	r24, 0x0184
    1db8:	90 91 85 01 	lds	r25, 0x0185
    1dbc:	20 91 75 01 	lds	r18, 0x0175
    1dc0:	30 91 76 01 	lds	r19, 0x0176
    1dc4:	82 17       	cp	r24, r18
    1dc6:	93 07       	cpc	r25, r19
    1dc8:	20 f4       	brcc	.+8      	; 0x1dd2 <__vector_14+0x9a>
    1dca:	80 91 19 01 	lds	r24, 0x0119
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	89 f0       	breq	.+34     	; 0x1df4 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	7f 91       	pop	r23
    1de0:	6f 91       	pop	r22
    1de2:	5f 91       	pop	r21
    1de4:	4f 91       	pop	r20
    1de6:	3f 91       	pop	r19
    1de8:	2f 91       	pop	r18
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1df4:	e0 91 03 01 	lds	r30, 0x0103
    1df8:	f0 91 04 01 	lds	r31, 0x0104
    1dfc:	09 95       	icall
        if (msg) {
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	41 f3       	breq	.-48     	; 0x1dd2 <__vector_14+0x9a>
            if (message_send(msg)) {
    1e02:	0e 94 84 11 	call	0x2308	; 0x2308 <message_send>
    1e06:	81 11       	cpse	r24, r1
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1e0a:	0e 94 bd 14 	call	0x297a	; 0x297a <rand>
    1e0e:	99 27       	eor	r25, r25
    1e10:	90 93 74 01 	sts	0x0174, r25
    1e14:	80 93 73 01 	sts	0x0173, r24
                OCR0A = tx_increment;
    1e18:	87 bd       	out	0x27, r24	; 39
    1e1a:	db cf       	rjmp	.-74     	; 0x1dd2 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1e1c:	e0 91 01 01 	lds	r30, 0x0101
    1e20:	f0 91 02 01 	lds	r31, 0x0102
    1e24:	09 95       	icall
                tx_clock = 0;
    1e26:	10 92 76 01 	sts	0x0176, r1
    1e2a:	10 92 75 01 	sts	0x0175, r1
    1e2e:	d1 cf       	rjmp	.-94     	; 0x1dd2 <__vector_14+0x9a>

00001e30 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1e30:	80 ff       	sbrs	r24, 0
    1e32:	11 c0       	rjmp	.+34     	; 0x1e56 <set_color+0x26>
        DDRD |= (1<<5);
    1e34:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1e36:	81 ff       	sbrs	r24, 1
    1e38:	11 c0       	rjmp	.+34     	; 0x1e5c <set_color+0x2c>
        DDRD |= (1<<4);
    1e3a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1e3c:	82 ff       	sbrs	r24, 2
    1e3e:	11 c0       	rjmp	.+34     	; 0x1e62 <set_color+0x32>
        DDRC |= (1<<3);
    1e40:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1e42:	83 ff       	sbrs	r24, 3
    1e44:	11 c0       	rjmp	.+34     	; 0x1e68 <set_color+0x38>
        DDRC |= (1<<2);
    1e46:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1e48:	84 ff       	sbrs	r24, 4
    1e4a:	11 c0       	rjmp	.+34     	; 0x1e6e <set_color+0x3e>
        DDRC |= (1<<5);
    1e4c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1e4e:	85 fd       	sbrc	r24, 5
    1e50:	11 c0       	rjmp	.+34     	; 0x1e74 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1e52:	3c 98       	cbi	0x07, 4	; 7
    1e54:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1e56:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1e58:	81 fd       	sbrc	r24, 1
    1e5a:	ef cf       	rjmp	.-34     	; 0x1e3a <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1e5c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1e5e:	82 fd       	sbrc	r24, 2
    1e60:	ef cf       	rjmp	.-34     	; 0x1e40 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1e62:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1e64:	83 fd       	sbrc	r24, 3
    1e66:	ef cf       	rjmp	.-34     	; 0x1e46 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1e68:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1e6a:	84 fd       	sbrc	r24, 4
    1e6c:	ef cf       	rjmp	.-34     	; 0x1e4c <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1e6e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1e70:	85 ff       	sbrs	r24, 5
    1e72:	ef cf       	rjmp	.-34     	; 0x1e52 <set_color+0x22>
        DDRC |= (1<<4);
    1e74:	3c 9a       	sbi	0x07, 4	; 7
    1e76:	08 95       	ret

00001e78 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1e78:	1f 92       	push	r1
    1e7a:	0f 92       	push	r0
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	0f 92       	push	r0
    1e80:	11 24       	eor	r1, r1
    1e82:	8f 93       	push	r24
    1e84:	9f 93       	push	r25
    rx_timer_off();
    1e86:	10 92 81 00 	sts	0x0081, r1
    1e8a:	10 92 85 00 	sts	0x0085, r1
    1e8e:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	80 93 2e 01 	sts	0x012E, r24
    rx_leadingbyte = 1;
    1e98:	80 93 72 01 	sts	0x0172, r24
    rx_busy = 0;
    1e9c:	10 92 55 01 	sts	0x0155, r1
    adc_trigger_high_gain();
    1ea0:	10 92 7c 00 	sts	0x007C, r1
    1ea4:	93 ea       	ldi	r25, 0xA3	; 163
    1ea6:	90 93 7a 00 	sts	0x007A, r25
    1eaa:	80 93 7b 00 	sts	0x007B, r24
}
    1eae:	9f 91       	pop	r25
    1eb0:	8f 91       	pop	r24
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	0f 90       	pop	r0
    1eb8:	1f 90       	pop	r1
    1eba:	18 95       	reti

00001ebc <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1ebc:	1f 92       	push	r1
    1ebe:	0f 92       	push	r0
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	2f 93       	push	r18
    1ec8:	3f 93       	push	r19
    1eca:	4f 93       	push	r20
    1ecc:	5f 93       	push	r21
    1ece:	6f 93       	push	r22
    1ed0:	7f 93       	push	r23
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	af 93       	push	r26
    1ed8:	bf 93       	push	r27
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	ef 93       	push	r30
    1ee0:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1ee2:	20 91 84 00 	lds	r18, 0x0084
    1ee6:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	40 93 55 01 	sts	0x0155, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1ef0:	80 91 2e 01 	lds	r24, 0x012E
    1ef4:	88 23       	and	r24, r24
    1ef6:	a9 f1       	breq	.+106    	; 0x1f62 <__vector_23+0xa6>
        rx_timer_on();
    1ef8:	10 92 85 00 	sts	0x0085, r1
    1efc:	10 92 84 00 	sts	0x0084, r1
    1f00:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1f04:	10 92 86 01 	sts	0x0186, r1
        rx_leadingbit = 0;
    1f08:	10 92 2e 01 	sts	0x012E, r1
        if (rx_leadingbyte) {
    1f0c:	80 91 72 01 	lds	r24, 0x0172
    1f10:	88 23       	and	r24, r24
    1f12:	a1 f0       	breq	.+40     	; 0x1f3c <__vector_23+0x80>
            adc_finish_conversion();
    1f14:	80 91 7a 00 	lds	r24, 0x007A
    1f18:	86 fd       	sbrc	r24, 6
    1f1a:	fc cf       	rjmp	.-8      	; 0x1f14 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1f1c:	80 91 78 00 	lds	r24, 0x0078
    1f20:	90 91 79 00 	lds	r25, 0x0079
    1f24:	90 93 50 01 	sts	0x0150, r25
    1f28:	80 93 4f 01 	sts	0x014F, r24
            adc_trigger_low_gain();
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	80 93 7c 00 	sts	0x007C, r24
    1f32:	93 ea       	ldi	r25, 0xA3	; 163
    1f34:	90 93 7a 00 	sts	0x007A, r25
    1f38:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1f3c:	ff 91       	pop	r31
    1f3e:	ef 91       	pop	r30
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1f62:	c9 01       	movw	r24, r18
    1f64:	87 58       	subi	r24, 0x87	; 135
    1f66:	91 09       	sbc	r25, r1
    1f68:	84 37       	cpi	r24, 0x74	; 116
    1f6a:	99 40       	sbci	r25, 0x09	; 9
    1f6c:	08 f0       	brcs	.+2      	; 0x1f70 <__vector_23+0xb4>
    1f6e:	52 c0       	rjmp	.+164    	; 0x2014 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1f70:	26 58       	subi	r18, 0x86	; 134
    1f72:	31 09       	sbc	r19, r1
    1f74:	a4 ef       	ldi	r26, 0xF4	; 244
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	0e 94 3e 12 	call	0x247c	; 0x247c <__umulhisi3>
    1f7c:	aa 27       	eor	r26, r26
    1f7e:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1f80:	88 30       	cpi	r24, 0x08	; 8
    1f82:	91 05       	cpc	r25, r1
    1f84:	a1 05       	cpc	r26, r1
    1f86:	b1 05       	cpc	r27, r1
    1f88:	08 f4       	brcc	.+2      	; 0x1f8c <__vector_23+0xd0>
    1f8a:	7b c0       	rjmp	.+246    	; 0x2082 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1f8c:	40 93 2e 01 	sts	0x012E, r20
                if (rx_leadingbyte) {
    1f90:	80 91 72 01 	lds	r24, 0x0172
    1f94:	81 11       	cpse	r24, r1
    1f96:	52 c0       	rjmp	.+164    	; 0x203c <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1f98:	80 91 4c 01 	lds	r24, 0x014C
    1f9c:	e8 2f       	mov	r30, r24
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	e8 58       	subi	r30, 0x88	; 136
    1fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa4:	90 91 86 01 	lds	r25, 0x0186
    1fa8:	90 83       	st	Z, r25
                    rx_byteindex++;
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	80 93 4c 01 	sts	0x014C, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1fb0:	8c 30       	cpi	r24, 0x0C	; 12
    1fb2:	21 f6       	brne	.-120    	; 0x1f3c <__vector_23+0x80>
                        rx_timer_off();
    1fb4:	10 92 81 00 	sts	0x0081, r1
    1fb8:	10 92 85 00 	sts	0x0085, r1
    1fbc:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1fc0:	40 93 72 01 	sts	0x0172, r20
                        rx_busy = 0;
    1fc4:	10 92 55 01 	sts	0x0155, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1fc8:	c0 91 82 01 	lds	r28, 0x0182
    1fcc:	d0 91 83 01 	lds	r29, 0x0183
    1fd0:	88 e7       	ldi	r24, 0x78	; 120
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <message_crc>
    1fd8:	c8 17       	cp	r28, r24
    1fda:	d9 07       	cpc	r29, r25
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <__vector_23+0x124>
    1fde:	ae cf       	rjmp	.-164    	; 0x1f3c <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1fe0:	80 91 81 01 	lds	r24, 0x0181
    1fe4:	87 ff       	sbrs	r24, 7
    1fe6:	61 c0       	rjmp	.+194    	; 0x20aa <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1fe8:	98 e7       	ldi	r25, 0x78	; 120
    1fea:	98 0f       	add	r25, r24
    1fec:	93 30       	cpi	r25, 0x03	; 3
    1fee:	30 f0       	brcs	.+12     	; 0x1ffc <__vector_23+0x140>
        motors_off();
    1ff0:	53 98       	cbi	0x0a, 3	; 10
    1ff2:	23 98       	cbi	0x04, 3	; 4
    1ff4:	10 92 b4 00 	sts	0x00B4, r1
    1ff8:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	fc 01       	movw	r30, r24
    2000:	e0 58       	subi	r30, 0x80	; 128
    2002:	f1 09       	sbc	r31, r1
    2004:	eb 30       	cpi	r30, 0x0B	; 11
    2006:	f1 05       	cpc	r31, r1
    2008:	08 f0       	brcs	.+2      	; 0x200c <__vector_23+0x150>
    200a:	98 cf       	rjmp	.-208    	; 0x1f3c <__vector_23+0x80>
    200c:	e5 5c       	subi	r30, 0xC5	; 197
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    2014:	10 92 81 00 	sts	0x0081, r1
    2018:	10 92 85 00 	sts	0x0085, r1
    201c:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    2020:	40 93 2e 01 	sts	0x012E, r20
            rx_leadingbyte = 1;
    2024:	40 93 72 01 	sts	0x0172, r20
            rx_busy = 0;
    2028:	10 92 55 01 	sts	0x0155, r1
            adc_trigger_high_gain();
    202c:	10 92 7c 00 	sts	0x007C, r1
    2030:	83 ea       	ldi	r24, 0xA3	; 163
    2032:	80 93 7a 00 	sts	0x007A, r24
    2036:	40 93 7b 00 	sts	0x007B, r20
    203a:	80 cf       	rjmp	.-256    	; 0x1f3c <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    203c:	80 91 7a 00 	lds	r24, 0x007A
    2040:	86 fd       	sbrc	r24, 6
    2042:	fc cf       	rjmp	.-8      	; 0x203c <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    2044:	80 91 78 00 	lds	r24, 0x0078
    2048:	90 91 79 00 	lds	r25, 0x0079
    204c:	90 93 4e 01 	sts	0x014E, r25
    2050:	80 93 4d 01 	sts	0x014D, r24
                    adc_trigger_high_gain();
    2054:	10 92 7c 00 	sts	0x007C, r1
    2058:	83 ea       	ldi	r24, 0xA3	; 163
    205a:	80 93 7a 00 	sts	0x007A, r24
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    2064:	90 91 86 01 	lds	r25, 0x0186
    2068:	99 23       	and	r25, r25
    206a:	d1 f0       	breq	.+52     	; 0x20a0 <__vector_23+0x1e4>
                        rx_timer_off();
    206c:	10 92 81 00 	sts	0x0081, r1
    2070:	10 92 85 00 	sts	0x0085, r1
    2074:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    2078:	80 93 72 01 	sts	0x0172, r24
                        rx_busy = 0;
    207c:	10 92 55 01 	sts	0x0155, r1
    2080:	5d cf       	rjmp	.-326    	; 0x1f3c <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	f9 01       	movw	r30, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <__vector_23+0x1d2>
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	8a 95       	dec	r24
    2090:	e2 f7       	brpl	.-8      	; 0x208a <__vector_23+0x1ce>
    2092:	cf 01       	movw	r24, r30
    2094:	90 91 86 01 	lds	r25, 0x0186
    2098:	89 2b       	or	r24, r25
    209a:	80 93 86 01 	sts	0x0186, r24
    209e:	4e cf       	rjmp	.-356    	; 0x1f3c <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    20a0:	10 92 72 01 	sts	0x0172, r1
                        rx_byteindex = 0;
    20a4:	10 92 4c 01 	sts	0x014C, r1
    20a8:	49 cf       	rjmp	.-366    	; 0x1f3c <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    20aa:	e0 91 05 01 	lds	r30, 0x0105
    20ae:	f0 91 06 01 	lds	r31, 0x0106
    20b2:	6d e4       	ldi	r22, 0x4D	; 77
    20b4:	71 e0       	ldi	r23, 0x01	; 1
    20b6:	88 e7       	ldi	r24, 0x78	; 120
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	09 95       	icall
    20bc:	3f cf       	rjmp	.-386    	; 0x1f3c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    20be:	80 91 78 01 	lds	r24, 0x0178
    20c2:	82 30       	cpi	r24, 0x02	; 2
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <__vector_23+0x20c>
    20c6:	dd c0       	rjmp	.+442    	; 0x2282 <__vector_23+0x3c6>
    20c8:	08 f4       	brcc	.+2      	; 0x20cc <__vector_23+0x210>
    20ca:	ba c0       	rjmp	.+372    	; 0x2240 <__vector_23+0x384>
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <__vector_23+0x216>
    20d0:	c6 c0       	rjmp	.+396    	; 0x225e <__vector_23+0x3a2>
    20d2:	84 30       	cpi	r24, 0x04	; 4
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <__vector_23+0x21c>
    20d6:	b1 c0       	rjmp	.+354    	; 0x223a <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    20d8:	80 91 17 01 	lds	r24, 0x0117
    20dc:	90 91 7e 01 	lds	r25, 0x017E
    20e0:	83 30       	cpi	r24, 0x03	; 3
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <__vector_23+0x22a>
    20e4:	e3 c0       	rjmp	.+454    	; 0x22ac <__vector_23+0x3f0>
    20e6:	80 91 7d 01 	lds	r24, 0x017D
                        prev_motion = MOVE_STOP;
    20ea:	10 92 18 01 	sts	0x0118, r1
                        cur_motion = MOVE_STRAIGHT;
    20ee:	23 e0       	ldi	r18, 0x03	; 3
    20f0:	20 93 17 01 	sts	0x0117, r18
                        kilo_straight_left = calibmsg->straight_left;
    20f4:	80 93 89 01 	sts	0x0189, r24
                        kilo_straight_right = calibmsg->straight_right;
    20f8:	90 93 8a 01 	sts	0x018A, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    20fc:	80 91 19 01 	lds	r24, 0x0119
    2100:	86 30       	cpi	r24, 0x06	; 6
    2102:	09 f4       	brne	.+2      	; 0x2106 <__vector_23+0x24a>
    2104:	1b cf       	rjmp	.-458    	; 0x1f3c <__vector_23+0x80>
                motors_on();
    2106:	53 9a       	sbi	0x0a, 3	; 10
    2108:	23 9a       	sbi	0x04, 3	; 4
    210a:	10 92 b4 00 	sts	0x00B4, r1
    210e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    2112:	86 e0       	ldi	r24, 0x06	; 6
    2114:	80 93 19 01 	sts	0x0119, r24
    2118:	11 cf       	rjmp	.-478    	; 0x1f3c <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    211a:	80 91 19 01 	lds	r24, 0x0119
    211e:	86 30       	cpi	r24, 0x06	; 6
    2120:	99 f0       	breq	.+38     	; 0x2148 <__vector_23+0x28c>
                motors_on();
    2122:	53 9a       	sbi	0x0a, 3	; 10
    2124:	23 9a       	sbi	0x04, 3	; 4
    2126:	10 92 b4 00 	sts	0x00B4, r1
    212a:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    212e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    2130:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    2132:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    2134:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    2136:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    2138:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    213a:	10 92 17 01 	sts	0x0117, r1
    213e:	10 92 18 01 	sts	0x0118, r1
                kilo_state = MOVING;
    2142:	86 e0       	ldi	r24, 0x06	; 6
    2144:	80 93 19 01 	sts	0x0119, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9c 01       	movw	r18, r24
    214e:	00 90 78 01 	lds	r0, 0x0178
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <__vector_23+0x29c>
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	0a 94       	dec	r0
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <__vector_23+0x298>
    215c:	80 91 87 01 	lds	r24, 0x0187
    2160:	90 91 88 01 	lds	r25, 0x0188
    2164:	82 23       	and	r24, r18
    2166:	93 23       	and	r25, r19
    2168:	89 2b       	or	r24, r25
    216a:	09 f0       	breq	.+2      	; 0x216e <__vector_23+0x2b2>
    216c:	86 c0       	rjmp	.+268    	; 0x227a <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    216e:	10 92 17 01 	sts	0x0117, r1
    2172:	e4 ce       	rjmp	.-568    	; 0x1f3c <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	80 93 19 01 	sts	0x0119, r24
    217a:	e0 ce       	rjmp	.-576    	; 0x1f3c <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    217c:	e0 e0       	ldi	r30, 0x00	; 0
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    2182:	80 91 6e 00 	lds	r24, 0x006E
    2186:	8d 7f       	andi	r24, 0xFD	; 253
    2188:	80 93 6e 00 	sts	0x006E, r24
    218c:	16 bc       	out	0x26, r1	; 38
            bootload();
    218e:	e0 e0       	ldi	r30, 0x00	; 0
    2190:	f0 e7       	ldi	r31, 0x70	; 112
    2192:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    2194:	10 92 19 01 	sts	0x0119, r1
    2198:	d1 ce       	rjmp	.-606    	; 0x1f3c <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	80 93 19 01 	sts	0x0119, r24
    21a0:	cd ce       	rjmp	.-614    	; 0x1f3c <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    21a2:	85 e0       	ldi	r24, 0x05	; 5
    21a4:	80 93 19 01 	sts	0x0119, r24
    21a8:	c9 ce       	rjmp	.-622    	; 0x1f3c <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    21aa:	80 91 19 01 	lds	r24, 0x0119
    21ae:	83 30       	cpi	r24, 0x03	; 3
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <__vector_23+0x2f8>
    21b2:	c4 ce       	rjmp	.-632    	; 0x1f3c <__vector_23+0x80>
    21b4:	80 91 19 01 	lds	r24, 0x0119
    21b8:	84 30       	cpi	r24, 0x04	; 4
    21ba:	09 f4       	brne	.+2      	; 0x21be <__vector_23+0x302>
    21bc:	bf ce       	rjmp	.-642    	; 0x1f3c <__vector_23+0x80>
                motors_on();
    21be:	53 9a       	sbi	0x0a, 3	; 10
    21c0:	23 9a       	sbi	0x04, 3	; 4
    21c2:	10 92 b4 00 	sts	0x00B4, r1
    21c6:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	80 93 19 01 	sts	0x0119, r24
    21d0:	b5 ce       	rjmp	.-662    	; 0x1f3c <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    21d2:	80 91 19 01 	lds	r24, 0x0119
    21d6:	86 30       	cpi	r24, 0x06	; 6
    21d8:	09 f0       	breq	.+2      	; 0x21dc <__vector_23+0x320>
    21da:	b0 ce       	rjmp	.-672    	; 0x1f3c <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    21dc:	60 91 87 01 	lds	r22, 0x0187
    21e0:	80 eb       	ldi	r24, 0xB0	; 176
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 d5 14 	call	0x29aa	; 0x29aa <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    21e8:	60 91 88 01 	lds	r22, 0x0188
    21ec:	81 eb       	ldi	r24, 0xB1	; 177
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    21f4:	60 91 8b 01 	lds	r22, 0x018B
    21f8:	85 e0       	ldi	r24, 0x05	; 5
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 d5 14 	call	0x29aa	; 0x29aa <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    2200:	60 91 77 01 	lds	r22, 0x0177
    2204:	89 e0       	ldi	r24, 0x09	; 9
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 d5 14 	call	0x29aa	; 0x29aa <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    220c:	60 91 89 01 	lds	r22, 0x0189
    2210:	8c e0       	ldi	r24, 0x0C	; 12
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	0e 94 d5 14 	call	0x29aa	; 0x29aa <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    2218:	60 91 8a 01 	lds	r22, 0x018A
    221c:	84 e1       	ldi	r24, 0x14	; 20
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 d5 14 	call	0x29aa	; 0x29aa <eeprom_write_byte>
                        motors_off();
    2224:	53 98       	cbi	0x0a, 3	; 10
    2226:	23 98       	cbi	0x04, 3	; 4
    2228:	10 92 b4 00 	sts	0x00B4, r1
    222c:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 19 01 	sts	0x0119, r24
    2236:	80 91 78 01 	lds	r24, 0x0178
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    223a:	81 11       	cpse	r24, r1
    223c:	5f cf       	rjmp	.-322    	; 0x20fc <__vector_23+0x240>
    223e:	7e ce       	rjmp	.-772    	; 0x1f3c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    2240:	88 23       	and	r24, r24
    2242:	39 f2       	breq	.-114    	; 0x21d2 <__vector_23+0x316>
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	c9 f7       	brne	.-14     	; 0x223a <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    2248:	80 91 79 01 	lds	r24, 0x0179
    224c:	90 91 7a 01 	lds	r25, 0x017A
    2250:	90 93 88 01 	sts	0x0188, r25
    2254:	80 93 87 01 	sts	0x0187, r24
                    cur_motion = MOVE_STOP;
    2258:	10 92 17 01 	sts	0x0117, r1
    225c:	4f cf       	rjmp	.-354    	; 0x20fc <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    225e:	80 91 17 01 	lds	r24, 0x0117
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	71 f1       	breq	.+92     	; 0x22c2 <__vector_23+0x406>
    2266:	80 91 7c 01 	lds	r24, 0x017C
                        prev_motion = MOVE_STOP;
    226a:	10 92 18 01 	sts	0x0118, r1
                        cur_motion = MOVE_RIGHT;
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	90 93 17 01 	sts	0x0117, r25
                        kilo_turn_right = calibmsg->turn_right;
    2274:	80 93 77 01 	sts	0x0177, r24
    2278:	41 cf       	rjmp	.-382    	; 0x20fc <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 17 01 	sts	0x0117, r24
    2280:	5d ce       	rjmp	.-838    	; 0x1f3c <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    2282:	80 91 17 01 	lds	r24, 0x0117
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	51 f0       	breq	.+20     	; 0x229e <__vector_23+0x3e2>
    228a:	80 91 7b 01 	lds	r24, 0x017B
                        prev_motion = MOVE_STOP;
    228e:	10 92 18 01 	sts	0x0118, r1
                        cur_motion = MOVE_LEFT;
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	90 93 17 01 	sts	0x0117, r25
                        kilo_turn_left = calibmsg->turn_left;
    2298:	80 93 8b 01 	sts	0x018B, r24
    229c:	2f cf       	rjmp	.-418    	; 0x20fc <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    229e:	80 91 7b 01 	lds	r24, 0x017B
    22a2:	90 91 8b 01 	lds	r25, 0x018B
    22a6:	89 13       	cpse	r24, r25
    22a8:	f2 cf       	rjmp	.-28     	; 0x228e <__vector_23+0x3d2>
    22aa:	28 cf       	rjmp	.-432    	; 0x20fc <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    22ac:	80 91 8a 01 	lds	r24, 0x018A
    22b0:	98 13       	cpse	r25, r24
    22b2:	19 cf       	rjmp	.-462    	; 0x20e6 <__vector_23+0x22a>
    22b4:	80 91 7d 01 	lds	r24, 0x017D
    22b8:	20 91 89 01 	lds	r18, 0x0189
    22bc:	82 13       	cpse	r24, r18
    22be:	15 cf       	rjmp	.-470    	; 0x20ea <__vector_23+0x22e>
    22c0:	1d cf       	rjmp	.-454    	; 0x20fc <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    22c2:	80 91 7c 01 	lds	r24, 0x017C
    22c6:	90 91 77 01 	lds	r25, 0x0177
    22ca:	89 13       	cpse	r24, r25
    22cc:	ce cf       	rjmp	.-100    	; 0x226a <__vector_23+0x3ae>
    22ce:	16 cf       	rjmp	.-468    	; 0x20fc <__vector_23+0x240>

000022d0 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    22d0:	fc 01       	movw	r30, r24
    22d2:	ac 01       	movw	r20, r24
    22d4:	46 5f       	subi	r20, 0xF6	; 246
    22d6:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    22d8:	8f ef       	ldi	r24, 0xFF	; 255
    22da:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    22dc:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    22de:	82 27       	eor	r24, r18
    22e0:	08 2e       	mov	r0, r24
    22e2:	82 95       	swap	r24
    22e4:	80 7f       	andi	r24, 0xF0	; 240
    22e6:	80 25       	eor	r24, r0
    22e8:	09 2e       	mov	r0, r25
    22ea:	98 2f       	mov	r25, r24
    22ec:	82 95       	swap	r24
    22ee:	8f 70       	andi	r24, 0x0F	; 15
    22f0:	08 26       	eor	r0, r24
    22f2:	86 95       	lsr	r24
    22f4:	98 27       	eor	r25, r24
    22f6:	89 27       	eor	r24, r25
    22f8:	88 0f       	add	r24, r24
    22fa:	88 0f       	add	r24, r24
    22fc:	88 0f       	add	r24, r24
    22fe:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    2300:	e4 17       	cp	r30, r20
    2302:	f5 07       	cpc	r31, r21
    2304:	59 f7       	brne	.-42     	; 0x22dc <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    2306:	08 95       	ret

00002308 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    2308:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    230a:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    230c:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    230e:	20 91 4b 01 	lds	r18, 0x014B
    or tmpreg1, ddrreg
    2312:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    2314:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    2316:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    2318:	30 91 4b 01 	lds	r19, 0x014B
    231c:	20 30       	cpi	r18, 0x00	; 0
    231e:	29 f0       	breq	.+10     	; 0x232a <message_send+0x22>
    2320:	00 00       	nop
    2322:	25 b1       	in	r18, 0x05	; 5
    2324:	23 2b       	or	r18, r19
    2326:	25 b9       	out	0x05, r18	; 5
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <message_send+0x2a>
    232a:	00 00       	nop
    232c:	00 00       	nop
    232e:	00 00       	nop
    2330:	00 c0       	rjmp	.+0      	; 0x2332 <message_send+0x2a>
    2332:	00 00       	nop
    2334:	00 00       	nop
    2336:	00 00       	nop
    2338:	30 95       	com	r19
    233a:	25 b1       	in	r18, 0x05	; 5
    233c:	23 23       	and	r18, r19
    233e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    2340:	2e ea       	ldi	r18, 0xAE	; 174
    2342:	2a 95       	dec	r18
    2344:	f1 f7       	brne	.-4      	; 0x2342 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    2346:	2b ee       	ldi	r18, 0xEB	; 235

00002348 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    2348:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    234a:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    234c:	0a c0       	rjmp	.+20     	; 0x2362 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    234e:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    2350:	30 91 4b 01 	lds	r19, 0x014B
    com tmpreg2
    2354:	30 95       	com	r19
    in tmpreg1, IR_PORT
    2356:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    2358:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    235a:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    235c:	0f be       	out	0x3f, r0	; 63
    return 0
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	08 95       	ret

00002362 <nocollision>:
nocollision:
    nop
    2362:	00 00       	nop
    dec tmpreg1
    2364:	2a 95       	dec	r18
    brne checkcollision
    2366:	81 f7       	brne	.-32     	; 0x2348 <checkcollision>

    ldi tmpreg1, 0x01
    2368:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    236a:	30 91 4b 01 	lds	r19, 0x014B
    236e:	20 30       	cpi	r18, 0x00	; 0
    2370:	29 f0       	breq	.+10     	; 0x237c <nocollision+0x1a>
    2372:	00 00       	nop
    2374:	25 b1       	in	r18, 0x05	; 5
    2376:	23 2b       	or	r18, r19
    2378:	25 b9       	out	0x05, r18	; 5
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <nocollision+0x22>
    237c:	00 00       	nop
    237e:	00 00       	nop
    2380:	00 00       	nop
    2382:	00 c0       	rjmp	.+0      	; 0x2384 <nocollision+0x22>
    2384:	00 00       	nop
    2386:	00 00       	nop
    2388:	00 00       	nop
    238a:	30 95       	com	r19
    238c:	25 b1       	in	r18, 0x05	; 5
    238e:	23 23       	and	r18, r19
    2390:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    2392:	00 00       	nop
    2394:	24 e5       	ldi	r18, 0x54	; 84
    2396:	2a 95       	dec	r18
    2398:	f1 f7       	brne	.-4      	; 0x2396 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    239a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    239c:	8c e0       	ldi	r24, 0x0C	; 12

0000239e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    239e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    23a0:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    23a2:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    23a4:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    23a6:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    23a8:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    23aa:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    23ae:	50 e0       	ldi	r21, 0x00	; 0

000023b0 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    23b0:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    23b2:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    23b4:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    23b6:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    23b8:	30 91 4b 01 	lds	r19, 0x014B
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	29 f0       	breq	.+10     	; 0x23ca <sendbit+0x1a>
    23c0:	00 00       	nop
    23c2:	25 b1       	in	r18, 0x05	; 5
    23c4:	23 2b       	or	r18, r19
    23c6:	25 b9       	out	0x05, r18	; 5
    23c8:	04 c0       	rjmp	.+8      	; 0x23d2 <sendbit+0x22>
    23ca:	00 00       	nop
    23cc:	00 00       	nop
    23ce:	00 00       	nop
    23d0:	00 c0       	rjmp	.+0      	; 0x23d2 <sendbit+0x22>
    23d2:	00 00       	nop
    23d4:	00 00       	nop
    23d6:	00 00       	nop
    23d8:	30 95       	com	r19
    23da:	25 b1       	in	r18, 0x05	; 5
    23dc:	23 23       	and	r18, r19
    23de:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    23e0:	00 00       	nop
    23e2:	21 e5       	ldi	r18, 0x51	; 81
    23e4:	2a 95       	dec	r18
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    23e8:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    23ea:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    23ec:	9a 95       	dec	r25
    brne sendbit
    23ee:	01 f7       	brne	.-64     	; 0x23b0 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    23f0:	8a 95       	dec	r24
    brne sendbyte
    23f2:	a9 f6       	brne	.-86     	; 0x239e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    23f4:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    23f6:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    23f8:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    23fa:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    23fc:	30 91 4b 01 	lds	r19, 0x014B
    com tmpreg2
    2400:	30 95       	com	r19
    in tmpreg1, IR_PORT
    2402:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    2404:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    2406:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    2408:	0f be       	out	0x3f, r0	; 63
    return 1
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	08 95       	ret

0000240e <main>:
}


int main()
{
  kilo_init();
    240e:	0e 94 98 08 	call	0x1130	; 0x1130 <kilo_init>
  kilo_message_tx = message_tx;
    2412:	85 e9       	ldi	r24, 0x95	; 149
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	90 93 04 01 	sts	0x0104, r25
    241a:	80 93 03 01 	sts	0x0103, r24
  kilo_message_tx_success = message_tx_success;
    241e:	88 e9       	ldi	r24, 0x98	; 152
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	90 93 02 01 	sts	0x0102, r25
    2426:	80 93 01 01 	sts	0x0101, r24
  kilo_message_rx = message_rx;
    242a:	8f e9       	ldi	r24, 0x9F	; 159
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	90 93 06 01 	sts	0x0106, r25
    2432:	80 93 05 01 	sts	0x0105, r24
  kilo_start(setup, loop);
    2436:	67 e6       	ldi	r22, 0x67	; 103
    2438:	75 e0       	ldi	r23, 0x05	; 5
    243a:	81 e7       	ldi	r24, 0x71	; 113
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 94 09 	call	0x1328	; 0x1328 <kilo_start>
    
  return 0;
}
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	08 95       	ret

00002448 <__divmodhi4>:
    2448:	97 fb       	bst	r25, 7
    244a:	07 2e       	mov	r0, r23
    244c:	16 f4       	brtc	.+4      	; 0x2452 <__divmodhi4+0xa>
    244e:	00 94       	com	r0
    2450:	07 d0       	rcall	.+14     	; 0x2460 <__divmodhi4_neg1>
    2452:	77 fd       	sbrc	r23, 7
    2454:	09 d0       	rcall	.+18     	; 0x2468 <__divmodhi4_neg2>
    2456:	0e 94 4d 12 	call	0x249a	; 0x249a <__udivmodhi4>
    245a:	07 fc       	sbrc	r0, 7
    245c:	05 d0       	rcall	.+10     	; 0x2468 <__divmodhi4_neg2>
    245e:	3e f4       	brtc	.+14     	; 0x246e <__divmodhi4_exit>

00002460 <__divmodhi4_neg1>:
    2460:	90 95       	com	r25
    2462:	81 95       	neg	r24
    2464:	9f 4f       	sbci	r25, 0xFF	; 255
    2466:	08 95       	ret

00002468 <__divmodhi4_neg2>:
    2468:	70 95       	com	r23
    246a:	61 95       	neg	r22
    246c:	7f 4f       	sbci	r23, 0xFF	; 255

0000246e <__divmodhi4_exit>:
    246e:	08 95       	ret

00002470 <__tablejump2__>:
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	05 90       	lpm	r0, Z+
    2476:	f4 91       	lpm	r31, Z
    2478:	e0 2d       	mov	r30, r0
    247a:	09 94       	ijmp

0000247c <__umulhisi3>:
    247c:	a2 9f       	mul	r26, r18
    247e:	b0 01       	movw	r22, r0
    2480:	b3 9f       	mul	r27, r19
    2482:	c0 01       	movw	r24, r0
    2484:	a3 9f       	mul	r26, r19
    2486:	70 0d       	add	r23, r0
    2488:	81 1d       	adc	r24, r1
    248a:	11 24       	eor	r1, r1
    248c:	91 1d       	adc	r25, r1
    248e:	b2 9f       	mul	r27, r18
    2490:	70 0d       	add	r23, r0
    2492:	81 1d       	adc	r24, r1
    2494:	11 24       	eor	r1, r1
    2496:	91 1d       	adc	r25, r1
    2498:	08 95       	ret

0000249a <__udivmodhi4>:
    249a:	aa 1b       	sub	r26, r26
    249c:	bb 1b       	sub	r27, r27
    249e:	51 e1       	ldi	r21, 0x11	; 17
    24a0:	07 c0       	rjmp	.+14     	; 0x24b0 <__udivmodhi4_ep>

000024a2 <__udivmodhi4_loop>:
    24a2:	aa 1f       	adc	r26, r26
    24a4:	bb 1f       	adc	r27, r27
    24a6:	a6 17       	cp	r26, r22
    24a8:	b7 07       	cpc	r27, r23
    24aa:	10 f0       	brcs	.+4      	; 0x24b0 <__udivmodhi4_ep>
    24ac:	a6 1b       	sub	r26, r22
    24ae:	b7 0b       	sbc	r27, r23

000024b0 <__udivmodhi4_ep>:
    24b0:	88 1f       	adc	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	5a 95       	dec	r21
    24b6:	a9 f7       	brne	.-22     	; 0x24a2 <__udivmodhi4_loop>
    24b8:	80 95       	com	r24
    24ba:	90 95       	com	r25
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	08 95       	ret

000024c2 <__subsf3>:
    24c2:	50 58       	subi	r21, 0x80	; 128

000024c4 <__addsf3>:
    24c4:	bb 27       	eor	r27, r27
    24c6:	aa 27       	eor	r26, r26
    24c8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__addsf3x>
    24cc:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__fp_round>
    24d0:	0e 94 bc 13 	call	0x2778	; 0x2778 <__fp_pscA>
    24d4:	38 f0       	brcs	.+14     	; 0x24e4 <__addsf3+0x20>
    24d6:	0e 94 c3 13 	call	0x2786	; 0x2786 <__fp_pscB>
    24da:	20 f0       	brcs	.+8      	; 0x24e4 <__addsf3+0x20>
    24dc:	39 f4       	brne	.+14     	; 0x24ec <__addsf3+0x28>
    24de:	9f 3f       	cpi	r25, 0xFF	; 255
    24e0:	19 f4       	brne	.+6      	; 0x24e8 <__addsf3+0x24>
    24e2:	26 f4       	brtc	.+8      	; 0x24ec <__addsf3+0x28>
    24e4:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__fp_nan>
    24e8:	0e f4       	brtc	.+2      	; 0x24ec <__addsf3+0x28>
    24ea:	e0 95       	com	r30
    24ec:	e7 fb       	bst	r30, 7
    24ee:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__fp_inf>

000024f2 <__addsf3x>:
    24f2:	e9 2f       	mov	r30, r25
    24f4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__fp_split3>
    24f8:	58 f3       	brcs	.-42     	; 0x24d0 <__addsf3+0xc>
    24fa:	ba 17       	cp	r27, r26
    24fc:	62 07       	cpc	r22, r18
    24fe:	73 07       	cpc	r23, r19
    2500:	84 07       	cpc	r24, r20
    2502:	95 07       	cpc	r25, r21
    2504:	20 f0       	brcs	.+8      	; 0x250e <__addsf3x+0x1c>
    2506:	79 f4       	brne	.+30     	; 0x2526 <__addsf3x+0x34>
    2508:	a6 f5       	brtc	.+104    	; 0x2572 <__addsf3x+0x80>
    250a:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_zero>
    250e:	0e f4       	brtc	.+2      	; 0x2512 <__addsf3x+0x20>
    2510:	e0 95       	com	r30
    2512:	0b 2e       	mov	r0, r27
    2514:	ba 2f       	mov	r27, r26
    2516:	a0 2d       	mov	r26, r0
    2518:	0b 01       	movw	r0, r22
    251a:	b9 01       	movw	r22, r18
    251c:	90 01       	movw	r18, r0
    251e:	0c 01       	movw	r0, r24
    2520:	ca 01       	movw	r24, r20
    2522:	a0 01       	movw	r20, r0
    2524:	11 24       	eor	r1, r1
    2526:	ff 27       	eor	r31, r31
    2528:	59 1b       	sub	r21, r25
    252a:	99 f0       	breq	.+38     	; 0x2552 <__addsf3x+0x60>
    252c:	59 3f       	cpi	r21, 0xF9	; 249
    252e:	50 f4       	brcc	.+20     	; 0x2544 <__addsf3x+0x52>
    2530:	50 3e       	cpi	r21, 0xE0	; 224
    2532:	68 f1       	brcs	.+90     	; 0x258e <__addsf3x+0x9c>
    2534:	1a 16       	cp	r1, r26
    2536:	f0 40       	sbci	r31, 0x00	; 0
    2538:	a2 2f       	mov	r26, r18
    253a:	23 2f       	mov	r18, r19
    253c:	34 2f       	mov	r19, r20
    253e:	44 27       	eor	r20, r20
    2540:	58 5f       	subi	r21, 0xF8	; 248
    2542:	f3 cf       	rjmp	.-26     	; 0x252a <__addsf3x+0x38>
    2544:	46 95       	lsr	r20
    2546:	37 95       	ror	r19
    2548:	27 95       	ror	r18
    254a:	a7 95       	ror	r26
    254c:	f0 40       	sbci	r31, 0x00	; 0
    254e:	53 95       	inc	r21
    2550:	c9 f7       	brne	.-14     	; 0x2544 <__addsf3x+0x52>
    2552:	7e f4       	brtc	.+30     	; 0x2572 <__addsf3x+0x80>
    2554:	1f 16       	cp	r1, r31
    2556:	ba 0b       	sbc	r27, r26
    2558:	62 0b       	sbc	r22, r18
    255a:	73 0b       	sbc	r23, r19
    255c:	84 0b       	sbc	r24, r20
    255e:	ba f0       	brmi	.+46     	; 0x258e <__addsf3x+0x9c>
    2560:	91 50       	subi	r25, 0x01	; 1
    2562:	a1 f0       	breq	.+40     	; 0x258c <__addsf3x+0x9a>
    2564:	ff 0f       	add	r31, r31
    2566:	bb 1f       	adc	r27, r27
    2568:	66 1f       	adc	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	c2 f7       	brpl	.-16     	; 0x2560 <__addsf3x+0x6e>
    2570:	0e c0       	rjmp	.+28     	; 0x258e <__addsf3x+0x9c>
    2572:	ba 0f       	add	r27, r26
    2574:	62 1f       	adc	r22, r18
    2576:	73 1f       	adc	r23, r19
    2578:	84 1f       	adc	r24, r20
    257a:	48 f4       	brcc	.+18     	; 0x258e <__addsf3x+0x9c>
    257c:	87 95       	ror	r24
    257e:	77 95       	ror	r23
    2580:	67 95       	ror	r22
    2582:	b7 95       	ror	r27
    2584:	f7 95       	ror	r31
    2586:	9e 3f       	cpi	r25, 0xFE	; 254
    2588:	08 f0       	brcs	.+2      	; 0x258c <__addsf3x+0x9a>
    258a:	b0 cf       	rjmp	.-160    	; 0x24ec <__addsf3+0x28>
    258c:	93 95       	inc	r25
    258e:	88 0f       	add	r24, r24
    2590:	08 f0       	brcs	.+2      	; 0x2594 <__addsf3x+0xa2>
    2592:	99 27       	eor	r25, r25
    2594:	ee 0f       	add	r30, r30
    2596:	97 95       	ror	r25
    2598:	87 95       	ror	r24
    259a:	08 95       	ret

0000259c <__divsf3>:
    259c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__divsf3x>
    25a0:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__fp_round>
    25a4:	0e 94 c3 13 	call	0x2786	; 0x2786 <__fp_pscB>
    25a8:	58 f0       	brcs	.+22     	; 0x25c0 <__divsf3+0x24>
    25aa:	0e 94 bc 13 	call	0x2778	; 0x2778 <__fp_pscA>
    25ae:	40 f0       	brcs	.+16     	; 0x25c0 <__divsf3+0x24>
    25b0:	29 f4       	brne	.+10     	; 0x25bc <__divsf3+0x20>
    25b2:	5f 3f       	cpi	r21, 0xFF	; 255
    25b4:	29 f0       	breq	.+10     	; 0x25c0 <__divsf3+0x24>
    25b6:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__fp_inf>
    25ba:	51 11       	cpse	r21, r1
    25bc:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__fp_szero>
    25c0:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__fp_nan>

000025c4 <__divsf3x>:
    25c4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__fp_split3>
    25c8:	68 f3       	brcs	.-38     	; 0x25a4 <__divsf3+0x8>

000025ca <__divsf3_pse>:
    25ca:	99 23       	and	r25, r25
    25cc:	b1 f3       	breq	.-20     	; 0x25ba <__divsf3+0x1e>
    25ce:	55 23       	and	r21, r21
    25d0:	91 f3       	breq	.-28     	; 0x25b6 <__divsf3+0x1a>
    25d2:	95 1b       	sub	r25, r21
    25d4:	55 0b       	sbc	r21, r21
    25d6:	bb 27       	eor	r27, r27
    25d8:	aa 27       	eor	r26, r26
    25da:	62 17       	cp	r22, r18
    25dc:	73 07       	cpc	r23, r19
    25de:	84 07       	cpc	r24, r20
    25e0:	38 f0       	brcs	.+14     	; 0x25f0 <__divsf3_pse+0x26>
    25e2:	9f 5f       	subi	r25, 0xFF	; 255
    25e4:	5f 4f       	sbci	r21, 0xFF	; 255
    25e6:	22 0f       	add	r18, r18
    25e8:	33 1f       	adc	r19, r19
    25ea:	44 1f       	adc	r20, r20
    25ec:	aa 1f       	adc	r26, r26
    25ee:	a9 f3       	breq	.-22     	; 0x25da <__divsf3_pse+0x10>
    25f0:	35 d0       	rcall	.+106    	; 0x265c <__divsf3_pse+0x92>
    25f2:	0e 2e       	mov	r0, r30
    25f4:	3a f0       	brmi	.+14     	; 0x2604 <__divsf3_pse+0x3a>
    25f6:	e0 e8       	ldi	r30, 0x80	; 128
    25f8:	32 d0       	rcall	.+100    	; 0x265e <__divsf3_pse+0x94>
    25fa:	91 50       	subi	r25, 0x01	; 1
    25fc:	50 40       	sbci	r21, 0x00	; 0
    25fe:	e6 95       	lsr	r30
    2600:	00 1c       	adc	r0, r0
    2602:	ca f7       	brpl	.-14     	; 0x25f6 <__divsf3_pse+0x2c>
    2604:	2b d0       	rcall	.+86     	; 0x265c <__divsf3_pse+0x92>
    2606:	fe 2f       	mov	r31, r30
    2608:	29 d0       	rcall	.+82     	; 0x265c <__divsf3_pse+0x92>
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	88 1f       	adc	r24, r24
    2610:	bb 1f       	adc	r27, r27
    2612:	26 17       	cp	r18, r22
    2614:	37 07       	cpc	r19, r23
    2616:	48 07       	cpc	r20, r24
    2618:	ab 07       	cpc	r26, r27
    261a:	b0 e8       	ldi	r27, 0x80	; 128
    261c:	09 f0       	breq	.+2      	; 0x2620 <__divsf3_pse+0x56>
    261e:	bb 0b       	sbc	r27, r27
    2620:	80 2d       	mov	r24, r0
    2622:	bf 01       	movw	r22, r30
    2624:	ff 27       	eor	r31, r31
    2626:	93 58       	subi	r25, 0x83	; 131
    2628:	5f 4f       	sbci	r21, 0xFF	; 255
    262a:	3a f0       	brmi	.+14     	; 0x263a <__divsf3_pse+0x70>
    262c:	9e 3f       	cpi	r25, 0xFE	; 254
    262e:	51 05       	cpc	r21, r1
    2630:	78 f0       	brcs	.+30     	; 0x2650 <__divsf3_pse+0x86>
    2632:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__fp_inf>
    2636:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__fp_szero>
    263a:	5f 3f       	cpi	r21, 0xFF	; 255
    263c:	e4 f3       	brlt	.-8      	; 0x2636 <__divsf3_pse+0x6c>
    263e:	98 3e       	cpi	r25, 0xE8	; 232
    2640:	d4 f3       	brlt	.-12     	; 0x2636 <__divsf3_pse+0x6c>
    2642:	86 95       	lsr	r24
    2644:	77 95       	ror	r23
    2646:	67 95       	ror	r22
    2648:	b7 95       	ror	r27
    264a:	f7 95       	ror	r31
    264c:	9f 5f       	subi	r25, 0xFF	; 255
    264e:	c9 f7       	brne	.-14     	; 0x2642 <__divsf3_pse+0x78>
    2650:	88 0f       	add	r24, r24
    2652:	91 1d       	adc	r25, r1
    2654:	96 95       	lsr	r25
    2656:	87 95       	ror	r24
    2658:	97 f9       	bld	r25, 7
    265a:	08 95       	ret
    265c:	e1 e0       	ldi	r30, 0x01	; 1
    265e:	66 0f       	add	r22, r22
    2660:	77 1f       	adc	r23, r23
    2662:	88 1f       	adc	r24, r24
    2664:	bb 1f       	adc	r27, r27
    2666:	62 17       	cp	r22, r18
    2668:	73 07       	cpc	r23, r19
    266a:	84 07       	cpc	r24, r20
    266c:	ba 07       	cpc	r27, r26
    266e:	20 f0       	brcs	.+8      	; 0x2678 <__divsf3_pse+0xae>
    2670:	62 1b       	sub	r22, r18
    2672:	73 0b       	sbc	r23, r19
    2674:	84 0b       	sbc	r24, r20
    2676:	ba 0b       	sbc	r27, r26
    2678:	ee 1f       	adc	r30, r30
    267a:	88 f7       	brcc	.-30     	; 0x265e <__divsf3_pse+0x94>
    267c:	e0 95       	com	r30
    267e:	08 95       	ret

00002680 <__fixsfsi>:
    2680:	0e 94 47 13 	call	0x268e	; 0x268e <__fixunssfsi>
    2684:	68 94       	set
    2686:	b1 11       	cpse	r27, r1
    2688:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__fp_szero>
    268c:	08 95       	ret

0000268e <__fixunssfsi>:
    268e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fp_splitA>
    2692:	88 f0       	brcs	.+34     	; 0x26b6 <__fixunssfsi+0x28>
    2694:	9f 57       	subi	r25, 0x7F	; 127
    2696:	98 f0       	brcs	.+38     	; 0x26be <__fixunssfsi+0x30>
    2698:	b9 2f       	mov	r27, r25
    269a:	99 27       	eor	r25, r25
    269c:	b7 51       	subi	r27, 0x17	; 23
    269e:	b0 f0       	brcs	.+44     	; 0x26cc <__fixunssfsi+0x3e>
    26a0:	e1 f0       	breq	.+56     	; 0x26da <__fixunssfsi+0x4c>
    26a2:	66 0f       	add	r22, r22
    26a4:	77 1f       	adc	r23, r23
    26a6:	88 1f       	adc	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	1a f0       	brmi	.+6      	; 0x26b2 <__fixunssfsi+0x24>
    26ac:	ba 95       	dec	r27
    26ae:	c9 f7       	brne	.-14     	; 0x26a2 <__fixunssfsi+0x14>
    26b0:	14 c0       	rjmp	.+40     	; 0x26da <__fixunssfsi+0x4c>
    26b2:	b1 30       	cpi	r27, 0x01	; 1
    26b4:	91 f0       	breq	.+36     	; 0x26da <__fixunssfsi+0x4c>
    26b6:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__fp_zero>
    26ba:	b1 e0       	ldi	r27, 0x01	; 1
    26bc:	08 95       	ret
    26be:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_zero>
    26c2:	67 2f       	mov	r22, r23
    26c4:	78 2f       	mov	r23, r24
    26c6:	88 27       	eor	r24, r24
    26c8:	b8 5f       	subi	r27, 0xF8	; 248
    26ca:	39 f0       	breq	.+14     	; 0x26da <__fixunssfsi+0x4c>
    26cc:	b9 3f       	cpi	r27, 0xF9	; 249
    26ce:	cc f3       	brlt	.-14     	; 0x26c2 <__fixunssfsi+0x34>
    26d0:	86 95       	lsr	r24
    26d2:	77 95       	ror	r23
    26d4:	67 95       	ror	r22
    26d6:	b3 95       	inc	r27
    26d8:	d9 f7       	brne	.-10     	; 0x26d0 <__fixunssfsi+0x42>
    26da:	3e f4       	brtc	.+14     	; 0x26ea <__fixunssfsi+0x5c>
    26dc:	90 95       	com	r25
    26de:	80 95       	com	r24
    26e0:	70 95       	com	r23
    26e2:	61 95       	neg	r22
    26e4:	7f 4f       	sbci	r23, 0xFF	; 255
    26e6:	8f 4f       	sbci	r24, 0xFF	; 255
    26e8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ea:	08 95       	ret

000026ec <__floatunsisf>:
    26ec:	e8 94       	clt
    26ee:	09 c0       	rjmp	.+18     	; 0x2702 <__floatsisf+0x12>

000026f0 <__floatsisf>:
    26f0:	97 fb       	bst	r25, 7
    26f2:	3e f4       	brtc	.+14     	; 0x2702 <__floatsisf+0x12>
    26f4:	90 95       	com	r25
    26f6:	80 95       	com	r24
    26f8:	70 95       	com	r23
    26fa:	61 95       	neg	r22
    26fc:	7f 4f       	sbci	r23, 0xFF	; 255
    26fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	99 23       	and	r25, r25
    2704:	a9 f0       	breq	.+42     	; 0x2730 <__floatsisf+0x40>
    2706:	f9 2f       	mov	r31, r25
    2708:	96 e9       	ldi	r25, 0x96	; 150
    270a:	bb 27       	eor	r27, r27
    270c:	93 95       	inc	r25
    270e:	f6 95       	lsr	r31
    2710:	87 95       	ror	r24
    2712:	77 95       	ror	r23
    2714:	67 95       	ror	r22
    2716:	b7 95       	ror	r27
    2718:	f1 11       	cpse	r31, r1
    271a:	f8 cf       	rjmp	.-16     	; 0x270c <__floatsisf+0x1c>
    271c:	fa f4       	brpl	.+62     	; 0x275c <__floatsisf+0x6c>
    271e:	bb 0f       	add	r27, r27
    2720:	11 f4       	brne	.+4      	; 0x2726 <__floatsisf+0x36>
    2722:	60 ff       	sbrs	r22, 0
    2724:	1b c0       	rjmp	.+54     	; 0x275c <__floatsisf+0x6c>
    2726:	6f 5f       	subi	r22, 0xFF	; 255
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	8f 4f       	sbci	r24, 0xFF	; 255
    272c:	9f 4f       	sbci	r25, 0xFF	; 255
    272e:	16 c0       	rjmp	.+44     	; 0x275c <__floatsisf+0x6c>
    2730:	88 23       	and	r24, r24
    2732:	11 f0       	breq	.+4      	; 0x2738 <__floatsisf+0x48>
    2734:	96 e9       	ldi	r25, 0x96	; 150
    2736:	11 c0       	rjmp	.+34     	; 0x275a <__floatsisf+0x6a>
    2738:	77 23       	and	r23, r23
    273a:	21 f0       	breq	.+8      	; 0x2744 <__floatsisf+0x54>
    273c:	9e e8       	ldi	r25, 0x8E	; 142
    273e:	87 2f       	mov	r24, r23
    2740:	76 2f       	mov	r23, r22
    2742:	05 c0       	rjmp	.+10     	; 0x274e <__floatsisf+0x5e>
    2744:	66 23       	and	r22, r22
    2746:	71 f0       	breq	.+28     	; 0x2764 <__floatsisf+0x74>
    2748:	96 e8       	ldi	r25, 0x86	; 134
    274a:	86 2f       	mov	r24, r22
    274c:	70 e0       	ldi	r23, 0x00	; 0
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	2a f0       	brmi	.+10     	; 0x275c <__floatsisf+0x6c>
    2752:	9a 95       	dec	r25
    2754:	66 0f       	add	r22, r22
    2756:	77 1f       	adc	r23, r23
    2758:	88 1f       	adc	r24, r24
    275a:	da f7       	brpl	.-10     	; 0x2752 <__floatsisf+0x62>
    275c:	88 0f       	add	r24, r24
    275e:	96 95       	lsr	r25
    2760:	87 95       	ror	r24
    2762:	97 f9       	bld	r25, 7
    2764:	08 95       	ret

00002766 <__fp_inf>:
    2766:	97 f9       	bld	r25, 7
    2768:	9f 67       	ori	r25, 0x7F	; 127
    276a:	80 e8       	ldi	r24, 0x80	; 128
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	08 95       	ret

00002772 <__fp_nan>:
    2772:	9f ef       	ldi	r25, 0xFF	; 255
    2774:	80 ec       	ldi	r24, 0xC0	; 192
    2776:	08 95       	ret

00002778 <__fp_pscA>:
    2778:	00 24       	eor	r0, r0
    277a:	0a 94       	dec	r0
    277c:	16 16       	cp	r1, r22
    277e:	17 06       	cpc	r1, r23
    2780:	18 06       	cpc	r1, r24
    2782:	09 06       	cpc	r0, r25
    2784:	08 95       	ret

00002786 <__fp_pscB>:
    2786:	00 24       	eor	r0, r0
    2788:	0a 94       	dec	r0
    278a:	12 16       	cp	r1, r18
    278c:	13 06       	cpc	r1, r19
    278e:	14 06       	cpc	r1, r20
    2790:	05 06       	cpc	r0, r21
    2792:	08 95       	ret

00002794 <__fp_round>:
    2794:	09 2e       	mov	r0, r25
    2796:	03 94       	inc	r0
    2798:	00 0c       	add	r0, r0
    279a:	11 f4       	brne	.+4      	; 0x27a0 <__fp_round+0xc>
    279c:	88 23       	and	r24, r24
    279e:	52 f0       	brmi	.+20     	; 0x27b4 <__fp_round+0x20>
    27a0:	bb 0f       	add	r27, r27
    27a2:	40 f4       	brcc	.+16     	; 0x27b4 <__fp_round+0x20>
    27a4:	bf 2b       	or	r27, r31
    27a6:	11 f4       	brne	.+4      	; 0x27ac <__fp_round+0x18>
    27a8:	60 ff       	sbrs	r22, 0
    27aa:	04 c0       	rjmp	.+8      	; 0x27b4 <__fp_round+0x20>
    27ac:	6f 5f       	subi	r22, 0xFF	; 255
    27ae:	7f 4f       	sbci	r23, 0xFF	; 255
    27b0:	8f 4f       	sbci	r24, 0xFF	; 255
    27b2:	9f 4f       	sbci	r25, 0xFF	; 255
    27b4:	08 95       	ret

000027b6 <__fp_split3>:
    27b6:	57 fd       	sbrc	r21, 7
    27b8:	90 58       	subi	r25, 0x80	; 128
    27ba:	44 0f       	add	r20, r20
    27bc:	55 1f       	adc	r21, r21
    27be:	59 f0       	breq	.+22     	; 0x27d6 <__fp_splitA+0x10>
    27c0:	5f 3f       	cpi	r21, 0xFF	; 255
    27c2:	71 f0       	breq	.+28     	; 0x27e0 <__fp_splitA+0x1a>
    27c4:	47 95       	ror	r20

000027c6 <__fp_splitA>:
    27c6:	88 0f       	add	r24, r24
    27c8:	97 fb       	bst	r25, 7
    27ca:	99 1f       	adc	r25, r25
    27cc:	61 f0       	breq	.+24     	; 0x27e6 <__fp_splitA+0x20>
    27ce:	9f 3f       	cpi	r25, 0xFF	; 255
    27d0:	79 f0       	breq	.+30     	; 0x27f0 <__fp_splitA+0x2a>
    27d2:	87 95       	ror	r24
    27d4:	08 95       	ret
    27d6:	12 16       	cp	r1, r18
    27d8:	13 06       	cpc	r1, r19
    27da:	14 06       	cpc	r1, r20
    27dc:	55 1f       	adc	r21, r21
    27de:	f2 cf       	rjmp	.-28     	; 0x27c4 <__fp_split3+0xe>
    27e0:	46 95       	lsr	r20
    27e2:	f1 df       	rcall	.-30     	; 0x27c6 <__fp_splitA>
    27e4:	08 c0       	rjmp	.+16     	; 0x27f6 <__fp_splitA+0x30>
    27e6:	16 16       	cp	r1, r22
    27e8:	17 06       	cpc	r1, r23
    27ea:	18 06       	cpc	r1, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	f1 cf       	rjmp	.-30     	; 0x27d2 <__fp_splitA+0xc>
    27f0:	86 95       	lsr	r24
    27f2:	71 05       	cpc	r23, r1
    27f4:	61 05       	cpc	r22, r1
    27f6:	08 94       	sec
    27f8:	08 95       	ret

000027fa <__fp_zero>:
    27fa:	e8 94       	clt

000027fc <__fp_szero>:
    27fc:	bb 27       	eor	r27, r27
    27fe:	66 27       	eor	r22, r22
    2800:	77 27       	eor	r23, r23
    2802:	cb 01       	movw	r24, r22
    2804:	97 f9       	bld	r25, 7
    2806:	08 95       	ret

00002808 <__mulsf3>:
    2808:	0e 94 17 14 	call	0x282e	; 0x282e <__mulsf3x>
    280c:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__fp_round>
    2810:	0e 94 bc 13 	call	0x2778	; 0x2778 <__fp_pscA>
    2814:	38 f0       	brcs	.+14     	; 0x2824 <__mulsf3+0x1c>
    2816:	0e 94 c3 13 	call	0x2786	; 0x2786 <__fp_pscB>
    281a:	20 f0       	brcs	.+8      	; 0x2824 <__mulsf3+0x1c>
    281c:	95 23       	and	r25, r21
    281e:	11 f0       	breq	.+4      	; 0x2824 <__mulsf3+0x1c>
    2820:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__fp_inf>
    2824:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__fp_nan>
    2828:	11 24       	eor	r1, r1
    282a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__fp_szero>

0000282e <__mulsf3x>:
    282e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__fp_split3>
    2832:	70 f3       	brcs	.-36     	; 0x2810 <__mulsf3+0x8>

00002834 <__mulsf3_pse>:
    2834:	95 9f       	mul	r25, r21
    2836:	c1 f3       	breq	.-16     	; 0x2828 <__mulsf3+0x20>
    2838:	95 0f       	add	r25, r21
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	55 1f       	adc	r21, r21
    283e:	62 9f       	mul	r22, r18
    2840:	f0 01       	movw	r30, r0
    2842:	72 9f       	mul	r23, r18
    2844:	bb 27       	eor	r27, r27
    2846:	f0 0d       	add	r31, r0
    2848:	b1 1d       	adc	r27, r1
    284a:	63 9f       	mul	r22, r19
    284c:	aa 27       	eor	r26, r26
    284e:	f0 0d       	add	r31, r0
    2850:	b1 1d       	adc	r27, r1
    2852:	aa 1f       	adc	r26, r26
    2854:	64 9f       	mul	r22, r20
    2856:	66 27       	eor	r22, r22
    2858:	b0 0d       	add	r27, r0
    285a:	a1 1d       	adc	r26, r1
    285c:	66 1f       	adc	r22, r22
    285e:	82 9f       	mul	r24, r18
    2860:	22 27       	eor	r18, r18
    2862:	b0 0d       	add	r27, r0
    2864:	a1 1d       	adc	r26, r1
    2866:	62 1f       	adc	r22, r18
    2868:	73 9f       	mul	r23, r19
    286a:	b0 0d       	add	r27, r0
    286c:	a1 1d       	adc	r26, r1
    286e:	62 1f       	adc	r22, r18
    2870:	83 9f       	mul	r24, r19
    2872:	a0 0d       	add	r26, r0
    2874:	61 1d       	adc	r22, r1
    2876:	22 1f       	adc	r18, r18
    2878:	74 9f       	mul	r23, r20
    287a:	33 27       	eor	r19, r19
    287c:	a0 0d       	add	r26, r0
    287e:	61 1d       	adc	r22, r1
    2880:	23 1f       	adc	r18, r19
    2882:	84 9f       	mul	r24, r20
    2884:	60 0d       	add	r22, r0
    2886:	21 1d       	adc	r18, r1
    2888:	82 2f       	mov	r24, r18
    288a:	76 2f       	mov	r23, r22
    288c:	6a 2f       	mov	r22, r26
    288e:	11 24       	eor	r1, r1
    2890:	9f 57       	subi	r25, 0x7F	; 127
    2892:	50 40       	sbci	r21, 0x00	; 0
    2894:	9a f0       	brmi	.+38     	; 0x28bc <__mulsf3_pse+0x88>
    2896:	f1 f0       	breq	.+60     	; 0x28d4 <__mulsf3_pse+0xa0>
    2898:	88 23       	and	r24, r24
    289a:	4a f0       	brmi	.+18     	; 0x28ae <__mulsf3_pse+0x7a>
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	bb 1f       	adc	r27, r27
    28a2:	66 1f       	adc	r22, r22
    28a4:	77 1f       	adc	r23, r23
    28a6:	88 1f       	adc	r24, r24
    28a8:	91 50       	subi	r25, 0x01	; 1
    28aa:	50 40       	sbci	r21, 0x00	; 0
    28ac:	a9 f7       	brne	.-22     	; 0x2898 <__mulsf3_pse+0x64>
    28ae:	9e 3f       	cpi	r25, 0xFE	; 254
    28b0:	51 05       	cpc	r21, r1
    28b2:	80 f0       	brcs	.+32     	; 0x28d4 <__mulsf3_pse+0xa0>
    28b4:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__fp_inf>
    28b8:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__fp_szero>
    28bc:	5f 3f       	cpi	r21, 0xFF	; 255
    28be:	e4 f3       	brlt	.-8      	; 0x28b8 <__mulsf3_pse+0x84>
    28c0:	98 3e       	cpi	r25, 0xE8	; 232
    28c2:	d4 f3       	brlt	.-12     	; 0x28b8 <__mulsf3_pse+0x84>
    28c4:	86 95       	lsr	r24
    28c6:	77 95       	ror	r23
    28c8:	67 95       	ror	r22
    28ca:	b7 95       	ror	r27
    28cc:	f7 95       	ror	r31
    28ce:	e7 95       	ror	r30
    28d0:	9f 5f       	subi	r25, 0xFF	; 255
    28d2:	c1 f7       	brne	.-16     	; 0x28c4 <__mulsf3_pse+0x90>
    28d4:	fe 2b       	or	r31, r30
    28d6:	88 0f       	add	r24, r24
    28d8:	91 1d       	adc	r25, r1
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	97 f9       	bld	r25, 7
    28e0:	08 95       	ret

000028e2 <do_rand>:
    28e2:	8f 92       	push	r8
    28e4:	9f 92       	push	r9
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	cf 92       	push	r12
    28ec:	df 92       	push	r13
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	ec 01       	movw	r28, r24
    28f8:	68 81       	ld	r22, Y
    28fa:	79 81       	ldd	r23, Y+1	; 0x01
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	61 15       	cp	r22, r1
    2902:	71 05       	cpc	r23, r1
    2904:	81 05       	cpc	r24, r1
    2906:	91 05       	cpc	r25, r1
    2908:	21 f4       	brne	.+8      	; 0x2912 <do_rand+0x30>
    290a:	64 e2       	ldi	r22, 0x24	; 36
    290c:	79 ed       	ldi	r23, 0xD9	; 217
    290e:	8b e5       	ldi	r24, 0x5B	; 91
    2910:	97 e0       	ldi	r25, 0x07	; 7
    2912:	2d e1       	ldi	r18, 0x1D	; 29
    2914:	33 ef       	ldi	r19, 0xF3	; 243
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__divmodsi4>
    291e:	49 01       	movw	r8, r18
    2920:	5a 01       	movw	r10, r20
    2922:	9b 01       	movw	r18, r22
    2924:	ac 01       	movw	r20, r24
    2926:	a7 ea       	ldi	r26, 0xA7	; 167
    2928:	b1 e4       	ldi	r27, 0x41	; 65
    292a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__muluhisi3>
    292e:	6b 01       	movw	r12, r22
    2930:	7c 01       	movw	r14, r24
    2932:	ac ee       	ldi	r26, 0xEC	; 236
    2934:	b4 ef       	ldi	r27, 0xF4	; 244
    2936:	a5 01       	movw	r20, r10
    2938:	94 01       	movw	r18, r8
    293a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulohisi3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8c 0d       	add	r24, r12
    2944:	9d 1d       	adc	r25, r13
    2946:	ae 1d       	adc	r26, r14
    2948:	bf 1d       	adc	r27, r15
    294a:	b7 ff       	sbrs	r27, 7
    294c:	03 c0       	rjmp	.+6      	; 0x2954 <do_rand+0x72>
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	a1 09       	sbc	r26, r1
    2952:	b0 48       	sbci	r27, 0x80	; 128
    2954:	88 83       	st	Y, r24
    2956:	99 83       	std	Y+1, r25	; 0x01
    2958:	aa 83       	std	Y+2, r26	; 0x02
    295a:	bb 83       	std	Y+3, r27	; 0x03
    295c:	9f 77       	andi	r25, 0x7F	; 127
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	ff 90       	pop	r15
    2964:	ef 90       	pop	r14
    2966:	df 90       	pop	r13
    2968:	cf 90       	pop	r12
    296a:	bf 90       	pop	r11
    296c:	af 90       	pop	r10
    296e:	9f 90       	pop	r9
    2970:	8f 90       	pop	r8
    2972:	08 95       	ret

00002974 <rand_r>:
    2974:	0e 94 71 14 	call	0x28e2	; 0x28e2 <do_rand>
    2978:	08 95       	ret

0000297a <rand>:
    297a:	87 e0       	ldi	r24, 0x07	; 7
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <do_rand>
    2982:	08 95       	ret

00002984 <srand>:
    2984:	a0 e0       	ldi	r26, 0x00	; 0
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	80 93 07 01 	sts	0x0107, r24
    298c:	90 93 08 01 	sts	0x0108, r25
    2990:	a0 93 09 01 	sts	0x0109, r26
    2994:	b0 93 0a 01 	sts	0x010A, r27
    2998:	08 95       	ret

0000299a <eeprom_read_byte>:
    299a:	f9 99       	sbic	0x1f, 1	; 31
    299c:	fe cf       	rjmp	.-4      	; 0x299a <eeprom_read_byte>
    299e:	92 bd       	out	0x22, r25	; 34
    29a0:	81 bd       	out	0x21, r24	; 33
    29a2:	f8 9a       	sbi	0x1f, 0	; 31
    29a4:	99 27       	eor	r25, r25
    29a6:	80 b5       	in	r24, 0x20	; 32
    29a8:	08 95       	ret

000029aa <eeprom_write_byte>:
    29aa:	26 2f       	mov	r18, r22

000029ac <eeprom_write_r18>:
    29ac:	f9 99       	sbic	0x1f, 1	; 31
    29ae:	fe cf       	rjmp	.-4      	; 0x29ac <eeprom_write_r18>
    29b0:	1f ba       	out	0x1f, r1	; 31
    29b2:	92 bd       	out	0x22, r25	; 34
    29b4:	81 bd       	out	0x21, r24	; 33
    29b6:	20 bd       	out	0x20, r18	; 32
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	fa 9a       	sbi	0x1f, 2	; 31
    29be:	f9 9a       	sbi	0x1f, 1	; 31
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	08 95       	ret

000029c6 <__divmodsi4>:
    29c6:	05 2e       	mov	r0, r21
    29c8:	97 fb       	bst	r25, 7
    29ca:	1e f4       	brtc	.+6      	; 0x29d2 <__divmodsi4+0xc>
    29cc:	00 94       	com	r0
    29ce:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__negsi2>
    29d2:	57 fd       	sbrc	r21, 7
    29d4:	07 d0       	rcall	.+14     	; 0x29e4 <__divmodsi4_neg2>
    29d6:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodsi4>
    29da:	07 fc       	sbrc	r0, 7
    29dc:	03 d0       	rcall	.+6      	; 0x29e4 <__divmodsi4_neg2>
    29de:	4e f4       	brtc	.+18     	; 0x29f2 <__divmodsi4_exit>
    29e0:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__negsi2>

000029e4 <__divmodsi4_neg2>:
    29e4:	50 95       	com	r21
    29e6:	40 95       	com	r20
    29e8:	30 95       	com	r19
    29ea:	21 95       	neg	r18
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	4f 4f       	sbci	r20, 0xFF	; 255
    29f0:	5f 4f       	sbci	r21, 0xFF	; 255

000029f2 <__divmodsi4_exit>:
    29f2:	08 95       	ret

000029f4 <__negsi2>:
    29f4:	90 95       	com	r25
    29f6:	80 95       	com	r24
    29f8:	70 95       	com	r23
    29fa:	61 95       	neg	r22
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2a00:	9f 4f       	sbci	r25, 0xFF	; 255
    2a02:	08 95       	ret

00002a04 <__muluhisi3>:
    2a04:	0e 94 3e 12 	call	0x247c	; 0x247c <__umulhisi3>
    2a08:	a5 9f       	mul	r26, r21
    2a0a:	90 0d       	add	r25, r0
    2a0c:	b4 9f       	mul	r27, r20
    2a0e:	90 0d       	add	r25, r0
    2a10:	a4 9f       	mul	r26, r20
    2a12:	80 0d       	add	r24, r0
    2a14:	91 1d       	adc	r25, r1
    2a16:	11 24       	eor	r1, r1
    2a18:	08 95       	ret

00002a1a <__mulshisi3>:
    2a1a:	b7 ff       	sbrs	r27, 7
    2a1c:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__muluhisi3>

00002a20 <__mulohisi3>:
    2a20:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__muluhisi3>
    2a24:	82 1b       	sub	r24, r18
    2a26:	93 0b       	sbc	r25, r19
    2a28:	08 95       	ret

00002a2a <__udivmodsi4>:
    2a2a:	a1 e2       	ldi	r26, 0x21	; 33
    2a2c:	1a 2e       	mov	r1, r26
    2a2e:	aa 1b       	sub	r26, r26
    2a30:	bb 1b       	sub	r27, r27
    2a32:	fd 01       	movw	r30, r26
    2a34:	0d c0       	rjmp	.+26     	; 0x2a50 <__udivmodsi4_ep>

00002a36 <__udivmodsi4_loop>:
    2a36:	aa 1f       	adc	r26, r26
    2a38:	bb 1f       	adc	r27, r27
    2a3a:	ee 1f       	adc	r30, r30
    2a3c:	ff 1f       	adc	r31, r31
    2a3e:	a2 17       	cp	r26, r18
    2a40:	b3 07       	cpc	r27, r19
    2a42:	e4 07       	cpc	r30, r20
    2a44:	f5 07       	cpc	r31, r21
    2a46:	20 f0       	brcs	.+8      	; 0x2a50 <__udivmodsi4_ep>
    2a48:	a2 1b       	sub	r26, r18
    2a4a:	b3 0b       	sbc	r27, r19
    2a4c:	e4 0b       	sbc	r30, r20
    2a4e:	f5 0b       	sbc	r31, r21

00002a50 <__udivmodsi4_ep>:
    2a50:	66 1f       	adc	r22, r22
    2a52:	77 1f       	adc	r23, r23
    2a54:	88 1f       	adc	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	1a 94       	dec	r1
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <__udivmodsi4_loop>
    2a5c:	60 95       	com	r22
    2a5e:	70 95       	com	r23
    2a60:	80 95       	com	r24
    2a62:	90 95       	com	r25
    2a64:	9b 01       	movw	r18, r22
    2a66:	ac 01       	movw	r20, r24
    2a68:	bd 01       	movw	r22, r26
    2a6a:	cf 01       	movw	r24, r30
    2a6c:	08 95       	ret

00002a6e <_exit>:
    2a6e:	f8 94       	cli

00002a70 <__stop_program>:
    2a70:	ff cf       	rjmp	.-2      	; 0x2a70 <__stop_program>
