
build/herds.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	15 03       	mulsu	r17, r21
      6a:	91 03       	fmuls	r17, r17
      6c:	e9 02       	muls	r30, r25
      6e:	e0 02       	muls	r30, r16
      70:	e6 02       	muls	r30, r22
      72:	73 03       	mulsu	r23, r19
      74:	68 03       	fmul	r22, r16
      76:	f3 09       	sbc	r31, r3
      78:	d0 08       	sbc	r13, r0
      7a:	d0 08       	sbc	r13, r0
      7c:	f0 09       	sbc	r31, r0
      7e:	fc 09       	sbc	r31, r12
      80:	ec 09       	sbc	r30, r12
      82:	03 0a       	sbc	r0, r19
      84:	ff 09       	sbc	r31, r15
      86:	07 0a       	sbc	r0, r23
      88:	bf 09       	sbc	r27, r15
      8a:	91 09       	sbc	r25, r1

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee eb       	ldi	r30, 0xBE	; 190
      b8:	fc e1       	ldi	r31, 0x1C	; 28
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 30       	cpi	r26, 0x0E	; 14
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e0       	ldi	r26, 0x0E	; 14
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 37       	cpi	r26, 0x7A	; 122
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 39 0b 	call	0x1672	; 0x1672 <main>
      da:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
                set_motion(FORWARD);
    }*/
}

void message_rx(message_t *m, distance_measurement_t *d)
{
      e2:	cb 01       	movw	r24, r22
    new_message = 1;
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	30 93 15 01 	sts	0x0115, r19
      ec:	20 93 14 01 	sts	0x0114, r18
    distance = estimate_distance(d);
      f0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <estimate_distance>
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 01 01 	sts	0x0101, r25
      fa:	80 93 00 01 	sts	0x0100, r24
      fe:	08 95       	ret

00000100 <setup>:
        }
    }
}

void setup()
{
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
                set_color(RGB(0, 1, 0));
     104:	84 e0       	ldi	r24, 0x04	; 4
     106:	0e 94 4a 08 	call	0x1094	; 0x1094 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     10a:	80 91 16 01 	lds	r24, 0x0116
     10e:	90 91 17 01 	lds	r25, 0x0117
     112:	01 97       	sbiw	r24, 0x01	; 1
     114:	91 f0       	breq	.+36     	; 0x13a <setup+0x3a>
    {
        current_motion = new_motion;
     116:	c1 e0       	ldi	r28, 0x01	; 1
     118:	d0 e0       	ldi	r29, 0x00	; 0
     11a:	d0 93 17 01 	sts	0x0117, r29
     11e:	c0 93 16 01 	sts	0x0116, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     122:	0e 94 2e 04 	call	0x85c	; 0x85c <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     126:	60 91 78 01 	lds	r22, 0x0178
     12a:	80 91 77 01 	lds	r24, 0x0177
     12e:	0e 94 29 04 	call	0x852	; 0x852 <set_motors>
            both_spined = 1;
     132:	d0 93 13 01 	sts	0x0113, r29
     136:	c0 93 12 01 	sts	0x0112, r28

void setup()
{
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <loop>:

void loop()
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
    // Update the motion whenever a message is received.
    if (kilo_ticks > last_motion_update + 16){
     144:	40 91 3f 01 	lds	r20, 0x013F
     148:	50 91 40 01 	lds	r21, 0x0140
     14c:	60 91 41 01 	lds	r22, 0x0141
     150:	70 91 42 01 	lds	r23, 0x0142
     154:	80 91 0e 01 	lds	r24, 0x010E
     158:	90 91 0f 01 	lds	r25, 0x010F
     15c:	a0 91 10 01 	lds	r26, 0x0110
     160:	b0 91 11 01 	lds	r27, 0x0111
     164:	40 96       	adiw	r24, 0x10	; 16
     166:	a1 1d       	adc	r26, r1
     168:	b1 1d       	adc	r27, r1
     16a:	84 17       	cp	r24, r20
     16c:	95 07       	cpc	r25, r21
     16e:	a6 07       	cpc	r26, r22
     170:	b7 07       	cpc	r27, r23
     172:	08 f0       	brcs	.+2      	; 0x176 <loop+0x36>
     174:	56 c0       	rjmp	.+172    	; 0x222 <loop+0xe2>
        last_motion_update = kilo_ticks;
     176:	80 91 3f 01 	lds	r24, 0x013F
     17a:	90 91 40 01 	lds	r25, 0x0140
     17e:	a0 91 41 01 	lds	r26, 0x0141
     182:	b0 91 42 01 	lds	r27, 0x0142
     186:	80 93 0e 01 	sts	0x010E, r24
     18a:	90 93 0f 01 	sts	0x010F, r25
     18e:	a0 93 10 01 	sts	0x0110, r26
     192:	b0 93 11 01 	sts	0x0111, r27

	    if (new_message == 1 || distance < DESIRED_DISTANCE)
     196:	c0 91 14 01 	lds	r28, 0x0114
     19a:	d0 91 15 01 	lds	r29, 0x0115
     19e:	80 91 00 01 	lds	r24, 0x0100
     1a2:	90 91 01 01 	lds	r25, 0x0101
     1a6:	c1 30       	cpi	r28, 0x01	; 1
     1a8:	d1 05       	cpc	r29, r1
     1aa:	f1 f1       	breq	.+124    	; 0x228 <loop+0xe8>
     1ac:	84 36       	cpi	r24, 0x64	; 100
     1ae:	91 05       	cpc	r25, r1
     1b0:	0c f0       	brlt	.+2      	; 0x1b4 <loop+0x74>
     1b2:	5d c0       	rjmp	.+186    	; 0x26e <loop+0x12e>
	    {
		new_message = 0;
     1b4:	10 92 15 01 	sts	0x0115, r1
     1b8:	10 92 14 01 	sts	0x0114, r1
		
		// If too close, move forward to get back into orbit.
		if (distance < DESIRED_DISTANCE)
		{
		        set_color(RGB(1, 0, 1));
     1bc:	81 e1       	ldi	r24, 0x11	; 17
     1be:	0e 94 4a 08 	call	0x1094	; 0x1094 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1c2:	80 91 16 01 	lds	r24, 0x0116
     1c6:	90 91 17 01 	lds	r25, 0x0117
     1ca:	89 2b       	or	r24, r25
     1cc:	51 f1       	breq	.+84     	; 0x222 <loop+0xe2>
    {
        current_motion = new_motion;
     1ce:	10 92 17 01 	sts	0x0117, r1
     1d2:	10 92 16 01 	sts	0x0116, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
    }
    /*else {
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
    }*/
}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     1de:	0c 94 29 04 	jmp	0x852	; 0x852 <set_motors>
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
            }
            else if (random_direction == 2)
            {
                set_color(RGB(1, 0, 0));
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 4a 08 	call	0x1094	; 0x1094 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     1e8:	80 91 16 01 	lds	r24, 0x0116
     1ec:	90 91 17 01 	lds	r25, 0x0117
     1f0:	02 97       	sbiw	r24, 0x02	; 2
     1f2:	b9 f0       	breq	.+46     	; 0x222 <loop+0xe2>
    {
        current_motion = new_motion;
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	90 93 17 01 	sts	0x0117, r25
     1fc:	80 93 16 01 	sts	0x0116, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     200:	80 91 12 01 	lds	r24, 0x0112
     204:	90 91 13 01 	lds	r25, 0x0113
     208:	89 2b       	or	r24, r25
     20a:	11 f4       	brne	.+4      	; 0x210 <loop+0xd0>
                spinup_motors();
     20c:	0e 94 2e 04 	call	0x85c	; 0x85c <spinup_motors>
            set_motors(kilo_turn_left, 0);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 91 79 01 	lds	r24, 0x0179
     216:	0e 94 29 04 	call	0x852	; 0x852 <set_motors>
            both_spined = 0;
     21a:	10 92 13 01 	sts	0x0113, r1
     21e:	10 92 12 01 	sts	0x0112, r1
    }
    /*else {
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
    }*/
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret
    if (kilo_ticks > last_motion_update + 16){
        last_motion_update = kilo_ticks;

	    if (new_message == 1 || distance < DESIRED_DISTANCE)
	    {
		new_message = 0;
     228:	10 92 15 01 	sts	0x0115, r1
     22c:	10 92 14 01 	sts	0x0114, r1
		
		// If too close, move forward to get back into orbit.
		if (distance < DESIRED_DISTANCE)
     230:	84 36       	cpi	r24, 0x64	; 100
     232:	91 05       	cpc	r25, r1
     234:	1c f2       	brlt	.-122    	; 0x1bc <loop+0x7c>
		}
		// If not too close, turn left or right depending on distance,
		// to maintain orbit.
		else
		{
		        set_color(RGB(0, 1, 0));
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	0e 94 4a 08 	call	0x1094	; 0x1094 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     23c:	80 91 16 01 	lds	r24, 0x0116
     240:	90 91 17 01 	lds	r25, 0x0117
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	69 f3       	breq	.-38     	; 0x222 <loop+0xe2>
    {
        current_motion = new_motion;
     248:	d0 93 17 01 	sts	0x0117, r29
     24c:	c0 93 16 01 	sts	0x0116, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     250:	0e 94 2e 04 	call	0x85c	; 0x85c <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     254:	60 91 78 01 	lds	r22, 0x0178
     258:	80 91 77 01 	lds	r24, 0x0177
     25c:	0e 94 29 04 	call	0x852	; 0x852 <set_motors>
            both_spined = 1;
     260:	d0 93 13 01 	sts	0x0113, r29
     264:	c0 93 12 01 	sts	0x0112, r28
    }
    /*else {
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
    }*/
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret
		        set_motion(RIGHT);
		    }
		}*/
	    }
           else{
            int random_number = rand_hard();
     26e:	0e 94 88 04 	call	0x910	; 0x910 <rand_hard>
            int random_direction = (random_number % 4);
     272:	83 70       	andi	r24, 0x03	; 3

            if ((random_direction == 0) || (random_direction == 1))
     274:	82 30       	cpi	r24, 0x02	; 2
     276:	10 f1       	brcs	.+68     	; 0x2bc <loop+0x17c>
            {
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
            }
            else if (random_direction == 2)
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	09 f4       	brne	.+2      	; 0x27e <loop+0x13e>
     27c:	b2 cf       	rjmp	.-156    	; 0x1e2 <loop+0xa2>
                set_color(RGB(1, 0, 0));
                set_motion(LEFT);
            }
            else if (random_direction == 3)
            {
                set_color(RGB(0, 0, 1));
     27e:	80 e1       	ldi	r24, 0x10	; 16
     280:	0e 94 4a 08 	call	0x1094	; 0x1094 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     284:	80 91 16 01 	lds	r24, 0x0116
     288:	90 91 17 01 	lds	r25, 0x0117
     28c:	03 97       	sbiw	r24, 0x03	; 3
     28e:	49 f2       	breq	.-110    	; 0x222 <loop+0xe2>
    {
        current_motion = new_motion;
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 17 01 	sts	0x0117, r25
     298:	80 93 16 01 	sts	0x0116, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     29c:	80 91 12 01 	lds	r24, 0x0112
     2a0:	90 91 13 01 	lds	r25, 0x0113
     2a4:	89 2b       	or	r24, r25
     2a6:	b9 f0       	breq	.+46     	; 0x2d6 <loop+0x196>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     2a8:	60 91 65 01 	lds	r22, 0x0165
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	0e 94 29 04 	call	0x852	; 0x852 <set_motors>
            both_spined = 0;
     2b2:	10 92 13 01 	sts	0x0113, r1
     2b6:	10 92 12 01 	sts	0x0112, r1
     2ba:	b3 cf       	rjmp	.-154    	; 0x222 <loop+0xe2>
            int random_number = rand_hard();
            int random_direction = (random_number % 4);

            if ((random_direction == 0) || (random_direction == 1))
            {
                set_color(RGB(0, 1, 0));
     2bc:	84 e0       	ldi	r24, 0x04	; 4
     2be:	0e 94 4a 08 	call	0x1094	; 0x1094 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2c2:	80 91 16 01 	lds	r24, 0x0116
     2c6:	90 91 17 01 	lds	r25, 0x0117
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <loop+0x190>
     2ce:	a9 cf       	rjmp	.-174    	; 0x222 <loop+0xe2>
    {
        current_motion = new_motion;
     2d0:	c1 e0       	ldi	r28, 0x01	; 1
     2d2:	d0 e0       	ldi	r29, 0x00	; 0
     2d4:	b9 cf       	rjmp	.-142    	; 0x248 <loop+0x108>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     2d6:	0e 94 2e 04 	call	0x85c	; 0x85c <spinup_motors>
     2da:	e6 cf       	rjmp	.-52     	; 0x2a8 <loop+0x168>

000002dc <set_motion>:
int both_spined = 0;
uint32_t last_motion_update = 0;

// Function to handle motion.
void set_motion(int new_motion)
{
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2e0:	20 91 16 01 	lds	r18, 0x0116
     2e4:	30 91 17 01 	lds	r19, 0x0117
     2e8:	28 17       	cp	r18, r24
     2ea:	39 07       	cpc	r19, r25
     2ec:	79 f0       	breq	.+30     	; 0x30c <set_motion+0x30>
    {
        current_motion = new_motion;
     2ee:	90 93 17 01 	sts	0x0117, r25
     2f2:	80 93 16 01 	sts	0x0116, r24
        
        if (current_motion == STOP)
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	91 f1       	breq	.+100    	; 0x35e <set_motion+0x82>
     2fa:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	91 05       	cpc	r25, r1
     300:	a1 f1       	breq	.+104    	; 0x36a <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	91 05       	cpc	r25, r1
     306:	29 f0       	breq	.+10     	; 0x312 <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     308:	03 97       	sbiw	r24, 0x03	; 3
     30a:	b9 f0       	breq	.+46     	; 0x33a <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     312:	80 91 12 01 	lds	r24, 0x0112
     316:	90 91 13 01 	lds	r25, 0x0113
     31a:	89 2b       	or	r24, r25
     31c:	11 f4       	brne	.+4      	; 0x322 <set_motion+0x46>
                spinup_motors();
     31e:	0e 94 2e 04 	call	0x85c	; 0x85c <spinup_motors>
            set_motors(kilo_turn_left, 0);
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	80 91 79 01 	lds	r24, 0x0179
     328:	0e 94 29 04 	call	0x852	; 0x852 <set_motors>
            both_spined = 0;
     32c:	10 92 13 01 	sts	0x0113, r1
     330:	10 92 12 01 	sts	0x0112, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     33a:	80 91 12 01 	lds	r24, 0x0112
     33e:	90 91 13 01 	lds	r25, 0x0113
     342:	89 2b       	or	r24, r25
     344:	f9 f0       	breq	.+62     	; 0x384 <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     346:	60 91 65 01 	lds	r22, 0x0165
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 29 04 	call	0x852	; 0x852 <set_motors>
            both_spined = 0;
     350:	10 92 13 01 	sts	0x0113, r1
     354:	10 92 12 01 	sts	0x0112, r1
        }
    }
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     366:	0c 94 29 04 	jmp	0x852	; 0x852 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     36a:	0e 94 2e 04 	call	0x85c	; 0x85c <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     36e:	60 91 78 01 	lds	r22, 0x0178
     372:	80 91 77 01 	lds	r24, 0x0177
     376:	0e 94 29 04 	call	0x852	; 0x852 <set_motors>
            both_spined = 1;
     37a:	d0 93 13 01 	sts	0x0113, r29
     37e:	c0 93 12 01 	sts	0x0112, r28
     382:	c4 cf       	rjmp	.-120    	; 0x30c <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     384:	0e 94 2e 04 	call	0x85c	; 0x85c <spinup_motors>
     388:	de cf       	rjmp	.-68     	; 0x346 <set_motion+0x6a>

0000038a <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     38a:	08 95       	ret

0000038c <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	08 95       	ret

00000392 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     392:	08 95       	ret

00000394 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
    cli();
     3a2:	f8 94       	cli

    ports_off();
     3a4:	14 b8       	out	0x04, r1	; 4
     3a6:	17 b8       	out	0x07, r1	; 7
     3a8:	1a b8       	out	0x0a, r1	; 10
     3aa:	15 b8       	out	0x05, r1	; 5
     3ac:	18 b8       	out	0x08, r1	; 8
     3ae:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     3b0:	52 9a       	sbi	0x0a, 2	; 10
     3b2:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     3b4:	14 bc       	out	0x24, r1	; 36
     3b6:	85 e0       	ldi	r24, 0x05	; 5
     3b8:	85 bd       	out	0x25, r24	; 37
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	87 bd       	out	0x27, r24	; 39
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     3c4:	10 92 80 00 	sts	0x0080, r1
     3c8:	10 92 81 00 	sts	0x0081, r1
     3cc:	2f e8       	ldi	r18, 0x8F	; 143
     3ce:	3b e0       	ldi	r19, 0x0B	; 11
     3d0:	30 93 89 00 	sts	0x0089, r19
     3d4:	20 93 88 00 	sts	0x0088, r18
     3d8:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     3dc:	53 98       	cbi	0x0a, 3	; 10
     3de:	23 98       	cbi	0x04, 3	; 4
     3e0:	91 ea       	ldi	r25, 0xA1	; 161
     3e2:	90 93 b0 00 	sts	0x00B0, r25
     3e6:	80 93 b1 00 	sts	0x00B1, r24
     3ea:	10 92 b4 00 	sts	0x00B4, r1
     3ee:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     3f2:	8b e0       	ldi	r24, 0x0B	; 11
     3f4:	80 bf       	out	0x30, r24	; 48
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     3fc:	86 e0       	ldi	r24, 0x06	; 6
     3fe:	80 93 7c 00 	sts	0x007C, r24
     402:	83 e8       	ldi	r24, 0x83	; 131
     404:	80 93 7a 00 	sts	0x007A, r24
     408:	80 91 7a 00 	lds	r24, 0x007A
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	80 93 7a 00 	sts	0x007A, r24
     412:	80 91 7a 00 	lds	r24, 0x007A
     416:	86 fd       	sbrc	r24, 6
     418:	fc cf       	rjmp	.-8      	; 0x412 <kilo_init+0x7e>
    adc_trigger_high_gain();
     41a:	10 92 7c 00 	sts	0x007C, r1
     41e:	83 ea       	ldi	r24, 0xA3	; 163
     420:	80 93 7a 00 	sts	0x007A, r24
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
    if (osccal != 0xFF)
     432:	8f 3f       	cpi	r24, 0xFF	; 255
     434:	11 f0       	breq	.+4      	; 0x43a <kilo_init+0xa6>
        OSCCAL = osccal;
     436:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     43a:	10 92 43 01 	sts	0x0143, r1
    rx_leadingbit = 1;
     43e:	c1 e0       	ldi	r28, 0x01	; 1
     440:	c0 93 1c 01 	sts	0x011C, r28
    rx_leadingbyte = 1;
     444:	c0 93 60 01 	sts	0x0160, r28
    rx_byteindex = 0;
     448:	10 92 3a 01 	sts	0x013A, r1
    rx_bytevalue = 0;
     44c:	10 92 74 01 	sts	0x0174, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     450:	80 e9       	ldi	r24, 0x90	; 144
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     458:	80 93 39 01 	sts	0x0139, r24
    if (tx_mask & ~TX_MASK_MAX)
     45c:	80 91 39 01 	lds	r24, 0x0139
     460:	88 73       	andi	r24, 0x38	; 56
     462:	11 f0       	breq	.+4      	; 0x468 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     464:	c0 93 39 01 	sts	0x0139, r28
    tx_clock = 0;
     468:	10 92 64 01 	sts	0x0164, r1
     46c:	10 92 63 01 	sts	0x0163, r1
    tx_increment = 255;
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	90 93 62 01 	sts	0x0162, r25
     478:	80 93 61 01 	sts	0x0161, r24
    kilo_ticks = 0;
     47c:	10 92 3f 01 	sts	0x013F, r1
     480:	10 92 40 01 	sts	0x0140, r1
     484:	10 92 41 01 	sts	0x0141, r1
     488:	10 92 42 01 	sts	0x0142, r1
    kilo_state = IDLE;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	80 93 1b 01 	sts	0x011B, r24
    kilo_tx_period = 3906;
     492:	82 e4       	ldi	r24, 0x42	; 66
     494:	9f e0       	ldi	r25, 0x0F	; 15
     496:	90 93 73 01 	sts	0x0173, r25
     49a:	80 93 72 01 	sts	0x0172, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     49e:	80 eb       	ldi	r24, 0xB0	; 176
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     4a6:	c8 2f       	mov	r28, r24
     4a8:	81 eb       	ldi	r24, 0xB1	; 177
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     4b0:	2c 2f       	mov	r18, r28
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	38 2b       	or	r19, r24
     4b6:	30 93 76 01 	sts	0x0176, r19
     4ba:	20 93 75 01 	sts	0x0175, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     4c6:	80 93 79 01 	sts	0x0179, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     4ca:	89 e0       	ldi	r24, 0x09	; 9
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     4d2:	80 93 65 01 	sts	0x0165, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     4de:	80 93 77 01 	sts	0x0177, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     4e2:	84 e1       	ldi	r24, 0x14	; 20
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     4ea:	80 93 78 01 	sts	0x0178, r24
     4ee:	54 e4       	ldi	r21, 0x44	; 68
     4f0:	e5 2e       	mov	r14, r21
     4f2:	51 e0       	ldi	r21, 0x01	; 1
     4f4:	f5 2e       	mov	r15, r21
     4f6:	0d e1       	ldi	r16, 0x1D	; 29
     4f8:	11 e0       	ldi	r17, 0x01	; 1
     4fa:	c0 e2       	ldi	r28, 0x20	; 32
     4fc:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     504:	d8 2e       	mov	r13, r24
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     50e:	2d 2d       	mov	r18, r13
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	32 2f       	mov	r19, r18
     514:	22 27       	eor	r18, r18
     516:	28 2b       	or	r18, r24
     518:	f7 01       	movw	r30, r14
     51a:	21 93       	st	Z+, r18
     51c:	31 93       	st	Z+, r19
     51e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     520:	ce 01       	movw	r24, r28
     522:	c0 96       	adiw	r24, 0x30	; 48
     524:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     528:	d8 2e       	mov	r13, r24
     52a:	ce 01       	movw	r24, r28
     52c:	c1 96       	adiw	r24, 0x31	; 49
     52e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <eeprom_read_byte>
     532:	2d 2d       	mov	r18, r13
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	32 2f       	mov	r19, r18
     538:	22 27       	eor	r18, r18
     53a:	28 2b       	or	r18, r24
     53c:	f8 01       	movw	r30, r16
     53e:	21 93       	st	Z+, r18
     540:	31 93       	st	Z+, r19
     542:	8f 01       	movw	r16, r30
     544:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     546:	cc 33       	cpi	r28, 0x3C	; 60
     548:	d1 05       	cpc	r29, r1
     54a:	c9 f6       	brne	.-78     	; 0x4fe <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     54c:	78 94       	sei
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	08 95       	ret

0000055e <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	8f 93       	push	r24
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	a8 95       	wdr
     570:	80 91 60 00 	lds	r24, 0x0060
     574:	88 61       	ori	r24, 0x18	; 24
     576:	80 93 60 00 	sts	0x0060, r24
     57a:	10 92 60 00 	sts	0x0060, r1
     57e:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     580:	8f 91       	pop	r24
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     58c:	3c 01       	movw	r6, r24
     58e:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     590:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     592:	99 24       	eor	r9, r9
     594:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     59a:	96 e0       	ldi	r25, 0x06	; 6
     59c:	a9 2e       	mov	r10, r25
     59e:	23 e8       	ldi	r18, 0x83	; 131
     5a0:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     5a2:	38 e1       	ldi	r19, 0x18	; 24
     5a4:	d3 2e       	mov	r13, r19
     5a6:	49 e2       	ldi	r20, 0x29	; 41
     5a8:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     5aa:	90 91 1b 01 	lds	r25, 0x011B
     5ae:	e9 2f       	mov	r30, r25
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	e7 30       	cpi	r30, 0x07	; 7
     5b4:	f1 05       	cpc	r31, r1
     5b6:	c8 f7       	brcc	.-14     	; 0x5aa <kilo_start+0x1e>
     5b8:	ec 5c       	subi	r30, 0xCC	; 204
     5ba:	ff 4f       	sbci	r31, 0xFF	; 255
     5bc:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     5c0:	11 23       	and	r17, r17
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <kilo_start+0x3a>
     5c4:	fc c0       	rjmp	.+504    	; 0x7be <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5c6:	c0 92 1b 01 	sts	0x011B, r12
     5ca:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     5cc:	fe 01       	movw	r30, r28
     5ce:	09 95       	icall
                break;
     5d0:	ec cf       	rjmp	.-40     	; 0x5aa <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     5d2:	80 91 43 01 	lds	r24, 0x0143
     5d6:	81 11       	cpse	r24, r1
     5d8:	eb c0       	rjmp	.+470    	; 0x7b0 <kilo_start+0x224>
        cli();                                    // disable interrupts
     5da:	f8 94       	cli
        adc_setup_conversion(6);
     5dc:	a0 92 7c 00 	sts	0x007C, r10
     5e0:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     5e4:	80 91 7a 00 	lds	r24, 0x007A
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     5ee:	90 91 7a 00 	lds	r25, 0x007A
     5f2:	96 fd       	sbrc	r25, 6
     5f4:	fc cf       	rjmp	.-8      	; 0x5ee <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     5f6:	80 91 78 00 	lds	r24, 0x0078
     5fa:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5fe:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     600:	8b 3a       	cpi	r24, 0xAB	; 171
     602:	e2 e0       	ldi	r30, 0x02	; 2
     604:	9e 07       	cpc	r25, r30
     606:	0c f0       	brlt	.+2      	; 0x60a <kilo_start+0x7e>
     608:	ed c0       	rjmp	.+474    	; 0x7e4 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     60a:	89 38       	cpi	r24, 0x89	; 137
     60c:	f2 e0       	ldi	r31, 0x02	; 2
     60e:	9f 07       	cpc	r25, r31
     610:	0c f0       	brlt	.+2      	; 0x614 <kilo_start+0x88>
     612:	ef c0       	rjmp	.+478    	; 0x7f2 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     614:	87 36       	cpi	r24, 0x67	; 103
     616:	92 40       	sbci	r25, 0x02	; 2
     618:	0c f4       	brge	.+2      	; 0x61c <kilo_start+0x90>
     61a:	ca c0       	rjmp	.+404    	; 0x7b0 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     61c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     61e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     620:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     622:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     624:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     626:	3c 98       	cbi	0x07, 4	; 7
     628:	c0 cf       	rjmp	.-128    	; 0x5aa <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     62a:	f8 94       	cli
                acomp_off();
     62c:	80 b7       	in	r24, 0x30	; 48
     62e:	87 7f       	andi	r24, 0xF7	; 247
     630:	80 bf       	out	0x30, r24	; 48
                adc_off();
     632:	80 91 7a 00 	lds	r24, 0x007A
     636:	8f 77       	andi	r24, 0x7F	; 127
     638:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     63c:	14 b8       	out	0x04, r1	; 4
     63e:	17 b8       	out	0x07, r1	; 7
     640:	1a b8       	out	0x0a, r1	; 10
     642:	15 b8       	out	0x05, r1	; 5
     644:	18 b8       	out	0x08, r1	; 8
     646:	1b b8       	out	0x0b, r1	; 11
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	a8 95       	wdr
     64e:	d0 92 60 00 	sts	0x0060, r13
     652:	0f be       	out	0x3f, r0	; 63
     654:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     658:	80 91 60 00 	lds	r24, 0x0060
     65c:	80 64       	ori	r24, 0x40	; 64
     65e:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     662:	93 b7       	in	r25, 0x33	; 51
     664:	91 7f       	andi	r25, 0xF1	; 241
     666:	94 60       	ori	r25, 0x04	; 4
     668:	93 bf       	out	0x33, r25	; 51
                cli();
     66a:	f8 94       	cli
                sleep_enable();
     66c:	83 b7       	in	r24, 0x33	; 51
     66e:	81 60       	ori	r24, 0x01	; 1
     670:	83 bf       	out	0x33, r24	; 51
                sei();
     672:	78 94       	sei
                sleep_cpu();
     674:	88 95       	sleep
                sleep_disable();
     676:	83 b7       	in	r24, 0x33	; 51
     678:	8e 7f       	andi	r24, 0xFE	; 254
     67a:	83 bf       	out	0x33, r24	; 51
                sei();
     67c:	78 94       	sei
                rx_busy = 0;
     67e:	10 92 43 01 	sts	0x0143, r1
                ports_on();
     682:	52 9a       	sbi	0x0a, 2	; 10
     684:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     686:	80 91 7a 00 	lds	r24, 0x007A
     68a:	80 68       	ori	r24, 0x80	; 128
     68c:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     690:	87 e5       	ldi	r24, 0x57	; 87
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <kilo_start+0x108>
     698:	00 c0       	rjmp	.+0      	; 0x69a <kilo_start+0x10e>
     69a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     69c:	80 b7       	in	r24, 0x30	; 48
     69e:	88 61       	ori	r24, 0x18	; 24
     6a0:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6a2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6a4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6a6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6a8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     6aa:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     6ac:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ae:	ef e1       	ldi	r30, 0x1F	; 31
     6b0:	fe e4       	ldi	r31, 0x4E	; 78
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <kilo_start+0x126>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <kilo_start+0x12c>
     6b8:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     6ba:	80 91 43 01 	lds	r24, 0x0143
     6be:	81 11       	cpse	r24, r1
     6c0:	81 c0       	rjmp	.+258    	; 0x7c4 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6c2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6c4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6c6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6c8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6ca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6cc:	3c 98       	cbi	0x07, 4	; 7
     6ce:	6d cf       	rjmp	.-294    	; 0x5aa <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     6d0:	80 91 19 01 	lds	r24, 0x0119
     6d4:	81 11       	cpse	r24, r1
     6d6:	41 c0       	rjmp	.+130    	; 0x75a <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6d8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     6dc:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     6e0:	10 92 1a 01 	sts	0x011A, r1
     6e4:	62 cf       	rjmp	.-316    	; 0x5aa <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     6e6:	48 99       	sbic	0x09, 0	; 9
     6e8:	ec cf       	rjmp	.-40     	; 0x6c2 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6ea:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6ec:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6ee:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6f0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6f2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6f4:	3c 98       	cbi	0x07, 4	; 7
     6f6:	8f ec       	ldi	r24, 0xCF	; 207
     6f8:	97 e0       	ldi	r25, 0x07	; 7
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <kilo_start+0x16e>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <kilo_start+0x174>
     700:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     702:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     704:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     706:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     708:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     70a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     70c:	3c 98       	cbi	0x07, 4	; 7
     70e:	9f ef       	ldi	r25, 0xFF	; 255
     710:	e1 ee       	ldi	r30, 0xE1	; 225
     712:	f4 e0       	ldi	r31, 0x04	; 4
     714:	91 50       	subi	r25, 0x01	; 1
     716:	e0 40       	sbci	r30, 0x00	; 0
     718:	f0 40       	sbci	r31, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <kilo_start+0x188>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <kilo_start+0x192>
     71e:	00 00       	nop
     720:	44 cf       	rjmp	.-376    	; 0x5aa <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     722:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     724:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     726:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     728:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     72a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     72c:	3c 98       	cbi	0x07, 4	; 7
     72e:	ef ec       	ldi	r30, 0xCF	; 207
     730:	f7 e0       	ldi	r31, 0x07	; 7
     732:	31 97       	sbiw	r30, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <kilo_start+0x1a6>
     736:	00 c0       	rjmp	.+0      	; 0x738 <kilo_start+0x1ac>
     738:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     73a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     73c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     73e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     740:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     742:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     744:	3c 98       	cbi	0x07, 4	; 7
     746:	ff ef       	ldi	r31, 0xFF	; 255
     748:	21 ee       	ldi	r18, 0xE1	; 225
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	f1 50       	subi	r31, 0x01	; 1
     74e:	20 40       	sbci	r18, 0x00	; 0
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	e1 f7       	brne	.-8      	; 0x74c <kilo_start+0x1c0>
     754:	00 c0       	rjmp	.+0      	; 0x756 <kilo_start+0x1ca>
     756:	00 00       	nop
     758:	28 cf       	rjmp	.-432    	; 0x5aa <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     75a:	90 91 19 01 	lds	r25, 0x0119
     75e:	80 91 1a 01 	lds	r24, 0x011A
     762:	98 17       	cp	r25, r24
     764:	09 f4       	brne	.+2      	; 0x768 <kilo_start+0x1dc>
     766:	21 cf       	rjmp	.-446    	; 0x5aa <kilo_start+0x1e>
                        prev_motion = cur_motion;
     768:	80 91 19 01 	lds	r24, 0x0119
     76c:	80 93 1a 01 	sts	0x011A, r24
                        if (cur_motion == MOVE_LEFT) {
     770:	80 91 19 01 	lds	r24, 0x0119
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	09 f4       	brne	.+2      	; 0x77a <kilo_start+0x1ee>
     778:	50 c0       	rjmp	.+160    	; 0x81a <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     77a:	80 91 19 01 	lds	r24, 0x0119
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     77e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     782:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	d9 f1       	breq	.+118    	; 0x800 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     78a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     78e:	90 92 b4 00 	sts	0x00B4, r9
     792:	8f e2       	ldi	r24, 0x2F	; 47
     794:	95 e7       	ldi	r25, 0x75	; 117
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <kilo_start+0x20a>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <kilo_start+0x210>
     79c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     79e:	80 91 78 01 	lds	r24, 0x0178
     7a2:	90 91 77 01 	lds	r25, 0x0177
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7a6:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     7aa:	80 93 b4 00 	sts	0x00B4, r24
     7ae:	fd ce       	rjmp	.-518    	; 0x5aa <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7b0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7b2:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7b4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7b6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7b8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7ba:	3c 98       	cbi	0x07, 4	; 7
     7bc:	f6 ce       	rjmp	.-532    	; 0x5aa <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     7be:	f3 01       	movw	r30, r6
     7c0:	09 95       	icall
     7c2:	01 cf       	rjmp	.-510    	; 0x5c6 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7c4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7c6:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7c8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7ca:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7cc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7ce:	3c 98       	cbi	0x07, 4	; 7
     7d0:	ff ef       	ldi	r31, 0xFF	; 255
     7d2:	20 e7       	ldi	r18, 0x70	; 112
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	f1 50       	subi	r31, 0x01	; 1
     7d8:	20 40       	sbci	r18, 0x00	; 0
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <kilo_start+0x24a>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <kilo_start+0x254>
     7e0:	00 00       	nop
     7e2:	6f cf       	rjmp	.-290    	; 0x6c2 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7e4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7e6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7e8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7ea:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7ec:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7ee:	3c 98       	cbi	0x07, 4	; 7
     7f0:	dc ce       	rjmp	.-584    	; 0x5aa <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7f2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7f4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7f6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7f8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     7fa:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     7fc:	3c 9a       	sbi	0x07, 4	; 7
     7fe:	d5 ce       	rjmp	.-598    	; 0x5aa <kilo_start+0x1e>
     800:	ef e2       	ldi	r30, 0x2F	; 47
     802:	f5 e7       	ldi	r31, 0x75	; 117
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <kilo_start+0x278>
     808:	00 c0       	rjmp	.+0      	; 0x80a <kilo_start+0x27e>
     80a:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     80c:	80 91 65 01 	lds	r24, 0x0165
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     810:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     814:	80 93 b4 00 	sts	0x00B4, r24
     818:	c8 ce       	rjmp	.-624    	; 0x5aa <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     81a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     81e:	10 92 b4 00 	sts	0x00B4, r1
     822:	8f e2       	ldi	r24, 0x2F	; 47
     824:	95 e7       	ldi	r25, 0x75	; 117
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <kilo_start+0x29a>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <kilo_start+0x2a0>
     82c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     82e:	80 91 79 01 	lds	r24, 0x0179
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     832:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     836:	10 92 b4 00 	sts	0x00B4, r1
     83a:	b7 ce       	rjmp	.-658    	; 0x5aa <kilo_start+0x1e>

0000083c <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     83c:	07 c0       	rjmp	.+14     	; 0x84c <delay+0x10>
     83e:	ef ec       	ldi	r30, 0xCF	; 207
     840:	f7 e0       	ldi	r31, 0x07	; 7
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <delay+0x6>
     846:	00 c0       	rjmp	.+0      	; 0x848 <delay+0xc>
     848:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     84a:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	b9 f7       	brne	.-18     	; 0x83e <delay+0x2>
     850:	08 95       	ret

00000852 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     852:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     856:	60 93 b4 00 	sts	0x00B4, r22
     85a:	08 95       	ret

0000085c <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     862:	80 93 b4 00 	sts	0x00B4, r24
     866:	8f e0       	ldi	r24, 0x0F	; 15
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	ef ec       	ldi	r30, 0xCF	; 207
     86c:	f7 e0       	ldi	r31, 0x07	; 7
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <spinup_motors+0x12>
     872:	00 c0       	rjmp	.+0      	; 0x874 <spinup_motors+0x18>
     874:	00 00       	nop
     876:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     878:	c1 f7       	brne	.-16     	; 0x86a <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     87a:	08 95       	ret

0000087c <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     87c:	80 91 43 01 	lds	r24, 0x0143
     880:	81 11       	cpse	r24, r1
     882:	1e c0       	rjmp	.+60     	; 0x8c0 <get_ambientlight+0x44>
        cli();
     884:	f8 94       	cli
        adc_setup_conversion(7);
     886:	87 e0       	ldi	r24, 0x07	; 7
     888:	80 93 7c 00 	sts	0x007C, r24
     88c:	83 e8       	ldi	r24, 0x83	; 131
     88e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     892:	80 91 7a 00 	lds	r24, 0x007A
     896:	80 64       	ori	r24, 0x40	; 64
     898:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     89c:	80 91 7a 00 	lds	r24, 0x007A
     8a0:	86 fd       	sbrc	r24, 6
     8a2:	fc cf       	rjmp	.-8      	; 0x89c <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     8a4:	80 91 78 00 	lds	r24, 0x0078
     8a8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8ac:	10 92 7c 00 	sts	0x007C, r1
     8b0:	23 ea       	ldi	r18, 0xA3	; 163
     8b2:	20 93 7a 00 	sts	0x007A, r18
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     8bc:	78 94       	sei
     8be:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     8c4:	08 95       	ret

000008c6 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     8c6:	80 91 43 01 	lds	r24, 0x0143
     8ca:	81 11       	cpse	r24, r1
     8cc:	1e c0       	rjmp	.+60     	; 0x90a <__stack+0xb>
        cli();
     8ce:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     8d0:	88 ec       	ldi	r24, 0xC8	; 200
     8d2:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     8d6:	87 e8       	ldi	r24, 0x87	; 135
     8d8:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8dc:	80 91 7a 00 	lds	r24, 0x007A
     8e0:	80 64       	ori	r24, 0x40	; 64
     8e2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8e6:	80 91 7a 00 	lds	r24, 0x007A
     8ea:	86 fd       	sbrc	r24, 6
     8ec:	fc cf       	rjmp	.-8      	; 0x8e6 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     8ee:	80 91 78 00 	lds	r24, 0x0078
     8f2:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8f6:	10 92 7c 00 	sts	0x007C, r1
     8fa:	23 ea       	ldi	r18, 0xA3	; 163
     8fc:	20 93 7a 00 	sts	0x007A, r18
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     906:	78 94       	sei
     908:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     90e:	08 95       	ret

00000910 <rand_hard>:

uint8_t rand_hard() {
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	e0 e0       	ldi	r30, 0x00	; 0
     91a:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     91c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     91e:	03 ea       	ldi	r16, 0xA3	; 163
     920:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     922:	d6 e0       	ldi	r29, 0x06	; 6
     924:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     926:	a1 e0       	ldi	r26, 0x01	; 1
     928:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     92a:	60 e8       	ldi	r22, 0x80	; 128
     92c:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     92e:	f8 94       	cli
            adc_setup_conversion(6);
     930:	d0 93 7c 00 	sts	0x007C, r29
     934:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     938:	90 91 7a 00 	lds	r25, 0x007A
     93c:	90 64       	ori	r25, 0x40	; 64
     93e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     942:	90 91 7a 00 	lds	r25, 0x007A
     946:	96 fd       	sbrc	r25, 6
     948:	fc cf       	rjmp	.-8      	; 0x942 <rand_hard+0x32>
            a = ADCW&0x1;
     94a:	20 91 78 00 	lds	r18, 0x0078
     94e:	30 91 79 00 	lds	r19, 0x0079
     952:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     954:	90 91 7a 00 	lds	r25, 0x007A
     958:	90 64       	ori	r25, 0x40	; 64
     95a:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     95e:	90 91 7a 00 	lds	r25, 0x007A
     962:	96 fd       	sbrc	r25, 6
     964:	fc cf       	rjmp	.-8      	; 0x95e <rand_hard+0x4e>
            b = ADCW&0x1;
     966:	40 91 78 00 	lds	r20, 0x0078
     96a:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     96e:	10 92 7c 00 	sts	0x007C, r1
     972:	00 93 7a 00 	sts	0x007A, r16
     976:	10 93 7b 00 	sts	0x007B, r17
            sei();
     97a:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     97c:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     97e:	24 13       	cpse	r18, r20
     980:	03 c0       	rjmp	.+6      	; 0x988 <rand_hard+0x78>
     982:	61 50       	subi	r22, 0x01	; 1
     984:	71 09       	sbc	r23, r1
     986:	99 f6       	brne	.-90     	; 0x92e <rand_hard+0x1e>
        if (a)
     988:	22 23       	and	r18, r18
     98a:	39 f0       	breq	.+14     	; 0x99a <rand_hard+0x8a>
            num |= (1<<i);
     98c:	9d 01       	movw	r18, r26
     98e:	0e 2e       	mov	r0, r30
     990:	01 c0       	rjmp	.+2      	; 0x994 <rand_hard+0x84>
     992:	22 0f       	add	r18, r18
     994:	0a 94       	dec	r0
     996:	ea f7       	brpl	.-6      	; 0x992 <rand_hard+0x82>
     998:	82 2b       	or	r24, r18
     99a:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     99c:	e8 30       	cpi	r30, 0x08	; 8
     99e:	f1 05       	cpc	r31, r1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <rand_hard+0x94>
     9a2:	c3 cf       	rjmp	.-122    	; 0x92a <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	08 95       	ret

000009ae <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     9ae:	80 91 02 01 	lds	r24, 0x0102
     9b2:	98 2f       	mov	r25, r24
     9b4:	99 0f       	add	r25, r25
     9b6:	99 0f       	add	r25, r25
     9b8:	99 0f       	add	r25, r25
     9ba:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     9bc:	90 91 18 01 	lds	r25, 0x0118
     9c0:	21 e0       	ldi	r18, 0x01	; 1
     9c2:	29 0f       	add	r18, r25
     9c4:	20 93 18 01 	sts	0x0118, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     9c8:	28 2f       	mov	r18, r24
     9ca:	22 95       	swap	r18
     9cc:	26 95       	lsr	r18
     9ce:	27 70       	andi	r18, 0x07	; 7
     9d0:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     9d2:	96 95       	lsr	r25
     9d4:	96 95       	lsr	r25
     9d6:	89 27       	eor	r24, r25
     9d8:	80 93 02 01 	sts	0x0102, r24
    return seed;
}
     9dc:	08 95       	ret

000009de <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     9de:	80 93 02 01 	sts	0x0102, r24
     9e2:	08 95       	ret

000009e4 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     9e4:	80 91 43 01 	lds	r24, 0x0143
     9e8:	81 11       	cpse	r24, r1
     9ea:	16 c0       	rjmp	.+44     	; 0xa18 <get_voltage+0x34>
        cli();                                    // disable interrupts
     9ec:	f8 94       	cli
        adc_setup_conversion(6);
     9ee:	86 e0       	ldi	r24, 0x06	; 6
     9f0:	80 93 7c 00 	sts	0x007C, r24
     9f4:	83 e8       	ldi	r24, 0x83	; 131
     9f6:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9fa:	80 91 7a 00 	lds	r24, 0x007A
     9fe:	80 64       	ori	r24, 0x40	; 64
     a00:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a04:	80 91 7a 00 	lds	r24, 0x007A
     a08:	86 fd       	sbrc	r24, 6
     a0a:	fc cf       	rjmp	.-8      	; 0xa04 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a0c:	80 91 78 00 	lds	r24, 0x0078
     a10:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a14:	78 94       	sei
     a16:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a1c:	08 95       	ret

00000a1e <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a1e:	2f 92       	push	r2
     a20:	3f 92       	push	r3
     a22:	4f 92       	push	r4
     a24:	5f 92       	push	r5
     a26:	6f 92       	push	r6
     a28:	7f 92       	push	r7
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	00 d0       	rcall	.+0      	; 0xa44 <estimate_distance+0x26>
     a44:	00 d0       	rcall	.+0      	; 0xa46 <estimate_distance+0x28>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <estimate_distance+0x2a>
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     a4e:	dc 01       	movw	r26, r24
     a50:	12 96       	adiw	r26, 0x02	; 2
     a52:	0d 90       	ld	r0, X+
     a54:	bc 91       	ld	r27, X
     a56:	a0 2d       	mov	r26, r0
     a58:	be 83       	std	Y+6, r27	; 0x06
     a5a:	ad 83       	std	Y+5, r26	; 0x05
     a5c:	a4 38       	cpi	r26, 0x84	; 132
     a5e:	e3 e0       	ldi	r30, 0x03	; 3
     a60:	be 07       	cpc	r27, r30
     a62:	0c f0       	brlt	.+2      	; 0xa66 <estimate_distance+0x48>
     a64:	c9 c0       	rjmp	.+402    	; 0xbf8 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     a66:	80 91 1d 01 	lds	r24, 0x011D
     a6a:	90 91 1e 01 	lds	r25, 0x011E
     a6e:	8a 17       	cp	r24, r26
     a70:	9b 07       	cpc	r25, r27
     a72:	08 f4       	brcc	.+2      	; 0xa76 <estimate_distance+0x58>
     a74:	37 c1       	rjmp	.+622    	; 0xce4 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a76:	00 91 1f 01 	lds	r16, 0x011F
     a7a:	10 91 20 01 	lds	r17, 0x0120
     a7e:	0a 17       	cp	r16, r26
     a80:	1b 07       	cpc	r17, r27
     a82:	08 f4       	brcc	.+2      	; 0xa86 <estimate_distance+0x68>
     a84:	2f c2       	rjmp	.+1118   	; 0xee4 <estimate_distance+0x4c6>
     a86:	00 91 21 01 	lds	r16, 0x0121
     a8a:	10 91 22 01 	lds	r17, 0x0122
     a8e:	0a 17       	cp	r16, r26
     a90:	1b 07       	cpc	r17, r27
     a92:	08 f4       	brcc	.+2      	; 0xa96 <estimate_distance+0x78>
     a94:	2f c2       	rjmp	.+1118   	; 0xef4 <estimate_distance+0x4d6>
     a96:	00 91 23 01 	lds	r16, 0x0123
     a9a:	10 91 24 01 	lds	r17, 0x0124
     a9e:	0a 17       	cp	r16, r26
     aa0:	1b 07       	cpc	r17, r27
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <estimate_distance+0x88>
     aa4:	2f c2       	rjmp	.+1118   	; 0xf04 <estimate_distance+0x4e6>
     aa6:	00 91 25 01 	lds	r16, 0x0125
     aaa:	10 91 26 01 	lds	r17, 0x0126
     aae:	0a 17       	cp	r16, r26
     ab0:	1b 07       	cpc	r17, r27
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <estimate_distance+0x98>
     ab4:	2f c2       	rjmp	.+1118   	; 0xf14 <estimate_distance+0x4f6>
     ab6:	00 91 27 01 	lds	r16, 0x0127
     aba:	10 91 28 01 	lds	r17, 0x0128
     abe:	0a 17       	cp	r16, r26
     ac0:	1b 07       	cpc	r17, r27
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <estimate_distance+0xa8>
     ac4:	ef c1       	rjmp	.+990    	; 0xea4 <estimate_distance+0x486>
     ac6:	00 91 29 01 	lds	r16, 0x0129
     aca:	10 91 2a 01 	lds	r17, 0x012A
     ace:	0a 17       	cp	r16, r26
     ad0:	1b 07       	cpc	r17, r27
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <estimate_distance+0xb8>
     ad4:	27 c2       	rjmp	.+1102   	; 0xf24 <estimate_distance+0x506>
     ad6:	00 91 2b 01 	lds	r16, 0x012B
     ada:	10 91 2c 01 	lds	r17, 0x012C
     ade:	0a 17       	cp	r16, r26
     ae0:	1b 07       	cpc	r17, r27
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <estimate_distance+0xc8>
     ae4:	27 c2       	rjmp	.+1102   	; 0xf34 <estimate_distance+0x516>
     ae6:	00 91 2d 01 	lds	r16, 0x012D
     aea:	10 91 2e 01 	lds	r17, 0x012E
     aee:	0a 17       	cp	r16, r26
     af0:	1b 07       	cpc	r17, r27
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <estimate_distance+0xd8>
     af4:	27 c2       	rjmp	.+1102   	; 0xf44 <estimate_distance+0x526>
     af6:	00 91 2f 01 	lds	r16, 0x012F
     afa:	10 91 30 01 	lds	r17, 0x0130
     afe:	0a 17       	cp	r16, r26
     b00:	1b 07       	cpc	r17, r27
     b02:	08 f4       	brcc	.+2      	; 0xb06 <estimate_distance+0xe8>
     b04:	27 c2       	rjmp	.+1102   	; 0xf54 <estimate_distance+0x536>
     b06:	00 91 31 01 	lds	r16, 0x0131
     b0a:	10 91 32 01 	lds	r17, 0x0132
     b0e:	0a 17       	cp	r16, r26
     b10:	1b 07       	cpc	r17, r27
     b12:	08 f4       	brcc	.+2      	; 0xb16 <estimate_distance+0xf8>
     b14:	27 c2       	rjmp	.+1102   	; 0xf64 <estimate_distance+0x546>
     b16:	00 91 33 01 	lds	r16, 0x0133
     b1a:	10 91 34 01 	lds	r17, 0x0134
     b1e:	0a 17       	cp	r16, r26
     b20:	1b 07       	cpc	r17, r27
     b22:	08 f4       	brcc	.+2      	; 0xb26 <estimate_distance+0x108>
     b24:	23 c2       	rjmp	.+1094   	; 0xf6c <estimate_distance+0x54e>
     b26:	00 91 35 01 	lds	r16, 0x0135
     b2a:	10 91 36 01 	lds	r17, 0x0136
     b2e:	0a 17       	cp	r16, r26
     b30:	1b 07       	cpc	r17, r27
     b32:	08 f4       	brcc	.+2      	; 0xb36 <estimate_distance+0x118>
     b34:	23 c2       	rjmp	.+1094   	; 0xf7c <estimate_distance+0x55e>
     b36:	00 91 37 01 	lds	r16, 0x0137
     b3a:	10 91 38 01 	lds	r17, 0x0138
     b3e:	0a 17       	cp	r16, r26
     b40:	1b 07       	cpc	r17, r27
     b42:	08 f4       	brcc	.+2      	; 0xb46 <estimate_distance+0x128>
     b44:	23 c2       	rjmp	.+1094   	; 0xf8c <estimate_distance+0x56e>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	a0 ed       	ldi	r26, 0xD0	; 208
     b4c:	b0 e4       	ldi	r27, 0x40	; 64
     b4e:	89 83       	std	Y+1, r24	; 0x01
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	ab 83       	std	Y+3, r26	; 0x03
     b54:	bc 83       	std	Y+4, r27	; 0x04
     b56:	4c e0       	ldi	r20, 0x0C	; 12
     b58:	e4 2e       	mov	r14, r20
     b5a:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     b5c:	f7 01       	movw	r30, r14
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	e3 5e       	subi	r30, 0xE3	; 227
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	b8 01       	movw	r22, r16
     b6c:	68 1b       	sub	r22, r24
     b6e:	79 0b       	sbc	r23, r25
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	0e 94 88 0b 	call	0x1710	; 0x1710 <__addsf3>
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b84:	ad 81       	ldd	r26, Y+5	; 0x05
     b86:	be 81       	ldd	r27, Y+6	; 0x06
     b88:	bd 01       	movw	r22, r26
     b8a:	bb 0f       	add	r27, r27
     b8c:	88 0b       	sbc	r24, r24
     b8e:	99 0b       	sbc	r25, r25
     b90:	0e 94 9e 0c 	call	0x193c	; 0x193c <__floatsisf>
     b94:	4b 01       	movw	r8, r22
     b96:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     b98:	b8 01       	movw	r22, r16
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     ba2:	2b 01       	movw	r4, r22
     ba4:	3c 01       	movw	r6, r24
     ba6:	29 81       	ldd	r18, Y+1	; 0x01
     ba8:	3a 81       	ldd	r19, Y+2	; 0x02
     baa:	4b 81       	ldd	r20, Y+3	; 0x03
     bac:	5c 81       	ldd	r21, Y+4	; 0x04
     bae:	c7 01       	movw	r24, r14
     bb0:	b6 01       	movw	r22, r12
     bb2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
     bba:	c3 01       	movw	r24, r6
     bbc:	b2 01       	movw	r22, r4
     bbe:	0e 94 87 0b 	call	0x170e	; 0x170e <__subsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bc6:	c5 01       	movw	r24, r10
     bc8:	b4 01       	movw	r22, r8
     bca:	0e 94 87 0b 	call	0x170e	; 0x170e <__subsf3>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e2       	ldi	r20, 0x20	; 32
     bd4:	51 e4       	ldi	r21, 0x41	; 65
     bd6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
            b=((int)((int)b/(int)slope));
     bda:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixsfsi>
     bde:	8b 01       	movw	r16, r22
     be0:	c7 01       	movw	r24, r14
     be2:	b6 01       	movw	r22, r12
     be4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixsfsi>
     be8:	ab 01       	movw	r20, r22
     bea:	bc 01       	movw	r22, r24
     bec:	c8 01       	movw	r24, r16
     bee:	ba 01       	movw	r22, r20
     bf0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__divmodhi4>
            dist_high=b;
     bf4:	16 2f       	mov	r17, r22
     bf6:	77 c0       	rjmp	.+238    	; 0xce6 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bf8:	dc 01       	movw	r26, r24
     bfa:	cd 90       	ld	r12, X+
     bfc:	dc 90       	ld	r13, X
     bfe:	80 91 44 01 	lds	r24, 0x0144
     c02:	90 91 45 01 	lds	r25, 0x0145
     c06:	8c 15       	cp	r24, r12
     c08:	9d 05       	cpc	r25, r13
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <estimate_distance+0x1f0>
     c0c:	8c c0       	rjmp	.+280    	; 0xd26 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c0e:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c10:	e0 90 46 01 	lds	r14, 0x0146
     c14:	f0 90 47 01 	lds	r15, 0x0147
     c18:	ec 14       	cp	r14, r12
     c1a:	fd 04       	cpc	r15, r13
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <estimate_distance+0x202>
     c1e:	5e c1       	rjmp	.+700    	; 0xedc <estimate_distance+0x4be>
     c20:	e0 90 48 01 	lds	r14, 0x0148
     c24:	f0 90 49 01 	lds	r15, 0x0149
     c28:	ec 14       	cp	r14, r12
     c2a:	fd 04       	cpc	r15, r13
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <estimate_distance+0x212>
     c2e:	5e c1       	rjmp	.+700    	; 0xeec <estimate_distance+0x4ce>
     c30:	e0 90 4a 01 	lds	r14, 0x014A
     c34:	f0 90 4b 01 	lds	r15, 0x014B
     c38:	ec 14       	cp	r14, r12
     c3a:	fd 04       	cpc	r15, r13
     c3c:	08 f4       	brcc	.+2      	; 0xc40 <estimate_distance+0x222>
     c3e:	5e c1       	rjmp	.+700    	; 0xefc <estimate_distance+0x4de>
     c40:	e0 90 4c 01 	lds	r14, 0x014C
     c44:	f0 90 4d 01 	lds	r15, 0x014D
     c48:	ec 14       	cp	r14, r12
     c4a:	fd 04       	cpc	r15, r13
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <estimate_distance+0x232>
     c4e:	5e c1       	rjmp	.+700    	; 0xf0c <estimate_distance+0x4ee>
     c50:	e0 90 4e 01 	lds	r14, 0x014E
     c54:	f0 90 4f 01 	lds	r15, 0x014F
     c58:	ec 14       	cp	r14, r12
     c5a:	fd 04       	cpc	r15, r13
     c5c:	08 f4       	brcc	.+2      	; 0xc60 <estimate_distance+0x242>
     c5e:	c3 c0       	rjmp	.+390    	; 0xde6 <estimate_distance+0x3c8>
     c60:	e0 90 50 01 	lds	r14, 0x0150
     c64:	f0 90 51 01 	lds	r15, 0x0151
     c68:	ec 14       	cp	r14, r12
     c6a:	fd 04       	cpc	r15, r13
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <estimate_distance+0x252>
     c6e:	56 c1       	rjmp	.+684    	; 0xf1c <estimate_distance+0x4fe>
     c70:	e0 90 52 01 	lds	r14, 0x0152
     c74:	f0 90 53 01 	lds	r15, 0x0153
     c78:	ec 14       	cp	r14, r12
     c7a:	fd 04       	cpc	r15, r13
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <estimate_distance+0x262>
     c7e:	56 c1       	rjmp	.+684    	; 0xf2c <estimate_distance+0x50e>
     c80:	e0 90 54 01 	lds	r14, 0x0154
     c84:	f0 90 55 01 	lds	r15, 0x0155
     c88:	ec 14       	cp	r14, r12
     c8a:	fd 04       	cpc	r15, r13
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <estimate_distance+0x272>
     c8e:	56 c1       	rjmp	.+684    	; 0xf3c <estimate_distance+0x51e>
     c90:	e0 90 56 01 	lds	r14, 0x0156
     c94:	f0 90 57 01 	lds	r15, 0x0157
     c98:	ec 14       	cp	r14, r12
     c9a:	fd 04       	cpc	r15, r13
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <estimate_distance+0x282>
     c9e:	56 c1       	rjmp	.+684    	; 0xf4c <estimate_distance+0x52e>
     ca0:	e0 90 58 01 	lds	r14, 0x0158
     ca4:	f0 90 59 01 	lds	r15, 0x0159
     ca8:	ec 14       	cp	r14, r12
     caa:	fd 04       	cpc	r15, r13
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <estimate_distance+0x292>
     cae:	56 c1       	rjmp	.+684    	; 0xf5c <estimate_distance+0x53e>
     cb0:	e0 90 5a 01 	lds	r14, 0x015A
     cb4:	f0 90 5b 01 	lds	r15, 0x015B
     cb8:	ec 14       	cp	r14, r12
     cba:	fd 04       	cpc	r15, r13
     cbc:	08 f4       	brcc	.+2      	; 0xcc0 <estimate_distance+0x2a2>
     cbe:	5a c1       	rjmp	.+692    	; 0xf74 <estimate_distance+0x556>
     cc0:	e0 90 5c 01 	lds	r14, 0x015C
     cc4:	f0 90 5d 01 	lds	r15, 0x015D
     cc8:	ec 14       	cp	r14, r12
     cca:	fd 04       	cpc	r15, r13
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <estimate_distance+0x2b2>
     cce:	5a c1       	rjmp	.+692    	; 0xf84 <estimate_distance+0x566>
     cd0:	e0 90 5e 01 	lds	r14, 0x015E
     cd4:	f0 90 5f 01 	lds	r15, 0x015F
     cd8:	ec 14       	cp	r14, r12
     cda:	fd 04       	cpc	r15, r13
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <estimate_distance+0x2c2>
     cde:	5a c1       	rjmp	.+692    	; 0xf94 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     ce0:	0a e5       	ldi	r16, 0x5A	; 90
     ce2:	31 c0       	rjmp	.+98     	; 0xd46 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     ce4:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     ce6:	ed 81       	ldd	r30, Y+5	; 0x05
     ce8:	fe 81       	ldd	r31, Y+6	; 0x06
     cea:	ed 3b       	cpi	r30, 0xBD	; 189
     cec:	f2 40       	sbci	r31, 0x02	; 2
     cee:	fc f4       	brge	.+62     	; 0xd2e <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     cf0:	81 e2       	ldi	r24, 0x21	; 33
     cf2:	81 0f       	add	r24, r17
    }
}
     cf4:	26 96       	adiw	r28, 0x06	; 6
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	7f 90       	pop	r7
     d1a:	6f 90       	pop	r6
     d1c:	5f 90       	pop	r5
     d1e:	4f 90       	pop	r4
     d20:	3f 90       	pop	r3
     d22:	2f 90       	pop	r2
     d24:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d26:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d28:	81 e2       	ldi	r24, 0x21	; 33
     d2a:	80 0f       	add	r24, r16
     d2c:	e3 cf       	rjmp	.-58     	; 0xcf4 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d2e:	d1 01       	movw	r26, r2
     d30:	cd 90       	ld	r12, X+
     d32:	dc 90       	ld	r13, X
     d34:	80 91 44 01 	lds	r24, 0x0144
     d38:	90 91 45 01 	lds	r25, 0x0145
     d3c:	8c 15       	cp	r24, r12
     d3e:	9d 05       	cpc	r25, r13
     d40:	08 f0       	brcs	.+2      	; 0xd44 <estimate_distance+0x326>
     d42:	66 cf       	rjmp	.-308    	; 0xc10 <estimate_distance+0x1f2>
            dist_low=0;
     d44:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d46:	1f 3f       	cpi	r17, 0xFF	; 255
     d48:	79 f3       	breq	.-34     	; 0xd28 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d4a:	ed 81       	ldd	r30, Y+5	; 0x05
     d4c:	fe 81       	ldd	r31, Y+6	; 0x06
     d4e:	bf 01       	movw	r22, r30
     d50:	ff 0f       	add	r31, r31
     d52:	88 0b       	sbc	r24, r24
     d54:	99 0b       	sbc	r25, r25
     d56:	0e 94 9e 0c 	call	0x193c	; 0x193c <__floatsisf>
     d5a:	6b 01       	movw	r12, r22
     d5c:	7c 01       	movw	r14, r24
     d5e:	61 2f       	mov	r22, r17
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     d6a:	4b 01       	movw	r8, r22
     d6c:	5c 01       	movw	r10, r24
     d6e:	a7 01       	movw	r20, r14
     d70:	96 01       	movw	r18, r12
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	81 e6       	ldi	r24, 0x61	; 97
     d78:	94 e4       	ldi	r25, 0x44	; 68
     d7a:	0e 94 87 0b 	call	0x170e	; 0x170e <__subsf3>
     d7e:	9b 01       	movw	r18, r22
     d80:	ac 01       	movw	r20, r24
     d82:	c5 01       	movw	r24, r10
     d84:	b4 01       	movw	r22, r8
     d86:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     d8a:	4b 01       	movw	r8, r22
     d8c:	5c 01       	movw	r10, r24
     d8e:	60 2f       	mov	r22, r16
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     d9a:	2b 01       	movw	r4, r22
     d9c:	3c 01       	movw	r6, r24
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	4f e2       	ldi	r20, 0x2F	; 47
     da4:	54 e4       	ldi	r21, 0x44	; 68
     da6:	c7 01       	movw	r24, r14
     da8:	b6 01       	movw	r22, r12
     daa:	0e 94 87 0b 	call	0x170e	; 0x170e <__subsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c3 01       	movw	r24, r6
     db4:	b2 01       	movw	r22, r4
     db6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	c5 01       	movw	r24, r10
     dc0:	b4 01       	movw	r22, r8
     dc2:	0e 94 88 0b 	call	0x1710	; 0x1710 <__addsf3>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	48 e4       	ldi	r20, 0x48	; 72
     dcc:	53 e4       	ldi	r21, 0x43	; 67
     dce:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__divsf3>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	44 e0       	ldi	r20, 0x04	; 4
     dd8:	52 e4       	ldi	r21, 0x42	; 66
     dda:	0e 94 88 0b 	call	0x1710	; 0x1710 <__addsf3>
     dde:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fixunssfsi>
     de2:	86 2f       	mov	r24, r22
     de4:	87 cf       	rjmp	.-242    	; 0xcf4 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     de6:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	fc 01       	movw	r30, r24
     df2:	ee 5b       	subi	r30, 0xBE	; 190
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	b7 01       	movw	r22, r14
     dfc:	68 1b       	sub	r22, r24
     dfe:	79 0b       	sbc	r23, r25
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
     e0c:	0e 94 88 0b 	call	0x1710	; 0x1710 <__addsf3>
     e10:	4b 01       	movw	r8, r22
     e12:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e14:	b6 01       	movw	r22, r12
     e16:	dd 0c       	add	r13, r13
     e18:	88 0b       	sbc	r24, r24
     e1a:	99 0b       	sbc	r25, r25
     e1c:	0e 94 9e 0c 	call	0x193c	; 0x193c <__floatsisf>
     e20:	2b 01       	movw	r4, r22
     e22:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e24:	b7 01       	movw	r22, r14
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     e2e:	6b 01       	movw	r12, r22
     e30:	7c 01       	movw	r14, r24
     e32:	60 2f       	mov	r22, r16
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	a9 01       	movw	r20, r18
     e50:	0e 94 88 0b 	call	0x1710	; 0x1710 <__addsf3>
     e54:	a5 01       	movw	r20, r10
     e56:	94 01       	movw	r18, r8
     e58:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
     e60:	c7 01       	movw	r24, r14
     e62:	b6 01       	movw	r22, r12
     e64:	0e 94 87 0b 	call	0x170e	; 0x170e <__subsf3>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e6c:	c3 01       	movw	r24, r6
     e6e:	b2 01       	movw	r22, r4
     e70:	0e 94 87 0b 	call	0x170e	; 0x170e <__subsf3>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e2       	ldi	r20, 0x20	; 32
     e7a:	51 e4       	ldi	r21, 0x41	; 65
     e7c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
                b=((int)((int)b/(int)slope));
     e80:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixsfsi>
     e84:	7b 01       	movw	r14, r22
     e86:	c5 01       	movw	r24, r10
     e88:	b4 01       	movw	r22, r8
     e8a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixsfsi>
     e8e:	ab 01       	movw	r20, r22
     e90:	bc 01       	movw	r22, r24
     e92:	c7 01       	movw	r24, r14
     e94:	ba 01       	movw	r22, r20
     e96:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__divmodhi4>
                dist_low=b;
     e9a:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     e9c:	6f 3f       	cpi	r22, 0xFF	; 255
     e9e:	09 f0       	breq	.+2      	; 0xea2 <estimate_distance+0x484>
     ea0:	52 cf       	rjmp	.-348    	; 0xd46 <estimate_distance+0x328>
     ea2:	26 cf       	rjmp	.-436    	; 0xcf0 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ea4:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     ea6:	85 e0       	ldi	r24, 0x05	; 5
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	7c 01       	movw	r14, r24
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	ef 1a       	sub	r14, r31
     eb0:	f1 08       	sbc	r15, r1
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__floatunsisf>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	a9 01       	movw	r20, r18
     ece:	0e 94 88 0b 	call	0x1710	; 0x1710 <__addsf3>
     ed2:	69 83       	std	Y+1, r22	; 0x01
     ed4:	7a 83       	std	Y+2, r23	; 0x02
     ed6:	8b 83       	std	Y+3, r24	; 0x03
     ed8:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     eda:	40 ce       	rjmp	.-896    	; 0xb5c <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     edc:	01 e0       	ldi	r16, 0x01	; 1
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	84 cf       	rjmp	.-248    	; 0xdec <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	df cf       	rjmp	.-66     	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     eec:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	7c cf       	rjmp	.-264    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ef4:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	d7 cf       	rjmp	.-82     	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     efc:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	74 cf       	rjmp	.-280    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f04:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	cf cf       	rjmp	.-98     	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f0c:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	6c cf       	rjmp	.-296    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f14:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	c7 cf       	rjmp	.-114    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f1c:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f1e:	86 e0       	ldi	r24, 0x06	; 6
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	64 cf       	rjmp	.-312    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f24:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f26:	86 e0       	ldi	r24, 0x06	; 6
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	bf cf       	rjmp	.-130    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f2c:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     f2e:	87 e0       	ldi	r24, 0x07	; 7
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	5c cf       	rjmp	.-328    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f34:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f36:	87 e0       	ldi	r24, 0x07	; 7
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	b7 cf       	rjmp	.-146    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f3c:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f3e:	88 e0       	ldi	r24, 0x08	; 8
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	54 cf       	rjmp	.-344    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f44:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f46:	88 e0       	ldi	r24, 0x08	; 8
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	af cf       	rjmp	.-162    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f4c:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     f4e:	89 e0       	ldi	r24, 0x09	; 9
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	4c cf       	rjmp	.-360    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f54:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     f56:	89 e0       	ldi	r24, 0x09	; 9
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a7 cf       	rjmp	.-178    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f5c:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	44 cf       	rjmp	.-376    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f64:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     f66:	8a e0       	ldi	r24, 0x0A	; 10
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9f cf       	rjmp	.-194    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f6c:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     f6e:	8b e0       	ldi	r24, 0x0B	; 11
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9b cf       	rjmp	.-202    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f74:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     f76:	8b e0       	ldi	r24, 0x0B	; 11
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	38 cf       	rjmp	.-400    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f7c:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     f7e:	8c e0       	ldi	r24, 0x0C	; 12
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	93 cf       	rjmp	.-218    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f84:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     f86:	8c e0       	ldi	r24, 0x0C	; 12
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	30 cf       	rjmp	.-416    	; 0xdec <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f8c:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     f8e:	8d e0       	ldi	r24, 0x0D	; 13
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	8b cf       	rjmp	.-234    	; 0xeaa <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f94:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     f96:	8d e0       	ldi	r24, 0x0D	; 13
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	28 cf       	rjmp	.-432    	; 0xdec <estimate_distance+0x3ce>

00000f9c <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
    tx_clock += tx_increment;
     fbe:	20 91 63 01 	lds	r18, 0x0163
     fc2:	30 91 64 01 	lds	r19, 0x0164
     fc6:	80 91 61 01 	lds	r24, 0x0161
     fca:	90 91 62 01 	lds	r25, 0x0162
     fce:	82 0f       	add	r24, r18
     fd0:	93 1f       	adc	r25, r19
     fd2:	90 93 64 01 	sts	0x0164, r25
     fd6:	80 93 63 01 	sts	0x0163, r24
    tx_increment = 0xFF;
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	90 93 62 01 	sts	0x0162, r25
     fe2:	80 93 61 01 	sts	0x0161, r24
    OCR0A = tx_increment;
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     fea:	80 91 3f 01 	lds	r24, 0x013F
     fee:	90 91 40 01 	lds	r25, 0x0140
     ff2:	a0 91 41 01 	lds	r26, 0x0141
     ff6:	b0 91 42 01 	lds	r27, 0x0142
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	a1 1d       	adc	r26, r1
     ffe:	b1 1d       	adc	r27, r1
    1000:	80 93 3f 01 	sts	0x013F, r24
    1004:	90 93 40 01 	sts	0x0140, r25
    1008:	a0 93 41 01 	sts	0x0141, r26
    100c:	b0 93 42 01 	sts	0x0142, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1010:	80 91 43 01 	lds	r24, 0x0143
    1014:	81 11       	cpse	r24, r1
    1016:	0f c0       	rjmp	.+30     	; 0x1036 <__vector_14+0x9a>
    1018:	80 91 72 01 	lds	r24, 0x0172
    101c:	90 91 73 01 	lds	r25, 0x0173
    1020:	20 91 63 01 	lds	r18, 0x0163
    1024:	30 91 64 01 	lds	r19, 0x0164
    1028:	82 17       	cp	r24, r18
    102a:	93 07       	cpc	r25, r19
    102c:	20 f4       	brcc	.+8      	; 0x1036 <__vector_14+0x9a>
    102e:	80 91 1b 01 	lds	r24, 0x011B
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	89 f0       	breq	.+34     	; 0x1058 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1058:	e0 91 05 01 	lds	r30, 0x0105
    105c:	f0 91 06 01 	lds	r31, 0x0106
    1060:	09 95       	icall
        if (msg) {
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	41 f3       	breq	.-48     	; 0x1036 <__vector_14+0x9a>
            if (message_send(msg)) {
    1066:	0e 94 b6 0a 	call	0x156c	; 0x156c <message_send>
    106a:	81 11       	cpse	r24, r1
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    106e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <rand>
    1072:	99 27       	eor	r25, r25
    1074:	90 93 62 01 	sts	0x0162, r25
    1078:	80 93 61 01 	sts	0x0161, r24
                OCR0A = tx_increment;
    107c:	87 bd       	out	0x27, r24	; 39
    107e:	db cf       	rjmp	.-74     	; 0x1036 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1080:	e0 91 03 01 	lds	r30, 0x0103
    1084:	f0 91 04 01 	lds	r31, 0x0104
    1088:	09 95       	icall
                tx_clock = 0;
    108a:	10 92 64 01 	sts	0x0164, r1
    108e:	10 92 63 01 	sts	0x0163, r1
    1092:	d1 cf       	rjmp	.-94     	; 0x1036 <__vector_14+0x9a>

00001094 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1094:	80 ff       	sbrs	r24, 0
    1096:	11 c0       	rjmp	.+34     	; 0x10ba <set_color+0x26>
        DDRD |= (1<<5);
    1098:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    109a:	81 ff       	sbrs	r24, 1
    109c:	11 c0       	rjmp	.+34     	; 0x10c0 <set_color+0x2c>
        DDRD |= (1<<4);
    109e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    10a0:	82 ff       	sbrs	r24, 2
    10a2:	11 c0       	rjmp	.+34     	; 0x10c6 <set_color+0x32>
        DDRC |= (1<<3);
    10a4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    10a6:	83 ff       	sbrs	r24, 3
    10a8:	11 c0       	rjmp	.+34     	; 0x10cc <set_color+0x38>
        DDRC |= (1<<2);
    10aa:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    10ac:	84 ff       	sbrs	r24, 4
    10ae:	11 c0       	rjmp	.+34     	; 0x10d2 <set_color+0x3e>
        DDRC |= (1<<5);
    10b0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    10b2:	85 fd       	sbrc	r24, 5
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    10b6:	3c 98       	cbi	0x07, 4	; 7
    10b8:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    10ba:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    10bc:	81 fd       	sbrc	r24, 1
    10be:	ef cf       	rjmp	.-34     	; 0x109e <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    10c0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    10c2:	82 fd       	sbrc	r24, 2
    10c4:	ef cf       	rjmp	.-34     	; 0x10a4 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    10c6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    10c8:	83 fd       	sbrc	r24, 3
    10ca:	ef cf       	rjmp	.-34     	; 0x10aa <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    10cc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    10ce:	84 fd       	sbrc	r24, 4
    10d0:	ef cf       	rjmp	.-34     	; 0x10b0 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    10d2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    10d4:	85 ff       	sbrs	r24, 5
    10d6:	ef cf       	rjmp	.-34     	; 0x10b6 <set_color+0x22>
        DDRC |= (1<<4);
    10d8:	3c 9a       	sbi	0x07, 4	; 7
    10da:	08 95       	ret

000010dc <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    rx_timer_off();
    10ea:	10 92 81 00 	sts	0x0081, r1
    10ee:	10 92 85 00 	sts	0x0085, r1
    10f2:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	80 93 1c 01 	sts	0x011C, r24
    rx_leadingbyte = 1;
    10fc:	80 93 60 01 	sts	0x0160, r24
    rx_busy = 0;
    1100:	10 92 43 01 	sts	0x0143, r1
    adc_trigger_high_gain();
    1104:	10 92 7c 00 	sts	0x007C, r1
    1108:	93 ea       	ldi	r25, 0xA3	; 163
    110a:	90 93 7a 00 	sts	0x007A, r25
    110e:	80 93 7b 00 	sts	0x007B, r24
}
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1146:	20 91 84 00 	lds	r18, 0x0084
    114a:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	40 93 43 01 	sts	0x0143, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1154:	80 91 1c 01 	lds	r24, 0x011C
    1158:	88 23       	and	r24, r24
    115a:	a9 f1       	breq	.+106    	; 0x11c6 <__vector_23+0xa6>
        rx_timer_on();
    115c:	10 92 85 00 	sts	0x0085, r1
    1160:	10 92 84 00 	sts	0x0084, r1
    1164:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1168:	10 92 74 01 	sts	0x0174, r1
        rx_leadingbit = 0;
    116c:	10 92 1c 01 	sts	0x011C, r1
        if (rx_leadingbyte) {
    1170:	80 91 60 01 	lds	r24, 0x0160
    1174:	88 23       	and	r24, r24
    1176:	a1 f0       	breq	.+40     	; 0x11a0 <__vector_23+0x80>
            adc_finish_conversion();
    1178:	80 91 7a 00 	lds	r24, 0x007A
    117c:	86 fd       	sbrc	r24, 6
    117e:	fc cf       	rjmp	.-8      	; 0x1178 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1180:	80 91 78 00 	lds	r24, 0x0078
    1184:	90 91 79 00 	lds	r25, 0x0079
    1188:	90 93 3e 01 	sts	0x013E, r25
    118c:	80 93 3d 01 	sts	0x013D, r24
            adc_trigger_low_gain();
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 7c 00 	sts	0x007C, r24
    1196:	93 ea       	ldi	r25, 0xA3	; 163
    1198:	90 93 7a 00 	sts	0x007A, r25
    119c:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    11c6:	c9 01       	movw	r24, r18
    11c8:	87 58       	subi	r24, 0x87	; 135
    11ca:	91 09       	sbc	r25, r1
    11cc:	84 37       	cpi	r24, 0x74	; 116
    11ce:	99 40       	sbci	r25, 0x09	; 9
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <__vector_23+0xb4>
    11d2:	52 c0       	rjmp	.+164    	; 0x1278 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    11d4:	26 58       	subi	r18, 0x86	; 134
    11d6:	31 09       	sbc	r19, r1
    11d8:	a4 ef       	ldi	r26, 0xF4	; 244
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__umulhisi3>
    11e0:	aa 27       	eor	r26, r26
    11e2:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    11e4:	88 30       	cpi	r24, 0x08	; 8
    11e6:	91 05       	cpc	r25, r1
    11e8:	a1 05       	cpc	r26, r1
    11ea:	b1 05       	cpc	r27, r1
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <__vector_23+0xd0>
    11ee:	7b c0       	rjmp	.+246    	; 0x12e6 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    11f0:	40 93 1c 01 	sts	0x011C, r20
                if (rx_leadingbyte) {
    11f4:	80 91 60 01 	lds	r24, 0x0160
    11f8:	81 11       	cpse	r24, r1
    11fa:	52 c0       	rjmp	.+164    	; 0x12a0 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    11fc:	80 91 3a 01 	lds	r24, 0x013A
    1200:	e8 2f       	mov	r30, r24
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	ea 59       	subi	r30, 0x9A	; 154
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	90 91 74 01 	lds	r25, 0x0174
    120c:	90 83       	st	Z, r25
                    rx_byteindex++;
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	80 93 3a 01 	sts	0x013A, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1214:	8c 30       	cpi	r24, 0x0C	; 12
    1216:	21 f6       	brne	.-120    	; 0x11a0 <__vector_23+0x80>
                        rx_timer_off();
    1218:	10 92 81 00 	sts	0x0081, r1
    121c:	10 92 85 00 	sts	0x0085, r1
    1220:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1224:	40 93 60 01 	sts	0x0160, r20
                        rx_busy = 0;
    1228:	10 92 43 01 	sts	0x0143, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    122c:	c0 91 70 01 	lds	r28, 0x0170
    1230:	d0 91 71 01 	lds	r29, 0x0171
    1234:	86 e6       	ldi	r24, 0x66	; 102
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 9a 0a 	call	0x1534	; 0x1534 <message_crc>
    123c:	c8 17       	cp	r28, r24
    123e:	d9 07       	cpc	r29, r25
    1240:	09 f0       	breq	.+2      	; 0x1244 <__vector_23+0x124>
    1242:	ae cf       	rjmp	.-164    	; 0x11a0 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1244:	80 91 6f 01 	lds	r24, 0x016F
    1248:	87 ff       	sbrs	r24, 7
    124a:	61 c0       	rjmp	.+194    	; 0x130e <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    124c:	98 e7       	ldi	r25, 0x78	; 120
    124e:	98 0f       	add	r25, r24
    1250:	93 30       	cpi	r25, 0x03	; 3
    1252:	30 f0       	brcs	.+12     	; 0x1260 <__vector_23+0x140>
        motors_off();
    1254:	53 98       	cbi	0x0a, 3	; 10
    1256:	23 98       	cbi	0x04, 3	; 4
    1258:	10 92 b4 00 	sts	0x00B4, r1
    125c:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	fc 01       	movw	r30, r24
    1264:	e0 58       	subi	r30, 0x80	; 128
    1266:	f1 09       	sbc	r31, r1
    1268:	eb 30       	cpi	r30, 0x0B	; 11
    126a:	f1 05       	cpc	r31, r1
    126c:	08 f0       	brcs	.+2      	; 0x1270 <__vector_23+0x150>
    126e:	98 cf       	rjmp	.-208    	; 0x11a0 <__vector_23+0x80>
    1270:	e5 5c       	subi	r30, 0xC5	; 197
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1278:	10 92 81 00 	sts	0x0081, r1
    127c:	10 92 85 00 	sts	0x0085, r1
    1280:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1284:	40 93 1c 01 	sts	0x011C, r20
            rx_leadingbyte = 1;
    1288:	40 93 60 01 	sts	0x0160, r20
            rx_busy = 0;
    128c:	10 92 43 01 	sts	0x0143, r1
            adc_trigger_high_gain();
    1290:	10 92 7c 00 	sts	0x007C, r1
    1294:	83 ea       	ldi	r24, 0xA3	; 163
    1296:	80 93 7a 00 	sts	0x007A, r24
    129a:	40 93 7b 00 	sts	0x007B, r20
    129e:	80 cf       	rjmp	.-256    	; 0x11a0 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    12a0:	80 91 7a 00 	lds	r24, 0x007A
    12a4:	86 fd       	sbrc	r24, 6
    12a6:	fc cf       	rjmp	.-8      	; 0x12a0 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    12a8:	80 91 78 00 	lds	r24, 0x0078
    12ac:	90 91 79 00 	lds	r25, 0x0079
    12b0:	90 93 3c 01 	sts	0x013C, r25
    12b4:	80 93 3b 01 	sts	0x013B, r24
                    adc_trigger_high_gain();
    12b8:	10 92 7c 00 	sts	0x007C, r1
    12bc:	83 ea       	ldi	r24, 0xA3	; 163
    12be:	80 93 7a 00 	sts	0x007A, r24
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    12c8:	90 91 74 01 	lds	r25, 0x0174
    12cc:	99 23       	and	r25, r25
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <__vector_23+0x1e4>
                        rx_timer_off();
    12d0:	10 92 81 00 	sts	0x0081, r1
    12d4:	10 92 85 00 	sts	0x0085, r1
    12d8:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12dc:	80 93 60 01 	sts	0x0160, r24
                        rx_busy = 0;
    12e0:	10 92 43 01 	sts	0x0143, r1
    12e4:	5d cf       	rjmp	.-326    	; 0x11a0 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	f9 01       	movw	r30, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <__vector_23+0x1d2>
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <__vector_23+0x1ce>
    12f6:	cf 01       	movw	r24, r30
    12f8:	90 91 74 01 	lds	r25, 0x0174
    12fc:	89 2b       	or	r24, r25
    12fe:	80 93 74 01 	sts	0x0174, r24
    1302:	4e cf       	rjmp	.-356    	; 0x11a0 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1304:	10 92 60 01 	sts	0x0160, r1
                        rx_byteindex = 0;
    1308:	10 92 3a 01 	sts	0x013A, r1
    130c:	49 cf       	rjmp	.-366    	; 0x11a0 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    130e:	e0 91 07 01 	lds	r30, 0x0107
    1312:	f0 91 08 01 	lds	r31, 0x0108
    1316:	6b e3       	ldi	r22, 0x3B	; 59
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	86 e6       	ldi	r24, 0x66	; 102
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	09 95       	icall
    1320:	3f cf       	rjmp	.-386    	; 0x11a0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1322:	80 91 66 01 	lds	r24, 0x0166
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	09 f4       	brne	.+2      	; 0x132c <__vector_23+0x20c>
    132a:	dd c0       	rjmp	.+442    	; 0x14e6 <__vector_23+0x3c6>
    132c:	08 f4       	brcc	.+2      	; 0x1330 <__vector_23+0x210>
    132e:	ba c0       	rjmp	.+372    	; 0x14a4 <__vector_23+0x384>
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	09 f4       	brne	.+2      	; 0x1336 <__vector_23+0x216>
    1334:	c6 c0       	rjmp	.+396    	; 0x14c2 <__vector_23+0x3a2>
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	09 f0       	breq	.+2      	; 0x133c <__vector_23+0x21c>
    133a:	b1 c0       	rjmp	.+354    	; 0x149e <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    133c:	80 91 19 01 	lds	r24, 0x0119
    1340:	90 91 6c 01 	lds	r25, 0x016C
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	09 f4       	brne	.+2      	; 0x134a <__vector_23+0x22a>
    1348:	e3 c0       	rjmp	.+454    	; 0x1510 <__vector_23+0x3f0>
    134a:	80 91 6b 01 	lds	r24, 0x016B
                        prev_motion = MOVE_STOP;
    134e:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_STRAIGHT;
    1352:	23 e0       	ldi	r18, 0x03	; 3
    1354:	20 93 19 01 	sts	0x0119, r18
                        kilo_straight_left = calibmsg->straight_left;
    1358:	80 93 77 01 	sts	0x0177, r24
                        kilo_straight_right = calibmsg->straight_right;
    135c:	90 93 78 01 	sts	0x0178, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1360:	80 91 1b 01 	lds	r24, 0x011B
    1364:	86 30       	cpi	r24, 0x06	; 6
    1366:	09 f4       	brne	.+2      	; 0x136a <__vector_23+0x24a>
    1368:	1b cf       	rjmp	.-458    	; 0x11a0 <__vector_23+0x80>
                motors_on();
    136a:	53 9a       	sbi	0x0a, 3	; 10
    136c:	23 9a       	sbi	0x04, 3	; 4
    136e:	10 92 b4 00 	sts	0x00B4, r1
    1372:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1376:	86 e0       	ldi	r24, 0x06	; 6
    1378:	80 93 1b 01 	sts	0x011B, r24
    137c:	11 cf       	rjmp	.-478    	; 0x11a0 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    137e:	80 91 1b 01 	lds	r24, 0x011B
    1382:	86 30       	cpi	r24, 0x06	; 6
    1384:	99 f0       	breq	.+38     	; 0x13ac <__vector_23+0x28c>
                motors_on();
    1386:	53 9a       	sbi	0x0a, 3	; 10
    1388:	23 9a       	sbi	0x04, 3	; 4
    138a:	10 92 b4 00 	sts	0x00B4, r1
    138e:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1392:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1394:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1396:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1398:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    139a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    139c:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    139e:	10 92 19 01 	sts	0x0119, r1
    13a2:	10 92 1a 01 	sts	0x011A, r1
                kilo_state = MOVING;
    13a6:	86 e0       	ldi	r24, 0x06	; 6
    13a8:	80 93 1b 01 	sts	0x011B, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9c 01       	movw	r18, r24
    13b2:	00 90 66 01 	lds	r0, 0x0166
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <__vector_23+0x29c>
    13b8:	22 0f       	add	r18, r18
    13ba:	33 1f       	adc	r19, r19
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <__vector_23+0x298>
    13c0:	80 91 75 01 	lds	r24, 0x0175
    13c4:	90 91 76 01 	lds	r25, 0x0176
    13c8:	82 23       	and	r24, r18
    13ca:	93 23       	and	r25, r19
    13cc:	89 2b       	or	r24, r25
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <__vector_23+0x2b2>
    13d0:	86 c0       	rjmp	.+268    	; 0x14de <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    13d2:	10 92 19 01 	sts	0x0119, r1
    13d6:	e4 ce       	rjmp	.-568    	; 0x11a0 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 1b 01 	sts	0x011B, r24
    13de:	e0 ce       	rjmp	.-576    	; 0x11a0 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    13e0:	e0 e0       	ldi	r30, 0x00	; 0
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    13e6:	80 91 6e 00 	lds	r24, 0x006E
    13ea:	8d 7f       	andi	r24, 0xFD	; 253
    13ec:	80 93 6e 00 	sts	0x006E, r24
    13f0:	16 bc       	out	0x26, r1	; 38
            bootload();
    13f2:	e0 e0       	ldi	r30, 0x00	; 0
    13f4:	f0 e7       	ldi	r31, 0x70	; 112
    13f6:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    13f8:	10 92 1b 01 	sts	0x011B, r1
    13fc:	d1 ce       	rjmp	.-606    	; 0x11a0 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	80 93 1b 01 	sts	0x011B, r24
    1404:	cd ce       	rjmp	.-614    	; 0x11a0 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1406:	85 e0       	ldi	r24, 0x05	; 5
    1408:	80 93 1b 01 	sts	0x011B, r24
    140c:	c9 ce       	rjmp	.-622    	; 0x11a0 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    140e:	80 91 1b 01 	lds	r24, 0x011B
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	09 f4       	brne	.+2      	; 0x1418 <__vector_23+0x2f8>
    1416:	c4 ce       	rjmp	.-632    	; 0x11a0 <__vector_23+0x80>
    1418:	80 91 1b 01 	lds	r24, 0x011B
    141c:	84 30       	cpi	r24, 0x04	; 4
    141e:	09 f4       	brne	.+2      	; 0x1422 <__vector_23+0x302>
    1420:	bf ce       	rjmp	.-642    	; 0x11a0 <__vector_23+0x80>
                motors_on();
    1422:	53 9a       	sbi	0x0a, 3	; 10
    1424:	23 9a       	sbi	0x04, 3	; 4
    1426:	10 92 b4 00 	sts	0x00B4, r1
    142a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	80 93 1b 01 	sts	0x011B, r24
    1434:	b5 ce       	rjmp	.-662    	; 0x11a0 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1436:	80 91 1b 01 	lds	r24, 0x011B
    143a:	86 30       	cpi	r24, 0x06	; 6
    143c:	09 f0       	breq	.+2      	; 0x1440 <__vector_23+0x320>
    143e:	b0 ce       	rjmp	.-672    	; 0x11a0 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1440:	60 91 75 01 	lds	r22, 0x0175
    1444:	80 eb       	ldi	r24, 0xB0	; 176
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    144c:	60 91 76 01 	lds	r22, 0x0176
    1450:	81 eb       	ldi	r24, 0xB1	; 177
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1458:	60 91 79 01 	lds	r22, 0x0179
    145c:	85 e0       	ldi	r24, 0x05	; 5
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1464:	60 91 65 01 	lds	r22, 0x0165
    1468:	89 e0       	ldi	r24, 0x09	; 9
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1470:	60 91 77 01 	lds	r22, 0x0177
    1474:	8c e0       	ldi	r24, 0x0C	; 12
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    147c:	60 91 78 01 	lds	r22, 0x0178
    1480:	84 e1       	ldi	r24, 0x14	; 20
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <eeprom_write_byte>
                        motors_off();
    1488:	53 98       	cbi	0x0a, 3	; 10
    148a:	23 98       	cbi	0x04, 3	; 4
    148c:	10 92 b4 00 	sts	0x00B4, r1
    1490:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	80 93 1b 01 	sts	0x011B, r24
    149a:	80 91 66 01 	lds	r24, 0x0166
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    149e:	81 11       	cpse	r24, r1
    14a0:	5f cf       	rjmp	.-322    	; 0x1360 <__vector_23+0x240>
    14a2:	7e ce       	rjmp	.-772    	; 0x11a0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    14a4:	88 23       	and	r24, r24
    14a6:	39 f2       	breq	.-114    	; 0x1436 <__vector_23+0x316>
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	c9 f7       	brne	.-14     	; 0x149e <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    14ac:	80 91 67 01 	lds	r24, 0x0167
    14b0:	90 91 68 01 	lds	r25, 0x0168
    14b4:	90 93 76 01 	sts	0x0176, r25
    14b8:	80 93 75 01 	sts	0x0175, r24
                    cur_motion = MOVE_STOP;
    14bc:	10 92 19 01 	sts	0x0119, r1
    14c0:	4f cf       	rjmp	.-354    	; 0x1360 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14c2:	80 91 19 01 	lds	r24, 0x0119
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	71 f1       	breq	.+92     	; 0x1526 <__vector_23+0x406>
    14ca:	80 91 6a 01 	lds	r24, 0x016A
                        prev_motion = MOVE_STOP;
    14ce:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_RIGHT;
    14d2:	92 e0       	ldi	r25, 0x02	; 2
    14d4:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_right = calibmsg->turn_right;
    14d8:	80 93 65 01 	sts	0x0165, r24
    14dc:	41 cf       	rjmp	.-382    	; 0x1360 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 19 01 	sts	0x0119, r24
    14e4:	5d ce       	rjmp	.-838    	; 0x11a0 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14e6:	80 91 19 01 	lds	r24, 0x0119
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	51 f0       	breq	.+20     	; 0x1502 <__vector_23+0x3e2>
    14ee:	80 91 69 01 	lds	r24, 0x0169
                        prev_motion = MOVE_STOP;
    14f2:	10 92 1a 01 	sts	0x011A, r1
                        cur_motion = MOVE_LEFT;
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	90 93 19 01 	sts	0x0119, r25
                        kilo_turn_left = calibmsg->turn_left;
    14fc:	80 93 79 01 	sts	0x0179, r24
    1500:	2f cf       	rjmp	.-418    	; 0x1360 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1502:	80 91 69 01 	lds	r24, 0x0169
    1506:	90 91 79 01 	lds	r25, 0x0179
    150a:	89 13       	cpse	r24, r25
    150c:	f2 cf       	rjmp	.-28     	; 0x14f2 <__vector_23+0x3d2>
    150e:	28 cf       	rjmp	.-432    	; 0x1360 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1510:	80 91 78 01 	lds	r24, 0x0178
    1514:	98 13       	cpse	r25, r24
    1516:	19 cf       	rjmp	.-462    	; 0x134a <__vector_23+0x22a>
    1518:	80 91 6b 01 	lds	r24, 0x016B
    151c:	20 91 77 01 	lds	r18, 0x0177
    1520:	82 13       	cpse	r24, r18
    1522:	15 cf       	rjmp	.-470    	; 0x134e <__vector_23+0x22e>
    1524:	1d cf       	rjmp	.-454    	; 0x1360 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1526:	80 91 6a 01 	lds	r24, 0x016A
    152a:	90 91 65 01 	lds	r25, 0x0165
    152e:	89 13       	cpse	r24, r25
    1530:	ce cf       	rjmp	.-100    	; 0x14ce <__vector_23+0x3ae>
    1532:	16 cf       	rjmp	.-468    	; 0x1360 <__vector_23+0x240>

00001534 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1534:	fc 01       	movw	r30, r24
    1536:	ac 01       	movw	r20, r24
    1538:	46 5f       	subi	r20, 0xF6	; 246
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1540:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1542:	82 27       	eor	r24, r18
    1544:	08 2e       	mov	r0, r24
    1546:	82 95       	swap	r24
    1548:	80 7f       	andi	r24, 0xF0	; 240
    154a:	80 25       	eor	r24, r0
    154c:	09 2e       	mov	r0, r25
    154e:	98 2f       	mov	r25, r24
    1550:	82 95       	swap	r24
    1552:	8f 70       	andi	r24, 0x0F	; 15
    1554:	08 26       	eor	r0, r24
    1556:	86 95       	lsr	r24
    1558:	98 27       	eor	r25, r24
    155a:	89 27       	eor	r24, r25
    155c:	88 0f       	add	r24, r24
    155e:	88 0f       	add	r24, r24
    1560:	88 0f       	add	r24, r24
    1562:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1564:	e4 17       	cp	r30, r20
    1566:	f5 07       	cpc	r31, r21
    1568:	59 f7       	brne	.-42     	; 0x1540 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    156a:	08 95       	ret

0000156c <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    156c:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    156e:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1570:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1572:	20 91 39 01 	lds	r18, 0x0139
    or tmpreg1, ddrreg
    1576:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1578:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    157a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    157c:	30 91 39 01 	lds	r19, 0x0139
    1580:	20 30       	cpi	r18, 0x00	; 0
    1582:	29 f0       	breq	.+10     	; 0x158e <message_send+0x22>
    1584:	00 00       	nop
    1586:	25 b1       	in	r18, 0x05	; 5
    1588:	23 2b       	or	r18, r19
    158a:	25 b9       	out	0x05, r18	; 5
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <message_send+0x2a>
    158e:	00 00       	nop
    1590:	00 00       	nop
    1592:	00 00       	nop
    1594:	00 c0       	rjmp	.+0      	; 0x1596 <message_send+0x2a>
    1596:	00 00       	nop
    1598:	00 00       	nop
    159a:	00 00       	nop
    159c:	30 95       	com	r19
    159e:	25 b1       	in	r18, 0x05	; 5
    15a0:	23 23       	and	r18, r19
    15a2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    15a4:	2e ea       	ldi	r18, 0xAE	; 174
    15a6:	2a 95       	dec	r18
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    15aa:	2b ee       	ldi	r18, 0xEB	; 235

000015ac <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    15ac:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    15ae:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    15b0:	0a c0       	rjmp	.+20     	; 0x15c6 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15b2:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15b4:	30 91 39 01 	lds	r19, 0x0139
    com tmpreg2
    15b8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15ba:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15bc:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15be:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15c0:	0f be       	out	0x3f, r0	; 63
    return 0
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	08 95       	ret

000015c6 <nocollision>:
nocollision:
    nop
    15c6:	00 00       	nop
    dec tmpreg1
    15c8:	2a 95       	dec	r18
    brne checkcollision
    15ca:	81 f7       	brne	.-32     	; 0x15ac <checkcollision>

    ldi tmpreg1, 0x01
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15ce:	30 91 39 01 	lds	r19, 0x0139
    15d2:	20 30       	cpi	r18, 0x00	; 0
    15d4:	29 f0       	breq	.+10     	; 0x15e0 <nocollision+0x1a>
    15d6:	00 00       	nop
    15d8:	25 b1       	in	r18, 0x05	; 5
    15da:	23 2b       	or	r18, r19
    15dc:	25 b9       	out	0x05, r18	; 5
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <nocollision+0x22>
    15e0:	00 00       	nop
    15e2:	00 00       	nop
    15e4:	00 00       	nop
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <nocollision+0x22>
    15e8:	00 00       	nop
    15ea:	00 00       	nop
    15ec:	00 00       	nop
    15ee:	30 95       	com	r19
    15f0:	25 b1       	in	r18, 0x05	; 5
    15f2:	23 23       	and	r18, r19
    15f4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    15f6:	00 00       	nop
    15f8:	24 e5       	ldi	r18, 0x54	; 84
    15fa:	2a 95       	dec	r18
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    15fe:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1600:	8c e0       	ldi	r24, 0x0C	; 12

00001602 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1602:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1604:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1606:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1608:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    160a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    160c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    160e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1610:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1612:	50 e0       	ldi	r21, 0x00	; 0

00001614 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1614:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1616:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1618:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    161a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    161c:	30 91 39 01 	lds	r19, 0x0139
    1620:	20 30       	cpi	r18, 0x00	; 0
    1622:	29 f0       	breq	.+10     	; 0x162e <sendbit+0x1a>
    1624:	00 00       	nop
    1626:	25 b1       	in	r18, 0x05	; 5
    1628:	23 2b       	or	r18, r19
    162a:	25 b9       	out	0x05, r18	; 5
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <sendbit+0x22>
    162e:	00 00       	nop
    1630:	00 00       	nop
    1632:	00 00       	nop
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <sendbit+0x22>
    1636:	00 00       	nop
    1638:	00 00       	nop
    163a:	00 00       	nop
    163c:	30 95       	com	r19
    163e:	25 b1       	in	r18, 0x05	; 5
    1640:	23 23       	and	r18, r19
    1642:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1644:	00 00       	nop
    1646:	21 e5       	ldi	r18, 0x51	; 81
    1648:	2a 95       	dec	r18
    164a:	f1 f7       	brne	.-4      	; 0x1648 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    164c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    164e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1650:	9a 95       	dec	r25
    brne sendbit
    1652:	01 f7       	brne	.-64     	; 0x1614 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1654:	8a 95       	dec	r24
    brne sendbyte
    1656:	a9 f6       	brne	.-86     	; 0x1602 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1658:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    165a:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    165c:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    165e:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1660:	30 91 39 01 	lds	r19, 0x0139
    com tmpreg2
    1664:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1666:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1668:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    166a:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    166c:	0f be       	out	0x3f, r0	; 63
    return 1
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	08 95       	ret

00001672 <main>:
    distance = estimate_distance(d);
}

int main()
{
    kilo_init();
    1672:	0e 94 ca 01 	call	0x394	; 0x394 <kilo_init>
    kilo_message_rx = message_rx;
    1676:	81 e7       	ldi	r24, 0x71	; 113
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	90 93 08 01 	sts	0x0108, r25
    167e:	80 93 07 01 	sts	0x0107, r24
    kilo_start(setup, loop);
    1682:	60 ea       	ldi	r22, 0xA0	; 160
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	80 e8       	ldi	r24, 0x80	; 128
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 c6 02 	call	0x58c	; 0x58c <kilo_start>
    
    return 0;
}
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	08 95       	ret

00001694 <__divmodhi4>:
    1694:	97 fb       	bst	r25, 7
    1696:	07 2e       	mov	r0, r23
    1698:	16 f4       	brtc	.+4      	; 0x169e <__divmodhi4+0xa>
    169a:	00 94       	com	r0
    169c:	07 d0       	rcall	.+14     	; 0x16ac <__divmodhi4_neg1>
    169e:	77 fd       	sbrc	r23, 7
    16a0:	09 d0       	rcall	.+18     	; 0x16b4 <__divmodhi4_neg2>
    16a2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__udivmodhi4>
    16a6:	07 fc       	sbrc	r0, 7
    16a8:	05 d0       	rcall	.+10     	; 0x16b4 <__divmodhi4_neg2>
    16aa:	3e f4       	brtc	.+14     	; 0x16ba <__divmodhi4_exit>

000016ac <__divmodhi4_neg1>:
    16ac:	90 95       	com	r25
    16ae:	81 95       	neg	r24
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	08 95       	ret

000016b4 <__divmodhi4_neg2>:
    16b4:	70 95       	com	r23
    16b6:	61 95       	neg	r22
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255

000016ba <__divmodhi4_exit>:
    16ba:	08 95       	ret

000016bc <__tablejump2__>:
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	05 90       	lpm	r0, Z+
    16c2:	f4 91       	lpm	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	09 94       	ijmp

000016c8 <__umulhisi3>:
    16c8:	a2 9f       	mul	r26, r18
    16ca:	b0 01       	movw	r22, r0
    16cc:	b3 9f       	mul	r27, r19
    16ce:	c0 01       	movw	r24, r0
    16d0:	a3 9f       	mul	r26, r19
    16d2:	70 0d       	add	r23, r0
    16d4:	81 1d       	adc	r24, r1
    16d6:	11 24       	eor	r1, r1
    16d8:	91 1d       	adc	r25, r1
    16da:	b2 9f       	mul	r27, r18
    16dc:	70 0d       	add	r23, r0
    16de:	81 1d       	adc	r24, r1
    16e0:	11 24       	eor	r1, r1
    16e2:	91 1d       	adc	r25, r1
    16e4:	08 95       	ret

000016e6 <__udivmodhi4>:
    16e6:	aa 1b       	sub	r26, r26
    16e8:	bb 1b       	sub	r27, r27
    16ea:	51 e1       	ldi	r21, 0x11	; 17
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <__udivmodhi4_ep>

000016ee <__udivmodhi4_loop>:
    16ee:	aa 1f       	adc	r26, r26
    16f0:	bb 1f       	adc	r27, r27
    16f2:	a6 17       	cp	r26, r22
    16f4:	b7 07       	cpc	r27, r23
    16f6:	10 f0       	brcs	.+4      	; 0x16fc <__udivmodhi4_ep>
    16f8:	a6 1b       	sub	r26, r22
    16fa:	b7 0b       	sbc	r27, r23

000016fc <__udivmodhi4_ep>:
    16fc:	88 1f       	adc	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	5a 95       	dec	r21
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__udivmodhi4_loop>
    1704:	80 95       	com	r24
    1706:	90 95       	com	r25
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	08 95       	ret

0000170e <__subsf3>:
    170e:	50 58       	subi	r21, 0x80	; 128

00001710 <__addsf3>:
    1710:	bb 27       	eor	r27, r27
    1712:	aa 27       	eor	r26, r26
    1714:	0e 94 9f 0b 	call	0x173e	; 0x173e <__addsf3x>
    1718:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_round>
    171c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__fp_pscA>
    1720:	38 f0       	brcs	.+14     	; 0x1730 <__addsf3+0x20>
    1722:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fp_pscB>
    1726:	20 f0       	brcs	.+8      	; 0x1730 <__addsf3+0x20>
    1728:	39 f4       	brne	.+14     	; 0x1738 <__addsf3+0x28>
    172a:	9f 3f       	cpi	r25, 0xFF	; 255
    172c:	19 f4       	brne	.+6      	; 0x1734 <__addsf3+0x24>
    172e:	26 f4       	brtc	.+8      	; 0x1738 <__addsf3+0x28>
    1730:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__fp_nan>
    1734:	0e f4       	brtc	.+2      	; 0x1738 <__addsf3+0x28>
    1736:	e0 95       	com	r30
    1738:	e7 fb       	bst	r30, 7
    173a:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_inf>

0000173e <__addsf3x>:
    173e:	e9 2f       	mov	r30, r25
    1740:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fp_split3>
    1744:	58 f3       	brcs	.-42     	; 0x171c <__addsf3+0xc>
    1746:	ba 17       	cp	r27, r26
    1748:	62 07       	cpc	r22, r18
    174a:	73 07       	cpc	r23, r19
    174c:	84 07       	cpc	r24, r20
    174e:	95 07       	cpc	r25, r21
    1750:	20 f0       	brcs	.+8      	; 0x175a <__addsf3x+0x1c>
    1752:	79 f4       	brne	.+30     	; 0x1772 <__addsf3x+0x34>
    1754:	a6 f5       	brtc	.+104    	; 0x17be <__addsf3x+0x80>
    1756:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_zero>
    175a:	0e f4       	brtc	.+2      	; 0x175e <__addsf3x+0x20>
    175c:	e0 95       	com	r30
    175e:	0b 2e       	mov	r0, r27
    1760:	ba 2f       	mov	r27, r26
    1762:	a0 2d       	mov	r26, r0
    1764:	0b 01       	movw	r0, r22
    1766:	b9 01       	movw	r22, r18
    1768:	90 01       	movw	r18, r0
    176a:	0c 01       	movw	r0, r24
    176c:	ca 01       	movw	r24, r20
    176e:	a0 01       	movw	r20, r0
    1770:	11 24       	eor	r1, r1
    1772:	ff 27       	eor	r31, r31
    1774:	59 1b       	sub	r21, r25
    1776:	99 f0       	breq	.+38     	; 0x179e <__addsf3x+0x60>
    1778:	59 3f       	cpi	r21, 0xF9	; 249
    177a:	50 f4       	brcc	.+20     	; 0x1790 <__addsf3x+0x52>
    177c:	50 3e       	cpi	r21, 0xE0	; 224
    177e:	68 f1       	brcs	.+90     	; 0x17da <__addsf3x+0x9c>
    1780:	1a 16       	cp	r1, r26
    1782:	f0 40       	sbci	r31, 0x00	; 0
    1784:	a2 2f       	mov	r26, r18
    1786:	23 2f       	mov	r18, r19
    1788:	34 2f       	mov	r19, r20
    178a:	44 27       	eor	r20, r20
    178c:	58 5f       	subi	r21, 0xF8	; 248
    178e:	f3 cf       	rjmp	.-26     	; 0x1776 <__addsf3x+0x38>
    1790:	46 95       	lsr	r20
    1792:	37 95       	ror	r19
    1794:	27 95       	ror	r18
    1796:	a7 95       	ror	r26
    1798:	f0 40       	sbci	r31, 0x00	; 0
    179a:	53 95       	inc	r21
    179c:	c9 f7       	brne	.-14     	; 0x1790 <__addsf3x+0x52>
    179e:	7e f4       	brtc	.+30     	; 0x17be <__addsf3x+0x80>
    17a0:	1f 16       	cp	r1, r31
    17a2:	ba 0b       	sbc	r27, r26
    17a4:	62 0b       	sbc	r22, r18
    17a6:	73 0b       	sbc	r23, r19
    17a8:	84 0b       	sbc	r24, r20
    17aa:	ba f0       	brmi	.+46     	; 0x17da <__addsf3x+0x9c>
    17ac:	91 50       	subi	r25, 0x01	; 1
    17ae:	a1 f0       	breq	.+40     	; 0x17d8 <__addsf3x+0x9a>
    17b0:	ff 0f       	add	r31, r31
    17b2:	bb 1f       	adc	r27, r27
    17b4:	66 1f       	adc	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	c2 f7       	brpl	.-16     	; 0x17ac <__addsf3x+0x6e>
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <__addsf3x+0x9c>
    17be:	ba 0f       	add	r27, r26
    17c0:	62 1f       	adc	r22, r18
    17c2:	73 1f       	adc	r23, r19
    17c4:	84 1f       	adc	r24, r20
    17c6:	48 f4       	brcc	.+18     	; 0x17da <__addsf3x+0x9c>
    17c8:	87 95       	ror	r24
    17ca:	77 95       	ror	r23
    17cc:	67 95       	ror	r22
    17ce:	b7 95       	ror	r27
    17d0:	f7 95       	ror	r31
    17d2:	9e 3f       	cpi	r25, 0xFE	; 254
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <__addsf3x+0x9a>
    17d6:	b0 cf       	rjmp	.-160    	; 0x1738 <__addsf3+0x28>
    17d8:	93 95       	inc	r25
    17da:	88 0f       	add	r24, r24
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <__addsf3x+0xa2>
    17de:	99 27       	eor	r25, r25
    17e0:	ee 0f       	add	r30, r30
    17e2:	97 95       	ror	r25
    17e4:	87 95       	ror	r24
    17e6:	08 95       	ret

000017e8 <__divsf3>:
    17e8:	0e 94 08 0c 	call	0x1810	; 0x1810 <__divsf3x>
    17ec:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_round>
    17f0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fp_pscB>
    17f4:	58 f0       	brcs	.+22     	; 0x180c <__divsf3+0x24>
    17f6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__fp_pscA>
    17fa:	40 f0       	brcs	.+16     	; 0x180c <__divsf3+0x24>
    17fc:	29 f4       	brne	.+10     	; 0x1808 <__divsf3+0x20>
    17fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1800:	29 f0       	breq	.+10     	; 0x180c <__divsf3+0x24>
    1802:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_inf>
    1806:	51 11       	cpse	r21, r1
    1808:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_szero>
    180c:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__fp_nan>

00001810 <__divsf3x>:
    1810:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fp_split3>
    1814:	68 f3       	brcs	.-38     	; 0x17f0 <__divsf3+0x8>

00001816 <__divsf3_pse>:
    1816:	99 23       	and	r25, r25
    1818:	b1 f3       	breq	.-20     	; 0x1806 <__divsf3+0x1e>
    181a:	55 23       	and	r21, r21
    181c:	91 f3       	breq	.-28     	; 0x1802 <__divsf3+0x1a>
    181e:	95 1b       	sub	r25, r21
    1820:	55 0b       	sbc	r21, r21
    1822:	bb 27       	eor	r27, r27
    1824:	aa 27       	eor	r26, r26
    1826:	62 17       	cp	r22, r18
    1828:	73 07       	cpc	r23, r19
    182a:	84 07       	cpc	r24, r20
    182c:	38 f0       	brcs	.+14     	; 0x183c <__divsf3_pse+0x26>
    182e:	9f 5f       	subi	r25, 0xFF	; 255
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	22 0f       	add	r18, r18
    1834:	33 1f       	adc	r19, r19
    1836:	44 1f       	adc	r20, r20
    1838:	aa 1f       	adc	r26, r26
    183a:	a9 f3       	breq	.-22     	; 0x1826 <__divsf3_pse+0x10>
    183c:	35 d0       	rcall	.+106    	; 0x18a8 <__divsf3_pse+0x92>
    183e:	0e 2e       	mov	r0, r30
    1840:	3a f0       	brmi	.+14     	; 0x1850 <__divsf3_pse+0x3a>
    1842:	e0 e8       	ldi	r30, 0x80	; 128
    1844:	32 d0       	rcall	.+100    	; 0x18aa <__divsf3_pse+0x94>
    1846:	91 50       	subi	r25, 0x01	; 1
    1848:	50 40       	sbci	r21, 0x00	; 0
    184a:	e6 95       	lsr	r30
    184c:	00 1c       	adc	r0, r0
    184e:	ca f7       	brpl	.-14     	; 0x1842 <__divsf3_pse+0x2c>
    1850:	2b d0       	rcall	.+86     	; 0x18a8 <__divsf3_pse+0x92>
    1852:	fe 2f       	mov	r31, r30
    1854:	29 d0       	rcall	.+82     	; 0x18a8 <__divsf3_pse+0x92>
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	bb 1f       	adc	r27, r27
    185e:	26 17       	cp	r18, r22
    1860:	37 07       	cpc	r19, r23
    1862:	48 07       	cpc	r20, r24
    1864:	ab 07       	cpc	r26, r27
    1866:	b0 e8       	ldi	r27, 0x80	; 128
    1868:	09 f0       	breq	.+2      	; 0x186c <__divsf3_pse+0x56>
    186a:	bb 0b       	sbc	r27, r27
    186c:	80 2d       	mov	r24, r0
    186e:	bf 01       	movw	r22, r30
    1870:	ff 27       	eor	r31, r31
    1872:	93 58       	subi	r25, 0x83	; 131
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	3a f0       	brmi	.+14     	; 0x1886 <__divsf3_pse+0x70>
    1878:	9e 3f       	cpi	r25, 0xFE	; 254
    187a:	51 05       	cpc	r21, r1
    187c:	78 f0       	brcs	.+30     	; 0x189c <__divsf3_pse+0x86>
    187e:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_inf>
    1882:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_szero>
    1886:	5f 3f       	cpi	r21, 0xFF	; 255
    1888:	e4 f3       	brlt	.-8      	; 0x1882 <__divsf3_pse+0x6c>
    188a:	98 3e       	cpi	r25, 0xE8	; 232
    188c:	d4 f3       	brlt	.-12     	; 0x1882 <__divsf3_pse+0x6c>
    188e:	86 95       	lsr	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b7 95       	ror	r27
    1896:	f7 95       	ror	r31
    1898:	9f 5f       	subi	r25, 0xFF	; 255
    189a:	c9 f7       	brne	.-14     	; 0x188e <__divsf3_pse+0x78>
    189c:	88 0f       	add	r24, r24
    189e:	91 1d       	adc	r25, r1
    18a0:	96 95       	lsr	r25
    18a2:	87 95       	ror	r24
    18a4:	97 f9       	bld	r25, 7
    18a6:	08 95       	ret
    18a8:	e1 e0       	ldi	r30, 0x01	; 1
    18aa:	66 0f       	add	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	bb 1f       	adc	r27, r27
    18b2:	62 17       	cp	r22, r18
    18b4:	73 07       	cpc	r23, r19
    18b6:	84 07       	cpc	r24, r20
    18b8:	ba 07       	cpc	r27, r26
    18ba:	20 f0       	brcs	.+8      	; 0x18c4 <__divsf3_pse+0xae>
    18bc:	62 1b       	sub	r22, r18
    18be:	73 0b       	sbc	r23, r19
    18c0:	84 0b       	sbc	r24, r20
    18c2:	ba 0b       	sbc	r27, r26
    18c4:	ee 1f       	adc	r30, r30
    18c6:	88 f7       	brcc	.-30     	; 0x18aa <__divsf3_pse+0x94>
    18c8:	e0 95       	com	r30
    18ca:	08 95       	ret

000018cc <__fixsfsi>:
    18cc:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fixunssfsi>
    18d0:	68 94       	set
    18d2:	b1 11       	cpse	r27, r1
    18d4:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_szero>
    18d8:	08 95       	ret

000018da <__fixunssfsi>:
    18da:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__fp_splitA>
    18de:	88 f0       	brcs	.+34     	; 0x1902 <__fixunssfsi+0x28>
    18e0:	9f 57       	subi	r25, 0x7F	; 127
    18e2:	98 f0       	brcs	.+38     	; 0x190a <__fixunssfsi+0x30>
    18e4:	b9 2f       	mov	r27, r25
    18e6:	99 27       	eor	r25, r25
    18e8:	b7 51       	subi	r27, 0x17	; 23
    18ea:	b0 f0       	brcs	.+44     	; 0x1918 <__fixunssfsi+0x3e>
    18ec:	e1 f0       	breq	.+56     	; 0x1926 <__fixunssfsi+0x4c>
    18ee:	66 0f       	add	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	1a f0       	brmi	.+6      	; 0x18fe <__fixunssfsi+0x24>
    18f8:	ba 95       	dec	r27
    18fa:	c9 f7       	brne	.-14     	; 0x18ee <__fixunssfsi+0x14>
    18fc:	14 c0       	rjmp	.+40     	; 0x1926 <__fixunssfsi+0x4c>
    18fe:	b1 30       	cpi	r27, 0x01	; 1
    1900:	91 f0       	breq	.+36     	; 0x1926 <__fixunssfsi+0x4c>
    1902:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fp_zero>
    1906:	b1 e0       	ldi	r27, 0x01	; 1
    1908:	08 95       	ret
    190a:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_zero>
    190e:	67 2f       	mov	r22, r23
    1910:	78 2f       	mov	r23, r24
    1912:	88 27       	eor	r24, r24
    1914:	b8 5f       	subi	r27, 0xF8	; 248
    1916:	39 f0       	breq	.+14     	; 0x1926 <__fixunssfsi+0x4c>
    1918:	b9 3f       	cpi	r27, 0xF9	; 249
    191a:	cc f3       	brlt	.-14     	; 0x190e <__fixunssfsi+0x34>
    191c:	86 95       	lsr	r24
    191e:	77 95       	ror	r23
    1920:	67 95       	ror	r22
    1922:	b3 95       	inc	r27
    1924:	d9 f7       	brne	.-10     	; 0x191c <__fixunssfsi+0x42>
    1926:	3e f4       	brtc	.+14     	; 0x1936 <__fixunssfsi+0x5c>
    1928:	90 95       	com	r25
    192a:	80 95       	com	r24
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	08 95       	ret

00001938 <__floatunsisf>:
    1938:	e8 94       	clt
    193a:	09 c0       	rjmp	.+18     	; 0x194e <__floatsisf+0x12>

0000193c <__floatsisf>:
    193c:	97 fb       	bst	r25, 7
    193e:	3e f4       	brtc	.+14     	; 0x194e <__floatsisf+0x12>
    1940:	90 95       	com	r25
    1942:	80 95       	com	r24
    1944:	70 95       	com	r23
    1946:	61 95       	neg	r22
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	8f 4f       	sbci	r24, 0xFF	; 255
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	99 23       	and	r25, r25
    1950:	a9 f0       	breq	.+42     	; 0x197c <__floatsisf+0x40>
    1952:	f9 2f       	mov	r31, r25
    1954:	96 e9       	ldi	r25, 0x96	; 150
    1956:	bb 27       	eor	r27, r27
    1958:	93 95       	inc	r25
    195a:	f6 95       	lsr	r31
    195c:	87 95       	ror	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	b7 95       	ror	r27
    1964:	f1 11       	cpse	r31, r1
    1966:	f8 cf       	rjmp	.-16     	; 0x1958 <__floatsisf+0x1c>
    1968:	fa f4       	brpl	.+62     	; 0x19a8 <__floatsisf+0x6c>
    196a:	bb 0f       	add	r27, r27
    196c:	11 f4       	brne	.+4      	; 0x1972 <__floatsisf+0x36>
    196e:	60 ff       	sbrs	r22, 0
    1970:	1b c0       	rjmp	.+54     	; 0x19a8 <__floatsisf+0x6c>
    1972:	6f 5f       	subi	r22, 0xFF	; 255
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	8f 4f       	sbci	r24, 0xFF	; 255
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	16 c0       	rjmp	.+44     	; 0x19a8 <__floatsisf+0x6c>
    197c:	88 23       	and	r24, r24
    197e:	11 f0       	breq	.+4      	; 0x1984 <__floatsisf+0x48>
    1980:	96 e9       	ldi	r25, 0x96	; 150
    1982:	11 c0       	rjmp	.+34     	; 0x19a6 <__floatsisf+0x6a>
    1984:	77 23       	and	r23, r23
    1986:	21 f0       	breq	.+8      	; 0x1990 <__floatsisf+0x54>
    1988:	9e e8       	ldi	r25, 0x8E	; 142
    198a:	87 2f       	mov	r24, r23
    198c:	76 2f       	mov	r23, r22
    198e:	05 c0       	rjmp	.+10     	; 0x199a <__floatsisf+0x5e>
    1990:	66 23       	and	r22, r22
    1992:	71 f0       	breq	.+28     	; 0x19b0 <__floatsisf+0x74>
    1994:	96 e8       	ldi	r25, 0x86	; 134
    1996:	86 2f       	mov	r24, r22
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	2a f0       	brmi	.+10     	; 0x19a8 <__floatsisf+0x6c>
    199e:	9a 95       	dec	r25
    19a0:	66 0f       	add	r22, r22
    19a2:	77 1f       	adc	r23, r23
    19a4:	88 1f       	adc	r24, r24
    19a6:	da f7       	brpl	.-10     	; 0x199e <__floatsisf+0x62>
    19a8:	88 0f       	add	r24, r24
    19aa:	96 95       	lsr	r25
    19ac:	87 95       	ror	r24
    19ae:	97 f9       	bld	r25, 7
    19b0:	08 95       	ret

000019b2 <__fp_inf>:
    19b2:	97 f9       	bld	r25, 7
    19b4:	9f 67       	ori	r25, 0x7F	; 127
    19b6:	80 e8       	ldi	r24, 0x80	; 128
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	08 95       	ret

000019be <__fp_nan>:
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	80 ec       	ldi	r24, 0xC0	; 192
    19c2:	08 95       	ret

000019c4 <__fp_pscA>:
    19c4:	00 24       	eor	r0, r0
    19c6:	0a 94       	dec	r0
    19c8:	16 16       	cp	r1, r22
    19ca:	17 06       	cpc	r1, r23
    19cc:	18 06       	cpc	r1, r24
    19ce:	09 06       	cpc	r0, r25
    19d0:	08 95       	ret

000019d2 <__fp_pscB>:
    19d2:	00 24       	eor	r0, r0
    19d4:	0a 94       	dec	r0
    19d6:	12 16       	cp	r1, r18
    19d8:	13 06       	cpc	r1, r19
    19da:	14 06       	cpc	r1, r20
    19dc:	05 06       	cpc	r0, r21
    19de:	08 95       	ret

000019e0 <__fp_round>:
    19e0:	09 2e       	mov	r0, r25
    19e2:	03 94       	inc	r0
    19e4:	00 0c       	add	r0, r0
    19e6:	11 f4       	brne	.+4      	; 0x19ec <__fp_round+0xc>
    19e8:	88 23       	and	r24, r24
    19ea:	52 f0       	brmi	.+20     	; 0x1a00 <__fp_round+0x20>
    19ec:	bb 0f       	add	r27, r27
    19ee:	40 f4       	brcc	.+16     	; 0x1a00 <__fp_round+0x20>
    19f0:	bf 2b       	or	r27, r31
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <__fp_round+0x18>
    19f4:	60 ff       	sbrs	r22, 0
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <__fp_round+0x20>
    19f8:	6f 5f       	subi	r22, 0xFF	; 255
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	08 95       	ret

00001a02 <__fp_split3>:
    1a02:	57 fd       	sbrc	r21, 7
    1a04:	90 58       	subi	r25, 0x80	; 128
    1a06:	44 0f       	add	r20, r20
    1a08:	55 1f       	adc	r21, r21
    1a0a:	59 f0       	breq	.+22     	; 0x1a22 <__fp_splitA+0x10>
    1a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0e:	71 f0       	breq	.+28     	; 0x1a2c <__fp_splitA+0x1a>
    1a10:	47 95       	ror	r20

00001a12 <__fp_splitA>:
    1a12:	88 0f       	add	r24, r24
    1a14:	97 fb       	bst	r25, 7
    1a16:	99 1f       	adc	r25, r25
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <__fp_splitA+0x20>
    1a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1c:	79 f0       	breq	.+30     	; 0x1a3c <__fp_splitA+0x2a>
    1a1e:	87 95       	ror	r24
    1a20:	08 95       	ret
    1a22:	12 16       	cp	r1, r18
    1a24:	13 06       	cpc	r1, r19
    1a26:	14 06       	cpc	r1, r20
    1a28:	55 1f       	adc	r21, r21
    1a2a:	f2 cf       	rjmp	.-28     	; 0x1a10 <__fp_split3+0xe>
    1a2c:	46 95       	lsr	r20
    1a2e:	f1 df       	rcall	.-30     	; 0x1a12 <__fp_splitA>
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <__fp_splitA+0x30>
    1a32:	16 16       	cp	r1, r22
    1a34:	17 06       	cpc	r1, r23
    1a36:	18 06       	cpc	r1, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	f1 cf       	rjmp	.-30     	; 0x1a1e <__fp_splitA+0xc>
    1a3c:	86 95       	lsr	r24
    1a3e:	71 05       	cpc	r23, r1
    1a40:	61 05       	cpc	r22, r1
    1a42:	08 94       	sec
    1a44:	08 95       	ret

00001a46 <__fp_zero>:
    1a46:	e8 94       	clt

00001a48 <__fp_szero>:
    1a48:	bb 27       	eor	r27, r27
    1a4a:	66 27       	eor	r22, r22
    1a4c:	77 27       	eor	r23, r23
    1a4e:	cb 01       	movw	r24, r22
    1a50:	97 f9       	bld	r25, 7
    1a52:	08 95       	ret

00001a54 <__mulsf3>:
    1a54:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__mulsf3x>
    1a58:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_round>
    1a5c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__fp_pscA>
    1a60:	38 f0       	brcs	.+14     	; 0x1a70 <__mulsf3+0x1c>
    1a62:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fp_pscB>
    1a66:	20 f0       	brcs	.+8      	; 0x1a70 <__mulsf3+0x1c>
    1a68:	95 23       	and	r25, r21
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <__mulsf3+0x1c>
    1a6c:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_inf>
    1a70:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__fp_nan>
    1a74:	11 24       	eor	r1, r1
    1a76:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_szero>

00001a7a <__mulsf3x>:
    1a7a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fp_split3>
    1a7e:	70 f3       	brcs	.-36     	; 0x1a5c <__mulsf3+0x8>

00001a80 <__mulsf3_pse>:
    1a80:	95 9f       	mul	r25, r21
    1a82:	c1 f3       	breq	.-16     	; 0x1a74 <__mulsf3+0x20>
    1a84:	95 0f       	add	r25, r21
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	55 1f       	adc	r21, r21
    1a8a:	62 9f       	mul	r22, r18
    1a8c:	f0 01       	movw	r30, r0
    1a8e:	72 9f       	mul	r23, r18
    1a90:	bb 27       	eor	r27, r27
    1a92:	f0 0d       	add	r31, r0
    1a94:	b1 1d       	adc	r27, r1
    1a96:	63 9f       	mul	r22, r19
    1a98:	aa 27       	eor	r26, r26
    1a9a:	f0 0d       	add	r31, r0
    1a9c:	b1 1d       	adc	r27, r1
    1a9e:	aa 1f       	adc	r26, r26
    1aa0:	64 9f       	mul	r22, r20
    1aa2:	66 27       	eor	r22, r22
    1aa4:	b0 0d       	add	r27, r0
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	66 1f       	adc	r22, r22
    1aaa:	82 9f       	mul	r24, r18
    1aac:	22 27       	eor	r18, r18
    1aae:	b0 0d       	add	r27, r0
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	62 1f       	adc	r22, r18
    1ab4:	73 9f       	mul	r23, r19
    1ab6:	b0 0d       	add	r27, r0
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	62 1f       	adc	r22, r18
    1abc:	83 9f       	mul	r24, r19
    1abe:	a0 0d       	add	r26, r0
    1ac0:	61 1d       	adc	r22, r1
    1ac2:	22 1f       	adc	r18, r18
    1ac4:	74 9f       	mul	r23, r20
    1ac6:	33 27       	eor	r19, r19
    1ac8:	a0 0d       	add	r26, r0
    1aca:	61 1d       	adc	r22, r1
    1acc:	23 1f       	adc	r18, r19
    1ace:	84 9f       	mul	r24, r20
    1ad0:	60 0d       	add	r22, r0
    1ad2:	21 1d       	adc	r18, r1
    1ad4:	82 2f       	mov	r24, r18
    1ad6:	76 2f       	mov	r23, r22
    1ad8:	6a 2f       	mov	r22, r26
    1ada:	11 24       	eor	r1, r1
    1adc:	9f 57       	subi	r25, 0x7F	; 127
    1ade:	50 40       	sbci	r21, 0x00	; 0
    1ae0:	9a f0       	brmi	.+38     	; 0x1b08 <__mulsf3_pse+0x88>
    1ae2:	f1 f0       	breq	.+60     	; 0x1b20 <__mulsf3_pse+0xa0>
    1ae4:	88 23       	and	r24, r24
    1ae6:	4a f0       	brmi	.+18     	; 0x1afa <__mulsf3_pse+0x7a>
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	bb 1f       	adc	r27, r27
    1aee:	66 1f       	adc	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	91 50       	subi	r25, 0x01	; 1
    1af6:	50 40       	sbci	r21, 0x00	; 0
    1af8:	a9 f7       	brne	.-22     	; 0x1ae4 <__mulsf3_pse+0x64>
    1afa:	9e 3f       	cpi	r25, 0xFE	; 254
    1afc:	51 05       	cpc	r21, r1
    1afe:	80 f0       	brcs	.+32     	; 0x1b20 <__mulsf3_pse+0xa0>
    1b00:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_inf>
    1b04:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_szero>
    1b08:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0a:	e4 f3       	brlt	.-8      	; 0x1b04 <__mulsf3_pse+0x84>
    1b0c:	98 3e       	cpi	r25, 0xE8	; 232
    1b0e:	d4 f3       	brlt	.-12     	; 0x1b04 <__mulsf3_pse+0x84>
    1b10:	86 95       	lsr	r24
    1b12:	77 95       	ror	r23
    1b14:	67 95       	ror	r22
    1b16:	b7 95       	ror	r27
    1b18:	f7 95       	ror	r31
    1b1a:	e7 95       	ror	r30
    1b1c:	9f 5f       	subi	r25, 0xFF	; 255
    1b1e:	c1 f7       	brne	.-16     	; 0x1b10 <__mulsf3_pse+0x90>
    1b20:	fe 2b       	or	r31, r30
    1b22:	88 0f       	add	r24, r24
    1b24:	91 1d       	adc	r25, r1
    1b26:	96 95       	lsr	r25
    1b28:	87 95       	ror	r24
    1b2a:	97 f9       	bld	r25, 7
    1b2c:	08 95       	ret

00001b2e <do_rand>:
    1b2e:	8f 92       	push	r8
    1b30:	9f 92       	push	r9
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	ec 01       	movw	r28, r24
    1b44:	68 81       	ld	r22, Y
    1b46:	79 81       	ldd	r23, Y+1	; 0x01
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	61 15       	cp	r22, r1
    1b4e:	71 05       	cpc	r23, r1
    1b50:	81 05       	cpc	r24, r1
    1b52:	91 05       	cpc	r25, r1
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <do_rand+0x30>
    1b56:	64 e2       	ldi	r22, 0x24	; 36
    1b58:	79 ed       	ldi	r23, 0xD9	; 217
    1b5a:	8b e5       	ldi	r24, 0x5B	; 91
    1b5c:	97 e0       	ldi	r25, 0x07	; 7
    1b5e:	2d e1       	ldi	r18, 0x1D	; 29
    1b60:	33 ef       	ldi	r19, 0xF3	; 243
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__divmodsi4>
    1b6a:	49 01       	movw	r8, r18
    1b6c:	5a 01       	movw	r10, r20
    1b6e:	9b 01       	movw	r18, r22
    1b70:	ac 01       	movw	r20, r24
    1b72:	a7 ea       	ldi	r26, 0xA7	; 167
    1b74:	b1 e4       	ldi	r27, 0x41	; 65
    1b76:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__muluhisi3>
    1b7a:	6b 01       	movw	r12, r22
    1b7c:	7c 01       	movw	r14, r24
    1b7e:	ac ee       	ldi	r26, 0xEC	; 236
    1b80:	b4 ef       	ldi	r27, 0xF4	; 244
    1b82:	a5 01       	movw	r20, r10
    1b84:	94 01       	movw	r18, r8
    1b86:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__mulohisi3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8c 0d       	add	r24, r12
    1b90:	9d 1d       	adc	r25, r13
    1b92:	ae 1d       	adc	r26, r14
    1b94:	bf 1d       	adc	r27, r15
    1b96:	b7 ff       	sbrs	r27, 7
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <do_rand+0x72>
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	a1 09       	sbc	r26, r1
    1b9e:	b0 48       	sbci	r27, 0x80	; 128
    1ba0:	88 83       	st	Y, r24
    1ba2:	99 83       	std	Y+1, r25	; 0x01
    1ba4:	aa 83       	std	Y+2, r26	; 0x02
    1ba6:	bb 83       	std	Y+3, r27	; 0x03
    1ba8:	9f 77       	andi	r25, 0x7F	; 127
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	ff 90       	pop	r15
    1bb0:	ef 90       	pop	r14
    1bb2:	df 90       	pop	r13
    1bb4:	cf 90       	pop	r12
    1bb6:	bf 90       	pop	r11
    1bb8:	af 90       	pop	r10
    1bba:	9f 90       	pop	r9
    1bbc:	8f 90       	pop	r8
    1bbe:	08 95       	ret

00001bc0 <rand_r>:
    1bc0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <do_rand>
    1bc4:	08 95       	ret

00001bc6 <rand>:
    1bc6:	89 e0       	ldi	r24, 0x09	; 9
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <do_rand>
    1bce:	08 95       	ret

00001bd0 <srand>:
    1bd0:	a0 e0       	ldi	r26, 0x00	; 0
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	80 93 09 01 	sts	0x0109, r24
    1bd8:	90 93 0a 01 	sts	0x010A, r25
    1bdc:	a0 93 0b 01 	sts	0x010B, r26
    1be0:	b0 93 0c 01 	sts	0x010C, r27
    1be4:	08 95       	ret

00001be6 <eeprom_read_byte>:
    1be6:	f9 99       	sbic	0x1f, 1	; 31
    1be8:	fe cf       	rjmp	.-4      	; 0x1be6 <eeprom_read_byte>
    1bea:	92 bd       	out	0x22, r25	; 34
    1bec:	81 bd       	out	0x21, r24	; 33
    1bee:	f8 9a       	sbi	0x1f, 0	; 31
    1bf0:	99 27       	eor	r25, r25
    1bf2:	80 b5       	in	r24, 0x20	; 32
    1bf4:	08 95       	ret

00001bf6 <eeprom_write_byte>:
    1bf6:	26 2f       	mov	r18, r22

00001bf8 <eeprom_write_r18>:
    1bf8:	f9 99       	sbic	0x1f, 1	; 31
    1bfa:	fe cf       	rjmp	.-4      	; 0x1bf8 <eeprom_write_r18>
    1bfc:	1f ba       	out	0x1f, r1	; 31
    1bfe:	92 bd       	out	0x22, r25	; 34
    1c00:	81 bd       	out	0x21, r24	; 33
    1c02:	20 bd       	out	0x20, r18	; 32
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	fa 9a       	sbi	0x1f, 2	; 31
    1c0a:	f9 9a       	sbi	0x1f, 1	; 31
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	08 95       	ret

00001c12 <__divmodsi4>:
    1c12:	05 2e       	mov	r0, r21
    1c14:	97 fb       	bst	r25, 7
    1c16:	1e f4       	brtc	.+6      	; 0x1c1e <__divmodsi4+0xc>
    1c18:	00 94       	com	r0
    1c1a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__negsi2>
    1c1e:	57 fd       	sbrc	r21, 7
    1c20:	07 d0       	rcall	.+14     	; 0x1c30 <__divmodsi4_neg2>
    1c22:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
    1c26:	07 fc       	sbrc	r0, 7
    1c28:	03 d0       	rcall	.+6      	; 0x1c30 <__divmodsi4_neg2>
    1c2a:	4e f4       	brtc	.+18     	; 0x1c3e <__divmodsi4_exit>
    1c2c:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__negsi2>

00001c30 <__divmodsi4_neg2>:
    1c30:	50 95       	com	r21
    1c32:	40 95       	com	r20
    1c34:	30 95       	com	r19
    1c36:	21 95       	neg	r18
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c3c:	5f 4f       	sbci	r21, 0xFF	; 255

00001c3e <__divmodsi4_exit>:
    1c3e:	08 95       	ret

00001c40 <__negsi2>:
    1c40:	90 95       	com	r25
    1c42:	80 95       	com	r24
    1c44:	70 95       	com	r23
    1c46:	61 95       	neg	r22
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	08 95       	ret

00001c50 <__muluhisi3>:
    1c50:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__umulhisi3>
    1c54:	a5 9f       	mul	r26, r21
    1c56:	90 0d       	add	r25, r0
    1c58:	b4 9f       	mul	r27, r20
    1c5a:	90 0d       	add	r25, r0
    1c5c:	a4 9f       	mul	r26, r20
    1c5e:	80 0d       	add	r24, r0
    1c60:	91 1d       	adc	r25, r1
    1c62:	11 24       	eor	r1, r1
    1c64:	08 95       	ret

00001c66 <__mulshisi3>:
    1c66:	b7 ff       	sbrs	r27, 7
    1c68:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__muluhisi3>

00001c6c <__mulohisi3>:
    1c6c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__muluhisi3>
    1c70:	82 1b       	sub	r24, r18
    1c72:	93 0b       	sbc	r25, r19
    1c74:	08 95       	ret

00001c76 <__udivmodsi4>:
    1c76:	a1 e2       	ldi	r26, 0x21	; 33
    1c78:	1a 2e       	mov	r1, r26
    1c7a:	aa 1b       	sub	r26, r26
    1c7c:	bb 1b       	sub	r27, r27
    1c7e:	fd 01       	movw	r30, r26
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <__udivmodsi4_ep>

00001c82 <__udivmodsi4_loop>:
    1c82:	aa 1f       	adc	r26, r26
    1c84:	bb 1f       	adc	r27, r27
    1c86:	ee 1f       	adc	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	a2 17       	cp	r26, r18
    1c8c:	b3 07       	cpc	r27, r19
    1c8e:	e4 07       	cpc	r30, r20
    1c90:	f5 07       	cpc	r31, r21
    1c92:	20 f0       	brcs	.+8      	; 0x1c9c <__udivmodsi4_ep>
    1c94:	a2 1b       	sub	r26, r18
    1c96:	b3 0b       	sbc	r27, r19
    1c98:	e4 0b       	sbc	r30, r20
    1c9a:	f5 0b       	sbc	r31, r21

00001c9c <__udivmodsi4_ep>:
    1c9c:	66 1f       	adc	r22, r22
    1c9e:	77 1f       	adc	r23, r23
    1ca0:	88 1f       	adc	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	1a 94       	dec	r1
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <__udivmodsi4_loop>
    1ca8:	60 95       	com	r22
    1caa:	70 95       	com	r23
    1cac:	80 95       	com	r24
    1cae:	90 95       	com	r25
    1cb0:	9b 01       	movw	r18, r22
    1cb2:	ac 01       	movw	r20, r24
    1cb4:	bd 01       	movw	r22, r26
    1cb6:	cf 01       	movw	r24, r30
    1cb8:	08 95       	ret

00001cba <_exit>:
    1cba:	f8 94       	cli

00001cbc <__stop_program>:
    1cbc:	ff cf       	rjmp	.-2      	; 0x1cbc <__stop_program>
