
build/regret_follower.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	e6 03       	fmuls	r22, r22
      6a:	62 04       	cpc	r6, r2
      6c:	ba 03       	fmulsu	r19, r18
      6e:	b1 03       	fmuls	r19, r17
      70:	b7 03       	fmuls	r19, r23
      72:	44 04       	cpc	r4, r4
      74:	39 04       	cpc	r3, r9
      76:	c4 0a       	sbc	r12, r20
      78:	a1 09       	sbc	r26, r1
      7a:	a1 09       	sbc	r26, r1
      7c:	c1 0a       	sbc	r12, r17
      7e:	cd 0a       	sbc	r12, r29
      80:	bd 0a       	sbc	r11, r29
      82:	d4 0a       	sbc	r13, r20
      84:	d0 0a       	sbc	r13, r16
      86:	d8 0a       	sbc	r13, r24
      88:	90 0a       	sbc	r9, r16
      8a:	62 0a       	sbc	r6, r18

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e6       	ldi	r30, 0x64	; 100
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 31       	cpi	r26, 0x1A	; 26
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e1       	ldi	r26, 0x1A	; 26
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a6 39       	cpi	r26, 0x96	; 150
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 0a 0c 	call	0x1814	; 0x1814 <main>
      da:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <message_rx>:
        //previous_light = current_light;
    }
}

void message_rx(message_t *m, distance_measurement_t *d)
{
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
      f8:	20 91 26 01 	lds	r18, 0x0126
      fc:	30 91 27 01 	lds	r19, 0x0127
     100:	23 2b       	or	r18, r19
     102:	a9 f4       	brne	.+42     	; 0x12e <message_rx+0x3a>
     104:	ec 01       	movw	r28, r24
    {
        new_message = 1;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 27 01 	sts	0x0127, r25
     10e:	80 93 26 01 	sts	0x0126, r24
        current_distance = estimate_distance(d);
     112:	cb 01       	movw	r24, r22
     114:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <estimate_distance>
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	90 93 23 01 	sts	0x0123, r25
     11e:	80 93 22 01 	sts	0x0122, r24
        received_message = m->data[0];
     122:	88 81       	ld	r24, Y
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	90 93 29 01 	sts	0x0129, r25
     12a:	80 93 28 01 	sts	0x0128, r24
    }
}
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <setup>:
    // Compute the average.
    current_light = sum / number_of_samples;
}*/

void setup()
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     138:	80 91 24 01 	lds	r24, 0x0124
     13c:	90 91 25 01 	lds	r25, 0x0125
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	91 f0       	breq	.+36     	; 0x168 <setup+0x34>
    {
        current_motion = new_motion;
     144:	c1 e0       	ldi	r28, 0x01	; 1
     146:	d0 e0       	ldi	r29, 0x00	; 0
     148:	d0 93 25 01 	sts	0x0125, r29
     14c:	c0 93 24 01 	sts	0x0124, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     150:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     154:	60 91 8e 01 	lds	r22, 0x018E
     158:	80 91 8d 01 	lds	r24, 0x018D
     15c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 1;
     160:	d0 93 1f 01 	sts	0x011F, r29
     164:	c0 93 1e 01 	sts	0x011E, r28

void setup()
{
    // This ensures that the robot starts moving.
    set_motion(FORWARD);
    last_update = kilo_ticks;
     168:	80 91 55 01 	lds	r24, 0x0155
     16c:	90 91 56 01 	lds	r25, 0x0156
     170:	a0 91 57 01 	lds	r26, 0x0157
     174:	b0 91 58 01 	lds	r27, 0x0158
     178:	80 93 2e 01 	sts	0x012E, r24
     17c:	90 93 2f 01 	sts	0x012F, r25
     180:	a0 93 30 01 	sts	0x0130, r26
     184:	b0 93 31 01 	sts	0x0131, r27
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <loop>:

void loop()
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
    //printf("light intensity: %d\n", get_ambientlight());
    //sample_light();
    if (kilo_ticks > (last_update + 16))
     192:	40 91 55 01 	lds	r20, 0x0155
     196:	50 91 56 01 	lds	r21, 0x0156
     19a:	60 91 57 01 	lds	r22, 0x0157
     19e:	70 91 58 01 	lds	r23, 0x0158
     1a2:	80 91 2e 01 	lds	r24, 0x012E
     1a6:	90 91 2f 01 	lds	r25, 0x012F
     1aa:	a0 91 30 01 	lds	r26, 0x0130
     1ae:	b0 91 31 01 	lds	r27, 0x0131
     1b2:	40 96       	adiw	r24, 0x10	; 16
     1b4:	a1 1d       	adc	r26, r1
     1b6:	b1 1d       	adc	r27, r1
     1b8:	84 17       	cp	r24, r20
     1ba:	95 07       	cpc	r25, r21
     1bc:	a6 07       	cpc	r26, r22
     1be:	b7 07       	cpc	r27, r23
     1c0:	08 f0       	brcs	.+2      	; 0x1c4 <loop+0x36>
     1c2:	4b c0       	rjmp	.+150    	; 0x25a <loop+0xcc>
    {
       last_update = kilo_ticks;
     1c4:	80 91 55 01 	lds	r24, 0x0155
     1c8:	90 91 56 01 	lds	r25, 0x0156
     1cc:	a0 91 57 01 	lds	r26, 0x0157
     1d0:	b0 91 58 01 	lds	r27, 0x0158
     1d4:	80 93 2e 01 	sts	0x012E, r24
     1d8:	90 93 2f 01 	sts	0x012F, r25
     1dc:	a0 93 30 01 	sts	0x0130, r26
     1e0:	b0 93 31 01 	sts	0x0131, r27
        if (new_message == 1){
     1e4:	c0 91 26 01 	lds	r28, 0x0126
     1e8:	d0 91 27 01 	lds	r29, 0x0127
     1ec:	c1 30       	cpi	r28, 0x01	; 1
     1ee:	d1 05       	cpc	r29, r1
     1f0:	b9 f1       	breq	.+110    	; 0x260 <loop+0xd2>
        }
    }
}

void random_turn(){
	int random_number = rand_hard();
     1f2:	0e 94 59 05 	call	0xab2	; 0xab2 <rand_hard>
    int random_direction = (random_number % 2);

    if (random_direction == 0)
     1f6:	80 ff       	sbrs	r24, 0
     1f8:	9a c0       	rjmp	.+308    	; 0x32e <loop+0x1a0>
        set_color(RGB(1, 0, 0));
        set_motion(LEFT);
    }
    else if (random_direction == 1)
    {
        set_color(RGB(0, 0, 1));
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	0e 94 1b 09 	call	0x1236	; 0x1236 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     200:	20 91 24 01 	lds	r18, 0x0124
     204:	30 91 25 01 	lds	r19, 0x0125
     208:	23 30       	cpi	r18, 0x03	; 3
     20a:	31 05       	cpc	r19, r1
     20c:	d1 f0       	breq	.+52     	; 0x242 <loop+0xb4>
    {
        current_motion = new_motion;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 25 01 	sts	0x0125, r25
     216:	80 93 24 01 	sts	0x0124, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     21a:	80 91 1e 01 	lds	r24, 0x011E
     21e:	90 91 1f 01 	lds	r25, 0x011F
     222:	89 2b       	or	r24, r25
     224:	09 f4       	brne	.+2      	; 0x228 <loop+0x9a>
     226:	c2 c0       	rjmp	.+388    	; 0x3ac <loop+0x21e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     228:	60 91 7b 01 	lds	r22, 0x017B
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 0;
     232:	10 92 1f 01 	sts	0x011F, r1
     236:	10 92 1e 01 	sts	0x011E, r1
     23a:	20 91 24 01 	lds	r18, 0x0124
     23e:	30 91 25 01 	lds	r19, 0x0125
     242:	80 91 22 01 	lds	r24, 0x0122
     246:	90 91 23 01 	lds	r25, 0x0123
            random_turn();


        }

        previous_motion = current_motion;
     24a:	30 93 1d 01 	sts	0x011D, r19
     24e:	20 93 1c 01 	sts	0x011C, r18

    previous_distance = current_distance;
     252:	90 93 21 01 	sts	0x0121, r25
     256:	80 93 20 01 	sts	0x0120, r24

        //previous_light = current_light;
    }
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret
    //sample_light();
    if (kilo_ticks > (last_update + 16))
    {
       last_update = kilo_ticks;
        if (new_message == 1){
            new_message = 0;
     260:	10 92 27 01 	sts	0x0127, r1
     264:	10 92 26 01 	sts	0x0126, r1
            if (current_distance < previous_distance)
     268:	80 91 22 01 	lds	r24, 0x0122
     26c:	90 91 23 01 	lds	r25, 0x0123
     270:	20 91 20 01 	lds	r18, 0x0120
     274:	30 91 21 01 	lds	r19, 0x0121
     278:	82 17       	cp	r24, r18
     27a:	93 07       	cpc	r25, r19
     27c:	f4 f0       	brlt	.+60     	; 0x2ba <loop+0x12c>
            {
            	motion_count = 0;
                set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
            }
            else if(previous_motion == FORWARD || previous_motion == STOP){
     27e:	20 91 1c 01 	lds	r18, 0x011C
     282:	30 91 1d 01 	lds	r19, 0x011D
     286:	22 30       	cpi	r18, 0x02	; 2
     288:	31 05       	cpc	r19, r1
     28a:	08 f4       	brcc	.+2      	; 0x28e <loop+0x100>
     28c:	b2 cf       	rjmp	.-156    	; 0x1f2 <loop+0x64>
            	random_turn();
            }
            else if(previous_motion == LEFT){
     28e:	22 30       	cpi	r18, 0x02	; 2
     290:	31 05       	cpc	r19, r1
     292:	09 f4       	brne	.+2      	; 0x296 <loop+0x108>
     294:	75 c0       	rjmp	.+234    	; 0x380 <loop+0x1f2>
            		motion_count = 0;
	            	set_color(RGB(0,0,1));
	            	set_motion(RIGHT);
            	}
            }
            else if(previous_motion == RIGHT){
     296:	23 30       	cpi	r18, 0x03	; 3
     298:	31 05       	cpc	r19, r1
     29a:	b9 f1       	breq	.+110    	; 0x30a <loop+0x17c>
     29c:	20 91 24 01 	lds	r18, 0x0124
     2a0:	30 91 25 01 	lds	r19, 0x0125
            random_turn();


        }

        previous_motion = current_motion;
     2a4:	30 93 1d 01 	sts	0x011D, r19
     2a8:	20 93 1c 01 	sts	0x011C, r18

    previous_distance = current_distance;
     2ac:	90 93 21 01 	sts	0x0121, r25
     2b0:	80 93 20 01 	sts	0x0120, r24

        //previous_light = current_light;
    }
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret
       last_update = kilo_ticks;
        if (new_message == 1){
            new_message = 0;
            if (current_distance < previous_distance)
            {
            	motion_count = 0;
     2ba:	10 92 1b 01 	sts	0x011B, r1
     2be:	10 92 1a 01 	sts	0x011A, r1
                set_color(RGB(0, 1, 0));
     2c2:	84 e0       	ldi	r24, 0x04	; 4
     2c4:	0e 94 1b 09 	call	0x1236	; 0x1236 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2c8:	20 91 24 01 	lds	r18, 0x0124
     2cc:	30 91 25 01 	lds	r19, 0x0125
     2d0:	21 30       	cpi	r18, 0x01	; 1
     2d2:	31 05       	cpc	r19, r1
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <loop+0x14a>
     2d6:	b5 cf       	rjmp	.-150    	; 0x242 <loop+0xb4>
    {
        current_motion = new_motion;
     2d8:	d0 93 25 01 	sts	0x0125, r29
     2dc:	c0 93 24 01 	sts	0x0124, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2e0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2e4:	60 91 8e 01 	lds	r22, 0x018E
     2e8:	80 91 8d 01 	lds	r24, 0x018D
     2ec:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 1;
     2f0:	d0 93 1f 01 	sts	0x011F, r29
     2f4:	c0 93 1e 01 	sts	0x011E, r28
     2f8:	20 91 24 01 	lds	r18, 0x0124
     2fc:	30 91 25 01 	lds	r19, 0x0125
     300:	80 91 22 01 	lds	r24, 0x0122
     304:	90 91 23 01 	lds	r25, 0x0123
     308:	cd cf       	rjmp	.-102    	; 0x2a4 <loop+0x116>
	            	set_color(RGB(0,0,1));
	            	set_motion(RIGHT);
            	}
            }
            else if(previous_motion == RIGHT){
            	motion_count += 1;
     30a:	20 91 1a 01 	lds	r18, 0x011A
     30e:	30 91 1b 01 	lds	r19, 0x011B
     312:	2f 5f       	subi	r18, 0xFF	; 255
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	30 93 1b 01 	sts	0x011B, r19
     31a:	20 93 1a 01 	sts	0x011A, r18
            	if(motion_count > 4){
     31e:	25 30       	cpi	r18, 0x05	; 5
     320:	31 05       	cpc	r19, r1
     322:	0c f4       	brge	.+2      	; 0x326 <loop+0x198>
     324:	bb cf       	rjmp	.-138    	; 0x29c <loop+0x10e>
            		motion_count = 0;
     326:	10 92 1b 01 	sts	0x011B, r1
     32a:	10 92 1a 01 	sts	0x011A, r1
	int random_number = rand_hard();
    int random_direction = (random_number % 2);

    if (random_direction == 0)
    {
        set_color(RGB(1, 0, 0));
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 1b 09 	call	0x1236	; 0x1236 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     334:	20 91 24 01 	lds	r18, 0x0124
     338:	30 91 25 01 	lds	r19, 0x0125
     33c:	22 30       	cpi	r18, 0x02	; 2
     33e:	31 05       	cpc	r19, r1
     340:	09 f4       	brne	.+2      	; 0x344 <loop+0x1b6>
     342:	7f cf       	rjmp	.-258    	; 0x242 <loop+0xb4>
    {
        current_motion = new_motion;
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	90 93 25 01 	sts	0x0125, r25
     34c:	80 93 24 01 	sts	0x0124, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     350:	80 91 1e 01 	lds	r24, 0x011E
     354:	90 91 1f 01 	lds	r25, 0x011F
     358:	89 2b       	or	r24, r25
     35a:	29 f1       	breq	.+74     	; 0x3a6 <loop+0x218>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	80 91 8f 01 	lds	r24, 0x018F
     362:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 0;
     366:	10 92 1f 01 	sts	0x011F, r1
     36a:	10 92 1e 01 	sts	0x011E, r1
     36e:	20 91 24 01 	lds	r18, 0x0124
     372:	30 91 25 01 	lds	r19, 0x0125
     376:	80 91 22 01 	lds	r24, 0x0122
     37a:	90 91 23 01 	lds	r25, 0x0123
     37e:	92 cf       	rjmp	.-220    	; 0x2a4 <loop+0x116>
            }
            else if(previous_motion == FORWARD || previous_motion == STOP){
            	random_turn();
            }
            else if(previous_motion == LEFT){
            	motion_count += 1;
     380:	20 91 1a 01 	lds	r18, 0x011A
     384:	30 91 1b 01 	lds	r19, 0x011B
     388:	2f 5f       	subi	r18, 0xFF	; 255
     38a:	3f 4f       	sbci	r19, 0xFF	; 255
     38c:	30 93 1b 01 	sts	0x011B, r19
     390:	20 93 1a 01 	sts	0x011A, r18
            	if(motion_count > 4){
     394:	25 30       	cpi	r18, 0x05	; 5
     396:	31 05       	cpc	r19, r1
     398:	0c f4       	brge	.+2      	; 0x39c <loop+0x20e>
     39a:	80 cf       	rjmp	.-256    	; 0x29c <loop+0x10e>
            		motion_count = 0;
     39c:	10 92 1b 01 	sts	0x011B, r1
     3a0:	10 92 1a 01 	sts	0x011A, r1
     3a4:	2a cf       	rjmp	.-428    	; 0x1fa <loop+0x6c>
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     3a6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
     3aa:	d8 cf       	rjmp	.-80     	; 0x35c <loop+0x1ce>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     3ac:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
     3b0:	3b cf       	rjmp	.-394    	; 0x228 <loop+0x9a>

000003b2 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     3b2:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     3b4:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     3b6:	8c e0       	ldi	r24, 0x0C	; 12
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	90 93 c5 00 	sts	0x00C5, r25
     3be:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     3c2:	e0 ec       	ldi	r30, 0xC0	; 192
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	8d 7f       	andi	r24, 0xFD	; 253
     3ca:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     3cc:	e2 ec       	ldi	r30, 0xC2	; 194
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	86 60       	ori	r24, 0x06	; 6
     3d4:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     3d6:	e1 ec       	ldi	r30, 0xC1	; 193
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	90 93 93 01 	sts	0x0193, r25
     3e8:	80 93 92 01 	sts	0x0192, r24
    sei();
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <set_motion>:
//int previous_light = 0;
uint32_t last_update;

// Function to handle motion.
void set_motion(int new_motion)
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     3f4:	20 91 24 01 	lds	r18, 0x0124
     3f8:	30 91 25 01 	lds	r19, 0x0125
     3fc:	28 17       	cp	r18, r24
     3fe:	39 07       	cpc	r19, r25
     400:	79 f0       	breq	.+30     	; 0x420 <set_motion+0x30>
    {
        current_motion = new_motion;
     402:	90 93 25 01 	sts	0x0125, r25
     406:	80 93 24 01 	sts	0x0124, r24
        
        if (current_motion == STOP)
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	91 f1       	breq	.+100    	; 0x472 <set_motion+0x82>
     40e:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	91 05       	cpc	r25, r1
     414:	a1 f1       	breq	.+104    	; 0x47e <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	91 05       	cpc	r25, r1
     41a:	29 f0       	breq	.+10     	; 0x426 <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     41c:	03 97       	sbiw	r24, 0x03	; 3
     41e:	b9 f0       	breq	.+46     	; 0x44e <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     426:	80 91 1e 01 	lds	r24, 0x011E
     42a:	90 91 1f 01 	lds	r25, 0x011F
     42e:	89 2b       	or	r24, r25
     430:	11 f4       	brne	.+4      	; 0x436 <set_motion+0x46>
                spinup_motors();
     432:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
            set_motors(kilo_turn_left, 0);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	80 91 8f 01 	lds	r24, 0x018F
     43c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 0;
     440:	10 92 1f 01 	sts	0x011F, r1
     444:	10 92 1e 01 	sts	0x011E, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     44e:	80 91 1e 01 	lds	r24, 0x011E
     452:	90 91 1f 01 	lds	r25, 0x011F
     456:	89 2b       	or	r24, r25
     458:	f9 f0       	breq	.+62     	; 0x498 <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     45a:	60 91 7b 01 	lds	r22, 0x017B
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 0;
     464:	10 92 1f 01 	sts	0x011F, r1
     468:	10 92 1e 01 	sts	0x011E, r1
        }
    }
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     47a:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     47e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     482:	60 91 8e 01 	lds	r22, 0x018E
     486:	80 91 8d 01 	lds	r24, 0x018D
     48a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 1;
     48e:	d0 93 1f 01 	sts	0x011F, r29
     492:	c0 93 1e 01 	sts	0x011E, r28
     496:	c4 cf       	rjmp	.-120    	; 0x420 <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     498:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
     49c:	de cf       	rjmp	.-68     	; 0x45a <set_motion+0x6a>

0000049e <random_turn>:
        }
    }
}

void random_turn(){
	int random_number = rand_hard();
     49e:	0e 94 59 05 	call	0xab2	; 0xab2 <rand_hard>
    int random_direction = (random_number % 2);

    if (random_direction == 0)
     4a2:	80 ff       	sbrs	r24, 0
     4a4:	1f c0       	rjmp	.+62     	; 0x4e4 <random_turn+0x46>
        set_color(RGB(1, 0, 0));
        set_motion(LEFT);
    }
    else if (random_direction == 1)
    {
        set_color(RGB(0, 0, 1));
     4a6:	80 e1       	ldi	r24, 0x10	; 16
     4a8:	0e 94 1b 09 	call	0x1236	; 0x1236 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     4ac:	80 91 24 01 	lds	r24, 0x0124
     4b0:	90 91 25 01 	lds	r25, 0x0125
     4b4:	03 97       	sbiw	r24, 0x03	; 3
     4b6:	a9 f0       	breq	.+42     	; 0x4e2 <random_turn+0x44>
    {
        current_motion = new_motion;
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	90 93 25 01 	sts	0x0125, r25
     4c0:	80 93 24 01 	sts	0x0124, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     4c4:	80 91 1e 01 	lds	r24, 0x011E
     4c8:	90 91 1f 01 	lds	r25, 0x011F
     4cc:	89 2b       	or	r24, r25
     4ce:	59 f1       	breq	.+86     	; 0x526 <random_turn+0x88>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     4d0:	60 91 7b 01 	lds	r22, 0x017B
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 0;
     4da:	10 92 1f 01 	sts	0x011F, r1
     4de:	10 92 1e 01 	sts	0x011E, r1
     4e2:	08 95       	ret
	int random_number = rand_hard();
    int random_direction = (random_number % 2);

    if (random_direction == 0)
    {
        set_color(RGB(1, 0, 0));
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 1b 09 	call	0x1236	; 0x1236 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     4ea:	80 91 24 01 	lds	r24, 0x0124
     4ee:	90 91 25 01 	lds	r25, 0x0125
     4f2:	02 97       	sbiw	r24, 0x02	; 2
     4f4:	b1 f3       	breq	.-20     	; 0x4e2 <random_turn+0x44>
    {
        current_motion = new_motion;
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	90 93 25 01 	sts	0x0125, r25
     4fe:	80 93 24 01 	sts	0x0124, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     502:	80 91 1e 01 	lds	r24, 0x011E
     506:	90 91 1f 01 	lds	r25, 0x011F
     50a:	89 2b       	or	r24, r25
     50c:	11 f4       	brne	.+4      	; 0x512 <random_turn+0x74>
                spinup_motors();
     50e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
            set_motors(kilo_turn_left, 0);
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	80 91 8f 01 	lds	r24, 0x018F
     518:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <set_motors>
            both_spined = 0;
     51c:	10 92 1f 01 	sts	0x011F, r1
     520:	10 92 1e 01 	sts	0x011E, r1
     524:	08 95       	ret
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     526:	0e 94 ff 04 	call	0x9fe	; 0x9fe <spinup_motors>
     52a:	d2 cf       	rjmp	.-92     	; 0x4d0 <random_turn+0x32>

0000052c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     52c:	08 95       	ret

0000052e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	08 95       	ret

00000534 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     534:	08 95       	ret

00000536 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
    cli();
     544:	f8 94       	cli

    ports_off();
     546:	14 b8       	out	0x04, r1	; 4
     548:	17 b8       	out	0x07, r1	; 7
     54a:	1a b8       	out	0x0a, r1	; 10
     54c:	15 b8       	out	0x05, r1	; 5
     54e:	18 b8       	out	0x08, r1	; 8
     550:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     552:	52 9a       	sbi	0x0a, 2	; 10
     554:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     556:	14 bc       	out	0x24, r1	; 36
     558:	85 e0       	ldi	r24, 0x05	; 5
     55a:	85 bd       	out	0x25, r24	; 37
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	87 bd       	out	0x27, r24	; 39
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     566:	10 92 80 00 	sts	0x0080, r1
     56a:	10 92 81 00 	sts	0x0081, r1
     56e:	2f e8       	ldi	r18, 0x8F	; 143
     570:	3b e0       	ldi	r19, 0x0B	; 11
     572:	30 93 89 00 	sts	0x0089, r19
     576:	20 93 88 00 	sts	0x0088, r18
     57a:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     57e:	53 98       	cbi	0x0a, 3	; 10
     580:	23 98       	cbi	0x04, 3	; 4
     582:	91 ea       	ldi	r25, 0xA1	; 161
     584:	90 93 b0 00 	sts	0x00B0, r25
     588:	80 93 b1 00 	sts	0x00B1, r24
     58c:	10 92 b4 00 	sts	0x00B4, r1
     590:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     594:	8b e0       	ldi	r24, 0x0B	; 11
     596:	80 bf       	out	0x30, r24	; 48
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	80 93 7c 00 	sts	0x007C, r24
     5a4:	83 e8       	ldi	r24, 0x83	; 131
     5a6:	80 93 7a 00 	sts	0x007A, r24
     5aa:	80 91 7a 00 	lds	r24, 0x007A
     5ae:	80 64       	ori	r24, 0x40	; 64
     5b0:	80 93 7a 00 	sts	0x007A, r24
     5b4:	80 91 7a 00 	lds	r24, 0x007A
     5b8:	86 fd       	sbrc	r24, 6
     5ba:	fc cf       	rjmp	.-8      	; 0x5b4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     5bc:	10 92 7c 00 	sts	0x007C, r1
     5c0:	83 ea       	ldi	r24, 0xA3	; 163
     5c2:	80 93 7a 00 	sts	0x007A, r24
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
    if (osccal != 0xFF)
     5d4:	8f 3f       	cpi	r24, 0xFF	; 255
     5d6:	11 f0       	breq	.+4      	; 0x5dc <kilo_init+0xa6>
        OSCCAL = osccal;
     5d8:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     5dc:	10 92 59 01 	sts	0x0159, r1
    rx_leadingbit = 1;
     5e0:	c1 e0       	ldi	r28, 0x01	; 1
     5e2:	c0 93 32 01 	sts	0x0132, r28
    rx_leadingbyte = 1;
     5e6:	c0 93 76 01 	sts	0x0176, r28
    rx_byteindex = 0;
     5ea:	10 92 50 01 	sts	0x0150, r1
    rx_bytevalue = 0;
     5ee:	10 92 8a 01 	sts	0x018A, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     5f2:	80 e9       	ldi	r24, 0x90	; 144
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     5fa:	80 93 4f 01 	sts	0x014F, r24
    if (tx_mask & ~TX_MASK_MAX)
     5fe:	80 91 4f 01 	lds	r24, 0x014F
     602:	88 73       	andi	r24, 0x38	; 56
     604:	11 f0       	breq	.+4      	; 0x60a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     606:	c0 93 4f 01 	sts	0x014F, r28
    tx_clock = 0;
     60a:	10 92 7a 01 	sts	0x017A, r1
     60e:	10 92 79 01 	sts	0x0179, r1
    tx_increment = 255;
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	90 93 78 01 	sts	0x0178, r25
     61a:	80 93 77 01 	sts	0x0177, r24
    kilo_ticks = 0;
     61e:	10 92 55 01 	sts	0x0155, r1
     622:	10 92 56 01 	sts	0x0156, r1
     626:	10 92 57 01 	sts	0x0157, r1
     62a:	10 92 58 01 	sts	0x0158, r1
    kilo_state = IDLE;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 2d 01 	sts	0x012D, r24
    kilo_tx_period = 3906;
     634:	82 e4       	ldi	r24, 0x42	; 66
     636:	9f e0       	ldi	r25, 0x0F	; 15
     638:	90 93 89 01 	sts	0x0189, r25
     63c:	80 93 88 01 	sts	0x0188, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     640:	80 eb       	ldi	r24, 0xB0	; 176
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     648:	c8 2f       	mov	r28, r24
     64a:	81 eb       	ldi	r24, 0xB1	; 177
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     652:	2c 2f       	mov	r18, r28
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	38 2b       	or	r19, r24
     658:	30 93 8c 01 	sts	0x018C, r19
     65c:	20 93 8b 01 	sts	0x018B, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     660:	85 e0       	ldi	r24, 0x05	; 5
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     668:	80 93 8f 01 	sts	0x018F, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     66c:	89 e0       	ldi	r24, 0x09	; 9
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     674:	80 93 7b 01 	sts	0x017B, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     678:	8c e0       	ldi	r24, 0x0C	; 12
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     680:	80 93 8d 01 	sts	0x018D, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     684:	84 e1       	ldi	r24, 0x14	; 20
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     68c:	80 93 8e 01 	sts	0x018E, r24
     690:	5a e5       	ldi	r21, 0x5A	; 90
     692:	e5 2e       	mov	r14, r21
     694:	51 e0       	ldi	r21, 0x01	; 1
     696:	f5 2e       	mov	r15, r21
     698:	03 e3       	ldi	r16, 0x33	; 51
     69a:	11 e0       	ldi	r17, 0x01	; 1
     69c:	c0 e2       	ldi	r28, 0x20	; 32
     69e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     6a0:	ce 01       	movw	r24, r28
     6a2:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     6a6:	d8 2e       	mov	r13, r24
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     6b0:	2d 2d       	mov	r18, r13
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	32 2f       	mov	r19, r18
     6b6:	22 27       	eor	r18, r18
     6b8:	28 2b       	or	r18, r24
     6ba:	f7 01       	movw	r30, r14
     6bc:	21 93       	st	Z+, r18
     6be:	31 93       	st	Z+, r19
     6c0:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     6c2:	ce 01       	movw	r24, r28
     6c4:	c0 96       	adiw	r24, 0x30	; 48
     6c6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     6ca:	d8 2e       	mov	r13, r24
     6cc:	ce 01       	movw	r24, r28
     6ce:	c1 96       	adiw	r24, 0x31	; 49
     6d0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <eeprom_read_byte>
     6d4:	2d 2d       	mov	r18, r13
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	32 2f       	mov	r19, r18
     6da:	22 27       	eor	r18, r18
     6dc:	28 2b       	or	r18, r24
     6de:	f8 01       	movw	r30, r16
     6e0:	21 93       	st	Z+, r18
     6e2:	31 93       	st	Z+, r19
     6e4:	8f 01       	movw	r16, r30
     6e6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     6e8:	cc 33       	cpi	r28, 0x3C	; 60
     6ea:	d1 05       	cpc	r29, r1
     6ec:	c9 f6       	brne	.-78     	; 0x6a0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     6ee:	78 94       	sei
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	08 95       	ret

00000700 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	8f 93       	push	r24
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	a8 95       	wdr
     712:	80 91 60 00 	lds	r24, 0x0060
     716:	88 61       	ori	r24, 0x18	; 24
     718:	80 93 60 00 	sts	0x0060, r24
     71c:	10 92 60 00 	sts	0x0060, r1
     720:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     72e:	3c 01       	movw	r6, r24
     730:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     732:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     734:	99 24       	eor	r9, r9
     736:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     738:	84 e0       	ldi	r24, 0x04	; 4
     73a:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     73c:	96 e0       	ldi	r25, 0x06	; 6
     73e:	a9 2e       	mov	r10, r25
     740:	23 e8       	ldi	r18, 0x83	; 131
     742:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     744:	38 e1       	ldi	r19, 0x18	; 24
     746:	d3 2e       	mov	r13, r19
     748:	49 e2       	ldi	r20, 0x29	; 41
     74a:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     74c:	90 91 2d 01 	lds	r25, 0x012D
     750:	e9 2f       	mov	r30, r25
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	e7 30       	cpi	r30, 0x07	; 7
     756:	f1 05       	cpc	r31, r1
     758:	c8 f7       	brcc	.-14     	; 0x74c <kilo_start+0x1e>
     75a:	ec 5c       	subi	r30, 0xCC	; 204
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     762:	11 23       	and	r17, r17
     764:	09 f4       	brne	.+2      	; 0x768 <kilo_start+0x3a>
     766:	fc c0       	rjmp	.+504    	; 0x960 <__stack+0x61>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     768:	c0 92 2d 01 	sts	0x012D, r12
     76c:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     76e:	fe 01       	movw	r30, r28
     770:	09 95       	icall
                break;
     772:	ec cf       	rjmp	.-40     	; 0x74c <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     774:	80 91 59 01 	lds	r24, 0x0159
     778:	81 11       	cpse	r24, r1
     77a:	eb c0       	rjmp	.+470    	; 0x952 <__stack+0x53>
        cli();                                    // disable interrupts
     77c:	f8 94       	cli
        adc_setup_conversion(6);
     77e:	a0 92 7c 00 	sts	0x007C, r10
     782:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     786:	80 91 7a 00 	lds	r24, 0x007A
     78a:	80 64       	ori	r24, 0x40	; 64
     78c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     790:	90 91 7a 00 	lds	r25, 0x007A
     794:	96 fd       	sbrc	r25, 6
     796:	fc cf       	rjmp	.-8      	; 0x790 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     798:	80 91 78 00 	lds	r24, 0x0078
     79c:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7a0:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     7a2:	8b 3a       	cpi	r24, 0xAB	; 171
     7a4:	e2 e0       	ldi	r30, 0x02	; 2
     7a6:	9e 07       	cpc	r25, r30
     7a8:	0c f0       	brlt	.+2      	; 0x7ac <kilo_start+0x7e>
     7aa:	ed c0       	rjmp	.+474    	; 0x986 <__stack+0x87>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     7ac:	89 38       	cpi	r24, 0x89	; 137
     7ae:	f2 e0       	ldi	r31, 0x02	; 2
     7b0:	9f 07       	cpc	r25, r31
     7b2:	0c f0       	brlt	.+2      	; 0x7b6 <kilo_start+0x88>
     7b4:	ef c0       	rjmp	.+478    	; 0x994 <__stack+0x95>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     7b6:	87 36       	cpi	r24, 0x67	; 103
     7b8:	92 40       	sbci	r25, 0x02	; 2
     7ba:	0c f4       	brge	.+2      	; 0x7be <kilo_start+0x90>
     7bc:	ca c0       	rjmp	.+404    	; 0x952 <__stack+0x53>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7be:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7c0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7c2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7c4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7c6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7c8:	3c 98       	cbi	0x07, 4	; 7
     7ca:	c0 cf       	rjmp	.-128    	; 0x74c <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     7cc:	f8 94       	cli
                acomp_off();
     7ce:	80 b7       	in	r24, 0x30	; 48
     7d0:	87 7f       	andi	r24, 0xF7	; 247
     7d2:	80 bf       	out	0x30, r24	; 48
                adc_off();
     7d4:	80 91 7a 00 	lds	r24, 0x007A
     7d8:	8f 77       	andi	r24, 0x7F	; 127
     7da:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     7de:	14 b8       	out	0x04, r1	; 4
     7e0:	17 b8       	out	0x07, r1	; 7
     7e2:	1a b8       	out	0x0a, r1	; 10
     7e4:	15 b8       	out	0x05, r1	; 5
     7e6:	18 b8       	out	0x08, r1	; 8
     7e8:	1b b8       	out	0x0b, r1	; 11
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	a8 95       	wdr
     7f0:	d0 92 60 00 	sts	0x0060, r13
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     7fa:	80 91 60 00 	lds	r24, 0x0060
     7fe:	80 64       	ori	r24, 0x40	; 64
     800:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     804:	93 b7       	in	r25, 0x33	; 51
     806:	91 7f       	andi	r25, 0xF1	; 241
     808:	94 60       	ori	r25, 0x04	; 4
     80a:	93 bf       	out	0x33, r25	; 51
                cli();
     80c:	f8 94       	cli
                sleep_enable();
     80e:	83 b7       	in	r24, 0x33	; 51
     810:	81 60       	ori	r24, 0x01	; 1
     812:	83 bf       	out	0x33, r24	; 51
                sei();
     814:	78 94       	sei
                sleep_cpu();
     816:	88 95       	sleep
                sleep_disable();
     818:	83 b7       	in	r24, 0x33	; 51
     81a:	8e 7f       	andi	r24, 0xFE	; 254
     81c:	83 bf       	out	0x33, r24	; 51
                sei();
     81e:	78 94       	sei
                rx_busy = 0;
     820:	10 92 59 01 	sts	0x0159, r1
                ports_on();
     824:	52 9a       	sbi	0x0a, 2	; 10
     826:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     828:	80 91 7a 00 	lds	r24, 0x007A
     82c:	80 68       	ori	r24, 0x80	; 128
     82e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     832:	87 e5       	ldi	r24, 0x57	; 87
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <kilo_start+0x108>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <kilo_start+0x10e>
     83c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     83e:	80 b7       	in	r24, 0x30	; 48
     840:	88 61       	ori	r24, 0x18	; 24
     842:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     844:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     846:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     848:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     84a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     84c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     84e:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     850:	ef e1       	ldi	r30, 0x1F	; 31
     852:	fe e4       	ldi	r31, 0x4E	; 78
     854:	31 97       	sbiw	r30, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <kilo_start+0x126>
     858:	00 c0       	rjmp	.+0      	; 0x85a <kilo_start+0x12c>
     85a:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     85c:	80 91 59 01 	lds	r24, 0x0159
     860:	81 11       	cpse	r24, r1
     862:	81 c0       	rjmp	.+258    	; 0x966 <__stack+0x67>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     864:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     866:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     868:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     86a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     86c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     86e:	3c 98       	cbi	0x07, 4	; 7
     870:	6d cf       	rjmp	.-294    	; 0x74c <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     872:	80 91 2b 01 	lds	r24, 0x012B
     876:	81 11       	cpse	r24, r1
     878:	41 c0       	rjmp	.+130    	; 0x8fc <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     87a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     87e:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     882:	10 92 2c 01 	sts	0x012C, r1
     886:	62 cf       	rjmp	.-316    	; 0x74c <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     888:	48 99       	sbic	0x09, 0	; 9
     88a:	ec cf       	rjmp	.-40     	; 0x864 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     88c:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     88e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     890:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     892:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     894:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     896:	3c 98       	cbi	0x07, 4	; 7
     898:	8f ec       	ldi	r24, 0xCF	; 207
     89a:	97 e0       	ldi	r25, 0x07	; 7
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <kilo_start+0x16e>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <kilo_start+0x174>
     8a2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8a4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8a6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8a8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8aa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8ac:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8ae:	3c 98       	cbi	0x07, 4	; 7
     8b0:	9f ef       	ldi	r25, 0xFF	; 255
     8b2:	e1 ee       	ldi	r30, 0xE1	; 225
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	91 50       	subi	r25, 0x01	; 1
     8b8:	e0 40       	sbci	r30, 0x00	; 0
     8ba:	f0 40       	sbci	r31, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <kilo_start+0x188>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <kilo_start+0x192>
     8c0:	00 00       	nop
     8c2:	44 cf       	rjmp	.-376    	; 0x74c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8c4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8c6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     8c8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     8ca:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8cc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8ce:	3c 98       	cbi	0x07, 4	; 7
     8d0:	ef ec       	ldi	r30, 0xCF	; 207
     8d2:	f7 e0       	ldi	r31, 0x07	; 7
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <kilo_start+0x1a6>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <kilo_start+0x1ac>
     8da:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8dc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8de:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8e4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8e6:	3c 98       	cbi	0x07, 4	; 7
     8e8:	ff ef       	ldi	r31, 0xFF	; 255
     8ea:	21 ee       	ldi	r18, 0xE1	; 225
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	f1 50       	subi	r31, 0x01	; 1
     8f0:	20 40       	sbci	r18, 0x00	; 0
     8f2:	80 40       	sbci	r24, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <kilo_start+0x1c0>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <kilo_start+0x1ca>
     8f8:	00 00       	nop
     8fa:	28 cf       	rjmp	.-432    	; 0x74c <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     8fc:	90 91 2b 01 	lds	r25, 0x012B
     900:	80 91 2c 01 	lds	r24, 0x012C
     904:	98 17       	cp	r25, r24
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
     908:	21 cf       	rjmp	.-446    	; 0x74c <kilo_start+0x1e>
                        prev_motion = cur_motion;
     90a:	80 91 2b 01 	lds	r24, 0x012B
     90e:	80 93 2c 01 	sts	0x012C, r24
                        if (cur_motion == MOVE_LEFT) {
     912:	80 91 2b 01 	lds	r24, 0x012B
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	09 f4       	brne	.+2      	; 0x91c <__stack+0x1d>
     91a:	50 c0       	rjmp	.+160    	; 0x9bc <__stack+0xbd>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     91c:	80 91 2b 01 	lds	r24, 0x012B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     920:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     924:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	d9 f1       	breq	.+118    	; 0x9a2 <__stack+0xa3>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     92c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     930:	90 92 b4 00 	sts	0x00B4, r9
     934:	8f e2       	ldi	r24, 0x2F	; 47
     936:	95 e7       	ldi	r25, 0x75	; 117
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <__stack+0x39>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0x3f>
     93e:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     940:	80 91 8e 01 	lds	r24, 0x018E
     944:	90 91 8d 01 	lds	r25, 0x018D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     948:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     94c:	80 93 b4 00 	sts	0x00B4, r24
     950:	fd ce       	rjmp	.-518    	; 0x74c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     952:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     954:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     956:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     958:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     95a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     95c:	3c 98       	cbi	0x07, 4	; 7
     95e:	f6 ce       	rjmp	.-532    	; 0x74c <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     960:	f3 01       	movw	r30, r6
     962:	09 95       	icall
     964:	01 cf       	rjmp	.-510    	; 0x768 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     966:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     968:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     96a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     96c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     96e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     970:	3c 98       	cbi	0x07, 4	; 7
     972:	ff ef       	ldi	r31, 0xFF	; 255
     974:	20 e7       	ldi	r18, 0x70	; 112
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	f1 50       	subi	r31, 0x01	; 1
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <__stack+0x79>
     980:	00 c0       	rjmp	.+0      	; 0x982 <__stack+0x83>
     982:	00 00       	nop
     984:	6f cf       	rjmp	.-290    	; 0x864 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     986:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     988:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     98a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     98c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     98e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     990:	3c 98       	cbi	0x07, 4	; 7
     992:	dc ce       	rjmp	.-584    	; 0x74c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     994:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     996:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     998:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     99a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     99c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     99e:	3c 9a       	sbi	0x07, 4	; 7
     9a0:	d5 ce       	rjmp	.-598    	; 0x74c <kilo_start+0x1e>
     9a2:	ef e2       	ldi	r30, 0x2F	; 47
     9a4:	f5 e7       	ldi	r31, 0x75	; 117
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <__stack+0xa7>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <__stack+0xad>
     9ac:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     9ae:	80 91 7b 01 	lds	r24, 0x017B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9b2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     9b6:	80 93 b4 00 	sts	0x00B4, r24
     9ba:	c8 ce       	rjmp	.-624    	; 0x74c <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9bc:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     9c0:	10 92 b4 00 	sts	0x00B4, r1
     9c4:	8f e2       	ldi	r24, 0x2F	; 47
     9c6:	95 e7       	ldi	r25, 0x75	; 117
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <__stack+0xc9>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <__stack+0xcf>
     9ce:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     9d0:	80 91 8f 01 	lds	r24, 0x018F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9d4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     9d8:	10 92 b4 00 	sts	0x00B4, r1
     9dc:	b7 ce       	rjmp	.-658    	; 0x74c <kilo_start+0x1e>

000009de <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <delay+0x10>
     9e0:	ef ec       	ldi	r30, 0xCF	; 207
     9e2:	f7 e0       	ldi	r31, 0x07	; 7
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <delay+0x6>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <delay+0xc>
     9ea:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     9ec:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	b9 f7       	brne	.-18     	; 0x9e0 <delay+0x2>
     9f2:	08 95       	ret

000009f4 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9f4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     9f8:	60 93 b4 00 	sts	0x00B4, r22
     9fc:	08 95       	ret

000009fe <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     a04:	80 93 b4 00 	sts	0x00B4, r24
     a08:	8f e0       	ldi	r24, 0x0F	; 15
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	ef ec       	ldi	r30, 0xCF	; 207
     a0e:	f7 e0       	ldi	r31, 0x07	; 7
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <spinup_motors+0x12>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <spinup_motors+0x18>
     a16:	00 00       	nop
     a18:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     a1a:	c1 f7       	brne	.-16     	; 0xa0c <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     a1c:	08 95       	ret

00000a1e <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     a1e:	80 91 59 01 	lds	r24, 0x0159
     a22:	81 11       	cpse	r24, r1
     a24:	1e c0       	rjmp	.+60     	; 0xa62 <get_ambientlight+0x44>
        cli();
     a26:	f8 94       	cli
        adc_setup_conversion(7);
     a28:	87 e0       	ldi	r24, 0x07	; 7
     a2a:	80 93 7c 00 	sts	0x007C, r24
     a2e:	83 e8       	ldi	r24, 0x83	; 131
     a30:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a34:	80 91 7a 00 	lds	r24, 0x007A
     a38:	80 64       	ori	r24, 0x40	; 64
     a3a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a3e:	80 91 7a 00 	lds	r24, 0x007A
     a42:	86 fd       	sbrc	r24, 6
     a44:	fc cf       	rjmp	.-8      	; 0xa3e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     a46:	80 91 78 00 	lds	r24, 0x0078
     a4a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     a4e:	10 92 7c 00 	sts	0x007C, r1
     a52:	23 ea       	ldi	r18, 0xA3	; 163
     a54:	20 93 7a 00 	sts	0x007A, r18
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     a5e:	78 94       	sei
     a60:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     a66:	08 95       	ret

00000a68 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     a68:	80 91 59 01 	lds	r24, 0x0159
     a6c:	81 11       	cpse	r24, r1
     a6e:	1e c0       	rjmp	.+60     	; 0xaac <get_temperature+0x44>
        cli();
     a70:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     a72:	88 ec       	ldi	r24, 0xC8	; 200
     a74:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     a78:	87 e8       	ldi	r24, 0x87	; 135
     a7a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a7e:	80 91 7a 00 	lds	r24, 0x007A
     a82:	80 64       	ori	r24, 0x40	; 64
     a84:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a88:	80 91 7a 00 	lds	r24, 0x007A
     a8c:	86 fd       	sbrc	r24, 6
     a8e:	fc cf       	rjmp	.-8      	; 0xa88 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     a90:	80 91 78 00 	lds	r24, 0x0078
     a94:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     a98:	10 92 7c 00 	sts	0x007C, r1
     a9c:	23 ea       	ldi	r18, 0xA3	; 163
     a9e:	20 93 7a 00 	sts	0x007A, r18
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     aa8:	78 94       	sei
     aaa:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     ab0:	08 95       	ret

00000ab2 <rand_hard>:

uint8_t rand_hard() {
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     abe:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     ac0:	03 ea       	ldi	r16, 0xA3	; 163
     ac2:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     ac4:	d6 e0       	ldi	r29, 0x06	; 6
     ac6:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     ac8:	a1 e0       	ldi	r26, 0x01	; 1
     aca:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     acc:	60 e8       	ldi	r22, 0x80	; 128
     ace:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     ad0:	f8 94       	cli
            adc_setup_conversion(6);
     ad2:	d0 93 7c 00 	sts	0x007C, r29
     ad6:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     ada:	90 91 7a 00 	lds	r25, 0x007A
     ade:	90 64       	ori	r25, 0x40	; 64
     ae0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     ae4:	90 91 7a 00 	lds	r25, 0x007A
     ae8:	96 fd       	sbrc	r25, 6
     aea:	fc cf       	rjmp	.-8      	; 0xae4 <rand_hard+0x32>
            a = ADCW&0x1;
     aec:	20 91 78 00 	lds	r18, 0x0078
     af0:	30 91 79 00 	lds	r19, 0x0079
     af4:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     af6:	90 91 7a 00 	lds	r25, 0x007A
     afa:	90 64       	ori	r25, 0x40	; 64
     afc:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     b00:	90 91 7a 00 	lds	r25, 0x007A
     b04:	96 fd       	sbrc	r25, 6
     b06:	fc cf       	rjmp	.-8      	; 0xb00 <rand_hard+0x4e>
            b = ADCW&0x1;
     b08:	40 91 78 00 	lds	r20, 0x0078
     b0c:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     b10:	10 92 7c 00 	sts	0x007C, r1
     b14:	00 93 7a 00 	sts	0x007A, r16
     b18:	10 93 7b 00 	sts	0x007B, r17
            sei();
     b1c:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     b1e:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     b20:	24 13       	cpse	r18, r20
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <rand_hard+0x78>
     b24:	61 50       	subi	r22, 0x01	; 1
     b26:	71 09       	sbc	r23, r1
     b28:	99 f6       	brne	.-90     	; 0xad0 <rand_hard+0x1e>
        if (a)
     b2a:	22 23       	and	r18, r18
     b2c:	39 f0       	breq	.+14     	; 0xb3c <rand_hard+0x8a>
            num |= (1<<i);
     b2e:	9d 01       	movw	r18, r26
     b30:	0e 2e       	mov	r0, r30
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <rand_hard+0x84>
     b34:	22 0f       	add	r18, r18
     b36:	0a 94       	dec	r0
     b38:	ea f7       	brpl	.-6      	; 0xb34 <rand_hard+0x82>
     b3a:	82 2b       	or	r24, r18
     b3c:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     b3e:	e8 30       	cpi	r30, 0x08	; 8
     b40:	f1 05       	cpc	r31, r1
     b42:	09 f0       	breq	.+2      	; 0xb46 <rand_hard+0x94>
     b44:	c3 cf       	rjmp	.-122    	; 0xacc <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     b50:	80 91 0e 01 	lds	r24, 0x010E
     b54:	98 2f       	mov	r25, r24
     b56:	99 0f       	add	r25, r25
     b58:	99 0f       	add	r25, r25
     b5a:	99 0f       	add	r25, r25
     b5c:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     b5e:	90 91 2a 01 	lds	r25, 0x012A
     b62:	21 e0       	ldi	r18, 0x01	; 1
     b64:	29 0f       	add	r18, r25
     b66:	20 93 2a 01 	sts	0x012A, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     b6a:	28 2f       	mov	r18, r24
     b6c:	22 95       	swap	r18
     b6e:	26 95       	lsr	r18
     b70:	27 70       	andi	r18, 0x07	; 7
     b72:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     b74:	96 95       	lsr	r25
     b76:	96 95       	lsr	r25
     b78:	89 27       	eor	r24, r25
     b7a:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     b7e:	08 95       	ret

00000b80 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     b80:	80 93 0e 01 	sts	0x010E, r24
     b84:	08 95       	ret

00000b86 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     b86:	80 91 59 01 	lds	r24, 0x0159
     b8a:	81 11       	cpse	r24, r1
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <get_voltage+0x34>
        cli();                                    // disable interrupts
     b8e:	f8 94       	cli
        adc_setup_conversion(6);
     b90:	86 e0       	ldi	r24, 0x06	; 6
     b92:	80 93 7c 00 	sts	0x007C, r24
     b96:	83 e8       	ldi	r24, 0x83	; 131
     b98:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     b9c:	80 91 7a 00 	lds	r24, 0x007A
     ba0:	80 64       	ori	r24, 0x40	; 64
     ba2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     ba6:	80 91 7a 00 	lds	r24, 0x007A
     baa:	86 fd       	sbrc	r24, 6
     bac:	fc cf       	rjmp	.-8      	; 0xba6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     bae:	80 91 78 00 	lds	r24, 0x0078
     bb2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     bb6:	78 94       	sei
     bb8:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     bbe:	08 95       	ret

00000bc0 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     bc0:	2f 92       	push	r2
     bc2:	3f 92       	push	r3
     bc4:	4f 92       	push	r4
     bc6:	5f 92       	push	r5
     bc8:	6f 92       	push	r6
     bca:	7f 92       	push	r7
     bcc:	8f 92       	push	r8
     bce:	9f 92       	push	r9
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <estimate_distance+0x26>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <estimate_distance+0x28>
     be8:	00 d0       	rcall	.+0      	; 0xbea <estimate_distance+0x2a>
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     bf0:	dc 01       	movw	r26, r24
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	0d 90       	ld	r0, X+
     bf6:	bc 91       	ld	r27, X
     bf8:	a0 2d       	mov	r26, r0
     bfa:	be 83       	std	Y+6, r27	; 0x06
     bfc:	ad 83       	std	Y+5, r26	; 0x05
     bfe:	a4 38       	cpi	r26, 0x84	; 132
     c00:	e3 e0       	ldi	r30, 0x03	; 3
     c02:	be 07       	cpc	r27, r30
     c04:	0c f0       	brlt	.+2      	; 0xc08 <estimate_distance+0x48>
     c06:	c9 c0       	rjmp	.+402    	; 0xd9a <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     c08:	80 91 33 01 	lds	r24, 0x0133
     c0c:	90 91 34 01 	lds	r25, 0x0134
     c10:	8a 17       	cp	r24, r26
     c12:	9b 07       	cpc	r25, r27
     c14:	08 f4       	brcc	.+2      	; 0xc18 <estimate_distance+0x58>
     c16:	37 c1       	rjmp	.+622    	; 0xe86 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c18:	00 91 35 01 	lds	r16, 0x0135
     c1c:	10 91 36 01 	lds	r17, 0x0136
     c20:	0a 17       	cp	r16, r26
     c22:	1b 07       	cpc	r17, r27
     c24:	08 f4       	brcc	.+2      	; 0xc28 <estimate_distance+0x68>
     c26:	2f c2       	rjmp	.+1118   	; 0x1086 <estimate_distance+0x4c6>
     c28:	00 91 37 01 	lds	r16, 0x0137
     c2c:	10 91 38 01 	lds	r17, 0x0138
     c30:	0a 17       	cp	r16, r26
     c32:	1b 07       	cpc	r17, r27
     c34:	08 f4       	brcc	.+2      	; 0xc38 <estimate_distance+0x78>
     c36:	2f c2       	rjmp	.+1118   	; 0x1096 <estimate_distance+0x4d6>
     c38:	00 91 39 01 	lds	r16, 0x0139
     c3c:	10 91 3a 01 	lds	r17, 0x013A
     c40:	0a 17       	cp	r16, r26
     c42:	1b 07       	cpc	r17, r27
     c44:	08 f4       	brcc	.+2      	; 0xc48 <estimate_distance+0x88>
     c46:	2f c2       	rjmp	.+1118   	; 0x10a6 <estimate_distance+0x4e6>
     c48:	00 91 3b 01 	lds	r16, 0x013B
     c4c:	10 91 3c 01 	lds	r17, 0x013C
     c50:	0a 17       	cp	r16, r26
     c52:	1b 07       	cpc	r17, r27
     c54:	08 f4       	brcc	.+2      	; 0xc58 <estimate_distance+0x98>
     c56:	2f c2       	rjmp	.+1118   	; 0x10b6 <estimate_distance+0x4f6>
     c58:	00 91 3d 01 	lds	r16, 0x013D
     c5c:	10 91 3e 01 	lds	r17, 0x013E
     c60:	0a 17       	cp	r16, r26
     c62:	1b 07       	cpc	r17, r27
     c64:	08 f4       	brcc	.+2      	; 0xc68 <estimate_distance+0xa8>
     c66:	ef c1       	rjmp	.+990    	; 0x1046 <estimate_distance+0x486>
     c68:	00 91 3f 01 	lds	r16, 0x013F
     c6c:	10 91 40 01 	lds	r17, 0x0140
     c70:	0a 17       	cp	r16, r26
     c72:	1b 07       	cpc	r17, r27
     c74:	08 f4       	brcc	.+2      	; 0xc78 <estimate_distance+0xb8>
     c76:	27 c2       	rjmp	.+1102   	; 0x10c6 <estimate_distance+0x506>
     c78:	00 91 41 01 	lds	r16, 0x0141
     c7c:	10 91 42 01 	lds	r17, 0x0142
     c80:	0a 17       	cp	r16, r26
     c82:	1b 07       	cpc	r17, r27
     c84:	08 f4       	brcc	.+2      	; 0xc88 <estimate_distance+0xc8>
     c86:	27 c2       	rjmp	.+1102   	; 0x10d6 <estimate_distance+0x516>
     c88:	00 91 43 01 	lds	r16, 0x0143
     c8c:	10 91 44 01 	lds	r17, 0x0144
     c90:	0a 17       	cp	r16, r26
     c92:	1b 07       	cpc	r17, r27
     c94:	08 f4       	brcc	.+2      	; 0xc98 <estimate_distance+0xd8>
     c96:	27 c2       	rjmp	.+1102   	; 0x10e6 <estimate_distance+0x526>
     c98:	00 91 45 01 	lds	r16, 0x0145
     c9c:	10 91 46 01 	lds	r17, 0x0146
     ca0:	0a 17       	cp	r16, r26
     ca2:	1b 07       	cpc	r17, r27
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <estimate_distance+0xe8>
     ca6:	27 c2       	rjmp	.+1102   	; 0x10f6 <estimate_distance+0x536>
     ca8:	00 91 47 01 	lds	r16, 0x0147
     cac:	10 91 48 01 	lds	r17, 0x0148
     cb0:	0a 17       	cp	r16, r26
     cb2:	1b 07       	cpc	r17, r27
     cb4:	08 f4       	brcc	.+2      	; 0xcb8 <estimate_distance+0xf8>
     cb6:	27 c2       	rjmp	.+1102   	; 0x1106 <estimate_distance+0x546>
     cb8:	00 91 49 01 	lds	r16, 0x0149
     cbc:	10 91 4a 01 	lds	r17, 0x014A
     cc0:	0a 17       	cp	r16, r26
     cc2:	1b 07       	cpc	r17, r27
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <estimate_distance+0x108>
     cc6:	23 c2       	rjmp	.+1094   	; 0x110e <estimate_distance+0x54e>
     cc8:	00 91 4b 01 	lds	r16, 0x014B
     ccc:	10 91 4c 01 	lds	r17, 0x014C
     cd0:	0a 17       	cp	r16, r26
     cd2:	1b 07       	cpc	r17, r27
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <estimate_distance+0x118>
     cd6:	23 c2       	rjmp	.+1094   	; 0x111e <estimate_distance+0x55e>
     cd8:	00 91 4d 01 	lds	r16, 0x014D
     cdc:	10 91 4e 01 	lds	r17, 0x014E
     ce0:	0a 17       	cp	r16, r26
     ce2:	1b 07       	cpc	r17, r27
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <estimate_distance+0x128>
     ce6:	23 c2       	rjmp	.+1094   	; 0x112e <estimate_distance+0x56e>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 ed       	ldi	r26, 0xD0	; 208
     cee:	b0 e4       	ldi	r27, 0x40	; 64
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	ab 83       	std	Y+3, r26	; 0x03
     cf6:	bc 83       	std	Y+4, r27	; 0x04
     cf8:	4c e0       	ldi	r20, 0x0C	; 12
     cfa:	e4 2e       	mov	r14, r20
     cfc:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     cfe:	f7 01       	movw	r30, r14
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	ed 5c       	subi	r30, 0xCD	; 205
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	b8 01       	movw	r22, r16
     d0e:	68 1b       	sub	r22, r24
     d10:	79 0b       	sbc	r23, r25
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__addsf3>
     d22:	6b 01       	movw	r12, r22
     d24:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     d26:	ad 81       	ldd	r26, Y+5	; 0x05
     d28:	be 81       	ldd	r27, Y+6	; 0x06
     d2a:	bd 01       	movw	r22, r26
     d2c:	bb 0f       	add	r27, r27
     d2e:	88 0b       	sbc	r24, r24
     d30:	99 0b       	sbc	r25, r25
     d32:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__floatsisf>
     d36:	4b 01       	movw	r8, r22
     d38:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     d3a:	b8 01       	movw	r22, r16
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
     d44:	2b 01       	movw	r4, r22
     d46:	3c 01       	movw	r6, r24
     d48:	29 81       	ldd	r18, Y+1	; 0x01
     d4a:	3a 81       	ldd	r19, Y+2	; 0x02
     d4c:	4b 81       	ldd	r20, Y+3	; 0x03
     d4e:	5c 81       	ldd	r21, Y+4	; 0x04
     d50:	c7 01       	movw	r24, r14
     d52:	b6 01       	movw	r22, r12
     d54:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     d58:	9b 01       	movw	r18, r22
     d5a:	ac 01       	movw	r20, r24
     d5c:	c3 01       	movw	r24, r6
     d5e:	b2 01       	movw	r22, r4
     d60:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__subsf3>
     d64:	9b 01       	movw	r18, r22
     d66:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     d68:	c5 01       	movw	r24, r10
     d6a:	b4 01       	movw	r22, r8
     d6c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__subsf3>
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e2       	ldi	r20, 0x20	; 32
     d76:	51 e4       	ldi	r21, 0x41	; 65
     d78:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
            b=((int)((int)b/(int)slope));
     d7c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixsfsi>
     d80:	8b 01       	movw	r16, r22
     d82:	c7 01       	movw	r24, r14
     d84:	b6 01       	movw	r22, r12
     d86:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixsfsi>
     d8a:	ab 01       	movw	r20, r22
     d8c:	bc 01       	movw	r22, r24
     d8e:	c8 01       	movw	r24, r16
     d90:	ba 01       	movw	r22, r20
     d92:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divmodhi4>
            dist_high=b;
     d96:	16 2f       	mov	r17, r22
     d98:	77 c0       	rjmp	.+238    	; 0xe88 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d9a:	dc 01       	movw	r26, r24
     d9c:	cd 90       	ld	r12, X+
     d9e:	dc 90       	ld	r13, X
     da0:	80 91 5a 01 	lds	r24, 0x015A
     da4:	90 91 5b 01 	lds	r25, 0x015B
     da8:	8c 15       	cp	r24, r12
     daa:	9d 05       	cpc	r25, r13
     dac:	08 f4       	brcc	.+2      	; 0xdb0 <estimate_distance+0x1f0>
     dae:	8c c0       	rjmp	.+280    	; 0xec8 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     db0:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     db2:	e0 90 5c 01 	lds	r14, 0x015C
     db6:	f0 90 5d 01 	lds	r15, 0x015D
     dba:	ec 14       	cp	r14, r12
     dbc:	fd 04       	cpc	r15, r13
     dbe:	08 f4       	brcc	.+2      	; 0xdc2 <estimate_distance+0x202>
     dc0:	5e c1       	rjmp	.+700    	; 0x107e <estimate_distance+0x4be>
     dc2:	e0 90 5e 01 	lds	r14, 0x015E
     dc6:	f0 90 5f 01 	lds	r15, 0x015F
     dca:	ec 14       	cp	r14, r12
     dcc:	fd 04       	cpc	r15, r13
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <estimate_distance+0x212>
     dd0:	5e c1       	rjmp	.+700    	; 0x108e <estimate_distance+0x4ce>
     dd2:	e0 90 60 01 	lds	r14, 0x0160
     dd6:	f0 90 61 01 	lds	r15, 0x0161
     dda:	ec 14       	cp	r14, r12
     ddc:	fd 04       	cpc	r15, r13
     dde:	08 f4       	brcc	.+2      	; 0xde2 <estimate_distance+0x222>
     de0:	5e c1       	rjmp	.+700    	; 0x109e <estimate_distance+0x4de>
     de2:	e0 90 62 01 	lds	r14, 0x0162
     de6:	f0 90 63 01 	lds	r15, 0x0163
     dea:	ec 14       	cp	r14, r12
     dec:	fd 04       	cpc	r15, r13
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <estimate_distance+0x232>
     df0:	5e c1       	rjmp	.+700    	; 0x10ae <estimate_distance+0x4ee>
     df2:	e0 90 64 01 	lds	r14, 0x0164
     df6:	f0 90 65 01 	lds	r15, 0x0165
     dfa:	ec 14       	cp	r14, r12
     dfc:	fd 04       	cpc	r15, r13
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <estimate_distance+0x242>
     e00:	c3 c0       	rjmp	.+390    	; 0xf88 <estimate_distance+0x3c8>
     e02:	e0 90 66 01 	lds	r14, 0x0166
     e06:	f0 90 67 01 	lds	r15, 0x0167
     e0a:	ec 14       	cp	r14, r12
     e0c:	fd 04       	cpc	r15, r13
     e0e:	08 f4       	brcc	.+2      	; 0xe12 <estimate_distance+0x252>
     e10:	56 c1       	rjmp	.+684    	; 0x10be <estimate_distance+0x4fe>
     e12:	e0 90 68 01 	lds	r14, 0x0168
     e16:	f0 90 69 01 	lds	r15, 0x0169
     e1a:	ec 14       	cp	r14, r12
     e1c:	fd 04       	cpc	r15, r13
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <estimate_distance+0x262>
     e20:	56 c1       	rjmp	.+684    	; 0x10ce <estimate_distance+0x50e>
     e22:	e0 90 6a 01 	lds	r14, 0x016A
     e26:	f0 90 6b 01 	lds	r15, 0x016B
     e2a:	ec 14       	cp	r14, r12
     e2c:	fd 04       	cpc	r15, r13
     e2e:	08 f4       	brcc	.+2      	; 0xe32 <estimate_distance+0x272>
     e30:	56 c1       	rjmp	.+684    	; 0x10de <estimate_distance+0x51e>
     e32:	e0 90 6c 01 	lds	r14, 0x016C
     e36:	f0 90 6d 01 	lds	r15, 0x016D
     e3a:	ec 14       	cp	r14, r12
     e3c:	fd 04       	cpc	r15, r13
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <estimate_distance+0x282>
     e40:	56 c1       	rjmp	.+684    	; 0x10ee <estimate_distance+0x52e>
     e42:	e0 90 6e 01 	lds	r14, 0x016E
     e46:	f0 90 6f 01 	lds	r15, 0x016F
     e4a:	ec 14       	cp	r14, r12
     e4c:	fd 04       	cpc	r15, r13
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <estimate_distance+0x292>
     e50:	56 c1       	rjmp	.+684    	; 0x10fe <estimate_distance+0x53e>
     e52:	e0 90 70 01 	lds	r14, 0x0170
     e56:	f0 90 71 01 	lds	r15, 0x0171
     e5a:	ec 14       	cp	r14, r12
     e5c:	fd 04       	cpc	r15, r13
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <estimate_distance+0x2a2>
     e60:	5a c1       	rjmp	.+692    	; 0x1116 <estimate_distance+0x556>
     e62:	e0 90 72 01 	lds	r14, 0x0172
     e66:	f0 90 73 01 	lds	r15, 0x0173
     e6a:	ec 14       	cp	r14, r12
     e6c:	fd 04       	cpc	r15, r13
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <estimate_distance+0x2b2>
     e70:	5a c1       	rjmp	.+692    	; 0x1126 <estimate_distance+0x566>
     e72:	e0 90 74 01 	lds	r14, 0x0174
     e76:	f0 90 75 01 	lds	r15, 0x0175
     e7a:	ec 14       	cp	r14, r12
     e7c:	fd 04       	cpc	r15, r13
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <estimate_distance+0x2c2>
     e80:	5a c1       	rjmp	.+692    	; 0x1136 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     e82:	0a e5       	ldi	r16, 0x5A	; 90
     e84:	31 c0       	rjmp	.+98     	; 0xee8 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     e86:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     e88:	ed 81       	ldd	r30, Y+5	; 0x05
     e8a:	fe 81       	ldd	r31, Y+6	; 0x06
     e8c:	ed 3b       	cpi	r30, 0xBD	; 189
     e8e:	f2 40       	sbci	r31, 0x02	; 2
     e90:	fc f4       	brge	.+62     	; 0xed0 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     e92:	81 e2       	ldi	r24, 0x21	; 33
     e94:	81 0f       	add	r24, r17
    }
}
     e96:	26 96       	adiw	r28, 0x06	; 6
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	7f 90       	pop	r7
     ebc:	6f 90       	pop	r6
     ebe:	5f 90       	pop	r5
     ec0:	4f 90       	pop	r4
     ec2:	3f 90       	pop	r3
     ec4:	2f 90       	pop	r2
     ec6:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     ec8:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     eca:	81 e2       	ldi	r24, 0x21	; 33
     ecc:	80 0f       	add	r24, r16
     ece:	e3 cf       	rjmp	.-58     	; 0xe96 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ed0:	d1 01       	movw	r26, r2
     ed2:	cd 90       	ld	r12, X+
     ed4:	dc 90       	ld	r13, X
     ed6:	80 91 5a 01 	lds	r24, 0x015A
     eda:	90 91 5b 01 	lds	r25, 0x015B
     ede:	8c 15       	cp	r24, r12
     ee0:	9d 05       	cpc	r25, r13
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <estimate_distance+0x326>
     ee4:	66 cf       	rjmp	.-308    	; 0xdb2 <estimate_distance+0x1f2>
            dist_low=0;
     ee6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     ee8:	1f 3f       	cpi	r17, 0xFF	; 255
     eea:	79 f3       	breq	.-34     	; 0xeca <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     eec:	ed 81       	ldd	r30, Y+5	; 0x05
     eee:	fe 81       	ldd	r31, Y+6	; 0x06
     ef0:	bf 01       	movw	r22, r30
     ef2:	ff 0f       	add	r31, r31
     ef4:	88 0b       	sbc	r24, r24
     ef6:	99 0b       	sbc	r25, r25
     ef8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__floatsisf>
     efc:	6b 01       	movw	r12, r22
     efe:	7c 01       	movw	r14, r24
     f00:	61 2f       	mov	r22, r17
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
     f0c:	4b 01       	movw	r8, r22
     f0e:	5c 01       	movw	r10, r24
     f10:	a7 01       	movw	r20, r14
     f12:	96 01       	movw	r18, r12
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	81 e6       	ldi	r24, 0x61	; 97
     f1a:	94 e4       	ldi	r25, 0x44	; 68
     f1c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__subsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	c5 01       	movw	r24, r10
     f26:	b4 01       	movw	r22, r8
     f28:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     f2c:	4b 01       	movw	r8, r22
     f2e:	5c 01       	movw	r10, r24
     f30:	60 2f       	mov	r22, r16
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
     f3c:	2b 01       	movw	r4, r22
     f3e:	3c 01       	movw	r6, r24
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4f e2       	ldi	r20, 0x2F	; 47
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	c7 01       	movw	r24, r14
     f4a:	b6 01       	movw	r22, r12
     f4c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__subsf3>
     f50:	9b 01       	movw	r18, r22
     f52:	ac 01       	movw	r20, r24
     f54:	c3 01       	movw	r24, r6
     f56:	b2 01       	movw	r22, r4
     f58:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     f5c:	9b 01       	movw	r18, r22
     f5e:	ac 01       	movw	r20, r24
     f60:	c5 01       	movw	r24, r10
     f62:	b4 01       	movw	r22, r8
     f64:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__addsf3>
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	48 e4       	ldi	r20, 0x48	; 72
     f6e:	53 e4       	ldi	r21, 0x43	; 67
     f70:	0e 94 c7 0c 	call	0x198e	; 0x198e <__divsf3>
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	44 e0       	ldi	r20, 0x04	; 4
     f7a:	52 e4       	ldi	r21, 0x42	; 66
     f7c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__addsf3>
     f80:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixunssfsi>
     f84:	86 2f       	mov	r24, r22
     f86:	87 cf       	rjmp	.-242    	; 0xe96 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f88:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     f8a:	85 e0       	ldi	r24, 0x05	; 5
     f8c:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	fc 01       	movw	r30, r24
     f94:	e8 5a       	subi	r30, 0xA8	; 168
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	b7 01       	movw	r22, r14
     f9e:	68 1b       	sub	r22, r24
     fa0:	79 0b       	sbc	r23, r25
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__addsf3>
     fb2:	4b 01       	movw	r8, r22
     fb4:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     fb6:	b6 01       	movw	r22, r12
     fb8:	dd 0c       	add	r13, r13
     fba:	88 0b       	sbc	r24, r24
     fbc:	99 0b       	sbc	r25, r25
     fbe:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__floatsisf>
     fc2:	2b 01       	movw	r4, r22
     fc4:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     fc6:	b7 01       	movw	r22, r14
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
     fd0:	6b 01       	movw	r12, r22
     fd2:	7c 01       	movw	r14, r24
     fd4:	60 2f       	mov	r22, r16
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	5f e3       	ldi	r21, 0x3F	; 63
     fe8:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	a9 01       	movw	r20, r18
     ff2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__addsf3>
     ff6:	a5 01       	movw	r20, r10
     ff8:	94 01       	movw	r18, r8
     ffa:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__subsf3>
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    100e:	c3 01       	movw	r24, r6
    1010:	b2 01       	movw	r22, r4
    1012:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__subsf3>
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
                b=((int)((int)b/(int)slope));
    1022:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixsfsi>
    1026:	7b 01       	movw	r14, r22
    1028:	c5 01       	movw	r24, r10
    102a:	b4 01       	movw	r22, r8
    102c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fixsfsi>
    1030:	ab 01       	movw	r20, r22
    1032:	bc 01       	movw	r22, r24
    1034:	c7 01       	movw	r24, r14
    1036:	ba 01       	movw	r22, r20
    1038:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divmodhi4>
                dist_low=b;
    103c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
    103e:	6f 3f       	cpi	r22, 0xFF	; 255
    1040:	09 f0       	breq	.+2      	; 0x1044 <estimate_distance+0x484>
    1042:	52 cf       	rjmp	.-348    	; 0xee8 <estimate_distance+0x328>
    1044:	26 cf       	rjmp	.-436    	; 0xe92 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1046:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    1048:	85 e0       	ldi	r24, 0x05	; 5
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	7c 01       	movw	r14, r24
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	ef 1a       	sub	r14, r31
    1052:	f1 08       	sbc	r15, r1
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatunsisf>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	a9 01       	movw	r20, r18
    1070:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__addsf3>
    1074:	69 83       	std	Y+1, r22	; 0x01
    1076:	7a 83       	std	Y+2, r23	; 0x02
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
    107c:	40 ce       	rjmp	.-896    	; 0xcfe <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    107e:	01 e0       	ldi	r16, 0x01	; 1
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	84 cf       	rjmp	.-248    	; 0xf8e <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	df cf       	rjmp	.-66     	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    108e:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	7c cf       	rjmp	.-264    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1096:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	d7 cf       	rjmp	.-82     	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    109e:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	74 cf       	rjmp	.-280    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10a6:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	cf cf       	rjmp	.-98     	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10ae:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	6c cf       	rjmp	.-296    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10b6:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    10b8:	84 e0       	ldi	r24, 0x04	; 4
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	c7 cf       	rjmp	.-114    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10be:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
    10c0:	86 e0       	ldi	r24, 0x06	; 6
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	64 cf       	rjmp	.-312    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10c6:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    10c8:	86 e0       	ldi	r24, 0x06	; 6
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	bf cf       	rjmp	.-130    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10ce:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	5c cf       	rjmp	.-328    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10d6:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    10d8:	87 e0       	ldi	r24, 0x07	; 7
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	b7 cf       	rjmp	.-146    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10de:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	54 cf       	rjmp	.-344    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10e6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	af cf       	rjmp	.-162    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10ee:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    10f0:	89 e0       	ldi	r24, 0x09	; 9
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	4c cf       	rjmp	.-360    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10f6:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    10f8:	89 e0       	ldi	r24, 0x09	; 9
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a7 cf       	rjmp	.-178    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10fe:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    1100:	8a e0       	ldi	r24, 0x0A	; 10
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	44 cf       	rjmp	.-376    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1106:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    1108:	8a e0       	ldi	r24, 0x0A	; 10
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9f cf       	rjmp	.-194    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    110e:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1110:	8b e0       	ldi	r24, 0x0B	; 11
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9b cf       	rjmp	.-202    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1116:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    1118:	8b e0       	ldi	r24, 0x0B	; 11
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	38 cf       	rjmp	.-400    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    111e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1120:	8c e0       	ldi	r24, 0x0C	; 12
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	93 cf       	rjmp	.-218    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1126:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    1128:	8c e0       	ldi	r24, 0x0C	; 12
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	30 cf       	rjmp	.-416    	; 0xf8e <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    112e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1130:	8d e0       	ldi	r24, 0x0D	; 13
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	8b cf       	rjmp	.-234    	; 0x104c <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1136:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    1138:	8d e0       	ldi	r24, 0x0D	; 13
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	28 cf       	rjmp	.-432    	; 0xf8e <estimate_distance+0x3ce>

0000113e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	2f 93       	push	r18
    114a:	3f 93       	push	r19
    114c:	4f 93       	push	r20
    114e:	5f 93       	push	r21
    1150:	6f 93       	push	r22
    1152:	7f 93       	push	r23
    1154:	8f 93       	push	r24
    1156:	9f 93       	push	r25
    1158:	af 93       	push	r26
    115a:	bf 93       	push	r27
    115c:	ef 93       	push	r30
    115e:	ff 93       	push	r31
    tx_clock += tx_increment;
    1160:	20 91 79 01 	lds	r18, 0x0179
    1164:	30 91 7a 01 	lds	r19, 0x017A
    1168:	80 91 77 01 	lds	r24, 0x0177
    116c:	90 91 78 01 	lds	r25, 0x0178
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	90 93 7a 01 	sts	0x017A, r25
    1178:	80 93 79 01 	sts	0x0179, r24
    tx_increment = 0xFF;
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	90 93 78 01 	sts	0x0178, r25
    1184:	80 93 77 01 	sts	0x0177, r24
    OCR0A = tx_increment;
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    118c:	80 91 55 01 	lds	r24, 0x0155
    1190:	90 91 56 01 	lds	r25, 0x0156
    1194:	a0 91 57 01 	lds	r26, 0x0157
    1198:	b0 91 58 01 	lds	r27, 0x0158
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	a1 1d       	adc	r26, r1
    11a0:	b1 1d       	adc	r27, r1
    11a2:	80 93 55 01 	sts	0x0155, r24
    11a6:	90 93 56 01 	sts	0x0156, r25
    11aa:	a0 93 57 01 	sts	0x0157, r26
    11ae:	b0 93 58 01 	sts	0x0158, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    11b2:	80 91 59 01 	lds	r24, 0x0159
    11b6:	81 11       	cpse	r24, r1
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <__vector_14+0x9a>
    11ba:	80 91 88 01 	lds	r24, 0x0188
    11be:	90 91 89 01 	lds	r25, 0x0189
    11c2:	20 91 79 01 	lds	r18, 0x0179
    11c6:	30 91 7a 01 	lds	r19, 0x017A
    11ca:	82 17       	cp	r24, r18
    11cc:	93 07       	cpc	r25, r19
    11ce:	20 f4       	brcc	.+8      	; 0x11d8 <__vector_14+0x9a>
    11d0:	80 91 2d 01 	lds	r24, 0x012D
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	89 f0       	breq	.+34     	; 0x11fa <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    11fa:	e0 91 11 01 	lds	r30, 0x0111
    11fe:	f0 91 12 01 	lds	r31, 0x0112
    1202:	09 95       	icall
        if (msg) {
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	41 f3       	breq	.-48     	; 0x11d8 <__vector_14+0x9a>
            if (message_send(msg)) {
    1208:	0e 94 87 0b 	call	0x170e	; 0x170e <message_send>
    120c:	81 11       	cpse	r24, r1
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1210:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <rand>
    1214:	99 27       	eor	r25, r25
    1216:	90 93 78 01 	sts	0x0178, r25
    121a:	80 93 77 01 	sts	0x0177, r24
                OCR0A = tx_increment;
    121e:	87 bd       	out	0x27, r24	; 39
    1220:	db cf       	rjmp	.-74     	; 0x11d8 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1222:	e0 91 0f 01 	lds	r30, 0x010F
    1226:	f0 91 10 01 	lds	r31, 0x0110
    122a:	09 95       	icall
                tx_clock = 0;
    122c:	10 92 7a 01 	sts	0x017A, r1
    1230:	10 92 79 01 	sts	0x0179, r1
    1234:	d1 cf       	rjmp	.-94     	; 0x11d8 <__vector_14+0x9a>

00001236 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1236:	80 ff       	sbrs	r24, 0
    1238:	11 c0       	rjmp	.+34     	; 0x125c <set_color+0x26>
        DDRD |= (1<<5);
    123a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    123c:	81 ff       	sbrs	r24, 1
    123e:	11 c0       	rjmp	.+34     	; 0x1262 <set_color+0x2c>
        DDRD |= (1<<4);
    1240:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1242:	82 ff       	sbrs	r24, 2
    1244:	11 c0       	rjmp	.+34     	; 0x1268 <set_color+0x32>
        DDRC |= (1<<3);
    1246:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1248:	83 ff       	sbrs	r24, 3
    124a:	11 c0       	rjmp	.+34     	; 0x126e <set_color+0x38>
        DDRC |= (1<<2);
    124c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    124e:	84 ff       	sbrs	r24, 4
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <set_color+0x3e>
        DDRC |= (1<<5);
    1252:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1254:	85 fd       	sbrc	r24, 5
    1256:	11 c0       	rjmp	.+34     	; 0x127a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1258:	3c 98       	cbi	0x07, 4	; 7
    125a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    125c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    125e:	81 fd       	sbrc	r24, 1
    1260:	ef cf       	rjmp	.-34     	; 0x1240 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1262:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1264:	82 fd       	sbrc	r24, 2
    1266:	ef cf       	rjmp	.-34     	; 0x1246 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1268:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    126a:	83 fd       	sbrc	r24, 3
    126c:	ef cf       	rjmp	.-34     	; 0x124c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    126e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1270:	84 fd       	sbrc	r24, 4
    1272:	ef cf       	rjmp	.-34     	; 0x1252 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1274:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1276:	85 ff       	sbrs	r24, 5
    1278:	ef cf       	rjmp	.-34     	; 0x1258 <set_color+0x22>
        DDRC |= (1<<4);
    127a:	3c 9a       	sbi	0x07, 4	; 7
    127c:	08 95       	ret

0000127e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	11 24       	eor	r1, r1
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    rx_timer_off();
    128c:	10 92 81 00 	sts	0x0081, r1
    1290:	10 92 85 00 	sts	0x0085, r1
    1294:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	80 93 32 01 	sts	0x0132, r24
    rx_leadingbyte = 1;
    129e:	80 93 76 01 	sts	0x0176, r24
    rx_busy = 0;
    12a2:	10 92 59 01 	sts	0x0159, r1
    adc_trigger_high_gain();
    12a6:	10 92 7c 00 	sts	0x007C, r1
    12aa:	93 ea       	ldi	r25, 0xA3	; 163
    12ac:	90 93 7a 00 	sts	0x007A, r25
    12b0:	80 93 7b 00 	sts	0x007B, r24
}
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	ef 93       	push	r30
    12e6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    12e8:	20 91 84 00 	lds	r18, 0x0084
    12ec:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	40 93 59 01 	sts	0x0159, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    12f6:	80 91 32 01 	lds	r24, 0x0132
    12fa:	88 23       	and	r24, r24
    12fc:	a9 f1       	breq	.+106    	; 0x1368 <__vector_23+0xa6>
        rx_timer_on();
    12fe:	10 92 85 00 	sts	0x0085, r1
    1302:	10 92 84 00 	sts	0x0084, r1
    1306:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    130a:	10 92 8a 01 	sts	0x018A, r1
        rx_leadingbit = 0;
    130e:	10 92 32 01 	sts	0x0132, r1
        if (rx_leadingbyte) {
    1312:	80 91 76 01 	lds	r24, 0x0176
    1316:	88 23       	and	r24, r24
    1318:	a1 f0       	breq	.+40     	; 0x1342 <__vector_23+0x80>
            adc_finish_conversion();
    131a:	80 91 7a 00 	lds	r24, 0x007A
    131e:	86 fd       	sbrc	r24, 6
    1320:	fc cf       	rjmp	.-8      	; 0x131a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1322:	80 91 78 00 	lds	r24, 0x0078
    1326:	90 91 79 00 	lds	r25, 0x0079
    132a:	90 93 54 01 	sts	0x0154, r25
    132e:	80 93 53 01 	sts	0x0153, r24
            adc_trigger_low_gain();
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 7c 00 	sts	0x007C, r24
    1338:	93 ea       	ldi	r25, 0xA3	; 163
    133a:	90 93 7a 00 	sts	0x007A, r25
    133e:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	bf 91       	pop	r27
    134c:	af 91       	pop	r26
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	7f 91       	pop	r23
    1354:	6f 91       	pop	r22
    1356:	5f 91       	pop	r21
    1358:	4f 91       	pop	r20
    135a:	3f 91       	pop	r19
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1368:	c9 01       	movw	r24, r18
    136a:	87 58       	subi	r24, 0x87	; 135
    136c:	91 09       	sbc	r25, r1
    136e:	84 37       	cpi	r24, 0x74	; 116
    1370:	99 40       	sbci	r25, 0x09	; 9
    1372:	08 f0       	brcs	.+2      	; 0x1376 <__vector_23+0xb4>
    1374:	52 c0       	rjmp	.+164    	; 0x141a <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1376:	26 58       	subi	r18, 0x86	; 134
    1378:	31 09       	sbc	r19, r1
    137a:	a4 ef       	ldi	r26, 0xF4	; 244
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	0e 94 37 0c 	call	0x186e	; 0x186e <__umulhisi3>
    1382:	aa 27       	eor	r26, r26
    1384:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	91 05       	cpc	r25, r1
    138a:	a1 05       	cpc	r26, r1
    138c:	b1 05       	cpc	r27, r1
    138e:	08 f4       	brcc	.+2      	; 0x1392 <__vector_23+0xd0>
    1390:	7b c0       	rjmp	.+246    	; 0x1488 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1392:	40 93 32 01 	sts	0x0132, r20
                if (rx_leadingbyte) {
    1396:	80 91 76 01 	lds	r24, 0x0176
    139a:	81 11       	cpse	r24, r1
    139c:	52 c0       	rjmp	.+164    	; 0x1442 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    139e:	80 91 50 01 	lds	r24, 0x0150
    13a2:	e8 2f       	mov	r30, r24
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	e4 58       	subi	r30, 0x84	; 132
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	90 91 8a 01 	lds	r25, 0x018A
    13ae:	90 83       	st	Z, r25
                    rx_byteindex++;
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 50 01 	sts	0x0150, r24
                    if (rx_byteindex == sizeof(message_t)) {
    13b6:	8c 30       	cpi	r24, 0x0C	; 12
    13b8:	21 f6       	brne	.-120    	; 0x1342 <__vector_23+0x80>
                        rx_timer_off();
    13ba:	10 92 81 00 	sts	0x0081, r1
    13be:	10 92 85 00 	sts	0x0085, r1
    13c2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    13c6:	40 93 76 01 	sts	0x0176, r20
                        rx_busy = 0;
    13ca:	10 92 59 01 	sts	0x0159, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    13ce:	c0 91 86 01 	lds	r28, 0x0186
    13d2:	d0 91 87 01 	lds	r29, 0x0187
    13d6:	8c e7       	ldi	r24, 0x7C	; 124
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <message_crc>
    13de:	c8 17       	cp	r28, r24
    13e0:	d9 07       	cpc	r29, r25
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <__vector_23+0x124>
    13e4:	ae cf       	rjmp	.-164    	; 0x1342 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    13e6:	80 91 85 01 	lds	r24, 0x0185
    13ea:	87 ff       	sbrs	r24, 7
    13ec:	61 c0       	rjmp	.+194    	; 0x14b0 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    13ee:	98 e7       	ldi	r25, 0x78	; 120
    13f0:	98 0f       	add	r25, r24
    13f2:	93 30       	cpi	r25, 0x03	; 3
    13f4:	30 f0       	brcs	.+12     	; 0x1402 <__vector_23+0x140>
        motors_off();
    13f6:	53 98       	cbi	0x0a, 3	; 10
    13f8:	23 98       	cbi	0x04, 3	; 4
    13fa:	10 92 b4 00 	sts	0x00B4, r1
    13fe:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	fc 01       	movw	r30, r24
    1406:	e0 58       	subi	r30, 0x80	; 128
    1408:	f1 09       	sbc	r31, r1
    140a:	eb 30       	cpi	r30, 0x0B	; 11
    140c:	f1 05       	cpc	r31, r1
    140e:	08 f0       	brcs	.+2      	; 0x1412 <__vector_23+0x150>
    1410:	98 cf       	rjmp	.-208    	; 0x1342 <__vector_23+0x80>
    1412:	e5 5c       	subi	r30, 0xC5	; 197
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    141a:	10 92 81 00 	sts	0x0081, r1
    141e:	10 92 85 00 	sts	0x0085, r1
    1422:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1426:	40 93 32 01 	sts	0x0132, r20
            rx_leadingbyte = 1;
    142a:	40 93 76 01 	sts	0x0176, r20
            rx_busy = 0;
    142e:	10 92 59 01 	sts	0x0159, r1
            adc_trigger_high_gain();
    1432:	10 92 7c 00 	sts	0x007C, r1
    1436:	83 ea       	ldi	r24, 0xA3	; 163
    1438:	80 93 7a 00 	sts	0x007A, r24
    143c:	40 93 7b 00 	sts	0x007B, r20
    1440:	80 cf       	rjmp	.-256    	; 0x1342 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1442:	80 91 7a 00 	lds	r24, 0x007A
    1446:	86 fd       	sbrc	r24, 6
    1448:	fc cf       	rjmp	.-8      	; 0x1442 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    144a:	80 91 78 00 	lds	r24, 0x0078
    144e:	90 91 79 00 	lds	r25, 0x0079
    1452:	90 93 52 01 	sts	0x0152, r25
    1456:	80 93 51 01 	sts	0x0151, r24
                    adc_trigger_high_gain();
    145a:	10 92 7c 00 	sts	0x007C, r1
    145e:	83 ea       	ldi	r24, 0xA3	; 163
    1460:	80 93 7a 00 	sts	0x007A, r24
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    146a:	90 91 8a 01 	lds	r25, 0x018A
    146e:	99 23       	and	r25, r25
    1470:	d1 f0       	breq	.+52     	; 0x14a6 <__vector_23+0x1e4>
                        rx_timer_off();
    1472:	10 92 81 00 	sts	0x0081, r1
    1476:	10 92 85 00 	sts	0x0085, r1
    147a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    147e:	80 93 76 01 	sts	0x0176, r24
                        rx_busy = 0;
    1482:	10 92 59 01 	sts	0x0159, r1
    1486:	5d cf       	rjmp	.-326    	; 0x1342 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1488:	21 e0       	ldi	r18, 0x01	; 1
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	f9 01       	movw	r30, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <__vector_23+0x1d2>
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <__vector_23+0x1ce>
    1498:	cf 01       	movw	r24, r30
    149a:	90 91 8a 01 	lds	r25, 0x018A
    149e:	89 2b       	or	r24, r25
    14a0:	80 93 8a 01 	sts	0x018A, r24
    14a4:	4e cf       	rjmp	.-356    	; 0x1342 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    14a6:	10 92 76 01 	sts	0x0176, r1
                        rx_byteindex = 0;
    14aa:	10 92 50 01 	sts	0x0150, r1
    14ae:	49 cf       	rjmp	.-366    	; 0x1342 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    14b0:	e0 91 13 01 	lds	r30, 0x0113
    14b4:	f0 91 14 01 	lds	r31, 0x0114
    14b8:	61 e5       	ldi	r22, 0x51	; 81
    14ba:	71 e0       	ldi	r23, 0x01	; 1
    14bc:	8c e7       	ldi	r24, 0x7C	; 124
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	09 95       	icall
    14c2:	3f cf       	rjmp	.-386    	; 0x1342 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    14c4:	80 91 7c 01 	lds	r24, 0x017C
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__vector_23+0x20c>
    14cc:	dd c0       	rjmp	.+442    	; 0x1688 <__vector_23+0x3c6>
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <__vector_23+0x210>
    14d0:	ba c0       	rjmp	.+372    	; 0x1646 <__vector_23+0x384>
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <__vector_23+0x216>
    14d6:	c6 c0       	rjmp	.+396    	; 0x1664 <__vector_23+0x3a2>
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	09 f0       	breq	.+2      	; 0x14de <__vector_23+0x21c>
    14dc:	b1 c0       	rjmp	.+354    	; 0x1640 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    14de:	80 91 2b 01 	lds	r24, 0x012B
    14e2:	90 91 82 01 	lds	r25, 0x0182
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	09 f4       	brne	.+2      	; 0x14ec <__vector_23+0x22a>
    14ea:	e3 c0       	rjmp	.+454    	; 0x16b2 <__vector_23+0x3f0>
    14ec:	80 91 81 01 	lds	r24, 0x0181
                        prev_motion = MOVE_STOP;
    14f0:	10 92 2c 01 	sts	0x012C, r1
                        cur_motion = MOVE_STRAIGHT;
    14f4:	23 e0       	ldi	r18, 0x03	; 3
    14f6:	20 93 2b 01 	sts	0x012B, r18
                        kilo_straight_left = calibmsg->straight_left;
    14fa:	80 93 8d 01 	sts	0x018D, r24
                        kilo_straight_right = calibmsg->straight_right;
    14fe:	90 93 8e 01 	sts	0x018E, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1502:	80 91 2d 01 	lds	r24, 0x012D
    1506:	86 30       	cpi	r24, 0x06	; 6
    1508:	09 f4       	brne	.+2      	; 0x150c <__vector_23+0x24a>
    150a:	1b cf       	rjmp	.-458    	; 0x1342 <__vector_23+0x80>
                motors_on();
    150c:	53 9a       	sbi	0x0a, 3	; 10
    150e:	23 9a       	sbi	0x04, 3	; 4
    1510:	10 92 b4 00 	sts	0x00B4, r1
    1514:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	80 93 2d 01 	sts	0x012D, r24
    151e:	11 cf       	rjmp	.-478    	; 0x1342 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1520:	80 91 2d 01 	lds	r24, 0x012D
    1524:	86 30       	cpi	r24, 0x06	; 6
    1526:	99 f0       	breq	.+38     	; 0x154e <__vector_23+0x28c>
                motors_on();
    1528:	53 9a       	sbi	0x0a, 3	; 10
    152a:	23 9a       	sbi	0x04, 3	; 4
    152c:	10 92 b4 00 	sts	0x00B4, r1
    1530:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1534:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1536:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1538:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    153a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    153c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    153e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1540:	10 92 2b 01 	sts	0x012B, r1
    1544:	10 92 2c 01 	sts	0x012C, r1
                kilo_state = MOVING;
    1548:	86 e0       	ldi	r24, 0x06	; 6
    154a:	80 93 2d 01 	sts	0x012D, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 01       	movw	r18, r24
    1554:	00 90 7c 01 	lds	r0, 0x017C
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__vector_23+0x29c>
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <__vector_23+0x298>
    1562:	80 91 8b 01 	lds	r24, 0x018B
    1566:	90 91 8c 01 	lds	r25, 0x018C
    156a:	82 23       	and	r24, r18
    156c:	93 23       	and	r25, r19
    156e:	89 2b       	or	r24, r25
    1570:	09 f0       	breq	.+2      	; 0x1574 <__vector_23+0x2b2>
    1572:	86 c0       	rjmp	.+268    	; 0x1680 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1574:	10 92 2b 01 	sts	0x012B, r1
    1578:	e4 ce       	rjmp	.-568    	; 0x1342 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 2d 01 	sts	0x012D, r24
    1580:	e0 ce       	rjmp	.-576    	; 0x1342 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1582:	e0 e0       	ldi	r30, 0x00	; 0
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1588:	80 91 6e 00 	lds	r24, 0x006E
    158c:	8d 7f       	andi	r24, 0xFD	; 253
    158e:	80 93 6e 00 	sts	0x006E, r24
    1592:	16 bc       	out	0x26, r1	; 38
            bootload();
    1594:	e0 e0       	ldi	r30, 0x00	; 0
    1596:	f0 e7       	ldi	r31, 0x70	; 112
    1598:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    159a:	10 92 2d 01 	sts	0x012D, r1
    159e:	d1 ce       	rjmp	.-606    	; 0x1342 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	80 93 2d 01 	sts	0x012D, r24
    15a6:	cd ce       	rjmp	.-614    	; 0x1342 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    15a8:	85 e0       	ldi	r24, 0x05	; 5
    15aa:	80 93 2d 01 	sts	0x012D, r24
    15ae:	c9 ce       	rjmp	.-622    	; 0x1342 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    15b0:	80 91 2d 01 	lds	r24, 0x012D
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	09 f4       	brne	.+2      	; 0x15ba <__vector_23+0x2f8>
    15b8:	c4 ce       	rjmp	.-632    	; 0x1342 <__vector_23+0x80>
    15ba:	80 91 2d 01 	lds	r24, 0x012D
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <__vector_23+0x302>
    15c2:	bf ce       	rjmp	.-642    	; 0x1342 <__vector_23+0x80>
                motors_on();
    15c4:	53 9a       	sbi	0x0a, 3	; 10
    15c6:	23 9a       	sbi	0x04, 3	; 4
    15c8:	10 92 b4 00 	sts	0x00B4, r1
    15cc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	80 93 2d 01 	sts	0x012D, r24
    15d6:	b5 ce       	rjmp	.-662    	; 0x1342 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    15d8:	80 91 2d 01 	lds	r24, 0x012D
    15dc:	86 30       	cpi	r24, 0x06	; 6
    15de:	09 f0       	breq	.+2      	; 0x15e2 <__vector_23+0x320>
    15e0:	b0 ce       	rjmp	.-672    	; 0x1342 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    15e2:	60 91 8b 01 	lds	r22, 0x018B
    15e6:	80 eb       	ldi	r24, 0xB0	; 176
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    15ee:	60 91 8c 01 	lds	r22, 0x018C
    15f2:	81 eb       	ldi	r24, 0xB1	; 177
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    15fa:	60 91 8f 01 	lds	r22, 0x018F
    15fe:	85 e0       	ldi	r24, 0x05	; 5
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1606:	60 91 7b 01 	lds	r22, 0x017B
    160a:	89 e0       	ldi	r24, 0x09	; 9
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1612:	60 91 8d 01 	lds	r22, 0x018D
    1616:	8c e0       	ldi	r24, 0x0C	; 12
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    161e:	60 91 8e 01 	lds	r22, 0x018E
    1622:	84 e1       	ldi	r24, 0x14	; 20
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <eeprom_write_byte>
                        motors_off();
    162a:	53 98       	cbi	0x0a, 3	; 10
    162c:	23 98       	cbi	0x04, 3	; 4
    162e:	10 92 b4 00 	sts	0x00B4, r1
    1632:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	80 93 2d 01 	sts	0x012D, r24
    163c:	80 91 7c 01 	lds	r24, 0x017C
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1640:	81 11       	cpse	r24, r1
    1642:	5f cf       	rjmp	.-322    	; 0x1502 <__vector_23+0x240>
    1644:	7e ce       	rjmp	.-772    	; 0x1342 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1646:	88 23       	and	r24, r24
    1648:	39 f2       	breq	.-114    	; 0x15d8 <__vector_23+0x316>
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	c9 f7       	brne	.-14     	; 0x1640 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    164e:	80 91 7d 01 	lds	r24, 0x017D
    1652:	90 91 7e 01 	lds	r25, 0x017E
    1656:	90 93 8c 01 	sts	0x018C, r25
    165a:	80 93 8b 01 	sts	0x018B, r24
                    cur_motion = MOVE_STOP;
    165e:	10 92 2b 01 	sts	0x012B, r1
    1662:	4f cf       	rjmp	.-354    	; 0x1502 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1664:	80 91 2b 01 	lds	r24, 0x012B
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	71 f1       	breq	.+92     	; 0x16c8 <__vector_23+0x406>
    166c:	80 91 80 01 	lds	r24, 0x0180
                        prev_motion = MOVE_STOP;
    1670:	10 92 2c 01 	sts	0x012C, r1
                        cur_motion = MOVE_RIGHT;
    1674:	92 e0       	ldi	r25, 0x02	; 2
    1676:	90 93 2b 01 	sts	0x012B, r25
                        kilo_turn_right = calibmsg->turn_right;
    167a:	80 93 7b 01 	sts	0x017B, r24
    167e:	41 cf       	rjmp	.-382    	; 0x1502 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	80 93 2b 01 	sts	0x012B, r24
    1686:	5d ce       	rjmp	.-838    	; 0x1342 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1688:	80 91 2b 01 	lds	r24, 0x012B
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	51 f0       	breq	.+20     	; 0x16a4 <__vector_23+0x3e2>
    1690:	80 91 7f 01 	lds	r24, 0x017F
                        prev_motion = MOVE_STOP;
    1694:	10 92 2c 01 	sts	0x012C, r1
                        cur_motion = MOVE_LEFT;
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	90 93 2b 01 	sts	0x012B, r25
                        kilo_turn_left = calibmsg->turn_left;
    169e:	80 93 8f 01 	sts	0x018F, r24
    16a2:	2f cf       	rjmp	.-418    	; 0x1502 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    16a4:	80 91 7f 01 	lds	r24, 0x017F
    16a8:	90 91 8f 01 	lds	r25, 0x018F
    16ac:	89 13       	cpse	r24, r25
    16ae:	f2 cf       	rjmp	.-28     	; 0x1694 <__vector_23+0x3d2>
    16b0:	28 cf       	rjmp	.-432    	; 0x1502 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    16b2:	80 91 8e 01 	lds	r24, 0x018E
    16b6:	98 13       	cpse	r25, r24
    16b8:	19 cf       	rjmp	.-462    	; 0x14ec <__vector_23+0x22a>
    16ba:	80 91 81 01 	lds	r24, 0x0181
    16be:	20 91 8d 01 	lds	r18, 0x018D
    16c2:	82 13       	cpse	r24, r18
    16c4:	15 cf       	rjmp	.-470    	; 0x14f0 <__vector_23+0x22e>
    16c6:	1d cf       	rjmp	.-454    	; 0x1502 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    16c8:	80 91 80 01 	lds	r24, 0x0180
    16cc:	90 91 7b 01 	lds	r25, 0x017B
    16d0:	89 13       	cpse	r24, r25
    16d2:	ce cf       	rjmp	.-100    	; 0x1670 <__vector_23+0x3ae>
    16d4:	16 cf       	rjmp	.-468    	; 0x1502 <__vector_23+0x240>

000016d6 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    16d6:	fc 01       	movw	r30, r24
    16d8:	ac 01       	movw	r20, r24
    16da:	46 5f       	subi	r20, 0xF6	; 246
    16dc:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    16e2:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    16e4:	82 27       	eor	r24, r18
    16e6:	08 2e       	mov	r0, r24
    16e8:	82 95       	swap	r24
    16ea:	80 7f       	andi	r24, 0xF0	; 240
    16ec:	80 25       	eor	r24, r0
    16ee:	09 2e       	mov	r0, r25
    16f0:	98 2f       	mov	r25, r24
    16f2:	82 95       	swap	r24
    16f4:	8f 70       	andi	r24, 0x0F	; 15
    16f6:	08 26       	eor	r0, r24
    16f8:	86 95       	lsr	r24
    16fa:	98 27       	eor	r25, r24
    16fc:	89 27       	eor	r24, r25
    16fe:	88 0f       	add	r24, r24
    1700:	88 0f       	add	r24, r24
    1702:	88 0f       	add	r24, r24
    1704:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1706:	e4 17       	cp	r30, r20
    1708:	f5 07       	cpc	r31, r21
    170a:	59 f7       	brne	.-42     	; 0x16e2 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    170c:	08 95       	ret

0000170e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    170e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1710:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1712:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1714:	20 91 4f 01 	lds	r18, 0x014F
    or tmpreg1, ddrreg
    1718:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    171a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    171c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    171e:	30 91 4f 01 	lds	r19, 0x014F
    1722:	20 30       	cpi	r18, 0x00	; 0
    1724:	29 f0       	breq	.+10     	; 0x1730 <message_send+0x22>
    1726:	00 00       	nop
    1728:	25 b1       	in	r18, 0x05	; 5
    172a:	23 2b       	or	r18, r19
    172c:	25 b9       	out	0x05, r18	; 5
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <message_send+0x2a>
    1730:	00 00       	nop
    1732:	00 00       	nop
    1734:	00 00       	nop
    1736:	00 c0       	rjmp	.+0      	; 0x1738 <message_send+0x2a>
    1738:	00 00       	nop
    173a:	00 00       	nop
    173c:	00 00       	nop
    173e:	30 95       	com	r19
    1740:	25 b1       	in	r18, 0x05	; 5
    1742:	23 23       	and	r18, r19
    1744:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1746:	2e ea       	ldi	r18, 0xAE	; 174
    1748:	2a 95       	dec	r18
    174a:	f1 f7       	brne	.-4      	; 0x1748 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    174c:	2b ee       	ldi	r18, 0xEB	; 235

0000174e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    174e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1750:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1754:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1756:	30 91 4f 01 	lds	r19, 0x014F
    com tmpreg2
    175a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    175c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    175e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1760:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1762:	0f be       	out	0x3f, r0	; 63
    return 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	08 95       	ret

00001768 <nocollision>:
nocollision:
    nop
    1768:	00 00       	nop
    dec tmpreg1
    176a:	2a 95       	dec	r18
    brne checkcollision
    176c:	81 f7       	brne	.-32     	; 0x174e <checkcollision>

    ldi tmpreg1, 0x01
    176e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1770:	30 91 4f 01 	lds	r19, 0x014F
    1774:	20 30       	cpi	r18, 0x00	; 0
    1776:	29 f0       	breq	.+10     	; 0x1782 <nocollision+0x1a>
    1778:	00 00       	nop
    177a:	25 b1       	in	r18, 0x05	; 5
    177c:	23 2b       	or	r18, r19
    177e:	25 b9       	out	0x05, r18	; 5
    1780:	04 c0       	rjmp	.+8      	; 0x178a <nocollision+0x22>
    1782:	00 00       	nop
    1784:	00 00       	nop
    1786:	00 00       	nop
    1788:	00 c0       	rjmp	.+0      	; 0x178a <nocollision+0x22>
    178a:	00 00       	nop
    178c:	00 00       	nop
    178e:	00 00       	nop
    1790:	30 95       	com	r19
    1792:	25 b1       	in	r18, 0x05	; 5
    1794:	23 23       	and	r18, r19
    1796:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1798:	00 00       	nop
    179a:	24 e5       	ldi	r18, 0x54	; 84
    179c:	2a 95       	dec	r18
    179e:	f1 f7       	brne	.-4      	; 0x179c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    17a0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    17a2:	8c e0       	ldi	r24, 0x0C	; 12

000017a4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    17a4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    17a8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    17aa:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    17ac:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    17ae:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    17b0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    17b4:	50 e0       	ldi	r21, 0x00	; 0

000017b6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    17b6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    17b8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    17ba:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    17bc:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    17be:	30 91 4f 01 	lds	r19, 0x014F
    17c2:	20 30       	cpi	r18, 0x00	; 0
    17c4:	29 f0       	breq	.+10     	; 0x17d0 <sendbit+0x1a>
    17c6:	00 00       	nop
    17c8:	25 b1       	in	r18, 0x05	; 5
    17ca:	23 2b       	or	r18, r19
    17cc:	25 b9       	out	0x05, r18	; 5
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <sendbit+0x22>
    17d0:	00 00       	nop
    17d2:	00 00       	nop
    17d4:	00 00       	nop
    17d6:	00 c0       	rjmp	.+0      	; 0x17d8 <sendbit+0x22>
    17d8:	00 00       	nop
    17da:	00 00       	nop
    17dc:	00 00       	nop
    17de:	30 95       	com	r19
    17e0:	25 b1       	in	r18, 0x05	; 5
    17e2:	23 23       	and	r18, r19
    17e4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    17e6:	00 00       	nop
    17e8:	21 e5       	ldi	r18, 0x51	; 81
    17ea:	2a 95       	dec	r18
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    17ee:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    17f0:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    17f2:	9a 95       	dec	r25
    brne sendbit
    17f4:	01 f7       	brne	.-64     	; 0x17b6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    17f6:	8a 95       	dec	r24
    brne sendbyte
    17f8:	a9 f6       	brne	.-86     	; 0x17a4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    17fa:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    17fc:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    17fe:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1800:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1802:	30 91 4f 01 	lds	r19, 0x014F
    com tmpreg2
    1806:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1808:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    180a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    180c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    180e:	0f be       	out	0x3f, r0	; 63
    return 1
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	08 95       	ret

00001814 <main>:
    }
}

int main()
{
    kilo_init();
    1814:	0e 94 9b 02 	call	0x536	; 0x536 <kilo_init>
    kilo_message_rx = message_rx;
    1818:	8a e7       	ldi	r24, 0x7A	; 122
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	90 93 14 01 	sts	0x0114, r25
    1820:	80 93 13 01 	sts	0x0113, r24
    debug_init();
    1824:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <debug_init>
    kilo_start(setup, loop);
    1828:	67 ec       	ldi	r22, 0xC7	; 199
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	8a e9       	ldi	r24, 0x9A	; 154
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 97 03 	call	0x72e	; 0x72e <kilo_start>

    return 0;
}
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	08 95       	ret

0000183a <__divmodhi4>:
    183a:	97 fb       	bst	r25, 7
    183c:	07 2e       	mov	r0, r23
    183e:	16 f4       	brtc	.+4      	; 0x1844 <__divmodhi4+0xa>
    1840:	00 94       	com	r0
    1842:	07 d0       	rcall	.+14     	; 0x1852 <__divmodhi4_neg1>
    1844:	77 fd       	sbrc	r23, 7
    1846:	09 d0       	rcall	.+18     	; 0x185a <__divmodhi4_neg2>
    1848:	0e 94 46 0c 	call	0x188c	; 0x188c <__udivmodhi4>
    184c:	07 fc       	sbrc	r0, 7
    184e:	05 d0       	rcall	.+10     	; 0x185a <__divmodhi4_neg2>
    1850:	3e f4       	brtc	.+14     	; 0x1860 <__divmodhi4_exit>

00001852 <__divmodhi4_neg1>:
    1852:	90 95       	com	r25
    1854:	81 95       	neg	r24
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	08 95       	ret

0000185a <__divmodhi4_neg2>:
    185a:	70 95       	com	r23
    185c:	61 95       	neg	r22
    185e:	7f 4f       	sbci	r23, 0xFF	; 255

00001860 <__divmodhi4_exit>:
    1860:	08 95       	ret

00001862 <__tablejump2__>:
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	05 90       	lpm	r0, Z+
    1868:	f4 91       	lpm	r31, Z
    186a:	e0 2d       	mov	r30, r0
    186c:	09 94       	ijmp

0000186e <__umulhisi3>:
    186e:	a2 9f       	mul	r26, r18
    1870:	b0 01       	movw	r22, r0
    1872:	b3 9f       	mul	r27, r19
    1874:	c0 01       	movw	r24, r0
    1876:	a3 9f       	mul	r26, r19
    1878:	70 0d       	add	r23, r0
    187a:	81 1d       	adc	r24, r1
    187c:	11 24       	eor	r1, r1
    187e:	91 1d       	adc	r25, r1
    1880:	b2 9f       	mul	r27, r18
    1882:	70 0d       	add	r23, r0
    1884:	81 1d       	adc	r24, r1
    1886:	11 24       	eor	r1, r1
    1888:	91 1d       	adc	r25, r1
    188a:	08 95       	ret

0000188c <__udivmodhi4>:
    188c:	aa 1b       	sub	r26, r26
    188e:	bb 1b       	sub	r27, r27
    1890:	51 e1       	ldi	r21, 0x11	; 17
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <__udivmodhi4_ep>

00001894 <__udivmodhi4_loop>:
    1894:	aa 1f       	adc	r26, r26
    1896:	bb 1f       	adc	r27, r27
    1898:	a6 17       	cp	r26, r22
    189a:	b7 07       	cpc	r27, r23
    189c:	10 f0       	brcs	.+4      	; 0x18a2 <__udivmodhi4_ep>
    189e:	a6 1b       	sub	r26, r22
    18a0:	b7 0b       	sbc	r27, r23

000018a2 <__udivmodhi4_ep>:
    18a2:	88 1f       	adc	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	5a 95       	dec	r21
    18a8:	a9 f7       	brne	.-22     	; 0x1894 <__udivmodhi4_loop>
    18aa:	80 95       	com	r24
    18ac:	90 95       	com	r25
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	08 95       	ret

000018b4 <__subsf3>:
    18b4:	50 58       	subi	r21, 0x80	; 128

000018b6 <__addsf3>:
    18b6:	bb 27       	eor	r27, r27
    18b8:	aa 27       	eor	r26, r26
    18ba:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__addsf3x>
    18be:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__fp_round>
    18c2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscA>
    18c6:	38 f0       	brcs	.+14     	; 0x18d6 <__addsf3+0x20>
    18c8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscB>
    18cc:	20 f0       	brcs	.+8      	; 0x18d6 <__addsf3+0x20>
    18ce:	39 f4       	brne	.+14     	; 0x18de <__addsf3+0x28>
    18d0:	9f 3f       	cpi	r25, 0xFF	; 255
    18d2:	19 f4       	brne	.+6      	; 0x18da <__addsf3+0x24>
    18d4:	26 f4       	brtc	.+8      	; 0x18de <__addsf3+0x28>
    18d6:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>
    18da:	0e f4       	brtc	.+2      	; 0x18de <__addsf3+0x28>
    18dc:	e0 95       	com	r30
    18de:	e7 fb       	bst	r30, 7
    18e0:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>

000018e4 <__addsf3x>:
    18e4:	e9 2f       	mov	r30, r25
    18e6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_split3>
    18ea:	58 f3       	brcs	.-42     	; 0x18c2 <__addsf3+0xc>
    18ec:	ba 17       	cp	r27, r26
    18ee:	62 07       	cpc	r22, r18
    18f0:	73 07       	cpc	r23, r19
    18f2:	84 07       	cpc	r24, r20
    18f4:	95 07       	cpc	r25, r21
    18f6:	20 f0       	brcs	.+8      	; 0x1900 <__addsf3x+0x1c>
    18f8:	79 f4       	brne	.+30     	; 0x1918 <__addsf3x+0x34>
    18fa:	a6 f5       	brtc	.+104    	; 0x1964 <__addsf3x+0x80>
    18fc:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_zero>
    1900:	0e f4       	brtc	.+2      	; 0x1904 <__addsf3x+0x20>
    1902:	e0 95       	com	r30
    1904:	0b 2e       	mov	r0, r27
    1906:	ba 2f       	mov	r27, r26
    1908:	a0 2d       	mov	r26, r0
    190a:	0b 01       	movw	r0, r22
    190c:	b9 01       	movw	r22, r18
    190e:	90 01       	movw	r18, r0
    1910:	0c 01       	movw	r0, r24
    1912:	ca 01       	movw	r24, r20
    1914:	a0 01       	movw	r20, r0
    1916:	11 24       	eor	r1, r1
    1918:	ff 27       	eor	r31, r31
    191a:	59 1b       	sub	r21, r25
    191c:	99 f0       	breq	.+38     	; 0x1944 <__addsf3x+0x60>
    191e:	59 3f       	cpi	r21, 0xF9	; 249
    1920:	50 f4       	brcc	.+20     	; 0x1936 <__addsf3x+0x52>
    1922:	50 3e       	cpi	r21, 0xE0	; 224
    1924:	68 f1       	brcs	.+90     	; 0x1980 <__addsf3x+0x9c>
    1926:	1a 16       	cp	r1, r26
    1928:	f0 40       	sbci	r31, 0x00	; 0
    192a:	a2 2f       	mov	r26, r18
    192c:	23 2f       	mov	r18, r19
    192e:	34 2f       	mov	r19, r20
    1930:	44 27       	eor	r20, r20
    1932:	58 5f       	subi	r21, 0xF8	; 248
    1934:	f3 cf       	rjmp	.-26     	; 0x191c <__addsf3x+0x38>
    1936:	46 95       	lsr	r20
    1938:	37 95       	ror	r19
    193a:	27 95       	ror	r18
    193c:	a7 95       	ror	r26
    193e:	f0 40       	sbci	r31, 0x00	; 0
    1940:	53 95       	inc	r21
    1942:	c9 f7       	brne	.-14     	; 0x1936 <__addsf3x+0x52>
    1944:	7e f4       	brtc	.+30     	; 0x1964 <__addsf3x+0x80>
    1946:	1f 16       	cp	r1, r31
    1948:	ba 0b       	sbc	r27, r26
    194a:	62 0b       	sbc	r22, r18
    194c:	73 0b       	sbc	r23, r19
    194e:	84 0b       	sbc	r24, r20
    1950:	ba f0       	brmi	.+46     	; 0x1980 <__addsf3x+0x9c>
    1952:	91 50       	subi	r25, 0x01	; 1
    1954:	a1 f0       	breq	.+40     	; 0x197e <__addsf3x+0x9a>
    1956:	ff 0f       	add	r31, r31
    1958:	bb 1f       	adc	r27, r27
    195a:	66 1f       	adc	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	c2 f7       	brpl	.-16     	; 0x1952 <__addsf3x+0x6e>
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <__addsf3x+0x9c>
    1964:	ba 0f       	add	r27, r26
    1966:	62 1f       	adc	r22, r18
    1968:	73 1f       	adc	r23, r19
    196a:	84 1f       	adc	r24, r20
    196c:	48 f4       	brcc	.+18     	; 0x1980 <__addsf3x+0x9c>
    196e:	87 95       	ror	r24
    1970:	77 95       	ror	r23
    1972:	67 95       	ror	r22
    1974:	b7 95       	ror	r27
    1976:	f7 95       	ror	r31
    1978:	9e 3f       	cpi	r25, 0xFE	; 254
    197a:	08 f0       	brcs	.+2      	; 0x197e <__addsf3x+0x9a>
    197c:	b0 cf       	rjmp	.-160    	; 0x18de <__addsf3+0x28>
    197e:	93 95       	inc	r25
    1980:	88 0f       	add	r24, r24
    1982:	08 f0       	brcs	.+2      	; 0x1986 <__addsf3x+0xa2>
    1984:	99 27       	eor	r25, r25
    1986:	ee 0f       	add	r30, r30
    1988:	97 95       	ror	r25
    198a:	87 95       	ror	r24
    198c:	08 95       	ret

0000198e <__divsf3>:
    198e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__divsf3x>
    1992:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__fp_round>
    1996:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscB>
    199a:	58 f0       	brcs	.+22     	; 0x19b2 <__divsf3+0x24>
    199c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscA>
    19a0:	40 f0       	brcs	.+16     	; 0x19b2 <__divsf3+0x24>
    19a2:	29 f4       	brne	.+10     	; 0x19ae <__divsf3+0x20>
    19a4:	5f 3f       	cpi	r21, 0xFF	; 255
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <__divsf3+0x24>
    19a8:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    19ac:	51 11       	cpse	r21, r1
    19ae:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    19b2:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>

000019b6 <__divsf3x>:
    19b6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_split3>
    19ba:	68 f3       	brcs	.-38     	; 0x1996 <__divsf3+0x8>

000019bc <__divsf3_pse>:
    19bc:	99 23       	and	r25, r25
    19be:	b1 f3       	breq	.-20     	; 0x19ac <__divsf3+0x1e>
    19c0:	55 23       	and	r21, r21
    19c2:	91 f3       	breq	.-28     	; 0x19a8 <__divsf3+0x1a>
    19c4:	95 1b       	sub	r25, r21
    19c6:	55 0b       	sbc	r21, r21
    19c8:	bb 27       	eor	r27, r27
    19ca:	aa 27       	eor	r26, r26
    19cc:	62 17       	cp	r22, r18
    19ce:	73 07       	cpc	r23, r19
    19d0:	84 07       	cpc	r24, r20
    19d2:	38 f0       	brcs	.+14     	; 0x19e2 <__divsf3_pse+0x26>
    19d4:	9f 5f       	subi	r25, 0xFF	; 255
    19d6:	5f 4f       	sbci	r21, 0xFF	; 255
    19d8:	22 0f       	add	r18, r18
    19da:	33 1f       	adc	r19, r19
    19dc:	44 1f       	adc	r20, r20
    19de:	aa 1f       	adc	r26, r26
    19e0:	a9 f3       	breq	.-22     	; 0x19cc <__divsf3_pse+0x10>
    19e2:	35 d0       	rcall	.+106    	; 0x1a4e <__divsf3_pse+0x92>
    19e4:	0e 2e       	mov	r0, r30
    19e6:	3a f0       	brmi	.+14     	; 0x19f6 <__divsf3_pse+0x3a>
    19e8:	e0 e8       	ldi	r30, 0x80	; 128
    19ea:	32 d0       	rcall	.+100    	; 0x1a50 <__divsf3_pse+0x94>
    19ec:	91 50       	subi	r25, 0x01	; 1
    19ee:	50 40       	sbci	r21, 0x00	; 0
    19f0:	e6 95       	lsr	r30
    19f2:	00 1c       	adc	r0, r0
    19f4:	ca f7       	brpl	.-14     	; 0x19e8 <__divsf3_pse+0x2c>
    19f6:	2b d0       	rcall	.+86     	; 0x1a4e <__divsf3_pse+0x92>
    19f8:	fe 2f       	mov	r31, r30
    19fa:	29 d0       	rcall	.+82     	; 0x1a4e <__divsf3_pse+0x92>
    19fc:	66 0f       	add	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	bb 1f       	adc	r27, r27
    1a04:	26 17       	cp	r18, r22
    1a06:	37 07       	cpc	r19, r23
    1a08:	48 07       	cpc	r20, r24
    1a0a:	ab 07       	cpc	r26, r27
    1a0c:	b0 e8       	ldi	r27, 0x80	; 128
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <__divsf3_pse+0x56>
    1a10:	bb 0b       	sbc	r27, r27
    1a12:	80 2d       	mov	r24, r0
    1a14:	bf 01       	movw	r22, r30
    1a16:	ff 27       	eor	r31, r31
    1a18:	93 58       	subi	r25, 0x83	; 131
    1a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1c:	3a f0       	brmi	.+14     	; 0x1a2c <__divsf3_pse+0x70>
    1a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a20:	51 05       	cpc	r21, r1
    1a22:	78 f0       	brcs	.+30     	; 0x1a42 <__divsf3_pse+0x86>
    1a24:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1a28:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    1a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2e:	e4 f3       	brlt	.-8      	; 0x1a28 <__divsf3_pse+0x6c>
    1a30:	98 3e       	cpi	r25, 0xE8	; 232
    1a32:	d4 f3       	brlt	.-12     	; 0x1a28 <__divsf3_pse+0x6c>
    1a34:	86 95       	lsr	r24
    1a36:	77 95       	ror	r23
    1a38:	67 95       	ror	r22
    1a3a:	b7 95       	ror	r27
    1a3c:	f7 95       	ror	r31
    1a3e:	9f 5f       	subi	r25, 0xFF	; 255
    1a40:	c9 f7       	brne	.-14     	; 0x1a34 <__divsf3_pse+0x78>
    1a42:	88 0f       	add	r24, r24
    1a44:	91 1d       	adc	r25, r1
    1a46:	96 95       	lsr	r25
    1a48:	87 95       	ror	r24
    1a4a:	97 f9       	bld	r25, 7
    1a4c:	08 95       	ret
    1a4e:	e1 e0       	ldi	r30, 0x01	; 1
    1a50:	66 0f       	add	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	bb 1f       	adc	r27, r27
    1a58:	62 17       	cp	r22, r18
    1a5a:	73 07       	cpc	r23, r19
    1a5c:	84 07       	cpc	r24, r20
    1a5e:	ba 07       	cpc	r27, r26
    1a60:	20 f0       	brcs	.+8      	; 0x1a6a <__divsf3_pse+0xae>
    1a62:	62 1b       	sub	r22, r18
    1a64:	73 0b       	sbc	r23, r19
    1a66:	84 0b       	sbc	r24, r20
    1a68:	ba 0b       	sbc	r27, r26
    1a6a:	ee 1f       	adc	r30, r30
    1a6c:	88 f7       	brcc	.-30     	; 0x1a50 <__divsf3_pse+0x94>
    1a6e:	e0 95       	com	r30
    1a70:	08 95       	ret

00001a72 <__fixsfsi>:
    1a72:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixunssfsi>
    1a76:	68 94       	set
    1a78:	b1 11       	cpse	r27, r1
    1a7a:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    1a7e:	08 95       	ret

00001a80 <__fixunssfsi>:
    1a80:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_splitA>
    1a84:	88 f0       	brcs	.+34     	; 0x1aa8 <__fixunssfsi+0x28>
    1a86:	9f 57       	subi	r25, 0x7F	; 127
    1a88:	98 f0       	brcs	.+38     	; 0x1ab0 <__fixunssfsi+0x30>
    1a8a:	b9 2f       	mov	r27, r25
    1a8c:	99 27       	eor	r25, r25
    1a8e:	b7 51       	subi	r27, 0x17	; 23
    1a90:	b0 f0       	brcs	.+44     	; 0x1abe <__fixunssfsi+0x3e>
    1a92:	e1 f0       	breq	.+56     	; 0x1acc <__fixunssfsi+0x4c>
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	1a f0       	brmi	.+6      	; 0x1aa4 <__fixunssfsi+0x24>
    1a9e:	ba 95       	dec	r27
    1aa0:	c9 f7       	brne	.-14     	; 0x1a94 <__fixunssfsi+0x14>
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <__fixunssfsi+0x4c>
    1aa4:	b1 30       	cpi	r27, 0x01	; 1
    1aa6:	91 f0       	breq	.+36     	; 0x1acc <__fixunssfsi+0x4c>
    1aa8:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_zero>
    1aac:	b1 e0       	ldi	r27, 0x01	; 1
    1aae:	08 95       	ret
    1ab0:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_zero>
    1ab4:	67 2f       	mov	r22, r23
    1ab6:	78 2f       	mov	r23, r24
    1ab8:	88 27       	eor	r24, r24
    1aba:	b8 5f       	subi	r27, 0xF8	; 248
    1abc:	39 f0       	breq	.+14     	; 0x1acc <__fixunssfsi+0x4c>
    1abe:	b9 3f       	cpi	r27, 0xF9	; 249
    1ac0:	cc f3       	brlt	.-14     	; 0x1ab4 <__fixunssfsi+0x34>
    1ac2:	86 95       	lsr	r24
    1ac4:	77 95       	ror	r23
    1ac6:	67 95       	ror	r22
    1ac8:	b3 95       	inc	r27
    1aca:	d9 f7       	brne	.-10     	; 0x1ac2 <__fixunssfsi+0x42>
    1acc:	3e f4       	brtc	.+14     	; 0x1adc <__fixunssfsi+0x5c>
    1ace:	90 95       	com	r25
    1ad0:	80 95       	com	r24
    1ad2:	70 95       	com	r23
    1ad4:	61 95       	neg	r22
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ada:	9f 4f       	sbci	r25, 0xFF	; 255
    1adc:	08 95       	ret

00001ade <__floatunsisf>:
    1ade:	e8 94       	clt
    1ae0:	09 c0       	rjmp	.+18     	; 0x1af4 <__floatsisf+0x12>

00001ae2 <__floatsisf>:
    1ae2:	97 fb       	bst	r25, 7
    1ae4:	3e f4       	brtc	.+14     	; 0x1af4 <__floatsisf+0x12>
    1ae6:	90 95       	com	r25
    1ae8:	80 95       	com	r24
    1aea:	70 95       	com	r23
    1aec:	61 95       	neg	r22
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8f 4f       	sbci	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	99 23       	and	r25, r25
    1af6:	a9 f0       	breq	.+42     	; 0x1b22 <__floatsisf+0x40>
    1af8:	f9 2f       	mov	r31, r25
    1afa:	96 e9       	ldi	r25, 0x96	; 150
    1afc:	bb 27       	eor	r27, r27
    1afe:	93 95       	inc	r25
    1b00:	f6 95       	lsr	r31
    1b02:	87 95       	ror	r24
    1b04:	77 95       	ror	r23
    1b06:	67 95       	ror	r22
    1b08:	b7 95       	ror	r27
    1b0a:	f1 11       	cpse	r31, r1
    1b0c:	f8 cf       	rjmp	.-16     	; 0x1afe <__floatsisf+0x1c>
    1b0e:	fa f4       	brpl	.+62     	; 0x1b4e <__floatsisf+0x6c>
    1b10:	bb 0f       	add	r27, r27
    1b12:	11 f4       	brne	.+4      	; 0x1b18 <__floatsisf+0x36>
    1b14:	60 ff       	sbrs	r22, 0
    1b16:	1b c0       	rjmp	.+54     	; 0x1b4e <__floatsisf+0x6c>
    1b18:	6f 5f       	subi	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	16 c0       	rjmp	.+44     	; 0x1b4e <__floatsisf+0x6c>
    1b22:	88 23       	and	r24, r24
    1b24:	11 f0       	breq	.+4      	; 0x1b2a <__floatsisf+0x48>
    1b26:	96 e9       	ldi	r25, 0x96	; 150
    1b28:	11 c0       	rjmp	.+34     	; 0x1b4c <__floatsisf+0x6a>
    1b2a:	77 23       	and	r23, r23
    1b2c:	21 f0       	breq	.+8      	; 0x1b36 <__floatsisf+0x54>
    1b2e:	9e e8       	ldi	r25, 0x8E	; 142
    1b30:	87 2f       	mov	r24, r23
    1b32:	76 2f       	mov	r23, r22
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <__floatsisf+0x5e>
    1b36:	66 23       	and	r22, r22
    1b38:	71 f0       	breq	.+28     	; 0x1b56 <__floatsisf+0x74>
    1b3a:	96 e8       	ldi	r25, 0x86	; 134
    1b3c:	86 2f       	mov	r24, r22
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	2a f0       	brmi	.+10     	; 0x1b4e <__floatsisf+0x6c>
    1b44:	9a 95       	dec	r25
    1b46:	66 0f       	add	r22, r22
    1b48:	77 1f       	adc	r23, r23
    1b4a:	88 1f       	adc	r24, r24
    1b4c:	da f7       	brpl	.-10     	; 0x1b44 <__floatsisf+0x62>
    1b4e:	88 0f       	add	r24, r24
    1b50:	96 95       	lsr	r25
    1b52:	87 95       	ror	r24
    1b54:	97 f9       	bld	r25, 7
    1b56:	08 95       	ret

00001b58 <__fp_inf>:
    1b58:	97 f9       	bld	r25, 7
    1b5a:	9f 67       	ori	r25, 0x7F	; 127
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	08 95       	ret

00001b64 <__fp_nan>:
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	80 ec       	ldi	r24, 0xC0	; 192
    1b68:	08 95       	ret

00001b6a <__fp_pscA>:
    1b6a:	00 24       	eor	r0, r0
    1b6c:	0a 94       	dec	r0
    1b6e:	16 16       	cp	r1, r22
    1b70:	17 06       	cpc	r1, r23
    1b72:	18 06       	cpc	r1, r24
    1b74:	09 06       	cpc	r0, r25
    1b76:	08 95       	ret

00001b78 <__fp_pscB>:
    1b78:	00 24       	eor	r0, r0
    1b7a:	0a 94       	dec	r0
    1b7c:	12 16       	cp	r1, r18
    1b7e:	13 06       	cpc	r1, r19
    1b80:	14 06       	cpc	r1, r20
    1b82:	05 06       	cpc	r0, r21
    1b84:	08 95       	ret

00001b86 <__fp_round>:
    1b86:	09 2e       	mov	r0, r25
    1b88:	03 94       	inc	r0
    1b8a:	00 0c       	add	r0, r0
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <__fp_round+0xc>
    1b8e:	88 23       	and	r24, r24
    1b90:	52 f0       	brmi	.+20     	; 0x1ba6 <__fp_round+0x20>
    1b92:	bb 0f       	add	r27, r27
    1b94:	40 f4       	brcc	.+16     	; 0x1ba6 <__fp_round+0x20>
    1b96:	bf 2b       	or	r27, r31
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <__fp_round+0x18>
    1b9a:	60 ff       	sbrs	r22, 0
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <__fp_round+0x20>
    1b9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	08 95       	ret

00001ba8 <__fp_split3>:
    1ba8:	57 fd       	sbrc	r21, 7
    1baa:	90 58       	subi	r25, 0x80	; 128
    1bac:	44 0f       	add	r20, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	59 f0       	breq	.+22     	; 0x1bc8 <__fp_splitA+0x10>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <__fp_splitA+0x1a>
    1bb6:	47 95       	ror	r20

00001bb8 <__fp_splitA>:
    1bb8:	88 0f       	add	r24, r24
    1bba:	97 fb       	bst	r25, 7
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <__fp_splitA+0x20>
    1bc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc2:	79 f0       	breq	.+30     	; 0x1be2 <__fp_splitA+0x2a>
    1bc4:	87 95       	ror	r24
    1bc6:	08 95       	ret
    1bc8:	12 16       	cp	r1, r18
    1bca:	13 06       	cpc	r1, r19
    1bcc:	14 06       	cpc	r1, r20
    1bce:	55 1f       	adc	r21, r21
    1bd0:	f2 cf       	rjmp	.-28     	; 0x1bb6 <__fp_split3+0xe>
    1bd2:	46 95       	lsr	r20
    1bd4:	f1 df       	rcall	.-30     	; 0x1bb8 <__fp_splitA>
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <__fp_splitA+0x30>
    1bd8:	16 16       	cp	r1, r22
    1bda:	17 06       	cpc	r1, r23
    1bdc:	18 06       	cpc	r1, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	f1 cf       	rjmp	.-30     	; 0x1bc4 <__fp_splitA+0xc>
    1be2:	86 95       	lsr	r24
    1be4:	71 05       	cpc	r23, r1
    1be6:	61 05       	cpc	r22, r1
    1be8:	08 94       	sec
    1bea:	08 95       	ret

00001bec <__fp_zero>:
    1bec:	e8 94       	clt

00001bee <__fp_szero>:
    1bee:	bb 27       	eor	r27, r27
    1bf0:	66 27       	eor	r22, r22
    1bf2:	77 27       	eor	r23, r23
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	08 95       	ret

00001bfa <__mulsf3>:
    1bfa:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3x>
    1bfe:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__fp_round>
    1c02:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscA>
    1c06:	38 f0       	brcs	.+14     	; 0x1c16 <__mulsf3+0x1c>
    1c08:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscB>
    1c0c:	20 f0       	brcs	.+8      	; 0x1c16 <__mulsf3+0x1c>
    1c0e:	95 23       	and	r25, r21
    1c10:	11 f0       	breq	.+4      	; 0x1c16 <__mulsf3+0x1c>
    1c12:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1c16:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>
    1c1a:	11 24       	eor	r1, r1
    1c1c:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>

00001c20 <__mulsf3x>:
    1c20:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_split3>
    1c24:	70 f3       	brcs	.-36     	; 0x1c02 <__mulsf3+0x8>

00001c26 <__mulsf3_pse>:
    1c26:	95 9f       	mul	r25, r21
    1c28:	c1 f3       	breq	.-16     	; 0x1c1a <__mulsf3+0x20>
    1c2a:	95 0f       	add	r25, r21
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	55 1f       	adc	r21, r21
    1c30:	62 9f       	mul	r22, r18
    1c32:	f0 01       	movw	r30, r0
    1c34:	72 9f       	mul	r23, r18
    1c36:	bb 27       	eor	r27, r27
    1c38:	f0 0d       	add	r31, r0
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	63 9f       	mul	r22, r19
    1c3e:	aa 27       	eor	r26, r26
    1c40:	f0 0d       	add	r31, r0
    1c42:	b1 1d       	adc	r27, r1
    1c44:	aa 1f       	adc	r26, r26
    1c46:	64 9f       	mul	r22, r20
    1c48:	66 27       	eor	r22, r22
    1c4a:	b0 0d       	add	r27, r0
    1c4c:	a1 1d       	adc	r26, r1
    1c4e:	66 1f       	adc	r22, r22
    1c50:	82 9f       	mul	r24, r18
    1c52:	22 27       	eor	r18, r18
    1c54:	b0 0d       	add	r27, r0
    1c56:	a1 1d       	adc	r26, r1
    1c58:	62 1f       	adc	r22, r18
    1c5a:	73 9f       	mul	r23, r19
    1c5c:	b0 0d       	add	r27, r0
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	62 1f       	adc	r22, r18
    1c62:	83 9f       	mul	r24, r19
    1c64:	a0 0d       	add	r26, r0
    1c66:	61 1d       	adc	r22, r1
    1c68:	22 1f       	adc	r18, r18
    1c6a:	74 9f       	mul	r23, r20
    1c6c:	33 27       	eor	r19, r19
    1c6e:	a0 0d       	add	r26, r0
    1c70:	61 1d       	adc	r22, r1
    1c72:	23 1f       	adc	r18, r19
    1c74:	84 9f       	mul	r24, r20
    1c76:	60 0d       	add	r22, r0
    1c78:	21 1d       	adc	r18, r1
    1c7a:	82 2f       	mov	r24, r18
    1c7c:	76 2f       	mov	r23, r22
    1c7e:	6a 2f       	mov	r22, r26
    1c80:	11 24       	eor	r1, r1
    1c82:	9f 57       	subi	r25, 0x7F	; 127
    1c84:	50 40       	sbci	r21, 0x00	; 0
    1c86:	9a f0       	brmi	.+38     	; 0x1cae <__mulsf3_pse+0x88>
    1c88:	f1 f0       	breq	.+60     	; 0x1cc6 <__mulsf3_pse+0xa0>
    1c8a:	88 23       	and	r24, r24
    1c8c:	4a f0       	brmi	.+18     	; 0x1ca0 <__mulsf3_pse+0x7a>
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	bb 1f       	adc	r27, r27
    1c94:	66 1f       	adc	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	91 50       	subi	r25, 0x01	; 1
    1c9c:	50 40       	sbci	r21, 0x00	; 0
    1c9e:	a9 f7       	brne	.-22     	; 0x1c8a <__mulsf3_pse+0x64>
    1ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	80 f0       	brcs	.+32     	; 0x1cc6 <__mulsf3_pse+0xa0>
    1ca6:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1caa:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    1cae:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb0:	e4 f3       	brlt	.-8      	; 0x1caa <__mulsf3_pse+0x84>
    1cb2:	98 3e       	cpi	r25, 0xE8	; 232
    1cb4:	d4 f3       	brlt	.-12     	; 0x1caa <__mulsf3_pse+0x84>
    1cb6:	86 95       	lsr	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b7 95       	ror	r27
    1cbe:	f7 95       	ror	r31
    1cc0:	e7 95       	ror	r30
    1cc2:	9f 5f       	subi	r25, 0xFF	; 255
    1cc4:	c1 f7       	brne	.-16     	; 0x1cb6 <__mulsf3_pse+0x90>
    1cc6:	fe 2b       	or	r31, r30
    1cc8:	88 0f       	add	r24, r24
    1cca:	91 1d       	adc	r25, r1
    1ccc:	96 95       	lsr	r25
    1cce:	87 95       	ror	r24
    1cd0:	97 f9       	bld	r25, 7
    1cd2:	08 95       	ret

00001cd4 <do_rand>:
    1cd4:	8f 92       	push	r8
    1cd6:	9f 92       	push	r9
    1cd8:	af 92       	push	r10
    1cda:	bf 92       	push	r11
    1cdc:	cf 92       	push	r12
    1cde:	df 92       	push	r13
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	ec 01       	movw	r28, r24
    1cea:	68 81       	ld	r22, Y
    1cec:	79 81       	ldd	r23, Y+1	; 0x01
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf2:	61 15       	cp	r22, r1
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	81 05       	cpc	r24, r1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <do_rand+0x30>
    1cfc:	64 e2       	ldi	r22, 0x24	; 36
    1cfe:	79 ed       	ldi	r23, 0xD9	; 217
    1d00:	8b e5       	ldi	r24, 0x5B	; 91
    1d02:	97 e0       	ldi	r25, 0x07	; 7
    1d04:	2d e1       	ldi	r18, 0x1D	; 29
    1d06:	33 ef       	ldi	r19, 0xF3	; 243
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__divmodsi4>
    1d10:	49 01       	movw	r8, r18
    1d12:	5a 01       	movw	r10, r20
    1d14:	9b 01       	movw	r18, r22
    1d16:	ac 01       	movw	r20, r24
    1d18:	a7 ea       	ldi	r26, 0xA7	; 167
    1d1a:	b1 e4       	ldi	r27, 0x41	; 65
    1d1c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__muluhisi3>
    1d20:	6b 01       	movw	r12, r22
    1d22:	7c 01       	movw	r14, r24
    1d24:	ac ee       	ldi	r26, 0xEC	; 236
    1d26:	b4 ef       	ldi	r27, 0xF4	; 244
    1d28:	a5 01       	movw	r20, r10
    1d2a:	94 01       	movw	r18, r8
    1d2c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__mulohisi3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8c 0d       	add	r24, r12
    1d36:	9d 1d       	adc	r25, r13
    1d38:	ae 1d       	adc	r26, r14
    1d3a:	bf 1d       	adc	r27, r15
    1d3c:	b7 ff       	sbrs	r27, 7
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <do_rand+0x72>
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	a1 09       	sbc	r26, r1
    1d44:	b0 48       	sbci	r27, 0x80	; 128
    1d46:	88 83       	st	Y, r24
    1d48:	99 83       	std	Y+1, r25	; 0x01
    1d4a:	aa 83       	std	Y+2, r26	; 0x02
    1d4c:	bb 83       	std	Y+3, r27	; 0x03
    1d4e:	9f 77       	andi	r25, 0x7F	; 127
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	df 90       	pop	r13
    1d5a:	cf 90       	pop	r12
    1d5c:	bf 90       	pop	r11
    1d5e:	af 90       	pop	r10
    1d60:	9f 90       	pop	r9
    1d62:	8f 90       	pop	r8
    1d64:	08 95       	ret

00001d66 <rand_r>:
    1d66:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <do_rand>
    1d6a:	08 95       	ret

00001d6c <rand>:
    1d6c:	85 e1       	ldi	r24, 0x15	; 21
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <do_rand>
    1d74:	08 95       	ret

00001d76 <srand>:
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	80 93 15 01 	sts	0x0115, r24
    1d7e:	90 93 16 01 	sts	0x0116, r25
    1d82:	a0 93 17 01 	sts	0x0117, r26
    1d86:	b0 93 18 01 	sts	0x0118, r27
    1d8a:	08 95       	ret

00001d8c <eeprom_read_byte>:
    1d8c:	f9 99       	sbic	0x1f, 1	; 31
    1d8e:	fe cf       	rjmp	.-4      	; 0x1d8c <eeprom_read_byte>
    1d90:	92 bd       	out	0x22, r25	; 34
    1d92:	81 bd       	out	0x21, r24	; 33
    1d94:	f8 9a       	sbi	0x1f, 0	; 31
    1d96:	99 27       	eor	r25, r25
    1d98:	80 b5       	in	r24, 0x20	; 32
    1d9a:	08 95       	ret

00001d9c <eeprom_write_byte>:
    1d9c:	26 2f       	mov	r18, r22

00001d9e <eeprom_write_r18>:
    1d9e:	f9 99       	sbic	0x1f, 1	; 31
    1da0:	fe cf       	rjmp	.-4      	; 0x1d9e <eeprom_write_r18>
    1da2:	1f ba       	out	0x1f, r1	; 31
    1da4:	92 bd       	out	0x22, r25	; 34
    1da6:	81 bd       	out	0x21, r24	; 33
    1da8:	20 bd       	out	0x20, r18	; 32
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	fa 9a       	sbi	0x1f, 2	; 31
    1db0:	f9 9a       	sbi	0x1f, 1	; 31
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	08 95       	ret

00001db8 <__divmodsi4>:
    1db8:	05 2e       	mov	r0, r21
    1dba:	97 fb       	bst	r25, 7
    1dbc:	1e f4       	brtc	.+6      	; 0x1dc4 <__divmodsi4+0xc>
    1dbe:	00 94       	com	r0
    1dc0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__negsi2>
    1dc4:	57 fd       	sbrc	r21, 7
    1dc6:	07 d0       	rcall	.+14     	; 0x1dd6 <__divmodsi4_neg2>
    1dc8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__udivmodsi4>
    1dcc:	07 fc       	sbrc	r0, 7
    1dce:	03 d0       	rcall	.+6      	; 0x1dd6 <__divmodsi4_neg2>
    1dd0:	4e f4       	brtc	.+18     	; 0x1de4 <__divmodsi4_exit>
    1dd2:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__negsi2>

00001dd6 <__divmodsi4_neg2>:
    1dd6:	50 95       	com	r21
    1dd8:	40 95       	com	r20
    1dda:	30 95       	com	r19
    1ddc:	21 95       	neg	r18
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	4f 4f       	sbci	r20, 0xFF	; 255
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255

00001de4 <__divmodsi4_exit>:
    1de4:	08 95       	ret

00001de6 <__negsi2>:
    1de6:	90 95       	com	r25
    1de8:	80 95       	com	r24
    1dea:	70 95       	com	r23
    1dec:	61 95       	neg	r22
    1dee:	7f 4f       	sbci	r23, 0xFF	; 255
    1df0:	8f 4f       	sbci	r24, 0xFF	; 255
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	08 95       	ret

00001df6 <__muluhisi3>:
    1df6:	0e 94 37 0c 	call	0x186e	; 0x186e <__umulhisi3>
    1dfa:	a5 9f       	mul	r26, r21
    1dfc:	90 0d       	add	r25, r0
    1dfe:	b4 9f       	mul	r27, r20
    1e00:	90 0d       	add	r25, r0
    1e02:	a4 9f       	mul	r26, r20
    1e04:	80 0d       	add	r24, r0
    1e06:	91 1d       	adc	r25, r1
    1e08:	11 24       	eor	r1, r1
    1e0a:	08 95       	ret

00001e0c <__mulshisi3>:
    1e0c:	b7 ff       	sbrs	r27, 7
    1e0e:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__muluhisi3>

00001e12 <__mulohisi3>:
    1e12:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__muluhisi3>
    1e16:	82 1b       	sub	r24, r18
    1e18:	93 0b       	sbc	r25, r19
    1e1a:	08 95       	ret

00001e1c <__udivmodsi4>:
    1e1c:	a1 e2       	ldi	r26, 0x21	; 33
    1e1e:	1a 2e       	mov	r1, r26
    1e20:	aa 1b       	sub	r26, r26
    1e22:	bb 1b       	sub	r27, r27
    1e24:	fd 01       	movw	r30, r26
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <__udivmodsi4_ep>

00001e28 <__udivmodsi4_loop>:
    1e28:	aa 1f       	adc	r26, r26
    1e2a:	bb 1f       	adc	r27, r27
    1e2c:	ee 1f       	adc	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	a2 17       	cp	r26, r18
    1e32:	b3 07       	cpc	r27, r19
    1e34:	e4 07       	cpc	r30, r20
    1e36:	f5 07       	cpc	r31, r21
    1e38:	20 f0       	brcs	.+8      	; 0x1e42 <__udivmodsi4_ep>
    1e3a:	a2 1b       	sub	r26, r18
    1e3c:	b3 0b       	sbc	r27, r19
    1e3e:	e4 0b       	sbc	r30, r20
    1e40:	f5 0b       	sbc	r31, r21

00001e42 <__udivmodsi4_ep>:
    1e42:	66 1f       	adc	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	1a 94       	dec	r1
    1e4c:	69 f7       	brne	.-38     	; 0x1e28 <__udivmodsi4_loop>
    1e4e:	60 95       	com	r22
    1e50:	70 95       	com	r23
    1e52:	80 95       	com	r24
    1e54:	90 95       	com	r25
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
    1e5a:	bd 01       	movw	r22, r26
    1e5c:	cf 01       	movw	r24, r30
    1e5e:	08 95       	ret

00001e60 <_exit>:
    1e60:	f8 94       	cli

00001e62 <__stop_program>:
    1e62:	ff cf       	rjmp	.-2      	; 0x1e62 <__stop_program>
