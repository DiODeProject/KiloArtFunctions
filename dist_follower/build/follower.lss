
build/follower.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	45 03       	mulsu	r20, r21
      6a:	c1 03       	fmuls	r20, r17
      6c:	19 03       	fmul	r17, r17
      6e:	10 03       	mulsu	r17, r16
      70:	16 03       	mulsu	r17, r22
      72:	a3 03       	fmuls	r18, r19
      74:	98 03       	fmulsu	r17, r16
      76:	23 0a       	sbc	r2, r19
      78:	00 09       	sbc	r16, r0
      7a:	00 09       	sbc	r16, r0
      7c:	20 0a       	sbc	r2, r16
      7e:	2c 0a       	sbc	r2, r28
      80:	1c 0a       	sbc	r1, r28
      82:	33 0a       	sbc	r3, r19
      84:	2f 0a       	sbc	r2, r31
      86:	37 0a       	sbc	r3, r23
      88:	ef 09       	sbc	r30, r15
      8a:	c1 09       	sbc	r28, r1

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e2       	ldi	r30, 0x22	; 34
      b8:	fd e1       	ldi	r31, 0x1D	; 29
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 31       	cpi	r26, 0x1A	; 26
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e1       	ldi	r26, 0x1A	; 26
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 39       	cpi	r26, 0x92	; 146
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <main>
      da:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <message_rx>:
        //previous_light = current_light;
    }
}

void message_rx(message_t *m, distance_measurement_t *d)
{
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
      f8:	20 91 22 01 	lds	r18, 0x0122
      fc:	30 91 23 01 	lds	r19, 0x0123
     100:	23 2b       	or	r18, r19
     102:	a9 f4       	brne	.+42     	; 0x12e <message_rx+0x3a>
     104:	ec 01       	movw	r28, r24
    {
        new_message = 1;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 23 01 	sts	0x0123, r25
     10e:	80 93 22 01 	sts	0x0122, r24
        current_distance = estimate_distance(d);
     112:	cb 01       	movw	r24, r22
     114:	0e 94 3f 05 	call	0xa7e	; 0xa7e <estimate_distance>
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	90 93 1f 01 	sts	0x011F, r25
     11e:	80 93 1e 01 	sts	0x011E, r24
        received_message = m->data[0];
     122:	88 81       	ld	r24, Y
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	90 93 25 01 	sts	0x0125, r25
     12a:	80 93 24 01 	sts	0x0124, r24
    }
}
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <setup>:
    // Compute the average.
    current_light = sum / number_of_samples;
}*/

void setup()
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     138:	80 91 20 01 	lds	r24, 0x0120
     13c:	90 91 21 01 	lds	r25, 0x0121
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	91 f0       	breq	.+36     	; 0x168 <setup+0x34>
    {
        current_motion = new_motion;
     144:	c1 e0       	ldi	r28, 0x01	; 1
     146:	d0 e0       	ldi	r29, 0x00	; 0
     148:	d0 93 21 01 	sts	0x0121, r29
     14c:	c0 93 20 01 	sts	0x0120, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     150:	0e 94 5e 04 	call	0x8bc	; 0x8bc <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     154:	60 91 8a 01 	lds	r22, 0x018A
     158:	80 91 89 01 	lds	r24, 0x0189
     15c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <set_motors>
            both_spined = 1;
     160:	d0 93 1b 01 	sts	0x011B, r29
     164:	c0 93 1a 01 	sts	0x011A, r28

void setup()
{
    // This ensures that the robot starts moving.
    set_motion(FORWARD);
    last_update = kilo_ticks;
     168:	80 91 51 01 	lds	r24, 0x0151
     16c:	90 91 52 01 	lds	r25, 0x0152
     170:	a0 91 53 01 	lds	r26, 0x0153
     174:	b0 91 54 01 	lds	r27, 0x0154
     178:	80 93 2a 01 	sts	0x012A, r24
     17c:	90 93 2b 01 	sts	0x012B, r25
     180:	a0 93 2c 01 	sts	0x012C, r26
     184:	b0 93 2d 01 	sts	0x012D, r27
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <loop>:

void loop()
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
    //printf("light intensity: %d\n", get_ambientlight());
    //sample_light();
    if (kilo_ticks > (last_update + 16))
     192:	40 91 51 01 	lds	r20, 0x0151
     196:	50 91 52 01 	lds	r21, 0x0152
     19a:	60 91 53 01 	lds	r22, 0x0153
     19e:	70 91 54 01 	lds	r23, 0x0154
     1a2:	80 91 2a 01 	lds	r24, 0x012A
     1a6:	90 91 2b 01 	lds	r25, 0x012B
     1aa:	a0 91 2c 01 	lds	r26, 0x012C
     1ae:	b0 91 2d 01 	lds	r27, 0x012D
     1b2:	40 96       	adiw	r24, 0x10	; 16
     1b4:	a1 1d       	adc	r26, r1
     1b6:	b1 1d       	adc	r27, r1
     1b8:	84 17       	cp	r24, r20
     1ba:	95 07       	cpc	r25, r21
     1bc:	a6 07       	cpc	r26, r22
     1be:	b7 07       	cpc	r27, r23
     1c0:	08 f0       	brcs	.+2      	; 0x1c4 <loop+0x36>
     1c2:	52 c0       	rjmp	.+164    	; 0x268 <loop+0xda>
    {
       last_update = kilo_ticks;
     1c4:	80 91 51 01 	lds	r24, 0x0151
     1c8:	90 91 52 01 	lds	r25, 0x0152
     1cc:	a0 91 53 01 	lds	r26, 0x0153
     1d0:	b0 91 54 01 	lds	r27, 0x0154
     1d4:	80 93 2a 01 	sts	0x012A, r24
     1d8:	90 93 2b 01 	sts	0x012B, r25
     1dc:	a0 93 2c 01 	sts	0x012C, r26
     1e0:	b0 93 2d 01 	sts	0x012D, r27
        if (new_message == 1){
     1e4:	c0 91 22 01 	lds	r28, 0x0122
     1e8:	d0 91 23 01 	lds	r29, 0x0123
     1ec:	c1 30       	cpi	r28, 0x01	; 1
     1ee:	d1 05       	cpc	r29, r1
     1f0:	41 f1       	breq	.+80     	; 0x242 <loop+0xb4>
                set_motion(FORWARD);
            }
            
        }
        else{
            int random_number = rand_hard();
     1f2:	0e 94 b8 04 	call	0x970	; 0x970 <rand_hard>
            int random_direction = (random_number % 2);

            if (random_direction == 0)
     1f6:	80 ff       	sbrs	r24, 0
     1f8:	3a c0       	rjmp	.+116    	; 0x26e <loop+0xe0>
                set_color(RGB(1, 0, 0));
                set_motion(LEFT);
            }
            else if (random_direction == 1)
            {
                set_color(RGB(0, 0, 1));
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     200:	80 91 20 01 	lds	r24, 0x0120
     204:	90 91 21 01 	lds	r25, 0x0121
     208:	03 97       	sbiw	r24, 0x03	; 3
     20a:	b1 f0       	breq	.+44     	; 0x238 <loop+0xaa>
    {
        current_motion = new_motion;
     20c:	83 e0       	ldi	r24, 0x03	; 3
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 21 01 	sts	0x0121, r25
     214:	80 93 20 01 	sts	0x0120, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     218:	80 91 1a 01 	lds	r24, 0x011A
     21c:	90 91 1b 01 	lds	r25, 0x011B
     220:	89 2b       	or	r24, r25
     222:	09 f4       	brne	.+2      	; 0x226 <loop+0x98>
     224:	69 c0       	rjmp	.+210    	; 0x2f8 <loop+0x16a>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     226:	60 91 77 01 	lds	r22, 0x0177
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <set_motors>
            both_spined = 0;
     230:	10 92 1b 01 	sts	0x011B, r1
     234:	10 92 1a 01 	sts	0x011A, r1
     238:	80 91 1e 01 	lds	r24, 0x011E
     23c:	90 91 1f 01 	lds	r25, 0x011F
     240:	0f c0       	rjmp	.+30     	; 0x260 <loop+0xd2>
    //sample_light();
    if (kilo_ticks > (last_update + 16))
    {
       last_update = kilo_ticks;
        if (new_message == 1){
            new_message = 0;
     242:	10 92 23 01 	sts	0x0123, r1
     246:	10 92 22 01 	sts	0x0122, r1
            if (current_distance < previous_distance)
     24a:	80 91 1e 01 	lds	r24, 0x011E
     24e:	90 91 1f 01 	lds	r25, 0x011F
     252:	20 91 1c 01 	lds	r18, 0x011C
     256:	30 91 1d 01 	lds	r19, 0x011D
     25a:	82 17       	cp	r24, r18
     25c:	93 07       	cpc	r25, r19
     25e:	54 f1       	brlt	.+84     	; 0x2b4 <loop+0x126>
            }


    }

    previous_distance = current_distance;
     260:	90 93 1d 01 	sts	0x011D, r25
     264:	80 93 1c 01 	sts	0x011C, r24

        //previous_light = current_light;
    }
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret
            int random_number = rand_hard();
            int random_direction = (random_number % 2);

            if (random_direction == 0)
            {
                set_color(RGB(1, 0, 0));
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     274:	80 91 20 01 	lds	r24, 0x0120
     278:	90 91 21 01 	lds	r25, 0x0121
     27c:	02 97       	sbiw	r24, 0x02	; 2
     27e:	e1 f2       	breq	.-72     	; 0x238 <loop+0xaa>
    {
        current_motion = new_motion;
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	90 93 21 01 	sts	0x0121, r25
     288:	80 93 20 01 	sts	0x0120, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     28c:	80 91 1a 01 	lds	r24, 0x011A
     290:	90 91 1b 01 	lds	r25, 0x011B
     294:	89 2b       	or	r24, r25
     296:	69 f1       	breq	.+90     	; 0x2f2 <loop+0x164>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	80 91 8b 01 	lds	r24, 0x018B
     29e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <set_motors>
            both_spined = 0;
     2a2:	10 92 1b 01 	sts	0x011B, r1
     2a6:	10 92 1a 01 	sts	0x011A, r1
     2aa:	80 91 1e 01 	lds	r24, 0x011E
     2ae:	90 91 1f 01 	lds	r25, 0x011F
     2b2:	d6 cf       	rjmp	.-84     	; 0x260 <loop+0xd2>
       last_update = kilo_ticks;
        if (new_message == 1){
            new_message = 0;
            if (current_distance < previous_distance)
            {
                set_color(RGB(0, 1, 0));
     2b4:	84 e0       	ldi	r24, 0x04	; 4
     2b6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2ba:	80 91 20 01 	lds	r24, 0x0120
     2be:	90 91 21 01 	lds	r25, 0x0121
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <loop+0x13a>
     2c6:	b8 cf       	rjmp	.-144    	; 0x238 <loop+0xaa>
    {
        current_motion = new_motion;
     2c8:	d0 93 21 01 	sts	0x0121, r29
     2cc:	c0 93 20 01 	sts	0x0120, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2d0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2d4:	60 91 8a 01 	lds	r22, 0x018A
     2d8:	80 91 89 01 	lds	r24, 0x0189
     2dc:	0e 94 59 04 	call	0x8b2	; 0x8b2 <set_motors>
            both_spined = 1;
     2e0:	d0 93 1b 01 	sts	0x011B, r29
     2e4:	c0 93 1a 01 	sts	0x011A, r28
     2e8:	80 91 1e 01 	lds	r24, 0x011E
     2ec:	90 91 1f 01 	lds	r25, 0x011F
     2f0:	b7 cf       	rjmp	.-146    	; 0x260 <loop+0xd2>
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     2f2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <spinup_motors>
     2f6:	d0 cf       	rjmp	.-96     	; 0x298 <loop+0x10a>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     2f8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <spinup_motors>
     2fc:	94 cf       	rjmp	.-216    	; 0x226 <loop+0x98>

000002fe <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     2fe:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     300:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     302:	8c e0       	ldi	r24, 0x0C	; 12
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 c5 00 	sts	0x00C5, r25
     30a:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     30e:	e0 ec       	ldi	r30, 0xC0	; 192
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	8d 7f       	andi	r24, 0xFD	; 253
     316:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     318:	e2 ec       	ldi	r30, 0xC2	; 194
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	86 60       	ori	r24, 0x06	; 6
     320:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     322:	e1 ec       	ldi	r30, 0xC1	; 193
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	88 60       	ori	r24, 0x08	; 8
     32a:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	90 93 8f 01 	sts	0x018F, r25
     334:	80 93 8e 01 	sts	0x018E, r24
    sei();
     338:	78 94       	sei
     33a:	08 95       	ret

0000033c <set_motion>:
//int previous_light = 0;
uint32_t last_update;

// Function to handle motion.
void set_motion(int new_motion)
{
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     340:	20 91 20 01 	lds	r18, 0x0120
     344:	30 91 21 01 	lds	r19, 0x0121
     348:	28 17       	cp	r18, r24
     34a:	39 07       	cpc	r19, r25
     34c:	79 f0       	breq	.+30     	; 0x36c <set_motion+0x30>
    {
        current_motion = new_motion;
     34e:	90 93 21 01 	sts	0x0121, r25
     352:	80 93 20 01 	sts	0x0120, r24
        
        if (current_motion == STOP)
     356:	00 97       	sbiw	r24, 0x00	; 0
     358:	91 f1       	breq	.+100    	; 0x3be <set_motion+0x82>
     35a:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	91 05       	cpc	r25, r1
     360:	a1 f1       	breq	.+104    	; 0x3ca <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     362:	82 30       	cpi	r24, 0x02	; 2
     364:	91 05       	cpc	r25, r1
     366:	29 f0       	breq	.+10     	; 0x372 <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     368:	03 97       	sbiw	r24, 0x03	; 3
     36a:	b9 f0       	breq	.+46     	; 0x39a <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     372:	80 91 1a 01 	lds	r24, 0x011A
     376:	90 91 1b 01 	lds	r25, 0x011B
     37a:	89 2b       	or	r24, r25
     37c:	11 f4       	brne	.+4      	; 0x382 <set_motion+0x46>
                spinup_motors();
     37e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <spinup_motors>
            set_motors(kilo_turn_left, 0);
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	80 91 8b 01 	lds	r24, 0x018B
     388:	0e 94 59 04 	call	0x8b2	; 0x8b2 <set_motors>
            both_spined = 0;
     38c:	10 92 1b 01 	sts	0x011B, r1
     390:	10 92 1a 01 	sts	0x011A, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     39a:	80 91 1a 01 	lds	r24, 0x011A
     39e:	90 91 1b 01 	lds	r25, 0x011B
     3a2:	89 2b       	or	r24, r25
     3a4:	f9 f0       	breq	.+62     	; 0x3e4 <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     3a6:	60 91 77 01 	lds	r22, 0x0177
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	0e 94 59 04 	call	0x8b2	; 0x8b2 <set_motors>
            both_spined = 0;
     3b0:	10 92 1b 01 	sts	0x011B, r1
     3b4:	10 92 1a 01 	sts	0x011A, r1
        }
    }
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3c6:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     3ca:	0e 94 5e 04 	call	0x8bc	; 0x8bc <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     3ce:	60 91 8a 01 	lds	r22, 0x018A
     3d2:	80 91 89 01 	lds	r24, 0x0189
     3d6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <set_motors>
            both_spined = 1;
     3da:	d0 93 1b 01 	sts	0x011B, r29
     3de:	c0 93 1a 01 	sts	0x011A, r28
     3e2:	c4 cf       	rjmp	.-120    	; 0x36c <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     3e4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <spinup_motors>
     3e8:	de cf       	rjmp	.-68     	; 0x3a6 <set_motion+0x6a>

000003ea <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     3ea:	08 95       	ret

000003ec <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	08 95       	ret

000003f2 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     3f2:	08 95       	ret

000003f4 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
    cli();
     402:	f8 94       	cli

    ports_off();
     404:	14 b8       	out	0x04, r1	; 4
     406:	17 b8       	out	0x07, r1	; 7
     408:	1a b8       	out	0x0a, r1	; 10
     40a:	15 b8       	out	0x05, r1	; 5
     40c:	18 b8       	out	0x08, r1	; 8
     40e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     410:	52 9a       	sbi	0x0a, 2	; 10
     412:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     414:	14 bc       	out	0x24, r1	; 36
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	85 bd       	out	0x25, r24	; 37
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	87 bd       	out	0x27, r24	; 39
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     424:	10 92 80 00 	sts	0x0080, r1
     428:	10 92 81 00 	sts	0x0081, r1
     42c:	2f e8       	ldi	r18, 0x8F	; 143
     42e:	3b e0       	ldi	r19, 0x0B	; 11
     430:	30 93 89 00 	sts	0x0089, r19
     434:	20 93 88 00 	sts	0x0088, r18
     438:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     43c:	53 98       	cbi	0x0a, 3	; 10
     43e:	23 98       	cbi	0x04, 3	; 4
     440:	91 ea       	ldi	r25, 0xA1	; 161
     442:	90 93 b0 00 	sts	0x00B0, r25
     446:	80 93 b1 00 	sts	0x00B1, r24
     44a:	10 92 b4 00 	sts	0x00B4, r1
     44e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     452:	8b e0       	ldi	r24, 0x0B	; 11
     454:	80 bf       	out	0x30, r24	; 48
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     45c:	86 e0       	ldi	r24, 0x06	; 6
     45e:	80 93 7c 00 	sts	0x007C, r24
     462:	83 e8       	ldi	r24, 0x83	; 131
     464:	80 93 7a 00 	sts	0x007A, r24
     468:	80 91 7a 00 	lds	r24, 0x007A
     46c:	80 64       	ori	r24, 0x40	; 64
     46e:	80 93 7a 00 	sts	0x007A, r24
     472:	80 91 7a 00 	lds	r24, 0x007A
     476:	86 fd       	sbrc	r24, 6
     478:	fc cf       	rjmp	.-8      	; 0x472 <kilo_init+0x7e>
    adc_trigger_high_gain();
     47a:	10 92 7c 00 	sts	0x007C, r1
     47e:	83 ea       	ldi	r24, 0xA3	; 163
     480:	80 93 7a 00 	sts	0x007A, r24
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
    if (osccal != 0xFF)
     492:	8f 3f       	cpi	r24, 0xFF	; 255
     494:	11 f0       	breq	.+4      	; 0x49a <kilo_init+0xa6>
        OSCCAL = osccal;
     496:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     49a:	10 92 55 01 	sts	0x0155, r1
    rx_leadingbit = 1;
     49e:	c1 e0       	ldi	r28, 0x01	; 1
     4a0:	c0 93 2e 01 	sts	0x012E, r28
    rx_leadingbyte = 1;
     4a4:	c0 93 72 01 	sts	0x0172, r28
    rx_byteindex = 0;
     4a8:	10 92 4c 01 	sts	0x014C, r1
    rx_bytevalue = 0;
     4ac:	10 92 86 01 	sts	0x0186, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     4b0:	80 e9       	ldi	r24, 0x90	; 144
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     4b8:	80 93 4b 01 	sts	0x014B, r24
    if (tx_mask & ~TX_MASK_MAX)
     4bc:	80 91 4b 01 	lds	r24, 0x014B
     4c0:	88 73       	andi	r24, 0x38	; 56
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     4c4:	c0 93 4b 01 	sts	0x014B, r28
    tx_clock = 0;
     4c8:	10 92 76 01 	sts	0x0176, r1
     4cc:	10 92 75 01 	sts	0x0175, r1
    tx_increment = 255;
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	90 93 74 01 	sts	0x0174, r25
     4d8:	80 93 73 01 	sts	0x0173, r24
    kilo_ticks = 0;
     4dc:	10 92 51 01 	sts	0x0151, r1
     4e0:	10 92 52 01 	sts	0x0152, r1
     4e4:	10 92 53 01 	sts	0x0153, r1
     4e8:	10 92 54 01 	sts	0x0154, r1
    kilo_state = IDLE;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	80 93 29 01 	sts	0x0129, r24
    kilo_tx_period = 3906;
     4f2:	82 e4       	ldi	r24, 0x42	; 66
     4f4:	9f e0       	ldi	r25, 0x0F	; 15
     4f6:	90 93 85 01 	sts	0x0185, r25
     4fa:	80 93 84 01 	sts	0x0184, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     4fe:	80 eb       	ldi	r24, 0xB0	; 176
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     506:	c8 2f       	mov	r28, r24
     508:	81 eb       	ldi	r24, 0xB1	; 177
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     510:	2c 2f       	mov	r18, r28
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	38 2b       	or	r19, r24
     516:	30 93 88 01 	sts	0x0188, r19
     51a:	20 93 87 01 	sts	0x0187, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     51e:	85 e0       	ldi	r24, 0x05	; 5
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     526:	80 93 8b 01 	sts	0x018B, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     52a:	89 e0       	ldi	r24, 0x09	; 9
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     532:	80 93 77 01 	sts	0x0177, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     536:	8c e0       	ldi	r24, 0x0C	; 12
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     53e:	80 93 89 01 	sts	0x0189, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     542:	84 e1       	ldi	r24, 0x14	; 20
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     54a:	80 93 8a 01 	sts	0x018A, r24
     54e:	56 e5       	ldi	r21, 0x56	; 86
     550:	e5 2e       	mov	r14, r21
     552:	51 e0       	ldi	r21, 0x01	; 1
     554:	f5 2e       	mov	r15, r21
     556:	0f e2       	ldi	r16, 0x2F	; 47
     558:	11 e0       	ldi	r17, 0x01	; 1
     55a:	c0 e2       	ldi	r28, 0x20	; 32
     55c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     55e:	ce 01       	movw	r24, r28
     560:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     564:	d8 2e       	mov	r13, r24
     566:	ce 01       	movw	r24, r28
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     56e:	2d 2d       	mov	r18, r13
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	32 2f       	mov	r19, r18
     574:	22 27       	eor	r18, r18
     576:	28 2b       	or	r18, r24
     578:	f7 01       	movw	r30, r14
     57a:	21 93       	st	Z+, r18
     57c:	31 93       	st	Z+, r19
     57e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     580:	ce 01       	movw	r24, r28
     582:	c0 96       	adiw	r24, 0x30	; 48
     584:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     588:	d8 2e       	mov	r13, r24
     58a:	ce 01       	movw	r24, r28
     58c:	c1 96       	adiw	r24, 0x31	; 49
     58e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <eeprom_read_byte>
     592:	2d 2d       	mov	r18, r13
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	32 2f       	mov	r19, r18
     598:	22 27       	eor	r18, r18
     59a:	28 2b       	or	r18, r24
     59c:	f8 01       	movw	r30, r16
     59e:	21 93       	st	Z+, r18
     5a0:	31 93       	st	Z+, r19
     5a2:	8f 01       	movw	r16, r30
     5a4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5a6:	cc 33       	cpi	r28, 0x3C	; 60
     5a8:	d1 05       	cpc	r29, r1
     5aa:	c9 f6       	brne	.-78     	; 0x55e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     5ac:	78 94       	sei
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	08 95       	ret

000005be <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	8f 93       	push	r24
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	a8 95       	wdr
     5d0:	80 91 60 00 	lds	r24, 0x0060
     5d4:	88 61       	ori	r24, 0x18	; 24
     5d6:	80 93 60 00 	sts	0x0060, r24
     5da:	10 92 60 00 	sts	0x0060, r1
     5de:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5e0:	8f 91       	pop	r24
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     5ec:	3c 01       	movw	r6, r24
     5ee:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     5f0:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     5f2:	99 24       	eor	r9, r9
     5f4:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5f6:	84 e0       	ldi	r24, 0x04	; 4
     5f8:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     5fa:	96 e0       	ldi	r25, 0x06	; 6
     5fc:	a9 2e       	mov	r10, r25
     5fe:	23 e8       	ldi	r18, 0x83	; 131
     600:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     602:	38 e1       	ldi	r19, 0x18	; 24
     604:	d3 2e       	mov	r13, r19
     606:	49 e2       	ldi	r20, 0x29	; 41
     608:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     60a:	90 91 29 01 	lds	r25, 0x0129
     60e:	e9 2f       	mov	r30, r25
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e7 30       	cpi	r30, 0x07	; 7
     614:	f1 05       	cpc	r31, r1
     616:	c8 f7       	brcc	.-14     	; 0x60a <kilo_start+0x1e>
     618:	ec 5c       	subi	r30, 0xCC	; 204
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     620:	11 23       	and	r17, r17
     622:	09 f4       	brne	.+2      	; 0x626 <kilo_start+0x3a>
     624:	fc c0       	rjmp	.+504    	; 0x81e <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     626:	c0 92 29 01 	sts	0x0129, r12
     62a:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     62c:	fe 01       	movw	r30, r28
     62e:	09 95       	icall
                break;
     630:	ec cf       	rjmp	.-40     	; 0x60a <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     632:	80 91 55 01 	lds	r24, 0x0155
     636:	81 11       	cpse	r24, r1
     638:	eb c0       	rjmp	.+470    	; 0x810 <kilo_start+0x224>
        cli();                                    // disable interrupts
     63a:	f8 94       	cli
        adc_setup_conversion(6);
     63c:	a0 92 7c 00 	sts	0x007C, r10
     640:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     644:	80 91 7a 00 	lds	r24, 0x007A
     648:	80 64       	ori	r24, 0x40	; 64
     64a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     64e:	90 91 7a 00 	lds	r25, 0x007A
     652:	96 fd       	sbrc	r25, 6
     654:	fc cf       	rjmp	.-8      	; 0x64e <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     656:	80 91 78 00 	lds	r24, 0x0078
     65a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     65e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     660:	8b 3a       	cpi	r24, 0xAB	; 171
     662:	e2 e0       	ldi	r30, 0x02	; 2
     664:	9e 07       	cpc	r25, r30
     666:	0c f0       	brlt	.+2      	; 0x66a <kilo_start+0x7e>
     668:	ed c0       	rjmp	.+474    	; 0x844 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     66a:	89 38       	cpi	r24, 0x89	; 137
     66c:	f2 e0       	ldi	r31, 0x02	; 2
     66e:	9f 07       	cpc	r25, r31
     670:	0c f0       	brlt	.+2      	; 0x674 <kilo_start+0x88>
     672:	ef c0       	rjmp	.+478    	; 0x852 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     674:	87 36       	cpi	r24, 0x67	; 103
     676:	92 40       	sbci	r25, 0x02	; 2
     678:	0c f4       	brge	.+2      	; 0x67c <kilo_start+0x90>
     67a:	ca c0       	rjmp	.+404    	; 0x810 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     67c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     67e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     680:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     682:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     684:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     686:	3c 98       	cbi	0x07, 4	; 7
     688:	c0 cf       	rjmp	.-128    	; 0x60a <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     68a:	f8 94       	cli
                acomp_off();
     68c:	80 b7       	in	r24, 0x30	; 48
     68e:	87 7f       	andi	r24, 0xF7	; 247
     690:	80 bf       	out	0x30, r24	; 48
                adc_off();
     692:	80 91 7a 00 	lds	r24, 0x007A
     696:	8f 77       	andi	r24, 0x7F	; 127
     698:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     69c:	14 b8       	out	0x04, r1	; 4
     69e:	17 b8       	out	0x07, r1	; 7
     6a0:	1a b8       	out	0x0a, r1	; 10
     6a2:	15 b8       	out	0x05, r1	; 5
     6a4:	18 b8       	out	0x08, r1	; 8
     6a6:	1b b8       	out	0x0b, r1	; 11
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	a8 95       	wdr
     6ae:	d0 92 60 00 	sts	0x0060, r13
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     6b8:	80 91 60 00 	lds	r24, 0x0060
     6bc:	80 64       	ori	r24, 0x40	; 64
     6be:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     6c2:	93 b7       	in	r25, 0x33	; 51
     6c4:	91 7f       	andi	r25, 0xF1	; 241
     6c6:	94 60       	ori	r25, 0x04	; 4
     6c8:	93 bf       	out	0x33, r25	; 51
                cli();
     6ca:	f8 94       	cli
                sleep_enable();
     6cc:	83 b7       	in	r24, 0x33	; 51
     6ce:	81 60       	ori	r24, 0x01	; 1
     6d0:	83 bf       	out	0x33, r24	; 51
                sei();
     6d2:	78 94       	sei
                sleep_cpu();
     6d4:	88 95       	sleep
                sleep_disable();
     6d6:	83 b7       	in	r24, 0x33	; 51
     6d8:	8e 7f       	andi	r24, 0xFE	; 254
     6da:	83 bf       	out	0x33, r24	; 51
                sei();
     6dc:	78 94       	sei
                rx_busy = 0;
     6de:	10 92 55 01 	sts	0x0155, r1
                ports_on();
     6e2:	52 9a       	sbi	0x0a, 2	; 10
     6e4:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     6e6:	80 91 7a 00 	lds	r24, 0x007A
     6ea:	80 68       	ori	r24, 0x80	; 128
     6ec:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f0:	87 e5       	ldi	r24, 0x57	; 87
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <kilo_start+0x108>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <kilo_start+0x10e>
     6fa:	00 00       	nop
                _delay_us(300);
                acomp_on();
     6fc:	80 b7       	in	r24, 0x30	; 48
     6fe:	88 61       	ori	r24, 0x18	; 24
     700:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     702:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     704:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     706:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     708:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     70a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     70c:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70e:	ef e1       	ldi	r30, 0x1F	; 31
     710:	fe e4       	ldi	r31, 0x4E	; 78
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <kilo_start+0x126>
     716:	00 c0       	rjmp	.+0      	; 0x718 <kilo_start+0x12c>
     718:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     71a:	80 91 55 01 	lds	r24, 0x0155
     71e:	81 11       	cpse	r24, r1
     720:	81 c0       	rjmp	.+258    	; 0x824 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     722:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     724:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     726:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     728:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     72a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     72c:	3c 98       	cbi	0x07, 4	; 7
     72e:	6d cf       	rjmp	.-294    	; 0x60a <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     730:	80 91 27 01 	lds	r24, 0x0127
     734:	81 11       	cpse	r24, r1
     736:	41 c0       	rjmp	.+130    	; 0x7ba <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     738:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     73c:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     740:	10 92 28 01 	sts	0x0128, r1
     744:	62 cf       	rjmp	.-316    	; 0x60a <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     746:	48 99       	sbic	0x09, 0	; 9
     748:	ec cf       	rjmp	.-40     	; 0x722 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     74a:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     74c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     74e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     750:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     752:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     754:	3c 98       	cbi	0x07, 4	; 7
     756:	8f ec       	ldi	r24, 0xCF	; 207
     758:	97 e0       	ldi	r25, 0x07	; 7
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <kilo_start+0x16e>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <kilo_start+0x174>
     760:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     762:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     764:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     766:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     768:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     76a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     76c:	3c 98       	cbi	0x07, 4	; 7
     76e:	9f ef       	ldi	r25, 0xFF	; 255
     770:	e1 ee       	ldi	r30, 0xE1	; 225
     772:	f4 e0       	ldi	r31, 0x04	; 4
     774:	91 50       	subi	r25, 0x01	; 1
     776:	e0 40       	sbci	r30, 0x00	; 0
     778:	f0 40       	sbci	r31, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <kilo_start+0x188>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <kilo_start+0x192>
     77e:	00 00       	nop
     780:	44 cf       	rjmp	.-376    	; 0x60a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     782:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     784:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     786:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     788:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     78a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     78c:	3c 98       	cbi	0x07, 4	; 7
     78e:	ef ec       	ldi	r30, 0xCF	; 207
     790:	f7 e0       	ldi	r31, 0x07	; 7
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <kilo_start+0x1a6>
     796:	00 c0       	rjmp	.+0      	; 0x798 <kilo_start+0x1ac>
     798:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     79a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     79c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     79e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7a0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7a4:	3c 98       	cbi	0x07, 4	; 7
     7a6:	ff ef       	ldi	r31, 0xFF	; 255
     7a8:	21 ee       	ldi	r18, 0xE1	; 225
     7aa:	84 e0       	ldi	r24, 0x04	; 4
     7ac:	f1 50       	subi	r31, 0x01	; 1
     7ae:	20 40       	sbci	r18, 0x00	; 0
     7b0:	80 40       	sbci	r24, 0x00	; 0
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <kilo_start+0x1c0>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <kilo_start+0x1ca>
     7b6:	00 00       	nop
     7b8:	28 cf       	rjmp	.-432    	; 0x60a <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     7ba:	90 91 27 01 	lds	r25, 0x0127
     7be:	80 91 28 01 	lds	r24, 0x0128
     7c2:	98 17       	cp	r25, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <kilo_start+0x1dc>
     7c6:	21 cf       	rjmp	.-446    	; 0x60a <kilo_start+0x1e>
                        prev_motion = cur_motion;
     7c8:	80 91 27 01 	lds	r24, 0x0127
     7cc:	80 93 28 01 	sts	0x0128, r24
                        if (cur_motion == MOVE_LEFT) {
     7d0:	80 91 27 01 	lds	r24, 0x0127
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	09 f4       	brne	.+2      	; 0x7da <kilo_start+0x1ee>
     7d8:	50 c0       	rjmp	.+160    	; 0x87a <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7da:	80 91 27 01 	lds	r24, 0x0127
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7de:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7e2:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	d9 f1       	breq	.+118    	; 0x860 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7ea:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     7ee:	90 92 b4 00 	sts	0x00B4, r9
     7f2:	8f e2       	ldi	r24, 0x2F	; 47
     7f4:	95 e7       	ldi	r25, 0x75	; 117
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <kilo_start+0x20a>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <kilo_start+0x210>
     7fc:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     7fe:	80 91 8a 01 	lds	r24, 0x018A
     802:	90 91 89 01 	lds	r25, 0x0189
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     806:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     80a:	80 93 b4 00 	sts	0x00B4, r24
     80e:	fd ce       	rjmp	.-518    	; 0x60a <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     810:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     812:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     814:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     816:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     818:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     81a:	3c 98       	cbi	0x07, 4	; 7
     81c:	f6 ce       	rjmp	.-532    	; 0x60a <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     81e:	f3 01       	movw	r30, r6
     820:	09 95       	icall
     822:	01 cf       	rjmp	.-510    	; 0x626 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     824:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     826:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     828:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     82a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     82c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     82e:	3c 98       	cbi	0x07, 4	; 7
     830:	ff ef       	ldi	r31, 0xFF	; 255
     832:	20 e7       	ldi	r18, 0x70	; 112
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	f1 50       	subi	r31, 0x01	; 1
     838:	20 40       	sbci	r18, 0x00	; 0
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <kilo_start+0x24a>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <kilo_start+0x254>
     840:	00 00       	nop
     842:	6f cf       	rjmp	.-290    	; 0x722 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     844:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     846:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     848:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     84a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     84c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     84e:	3c 98       	cbi	0x07, 4	; 7
     850:	dc ce       	rjmp	.-584    	; 0x60a <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     852:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     854:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     856:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     858:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     85a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     85c:	3c 9a       	sbi	0x07, 4	; 7
     85e:	d5 ce       	rjmp	.-598    	; 0x60a <kilo_start+0x1e>
     860:	ef e2       	ldi	r30, 0x2F	; 47
     862:	f5 e7       	ldi	r31, 0x75	; 117
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <kilo_start+0x278>
     868:	00 c0       	rjmp	.+0      	; 0x86a <kilo_start+0x27e>
     86a:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     86c:	80 91 77 01 	lds	r24, 0x0177
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     870:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     874:	80 93 b4 00 	sts	0x00B4, r24
     878:	c8 ce       	rjmp	.-624    	; 0x60a <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     87a:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     87e:	10 92 b4 00 	sts	0x00B4, r1
     882:	8f e2       	ldi	r24, 0x2F	; 47
     884:	95 e7       	ldi	r25, 0x75	; 117
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <kilo_start+0x29a>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <kilo_start+0x2a0>
     88c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     88e:	80 91 8b 01 	lds	r24, 0x018B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     892:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     896:	10 92 b4 00 	sts	0x00B4, r1
     89a:	b7 ce       	rjmp	.-658    	; 0x60a <kilo_start+0x1e>

0000089c <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <delay+0x10>
     89e:	ef ec       	ldi	r30, 0xCF	; 207
     8a0:	f7 e0       	ldi	r31, 0x07	; 7
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <delay+0x6>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <delay+0xc>
     8a8:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     8aa:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	b9 f7       	brne	.-18     	; 0x89e <delay+0x2>
     8b0:	08 95       	ret

000008b2 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8b2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8b6:	60 93 b4 00 	sts	0x00B4, r22
     8ba:	08 95       	ret

000008bc <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8c2:	80 93 b4 00 	sts	0x00B4, r24
     8c6:	8f e0       	ldi	r24, 0x0F	; 15
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	ef ec       	ldi	r30, 0xCF	; 207
     8cc:	f7 e0       	ldi	r31, 0x07	; 7
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <spinup_motors+0x12>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <spinup_motors+0x18>
     8d4:	00 00       	nop
     8d6:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8d8:	c1 f7       	brne	.-16     	; 0x8ca <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     8da:	08 95       	ret

000008dc <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     8dc:	80 91 55 01 	lds	r24, 0x0155
     8e0:	81 11       	cpse	r24, r1
     8e2:	1e c0       	rjmp	.+60     	; 0x920 <__stack+0x21>
        cli();
     8e4:	f8 94       	cli
        adc_setup_conversion(7);
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	80 93 7c 00 	sts	0x007C, r24
     8ec:	83 e8       	ldi	r24, 0x83	; 131
     8ee:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     8f2:	80 91 7a 00 	lds	r24, 0x007A
     8f6:	80 64       	ori	r24, 0x40	; 64
     8f8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     8fc:	80 91 7a 00 	lds	r24, 0x007A
     900:	86 fd       	sbrc	r24, 6
     902:	fc cf       	rjmp	.-8      	; 0x8fc <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     904:	80 91 78 00 	lds	r24, 0x0078
     908:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     90c:	10 92 7c 00 	sts	0x007C, r1
     910:	23 ea       	ldi	r18, 0xA3	; 163
     912:	20 93 7a 00 	sts	0x007A, r18
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     91c:	78 94       	sei
     91e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     924:	08 95       	ret

00000926 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     926:	80 91 55 01 	lds	r24, 0x0155
     92a:	81 11       	cpse	r24, r1
     92c:	1e c0       	rjmp	.+60     	; 0x96a <get_temperature+0x44>
        cli();
     92e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     930:	88 ec       	ldi	r24, 0xC8	; 200
     932:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     936:	87 e8       	ldi	r24, 0x87	; 135
     938:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     93c:	80 91 7a 00 	lds	r24, 0x007A
     940:	80 64       	ori	r24, 0x40	; 64
     942:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     946:	80 91 7a 00 	lds	r24, 0x007A
     94a:	86 fd       	sbrc	r24, 6
     94c:	fc cf       	rjmp	.-8      	; 0x946 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     94e:	80 91 78 00 	lds	r24, 0x0078
     952:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     956:	10 92 7c 00 	sts	0x007C, r1
     95a:	23 ea       	ldi	r18, 0xA3	; 163
     95c:	20 93 7a 00 	sts	0x007A, r18
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     966:	78 94       	sei
     968:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     96e:	08 95       	ret

00000970 <rand_hard>:

uint8_t rand_hard() {
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	e0 e0       	ldi	r30, 0x00	; 0
     97a:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     97c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     97e:	03 ea       	ldi	r16, 0xA3	; 163
     980:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     982:	d6 e0       	ldi	r29, 0x06	; 6
     984:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     986:	a1 e0       	ldi	r26, 0x01	; 1
     988:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     98a:	60 e8       	ldi	r22, 0x80	; 128
     98c:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     98e:	f8 94       	cli
            adc_setup_conversion(6);
     990:	d0 93 7c 00 	sts	0x007C, r29
     994:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     998:	90 91 7a 00 	lds	r25, 0x007A
     99c:	90 64       	ori	r25, 0x40	; 64
     99e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9a2:	90 91 7a 00 	lds	r25, 0x007A
     9a6:	96 fd       	sbrc	r25, 6
     9a8:	fc cf       	rjmp	.-8      	; 0x9a2 <rand_hard+0x32>
            a = ADCW&0x1;
     9aa:	20 91 78 00 	lds	r18, 0x0078
     9ae:	30 91 79 00 	lds	r19, 0x0079
     9b2:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     9b4:	90 91 7a 00 	lds	r25, 0x007A
     9b8:	90 64       	ori	r25, 0x40	; 64
     9ba:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9be:	90 91 7a 00 	lds	r25, 0x007A
     9c2:	96 fd       	sbrc	r25, 6
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <rand_hard+0x4e>
            b = ADCW&0x1;
     9c6:	40 91 78 00 	lds	r20, 0x0078
     9ca:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     9ce:	10 92 7c 00 	sts	0x007C, r1
     9d2:	00 93 7a 00 	sts	0x007A, r16
     9d6:	10 93 7b 00 	sts	0x007B, r17
            sei();
     9da:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     9dc:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     9de:	24 13       	cpse	r18, r20
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <rand_hard+0x78>
     9e2:	61 50       	subi	r22, 0x01	; 1
     9e4:	71 09       	sbc	r23, r1
     9e6:	99 f6       	brne	.-90     	; 0x98e <rand_hard+0x1e>
        if (a)
     9e8:	22 23       	and	r18, r18
     9ea:	39 f0       	breq	.+14     	; 0x9fa <rand_hard+0x8a>
            num |= (1<<i);
     9ec:	9d 01       	movw	r18, r26
     9ee:	0e 2e       	mov	r0, r30
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <rand_hard+0x84>
     9f2:	22 0f       	add	r18, r18
     9f4:	0a 94       	dec	r0
     9f6:	ea f7       	brpl	.-6      	; 0x9f2 <rand_hard+0x82>
     9f8:	82 2b       	or	r24, r18
     9fa:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     9fc:	e8 30       	cpi	r30, 0x08	; 8
     9fe:	f1 05       	cpc	r31, r1
     a00:	09 f0       	breq	.+2      	; 0xa04 <rand_hard+0x94>
     a02:	c3 cf       	rjmp	.-122    	; 0x98a <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	08 95       	ret

00000a0e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a0e:	80 91 0e 01 	lds	r24, 0x010E
     a12:	98 2f       	mov	r25, r24
     a14:	99 0f       	add	r25, r25
     a16:	99 0f       	add	r25, r25
     a18:	99 0f       	add	r25, r25
     a1a:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a1c:	90 91 26 01 	lds	r25, 0x0126
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	29 0f       	add	r18, r25
     a24:	20 93 26 01 	sts	0x0126, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     a28:	28 2f       	mov	r18, r24
     a2a:	22 95       	swap	r18
     a2c:	26 95       	lsr	r18
     a2e:	27 70       	andi	r18, 0x07	; 7
     a30:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     a32:	96 95       	lsr	r25
     a34:	96 95       	lsr	r25
     a36:	89 27       	eor	r24, r25
     a38:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     a3c:	08 95       	ret

00000a3e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a3e:	80 93 0e 01 	sts	0x010E, r24
     a42:	08 95       	ret

00000a44 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a44:	80 91 55 01 	lds	r24, 0x0155
     a48:	81 11       	cpse	r24, r1
     a4a:	16 c0       	rjmp	.+44     	; 0xa78 <get_voltage+0x34>
        cli();                                    // disable interrupts
     a4c:	f8 94       	cli
        adc_setup_conversion(6);
     a4e:	86 e0       	ldi	r24, 0x06	; 6
     a50:	80 93 7c 00 	sts	0x007C, r24
     a54:	83 e8       	ldi	r24, 0x83	; 131
     a56:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a5a:	80 91 7a 00 	lds	r24, 0x007A
     a5e:	80 64       	ori	r24, 0x40	; 64
     a60:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a64:	80 91 7a 00 	lds	r24, 0x007A
     a68:	86 fd       	sbrc	r24, 6
     a6a:	fc cf       	rjmp	.-8      	; 0xa64 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a6c:	80 91 78 00 	lds	r24, 0x0078
     a70:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a74:	78 94       	sei
     a76:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a7c:	08 95       	ret

00000a7e <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a7e:	2f 92       	push	r2
     a80:	3f 92       	push	r3
     a82:	4f 92       	push	r4
     a84:	5f 92       	push	r5
     a86:	6f 92       	push	r6
     a88:	7f 92       	push	r7
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <estimate_distance+0x26>
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <estimate_distance+0x28>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <estimate_distance+0x2a>
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     aae:	dc 01       	movw	r26, r24
     ab0:	12 96       	adiw	r26, 0x02	; 2
     ab2:	0d 90       	ld	r0, X+
     ab4:	bc 91       	ld	r27, X
     ab6:	a0 2d       	mov	r26, r0
     ab8:	be 83       	std	Y+6, r27	; 0x06
     aba:	ad 83       	std	Y+5, r26	; 0x05
     abc:	a4 38       	cpi	r26, 0x84	; 132
     abe:	e3 e0       	ldi	r30, 0x03	; 3
     ac0:	be 07       	cpc	r27, r30
     ac2:	0c f0       	brlt	.+2      	; 0xac6 <estimate_distance+0x48>
     ac4:	c9 c0       	rjmp	.+402    	; 0xc58 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     ac6:	80 91 2f 01 	lds	r24, 0x012F
     aca:	90 91 30 01 	lds	r25, 0x0130
     ace:	8a 17       	cp	r24, r26
     ad0:	9b 07       	cpc	r25, r27
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <estimate_distance+0x58>
     ad4:	37 c1       	rjmp	.+622    	; 0xd44 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     ad6:	00 91 31 01 	lds	r16, 0x0131
     ada:	10 91 32 01 	lds	r17, 0x0132
     ade:	0a 17       	cp	r16, r26
     ae0:	1b 07       	cpc	r17, r27
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <estimate_distance+0x68>
     ae4:	2f c2       	rjmp	.+1118   	; 0xf44 <estimate_distance+0x4c6>
     ae6:	00 91 33 01 	lds	r16, 0x0133
     aea:	10 91 34 01 	lds	r17, 0x0134
     aee:	0a 17       	cp	r16, r26
     af0:	1b 07       	cpc	r17, r27
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <estimate_distance+0x78>
     af4:	2f c2       	rjmp	.+1118   	; 0xf54 <estimate_distance+0x4d6>
     af6:	00 91 35 01 	lds	r16, 0x0135
     afa:	10 91 36 01 	lds	r17, 0x0136
     afe:	0a 17       	cp	r16, r26
     b00:	1b 07       	cpc	r17, r27
     b02:	08 f4       	brcc	.+2      	; 0xb06 <estimate_distance+0x88>
     b04:	2f c2       	rjmp	.+1118   	; 0xf64 <estimate_distance+0x4e6>
     b06:	00 91 37 01 	lds	r16, 0x0137
     b0a:	10 91 38 01 	lds	r17, 0x0138
     b0e:	0a 17       	cp	r16, r26
     b10:	1b 07       	cpc	r17, r27
     b12:	08 f4       	brcc	.+2      	; 0xb16 <estimate_distance+0x98>
     b14:	2f c2       	rjmp	.+1118   	; 0xf74 <estimate_distance+0x4f6>
     b16:	00 91 39 01 	lds	r16, 0x0139
     b1a:	10 91 3a 01 	lds	r17, 0x013A
     b1e:	0a 17       	cp	r16, r26
     b20:	1b 07       	cpc	r17, r27
     b22:	08 f4       	brcc	.+2      	; 0xb26 <estimate_distance+0xa8>
     b24:	ef c1       	rjmp	.+990    	; 0xf04 <estimate_distance+0x486>
     b26:	00 91 3b 01 	lds	r16, 0x013B
     b2a:	10 91 3c 01 	lds	r17, 0x013C
     b2e:	0a 17       	cp	r16, r26
     b30:	1b 07       	cpc	r17, r27
     b32:	08 f4       	brcc	.+2      	; 0xb36 <estimate_distance+0xb8>
     b34:	27 c2       	rjmp	.+1102   	; 0xf84 <estimate_distance+0x506>
     b36:	00 91 3d 01 	lds	r16, 0x013D
     b3a:	10 91 3e 01 	lds	r17, 0x013E
     b3e:	0a 17       	cp	r16, r26
     b40:	1b 07       	cpc	r17, r27
     b42:	08 f4       	brcc	.+2      	; 0xb46 <estimate_distance+0xc8>
     b44:	27 c2       	rjmp	.+1102   	; 0xf94 <estimate_distance+0x516>
     b46:	00 91 3f 01 	lds	r16, 0x013F
     b4a:	10 91 40 01 	lds	r17, 0x0140
     b4e:	0a 17       	cp	r16, r26
     b50:	1b 07       	cpc	r17, r27
     b52:	08 f4       	brcc	.+2      	; 0xb56 <estimate_distance+0xd8>
     b54:	27 c2       	rjmp	.+1102   	; 0xfa4 <estimate_distance+0x526>
     b56:	00 91 41 01 	lds	r16, 0x0141
     b5a:	10 91 42 01 	lds	r17, 0x0142
     b5e:	0a 17       	cp	r16, r26
     b60:	1b 07       	cpc	r17, r27
     b62:	08 f4       	brcc	.+2      	; 0xb66 <estimate_distance+0xe8>
     b64:	27 c2       	rjmp	.+1102   	; 0xfb4 <estimate_distance+0x536>
     b66:	00 91 43 01 	lds	r16, 0x0143
     b6a:	10 91 44 01 	lds	r17, 0x0144
     b6e:	0a 17       	cp	r16, r26
     b70:	1b 07       	cpc	r17, r27
     b72:	08 f4       	brcc	.+2      	; 0xb76 <estimate_distance+0xf8>
     b74:	27 c2       	rjmp	.+1102   	; 0xfc4 <estimate_distance+0x546>
     b76:	00 91 45 01 	lds	r16, 0x0145
     b7a:	10 91 46 01 	lds	r17, 0x0146
     b7e:	0a 17       	cp	r16, r26
     b80:	1b 07       	cpc	r17, r27
     b82:	08 f4       	brcc	.+2      	; 0xb86 <estimate_distance+0x108>
     b84:	23 c2       	rjmp	.+1094   	; 0xfcc <estimate_distance+0x54e>
     b86:	00 91 47 01 	lds	r16, 0x0147
     b8a:	10 91 48 01 	lds	r17, 0x0148
     b8e:	0a 17       	cp	r16, r26
     b90:	1b 07       	cpc	r17, r27
     b92:	08 f4       	brcc	.+2      	; 0xb96 <estimate_distance+0x118>
     b94:	23 c2       	rjmp	.+1094   	; 0xfdc <estimate_distance+0x55e>
     b96:	00 91 49 01 	lds	r16, 0x0149
     b9a:	10 91 4a 01 	lds	r17, 0x014A
     b9e:	0a 17       	cp	r16, r26
     ba0:	1b 07       	cpc	r17, r27
     ba2:	08 f4       	brcc	.+2      	; 0xba6 <estimate_distance+0x128>
     ba4:	23 c2       	rjmp	.+1094   	; 0xfec <estimate_distance+0x56e>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	a0 ed       	ldi	r26, 0xD0	; 208
     bac:	b0 e4       	ldi	r27, 0x40	; 64
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	ab 83       	std	Y+3, r26	; 0x03
     bb4:	bc 83       	std	Y+4, r27	; 0x04
     bb6:	4c e0       	ldi	r20, 0x0C	; 12
     bb8:	e4 2e       	mov	r14, r20
     bba:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bbc:	f7 01       	movw	r30, r14
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	e1 5d       	subi	r30, 0xD1	; 209
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	b8 01       	movw	r22, r16
     bcc:	68 1b       	sub	r22, r24
     bce:	79 0b       	sbc	r23, r25
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__addsf3>
     be0:	6b 01       	movw	r12, r22
     be2:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     be4:	ad 81       	ldd	r26, Y+5	; 0x05
     be6:	be 81       	ldd	r27, Y+6	; 0x06
     be8:	bd 01       	movw	r22, r26
     bea:	bb 0f       	add	r27, r27
     bec:	88 0b       	sbc	r24, r24
     bee:	99 0b       	sbc	r25, r25
     bf0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatsisf>
     bf4:	4b 01       	movw	r8, r22
     bf6:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     bf8:	b8 01       	movw	r22, r16
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     c02:	2b 01       	movw	r4, r22
     c04:	3c 01       	movw	r6, r24
     c06:	29 81       	ldd	r18, Y+1	; 0x01
     c08:	3a 81       	ldd	r19, Y+2	; 0x02
     c0a:	4b 81       	ldd	r20, Y+3	; 0x03
     c0c:	5c 81       	ldd	r21, Y+4	; 0x04
     c0e:	c7 01       	movw	r24, r14
     c10:	b6 01       	movw	r22, r12
     c12:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     c16:	9b 01       	movw	r18, r22
     c18:	ac 01       	movw	r20, r24
     c1a:	c3 01       	movw	r24, r6
     c1c:	b2 01       	movw	r22, r4
     c1e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__subsf3>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c26:	c5 01       	movw	r24, r10
     c28:	b4 01       	movw	r22, r8
     c2a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__subsf3>
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
            b=((int)((int)b/(int)slope));
     c3a:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fixsfsi>
     c3e:	8b 01       	movw	r16, r22
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fixsfsi>
     c48:	ab 01       	movw	r20, r22
     c4a:	bc 01       	movw	r22, r24
     c4c:	c8 01       	movw	r24, r16
     c4e:	ba 01       	movw	r22, r20
     c50:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__divmodhi4>
            dist_high=b;
     c54:	16 2f       	mov	r17, r22
     c56:	77 c0       	rjmp	.+238    	; 0xd46 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c58:	dc 01       	movw	r26, r24
     c5a:	cd 90       	ld	r12, X+
     c5c:	dc 90       	ld	r13, X
     c5e:	80 91 56 01 	lds	r24, 0x0156
     c62:	90 91 57 01 	lds	r25, 0x0157
     c66:	8c 15       	cp	r24, r12
     c68:	9d 05       	cpc	r25, r13
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <estimate_distance+0x1f0>
     c6c:	8c c0       	rjmp	.+280    	; 0xd86 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c6e:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c70:	e0 90 58 01 	lds	r14, 0x0158
     c74:	f0 90 59 01 	lds	r15, 0x0159
     c78:	ec 14       	cp	r14, r12
     c7a:	fd 04       	cpc	r15, r13
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <estimate_distance+0x202>
     c7e:	5e c1       	rjmp	.+700    	; 0xf3c <estimate_distance+0x4be>
     c80:	e0 90 5a 01 	lds	r14, 0x015A
     c84:	f0 90 5b 01 	lds	r15, 0x015B
     c88:	ec 14       	cp	r14, r12
     c8a:	fd 04       	cpc	r15, r13
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <estimate_distance+0x212>
     c8e:	5e c1       	rjmp	.+700    	; 0xf4c <estimate_distance+0x4ce>
     c90:	e0 90 5c 01 	lds	r14, 0x015C
     c94:	f0 90 5d 01 	lds	r15, 0x015D
     c98:	ec 14       	cp	r14, r12
     c9a:	fd 04       	cpc	r15, r13
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <estimate_distance+0x222>
     c9e:	5e c1       	rjmp	.+700    	; 0xf5c <estimate_distance+0x4de>
     ca0:	e0 90 5e 01 	lds	r14, 0x015E
     ca4:	f0 90 5f 01 	lds	r15, 0x015F
     ca8:	ec 14       	cp	r14, r12
     caa:	fd 04       	cpc	r15, r13
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <estimate_distance+0x232>
     cae:	5e c1       	rjmp	.+700    	; 0xf6c <estimate_distance+0x4ee>
     cb0:	e0 90 60 01 	lds	r14, 0x0160
     cb4:	f0 90 61 01 	lds	r15, 0x0161
     cb8:	ec 14       	cp	r14, r12
     cba:	fd 04       	cpc	r15, r13
     cbc:	08 f4       	brcc	.+2      	; 0xcc0 <estimate_distance+0x242>
     cbe:	c3 c0       	rjmp	.+390    	; 0xe46 <estimate_distance+0x3c8>
     cc0:	e0 90 62 01 	lds	r14, 0x0162
     cc4:	f0 90 63 01 	lds	r15, 0x0163
     cc8:	ec 14       	cp	r14, r12
     cca:	fd 04       	cpc	r15, r13
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <estimate_distance+0x252>
     cce:	56 c1       	rjmp	.+684    	; 0xf7c <estimate_distance+0x4fe>
     cd0:	e0 90 64 01 	lds	r14, 0x0164
     cd4:	f0 90 65 01 	lds	r15, 0x0165
     cd8:	ec 14       	cp	r14, r12
     cda:	fd 04       	cpc	r15, r13
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <estimate_distance+0x262>
     cde:	56 c1       	rjmp	.+684    	; 0xf8c <estimate_distance+0x50e>
     ce0:	e0 90 66 01 	lds	r14, 0x0166
     ce4:	f0 90 67 01 	lds	r15, 0x0167
     ce8:	ec 14       	cp	r14, r12
     cea:	fd 04       	cpc	r15, r13
     cec:	08 f4       	brcc	.+2      	; 0xcf0 <estimate_distance+0x272>
     cee:	56 c1       	rjmp	.+684    	; 0xf9c <estimate_distance+0x51e>
     cf0:	e0 90 68 01 	lds	r14, 0x0168
     cf4:	f0 90 69 01 	lds	r15, 0x0169
     cf8:	ec 14       	cp	r14, r12
     cfa:	fd 04       	cpc	r15, r13
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <estimate_distance+0x282>
     cfe:	56 c1       	rjmp	.+684    	; 0xfac <estimate_distance+0x52e>
     d00:	e0 90 6a 01 	lds	r14, 0x016A
     d04:	f0 90 6b 01 	lds	r15, 0x016B
     d08:	ec 14       	cp	r14, r12
     d0a:	fd 04       	cpc	r15, r13
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <estimate_distance+0x292>
     d0e:	56 c1       	rjmp	.+684    	; 0xfbc <estimate_distance+0x53e>
     d10:	e0 90 6c 01 	lds	r14, 0x016C
     d14:	f0 90 6d 01 	lds	r15, 0x016D
     d18:	ec 14       	cp	r14, r12
     d1a:	fd 04       	cpc	r15, r13
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <estimate_distance+0x2a2>
     d1e:	5a c1       	rjmp	.+692    	; 0xfd4 <estimate_distance+0x556>
     d20:	e0 90 6e 01 	lds	r14, 0x016E
     d24:	f0 90 6f 01 	lds	r15, 0x016F
     d28:	ec 14       	cp	r14, r12
     d2a:	fd 04       	cpc	r15, r13
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <estimate_distance+0x2b2>
     d2e:	5a c1       	rjmp	.+692    	; 0xfe4 <estimate_distance+0x566>
     d30:	e0 90 70 01 	lds	r14, 0x0170
     d34:	f0 90 71 01 	lds	r15, 0x0171
     d38:	ec 14       	cp	r14, r12
     d3a:	fd 04       	cpc	r15, r13
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <estimate_distance+0x2c2>
     d3e:	5a c1       	rjmp	.+692    	; 0xff4 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d40:	0a e5       	ldi	r16, 0x5A	; 90
     d42:	31 c0       	rjmp	.+98     	; 0xda6 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     d44:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     d46:	ed 81       	ldd	r30, Y+5	; 0x05
     d48:	fe 81       	ldd	r31, Y+6	; 0x06
     d4a:	ed 3b       	cpi	r30, 0xBD	; 189
     d4c:	f2 40       	sbci	r31, 0x02	; 2
     d4e:	fc f4       	brge	.+62     	; 0xd8e <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     d50:	81 e2       	ldi	r24, 0x21	; 33
     d52:	81 0f       	add	r24, r17
    }
}
     d54:	26 96       	adiw	r28, 0x06	; 6
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	bf 90       	pop	r11
     d72:	af 90       	pop	r10
     d74:	9f 90       	pop	r9
     d76:	8f 90       	pop	r8
     d78:	7f 90       	pop	r7
     d7a:	6f 90       	pop	r6
     d7c:	5f 90       	pop	r5
     d7e:	4f 90       	pop	r4
     d80:	3f 90       	pop	r3
     d82:	2f 90       	pop	r2
     d84:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d86:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d88:	81 e2       	ldi	r24, 0x21	; 33
     d8a:	80 0f       	add	r24, r16
     d8c:	e3 cf       	rjmp	.-58     	; 0xd54 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d8e:	d1 01       	movw	r26, r2
     d90:	cd 90       	ld	r12, X+
     d92:	dc 90       	ld	r13, X
     d94:	80 91 56 01 	lds	r24, 0x0156
     d98:	90 91 57 01 	lds	r25, 0x0157
     d9c:	8c 15       	cp	r24, r12
     d9e:	9d 05       	cpc	r25, r13
     da0:	08 f0       	brcs	.+2      	; 0xda4 <estimate_distance+0x326>
     da2:	66 cf       	rjmp	.-308    	; 0xc70 <estimate_distance+0x1f2>
            dist_low=0;
     da4:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     da6:	1f 3f       	cpi	r17, 0xFF	; 255
     da8:	79 f3       	breq	.-34     	; 0xd88 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     daa:	ed 81       	ldd	r30, Y+5	; 0x05
     dac:	fe 81       	ldd	r31, Y+6	; 0x06
     dae:	bf 01       	movw	r22, r30
     db0:	ff 0f       	add	r31, r31
     db2:	88 0b       	sbc	r24, r24
     db4:	99 0b       	sbc	r25, r25
     db6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatsisf>
     dba:	6b 01       	movw	r12, r22
     dbc:	7c 01       	movw	r14, r24
     dbe:	61 2f       	mov	r22, r17
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     dca:	4b 01       	movw	r8, r22
     dcc:	5c 01       	movw	r10, r24
     dce:	a7 01       	movw	r20, r14
     dd0:	96 01       	movw	r18, r12
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	81 e6       	ldi	r24, 0x61	; 97
     dd8:	94 e4       	ldi	r25, 0x44	; 68
     dda:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__subsf3>
     dde:	9b 01       	movw	r18, r22
     de0:	ac 01       	movw	r20, r24
     de2:	c5 01       	movw	r24, r10
     de4:	b4 01       	movw	r22, r8
     de6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     dea:	4b 01       	movw	r8, r22
     dec:	5c 01       	movw	r10, r24
     dee:	60 2f       	mov	r22, r16
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     dfa:	2b 01       	movw	r4, r22
     dfc:	3c 01       	movw	r6, r24
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	4f e2       	ldi	r20, 0x2F	; 47
     e04:	54 e4       	ldi	r21, 0x44	; 68
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__subsf3>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	c3 01       	movw	r24, r6
     e14:	b2 01       	movw	r22, r4
     e16:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	c5 01       	movw	r24, r10
     e20:	b4 01       	movw	r22, r8
     e22:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__addsf3>
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	48 e4       	ldi	r20, 0x48	; 72
     e2c:	53 e4       	ldi	r21, 0x43	; 67
     e2e:	0e 94 26 0c 	call	0x184c	; 0x184c <__divsf3>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	44 e0       	ldi	r20, 0x04	; 4
     e38:	52 e4       	ldi	r21, 0x42	; 66
     e3a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__addsf3>
     e3e:	0e 94 9f 0c 	call	0x193e	; 0x193e <__fixunssfsi>
     e42:	86 2f       	mov	r24, r22
     e44:	87 cf       	rjmp	.-242    	; 0xd54 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e46:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     e48:	85 e0       	ldi	r24, 0x05	; 5
     e4a:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	fc 01       	movw	r30, r24
     e52:	ec 5a       	subi	r30, 0xAC	; 172
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	b7 01       	movw	r22, r14
     e5c:	68 1b       	sub	r22, r24
     e5e:	79 0b       	sbc	r23, r25
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__addsf3>
     e70:	4b 01       	movw	r8, r22
     e72:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e74:	b6 01       	movw	r22, r12
     e76:	dd 0c       	add	r13, r13
     e78:	88 0b       	sbc	r24, r24
     e7a:	99 0b       	sbc	r25, r25
     e7c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatsisf>
     e80:	2b 01       	movw	r4, r22
     e82:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e84:	b7 01       	movw	r22, r14
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     e8e:	6b 01       	movw	r12, r22
     e90:	7c 01       	movw	r14, r24
     e92:	60 2f       	mov	r22, r16
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	a9 01       	movw	r20, r18
     eb0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__addsf3>
     eb4:	a5 01       	movw	r20, r10
     eb6:	94 01       	movw	r18, r8
     eb8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__subsf3>
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ecc:	c3 01       	movw	r24, r6
     ece:	b2 01       	movw	r22, r4
     ed0:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__subsf3>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e2       	ldi	r20, 0x20	; 32
     eda:	51 e4       	ldi	r21, 0x41	; 65
     edc:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
                b=((int)((int)b/(int)slope));
     ee0:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fixsfsi>
     ee4:	7b 01       	movw	r14, r22
     ee6:	c5 01       	movw	r24, r10
     ee8:	b4 01       	movw	r22, r8
     eea:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fixsfsi>
     eee:	ab 01       	movw	r20, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	c7 01       	movw	r24, r14
     ef4:	ba 01       	movw	r22, r20
     ef6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__divmodhi4>
                dist_low=b;
     efa:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     efc:	6f 3f       	cpi	r22, 0xFF	; 255
     efe:	09 f0       	breq	.+2      	; 0xf02 <estimate_distance+0x484>
     f00:	52 cf       	rjmp	.-348    	; 0xda6 <estimate_distance+0x328>
     f02:	26 cf       	rjmp	.-436    	; 0xd50 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f04:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     f06:	85 e0       	ldi	r24, 0x05	; 5
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	7c 01       	movw	r14, r24
     f0c:	f1 e0       	ldi	r31, 0x01	; 1
     f0e:	ef 1a       	sub	r14, r31
     f10:	f1 08       	sbc	r15, r1
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatunsisf>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3>
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	a9 01       	movw	r20, r18
     f2e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__addsf3>
     f32:	69 83       	std	Y+1, r22	; 0x01
     f34:	7a 83       	std	Y+2, r23	; 0x02
     f36:	8b 83       	std	Y+3, r24	; 0x03
     f38:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     f3a:	40 ce       	rjmp	.-896    	; 0xbbc <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f3c:	01 e0       	ldi	r16, 0x01	; 1
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	84 cf       	rjmp	.-248    	; 0xe4c <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	df cf       	rjmp	.-66     	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f4c:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	7c cf       	rjmp	.-264    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f54:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	d7 cf       	rjmp	.-82     	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f5c:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	74 cf       	rjmp	.-280    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f64:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	cf cf       	rjmp	.-98     	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f6c:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	6c cf       	rjmp	.-296    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f74:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	c7 cf       	rjmp	.-114    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f7c:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f7e:	86 e0       	ldi	r24, 0x06	; 6
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	64 cf       	rjmp	.-312    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f84:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f86:	86 e0       	ldi	r24, 0x06	; 6
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	bf cf       	rjmp	.-130    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f8c:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     f8e:	87 e0       	ldi	r24, 0x07	; 7
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	5c cf       	rjmp	.-328    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f94:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f96:	87 e0       	ldi	r24, 0x07	; 7
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	b7 cf       	rjmp	.-146    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f9c:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     f9e:	88 e0       	ldi	r24, 0x08	; 8
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	54 cf       	rjmp	.-344    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fa4:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     fa6:	88 e0       	ldi	r24, 0x08	; 8
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	af cf       	rjmp	.-162    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fac:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     fae:	89 e0       	ldi	r24, 0x09	; 9
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	4c cf       	rjmp	.-360    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fb4:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     fb6:	89 e0       	ldi	r24, 0x09	; 9
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a7 cf       	rjmp	.-178    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fbc:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     fbe:	8a e0       	ldi	r24, 0x0A	; 10
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	44 cf       	rjmp	.-376    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fc4:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     fc6:	8a e0       	ldi	r24, 0x0A	; 10
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9f cf       	rjmp	.-194    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fcc:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     fce:	8b e0       	ldi	r24, 0x0B	; 11
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9b cf       	rjmp	.-202    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fd4:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     fd6:	8b e0       	ldi	r24, 0x0B	; 11
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	38 cf       	rjmp	.-400    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fdc:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     fde:	8c e0       	ldi	r24, 0x0C	; 12
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	93 cf       	rjmp	.-218    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fe4:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     fe6:	8c e0       	ldi	r24, 0x0C	; 12
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	30 cf       	rjmp	.-416    	; 0xe4c <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fec:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     fee:	8d e0       	ldi	r24, 0x0D	; 13
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	8b cf       	rjmp	.-234    	; 0xf0a <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ff4:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     ff6:	8d e0       	ldi	r24, 0x0D	; 13
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	28 cf       	rjmp	.-432    	; 0xe4c <estimate_distance+0x3ce>

00000ffc <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
    tx_clock += tx_increment;
    101e:	20 91 75 01 	lds	r18, 0x0175
    1022:	30 91 76 01 	lds	r19, 0x0176
    1026:	80 91 73 01 	lds	r24, 0x0173
    102a:	90 91 74 01 	lds	r25, 0x0174
    102e:	82 0f       	add	r24, r18
    1030:	93 1f       	adc	r25, r19
    1032:	90 93 76 01 	sts	0x0176, r25
    1036:	80 93 75 01 	sts	0x0175, r24
    tx_increment = 0xFF;
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	90 93 74 01 	sts	0x0174, r25
    1042:	80 93 73 01 	sts	0x0173, r24
    OCR0A = tx_increment;
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    104a:	80 91 51 01 	lds	r24, 0x0151
    104e:	90 91 52 01 	lds	r25, 0x0152
    1052:	a0 91 53 01 	lds	r26, 0x0153
    1056:	b0 91 54 01 	lds	r27, 0x0154
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	a1 1d       	adc	r26, r1
    105e:	b1 1d       	adc	r27, r1
    1060:	80 93 51 01 	sts	0x0151, r24
    1064:	90 93 52 01 	sts	0x0152, r25
    1068:	a0 93 53 01 	sts	0x0153, r26
    106c:	b0 93 54 01 	sts	0x0154, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1070:	80 91 55 01 	lds	r24, 0x0155
    1074:	81 11       	cpse	r24, r1
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <__vector_14+0x9a>
    1078:	80 91 84 01 	lds	r24, 0x0184
    107c:	90 91 85 01 	lds	r25, 0x0185
    1080:	20 91 75 01 	lds	r18, 0x0175
    1084:	30 91 76 01 	lds	r19, 0x0176
    1088:	82 17       	cp	r24, r18
    108a:	93 07       	cpc	r25, r19
    108c:	20 f4       	brcc	.+8      	; 0x1096 <__vector_14+0x9a>
    108e:	80 91 29 01 	lds	r24, 0x0129
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	89 f0       	breq	.+34     	; 0x10b8 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    10b8:	e0 91 11 01 	lds	r30, 0x0111
    10bc:	f0 91 12 01 	lds	r31, 0x0112
    10c0:	09 95       	icall
        if (msg) {
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	41 f3       	breq	.-48     	; 0x1096 <__vector_14+0x9a>
            if (message_send(msg)) {
    10c6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <message_send>
    10ca:	81 11       	cpse	r24, r1
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    10ce:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <rand>
    10d2:	99 27       	eor	r25, r25
    10d4:	90 93 74 01 	sts	0x0174, r25
    10d8:	80 93 73 01 	sts	0x0173, r24
                OCR0A = tx_increment;
    10dc:	87 bd       	out	0x27, r24	; 39
    10de:	db cf       	rjmp	.-74     	; 0x1096 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    10e0:	e0 91 0f 01 	lds	r30, 0x010F
    10e4:	f0 91 10 01 	lds	r31, 0x0110
    10e8:	09 95       	icall
                tx_clock = 0;
    10ea:	10 92 76 01 	sts	0x0176, r1
    10ee:	10 92 75 01 	sts	0x0175, r1
    10f2:	d1 cf       	rjmp	.-94     	; 0x1096 <__vector_14+0x9a>

000010f4 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    10f4:	80 ff       	sbrs	r24, 0
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <set_color+0x26>
        DDRD |= (1<<5);
    10f8:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    10fa:	81 ff       	sbrs	r24, 1
    10fc:	11 c0       	rjmp	.+34     	; 0x1120 <set_color+0x2c>
        DDRD |= (1<<4);
    10fe:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1100:	82 ff       	sbrs	r24, 2
    1102:	11 c0       	rjmp	.+34     	; 0x1126 <set_color+0x32>
        DDRC |= (1<<3);
    1104:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1106:	83 ff       	sbrs	r24, 3
    1108:	11 c0       	rjmp	.+34     	; 0x112c <set_color+0x38>
        DDRC |= (1<<2);
    110a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    110c:	84 ff       	sbrs	r24, 4
    110e:	11 c0       	rjmp	.+34     	; 0x1132 <set_color+0x3e>
        DDRC |= (1<<5);
    1110:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1112:	85 fd       	sbrc	r24, 5
    1114:	11 c0       	rjmp	.+34     	; 0x1138 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1116:	3c 98       	cbi	0x07, 4	; 7
    1118:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    111a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    111c:	81 fd       	sbrc	r24, 1
    111e:	ef cf       	rjmp	.-34     	; 0x10fe <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1120:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1122:	82 fd       	sbrc	r24, 2
    1124:	ef cf       	rjmp	.-34     	; 0x1104 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1126:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1128:	83 fd       	sbrc	r24, 3
    112a:	ef cf       	rjmp	.-34     	; 0x110a <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    112c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    112e:	84 fd       	sbrc	r24, 4
    1130:	ef cf       	rjmp	.-34     	; 0x1110 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1132:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1134:	85 ff       	sbrs	r24, 5
    1136:	ef cf       	rjmp	.-34     	; 0x1116 <set_color+0x22>
        DDRC |= (1<<4);
    1138:	3c 9a       	sbi	0x07, 4	; 7
    113a:	08 95       	ret

0000113c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    rx_timer_off();
    114a:	10 92 81 00 	sts	0x0081, r1
    114e:	10 92 85 00 	sts	0x0085, r1
    1152:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 2e 01 	sts	0x012E, r24
    rx_leadingbyte = 1;
    115c:	80 93 72 01 	sts	0x0172, r24
    rx_busy = 0;
    1160:	10 92 55 01 	sts	0x0155, r1
    adc_trigger_high_gain();
    1164:	10 92 7c 00 	sts	0x007C, r1
    1168:	93 ea       	ldi	r25, 0xA3	; 163
    116a:	90 93 7a 00 	sts	0x007A, r25
    116e:	80 93 7b 00 	sts	0x007B, r24
}
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    11a6:	20 91 84 00 	lds	r18, 0x0084
    11aa:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    11ae:	41 e0       	ldi	r20, 0x01	; 1
    11b0:	40 93 55 01 	sts	0x0155, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    11b4:	80 91 2e 01 	lds	r24, 0x012E
    11b8:	88 23       	and	r24, r24
    11ba:	a9 f1       	breq	.+106    	; 0x1226 <__vector_23+0xa6>
        rx_timer_on();
    11bc:	10 92 85 00 	sts	0x0085, r1
    11c0:	10 92 84 00 	sts	0x0084, r1
    11c4:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    11c8:	10 92 86 01 	sts	0x0186, r1
        rx_leadingbit = 0;
    11cc:	10 92 2e 01 	sts	0x012E, r1
        if (rx_leadingbyte) {
    11d0:	80 91 72 01 	lds	r24, 0x0172
    11d4:	88 23       	and	r24, r24
    11d6:	a1 f0       	breq	.+40     	; 0x1200 <__vector_23+0x80>
            adc_finish_conversion();
    11d8:	80 91 7a 00 	lds	r24, 0x007A
    11dc:	86 fd       	sbrc	r24, 6
    11de:	fc cf       	rjmp	.-8      	; 0x11d8 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    11e0:	80 91 78 00 	lds	r24, 0x0078
    11e4:	90 91 79 00 	lds	r25, 0x0079
    11e8:	90 93 50 01 	sts	0x0150, r25
    11ec:	80 93 4f 01 	sts	0x014F, r24
            adc_trigger_low_gain();
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 7c 00 	sts	0x007C, r24
    11f6:	93 ea       	ldi	r25, 0xA3	; 163
    11f8:	90 93 7a 00 	sts	0x007A, r25
    11fc:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	bf 91       	pop	r27
    120a:	af 91       	pop	r26
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	7f 91       	pop	r23
    1212:	6f 91       	pop	r22
    1214:	5f 91       	pop	r21
    1216:	4f 91       	pop	r20
    1218:	3f 91       	pop	r19
    121a:	2f 91       	pop	r18
    121c:	0f 90       	pop	r0
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	0f 90       	pop	r0
    1222:	1f 90       	pop	r1
    1224:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1226:	c9 01       	movw	r24, r18
    1228:	87 58       	subi	r24, 0x87	; 135
    122a:	91 09       	sbc	r25, r1
    122c:	84 37       	cpi	r24, 0x74	; 116
    122e:	99 40       	sbci	r25, 0x09	; 9
    1230:	08 f0       	brcs	.+2      	; 0x1234 <__vector_23+0xb4>
    1232:	52 c0       	rjmp	.+164    	; 0x12d8 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1234:	26 58       	subi	r18, 0x86	; 134
    1236:	31 09       	sbc	r19, r1
    1238:	a4 ef       	ldi	r26, 0xF4	; 244
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	0e 94 96 0b 	call	0x172c	; 0x172c <__umulhisi3>
    1240:	aa 27       	eor	r26, r26
    1242:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	91 05       	cpc	r25, r1
    1248:	a1 05       	cpc	r26, r1
    124a:	b1 05       	cpc	r27, r1
    124c:	08 f4       	brcc	.+2      	; 0x1250 <__vector_23+0xd0>
    124e:	7b c0       	rjmp	.+246    	; 0x1346 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1250:	40 93 2e 01 	sts	0x012E, r20
                if (rx_leadingbyte) {
    1254:	80 91 72 01 	lds	r24, 0x0172
    1258:	81 11       	cpse	r24, r1
    125a:	52 c0       	rjmp	.+164    	; 0x1300 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    125c:	80 91 4c 01 	lds	r24, 0x014C
    1260:	e8 2f       	mov	r30, r24
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	e8 58       	subi	r30, 0x88	; 136
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	90 91 86 01 	lds	r25, 0x0186
    126c:	90 83       	st	Z, r25
                    rx_byteindex++;
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	80 93 4c 01 	sts	0x014C, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1274:	8c 30       	cpi	r24, 0x0C	; 12
    1276:	21 f6       	brne	.-120    	; 0x1200 <__vector_23+0x80>
                        rx_timer_off();
    1278:	10 92 81 00 	sts	0x0081, r1
    127c:	10 92 85 00 	sts	0x0085, r1
    1280:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1284:	40 93 72 01 	sts	0x0172, r20
                        rx_busy = 0;
    1288:	10 92 55 01 	sts	0x0155, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    128c:	c0 91 82 01 	lds	r28, 0x0182
    1290:	d0 91 83 01 	lds	r29, 0x0183
    1294:	88 e7       	ldi	r24, 0x78	; 120
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 ca 0a 	call	0x1594	; 0x1594 <message_crc>
    129c:	c8 17       	cp	r28, r24
    129e:	d9 07       	cpc	r29, r25
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <__vector_23+0x124>
    12a2:	ae cf       	rjmp	.-164    	; 0x1200 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    12a4:	80 91 81 01 	lds	r24, 0x0181
    12a8:	87 ff       	sbrs	r24, 7
    12aa:	61 c0       	rjmp	.+194    	; 0x136e <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12ac:	98 e7       	ldi	r25, 0x78	; 120
    12ae:	98 0f       	add	r25, r24
    12b0:	93 30       	cpi	r25, 0x03	; 3
    12b2:	30 f0       	brcs	.+12     	; 0x12c0 <__vector_23+0x140>
        motors_off();
    12b4:	53 98       	cbi	0x0a, 3	; 10
    12b6:	23 98       	cbi	0x04, 3	; 4
    12b8:	10 92 b4 00 	sts	0x00B4, r1
    12bc:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fc 01       	movw	r30, r24
    12c4:	e0 58       	subi	r30, 0x80	; 128
    12c6:	f1 09       	sbc	r31, r1
    12c8:	eb 30       	cpi	r30, 0x0B	; 11
    12ca:	f1 05       	cpc	r31, r1
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__vector_23+0x150>
    12ce:	98 cf       	rjmp	.-208    	; 0x1200 <__vector_23+0x80>
    12d0:	e5 5c       	subi	r30, 0xC5	; 197
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    12d8:	10 92 81 00 	sts	0x0081, r1
    12dc:	10 92 85 00 	sts	0x0085, r1
    12e0:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    12e4:	40 93 2e 01 	sts	0x012E, r20
            rx_leadingbyte = 1;
    12e8:	40 93 72 01 	sts	0x0172, r20
            rx_busy = 0;
    12ec:	10 92 55 01 	sts	0x0155, r1
            adc_trigger_high_gain();
    12f0:	10 92 7c 00 	sts	0x007C, r1
    12f4:	83 ea       	ldi	r24, 0xA3	; 163
    12f6:	80 93 7a 00 	sts	0x007A, r24
    12fa:	40 93 7b 00 	sts	0x007B, r20
    12fe:	80 cf       	rjmp	.-256    	; 0x1200 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1300:	80 91 7a 00 	lds	r24, 0x007A
    1304:	86 fd       	sbrc	r24, 6
    1306:	fc cf       	rjmp	.-8      	; 0x1300 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1308:	80 91 78 00 	lds	r24, 0x0078
    130c:	90 91 79 00 	lds	r25, 0x0079
    1310:	90 93 4e 01 	sts	0x014E, r25
    1314:	80 93 4d 01 	sts	0x014D, r24
                    adc_trigger_high_gain();
    1318:	10 92 7c 00 	sts	0x007C, r1
    131c:	83 ea       	ldi	r24, 0xA3	; 163
    131e:	80 93 7a 00 	sts	0x007A, r24
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1328:	90 91 86 01 	lds	r25, 0x0186
    132c:	99 23       	and	r25, r25
    132e:	d1 f0       	breq	.+52     	; 0x1364 <__vector_23+0x1e4>
                        rx_timer_off();
    1330:	10 92 81 00 	sts	0x0081, r1
    1334:	10 92 85 00 	sts	0x0085, r1
    1338:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    133c:	80 93 72 01 	sts	0x0172, r24
                        rx_busy = 0;
    1340:	10 92 55 01 	sts	0x0155, r1
    1344:	5d cf       	rjmp	.-326    	; 0x1200 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <__vector_23+0x1d2>
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <__vector_23+0x1ce>
    1356:	cf 01       	movw	r24, r30
    1358:	90 91 86 01 	lds	r25, 0x0186
    135c:	89 2b       	or	r24, r25
    135e:	80 93 86 01 	sts	0x0186, r24
    1362:	4e cf       	rjmp	.-356    	; 0x1200 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1364:	10 92 72 01 	sts	0x0172, r1
                        rx_byteindex = 0;
    1368:	10 92 4c 01 	sts	0x014C, r1
    136c:	49 cf       	rjmp	.-366    	; 0x1200 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    136e:	e0 91 13 01 	lds	r30, 0x0113
    1372:	f0 91 14 01 	lds	r31, 0x0114
    1376:	6d e4       	ldi	r22, 0x4D	; 77
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	88 e7       	ldi	r24, 0x78	; 120
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	09 95       	icall
    1380:	3f cf       	rjmp	.-386    	; 0x1200 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1382:	80 91 78 01 	lds	r24, 0x0178
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	09 f4       	brne	.+2      	; 0x138c <__vector_23+0x20c>
    138a:	dd c0       	rjmp	.+442    	; 0x1546 <__vector_23+0x3c6>
    138c:	08 f4       	brcc	.+2      	; 0x1390 <__vector_23+0x210>
    138e:	ba c0       	rjmp	.+372    	; 0x1504 <__vector_23+0x384>
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	09 f4       	brne	.+2      	; 0x1396 <__vector_23+0x216>
    1394:	c6 c0       	rjmp	.+396    	; 0x1522 <__vector_23+0x3a2>
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	09 f0       	breq	.+2      	; 0x139c <__vector_23+0x21c>
    139a:	b1 c0       	rjmp	.+354    	; 0x14fe <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    139c:	80 91 27 01 	lds	r24, 0x0127
    13a0:	90 91 7e 01 	lds	r25, 0x017E
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	09 f4       	brne	.+2      	; 0x13aa <__vector_23+0x22a>
    13a8:	e3 c0       	rjmp	.+454    	; 0x1570 <__vector_23+0x3f0>
    13aa:	80 91 7d 01 	lds	r24, 0x017D
                        prev_motion = MOVE_STOP;
    13ae:	10 92 28 01 	sts	0x0128, r1
                        cur_motion = MOVE_STRAIGHT;
    13b2:	23 e0       	ldi	r18, 0x03	; 3
    13b4:	20 93 27 01 	sts	0x0127, r18
                        kilo_straight_left = calibmsg->straight_left;
    13b8:	80 93 89 01 	sts	0x0189, r24
                        kilo_straight_right = calibmsg->straight_right;
    13bc:	90 93 8a 01 	sts	0x018A, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13c0:	80 91 29 01 	lds	r24, 0x0129
    13c4:	86 30       	cpi	r24, 0x06	; 6
    13c6:	09 f4       	brne	.+2      	; 0x13ca <__vector_23+0x24a>
    13c8:	1b cf       	rjmp	.-458    	; 0x1200 <__vector_23+0x80>
                motors_on();
    13ca:	53 9a       	sbi	0x0a, 3	; 10
    13cc:	23 9a       	sbi	0x04, 3	; 4
    13ce:	10 92 b4 00 	sts	0x00B4, r1
    13d2:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	80 93 29 01 	sts	0x0129, r24
    13dc:	11 cf       	rjmp	.-478    	; 0x1200 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    13de:	80 91 29 01 	lds	r24, 0x0129
    13e2:	86 30       	cpi	r24, 0x06	; 6
    13e4:	99 f0       	breq	.+38     	; 0x140c <__vector_23+0x28c>
                motors_on();
    13e6:	53 9a       	sbi	0x0a, 3	; 10
    13e8:	23 9a       	sbi	0x04, 3	; 4
    13ea:	10 92 b4 00 	sts	0x00B4, r1
    13ee:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    13f2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    13f4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    13f6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    13f8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    13fa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    13fc:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    13fe:	10 92 27 01 	sts	0x0127, r1
    1402:	10 92 28 01 	sts	0x0128, r1
                kilo_state = MOVING;
    1406:	86 e0       	ldi	r24, 0x06	; 6
    1408:	80 93 29 01 	sts	0x0129, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 01       	movw	r18, r24
    1412:	00 90 78 01 	lds	r0, 0x0178
    1416:	02 c0       	rjmp	.+4      	; 0x141c <__vector_23+0x29c>
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <__vector_23+0x298>
    1420:	80 91 87 01 	lds	r24, 0x0187
    1424:	90 91 88 01 	lds	r25, 0x0188
    1428:	82 23       	and	r24, r18
    142a:	93 23       	and	r25, r19
    142c:	89 2b       	or	r24, r25
    142e:	09 f0       	breq	.+2      	; 0x1432 <__vector_23+0x2b2>
    1430:	86 c0       	rjmp	.+268    	; 0x153e <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1432:	10 92 27 01 	sts	0x0127, r1
    1436:	e4 ce       	rjmp	.-568    	; 0x1200 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 29 01 	sts	0x0129, r24
    143e:	e0 ce       	rjmp	.-576    	; 0x1200 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1440:	e0 e0       	ldi	r30, 0x00	; 0
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1446:	80 91 6e 00 	lds	r24, 0x006E
    144a:	8d 7f       	andi	r24, 0xFD	; 253
    144c:	80 93 6e 00 	sts	0x006E, r24
    1450:	16 bc       	out	0x26, r1	; 38
            bootload();
    1452:	e0 e0       	ldi	r30, 0x00	; 0
    1454:	f0 e7       	ldi	r31, 0x70	; 112
    1456:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1458:	10 92 29 01 	sts	0x0129, r1
    145c:	d1 ce       	rjmp	.-606    	; 0x1200 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	80 93 29 01 	sts	0x0129, r24
    1464:	cd ce       	rjmp	.-614    	; 0x1200 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1466:	85 e0       	ldi	r24, 0x05	; 5
    1468:	80 93 29 01 	sts	0x0129, r24
    146c:	c9 ce       	rjmp	.-622    	; 0x1200 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    146e:	80 91 29 01 	lds	r24, 0x0129
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	09 f4       	brne	.+2      	; 0x1478 <__vector_23+0x2f8>
    1476:	c4 ce       	rjmp	.-632    	; 0x1200 <__vector_23+0x80>
    1478:	80 91 29 01 	lds	r24, 0x0129
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	09 f4       	brne	.+2      	; 0x1482 <__vector_23+0x302>
    1480:	bf ce       	rjmp	.-642    	; 0x1200 <__vector_23+0x80>
                motors_on();
    1482:	53 9a       	sbi	0x0a, 3	; 10
    1484:	23 9a       	sbi	0x04, 3	; 4
    1486:	10 92 b4 00 	sts	0x00B4, r1
    148a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	80 93 29 01 	sts	0x0129, r24
    1494:	b5 ce       	rjmp	.-662    	; 0x1200 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1496:	80 91 29 01 	lds	r24, 0x0129
    149a:	86 30       	cpi	r24, 0x06	; 6
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_23+0x320>
    149e:	b0 ce       	rjmp	.-672    	; 0x1200 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    14a0:	60 91 87 01 	lds	r22, 0x0187
    14a4:	80 eb       	ldi	r24, 0xB0	; 176
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    14ac:	60 91 88 01 	lds	r22, 0x0188
    14b0:	81 eb       	ldi	r24, 0xB1	; 177
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    14b8:	60 91 8b 01 	lds	r22, 0x018B
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    14c4:	60 91 77 01 	lds	r22, 0x0177
    14c8:	89 e0       	ldi	r24, 0x09	; 9
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    14d0:	60 91 89 01 	lds	r22, 0x0189
    14d4:	8c e0       	ldi	r24, 0x0C	; 12
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    14dc:	60 91 8a 01 	lds	r22, 0x018A
    14e0:	84 e1       	ldi	r24, 0x14	; 20
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_write_byte>
                        motors_off();
    14e8:	53 98       	cbi	0x0a, 3	; 10
    14ea:	23 98       	cbi	0x04, 3	; 4
    14ec:	10 92 b4 00 	sts	0x00B4, r1
    14f0:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 29 01 	sts	0x0129, r24
    14fa:	80 91 78 01 	lds	r24, 0x0178
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    14fe:	81 11       	cpse	r24, r1
    1500:	5f cf       	rjmp	.-322    	; 0x13c0 <__vector_23+0x240>
    1502:	7e ce       	rjmp	.-772    	; 0x1200 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1504:	88 23       	and	r24, r24
    1506:	39 f2       	breq	.-114    	; 0x1496 <__vector_23+0x316>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    150c:	80 91 79 01 	lds	r24, 0x0179
    1510:	90 91 7a 01 	lds	r25, 0x017A
    1514:	90 93 88 01 	sts	0x0188, r25
    1518:	80 93 87 01 	sts	0x0187, r24
                    cur_motion = MOVE_STOP;
    151c:	10 92 27 01 	sts	0x0127, r1
    1520:	4f cf       	rjmp	.-354    	; 0x13c0 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1522:	80 91 27 01 	lds	r24, 0x0127
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	71 f1       	breq	.+92     	; 0x1586 <__vector_23+0x406>
    152a:	80 91 7c 01 	lds	r24, 0x017C
                        prev_motion = MOVE_STOP;
    152e:	10 92 28 01 	sts	0x0128, r1
                        cur_motion = MOVE_RIGHT;
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	90 93 27 01 	sts	0x0127, r25
                        kilo_turn_right = calibmsg->turn_right;
    1538:	80 93 77 01 	sts	0x0177, r24
    153c:	41 cf       	rjmp	.-382    	; 0x13c0 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	80 93 27 01 	sts	0x0127, r24
    1544:	5d ce       	rjmp	.-838    	; 0x1200 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1546:	80 91 27 01 	lds	r24, 0x0127
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	51 f0       	breq	.+20     	; 0x1562 <__vector_23+0x3e2>
    154e:	80 91 7b 01 	lds	r24, 0x017B
                        prev_motion = MOVE_STOP;
    1552:	10 92 28 01 	sts	0x0128, r1
                        cur_motion = MOVE_LEFT;
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	90 93 27 01 	sts	0x0127, r25
                        kilo_turn_left = calibmsg->turn_left;
    155c:	80 93 8b 01 	sts	0x018B, r24
    1560:	2f cf       	rjmp	.-418    	; 0x13c0 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1562:	80 91 7b 01 	lds	r24, 0x017B
    1566:	90 91 8b 01 	lds	r25, 0x018B
    156a:	89 13       	cpse	r24, r25
    156c:	f2 cf       	rjmp	.-28     	; 0x1552 <__vector_23+0x3d2>
    156e:	28 cf       	rjmp	.-432    	; 0x13c0 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1570:	80 91 8a 01 	lds	r24, 0x018A
    1574:	98 13       	cpse	r25, r24
    1576:	19 cf       	rjmp	.-462    	; 0x13aa <__vector_23+0x22a>
    1578:	80 91 7d 01 	lds	r24, 0x017D
    157c:	20 91 89 01 	lds	r18, 0x0189
    1580:	82 13       	cpse	r24, r18
    1582:	15 cf       	rjmp	.-470    	; 0x13ae <__vector_23+0x22e>
    1584:	1d cf       	rjmp	.-454    	; 0x13c0 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1586:	80 91 7c 01 	lds	r24, 0x017C
    158a:	90 91 77 01 	lds	r25, 0x0177
    158e:	89 13       	cpse	r24, r25
    1590:	ce cf       	rjmp	.-100    	; 0x152e <__vector_23+0x3ae>
    1592:	16 cf       	rjmp	.-468    	; 0x13c0 <__vector_23+0x240>

00001594 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1594:	fc 01       	movw	r30, r24
    1596:	ac 01       	movw	r20, r24
    1598:	46 5f       	subi	r20, 0xF6	; 246
    159a:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    15a0:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    15a2:	82 27       	eor	r24, r18
    15a4:	08 2e       	mov	r0, r24
    15a6:	82 95       	swap	r24
    15a8:	80 7f       	andi	r24, 0xF0	; 240
    15aa:	80 25       	eor	r24, r0
    15ac:	09 2e       	mov	r0, r25
    15ae:	98 2f       	mov	r25, r24
    15b0:	82 95       	swap	r24
    15b2:	8f 70       	andi	r24, 0x0F	; 15
    15b4:	08 26       	eor	r0, r24
    15b6:	86 95       	lsr	r24
    15b8:	98 27       	eor	r25, r24
    15ba:	89 27       	eor	r24, r25
    15bc:	88 0f       	add	r24, r24
    15be:	88 0f       	add	r24, r24
    15c0:	88 0f       	add	r24, r24
    15c2:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    15c4:	e4 17       	cp	r30, r20
    15c6:	f5 07       	cpc	r31, r21
    15c8:	59 f7       	brne	.-42     	; 0x15a0 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    15ca:	08 95       	ret

000015cc <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    15cc:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    15ce:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    15d0:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    15d2:	20 91 4b 01 	lds	r18, 0x014B
    or tmpreg1, ddrreg
    15d6:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    15d8:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    15da:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15dc:	30 91 4b 01 	lds	r19, 0x014B
    15e0:	20 30       	cpi	r18, 0x00	; 0
    15e2:	29 f0       	breq	.+10     	; 0x15ee <message_send+0x22>
    15e4:	00 00       	nop
    15e6:	25 b1       	in	r18, 0x05	; 5
    15e8:	23 2b       	or	r18, r19
    15ea:	25 b9       	out	0x05, r18	; 5
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <message_send+0x2a>
    15ee:	00 00       	nop
    15f0:	00 00       	nop
    15f2:	00 00       	nop
    15f4:	00 c0       	rjmp	.+0      	; 0x15f6 <message_send+0x2a>
    15f6:	00 00       	nop
    15f8:	00 00       	nop
    15fa:	00 00       	nop
    15fc:	30 95       	com	r19
    15fe:	25 b1       	in	r18, 0x05	; 5
    1600:	23 23       	and	r18, r19
    1602:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1604:	2e ea       	ldi	r18, 0xAE	; 174
    1606:	2a 95       	dec	r18
    1608:	f1 f7       	brne	.-4      	; 0x1606 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    160a:	2b ee       	ldi	r18, 0xEB	; 235

0000160c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    160c:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    160e:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1610:	0a c0       	rjmp	.+20     	; 0x1626 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1612:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1614:	30 91 4b 01 	lds	r19, 0x014B
    com tmpreg2
    1618:	30 95       	com	r19
    in tmpreg1, IR_PORT
    161a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    161c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    161e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1620:	0f be       	out	0x3f, r0	; 63
    return 0
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	08 95       	ret

00001626 <nocollision>:
nocollision:
    nop
    1626:	00 00       	nop
    dec tmpreg1
    1628:	2a 95       	dec	r18
    brne checkcollision
    162a:	81 f7       	brne	.-32     	; 0x160c <checkcollision>

    ldi tmpreg1, 0x01
    162c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    162e:	30 91 4b 01 	lds	r19, 0x014B
    1632:	20 30       	cpi	r18, 0x00	; 0
    1634:	29 f0       	breq	.+10     	; 0x1640 <nocollision+0x1a>
    1636:	00 00       	nop
    1638:	25 b1       	in	r18, 0x05	; 5
    163a:	23 2b       	or	r18, r19
    163c:	25 b9       	out	0x05, r18	; 5
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <nocollision+0x22>
    1640:	00 00       	nop
    1642:	00 00       	nop
    1644:	00 00       	nop
    1646:	00 c0       	rjmp	.+0      	; 0x1648 <nocollision+0x22>
    1648:	00 00       	nop
    164a:	00 00       	nop
    164c:	00 00       	nop
    164e:	30 95       	com	r19
    1650:	25 b1       	in	r18, 0x05	; 5
    1652:	23 23       	and	r18, r19
    1654:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1656:	00 00       	nop
    1658:	24 e5       	ldi	r18, 0x54	; 84
    165a:	2a 95       	dec	r18
    165c:	f1 f7       	brne	.-4      	; 0x165a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    165e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1660:	8c e0       	ldi	r24, 0x0C	; 12

00001662 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1662:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1664:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1666:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1668:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    166a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    166c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    166e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1670:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1672:	50 e0       	ldi	r21, 0x00	; 0

00001674 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1674:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1676:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1678:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    167a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    167c:	30 91 4b 01 	lds	r19, 0x014B
    1680:	20 30       	cpi	r18, 0x00	; 0
    1682:	29 f0       	breq	.+10     	; 0x168e <sendbit+0x1a>
    1684:	00 00       	nop
    1686:	25 b1       	in	r18, 0x05	; 5
    1688:	23 2b       	or	r18, r19
    168a:	25 b9       	out	0x05, r18	; 5
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <sendbit+0x22>
    168e:	00 00       	nop
    1690:	00 00       	nop
    1692:	00 00       	nop
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <sendbit+0x22>
    1696:	00 00       	nop
    1698:	00 00       	nop
    169a:	00 00       	nop
    169c:	30 95       	com	r19
    169e:	25 b1       	in	r18, 0x05	; 5
    16a0:	23 23       	and	r18, r19
    16a2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    16a4:	00 00       	nop
    16a6:	21 e5       	ldi	r18, 0x51	; 81
    16a8:	2a 95       	dec	r18
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    16ac:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    16ae:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    16b0:	9a 95       	dec	r25
    brne sendbit
    16b2:	01 f7       	brne	.-64     	; 0x1674 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    16b4:	8a 95       	dec	r24
    brne sendbyte
    16b6:	a9 f6       	brne	.-86     	; 0x1662 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    16b8:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    16ba:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    16bc:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    16be:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    16c0:	30 91 4b 01 	lds	r19, 0x014B
    com tmpreg2
    16c4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    16c6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    16c8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    16ca:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    16cc:	0f be       	out	0x3f, r0	; 63
    return 1
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	08 95       	ret

000016d2 <main>:
    }
}

int main()
{
    kilo_init();
    16d2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <kilo_init>
    kilo_message_rx = message_rx;
    16d6:	8a e7       	ldi	r24, 0x7A	; 122
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 93 14 01 	sts	0x0114, r25
    16de:	80 93 13 01 	sts	0x0113, r24
    debug_init();
    16e2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <debug_init>
    kilo_start(setup, loop);
    16e6:	67 ec       	ldi	r22, 0xC7	; 199
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	8a e9       	ldi	r24, 0x9A	; 154
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 f6 02 	call	0x5ec	; 0x5ec <kilo_start>

    return 0;
}
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	08 95       	ret

000016f8 <__divmodhi4>:
    16f8:	97 fb       	bst	r25, 7
    16fa:	07 2e       	mov	r0, r23
    16fc:	16 f4       	brtc	.+4      	; 0x1702 <__divmodhi4+0xa>
    16fe:	00 94       	com	r0
    1700:	07 d0       	rcall	.+14     	; 0x1710 <__divmodhi4_neg1>
    1702:	77 fd       	sbrc	r23, 7
    1704:	09 d0       	rcall	.+18     	; 0x1718 <__divmodhi4_neg2>
    1706:	0e 94 a5 0b 	call	0x174a	; 0x174a <__udivmodhi4>
    170a:	07 fc       	sbrc	r0, 7
    170c:	05 d0       	rcall	.+10     	; 0x1718 <__divmodhi4_neg2>
    170e:	3e f4       	brtc	.+14     	; 0x171e <__divmodhi4_exit>

00001710 <__divmodhi4_neg1>:
    1710:	90 95       	com	r25
    1712:	81 95       	neg	r24
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	08 95       	ret

00001718 <__divmodhi4_neg2>:
    1718:	70 95       	com	r23
    171a:	61 95       	neg	r22
    171c:	7f 4f       	sbci	r23, 0xFF	; 255

0000171e <__divmodhi4_exit>:
    171e:	08 95       	ret

00001720 <__tablejump2__>:
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	05 90       	lpm	r0, Z+
    1726:	f4 91       	lpm	r31, Z
    1728:	e0 2d       	mov	r30, r0
    172a:	09 94       	ijmp

0000172c <__umulhisi3>:
    172c:	a2 9f       	mul	r26, r18
    172e:	b0 01       	movw	r22, r0
    1730:	b3 9f       	mul	r27, r19
    1732:	c0 01       	movw	r24, r0
    1734:	a3 9f       	mul	r26, r19
    1736:	70 0d       	add	r23, r0
    1738:	81 1d       	adc	r24, r1
    173a:	11 24       	eor	r1, r1
    173c:	91 1d       	adc	r25, r1
    173e:	b2 9f       	mul	r27, r18
    1740:	70 0d       	add	r23, r0
    1742:	81 1d       	adc	r24, r1
    1744:	11 24       	eor	r1, r1
    1746:	91 1d       	adc	r25, r1
    1748:	08 95       	ret

0000174a <__udivmodhi4>:
    174a:	aa 1b       	sub	r26, r26
    174c:	bb 1b       	sub	r27, r27
    174e:	51 e1       	ldi	r21, 0x11	; 17
    1750:	07 c0       	rjmp	.+14     	; 0x1760 <__udivmodhi4_ep>

00001752 <__udivmodhi4_loop>:
    1752:	aa 1f       	adc	r26, r26
    1754:	bb 1f       	adc	r27, r27
    1756:	a6 17       	cp	r26, r22
    1758:	b7 07       	cpc	r27, r23
    175a:	10 f0       	brcs	.+4      	; 0x1760 <__udivmodhi4_ep>
    175c:	a6 1b       	sub	r26, r22
    175e:	b7 0b       	sbc	r27, r23

00001760 <__udivmodhi4_ep>:
    1760:	88 1f       	adc	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	5a 95       	dec	r21
    1766:	a9 f7       	brne	.-22     	; 0x1752 <__udivmodhi4_loop>
    1768:	80 95       	com	r24
    176a:	90 95       	com	r25
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	08 95       	ret

00001772 <__subsf3>:
    1772:	50 58       	subi	r21, 0x80	; 128

00001774 <__addsf3>:
    1774:	bb 27       	eor	r27, r27
    1776:	aa 27       	eor	r26, r26
    1778:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__addsf3x>
    177c:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__fp_round>
    1780:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__fp_pscA>
    1784:	38 f0       	brcs	.+14     	; 0x1794 <__addsf3+0x20>
    1786:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_pscB>
    178a:	20 f0       	brcs	.+8      	; 0x1794 <__addsf3+0x20>
    178c:	39 f4       	brne	.+14     	; 0x179c <__addsf3+0x28>
    178e:	9f 3f       	cpi	r25, 0xFF	; 255
    1790:	19 f4       	brne	.+6      	; 0x1798 <__addsf3+0x24>
    1792:	26 f4       	brtc	.+8      	; 0x179c <__addsf3+0x28>
    1794:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__fp_nan>
    1798:	0e f4       	brtc	.+2      	; 0x179c <__addsf3+0x28>
    179a:	e0 95       	com	r30
    179c:	e7 fb       	bst	r30, 7
    179e:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_inf>

000017a2 <__addsf3x>:
    17a2:	e9 2f       	mov	r30, r25
    17a4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fp_split3>
    17a8:	58 f3       	brcs	.-42     	; 0x1780 <__addsf3+0xc>
    17aa:	ba 17       	cp	r27, r26
    17ac:	62 07       	cpc	r22, r18
    17ae:	73 07       	cpc	r23, r19
    17b0:	84 07       	cpc	r24, r20
    17b2:	95 07       	cpc	r25, r21
    17b4:	20 f0       	brcs	.+8      	; 0x17be <__addsf3x+0x1c>
    17b6:	79 f4       	brne	.+30     	; 0x17d6 <__addsf3x+0x34>
    17b8:	a6 f5       	brtc	.+104    	; 0x1822 <__addsf3x+0x80>
    17ba:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_zero>
    17be:	0e f4       	brtc	.+2      	; 0x17c2 <__addsf3x+0x20>
    17c0:	e0 95       	com	r30
    17c2:	0b 2e       	mov	r0, r27
    17c4:	ba 2f       	mov	r27, r26
    17c6:	a0 2d       	mov	r26, r0
    17c8:	0b 01       	movw	r0, r22
    17ca:	b9 01       	movw	r22, r18
    17cc:	90 01       	movw	r18, r0
    17ce:	0c 01       	movw	r0, r24
    17d0:	ca 01       	movw	r24, r20
    17d2:	a0 01       	movw	r20, r0
    17d4:	11 24       	eor	r1, r1
    17d6:	ff 27       	eor	r31, r31
    17d8:	59 1b       	sub	r21, r25
    17da:	99 f0       	breq	.+38     	; 0x1802 <__addsf3x+0x60>
    17dc:	59 3f       	cpi	r21, 0xF9	; 249
    17de:	50 f4       	brcc	.+20     	; 0x17f4 <__addsf3x+0x52>
    17e0:	50 3e       	cpi	r21, 0xE0	; 224
    17e2:	68 f1       	brcs	.+90     	; 0x183e <__addsf3x+0x9c>
    17e4:	1a 16       	cp	r1, r26
    17e6:	f0 40       	sbci	r31, 0x00	; 0
    17e8:	a2 2f       	mov	r26, r18
    17ea:	23 2f       	mov	r18, r19
    17ec:	34 2f       	mov	r19, r20
    17ee:	44 27       	eor	r20, r20
    17f0:	58 5f       	subi	r21, 0xF8	; 248
    17f2:	f3 cf       	rjmp	.-26     	; 0x17da <__addsf3x+0x38>
    17f4:	46 95       	lsr	r20
    17f6:	37 95       	ror	r19
    17f8:	27 95       	ror	r18
    17fa:	a7 95       	ror	r26
    17fc:	f0 40       	sbci	r31, 0x00	; 0
    17fe:	53 95       	inc	r21
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <__addsf3x+0x52>
    1802:	7e f4       	brtc	.+30     	; 0x1822 <__addsf3x+0x80>
    1804:	1f 16       	cp	r1, r31
    1806:	ba 0b       	sbc	r27, r26
    1808:	62 0b       	sbc	r22, r18
    180a:	73 0b       	sbc	r23, r19
    180c:	84 0b       	sbc	r24, r20
    180e:	ba f0       	brmi	.+46     	; 0x183e <__addsf3x+0x9c>
    1810:	91 50       	subi	r25, 0x01	; 1
    1812:	a1 f0       	breq	.+40     	; 0x183c <__addsf3x+0x9a>
    1814:	ff 0f       	add	r31, r31
    1816:	bb 1f       	adc	r27, r27
    1818:	66 1f       	adc	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	c2 f7       	brpl	.-16     	; 0x1810 <__addsf3x+0x6e>
    1820:	0e c0       	rjmp	.+28     	; 0x183e <__addsf3x+0x9c>
    1822:	ba 0f       	add	r27, r26
    1824:	62 1f       	adc	r22, r18
    1826:	73 1f       	adc	r23, r19
    1828:	84 1f       	adc	r24, r20
    182a:	48 f4       	brcc	.+18     	; 0x183e <__addsf3x+0x9c>
    182c:	87 95       	ror	r24
    182e:	77 95       	ror	r23
    1830:	67 95       	ror	r22
    1832:	b7 95       	ror	r27
    1834:	f7 95       	ror	r31
    1836:	9e 3f       	cpi	r25, 0xFE	; 254
    1838:	08 f0       	brcs	.+2      	; 0x183c <__addsf3x+0x9a>
    183a:	b0 cf       	rjmp	.-160    	; 0x179c <__addsf3+0x28>
    183c:	93 95       	inc	r25
    183e:	88 0f       	add	r24, r24
    1840:	08 f0       	brcs	.+2      	; 0x1844 <__addsf3x+0xa2>
    1842:	99 27       	eor	r25, r25
    1844:	ee 0f       	add	r30, r30
    1846:	97 95       	ror	r25
    1848:	87 95       	ror	r24
    184a:	08 95       	ret

0000184c <__divsf3>:
    184c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__divsf3x>
    1850:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__fp_round>
    1854:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_pscB>
    1858:	58 f0       	brcs	.+22     	; 0x1870 <__divsf3+0x24>
    185a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__fp_pscA>
    185e:	40 f0       	brcs	.+16     	; 0x1870 <__divsf3+0x24>
    1860:	29 f4       	brne	.+10     	; 0x186c <__divsf3+0x20>
    1862:	5f 3f       	cpi	r21, 0xFF	; 255
    1864:	29 f0       	breq	.+10     	; 0x1870 <__divsf3+0x24>
    1866:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_inf>
    186a:	51 11       	cpse	r21, r1
    186c:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_szero>
    1870:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__fp_nan>

00001874 <__divsf3x>:
    1874:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fp_split3>
    1878:	68 f3       	brcs	.-38     	; 0x1854 <__divsf3+0x8>

0000187a <__divsf3_pse>:
    187a:	99 23       	and	r25, r25
    187c:	b1 f3       	breq	.-20     	; 0x186a <__divsf3+0x1e>
    187e:	55 23       	and	r21, r21
    1880:	91 f3       	breq	.-28     	; 0x1866 <__divsf3+0x1a>
    1882:	95 1b       	sub	r25, r21
    1884:	55 0b       	sbc	r21, r21
    1886:	bb 27       	eor	r27, r27
    1888:	aa 27       	eor	r26, r26
    188a:	62 17       	cp	r22, r18
    188c:	73 07       	cpc	r23, r19
    188e:	84 07       	cpc	r24, r20
    1890:	38 f0       	brcs	.+14     	; 0x18a0 <__divsf3_pse+0x26>
    1892:	9f 5f       	subi	r25, 0xFF	; 255
    1894:	5f 4f       	sbci	r21, 0xFF	; 255
    1896:	22 0f       	add	r18, r18
    1898:	33 1f       	adc	r19, r19
    189a:	44 1f       	adc	r20, r20
    189c:	aa 1f       	adc	r26, r26
    189e:	a9 f3       	breq	.-22     	; 0x188a <__divsf3_pse+0x10>
    18a0:	35 d0       	rcall	.+106    	; 0x190c <__divsf3_pse+0x92>
    18a2:	0e 2e       	mov	r0, r30
    18a4:	3a f0       	brmi	.+14     	; 0x18b4 <__divsf3_pse+0x3a>
    18a6:	e0 e8       	ldi	r30, 0x80	; 128
    18a8:	32 d0       	rcall	.+100    	; 0x190e <__divsf3_pse+0x94>
    18aa:	91 50       	subi	r25, 0x01	; 1
    18ac:	50 40       	sbci	r21, 0x00	; 0
    18ae:	e6 95       	lsr	r30
    18b0:	00 1c       	adc	r0, r0
    18b2:	ca f7       	brpl	.-14     	; 0x18a6 <__divsf3_pse+0x2c>
    18b4:	2b d0       	rcall	.+86     	; 0x190c <__divsf3_pse+0x92>
    18b6:	fe 2f       	mov	r31, r30
    18b8:	29 d0       	rcall	.+82     	; 0x190c <__divsf3_pse+0x92>
    18ba:	66 0f       	add	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	88 1f       	adc	r24, r24
    18c0:	bb 1f       	adc	r27, r27
    18c2:	26 17       	cp	r18, r22
    18c4:	37 07       	cpc	r19, r23
    18c6:	48 07       	cpc	r20, r24
    18c8:	ab 07       	cpc	r26, r27
    18ca:	b0 e8       	ldi	r27, 0x80	; 128
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <__divsf3_pse+0x56>
    18ce:	bb 0b       	sbc	r27, r27
    18d0:	80 2d       	mov	r24, r0
    18d2:	bf 01       	movw	r22, r30
    18d4:	ff 27       	eor	r31, r31
    18d6:	93 58       	subi	r25, 0x83	; 131
    18d8:	5f 4f       	sbci	r21, 0xFF	; 255
    18da:	3a f0       	brmi	.+14     	; 0x18ea <__divsf3_pse+0x70>
    18dc:	9e 3f       	cpi	r25, 0xFE	; 254
    18de:	51 05       	cpc	r21, r1
    18e0:	78 f0       	brcs	.+30     	; 0x1900 <__divsf3_pse+0x86>
    18e2:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_inf>
    18e6:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_szero>
    18ea:	5f 3f       	cpi	r21, 0xFF	; 255
    18ec:	e4 f3       	brlt	.-8      	; 0x18e6 <__divsf3_pse+0x6c>
    18ee:	98 3e       	cpi	r25, 0xE8	; 232
    18f0:	d4 f3       	brlt	.-12     	; 0x18e6 <__divsf3_pse+0x6c>
    18f2:	86 95       	lsr	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	b7 95       	ror	r27
    18fa:	f7 95       	ror	r31
    18fc:	9f 5f       	subi	r25, 0xFF	; 255
    18fe:	c9 f7       	brne	.-14     	; 0x18f2 <__divsf3_pse+0x78>
    1900:	88 0f       	add	r24, r24
    1902:	91 1d       	adc	r25, r1
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret
    190c:	e1 e0       	ldi	r30, 0x01	; 1
    190e:	66 0f       	add	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	88 1f       	adc	r24, r24
    1914:	bb 1f       	adc	r27, r27
    1916:	62 17       	cp	r22, r18
    1918:	73 07       	cpc	r23, r19
    191a:	84 07       	cpc	r24, r20
    191c:	ba 07       	cpc	r27, r26
    191e:	20 f0       	brcs	.+8      	; 0x1928 <__divsf3_pse+0xae>
    1920:	62 1b       	sub	r22, r18
    1922:	73 0b       	sbc	r23, r19
    1924:	84 0b       	sbc	r24, r20
    1926:	ba 0b       	sbc	r27, r26
    1928:	ee 1f       	adc	r30, r30
    192a:	88 f7       	brcc	.-30     	; 0x190e <__divsf3_pse+0x94>
    192c:	e0 95       	com	r30
    192e:	08 95       	ret

00001930 <__fixsfsi>:
    1930:	0e 94 9f 0c 	call	0x193e	; 0x193e <__fixunssfsi>
    1934:	68 94       	set
    1936:	b1 11       	cpse	r27, r1
    1938:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_szero>
    193c:	08 95       	ret

0000193e <__fixunssfsi>:
    193e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__fp_splitA>
    1942:	88 f0       	brcs	.+34     	; 0x1966 <__fixunssfsi+0x28>
    1944:	9f 57       	subi	r25, 0x7F	; 127
    1946:	98 f0       	brcs	.+38     	; 0x196e <__fixunssfsi+0x30>
    1948:	b9 2f       	mov	r27, r25
    194a:	99 27       	eor	r25, r25
    194c:	b7 51       	subi	r27, 0x17	; 23
    194e:	b0 f0       	brcs	.+44     	; 0x197c <__fixunssfsi+0x3e>
    1950:	e1 f0       	breq	.+56     	; 0x198a <__fixunssfsi+0x4c>
    1952:	66 0f       	add	r22, r22
    1954:	77 1f       	adc	r23, r23
    1956:	88 1f       	adc	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	1a f0       	brmi	.+6      	; 0x1962 <__fixunssfsi+0x24>
    195c:	ba 95       	dec	r27
    195e:	c9 f7       	brne	.-14     	; 0x1952 <__fixunssfsi+0x14>
    1960:	14 c0       	rjmp	.+40     	; 0x198a <__fixunssfsi+0x4c>
    1962:	b1 30       	cpi	r27, 0x01	; 1
    1964:	91 f0       	breq	.+36     	; 0x198a <__fixunssfsi+0x4c>
    1966:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fp_zero>
    196a:	b1 e0       	ldi	r27, 0x01	; 1
    196c:	08 95       	ret
    196e:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_zero>
    1972:	67 2f       	mov	r22, r23
    1974:	78 2f       	mov	r23, r24
    1976:	88 27       	eor	r24, r24
    1978:	b8 5f       	subi	r27, 0xF8	; 248
    197a:	39 f0       	breq	.+14     	; 0x198a <__fixunssfsi+0x4c>
    197c:	b9 3f       	cpi	r27, 0xF9	; 249
    197e:	cc f3       	brlt	.-14     	; 0x1972 <__fixunssfsi+0x34>
    1980:	86 95       	lsr	r24
    1982:	77 95       	ror	r23
    1984:	67 95       	ror	r22
    1986:	b3 95       	inc	r27
    1988:	d9 f7       	brne	.-10     	; 0x1980 <__fixunssfsi+0x42>
    198a:	3e f4       	brtc	.+14     	; 0x199a <__fixunssfsi+0x5c>
    198c:	90 95       	com	r25
    198e:	80 95       	com	r24
    1990:	70 95       	com	r23
    1992:	61 95       	neg	r22
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	8f 4f       	sbci	r24, 0xFF	; 255
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	08 95       	ret

0000199c <__floatunsisf>:
    199c:	e8 94       	clt
    199e:	09 c0       	rjmp	.+18     	; 0x19b2 <__floatsisf+0x12>

000019a0 <__floatsisf>:
    19a0:	97 fb       	bst	r25, 7
    19a2:	3e f4       	brtc	.+14     	; 0x19b2 <__floatsisf+0x12>
    19a4:	90 95       	com	r25
    19a6:	80 95       	com	r24
    19a8:	70 95       	com	r23
    19aa:	61 95       	neg	r22
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	8f 4f       	sbci	r24, 0xFF	; 255
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	99 23       	and	r25, r25
    19b4:	a9 f0       	breq	.+42     	; 0x19e0 <__floatsisf+0x40>
    19b6:	f9 2f       	mov	r31, r25
    19b8:	96 e9       	ldi	r25, 0x96	; 150
    19ba:	bb 27       	eor	r27, r27
    19bc:	93 95       	inc	r25
    19be:	f6 95       	lsr	r31
    19c0:	87 95       	ror	r24
    19c2:	77 95       	ror	r23
    19c4:	67 95       	ror	r22
    19c6:	b7 95       	ror	r27
    19c8:	f1 11       	cpse	r31, r1
    19ca:	f8 cf       	rjmp	.-16     	; 0x19bc <__floatsisf+0x1c>
    19cc:	fa f4       	brpl	.+62     	; 0x1a0c <__floatsisf+0x6c>
    19ce:	bb 0f       	add	r27, r27
    19d0:	11 f4       	brne	.+4      	; 0x19d6 <__floatsisf+0x36>
    19d2:	60 ff       	sbrs	r22, 0
    19d4:	1b c0       	rjmp	.+54     	; 0x1a0c <__floatsisf+0x6c>
    19d6:	6f 5f       	subi	r22, 0xFF	; 255
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	8f 4f       	sbci	r24, 0xFF	; 255
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	16 c0       	rjmp	.+44     	; 0x1a0c <__floatsisf+0x6c>
    19e0:	88 23       	and	r24, r24
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <__floatsisf+0x48>
    19e4:	96 e9       	ldi	r25, 0x96	; 150
    19e6:	11 c0       	rjmp	.+34     	; 0x1a0a <__floatsisf+0x6a>
    19e8:	77 23       	and	r23, r23
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <__floatsisf+0x54>
    19ec:	9e e8       	ldi	r25, 0x8E	; 142
    19ee:	87 2f       	mov	r24, r23
    19f0:	76 2f       	mov	r23, r22
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <__floatsisf+0x5e>
    19f4:	66 23       	and	r22, r22
    19f6:	71 f0       	breq	.+28     	; 0x1a14 <__floatsisf+0x74>
    19f8:	96 e8       	ldi	r25, 0x86	; 134
    19fa:	86 2f       	mov	r24, r22
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	2a f0       	brmi	.+10     	; 0x1a0c <__floatsisf+0x6c>
    1a02:	9a 95       	dec	r25
    1a04:	66 0f       	add	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	da f7       	brpl	.-10     	; 0x1a02 <__floatsisf+0x62>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	96 95       	lsr	r25
    1a10:	87 95       	ror	r24
    1a12:	97 f9       	bld	r25, 7
    1a14:	08 95       	ret

00001a16 <__fp_inf>:
    1a16:	97 f9       	bld	r25, 7
    1a18:	9f 67       	ori	r25, 0x7F	; 127
    1a1a:	80 e8       	ldi	r24, 0x80	; 128
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	08 95       	ret

00001a22 <__fp_nan>:
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
    1a24:	80 ec       	ldi	r24, 0xC0	; 192
    1a26:	08 95       	ret

00001a28 <__fp_pscA>:
    1a28:	00 24       	eor	r0, r0
    1a2a:	0a 94       	dec	r0
    1a2c:	16 16       	cp	r1, r22
    1a2e:	17 06       	cpc	r1, r23
    1a30:	18 06       	cpc	r1, r24
    1a32:	09 06       	cpc	r0, r25
    1a34:	08 95       	ret

00001a36 <__fp_pscB>:
    1a36:	00 24       	eor	r0, r0
    1a38:	0a 94       	dec	r0
    1a3a:	12 16       	cp	r1, r18
    1a3c:	13 06       	cpc	r1, r19
    1a3e:	14 06       	cpc	r1, r20
    1a40:	05 06       	cpc	r0, r21
    1a42:	08 95       	ret

00001a44 <__fp_round>:
    1a44:	09 2e       	mov	r0, r25
    1a46:	03 94       	inc	r0
    1a48:	00 0c       	add	r0, r0
    1a4a:	11 f4       	brne	.+4      	; 0x1a50 <__fp_round+0xc>
    1a4c:	88 23       	and	r24, r24
    1a4e:	52 f0       	brmi	.+20     	; 0x1a64 <__fp_round+0x20>
    1a50:	bb 0f       	add	r27, r27
    1a52:	40 f4       	brcc	.+16     	; 0x1a64 <__fp_round+0x20>
    1a54:	bf 2b       	or	r27, r31
    1a56:	11 f4       	brne	.+4      	; 0x1a5c <__fp_round+0x18>
    1a58:	60 ff       	sbrs	r22, 0
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <__fp_round+0x20>
    1a5c:	6f 5f       	subi	r22, 0xFF	; 255
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	8f 4f       	sbci	r24, 0xFF	; 255
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	08 95       	ret

00001a66 <__fp_split3>:
    1a66:	57 fd       	sbrc	r21, 7
    1a68:	90 58       	subi	r25, 0x80	; 128
    1a6a:	44 0f       	add	r20, r20
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	59 f0       	breq	.+22     	; 0x1a86 <__fp_splitA+0x10>
    1a70:	5f 3f       	cpi	r21, 0xFF	; 255
    1a72:	71 f0       	breq	.+28     	; 0x1a90 <__fp_splitA+0x1a>
    1a74:	47 95       	ror	r20

00001a76 <__fp_splitA>:
    1a76:	88 0f       	add	r24, r24
    1a78:	97 fb       	bst	r25, 7
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <__fp_splitA+0x20>
    1a7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a80:	79 f0       	breq	.+30     	; 0x1aa0 <__fp_splitA+0x2a>
    1a82:	87 95       	ror	r24
    1a84:	08 95       	ret
    1a86:	12 16       	cp	r1, r18
    1a88:	13 06       	cpc	r1, r19
    1a8a:	14 06       	cpc	r1, r20
    1a8c:	55 1f       	adc	r21, r21
    1a8e:	f2 cf       	rjmp	.-28     	; 0x1a74 <__fp_split3+0xe>
    1a90:	46 95       	lsr	r20
    1a92:	f1 df       	rcall	.-30     	; 0x1a76 <__fp_splitA>
    1a94:	08 c0       	rjmp	.+16     	; 0x1aa6 <__fp_splitA+0x30>
    1a96:	16 16       	cp	r1, r22
    1a98:	17 06       	cpc	r1, r23
    1a9a:	18 06       	cpc	r1, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	f1 cf       	rjmp	.-30     	; 0x1a82 <__fp_splitA+0xc>
    1aa0:	86 95       	lsr	r24
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	61 05       	cpc	r22, r1
    1aa6:	08 94       	sec
    1aa8:	08 95       	ret

00001aaa <__fp_zero>:
    1aaa:	e8 94       	clt

00001aac <__fp_szero>:
    1aac:	bb 27       	eor	r27, r27
    1aae:	66 27       	eor	r22, r22
    1ab0:	77 27       	eor	r23, r23
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret

00001ab8 <__mulsf3>:
    1ab8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__mulsf3x>
    1abc:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__fp_round>
    1ac0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__fp_pscA>
    1ac4:	38 f0       	brcs	.+14     	; 0x1ad4 <__mulsf3+0x1c>
    1ac6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_pscB>
    1aca:	20 f0       	brcs	.+8      	; 0x1ad4 <__mulsf3+0x1c>
    1acc:	95 23       	and	r25, r21
    1ace:	11 f0       	breq	.+4      	; 0x1ad4 <__mulsf3+0x1c>
    1ad0:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_inf>
    1ad4:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__fp_nan>
    1ad8:	11 24       	eor	r1, r1
    1ada:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_szero>

00001ade <__mulsf3x>:
    1ade:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fp_split3>
    1ae2:	70 f3       	brcs	.-36     	; 0x1ac0 <__mulsf3+0x8>

00001ae4 <__mulsf3_pse>:
    1ae4:	95 9f       	mul	r25, r21
    1ae6:	c1 f3       	breq	.-16     	; 0x1ad8 <__mulsf3+0x20>
    1ae8:	95 0f       	add	r25, r21
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	55 1f       	adc	r21, r21
    1aee:	62 9f       	mul	r22, r18
    1af0:	f0 01       	movw	r30, r0
    1af2:	72 9f       	mul	r23, r18
    1af4:	bb 27       	eor	r27, r27
    1af6:	f0 0d       	add	r31, r0
    1af8:	b1 1d       	adc	r27, r1
    1afa:	63 9f       	mul	r22, r19
    1afc:	aa 27       	eor	r26, r26
    1afe:	f0 0d       	add	r31, r0
    1b00:	b1 1d       	adc	r27, r1
    1b02:	aa 1f       	adc	r26, r26
    1b04:	64 9f       	mul	r22, r20
    1b06:	66 27       	eor	r22, r22
    1b08:	b0 0d       	add	r27, r0
    1b0a:	a1 1d       	adc	r26, r1
    1b0c:	66 1f       	adc	r22, r22
    1b0e:	82 9f       	mul	r24, r18
    1b10:	22 27       	eor	r18, r18
    1b12:	b0 0d       	add	r27, r0
    1b14:	a1 1d       	adc	r26, r1
    1b16:	62 1f       	adc	r22, r18
    1b18:	73 9f       	mul	r23, r19
    1b1a:	b0 0d       	add	r27, r0
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	62 1f       	adc	r22, r18
    1b20:	83 9f       	mul	r24, r19
    1b22:	a0 0d       	add	r26, r0
    1b24:	61 1d       	adc	r22, r1
    1b26:	22 1f       	adc	r18, r18
    1b28:	74 9f       	mul	r23, r20
    1b2a:	33 27       	eor	r19, r19
    1b2c:	a0 0d       	add	r26, r0
    1b2e:	61 1d       	adc	r22, r1
    1b30:	23 1f       	adc	r18, r19
    1b32:	84 9f       	mul	r24, r20
    1b34:	60 0d       	add	r22, r0
    1b36:	21 1d       	adc	r18, r1
    1b38:	82 2f       	mov	r24, r18
    1b3a:	76 2f       	mov	r23, r22
    1b3c:	6a 2f       	mov	r22, r26
    1b3e:	11 24       	eor	r1, r1
    1b40:	9f 57       	subi	r25, 0x7F	; 127
    1b42:	50 40       	sbci	r21, 0x00	; 0
    1b44:	9a f0       	brmi	.+38     	; 0x1b6c <__mulsf3_pse+0x88>
    1b46:	f1 f0       	breq	.+60     	; 0x1b84 <__mulsf3_pse+0xa0>
    1b48:	88 23       	and	r24, r24
    1b4a:	4a f0       	brmi	.+18     	; 0x1b5e <__mulsf3_pse+0x7a>
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	bb 1f       	adc	r27, r27
    1b52:	66 1f       	adc	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	88 1f       	adc	r24, r24
    1b58:	91 50       	subi	r25, 0x01	; 1
    1b5a:	50 40       	sbci	r21, 0x00	; 0
    1b5c:	a9 f7       	brne	.-22     	; 0x1b48 <__mulsf3_pse+0x64>
    1b5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b60:	51 05       	cpc	r21, r1
    1b62:	80 f0       	brcs	.+32     	; 0x1b84 <__mulsf3_pse+0xa0>
    1b64:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_inf>
    1b68:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_szero>
    1b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6e:	e4 f3       	brlt	.-8      	; 0x1b68 <__mulsf3_pse+0x84>
    1b70:	98 3e       	cpi	r25, 0xE8	; 232
    1b72:	d4 f3       	brlt	.-12     	; 0x1b68 <__mulsf3_pse+0x84>
    1b74:	86 95       	lsr	r24
    1b76:	77 95       	ror	r23
    1b78:	67 95       	ror	r22
    1b7a:	b7 95       	ror	r27
    1b7c:	f7 95       	ror	r31
    1b7e:	e7 95       	ror	r30
    1b80:	9f 5f       	subi	r25, 0xFF	; 255
    1b82:	c1 f7       	brne	.-16     	; 0x1b74 <__mulsf3_pse+0x90>
    1b84:	fe 2b       	or	r31, r30
    1b86:	88 0f       	add	r24, r24
    1b88:	91 1d       	adc	r25, r1
    1b8a:	96 95       	lsr	r25
    1b8c:	87 95       	ror	r24
    1b8e:	97 f9       	bld	r25, 7
    1b90:	08 95       	ret

00001b92 <do_rand>:
    1b92:	8f 92       	push	r8
    1b94:	9f 92       	push	r9
    1b96:	af 92       	push	r10
    1b98:	bf 92       	push	r11
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	68 81       	ld	r22, Y
    1baa:	79 81       	ldd	r23, Y+1	; 0x01
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	61 15       	cp	r22, r1
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	81 05       	cpc	r24, r1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <do_rand+0x30>
    1bba:	64 e2       	ldi	r22, 0x24	; 36
    1bbc:	79 ed       	ldi	r23, 0xD9	; 217
    1bbe:	8b e5       	ldi	r24, 0x5B	; 91
    1bc0:	97 e0       	ldi	r25, 0x07	; 7
    1bc2:	2d e1       	ldi	r18, 0x1D	; 29
    1bc4:	33 ef       	ldi	r19, 0xF3	; 243
    1bc6:	41 e0       	ldi	r20, 0x01	; 1
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__divmodsi4>
    1bce:	49 01       	movw	r8, r18
    1bd0:	5a 01       	movw	r10, r20
    1bd2:	9b 01       	movw	r18, r22
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	a7 ea       	ldi	r26, 0xA7	; 167
    1bd8:	b1 e4       	ldi	r27, 0x41	; 65
    1bda:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__muluhisi3>
    1bde:	6b 01       	movw	r12, r22
    1be0:	7c 01       	movw	r14, r24
    1be2:	ac ee       	ldi	r26, 0xEC	; 236
    1be4:	b4 ef       	ldi	r27, 0xF4	; 244
    1be6:	a5 01       	movw	r20, r10
    1be8:	94 01       	movw	r18, r8
    1bea:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__mulohisi3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8c 0d       	add	r24, r12
    1bf4:	9d 1d       	adc	r25, r13
    1bf6:	ae 1d       	adc	r26, r14
    1bf8:	bf 1d       	adc	r27, r15
    1bfa:	b7 ff       	sbrs	r27, 7
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <do_rand+0x72>
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	a1 09       	sbc	r26, r1
    1c02:	b0 48       	sbci	r27, 0x80	; 128
    1c04:	88 83       	st	Y, r24
    1c06:	99 83       	std	Y+1, r25	; 0x01
    1c08:	aa 83       	std	Y+2, r26	; 0x02
    1c0a:	bb 83       	std	Y+3, r27	; 0x03
    1c0c:	9f 77       	andi	r25, 0x7F	; 127
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	bf 90       	pop	r11
    1c1c:	af 90       	pop	r10
    1c1e:	9f 90       	pop	r9
    1c20:	8f 90       	pop	r8
    1c22:	08 95       	ret

00001c24 <rand_r>:
    1c24:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <do_rand>
    1c28:	08 95       	ret

00001c2a <rand>:
    1c2a:	85 e1       	ldi	r24, 0x15	; 21
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <do_rand>
    1c32:	08 95       	ret

00001c34 <srand>:
    1c34:	a0 e0       	ldi	r26, 0x00	; 0
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	80 93 15 01 	sts	0x0115, r24
    1c3c:	90 93 16 01 	sts	0x0116, r25
    1c40:	a0 93 17 01 	sts	0x0117, r26
    1c44:	b0 93 18 01 	sts	0x0118, r27
    1c48:	08 95       	ret

00001c4a <eeprom_read_byte>:
    1c4a:	f9 99       	sbic	0x1f, 1	; 31
    1c4c:	fe cf       	rjmp	.-4      	; 0x1c4a <eeprom_read_byte>
    1c4e:	92 bd       	out	0x22, r25	; 34
    1c50:	81 bd       	out	0x21, r24	; 33
    1c52:	f8 9a       	sbi	0x1f, 0	; 31
    1c54:	99 27       	eor	r25, r25
    1c56:	80 b5       	in	r24, 0x20	; 32
    1c58:	08 95       	ret

00001c5a <eeprom_write_byte>:
    1c5a:	26 2f       	mov	r18, r22

00001c5c <eeprom_write_r18>:
    1c5c:	f9 99       	sbic	0x1f, 1	; 31
    1c5e:	fe cf       	rjmp	.-4      	; 0x1c5c <eeprom_write_r18>
    1c60:	1f ba       	out	0x1f, r1	; 31
    1c62:	92 bd       	out	0x22, r25	; 34
    1c64:	81 bd       	out	0x21, r24	; 33
    1c66:	20 bd       	out	0x20, r18	; 32
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	fa 9a       	sbi	0x1f, 2	; 31
    1c6e:	f9 9a       	sbi	0x1f, 1	; 31
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	08 95       	ret

00001c76 <__divmodsi4>:
    1c76:	05 2e       	mov	r0, r21
    1c78:	97 fb       	bst	r25, 7
    1c7a:	1e f4       	brtc	.+6      	; 0x1c82 <__divmodsi4+0xc>
    1c7c:	00 94       	com	r0
    1c7e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__negsi2>
    1c82:	57 fd       	sbrc	r21, 7
    1c84:	07 d0       	rcall	.+14     	; 0x1c94 <__divmodsi4_neg2>
    1c86:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__udivmodsi4>
    1c8a:	07 fc       	sbrc	r0, 7
    1c8c:	03 d0       	rcall	.+6      	; 0x1c94 <__divmodsi4_neg2>
    1c8e:	4e f4       	brtc	.+18     	; 0x1ca2 <__divmodsi4_exit>
    1c90:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__negsi2>

00001c94 <__divmodsi4_neg2>:
    1c94:	50 95       	com	r21
    1c96:	40 95       	com	r20
    1c98:	30 95       	com	r19
    1c9a:	21 95       	neg	r18
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	4f 4f       	sbci	r20, 0xFF	; 255
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255

00001ca2 <__divmodsi4_exit>:
    1ca2:	08 95       	ret

00001ca4 <__negsi2>:
    1ca4:	90 95       	com	r25
    1ca6:	80 95       	com	r24
    1ca8:	70 95       	com	r23
    1caa:	61 95       	neg	r22
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	08 95       	ret

00001cb4 <__muluhisi3>:
    1cb4:	0e 94 96 0b 	call	0x172c	; 0x172c <__umulhisi3>
    1cb8:	a5 9f       	mul	r26, r21
    1cba:	90 0d       	add	r25, r0
    1cbc:	b4 9f       	mul	r27, r20
    1cbe:	90 0d       	add	r25, r0
    1cc0:	a4 9f       	mul	r26, r20
    1cc2:	80 0d       	add	r24, r0
    1cc4:	91 1d       	adc	r25, r1
    1cc6:	11 24       	eor	r1, r1
    1cc8:	08 95       	ret

00001cca <__mulshisi3>:
    1cca:	b7 ff       	sbrs	r27, 7
    1ccc:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__muluhisi3>

00001cd0 <__mulohisi3>:
    1cd0:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__muluhisi3>
    1cd4:	82 1b       	sub	r24, r18
    1cd6:	93 0b       	sbc	r25, r19
    1cd8:	08 95       	ret

00001cda <__udivmodsi4>:
    1cda:	a1 e2       	ldi	r26, 0x21	; 33
    1cdc:	1a 2e       	mov	r1, r26
    1cde:	aa 1b       	sub	r26, r26
    1ce0:	bb 1b       	sub	r27, r27
    1ce2:	fd 01       	movw	r30, r26
    1ce4:	0d c0       	rjmp	.+26     	; 0x1d00 <__udivmodsi4_ep>

00001ce6 <__udivmodsi4_loop>:
    1ce6:	aa 1f       	adc	r26, r26
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	ee 1f       	adc	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	a2 17       	cp	r26, r18
    1cf0:	b3 07       	cpc	r27, r19
    1cf2:	e4 07       	cpc	r30, r20
    1cf4:	f5 07       	cpc	r31, r21
    1cf6:	20 f0       	brcs	.+8      	; 0x1d00 <__udivmodsi4_ep>
    1cf8:	a2 1b       	sub	r26, r18
    1cfa:	b3 0b       	sbc	r27, r19
    1cfc:	e4 0b       	sbc	r30, r20
    1cfe:	f5 0b       	sbc	r31, r21

00001d00 <__udivmodsi4_ep>:
    1d00:	66 1f       	adc	r22, r22
    1d02:	77 1f       	adc	r23, r23
    1d04:	88 1f       	adc	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	1a 94       	dec	r1
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <__udivmodsi4_loop>
    1d0c:	60 95       	com	r22
    1d0e:	70 95       	com	r23
    1d10:	80 95       	com	r24
    1d12:	90 95       	com	r25
    1d14:	9b 01       	movw	r18, r22
    1d16:	ac 01       	movw	r20, r24
    1d18:	bd 01       	movw	r22, r26
    1d1a:	cf 01       	movw	r24, r30
    1d1c:	08 95       	ret

00001d1e <_exit>:
    1d1e:	f8 94       	cli

00001d20 <__stop_program>:
    1d20:	ff cf       	rjmp	.-2      	; 0x1d20 <__stop_program>
