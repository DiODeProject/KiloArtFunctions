
build/bigBang.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	81 03       	fmuls	r16, r17
      6a:	fd 03       	fmulsu	r23, r21
      6c:	55 03       	mulsu	r21, r21
      6e:	4c 03       	fmul	r20, r20
      70:	52 03       	mulsu	r21, r18
      72:	df 03       	fmulsu	r21, r23
      74:	d4 03       	fmuls	r21, r20
      76:	5f 0a       	sbc	r5, r31
      78:	3c 09       	sbc	r19, r12
      7a:	3c 09       	sbc	r19, r12
      7c:	5c 0a       	sbc	r5, r28
      7e:	68 0a       	sbc	r6, r24
      80:	58 0a       	sbc	r5, r24
      82:	6f 0a       	sbc	r6, r31
      84:	6b 0a       	sbc	r6, r27
      86:	73 0a       	sbc	r7, r19
      88:	2b 0a       	sbc	r2, r27
      8a:	fd 09       	sbc	r31, r13

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e3       	ldi	r30, 0x3C	; 60
      b8:	f3 e2       	ldi	r31, 0x23	; 35
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 32       	cpi	r26, 0x2E	; 46
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e2       	ldi	r26, 0x2E	; 46
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 3b       	cpi	r26, 0xB2	; 178
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 a5 0b 	call	0x174a	; 0x174a <main>
      da:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      f4:	80 e4       	ldi	r24, 0x40	; 64
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret

000000fa <setup>:
        }
    }
}

void setup()
{
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
    // Initialize an empty message.
    last_motion_update = kilo_ticks;
      fe:	80 91 71 01 	lds	r24, 0x0171
     102:	90 91 72 01 	lds	r25, 0x0172
     106:	a0 91 73 01 	lds	r26, 0x0173
     10a:	b0 91 74 01 	lds	r27, 0x0174
     10e:	80 93 2e 01 	sts	0x012E, r24
     112:	90 93 2f 01 	sts	0x012F, r25
     116:	a0 93 30 01 	sts	0x0130, r26
     11a:	b0 93 31 01 	sts	0x0131, r27
    mini_distance = 500;
     11e:	84 ef       	ldi	r24, 0xF4	; 244
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	90 93 4d 01 	sts	0x014D, r25
     126:	80 93 4c 01 	sts	0x014C, r24
    previous_mini_distance = 0;
     12a:	10 92 3d 01 	sts	0x013D, r1
     12e:	10 92 3c 01 	sts	0x013C, r1
    message.type = NORMAL;
     132:	c0 e4       	ldi	r28, 0x40	; 64
     134:	d1 e0       	ldi	r29, 0x01	; 1
     136:	19 86       	std	Y+9, r1	; 0x09
    message.crc = message_crc(&message);
     138:	ce 01       	movw	r24, r28
     13a:	0e 94 06 0b 	call	0x160c	; 0x160c <message_crc>
     13e:	9b 87       	std	Y+11, r25	; 0x0b
     140:	8a 87       	std	Y+10, r24	; 0x0a
    set_color(RGB(0,0,1));
     142:	80 e1       	ldi	r24, 0x10	; 16
}
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
    last_motion_update = kilo_ticks;
    mini_distance = 500;
    previous_mini_distance = 0;
    message.type = NORMAL;
    message.crc = message_crc(&message);
    set_color(RGB(0,0,1));
     148:	0c 94 b6 08 	jmp	0x116c	; 0x116c <set_color>

0000014c <message_rx>:
        mini_distance = 500;
    }*/
}

void message_rx(message_t *m, distance_measurement_t *d)
{
     14c:	cb 01       	movw	r24, r22
    new_message = 1;
     14e:	21 e0       	ldi	r18, 0x01	; 1
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	30 93 33 01 	sts	0x0133, r19
     156:	20 93 32 01 	sts	0x0132, r18
    distance = estimate_distance(d);
     15a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <estimate_distance>
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	90 93 3f 01 	sts	0x013F, r25
     164:	80 93 3e 01 	sts	0x013E, r24
     168:	08 95       	ret

0000016a <loop>:
    // Compute the average.
    current_light = max_light;
}

void loop()
{
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
    if (kilo_ticks > last_motion_update + 32)
     17a:	40 91 71 01 	lds	r20, 0x0171
     17e:	50 91 72 01 	lds	r21, 0x0172
     182:	60 91 73 01 	lds	r22, 0x0173
     186:	70 91 74 01 	lds	r23, 0x0174
     18a:	80 91 2e 01 	lds	r24, 0x012E
     18e:	90 91 2f 01 	lds	r25, 0x012F
     192:	a0 91 30 01 	lds	r26, 0x0130
     196:	b0 91 31 01 	lds	r27, 0x0131
     19a:	80 96       	adiw	r24, 0x20	; 32
     19c:	a1 1d       	adc	r26, r1
     19e:	b1 1d       	adc	r27, r1
     1a0:	84 17       	cp	r24, r20
     1a2:	95 07       	cpc	r25, r21
     1a4:	a6 07       	cpc	r26, r22
     1a6:	b7 07       	cpc	r27, r23
     1a8:	48 f0       	brcs	.+18     	; 0x1bc <loop+0x52>
            set_motion(STOP);
        }
        previous_mini_distance = mini_distance;
        mini_distance = 500;
    }*/
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	0f 91       	pop	r16
     1b2:	ff 90       	pop	r15
     1b4:	ef 90       	pop	r14
     1b6:	df 90       	pop	r13
     1b8:	cf 90       	pop	r12
     1ba:	08 95       	ret

void loop()
{
    if (kilo_ticks > last_motion_update + 32)
    {
        last_motion_update = kilo_ticks;
     1bc:	80 91 71 01 	lds	r24, 0x0171
     1c0:	90 91 72 01 	lds	r25, 0x0172
     1c4:	a0 91 73 01 	lds	r26, 0x0173
     1c8:	b0 91 74 01 	lds	r27, 0x0174
     1cc:	80 93 2e 01 	sts	0x012E, r24
     1d0:	90 93 2f 01 	sts	0x012F, r25
     1d4:	a0 93 30 01 	sts	0x0130, r26
     1d8:	b0 93 31 01 	sts	0x0131, r27
     1dc:	0c e2       	ldi	r16, 0x2C	; 44
     1de:	11 e0       	ldi	r17, 0x01	; 1
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the maximum of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int max_light = 0;
     1e0:	c1 2c       	mov	r12, r1
     1e2:	d1 2c       	mov	r13, r1


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
        printf("light intensity: %d\n", sample);
     1e4:	89 e1       	ldi	r24, 0x19	; 25
     1e6:	e8 2e       	mov	r14, r24
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	f8 2e       	mov	r15, r24
    int max_light = 0;


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     1ec:	0e 94 aa 04 	call	0x954	; 0x954 <get_ambientlight>
     1f0:	ec 01       	movw	r28, r24
        printf("light intensity: %d\n", sample);
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	ff 92       	push	r15
     1f8:	ef 92       	push	r14
     1fa:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	cc 16       	cp	r12, r28
     208:	dd 06       	cpc	r13, r29
     20a:	0c f4       	brge	.+2      	; 0x20e <loop+0xa4>
     20c:	6e 01       	movw	r12, r28
     20e:	01 50       	subi	r16, 0x01	; 1
     210:	11 09       	sbc	r17, r1
    
    int number_of_samples = 0;
    int max_light = 0;


    while (number_of_samples < 300)
     212:	61 f7       	brne	.-40     	; 0x1ec <loop+0x82>
        }
        number_of_samples = number_of_samples + 1;
    }

    // Compute the average.
    current_light = max_light;
     214:	d0 92 37 01 	sts	0x0137, r13
     218:	c0 92 36 01 	sts	0x0136, r12
{
    if (kilo_ticks > last_motion_update + 32)
    {
        last_motion_update = kilo_ticks;
        sample_light();
        if (current_light > LIGHT_THRES){
     21c:	89 ec       	ldi	r24, 0xC9	; 201
     21e:	c8 16       	cp	r12, r24
     220:	d1 04       	cpc	r13, r1
     222:	ec f4       	brge	.+58     	; 0x25e <loop+0xf4>
            set_color(RGB(1,0,0));
            set_motion(FORWARD);
        }
        else{
            set_color(RGB(0,0,1));
     224:	80 e1       	ldi	r24, 0x10	; 16
     226:	0e 94 b6 08 	call	0x116c	; 0x116c <set_color>
            int random_number = rand_hard();
     22a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <rand_hard>
            
            // Compute the remainder of random_number when divided by 4.
            // This gives a new random number in the set {0, 1, 2, 3}.
            int random_direction = (random_number % 4);
     22e:	83 70       	andi	r24, 0x03	; 3
            
            // There is a 50% chance of random_direction being 0 OR 1, in which
            // case set the LED green and move forward.
            if ((random_direction == 0) || (random_direction == 1))
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	a8 f1       	brcs	.+106    	; 0x29e <loop+0x134>
                //set_color(RGB(0, 1, 0));
                set_motion(FORWARD);
            }
            // There is a 25% chance of random_direction being 2, in which case
            // set the LED red and move left.
            else if (random_direction == 2)
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	d1 f1       	breq	.+116    	; 0x2ac <loop+0x142>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     238:	80 91 34 01 	lds	r24, 0x0134
     23c:	90 91 35 01 	lds	r25, 0x0135
     240:	03 97       	sbiw	r24, 0x03	; 3
     242:	09 f4       	brne	.+2      	; 0x246 <loop+0xdc>
     244:	b2 cf       	rjmp	.-156    	; 0x1aa <loop+0x40>
    {
        current_motion = new_motion;
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	90 93 35 01 	sts	0x0135, r25
     24e:	80 93 34 01 	sts	0x0134, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     252:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(0, kilo_turn_right);
     256:	60 91 97 01 	lds	r22, 0x0197
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	16 c0       	rjmp	.+44     	; 0x28a <loop+0x120>
    if (kilo_ticks > last_motion_update + 32)
    {
        last_motion_update = kilo_ticks;
        sample_light();
        if (current_light > LIGHT_THRES){
            set_color(RGB(1,0,0));
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 b6 08 	call	0x116c	; 0x116c <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     264:	80 91 34 01 	lds	r24, 0x0134
     268:	90 91 35 01 	lds	r25, 0x0135
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	09 f4       	brne	.+2      	; 0x272 <loop+0x108>
     270:	9c cf       	rjmp	.-200    	; 0x1aa <loop+0x40>
    {
        current_motion = new_motion;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 35 01 	sts	0x0135, r25
     27a:	80 93 34 01 	sts	0x0134, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     27e:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     282:	60 91 aa 01 	lds	r22, 0x01AA
     286:	80 91 a9 01 	lds	r24, 0x01A9
            set_motion(STOP);
        }
        previous_mini_distance = mini_distance;
        mini_distance = 500;
    }*/
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
            set_motors(0, kilo_turn_right);
     29a:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     29e:	80 91 34 01 	lds	r24, 0x0134
     2a2:	90 91 35 01 	lds	r25, 0x0135
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	21 f7       	brne	.-56     	; 0x272 <loop+0x108>
     2aa:	7f cf       	rjmp	.-258    	; 0x1aa <loop+0x40>
     2ac:	80 91 34 01 	lds	r24, 0x0134
     2b0:	90 91 35 01 	lds	r25, 0x0135
     2b4:	02 97       	sbiw	r24, 0x02	; 2
     2b6:	09 f4       	brne	.+2      	; 0x2ba <loop+0x150>
     2b8:	78 cf       	rjmp	.-272    	; 0x1aa <loop+0x40>
    {
        current_motion = new_motion;
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 35 01 	sts	0x0135, r25
     2c2:	80 93 34 01 	sts	0x0134, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     2c6:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	80 91 ab 01 	lds	r24, 0x01AB
     2d0:	dc cf       	rjmp	.-72     	; 0x28a <loop+0x120>

000002d2 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     2d2:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     2d4:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     2d6:	8c e0       	ldi	r24, 0x0C	; 12
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 c5 00 	sts	0x00C5, r25
     2de:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     2e2:	e0 ec       	ldi	r30, 0xC0	; 192
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	8d 7f       	andi	r24, 0xFD	; 253
     2ea:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     2ec:	e2 ec       	ldi	r30, 0xC2	; 194
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	86 60       	ori	r24, 0x06	; 6
     2f4:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     2f6:	e1 ec       	ldi	r30, 0xC1	; 193
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	88 60       	ori	r24, 0x08	; 8
     2fe:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	90 93 af 01 	sts	0x01AF, r25
     308:	80 93 ae 01 	sts	0x01AE, r24
    sei();
     30c:	78 94       	sei
     30e:	08 95       	ret

00000310 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     310:	20 91 34 01 	lds	r18, 0x0134
     314:	30 91 35 01 	lds	r19, 0x0135
     318:	28 17       	cp	r18, r24
     31a:	39 07       	cpc	r19, r25
     31c:	71 f0       	breq	.+28     	; 0x33a <set_motion+0x2a>
    {
        current_motion = new_motion;
     31e:	90 93 35 01 	sts	0x0135, r25
     322:	80 93 34 01 	sts	0x0134, r24
        
        if (current_motion == STOP)
     326:	00 97       	sbiw	r24, 0x00	; 0
     328:	81 f0       	breq	.+32     	; 0x34a <set_motion+0x3a>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	91 05       	cpc	r25, r1
     32e:	89 f0       	breq	.+34     	; 0x352 <set_motion+0x42>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	91 05       	cpc	r25, r1
     334:	b1 f0       	breq	.+44     	; 0x362 <set_motion+0x52>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     336:	03 97       	sbiw	r24, 0x03	; 3
     338:	09 f0       	breq	.+2      	; 0x33c <set_motion+0x2c>
     33a:	08 95       	ret
        {
            spinup_motors();
     33c:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(0, kilo_turn_right);
     340:	60 91 97 01 	lds	r22, 0x0197
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     352:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     356:	60 91 aa 01 	lds	r22, 0x01AA
     35a:	80 91 a9 01 	lds	r24, 0x01A9
     35e:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     362:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	80 91 ab 01 	lds	r24, 0x01AB
     36c:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>

00000370 <choose_action>:
    message.crc = message_crc(&message);
    set_color(RGB(0,0,1));
}

void choose_action(int d, int pre_d){
    if (d >= pre_d){
     370:	86 17       	cp	r24, r22
     372:	97 07       	cpc	r25, r23
     374:	6c f5       	brge	.+90     	; 0x3d0 <choose_action+0x60>
        set_color(RGB(1, 0, 0));
        set_motion(FORWARD);
    }
    else{
        set_color(RGB(0, 0, 1));
     376:	80 e1       	ldi	r24, 0x10	; 16
     378:	0e 94 b6 08 	call	0x116c	; 0x116c <set_color>
        int random_number = rand_hard();
     37c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <rand_hard>
        int random_direction = (random_number % 2);
        if(random_direction == 0){
     380:	80 ff       	sbrs	r24, 0
     382:	13 c0       	rjmp	.+38     	; 0x3aa <choose_action+0x3a>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     384:	80 91 34 01 	lds	r24, 0x0134
     388:	90 91 35 01 	lds	r25, 0x0135
     38c:	03 97       	sbiw	r24, 0x03	; 3
     38e:	b9 f1       	breq	.+110    	; 0x3fe <choose_action+0x8e>
    {
        current_motion = new_motion;
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	90 93 35 01 	sts	0x0135, r25
     398:	80 93 34 01 	sts	0x0134, r24
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     39c:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(0, kilo_turn_right);
     3a0:	60 91 97 01 	lds	r22, 0x0197
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     3aa:	80 91 34 01 	lds	r24, 0x0134
     3ae:	90 91 35 01 	lds	r25, 0x0135
     3b2:	02 97       	sbiw	r24, 0x02	; 2
     3b4:	21 f1       	breq	.+72     	; 0x3fe <choose_action+0x8e>
    {
        current_motion = new_motion;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	90 93 35 01 	sts	0x0135, r25
     3be:	80 93 34 01 	sts	0x0134, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     3c2:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	80 91 ab 01 	lds	r24, 0x01AB
     3cc:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>
    set_color(RGB(0,0,1));
}

void choose_action(int d, int pre_d){
    if (d >= pre_d){
        set_color(RGB(1, 0, 0));
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 b6 08 	call	0x116c	; 0x116c <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     3d6:	80 91 34 01 	lds	r24, 0x0134
     3da:	90 91 35 01 	lds	r25, 0x0135
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	71 f0       	breq	.+28     	; 0x3fe <choose_action+0x8e>
    {
        current_motion = new_motion;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 35 01 	sts	0x0135, r25
     3ea:	80 93 34 01 	sts	0x0134, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     3ee:	0e 94 9a 04 	call	0x934	; 0x934 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     3f2:	60 91 aa 01 	lds	r22, 0x01AA
     3f6:	80 91 a9 01 	lds	r24, 0x01A9
     3fa:	0c 94 95 04 	jmp	0x92a	; 0x92a <set_motors>
     3fe:	08 95       	ret

00000400 <sample_light>:
    }
}

// Function to sample light.
void sample_light()
{
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	0c e2       	ldi	r16, 0x2C	; 44
     412:	11 e0       	ldi	r17, 0x01	; 1
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the maximum of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int max_light = 0;
     414:	c1 2c       	mov	r12, r1
     416:	d1 2c       	mov	r13, r1


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
        printf("light intensity: %d\n", sample);
     418:	89 e1       	ldi	r24, 0x19	; 25
     41a:	e8 2e       	mov	r14, r24
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	f8 2e       	mov	r15, r24
    int max_light = 0;


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     420:	0e 94 aa 04 	call	0x954	; 0x954 <get_ambientlight>
     424:	ec 01       	movw	r28, r24
        printf("light intensity: %d\n", sample);
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	ff 92       	push	r15
     42c:	ef 92       	push	r14
     42e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <printf>
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	cc 16       	cp	r12, r28
     43c:	dd 06       	cpc	r13, r29
     43e:	0c f4       	brge	.+2      	; 0x442 <sample_light+0x42>
     440:	6e 01       	movw	r12, r28
     442:	01 50       	subi	r16, 0x01	; 1
     444:	11 09       	sbc	r17, r1
    
    int number_of_samples = 0;
    int max_light = 0;


    while (number_of_samples < 300)
     446:	61 f7       	brne	.-40     	; 0x420 <sample_light+0x20>
        }
        number_of_samples = number_of_samples + 1;
    }

    // Compute the average.
    current_light = max_light;
     448:	d0 92 37 01 	sts	0x0137, r13
     44c:	c0 92 36 01 	sts	0x0136, r12
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	08 95       	ret

00000462 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     462:	08 95       	ret

00000464 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     46a:	08 95       	ret

0000046c <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     46c:	df 92       	push	r13
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
    cli();
     47a:	f8 94       	cli

    ports_off();
     47c:	14 b8       	out	0x04, r1	; 4
     47e:	17 b8       	out	0x07, r1	; 7
     480:	1a b8       	out	0x0a, r1	; 10
     482:	15 b8       	out	0x05, r1	; 5
     484:	18 b8       	out	0x08, r1	; 8
     486:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     488:	52 9a       	sbi	0x0a, 2	; 10
     48a:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     48c:	14 bc       	out	0x24, r1	; 36
     48e:	85 e0       	ldi	r24, 0x05	; 5
     490:	85 bd       	out	0x25, r24	; 37
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	87 bd       	out	0x27, r24	; 39
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     49c:	10 92 80 00 	sts	0x0080, r1
     4a0:	10 92 81 00 	sts	0x0081, r1
     4a4:	2f e8       	ldi	r18, 0x8F	; 143
     4a6:	3b e0       	ldi	r19, 0x0B	; 11
     4a8:	30 93 89 00 	sts	0x0089, r19
     4ac:	20 93 88 00 	sts	0x0088, r18
     4b0:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     4b4:	53 98       	cbi	0x0a, 3	; 10
     4b6:	23 98       	cbi	0x04, 3	; 4
     4b8:	91 ea       	ldi	r25, 0xA1	; 161
     4ba:	90 93 b0 00 	sts	0x00B0, r25
     4be:	80 93 b1 00 	sts	0x00B1, r24
     4c2:	10 92 b4 00 	sts	0x00B4, r1
     4c6:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     4ca:	8b e0       	ldi	r24, 0x0B	; 11
     4cc:	80 bf       	out	0x30, r24	; 48
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     4d4:	86 e0       	ldi	r24, 0x06	; 6
     4d6:	80 93 7c 00 	sts	0x007C, r24
     4da:	83 e8       	ldi	r24, 0x83	; 131
     4dc:	80 93 7a 00 	sts	0x007A, r24
     4e0:	80 91 7a 00 	lds	r24, 0x007A
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	80 93 7a 00 	sts	0x007A, r24
     4ea:	80 91 7a 00 	lds	r24, 0x007A
     4ee:	86 fd       	sbrc	r24, 6
     4f0:	fc cf       	rjmp	.-8      	; 0x4ea <kilo_init+0x7e>
    adc_trigger_high_gain();
     4f2:	10 92 7c 00 	sts	0x007C, r1
     4f6:	83 ea       	ldi	r24, 0xA3	; 163
     4f8:	80 93 7a 00 	sts	0x007A, r24
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
    if (osccal != 0xFF)
     50a:	8f 3f       	cpi	r24, 0xFF	; 255
     50c:	11 f0       	breq	.+4      	; 0x512 <kilo_init+0xa6>
        OSCCAL = osccal;
     50e:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     512:	10 92 75 01 	sts	0x0175, r1
    rx_leadingbit = 1;
     516:	c1 e0       	ldi	r28, 0x01	; 1
     518:	c0 93 4e 01 	sts	0x014E, r28
    rx_leadingbyte = 1;
     51c:	c0 93 92 01 	sts	0x0192, r28
    rx_byteindex = 0;
     520:	10 92 6c 01 	sts	0x016C, r1
    rx_bytevalue = 0;
     524:	10 92 a6 01 	sts	0x01A6, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     528:	80 e9       	ldi	r24, 0x90	; 144
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     530:	80 93 6b 01 	sts	0x016B, r24
    if (tx_mask & ~TX_MASK_MAX)
     534:	80 91 6b 01 	lds	r24, 0x016B
     538:	88 73       	andi	r24, 0x38	; 56
     53a:	11 f0       	breq	.+4      	; 0x540 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     53c:	c0 93 6b 01 	sts	0x016B, r28
    tx_clock = 0;
     540:	10 92 96 01 	sts	0x0196, r1
     544:	10 92 95 01 	sts	0x0195, r1
    tx_increment = 255;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	90 93 94 01 	sts	0x0194, r25
     550:	80 93 93 01 	sts	0x0193, r24
    kilo_ticks = 0;
     554:	10 92 71 01 	sts	0x0171, r1
     558:	10 92 72 01 	sts	0x0172, r1
     55c:	10 92 73 01 	sts	0x0173, r1
     560:	10 92 74 01 	sts	0x0174, r1
    kilo_state = IDLE;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	80 93 3b 01 	sts	0x013B, r24
    kilo_tx_period = 3906;
     56a:	82 e4       	ldi	r24, 0x42	; 66
     56c:	9f e0       	ldi	r25, 0x0F	; 15
     56e:	90 93 a5 01 	sts	0x01A5, r25
     572:	80 93 a4 01 	sts	0x01A4, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     576:	80 eb       	ldi	r24, 0xB0	; 176
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     57e:	c8 2f       	mov	r28, r24
     580:	81 eb       	ldi	r24, 0xB1	; 177
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     588:	2c 2f       	mov	r18, r28
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	38 2b       	or	r19, r24
     58e:	30 93 a8 01 	sts	0x01A8, r19
     592:	20 93 a7 01 	sts	0x01A7, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     596:	85 e0       	ldi	r24, 0x05	; 5
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     59e:	80 93 ab 01 	sts	0x01AB, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     5a2:	89 e0       	ldi	r24, 0x09	; 9
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     5aa:	80 93 97 01 	sts	0x0197, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     5ae:	8c e0       	ldi	r24, 0x0C	; 12
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     5b6:	80 93 a9 01 	sts	0x01A9, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     5ba:	84 e1       	ldi	r24, 0x14	; 20
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     5c2:	80 93 aa 01 	sts	0x01AA, r24
     5c6:	56 e7       	ldi	r21, 0x76	; 118
     5c8:	e5 2e       	mov	r14, r21
     5ca:	51 e0       	ldi	r21, 0x01	; 1
     5cc:	f5 2e       	mov	r15, r21
     5ce:	0f e4       	ldi	r16, 0x4F	; 79
     5d0:	11 e0       	ldi	r17, 0x01	; 1
     5d2:	c0 e2       	ldi	r28, 0x20	; 32
     5d4:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     5d6:	ce 01       	movw	r24, r28
     5d8:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     5dc:	d8 2e       	mov	r13, r24
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     5e6:	2d 2d       	mov	r18, r13
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	32 2f       	mov	r19, r18
     5ec:	22 27       	eor	r18, r18
     5ee:	28 2b       	or	r18, r24
     5f0:	f7 01       	movw	r30, r14
     5f2:	21 93       	st	Z+, r18
     5f4:	31 93       	st	Z+, r19
     5f6:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     5f8:	ce 01       	movw	r24, r28
     5fa:	c0 96       	adiw	r24, 0x30	; 48
     5fc:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     600:	d8 2e       	mov	r13, r24
     602:	ce 01       	movw	r24, r28
     604:	c1 96       	adiw	r24, 0x31	; 49
     606:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <eeprom_read_byte>
     60a:	2d 2d       	mov	r18, r13
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	32 2f       	mov	r19, r18
     610:	22 27       	eor	r18, r18
     612:	28 2b       	or	r18, r24
     614:	f8 01       	movw	r30, r16
     616:	21 93       	st	Z+, r18
     618:	31 93       	st	Z+, r19
     61a:	8f 01       	movw	r16, r30
     61c:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     61e:	cc 33       	cpi	r28, 0x3C	; 60
     620:	d1 05       	cpc	r29, r1
     622:	c9 f6       	brne	.-78     	; 0x5d6 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     624:	78 94       	sei
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	08 95       	ret

00000636 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	8f 93       	push	r24
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	a8 95       	wdr
     648:	80 91 60 00 	lds	r24, 0x0060
     64c:	88 61       	ori	r24, 0x18	; 24
     64e:	80 93 60 00 	sts	0x0060, r24
     652:	10 92 60 00 	sts	0x0060, r1
     656:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     658:	8f 91       	pop	r24
     65a:	0f 90       	pop	r0
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	0f 90       	pop	r0
     660:	1f 90       	pop	r1
     662:	18 95       	reti

00000664 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     664:	3c 01       	movw	r6, r24
     666:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     668:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     66a:	99 24       	eor	r9, r9
     66c:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     672:	96 e0       	ldi	r25, 0x06	; 6
     674:	a9 2e       	mov	r10, r25
     676:	23 e8       	ldi	r18, 0x83	; 131
     678:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     67a:	38 e1       	ldi	r19, 0x18	; 24
     67c:	d3 2e       	mov	r13, r19
     67e:	49 e2       	ldi	r20, 0x29	; 41
     680:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     682:	90 91 3b 01 	lds	r25, 0x013B
     686:	e9 2f       	mov	r30, r25
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	e7 30       	cpi	r30, 0x07	; 7
     68c:	f1 05       	cpc	r31, r1
     68e:	c8 f7       	brcc	.-14     	; 0x682 <kilo_start+0x1e>
     690:	ec 5c       	subi	r30, 0xCC	; 204
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     698:	11 23       	and	r17, r17
     69a:	09 f4       	brne	.+2      	; 0x69e <kilo_start+0x3a>
     69c:	fc c0       	rjmp	.+504    	; 0x896 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     69e:	c0 92 3b 01 	sts	0x013B, r12
     6a2:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     6a4:	fe 01       	movw	r30, r28
     6a6:	09 95       	icall
                break;
     6a8:	ec cf       	rjmp	.-40     	; 0x682 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     6aa:	80 91 75 01 	lds	r24, 0x0175
     6ae:	81 11       	cpse	r24, r1
     6b0:	eb c0       	rjmp	.+470    	; 0x888 <kilo_start+0x224>
        cli();                                    // disable interrupts
     6b2:	f8 94       	cli
        adc_setup_conversion(6);
     6b4:	a0 92 7c 00 	sts	0x007C, r10
     6b8:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     6bc:	80 91 7a 00 	lds	r24, 0x007A
     6c0:	80 64       	ori	r24, 0x40	; 64
     6c2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6c6:	90 91 7a 00 	lds	r25, 0x007A
     6ca:	96 fd       	sbrc	r25, 6
     6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     6ce:	80 91 78 00 	lds	r24, 0x0078
     6d2:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     6d6:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     6d8:	8b 3a       	cpi	r24, 0xAB	; 171
     6da:	e2 e0       	ldi	r30, 0x02	; 2
     6dc:	9e 07       	cpc	r25, r30
     6de:	0c f0       	brlt	.+2      	; 0x6e2 <kilo_start+0x7e>
     6e0:	ed c0       	rjmp	.+474    	; 0x8bc <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     6e2:	89 38       	cpi	r24, 0x89	; 137
     6e4:	f2 e0       	ldi	r31, 0x02	; 2
     6e6:	9f 07       	cpc	r25, r31
     6e8:	0c f0       	brlt	.+2      	; 0x6ec <kilo_start+0x88>
     6ea:	ef c0       	rjmp	.+478    	; 0x8ca <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     6ec:	87 36       	cpi	r24, 0x67	; 103
     6ee:	92 40       	sbci	r25, 0x02	; 2
     6f0:	0c f4       	brge	.+2      	; 0x6f4 <kilo_start+0x90>
     6f2:	ca c0       	rjmp	.+404    	; 0x888 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6f4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6f6:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6f8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6fa:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6fc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6fe:	3c 98       	cbi	0x07, 4	; 7
     700:	c0 cf       	rjmp	.-128    	; 0x682 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     702:	f8 94       	cli
                acomp_off();
     704:	80 b7       	in	r24, 0x30	; 48
     706:	87 7f       	andi	r24, 0xF7	; 247
     708:	80 bf       	out	0x30, r24	; 48
                adc_off();
     70a:	80 91 7a 00 	lds	r24, 0x007A
     70e:	8f 77       	andi	r24, 0x7F	; 127
     710:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     714:	14 b8       	out	0x04, r1	; 4
     716:	17 b8       	out	0x07, r1	; 7
     718:	1a b8       	out	0x0a, r1	; 10
     71a:	15 b8       	out	0x05, r1	; 5
     71c:	18 b8       	out	0x08, r1	; 8
     71e:	1b b8       	out	0x0b, r1	; 11
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	a8 95       	wdr
     726:	d0 92 60 00 	sts	0x0060, r13
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     730:	80 91 60 00 	lds	r24, 0x0060
     734:	80 64       	ori	r24, 0x40	; 64
     736:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     73a:	93 b7       	in	r25, 0x33	; 51
     73c:	91 7f       	andi	r25, 0xF1	; 241
     73e:	94 60       	ori	r25, 0x04	; 4
     740:	93 bf       	out	0x33, r25	; 51
                cli();
     742:	f8 94       	cli
                sleep_enable();
     744:	83 b7       	in	r24, 0x33	; 51
     746:	81 60       	ori	r24, 0x01	; 1
     748:	83 bf       	out	0x33, r24	; 51
                sei();
     74a:	78 94       	sei
                sleep_cpu();
     74c:	88 95       	sleep
                sleep_disable();
     74e:	83 b7       	in	r24, 0x33	; 51
     750:	8e 7f       	andi	r24, 0xFE	; 254
     752:	83 bf       	out	0x33, r24	; 51
                sei();
     754:	78 94       	sei
                rx_busy = 0;
     756:	10 92 75 01 	sts	0x0175, r1
                ports_on();
     75a:	52 9a       	sbi	0x0a, 2	; 10
     75c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     75e:	80 91 7a 00 	lds	r24, 0x007A
     762:	80 68       	ori	r24, 0x80	; 128
     764:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     768:	87 e5       	ldi	r24, 0x57	; 87
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <kilo_start+0x108>
     770:	00 c0       	rjmp	.+0      	; 0x772 <kilo_start+0x10e>
     772:	00 00       	nop
                _delay_us(300);
                acomp_on();
     774:	80 b7       	in	r24, 0x30	; 48
     776:	88 61       	ori	r24, 0x18	; 24
     778:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     77a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     77c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     77e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     780:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     782:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     784:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     786:	ef e1       	ldi	r30, 0x1F	; 31
     788:	fe e4       	ldi	r31, 0x4E	; 78
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <kilo_start+0x126>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <kilo_start+0x12c>
     790:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     792:	80 91 75 01 	lds	r24, 0x0175
     796:	81 11       	cpse	r24, r1
     798:	81 c0       	rjmp	.+258    	; 0x89c <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     79a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     79c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     79e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7a0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7a4:	3c 98       	cbi	0x07, 4	; 7
     7a6:	6d cf       	rjmp	.-294    	; 0x682 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     7a8:	80 91 39 01 	lds	r24, 0x0139
     7ac:	81 11       	cpse	r24, r1
     7ae:	41 c0       	rjmp	.+130    	; 0x832 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7b0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7b4:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     7b8:	10 92 3a 01 	sts	0x013A, r1
     7bc:	62 cf       	rjmp	.-316    	; 0x682 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     7be:	48 99       	sbic	0x09, 0	; 9
     7c0:	ec cf       	rjmp	.-40     	; 0x79a <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7c2:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7c4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7c6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7c8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7ca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7cc:	3c 98       	cbi	0x07, 4	; 7
     7ce:	8f ec       	ldi	r24, 0xCF	; 207
     7d0:	97 e0       	ldi	r25, 0x07	; 7
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <kilo_start+0x16e>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <kilo_start+0x174>
     7d8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7da:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7dc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7de:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7e0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7e2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7e4:	3c 98       	cbi	0x07, 4	; 7
     7e6:	9f ef       	ldi	r25, 0xFF	; 255
     7e8:	e1 ee       	ldi	r30, 0xE1	; 225
     7ea:	f4 e0       	ldi	r31, 0x04	; 4
     7ec:	91 50       	subi	r25, 0x01	; 1
     7ee:	e0 40       	sbci	r30, 0x00	; 0
     7f0:	f0 40       	sbci	r31, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <kilo_start+0x188>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <kilo_start+0x192>
     7f6:	00 00       	nop
     7f8:	44 cf       	rjmp	.-376    	; 0x682 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7fa:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7fc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7fe:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     800:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     802:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     804:	3c 98       	cbi	0x07, 4	; 7
     806:	ef ec       	ldi	r30, 0xCF	; 207
     808:	f7 e0       	ldi	r31, 0x07	; 7
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <kilo_start+0x1a6>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <kilo_start+0x1ac>
     810:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     812:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     814:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     816:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     818:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     81a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     81c:	3c 98       	cbi	0x07, 4	; 7
     81e:	ff ef       	ldi	r31, 0xFF	; 255
     820:	21 ee       	ldi	r18, 0xE1	; 225
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	f1 50       	subi	r31, 0x01	; 1
     826:	20 40       	sbci	r18, 0x00	; 0
     828:	80 40       	sbci	r24, 0x00	; 0
     82a:	e1 f7       	brne	.-8      	; 0x824 <kilo_start+0x1c0>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <kilo_start+0x1ca>
     82e:	00 00       	nop
     830:	28 cf       	rjmp	.-432    	; 0x682 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     832:	90 91 39 01 	lds	r25, 0x0139
     836:	80 91 3a 01 	lds	r24, 0x013A
     83a:	98 17       	cp	r25, r24
     83c:	09 f4       	brne	.+2      	; 0x840 <kilo_start+0x1dc>
     83e:	21 cf       	rjmp	.-446    	; 0x682 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     840:	80 91 39 01 	lds	r24, 0x0139
     844:	80 93 3a 01 	sts	0x013A, r24
                        if (cur_motion == MOVE_LEFT) {
     848:	80 91 39 01 	lds	r24, 0x0139
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	09 f4       	brne	.+2      	; 0x852 <kilo_start+0x1ee>
     850:	50 c0       	rjmp	.+160    	; 0x8f2 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     852:	80 91 39 01 	lds	r24, 0x0139
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     856:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     85a:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	d9 f1       	breq	.+118    	; 0x8d8 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     862:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     866:	90 92 b4 00 	sts	0x00B4, r9
     86a:	8f e2       	ldi	r24, 0x2F	; 47
     86c:	95 e7       	ldi	r25, 0x75	; 117
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <kilo_start+0x20a>
     872:	00 c0       	rjmp	.+0      	; 0x874 <kilo_start+0x210>
     874:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     876:	80 91 aa 01 	lds	r24, 0x01AA
     87a:	90 91 a9 01 	lds	r25, 0x01A9
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     87e:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     882:	80 93 b4 00 	sts	0x00B4, r24
     886:	fd ce       	rjmp	.-518    	; 0x682 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     888:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     88a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     88c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     88e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     890:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     892:	3c 98       	cbi	0x07, 4	; 7
     894:	f6 ce       	rjmp	.-532    	; 0x682 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     896:	f3 01       	movw	r30, r6
     898:	09 95       	icall
     89a:	01 cf       	rjmp	.-510    	; 0x69e <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     89c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     89e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8a0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8a2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8a4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8a6:	3c 98       	cbi	0x07, 4	; 7
     8a8:	ff ef       	ldi	r31, 0xFF	; 255
     8aa:	20 e7       	ldi	r18, 0x70	; 112
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	f1 50       	subi	r31, 0x01	; 1
     8b0:	20 40       	sbci	r18, 0x00	; 0
     8b2:	80 40       	sbci	r24, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <kilo_start+0x24a>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <kilo_start+0x254>
     8b8:	00 00       	nop
     8ba:	6f cf       	rjmp	.-290    	; 0x79a <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8bc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8be:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     8c0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     8c2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8c4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8c6:	3c 98       	cbi	0x07, 4	; 7
     8c8:	dc ce       	rjmp	.-584    	; 0x682 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8ca:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8cc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8ce:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8d0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     8d2:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     8d4:	3c 9a       	sbi	0x07, 4	; 7
     8d6:	d5 ce       	rjmp	.-598    	; 0x682 <kilo_start+0x1e>
     8d8:	ef e2       	ldi	r30, 0x2F	; 47
     8da:	f5 e7       	ldi	r31, 0x75	; 117
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <kilo_start+0x278>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <kilo_start+0x27e>
     8e2:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     8e4:	80 91 97 01 	lds	r24, 0x0197
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8e8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     8ec:	80 93 b4 00 	sts	0x00B4, r24
     8f0:	c8 ce       	rjmp	.-624    	; 0x682 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8f2:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     8f6:	10 92 b4 00 	sts	0x00B4, r1
     8fa:	8f e2       	ldi	r24, 0x2F	; 47
     8fc:	95 e7       	ldi	r25, 0x75	; 117
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <kilo_start+0x29a>
     902:	00 c0       	rjmp	.+0      	; 0x904 <__stack+0x5>
     904:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     906:	80 91 ab 01 	lds	r24, 0x01AB
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     90a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     90e:	10 92 b4 00 	sts	0x00B4, r1
     912:	b7 ce       	rjmp	.-658    	; 0x682 <kilo_start+0x1e>

00000914 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     914:	07 c0       	rjmp	.+14     	; 0x924 <delay+0x10>
     916:	ef ec       	ldi	r30, 0xCF	; 207
     918:	f7 e0       	ldi	r31, 0x07	; 7
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <delay+0x6>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <delay+0xc>
     920:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     922:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	b9 f7       	brne	.-18     	; 0x916 <delay+0x2>
     928:	08 95       	ret

0000092a <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     92a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     92e:	60 93 b4 00 	sts	0x00B4, r22
     932:	08 95       	ret

00000934 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     93a:	80 93 b4 00 	sts	0x00B4, r24
     93e:	8f e0       	ldi	r24, 0x0F	; 15
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	ef ec       	ldi	r30, 0xCF	; 207
     944:	f7 e0       	ldi	r31, 0x07	; 7
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <spinup_motors+0x12>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <spinup_motors+0x18>
     94c:	00 00       	nop
     94e:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     950:	c1 f7       	brne	.-16     	; 0x942 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     952:	08 95       	ret

00000954 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     954:	80 91 75 01 	lds	r24, 0x0175
     958:	81 11       	cpse	r24, r1
     95a:	1e c0       	rjmp	.+60     	; 0x998 <get_ambientlight+0x44>
        cli();
     95c:	f8 94       	cli
        adc_setup_conversion(7);
     95e:	87 e0       	ldi	r24, 0x07	; 7
     960:	80 93 7c 00 	sts	0x007C, r24
     964:	83 e8       	ldi	r24, 0x83	; 131
     966:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     96a:	80 91 7a 00 	lds	r24, 0x007A
     96e:	80 64       	ori	r24, 0x40	; 64
     970:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     974:	80 91 7a 00 	lds	r24, 0x007A
     978:	86 fd       	sbrc	r24, 6
     97a:	fc cf       	rjmp	.-8      	; 0x974 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     97c:	80 91 78 00 	lds	r24, 0x0078
     980:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     984:	10 92 7c 00 	sts	0x007C, r1
     988:	23 ea       	ldi	r18, 0xA3	; 163
     98a:	20 93 7a 00 	sts	0x007A, r18
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     994:	78 94       	sei
     996:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     99c:	08 95       	ret

0000099e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     99e:	80 91 75 01 	lds	r24, 0x0175
     9a2:	81 11       	cpse	r24, r1
     9a4:	1e c0       	rjmp	.+60     	; 0x9e2 <get_temperature+0x44>
        cli();
     9a6:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     9a8:	88 ec       	ldi	r24, 0xC8	; 200
     9aa:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     9ae:	87 e8       	ldi	r24, 0x87	; 135
     9b0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9b4:	80 91 7a 00 	lds	r24, 0x007A
     9b8:	80 64       	ori	r24, 0x40	; 64
     9ba:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9be:	80 91 7a 00 	lds	r24, 0x007A
     9c2:	86 fd       	sbrc	r24, 6
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     9c6:	80 91 78 00 	lds	r24, 0x0078
     9ca:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     9ce:	10 92 7c 00 	sts	0x007C, r1
     9d2:	23 ea       	ldi	r18, 0xA3	; 163
     9d4:	20 93 7a 00 	sts	0x007A, r18
     9d8:	21 e0       	ldi	r18, 0x01	; 1
     9da:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     9de:	78 94       	sei
     9e0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     9e6:	08 95       	ret

000009e8 <rand_hard>:

uint8_t rand_hard() {
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	e0 e0       	ldi	r30, 0x00	; 0
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     9f4:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     9f6:	03 ea       	ldi	r16, 0xA3	; 163
     9f8:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     9fa:	d6 e0       	ldi	r29, 0x06	; 6
     9fc:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     9fe:	a1 e0       	ldi	r26, 0x01	; 1
     a00:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     a02:	60 e8       	ldi	r22, 0x80	; 128
     a04:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     a06:	f8 94       	cli
            adc_setup_conversion(6);
     a08:	d0 93 7c 00 	sts	0x007C, r29
     a0c:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     a10:	90 91 7a 00 	lds	r25, 0x007A
     a14:	90 64       	ori	r25, 0x40	; 64
     a16:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     a1a:	90 91 7a 00 	lds	r25, 0x007A
     a1e:	96 fd       	sbrc	r25, 6
     a20:	fc cf       	rjmp	.-8      	; 0xa1a <rand_hard+0x32>
            a = ADCW&0x1;
     a22:	20 91 78 00 	lds	r18, 0x0078
     a26:	30 91 79 00 	lds	r19, 0x0079
     a2a:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     a2c:	90 91 7a 00 	lds	r25, 0x007A
     a30:	90 64       	ori	r25, 0x40	; 64
     a32:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     a36:	90 91 7a 00 	lds	r25, 0x007A
     a3a:	96 fd       	sbrc	r25, 6
     a3c:	fc cf       	rjmp	.-8      	; 0xa36 <rand_hard+0x4e>
            b = ADCW&0x1;
     a3e:	40 91 78 00 	lds	r20, 0x0078
     a42:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     a46:	10 92 7c 00 	sts	0x007C, r1
     a4a:	00 93 7a 00 	sts	0x007A, r16
     a4e:	10 93 7b 00 	sts	0x007B, r17
            sei();
     a52:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     a54:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     a56:	24 13       	cpse	r18, r20
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <rand_hard+0x78>
     a5a:	61 50       	subi	r22, 0x01	; 1
     a5c:	71 09       	sbc	r23, r1
     a5e:	99 f6       	brne	.-90     	; 0xa06 <rand_hard+0x1e>
        if (a)
     a60:	22 23       	and	r18, r18
     a62:	39 f0       	breq	.+14     	; 0xa72 <rand_hard+0x8a>
            num |= (1<<i);
     a64:	9d 01       	movw	r18, r26
     a66:	0e 2e       	mov	r0, r30
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <rand_hard+0x84>
     a6a:	22 0f       	add	r18, r18
     a6c:	0a 94       	dec	r0
     a6e:	ea f7       	brpl	.-6      	; 0xa6a <rand_hard+0x82>
     a70:	82 2b       	or	r24, r18
     a72:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     a74:	e8 30       	cpi	r30, 0x08	; 8
     a76:	f1 05       	cpc	r31, r1
     a78:	09 f0       	breq	.+2      	; 0xa7c <rand_hard+0x94>
     a7a:	c3 cf       	rjmp	.-122    	; 0xa02 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a86:	80 91 0e 01 	lds	r24, 0x010E
     a8a:	98 2f       	mov	r25, r24
     a8c:	99 0f       	add	r25, r25
     a8e:	99 0f       	add	r25, r25
     a90:	99 0f       	add	r25, r25
     a92:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a94:	90 91 38 01 	lds	r25, 0x0138
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	29 0f       	add	r18, r25
     a9c:	20 93 38 01 	sts	0x0138, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     aa0:	28 2f       	mov	r18, r24
     aa2:	22 95       	swap	r18
     aa4:	26 95       	lsr	r18
     aa6:	27 70       	andi	r18, 0x07	; 7
     aa8:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     aaa:	96 95       	lsr	r25
     aac:	96 95       	lsr	r25
     aae:	89 27       	eor	r24, r25
     ab0:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     ab4:	08 95       	ret

00000ab6 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     ab6:	80 93 0e 01 	sts	0x010E, r24
     aba:	08 95       	ret

00000abc <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     abc:	80 91 75 01 	lds	r24, 0x0175
     ac0:	81 11       	cpse	r24, r1
     ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <get_voltage+0x34>
        cli();                                    // disable interrupts
     ac4:	f8 94       	cli
        adc_setup_conversion(6);
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	80 93 7c 00 	sts	0x007C, r24
     acc:	83 e8       	ldi	r24, 0x83	; 131
     ace:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     ad2:	80 91 7a 00 	lds	r24, 0x007A
     ad6:	80 64       	ori	r24, 0x40	; 64
     ad8:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     adc:	80 91 7a 00 	lds	r24, 0x007A
     ae0:	86 fd       	sbrc	r24, 6
     ae2:	fc cf       	rjmp	.-8      	; 0xadc <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     ae4:	80 91 78 00 	lds	r24, 0x0078
     ae8:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     aec:	78 94       	sei
     aee:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     af4:	08 95       	ret

00000af6 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     af6:	2f 92       	push	r2
     af8:	3f 92       	push	r3
     afa:	4f 92       	push	r4
     afc:	5f 92       	push	r5
     afe:	6f 92       	push	r6
     b00:	7f 92       	push	r7
     b02:	8f 92       	push	r8
     b04:	9f 92       	push	r9
     b06:	af 92       	push	r10
     b08:	bf 92       	push	r11
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <estimate_distance+0x26>
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <estimate_distance+0x28>
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <estimate_distance+0x2a>
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     b26:	dc 01       	movw	r26, r24
     b28:	12 96       	adiw	r26, 0x02	; 2
     b2a:	0d 90       	ld	r0, X+
     b2c:	bc 91       	ld	r27, X
     b2e:	a0 2d       	mov	r26, r0
     b30:	be 83       	std	Y+6, r27	; 0x06
     b32:	ad 83       	std	Y+5, r26	; 0x05
     b34:	a4 38       	cpi	r26, 0x84	; 132
     b36:	e3 e0       	ldi	r30, 0x03	; 3
     b38:	be 07       	cpc	r27, r30
     b3a:	0c f0       	brlt	.+2      	; 0xb3e <estimate_distance+0x48>
     b3c:	c9 c0       	rjmp	.+402    	; 0xcd0 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     b3e:	80 91 4f 01 	lds	r24, 0x014F
     b42:	90 91 50 01 	lds	r25, 0x0150
     b46:	8a 17       	cp	r24, r26
     b48:	9b 07       	cpc	r25, r27
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <estimate_distance+0x58>
     b4c:	37 c1       	rjmp	.+622    	; 0xdbc <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     b4e:	00 91 51 01 	lds	r16, 0x0151
     b52:	10 91 52 01 	lds	r17, 0x0152
     b56:	0a 17       	cp	r16, r26
     b58:	1b 07       	cpc	r17, r27
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <estimate_distance+0x68>
     b5c:	2f c2       	rjmp	.+1118   	; 0xfbc <estimate_distance+0x4c6>
     b5e:	00 91 53 01 	lds	r16, 0x0153
     b62:	10 91 54 01 	lds	r17, 0x0154
     b66:	0a 17       	cp	r16, r26
     b68:	1b 07       	cpc	r17, r27
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <estimate_distance+0x78>
     b6c:	2f c2       	rjmp	.+1118   	; 0xfcc <estimate_distance+0x4d6>
     b6e:	00 91 55 01 	lds	r16, 0x0155
     b72:	10 91 56 01 	lds	r17, 0x0156
     b76:	0a 17       	cp	r16, r26
     b78:	1b 07       	cpc	r17, r27
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <estimate_distance+0x88>
     b7c:	2f c2       	rjmp	.+1118   	; 0xfdc <estimate_distance+0x4e6>
     b7e:	00 91 57 01 	lds	r16, 0x0157
     b82:	10 91 58 01 	lds	r17, 0x0158
     b86:	0a 17       	cp	r16, r26
     b88:	1b 07       	cpc	r17, r27
     b8a:	08 f4       	brcc	.+2      	; 0xb8e <estimate_distance+0x98>
     b8c:	2f c2       	rjmp	.+1118   	; 0xfec <estimate_distance+0x4f6>
     b8e:	00 91 59 01 	lds	r16, 0x0159
     b92:	10 91 5a 01 	lds	r17, 0x015A
     b96:	0a 17       	cp	r16, r26
     b98:	1b 07       	cpc	r17, r27
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <estimate_distance+0xa8>
     b9c:	ef c1       	rjmp	.+990    	; 0xf7c <estimate_distance+0x486>
     b9e:	00 91 5b 01 	lds	r16, 0x015B
     ba2:	10 91 5c 01 	lds	r17, 0x015C
     ba6:	0a 17       	cp	r16, r26
     ba8:	1b 07       	cpc	r17, r27
     baa:	08 f4       	brcc	.+2      	; 0xbae <estimate_distance+0xb8>
     bac:	27 c2       	rjmp	.+1102   	; 0xffc <estimate_distance+0x506>
     bae:	00 91 5d 01 	lds	r16, 0x015D
     bb2:	10 91 5e 01 	lds	r17, 0x015E
     bb6:	0a 17       	cp	r16, r26
     bb8:	1b 07       	cpc	r17, r27
     bba:	08 f4       	brcc	.+2      	; 0xbbe <estimate_distance+0xc8>
     bbc:	27 c2       	rjmp	.+1102   	; 0x100c <estimate_distance+0x516>
     bbe:	00 91 5f 01 	lds	r16, 0x015F
     bc2:	10 91 60 01 	lds	r17, 0x0160
     bc6:	0a 17       	cp	r16, r26
     bc8:	1b 07       	cpc	r17, r27
     bca:	08 f4       	brcc	.+2      	; 0xbce <estimate_distance+0xd8>
     bcc:	27 c2       	rjmp	.+1102   	; 0x101c <estimate_distance+0x526>
     bce:	00 91 61 01 	lds	r16, 0x0161
     bd2:	10 91 62 01 	lds	r17, 0x0162
     bd6:	0a 17       	cp	r16, r26
     bd8:	1b 07       	cpc	r17, r27
     bda:	08 f4       	brcc	.+2      	; 0xbde <estimate_distance+0xe8>
     bdc:	27 c2       	rjmp	.+1102   	; 0x102c <estimate_distance+0x536>
     bde:	00 91 63 01 	lds	r16, 0x0163
     be2:	10 91 64 01 	lds	r17, 0x0164
     be6:	0a 17       	cp	r16, r26
     be8:	1b 07       	cpc	r17, r27
     bea:	08 f4       	brcc	.+2      	; 0xbee <estimate_distance+0xf8>
     bec:	27 c2       	rjmp	.+1102   	; 0x103c <estimate_distance+0x546>
     bee:	00 91 65 01 	lds	r16, 0x0165
     bf2:	10 91 66 01 	lds	r17, 0x0166
     bf6:	0a 17       	cp	r16, r26
     bf8:	1b 07       	cpc	r17, r27
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <estimate_distance+0x108>
     bfc:	23 c2       	rjmp	.+1094   	; 0x1044 <estimate_distance+0x54e>
     bfe:	00 91 67 01 	lds	r16, 0x0167
     c02:	10 91 68 01 	lds	r17, 0x0168
     c06:	0a 17       	cp	r16, r26
     c08:	1b 07       	cpc	r17, r27
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <estimate_distance+0x118>
     c0c:	23 c2       	rjmp	.+1094   	; 0x1054 <estimate_distance+0x55e>
     c0e:	00 91 69 01 	lds	r16, 0x0169
     c12:	10 91 6a 01 	lds	r17, 0x016A
     c16:	0a 17       	cp	r16, r26
     c18:	1b 07       	cpc	r17, r27
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <estimate_distance+0x128>
     c1c:	23 c2       	rjmp	.+1094   	; 0x1064 <estimate_distance+0x56e>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	a0 ed       	ldi	r26, 0xD0	; 208
     c24:	b0 e4       	ldi	r27, 0x40	; 64
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	ab 83       	std	Y+3, r26	; 0x03
     c2c:	bc 83       	std	Y+4, r27	; 0x04
     c2e:	4c e0       	ldi	r20, 0x0C	; 12
     c30:	e4 2e       	mov	r14, r20
     c32:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     c34:	f7 01       	movw	r30, r14
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e1 5b       	subi	r30, 0xB1	; 177
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	b8 01       	movw	r22, r16
     c44:	68 1b       	sub	r22, r24
     c46:	79 0b       	sbc	r23, r25
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
     c58:	6b 01       	movw	r12, r22
     c5a:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c5c:	ad 81       	ldd	r26, Y+5	; 0x05
     c5e:	be 81       	ldd	r27, Y+6	; 0x06
     c60:	bd 01       	movw	r22, r26
     c62:	bb 0f       	add	r27, r27
     c64:	88 0b       	sbc	r24, r24
     c66:	99 0b       	sbc	r25, r25
     c68:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatsisf>
     c6c:	4b 01       	movw	r8, r22
     c6e:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     c70:	b8 01       	movw	r22, r16
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     c7a:	2b 01       	movw	r4, r22
     c7c:	3c 01       	movw	r6, r24
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	3a 81       	ldd	r19, Y+2	; 0x02
     c82:	4b 81       	ldd	r20, Y+3	; 0x03
     c84:	5c 81       	ldd	r21, Y+4	; 0x04
     c86:	c7 01       	movw	r24, r14
     c88:	b6 01       	movw	r22, r12
     c8a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	c3 01       	movw	r24, r6
     c94:	b2 01       	movw	r22, r4
     c96:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c9e:	c5 01       	movw	r24, r10
     ca0:	b4 01       	movw	r22, r8
     ca2:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e2       	ldi	r20, 0x20	; 32
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
            b=((int)((int)b/(int)slope));
     cb2:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fixsfsi>
     cb6:	8b 01       	movw	r16, r22
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fixsfsi>
     cc0:	ab 01       	movw	r20, r22
     cc2:	bc 01       	movw	r22, r24
     cc4:	c8 01       	movw	r24, r16
     cc6:	ba 01       	movw	r22, r20
     cc8:	0e 94 be 0b 	call	0x177c	; 0x177c <__divmodhi4>
            dist_high=b;
     ccc:	16 2f       	mov	r17, r22
     cce:	77 c0       	rjmp	.+238    	; 0xdbe <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     cd0:	dc 01       	movw	r26, r24
     cd2:	cd 90       	ld	r12, X+
     cd4:	dc 90       	ld	r13, X
     cd6:	80 91 76 01 	lds	r24, 0x0176
     cda:	90 91 77 01 	lds	r25, 0x0177
     cde:	8c 15       	cp	r24, r12
     ce0:	9d 05       	cpc	r25, r13
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <estimate_distance+0x1f0>
     ce4:	8c c0       	rjmp	.+280    	; 0xdfe <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     ce6:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     ce8:	e0 90 78 01 	lds	r14, 0x0178
     cec:	f0 90 79 01 	lds	r15, 0x0179
     cf0:	ec 14       	cp	r14, r12
     cf2:	fd 04       	cpc	r15, r13
     cf4:	08 f4       	brcc	.+2      	; 0xcf8 <estimate_distance+0x202>
     cf6:	5e c1       	rjmp	.+700    	; 0xfb4 <estimate_distance+0x4be>
     cf8:	e0 90 7a 01 	lds	r14, 0x017A
     cfc:	f0 90 7b 01 	lds	r15, 0x017B
     d00:	ec 14       	cp	r14, r12
     d02:	fd 04       	cpc	r15, r13
     d04:	08 f4       	brcc	.+2      	; 0xd08 <estimate_distance+0x212>
     d06:	5e c1       	rjmp	.+700    	; 0xfc4 <estimate_distance+0x4ce>
     d08:	e0 90 7c 01 	lds	r14, 0x017C
     d0c:	f0 90 7d 01 	lds	r15, 0x017D
     d10:	ec 14       	cp	r14, r12
     d12:	fd 04       	cpc	r15, r13
     d14:	08 f4       	brcc	.+2      	; 0xd18 <estimate_distance+0x222>
     d16:	5e c1       	rjmp	.+700    	; 0xfd4 <estimate_distance+0x4de>
     d18:	e0 90 7e 01 	lds	r14, 0x017E
     d1c:	f0 90 7f 01 	lds	r15, 0x017F
     d20:	ec 14       	cp	r14, r12
     d22:	fd 04       	cpc	r15, r13
     d24:	08 f4       	brcc	.+2      	; 0xd28 <estimate_distance+0x232>
     d26:	5e c1       	rjmp	.+700    	; 0xfe4 <estimate_distance+0x4ee>
     d28:	e0 90 80 01 	lds	r14, 0x0180
     d2c:	f0 90 81 01 	lds	r15, 0x0181
     d30:	ec 14       	cp	r14, r12
     d32:	fd 04       	cpc	r15, r13
     d34:	08 f4       	brcc	.+2      	; 0xd38 <estimate_distance+0x242>
     d36:	c3 c0       	rjmp	.+390    	; 0xebe <estimate_distance+0x3c8>
     d38:	e0 90 82 01 	lds	r14, 0x0182
     d3c:	f0 90 83 01 	lds	r15, 0x0183
     d40:	ec 14       	cp	r14, r12
     d42:	fd 04       	cpc	r15, r13
     d44:	08 f4       	brcc	.+2      	; 0xd48 <estimate_distance+0x252>
     d46:	56 c1       	rjmp	.+684    	; 0xff4 <estimate_distance+0x4fe>
     d48:	e0 90 84 01 	lds	r14, 0x0184
     d4c:	f0 90 85 01 	lds	r15, 0x0185
     d50:	ec 14       	cp	r14, r12
     d52:	fd 04       	cpc	r15, r13
     d54:	08 f4       	brcc	.+2      	; 0xd58 <estimate_distance+0x262>
     d56:	56 c1       	rjmp	.+684    	; 0x1004 <estimate_distance+0x50e>
     d58:	e0 90 86 01 	lds	r14, 0x0186
     d5c:	f0 90 87 01 	lds	r15, 0x0187
     d60:	ec 14       	cp	r14, r12
     d62:	fd 04       	cpc	r15, r13
     d64:	08 f4       	brcc	.+2      	; 0xd68 <estimate_distance+0x272>
     d66:	56 c1       	rjmp	.+684    	; 0x1014 <estimate_distance+0x51e>
     d68:	e0 90 88 01 	lds	r14, 0x0188
     d6c:	f0 90 89 01 	lds	r15, 0x0189
     d70:	ec 14       	cp	r14, r12
     d72:	fd 04       	cpc	r15, r13
     d74:	08 f4       	brcc	.+2      	; 0xd78 <estimate_distance+0x282>
     d76:	56 c1       	rjmp	.+684    	; 0x1024 <estimate_distance+0x52e>
     d78:	e0 90 8a 01 	lds	r14, 0x018A
     d7c:	f0 90 8b 01 	lds	r15, 0x018B
     d80:	ec 14       	cp	r14, r12
     d82:	fd 04       	cpc	r15, r13
     d84:	08 f4       	brcc	.+2      	; 0xd88 <estimate_distance+0x292>
     d86:	56 c1       	rjmp	.+684    	; 0x1034 <estimate_distance+0x53e>
     d88:	e0 90 8c 01 	lds	r14, 0x018C
     d8c:	f0 90 8d 01 	lds	r15, 0x018D
     d90:	ec 14       	cp	r14, r12
     d92:	fd 04       	cpc	r15, r13
     d94:	08 f4       	brcc	.+2      	; 0xd98 <estimate_distance+0x2a2>
     d96:	5a c1       	rjmp	.+692    	; 0x104c <estimate_distance+0x556>
     d98:	e0 90 8e 01 	lds	r14, 0x018E
     d9c:	f0 90 8f 01 	lds	r15, 0x018F
     da0:	ec 14       	cp	r14, r12
     da2:	fd 04       	cpc	r15, r13
     da4:	08 f4       	brcc	.+2      	; 0xda8 <estimate_distance+0x2b2>
     da6:	5a c1       	rjmp	.+692    	; 0x105c <estimate_distance+0x566>
     da8:	e0 90 90 01 	lds	r14, 0x0190
     dac:	f0 90 91 01 	lds	r15, 0x0191
     db0:	ec 14       	cp	r14, r12
     db2:	fd 04       	cpc	r15, r13
     db4:	08 f4       	brcc	.+2      	; 0xdb8 <estimate_distance+0x2c2>
     db6:	5a c1       	rjmp	.+692    	; 0x106c <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     db8:	0a e5       	ldi	r16, 0x5A	; 90
     dba:	31 c0       	rjmp	.+98     	; 0xe1e <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     dbc:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     dbe:	ed 81       	ldd	r30, Y+5	; 0x05
     dc0:	fe 81       	ldd	r31, Y+6	; 0x06
     dc2:	ed 3b       	cpi	r30, 0xBD	; 189
     dc4:	f2 40       	sbci	r31, 0x02	; 2
     dc6:	fc f4       	brge	.+62     	; 0xe06 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     dc8:	81 e2       	ldi	r24, 0x21	; 33
     dca:	81 0f       	add	r24, r17
    }
}
     dcc:	26 96       	adiw	r28, 0x06	; 6
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	9f 90       	pop	r9
     dee:	8f 90       	pop	r8
     df0:	7f 90       	pop	r7
     df2:	6f 90       	pop	r6
     df4:	5f 90       	pop	r5
     df6:	4f 90       	pop	r4
     df8:	3f 90       	pop	r3
     dfa:	2f 90       	pop	r2
     dfc:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     dfe:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     e00:	81 e2       	ldi	r24, 0x21	; 33
     e02:	80 0f       	add	r24, r16
     e04:	e3 cf       	rjmp	.-58     	; 0xdcc <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     e06:	d1 01       	movw	r26, r2
     e08:	cd 90       	ld	r12, X+
     e0a:	dc 90       	ld	r13, X
     e0c:	80 91 76 01 	lds	r24, 0x0176
     e10:	90 91 77 01 	lds	r25, 0x0177
     e14:	8c 15       	cp	r24, r12
     e16:	9d 05       	cpc	r25, r13
     e18:	08 f0       	brcs	.+2      	; 0xe1c <estimate_distance+0x326>
     e1a:	66 cf       	rjmp	.-308    	; 0xce8 <estimate_distance+0x1f2>
            dist_low=0;
     e1c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     e1e:	1f 3f       	cpi	r17, 0xFF	; 255
     e20:	79 f3       	breq	.-34     	; 0xe00 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     e22:	ed 81       	ldd	r30, Y+5	; 0x05
     e24:	fe 81       	ldd	r31, Y+6	; 0x06
     e26:	bf 01       	movw	r22, r30
     e28:	ff 0f       	add	r31, r31
     e2a:	88 0b       	sbc	r24, r24
     e2c:	99 0b       	sbc	r25, r25
     e2e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatsisf>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
     e36:	61 2f       	mov	r22, r17
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     e42:	4b 01       	movw	r8, r22
     e44:	5c 01       	movw	r10, r24
     e46:	a7 01       	movw	r20, r14
     e48:	96 01       	movw	r18, r12
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	81 e6       	ldi	r24, 0x61	; 97
     e50:	94 e4       	ldi	r25, 0x44	; 68
     e52:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c5 01       	movw	r24, r10
     e5c:	b4 01       	movw	r22, r8
     e5e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
     e62:	4b 01       	movw	r8, r22
     e64:	5c 01       	movw	r10, r24
     e66:	60 2f       	mov	r22, r16
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     e72:	2b 01       	movw	r4, r22
     e74:	3c 01       	movw	r6, r24
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4f e2       	ldi	r20, 0x2F	; 47
     e7c:	54 e4       	ldi	r21, 0x44	; 68
     e7e:	c7 01       	movw	r24, r14
     e80:	b6 01       	movw	r22, r12
     e82:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	c3 01       	movw	r24, r6
     e8c:	b2 01       	movw	r22, r4
     e8e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
     e92:	9b 01       	movw	r18, r22
     e94:	ac 01       	movw	r20, r24
     e96:	c5 01       	movw	r24, r10
     e98:	b4 01       	movw	r22, r8
     e9a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	48 e4       	ldi	r20, 0x48	; 72
     ea4:	53 e4       	ldi	r21, 0x43	; 67
     ea6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__divsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	44 e0       	ldi	r20, 0x04	; 4
     eb0:	52 e4       	ldi	r21, 0x42	; 66
     eb2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
     eb6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__fixunssfsi>
     eba:	86 2f       	mov	r24, r22
     ebc:	87 cf       	rjmp	.-242    	; 0xdcc <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ebe:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     ec0:	85 e0       	ldi	r24, 0x05	; 5
     ec2:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	fc 01       	movw	r30, r24
     eca:	ec 58       	subi	r30, 0x8C	; 140
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	b7 01       	movw	r22, r14
     ed4:	68 1b       	sub	r22, r24
     ed6:	79 0b       	sbc	r23, r25
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     ee0:	9b 01       	movw	r18, r22
     ee2:	ac 01       	movw	r20, r24
     ee4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
     ee8:	4b 01       	movw	r8, r22
     eea:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     eec:	b6 01       	movw	r22, r12
     eee:	dd 0c       	add	r13, r13
     ef0:	88 0b       	sbc	r24, r24
     ef2:	99 0b       	sbc	r25, r25
     ef4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatsisf>
     ef8:	2b 01       	movw	r4, r22
     efa:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     efc:	b7 01       	movw	r22, r14
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     f06:	6b 01       	movw	r12, r22
     f08:	7c 01       	movw	r14, r24
     f0a:	60 2f       	mov	r22, r16
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	a9 01       	movw	r20, r18
     f28:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
     f2c:	a5 01       	movw	r20, r10
     f2e:	94 01       	movw	r18, r8
     f30:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
     f34:	9b 01       	movw	r18, r22
     f36:	ac 01       	movw	r20, r24
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
     f40:	9b 01       	movw	r18, r22
     f42:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     f44:	c3 01       	movw	r24, r6
     f46:	b2 01       	movw	r22, r4
     f48:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	51 e4       	ldi	r21, 0x41	; 65
     f54:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
                b=((int)((int)b/(int)slope));
     f58:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fixsfsi>
     f5c:	7b 01       	movw	r14, r22
     f5e:	c5 01       	movw	r24, r10
     f60:	b4 01       	movw	r22, r8
     f62:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fixsfsi>
     f66:	ab 01       	movw	r20, r22
     f68:	bc 01       	movw	r22, r24
     f6a:	c7 01       	movw	r24, r14
     f6c:	ba 01       	movw	r22, r20
     f6e:	0e 94 be 0b 	call	0x177c	; 0x177c <__divmodhi4>
                dist_low=b;
     f72:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     f74:	6f 3f       	cpi	r22, 0xFF	; 255
     f76:	09 f0       	breq	.+2      	; 0xf7a <estimate_distance+0x484>
     f78:	52 cf       	rjmp	.-348    	; 0xe1e <estimate_distance+0x328>
     f7a:	26 cf       	rjmp	.-436    	; 0xdc8 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f7c:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     f7e:	85 e0       	ldi	r24, 0x05	; 5
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	7c 01       	movw	r14, r24
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	ef 1a       	sub	r14, r31
     f88:	f1 08       	sbc	r15, r1
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__floatunsisf>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	5f e3       	ldi	r21, 0x3F	; 63
     f9c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__mulsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	a9 01       	movw	r20, r18
     fa6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
     faa:	69 83       	std	Y+1, r22	; 0x01
     fac:	7a 83       	std	Y+2, r23	; 0x02
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     fb2:	40 ce       	rjmp	.-896    	; 0xc34 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     fb4:	01 e0       	ldi	r16, 0x01	; 1
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	84 cf       	rjmp	.-248    	; 0xec4 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	df cf       	rjmp	.-66     	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fc4:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	7c cf       	rjmp	.-264    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fcc:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	d7 cf       	rjmp	.-82     	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fd4:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	74 cf       	rjmp	.-280    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fdc:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     fde:	83 e0       	ldi	r24, 0x03	; 3
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	cf cf       	rjmp	.-98     	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fe4:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	6c cf       	rjmp	.-296    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fec:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	c7 cf       	rjmp	.-114    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ff4:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     ff6:	86 e0       	ldi	r24, 0x06	; 6
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	64 cf       	rjmp	.-312    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ffc:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     ffe:	86 e0       	ldi	r24, 0x06	; 6
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	bf cf       	rjmp	.-130    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1004:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	5c cf       	rjmp	.-328    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    100c:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    100e:	87 e0       	ldi	r24, 0x07	; 7
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	b7 cf       	rjmp	.-146    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1014:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	54 cf       	rjmp	.-344    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    101c:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    101e:	88 e0       	ldi	r24, 0x08	; 8
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	af cf       	rjmp	.-162    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1024:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    1026:	89 e0       	ldi	r24, 0x09	; 9
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	4c cf       	rjmp	.-360    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    102c:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    102e:	89 e0       	ldi	r24, 0x09	; 9
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a7 cf       	rjmp	.-178    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1034:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    1036:	8a e0       	ldi	r24, 0x0A	; 10
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	44 cf       	rjmp	.-376    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    103c:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    103e:	8a e0       	ldi	r24, 0x0A	; 10
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9f cf       	rjmp	.-194    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1044:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1046:	8b e0       	ldi	r24, 0x0B	; 11
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9b cf       	rjmp	.-202    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    104c:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    104e:	8b e0       	ldi	r24, 0x0B	; 11
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	38 cf       	rjmp	.-400    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1054:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	93 cf       	rjmp	.-218    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    105c:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    105e:	8c e0       	ldi	r24, 0x0C	; 12
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	30 cf       	rjmp	.-416    	; 0xec4 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1064:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1066:	8d e0       	ldi	r24, 0x0D	; 13
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	8b cf       	rjmp	.-234    	; 0xf82 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    106c:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    106e:	8d e0       	ldi	r24, 0x0D	; 13
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	28 cf       	rjmp	.-432    	; 0xec4 <estimate_distance+0x3ce>

00001074 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
    tx_clock += tx_increment;
    1096:	20 91 95 01 	lds	r18, 0x0195
    109a:	30 91 96 01 	lds	r19, 0x0196
    109e:	80 91 93 01 	lds	r24, 0x0193
    10a2:	90 91 94 01 	lds	r25, 0x0194
    10a6:	82 0f       	add	r24, r18
    10a8:	93 1f       	adc	r25, r19
    10aa:	90 93 96 01 	sts	0x0196, r25
    10ae:	80 93 95 01 	sts	0x0195, r24
    tx_increment = 0xFF;
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	90 93 94 01 	sts	0x0194, r25
    10ba:	80 93 93 01 	sts	0x0193, r24
    OCR0A = tx_increment;
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    10c2:	80 91 71 01 	lds	r24, 0x0171
    10c6:	90 91 72 01 	lds	r25, 0x0172
    10ca:	a0 91 73 01 	lds	r26, 0x0173
    10ce:	b0 91 74 01 	lds	r27, 0x0174
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	a1 1d       	adc	r26, r1
    10d6:	b1 1d       	adc	r27, r1
    10d8:	80 93 71 01 	sts	0x0171, r24
    10dc:	90 93 72 01 	sts	0x0172, r25
    10e0:	a0 93 73 01 	sts	0x0173, r26
    10e4:	b0 93 74 01 	sts	0x0174, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    10e8:	80 91 75 01 	lds	r24, 0x0175
    10ec:	81 11       	cpse	r24, r1
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <__vector_14+0x9a>
    10f0:	80 91 a4 01 	lds	r24, 0x01A4
    10f4:	90 91 a5 01 	lds	r25, 0x01A5
    10f8:	20 91 95 01 	lds	r18, 0x0195
    10fc:	30 91 96 01 	lds	r19, 0x0196
    1100:	82 17       	cp	r24, r18
    1102:	93 07       	cpc	r25, r19
    1104:	20 f4       	brcc	.+8      	; 0x110e <__vector_14+0x9a>
    1106:	80 91 3b 01 	lds	r24, 0x013B
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	89 f0       	breq	.+34     	; 0x1130 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	0f 90       	pop	r0
    112c:	1f 90       	pop	r1
    112e:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1130:	e0 91 11 01 	lds	r30, 0x0111
    1134:	f0 91 12 01 	lds	r31, 0x0112
    1138:	09 95       	icall
        if (msg) {
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	41 f3       	breq	.-48     	; 0x110e <__vector_14+0x9a>
            if (message_send(msg)) {
    113e:	0e 94 22 0b 	call	0x1644	; 0x1644 <message_send>
    1142:	81 11       	cpse	r24, r1
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1146:	0e 94 57 0e 	call	0x1cae	; 0x1cae <rand>
    114a:	99 27       	eor	r25, r25
    114c:	90 93 94 01 	sts	0x0194, r25
    1150:	80 93 93 01 	sts	0x0193, r24
                OCR0A = tx_increment;
    1154:	87 bd       	out	0x27, r24	; 39
    1156:	db cf       	rjmp	.-74     	; 0x110e <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1158:	e0 91 0f 01 	lds	r30, 0x010F
    115c:	f0 91 10 01 	lds	r31, 0x0110
    1160:	09 95       	icall
                tx_clock = 0;
    1162:	10 92 96 01 	sts	0x0196, r1
    1166:	10 92 95 01 	sts	0x0195, r1
    116a:	d1 cf       	rjmp	.-94     	; 0x110e <__vector_14+0x9a>

0000116c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    116c:	80 ff       	sbrs	r24, 0
    116e:	11 c0       	rjmp	.+34     	; 0x1192 <set_color+0x26>
        DDRD |= (1<<5);
    1170:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1172:	81 ff       	sbrs	r24, 1
    1174:	11 c0       	rjmp	.+34     	; 0x1198 <set_color+0x2c>
        DDRD |= (1<<4);
    1176:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1178:	82 ff       	sbrs	r24, 2
    117a:	11 c0       	rjmp	.+34     	; 0x119e <set_color+0x32>
        DDRC |= (1<<3);
    117c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    117e:	83 ff       	sbrs	r24, 3
    1180:	11 c0       	rjmp	.+34     	; 0x11a4 <set_color+0x38>
        DDRC |= (1<<2);
    1182:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1184:	84 ff       	sbrs	r24, 4
    1186:	11 c0       	rjmp	.+34     	; 0x11aa <set_color+0x3e>
        DDRC |= (1<<5);
    1188:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    118a:	85 fd       	sbrc	r24, 5
    118c:	11 c0       	rjmp	.+34     	; 0x11b0 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    118e:	3c 98       	cbi	0x07, 4	; 7
    1190:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1192:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1194:	81 fd       	sbrc	r24, 1
    1196:	ef cf       	rjmp	.-34     	; 0x1176 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1198:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    119a:	82 fd       	sbrc	r24, 2
    119c:	ef cf       	rjmp	.-34     	; 0x117c <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    119e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    11a0:	83 fd       	sbrc	r24, 3
    11a2:	ef cf       	rjmp	.-34     	; 0x1182 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11a4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    11a6:	84 fd       	sbrc	r24, 4
    11a8:	ef cf       	rjmp	.-34     	; 0x1188 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11aa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    11ac:	85 ff       	sbrs	r24, 5
    11ae:	ef cf       	rjmp	.-34     	; 0x118e <set_color+0x22>
        DDRC |= (1<<4);
    11b0:	3c 9a       	sbi	0x07, 4	; 7
    11b2:	08 95       	ret

000011b4 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    rx_timer_off();
    11c2:	10 92 81 00 	sts	0x0081, r1
    11c6:	10 92 85 00 	sts	0x0085, r1
    11ca:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 4e 01 	sts	0x014E, r24
    rx_leadingbyte = 1;
    11d4:	80 93 92 01 	sts	0x0192, r24
    rx_busy = 0;
    11d8:	10 92 75 01 	sts	0x0175, r1
    adc_trigger_high_gain();
    11dc:	10 92 7c 00 	sts	0x007C, r1
    11e0:	93 ea       	ldi	r25, 0xA3	; 163
    11e2:	90 93 7a 00 	sts	0x007A, r25
    11e6:	80 93 7b 00 	sts	0x007B, r24
}
    11ea:	9f 91       	pop	r25
    11ec:	8f 91       	pop	r24
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    121e:	20 91 84 00 	lds	r18, 0x0084
    1222:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	40 93 75 01 	sts	0x0175, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    122c:	80 91 4e 01 	lds	r24, 0x014E
    1230:	88 23       	and	r24, r24
    1232:	a9 f1       	breq	.+106    	; 0x129e <__vector_23+0xa6>
        rx_timer_on();
    1234:	10 92 85 00 	sts	0x0085, r1
    1238:	10 92 84 00 	sts	0x0084, r1
    123c:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1240:	10 92 a6 01 	sts	0x01A6, r1
        rx_leadingbit = 0;
    1244:	10 92 4e 01 	sts	0x014E, r1
        if (rx_leadingbyte) {
    1248:	80 91 92 01 	lds	r24, 0x0192
    124c:	88 23       	and	r24, r24
    124e:	a1 f0       	breq	.+40     	; 0x1278 <__vector_23+0x80>
            adc_finish_conversion();
    1250:	80 91 7a 00 	lds	r24, 0x007A
    1254:	86 fd       	sbrc	r24, 6
    1256:	fc cf       	rjmp	.-8      	; 0x1250 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1258:	80 91 78 00 	lds	r24, 0x0078
    125c:	90 91 79 00 	lds	r25, 0x0079
    1260:	90 93 70 01 	sts	0x0170, r25
    1264:	80 93 6f 01 	sts	0x016F, r24
            adc_trigger_low_gain();
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 7c 00 	sts	0x007C, r24
    126e:	93 ea       	ldi	r25, 0xA3	; 163
    1270:	90 93 7a 00 	sts	0x007A, r25
    1274:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1278:	ff 91       	pop	r31
    127a:	ef 91       	pop	r30
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    129e:	c9 01       	movw	r24, r18
    12a0:	87 58       	subi	r24, 0x87	; 135
    12a2:	91 09       	sbc	r25, r1
    12a4:	84 37       	cpi	r24, 0x74	; 116
    12a6:	99 40       	sbci	r25, 0x09	; 9
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <__vector_23+0xb4>
    12aa:	52 c0       	rjmp	.+164    	; 0x1350 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    12ac:	26 58       	subi	r18, 0x86	; 134
    12ae:	31 09       	sbc	r19, r1
    12b0:	a4 ef       	ldi	r26, 0xF4	; 244
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__umulhisi3>
    12b8:	aa 27       	eor	r26, r26
    12ba:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	91 05       	cpc	r25, r1
    12c0:	a1 05       	cpc	r26, r1
    12c2:	b1 05       	cpc	r27, r1
    12c4:	08 f4       	brcc	.+2      	; 0x12c8 <__vector_23+0xd0>
    12c6:	7b c0       	rjmp	.+246    	; 0x13be <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    12c8:	40 93 4e 01 	sts	0x014E, r20
                if (rx_leadingbyte) {
    12cc:	80 91 92 01 	lds	r24, 0x0192
    12d0:	81 11       	cpse	r24, r1
    12d2:	52 c0       	rjmp	.+164    	; 0x1378 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    12d4:	80 91 6c 01 	lds	r24, 0x016C
    12d8:	e8 2f       	mov	r30, r24
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	e8 56       	subi	r30, 0x68	; 104
    12de:	fe 4f       	sbci	r31, 0xFE	; 254
    12e0:	90 91 a6 01 	lds	r25, 0x01A6
    12e4:	90 83       	st	Z, r25
                    rx_byteindex++;
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	80 93 6c 01 	sts	0x016C, r24
                    if (rx_byteindex == sizeof(message_t)) {
    12ec:	8c 30       	cpi	r24, 0x0C	; 12
    12ee:	21 f6       	brne	.-120    	; 0x1278 <__vector_23+0x80>
                        rx_timer_off();
    12f0:	10 92 81 00 	sts	0x0081, r1
    12f4:	10 92 85 00 	sts	0x0085, r1
    12f8:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12fc:	40 93 92 01 	sts	0x0192, r20
                        rx_busy = 0;
    1300:	10 92 75 01 	sts	0x0175, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1304:	c0 91 a2 01 	lds	r28, 0x01A2
    1308:	d0 91 a3 01 	lds	r29, 0x01A3
    130c:	88 e9       	ldi	r24, 0x98	; 152
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	0e 94 06 0b 	call	0x160c	; 0x160c <message_crc>
    1314:	c8 17       	cp	r28, r24
    1316:	d9 07       	cpc	r29, r25
    1318:	09 f0       	breq	.+2      	; 0x131c <__vector_23+0x124>
    131a:	ae cf       	rjmp	.-164    	; 0x1278 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    131c:	80 91 a1 01 	lds	r24, 0x01A1
    1320:	87 ff       	sbrs	r24, 7
    1322:	61 c0       	rjmp	.+194    	; 0x13e6 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1324:	98 e7       	ldi	r25, 0x78	; 120
    1326:	98 0f       	add	r25, r24
    1328:	93 30       	cpi	r25, 0x03	; 3
    132a:	30 f0       	brcs	.+12     	; 0x1338 <__vector_23+0x140>
        motors_off();
    132c:	53 98       	cbi	0x0a, 3	; 10
    132e:	23 98       	cbi	0x04, 3	; 4
    1330:	10 92 b4 00 	sts	0x00B4, r1
    1334:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	fc 01       	movw	r30, r24
    133c:	e0 58       	subi	r30, 0x80	; 128
    133e:	f1 09       	sbc	r31, r1
    1340:	eb 30       	cpi	r30, 0x0B	; 11
    1342:	f1 05       	cpc	r31, r1
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__vector_23+0x150>
    1346:	98 cf       	rjmp	.-208    	; 0x1278 <__vector_23+0x80>
    1348:	e5 5c       	subi	r30, 0xC5	; 197
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1350:	10 92 81 00 	sts	0x0081, r1
    1354:	10 92 85 00 	sts	0x0085, r1
    1358:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    135c:	40 93 4e 01 	sts	0x014E, r20
            rx_leadingbyte = 1;
    1360:	40 93 92 01 	sts	0x0192, r20
            rx_busy = 0;
    1364:	10 92 75 01 	sts	0x0175, r1
            adc_trigger_high_gain();
    1368:	10 92 7c 00 	sts	0x007C, r1
    136c:	83 ea       	ldi	r24, 0xA3	; 163
    136e:	80 93 7a 00 	sts	0x007A, r24
    1372:	40 93 7b 00 	sts	0x007B, r20
    1376:	80 cf       	rjmp	.-256    	; 0x1278 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1378:	80 91 7a 00 	lds	r24, 0x007A
    137c:	86 fd       	sbrc	r24, 6
    137e:	fc cf       	rjmp	.-8      	; 0x1378 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1380:	80 91 78 00 	lds	r24, 0x0078
    1384:	90 91 79 00 	lds	r25, 0x0079
    1388:	90 93 6e 01 	sts	0x016E, r25
    138c:	80 93 6d 01 	sts	0x016D, r24
                    adc_trigger_high_gain();
    1390:	10 92 7c 00 	sts	0x007C, r1
    1394:	83 ea       	ldi	r24, 0xA3	; 163
    1396:	80 93 7a 00 	sts	0x007A, r24
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    13a0:	90 91 a6 01 	lds	r25, 0x01A6
    13a4:	99 23       	and	r25, r25
    13a6:	d1 f0       	breq	.+52     	; 0x13dc <__vector_23+0x1e4>
                        rx_timer_off();
    13a8:	10 92 81 00 	sts	0x0081, r1
    13ac:	10 92 85 00 	sts	0x0085, r1
    13b0:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    13b4:	80 93 92 01 	sts	0x0192, r24
                        rx_busy = 0;
    13b8:	10 92 75 01 	sts	0x0175, r1
    13bc:	5d cf       	rjmp	.-326    	; 0x1278 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	f9 01       	movw	r30, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <__vector_23+0x1d2>
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <__vector_23+0x1ce>
    13ce:	cf 01       	movw	r24, r30
    13d0:	90 91 a6 01 	lds	r25, 0x01A6
    13d4:	89 2b       	or	r24, r25
    13d6:	80 93 a6 01 	sts	0x01A6, r24
    13da:	4e cf       	rjmp	.-356    	; 0x1278 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    13dc:	10 92 92 01 	sts	0x0192, r1
                        rx_byteindex = 0;
    13e0:	10 92 6c 01 	sts	0x016C, r1
    13e4:	49 cf       	rjmp	.-366    	; 0x1278 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    13e6:	e0 91 13 01 	lds	r30, 0x0113
    13ea:	f0 91 14 01 	lds	r31, 0x0114
    13ee:	6d e6       	ldi	r22, 0x6D	; 109
    13f0:	71 e0       	ldi	r23, 0x01	; 1
    13f2:	88 e9       	ldi	r24, 0x98	; 152
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	09 95       	icall
    13f8:	3f cf       	rjmp	.-386    	; 0x1278 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13fa:	80 91 98 01 	lds	r24, 0x0198
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	09 f4       	brne	.+2      	; 0x1404 <__vector_23+0x20c>
    1402:	dd c0       	rjmp	.+442    	; 0x15be <__vector_23+0x3c6>
    1404:	08 f4       	brcc	.+2      	; 0x1408 <__vector_23+0x210>
    1406:	ba c0       	rjmp	.+372    	; 0x157c <__vector_23+0x384>
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	09 f4       	brne	.+2      	; 0x140e <__vector_23+0x216>
    140c:	c6 c0       	rjmp	.+396    	; 0x159a <__vector_23+0x3a2>
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	09 f0       	breq	.+2      	; 0x1414 <__vector_23+0x21c>
    1412:	b1 c0       	rjmp	.+354    	; 0x1576 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1414:	80 91 39 01 	lds	r24, 0x0139
    1418:	90 91 9e 01 	lds	r25, 0x019E
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	09 f4       	brne	.+2      	; 0x1422 <__vector_23+0x22a>
    1420:	e3 c0       	rjmp	.+454    	; 0x15e8 <__vector_23+0x3f0>
    1422:	80 91 9d 01 	lds	r24, 0x019D
                        prev_motion = MOVE_STOP;
    1426:	10 92 3a 01 	sts	0x013A, r1
                        cur_motion = MOVE_STRAIGHT;
    142a:	23 e0       	ldi	r18, 0x03	; 3
    142c:	20 93 39 01 	sts	0x0139, r18
                        kilo_straight_left = calibmsg->straight_left;
    1430:	80 93 a9 01 	sts	0x01A9, r24
                        kilo_straight_right = calibmsg->straight_right;
    1434:	90 93 aa 01 	sts	0x01AA, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1438:	80 91 3b 01 	lds	r24, 0x013B
    143c:	86 30       	cpi	r24, 0x06	; 6
    143e:	09 f4       	brne	.+2      	; 0x1442 <__vector_23+0x24a>
    1440:	1b cf       	rjmp	.-458    	; 0x1278 <__vector_23+0x80>
                motors_on();
    1442:	53 9a       	sbi	0x0a, 3	; 10
    1444:	23 9a       	sbi	0x04, 3	; 4
    1446:	10 92 b4 00 	sts	0x00B4, r1
    144a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    144e:	86 e0       	ldi	r24, 0x06	; 6
    1450:	80 93 3b 01 	sts	0x013B, r24
    1454:	11 cf       	rjmp	.-478    	; 0x1278 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1456:	80 91 3b 01 	lds	r24, 0x013B
    145a:	86 30       	cpi	r24, 0x06	; 6
    145c:	99 f0       	breq	.+38     	; 0x1484 <__vector_23+0x28c>
                motors_on();
    145e:	53 9a       	sbi	0x0a, 3	; 10
    1460:	23 9a       	sbi	0x04, 3	; 4
    1462:	10 92 b4 00 	sts	0x00B4, r1
    1466:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    146a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    146c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    146e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1470:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1472:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1474:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1476:	10 92 39 01 	sts	0x0139, r1
    147a:	10 92 3a 01 	sts	0x013A, r1
                kilo_state = MOVING;
    147e:	86 e0       	ldi	r24, 0x06	; 6
    1480:	80 93 3b 01 	sts	0x013B, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9c 01       	movw	r18, r24
    148a:	00 90 98 01 	lds	r0, 0x0198
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <__vector_23+0x29c>
    1490:	22 0f       	add	r18, r18
    1492:	33 1f       	adc	r19, r19
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <__vector_23+0x298>
    1498:	80 91 a7 01 	lds	r24, 0x01A7
    149c:	90 91 a8 01 	lds	r25, 0x01A8
    14a0:	82 23       	and	r24, r18
    14a2:	93 23       	and	r25, r19
    14a4:	89 2b       	or	r24, r25
    14a6:	09 f0       	breq	.+2      	; 0x14aa <__vector_23+0x2b2>
    14a8:	86 c0       	rjmp	.+268    	; 0x15b6 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    14aa:	10 92 39 01 	sts	0x0139, r1
    14ae:	e4 ce       	rjmp	.-568    	; 0x1278 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 3b 01 	sts	0x013B, r24
    14b6:	e0 ce       	rjmp	.-576    	; 0x1278 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    14b8:	e0 e0       	ldi	r30, 0x00	; 0
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    14be:	80 91 6e 00 	lds	r24, 0x006E
    14c2:	8d 7f       	andi	r24, 0xFD	; 253
    14c4:	80 93 6e 00 	sts	0x006E, r24
    14c8:	16 bc       	out	0x26, r1	; 38
            bootload();
    14ca:	e0 e0       	ldi	r30, 0x00	; 0
    14cc:	f0 e7       	ldi	r31, 0x70	; 112
    14ce:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    14d0:	10 92 3b 01 	sts	0x013B, r1
    14d4:	d1 ce       	rjmp	.-606    	; 0x1278 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	80 93 3b 01 	sts	0x013B, r24
    14dc:	cd ce       	rjmp	.-614    	; 0x1278 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    14de:	85 e0       	ldi	r24, 0x05	; 5
    14e0:	80 93 3b 01 	sts	0x013B, r24
    14e4:	c9 ce       	rjmp	.-622    	; 0x1278 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    14e6:	80 91 3b 01 	lds	r24, 0x013B
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <__vector_23+0x2f8>
    14ee:	c4 ce       	rjmp	.-632    	; 0x1278 <__vector_23+0x80>
    14f0:	80 91 3b 01 	lds	r24, 0x013B
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	09 f4       	brne	.+2      	; 0x14fa <__vector_23+0x302>
    14f8:	bf ce       	rjmp	.-642    	; 0x1278 <__vector_23+0x80>
                motors_on();
    14fa:	53 9a       	sbi	0x0a, 3	; 10
    14fc:	23 9a       	sbi	0x04, 3	; 4
    14fe:	10 92 b4 00 	sts	0x00B4, r1
    1502:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	80 93 3b 01 	sts	0x013B, r24
    150c:	b5 ce       	rjmp	.-662    	; 0x1278 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    150e:	80 91 3b 01 	lds	r24, 0x013B
    1512:	86 30       	cpi	r24, 0x06	; 6
    1514:	09 f0       	breq	.+2      	; 0x1518 <__vector_23+0x320>
    1516:	b0 ce       	rjmp	.-672    	; 0x1278 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1518:	60 91 a7 01 	lds	r22, 0x01A7
    151c:	80 eb       	ldi	r24, 0xB0	; 176
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 03 11 	call	0x2206	; 0x2206 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1524:	60 91 a8 01 	lds	r22, 0x01A8
    1528:	81 eb       	ldi	r24, 0xB1	; 177
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 03 11 	call	0x2206	; 0x2206 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1530:	60 91 ab 01 	lds	r22, 0x01AB
    1534:	85 e0       	ldi	r24, 0x05	; 5
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 03 11 	call	0x2206	; 0x2206 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    153c:	60 91 97 01 	lds	r22, 0x0197
    1540:	89 e0       	ldi	r24, 0x09	; 9
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 03 11 	call	0x2206	; 0x2206 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1548:	60 91 a9 01 	lds	r22, 0x01A9
    154c:	8c e0       	ldi	r24, 0x0C	; 12
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 03 11 	call	0x2206	; 0x2206 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1554:	60 91 aa 01 	lds	r22, 0x01AA
    1558:	84 e1       	ldi	r24, 0x14	; 20
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 03 11 	call	0x2206	; 0x2206 <eeprom_write_byte>
                        motors_off();
    1560:	53 98       	cbi	0x0a, 3	; 10
    1562:	23 98       	cbi	0x04, 3	; 4
    1564:	10 92 b4 00 	sts	0x00B4, r1
    1568:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 3b 01 	sts	0x013B, r24
    1572:	80 91 98 01 	lds	r24, 0x0198
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1576:	81 11       	cpse	r24, r1
    1578:	5f cf       	rjmp	.-322    	; 0x1438 <__vector_23+0x240>
    157a:	7e ce       	rjmp	.-772    	; 0x1278 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    157c:	88 23       	and	r24, r24
    157e:	39 f2       	breq	.-114    	; 0x150e <__vector_23+0x316>
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1584:	80 91 99 01 	lds	r24, 0x0199
    1588:	90 91 9a 01 	lds	r25, 0x019A
    158c:	90 93 a8 01 	sts	0x01A8, r25
    1590:	80 93 a7 01 	sts	0x01A7, r24
                    cur_motion = MOVE_STOP;
    1594:	10 92 39 01 	sts	0x0139, r1
    1598:	4f cf       	rjmp	.-354    	; 0x1438 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    159a:	80 91 39 01 	lds	r24, 0x0139
    159e:	82 30       	cpi	r24, 0x02	; 2
    15a0:	71 f1       	breq	.+92     	; 0x15fe <__vector_23+0x406>
    15a2:	80 91 9c 01 	lds	r24, 0x019C
                        prev_motion = MOVE_STOP;
    15a6:	10 92 3a 01 	sts	0x013A, r1
                        cur_motion = MOVE_RIGHT;
    15aa:	92 e0       	ldi	r25, 0x02	; 2
    15ac:	90 93 39 01 	sts	0x0139, r25
                        kilo_turn_right = calibmsg->turn_right;
    15b0:	80 93 97 01 	sts	0x0197, r24
    15b4:	41 cf       	rjmp	.-382    	; 0x1438 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 93 39 01 	sts	0x0139, r24
    15bc:	5d ce       	rjmp	.-838    	; 0x1278 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    15be:	80 91 39 01 	lds	r24, 0x0139
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	51 f0       	breq	.+20     	; 0x15da <__vector_23+0x3e2>
    15c6:	80 91 9b 01 	lds	r24, 0x019B
                        prev_motion = MOVE_STOP;
    15ca:	10 92 3a 01 	sts	0x013A, r1
                        cur_motion = MOVE_LEFT;
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	90 93 39 01 	sts	0x0139, r25
                        kilo_turn_left = calibmsg->turn_left;
    15d4:	80 93 ab 01 	sts	0x01AB, r24
    15d8:	2f cf       	rjmp	.-418    	; 0x1438 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    15da:	80 91 9b 01 	lds	r24, 0x019B
    15de:	90 91 ab 01 	lds	r25, 0x01AB
    15e2:	89 13       	cpse	r24, r25
    15e4:	f2 cf       	rjmp	.-28     	; 0x15ca <__vector_23+0x3d2>
    15e6:	28 cf       	rjmp	.-432    	; 0x1438 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    15e8:	80 91 aa 01 	lds	r24, 0x01AA
    15ec:	98 13       	cpse	r25, r24
    15ee:	19 cf       	rjmp	.-462    	; 0x1422 <__vector_23+0x22a>
    15f0:	80 91 9d 01 	lds	r24, 0x019D
    15f4:	20 91 a9 01 	lds	r18, 0x01A9
    15f8:	82 13       	cpse	r24, r18
    15fa:	15 cf       	rjmp	.-470    	; 0x1426 <__vector_23+0x22e>
    15fc:	1d cf       	rjmp	.-454    	; 0x1438 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    15fe:	80 91 9c 01 	lds	r24, 0x019C
    1602:	90 91 97 01 	lds	r25, 0x0197
    1606:	89 13       	cpse	r24, r25
    1608:	ce cf       	rjmp	.-100    	; 0x15a6 <__vector_23+0x3ae>
    160a:	16 cf       	rjmp	.-468    	; 0x1438 <__vector_23+0x240>

0000160c <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    160c:	fc 01       	movw	r30, r24
    160e:	ac 01       	movw	r20, r24
    1610:	46 5f       	subi	r20, 0xF6	; 246
    1612:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1618:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    161a:	82 27       	eor	r24, r18
    161c:	08 2e       	mov	r0, r24
    161e:	82 95       	swap	r24
    1620:	80 7f       	andi	r24, 0xF0	; 240
    1622:	80 25       	eor	r24, r0
    1624:	09 2e       	mov	r0, r25
    1626:	98 2f       	mov	r25, r24
    1628:	82 95       	swap	r24
    162a:	8f 70       	andi	r24, 0x0F	; 15
    162c:	08 26       	eor	r0, r24
    162e:	86 95       	lsr	r24
    1630:	98 27       	eor	r25, r24
    1632:	89 27       	eor	r24, r25
    1634:	88 0f       	add	r24, r24
    1636:	88 0f       	add	r24, r24
    1638:	88 0f       	add	r24, r24
    163a:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    163c:	e4 17       	cp	r30, r20
    163e:	f5 07       	cpc	r31, r21
    1640:	59 f7       	brne	.-42     	; 0x1618 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1642:	08 95       	ret

00001644 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1644:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1646:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1648:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    164a:	20 91 6b 01 	lds	r18, 0x016B
    or tmpreg1, ddrreg
    164e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1650:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1652:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1654:	30 91 6b 01 	lds	r19, 0x016B
    1658:	20 30       	cpi	r18, 0x00	; 0
    165a:	29 f0       	breq	.+10     	; 0x1666 <message_send+0x22>
    165c:	00 00       	nop
    165e:	25 b1       	in	r18, 0x05	; 5
    1660:	23 2b       	or	r18, r19
    1662:	25 b9       	out	0x05, r18	; 5
    1664:	04 c0       	rjmp	.+8      	; 0x166e <message_send+0x2a>
    1666:	00 00       	nop
    1668:	00 00       	nop
    166a:	00 00       	nop
    166c:	00 c0       	rjmp	.+0      	; 0x166e <message_send+0x2a>
    166e:	00 00       	nop
    1670:	00 00       	nop
    1672:	00 00       	nop
    1674:	30 95       	com	r19
    1676:	25 b1       	in	r18, 0x05	; 5
    1678:	23 23       	and	r18, r19
    167a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    167c:	2e ea       	ldi	r18, 0xAE	; 174
    167e:	2a 95       	dec	r18
    1680:	f1 f7       	brne	.-4      	; 0x167e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1682:	2b ee       	ldi	r18, 0xEB	; 235

00001684 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1684:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1686:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1688:	0a c0       	rjmp	.+20     	; 0x169e <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    168a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    168c:	30 91 6b 01 	lds	r19, 0x016B
    com tmpreg2
    1690:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1692:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1694:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1696:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1698:	0f be       	out	0x3f, r0	; 63
    return 0
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	08 95       	ret

0000169e <nocollision>:
nocollision:
    nop
    169e:	00 00       	nop
    dec tmpreg1
    16a0:	2a 95       	dec	r18
    brne checkcollision
    16a2:	81 f7       	brne	.-32     	; 0x1684 <checkcollision>

    ldi tmpreg1, 0x01
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    16a6:	30 91 6b 01 	lds	r19, 0x016B
    16aa:	20 30       	cpi	r18, 0x00	; 0
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <nocollision+0x1a>
    16ae:	00 00       	nop
    16b0:	25 b1       	in	r18, 0x05	; 5
    16b2:	23 2b       	or	r18, r19
    16b4:	25 b9       	out	0x05, r18	; 5
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <nocollision+0x22>
    16b8:	00 00       	nop
    16ba:	00 00       	nop
    16bc:	00 00       	nop
    16be:	00 c0       	rjmp	.+0      	; 0x16c0 <nocollision+0x22>
    16c0:	00 00       	nop
    16c2:	00 00       	nop
    16c4:	00 00       	nop
    16c6:	30 95       	com	r19
    16c8:	25 b1       	in	r18, 0x05	; 5
    16ca:	23 23       	and	r18, r19
    16cc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    16ce:	00 00       	nop
    16d0:	24 e5       	ldi	r18, 0x54	; 84
    16d2:	2a 95       	dec	r18
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    16d6:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    16d8:	8c e0       	ldi	r24, 0x0C	; 12

000016da <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    16da:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    16de:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    16e0:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    16e2:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    16e4:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    16e6:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    16ea:	50 e0       	ldi	r21, 0x00	; 0

000016ec <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    16ec:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    16ee:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    16f0:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    16f2:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    16f4:	30 91 6b 01 	lds	r19, 0x016B
    16f8:	20 30       	cpi	r18, 0x00	; 0
    16fa:	29 f0       	breq	.+10     	; 0x1706 <sendbit+0x1a>
    16fc:	00 00       	nop
    16fe:	25 b1       	in	r18, 0x05	; 5
    1700:	23 2b       	or	r18, r19
    1702:	25 b9       	out	0x05, r18	; 5
    1704:	04 c0       	rjmp	.+8      	; 0x170e <sendbit+0x22>
    1706:	00 00       	nop
    1708:	00 00       	nop
    170a:	00 00       	nop
    170c:	00 c0       	rjmp	.+0      	; 0x170e <sendbit+0x22>
    170e:	00 00       	nop
    1710:	00 00       	nop
    1712:	00 00       	nop
    1714:	30 95       	com	r19
    1716:	25 b1       	in	r18, 0x05	; 5
    1718:	23 23       	and	r18, r19
    171a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    171c:	00 00       	nop
    171e:	21 e5       	ldi	r18, 0x51	; 81
    1720:	2a 95       	dec	r18
    1722:	f1 f7       	brne	.-4      	; 0x1720 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1724:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1726:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1728:	9a 95       	dec	r25
    brne sendbit
    172a:	01 f7       	brne	.-64     	; 0x16ec <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    172c:	8a 95       	dec	r24
    brne sendbyte
    172e:	a9 f6       	brne	.-86     	; 0x16da <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1730:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1732:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1734:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1736:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1738:	30 91 6b 01 	lds	r19, 0x016B
    com tmpreg2
    173c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    173e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1740:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1742:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1744:	0f be       	out	0x3f, r0	; 63
    return 1
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	08 95       	ret

0000174a <main>:
    return &message;
}

int main()
{
    kilo_init();
    174a:	0e 94 36 02 	call	0x46c	; 0x46c <kilo_init>
    debug_init();
    174e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <debug_init>
    kilo_message_rx = message_rx;
    1752:	86 ea       	ldi	r24, 0xA6	; 166
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	90 93 14 01 	sts	0x0114, r25
    175a:	80 93 13 01 	sts	0x0113, r24
    kilo_message_tx = message_tx;
    175e:	8a e7       	ldi	r24, 0x7A	; 122
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	90 93 12 01 	sts	0x0112, r25
    1766:	80 93 11 01 	sts	0x0111, r24
    kilo_start(setup, loop);
    176a:	65 eb       	ldi	r22, 0xB5	; 181
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	8d e7       	ldi	r24, 0x7D	; 125
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 32 03 	call	0x664	; 0x664 <kilo_start>
    
    return 0;
}
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	08 95       	ret

0000177c <__divmodhi4>:
    177c:	97 fb       	bst	r25, 7
    177e:	07 2e       	mov	r0, r23
    1780:	16 f4       	brtc	.+4      	; 0x1786 <__divmodhi4+0xa>
    1782:	00 94       	com	r0
    1784:	07 d0       	rcall	.+14     	; 0x1794 <__divmodhi4_neg1>
    1786:	77 fd       	sbrc	r23, 7
    1788:	09 d0       	rcall	.+18     	; 0x179c <__divmodhi4_neg2>
    178a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__udivmodhi4>
    178e:	07 fc       	sbrc	r0, 7
    1790:	05 d0       	rcall	.+10     	; 0x179c <__divmodhi4_neg2>
    1792:	3e f4       	brtc	.+14     	; 0x17a2 <__divmodhi4_exit>

00001794 <__divmodhi4_neg1>:
    1794:	90 95       	com	r25
    1796:	81 95       	neg	r24
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	08 95       	ret

0000179c <__divmodhi4_neg2>:
    179c:	70 95       	com	r23
    179e:	61 95       	neg	r22
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255

000017a2 <__divmodhi4_exit>:
    17a2:	08 95       	ret

000017a4 <__tablejump2__>:
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	05 90       	lpm	r0, Z+
    17aa:	f4 91       	lpm	r31, Z
    17ac:	e0 2d       	mov	r30, r0
    17ae:	09 94       	ijmp

000017b0 <__umulhisi3>:
    17b0:	a2 9f       	mul	r26, r18
    17b2:	b0 01       	movw	r22, r0
    17b4:	b3 9f       	mul	r27, r19
    17b6:	c0 01       	movw	r24, r0
    17b8:	a3 9f       	mul	r26, r19
    17ba:	70 0d       	add	r23, r0
    17bc:	81 1d       	adc	r24, r1
    17be:	11 24       	eor	r1, r1
    17c0:	91 1d       	adc	r25, r1
    17c2:	b2 9f       	mul	r27, r18
    17c4:	70 0d       	add	r23, r0
    17c6:	81 1d       	adc	r24, r1
    17c8:	11 24       	eor	r1, r1
    17ca:	91 1d       	adc	r25, r1
    17cc:	08 95       	ret

000017ce <__udivmodhi4>:
    17ce:	aa 1b       	sub	r26, r26
    17d0:	bb 1b       	sub	r27, r27
    17d2:	51 e1       	ldi	r21, 0x11	; 17
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <__udivmodhi4_ep>

000017d6 <__udivmodhi4_loop>:
    17d6:	aa 1f       	adc	r26, r26
    17d8:	bb 1f       	adc	r27, r27
    17da:	a6 17       	cp	r26, r22
    17dc:	b7 07       	cpc	r27, r23
    17de:	10 f0       	brcs	.+4      	; 0x17e4 <__udivmodhi4_ep>
    17e0:	a6 1b       	sub	r26, r22
    17e2:	b7 0b       	sbc	r27, r23

000017e4 <__udivmodhi4_ep>:
    17e4:	88 1f       	adc	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	5a 95       	dec	r21
    17ea:	a9 f7       	brne	.-22     	; 0x17d6 <__udivmodhi4_loop>
    17ec:	80 95       	com	r24
    17ee:	90 95       	com	r25
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	08 95       	ret

000017f6 <__subsf3>:
    17f6:	50 58       	subi	r21, 0x80	; 128

000017f8 <__addsf3>:
    17f8:	bb 27       	eor	r27, r27
    17fa:	aa 27       	eor	r26, r26
    17fc:	0e 94 13 0c 	call	0x1826	; 0x1826 <__addsf3x>
    1800:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_round>
    1804:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__fp_pscA>
    1808:	38 f0       	brcs	.+14     	; 0x1818 <__addsf3+0x20>
    180a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_pscB>
    180e:	20 f0       	brcs	.+8      	; 0x1818 <__addsf3+0x20>
    1810:	39 f4       	brne	.+14     	; 0x1820 <__addsf3+0x28>
    1812:	9f 3f       	cpi	r25, 0xFF	; 255
    1814:	19 f4       	brne	.+6      	; 0x181c <__addsf3+0x24>
    1816:	26 f4       	brtc	.+8      	; 0x1820 <__addsf3+0x28>
    1818:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_nan>
    181c:	0e f4       	brtc	.+2      	; 0x1820 <__addsf3+0x28>
    181e:	e0 95       	com	r30
    1820:	e7 fb       	bst	r30, 7
    1822:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>

00001826 <__addsf3x>:
    1826:	e9 2f       	mov	r30, r25
    1828:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_split3>
    182c:	58 f3       	brcs	.-42     	; 0x1804 <__addsf3+0xc>
    182e:	ba 17       	cp	r27, r26
    1830:	62 07       	cpc	r22, r18
    1832:	73 07       	cpc	r23, r19
    1834:	84 07       	cpc	r24, r20
    1836:	95 07       	cpc	r25, r21
    1838:	20 f0       	brcs	.+8      	; 0x1842 <__addsf3x+0x1c>
    183a:	79 f4       	brne	.+30     	; 0x185a <__addsf3x+0x34>
    183c:	a6 f5       	brtc	.+104    	; 0x18a6 <__addsf3x+0x80>
    183e:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_zero>
    1842:	0e f4       	brtc	.+2      	; 0x1846 <__addsf3x+0x20>
    1844:	e0 95       	com	r30
    1846:	0b 2e       	mov	r0, r27
    1848:	ba 2f       	mov	r27, r26
    184a:	a0 2d       	mov	r26, r0
    184c:	0b 01       	movw	r0, r22
    184e:	b9 01       	movw	r22, r18
    1850:	90 01       	movw	r18, r0
    1852:	0c 01       	movw	r0, r24
    1854:	ca 01       	movw	r24, r20
    1856:	a0 01       	movw	r20, r0
    1858:	11 24       	eor	r1, r1
    185a:	ff 27       	eor	r31, r31
    185c:	59 1b       	sub	r21, r25
    185e:	99 f0       	breq	.+38     	; 0x1886 <__addsf3x+0x60>
    1860:	59 3f       	cpi	r21, 0xF9	; 249
    1862:	50 f4       	brcc	.+20     	; 0x1878 <__addsf3x+0x52>
    1864:	50 3e       	cpi	r21, 0xE0	; 224
    1866:	68 f1       	brcs	.+90     	; 0x18c2 <__addsf3x+0x9c>
    1868:	1a 16       	cp	r1, r26
    186a:	f0 40       	sbci	r31, 0x00	; 0
    186c:	a2 2f       	mov	r26, r18
    186e:	23 2f       	mov	r18, r19
    1870:	34 2f       	mov	r19, r20
    1872:	44 27       	eor	r20, r20
    1874:	58 5f       	subi	r21, 0xF8	; 248
    1876:	f3 cf       	rjmp	.-26     	; 0x185e <__addsf3x+0x38>
    1878:	46 95       	lsr	r20
    187a:	37 95       	ror	r19
    187c:	27 95       	ror	r18
    187e:	a7 95       	ror	r26
    1880:	f0 40       	sbci	r31, 0x00	; 0
    1882:	53 95       	inc	r21
    1884:	c9 f7       	brne	.-14     	; 0x1878 <__addsf3x+0x52>
    1886:	7e f4       	brtc	.+30     	; 0x18a6 <__addsf3x+0x80>
    1888:	1f 16       	cp	r1, r31
    188a:	ba 0b       	sbc	r27, r26
    188c:	62 0b       	sbc	r22, r18
    188e:	73 0b       	sbc	r23, r19
    1890:	84 0b       	sbc	r24, r20
    1892:	ba f0       	brmi	.+46     	; 0x18c2 <__addsf3x+0x9c>
    1894:	91 50       	subi	r25, 0x01	; 1
    1896:	a1 f0       	breq	.+40     	; 0x18c0 <__addsf3x+0x9a>
    1898:	ff 0f       	add	r31, r31
    189a:	bb 1f       	adc	r27, r27
    189c:	66 1f       	adc	r22, r22
    189e:	77 1f       	adc	r23, r23
    18a0:	88 1f       	adc	r24, r24
    18a2:	c2 f7       	brpl	.-16     	; 0x1894 <__addsf3x+0x6e>
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <__addsf3x+0x9c>
    18a6:	ba 0f       	add	r27, r26
    18a8:	62 1f       	adc	r22, r18
    18aa:	73 1f       	adc	r23, r19
    18ac:	84 1f       	adc	r24, r20
    18ae:	48 f4       	brcc	.+18     	; 0x18c2 <__addsf3x+0x9c>
    18b0:	87 95       	ror	r24
    18b2:	77 95       	ror	r23
    18b4:	67 95       	ror	r22
    18b6:	b7 95       	ror	r27
    18b8:	f7 95       	ror	r31
    18ba:	9e 3f       	cpi	r25, 0xFE	; 254
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <__addsf3x+0x9a>
    18be:	b0 cf       	rjmp	.-160    	; 0x1820 <__addsf3+0x28>
    18c0:	93 95       	inc	r25
    18c2:	88 0f       	add	r24, r24
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <__addsf3x+0xa2>
    18c6:	99 27       	eor	r25, r25
    18c8:	ee 0f       	add	r30, r30
    18ca:	97 95       	ror	r25
    18cc:	87 95       	ror	r24
    18ce:	08 95       	ret

000018d0 <__divsf3>:
    18d0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__divsf3x>
    18d4:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_round>
    18d8:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_pscB>
    18dc:	58 f0       	brcs	.+22     	; 0x18f4 <__divsf3+0x24>
    18de:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__fp_pscA>
    18e2:	40 f0       	brcs	.+16     	; 0x18f4 <__divsf3+0x24>
    18e4:	29 f4       	brne	.+10     	; 0x18f0 <__divsf3+0x20>
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	29 f0       	breq	.+10     	; 0x18f4 <__divsf3+0x24>
    18ea:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    18ee:	51 11       	cpse	r21, r1
    18f0:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    18f4:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_nan>

000018f8 <__divsf3x>:
    18f8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_split3>
    18fc:	68 f3       	brcs	.-38     	; 0x18d8 <__divsf3+0x8>

000018fe <__divsf3_pse>:
    18fe:	99 23       	and	r25, r25
    1900:	b1 f3       	breq	.-20     	; 0x18ee <__divsf3+0x1e>
    1902:	55 23       	and	r21, r21
    1904:	91 f3       	breq	.-28     	; 0x18ea <__divsf3+0x1a>
    1906:	95 1b       	sub	r25, r21
    1908:	55 0b       	sbc	r21, r21
    190a:	bb 27       	eor	r27, r27
    190c:	aa 27       	eor	r26, r26
    190e:	62 17       	cp	r22, r18
    1910:	73 07       	cpc	r23, r19
    1912:	84 07       	cpc	r24, r20
    1914:	38 f0       	brcs	.+14     	; 0x1924 <__divsf3_pse+0x26>
    1916:	9f 5f       	subi	r25, 0xFF	; 255
    1918:	5f 4f       	sbci	r21, 0xFF	; 255
    191a:	22 0f       	add	r18, r18
    191c:	33 1f       	adc	r19, r19
    191e:	44 1f       	adc	r20, r20
    1920:	aa 1f       	adc	r26, r26
    1922:	a9 f3       	breq	.-22     	; 0x190e <__divsf3_pse+0x10>
    1924:	35 d0       	rcall	.+106    	; 0x1990 <__divsf3_pse+0x92>
    1926:	0e 2e       	mov	r0, r30
    1928:	3a f0       	brmi	.+14     	; 0x1938 <__divsf3_pse+0x3a>
    192a:	e0 e8       	ldi	r30, 0x80	; 128
    192c:	32 d0       	rcall	.+100    	; 0x1992 <__divsf3_pse+0x94>
    192e:	91 50       	subi	r25, 0x01	; 1
    1930:	50 40       	sbci	r21, 0x00	; 0
    1932:	e6 95       	lsr	r30
    1934:	00 1c       	adc	r0, r0
    1936:	ca f7       	brpl	.-14     	; 0x192a <__divsf3_pse+0x2c>
    1938:	2b d0       	rcall	.+86     	; 0x1990 <__divsf3_pse+0x92>
    193a:	fe 2f       	mov	r31, r30
    193c:	29 d0       	rcall	.+82     	; 0x1990 <__divsf3_pse+0x92>
    193e:	66 0f       	add	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	bb 1f       	adc	r27, r27
    1946:	26 17       	cp	r18, r22
    1948:	37 07       	cpc	r19, r23
    194a:	48 07       	cpc	r20, r24
    194c:	ab 07       	cpc	r26, r27
    194e:	b0 e8       	ldi	r27, 0x80	; 128
    1950:	09 f0       	breq	.+2      	; 0x1954 <__divsf3_pse+0x56>
    1952:	bb 0b       	sbc	r27, r27
    1954:	80 2d       	mov	r24, r0
    1956:	bf 01       	movw	r22, r30
    1958:	ff 27       	eor	r31, r31
    195a:	93 58       	subi	r25, 0x83	; 131
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	3a f0       	brmi	.+14     	; 0x196e <__divsf3_pse+0x70>
    1960:	9e 3f       	cpi	r25, 0xFE	; 254
    1962:	51 05       	cpc	r21, r1
    1964:	78 f0       	brcs	.+30     	; 0x1984 <__divsf3_pse+0x86>
    1966:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    196a:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    196e:	5f 3f       	cpi	r21, 0xFF	; 255
    1970:	e4 f3       	brlt	.-8      	; 0x196a <__divsf3_pse+0x6c>
    1972:	98 3e       	cpi	r25, 0xE8	; 232
    1974:	d4 f3       	brlt	.-12     	; 0x196a <__divsf3_pse+0x6c>
    1976:	86 95       	lsr	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	b7 95       	ror	r27
    197e:	f7 95       	ror	r31
    1980:	9f 5f       	subi	r25, 0xFF	; 255
    1982:	c9 f7       	brne	.-14     	; 0x1976 <__divsf3_pse+0x78>
    1984:	88 0f       	add	r24, r24
    1986:	91 1d       	adc	r25, r1
    1988:	96 95       	lsr	r25
    198a:	87 95       	ror	r24
    198c:	97 f9       	bld	r25, 7
    198e:	08 95       	ret
    1990:	e1 e0       	ldi	r30, 0x01	; 1
    1992:	66 0f       	add	r22, r22
    1994:	77 1f       	adc	r23, r23
    1996:	88 1f       	adc	r24, r24
    1998:	bb 1f       	adc	r27, r27
    199a:	62 17       	cp	r22, r18
    199c:	73 07       	cpc	r23, r19
    199e:	84 07       	cpc	r24, r20
    19a0:	ba 07       	cpc	r27, r26
    19a2:	20 f0       	brcs	.+8      	; 0x19ac <__divsf3_pse+0xae>
    19a4:	62 1b       	sub	r22, r18
    19a6:	73 0b       	sbc	r23, r19
    19a8:	84 0b       	sbc	r24, r20
    19aa:	ba 0b       	sbc	r27, r26
    19ac:	ee 1f       	adc	r30, r30
    19ae:	88 f7       	brcc	.-30     	; 0x1992 <__divsf3_pse+0x94>
    19b0:	e0 95       	com	r30
    19b2:	08 95       	ret

000019b4 <__fixsfsi>:
    19b4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__fixunssfsi>
    19b8:	68 94       	set
    19ba:	b1 11       	cpse	r27, r1
    19bc:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    19c0:	08 95       	ret

000019c2 <__fixunssfsi>:
    19c2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__fp_splitA>
    19c6:	88 f0       	brcs	.+34     	; 0x19ea <__fixunssfsi+0x28>
    19c8:	9f 57       	subi	r25, 0x7F	; 127
    19ca:	98 f0       	brcs	.+38     	; 0x19f2 <__fixunssfsi+0x30>
    19cc:	b9 2f       	mov	r27, r25
    19ce:	99 27       	eor	r25, r25
    19d0:	b7 51       	subi	r27, 0x17	; 23
    19d2:	b0 f0       	brcs	.+44     	; 0x1a00 <__fixunssfsi+0x3e>
    19d4:	e1 f0       	breq	.+56     	; 0x1a0e <__fixunssfsi+0x4c>
    19d6:	66 0f       	add	r22, r22
    19d8:	77 1f       	adc	r23, r23
    19da:	88 1f       	adc	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	1a f0       	brmi	.+6      	; 0x19e6 <__fixunssfsi+0x24>
    19e0:	ba 95       	dec	r27
    19e2:	c9 f7       	brne	.-14     	; 0x19d6 <__fixunssfsi+0x14>
    19e4:	14 c0       	rjmp	.+40     	; 0x1a0e <__fixunssfsi+0x4c>
    19e6:	b1 30       	cpi	r27, 0x01	; 1
    19e8:	91 f0       	breq	.+36     	; 0x1a0e <__fixunssfsi+0x4c>
    19ea:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__fp_zero>
    19ee:	b1 e0       	ldi	r27, 0x01	; 1
    19f0:	08 95       	ret
    19f2:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_zero>
    19f6:	67 2f       	mov	r22, r23
    19f8:	78 2f       	mov	r23, r24
    19fa:	88 27       	eor	r24, r24
    19fc:	b8 5f       	subi	r27, 0xF8	; 248
    19fe:	39 f0       	breq	.+14     	; 0x1a0e <__fixunssfsi+0x4c>
    1a00:	b9 3f       	cpi	r27, 0xF9	; 249
    1a02:	cc f3       	brlt	.-14     	; 0x19f6 <__fixunssfsi+0x34>
    1a04:	86 95       	lsr	r24
    1a06:	77 95       	ror	r23
    1a08:	67 95       	ror	r22
    1a0a:	b3 95       	inc	r27
    1a0c:	d9 f7       	brne	.-10     	; 0x1a04 <__fixunssfsi+0x42>
    1a0e:	3e f4       	brtc	.+14     	; 0x1a1e <__fixunssfsi+0x5c>
    1a10:	90 95       	com	r25
    1a12:	80 95       	com	r24
    1a14:	70 95       	com	r23
    1a16:	61 95       	neg	r22
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	08 95       	ret

00001a20 <__floatunsisf>:
    1a20:	e8 94       	clt
    1a22:	09 c0       	rjmp	.+18     	; 0x1a36 <__floatsisf+0x12>

00001a24 <__floatsisf>:
    1a24:	97 fb       	bst	r25, 7
    1a26:	3e f4       	brtc	.+14     	; 0x1a36 <__floatsisf+0x12>
    1a28:	90 95       	com	r25
    1a2a:	80 95       	com	r24
    1a2c:	70 95       	com	r23
    1a2e:	61 95       	neg	r22
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	99 23       	and	r25, r25
    1a38:	a9 f0       	breq	.+42     	; 0x1a64 <__floatsisf+0x40>
    1a3a:	f9 2f       	mov	r31, r25
    1a3c:	96 e9       	ldi	r25, 0x96	; 150
    1a3e:	bb 27       	eor	r27, r27
    1a40:	93 95       	inc	r25
    1a42:	f6 95       	lsr	r31
    1a44:	87 95       	ror	r24
    1a46:	77 95       	ror	r23
    1a48:	67 95       	ror	r22
    1a4a:	b7 95       	ror	r27
    1a4c:	f1 11       	cpse	r31, r1
    1a4e:	f8 cf       	rjmp	.-16     	; 0x1a40 <__floatsisf+0x1c>
    1a50:	fa f4       	brpl	.+62     	; 0x1a90 <__floatsisf+0x6c>
    1a52:	bb 0f       	add	r27, r27
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <__floatsisf+0x36>
    1a56:	60 ff       	sbrs	r22, 0
    1a58:	1b c0       	rjmp	.+54     	; 0x1a90 <__floatsisf+0x6c>
    1a5a:	6f 5f       	subi	r22, 0xFF	; 255
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	16 c0       	rjmp	.+44     	; 0x1a90 <__floatsisf+0x6c>
    1a64:	88 23       	and	r24, r24
    1a66:	11 f0       	breq	.+4      	; 0x1a6c <__floatsisf+0x48>
    1a68:	96 e9       	ldi	r25, 0x96	; 150
    1a6a:	11 c0       	rjmp	.+34     	; 0x1a8e <__floatsisf+0x6a>
    1a6c:	77 23       	and	r23, r23
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <__floatsisf+0x54>
    1a70:	9e e8       	ldi	r25, 0x8E	; 142
    1a72:	87 2f       	mov	r24, r23
    1a74:	76 2f       	mov	r23, r22
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <__floatsisf+0x5e>
    1a78:	66 23       	and	r22, r22
    1a7a:	71 f0       	breq	.+28     	; 0x1a98 <__floatsisf+0x74>
    1a7c:	96 e8       	ldi	r25, 0x86	; 134
    1a7e:	86 2f       	mov	r24, r22
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	2a f0       	brmi	.+10     	; 0x1a90 <__floatsisf+0x6c>
    1a86:	9a 95       	dec	r25
    1a88:	66 0f       	add	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	da f7       	brpl	.-10     	; 0x1a86 <__floatsisf+0x62>
    1a90:	88 0f       	add	r24, r24
    1a92:	96 95       	lsr	r25
    1a94:	87 95       	ror	r24
    1a96:	97 f9       	bld	r25, 7
    1a98:	08 95       	ret

00001a9a <__fp_inf>:
    1a9a:	97 f9       	bld	r25, 7
    1a9c:	9f 67       	ori	r25, 0x7F	; 127
    1a9e:	80 e8       	ldi	r24, 0x80	; 128
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	08 95       	ret

00001aa6 <__fp_nan>:
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
    1aa8:	80 ec       	ldi	r24, 0xC0	; 192
    1aaa:	08 95       	ret

00001aac <__fp_pscA>:
    1aac:	00 24       	eor	r0, r0
    1aae:	0a 94       	dec	r0
    1ab0:	16 16       	cp	r1, r22
    1ab2:	17 06       	cpc	r1, r23
    1ab4:	18 06       	cpc	r1, r24
    1ab6:	09 06       	cpc	r0, r25
    1ab8:	08 95       	ret

00001aba <__fp_pscB>:
    1aba:	00 24       	eor	r0, r0
    1abc:	0a 94       	dec	r0
    1abe:	12 16       	cp	r1, r18
    1ac0:	13 06       	cpc	r1, r19
    1ac2:	14 06       	cpc	r1, r20
    1ac4:	05 06       	cpc	r0, r21
    1ac6:	08 95       	ret

00001ac8 <__fp_round>:
    1ac8:	09 2e       	mov	r0, r25
    1aca:	03 94       	inc	r0
    1acc:	00 0c       	add	r0, r0
    1ace:	11 f4       	brne	.+4      	; 0x1ad4 <__fp_round+0xc>
    1ad0:	88 23       	and	r24, r24
    1ad2:	52 f0       	brmi	.+20     	; 0x1ae8 <__fp_round+0x20>
    1ad4:	bb 0f       	add	r27, r27
    1ad6:	40 f4       	brcc	.+16     	; 0x1ae8 <__fp_round+0x20>
    1ad8:	bf 2b       	or	r27, r31
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <__fp_round+0x18>
    1adc:	60 ff       	sbrs	r22, 0
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <__fp_round+0x20>
    1ae0:	6f 5f       	subi	r22, 0xFF	; 255
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	08 95       	ret

00001aea <__fp_split3>:
    1aea:	57 fd       	sbrc	r21, 7
    1aec:	90 58       	subi	r25, 0x80	; 128
    1aee:	44 0f       	add	r20, r20
    1af0:	55 1f       	adc	r21, r21
    1af2:	59 f0       	breq	.+22     	; 0x1b0a <__fp_splitA+0x10>
    1af4:	5f 3f       	cpi	r21, 0xFF	; 255
    1af6:	71 f0       	breq	.+28     	; 0x1b14 <__fp_splitA+0x1a>
    1af8:	47 95       	ror	r20

00001afa <__fp_splitA>:
    1afa:	88 0f       	add	r24, r24
    1afc:	97 fb       	bst	r25, 7
    1afe:	99 1f       	adc	r25, r25
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <__fp_splitA+0x20>
    1b02:	9f 3f       	cpi	r25, 0xFF	; 255
    1b04:	79 f0       	breq	.+30     	; 0x1b24 <__fp_splitA+0x2a>
    1b06:	87 95       	ror	r24
    1b08:	08 95       	ret
    1b0a:	12 16       	cp	r1, r18
    1b0c:	13 06       	cpc	r1, r19
    1b0e:	14 06       	cpc	r1, r20
    1b10:	55 1f       	adc	r21, r21
    1b12:	f2 cf       	rjmp	.-28     	; 0x1af8 <__fp_split3+0xe>
    1b14:	46 95       	lsr	r20
    1b16:	f1 df       	rcall	.-30     	; 0x1afa <__fp_splitA>
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <__fp_splitA+0x30>
    1b1a:	16 16       	cp	r1, r22
    1b1c:	17 06       	cpc	r1, r23
    1b1e:	18 06       	cpc	r1, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	f1 cf       	rjmp	.-30     	; 0x1b06 <__fp_splitA+0xc>
    1b24:	86 95       	lsr	r24
    1b26:	71 05       	cpc	r23, r1
    1b28:	61 05       	cpc	r22, r1
    1b2a:	08 94       	sec
    1b2c:	08 95       	ret

00001b2e <__fp_zero>:
    1b2e:	e8 94       	clt

00001b30 <__fp_szero>:
    1b30:	bb 27       	eor	r27, r27
    1b32:	66 27       	eor	r22, r22
    1b34:	77 27       	eor	r23, r23
    1b36:	cb 01       	movw	r24, r22
    1b38:	97 f9       	bld	r25, 7
    1b3a:	08 95       	ret

00001b3c <__mulsf3>:
    1b3c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__mulsf3x>
    1b40:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_round>
    1b44:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__fp_pscA>
    1b48:	38 f0       	brcs	.+14     	; 0x1b58 <__mulsf3+0x1c>
    1b4a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_pscB>
    1b4e:	20 f0       	brcs	.+8      	; 0x1b58 <__mulsf3+0x1c>
    1b50:	95 23       	and	r25, r21
    1b52:	11 f0       	breq	.+4      	; 0x1b58 <__mulsf3+0x1c>
    1b54:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    1b58:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_nan>
    1b5c:	11 24       	eor	r1, r1
    1b5e:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>

00001b62 <__mulsf3x>:
    1b62:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_split3>
    1b66:	70 f3       	brcs	.-36     	; 0x1b44 <__mulsf3+0x8>

00001b68 <__mulsf3_pse>:
    1b68:	95 9f       	mul	r25, r21
    1b6a:	c1 f3       	breq	.-16     	; 0x1b5c <__mulsf3+0x20>
    1b6c:	95 0f       	add	r25, r21
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	55 1f       	adc	r21, r21
    1b72:	62 9f       	mul	r22, r18
    1b74:	f0 01       	movw	r30, r0
    1b76:	72 9f       	mul	r23, r18
    1b78:	bb 27       	eor	r27, r27
    1b7a:	f0 0d       	add	r31, r0
    1b7c:	b1 1d       	adc	r27, r1
    1b7e:	63 9f       	mul	r22, r19
    1b80:	aa 27       	eor	r26, r26
    1b82:	f0 0d       	add	r31, r0
    1b84:	b1 1d       	adc	r27, r1
    1b86:	aa 1f       	adc	r26, r26
    1b88:	64 9f       	mul	r22, r20
    1b8a:	66 27       	eor	r22, r22
    1b8c:	b0 0d       	add	r27, r0
    1b8e:	a1 1d       	adc	r26, r1
    1b90:	66 1f       	adc	r22, r22
    1b92:	82 9f       	mul	r24, r18
    1b94:	22 27       	eor	r18, r18
    1b96:	b0 0d       	add	r27, r0
    1b98:	a1 1d       	adc	r26, r1
    1b9a:	62 1f       	adc	r22, r18
    1b9c:	73 9f       	mul	r23, r19
    1b9e:	b0 0d       	add	r27, r0
    1ba0:	a1 1d       	adc	r26, r1
    1ba2:	62 1f       	adc	r22, r18
    1ba4:	83 9f       	mul	r24, r19
    1ba6:	a0 0d       	add	r26, r0
    1ba8:	61 1d       	adc	r22, r1
    1baa:	22 1f       	adc	r18, r18
    1bac:	74 9f       	mul	r23, r20
    1bae:	33 27       	eor	r19, r19
    1bb0:	a0 0d       	add	r26, r0
    1bb2:	61 1d       	adc	r22, r1
    1bb4:	23 1f       	adc	r18, r19
    1bb6:	84 9f       	mul	r24, r20
    1bb8:	60 0d       	add	r22, r0
    1bba:	21 1d       	adc	r18, r1
    1bbc:	82 2f       	mov	r24, r18
    1bbe:	76 2f       	mov	r23, r22
    1bc0:	6a 2f       	mov	r22, r26
    1bc2:	11 24       	eor	r1, r1
    1bc4:	9f 57       	subi	r25, 0x7F	; 127
    1bc6:	50 40       	sbci	r21, 0x00	; 0
    1bc8:	9a f0       	brmi	.+38     	; 0x1bf0 <__mulsf3_pse+0x88>
    1bca:	f1 f0       	breq	.+60     	; 0x1c08 <__mulsf3_pse+0xa0>
    1bcc:	88 23       	and	r24, r24
    1bce:	4a f0       	brmi	.+18     	; 0x1be2 <__mulsf3_pse+0x7a>
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	bb 1f       	adc	r27, r27
    1bd6:	66 1f       	adc	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	91 50       	subi	r25, 0x01	; 1
    1bde:	50 40       	sbci	r21, 0x00	; 0
    1be0:	a9 f7       	brne	.-22     	; 0x1bcc <__mulsf3_pse+0x64>
    1be2:	9e 3f       	cpi	r25, 0xFE	; 254
    1be4:	51 05       	cpc	r21, r1
    1be6:	80 f0       	brcs	.+32     	; 0x1c08 <__mulsf3_pse+0xa0>
    1be8:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_inf>
    1bec:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_szero>
    1bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf2:	e4 f3       	brlt	.-8      	; 0x1bec <__mulsf3_pse+0x84>
    1bf4:	98 3e       	cpi	r25, 0xE8	; 232
    1bf6:	d4 f3       	brlt	.-12     	; 0x1bec <__mulsf3_pse+0x84>
    1bf8:	86 95       	lsr	r24
    1bfa:	77 95       	ror	r23
    1bfc:	67 95       	ror	r22
    1bfe:	b7 95       	ror	r27
    1c00:	f7 95       	ror	r31
    1c02:	e7 95       	ror	r30
    1c04:	9f 5f       	subi	r25, 0xFF	; 255
    1c06:	c1 f7       	brne	.-16     	; 0x1bf8 <__mulsf3_pse+0x90>
    1c08:	fe 2b       	or	r31, r30
    1c0a:	88 0f       	add	r24, r24
    1c0c:	91 1d       	adc	r25, r1
    1c0e:	96 95       	lsr	r25
    1c10:	87 95       	ror	r24
    1c12:	97 f9       	bld	r25, 7
    1c14:	08 95       	ret

00001c16 <do_rand>:
    1c16:	8f 92       	push	r8
    1c18:	9f 92       	push	r9
    1c1a:	af 92       	push	r10
    1c1c:	bf 92       	push	r11
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
    1c2c:	68 81       	ld	r22, Y
    1c2e:	79 81       	ldd	r23, Y+1	; 0x01
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	9b 81       	ldd	r25, Y+3	; 0x03
    1c34:	61 15       	cp	r22, r1
    1c36:	71 05       	cpc	r23, r1
    1c38:	81 05       	cpc	r24, r1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	21 f4       	brne	.+8      	; 0x1c46 <do_rand+0x30>
    1c3e:	64 e2       	ldi	r22, 0x24	; 36
    1c40:	79 ed       	ldi	r23, 0xD9	; 217
    1c42:	8b e5       	ldi	r24, 0x5B	; 91
    1c44:	97 e0       	ldi	r25, 0x07	; 7
    1c46:	2d e1       	ldi	r18, 0x1D	; 29
    1c48:	33 ef       	ldi	r19, 0xF3	; 243
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	0e 94 11 11 	call	0x2222	; 0x2222 <__divmodsi4>
    1c52:	49 01       	movw	r8, r18
    1c54:	5a 01       	movw	r10, r20
    1c56:	9b 01       	movw	r18, r22
    1c58:	ac 01       	movw	r20, r24
    1c5a:	a7 ea       	ldi	r26, 0xA7	; 167
    1c5c:	b1 e4       	ldi	r27, 0x41	; 65
    1c5e:	0e 94 30 11 	call	0x2260	; 0x2260 <__muluhisi3>
    1c62:	6b 01       	movw	r12, r22
    1c64:	7c 01       	movw	r14, r24
    1c66:	ac ee       	ldi	r26, 0xEC	; 236
    1c68:	b4 ef       	ldi	r27, 0xF4	; 244
    1c6a:	a5 01       	movw	r20, r10
    1c6c:	94 01       	movw	r18, r8
    1c6e:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulohisi3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8c 0d       	add	r24, r12
    1c78:	9d 1d       	adc	r25, r13
    1c7a:	ae 1d       	adc	r26, r14
    1c7c:	bf 1d       	adc	r27, r15
    1c7e:	b7 ff       	sbrs	r27, 7
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <do_rand+0x72>
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	a1 09       	sbc	r26, r1
    1c86:	b0 48       	sbci	r27, 0x80	; 128
    1c88:	88 83       	st	Y, r24
    1c8a:	99 83       	std	Y+1, r25	; 0x01
    1c8c:	aa 83       	std	Y+2, r26	; 0x02
    1c8e:	bb 83       	std	Y+3, r27	; 0x03
    1c90:	9f 77       	andi	r25, 0x7F	; 127
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	ff 90       	pop	r15
    1c98:	ef 90       	pop	r14
    1c9a:	df 90       	pop	r13
    1c9c:	cf 90       	pop	r12
    1c9e:	bf 90       	pop	r11
    1ca0:	af 90       	pop	r10
    1ca2:	9f 90       	pop	r9
    1ca4:	8f 90       	pop	r8
    1ca6:	08 95       	ret

00001ca8 <rand_r>:
    1ca8:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <do_rand>
    1cac:	08 95       	ret

00001cae <rand>:
    1cae:	85 e1       	ldi	r24, 0x15	; 21
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <do_rand>
    1cb6:	08 95       	ret

00001cb8 <srand>:
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	80 93 15 01 	sts	0x0115, r24
    1cc0:	90 93 16 01 	sts	0x0116, r25
    1cc4:	a0 93 17 01 	sts	0x0117, r26
    1cc8:	b0 93 18 01 	sts	0x0118, r27
    1ccc:	08 95       	ret

00001cce <printf>:
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x20>
    1cda:	ae 01       	movw	r20, r28
    1cdc:	4b 5f       	subi	r20, 0xFB	; 251
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	fa 01       	movw	r30, r20
    1ce2:	61 91       	ld	r22, Z+
    1ce4:	71 91       	ld	r23, Z+
    1ce6:	af 01       	movw	r20, r30
    1ce8:	80 91 ae 01 	lds	r24, 0x01AE
    1cec:	90 91 af 01 	lds	r25, 0x01AF
    1cf0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <vfprintf>
    1cf4:	e2 e0       	ldi	r30, 0x02	; 2
    1cf6:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x20>

00001cfa <vfprintf>:
    1cfa:	ac e0       	ldi	r26, 0x0C	; 12
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e3 e8       	ldi	r30, 0x83	; 131
    1d00:	fe e0       	ldi	r31, 0x0E	; 14
    1d02:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__>
    1d06:	7c 01       	movw	r14, r24
    1d08:	6b 01       	movw	r12, r22
    1d0a:	8a 01       	movw	r16, r20
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	17 82       	std	Z+7, r1	; 0x07
    1d10:	16 82       	std	Z+6, r1	; 0x06
    1d12:	83 81       	ldd	r24, Z+3	; 0x03
    1d14:	81 ff       	sbrs	r24, 1
    1d16:	bd c1       	rjmp	.+890    	; 0x2092 <vfprintf+0x398>
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	4c 01       	movw	r8, r24
    1d1e:	f7 01       	movw	r30, r14
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	f6 01       	movw	r30, r12
    1d24:	93 fd       	sbrc	r25, 3
    1d26:	85 91       	lpm	r24, Z+
    1d28:	93 ff       	sbrs	r25, 3
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	6f 01       	movw	r12, r30
    1d2e:	88 23       	and	r24, r24
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <vfprintf+0x3a>
    1d32:	ab c1       	rjmp	.+854    	; 0x208a <vfprintf+0x390>
    1d34:	85 32       	cpi	r24, 0x25	; 37
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <vfprintf+0x4c>
    1d38:	93 fd       	sbrc	r25, 3
    1d3a:	85 91       	lpm	r24, Z+
    1d3c:	93 ff       	sbrs	r25, 3
    1d3e:	81 91       	ld	r24, Z+
    1d40:	6f 01       	movw	r12, r30
    1d42:	85 32       	cpi	r24, 0x25	; 37
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <vfprintf+0x56>
    1d46:	b7 01       	movw	r22, r14
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1d4e:	e7 cf       	rjmp	.-50     	; 0x1d1e <vfprintf+0x24>
    1d50:	51 2c       	mov	r5, r1
    1d52:	31 2c       	mov	r3, r1
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	20 32       	cpi	r18, 0x20	; 32
    1d58:	a0 f4       	brcc	.+40     	; 0x1d82 <vfprintf+0x88>
    1d5a:	8b 32       	cpi	r24, 0x2B	; 43
    1d5c:	69 f0       	breq	.+26     	; 0x1d78 <vfprintf+0x7e>
    1d5e:	30 f4       	brcc	.+12     	; 0x1d6c <vfprintf+0x72>
    1d60:	80 32       	cpi	r24, 0x20	; 32
    1d62:	59 f0       	breq	.+22     	; 0x1d7a <vfprintf+0x80>
    1d64:	83 32       	cpi	r24, 0x23	; 35
    1d66:	69 f4       	brne	.+26     	; 0x1d82 <vfprintf+0x88>
    1d68:	20 61       	ori	r18, 0x10	; 16
    1d6a:	2c c0       	rjmp	.+88     	; 0x1dc4 <vfprintf+0xca>
    1d6c:	8d 32       	cpi	r24, 0x2D	; 45
    1d6e:	39 f0       	breq	.+14     	; 0x1d7e <vfprintf+0x84>
    1d70:	80 33       	cpi	r24, 0x30	; 48
    1d72:	39 f4       	brne	.+14     	; 0x1d82 <vfprintf+0x88>
    1d74:	21 60       	ori	r18, 0x01	; 1
    1d76:	26 c0       	rjmp	.+76     	; 0x1dc4 <vfprintf+0xca>
    1d78:	22 60       	ori	r18, 0x02	; 2
    1d7a:	24 60       	ori	r18, 0x04	; 4
    1d7c:	23 c0       	rjmp	.+70     	; 0x1dc4 <vfprintf+0xca>
    1d7e:	28 60       	ori	r18, 0x08	; 8
    1d80:	21 c0       	rjmp	.+66     	; 0x1dc4 <vfprintf+0xca>
    1d82:	27 fd       	sbrc	r18, 7
    1d84:	27 c0       	rjmp	.+78     	; 0x1dd4 <vfprintf+0xda>
    1d86:	30 ed       	ldi	r19, 0xD0	; 208
    1d88:	38 0f       	add	r19, r24
    1d8a:	3a 30       	cpi	r19, 0x0A	; 10
    1d8c:	78 f4       	brcc	.+30     	; 0x1dac <vfprintf+0xb2>
    1d8e:	26 ff       	sbrs	r18, 6
    1d90:	06 c0       	rjmp	.+12     	; 0x1d9e <vfprintf+0xa4>
    1d92:	fa e0       	ldi	r31, 0x0A	; 10
    1d94:	5f 9e       	mul	r5, r31
    1d96:	30 0d       	add	r19, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	53 2e       	mov	r5, r19
    1d9c:	13 c0       	rjmp	.+38     	; 0x1dc4 <vfprintf+0xca>
    1d9e:	8a e0       	ldi	r24, 0x0A	; 10
    1da0:	38 9e       	mul	r3, r24
    1da2:	30 0d       	add	r19, r0
    1da4:	11 24       	eor	r1, r1
    1da6:	33 2e       	mov	r3, r19
    1da8:	20 62       	ori	r18, 0x20	; 32
    1daa:	0c c0       	rjmp	.+24     	; 0x1dc4 <vfprintf+0xca>
    1dac:	8e 32       	cpi	r24, 0x2E	; 46
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <vfprintf+0xbe>
    1db0:	26 fd       	sbrc	r18, 6
    1db2:	6b c1       	rjmp	.+726    	; 0x208a <vfprintf+0x390>
    1db4:	20 64       	ori	r18, 0x40	; 64
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <vfprintf+0xca>
    1db8:	8c 36       	cpi	r24, 0x6C	; 108
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <vfprintf+0xc6>
    1dbc:	20 68       	ori	r18, 0x80	; 128
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <vfprintf+0xca>
    1dc0:	88 36       	cpi	r24, 0x68	; 104
    1dc2:	41 f4       	brne	.+16     	; 0x1dd4 <vfprintf+0xda>
    1dc4:	f6 01       	movw	r30, r12
    1dc6:	93 fd       	sbrc	r25, 3
    1dc8:	85 91       	lpm	r24, Z+
    1dca:	93 ff       	sbrs	r25, 3
    1dcc:	81 91       	ld	r24, Z+
    1dce:	6f 01       	movw	r12, r30
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	c1 cf       	rjmp	.-126    	; 0x1d56 <vfprintf+0x5c>
    1dd4:	98 2f       	mov	r25, r24
    1dd6:	9f 7d       	andi	r25, 0xDF	; 223
    1dd8:	95 54       	subi	r25, 0x45	; 69
    1dda:	93 30       	cpi	r25, 0x03	; 3
    1ddc:	28 f4       	brcc	.+10     	; 0x1de8 <vfprintf+0xee>
    1dde:	0c 5f       	subi	r16, 0xFC	; 252
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	ff e3       	ldi	r31, 0x3F	; 63
    1de4:	f9 83       	std	Y+1, r31	; 0x01
    1de6:	0d c0       	rjmp	.+26     	; 0x1e02 <vfprintf+0x108>
    1de8:	83 36       	cpi	r24, 0x63	; 99
    1dea:	31 f0       	breq	.+12     	; 0x1df8 <vfprintf+0xfe>
    1dec:	83 37       	cpi	r24, 0x73	; 115
    1dee:	71 f0       	breq	.+28     	; 0x1e0c <vfprintf+0x112>
    1df0:	83 35       	cpi	r24, 0x53	; 83
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <vfprintf+0xfc>
    1df4:	5b c0       	rjmp	.+182    	; 0x1eac <vfprintf+0x1b2>
    1df6:	22 c0       	rjmp	.+68     	; 0x1e3c <vfprintf+0x142>
    1df8:	f8 01       	movw	r30, r16
    1dfa:	80 81       	ld	r24, Z
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	0e 5f       	subi	r16, 0xFE	; 254
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	44 24       	eor	r4, r4
    1e04:	43 94       	inc	r4
    1e06:	51 2c       	mov	r5, r1
    1e08:	54 01       	movw	r10, r8
    1e0a:	15 c0       	rjmp	.+42     	; 0x1e36 <vfprintf+0x13c>
    1e0c:	38 01       	movw	r6, r16
    1e0e:	f2 e0       	ldi	r31, 0x02	; 2
    1e10:	6f 0e       	add	r6, r31
    1e12:	71 1c       	adc	r7, r1
    1e14:	f8 01       	movw	r30, r16
    1e16:	a0 80       	ld	r10, Z
    1e18:	b1 80       	ldd	r11, Z+1	; 0x01
    1e1a:	26 ff       	sbrs	r18, 6
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <vfprintf+0x12a>
    1e1e:	65 2d       	mov	r22, r5
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <vfprintf+0x12e>
    1e24:	6f ef       	ldi	r22, 0xFF	; 255
    1e26:	7f ef       	ldi	r23, 0xFF	; 255
    1e28:	c5 01       	movw	r24, r10
    1e2a:	2c 87       	std	Y+12, r18	; 0x0c
    1e2c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <strnlen>
    1e30:	2c 01       	movw	r4, r24
    1e32:	83 01       	movw	r16, r6
    1e34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e36:	2f 77       	andi	r18, 0x7F	; 127
    1e38:	22 2e       	mov	r2, r18
    1e3a:	17 c0       	rjmp	.+46     	; 0x1e6a <vfprintf+0x170>
    1e3c:	38 01       	movw	r6, r16
    1e3e:	f2 e0       	ldi	r31, 0x02	; 2
    1e40:	6f 0e       	add	r6, r31
    1e42:	71 1c       	adc	r7, r1
    1e44:	f8 01       	movw	r30, r16
    1e46:	a0 80       	ld	r10, Z
    1e48:	b1 80       	ldd	r11, Z+1	; 0x01
    1e4a:	26 ff       	sbrs	r18, 6
    1e4c:	03 c0       	rjmp	.+6      	; 0x1e54 <vfprintf+0x15a>
    1e4e:	65 2d       	mov	r22, r5
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <vfprintf+0x15e>
    1e54:	6f ef       	ldi	r22, 0xFF	; 255
    1e56:	7f ef       	ldi	r23, 0xFF	; 255
    1e58:	c5 01       	movw	r24, r10
    1e5a:	2c 87       	std	Y+12, r18	; 0x0c
    1e5c:	0e 94 4f 10 	call	0x209e	; 0x209e <strnlen_P>
    1e60:	2c 01       	movw	r4, r24
    1e62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e64:	20 68       	ori	r18, 0x80	; 128
    1e66:	22 2e       	mov	r2, r18
    1e68:	83 01       	movw	r16, r6
    1e6a:	23 fc       	sbrc	r2, 3
    1e6c:	1b c0       	rjmp	.+54     	; 0x1ea4 <vfprintf+0x1aa>
    1e6e:	83 2d       	mov	r24, r3
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	48 16       	cp	r4, r24
    1e74:	59 06       	cpc	r5, r25
    1e76:	b0 f4       	brcc	.+44     	; 0x1ea4 <vfprintf+0x1aa>
    1e78:	b7 01       	movw	r22, r14
    1e7a:	80 e2       	ldi	r24, 0x20	; 32
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1e82:	3a 94       	dec	r3
    1e84:	f4 cf       	rjmp	.-24     	; 0x1e6e <vfprintf+0x174>
    1e86:	f5 01       	movw	r30, r10
    1e88:	27 fc       	sbrc	r2, 7
    1e8a:	85 91       	lpm	r24, Z+
    1e8c:	27 fe       	sbrs	r2, 7
    1e8e:	81 91       	ld	r24, Z+
    1e90:	5f 01       	movw	r10, r30
    1e92:	b7 01       	movw	r22, r14
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1e9a:	31 10       	cpse	r3, r1
    1e9c:	3a 94       	dec	r3
    1e9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ea0:	4f 1a       	sub	r4, r31
    1ea2:	51 08       	sbc	r5, r1
    1ea4:	41 14       	cp	r4, r1
    1ea6:	51 04       	cpc	r5, r1
    1ea8:	71 f7       	brne	.-36     	; 0x1e86 <vfprintf+0x18c>
    1eaa:	e5 c0       	rjmp	.+458    	; 0x2076 <vfprintf+0x37c>
    1eac:	84 36       	cpi	r24, 0x64	; 100
    1eae:	11 f0       	breq	.+4      	; 0x1eb4 <vfprintf+0x1ba>
    1eb0:	89 36       	cpi	r24, 0x69	; 105
    1eb2:	39 f5       	brne	.+78     	; 0x1f02 <vfprintf+0x208>
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	27 ff       	sbrs	r18, 7
    1eb8:	07 c0       	rjmp	.+14     	; 0x1ec8 <vfprintf+0x1ce>
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	0c 5f       	subi	r16, 0xFC	; 252
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	08 c0       	rjmp	.+16     	; 0x1ed8 <vfprintf+0x1de>
    1ec8:	60 81       	ld	r22, Z
    1eca:	71 81       	ldd	r23, Z+1	; 0x01
    1ecc:	07 2e       	mov	r0, r23
    1ece:	00 0c       	add	r0, r0
    1ed0:	88 0b       	sbc	r24, r24
    1ed2:	99 0b       	sbc	r25, r25
    1ed4:	0e 5f       	subi	r16, 0xFE	; 254
    1ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed8:	2f 76       	andi	r18, 0x6F	; 111
    1eda:	72 2e       	mov	r7, r18
    1edc:	97 ff       	sbrs	r25, 7
    1ede:	09 c0       	rjmp	.+18     	; 0x1ef2 <vfprintf+0x1f8>
    1ee0:	90 95       	com	r25
    1ee2:	80 95       	com	r24
    1ee4:	70 95       	com	r23
    1ee6:	61 95       	neg	r22
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	8f 4f       	sbci	r24, 0xFF	; 255
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	20 68       	ori	r18, 0x80	; 128
    1ef0:	72 2e       	mov	r7, r18
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	a4 01       	movw	r20, r8
    1ef8:	0e 94 9d 10 	call	0x213a	; 0x213a <__ultoa_invert>
    1efc:	a8 2e       	mov	r10, r24
    1efe:	a8 18       	sub	r10, r8
    1f00:	44 c0       	rjmp	.+136    	; 0x1f8a <vfprintf+0x290>
    1f02:	85 37       	cpi	r24, 0x75	; 117
    1f04:	29 f4       	brne	.+10     	; 0x1f10 <vfprintf+0x216>
    1f06:	2f 7e       	andi	r18, 0xEF	; 239
    1f08:	b2 2e       	mov	r11, r18
    1f0a:	2a e0       	ldi	r18, 0x0A	; 10
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	25 c0       	rjmp	.+74     	; 0x1f5a <vfprintf+0x260>
    1f10:	f2 2f       	mov	r31, r18
    1f12:	f9 7f       	andi	r31, 0xF9	; 249
    1f14:	bf 2e       	mov	r11, r31
    1f16:	8f 36       	cpi	r24, 0x6F	; 111
    1f18:	c1 f0       	breq	.+48     	; 0x1f4a <vfprintf+0x250>
    1f1a:	18 f4       	brcc	.+6      	; 0x1f22 <vfprintf+0x228>
    1f1c:	88 35       	cpi	r24, 0x58	; 88
    1f1e:	79 f0       	breq	.+30     	; 0x1f3e <vfprintf+0x244>
    1f20:	b4 c0       	rjmp	.+360    	; 0x208a <vfprintf+0x390>
    1f22:	80 37       	cpi	r24, 0x70	; 112
    1f24:	19 f0       	breq	.+6      	; 0x1f2c <vfprintf+0x232>
    1f26:	88 37       	cpi	r24, 0x78	; 120
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <vfprintf+0x238>
    1f2a:	af c0       	rjmp	.+350    	; 0x208a <vfprintf+0x390>
    1f2c:	2f 2f       	mov	r18, r31
    1f2e:	20 61       	ori	r18, 0x10	; 16
    1f30:	b2 2e       	mov	r11, r18
    1f32:	b4 fe       	sbrs	r11, 4
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <vfprintf+0x256>
    1f36:	8b 2d       	mov	r24, r11
    1f38:	84 60       	ori	r24, 0x04	; 4
    1f3a:	b8 2e       	mov	r11, r24
    1f3c:	09 c0       	rjmp	.+18     	; 0x1f50 <vfprintf+0x256>
    1f3e:	24 ff       	sbrs	r18, 4
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <vfprintf+0x25c>
    1f42:	9f 2f       	mov	r25, r31
    1f44:	96 60       	ori	r25, 0x06	; 6
    1f46:	b9 2e       	mov	r11, r25
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <vfprintf+0x25c>
    1f4a:	28 e0       	ldi	r18, 0x08	; 8
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <vfprintf+0x260>
    1f50:	20 e1       	ldi	r18, 0x10	; 16
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <vfprintf+0x260>
    1f56:	20 e1       	ldi	r18, 0x10	; 16
    1f58:	32 e0       	ldi	r19, 0x02	; 2
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	b7 fe       	sbrs	r11, 7
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <vfprintf+0x274>
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	0c 5f       	subi	r16, 0xFC	; 252
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	06 c0       	rjmp	.+12     	; 0x1f7a <vfprintf+0x280>
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 5f       	subi	r16, 0xFE	; 254
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	a4 01       	movw	r20, r8
    1f7c:	0e 94 9d 10 	call	0x213a	; 0x213a <__ultoa_invert>
    1f80:	a8 2e       	mov	r10, r24
    1f82:	a8 18       	sub	r10, r8
    1f84:	fb 2d       	mov	r31, r11
    1f86:	ff 77       	andi	r31, 0x7F	; 127
    1f88:	7f 2e       	mov	r7, r31
    1f8a:	76 fe       	sbrs	r7, 6
    1f8c:	0b c0       	rjmp	.+22     	; 0x1fa4 <vfprintf+0x2aa>
    1f8e:	37 2d       	mov	r19, r7
    1f90:	3e 7f       	andi	r19, 0xFE	; 254
    1f92:	a5 14       	cp	r10, r5
    1f94:	50 f4       	brcc	.+20     	; 0x1faa <vfprintf+0x2b0>
    1f96:	74 fe       	sbrs	r7, 4
    1f98:	0a c0       	rjmp	.+20     	; 0x1fae <vfprintf+0x2b4>
    1f9a:	72 fc       	sbrc	r7, 2
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <vfprintf+0x2b4>
    1f9e:	37 2d       	mov	r19, r7
    1fa0:	3e 7e       	andi	r19, 0xEE	; 238
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <vfprintf+0x2b4>
    1fa4:	ba 2c       	mov	r11, r10
    1fa6:	37 2d       	mov	r19, r7
    1fa8:	03 c0       	rjmp	.+6      	; 0x1fb0 <vfprintf+0x2b6>
    1faa:	ba 2c       	mov	r11, r10
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <vfprintf+0x2b6>
    1fae:	b5 2c       	mov	r11, r5
    1fb0:	34 ff       	sbrs	r19, 4
    1fb2:	0d c0       	rjmp	.+26     	; 0x1fce <vfprintf+0x2d4>
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ea 0d       	add	r30, r10
    1fb8:	f1 1d       	adc	r31, r1
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 33       	cpi	r24, 0x30	; 48
    1fbe:	11 f4       	brne	.+4      	; 0x1fc4 <vfprintf+0x2ca>
    1fc0:	39 7e       	andi	r19, 0xE9	; 233
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <vfprintf+0x2dc>
    1fc4:	32 ff       	sbrs	r19, 2
    1fc6:	06 c0       	rjmp	.+12     	; 0x1fd4 <vfprintf+0x2da>
    1fc8:	b3 94       	inc	r11
    1fca:	b3 94       	inc	r11
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <vfprintf+0x2dc>
    1fce:	83 2f       	mov	r24, r19
    1fd0:	86 78       	andi	r24, 0x86	; 134
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <vfprintf+0x2dc>
    1fd4:	b3 94       	inc	r11
    1fd6:	33 fd       	sbrc	r19, 3
    1fd8:	13 c0       	rjmp	.+38     	; 0x2000 <vfprintf+0x306>
    1fda:	30 ff       	sbrs	r19, 0
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <vfprintf+0x2f0>
    1fde:	5a 2c       	mov	r5, r10
    1fe0:	b3 14       	cp	r11, r3
    1fe2:	18 f4       	brcc	.+6      	; 0x1fea <vfprintf+0x2f0>
    1fe4:	53 0c       	add	r5, r3
    1fe6:	5b 18       	sub	r5, r11
    1fe8:	b3 2c       	mov	r11, r3
    1fea:	b3 14       	cp	r11, r3
    1fec:	68 f4       	brcc	.+26     	; 0x2008 <vfprintf+0x30e>
    1fee:	b7 01       	movw	r22, r14
    1ff0:	80 e2       	ldi	r24, 0x20	; 32
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	3c 87       	std	Y+12, r19	; 0x0c
    1ff6:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    1ffa:	b3 94       	inc	r11
    1ffc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ffe:	f5 cf       	rjmp	.-22     	; 0x1fea <vfprintf+0x2f0>
    2000:	b3 14       	cp	r11, r3
    2002:	10 f4       	brcc	.+4      	; 0x2008 <vfprintf+0x30e>
    2004:	3b 18       	sub	r3, r11
    2006:	01 c0       	rjmp	.+2      	; 0x200a <vfprintf+0x310>
    2008:	31 2c       	mov	r3, r1
    200a:	34 ff       	sbrs	r19, 4
    200c:	12 c0       	rjmp	.+36     	; 0x2032 <vfprintf+0x338>
    200e:	b7 01       	movw	r22, r14
    2010:	80 e3       	ldi	r24, 0x30	; 48
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	3c 87       	std	Y+12, r19	; 0x0c
    2016:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    201a:	3c 85       	ldd	r19, Y+12	; 0x0c
    201c:	32 ff       	sbrs	r19, 2
    201e:	17 c0       	rjmp	.+46     	; 0x204e <vfprintf+0x354>
    2020:	31 fd       	sbrc	r19, 1
    2022:	03 c0       	rjmp	.+6      	; 0x202a <vfprintf+0x330>
    2024:	88 e7       	ldi	r24, 0x78	; 120
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 c0       	rjmp	.+4      	; 0x202e <vfprintf+0x334>
    202a:	88 e5       	ldi	r24, 0x58	; 88
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	b7 01       	movw	r22, r14
    2030:	0c c0       	rjmp	.+24     	; 0x204a <vfprintf+0x350>
    2032:	83 2f       	mov	r24, r19
    2034:	86 78       	andi	r24, 0x86	; 134
    2036:	59 f0       	breq	.+22     	; 0x204e <vfprintf+0x354>
    2038:	31 ff       	sbrs	r19, 1
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <vfprintf+0x346>
    203c:	8b e2       	ldi	r24, 0x2B	; 43
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <vfprintf+0x348>
    2040:	80 e2       	ldi	r24, 0x20	; 32
    2042:	37 fd       	sbrc	r19, 7
    2044:	8d e2       	ldi	r24, 0x2D	; 45
    2046:	b7 01       	movw	r22, r14
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    204e:	a5 14       	cp	r10, r5
    2050:	38 f4       	brcc	.+14     	; 0x2060 <vfprintf+0x366>
    2052:	b7 01       	movw	r22, r14
    2054:	80 e3       	ldi	r24, 0x30	; 48
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    205c:	5a 94       	dec	r5
    205e:	f7 cf       	rjmp	.-18     	; 0x204e <vfprintf+0x354>
    2060:	aa 94       	dec	r10
    2062:	f4 01       	movw	r30, r8
    2064:	ea 0d       	add	r30, r10
    2066:	f1 1d       	adc	r31, r1
    2068:	80 81       	ld	r24, Z
    206a:	b7 01       	movw	r22, r14
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    2072:	a1 10       	cpse	r10, r1
    2074:	f5 cf       	rjmp	.-22     	; 0x2060 <vfprintf+0x366>
    2076:	33 20       	and	r3, r3
    2078:	09 f4       	brne	.+2      	; 0x207c <vfprintf+0x382>
    207a:	51 ce       	rjmp	.-862    	; 0x1d1e <vfprintf+0x24>
    207c:	b7 01       	movw	r22, r14
    207e:	80 e2       	ldi	r24, 0x20	; 32
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 65 10 	call	0x20ca	; 0x20ca <fputc>
    2086:	3a 94       	dec	r3
    2088:	f6 cf       	rjmp	.-20     	; 0x2076 <vfprintf+0x37c>
    208a:	f7 01       	movw	r30, r14
    208c:	86 81       	ldd	r24, Z+6	; 0x06
    208e:	97 81       	ldd	r25, Z+7	; 0x07
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x39c>
    2092:	8f ef       	ldi	r24, 0xFF	; 255
    2094:	9f ef       	ldi	r25, 0xFF	; 255
    2096:	2c 96       	adiw	r28, 0x0c	; 12
    2098:	e2 e1       	ldi	r30, 0x12	; 18
    209a:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__>

0000209e <strnlen_P>:
    209e:	fc 01       	movw	r30, r24
    20a0:	05 90       	lpm	r0, Z+
    20a2:	61 50       	subi	r22, 0x01	; 1
    20a4:	70 40       	sbci	r23, 0x00	; 0
    20a6:	01 10       	cpse	r0, r1
    20a8:	d8 f7       	brcc	.-10     	; 0x20a0 <strnlen_P+0x2>
    20aa:	80 95       	com	r24
    20ac:	90 95       	com	r25
    20ae:	8e 0f       	add	r24, r30
    20b0:	9f 1f       	adc	r25, r31
    20b2:	08 95       	ret

000020b4 <strnlen>:
    20b4:	fc 01       	movw	r30, r24
    20b6:	61 50       	subi	r22, 0x01	; 1
    20b8:	70 40       	sbci	r23, 0x00	; 0
    20ba:	01 90       	ld	r0, Z+
    20bc:	01 10       	cpse	r0, r1
    20be:	d8 f7       	brcc	.-10     	; 0x20b6 <strnlen+0x2>
    20c0:	80 95       	com	r24
    20c2:	90 95       	com	r25
    20c4:	8e 0f       	add	r24, r30
    20c6:	9f 1f       	adc	r25, r31
    20c8:	08 95       	ret

000020ca <fputc>:
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	fb 01       	movw	r30, r22
    20d4:	23 81       	ldd	r18, Z+3	; 0x03
    20d6:	21 fd       	sbrc	r18, 1
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <fputc+0x16>
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	9f ef       	ldi	r25, 0xFF	; 255
    20de:	28 c0       	rjmp	.+80     	; 0x2130 <fputc+0x66>
    20e0:	22 ff       	sbrs	r18, 2
    20e2:	16 c0       	rjmp	.+44     	; 0x2110 <fputc+0x46>
    20e4:	46 81       	ldd	r20, Z+6	; 0x06
    20e6:	57 81       	ldd	r21, Z+7	; 0x07
    20e8:	24 81       	ldd	r18, Z+4	; 0x04
    20ea:	35 81       	ldd	r19, Z+5	; 0x05
    20ec:	42 17       	cp	r20, r18
    20ee:	53 07       	cpc	r21, r19
    20f0:	44 f4       	brge	.+16     	; 0x2102 <fputc+0x38>
    20f2:	a0 81       	ld	r26, Z
    20f4:	b1 81       	ldd	r27, Z+1	; 0x01
    20f6:	9d 01       	movw	r18, r26
    20f8:	2f 5f       	subi	r18, 0xFF	; 255
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	31 83       	std	Z+1, r19	; 0x01
    20fe:	20 83       	st	Z, r18
    2100:	8c 93       	st	X, r24
    2102:	26 81       	ldd	r18, Z+6	; 0x06
    2104:	37 81       	ldd	r19, Z+7	; 0x07
    2106:	2f 5f       	subi	r18, 0xFF	; 255
    2108:	3f 4f       	sbci	r19, 0xFF	; 255
    210a:	37 83       	std	Z+7, r19	; 0x07
    210c:	26 83       	std	Z+6, r18	; 0x06
    210e:	10 c0       	rjmp	.+32     	; 0x2130 <fputc+0x66>
    2110:	eb 01       	movw	r28, r22
    2112:	09 2f       	mov	r16, r25
    2114:	18 2f       	mov	r17, r24
    2116:	00 84       	ldd	r0, Z+8	; 0x08
    2118:	f1 85       	ldd	r31, Z+9	; 0x09
    211a:	e0 2d       	mov	r30, r0
    211c:	09 95       	icall
    211e:	89 2b       	or	r24, r25
    2120:	e1 f6       	brne	.-72     	; 0x20da <fputc+0x10>
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	9f 83       	std	Y+7, r25	; 0x07
    212a:	8e 83       	std	Y+6, r24	; 0x06
    212c:	81 2f       	mov	r24, r17
    212e:	90 2f       	mov	r25, r16
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	08 95       	ret

0000213a <__ultoa_invert>:
    213a:	fa 01       	movw	r30, r20
    213c:	aa 27       	eor	r26, r26
    213e:	28 30       	cpi	r18, 0x08	; 8
    2140:	51 f1       	breq	.+84     	; 0x2196 <__ultoa_invert+0x5c>
    2142:	20 31       	cpi	r18, 0x10	; 16
    2144:	81 f1       	breq	.+96     	; 0x21a6 <__ultoa_invert+0x6c>
    2146:	e8 94       	clt
    2148:	6f 93       	push	r22
    214a:	6e 7f       	andi	r22, 0xFE	; 254
    214c:	6e 5f       	subi	r22, 0xFE	; 254
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	8f 4f       	sbci	r24, 0xFF	; 255
    2152:	9f 4f       	sbci	r25, 0xFF	; 255
    2154:	af 4f       	sbci	r26, 0xFF	; 255
    2156:	b1 e0       	ldi	r27, 0x01	; 1
    2158:	3e d0       	rcall	.+124    	; 0x21d6 <__ultoa_invert+0x9c>
    215a:	b4 e0       	ldi	r27, 0x04	; 4
    215c:	3c d0       	rcall	.+120    	; 0x21d6 <__ultoa_invert+0x9c>
    215e:	67 0f       	add	r22, r23
    2160:	78 1f       	adc	r23, r24
    2162:	89 1f       	adc	r24, r25
    2164:	9a 1f       	adc	r25, r26
    2166:	a1 1d       	adc	r26, r1
    2168:	68 0f       	add	r22, r24
    216a:	79 1f       	adc	r23, r25
    216c:	8a 1f       	adc	r24, r26
    216e:	91 1d       	adc	r25, r1
    2170:	a1 1d       	adc	r26, r1
    2172:	6a 0f       	add	r22, r26
    2174:	71 1d       	adc	r23, r1
    2176:	81 1d       	adc	r24, r1
    2178:	91 1d       	adc	r25, r1
    217a:	a1 1d       	adc	r26, r1
    217c:	20 d0       	rcall	.+64     	; 0x21be <__ultoa_invert+0x84>
    217e:	09 f4       	brne	.+2      	; 0x2182 <__ultoa_invert+0x48>
    2180:	68 94       	set
    2182:	3f 91       	pop	r19
    2184:	2a e0       	ldi	r18, 0x0A	; 10
    2186:	26 9f       	mul	r18, r22
    2188:	11 24       	eor	r1, r1
    218a:	30 19       	sub	r19, r0
    218c:	30 5d       	subi	r19, 0xD0	; 208
    218e:	31 93       	st	Z+, r19
    2190:	de f6       	brtc	.-74     	; 0x2148 <__ultoa_invert+0xe>
    2192:	cf 01       	movw	r24, r30
    2194:	08 95       	ret
    2196:	46 2f       	mov	r20, r22
    2198:	47 70       	andi	r20, 0x07	; 7
    219a:	40 5d       	subi	r20, 0xD0	; 208
    219c:	41 93       	st	Z+, r20
    219e:	b3 e0       	ldi	r27, 0x03	; 3
    21a0:	0f d0       	rcall	.+30     	; 0x21c0 <__ultoa_invert+0x86>
    21a2:	c9 f7       	brne	.-14     	; 0x2196 <__ultoa_invert+0x5c>
    21a4:	f6 cf       	rjmp	.-20     	; 0x2192 <__ultoa_invert+0x58>
    21a6:	46 2f       	mov	r20, r22
    21a8:	4f 70       	andi	r20, 0x0F	; 15
    21aa:	40 5d       	subi	r20, 0xD0	; 208
    21ac:	4a 33       	cpi	r20, 0x3A	; 58
    21ae:	18 f0       	brcs	.+6      	; 0x21b6 <__ultoa_invert+0x7c>
    21b0:	49 5d       	subi	r20, 0xD9	; 217
    21b2:	31 fd       	sbrc	r19, 1
    21b4:	40 52       	subi	r20, 0x20	; 32
    21b6:	41 93       	st	Z+, r20
    21b8:	02 d0       	rcall	.+4      	; 0x21be <__ultoa_invert+0x84>
    21ba:	a9 f7       	brne	.-22     	; 0x21a6 <__ultoa_invert+0x6c>
    21bc:	ea cf       	rjmp	.-44     	; 0x2192 <__ultoa_invert+0x58>
    21be:	b4 e0       	ldi	r27, 0x04	; 4
    21c0:	a6 95       	lsr	r26
    21c2:	97 95       	ror	r25
    21c4:	87 95       	ror	r24
    21c6:	77 95       	ror	r23
    21c8:	67 95       	ror	r22
    21ca:	ba 95       	dec	r27
    21cc:	c9 f7       	brne	.-14     	; 0x21c0 <__ultoa_invert+0x86>
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	61 05       	cpc	r22, r1
    21d2:	71 05       	cpc	r23, r1
    21d4:	08 95       	ret
    21d6:	9b 01       	movw	r18, r22
    21d8:	ac 01       	movw	r20, r24
    21da:	0a 2e       	mov	r0, r26
    21dc:	06 94       	lsr	r0
    21de:	57 95       	ror	r21
    21e0:	47 95       	ror	r20
    21e2:	37 95       	ror	r19
    21e4:	27 95       	ror	r18
    21e6:	ba 95       	dec	r27
    21e8:	c9 f7       	brne	.-14     	; 0x21dc <__ultoa_invert+0xa2>
    21ea:	62 0f       	add	r22, r18
    21ec:	73 1f       	adc	r23, r19
    21ee:	84 1f       	adc	r24, r20
    21f0:	95 1f       	adc	r25, r21
    21f2:	a0 1d       	adc	r26, r0
    21f4:	08 95       	ret

000021f6 <eeprom_read_byte>:
    21f6:	f9 99       	sbic	0x1f, 1	; 31
    21f8:	fe cf       	rjmp	.-4      	; 0x21f6 <eeprom_read_byte>
    21fa:	92 bd       	out	0x22, r25	; 34
    21fc:	81 bd       	out	0x21, r24	; 33
    21fe:	f8 9a       	sbi	0x1f, 0	; 31
    2200:	99 27       	eor	r25, r25
    2202:	80 b5       	in	r24, 0x20	; 32
    2204:	08 95       	ret

00002206 <eeprom_write_byte>:
    2206:	26 2f       	mov	r18, r22

00002208 <eeprom_write_r18>:
    2208:	f9 99       	sbic	0x1f, 1	; 31
    220a:	fe cf       	rjmp	.-4      	; 0x2208 <eeprom_write_r18>
    220c:	1f ba       	out	0x1f, r1	; 31
    220e:	92 bd       	out	0x22, r25	; 34
    2210:	81 bd       	out	0x21, r24	; 33
    2212:	20 bd       	out	0x20, r18	; 32
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	fa 9a       	sbi	0x1f, 2	; 31
    221a:	f9 9a       	sbi	0x1f, 1	; 31
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	08 95       	ret

00002222 <__divmodsi4>:
    2222:	05 2e       	mov	r0, r21
    2224:	97 fb       	bst	r25, 7
    2226:	1e f4       	brtc	.+6      	; 0x222e <__divmodsi4+0xc>
    2228:	00 94       	com	r0
    222a:	0e 94 28 11 	call	0x2250	; 0x2250 <__negsi2>
    222e:	57 fd       	sbrc	r21, 7
    2230:	07 d0       	rcall	.+14     	; 0x2240 <__divmodsi4_neg2>
    2232:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__udivmodsi4>
    2236:	07 fc       	sbrc	r0, 7
    2238:	03 d0       	rcall	.+6      	; 0x2240 <__divmodsi4_neg2>
    223a:	4e f4       	brtc	.+18     	; 0x224e <__divmodsi4_exit>
    223c:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__negsi2>

00002240 <__divmodsi4_neg2>:
    2240:	50 95       	com	r21
    2242:	40 95       	com	r20
    2244:	30 95       	com	r19
    2246:	21 95       	neg	r18
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	4f 4f       	sbci	r20, 0xFF	; 255
    224c:	5f 4f       	sbci	r21, 0xFF	; 255

0000224e <__divmodsi4_exit>:
    224e:	08 95       	ret

00002250 <__negsi2>:
    2250:	90 95       	com	r25
    2252:	80 95       	com	r24
    2254:	70 95       	com	r23
    2256:	61 95       	neg	r22
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	8f 4f       	sbci	r24, 0xFF	; 255
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	08 95       	ret

00002260 <__muluhisi3>:
    2260:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__umulhisi3>
    2264:	a5 9f       	mul	r26, r21
    2266:	90 0d       	add	r25, r0
    2268:	b4 9f       	mul	r27, r20
    226a:	90 0d       	add	r25, r0
    226c:	a4 9f       	mul	r26, r20
    226e:	80 0d       	add	r24, r0
    2270:	91 1d       	adc	r25, r1
    2272:	11 24       	eor	r1, r1
    2274:	08 95       	ret

00002276 <__mulshisi3>:
    2276:	b7 ff       	sbrs	r27, 7
    2278:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__muluhisi3>

0000227c <__mulohisi3>:
    227c:	0e 94 30 11 	call	0x2260	; 0x2260 <__muluhisi3>
    2280:	82 1b       	sub	r24, r18
    2282:	93 0b       	sbc	r25, r19
    2284:	08 95       	ret

00002286 <__prologue_saves__>:
    2286:	2f 92       	push	r2
    2288:	3f 92       	push	r3
    228a:	4f 92       	push	r4
    228c:	5f 92       	push	r5
    228e:	6f 92       	push	r6
    2290:	7f 92       	push	r7
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	ca 1b       	sub	r28, r26
    22b0:	db 0b       	sbc	r29, r27
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	09 94       	ijmp

000022be <__epilogue_restores__>:
    22be:	2a 88       	ldd	r2, Y+18	; 0x12
    22c0:	39 88       	ldd	r3, Y+17	; 0x11
    22c2:	48 88       	ldd	r4, Y+16	; 0x10
    22c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    22c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    22c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    22cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    22ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    22d0:	b9 84       	ldd	r11, Y+9	; 0x09
    22d2:	c8 84       	ldd	r12, Y+8	; 0x08
    22d4:	df 80       	ldd	r13, Y+7	; 0x07
    22d6:	ee 80       	ldd	r14, Y+6	; 0x06
    22d8:	fd 80       	ldd	r15, Y+5	; 0x05
    22da:	0c 81       	ldd	r16, Y+4	; 0x04
    22dc:	1b 81       	ldd	r17, Y+3	; 0x03
    22de:	aa 81       	ldd	r26, Y+2	; 0x02
    22e0:	b9 81       	ldd	r27, Y+1	; 0x01
    22e2:	ce 0f       	add	r28, r30
    22e4:	d1 1d       	adc	r29, r1
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	ed 01       	movw	r28, r26
    22f2:	08 95       	ret

000022f4 <__udivmodsi4>:
    22f4:	a1 e2       	ldi	r26, 0x21	; 33
    22f6:	1a 2e       	mov	r1, r26
    22f8:	aa 1b       	sub	r26, r26
    22fa:	bb 1b       	sub	r27, r27
    22fc:	fd 01       	movw	r30, r26
    22fe:	0d c0       	rjmp	.+26     	; 0x231a <__udivmodsi4_ep>

00002300 <__udivmodsi4_loop>:
    2300:	aa 1f       	adc	r26, r26
    2302:	bb 1f       	adc	r27, r27
    2304:	ee 1f       	adc	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	a2 17       	cp	r26, r18
    230a:	b3 07       	cpc	r27, r19
    230c:	e4 07       	cpc	r30, r20
    230e:	f5 07       	cpc	r31, r21
    2310:	20 f0       	brcs	.+8      	; 0x231a <__udivmodsi4_ep>
    2312:	a2 1b       	sub	r26, r18
    2314:	b3 0b       	sbc	r27, r19
    2316:	e4 0b       	sbc	r30, r20
    2318:	f5 0b       	sbc	r31, r21

0000231a <__udivmodsi4_ep>:
    231a:	66 1f       	adc	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	1a 94       	dec	r1
    2324:	69 f7       	brne	.-38     	; 0x2300 <__udivmodsi4_loop>
    2326:	60 95       	com	r22
    2328:	70 95       	com	r23
    232a:	80 95       	com	r24
    232c:	90 95       	com	r25
    232e:	9b 01       	movw	r18, r22
    2330:	ac 01       	movw	r20, r24
    2332:	bd 01       	movw	r22, r26
    2334:	cf 01       	movw	r24, r30
    2336:	08 95       	ret

00002338 <_exit>:
    2338:	f8 94       	cli

0000233a <__stop_program>:
    233a:	ff cf       	rjmp	.-2      	; 0x233a <__stop_program>
