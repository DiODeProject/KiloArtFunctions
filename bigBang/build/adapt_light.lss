
build/adapt_light.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	46 02       	muls	r20, r22
      6a:	c2 02       	muls	r28, r18
      6c:	1a 02       	muls	r17, r26
      6e:	11 02       	muls	r17, r17
      70:	17 02       	muls	r17, r23
      72:	a4 02       	muls	r26, r20
      74:	99 02       	muls	r25, r25
      76:	24 09       	sbc	r18, r4
      78:	01 08       	sbc	r0, r1
      7a:	01 08       	sbc	r0, r1
      7c:	21 09       	sbc	r18, r1
      7e:	2d 09       	sbc	r18, r13
      80:	1d 09       	sbc	r17, r13
      82:	34 09       	sbc	r19, r4
      84:	30 09       	sbc	r19, r0
      86:	38 09       	sbc	r19, r8
      88:	f0 08       	sbc	r15, r0
      8a:	c2 08       	sbc	r12, r2

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee ea       	ldi	r30, 0xAE	; 174
      b8:	f0 e2       	ldi	r31, 0x20	; 32
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 32       	cpi	r26, 0x2E	; 46
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e2       	ldi	r26, 0x2E	; 46
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a8 39       	cpi	r26, 0x98	; 152
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <main>
      da:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <debug_putchar>:
    RB_init(debug_buffer);\
}

#else
static int debug_putchar(char c, FILE *stream) {
    UDR0 = c;
      e2:	80 93 c6 00 	sts	0x00C6, r24
    while(!(UCSR0A & (1<<UDRE0)));
      e6:	80 91 c0 00 	lds	r24, 0x00C0
      ea:	85 ff       	sbrs	r24, 5
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <debug_putchar+0x4>
    return 0;
}
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <setup>:

int current_light = 0;

void setup()
{
    set_color(RGB(0,0,1));
      f4:	80 e1       	ldi	r24, 0x10	; 16
      f6:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <set_color>

000000fa <loop>:
    current_light = max_light;
    printf("light intensity: %d\n", current_light);
}

void loop()
{
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	cc e2       	ldi	r28, 0x2C	; 44
     104:	d1 e0       	ldi	r29, 0x01	; 1
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the maximum of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int max_light = 0;
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	10 e0       	ldi	r17, 0x00	; 0


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     10a:	0e 94 6f 03 	call	0x6de	; 0x6de <get_ambientlight>
     10e:	08 17       	cp	r16, r24
     110:	19 07       	cpc	r17, r25
     112:	0c f4       	brge	.+2      	; 0x116 <loop+0x1c>
     114:	8c 01       	movw	r16, r24
     116:	21 97       	sbiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int max_light = 0;


    while (number_of_samples < 300)
     118:	c1 f7       	brne	.-16     	; 0x10a <loop+0x10>
        }
        number_of_samples = number_of_samples + 1;
    }

    // Compute the average.
    current_light = max_light;
     11a:	10 93 2f 01 	sts	0x012F, r17
     11e:	00 93 2e 01 	sts	0x012E, r16
    printf("light intensity: %d\n", current_light);
     122:	1f 93       	push	r17
     124:	0f 93       	push	r16
     126:	89 e1       	ldi	r24, 0x19	; 25
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	9f 93       	push	r25
     12c:	8f 93       	push	r24
     12e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <printf>
}

void loop()
{
    sample_light();
    if (current_light > LIGHT_THRES){
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
     138:	0f 90       	pop	r0
     13a:	80 91 2e 01 	lds	r24, 0x012E
     13e:	90 91 2f 01 	lds	r25, 0x012F
     142:	85 3f       	cpi	r24, 0xF5	; 245
     144:	91 40       	sbci	r25, 0x01	; 1
     146:	3c f4       	brge	.+14     	; 0x156 <loop+0x5c>
        set_color(RGB(1,0,0));
    }
    else{
        set_color(RGB(0,0,1));
     148:	80 e1       	ldi	r24, 0x10	; 16
    }


}
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
    sample_light();
    if (current_light > LIGHT_THRES){
        set_color(RGB(1,0,0));
    }
    else{
        set_color(RGB(0,0,1));
     152:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <set_color>

void loop()
{
    sample_light();
    if (current_light > LIGHT_THRES){
        set_color(RGB(1,0,0));
     156:	81 e0       	ldi	r24, 0x01	; 1
    else{
        set_color(RGB(0,0,1));
    }


}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
    sample_light();
    if (current_light > LIGHT_THRES){
        set_color(RGB(1,0,0));
    }
    else{
        set_color(RGB(0,0,1));
     160:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <set_color>

00000164 <debug_init>:
#endif


void debug_init() {
    static FILE debug_stdout = FDEV_SETUP_STREAM(debug_putchar, NULL, _FDEV_SETUP_WRITE);
    cli();
     164:	f8 94       	cli
    DDRD |= (1<<1);                                 // Set UART TxD pin as output
     166:	51 9a       	sbi	0x0a, 1	; 10
#ifndef BAUD
#define BAUD 38400
#endif
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
     168:	8c e0       	ldi	r24, 0x0C	; 12
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	90 93 c5 00 	sts	0x00C5, r25
     170:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
     174:	e0 ec       	ldi	r30, 0xC0	; 192
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	8d 7f       	andi	r24, 0xFD	; 253
     17c:	80 83       	st	Z, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
     17e:	e2 ec       	ldi	r30, 0xC2	; 194
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	86 60       	ori	r24, 0x06	; 6
     186:	80 83       	st	Z, r24
    UCSR0B |= (1<<TXEN0);                           // Enable transmission
     188:	e1 ec       	ldi	r30, 0xC1	; 193
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	88 60       	ori	r24, 0x08	; 8
     190:	80 83       	st	Z, r24
    debug_init_extra();
    stdout = &debug_stdout;
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	90 93 95 01 	sts	0x0195, r25
     19a:	80 93 94 01 	sts	0x0194, r24
    sei();
     19e:	78 94       	sei
     1a0:	08 95       	ret

000001a2 <sample_light>:
    set_color(RGB(0,0,1));
}

// Function to sample light.
void sample_light()
{
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	cc e2       	ldi	r28, 0x2C	; 44
     1ac:	d1 e0       	ldi	r29, 0x01	; 1
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the maximum of 300 samples in quick succession.
    
    int number_of_samples = 0;
    int max_light = 0;
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	10 e0       	ldi	r17, 0x00	; 0


    while (number_of_samples < 300)
    {
        int sample = get_ambientlight();
     1b2:	0e 94 6f 03 	call	0x6de	; 0x6de <get_ambientlight>
     1b6:	08 17       	cp	r16, r24
     1b8:	19 07       	cpc	r17, r25
     1ba:	0c f4       	brge	.+2      	; 0x1be <sample_light+0x1c>
     1bc:	8c 01       	movw	r16, r24
     1be:	21 97       	sbiw	r28, 0x01	; 1
    
    int number_of_samples = 0;
    int max_light = 0;


    while (number_of_samples < 300)
     1c0:	c1 f7       	brne	.-16     	; 0x1b2 <sample_light+0x10>
        }
        number_of_samples = number_of_samples + 1;
    }

    // Compute the average.
    current_light = max_light;
     1c2:	10 93 2f 01 	sts	0x012F, r17
     1c6:	00 93 2e 01 	sts	0x012E, r16
    printf("light intensity: %d\n", current_light);
     1ca:	1f 93       	push	r17
     1cc:	0f 93       	push	r16
     1ce:	89 e1       	ldi	r24, 0x19	; 25
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	9f 93       	push	r25
     1d4:	8f 93       	push	r24
     1d6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <printf>
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
}
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16
     1ea:	08 95       	ret

000001ec <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1ec:	08 95       	ret

000001ee <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 95       	ret

000001f4 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1f4:	08 95       	ret

000001f6 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
    cli();
     204:	f8 94       	cli

    ports_off();
     206:	14 b8       	out	0x04, r1	; 4
     208:	17 b8       	out	0x07, r1	; 7
     20a:	1a b8       	out	0x0a, r1	; 10
     20c:	15 b8       	out	0x05, r1	; 5
     20e:	18 b8       	out	0x08, r1	; 8
     210:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     212:	52 9a       	sbi	0x0a, 2	; 10
     214:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     216:	14 bc       	out	0x24, r1	; 36
     218:	85 e0       	ldi	r24, 0x05	; 5
     21a:	85 bd       	out	0x25, r24	; 37
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	87 bd       	out	0x27, r24	; 39
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     226:	10 92 80 00 	sts	0x0080, r1
     22a:	10 92 81 00 	sts	0x0081, r1
     22e:	2f e8       	ldi	r18, 0x8F	; 143
     230:	3b e0       	ldi	r19, 0x0B	; 11
     232:	30 93 89 00 	sts	0x0089, r19
     236:	20 93 88 00 	sts	0x0088, r18
     23a:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     23e:	53 98       	cbi	0x0a, 3	; 10
     240:	23 98       	cbi	0x04, 3	; 4
     242:	91 ea       	ldi	r25, 0xA1	; 161
     244:	90 93 b0 00 	sts	0x00B0, r25
     248:	80 93 b1 00 	sts	0x00B1, r24
     24c:	10 92 b4 00 	sts	0x00B4, r1
     250:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     254:	8b e0       	ldi	r24, 0x0B	; 11
     256:	80 bf       	out	0x30, r24	; 48
     258:	83 e0       	ldi	r24, 0x03	; 3
     25a:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	80 93 7c 00 	sts	0x007C, r24
     264:	83 e8       	ldi	r24, 0x83	; 131
     266:	80 93 7a 00 	sts	0x007A, r24
     26a:	80 91 7a 00 	lds	r24, 0x007A
     26e:	80 64       	ori	r24, 0x40	; 64
     270:	80 93 7a 00 	sts	0x007A, r24
     274:	80 91 7a 00 	lds	r24, 0x007A
     278:	86 fd       	sbrc	r24, 6
     27a:	fc cf       	rjmp	.-8      	; 0x274 <kilo_init+0x7e>
    adc_trigger_high_gain();
     27c:	10 92 7c 00 	sts	0x007C, r1
     280:	83 ea       	ldi	r24, 0xA3	; 163
     282:	80 93 7a 00 	sts	0x007A, r24
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
    if (osccal != 0xFF)
     294:	8f 3f       	cpi	r24, 0xFF	; 255
     296:	11 f0       	breq	.+4      	; 0x29c <kilo_init+0xa6>
        OSCCAL = osccal;
     298:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     29c:	10 92 5b 01 	sts	0x015B, r1
    rx_leadingbit = 1;
     2a0:	c1 e0       	ldi	r28, 0x01	; 1
     2a2:	c0 93 34 01 	sts	0x0134, r28
    rx_leadingbyte = 1;
     2a6:	c0 93 78 01 	sts	0x0178, r28
    rx_byteindex = 0;
     2aa:	10 92 52 01 	sts	0x0152, r1
    rx_bytevalue = 0;
     2ae:	10 92 8c 01 	sts	0x018C, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2b2:	80 e9       	ldi	r24, 0x90	; 144
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     2ba:	80 93 51 01 	sts	0x0151, r24
    if (tx_mask & ~TX_MASK_MAX)
     2be:	80 91 51 01 	lds	r24, 0x0151
     2c2:	88 73       	andi	r24, 0x38	; 56
     2c4:	11 f0       	breq	.+4      	; 0x2ca <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2c6:	c0 93 51 01 	sts	0x0151, r28
    tx_clock = 0;
     2ca:	10 92 7c 01 	sts	0x017C, r1
     2ce:	10 92 7b 01 	sts	0x017B, r1
    tx_increment = 255;
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	90 93 7a 01 	sts	0x017A, r25
     2da:	80 93 79 01 	sts	0x0179, r24
    kilo_ticks = 0;
     2de:	10 92 57 01 	sts	0x0157, r1
     2e2:	10 92 58 01 	sts	0x0158, r1
     2e6:	10 92 59 01 	sts	0x0159, r1
     2ea:	10 92 5a 01 	sts	0x015A, r1
    kilo_state = IDLE;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 33 01 	sts	0x0133, r24
    kilo_tx_period = 3906;
     2f4:	82 e4       	ldi	r24, 0x42	; 66
     2f6:	9f e0       	ldi	r25, 0x0F	; 15
     2f8:	90 93 8b 01 	sts	0x018B, r25
     2fc:	80 93 8a 01 	sts	0x018A, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     300:	80 eb       	ldi	r24, 0xB0	; 176
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     308:	c8 2f       	mov	r28, r24
     30a:	81 eb       	ldi	r24, 0xB1	; 177
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     312:	2c 2f       	mov	r18, r28
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	38 2b       	or	r19, r24
     318:	30 93 8e 01 	sts	0x018E, r19
     31c:	20 93 8d 01 	sts	0x018D, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     320:	85 e0       	ldi	r24, 0x05	; 5
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     328:	80 93 91 01 	sts	0x0191, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     32c:	89 e0       	ldi	r24, 0x09	; 9
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     334:	80 93 7d 01 	sts	0x017D, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     338:	8c e0       	ldi	r24, 0x0C	; 12
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     340:	80 93 8f 01 	sts	0x018F, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     344:	84 e1       	ldi	r24, 0x14	; 20
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     34c:	80 93 90 01 	sts	0x0190, r24
     350:	5c e5       	ldi	r21, 0x5C	; 92
     352:	e5 2e       	mov	r14, r21
     354:	51 e0       	ldi	r21, 0x01	; 1
     356:	f5 2e       	mov	r15, r21
     358:	05 e3       	ldi	r16, 0x35	; 53
     35a:	11 e0       	ldi	r17, 0x01	; 1
     35c:	c0 e2       	ldi	r28, 0x20	; 32
     35e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     360:	ce 01       	movw	r24, r28
     362:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     366:	d8 2e       	mov	r13, r24
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     370:	2d 2d       	mov	r18, r13
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	32 2f       	mov	r19, r18
     376:	22 27       	eor	r18, r18
     378:	28 2b       	or	r18, r24
     37a:	f7 01       	movw	r30, r14
     37c:	21 93       	st	Z+, r18
     37e:	31 93       	st	Z+, r19
     380:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     382:	ce 01       	movw	r24, r28
     384:	c0 96       	adiw	r24, 0x30	; 48
     386:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     38a:	d8 2e       	mov	r13, r24
     38c:	ce 01       	movw	r24, r28
     38e:	c1 96       	adiw	r24, 0x31	; 49
     390:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <eeprom_read_byte>
     394:	2d 2d       	mov	r18, r13
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	32 2f       	mov	r19, r18
     39a:	22 27       	eor	r18, r18
     39c:	28 2b       	or	r18, r24
     39e:	f8 01       	movw	r30, r16
     3a0:	21 93       	st	Z+, r18
     3a2:	31 93       	st	Z+, r19
     3a4:	8f 01       	movw	r16, r30
     3a6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3a8:	cc 33       	cpi	r28, 0x3C	; 60
     3aa:	d1 05       	cpc	r29, r1
     3ac:	c9 f6       	brne	.-78     	; 0x360 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3ae:	78 94       	sei
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	08 95       	ret

000003c0 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	8f 93       	push	r24
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	a8 95       	wdr
     3d2:	80 91 60 00 	lds	r24, 0x0060
     3d6:	88 61       	ori	r24, 0x18	; 24
     3d8:	80 93 60 00 	sts	0x0060, r24
     3dc:	10 92 60 00 	sts	0x0060, r1
     3e0:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3e2:	8f 91       	pop	r24
     3e4:	0f 90       	pop	r0
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	0f 90       	pop	r0
     3ea:	1f 90       	pop	r1
     3ec:	18 95       	reti

000003ee <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     3ee:	3c 01       	movw	r6, r24
     3f0:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     3f2:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     3f4:	99 24       	eor	r9, r9
     3f6:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3f8:	84 e0       	ldi	r24, 0x04	; 4
     3fa:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     3fc:	96 e0       	ldi	r25, 0x06	; 6
     3fe:	a9 2e       	mov	r10, r25
     400:	23 e8       	ldi	r18, 0x83	; 131
     402:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     404:	38 e1       	ldi	r19, 0x18	; 24
     406:	d3 2e       	mov	r13, r19
     408:	49 e2       	ldi	r20, 0x29	; 41
     40a:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     40c:	90 91 33 01 	lds	r25, 0x0133
     410:	e9 2f       	mov	r30, r25
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	e7 30       	cpi	r30, 0x07	; 7
     416:	f1 05       	cpc	r31, r1
     418:	c8 f7       	brcc	.-14     	; 0x40c <kilo_start+0x1e>
     41a:	ec 5c       	subi	r30, 0xCC	; 204
     41c:	ff 4f       	sbci	r31, 0xFF	; 255
     41e:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     422:	11 23       	and	r17, r17
     424:	09 f4       	brne	.+2      	; 0x428 <kilo_start+0x3a>
     426:	fc c0       	rjmp	.+504    	; 0x620 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     428:	c0 92 33 01 	sts	0x0133, r12
     42c:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     42e:	fe 01       	movw	r30, r28
     430:	09 95       	icall
                break;
     432:	ec cf       	rjmp	.-40     	; 0x40c <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     434:	80 91 5b 01 	lds	r24, 0x015B
     438:	81 11       	cpse	r24, r1
     43a:	eb c0       	rjmp	.+470    	; 0x612 <kilo_start+0x224>
        cli();                                    // disable interrupts
     43c:	f8 94       	cli
        adc_setup_conversion(6);
     43e:	a0 92 7c 00 	sts	0x007C, r10
     442:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     446:	80 91 7a 00 	lds	r24, 0x007A
     44a:	80 64       	ori	r24, 0x40	; 64
     44c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     450:	90 91 7a 00 	lds	r25, 0x007A
     454:	96 fd       	sbrc	r25, 6
     456:	fc cf       	rjmp	.-8      	; 0x450 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     458:	80 91 78 00 	lds	r24, 0x0078
     45c:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     460:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     462:	8b 3a       	cpi	r24, 0xAB	; 171
     464:	e2 e0       	ldi	r30, 0x02	; 2
     466:	9e 07       	cpc	r25, r30
     468:	0c f0       	brlt	.+2      	; 0x46c <kilo_start+0x7e>
     46a:	ed c0       	rjmp	.+474    	; 0x646 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     46c:	89 38       	cpi	r24, 0x89	; 137
     46e:	f2 e0       	ldi	r31, 0x02	; 2
     470:	9f 07       	cpc	r25, r31
     472:	0c f0       	brlt	.+2      	; 0x476 <kilo_start+0x88>
     474:	ef c0       	rjmp	.+478    	; 0x654 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     476:	87 36       	cpi	r24, 0x67	; 103
     478:	92 40       	sbci	r25, 0x02	; 2
     47a:	0c f4       	brge	.+2      	; 0x47e <kilo_start+0x90>
     47c:	ca c0       	rjmp	.+404    	; 0x612 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     47e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     480:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     482:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     484:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     486:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     488:	3c 98       	cbi	0x07, 4	; 7
     48a:	c0 cf       	rjmp	.-128    	; 0x40c <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     48c:	f8 94       	cli
                acomp_off();
     48e:	80 b7       	in	r24, 0x30	; 48
     490:	87 7f       	andi	r24, 0xF7	; 247
     492:	80 bf       	out	0x30, r24	; 48
                adc_off();
     494:	80 91 7a 00 	lds	r24, 0x007A
     498:	8f 77       	andi	r24, 0x7F	; 127
     49a:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     49e:	14 b8       	out	0x04, r1	; 4
     4a0:	17 b8       	out	0x07, r1	; 7
     4a2:	1a b8       	out	0x0a, r1	; 10
     4a4:	15 b8       	out	0x05, r1	; 5
     4a6:	18 b8       	out	0x08, r1	; 8
     4a8:	1b b8       	out	0x0b, r1	; 11
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	a8 95       	wdr
     4b0:	d0 92 60 00 	sts	0x0060, r13
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4ba:	80 91 60 00 	lds	r24, 0x0060
     4be:	80 64       	ori	r24, 0x40	; 64
     4c0:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     4c4:	93 b7       	in	r25, 0x33	; 51
     4c6:	91 7f       	andi	r25, 0xF1	; 241
     4c8:	94 60       	ori	r25, 0x04	; 4
     4ca:	93 bf       	out	0x33, r25	; 51
                cli();
     4cc:	f8 94       	cli
                sleep_enable();
     4ce:	83 b7       	in	r24, 0x33	; 51
     4d0:	81 60       	ori	r24, 0x01	; 1
     4d2:	83 bf       	out	0x33, r24	; 51
                sei();
     4d4:	78 94       	sei
                sleep_cpu();
     4d6:	88 95       	sleep
                sleep_disable();
     4d8:	83 b7       	in	r24, 0x33	; 51
     4da:	8e 7f       	andi	r24, 0xFE	; 254
     4dc:	83 bf       	out	0x33, r24	; 51
                sei();
     4de:	78 94       	sei
                rx_busy = 0;
     4e0:	10 92 5b 01 	sts	0x015B, r1
                ports_on();
     4e4:	52 9a       	sbi	0x0a, 2	; 10
     4e6:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     4e8:	80 91 7a 00 	lds	r24, 0x007A
     4ec:	80 68       	ori	r24, 0x80	; 128
     4ee:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f2:	87 e5       	ldi	r24, 0x57	; 87
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <kilo_start+0x108>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <kilo_start+0x10e>
     4fc:	00 00       	nop
                _delay_us(300);
                acomp_on();
     4fe:	80 b7       	in	r24, 0x30	; 48
     500:	88 61       	ori	r24, 0x18	; 24
     502:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     504:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     506:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     508:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     50a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     50c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     50e:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     510:	ef e1       	ldi	r30, 0x1F	; 31
     512:	fe e4       	ldi	r31, 0x4E	; 78
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <kilo_start+0x126>
     518:	00 c0       	rjmp	.+0      	; 0x51a <kilo_start+0x12c>
     51a:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     51c:	80 91 5b 01 	lds	r24, 0x015B
     520:	81 11       	cpse	r24, r1
     522:	81 c0       	rjmp	.+258    	; 0x626 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     524:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     526:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     528:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     52a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     52c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     52e:	3c 98       	cbi	0x07, 4	; 7
     530:	6d cf       	rjmp	.-294    	; 0x40c <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     532:	80 91 31 01 	lds	r24, 0x0131
     536:	81 11       	cpse	r24, r1
     538:	41 c0       	rjmp	.+130    	; 0x5bc <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     53a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     53e:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     542:	10 92 32 01 	sts	0x0132, r1
     546:	62 cf       	rjmp	.-316    	; 0x40c <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     548:	48 99       	sbic	0x09, 0	; 9
     54a:	ec cf       	rjmp	.-40     	; 0x524 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     54c:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     54e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     550:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     552:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     554:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     556:	3c 98       	cbi	0x07, 4	; 7
     558:	8f ec       	ldi	r24, 0xCF	; 207
     55a:	97 e0       	ldi	r25, 0x07	; 7
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <kilo_start+0x16e>
     560:	00 c0       	rjmp	.+0      	; 0x562 <kilo_start+0x174>
     562:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     564:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     566:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     568:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     56a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     56c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     56e:	3c 98       	cbi	0x07, 4	; 7
     570:	9f ef       	ldi	r25, 0xFF	; 255
     572:	e1 ee       	ldi	r30, 0xE1	; 225
     574:	f4 e0       	ldi	r31, 0x04	; 4
     576:	91 50       	subi	r25, 0x01	; 1
     578:	e0 40       	sbci	r30, 0x00	; 0
     57a:	f0 40       	sbci	r31, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <kilo_start+0x188>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <kilo_start+0x192>
     580:	00 00       	nop
     582:	44 cf       	rjmp	.-376    	; 0x40c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     584:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     586:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     588:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     58a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     58c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     58e:	3c 98       	cbi	0x07, 4	; 7
     590:	ef ec       	ldi	r30, 0xCF	; 207
     592:	f7 e0       	ldi	r31, 0x07	; 7
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <kilo_start+0x1a6>
     598:	00 c0       	rjmp	.+0      	; 0x59a <kilo_start+0x1ac>
     59a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     59c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     59e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5a0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5a2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5a4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5a6:	3c 98       	cbi	0x07, 4	; 7
     5a8:	ff ef       	ldi	r31, 0xFF	; 255
     5aa:	21 ee       	ldi	r18, 0xE1	; 225
     5ac:	84 e0       	ldi	r24, 0x04	; 4
     5ae:	f1 50       	subi	r31, 0x01	; 1
     5b0:	20 40       	sbci	r18, 0x00	; 0
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <kilo_start+0x1c0>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <kilo_start+0x1ca>
     5b8:	00 00       	nop
     5ba:	28 cf       	rjmp	.-432    	; 0x40c <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     5bc:	90 91 31 01 	lds	r25, 0x0131
     5c0:	80 91 32 01 	lds	r24, 0x0132
     5c4:	98 17       	cp	r25, r24
     5c6:	09 f4       	brne	.+2      	; 0x5ca <kilo_start+0x1dc>
     5c8:	21 cf       	rjmp	.-446    	; 0x40c <kilo_start+0x1e>
                        prev_motion = cur_motion;
     5ca:	80 91 31 01 	lds	r24, 0x0131
     5ce:	80 93 32 01 	sts	0x0132, r24
                        if (cur_motion == MOVE_LEFT) {
     5d2:	80 91 31 01 	lds	r24, 0x0131
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <kilo_start+0x1ee>
     5da:	50 c0       	rjmp	.+160    	; 0x67c <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5dc:	80 91 31 01 	lds	r24, 0x0131
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5e4:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	d9 f1       	breq	.+118    	; 0x662 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ec:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5f0:	90 92 b4 00 	sts	0x00B4, r9
     5f4:	8f e2       	ldi	r24, 0x2F	; 47
     5f6:	95 e7       	ldi	r25, 0x75	; 117
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <kilo_start+0x20a>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <kilo_start+0x210>
     5fe:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     600:	80 91 90 01 	lds	r24, 0x0190
     604:	90 91 8f 01 	lds	r25, 0x018F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     608:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     60c:	80 93 b4 00 	sts	0x00B4, r24
     610:	fd ce       	rjmp	.-518    	; 0x40c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     612:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     614:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     616:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     618:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     61a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     61c:	3c 98       	cbi	0x07, 4	; 7
     61e:	f6 ce       	rjmp	.-532    	; 0x40c <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     620:	f3 01       	movw	r30, r6
     622:	09 95       	icall
     624:	01 cf       	rjmp	.-510    	; 0x428 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     626:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     628:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     62a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     62c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     62e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     630:	3c 98       	cbi	0x07, 4	; 7
     632:	ff ef       	ldi	r31, 0xFF	; 255
     634:	20 e7       	ldi	r18, 0x70	; 112
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	f1 50       	subi	r31, 0x01	; 1
     63a:	20 40       	sbci	r18, 0x00	; 0
     63c:	80 40       	sbci	r24, 0x00	; 0
     63e:	e1 f7       	brne	.-8      	; 0x638 <kilo_start+0x24a>
     640:	00 c0       	rjmp	.+0      	; 0x642 <kilo_start+0x254>
     642:	00 00       	nop
     644:	6f cf       	rjmp	.-290    	; 0x524 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     646:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     648:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     64a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     64c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     64e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     650:	3c 98       	cbi	0x07, 4	; 7
     652:	dc ce       	rjmp	.-584    	; 0x40c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     654:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     656:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     658:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     65a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     65c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     65e:	3c 9a       	sbi	0x07, 4	; 7
     660:	d5 ce       	rjmp	.-598    	; 0x40c <kilo_start+0x1e>
     662:	ef e2       	ldi	r30, 0x2F	; 47
     664:	f5 e7       	ldi	r31, 0x75	; 117
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <kilo_start+0x278>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <kilo_start+0x27e>
     66c:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     66e:	80 91 7d 01 	lds	r24, 0x017D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     672:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     676:	80 93 b4 00 	sts	0x00B4, r24
     67a:	c8 ce       	rjmp	.-624    	; 0x40c <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     67c:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     680:	10 92 b4 00 	sts	0x00B4, r1
     684:	8f e2       	ldi	r24, 0x2F	; 47
     686:	95 e7       	ldi	r25, 0x75	; 117
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <kilo_start+0x29a>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <kilo_start+0x2a0>
     68e:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     690:	80 91 91 01 	lds	r24, 0x0191
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     694:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     698:	10 92 b4 00 	sts	0x00B4, r1
     69c:	b7 ce       	rjmp	.-658    	; 0x40c <kilo_start+0x1e>

0000069e <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     69e:	07 c0       	rjmp	.+14     	; 0x6ae <delay+0x10>
     6a0:	ef ec       	ldi	r30, 0xCF	; 207
     6a2:	f7 e0       	ldi	r31, 0x07	; 7
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <delay+0x6>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <delay+0xc>
     6aa:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     6ac:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	b9 f7       	brne	.-18     	; 0x6a0 <delay+0x2>
     6b2:	08 95       	ret

000006b4 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6b4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6b8:	60 93 b4 00 	sts	0x00B4, r22
     6bc:	08 95       	ret

000006be <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6c4:	80 93 b4 00 	sts	0x00B4, r24
     6c8:	8f e0       	ldi	r24, 0x0F	; 15
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	ef ec       	ldi	r30, 0xCF	; 207
     6ce:	f7 e0       	ldi	r31, 0x07	; 7
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <spinup_motors+0x12>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <spinup_motors+0x18>
     6d6:	00 00       	nop
     6d8:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6da:	c1 f7       	brne	.-16     	; 0x6cc <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     6dc:	08 95       	ret

000006de <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     6de:	80 91 5b 01 	lds	r24, 0x015B
     6e2:	81 11       	cpse	r24, r1
     6e4:	1e c0       	rjmp	.+60     	; 0x722 <get_ambientlight+0x44>
        cli();
     6e6:	f8 94       	cli
        adc_setup_conversion(7);
     6e8:	87 e0       	ldi	r24, 0x07	; 7
     6ea:	80 93 7c 00 	sts	0x007C, r24
     6ee:	83 e8       	ldi	r24, 0x83	; 131
     6f0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6f4:	80 91 7a 00 	lds	r24, 0x007A
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6fe:	80 91 7a 00 	lds	r24, 0x007A
     702:	86 fd       	sbrc	r24, 6
     704:	fc cf       	rjmp	.-8      	; 0x6fe <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     706:	80 91 78 00 	lds	r24, 0x0078
     70a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     70e:	10 92 7c 00 	sts	0x007C, r1
     712:	23 ea       	ldi	r18, 0xA3	; 163
     714:	20 93 7a 00 	sts	0x007A, r18
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     71e:	78 94       	sei
     720:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     726:	08 95       	ret

00000728 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     728:	80 91 5b 01 	lds	r24, 0x015B
     72c:	81 11       	cpse	r24, r1
     72e:	1e c0       	rjmp	.+60     	; 0x76c <get_temperature+0x44>
        cli();
     730:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     732:	88 ec       	ldi	r24, 0xC8	; 200
     734:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     738:	87 e8       	ldi	r24, 0x87	; 135
     73a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     73e:	80 91 7a 00 	lds	r24, 0x007A
     742:	80 64       	ori	r24, 0x40	; 64
     744:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     748:	80 91 7a 00 	lds	r24, 0x007A
     74c:	86 fd       	sbrc	r24, 6
     74e:	fc cf       	rjmp	.-8      	; 0x748 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     750:	80 91 78 00 	lds	r24, 0x0078
     754:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     758:	10 92 7c 00 	sts	0x007C, r1
     75c:	23 ea       	ldi	r18, 0xA3	; 163
     75e:	20 93 7a 00 	sts	0x007A, r18
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     768:	78 94       	sei
     76a:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     770:	08 95       	ret

00000772 <rand_hard>:

uint8_t rand_hard() {
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	e0 e0       	ldi	r30, 0x00	; 0
     77c:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     77e:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     780:	03 ea       	ldi	r16, 0xA3	; 163
     782:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     784:	d6 e0       	ldi	r29, 0x06	; 6
     786:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     788:	a1 e0       	ldi	r26, 0x01	; 1
     78a:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     78c:	60 e8       	ldi	r22, 0x80	; 128
     78e:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     790:	f8 94       	cli
            adc_setup_conversion(6);
     792:	d0 93 7c 00 	sts	0x007C, r29
     796:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     79a:	90 91 7a 00 	lds	r25, 0x007A
     79e:	90 64       	ori	r25, 0x40	; 64
     7a0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7a4:	90 91 7a 00 	lds	r25, 0x007A
     7a8:	96 fd       	sbrc	r25, 6
     7aa:	fc cf       	rjmp	.-8      	; 0x7a4 <rand_hard+0x32>
            a = ADCW&0x1;
     7ac:	20 91 78 00 	lds	r18, 0x0078
     7b0:	30 91 79 00 	lds	r19, 0x0079
     7b4:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     7b6:	90 91 7a 00 	lds	r25, 0x007A
     7ba:	90 64       	ori	r25, 0x40	; 64
     7bc:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7c0:	90 91 7a 00 	lds	r25, 0x007A
     7c4:	96 fd       	sbrc	r25, 6
     7c6:	fc cf       	rjmp	.-8      	; 0x7c0 <rand_hard+0x4e>
            b = ADCW&0x1;
     7c8:	40 91 78 00 	lds	r20, 0x0078
     7cc:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     7d0:	10 92 7c 00 	sts	0x007C, r1
     7d4:	00 93 7a 00 	sts	0x007A, r16
     7d8:	10 93 7b 00 	sts	0x007B, r17
            sei();
     7dc:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     7de:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     7e0:	24 13       	cpse	r18, r20
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <rand_hard+0x78>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	71 09       	sbc	r23, r1
     7e8:	99 f6       	brne	.-90     	; 0x790 <rand_hard+0x1e>
        if (a)
     7ea:	22 23       	and	r18, r18
     7ec:	39 f0       	breq	.+14     	; 0x7fc <rand_hard+0x8a>
            num |= (1<<i);
     7ee:	9d 01       	movw	r18, r26
     7f0:	0e 2e       	mov	r0, r30
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <rand_hard+0x84>
     7f4:	22 0f       	add	r18, r18
     7f6:	0a 94       	dec	r0
     7f8:	ea f7       	brpl	.-6      	; 0x7f4 <rand_hard+0x82>
     7fa:	82 2b       	or	r24, r18
     7fc:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     7fe:	e8 30       	cpi	r30, 0x08	; 8
     800:	f1 05       	cpc	r31, r1
     802:	09 f0       	breq	.+2      	; 0x806 <rand_hard+0x94>
     804:	c3 cf       	rjmp	.-122    	; 0x78c <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	08 95       	ret

00000810 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     810:	80 91 0e 01 	lds	r24, 0x010E
     814:	98 2f       	mov	r25, r24
     816:	99 0f       	add	r25, r25
     818:	99 0f       	add	r25, r25
     81a:	99 0f       	add	r25, r25
     81c:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     81e:	90 91 30 01 	lds	r25, 0x0130
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	29 0f       	add	r18, r25
     826:	20 93 30 01 	sts	0x0130, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     82a:	28 2f       	mov	r18, r24
     82c:	22 95       	swap	r18
     82e:	26 95       	lsr	r18
     830:	27 70       	andi	r18, 0x07	; 7
     832:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     834:	96 95       	lsr	r25
     836:	96 95       	lsr	r25
     838:	89 27       	eor	r24, r25
     83a:	80 93 0e 01 	sts	0x010E, r24
    return seed;
}
     83e:	08 95       	ret

00000840 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     840:	80 93 0e 01 	sts	0x010E, r24
     844:	08 95       	ret

00000846 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     846:	80 91 5b 01 	lds	r24, 0x015B
     84a:	81 11       	cpse	r24, r1
     84c:	16 c0       	rjmp	.+44     	; 0x87a <get_voltage+0x34>
        cli();                                    // disable interrupts
     84e:	f8 94       	cli
        adc_setup_conversion(6);
     850:	86 e0       	ldi	r24, 0x06	; 6
     852:	80 93 7c 00 	sts	0x007C, r24
     856:	83 e8       	ldi	r24, 0x83	; 131
     858:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     85c:	80 91 7a 00 	lds	r24, 0x007A
     860:	80 64       	ori	r24, 0x40	; 64
     862:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     866:	80 91 7a 00 	lds	r24, 0x007A
     86a:	86 fd       	sbrc	r24, 6
     86c:	fc cf       	rjmp	.-8      	; 0x866 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     86e:	80 91 78 00 	lds	r24, 0x0078
     872:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     876:	78 94       	sei
     878:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     87e:	08 95       	ret

00000880 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     880:	2f 92       	push	r2
     882:	3f 92       	push	r3
     884:	4f 92       	push	r4
     886:	5f 92       	push	r5
     888:	6f 92       	push	r6
     88a:	7f 92       	push	r7
     88c:	8f 92       	push	r8
     88e:	9f 92       	push	r9
     890:	af 92       	push	r10
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <estimate_distance+0x26>
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <estimate_distance+0x28>
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <estimate_distance+0x2a>
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     8b0:	dc 01       	movw	r26, r24
     8b2:	12 96       	adiw	r26, 0x02	; 2
     8b4:	0d 90       	ld	r0, X+
     8b6:	bc 91       	ld	r27, X
     8b8:	a0 2d       	mov	r26, r0
     8ba:	be 83       	std	Y+6, r27	; 0x06
     8bc:	ad 83       	std	Y+5, r26	; 0x05
     8be:	a4 38       	cpi	r26, 0x84	; 132
     8c0:	e3 e0       	ldi	r30, 0x03	; 3
     8c2:	be 07       	cpc	r27, r30
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <estimate_distance+0x48>
     8c6:	c9 c0       	rjmp	.+402    	; 0xa5a <__stack+0x15b>
        if (dist->high_gain > kilo_irhigh[0]) {
     8c8:	80 91 35 01 	lds	r24, 0x0135
     8cc:	90 91 36 01 	lds	r25, 0x0136
     8d0:	8a 17       	cp	r24, r26
     8d2:	9b 07       	cpc	r25, r27
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <estimate_distance+0x58>
     8d6:	37 c1       	rjmp	.+622    	; 0xb46 <__stack+0x247>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8d8:	00 91 37 01 	lds	r16, 0x0137
     8dc:	10 91 38 01 	lds	r17, 0x0138
     8e0:	0a 17       	cp	r16, r26
     8e2:	1b 07       	cpc	r17, r27
     8e4:	08 f4       	brcc	.+2      	; 0x8e8 <estimate_distance+0x68>
     8e6:	2f c2       	rjmp	.+1118   	; 0xd46 <__stack+0x447>
     8e8:	00 91 39 01 	lds	r16, 0x0139
     8ec:	10 91 3a 01 	lds	r17, 0x013A
     8f0:	0a 17       	cp	r16, r26
     8f2:	1b 07       	cpc	r17, r27
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <estimate_distance+0x78>
     8f6:	2f c2       	rjmp	.+1118   	; 0xd56 <__stack+0x457>
     8f8:	00 91 3b 01 	lds	r16, 0x013B
     8fc:	10 91 3c 01 	lds	r17, 0x013C
     900:	0a 17       	cp	r16, r26
     902:	1b 07       	cpc	r17, r27
     904:	08 f4       	brcc	.+2      	; 0x908 <__stack+0x9>
     906:	2f c2       	rjmp	.+1118   	; 0xd66 <__stack+0x467>
     908:	00 91 3d 01 	lds	r16, 0x013D
     90c:	10 91 3e 01 	lds	r17, 0x013E
     910:	0a 17       	cp	r16, r26
     912:	1b 07       	cpc	r17, r27
     914:	08 f4       	brcc	.+2      	; 0x918 <__stack+0x19>
     916:	2f c2       	rjmp	.+1118   	; 0xd76 <__stack+0x477>
     918:	00 91 3f 01 	lds	r16, 0x013F
     91c:	10 91 40 01 	lds	r17, 0x0140
     920:	0a 17       	cp	r16, r26
     922:	1b 07       	cpc	r17, r27
     924:	08 f4       	brcc	.+2      	; 0x928 <__stack+0x29>
     926:	ef c1       	rjmp	.+990    	; 0xd06 <__stack+0x407>
     928:	00 91 41 01 	lds	r16, 0x0141
     92c:	10 91 42 01 	lds	r17, 0x0142
     930:	0a 17       	cp	r16, r26
     932:	1b 07       	cpc	r17, r27
     934:	08 f4       	brcc	.+2      	; 0x938 <__stack+0x39>
     936:	27 c2       	rjmp	.+1102   	; 0xd86 <__stack+0x487>
     938:	00 91 43 01 	lds	r16, 0x0143
     93c:	10 91 44 01 	lds	r17, 0x0144
     940:	0a 17       	cp	r16, r26
     942:	1b 07       	cpc	r17, r27
     944:	08 f4       	brcc	.+2      	; 0x948 <__stack+0x49>
     946:	27 c2       	rjmp	.+1102   	; 0xd96 <__stack+0x497>
     948:	00 91 45 01 	lds	r16, 0x0145
     94c:	10 91 46 01 	lds	r17, 0x0146
     950:	0a 17       	cp	r16, r26
     952:	1b 07       	cpc	r17, r27
     954:	08 f4       	brcc	.+2      	; 0x958 <__stack+0x59>
     956:	27 c2       	rjmp	.+1102   	; 0xda6 <__stack+0x4a7>
     958:	00 91 47 01 	lds	r16, 0x0147
     95c:	10 91 48 01 	lds	r17, 0x0148
     960:	0a 17       	cp	r16, r26
     962:	1b 07       	cpc	r17, r27
     964:	08 f4       	brcc	.+2      	; 0x968 <__stack+0x69>
     966:	27 c2       	rjmp	.+1102   	; 0xdb6 <__stack+0x4b7>
     968:	00 91 49 01 	lds	r16, 0x0149
     96c:	10 91 4a 01 	lds	r17, 0x014A
     970:	0a 17       	cp	r16, r26
     972:	1b 07       	cpc	r17, r27
     974:	08 f4       	brcc	.+2      	; 0x978 <__stack+0x79>
     976:	27 c2       	rjmp	.+1102   	; 0xdc6 <__stack+0x4c7>
     978:	00 91 4b 01 	lds	r16, 0x014B
     97c:	10 91 4c 01 	lds	r17, 0x014C
     980:	0a 17       	cp	r16, r26
     982:	1b 07       	cpc	r17, r27
     984:	08 f4       	brcc	.+2      	; 0x988 <__stack+0x89>
     986:	23 c2       	rjmp	.+1094   	; 0xdce <__stack+0x4cf>
     988:	00 91 4d 01 	lds	r16, 0x014D
     98c:	10 91 4e 01 	lds	r17, 0x014E
     990:	0a 17       	cp	r16, r26
     992:	1b 07       	cpc	r17, r27
     994:	08 f4       	brcc	.+2      	; 0x998 <__stack+0x99>
     996:	23 c2       	rjmp	.+1094   	; 0xdde <__stack+0x4df>
     998:	00 91 4f 01 	lds	r16, 0x014F
     99c:	10 91 50 01 	lds	r17, 0x0150
     9a0:	0a 17       	cp	r16, r26
     9a2:	1b 07       	cpc	r17, r27
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <__stack+0xa9>
     9a6:	23 c2       	rjmp	.+1094   	; 0xdee <__stack+0x4ef>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 ed       	ldi	r26, 0xD0	; 208
     9ae:	b0 e4       	ldi	r27, 0x40	; 64
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	ab 83       	std	Y+3, r26	; 0x03
     9b6:	bc 83       	std	Y+4, r27	; 0x04
     9b8:	4c e0       	ldi	r20, 0x0C	; 12
     9ba:	e4 2e       	mov	r14, r20
     9bc:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9be:	f7 01       	movw	r30, r14
     9c0:	ee 0f       	add	r30, r30
     9c2:	ff 1f       	adc	r31, r31
     9c4:	eb 5c       	subi	r30, 0xCB	; 203
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	80 81       	ld	r24, Z
     9ca:	91 81       	ldd	r25, Z+1	; 0x01
     9cc:	b8 01       	movw	r22, r16
     9ce:	68 1b       	sub	r22, r24
     9d0:	79 0b       	sbc	r23, r25
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     9da:	9b 01       	movw	r18, r22
     9dc:	ac 01       	movw	r20, r24
     9de:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     9e2:	6b 01       	movw	r12, r22
     9e4:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9e6:	ad 81       	ldd	r26, Y+5	; 0x05
     9e8:	be 81       	ldd	r27, Y+6	; 0x06
     9ea:	bd 01       	movw	r22, r26
     9ec:	bb 0f       	add	r27, r27
     9ee:	88 0b       	sbc	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     9f6:	4b 01       	movw	r8, r22
     9f8:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     9fa:	b8 01       	movw	r22, r16
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     a04:	2b 01       	movw	r4, r22
     a06:	3c 01       	movw	r6, r24
     a08:	29 81       	ldd	r18, Y+1	; 0x01
     a0a:	3a 81       	ldd	r19, Y+2	; 0x02
     a0c:	4b 81       	ldd	r20, Y+3	; 0x03
     a0e:	5c 81       	ldd	r21, Y+4	; 0x04
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     a18:	9b 01       	movw	r18, r22
     a1a:	ac 01       	movw	r20, r24
     a1c:	c3 01       	movw	r24, r6
     a1e:	b2 01       	movw	r22, r4
     a20:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     a24:	9b 01       	movw	r18, r22
     a26:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a28:	c5 01       	movw	r24, r10
     a2a:	b4 01       	movw	r22, r8
     a2c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e2       	ldi	r20, 0x20	; 32
     a36:	51 e4       	ldi	r21, 0x41	; 65
     a38:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
            b=((int)((int)b/(int)slope));
     a3c:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     a40:	8b 01       	movw	r16, r22
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
     a46:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     a4a:	ab 01       	movw	r20, r22
     a4c:	bc 01       	movw	r22, r24
     a4e:	c8 01       	movw	r24, r16
     a50:	ba 01       	movw	r22, r20
     a52:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__divmodhi4>
            dist_high=b;
     a56:	16 2f       	mov	r17, r22
     a58:	77 c0       	rjmp	.+238    	; 0xb48 <__stack+0x249>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a5a:	dc 01       	movw	r26, r24
     a5c:	cd 90       	ld	r12, X+
     a5e:	dc 90       	ld	r13, X
     a60:	80 91 5c 01 	lds	r24, 0x015C
     a64:	90 91 5d 01 	lds	r25, 0x015D
     a68:	8c 15       	cp	r24, r12
     a6a:	9d 05       	cpc	r25, r13
     a6c:	08 f4       	brcc	.+2      	; 0xa70 <__stack+0x171>
     a6e:	8c c0       	rjmp	.+280    	; 0xb88 <__stack+0x289>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a70:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a72:	e0 90 5e 01 	lds	r14, 0x015E
     a76:	f0 90 5f 01 	lds	r15, 0x015F
     a7a:	ec 14       	cp	r14, r12
     a7c:	fd 04       	cpc	r15, r13
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <__stack+0x183>
     a80:	5e c1       	rjmp	.+700    	; 0xd3e <__stack+0x43f>
     a82:	e0 90 60 01 	lds	r14, 0x0160
     a86:	f0 90 61 01 	lds	r15, 0x0161
     a8a:	ec 14       	cp	r14, r12
     a8c:	fd 04       	cpc	r15, r13
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__stack+0x193>
     a90:	5e c1       	rjmp	.+700    	; 0xd4e <__stack+0x44f>
     a92:	e0 90 62 01 	lds	r14, 0x0162
     a96:	f0 90 63 01 	lds	r15, 0x0163
     a9a:	ec 14       	cp	r14, r12
     a9c:	fd 04       	cpc	r15, r13
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__stack+0x1a3>
     aa0:	5e c1       	rjmp	.+700    	; 0xd5e <__stack+0x45f>
     aa2:	e0 90 64 01 	lds	r14, 0x0164
     aa6:	f0 90 65 01 	lds	r15, 0x0165
     aaa:	ec 14       	cp	r14, r12
     aac:	fd 04       	cpc	r15, r13
     aae:	08 f4       	brcc	.+2      	; 0xab2 <__stack+0x1b3>
     ab0:	5e c1       	rjmp	.+700    	; 0xd6e <__stack+0x46f>
     ab2:	e0 90 66 01 	lds	r14, 0x0166
     ab6:	f0 90 67 01 	lds	r15, 0x0167
     aba:	ec 14       	cp	r14, r12
     abc:	fd 04       	cpc	r15, r13
     abe:	08 f4       	brcc	.+2      	; 0xac2 <__stack+0x1c3>
     ac0:	c3 c0       	rjmp	.+390    	; 0xc48 <__stack+0x349>
     ac2:	e0 90 68 01 	lds	r14, 0x0168
     ac6:	f0 90 69 01 	lds	r15, 0x0169
     aca:	ec 14       	cp	r14, r12
     acc:	fd 04       	cpc	r15, r13
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	56 c1       	rjmp	.+684    	; 0xd7e <__stack+0x47f>
     ad2:	e0 90 6a 01 	lds	r14, 0x016A
     ad6:	f0 90 6b 01 	lds	r15, 0x016B
     ada:	ec 14       	cp	r14, r12
     adc:	fd 04       	cpc	r15, r13
     ade:	08 f4       	brcc	.+2      	; 0xae2 <__stack+0x1e3>
     ae0:	56 c1       	rjmp	.+684    	; 0xd8e <__stack+0x48f>
     ae2:	e0 90 6c 01 	lds	r14, 0x016C
     ae6:	f0 90 6d 01 	lds	r15, 0x016D
     aea:	ec 14       	cp	r14, r12
     aec:	fd 04       	cpc	r15, r13
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <__stack+0x1f3>
     af0:	56 c1       	rjmp	.+684    	; 0xd9e <__stack+0x49f>
     af2:	e0 90 6e 01 	lds	r14, 0x016E
     af6:	f0 90 6f 01 	lds	r15, 0x016F
     afa:	ec 14       	cp	r14, r12
     afc:	fd 04       	cpc	r15, r13
     afe:	08 f4       	brcc	.+2      	; 0xb02 <__stack+0x203>
     b00:	56 c1       	rjmp	.+684    	; 0xdae <__stack+0x4af>
     b02:	e0 90 70 01 	lds	r14, 0x0170
     b06:	f0 90 71 01 	lds	r15, 0x0171
     b0a:	ec 14       	cp	r14, r12
     b0c:	fd 04       	cpc	r15, r13
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <__stack+0x213>
     b10:	56 c1       	rjmp	.+684    	; 0xdbe <__stack+0x4bf>
     b12:	e0 90 72 01 	lds	r14, 0x0172
     b16:	f0 90 73 01 	lds	r15, 0x0173
     b1a:	ec 14       	cp	r14, r12
     b1c:	fd 04       	cpc	r15, r13
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <__stack+0x223>
     b20:	5a c1       	rjmp	.+692    	; 0xdd6 <__stack+0x4d7>
     b22:	e0 90 74 01 	lds	r14, 0x0174
     b26:	f0 90 75 01 	lds	r15, 0x0175
     b2a:	ec 14       	cp	r14, r12
     b2c:	fd 04       	cpc	r15, r13
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <__stack+0x233>
     b30:	5a c1       	rjmp	.+692    	; 0xde6 <__stack+0x4e7>
     b32:	e0 90 76 01 	lds	r14, 0x0176
     b36:	f0 90 77 01 	lds	r15, 0x0177
     b3a:	ec 14       	cp	r14, r12
     b3c:	fd 04       	cpc	r15, r13
     b3e:	08 f4       	brcc	.+2      	; 0xb42 <__stack+0x243>
     b40:	5a c1       	rjmp	.+692    	; 0xdf6 <__stack+0x4f7>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b42:	0a e5       	ldi	r16, 0x5A	; 90
     b44:	31 c0       	rjmp	.+98     	; 0xba8 <__stack+0x2a9>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b46:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b48:	ed 81       	ldd	r30, Y+5	; 0x05
     b4a:	fe 81       	ldd	r31, Y+6	; 0x06
     b4c:	ed 3b       	cpi	r30, 0xBD	; 189
     b4e:	f2 40       	sbci	r31, 0x02	; 2
     b50:	fc f4       	brge	.+62     	; 0xb90 <__stack+0x291>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b52:	81 e2       	ldi	r24, 0x21	; 33
     b54:	81 0f       	add	r24, r17
    }
}
     b56:	26 96       	adiw	r28, 0x06	; 6
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	7f 90       	pop	r7
     b7c:	6f 90       	pop	r6
     b7e:	5f 90       	pop	r5
     b80:	4f 90       	pop	r4
     b82:	3f 90       	pop	r3
     b84:	2f 90       	pop	r2
     b86:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b88:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b8a:	81 e2       	ldi	r24, 0x21	; 33
     b8c:	80 0f       	add	r24, r16
     b8e:	e3 cf       	rjmp	.-58     	; 0xb56 <__stack+0x257>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b90:	d1 01       	movw	r26, r2
     b92:	cd 90       	ld	r12, X+
     b94:	dc 90       	ld	r13, X
     b96:	80 91 5c 01 	lds	r24, 0x015C
     b9a:	90 91 5d 01 	lds	r25, 0x015D
     b9e:	8c 15       	cp	r24, r12
     ba0:	9d 05       	cpc	r25, r13
     ba2:	08 f0       	brcs	.+2      	; 0xba6 <__stack+0x2a7>
     ba4:	66 cf       	rjmp	.-308    	; 0xa72 <__stack+0x173>
            dist_low=0;
     ba6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     ba8:	1f 3f       	cpi	r17, 0xFF	; 255
     baa:	79 f3       	breq	.-34     	; 0xb8a <__stack+0x28b>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     bac:	ed 81       	ldd	r30, Y+5	; 0x05
     bae:	fe 81       	ldd	r31, Y+6	; 0x06
     bb0:	bf 01       	movw	r22, r30
     bb2:	ff 0f       	add	r31, r31
     bb4:	88 0b       	sbc	r24, r24
     bb6:	99 0b       	sbc	r25, r25
     bb8:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     bbc:	6b 01       	movw	r12, r22
     bbe:	7c 01       	movw	r14, r24
     bc0:	61 2f       	mov	r22, r17
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     bcc:	4b 01       	movw	r8, r22
     bce:	5c 01       	movw	r10, r24
     bd0:	a7 01       	movw	r20, r14
     bd2:	96 01       	movw	r18, r12
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	81 e6       	ldi	r24, 0x61	; 97
     bda:	94 e4       	ldi	r25, 0x44	; 68
     bdc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	c5 01       	movw	r24, r10
     be6:	b4 01       	movw	r22, r8
     be8:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     bec:	4b 01       	movw	r8, r22
     bee:	5c 01       	movw	r10, r24
     bf0:	60 2f       	mov	r22, r16
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     bfc:	2b 01       	movw	r4, r22
     bfe:	3c 01       	movw	r6, r24
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	4f e2       	ldi	r20, 0x2F	; 47
     c06:	54 e4       	ldi	r21, 0x44	; 68
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	c3 01       	movw	r24, r6
     c16:	b2 01       	movw	r22, r4
     c18:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     c1c:	9b 01       	movw	r18, r22
     c1e:	ac 01       	movw	r20, r24
     c20:	c5 01       	movw	r24, r10
     c22:	b4 01       	movw	r22, r8
     c24:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	48 e4       	ldi	r20, 0x48	; 72
     c2e:	53 e4       	ldi	r21, 0x43	; 67
     c30:	0e 94 21 0b 	call	0x1642	; 0x1642 <__divsf3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	44 e0       	ldi	r20, 0x04	; 4
     c3a:	52 e4       	ldi	r21, 0x42	; 66
     c3c:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     c40:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fixunssfsi>
     c44:	86 2f       	mov	r24, r22
     c46:	87 cf       	rjmp	.-242    	; 0xb56 <__stack+0x257>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c48:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c4a:	85 e0       	ldi	r24, 0x05	; 5
     c4c:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	fc 01       	movw	r30, r24
     c54:	e6 5a       	subi	r30, 0xA6	; 166
     c56:	fe 4f       	sbci	r31, 0xFE	; 254
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	b7 01       	movw	r22, r14
     c5e:	68 1b       	sub	r22, r24
     c60:	79 0b       	sbc	r23, r25
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     c6a:	9b 01       	movw	r18, r22
     c6c:	ac 01       	movw	r20, r24
     c6e:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     c72:	4b 01       	movw	r8, r22
     c74:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c76:	b6 01       	movw	r22, r12
     c78:	dd 0c       	add	r13, r13
     c7a:	88 0b       	sbc	r24, r24
     c7c:	99 0b       	sbc	r25, r25
     c7e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c86:	b7 01       	movw	r22, r14
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     c90:	6b 01       	movw	r12, r22
     c92:	7c 01       	movw	r14, r24
     c94:	60 2f       	mov	r22, r16
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	a9 01       	movw	r20, r18
     cb2:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     cb6:	a5 01       	movw	r20, r10
     cb8:	94 01       	movw	r18, r8
     cba:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     cbe:	9b 01       	movw	r18, r22
     cc0:	ac 01       	movw	r20, r24
     cc2:	c7 01       	movw	r24, r14
     cc4:	b6 01       	movw	r22, r12
     cc6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     cca:	9b 01       	movw	r18, r22
     ccc:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cce:	c3 01       	movw	r24, r6
     cd0:	b2 01       	movw	r22, r4
     cd2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__subsf3>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e2       	ldi	r20, 0x20	; 32
     cdc:	51 e4       	ldi	r21, 0x41	; 65
     cde:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
                b=((int)((int)b/(int)slope));
     ce2:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     ce6:	7b 01       	movw	r14, r22
     ce8:	c5 01       	movw	r24, r10
     cea:	b4 01       	movw	r22, r8
     cec:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fixsfsi>
     cf0:	ab 01       	movw	r20, r22
     cf2:	bc 01       	movw	r22, r24
     cf4:	c7 01       	movw	r24, r14
     cf6:	ba 01       	movw	r22, r20
     cf8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__divmodhi4>
                dist_low=b;
     cfc:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     cfe:	6f 3f       	cpi	r22, 0xFF	; 255
     d00:	09 f0       	breq	.+2      	; 0xd04 <__stack+0x405>
     d02:	52 cf       	rjmp	.-348    	; 0xba8 <__stack+0x2a9>
     d04:	26 cf       	rjmp	.-436    	; 0xb52 <__stack+0x253>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d06:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	7c 01       	movw	r14, r24
     d0e:	f1 e0       	ldi	r31, 0x01	; 1
     d10:	ef 1a       	sub	r14, r31
     d12:	f1 08       	sbc	r15, r1
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__floatunsisf>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	5f e3       	ldi	r21, 0x3F	; 63
     d26:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__mulsf3>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	a9 01       	movw	r20, r18
     d30:	0e 94 b5 0a 	call	0x156a	; 0x156a <__addsf3>
     d34:	69 83       	std	Y+1, r22	; 0x01
     d36:	7a 83       	std	Y+2, r23	; 0x02
     d38:	8b 83       	std	Y+3, r24	; 0x03
     d3a:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d3c:	40 ce       	rjmp	.-896    	; 0x9be <__stack+0xbf>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d3e:	01 e0       	ldi	r16, 0x01	; 1
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	84 cf       	rjmp	.-248    	; 0xc4e <__stack+0x34f>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	df cf       	rjmp	.-66     	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d4e:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	7c cf       	rjmp	.-264    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d56:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	d7 cf       	rjmp	.-82     	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d5e:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	74 cf       	rjmp	.-280    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d66:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	cf cf       	rjmp	.-98     	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d6e:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d70:	84 e0       	ldi	r24, 0x04	; 4
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	6c cf       	rjmp	.-296    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d76:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	c7 cf       	rjmp	.-114    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d7e:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d80:	86 e0       	ldi	r24, 0x06	; 6
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	64 cf       	rjmp	.-312    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d86:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d88:	86 e0       	ldi	r24, 0x06	; 6
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	bf cf       	rjmp	.-130    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d8e:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d90:	87 e0       	ldi	r24, 0x07	; 7
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	5c cf       	rjmp	.-328    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d96:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	b7 cf       	rjmp	.-146    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d9e:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     da0:	88 e0       	ldi	r24, 0x08	; 8
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	54 cf       	rjmp	.-344    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     da8:	88 e0       	ldi	r24, 0x08	; 8
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	af cf       	rjmp	.-162    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dae:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     db0:	89 e0       	ldi	r24, 0x09	; 9
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	4c cf       	rjmp	.-360    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     db6:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     db8:	89 e0       	ldi	r24, 0x09	; 9
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a7 cf       	rjmp	.-178    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dbe:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     dc0:	8a e0       	ldi	r24, 0x0A	; 10
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	44 cf       	rjmp	.-376    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dc6:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     dc8:	8a e0       	ldi	r24, 0x0A	; 10
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9f cf       	rjmp	.-194    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dce:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     dd0:	8b e0       	ldi	r24, 0x0B	; 11
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9b cf       	rjmp	.-202    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd6:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     dd8:	8b e0       	ldi	r24, 0x0B	; 11
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	38 cf       	rjmp	.-400    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dde:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     de0:	8c e0       	ldi	r24, 0x0C	; 12
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	93 cf       	rjmp	.-218    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     de6:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     de8:	8c e0       	ldi	r24, 0x0C	; 12
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	30 cf       	rjmp	.-416    	; 0xc4e <__stack+0x34f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dee:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     df0:	8d e0       	ldi	r24, 0x0D	; 13
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	8b cf       	rjmp	.-234    	; 0xd0c <__stack+0x40d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     df6:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     df8:	8d e0       	ldi	r24, 0x0D	; 13
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	28 cf       	rjmp	.-432    	; 0xc4e <__stack+0x34f>

00000dfe <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	6f 93       	push	r22
     e12:	7f 93       	push	r23
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
     e18:	af 93       	push	r26
     e1a:	bf 93       	push	r27
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
    tx_clock += tx_increment;
     e20:	20 91 7b 01 	lds	r18, 0x017B
     e24:	30 91 7c 01 	lds	r19, 0x017C
     e28:	80 91 79 01 	lds	r24, 0x0179
     e2c:	90 91 7a 01 	lds	r25, 0x017A
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	90 93 7c 01 	sts	0x017C, r25
     e38:	80 93 7b 01 	sts	0x017B, r24
    tx_increment = 0xFF;
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	90 93 7a 01 	sts	0x017A, r25
     e44:	80 93 79 01 	sts	0x0179, r24
    OCR0A = tx_increment;
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e4c:	80 91 57 01 	lds	r24, 0x0157
     e50:	90 91 58 01 	lds	r25, 0x0158
     e54:	a0 91 59 01 	lds	r26, 0x0159
     e58:	b0 91 5a 01 	lds	r27, 0x015A
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	a1 1d       	adc	r26, r1
     e60:	b1 1d       	adc	r27, r1
     e62:	80 93 57 01 	sts	0x0157, r24
     e66:	90 93 58 01 	sts	0x0158, r25
     e6a:	a0 93 59 01 	sts	0x0159, r26
     e6e:	b0 93 5a 01 	sts	0x015A, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e72:	80 91 5b 01 	lds	r24, 0x015B
     e76:	81 11       	cpse	r24, r1
     e78:	0f c0       	rjmp	.+30     	; 0xe98 <__vector_14+0x9a>
     e7a:	80 91 8a 01 	lds	r24, 0x018A
     e7e:	90 91 8b 01 	lds	r25, 0x018B
     e82:	20 91 7b 01 	lds	r18, 0x017B
     e86:	30 91 7c 01 	lds	r19, 0x017C
     e8a:	82 17       	cp	r24, r18
     e8c:	93 07       	cpc	r25, r19
     e8e:	20 f4       	brcc	.+8      	; 0xe98 <__vector_14+0x9a>
     e90:	80 91 33 01 	lds	r24, 0x0133
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	89 f0       	breq	.+34     	; 0xeba <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     eba:	e0 91 11 01 	lds	r30, 0x0111
     ebe:	f0 91 12 01 	lds	r31, 0x0112
     ec2:	09 95       	icall
        if (msg) {
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	41 f3       	breq	.-48     	; 0xe98 <__vector_14+0x9a>
            if (message_send(msg)) {
     ec8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <message_send>
     ecc:	81 11       	cpse	r24, r1
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     ed0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <rand>
     ed4:	99 27       	eor	r25, r25
     ed6:	90 93 7a 01 	sts	0x017A, r25
     eda:	80 93 79 01 	sts	0x0179, r24
                OCR0A = tx_increment;
     ede:	87 bd       	out	0x27, r24	; 39
     ee0:	db cf       	rjmp	.-74     	; 0xe98 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ee2:	e0 91 0f 01 	lds	r30, 0x010F
     ee6:	f0 91 10 01 	lds	r31, 0x0110
     eea:	09 95       	icall
                tx_clock = 0;
     eec:	10 92 7c 01 	sts	0x017C, r1
     ef0:	10 92 7b 01 	sts	0x017B, r1
     ef4:	d1 cf       	rjmp	.-94     	; 0xe98 <__vector_14+0x9a>

00000ef6 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     ef6:	80 ff       	sbrs	r24, 0
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <set_color+0x26>
        DDRD |= (1<<5);
     efa:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     efc:	81 ff       	sbrs	r24, 1
     efe:	11 c0       	rjmp	.+34     	; 0xf22 <set_color+0x2c>
        DDRD |= (1<<4);
     f00:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     f02:	82 ff       	sbrs	r24, 2
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <set_color+0x32>
        DDRC |= (1<<3);
     f06:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     f08:	83 ff       	sbrs	r24, 3
     f0a:	11 c0       	rjmp	.+34     	; 0xf2e <set_color+0x38>
        DDRC |= (1<<2);
     f0c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     f0e:	84 ff       	sbrs	r24, 4
     f10:	11 c0       	rjmp	.+34     	; 0xf34 <set_color+0x3e>
        DDRC |= (1<<5);
     f12:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     f14:	85 fd       	sbrc	r24, 5
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f18:	3c 98       	cbi	0x07, 4	; 7
     f1a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f1c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f1e:	81 fd       	sbrc	r24, 1
     f20:	ef cf       	rjmp	.-34     	; 0xf00 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f22:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f24:	82 fd       	sbrc	r24, 2
     f26:	ef cf       	rjmp	.-34     	; 0xf06 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f28:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f2a:	83 fd       	sbrc	r24, 3
     f2c:	ef cf       	rjmp	.-34     	; 0xf0c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f2e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f30:	84 fd       	sbrc	r24, 4
     f32:	ef cf       	rjmp	.-34     	; 0xf12 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f34:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f36:	85 ff       	sbrs	r24, 5
     f38:	ef cf       	rjmp	.-34     	; 0xf18 <set_color+0x22>
        DDRC |= (1<<4);
     f3a:	3c 9a       	sbi	0x07, 4	; 7
     f3c:	08 95       	ret

00000f3e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
    rx_timer_off();
     f4c:	10 92 81 00 	sts	0x0081, r1
     f50:	10 92 85 00 	sts	0x0085, r1
     f54:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 34 01 	sts	0x0134, r24
    rx_leadingbyte = 1;
     f5e:	80 93 78 01 	sts	0x0178, r24
    rx_busy = 0;
     f62:	10 92 5b 01 	sts	0x015B, r1
    adc_trigger_high_gain();
     f66:	10 92 7c 00 	sts	0x007C, r1
     f6a:	93 ea       	ldi	r25, 0xA3	; 163
     f6c:	90 93 7a 00 	sts	0x007A, r25
     f70:	80 93 7b 00 	sts	0x007B, r24
}
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     fa8:	20 91 84 00 	lds	r18, 0x0084
     fac:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	40 93 5b 01 	sts	0x015B, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     fb6:	80 91 34 01 	lds	r24, 0x0134
     fba:	88 23       	and	r24, r24
     fbc:	a9 f1       	breq	.+106    	; 0x1028 <__vector_23+0xa6>
        rx_timer_on();
     fbe:	10 92 85 00 	sts	0x0085, r1
     fc2:	10 92 84 00 	sts	0x0084, r1
     fc6:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     fca:	10 92 8c 01 	sts	0x018C, r1
        rx_leadingbit = 0;
     fce:	10 92 34 01 	sts	0x0134, r1
        if (rx_leadingbyte) {
     fd2:	80 91 78 01 	lds	r24, 0x0178
     fd6:	88 23       	and	r24, r24
     fd8:	a1 f0       	breq	.+40     	; 0x1002 <__vector_23+0x80>
            adc_finish_conversion();
     fda:	80 91 7a 00 	lds	r24, 0x007A
     fde:	86 fd       	sbrc	r24, 6
     fe0:	fc cf       	rjmp	.-8      	; 0xfda <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     fe2:	80 91 78 00 	lds	r24, 0x0078
     fe6:	90 91 79 00 	lds	r25, 0x0079
     fea:	90 93 56 01 	sts	0x0156, r25
     fee:	80 93 55 01 	sts	0x0155, r24
            adc_trigger_low_gain();
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 93 7c 00 	sts	0x007C, r24
     ff8:	93 ea       	ldi	r25, 0xA3	; 163
     ffa:	90 93 7a 00 	sts	0x007A, r25
     ffe:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1028:	c9 01       	movw	r24, r18
    102a:	87 58       	subi	r24, 0x87	; 135
    102c:	91 09       	sbc	r25, r1
    102e:	84 37       	cpi	r24, 0x74	; 116
    1030:	99 40       	sbci	r25, 0x09	; 9
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__vector_23+0xb4>
    1034:	52 c0       	rjmp	.+164    	; 0x10da <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1036:	26 58       	subi	r18, 0x86	; 134
    1038:	31 09       	sbc	r19, r1
    103a:	a4 ef       	ldi	r26, 0xF4	; 244
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	0e 94 91 0a 	call	0x1522	; 0x1522 <__umulhisi3>
    1042:	aa 27       	eor	r26, r26
    1044:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1046:	88 30       	cpi	r24, 0x08	; 8
    1048:	91 05       	cpc	r25, r1
    104a:	a1 05       	cpc	r26, r1
    104c:	b1 05       	cpc	r27, r1
    104e:	08 f4       	brcc	.+2      	; 0x1052 <__vector_23+0xd0>
    1050:	7b c0       	rjmp	.+246    	; 0x1148 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1052:	40 93 34 01 	sts	0x0134, r20
                if (rx_leadingbyte) {
    1056:	80 91 78 01 	lds	r24, 0x0178
    105a:	81 11       	cpse	r24, r1
    105c:	52 c0       	rjmp	.+164    	; 0x1102 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    105e:	80 91 52 01 	lds	r24, 0x0152
    1062:	e8 2f       	mov	r30, r24
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	e2 58       	subi	r30, 0x82	; 130
    1068:	fe 4f       	sbci	r31, 0xFE	; 254
    106a:	90 91 8c 01 	lds	r25, 0x018C
    106e:	90 83       	st	Z, r25
                    rx_byteindex++;
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 52 01 	sts	0x0152, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1076:	8c 30       	cpi	r24, 0x0C	; 12
    1078:	21 f6       	brne	.-120    	; 0x1002 <__vector_23+0x80>
                        rx_timer_off();
    107a:	10 92 81 00 	sts	0x0081, r1
    107e:	10 92 85 00 	sts	0x0085, r1
    1082:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1086:	40 93 78 01 	sts	0x0178, r20
                        rx_busy = 0;
    108a:	10 92 5b 01 	sts	0x015B, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    108e:	c0 91 88 01 	lds	r28, 0x0188
    1092:	d0 91 89 01 	lds	r29, 0x0189
    1096:	8e e7       	ldi	r24, 0x7E	; 126
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	0e 94 cb 09 	call	0x1396	; 0x1396 <message_crc>
    109e:	c8 17       	cp	r28, r24
    10a0:	d9 07       	cpc	r29, r25
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__vector_23+0x124>
    10a4:	ae cf       	rjmp	.-164    	; 0x1002 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    10a6:	80 91 87 01 	lds	r24, 0x0187
    10aa:	87 ff       	sbrs	r24, 7
    10ac:	61 c0       	rjmp	.+194    	; 0x1170 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    10ae:	98 e7       	ldi	r25, 0x78	; 120
    10b0:	98 0f       	add	r25, r24
    10b2:	93 30       	cpi	r25, 0x03	; 3
    10b4:	30 f0       	brcs	.+12     	; 0x10c2 <__vector_23+0x140>
        motors_off();
    10b6:	53 98       	cbi	0x0a, 3	; 10
    10b8:	23 98       	cbi	0x04, 3	; 4
    10ba:	10 92 b4 00 	sts	0x00B4, r1
    10be:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	fc 01       	movw	r30, r24
    10c6:	e0 58       	subi	r30, 0x80	; 128
    10c8:	f1 09       	sbc	r31, r1
    10ca:	eb 30       	cpi	r30, 0x0B	; 11
    10cc:	f1 05       	cpc	r31, r1
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__vector_23+0x150>
    10d0:	98 cf       	rjmp	.-208    	; 0x1002 <__vector_23+0x80>
    10d2:	e5 5c       	subi	r30, 0xC5	; 197
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    10da:	10 92 81 00 	sts	0x0081, r1
    10de:	10 92 85 00 	sts	0x0085, r1
    10e2:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    10e6:	40 93 34 01 	sts	0x0134, r20
            rx_leadingbyte = 1;
    10ea:	40 93 78 01 	sts	0x0178, r20
            rx_busy = 0;
    10ee:	10 92 5b 01 	sts	0x015B, r1
            adc_trigger_high_gain();
    10f2:	10 92 7c 00 	sts	0x007C, r1
    10f6:	83 ea       	ldi	r24, 0xA3	; 163
    10f8:	80 93 7a 00 	sts	0x007A, r24
    10fc:	40 93 7b 00 	sts	0x007B, r20
    1100:	80 cf       	rjmp	.-256    	; 0x1002 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1102:	80 91 7a 00 	lds	r24, 0x007A
    1106:	86 fd       	sbrc	r24, 6
    1108:	fc cf       	rjmp	.-8      	; 0x1102 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    110a:	80 91 78 00 	lds	r24, 0x0078
    110e:	90 91 79 00 	lds	r25, 0x0079
    1112:	90 93 54 01 	sts	0x0154, r25
    1116:	80 93 53 01 	sts	0x0153, r24
                    adc_trigger_high_gain();
    111a:	10 92 7c 00 	sts	0x007C, r1
    111e:	83 ea       	ldi	r24, 0xA3	; 163
    1120:	80 93 7a 00 	sts	0x007A, r24
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    112a:	90 91 8c 01 	lds	r25, 0x018C
    112e:	99 23       	and	r25, r25
    1130:	d1 f0       	breq	.+52     	; 0x1166 <__vector_23+0x1e4>
                        rx_timer_off();
    1132:	10 92 81 00 	sts	0x0081, r1
    1136:	10 92 85 00 	sts	0x0085, r1
    113a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    113e:	80 93 78 01 	sts	0x0178, r24
                        rx_busy = 0;
    1142:	10 92 5b 01 	sts	0x015B, r1
    1146:	5d cf       	rjmp	.-326    	; 0x1002 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	f9 01       	movw	r30, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <__vector_23+0x1d2>
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <__vector_23+0x1ce>
    1158:	cf 01       	movw	r24, r30
    115a:	90 91 8c 01 	lds	r25, 0x018C
    115e:	89 2b       	or	r24, r25
    1160:	80 93 8c 01 	sts	0x018C, r24
    1164:	4e cf       	rjmp	.-356    	; 0x1002 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1166:	10 92 78 01 	sts	0x0178, r1
                        rx_byteindex = 0;
    116a:	10 92 52 01 	sts	0x0152, r1
    116e:	49 cf       	rjmp	.-366    	; 0x1002 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1170:	e0 91 13 01 	lds	r30, 0x0113
    1174:	f0 91 14 01 	lds	r31, 0x0114
    1178:	63 e5       	ldi	r22, 0x53	; 83
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	8e e7       	ldi	r24, 0x7E	; 126
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	09 95       	icall
    1182:	3f cf       	rjmp	.-386    	; 0x1002 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1184:	80 91 7e 01 	lds	r24, 0x017E
    1188:	82 30       	cpi	r24, 0x02	; 2
    118a:	09 f4       	brne	.+2      	; 0x118e <__vector_23+0x20c>
    118c:	dd c0       	rjmp	.+442    	; 0x1348 <__vector_23+0x3c6>
    118e:	08 f4       	brcc	.+2      	; 0x1192 <__vector_23+0x210>
    1190:	ba c0       	rjmp	.+372    	; 0x1306 <__vector_23+0x384>
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	09 f4       	brne	.+2      	; 0x1198 <__vector_23+0x216>
    1196:	c6 c0       	rjmp	.+396    	; 0x1324 <__vector_23+0x3a2>
    1198:	84 30       	cpi	r24, 0x04	; 4
    119a:	09 f0       	breq	.+2      	; 0x119e <__vector_23+0x21c>
    119c:	b1 c0       	rjmp	.+354    	; 0x1300 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    119e:	80 91 31 01 	lds	r24, 0x0131
    11a2:	90 91 84 01 	lds	r25, 0x0184
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__vector_23+0x22a>
    11aa:	e3 c0       	rjmp	.+454    	; 0x1372 <__vector_23+0x3f0>
    11ac:	80 91 83 01 	lds	r24, 0x0183
                        prev_motion = MOVE_STOP;
    11b0:	10 92 32 01 	sts	0x0132, r1
                        cur_motion = MOVE_STRAIGHT;
    11b4:	23 e0       	ldi	r18, 0x03	; 3
    11b6:	20 93 31 01 	sts	0x0131, r18
                        kilo_straight_left = calibmsg->straight_left;
    11ba:	80 93 8f 01 	sts	0x018F, r24
                        kilo_straight_right = calibmsg->straight_right;
    11be:	90 93 90 01 	sts	0x0190, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11c2:	80 91 33 01 	lds	r24, 0x0133
    11c6:	86 30       	cpi	r24, 0x06	; 6
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__vector_23+0x24a>
    11ca:	1b cf       	rjmp	.-458    	; 0x1002 <__vector_23+0x80>
                motors_on();
    11cc:	53 9a       	sbi	0x0a, 3	; 10
    11ce:	23 9a       	sbi	0x04, 3	; 4
    11d0:	10 92 b4 00 	sts	0x00B4, r1
    11d4:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    11d8:	86 e0       	ldi	r24, 0x06	; 6
    11da:	80 93 33 01 	sts	0x0133, r24
    11de:	11 cf       	rjmp	.-478    	; 0x1002 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    11e0:	80 91 33 01 	lds	r24, 0x0133
    11e4:	86 30       	cpi	r24, 0x06	; 6
    11e6:	99 f0       	breq	.+38     	; 0x120e <__vector_23+0x28c>
                motors_on();
    11e8:	53 9a       	sbi	0x0a, 3	; 10
    11ea:	23 9a       	sbi	0x04, 3	; 4
    11ec:	10 92 b4 00 	sts	0x00B4, r1
    11f0:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    11f4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    11f6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    11f8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11fa:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11fc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11fe:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1200:	10 92 31 01 	sts	0x0131, r1
    1204:	10 92 32 01 	sts	0x0132, r1
                kilo_state = MOVING;
    1208:	86 e0       	ldi	r24, 0x06	; 6
    120a:	80 93 33 01 	sts	0x0133, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 01       	movw	r18, r24
    1214:	00 90 7e 01 	lds	r0, 0x017E
    1218:	02 c0       	rjmp	.+4      	; 0x121e <__vector_23+0x29c>
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <__vector_23+0x298>
    1222:	80 91 8d 01 	lds	r24, 0x018D
    1226:	90 91 8e 01 	lds	r25, 0x018E
    122a:	82 23       	and	r24, r18
    122c:	93 23       	and	r25, r19
    122e:	89 2b       	or	r24, r25
    1230:	09 f0       	breq	.+2      	; 0x1234 <__vector_23+0x2b2>
    1232:	86 c0       	rjmp	.+268    	; 0x1340 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1234:	10 92 31 01 	sts	0x0131, r1
    1238:	e4 ce       	rjmp	.-568    	; 0x1002 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 33 01 	sts	0x0133, r24
    1240:	e0 ce       	rjmp	.-576    	; 0x1002 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1242:	e0 e0       	ldi	r30, 0x00	; 0
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1248:	80 91 6e 00 	lds	r24, 0x006E
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	80 93 6e 00 	sts	0x006E, r24
    1252:	16 bc       	out	0x26, r1	; 38
            bootload();
    1254:	e0 e0       	ldi	r30, 0x00	; 0
    1256:	f0 e7       	ldi	r31, 0x70	; 112
    1258:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    125a:	10 92 33 01 	sts	0x0133, r1
    125e:	d1 ce       	rjmp	.-606    	; 0x1002 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	80 93 33 01 	sts	0x0133, r24
    1266:	cd ce       	rjmp	.-614    	; 0x1002 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1268:	85 e0       	ldi	r24, 0x05	; 5
    126a:	80 93 33 01 	sts	0x0133, r24
    126e:	c9 ce       	rjmp	.-622    	; 0x1002 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1270:	80 91 33 01 	lds	r24, 0x0133
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	09 f4       	brne	.+2      	; 0x127a <__vector_23+0x2f8>
    1278:	c4 ce       	rjmp	.-632    	; 0x1002 <__vector_23+0x80>
    127a:	80 91 33 01 	lds	r24, 0x0133
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	09 f4       	brne	.+2      	; 0x1284 <__vector_23+0x302>
    1282:	bf ce       	rjmp	.-642    	; 0x1002 <__vector_23+0x80>
                motors_on();
    1284:	53 9a       	sbi	0x0a, 3	; 10
    1286:	23 9a       	sbi	0x04, 3	; 4
    1288:	10 92 b4 00 	sts	0x00B4, r1
    128c:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	80 93 33 01 	sts	0x0133, r24
    1296:	b5 ce       	rjmp	.-662    	; 0x1002 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1298:	80 91 33 01 	lds	r24, 0x0133
    129c:	86 30       	cpi	r24, 0x06	; 6
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__vector_23+0x320>
    12a0:	b0 ce       	rjmp	.-672    	; 0x1002 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    12a2:	60 91 8d 01 	lds	r22, 0x018D
    12a6:	80 eb       	ldi	r24, 0xB0	; 176
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    12ae:	60 91 8e 01 	lds	r22, 0x018E
    12b2:	81 eb       	ldi	r24, 0xB1	; 177
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12ba:	60 91 91 01 	lds	r22, 0x0191
    12be:	85 e0       	ldi	r24, 0x05	; 5
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    12c6:	60 91 7d 01 	lds	r22, 0x017D
    12ca:	89 e0       	ldi	r24, 0x09	; 9
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    12d2:	60 91 8f 01 	lds	r22, 0x018F
    12d6:	8c e0       	ldi	r24, 0x0C	; 12
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    12de:	60 91 90 01 	lds	r22, 0x0190
    12e2:	84 e1       	ldi	r24, 0x14	; 20
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <eeprom_write_byte>
                        motors_off();
    12ea:	53 98       	cbi	0x0a, 3	; 10
    12ec:	23 98       	cbi	0x04, 3	; 4
    12ee:	10 92 b4 00 	sts	0x00B4, r1
    12f2:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 33 01 	sts	0x0133, r24
    12fc:	80 91 7e 01 	lds	r24, 0x017E
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1300:	81 11       	cpse	r24, r1
    1302:	5f cf       	rjmp	.-322    	; 0x11c2 <__vector_23+0x240>
    1304:	7e ce       	rjmp	.-772    	; 0x1002 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1306:	88 23       	and	r24, r24
    1308:	39 f2       	breq	.-114    	; 0x1298 <__vector_23+0x316>
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	c9 f7       	brne	.-14     	; 0x1300 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    130e:	80 91 7f 01 	lds	r24, 0x017F
    1312:	90 91 80 01 	lds	r25, 0x0180
    1316:	90 93 8e 01 	sts	0x018E, r25
    131a:	80 93 8d 01 	sts	0x018D, r24
                    cur_motion = MOVE_STOP;
    131e:	10 92 31 01 	sts	0x0131, r1
    1322:	4f cf       	rjmp	.-354    	; 0x11c2 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1324:	80 91 31 01 	lds	r24, 0x0131
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	71 f1       	breq	.+92     	; 0x1388 <__vector_23+0x406>
    132c:	80 91 82 01 	lds	r24, 0x0182
                        prev_motion = MOVE_STOP;
    1330:	10 92 32 01 	sts	0x0132, r1
                        cur_motion = MOVE_RIGHT;
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	90 93 31 01 	sts	0x0131, r25
                        kilo_turn_right = calibmsg->turn_right;
    133a:	80 93 7d 01 	sts	0x017D, r24
    133e:	41 cf       	rjmp	.-382    	; 0x11c2 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 93 31 01 	sts	0x0131, r24
    1346:	5d ce       	rjmp	.-838    	; 0x1002 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1348:	80 91 31 01 	lds	r24, 0x0131
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	51 f0       	breq	.+20     	; 0x1364 <__vector_23+0x3e2>
    1350:	80 91 81 01 	lds	r24, 0x0181
                        prev_motion = MOVE_STOP;
    1354:	10 92 32 01 	sts	0x0132, r1
                        cur_motion = MOVE_LEFT;
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	90 93 31 01 	sts	0x0131, r25
                        kilo_turn_left = calibmsg->turn_left;
    135e:	80 93 91 01 	sts	0x0191, r24
    1362:	2f cf       	rjmp	.-418    	; 0x11c2 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1364:	80 91 81 01 	lds	r24, 0x0181
    1368:	90 91 91 01 	lds	r25, 0x0191
    136c:	89 13       	cpse	r24, r25
    136e:	f2 cf       	rjmp	.-28     	; 0x1354 <__vector_23+0x3d2>
    1370:	28 cf       	rjmp	.-432    	; 0x11c2 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1372:	80 91 90 01 	lds	r24, 0x0190
    1376:	98 13       	cpse	r25, r24
    1378:	19 cf       	rjmp	.-462    	; 0x11ac <__vector_23+0x22a>
    137a:	80 91 83 01 	lds	r24, 0x0183
    137e:	20 91 8f 01 	lds	r18, 0x018F
    1382:	82 13       	cpse	r24, r18
    1384:	15 cf       	rjmp	.-470    	; 0x11b0 <__vector_23+0x22e>
    1386:	1d cf       	rjmp	.-454    	; 0x11c2 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1388:	80 91 82 01 	lds	r24, 0x0182
    138c:	90 91 7d 01 	lds	r25, 0x017D
    1390:	89 13       	cpse	r24, r25
    1392:	ce cf       	rjmp	.-100    	; 0x1330 <__vector_23+0x3ae>
    1394:	16 cf       	rjmp	.-468    	; 0x11c2 <__vector_23+0x240>

00001396 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1396:	fc 01       	movw	r30, r24
    1398:	ac 01       	movw	r20, r24
    139a:	46 5f       	subi	r20, 0xF6	; 246
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    139e:	8f ef       	ldi	r24, 0xFF	; 255
    13a0:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    13a2:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    13a4:	82 27       	eor	r24, r18
    13a6:	08 2e       	mov	r0, r24
    13a8:	82 95       	swap	r24
    13aa:	80 7f       	andi	r24, 0xF0	; 240
    13ac:	80 25       	eor	r24, r0
    13ae:	09 2e       	mov	r0, r25
    13b0:	98 2f       	mov	r25, r24
    13b2:	82 95       	swap	r24
    13b4:	8f 70       	andi	r24, 0x0F	; 15
    13b6:	08 26       	eor	r0, r24
    13b8:	86 95       	lsr	r24
    13ba:	98 27       	eor	r25, r24
    13bc:	89 27       	eor	r24, r25
    13be:	88 0f       	add	r24, r24
    13c0:	88 0f       	add	r24, r24
    13c2:	88 0f       	add	r24, r24
    13c4:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    13c6:	e4 17       	cp	r30, r20
    13c8:	f5 07       	cpc	r31, r21
    13ca:	59 f7       	brne	.-42     	; 0x13a2 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    13cc:	08 95       	ret

000013ce <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    13ce:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    13d0:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    13d2:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    13d4:	20 91 51 01 	lds	r18, 0x0151
    or tmpreg1, ddrreg
    13d8:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    13da:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13de:	30 91 51 01 	lds	r19, 0x0151
    13e2:	20 30       	cpi	r18, 0x00	; 0
    13e4:	29 f0       	breq	.+10     	; 0x13f0 <message_send+0x22>
    13e6:	00 00       	nop
    13e8:	25 b1       	in	r18, 0x05	; 5
    13ea:	23 2b       	or	r18, r19
    13ec:	25 b9       	out	0x05, r18	; 5
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <message_send+0x2a>
    13f0:	00 00       	nop
    13f2:	00 00       	nop
    13f4:	00 00       	nop
    13f6:	00 c0       	rjmp	.+0      	; 0x13f8 <message_send+0x2a>
    13f8:	00 00       	nop
    13fa:	00 00       	nop
    13fc:	00 00       	nop
    13fe:	30 95       	com	r19
    1400:	25 b1       	in	r18, 0x05	; 5
    1402:	23 23       	and	r18, r19
    1404:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1406:	2e ea       	ldi	r18, 0xAE	; 174
    1408:	2a 95       	dec	r18
    140a:	f1 f7       	brne	.-4      	; 0x1408 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    140c:	2b ee       	ldi	r18, 0xEB	; 235

0000140e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    140e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1410:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1412:	0a c0       	rjmp	.+20     	; 0x1428 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1414:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1416:	30 91 51 01 	lds	r19, 0x0151
    com tmpreg2
    141a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    141c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    141e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1420:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1422:	0f be       	out	0x3f, r0	; 63
    return 0
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	08 95       	ret

00001428 <nocollision>:
nocollision:
    nop
    1428:	00 00       	nop
    dec tmpreg1
    142a:	2a 95       	dec	r18
    brne checkcollision
    142c:	81 f7       	brne	.-32     	; 0x140e <checkcollision>

    ldi tmpreg1, 0x01
    142e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1430:	30 91 51 01 	lds	r19, 0x0151
    1434:	20 30       	cpi	r18, 0x00	; 0
    1436:	29 f0       	breq	.+10     	; 0x1442 <nocollision+0x1a>
    1438:	00 00       	nop
    143a:	25 b1       	in	r18, 0x05	; 5
    143c:	23 2b       	or	r18, r19
    143e:	25 b9       	out	0x05, r18	; 5
    1440:	04 c0       	rjmp	.+8      	; 0x144a <nocollision+0x22>
    1442:	00 00       	nop
    1444:	00 00       	nop
    1446:	00 00       	nop
    1448:	00 c0       	rjmp	.+0      	; 0x144a <nocollision+0x22>
    144a:	00 00       	nop
    144c:	00 00       	nop
    144e:	00 00       	nop
    1450:	30 95       	com	r19
    1452:	25 b1       	in	r18, 0x05	; 5
    1454:	23 23       	and	r18, r19
    1456:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1458:	00 00       	nop
    145a:	24 e5       	ldi	r18, 0x54	; 84
    145c:	2a 95       	dec	r18
    145e:	f1 f7       	brne	.-4      	; 0x145c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1460:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1462:	8c e0       	ldi	r24, 0x0C	; 12

00001464 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1464:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1466:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1468:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    146a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    146c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    146e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1470:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1472:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1474:	50 e0       	ldi	r21, 0x00	; 0

00001476 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1476:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1478:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    147a:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    147c:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    147e:	30 91 51 01 	lds	r19, 0x0151
    1482:	20 30       	cpi	r18, 0x00	; 0
    1484:	29 f0       	breq	.+10     	; 0x1490 <sendbit+0x1a>
    1486:	00 00       	nop
    1488:	25 b1       	in	r18, 0x05	; 5
    148a:	23 2b       	or	r18, r19
    148c:	25 b9       	out	0x05, r18	; 5
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <sendbit+0x22>
    1490:	00 00       	nop
    1492:	00 00       	nop
    1494:	00 00       	nop
    1496:	00 c0       	rjmp	.+0      	; 0x1498 <sendbit+0x22>
    1498:	00 00       	nop
    149a:	00 00       	nop
    149c:	00 00       	nop
    149e:	30 95       	com	r19
    14a0:	25 b1       	in	r18, 0x05	; 5
    14a2:	23 23       	and	r18, r19
    14a4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    14a6:	00 00       	nop
    14a8:	21 e5       	ldi	r18, 0x51	; 81
    14aa:	2a 95       	dec	r18
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    14ae:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    14b0:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    14b2:	9a 95       	dec	r25
    brne sendbit
    14b4:	01 f7       	brne	.-64     	; 0x1476 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14b6:	8a 95       	dec	r24
    brne sendbyte
    14b8:	a9 f6       	brne	.-86     	; 0x1464 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14ba:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14bc:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14be:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14c0:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14c2:	30 91 51 01 	lds	r19, 0x0151
    com tmpreg2
    14c6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14c8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14ca:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14cc:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14ce:	0f be       	out	0x3f, r0	; 63
    return 1
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	08 95       	ret

000014d4 <main>:

}

int main()
{
    kilo_init();
    14d4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <kilo_init>
    debug_init();
    14d8:	0e 94 b2 00 	call	0x164	; 0x164 <debug_init>
    kilo_start(setup, loop);
    14dc:	6d e7       	ldi	r22, 0x7D	; 125
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	8a e7       	ldi	r24, 0x7A	; 122
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <kilo_start>
    
    return 0;
}
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	08 95       	ret

000014ee <__divmodhi4>:
    14ee:	97 fb       	bst	r25, 7
    14f0:	07 2e       	mov	r0, r23
    14f2:	16 f4       	brtc	.+4      	; 0x14f8 <__divmodhi4+0xa>
    14f4:	00 94       	com	r0
    14f6:	07 d0       	rcall	.+14     	; 0x1506 <__divmodhi4_neg1>
    14f8:	77 fd       	sbrc	r23, 7
    14fa:	09 d0       	rcall	.+18     	; 0x150e <__divmodhi4_neg2>
    14fc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodhi4>
    1500:	07 fc       	sbrc	r0, 7
    1502:	05 d0       	rcall	.+10     	; 0x150e <__divmodhi4_neg2>
    1504:	3e f4       	brtc	.+14     	; 0x1514 <__divmodhi4_exit>

00001506 <__divmodhi4_neg1>:
    1506:	90 95       	com	r25
    1508:	81 95       	neg	r24
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	08 95       	ret

0000150e <__divmodhi4_neg2>:
    150e:	70 95       	com	r23
    1510:	61 95       	neg	r22
    1512:	7f 4f       	sbci	r23, 0xFF	; 255

00001514 <__divmodhi4_exit>:
    1514:	08 95       	ret

00001516 <__tablejump2__>:
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	05 90       	lpm	r0, Z+
    151c:	f4 91       	lpm	r31, Z
    151e:	e0 2d       	mov	r30, r0
    1520:	09 94       	ijmp

00001522 <__umulhisi3>:
    1522:	a2 9f       	mul	r26, r18
    1524:	b0 01       	movw	r22, r0
    1526:	b3 9f       	mul	r27, r19
    1528:	c0 01       	movw	r24, r0
    152a:	a3 9f       	mul	r26, r19
    152c:	70 0d       	add	r23, r0
    152e:	81 1d       	adc	r24, r1
    1530:	11 24       	eor	r1, r1
    1532:	91 1d       	adc	r25, r1
    1534:	b2 9f       	mul	r27, r18
    1536:	70 0d       	add	r23, r0
    1538:	81 1d       	adc	r24, r1
    153a:	11 24       	eor	r1, r1
    153c:	91 1d       	adc	r25, r1
    153e:	08 95       	ret

00001540 <__udivmodhi4>:
    1540:	aa 1b       	sub	r26, r26
    1542:	bb 1b       	sub	r27, r27
    1544:	51 e1       	ldi	r21, 0x11	; 17
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <__udivmodhi4_ep>

00001548 <__udivmodhi4_loop>:
    1548:	aa 1f       	adc	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	a6 17       	cp	r26, r22
    154e:	b7 07       	cpc	r27, r23
    1550:	10 f0       	brcs	.+4      	; 0x1556 <__udivmodhi4_ep>
    1552:	a6 1b       	sub	r26, r22
    1554:	b7 0b       	sbc	r27, r23

00001556 <__udivmodhi4_ep>:
    1556:	88 1f       	adc	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	5a 95       	dec	r21
    155c:	a9 f7       	brne	.-22     	; 0x1548 <__udivmodhi4_loop>
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	08 95       	ret

00001568 <__subsf3>:
    1568:	50 58       	subi	r21, 0x80	; 128

0000156a <__addsf3>:
    156a:	bb 27       	eor	r27, r27
    156c:	aa 27       	eor	r26, r26
    156e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__addsf3x>
    1572:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_round>
    1576:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fp_pscA>
    157a:	38 f0       	brcs	.+14     	; 0x158a <__addsf3+0x20>
    157c:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_pscB>
    1580:	20 f0       	brcs	.+8      	; 0x158a <__addsf3+0x20>
    1582:	39 f4       	brne	.+14     	; 0x1592 <__addsf3+0x28>
    1584:	9f 3f       	cpi	r25, 0xFF	; 255
    1586:	19 f4       	brne	.+6      	; 0x158e <__addsf3+0x24>
    1588:	26 f4       	brtc	.+8      	; 0x1592 <__addsf3+0x28>
    158a:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_nan>
    158e:	0e f4       	brtc	.+2      	; 0x1592 <__addsf3+0x28>
    1590:	e0 95       	com	r30
    1592:	e7 fb       	bst	r30, 7
    1594:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>

00001598 <__addsf3x>:
    1598:	e9 2f       	mov	r30, r25
    159a:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fp_split3>
    159e:	58 f3       	brcs	.-42     	; 0x1576 <__addsf3+0xc>
    15a0:	ba 17       	cp	r27, r26
    15a2:	62 07       	cpc	r22, r18
    15a4:	73 07       	cpc	r23, r19
    15a6:	84 07       	cpc	r24, r20
    15a8:	95 07       	cpc	r25, r21
    15aa:	20 f0       	brcs	.+8      	; 0x15b4 <__addsf3x+0x1c>
    15ac:	79 f4       	brne	.+30     	; 0x15cc <__addsf3x+0x34>
    15ae:	a6 f5       	brtc	.+104    	; 0x1618 <__addsf3x+0x80>
    15b0:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__fp_zero>
    15b4:	0e f4       	brtc	.+2      	; 0x15b8 <__addsf3x+0x20>
    15b6:	e0 95       	com	r30
    15b8:	0b 2e       	mov	r0, r27
    15ba:	ba 2f       	mov	r27, r26
    15bc:	a0 2d       	mov	r26, r0
    15be:	0b 01       	movw	r0, r22
    15c0:	b9 01       	movw	r22, r18
    15c2:	90 01       	movw	r18, r0
    15c4:	0c 01       	movw	r0, r24
    15c6:	ca 01       	movw	r24, r20
    15c8:	a0 01       	movw	r20, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	ff 27       	eor	r31, r31
    15ce:	59 1b       	sub	r21, r25
    15d0:	99 f0       	breq	.+38     	; 0x15f8 <__addsf3x+0x60>
    15d2:	59 3f       	cpi	r21, 0xF9	; 249
    15d4:	50 f4       	brcc	.+20     	; 0x15ea <__addsf3x+0x52>
    15d6:	50 3e       	cpi	r21, 0xE0	; 224
    15d8:	68 f1       	brcs	.+90     	; 0x1634 <__addsf3x+0x9c>
    15da:	1a 16       	cp	r1, r26
    15dc:	f0 40       	sbci	r31, 0x00	; 0
    15de:	a2 2f       	mov	r26, r18
    15e0:	23 2f       	mov	r18, r19
    15e2:	34 2f       	mov	r19, r20
    15e4:	44 27       	eor	r20, r20
    15e6:	58 5f       	subi	r21, 0xF8	; 248
    15e8:	f3 cf       	rjmp	.-26     	; 0x15d0 <__addsf3x+0x38>
    15ea:	46 95       	lsr	r20
    15ec:	37 95       	ror	r19
    15ee:	27 95       	ror	r18
    15f0:	a7 95       	ror	r26
    15f2:	f0 40       	sbci	r31, 0x00	; 0
    15f4:	53 95       	inc	r21
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__addsf3x+0x52>
    15f8:	7e f4       	brtc	.+30     	; 0x1618 <__addsf3x+0x80>
    15fa:	1f 16       	cp	r1, r31
    15fc:	ba 0b       	sbc	r27, r26
    15fe:	62 0b       	sbc	r22, r18
    1600:	73 0b       	sbc	r23, r19
    1602:	84 0b       	sbc	r24, r20
    1604:	ba f0       	brmi	.+46     	; 0x1634 <__addsf3x+0x9c>
    1606:	91 50       	subi	r25, 0x01	; 1
    1608:	a1 f0       	breq	.+40     	; 0x1632 <__addsf3x+0x9a>
    160a:	ff 0f       	add	r31, r31
    160c:	bb 1f       	adc	r27, r27
    160e:	66 1f       	adc	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	c2 f7       	brpl	.-16     	; 0x1606 <__addsf3x+0x6e>
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <__addsf3x+0x9c>
    1618:	ba 0f       	add	r27, r26
    161a:	62 1f       	adc	r22, r18
    161c:	73 1f       	adc	r23, r19
    161e:	84 1f       	adc	r24, r20
    1620:	48 f4       	brcc	.+18     	; 0x1634 <__addsf3x+0x9c>
    1622:	87 95       	ror	r24
    1624:	77 95       	ror	r23
    1626:	67 95       	ror	r22
    1628:	b7 95       	ror	r27
    162a:	f7 95       	ror	r31
    162c:	9e 3f       	cpi	r25, 0xFE	; 254
    162e:	08 f0       	brcs	.+2      	; 0x1632 <__addsf3x+0x9a>
    1630:	b0 cf       	rjmp	.-160    	; 0x1592 <__addsf3+0x28>
    1632:	93 95       	inc	r25
    1634:	88 0f       	add	r24, r24
    1636:	08 f0       	brcs	.+2      	; 0x163a <__addsf3x+0xa2>
    1638:	99 27       	eor	r25, r25
    163a:	ee 0f       	add	r30, r30
    163c:	97 95       	ror	r25
    163e:	87 95       	ror	r24
    1640:	08 95       	ret

00001642 <__divsf3>:
    1642:	0e 94 35 0b 	call	0x166a	; 0x166a <__divsf3x>
    1646:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_round>
    164a:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_pscB>
    164e:	58 f0       	brcs	.+22     	; 0x1666 <__divsf3+0x24>
    1650:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fp_pscA>
    1654:	40 f0       	brcs	.+16     	; 0x1666 <__divsf3+0x24>
    1656:	29 f4       	brne	.+10     	; 0x1662 <__divsf3+0x20>
    1658:	5f 3f       	cpi	r21, 0xFF	; 255
    165a:	29 f0       	breq	.+10     	; 0x1666 <__divsf3+0x24>
    165c:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    1660:	51 11       	cpse	r21, r1
    1662:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    1666:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_nan>

0000166a <__divsf3x>:
    166a:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fp_split3>
    166e:	68 f3       	brcs	.-38     	; 0x164a <__divsf3+0x8>

00001670 <__divsf3_pse>:
    1670:	99 23       	and	r25, r25
    1672:	b1 f3       	breq	.-20     	; 0x1660 <__divsf3+0x1e>
    1674:	55 23       	and	r21, r21
    1676:	91 f3       	breq	.-28     	; 0x165c <__divsf3+0x1a>
    1678:	95 1b       	sub	r25, r21
    167a:	55 0b       	sbc	r21, r21
    167c:	bb 27       	eor	r27, r27
    167e:	aa 27       	eor	r26, r26
    1680:	62 17       	cp	r22, r18
    1682:	73 07       	cpc	r23, r19
    1684:	84 07       	cpc	r24, r20
    1686:	38 f0       	brcs	.+14     	; 0x1696 <__divsf3_pse+0x26>
    1688:	9f 5f       	subi	r25, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	22 0f       	add	r18, r18
    168e:	33 1f       	adc	r19, r19
    1690:	44 1f       	adc	r20, r20
    1692:	aa 1f       	adc	r26, r26
    1694:	a9 f3       	breq	.-22     	; 0x1680 <__divsf3_pse+0x10>
    1696:	35 d0       	rcall	.+106    	; 0x1702 <__divsf3_pse+0x92>
    1698:	0e 2e       	mov	r0, r30
    169a:	3a f0       	brmi	.+14     	; 0x16aa <__divsf3_pse+0x3a>
    169c:	e0 e8       	ldi	r30, 0x80	; 128
    169e:	32 d0       	rcall	.+100    	; 0x1704 <__divsf3_pse+0x94>
    16a0:	91 50       	subi	r25, 0x01	; 1
    16a2:	50 40       	sbci	r21, 0x00	; 0
    16a4:	e6 95       	lsr	r30
    16a6:	00 1c       	adc	r0, r0
    16a8:	ca f7       	brpl	.-14     	; 0x169c <__divsf3_pse+0x2c>
    16aa:	2b d0       	rcall	.+86     	; 0x1702 <__divsf3_pse+0x92>
    16ac:	fe 2f       	mov	r31, r30
    16ae:	29 d0       	rcall	.+82     	; 0x1702 <__divsf3_pse+0x92>
    16b0:	66 0f       	add	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	bb 1f       	adc	r27, r27
    16b8:	26 17       	cp	r18, r22
    16ba:	37 07       	cpc	r19, r23
    16bc:	48 07       	cpc	r20, r24
    16be:	ab 07       	cpc	r26, r27
    16c0:	b0 e8       	ldi	r27, 0x80	; 128
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <__divsf3_pse+0x56>
    16c4:	bb 0b       	sbc	r27, r27
    16c6:	80 2d       	mov	r24, r0
    16c8:	bf 01       	movw	r22, r30
    16ca:	ff 27       	eor	r31, r31
    16cc:	93 58       	subi	r25, 0x83	; 131
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
    16d0:	3a f0       	brmi	.+14     	; 0x16e0 <__divsf3_pse+0x70>
    16d2:	9e 3f       	cpi	r25, 0xFE	; 254
    16d4:	51 05       	cpc	r21, r1
    16d6:	78 f0       	brcs	.+30     	; 0x16f6 <__divsf3_pse+0x86>
    16d8:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    16dc:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    16e0:	5f 3f       	cpi	r21, 0xFF	; 255
    16e2:	e4 f3       	brlt	.-8      	; 0x16dc <__divsf3_pse+0x6c>
    16e4:	98 3e       	cpi	r25, 0xE8	; 232
    16e6:	d4 f3       	brlt	.-12     	; 0x16dc <__divsf3_pse+0x6c>
    16e8:	86 95       	lsr	r24
    16ea:	77 95       	ror	r23
    16ec:	67 95       	ror	r22
    16ee:	b7 95       	ror	r27
    16f0:	f7 95       	ror	r31
    16f2:	9f 5f       	subi	r25, 0xFF	; 255
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <__divsf3_pse+0x78>
    16f6:	88 0f       	add	r24, r24
    16f8:	91 1d       	adc	r25, r1
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret
    1702:	e1 e0       	ldi	r30, 0x01	; 1
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	bb 1f       	adc	r27, r27
    170c:	62 17       	cp	r22, r18
    170e:	73 07       	cpc	r23, r19
    1710:	84 07       	cpc	r24, r20
    1712:	ba 07       	cpc	r27, r26
    1714:	20 f0       	brcs	.+8      	; 0x171e <__divsf3_pse+0xae>
    1716:	62 1b       	sub	r22, r18
    1718:	73 0b       	sbc	r23, r19
    171a:	84 0b       	sbc	r24, r20
    171c:	ba 0b       	sbc	r27, r26
    171e:	ee 1f       	adc	r30, r30
    1720:	88 f7       	brcc	.-30     	; 0x1704 <__divsf3_pse+0x94>
    1722:	e0 95       	com	r30
    1724:	08 95       	ret

00001726 <__fixsfsi>:
    1726:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__fixunssfsi>
    172a:	68 94       	set
    172c:	b1 11       	cpse	r27, r1
    172e:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    1732:	08 95       	ret

00001734 <__fixunssfsi>:
    1734:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_splitA>
    1738:	88 f0       	brcs	.+34     	; 0x175c <__fixunssfsi+0x28>
    173a:	9f 57       	subi	r25, 0x7F	; 127
    173c:	98 f0       	brcs	.+38     	; 0x1764 <__fixunssfsi+0x30>
    173e:	b9 2f       	mov	r27, r25
    1740:	99 27       	eor	r25, r25
    1742:	b7 51       	subi	r27, 0x17	; 23
    1744:	b0 f0       	brcs	.+44     	; 0x1772 <__fixunssfsi+0x3e>
    1746:	e1 f0       	breq	.+56     	; 0x1780 <__fixunssfsi+0x4c>
    1748:	66 0f       	add	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	1a f0       	brmi	.+6      	; 0x1758 <__fixunssfsi+0x24>
    1752:	ba 95       	dec	r27
    1754:	c9 f7       	brne	.-14     	; 0x1748 <__fixunssfsi+0x14>
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <__fixunssfsi+0x4c>
    1758:	b1 30       	cpi	r27, 0x01	; 1
    175a:	91 f0       	breq	.+36     	; 0x1780 <__fixunssfsi+0x4c>
    175c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fp_zero>
    1760:	b1 e0       	ldi	r27, 0x01	; 1
    1762:	08 95       	ret
    1764:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__fp_zero>
    1768:	67 2f       	mov	r22, r23
    176a:	78 2f       	mov	r23, r24
    176c:	88 27       	eor	r24, r24
    176e:	b8 5f       	subi	r27, 0xF8	; 248
    1770:	39 f0       	breq	.+14     	; 0x1780 <__fixunssfsi+0x4c>
    1772:	b9 3f       	cpi	r27, 0xF9	; 249
    1774:	cc f3       	brlt	.-14     	; 0x1768 <__fixunssfsi+0x34>
    1776:	86 95       	lsr	r24
    1778:	77 95       	ror	r23
    177a:	67 95       	ror	r22
    177c:	b3 95       	inc	r27
    177e:	d9 f7       	brne	.-10     	; 0x1776 <__fixunssfsi+0x42>
    1780:	3e f4       	brtc	.+14     	; 0x1790 <__fixunssfsi+0x5c>
    1782:	90 95       	com	r25
    1784:	80 95       	com	r24
    1786:	70 95       	com	r23
    1788:	61 95       	neg	r22
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8f 4f       	sbci	r24, 0xFF	; 255
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	08 95       	ret

00001792 <__floatunsisf>:
    1792:	e8 94       	clt
    1794:	09 c0       	rjmp	.+18     	; 0x17a8 <__floatsisf+0x12>

00001796 <__floatsisf>:
    1796:	97 fb       	bst	r25, 7
    1798:	3e f4       	brtc	.+14     	; 0x17a8 <__floatsisf+0x12>
    179a:	90 95       	com	r25
    179c:	80 95       	com	r24
    179e:	70 95       	com	r23
    17a0:	61 95       	neg	r22
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	8f 4f       	sbci	r24, 0xFF	; 255
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	99 23       	and	r25, r25
    17aa:	a9 f0       	breq	.+42     	; 0x17d6 <__floatsisf+0x40>
    17ac:	f9 2f       	mov	r31, r25
    17ae:	96 e9       	ldi	r25, 0x96	; 150
    17b0:	bb 27       	eor	r27, r27
    17b2:	93 95       	inc	r25
    17b4:	f6 95       	lsr	r31
    17b6:	87 95       	ror	r24
    17b8:	77 95       	ror	r23
    17ba:	67 95       	ror	r22
    17bc:	b7 95       	ror	r27
    17be:	f1 11       	cpse	r31, r1
    17c0:	f8 cf       	rjmp	.-16     	; 0x17b2 <__floatsisf+0x1c>
    17c2:	fa f4       	brpl	.+62     	; 0x1802 <__floatsisf+0x6c>
    17c4:	bb 0f       	add	r27, r27
    17c6:	11 f4       	brne	.+4      	; 0x17cc <__floatsisf+0x36>
    17c8:	60 ff       	sbrs	r22, 0
    17ca:	1b c0       	rjmp	.+54     	; 0x1802 <__floatsisf+0x6c>
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	16 c0       	rjmp	.+44     	; 0x1802 <__floatsisf+0x6c>
    17d6:	88 23       	and	r24, r24
    17d8:	11 f0       	breq	.+4      	; 0x17de <__floatsisf+0x48>
    17da:	96 e9       	ldi	r25, 0x96	; 150
    17dc:	11 c0       	rjmp	.+34     	; 0x1800 <__floatsisf+0x6a>
    17de:	77 23       	and	r23, r23
    17e0:	21 f0       	breq	.+8      	; 0x17ea <__floatsisf+0x54>
    17e2:	9e e8       	ldi	r25, 0x8E	; 142
    17e4:	87 2f       	mov	r24, r23
    17e6:	76 2f       	mov	r23, r22
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <__floatsisf+0x5e>
    17ea:	66 23       	and	r22, r22
    17ec:	71 f0       	breq	.+28     	; 0x180a <__floatsisf+0x74>
    17ee:	96 e8       	ldi	r25, 0x86	; 134
    17f0:	86 2f       	mov	r24, r22
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	2a f0       	brmi	.+10     	; 0x1802 <__floatsisf+0x6c>
    17f8:	9a 95       	dec	r25
    17fa:	66 0f       	add	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	88 1f       	adc	r24, r24
    1800:	da f7       	brpl	.-10     	; 0x17f8 <__floatsisf+0x62>
    1802:	88 0f       	add	r24, r24
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	97 f9       	bld	r25, 7
    180a:	08 95       	ret

0000180c <__fp_inf>:
    180c:	97 f9       	bld	r25, 7
    180e:	9f 67       	ori	r25, 0x7F	; 127
    1810:	80 e8       	ldi	r24, 0x80	; 128
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	08 95       	ret

00001818 <__fp_nan>:
    1818:	9f ef       	ldi	r25, 0xFF	; 255
    181a:	80 ec       	ldi	r24, 0xC0	; 192
    181c:	08 95       	ret

0000181e <__fp_pscA>:
    181e:	00 24       	eor	r0, r0
    1820:	0a 94       	dec	r0
    1822:	16 16       	cp	r1, r22
    1824:	17 06       	cpc	r1, r23
    1826:	18 06       	cpc	r1, r24
    1828:	09 06       	cpc	r0, r25
    182a:	08 95       	ret

0000182c <__fp_pscB>:
    182c:	00 24       	eor	r0, r0
    182e:	0a 94       	dec	r0
    1830:	12 16       	cp	r1, r18
    1832:	13 06       	cpc	r1, r19
    1834:	14 06       	cpc	r1, r20
    1836:	05 06       	cpc	r0, r21
    1838:	08 95       	ret

0000183a <__fp_round>:
    183a:	09 2e       	mov	r0, r25
    183c:	03 94       	inc	r0
    183e:	00 0c       	add	r0, r0
    1840:	11 f4       	brne	.+4      	; 0x1846 <__fp_round+0xc>
    1842:	88 23       	and	r24, r24
    1844:	52 f0       	brmi	.+20     	; 0x185a <__fp_round+0x20>
    1846:	bb 0f       	add	r27, r27
    1848:	40 f4       	brcc	.+16     	; 0x185a <__fp_round+0x20>
    184a:	bf 2b       	or	r27, r31
    184c:	11 f4       	brne	.+4      	; 0x1852 <__fp_round+0x18>
    184e:	60 ff       	sbrs	r22, 0
    1850:	04 c0       	rjmp	.+8      	; 0x185a <__fp_round+0x20>
    1852:	6f 5f       	subi	r22, 0xFF	; 255
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	8f 4f       	sbci	r24, 0xFF	; 255
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	08 95       	ret

0000185c <__fp_split3>:
    185c:	57 fd       	sbrc	r21, 7
    185e:	90 58       	subi	r25, 0x80	; 128
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	59 f0       	breq	.+22     	; 0x187c <__fp_splitA+0x10>
    1866:	5f 3f       	cpi	r21, 0xFF	; 255
    1868:	71 f0       	breq	.+28     	; 0x1886 <__fp_splitA+0x1a>
    186a:	47 95       	ror	r20

0000186c <__fp_splitA>:
    186c:	88 0f       	add	r24, r24
    186e:	97 fb       	bst	r25, 7
    1870:	99 1f       	adc	r25, r25
    1872:	61 f0       	breq	.+24     	; 0x188c <__fp_splitA+0x20>
    1874:	9f 3f       	cpi	r25, 0xFF	; 255
    1876:	79 f0       	breq	.+30     	; 0x1896 <__fp_splitA+0x2a>
    1878:	87 95       	ror	r24
    187a:	08 95       	ret
    187c:	12 16       	cp	r1, r18
    187e:	13 06       	cpc	r1, r19
    1880:	14 06       	cpc	r1, r20
    1882:	55 1f       	adc	r21, r21
    1884:	f2 cf       	rjmp	.-28     	; 0x186a <__fp_split3+0xe>
    1886:	46 95       	lsr	r20
    1888:	f1 df       	rcall	.-30     	; 0x186c <__fp_splitA>
    188a:	08 c0       	rjmp	.+16     	; 0x189c <__fp_splitA+0x30>
    188c:	16 16       	cp	r1, r22
    188e:	17 06       	cpc	r1, r23
    1890:	18 06       	cpc	r1, r24
    1892:	99 1f       	adc	r25, r25
    1894:	f1 cf       	rjmp	.-30     	; 0x1878 <__fp_splitA+0xc>
    1896:	86 95       	lsr	r24
    1898:	71 05       	cpc	r23, r1
    189a:	61 05       	cpc	r22, r1
    189c:	08 94       	sec
    189e:	08 95       	ret

000018a0 <__fp_zero>:
    18a0:	e8 94       	clt

000018a2 <__fp_szero>:
    18a2:	bb 27       	eor	r27, r27
    18a4:	66 27       	eor	r22, r22
    18a6:	77 27       	eor	r23, r23
    18a8:	cb 01       	movw	r24, r22
    18aa:	97 f9       	bld	r25, 7
    18ac:	08 95       	ret

000018ae <__mulsf3>:
    18ae:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__mulsf3x>
    18b2:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_round>
    18b6:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fp_pscA>
    18ba:	38 f0       	brcs	.+14     	; 0x18ca <__mulsf3+0x1c>
    18bc:	0e 94 16 0c 	call	0x182c	; 0x182c <__fp_pscB>
    18c0:	20 f0       	brcs	.+8      	; 0x18ca <__mulsf3+0x1c>
    18c2:	95 23       	and	r25, r21
    18c4:	11 f0       	breq	.+4      	; 0x18ca <__mulsf3+0x1c>
    18c6:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    18ca:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__fp_nan>
    18ce:	11 24       	eor	r1, r1
    18d0:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>

000018d4 <__mulsf3x>:
    18d4:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fp_split3>
    18d8:	70 f3       	brcs	.-36     	; 0x18b6 <__mulsf3+0x8>

000018da <__mulsf3_pse>:
    18da:	95 9f       	mul	r25, r21
    18dc:	c1 f3       	breq	.-16     	; 0x18ce <__mulsf3+0x20>
    18de:	95 0f       	add	r25, r21
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	55 1f       	adc	r21, r21
    18e4:	62 9f       	mul	r22, r18
    18e6:	f0 01       	movw	r30, r0
    18e8:	72 9f       	mul	r23, r18
    18ea:	bb 27       	eor	r27, r27
    18ec:	f0 0d       	add	r31, r0
    18ee:	b1 1d       	adc	r27, r1
    18f0:	63 9f       	mul	r22, r19
    18f2:	aa 27       	eor	r26, r26
    18f4:	f0 0d       	add	r31, r0
    18f6:	b1 1d       	adc	r27, r1
    18f8:	aa 1f       	adc	r26, r26
    18fa:	64 9f       	mul	r22, r20
    18fc:	66 27       	eor	r22, r22
    18fe:	b0 0d       	add	r27, r0
    1900:	a1 1d       	adc	r26, r1
    1902:	66 1f       	adc	r22, r22
    1904:	82 9f       	mul	r24, r18
    1906:	22 27       	eor	r18, r18
    1908:	b0 0d       	add	r27, r0
    190a:	a1 1d       	adc	r26, r1
    190c:	62 1f       	adc	r22, r18
    190e:	73 9f       	mul	r23, r19
    1910:	b0 0d       	add	r27, r0
    1912:	a1 1d       	adc	r26, r1
    1914:	62 1f       	adc	r22, r18
    1916:	83 9f       	mul	r24, r19
    1918:	a0 0d       	add	r26, r0
    191a:	61 1d       	adc	r22, r1
    191c:	22 1f       	adc	r18, r18
    191e:	74 9f       	mul	r23, r20
    1920:	33 27       	eor	r19, r19
    1922:	a0 0d       	add	r26, r0
    1924:	61 1d       	adc	r22, r1
    1926:	23 1f       	adc	r18, r19
    1928:	84 9f       	mul	r24, r20
    192a:	60 0d       	add	r22, r0
    192c:	21 1d       	adc	r18, r1
    192e:	82 2f       	mov	r24, r18
    1930:	76 2f       	mov	r23, r22
    1932:	6a 2f       	mov	r22, r26
    1934:	11 24       	eor	r1, r1
    1936:	9f 57       	subi	r25, 0x7F	; 127
    1938:	50 40       	sbci	r21, 0x00	; 0
    193a:	9a f0       	brmi	.+38     	; 0x1962 <__mulsf3_pse+0x88>
    193c:	f1 f0       	breq	.+60     	; 0x197a <__mulsf3_pse+0xa0>
    193e:	88 23       	and	r24, r24
    1940:	4a f0       	brmi	.+18     	; 0x1954 <__mulsf3_pse+0x7a>
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	bb 1f       	adc	r27, r27
    1948:	66 1f       	adc	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	91 50       	subi	r25, 0x01	; 1
    1950:	50 40       	sbci	r21, 0x00	; 0
    1952:	a9 f7       	brne	.-22     	; 0x193e <__mulsf3_pse+0x64>
    1954:	9e 3f       	cpi	r25, 0xFE	; 254
    1956:	51 05       	cpc	r21, r1
    1958:	80 f0       	brcs	.+32     	; 0x197a <__mulsf3_pse+0xa0>
    195a:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_inf>
    195e:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_szero>
    1962:	5f 3f       	cpi	r21, 0xFF	; 255
    1964:	e4 f3       	brlt	.-8      	; 0x195e <__mulsf3_pse+0x84>
    1966:	98 3e       	cpi	r25, 0xE8	; 232
    1968:	d4 f3       	brlt	.-12     	; 0x195e <__mulsf3_pse+0x84>
    196a:	86 95       	lsr	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	b7 95       	ror	r27
    1972:	f7 95       	ror	r31
    1974:	e7 95       	ror	r30
    1976:	9f 5f       	subi	r25, 0xFF	; 255
    1978:	c1 f7       	brne	.-16     	; 0x196a <__mulsf3_pse+0x90>
    197a:	fe 2b       	or	r31, r30
    197c:	88 0f       	add	r24, r24
    197e:	91 1d       	adc	r25, r1
    1980:	96 95       	lsr	r25
    1982:	87 95       	ror	r24
    1984:	97 f9       	bld	r25, 7
    1986:	08 95       	ret

00001988 <do_rand>:
    1988:	8f 92       	push	r8
    198a:	9f 92       	push	r9
    198c:	af 92       	push	r10
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	ec 01       	movw	r28, r24
    199e:	68 81       	ld	r22, Y
    19a0:	79 81       	ldd	r23, Y+1	; 0x01
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	61 15       	cp	r22, r1
    19a8:	71 05       	cpc	r23, r1
    19aa:	81 05       	cpc	r24, r1
    19ac:	91 05       	cpc	r25, r1
    19ae:	21 f4       	brne	.+8      	; 0x19b8 <do_rand+0x30>
    19b0:	64 e2       	ldi	r22, 0x24	; 36
    19b2:	79 ed       	ldi	r23, 0xD9	; 217
    19b4:	8b e5       	ldi	r24, 0x5B	; 91
    19b6:	97 e0       	ldi	r25, 0x07	; 7
    19b8:	2d e1       	ldi	r18, 0x1D	; 29
    19ba:	33 ef       	ldi	r19, 0xF3	; 243
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodsi4>
    19c4:	49 01       	movw	r8, r18
    19c6:	5a 01       	movw	r10, r20
    19c8:	9b 01       	movw	r18, r22
    19ca:	ac 01       	movw	r20, r24
    19cc:	a7 ea       	ldi	r26, 0xA7	; 167
    19ce:	b1 e4       	ldi	r27, 0x41	; 65
    19d0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__muluhisi3>
    19d4:	6b 01       	movw	r12, r22
    19d6:	7c 01       	movw	r14, r24
    19d8:	ac ee       	ldi	r26, 0xEC	; 236
    19da:	b4 ef       	ldi	r27, 0xF4	; 244
    19dc:	a5 01       	movw	r20, r10
    19de:	94 01       	movw	r18, r8
    19e0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__mulohisi3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8c 0d       	add	r24, r12
    19ea:	9d 1d       	adc	r25, r13
    19ec:	ae 1d       	adc	r26, r14
    19ee:	bf 1d       	adc	r27, r15
    19f0:	b7 ff       	sbrs	r27, 7
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <do_rand+0x72>
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	a1 09       	sbc	r26, r1
    19f8:	b0 48       	sbci	r27, 0x80	; 128
    19fa:	88 83       	st	Y, r24
    19fc:	99 83       	std	Y+1, r25	; 0x01
    19fe:	aa 83       	std	Y+2, r26	; 0x02
    1a00:	bb 83       	std	Y+3, r27	; 0x03
    1a02:	9f 77       	andi	r25, 0x7F	; 127
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	08 95       	ret

00001a1a <rand_r>:
    1a1a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <do_rand>
    1a1e:	08 95       	ret

00001a20 <rand>:
    1a20:	85 e1       	ldi	r24, 0x15	; 21
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	0e 94 c4 0c 	call	0x1988	; 0x1988 <do_rand>
    1a28:	08 95       	ret

00001a2a <srand>:
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	80 93 15 01 	sts	0x0115, r24
    1a32:	90 93 16 01 	sts	0x0116, r25
    1a36:	a0 93 17 01 	sts	0x0117, r26
    1a3a:	b0 93 18 01 	sts	0x0118, r27
    1a3e:	08 95       	ret

00001a40 <printf>:
    1a40:	a0 e0       	ldi	r26, 0x00	; 0
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e6 e2       	ldi	r30, 0x26	; 38
    1a46:	fd e0       	ldi	r31, 0x0D	; 13
    1a48:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__prologue_saves__+0x20>
    1a4c:	ae 01       	movw	r20, r28
    1a4e:	4b 5f       	subi	r20, 0xFB	; 251
    1a50:	5f 4f       	sbci	r21, 0xFF	; 255
    1a52:	fa 01       	movw	r30, r20
    1a54:	61 91       	ld	r22, Z+
    1a56:	71 91       	ld	r23, Z+
    1a58:	af 01       	movw	r20, r30
    1a5a:	80 91 94 01 	lds	r24, 0x0194
    1a5e:	90 91 95 01 	lds	r25, 0x0195
    1a62:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vfprintf>
    1a66:	e2 e0       	ldi	r30, 0x02	; 2
    1a68:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__epilogue_restores__+0x20>

00001a6c <vfprintf>:
    1a6c:	ac e0       	ldi	r26, 0x0C	; 12
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ec e3       	ldi	r30, 0x3C	; 60
    1a72:	fd e0       	ldi	r31, 0x0D	; 13
    1a74:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__prologue_saves__>
    1a78:	7c 01       	movw	r14, r24
    1a7a:	6b 01       	movw	r12, r22
    1a7c:	8a 01       	movw	r16, r20
    1a7e:	fc 01       	movw	r30, r24
    1a80:	17 82       	std	Z+7, r1	; 0x07
    1a82:	16 82       	std	Z+6, r1	; 0x06
    1a84:	83 81       	ldd	r24, Z+3	; 0x03
    1a86:	81 ff       	sbrs	r24, 1
    1a88:	bd c1       	rjmp	.+890    	; 0x1e04 <vfprintf+0x398>
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	4c 01       	movw	r8, r24
    1a90:	f7 01       	movw	r30, r14
    1a92:	93 81       	ldd	r25, Z+3	; 0x03
    1a94:	f6 01       	movw	r30, r12
    1a96:	93 fd       	sbrc	r25, 3
    1a98:	85 91       	lpm	r24, Z+
    1a9a:	93 ff       	sbrs	r25, 3
    1a9c:	81 91       	ld	r24, Z+
    1a9e:	6f 01       	movw	r12, r30
    1aa0:	88 23       	and	r24, r24
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <vfprintf+0x3a>
    1aa4:	ab c1       	rjmp	.+854    	; 0x1dfc <vfprintf+0x390>
    1aa6:	85 32       	cpi	r24, 0x25	; 37
    1aa8:	39 f4       	brne	.+14     	; 0x1ab8 <vfprintf+0x4c>
    1aaa:	93 fd       	sbrc	r25, 3
    1aac:	85 91       	lpm	r24, Z+
    1aae:	93 ff       	sbrs	r25, 3
    1ab0:	81 91       	ld	r24, Z+
    1ab2:	6f 01       	movw	r12, r30
    1ab4:	85 32       	cpi	r24, 0x25	; 37
    1ab6:	29 f4       	brne	.+10     	; 0x1ac2 <vfprintf+0x56>
    1ab8:	b7 01       	movw	r22, r14
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1ac0:	e7 cf       	rjmp	.-50     	; 0x1a90 <vfprintf+0x24>
    1ac2:	51 2c       	mov	r5, r1
    1ac4:	31 2c       	mov	r3, r1
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	20 32       	cpi	r18, 0x20	; 32
    1aca:	a0 f4       	brcc	.+40     	; 0x1af4 <vfprintf+0x88>
    1acc:	8b 32       	cpi	r24, 0x2B	; 43
    1ace:	69 f0       	breq	.+26     	; 0x1aea <vfprintf+0x7e>
    1ad0:	30 f4       	brcc	.+12     	; 0x1ade <vfprintf+0x72>
    1ad2:	80 32       	cpi	r24, 0x20	; 32
    1ad4:	59 f0       	breq	.+22     	; 0x1aec <vfprintf+0x80>
    1ad6:	83 32       	cpi	r24, 0x23	; 35
    1ad8:	69 f4       	brne	.+26     	; 0x1af4 <vfprintf+0x88>
    1ada:	20 61       	ori	r18, 0x10	; 16
    1adc:	2c c0       	rjmp	.+88     	; 0x1b36 <vfprintf+0xca>
    1ade:	8d 32       	cpi	r24, 0x2D	; 45
    1ae0:	39 f0       	breq	.+14     	; 0x1af0 <vfprintf+0x84>
    1ae2:	80 33       	cpi	r24, 0x30	; 48
    1ae4:	39 f4       	brne	.+14     	; 0x1af4 <vfprintf+0x88>
    1ae6:	21 60       	ori	r18, 0x01	; 1
    1ae8:	26 c0       	rjmp	.+76     	; 0x1b36 <vfprintf+0xca>
    1aea:	22 60       	ori	r18, 0x02	; 2
    1aec:	24 60       	ori	r18, 0x04	; 4
    1aee:	23 c0       	rjmp	.+70     	; 0x1b36 <vfprintf+0xca>
    1af0:	28 60       	ori	r18, 0x08	; 8
    1af2:	21 c0       	rjmp	.+66     	; 0x1b36 <vfprintf+0xca>
    1af4:	27 fd       	sbrc	r18, 7
    1af6:	27 c0       	rjmp	.+78     	; 0x1b46 <vfprintf+0xda>
    1af8:	30 ed       	ldi	r19, 0xD0	; 208
    1afa:	38 0f       	add	r19, r24
    1afc:	3a 30       	cpi	r19, 0x0A	; 10
    1afe:	78 f4       	brcc	.+30     	; 0x1b1e <vfprintf+0xb2>
    1b00:	26 ff       	sbrs	r18, 6
    1b02:	06 c0       	rjmp	.+12     	; 0x1b10 <vfprintf+0xa4>
    1b04:	fa e0       	ldi	r31, 0x0A	; 10
    1b06:	5f 9e       	mul	r5, r31
    1b08:	30 0d       	add	r19, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	53 2e       	mov	r5, r19
    1b0e:	13 c0       	rjmp	.+38     	; 0x1b36 <vfprintf+0xca>
    1b10:	8a e0       	ldi	r24, 0x0A	; 10
    1b12:	38 9e       	mul	r3, r24
    1b14:	30 0d       	add	r19, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	33 2e       	mov	r3, r19
    1b1a:	20 62       	ori	r18, 0x20	; 32
    1b1c:	0c c0       	rjmp	.+24     	; 0x1b36 <vfprintf+0xca>
    1b1e:	8e 32       	cpi	r24, 0x2E	; 46
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <vfprintf+0xbe>
    1b22:	26 fd       	sbrc	r18, 6
    1b24:	6b c1       	rjmp	.+726    	; 0x1dfc <vfprintf+0x390>
    1b26:	20 64       	ori	r18, 0x40	; 64
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <vfprintf+0xca>
    1b2a:	8c 36       	cpi	r24, 0x6C	; 108
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <vfprintf+0xc6>
    1b2e:	20 68       	ori	r18, 0x80	; 128
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0xca>
    1b32:	88 36       	cpi	r24, 0x68	; 104
    1b34:	41 f4       	brne	.+16     	; 0x1b46 <vfprintf+0xda>
    1b36:	f6 01       	movw	r30, r12
    1b38:	93 fd       	sbrc	r25, 3
    1b3a:	85 91       	lpm	r24, Z+
    1b3c:	93 ff       	sbrs	r25, 3
    1b3e:	81 91       	ld	r24, Z+
    1b40:	6f 01       	movw	r12, r30
    1b42:	81 11       	cpse	r24, r1
    1b44:	c1 cf       	rjmp	.-126    	; 0x1ac8 <vfprintf+0x5c>
    1b46:	98 2f       	mov	r25, r24
    1b48:	9f 7d       	andi	r25, 0xDF	; 223
    1b4a:	95 54       	subi	r25, 0x45	; 69
    1b4c:	93 30       	cpi	r25, 0x03	; 3
    1b4e:	28 f4       	brcc	.+10     	; 0x1b5a <vfprintf+0xee>
    1b50:	0c 5f       	subi	r16, 0xFC	; 252
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	ff e3       	ldi	r31, 0x3F	; 63
    1b56:	f9 83       	std	Y+1, r31	; 0x01
    1b58:	0d c0       	rjmp	.+26     	; 0x1b74 <vfprintf+0x108>
    1b5a:	83 36       	cpi	r24, 0x63	; 99
    1b5c:	31 f0       	breq	.+12     	; 0x1b6a <vfprintf+0xfe>
    1b5e:	83 37       	cpi	r24, 0x73	; 115
    1b60:	71 f0       	breq	.+28     	; 0x1b7e <vfprintf+0x112>
    1b62:	83 35       	cpi	r24, 0x53	; 83
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <vfprintf+0xfc>
    1b66:	5b c0       	rjmp	.+182    	; 0x1c1e <vfprintf+0x1b2>
    1b68:	22 c0       	rjmp	.+68     	; 0x1bae <vfprintf+0x142>
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	80 81       	ld	r24, Z
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	0e 5f       	subi	r16, 0xFE	; 254
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	44 24       	eor	r4, r4
    1b76:	43 94       	inc	r4
    1b78:	51 2c       	mov	r5, r1
    1b7a:	54 01       	movw	r10, r8
    1b7c:	15 c0       	rjmp	.+42     	; 0x1ba8 <vfprintf+0x13c>
    1b7e:	38 01       	movw	r6, r16
    1b80:	f2 e0       	ldi	r31, 0x02	; 2
    1b82:	6f 0e       	add	r6, r31
    1b84:	71 1c       	adc	r7, r1
    1b86:	f8 01       	movw	r30, r16
    1b88:	a0 80       	ld	r10, Z
    1b8a:	b1 80       	ldd	r11, Z+1	; 0x01
    1b8c:	26 ff       	sbrs	r18, 6
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <vfprintf+0x12a>
    1b90:	65 2d       	mov	r22, r5
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <vfprintf+0x12e>
    1b96:	6f ef       	ldi	r22, 0xFF	; 255
    1b98:	7f ef       	ldi	r23, 0xFF	; 255
    1b9a:	c5 01       	movw	r24, r10
    1b9c:	2c 87       	std	Y+12, r18	; 0x0c
    1b9e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <strnlen>
    1ba2:	2c 01       	movw	r4, r24
    1ba4:	83 01       	movw	r16, r6
    1ba6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ba8:	2f 77       	andi	r18, 0x7F	; 127
    1baa:	22 2e       	mov	r2, r18
    1bac:	17 c0       	rjmp	.+46     	; 0x1bdc <vfprintf+0x170>
    1bae:	38 01       	movw	r6, r16
    1bb0:	f2 e0       	ldi	r31, 0x02	; 2
    1bb2:	6f 0e       	add	r6, r31
    1bb4:	71 1c       	adc	r7, r1
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	a0 80       	ld	r10, Z
    1bba:	b1 80       	ldd	r11, Z+1	; 0x01
    1bbc:	26 ff       	sbrs	r18, 6
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <vfprintf+0x15a>
    1bc0:	65 2d       	mov	r22, r5
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x15e>
    1bc6:	6f ef       	ldi	r22, 0xFF	; 255
    1bc8:	7f ef       	ldi	r23, 0xFF	; 255
    1bca:	c5 01       	movw	r24, r10
    1bcc:	2c 87       	std	Y+12, r18	; 0x0c
    1bce:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <strnlen_P>
    1bd2:	2c 01       	movw	r4, r24
    1bd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bd6:	20 68       	ori	r18, 0x80	; 128
    1bd8:	22 2e       	mov	r2, r18
    1bda:	83 01       	movw	r16, r6
    1bdc:	23 fc       	sbrc	r2, 3
    1bde:	1b c0       	rjmp	.+54     	; 0x1c16 <vfprintf+0x1aa>
    1be0:	83 2d       	mov	r24, r3
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	48 16       	cp	r4, r24
    1be6:	59 06       	cpc	r5, r25
    1be8:	b0 f4       	brcc	.+44     	; 0x1c16 <vfprintf+0x1aa>
    1bea:	b7 01       	movw	r22, r14
    1bec:	80 e2       	ldi	r24, 0x20	; 32
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1bf4:	3a 94       	dec	r3
    1bf6:	f4 cf       	rjmp	.-24     	; 0x1be0 <vfprintf+0x174>
    1bf8:	f5 01       	movw	r30, r10
    1bfa:	27 fc       	sbrc	r2, 7
    1bfc:	85 91       	lpm	r24, Z+
    1bfe:	27 fe       	sbrs	r2, 7
    1c00:	81 91       	ld	r24, Z+
    1c02:	5f 01       	movw	r10, r30
    1c04:	b7 01       	movw	r22, r14
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1c0c:	31 10       	cpse	r3, r1
    1c0e:	3a 94       	dec	r3
    1c10:	f1 e0       	ldi	r31, 0x01	; 1
    1c12:	4f 1a       	sub	r4, r31
    1c14:	51 08       	sbc	r5, r1
    1c16:	41 14       	cp	r4, r1
    1c18:	51 04       	cpc	r5, r1
    1c1a:	71 f7       	brne	.-36     	; 0x1bf8 <vfprintf+0x18c>
    1c1c:	e5 c0       	rjmp	.+458    	; 0x1de8 <vfprintf+0x37c>
    1c1e:	84 36       	cpi	r24, 0x64	; 100
    1c20:	11 f0       	breq	.+4      	; 0x1c26 <vfprintf+0x1ba>
    1c22:	89 36       	cpi	r24, 0x69	; 105
    1c24:	39 f5       	brne	.+78     	; 0x1c74 <vfprintf+0x208>
    1c26:	f8 01       	movw	r30, r16
    1c28:	27 ff       	sbrs	r18, 7
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <vfprintf+0x1ce>
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	0c 5f       	subi	r16, 0xFC	; 252
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	08 c0       	rjmp	.+16     	; 0x1c4a <vfprintf+0x1de>
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	07 2e       	mov	r0, r23
    1c40:	00 0c       	add	r0, r0
    1c42:	88 0b       	sbc	r24, r24
    1c44:	99 0b       	sbc	r25, r25
    1c46:	0e 5f       	subi	r16, 0xFE	; 254
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	2f 76       	andi	r18, 0x6F	; 111
    1c4c:	72 2e       	mov	r7, r18
    1c4e:	97 ff       	sbrs	r25, 7
    1c50:	09 c0       	rjmp	.+18     	; 0x1c64 <vfprintf+0x1f8>
    1c52:	90 95       	com	r25
    1c54:	80 95       	com	r24
    1c56:	70 95       	com	r23
    1c58:	61 95       	neg	r22
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	20 68       	ori	r18, 0x80	; 128
    1c62:	72 2e       	mov	r7, r18
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	a4 01       	movw	r20, r8
    1c6a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__ultoa_invert>
    1c6e:	a8 2e       	mov	r10, r24
    1c70:	a8 18       	sub	r10, r8
    1c72:	44 c0       	rjmp	.+136    	; 0x1cfc <vfprintf+0x290>
    1c74:	85 37       	cpi	r24, 0x75	; 117
    1c76:	29 f4       	brne	.+10     	; 0x1c82 <vfprintf+0x216>
    1c78:	2f 7e       	andi	r18, 0xEF	; 239
    1c7a:	b2 2e       	mov	r11, r18
    1c7c:	2a e0       	ldi	r18, 0x0A	; 10
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	25 c0       	rjmp	.+74     	; 0x1ccc <vfprintf+0x260>
    1c82:	f2 2f       	mov	r31, r18
    1c84:	f9 7f       	andi	r31, 0xF9	; 249
    1c86:	bf 2e       	mov	r11, r31
    1c88:	8f 36       	cpi	r24, 0x6F	; 111
    1c8a:	c1 f0       	breq	.+48     	; 0x1cbc <vfprintf+0x250>
    1c8c:	18 f4       	brcc	.+6      	; 0x1c94 <vfprintf+0x228>
    1c8e:	88 35       	cpi	r24, 0x58	; 88
    1c90:	79 f0       	breq	.+30     	; 0x1cb0 <vfprintf+0x244>
    1c92:	b4 c0       	rjmp	.+360    	; 0x1dfc <vfprintf+0x390>
    1c94:	80 37       	cpi	r24, 0x70	; 112
    1c96:	19 f0       	breq	.+6      	; 0x1c9e <vfprintf+0x232>
    1c98:	88 37       	cpi	r24, 0x78	; 120
    1c9a:	21 f0       	breq	.+8      	; 0x1ca4 <vfprintf+0x238>
    1c9c:	af c0       	rjmp	.+350    	; 0x1dfc <vfprintf+0x390>
    1c9e:	2f 2f       	mov	r18, r31
    1ca0:	20 61       	ori	r18, 0x10	; 16
    1ca2:	b2 2e       	mov	r11, r18
    1ca4:	b4 fe       	sbrs	r11, 4
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <vfprintf+0x256>
    1ca8:	8b 2d       	mov	r24, r11
    1caa:	84 60       	ori	r24, 0x04	; 4
    1cac:	b8 2e       	mov	r11, r24
    1cae:	09 c0       	rjmp	.+18     	; 0x1cc2 <vfprintf+0x256>
    1cb0:	24 ff       	sbrs	r18, 4
    1cb2:	0a c0       	rjmp	.+20     	; 0x1cc8 <vfprintf+0x25c>
    1cb4:	9f 2f       	mov	r25, r31
    1cb6:	96 60       	ori	r25, 0x06	; 6
    1cb8:	b9 2e       	mov	r11, r25
    1cba:	06 c0       	rjmp	.+12     	; 0x1cc8 <vfprintf+0x25c>
    1cbc:	28 e0       	ldi	r18, 0x08	; 8
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	05 c0       	rjmp	.+10     	; 0x1ccc <vfprintf+0x260>
    1cc2:	20 e1       	ldi	r18, 0x10	; 16
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <vfprintf+0x260>
    1cc8:	20 e1       	ldi	r18, 0x10	; 16
    1cca:	32 e0       	ldi	r19, 0x02	; 2
    1ccc:	f8 01       	movw	r30, r16
    1cce:	b7 fe       	sbrs	r11, 7
    1cd0:	07 c0       	rjmp	.+14     	; 0x1ce0 <vfprintf+0x274>
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	0c 5f       	subi	r16, 0xFC	; 252
    1cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <vfprintf+0x280>
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 5f       	subi	r16, 0xFE	; 254
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	a4 01       	movw	r20, r8
    1cee:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__ultoa_invert>
    1cf2:	a8 2e       	mov	r10, r24
    1cf4:	a8 18       	sub	r10, r8
    1cf6:	fb 2d       	mov	r31, r11
    1cf8:	ff 77       	andi	r31, 0x7F	; 127
    1cfa:	7f 2e       	mov	r7, r31
    1cfc:	76 fe       	sbrs	r7, 6
    1cfe:	0b c0       	rjmp	.+22     	; 0x1d16 <vfprintf+0x2aa>
    1d00:	37 2d       	mov	r19, r7
    1d02:	3e 7f       	andi	r19, 0xFE	; 254
    1d04:	a5 14       	cp	r10, r5
    1d06:	50 f4       	brcc	.+20     	; 0x1d1c <vfprintf+0x2b0>
    1d08:	74 fe       	sbrs	r7, 4
    1d0a:	0a c0       	rjmp	.+20     	; 0x1d20 <vfprintf+0x2b4>
    1d0c:	72 fc       	sbrc	r7, 2
    1d0e:	08 c0       	rjmp	.+16     	; 0x1d20 <vfprintf+0x2b4>
    1d10:	37 2d       	mov	r19, r7
    1d12:	3e 7e       	andi	r19, 0xEE	; 238
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <vfprintf+0x2b4>
    1d16:	ba 2c       	mov	r11, r10
    1d18:	37 2d       	mov	r19, r7
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <vfprintf+0x2b6>
    1d1c:	ba 2c       	mov	r11, r10
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <vfprintf+0x2b6>
    1d20:	b5 2c       	mov	r11, r5
    1d22:	34 ff       	sbrs	r19, 4
    1d24:	0d c0       	rjmp	.+26     	; 0x1d40 <vfprintf+0x2d4>
    1d26:	fe 01       	movw	r30, r28
    1d28:	ea 0d       	add	r30, r10
    1d2a:	f1 1d       	adc	r31, r1
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 33       	cpi	r24, 0x30	; 48
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <vfprintf+0x2ca>
    1d32:	39 7e       	andi	r19, 0xE9	; 233
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <vfprintf+0x2dc>
    1d36:	32 ff       	sbrs	r19, 2
    1d38:	06 c0       	rjmp	.+12     	; 0x1d46 <vfprintf+0x2da>
    1d3a:	b3 94       	inc	r11
    1d3c:	b3 94       	inc	r11
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <vfprintf+0x2dc>
    1d40:	83 2f       	mov	r24, r19
    1d42:	86 78       	andi	r24, 0x86	; 134
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <vfprintf+0x2dc>
    1d46:	b3 94       	inc	r11
    1d48:	33 fd       	sbrc	r19, 3
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72 <vfprintf+0x306>
    1d4c:	30 ff       	sbrs	r19, 0
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <vfprintf+0x2f0>
    1d50:	5a 2c       	mov	r5, r10
    1d52:	b3 14       	cp	r11, r3
    1d54:	18 f4       	brcc	.+6      	; 0x1d5c <vfprintf+0x2f0>
    1d56:	53 0c       	add	r5, r3
    1d58:	5b 18       	sub	r5, r11
    1d5a:	b3 2c       	mov	r11, r3
    1d5c:	b3 14       	cp	r11, r3
    1d5e:	68 f4       	brcc	.+26     	; 0x1d7a <vfprintf+0x30e>
    1d60:	b7 01       	movw	r22, r14
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	3c 87       	std	Y+12, r19	; 0x0c
    1d68:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1d6c:	b3 94       	inc	r11
    1d6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d70:	f5 cf       	rjmp	.-22     	; 0x1d5c <vfprintf+0x2f0>
    1d72:	b3 14       	cp	r11, r3
    1d74:	10 f4       	brcc	.+4      	; 0x1d7a <vfprintf+0x30e>
    1d76:	3b 18       	sub	r3, r11
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <vfprintf+0x310>
    1d7a:	31 2c       	mov	r3, r1
    1d7c:	34 ff       	sbrs	r19, 4
    1d7e:	12 c0       	rjmp	.+36     	; 0x1da4 <vfprintf+0x338>
    1d80:	b7 01       	movw	r22, r14
    1d82:	80 e3       	ldi	r24, 0x30	; 48
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	3c 87       	std	Y+12, r19	; 0x0c
    1d88:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1d8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d8e:	32 ff       	sbrs	r19, 2
    1d90:	17 c0       	rjmp	.+46     	; 0x1dc0 <vfprintf+0x354>
    1d92:	31 fd       	sbrc	r19, 1
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <vfprintf+0x330>
    1d96:	88 e7       	ldi	r24, 0x78	; 120
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <vfprintf+0x334>
    1d9c:	88 e5       	ldi	r24, 0x58	; 88
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	b7 01       	movw	r22, r14
    1da2:	0c c0       	rjmp	.+24     	; 0x1dbc <vfprintf+0x350>
    1da4:	83 2f       	mov	r24, r19
    1da6:	86 78       	andi	r24, 0x86	; 134
    1da8:	59 f0       	breq	.+22     	; 0x1dc0 <vfprintf+0x354>
    1daa:	31 ff       	sbrs	r19, 1
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <vfprintf+0x346>
    1dae:	8b e2       	ldi	r24, 0x2B	; 43
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <vfprintf+0x348>
    1db2:	80 e2       	ldi	r24, 0x20	; 32
    1db4:	37 fd       	sbrc	r19, 7
    1db6:	8d e2       	ldi	r24, 0x2D	; 45
    1db8:	b7 01       	movw	r22, r14
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1dc0:	a5 14       	cp	r10, r5
    1dc2:	38 f4       	brcc	.+14     	; 0x1dd2 <vfprintf+0x366>
    1dc4:	b7 01       	movw	r22, r14
    1dc6:	80 e3       	ldi	r24, 0x30	; 48
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1dce:	5a 94       	dec	r5
    1dd0:	f7 cf       	rjmp	.-18     	; 0x1dc0 <vfprintf+0x354>
    1dd2:	aa 94       	dec	r10
    1dd4:	f4 01       	movw	r30, r8
    1dd6:	ea 0d       	add	r30, r10
    1dd8:	f1 1d       	adc	r31, r1
    1dda:	80 81       	ld	r24, Z
    1ddc:	b7 01       	movw	r22, r14
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1de4:	a1 10       	cpse	r10, r1
    1de6:	f5 cf       	rjmp	.-22     	; 0x1dd2 <vfprintf+0x366>
    1de8:	33 20       	and	r3, r3
    1dea:	09 f4       	brne	.+2      	; 0x1dee <vfprintf+0x382>
    1dec:	51 ce       	rjmp	.-862    	; 0x1a90 <vfprintf+0x24>
    1dee:	b7 01       	movw	r22, r14
    1df0:	80 e2       	ldi	r24, 0x20	; 32
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <fputc>
    1df8:	3a 94       	dec	r3
    1dfa:	f6 cf       	rjmp	.-20     	; 0x1de8 <vfprintf+0x37c>
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	86 81       	ldd	r24, Z+6	; 0x06
    1e00:	97 81       	ldd	r25, Z+7	; 0x07
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <vfprintf+0x39c>
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	9f ef       	ldi	r25, 0xFF	; 255
    1e08:	2c 96       	adiw	r28, 0x0c	; 12
    1e0a:	e2 e1       	ldi	r30, 0x12	; 18
    1e0c:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__epilogue_restores__>

00001e10 <strnlen_P>:
    1e10:	fc 01       	movw	r30, r24
    1e12:	05 90       	lpm	r0, Z+
    1e14:	61 50       	subi	r22, 0x01	; 1
    1e16:	70 40       	sbci	r23, 0x00	; 0
    1e18:	01 10       	cpse	r0, r1
    1e1a:	d8 f7       	brcc	.-10     	; 0x1e12 <strnlen_P+0x2>
    1e1c:	80 95       	com	r24
    1e1e:	90 95       	com	r25
    1e20:	8e 0f       	add	r24, r30
    1e22:	9f 1f       	adc	r25, r31
    1e24:	08 95       	ret

00001e26 <strnlen>:
    1e26:	fc 01       	movw	r30, r24
    1e28:	61 50       	subi	r22, 0x01	; 1
    1e2a:	70 40       	sbci	r23, 0x00	; 0
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	01 10       	cpse	r0, r1
    1e30:	d8 f7       	brcc	.-10     	; 0x1e28 <strnlen+0x2>
    1e32:	80 95       	com	r24
    1e34:	90 95       	com	r25
    1e36:	8e 0f       	add	r24, r30
    1e38:	9f 1f       	adc	r25, r31
    1e3a:	08 95       	ret

00001e3c <fputc>:
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	fb 01       	movw	r30, r22
    1e46:	23 81       	ldd	r18, Z+3	; 0x03
    1e48:	21 fd       	sbrc	r18, 1
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <fputc+0x16>
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	9f ef       	ldi	r25, 0xFF	; 255
    1e50:	28 c0       	rjmp	.+80     	; 0x1ea2 <fputc+0x66>
    1e52:	22 ff       	sbrs	r18, 2
    1e54:	16 c0       	rjmp	.+44     	; 0x1e82 <fputc+0x46>
    1e56:	46 81       	ldd	r20, Z+6	; 0x06
    1e58:	57 81       	ldd	r21, Z+7	; 0x07
    1e5a:	24 81       	ldd	r18, Z+4	; 0x04
    1e5c:	35 81       	ldd	r19, Z+5	; 0x05
    1e5e:	42 17       	cp	r20, r18
    1e60:	53 07       	cpc	r21, r19
    1e62:	44 f4       	brge	.+16     	; 0x1e74 <fputc+0x38>
    1e64:	a0 81       	ld	r26, Z
    1e66:	b1 81       	ldd	r27, Z+1	; 0x01
    1e68:	9d 01       	movw	r18, r26
    1e6a:	2f 5f       	subi	r18, 0xFF	; 255
    1e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6e:	31 83       	std	Z+1, r19	; 0x01
    1e70:	20 83       	st	Z, r18
    1e72:	8c 93       	st	X, r24
    1e74:	26 81       	ldd	r18, Z+6	; 0x06
    1e76:	37 81       	ldd	r19, Z+7	; 0x07
    1e78:	2f 5f       	subi	r18, 0xFF	; 255
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	37 83       	std	Z+7, r19	; 0x07
    1e7e:	26 83       	std	Z+6, r18	; 0x06
    1e80:	10 c0       	rjmp	.+32     	; 0x1ea2 <fputc+0x66>
    1e82:	eb 01       	movw	r28, r22
    1e84:	09 2f       	mov	r16, r25
    1e86:	18 2f       	mov	r17, r24
    1e88:	00 84       	ldd	r0, Z+8	; 0x08
    1e8a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e8c:	e0 2d       	mov	r30, r0
    1e8e:	09 95       	icall
    1e90:	89 2b       	or	r24, r25
    1e92:	e1 f6       	brne	.-72     	; 0x1e4c <fputc+0x10>
    1e94:	8e 81       	ldd	r24, Y+6	; 0x06
    1e96:	9f 81       	ldd	r25, Y+7	; 0x07
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	9f 83       	std	Y+7, r25	; 0x07
    1e9c:	8e 83       	std	Y+6, r24	; 0x06
    1e9e:	81 2f       	mov	r24, r17
    1ea0:	90 2f       	mov	r25, r16
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <__ultoa_invert>:
    1eac:	fa 01       	movw	r30, r20
    1eae:	aa 27       	eor	r26, r26
    1eb0:	28 30       	cpi	r18, 0x08	; 8
    1eb2:	51 f1       	breq	.+84     	; 0x1f08 <__ultoa_invert+0x5c>
    1eb4:	20 31       	cpi	r18, 0x10	; 16
    1eb6:	81 f1       	breq	.+96     	; 0x1f18 <__ultoa_invert+0x6c>
    1eb8:	e8 94       	clt
    1eba:	6f 93       	push	r22
    1ebc:	6e 7f       	andi	r22, 0xFE	; 254
    1ebe:	6e 5f       	subi	r22, 0xFE	; 254
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	af 4f       	sbci	r26, 0xFF	; 255
    1ec8:	b1 e0       	ldi	r27, 0x01	; 1
    1eca:	3e d0       	rcall	.+124    	; 0x1f48 <__ultoa_invert+0x9c>
    1ecc:	b4 e0       	ldi	r27, 0x04	; 4
    1ece:	3c d0       	rcall	.+120    	; 0x1f48 <__ultoa_invert+0x9c>
    1ed0:	67 0f       	add	r22, r23
    1ed2:	78 1f       	adc	r23, r24
    1ed4:	89 1f       	adc	r24, r25
    1ed6:	9a 1f       	adc	r25, r26
    1ed8:	a1 1d       	adc	r26, r1
    1eda:	68 0f       	add	r22, r24
    1edc:	79 1f       	adc	r23, r25
    1ede:	8a 1f       	adc	r24, r26
    1ee0:	91 1d       	adc	r25, r1
    1ee2:	a1 1d       	adc	r26, r1
    1ee4:	6a 0f       	add	r22, r26
    1ee6:	71 1d       	adc	r23, r1
    1ee8:	81 1d       	adc	r24, r1
    1eea:	91 1d       	adc	r25, r1
    1eec:	a1 1d       	adc	r26, r1
    1eee:	20 d0       	rcall	.+64     	; 0x1f30 <__ultoa_invert+0x84>
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <__ultoa_invert+0x48>
    1ef2:	68 94       	set
    1ef4:	3f 91       	pop	r19
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	26 9f       	mul	r18, r22
    1efa:	11 24       	eor	r1, r1
    1efc:	30 19       	sub	r19, r0
    1efe:	30 5d       	subi	r19, 0xD0	; 208
    1f00:	31 93       	st	Z+, r19
    1f02:	de f6       	brtc	.-74     	; 0x1eba <__ultoa_invert+0xe>
    1f04:	cf 01       	movw	r24, r30
    1f06:	08 95       	ret
    1f08:	46 2f       	mov	r20, r22
    1f0a:	47 70       	andi	r20, 0x07	; 7
    1f0c:	40 5d       	subi	r20, 0xD0	; 208
    1f0e:	41 93       	st	Z+, r20
    1f10:	b3 e0       	ldi	r27, 0x03	; 3
    1f12:	0f d0       	rcall	.+30     	; 0x1f32 <__ultoa_invert+0x86>
    1f14:	c9 f7       	brne	.-14     	; 0x1f08 <__ultoa_invert+0x5c>
    1f16:	f6 cf       	rjmp	.-20     	; 0x1f04 <__ultoa_invert+0x58>
    1f18:	46 2f       	mov	r20, r22
    1f1a:	4f 70       	andi	r20, 0x0F	; 15
    1f1c:	40 5d       	subi	r20, 0xD0	; 208
    1f1e:	4a 33       	cpi	r20, 0x3A	; 58
    1f20:	18 f0       	brcs	.+6      	; 0x1f28 <__ultoa_invert+0x7c>
    1f22:	49 5d       	subi	r20, 0xD9	; 217
    1f24:	31 fd       	sbrc	r19, 1
    1f26:	40 52       	subi	r20, 0x20	; 32
    1f28:	41 93       	st	Z+, r20
    1f2a:	02 d0       	rcall	.+4      	; 0x1f30 <__ultoa_invert+0x84>
    1f2c:	a9 f7       	brne	.-22     	; 0x1f18 <__ultoa_invert+0x6c>
    1f2e:	ea cf       	rjmp	.-44     	; 0x1f04 <__ultoa_invert+0x58>
    1f30:	b4 e0       	ldi	r27, 0x04	; 4
    1f32:	a6 95       	lsr	r26
    1f34:	97 95       	ror	r25
    1f36:	87 95       	ror	r24
    1f38:	77 95       	ror	r23
    1f3a:	67 95       	ror	r22
    1f3c:	ba 95       	dec	r27
    1f3e:	c9 f7       	brne	.-14     	; 0x1f32 <__ultoa_invert+0x86>
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 05       	cpc	r22, r1
    1f44:	71 05       	cpc	r23, r1
    1f46:	08 95       	ret
    1f48:	9b 01       	movw	r18, r22
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	0a 2e       	mov	r0, r26
    1f4e:	06 94       	lsr	r0
    1f50:	57 95       	ror	r21
    1f52:	47 95       	ror	r20
    1f54:	37 95       	ror	r19
    1f56:	27 95       	ror	r18
    1f58:	ba 95       	dec	r27
    1f5a:	c9 f7       	brne	.-14     	; 0x1f4e <__ultoa_invert+0xa2>
    1f5c:	62 0f       	add	r22, r18
    1f5e:	73 1f       	adc	r23, r19
    1f60:	84 1f       	adc	r24, r20
    1f62:	95 1f       	adc	r25, r21
    1f64:	a0 1d       	adc	r26, r0
    1f66:	08 95       	ret

00001f68 <eeprom_read_byte>:
    1f68:	f9 99       	sbic	0x1f, 1	; 31
    1f6a:	fe cf       	rjmp	.-4      	; 0x1f68 <eeprom_read_byte>
    1f6c:	92 bd       	out	0x22, r25	; 34
    1f6e:	81 bd       	out	0x21, r24	; 33
    1f70:	f8 9a       	sbi	0x1f, 0	; 31
    1f72:	99 27       	eor	r25, r25
    1f74:	80 b5       	in	r24, 0x20	; 32
    1f76:	08 95       	ret

00001f78 <eeprom_write_byte>:
    1f78:	26 2f       	mov	r18, r22

00001f7a <eeprom_write_r18>:
    1f7a:	f9 99       	sbic	0x1f, 1	; 31
    1f7c:	fe cf       	rjmp	.-4      	; 0x1f7a <eeprom_write_r18>
    1f7e:	1f ba       	out	0x1f, r1	; 31
    1f80:	92 bd       	out	0x22, r25	; 34
    1f82:	81 bd       	out	0x21, r24	; 33
    1f84:	20 bd       	out	0x20, r18	; 32
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	fa 9a       	sbi	0x1f, 2	; 31
    1f8c:	f9 9a       	sbi	0x1f, 1	; 31
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	08 95       	ret

00001f94 <__divmodsi4>:
    1f94:	05 2e       	mov	r0, r21
    1f96:	97 fb       	bst	r25, 7
    1f98:	1e f4       	brtc	.+6      	; 0x1fa0 <__divmodsi4+0xc>
    1f9a:	00 94       	com	r0
    1f9c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__negsi2>
    1fa0:	57 fd       	sbrc	r21, 7
    1fa2:	07 d0       	rcall	.+14     	; 0x1fb2 <__divmodsi4_neg2>
    1fa4:	0e 94 33 10 	call	0x2066	; 0x2066 <__udivmodsi4>
    1fa8:	07 fc       	sbrc	r0, 7
    1faa:	03 d0       	rcall	.+6      	; 0x1fb2 <__divmodsi4_neg2>
    1fac:	4e f4       	brtc	.+18     	; 0x1fc0 <__divmodsi4_exit>
    1fae:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__negsi2>

00001fb2 <__divmodsi4_neg2>:
    1fb2:	50 95       	com	r21
    1fb4:	40 95       	com	r20
    1fb6:	30 95       	com	r19
    1fb8:	21 95       	neg	r18
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	4f 4f       	sbci	r20, 0xFF	; 255
    1fbe:	5f 4f       	sbci	r21, 0xFF	; 255

00001fc0 <__divmodsi4_exit>:
    1fc0:	08 95       	ret

00001fc2 <__negsi2>:
    1fc2:	90 95       	com	r25
    1fc4:	80 95       	com	r24
    1fc6:	70 95       	com	r23
    1fc8:	61 95       	neg	r22
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	08 95       	ret

00001fd2 <__muluhisi3>:
    1fd2:	0e 94 91 0a 	call	0x1522	; 0x1522 <__umulhisi3>
    1fd6:	a5 9f       	mul	r26, r21
    1fd8:	90 0d       	add	r25, r0
    1fda:	b4 9f       	mul	r27, r20
    1fdc:	90 0d       	add	r25, r0
    1fde:	a4 9f       	mul	r26, r20
    1fe0:	80 0d       	add	r24, r0
    1fe2:	91 1d       	adc	r25, r1
    1fe4:	11 24       	eor	r1, r1
    1fe6:	08 95       	ret

00001fe8 <__mulshisi3>:
    1fe8:	b7 ff       	sbrs	r27, 7
    1fea:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__muluhisi3>

00001fee <__mulohisi3>:
    1fee:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__muluhisi3>
    1ff2:	82 1b       	sub	r24, r18
    1ff4:	93 0b       	sbc	r25, r19
    1ff6:	08 95       	ret

00001ff8 <__prologue_saves__>:
    1ff8:	2f 92       	push	r2
    1ffa:	3f 92       	push	r3
    1ffc:	4f 92       	push	r4
    1ffe:	5f 92       	push	r5
    2000:	6f 92       	push	r6
    2002:	7f 92       	push	r7
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	ca 1b       	sub	r28, r26
    2022:	db 0b       	sbc	r29, r27
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	09 94       	ijmp

00002030 <__epilogue_restores__>:
    2030:	2a 88       	ldd	r2, Y+18	; 0x12
    2032:	39 88       	ldd	r3, Y+17	; 0x11
    2034:	48 88       	ldd	r4, Y+16	; 0x10
    2036:	5f 84       	ldd	r5, Y+15	; 0x0f
    2038:	6e 84       	ldd	r6, Y+14	; 0x0e
    203a:	7d 84       	ldd	r7, Y+13	; 0x0d
    203c:	8c 84       	ldd	r8, Y+12	; 0x0c
    203e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2040:	aa 84       	ldd	r10, Y+10	; 0x0a
    2042:	b9 84       	ldd	r11, Y+9	; 0x09
    2044:	c8 84       	ldd	r12, Y+8	; 0x08
    2046:	df 80       	ldd	r13, Y+7	; 0x07
    2048:	ee 80       	ldd	r14, Y+6	; 0x06
    204a:	fd 80       	ldd	r15, Y+5	; 0x05
    204c:	0c 81       	ldd	r16, Y+4	; 0x04
    204e:	1b 81       	ldd	r17, Y+3	; 0x03
    2050:	aa 81       	ldd	r26, Y+2	; 0x02
    2052:	b9 81       	ldd	r27, Y+1	; 0x01
    2054:	ce 0f       	add	r28, r30
    2056:	d1 1d       	adc	r29, r1
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	ed 01       	movw	r28, r26
    2064:	08 95       	ret

00002066 <__udivmodsi4>:
    2066:	a1 e2       	ldi	r26, 0x21	; 33
    2068:	1a 2e       	mov	r1, r26
    206a:	aa 1b       	sub	r26, r26
    206c:	bb 1b       	sub	r27, r27
    206e:	fd 01       	movw	r30, r26
    2070:	0d c0       	rjmp	.+26     	; 0x208c <__udivmodsi4_ep>

00002072 <__udivmodsi4_loop>:
    2072:	aa 1f       	adc	r26, r26
    2074:	bb 1f       	adc	r27, r27
    2076:	ee 1f       	adc	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	a2 17       	cp	r26, r18
    207c:	b3 07       	cpc	r27, r19
    207e:	e4 07       	cpc	r30, r20
    2080:	f5 07       	cpc	r31, r21
    2082:	20 f0       	brcs	.+8      	; 0x208c <__udivmodsi4_ep>
    2084:	a2 1b       	sub	r26, r18
    2086:	b3 0b       	sbc	r27, r19
    2088:	e4 0b       	sbc	r30, r20
    208a:	f5 0b       	sbc	r31, r21

0000208c <__udivmodsi4_ep>:
    208c:	66 1f       	adc	r22, r22
    208e:	77 1f       	adc	r23, r23
    2090:	88 1f       	adc	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	1a 94       	dec	r1
    2096:	69 f7       	brne	.-38     	; 0x2072 <__udivmodsi4_loop>
    2098:	60 95       	com	r22
    209a:	70 95       	com	r23
    209c:	80 95       	com	r24
    209e:	90 95       	com	r25
    20a0:	9b 01       	movw	r18, r22
    20a2:	ac 01       	movw	r20, r24
    20a4:	bd 01       	movw	r22, r26
    20a6:	cf 01       	movw	r24, r30
    20a8:	08 95       	ret

000020aa <_exit>:
    20aa:	f8 94       	cli

000020ac <__stop_program>:
    20ac:	ff cf       	rjmp	.-2      	; 0x20ac <__stop_program>
