
build/nonblock.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	9b 03       	fmulsu	r17, r19
      6a:	17 04       	cpc	r1, r7
      6c:	6f 03       	fmul	r22, r23
      6e:	66 03       	mulsu	r22, r22
      70:	6c 03       	fmul	r22, r20
      72:	f9 03       	fmulsu	r23, r17
      74:	ee 03       	fmulsu	r22, r22
      76:	79 0a       	sbc	r7, r25
      78:	56 09       	sbc	r21, r6
      7a:	56 09       	sbc	r21, r6
      7c:	76 0a       	sbc	r7, r22
      7e:	82 0a       	sbc	r8, r18
      80:	72 0a       	sbc	r7, r18
      82:	89 0a       	sbc	r8, r25
      84:	85 0a       	sbc	r8, r21
      86:	8d 0a       	sbc	r8, r29
      88:	45 0a       	sbc	r4, r21
      8a:	17 0a       	sbc	r1, r23

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee eb       	ldi	r30, 0xBE	; 190
      b8:	fd e1       	ldi	r31, 0x1D	; 29
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 37       	cpi	r26, 0x7C	; 124
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 bf 0b 	call	0x177e	; 0x177e <main>
      da:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
  delay(150);
}

void setup()
{
  last_state_update = kilo_ticks;
      e2:	80 91 41 01 	lds	r24, 0x0141
      e6:	90 91 42 01 	lds	r25, 0x0142
      ea:	a0 91 43 01 	lds	r26, 0x0143
      ee:	b0 91 44 01 	lds	r27, 0x0144
      f2:	80 93 1a 01 	sts	0x011A, r24
      f6:	90 93 1b 01 	sts	0x011B, r25
      fa:	a0 93 1c 01 	sts	0x011C, r26
      fe:	b0 93 1d 01 	sts	0x011D, r27
  color_update = kilo_ticks;
     102:	80 91 41 01 	lds	r24, 0x0141
     106:	90 91 42 01 	lds	r25, 0x0142
     10a:	a0 91 43 01 	lds	r26, 0x0143
     10e:	b0 91 44 01 	lds	r27, 0x0144
     112:	80 93 14 01 	sts	0x0114, r24
     116:	90 93 15 01 	sts	0x0115, r25
     11a:	a0 93 16 01 	sts	0x0116, r26
     11e:	b0 93 17 01 	sts	0x0117, r27
      int random_number = rand_hard();
     122:	0e 94 0e 05 	call	0xa1c	; 0xa1c <rand_hard>
     126:	90 e0       	ldi	r25, 0x00	; 0
      int random_color = (random_number % 7);
     128:	67 e0       	ldi	r22, 0x07	; 7
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divmodhi4>
      if(random_color == 0){
     130:	00 97       	sbiw	r24, 0x00	; 0
     132:	89 f0       	breq	.+34     	; 0x156 <setup+0x74>
        set_color(RGB(0, 0, 1));

      } else if(random_color == 1 ){
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	91 05       	cpc	r25, r1
     138:	89 f0       	breq	.+34     	; 0x15c <setup+0x7a>
        set_color(RGB(1, 1, 1));

      }else if(random_color == 2 ){
     13a:	82 30       	cpi	r24, 0x02	; 2
     13c:	91 05       	cpc	r25, r1
     13e:	89 f0       	breq	.+34     	; 0x162 <setup+0x80>
        set_color(RGB(0, 1, 0));

      }else if(random_color == 3 ){
     140:	83 30       	cpi	r24, 0x03	; 3
     142:	91 05       	cpc	r25, r1
     144:	89 f0       	breq	.+34     	; 0x168 <setup+0x86>
        set_color(RGB(0, 1, 1));

      }else if(random_color == 4 ){
     146:	84 30       	cpi	r24, 0x04	; 4
     148:	91 05       	cpc	r25, r1
     14a:	89 f0       	breq	.+34     	; 0x16e <setup+0x8c>
        set_color(RGB(1, 0, 0));

      }else if(random_color == 5 ){
     14c:	05 97       	sbiw	r24, 0x05	; 5
     14e:	91 f0       	breq	.+36     	; 0x174 <setup+0x92>
        set_color(RGB(1, 0, 1));

      }else if(random_color == 6 ){
        set_color(RGB(1, 1, 0));
     150:	85 e0       	ldi	r24, 0x05	; 5
     152:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>
  last_state_update = kilo_ticks;
  color_update = kilo_ticks;
      int random_number = rand_hard();
      int random_color = (random_number % 7);
      if(random_color == 0){
        set_color(RGB(0, 0, 1));
     156:	80 e1       	ldi	r24, 0x10	; 16
     158:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      } else if(random_color == 1 ){
        set_color(RGB(1, 1, 1));
     15c:	85 e1       	ldi	r24, 0x15	; 21
     15e:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 2 ){
        set_color(RGB(0, 1, 0));
     162:	84 e0       	ldi	r24, 0x04	; 4
     164:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 3 ){
        set_color(RGB(0, 1, 1));
     168:	84 e1       	ldi	r24, 0x14	; 20
     16a:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 4 ){
        set_color(RGB(1, 0, 0));
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 5 ){
        set_color(RGB(1, 0, 1));
     174:	81 e1       	ldi	r24, 0x11	; 17
     176:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

0000017a <loop>:

      }
}

void loop()
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29

  if(kilo_ticks > last_state_update + 32){
     17e:	40 91 41 01 	lds	r20, 0x0141
     182:	50 91 42 01 	lds	r21, 0x0142
     186:	60 91 43 01 	lds	r22, 0x0143
     18a:	70 91 44 01 	lds	r23, 0x0144
     18e:	80 91 1a 01 	lds	r24, 0x011A
     192:	90 91 1b 01 	lds	r25, 0x011B
     196:	a0 91 1c 01 	lds	r26, 0x011C
     19a:	b0 91 1d 01 	lds	r27, 0x011D
     19e:	80 96       	adiw	r24, 0x20	; 32
     1a0:	a1 1d       	adc	r26, r1
     1a2:	b1 1d       	adc	r27, r1
     1a4:	84 17       	cp	r24, r20
     1a6:	95 07       	cpc	r25, r21
     1a8:	a6 07       	cpc	r26, r22
     1aa:	b7 07       	cpc	r27, r23
     1ac:	08 f4       	brcc	.+2      	; 0x1b0 <loop+0x36>
     1ae:	4d c0       	rjmp	.+154    	; 0x24a <loop+0xd0>
      else if(random_direction==3){
      set_motion(RIGHT);
      }
  }

  if(kilo_ticks > color_update + 320*4){
     1b0:	40 91 41 01 	lds	r20, 0x0141
     1b4:	50 91 42 01 	lds	r21, 0x0142
     1b8:	60 91 43 01 	lds	r22, 0x0143
     1bc:	70 91 44 01 	lds	r23, 0x0144
     1c0:	80 91 14 01 	lds	r24, 0x0114
     1c4:	90 91 15 01 	lds	r25, 0x0115
     1c8:	a0 91 16 01 	lds	r26, 0x0116
     1cc:	b0 91 17 01 	lds	r27, 0x0117
     1d0:	9b 5f       	subi	r25, 0xFB	; 251
     1d2:	af 4f       	sbci	r26, 0xFF	; 255
     1d4:	bf 4f       	sbci	r27, 0xFF	; 255
     1d6:	84 17       	cp	r24, r20
     1d8:	95 07       	cpc	r25, r21
     1da:	a6 07       	cpc	r26, r22
     1dc:	b7 07       	cpc	r27, r23
     1de:	18 f0       	brcs	.+6      	; 0x1e6 <loop+0x6c>
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret
      set_motion(RIGHT);
      }
  }

  if(kilo_ticks > color_update + 320*4){
      color_update = kilo_ticks;
     1e6:	80 91 41 01 	lds	r24, 0x0141
     1ea:	90 91 42 01 	lds	r25, 0x0142
     1ee:	a0 91 43 01 	lds	r26, 0x0143
     1f2:	b0 91 44 01 	lds	r27, 0x0144
     1f6:	80 93 14 01 	sts	0x0114, r24
     1fa:	90 93 15 01 	sts	0x0115, r25
     1fe:	a0 93 16 01 	sts	0x0116, r26
     202:	b0 93 17 01 	sts	0x0117, r27
      int random_number = rand_hard();
     206:	0e 94 0e 05 	call	0xa1c	; 0xa1c <rand_hard>
     20a:	90 e0       	ldi	r25, 0x00	; 0
      int random_color = (random_number % 7);
     20c:	67 e0       	ldi	r22, 0x07	; 7
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divmodhi4>
      if(random_color == 0){
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	09 f4       	brne	.+2      	; 0x21a <loop+0xa0>
     218:	4e c0       	rjmp	.+156    	; 0x2b6 <loop+0x13c>
        set_color(RGB(0, 0, 1));

      } else if(random_color == 1 ){
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	91 05       	cpc	r25, r1
     21e:	09 f4       	brne	.+2      	; 0x222 <loop+0xa8>
     220:	8d c0       	rjmp	.+282    	; 0x33c <loop+0x1c2>
        set_color(RGB(1, 1, 1));

      }else if(random_color == 2 ){
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	91 05       	cpc	r25, r1
     226:	09 f4       	brne	.+2      	; 0x22a <loop+0xb0>
     228:	8e c0       	rjmp	.+284    	; 0x346 <loop+0x1cc>
        set_color(RGB(0, 1, 0));

      }else if(random_color == 3 ){
     22a:	83 30       	cpi	r24, 0x03	; 3
     22c:	91 05       	cpc	r25, r1
     22e:	09 f4       	brne	.+2      	; 0x232 <loop+0xb8>
     230:	8f c0       	rjmp	.+286    	; 0x350 <loop+0x1d6>
        set_color(RGB(0, 1, 1));

      }else if(random_color == 4 ){
     232:	84 30       	cpi	r24, 0x04	; 4
     234:	91 05       	cpc	r25, r1
     236:	09 f4       	brne	.+2      	; 0x23a <loop+0xc0>
     238:	90 c0       	rjmp	.+288    	; 0x35a <loop+0x1e0>
        set_color(RGB(1, 0, 0));

      }else if(random_color == 5 ){
     23a:	05 97       	sbiw	r24, 0x05	; 5
     23c:	09 f4       	brne	.+2      	; 0x240 <loop+0xc6>
     23e:	40 c0       	rjmp	.+128    	; 0x2c0 <loop+0x146>
        set_color(RGB(1, 0, 1));

      }else if(random_color == 6 ){
        set_color(RGB(1, 1, 0));
     240:	85 e0       	ldi	r24, 0x05	; 5
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28

      }else if(random_color == 5 ){
        set_color(RGB(1, 0, 1));

      }else if(random_color == 6 ){
        set_color(RGB(1, 1, 0));
     246:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

void loop()
{

  if(kilo_ticks > last_state_update + 32){
      last_state_update = kilo_ticks;
     24a:	80 91 41 01 	lds	r24, 0x0141
     24e:	90 91 42 01 	lds	r25, 0x0142
     252:	a0 91 43 01 	lds	r26, 0x0143
     256:	b0 91 44 01 	lds	r27, 0x0144
     25a:	80 93 1a 01 	sts	0x011A, r24
     25e:	90 93 1b 01 	sts	0x011B, r25
     262:	a0 93 1c 01 	sts	0x011C, r26
     266:	b0 93 1d 01 	sts	0x011D, r27


    int random_number = rand_hard();
     26a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <rand_hard>
      int random_direction = (random_number % 4);
     26e:	83 70       	andi	r24, 0x03	; 3

      if(random_direction==0||random_direction==1){
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	58 f1       	brcs	.+86     	; 0x2ca <loop+0x150>
      set_motion(FORWARD);
      }
      else if(random_direction==2){
     274:	82 30       	cpi	r24, 0x02	; 2
     276:	09 f4       	brne	.+2      	; 0x27a <loop+0x100>
     278:	42 c0       	rjmp	.+132    	; 0x2fe <loop+0x184>
uint32_t color_update;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     27a:	80 91 0e 01 	lds	r24, 0x010E
     27e:	90 91 0f 01 	lds	r25, 0x010F
     282:	03 97       	sbiw	r24, 0x03	; 3
     284:	09 f4       	brne	.+2      	; 0x288 <loop+0x10e>
     286:	94 cf       	rjmp	.-216    	; 0x1b0 <loop+0x36>
    {
        current_motion = new_motion;
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	90 93 0f 01 	sts	0x010F, r25
     290:	80 93 0e 01 	sts	0x010E, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     294:	80 91 0c 01 	lds	r24, 0x010C
     298:	90 91 0d 01 	lds	r25, 0x010D
     29c:	89 2b       	or	r24, r25
     29e:	09 f4       	brne	.+2      	; 0x2a2 <loop+0x128>
     2a0:	61 c0       	rjmp	.+194    	; 0x364 <loop+0x1ea>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     2a2:	60 91 67 01 	lds	r22, 0x0167
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 af 04 	call	0x95e	; 0x95e <set_motors>
            both_spined = 0;
     2ac:	10 92 0d 01 	sts	0x010D, r1
     2b0:	10 92 0c 01 	sts	0x010C, r1
     2b4:	7d cf       	rjmp	.-262    	; 0x1b0 <loop+0x36>
  if(kilo_ticks > color_update + 320*4){
      color_update = kilo_ticks;
      int random_number = rand_hard();
      int random_color = (random_number % 7);
      if(random_color == 0){
        set_color(RGB(0, 0, 1));
     2b6:	80 e1       	ldi	r24, 0x10	; 16
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
  if(kilo_ticks > color_update + 320*4){
      color_update = kilo_ticks;
      int random_number = rand_hard();
      int random_color = (random_number % 7);
      if(random_color == 0){
        set_color(RGB(0, 0, 1));
     2bc:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 4 ){
        set_color(RGB(1, 0, 0));

      }else if(random_color == 5 ){
        set_color(RGB(1, 0, 1));
     2c0:	81 e1       	ldi	r24, 0x11	; 17
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28

      }else if(random_color == 4 ){
        set_color(RGB(1, 0, 0));

      }else if(random_color == 5 ){
        set_color(RGB(1, 0, 1));
     2c6:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>
uint32_t color_update;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2ca:	80 91 0e 01 	lds	r24, 0x010E
     2ce:	90 91 0f 01 	lds	r25, 0x010F
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <loop+0x15e>
     2d6:	6c cf       	rjmp	.-296    	; 0x1b0 <loop+0x36>
    {
        current_motion = new_motion;
     2d8:	c1 e0       	ldi	r28, 0x01	; 1
     2da:	d0 e0       	ldi	r29, 0x00	; 0
     2dc:	d0 93 0f 01 	sts	0x010F, r29
     2e0:	c0 93 0e 01 	sts	0x010E, r28
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     2e4:	0e 94 b4 04 	call	0x968	; 0x968 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     2e8:	60 91 7a 01 	lds	r22, 0x017A
     2ec:	80 91 79 01 	lds	r24, 0x0179
     2f0:	0e 94 af 04 	call	0x95e	; 0x95e <set_motors>
            both_spined = 1;
     2f4:	d0 93 0d 01 	sts	0x010D, r29
     2f8:	c0 93 0c 01 	sts	0x010C, r28
     2fc:	59 cf       	rjmp	.-334    	; 0x1b0 <loop+0x36>
uint32_t color_update;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2fe:	80 91 0e 01 	lds	r24, 0x010E
     302:	90 91 0f 01 	lds	r25, 0x010F
     306:	02 97       	sbiw	r24, 0x02	; 2
     308:	09 f4       	brne	.+2      	; 0x30c <loop+0x192>
     30a:	52 cf       	rjmp	.-348    	; 0x1b0 <loop+0x36>
    {
        current_motion = new_motion;
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	90 93 0f 01 	sts	0x010F, r25
     314:	80 93 0e 01 	sts	0x010E, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     318:	80 91 0c 01 	lds	r24, 0x010C
     31c:	90 91 0d 01 	lds	r25, 0x010D
     320:	89 2b       	or	r24, r25
     322:	11 f4       	brne	.+4      	; 0x328 <loop+0x1ae>
                spinup_motors();
     324:	0e 94 b4 04 	call	0x968	; 0x968 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	80 91 7b 01 	lds	r24, 0x017B
     32e:	0e 94 af 04 	call	0x95e	; 0x95e <set_motors>
            both_spined = 0;
     332:	10 92 0d 01 	sts	0x010D, r1
     336:	10 92 0c 01 	sts	0x010C, r1
     33a:	3a cf       	rjmp	.-396    	; 0x1b0 <loop+0x36>
      int random_color = (random_number % 7);
      if(random_color == 0){
        set_color(RGB(0, 0, 1));

      } else if(random_color == 1 ){
        set_color(RGB(1, 1, 1));
     33c:	85 e1       	ldi	r24, 0x15	; 21
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
      int random_color = (random_number % 7);
      if(random_color == 0){
        set_color(RGB(0, 0, 1));

      } else if(random_color == 1 ){
        set_color(RGB(1, 1, 1));
     342:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 2 ){
        set_color(RGB(0, 1, 0));
     346:	84 e0       	ldi	r24, 0x04	; 4
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28

      } else if(random_color == 1 ){
        set_color(RGB(1, 1, 1));

      }else if(random_color == 2 ){
        set_color(RGB(0, 1, 0));
     34c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 3 ){
        set_color(RGB(0, 1, 1));
     350:	84 e1       	ldi	r24, 0x14	; 20
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28

      }else if(random_color == 2 ){
        set_color(RGB(0, 1, 0));

      }else if(random_color == 3 ){
        set_color(RGB(0, 1, 1));
     356:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>

      }else if(random_color == 4 ){
        set_color(RGB(1, 0, 0));
     35a:	81 e0       	ldi	r24, 0x01	; 1
  laughing();
  laughing();
  laughing();
  laughing();
  */
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28

      }else if(random_color == 3 ){
        set_color(RGB(0, 1, 1));

      }else if(random_color == 4 ){
        set_color(RGB(1, 0, 0));
     360:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <set_color>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     364:	0e 94 b4 04 	call	0x968	; 0x968 <spinup_motors>
     368:	9c cf       	rjmp	.-200    	; 0x2a2 <loop+0x128>

0000036a <set_motion>:
// a regular int would overflow.
uint32_t last_state_update;
uint32_t color_update;

void set_motion(int new_motion)
{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     36e:	20 91 0e 01 	lds	r18, 0x010E
     372:	30 91 0f 01 	lds	r19, 0x010F
     376:	28 17       	cp	r18, r24
     378:	39 07       	cpc	r19, r25
     37a:	79 f0       	breq	.+30     	; 0x39a <set_motion+0x30>
    {
        current_motion = new_motion;
     37c:	90 93 0f 01 	sts	0x010F, r25
     380:	80 93 0e 01 	sts	0x010E, r24
        
        if (current_motion == STOP)
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	91 f1       	breq	.+100    	; 0x3ec <set_motion+0x82>
     388:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	91 05       	cpc	r25, r1
     38e:	a1 f1       	breq	.+104    	; 0x3f8 <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	91 05       	cpc	r25, r1
     394:	29 f0       	breq	.+10     	; 0x3a0 <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     396:	03 97       	sbiw	r24, 0x03	; 3
     398:	b9 f0       	breq	.+46     	; 0x3c8 <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     3a0:	80 91 0c 01 	lds	r24, 0x010C
     3a4:	90 91 0d 01 	lds	r25, 0x010D
     3a8:	89 2b       	or	r24, r25
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <set_motion+0x46>
                spinup_motors();
     3ac:	0e 94 b4 04 	call	0x968	; 0x968 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	80 91 7b 01 	lds	r24, 0x017B
     3b6:	0e 94 af 04 	call	0x95e	; 0x95e <set_motors>
            both_spined = 0;
     3ba:	10 92 0d 01 	sts	0x010D, r1
     3be:	10 92 0c 01 	sts	0x010C, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     3c8:	80 91 0c 01 	lds	r24, 0x010C
     3cc:	90 91 0d 01 	lds	r25, 0x010D
     3d0:	89 2b       	or	r24, r25
     3d2:	f9 f0       	breq	.+62     	; 0x412 <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     3d4:	60 91 67 01 	lds	r22, 0x0167
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	0e 94 af 04 	call	0x95e	; 0x95e <set_motors>
            both_spined = 0;
     3de:	10 92 0d 01 	sts	0x010D, r1
     3e2:	10 92 0c 01 	sts	0x010C, r1
        }
    }
}
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3f4:	0c 94 af 04 	jmp	0x95e	; 0x95e <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     3f8:	0e 94 b4 04 	call	0x968	; 0x968 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     3fc:	60 91 7a 01 	lds	r22, 0x017A
     400:	80 91 79 01 	lds	r24, 0x0179
     404:	0e 94 af 04 	call	0x95e	; 0x95e <set_motors>
            both_spined = 1;
     408:	d0 93 0d 01 	sts	0x010D, r29
     40c:	c0 93 0c 01 	sts	0x010C, r28
     410:	c4 cf       	rjmp	.-120    	; 0x39a <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     412:	0e 94 b4 04 	call	0x968	; 0x968 <spinup_motors>
     416:	de cf       	rjmp	.-68     	; 0x3d4 <set_motion+0x6a>

00000418 <flash_led>:
    }
}

void flash_led(){
    
        set_color(RGB(0, 0, 1));
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <set_color>
        delay(FLASH_DELAY);
     41e:	84 e6       	ldi	r24, 0x64	; 100
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 a4 04 	call	0x948	; 0x948 <delay>
        set_color(RGB(0, 1, 0));
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <set_color>
        delay(FLASH_DELAY);
     42c:	84 e6       	ldi	r24, 0x64	; 100
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 a4 04 	call	0x948	; 0x948 <delay>
        set_color(RGB(0, 1, 1));
     434:	84 e1       	ldi	r24, 0x14	; 20
     436:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <set_color>
        delay(FLASH_DELAY);
     43a:	84 e6       	ldi	r24, 0x64	; 100
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 a4 04 	call	0x948	; 0x948 <delay>
        set_color(RGB(1, 0, 0));
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <set_color>
        delay(FLASH_DELAY);
     448:	84 e6       	ldi	r24, 0x64	; 100
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 a4 04 	call	0x948	; 0x948 <delay>
        set_color(RGB(1, 0, 1));
     450:	81 e1       	ldi	r24, 0x11	; 17
     452:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <set_color>
        delay(FLASH_DELAY);
     456:	84 e6       	ldi	r24, 0x64	; 100
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 a4 04 	call	0x948	; 0x948 <delay>
        set_color(RGB(1, 1, 0));
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <set_color>
        delay(FLASH_DELAY);
     464:	84 e6       	ldi	r24, 0x64	; 100
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 a4 04 	call	0x948	; 0x948 <delay>
        set_color(RGB(1, 1, 1));
     46c:	85 e1       	ldi	r24, 0x15	; 21
     46e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <set_color>
        delay(FLASH_DELAY);
     472:	84 e6       	ldi	r24, 0x64	; 100
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0c 94 a4 04 	jmp	0x948	; 0x948 <delay>

0000047a <laughing>:
}

//advance functions
void laughing(){
  spinup_motors();
     47a:	0e 94 b4 04 	call	0x968	; 0x968 <spinup_motors>
  delay(30);
     47e:	8e e1       	ldi	r24, 0x1E	; 30
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 a4 04 	call	0x948	; 0x948 <delay>
  set_motors(0,0);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 af 04 	call	0x95e	; 0x95e <set_motors>
  delay(150);
     48e:	86 e9       	ldi	r24, 0x96	; 150
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0c 94 a4 04 	jmp	0x948	; 0x948 <delay>

00000496 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     496:	08 95       	ret

00000498 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	08 95       	ret

0000049e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     49e:	08 95       	ret

000004a0 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
    cli();
     4ae:	f8 94       	cli

    ports_off();
     4b0:	14 b8       	out	0x04, r1	; 4
     4b2:	17 b8       	out	0x07, r1	; 7
     4b4:	1a b8       	out	0x0a, r1	; 10
     4b6:	15 b8       	out	0x05, r1	; 5
     4b8:	18 b8       	out	0x08, r1	; 8
     4ba:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     4bc:	52 9a       	sbi	0x0a, 2	; 10
     4be:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     4c0:	14 bc       	out	0x24, r1	; 36
     4c2:	85 e0       	ldi	r24, 0x05	; 5
     4c4:	85 bd       	out	0x25, r24	; 37
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	87 bd       	out	0x27, r24	; 39
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     4d0:	10 92 80 00 	sts	0x0080, r1
     4d4:	10 92 81 00 	sts	0x0081, r1
     4d8:	2f e8       	ldi	r18, 0x8F	; 143
     4da:	3b e0       	ldi	r19, 0x0B	; 11
     4dc:	30 93 89 00 	sts	0x0089, r19
     4e0:	20 93 88 00 	sts	0x0088, r18
     4e4:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     4e8:	53 98       	cbi	0x0a, 3	; 10
     4ea:	23 98       	cbi	0x04, 3	; 4
     4ec:	91 ea       	ldi	r25, 0xA1	; 161
     4ee:	90 93 b0 00 	sts	0x00B0, r25
     4f2:	80 93 b1 00 	sts	0x00B1, r24
     4f6:	10 92 b4 00 	sts	0x00B4, r1
     4fa:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     4fe:	8b e0       	ldi	r24, 0x0B	; 11
     500:	80 bf       	out	0x30, r24	; 48
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     508:	86 e0       	ldi	r24, 0x06	; 6
     50a:	80 93 7c 00 	sts	0x007C, r24
     50e:	83 e8       	ldi	r24, 0x83	; 131
     510:	80 93 7a 00 	sts	0x007A, r24
     514:	80 91 7a 00 	lds	r24, 0x007A
     518:	80 64       	ori	r24, 0x40	; 64
     51a:	80 93 7a 00 	sts	0x007A, r24
     51e:	80 91 7a 00 	lds	r24, 0x007A
     522:	86 fd       	sbrc	r24, 6
     524:	fc cf       	rjmp	.-8      	; 0x51e <kilo_init+0x7e>
    adc_trigger_high_gain();
     526:	10 92 7c 00 	sts	0x007C, r1
     52a:	83 ea       	ldi	r24, 0xA3	; 163
     52c:	80 93 7a 00 	sts	0x007A, r24
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
    if (osccal != 0xFF)
     53e:	8f 3f       	cpi	r24, 0xFF	; 255
     540:	11 f0       	breq	.+4      	; 0x546 <kilo_init+0xa6>
        OSCCAL = osccal;
     542:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     546:	10 92 45 01 	sts	0x0145, r1
    rx_leadingbit = 1;
     54a:	c1 e0       	ldi	r28, 0x01	; 1
     54c:	c0 93 1e 01 	sts	0x011E, r28
    rx_leadingbyte = 1;
     550:	c0 93 62 01 	sts	0x0162, r28
    rx_byteindex = 0;
     554:	10 92 3c 01 	sts	0x013C, r1
    rx_bytevalue = 0;
     558:	10 92 76 01 	sts	0x0176, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     55c:	80 e9       	ldi	r24, 0x90	; 144
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     564:	80 93 3b 01 	sts	0x013B, r24
    if (tx_mask & ~TX_MASK_MAX)
     568:	80 91 3b 01 	lds	r24, 0x013B
     56c:	88 73       	andi	r24, 0x38	; 56
     56e:	11 f0       	breq	.+4      	; 0x574 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     570:	c0 93 3b 01 	sts	0x013B, r28
    tx_clock = 0;
     574:	10 92 66 01 	sts	0x0166, r1
     578:	10 92 65 01 	sts	0x0165, r1
    tx_increment = 255;
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	90 93 64 01 	sts	0x0164, r25
     584:	80 93 63 01 	sts	0x0163, r24
    kilo_ticks = 0;
     588:	10 92 41 01 	sts	0x0141, r1
     58c:	10 92 42 01 	sts	0x0142, r1
     590:	10 92 43 01 	sts	0x0143, r1
     594:	10 92 44 01 	sts	0x0144, r1
    kilo_state = IDLE;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 13 01 	sts	0x0113, r24
    kilo_tx_period = 3906;
     59e:	82 e4       	ldi	r24, 0x42	; 66
     5a0:	9f e0       	ldi	r25, 0x0F	; 15
     5a2:	90 93 75 01 	sts	0x0175, r25
     5a6:	80 93 74 01 	sts	0x0174, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     5aa:	80 eb       	ldi	r24, 0xB0	; 176
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     5b2:	c8 2f       	mov	r28, r24
     5b4:	81 eb       	ldi	r24, 0xB1	; 177
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     5bc:	2c 2f       	mov	r18, r28
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	38 2b       	or	r19, r24
     5c2:	30 93 78 01 	sts	0x0178, r19
     5c6:	20 93 77 01 	sts	0x0177, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     5d2:	80 93 7b 01 	sts	0x017B, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     5d6:	89 e0       	ldi	r24, 0x09	; 9
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     5de:	80 93 67 01 	sts	0x0167, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     5e2:	8c e0       	ldi	r24, 0x0C	; 12
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     5ea:	80 93 79 01 	sts	0x0179, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     5ee:	84 e1       	ldi	r24, 0x14	; 20
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     5f6:	80 93 7a 01 	sts	0x017A, r24
     5fa:	56 e4       	ldi	r21, 0x46	; 70
     5fc:	e5 2e       	mov	r14, r21
     5fe:	51 e0       	ldi	r21, 0x01	; 1
     600:	f5 2e       	mov	r15, r21
     602:	0f e1       	ldi	r16, 0x1F	; 31
     604:	11 e0       	ldi	r17, 0x01	; 1
     606:	c0 e2       	ldi	r28, 0x20	; 32
     608:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     60a:	ce 01       	movw	r24, r28
     60c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     610:	d8 2e       	mov	r13, r24
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     61a:	2d 2d       	mov	r18, r13
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	32 2f       	mov	r19, r18
     620:	22 27       	eor	r18, r18
     622:	28 2b       	or	r18, r24
     624:	f7 01       	movw	r30, r14
     626:	21 93       	st	Z+, r18
     628:	31 93       	st	Z+, r19
     62a:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     62c:	ce 01       	movw	r24, r28
     62e:	c0 96       	adiw	r24, 0x30	; 48
     630:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     634:	d8 2e       	mov	r13, r24
     636:	ce 01       	movw	r24, r28
     638:	c1 96       	adiw	r24, 0x31	; 49
     63a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <eeprom_read_byte>
     63e:	2d 2d       	mov	r18, r13
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	32 2f       	mov	r19, r18
     644:	22 27       	eor	r18, r18
     646:	28 2b       	or	r18, r24
     648:	f8 01       	movw	r30, r16
     64a:	21 93       	st	Z+, r18
     64c:	31 93       	st	Z+, r19
     64e:	8f 01       	movw	r16, r30
     650:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     652:	cc 33       	cpi	r28, 0x3C	; 60
     654:	d1 05       	cpc	r29, r1
     656:	c9 f6       	brne	.-78     	; 0x60a <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     658:	78 94       	sei
}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	08 95       	ret

0000066a <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	8f 93       	push	r24
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	a8 95       	wdr
     67c:	80 91 60 00 	lds	r24, 0x0060
     680:	88 61       	ori	r24, 0x18	; 24
     682:	80 93 60 00 	sts	0x0060, r24
     686:	10 92 60 00 	sts	0x0060, r1
     68a:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     68c:	8f 91       	pop	r24
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     698:	3c 01       	movw	r6, r24
     69a:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     69c:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     69e:	99 24       	eor	r9, r9
     6a0:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	a9 2e       	mov	r10, r25
     6aa:	23 e8       	ldi	r18, 0x83	; 131
     6ac:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     6ae:	38 e1       	ldi	r19, 0x18	; 24
     6b0:	d3 2e       	mov	r13, r19
     6b2:	49 e2       	ldi	r20, 0x29	; 41
     6b4:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     6b6:	90 91 13 01 	lds	r25, 0x0113
     6ba:	e9 2f       	mov	r30, r25
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	e7 30       	cpi	r30, 0x07	; 7
     6c0:	f1 05       	cpc	r31, r1
     6c2:	c8 f7       	brcc	.-14     	; 0x6b6 <kilo_start+0x1e>
     6c4:	ec 5c       	subi	r30, 0xCC	; 204
     6c6:	ff 4f       	sbci	r31, 0xFF	; 255
     6c8:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     6cc:	11 23       	and	r17, r17
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <kilo_start+0x3a>
     6d0:	fc c0       	rjmp	.+504    	; 0x8ca <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     6d2:	c0 92 13 01 	sts	0x0113, r12
     6d6:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     6d8:	fe 01       	movw	r30, r28
     6da:	09 95       	icall
                break;
     6dc:	ec cf       	rjmp	.-40     	; 0x6b6 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     6de:	80 91 45 01 	lds	r24, 0x0145
     6e2:	81 11       	cpse	r24, r1
     6e4:	eb c0       	rjmp	.+470    	; 0x8bc <kilo_start+0x224>
        cli();                                    // disable interrupts
     6e6:	f8 94       	cli
        adc_setup_conversion(6);
     6e8:	a0 92 7c 00 	sts	0x007C, r10
     6ec:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     6f0:	80 91 7a 00 	lds	r24, 0x007A
     6f4:	80 64       	ori	r24, 0x40	; 64
     6f6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6fa:	90 91 7a 00 	lds	r25, 0x007A
     6fe:	96 fd       	sbrc	r25, 6
     700:	fc cf       	rjmp	.-8      	; 0x6fa <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     702:	80 91 78 00 	lds	r24, 0x0078
     706:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     70a:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     70c:	8b 3a       	cpi	r24, 0xAB	; 171
     70e:	e2 e0       	ldi	r30, 0x02	; 2
     710:	9e 07       	cpc	r25, r30
     712:	0c f0       	brlt	.+2      	; 0x716 <kilo_start+0x7e>
     714:	ed c0       	rjmp	.+474    	; 0x8f0 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     716:	89 38       	cpi	r24, 0x89	; 137
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	9f 07       	cpc	r25, r31
     71c:	0c f0       	brlt	.+2      	; 0x720 <kilo_start+0x88>
     71e:	ef c0       	rjmp	.+478    	; 0x8fe <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     720:	87 36       	cpi	r24, 0x67	; 103
     722:	92 40       	sbci	r25, 0x02	; 2
     724:	0c f4       	brge	.+2      	; 0x728 <kilo_start+0x90>
     726:	ca c0       	rjmp	.+404    	; 0x8bc <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     728:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     72a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     72c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     72e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     730:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     732:	3c 98       	cbi	0x07, 4	; 7
     734:	c0 cf       	rjmp	.-128    	; 0x6b6 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     736:	f8 94       	cli
                acomp_off();
     738:	80 b7       	in	r24, 0x30	; 48
     73a:	87 7f       	andi	r24, 0xF7	; 247
     73c:	80 bf       	out	0x30, r24	; 48
                adc_off();
     73e:	80 91 7a 00 	lds	r24, 0x007A
     742:	8f 77       	andi	r24, 0x7F	; 127
     744:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     748:	14 b8       	out	0x04, r1	; 4
     74a:	17 b8       	out	0x07, r1	; 7
     74c:	1a b8       	out	0x0a, r1	; 10
     74e:	15 b8       	out	0x05, r1	; 5
     750:	18 b8       	out	0x08, r1	; 8
     752:	1b b8       	out	0x0b, r1	; 11
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	a8 95       	wdr
     75a:	d0 92 60 00 	sts	0x0060, r13
     75e:	0f be       	out	0x3f, r0	; 63
     760:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     764:	80 91 60 00 	lds	r24, 0x0060
     768:	80 64       	ori	r24, 0x40	; 64
     76a:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     76e:	93 b7       	in	r25, 0x33	; 51
     770:	91 7f       	andi	r25, 0xF1	; 241
     772:	94 60       	ori	r25, 0x04	; 4
     774:	93 bf       	out	0x33, r25	; 51
                cli();
     776:	f8 94       	cli
                sleep_enable();
     778:	83 b7       	in	r24, 0x33	; 51
     77a:	81 60       	ori	r24, 0x01	; 1
     77c:	83 bf       	out	0x33, r24	; 51
                sei();
     77e:	78 94       	sei
                sleep_cpu();
     780:	88 95       	sleep
                sleep_disable();
     782:	83 b7       	in	r24, 0x33	; 51
     784:	8e 7f       	andi	r24, 0xFE	; 254
     786:	83 bf       	out	0x33, r24	; 51
                sei();
     788:	78 94       	sei
                rx_busy = 0;
     78a:	10 92 45 01 	sts	0x0145, r1
                ports_on();
     78e:	52 9a       	sbi	0x0a, 2	; 10
     790:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     792:	80 91 7a 00 	lds	r24, 0x007A
     796:	80 68       	ori	r24, 0x80	; 128
     798:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79c:	87 e5       	ldi	r24, 0x57	; 87
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <kilo_start+0x108>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <kilo_start+0x10e>
     7a6:	00 00       	nop
                _delay_us(300);
                acomp_on();
     7a8:	80 b7       	in	r24, 0x30	; 48
     7aa:	88 61       	ori	r24, 0x18	; 24
     7ac:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7ae:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     7b0:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7b2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7b4:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     7b6:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     7b8:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ba:	ef e1       	ldi	r30, 0x1F	; 31
     7bc:	fe e4       	ldi	r31, 0x4E	; 78
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <kilo_start+0x126>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <kilo_start+0x12c>
     7c4:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     7c6:	80 91 45 01 	lds	r24, 0x0145
     7ca:	81 11       	cpse	r24, r1
     7cc:	81 c0       	rjmp	.+258    	; 0x8d0 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7ce:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7d0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7d2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7d4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7d6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7d8:	3c 98       	cbi	0x07, 4	; 7
     7da:	6d cf       	rjmp	.-294    	; 0x6b6 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     7dc:	80 91 11 01 	lds	r24, 0x0111
     7e0:	81 11       	cpse	r24, r1
     7e2:	41 c0       	rjmp	.+130    	; 0x866 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7e4:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7e8:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     7ec:	10 92 12 01 	sts	0x0112, r1
     7f0:	62 cf       	rjmp	.-316    	; 0x6b6 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     7f2:	48 99       	sbic	0x09, 0	; 9
     7f4:	ec cf       	rjmp	.-40     	; 0x7ce <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7f6:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7f8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7fa:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7fc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7fe:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     800:	3c 98       	cbi	0x07, 4	; 7
     802:	8f ec       	ldi	r24, 0xCF	; 207
     804:	97 e0       	ldi	r25, 0x07	; 7
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <kilo_start+0x16e>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <kilo_start+0x174>
     80c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     80e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     810:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     812:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     814:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     816:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     818:	3c 98       	cbi	0x07, 4	; 7
     81a:	9f ef       	ldi	r25, 0xFF	; 255
     81c:	e1 ee       	ldi	r30, 0xE1	; 225
     81e:	f4 e0       	ldi	r31, 0x04	; 4
     820:	91 50       	subi	r25, 0x01	; 1
     822:	e0 40       	sbci	r30, 0x00	; 0
     824:	f0 40       	sbci	r31, 0x00	; 0
     826:	e1 f7       	brne	.-8      	; 0x820 <kilo_start+0x188>
     828:	00 c0       	rjmp	.+0      	; 0x82a <kilo_start+0x192>
     82a:	00 00       	nop
     82c:	44 cf       	rjmp	.-376    	; 0x6b6 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     82e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     830:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     832:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     834:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     836:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     838:	3c 98       	cbi	0x07, 4	; 7
     83a:	ef ec       	ldi	r30, 0xCF	; 207
     83c:	f7 e0       	ldi	r31, 0x07	; 7
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <kilo_start+0x1a6>
     842:	00 c0       	rjmp	.+0      	; 0x844 <kilo_start+0x1ac>
     844:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     846:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     848:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     84a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     84c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     84e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     850:	3c 98       	cbi	0x07, 4	; 7
     852:	ff ef       	ldi	r31, 0xFF	; 255
     854:	21 ee       	ldi	r18, 0xE1	; 225
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	f1 50       	subi	r31, 0x01	; 1
     85a:	20 40       	sbci	r18, 0x00	; 0
     85c:	80 40       	sbci	r24, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <kilo_start+0x1c0>
     860:	00 c0       	rjmp	.+0      	; 0x862 <kilo_start+0x1ca>
     862:	00 00       	nop
     864:	28 cf       	rjmp	.-432    	; 0x6b6 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     866:	90 91 11 01 	lds	r25, 0x0111
     86a:	80 91 12 01 	lds	r24, 0x0112
     86e:	98 17       	cp	r25, r24
     870:	09 f4       	brne	.+2      	; 0x874 <kilo_start+0x1dc>
     872:	21 cf       	rjmp	.-446    	; 0x6b6 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     874:	80 91 11 01 	lds	r24, 0x0111
     878:	80 93 12 01 	sts	0x0112, r24
                        if (cur_motion == MOVE_LEFT) {
     87c:	80 91 11 01 	lds	r24, 0x0111
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	09 f4       	brne	.+2      	; 0x886 <kilo_start+0x1ee>
     884:	50 c0       	rjmp	.+160    	; 0x926 <__stack+0x27>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     886:	80 91 11 01 	lds	r24, 0x0111
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     88a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     88e:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	d9 f1       	breq	.+118    	; 0x90c <__stack+0xd>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     896:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     89a:	90 92 b4 00 	sts	0x00B4, r9
     89e:	8f e2       	ldi	r24, 0x2F	; 47
     8a0:	95 e7       	ldi	r25, 0x75	; 117
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <kilo_start+0x20a>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <kilo_start+0x210>
     8a8:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     8aa:	80 91 7a 01 	lds	r24, 0x017A
     8ae:	90 91 79 01 	lds	r25, 0x0179
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8b2:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     8b6:	80 93 b4 00 	sts	0x00B4, r24
     8ba:	fd ce       	rjmp	.-518    	; 0x6b6 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     8bc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     8be:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8c0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8c2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8c4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8c6:	3c 98       	cbi	0x07, 4	; 7
     8c8:	f6 ce       	rjmp	.-532    	; 0x6b6 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     8ca:	f3 01       	movw	r30, r6
     8cc:	09 95       	icall
     8ce:	01 cf       	rjmp	.-510    	; 0x6d2 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     8d0:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     8d2:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8d4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8d6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8d8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8da:	3c 98       	cbi	0x07, 4	; 7
     8dc:	ff ef       	ldi	r31, 0xFF	; 255
     8de:	20 e7       	ldi	r18, 0x70	; 112
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	f1 50       	subi	r31, 0x01	; 1
     8e4:	20 40       	sbci	r18, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <kilo_start+0x24a>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <kilo_start+0x254>
     8ec:	00 00       	nop
     8ee:	6f cf       	rjmp	.-290    	; 0x7ce <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8f0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8f2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     8f4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     8f6:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8f8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8fa:	3c 98       	cbi	0x07, 4	; 7
     8fc:	dc ce       	rjmp	.-584    	; 0x6b6 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8fe:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     900:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     902:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     904:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     906:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     908:	3c 9a       	sbi	0x07, 4	; 7
     90a:	d5 ce       	rjmp	.-598    	; 0x6b6 <kilo_start+0x1e>
     90c:	ef e2       	ldi	r30, 0x2F	; 47
     90e:	f5 e7       	ldi	r31, 0x75	; 117
     910:	31 97       	sbiw	r30, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0x11>
     914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0x17>
     916:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     918:	80 91 67 01 	lds	r24, 0x0167
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     91c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     920:	80 93 b4 00 	sts	0x00B4, r24
     924:	c8 ce       	rjmp	.-624    	; 0x6b6 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     926:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     92a:	10 92 b4 00 	sts	0x00B4, r1
     92e:	8f e2       	ldi	r24, 0x2F	; 47
     930:	95 e7       	ldi	r25, 0x75	; 117
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <__stack+0x33>
     936:	00 c0       	rjmp	.+0      	; 0x938 <__stack+0x39>
     938:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     93a:	80 91 7b 01 	lds	r24, 0x017B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     93e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     942:	10 92 b4 00 	sts	0x00B4, r1
     946:	b7 ce       	rjmp	.-658    	; 0x6b6 <kilo_start+0x1e>

00000948 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     948:	07 c0       	rjmp	.+14     	; 0x958 <delay+0x10>
     94a:	ef ec       	ldi	r30, 0xCF	; 207
     94c:	f7 e0       	ldi	r31, 0x07	; 7
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <delay+0x6>
     952:	00 c0       	rjmp	.+0      	; 0x954 <delay+0xc>
     954:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     956:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	b9 f7       	brne	.-18     	; 0x94a <delay+0x2>
     95c:	08 95       	ret

0000095e <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     95e:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     962:	60 93 b4 00 	sts	0x00B4, r22
     966:	08 95       	ret

00000968 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     96e:	80 93 b4 00 	sts	0x00B4, r24
     972:	8f e0       	ldi	r24, 0x0F	; 15
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	ef ec       	ldi	r30, 0xCF	; 207
     978:	f7 e0       	ldi	r31, 0x07	; 7
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <spinup_motors+0x12>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <spinup_motors+0x18>
     980:	00 00       	nop
     982:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     984:	c1 f7       	brne	.-16     	; 0x976 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     986:	08 95       	ret

00000988 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     988:	80 91 45 01 	lds	r24, 0x0145
     98c:	81 11       	cpse	r24, r1
     98e:	1e c0       	rjmp	.+60     	; 0x9cc <get_ambientlight+0x44>
        cli();
     990:	f8 94       	cli
        adc_setup_conversion(7);
     992:	87 e0       	ldi	r24, 0x07	; 7
     994:	80 93 7c 00 	sts	0x007C, r24
     998:	83 e8       	ldi	r24, 0x83	; 131
     99a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     99e:	80 91 7a 00 	lds	r24, 0x007A
     9a2:	80 64       	ori	r24, 0x40	; 64
     9a4:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9a8:	80 91 7a 00 	lds	r24, 0x007A
     9ac:	86 fd       	sbrc	r24, 6
     9ae:	fc cf       	rjmp	.-8      	; 0x9a8 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     9b0:	80 91 78 00 	lds	r24, 0x0078
     9b4:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     9b8:	10 92 7c 00 	sts	0x007C, r1
     9bc:	23 ea       	ldi	r18, 0xA3	; 163
     9be:	20 93 7a 00 	sts	0x007A, r18
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     9c8:	78 94       	sei
     9ca:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     9d0:	08 95       	ret

000009d2 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     9d2:	80 91 45 01 	lds	r24, 0x0145
     9d6:	81 11       	cpse	r24, r1
     9d8:	1e c0       	rjmp	.+60     	; 0xa16 <get_temperature+0x44>
        cli();
     9da:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     9dc:	88 ec       	ldi	r24, 0xC8	; 200
     9de:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     9e2:	87 e8       	ldi	r24, 0x87	; 135
     9e4:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9e8:	80 91 7a 00 	lds	r24, 0x007A
     9ec:	80 64       	ori	r24, 0x40	; 64
     9ee:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     9f2:	80 91 7a 00 	lds	r24, 0x007A
     9f6:	86 fd       	sbrc	r24, 6
     9f8:	fc cf       	rjmp	.-8      	; 0x9f2 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     9fa:	80 91 78 00 	lds	r24, 0x0078
     9fe:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     a02:	10 92 7c 00 	sts	0x007C, r1
     a06:	23 ea       	ldi	r18, 0xA3	; 163
     a08:	20 93 7a 00 	sts	0x007A, r18
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     a12:	78 94       	sei
     a14:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     a1a:	08 95       	ret

00000a1c <rand_hard>:

uint8_t rand_hard() {
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	e0 e0       	ldi	r30, 0x00	; 0
     a26:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     a28:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     a2a:	03 ea       	ldi	r16, 0xA3	; 163
     a2c:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     a2e:	d6 e0       	ldi	r29, 0x06	; 6
     a30:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     a32:	a1 e0       	ldi	r26, 0x01	; 1
     a34:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     a36:	60 e8       	ldi	r22, 0x80	; 128
     a38:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     a3a:	f8 94       	cli
            adc_setup_conversion(6);
     a3c:	d0 93 7c 00 	sts	0x007C, r29
     a40:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     a44:	90 91 7a 00 	lds	r25, 0x007A
     a48:	90 64       	ori	r25, 0x40	; 64
     a4a:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     a4e:	90 91 7a 00 	lds	r25, 0x007A
     a52:	96 fd       	sbrc	r25, 6
     a54:	fc cf       	rjmp	.-8      	; 0xa4e <rand_hard+0x32>
            a = ADCW&0x1;
     a56:	20 91 78 00 	lds	r18, 0x0078
     a5a:	30 91 79 00 	lds	r19, 0x0079
     a5e:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     a60:	90 91 7a 00 	lds	r25, 0x007A
     a64:	90 64       	ori	r25, 0x40	; 64
     a66:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     a6a:	90 91 7a 00 	lds	r25, 0x007A
     a6e:	96 fd       	sbrc	r25, 6
     a70:	fc cf       	rjmp	.-8      	; 0xa6a <rand_hard+0x4e>
            b = ADCW&0x1;
     a72:	40 91 78 00 	lds	r20, 0x0078
     a76:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     a7a:	10 92 7c 00 	sts	0x007C, r1
     a7e:	00 93 7a 00 	sts	0x007A, r16
     a82:	10 93 7b 00 	sts	0x007B, r17
            sei();
     a86:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     a88:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     a8a:	24 13       	cpse	r18, r20
     a8c:	03 c0       	rjmp	.+6      	; 0xa94 <rand_hard+0x78>
     a8e:	61 50       	subi	r22, 0x01	; 1
     a90:	71 09       	sbc	r23, r1
     a92:	99 f6       	brne	.-90     	; 0xa3a <rand_hard+0x1e>
        if (a)
     a94:	22 23       	and	r18, r18
     a96:	39 f0       	breq	.+14     	; 0xaa6 <rand_hard+0x8a>
            num |= (1<<i);
     a98:	9d 01       	movw	r18, r26
     a9a:	0e 2e       	mov	r0, r30
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <rand_hard+0x84>
     a9e:	22 0f       	add	r18, r18
     aa0:	0a 94       	dec	r0
     aa2:	ea f7       	brpl	.-6      	; 0xa9e <rand_hard+0x82>
     aa4:	82 2b       	or	r24, r18
     aa6:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     aa8:	e8 30       	cpi	r30, 0x08	; 8
     aaa:	f1 05       	cpc	r31, r1
     aac:	09 f0       	breq	.+2      	; 0xab0 <rand_hard+0x94>
     aae:	c3 cf       	rjmp	.-122    	; 0xa36 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	08 95       	ret

00000aba <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     aba:	80 91 00 01 	lds	r24, 0x0100
     abe:	98 2f       	mov	r25, r24
     ac0:	99 0f       	add	r25, r25
     ac2:	99 0f       	add	r25, r25
     ac4:	99 0f       	add	r25, r25
     ac6:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     ac8:	90 91 10 01 	lds	r25, 0x0110
     acc:	21 e0       	ldi	r18, 0x01	; 1
     ace:	29 0f       	add	r18, r25
     ad0:	20 93 10 01 	sts	0x0110, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     ad4:	28 2f       	mov	r18, r24
     ad6:	22 95       	swap	r18
     ad8:	26 95       	lsr	r18
     ada:	27 70       	andi	r18, 0x07	; 7
     adc:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     ade:	96 95       	lsr	r25
     ae0:	96 95       	lsr	r25
     ae2:	89 27       	eor	r24, r25
     ae4:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     ae8:	08 95       	ret

00000aea <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     aea:	80 93 00 01 	sts	0x0100, r24
     aee:	08 95       	ret

00000af0 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     af0:	80 91 45 01 	lds	r24, 0x0145
     af4:	81 11       	cpse	r24, r1
     af6:	16 c0       	rjmp	.+44     	; 0xb24 <get_voltage+0x34>
        cli();                                    // disable interrupts
     af8:	f8 94       	cli
        adc_setup_conversion(6);
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	80 93 7c 00 	sts	0x007C, r24
     b00:	83 e8       	ldi	r24, 0x83	; 131
     b02:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     b06:	80 91 7a 00 	lds	r24, 0x007A
     b0a:	80 64       	ori	r24, 0x40	; 64
     b0c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     b10:	80 91 7a 00 	lds	r24, 0x007A
     b14:	86 fd       	sbrc	r24, 6
     b16:	fc cf       	rjmp	.-8      	; 0xb10 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     b18:	80 91 78 00 	lds	r24, 0x0078
     b1c:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     b20:	78 94       	sei
     b22:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     b28:	08 95       	ret

00000b2a <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     b2a:	2f 92       	push	r2
     b2c:	3f 92       	push	r3
     b2e:	4f 92       	push	r4
     b30:	5f 92       	push	r5
     b32:	6f 92       	push	r6
     b34:	7f 92       	push	r7
     b36:	8f 92       	push	r8
     b38:	9f 92       	push	r9
     b3a:	af 92       	push	r10
     b3c:	bf 92       	push	r11
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <estimate_distance+0x26>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <estimate_distance+0x28>
     b52:	00 d0       	rcall	.+0      	; 0xb54 <estimate_distance+0x2a>
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     b5a:	dc 01       	movw	r26, r24
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	0d 90       	ld	r0, X+
     b60:	bc 91       	ld	r27, X
     b62:	a0 2d       	mov	r26, r0
     b64:	be 83       	std	Y+6, r27	; 0x06
     b66:	ad 83       	std	Y+5, r26	; 0x05
     b68:	a4 38       	cpi	r26, 0x84	; 132
     b6a:	e3 e0       	ldi	r30, 0x03	; 3
     b6c:	be 07       	cpc	r27, r30
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <estimate_distance+0x48>
     b70:	c9 c0       	rjmp	.+402    	; 0xd04 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     b72:	80 91 1f 01 	lds	r24, 0x011F
     b76:	90 91 20 01 	lds	r25, 0x0120
     b7a:	8a 17       	cp	r24, r26
     b7c:	9b 07       	cpc	r25, r27
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <estimate_distance+0x58>
     b80:	37 c1       	rjmp	.+622    	; 0xdf0 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     b82:	00 91 21 01 	lds	r16, 0x0121
     b86:	10 91 22 01 	lds	r17, 0x0122
     b8a:	0a 17       	cp	r16, r26
     b8c:	1b 07       	cpc	r17, r27
     b8e:	08 f4       	brcc	.+2      	; 0xb92 <estimate_distance+0x68>
     b90:	2f c2       	rjmp	.+1118   	; 0xff0 <estimate_distance+0x4c6>
     b92:	00 91 23 01 	lds	r16, 0x0123
     b96:	10 91 24 01 	lds	r17, 0x0124
     b9a:	0a 17       	cp	r16, r26
     b9c:	1b 07       	cpc	r17, r27
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <estimate_distance+0x78>
     ba0:	2f c2       	rjmp	.+1118   	; 0x1000 <estimate_distance+0x4d6>
     ba2:	00 91 25 01 	lds	r16, 0x0125
     ba6:	10 91 26 01 	lds	r17, 0x0126
     baa:	0a 17       	cp	r16, r26
     bac:	1b 07       	cpc	r17, r27
     bae:	08 f4       	brcc	.+2      	; 0xbb2 <estimate_distance+0x88>
     bb0:	2f c2       	rjmp	.+1118   	; 0x1010 <estimate_distance+0x4e6>
     bb2:	00 91 27 01 	lds	r16, 0x0127
     bb6:	10 91 28 01 	lds	r17, 0x0128
     bba:	0a 17       	cp	r16, r26
     bbc:	1b 07       	cpc	r17, r27
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <estimate_distance+0x98>
     bc0:	2f c2       	rjmp	.+1118   	; 0x1020 <estimate_distance+0x4f6>
     bc2:	00 91 29 01 	lds	r16, 0x0129
     bc6:	10 91 2a 01 	lds	r17, 0x012A
     bca:	0a 17       	cp	r16, r26
     bcc:	1b 07       	cpc	r17, r27
     bce:	08 f4       	brcc	.+2      	; 0xbd2 <estimate_distance+0xa8>
     bd0:	ef c1       	rjmp	.+990    	; 0xfb0 <estimate_distance+0x486>
     bd2:	00 91 2b 01 	lds	r16, 0x012B
     bd6:	10 91 2c 01 	lds	r17, 0x012C
     bda:	0a 17       	cp	r16, r26
     bdc:	1b 07       	cpc	r17, r27
     bde:	08 f4       	brcc	.+2      	; 0xbe2 <estimate_distance+0xb8>
     be0:	27 c2       	rjmp	.+1102   	; 0x1030 <estimate_distance+0x506>
     be2:	00 91 2d 01 	lds	r16, 0x012D
     be6:	10 91 2e 01 	lds	r17, 0x012E
     bea:	0a 17       	cp	r16, r26
     bec:	1b 07       	cpc	r17, r27
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <estimate_distance+0xc8>
     bf0:	27 c2       	rjmp	.+1102   	; 0x1040 <estimate_distance+0x516>
     bf2:	00 91 2f 01 	lds	r16, 0x012F
     bf6:	10 91 30 01 	lds	r17, 0x0130
     bfa:	0a 17       	cp	r16, r26
     bfc:	1b 07       	cpc	r17, r27
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <estimate_distance+0xd8>
     c00:	27 c2       	rjmp	.+1102   	; 0x1050 <estimate_distance+0x526>
     c02:	00 91 31 01 	lds	r16, 0x0131
     c06:	10 91 32 01 	lds	r17, 0x0132
     c0a:	0a 17       	cp	r16, r26
     c0c:	1b 07       	cpc	r17, r27
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <estimate_distance+0xe8>
     c10:	27 c2       	rjmp	.+1102   	; 0x1060 <estimate_distance+0x536>
     c12:	00 91 33 01 	lds	r16, 0x0133
     c16:	10 91 34 01 	lds	r17, 0x0134
     c1a:	0a 17       	cp	r16, r26
     c1c:	1b 07       	cpc	r17, r27
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <estimate_distance+0xf8>
     c20:	27 c2       	rjmp	.+1102   	; 0x1070 <estimate_distance+0x546>
     c22:	00 91 35 01 	lds	r16, 0x0135
     c26:	10 91 36 01 	lds	r17, 0x0136
     c2a:	0a 17       	cp	r16, r26
     c2c:	1b 07       	cpc	r17, r27
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <estimate_distance+0x108>
     c30:	23 c2       	rjmp	.+1094   	; 0x1078 <estimate_distance+0x54e>
     c32:	00 91 37 01 	lds	r16, 0x0137
     c36:	10 91 38 01 	lds	r17, 0x0138
     c3a:	0a 17       	cp	r16, r26
     c3c:	1b 07       	cpc	r17, r27
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <estimate_distance+0x118>
     c40:	23 c2       	rjmp	.+1094   	; 0x1088 <estimate_distance+0x55e>
     c42:	00 91 39 01 	lds	r16, 0x0139
     c46:	10 91 3a 01 	lds	r17, 0x013A
     c4a:	0a 17       	cp	r16, r26
     c4c:	1b 07       	cpc	r17, r27
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <estimate_distance+0x128>
     c50:	23 c2       	rjmp	.+1094   	; 0x1098 <estimate_distance+0x56e>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a0 ed       	ldi	r26, 0xD0	; 208
     c58:	b0 e4       	ldi	r27, 0x40	; 64
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	ab 83       	std	Y+3, r26	; 0x03
     c60:	bc 83       	std	Y+4, r27	; 0x04
     c62:	4c e0       	ldi	r20, 0x0C	; 12
     c64:	e4 2e       	mov	r14, r20
     c66:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     c68:	f7 01       	movw	r30, r14
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	e1 5e       	subi	r30, 0xE1	; 225
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	b8 01       	movw	r22, r16
     c78:	68 1b       	sub	r22, r24
     c7a:	79 0b       	sbc	r23, r25
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	0e 94 08 0c 	call	0x1810	; 0x1810 <__addsf3>
     c8c:	6b 01       	movw	r12, r22
     c8e:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c90:	ad 81       	ldd	r26, Y+5	; 0x05
     c92:	be 81       	ldd	r27, Y+6	; 0x06
     c94:	bd 01       	movw	r22, r26
     c96:	bb 0f       	add	r27, r27
     c98:	88 0b       	sbc	r24, r24
     c9a:	99 0b       	sbc	r25, r25
     c9c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__floatsisf>
     ca0:	4b 01       	movw	r8, r22
     ca2:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     ca4:	b8 01       	movw	r22, r16
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     cae:	2b 01       	movw	r4, r22
     cb0:	3c 01       	movw	r6, r24
     cb2:	29 81       	ldd	r18, Y+1	; 0x01
     cb4:	3a 81       	ldd	r19, Y+2	; 0x02
     cb6:	4b 81       	ldd	r20, Y+3	; 0x03
     cb8:	5c 81       	ldd	r21, Y+4	; 0x04
     cba:	c7 01       	movw	r24, r14
     cbc:	b6 01       	movw	r22, r12
     cbe:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	c3 01       	movw	r24, r6
     cc8:	b2 01       	movw	r22, r4
     cca:	0e 94 07 0c 	call	0x180e	; 0x180e <__subsf3>
     cce:	9b 01       	movw	r18, r22
     cd0:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     cd2:	c5 01       	movw	r24, r10
     cd4:	b4 01       	movw	r22, r8
     cd6:	0e 94 07 0c 	call	0x180e	; 0x180e <__subsf3>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e2       	ldi	r20, 0x20	; 32
     ce0:	51 e4       	ldi	r21, 0x41	; 65
     ce2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
            b=((int)((int)b/(int)slope));
     ce6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__fixsfsi>
     cea:	8b 01       	movw	r16, r22
     cec:	c7 01       	movw	r24, r14
     cee:	b6 01       	movw	r22, r12
     cf0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__fixsfsi>
     cf4:	ab 01       	movw	r20, r22
     cf6:	bc 01       	movw	r22, r24
     cf8:	c8 01       	movw	r24, r16
     cfa:	ba 01       	movw	r22, r20
     cfc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divmodhi4>
            dist_high=b;
     d00:	16 2f       	mov	r17, r22
     d02:	77 c0       	rjmp	.+238    	; 0xdf2 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d04:	dc 01       	movw	r26, r24
     d06:	cd 90       	ld	r12, X+
     d08:	dc 90       	ld	r13, X
     d0a:	80 91 46 01 	lds	r24, 0x0146
     d0e:	90 91 47 01 	lds	r25, 0x0147
     d12:	8c 15       	cp	r24, r12
     d14:	9d 05       	cpc	r25, r13
     d16:	08 f4       	brcc	.+2      	; 0xd1a <estimate_distance+0x1f0>
     d18:	8c c0       	rjmp	.+280    	; 0xe32 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     d1a:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d1c:	e0 90 48 01 	lds	r14, 0x0148
     d20:	f0 90 49 01 	lds	r15, 0x0149
     d24:	ec 14       	cp	r14, r12
     d26:	fd 04       	cpc	r15, r13
     d28:	08 f4       	brcc	.+2      	; 0xd2c <estimate_distance+0x202>
     d2a:	5e c1       	rjmp	.+700    	; 0xfe8 <estimate_distance+0x4be>
     d2c:	e0 90 4a 01 	lds	r14, 0x014A
     d30:	f0 90 4b 01 	lds	r15, 0x014B
     d34:	ec 14       	cp	r14, r12
     d36:	fd 04       	cpc	r15, r13
     d38:	08 f4       	brcc	.+2      	; 0xd3c <estimate_distance+0x212>
     d3a:	5e c1       	rjmp	.+700    	; 0xff8 <estimate_distance+0x4ce>
     d3c:	e0 90 4c 01 	lds	r14, 0x014C
     d40:	f0 90 4d 01 	lds	r15, 0x014D
     d44:	ec 14       	cp	r14, r12
     d46:	fd 04       	cpc	r15, r13
     d48:	08 f4       	brcc	.+2      	; 0xd4c <estimate_distance+0x222>
     d4a:	5e c1       	rjmp	.+700    	; 0x1008 <estimate_distance+0x4de>
     d4c:	e0 90 4e 01 	lds	r14, 0x014E
     d50:	f0 90 4f 01 	lds	r15, 0x014F
     d54:	ec 14       	cp	r14, r12
     d56:	fd 04       	cpc	r15, r13
     d58:	08 f4       	brcc	.+2      	; 0xd5c <estimate_distance+0x232>
     d5a:	5e c1       	rjmp	.+700    	; 0x1018 <estimate_distance+0x4ee>
     d5c:	e0 90 50 01 	lds	r14, 0x0150
     d60:	f0 90 51 01 	lds	r15, 0x0151
     d64:	ec 14       	cp	r14, r12
     d66:	fd 04       	cpc	r15, r13
     d68:	08 f4       	brcc	.+2      	; 0xd6c <estimate_distance+0x242>
     d6a:	c3 c0       	rjmp	.+390    	; 0xef2 <estimate_distance+0x3c8>
     d6c:	e0 90 52 01 	lds	r14, 0x0152
     d70:	f0 90 53 01 	lds	r15, 0x0153
     d74:	ec 14       	cp	r14, r12
     d76:	fd 04       	cpc	r15, r13
     d78:	08 f4       	brcc	.+2      	; 0xd7c <estimate_distance+0x252>
     d7a:	56 c1       	rjmp	.+684    	; 0x1028 <estimate_distance+0x4fe>
     d7c:	e0 90 54 01 	lds	r14, 0x0154
     d80:	f0 90 55 01 	lds	r15, 0x0155
     d84:	ec 14       	cp	r14, r12
     d86:	fd 04       	cpc	r15, r13
     d88:	08 f4       	brcc	.+2      	; 0xd8c <estimate_distance+0x262>
     d8a:	56 c1       	rjmp	.+684    	; 0x1038 <estimate_distance+0x50e>
     d8c:	e0 90 56 01 	lds	r14, 0x0156
     d90:	f0 90 57 01 	lds	r15, 0x0157
     d94:	ec 14       	cp	r14, r12
     d96:	fd 04       	cpc	r15, r13
     d98:	08 f4       	brcc	.+2      	; 0xd9c <estimate_distance+0x272>
     d9a:	56 c1       	rjmp	.+684    	; 0x1048 <estimate_distance+0x51e>
     d9c:	e0 90 58 01 	lds	r14, 0x0158
     da0:	f0 90 59 01 	lds	r15, 0x0159
     da4:	ec 14       	cp	r14, r12
     da6:	fd 04       	cpc	r15, r13
     da8:	08 f4       	brcc	.+2      	; 0xdac <estimate_distance+0x282>
     daa:	56 c1       	rjmp	.+684    	; 0x1058 <estimate_distance+0x52e>
     dac:	e0 90 5a 01 	lds	r14, 0x015A
     db0:	f0 90 5b 01 	lds	r15, 0x015B
     db4:	ec 14       	cp	r14, r12
     db6:	fd 04       	cpc	r15, r13
     db8:	08 f4       	brcc	.+2      	; 0xdbc <estimate_distance+0x292>
     dba:	56 c1       	rjmp	.+684    	; 0x1068 <estimate_distance+0x53e>
     dbc:	e0 90 5c 01 	lds	r14, 0x015C
     dc0:	f0 90 5d 01 	lds	r15, 0x015D
     dc4:	ec 14       	cp	r14, r12
     dc6:	fd 04       	cpc	r15, r13
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <estimate_distance+0x2a2>
     dca:	5a c1       	rjmp	.+692    	; 0x1080 <estimate_distance+0x556>
     dcc:	e0 90 5e 01 	lds	r14, 0x015E
     dd0:	f0 90 5f 01 	lds	r15, 0x015F
     dd4:	ec 14       	cp	r14, r12
     dd6:	fd 04       	cpc	r15, r13
     dd8:	08 f4       	brcc	.+2      	; 0xddc <estimate_distance+0x2b2>
     dda:	5a c1       	rjmp	.+692    	; 0x1090 <estimate_distance+0x566>
     ddc:	e0 90 60 01 	lds	r14, 0x0160
     de0:	f0 90 61 01 	lds	r15, 0x0161
     de4:	ec 14       	cp	r14, r12
     de6:	fd 04       	cpc	r15, r13
     de8:	08 f4       	brcc	.+2      	; 0xdec <estimate_distance+0x2c2>
     dea:	5a c1       	rjmp	.+692    	; 0x10a0 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     dec:	0a e5       	ldi	r16, 0x5A	; 90
     dee:	31 c0       	rjmp	.+98     	; 0xe52 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     df0:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     df2:	ed 81       	ldd	r30, Y+5	; 0x05
     df4:	fe 81       	ldd	r31, Y+6	; 0x06
     df6:	ed 3b       	cpi	r30, 0xBD	; 189
     df8:	f2 40       	sbci	r31, 0x02	; 2
     dfa:	fc f4       	brge	.+62     	; 0xe3a <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     dfc:	81 e2       	ldi	r24, 0x21	; 33
     dfe:	81 0f       	add	r24, r17
    }
}
     e00:	26 96       	adiw	r28, 0x06	; 6
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	8f 90       	pop	r8
     e24:	7f 90       	pop	r7
     e26:	6f 90       	pop	r6
     e28:	5f 90       	pop	r5
     e2a:	4f 90       	pop	r4
     e2c:	3f 90       	pop	r3
     e2e:	2f 90       	pop	r2
     e30:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     e32:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     e34:	81 e2       	ldi	r24, 0x21	; 33
     e36:	80 0f       	add	r24, r16
     e38:	e3 cf       	rjmp	.-58     	; 0xe00 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     e3a:	d1 01       	movw	r26, r2
     e3c:	cd 90       	ld	r12, X+
     e3e:	dc 90       	ld	r13, X
     e40:	80 91 46 01 	lds	r24, 0x0146
     e44:	90 91 47 01 	lds	r25, 0x0147
     e48:	8c 15       	cp	r24, r12
     e4a:	9d 05       	cpc	r25, r13
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <estimate_distance+0x326>
     e4e:	66 cf       	rjmp	.-308    	; 0xd1c <estimate_distance+0x1f2>
            dist_low=0;
     e50:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     e52:	1f 3f       	cpi	r17, 0xFF	; 255
     e54:	79 f3       	breq	.-34     	; 0xe34 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     e56:	ed 81       	ldd	r30, Y+5	; 0x05
     e58:	fe 81       	ldd	r31, Y+6	; 0x06
     e5a:	bf 01       	movw	r22, r30
     e5c:	ff 0f       	add	r31, r31
     e5e:	88 0b       	sbc	r24, r24
     e60:	99 0b       	sbc	r25, r25
     e62:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__floatsisf>
     e66:	6b 01       	movw	r12, r22
     e68:	7c 01       	movw	r14, r24
     e6a:	61 2f       	mov	r22, r17
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     e76:	4b 01       	movw	r8, r22
     e78:	5c 01       	movw	r10, r24
     e7a:	a7 01       	movw	r20, r14
     e7c:	96 01       	movw	r18, r12
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	81 e6       	ldi	r24, 0x61	; 97
     e84:	94 e4       	ldi	r25, 0x44	; 68
     e86:	0e 94 07 0c 	call	0x180e	; 0x180e <__subsf3>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	c5 01       	movw	r24, r10
     e90:	b4 01       	movw	r22, r8
     e92:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
     e96:	4b 01       	movw	r8, r22
     e98:	5c 01       	movw	r10, r24
     e9a:	60 2f       	mov	r22, r16
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     ea6:	2b 01       	movw	r4, r22
     ea8:	3c 01       	movw	r6, r24
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	4f e2       	ldi	r20, 0x2F	; 47
     eb0:	54 e4       	ldi	r21, 0x44	; 68
     eb2:	c7 01       	movw	r24, r14
     eb4:	b6 01       	movw	r22, r12
     eb6:	0e 94 07 0c 	call	0x180e	; 0x180e <__subsf3>
     eba:	9b 01       	movw	r18, r22
     ebc:	ac 01       	movw	r20, r24
     ebe:	c3 01       	movw	r24, r6
     ec0:	b2 01       	movw	r22, r4
     ec2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
     ec6:	9b 01       	movw	r18, r22
     ec8:	ac 01       	movw	r20, r24
     eca:	c5 01       	movw	r24, r10
     ecc:	b4 01       	movw	r22, r8
     ece:	0e 94 08 0c 	call	0x1810	; 0x1810 <__addsf3>
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	48 e4       	ldi	r20, 0x48	; 72
     ed8:	53 e4       	ldi	r21, 0x43	; 67
     eda:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__divsf3>
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	44 e0       	ldi	r20, 0x04	; 4
     ee4:	52 e4       	ldi	r21, 0x42	; 66
     ee6:	0e 94 08 0c 	call	0x1810	; 0x1810 <__addsf3>
     eea:	0e 94 ed 0c 	call	0x19da	; 0x19da <__fixunssfsi>
     eee:	86 2f       	mov	r24, r22
     ef0:	87 cf       	rjmp	.-242    	; 0xe00 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ef2:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     ef4:	85 e0       	ldi	r24, 0x05	; 5
     ef6:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fc 01       	movw	r30, r24
     efe:	ec 5b       	subi	r30, 0xBC	; 188
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	b7 01       	movw	r22, r14
     f08:	68 1b       	sub	r22, r24
     f0a:	79 0b       	sbc	r23, r25
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     f14:	9b 01       	movw	r18, r22
     f16:	ac 01       	movw	r20, r24
     f18:	0e 94 08 0c 	call	0x1810	; 0x1810 <__addsf3>
     f1c:	4b 01       	movw	r8, r22
     f1e:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     f20:	b6 01       	movw	r22, r12
     f22:	dd 0c       	add	r13, r13
     f24:	88 0b       	sbc	r24, r24
     f26:	99 0b       	sbc	r25, r25
     f28:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__floatsisf>
     f2c:	2b 01       	movw	r4, r22
     f2e:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     f30:	b7 01       	movw	r22, r14
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     f3a:	6b 01       	movw	r12, r22
     f3c:	7c 01       	movw	r14, r24
     f3e:	60 2f       	mov	r22, r16
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	a9 01       	movw	r20, r18
     f5c:	0e 94 08 0c 	call	0x1810	; 0x1810 <__addsf3>
     f60:	a5 01       	movw	r20, r10
     f62:	94 01       	movw	r18, r8
     f64:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
     f68:	9b 01       	movw	r18, r22
     f6a:	ac 01       	movw	r20, r24
     f6c:	c7 01       	movw	r24, r14
     f6e:	b6 01       	movw	r22, r12
     f70:	0e 94 07 0c 	call	0x180e	; 0x180e <__subsf3>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     f78:	c3 01       	movw	r24, r6
     f7a:	b2 01       	movw	r22, r4
     f7c:	0e 94 07 0c 	call	0x180e	; 0x180e <__subsf3>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	51 e4       	ldi	r21, 0x41	; 65
     f88:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
                b=((int)((int)b/(int)slope));
     f8c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__fixsfsi>
     f90:	7b 01       	movw	r14, r22
     f92:	c5 01       	movw	r24, r10
     f94:	b4 01       	movw	r22, r8
     f96:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__fixsfsi>
     f9a:	ab 01       	movw	r20, r22
     f9c:	bc 01       	movw	r22, r24
     f9e:	c7 01       	movw	r24, r14
     fa0:	ba 01       	movw	r22, r20
     fa2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divmodhi4>
                dist_low=b;
     fa6:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     fa8:	6f 3f       	cpi	r22, 0xFF	; 255
     faa:	09 f0       	breq	.+2      	; 0xfae <estimate_distance+0x484>
     fac:	52 cf       	rjmp	.-348    	; 0xe52 <estimate_distance+0x328>
     fae:	26 cf       	rjmp	.-436    	; 0xdfc <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fb0:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     fb2:	85 e0       	ldi	r24, 0x05	; 5
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	7c 01       	movw	r14, r24
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	ef 1a       	sub	r14, r31
     fbc:	f1 08       	sbc	r15, r1
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatunsisf>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsf3>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	a9 01       	movw	r20, r18
     fda:	0e 94 08 0c 	call	0x1810	; 0x1810 <__addsf3>
     fde:	69 83       	std	Y+1, r22	; 0x01
     fe0:	7a 83       	std	Y+2, r23	; 0x02
     fe2:	8b 83       	std	Y+3, r24	; 0x03
     fe4:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     fe6:	40 ce       	rjmp	.-896    	; 0xc68 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     fe8:	01 e0       	ldi	r16, 0x01	; 1
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	84 cf       	rjmp	.-248    	; 0xef8 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	df cf       	rjmp	.-66     	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ff8:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	7c cf       	rjmp	.-264    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1000:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	d7 cf       	rjmp	.-82     	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1008:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	74 cf       	rjmp	.-280    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1010:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	cf cf       	rjmp	.-98     	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1018:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	6c cf       	rjmp	.-296    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1020:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    1022:	84 e0       	ldi	r24, 0x04	; 4
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	c7 cf       	rjmp	.-114    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1028:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
    102a:	86 e0       	ldi	r24, 0x06	; 6
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	64 cf       	rjmp	.-312    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1030:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    1032:	86 e0       	ldi	r24, 0x06	; 6
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	bf cf       	rjmp	.-130    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1038:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
    103a:	87 e0       	ldi	r24, 0x07	; 7
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	5c cf       	rjmp	.-328    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1040:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    1042:	87 e0       	ldi	r24, 0x07	; 7
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	b7 cf       	rjmp	.-146    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1048:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
    104a:	88 e0       	ldi	r24, 0x08	; 8
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	54 cf       	rjmp	.-344    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1050:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    1052:	88 e0       	ldi	r24, 0x08	; 8
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	af cf       	rjmp	.-162    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1058:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    105a:	89 e0       	ldi	r24, 0x09	; 9
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	4c cf       	rjmp	.-360    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1060:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    1062:	89 e0       	ldi	r24, 0x09	; 9
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a7 cf       	rjmp	.-178    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1068:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    106a:	8a e0       	ldi	r24, 0x0A	; 10
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	44 cf       	rjmp	.-376    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1070:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    1072:	8a e0       	ldi	r24, 0x0A	; 10
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9f cf       	rjmp	.-194    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1078:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    107a:	8b e0       	ldi	r24, 0x0B	; 11
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9b cf       	rjmp	.-202    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1080:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    1082:	8b e0       	ldi	r24, 0x0B	; 11
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	38 cf       	rjmp	.-400    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1088:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    108a:	8c e0       	ldi	r24, 0x0C	; 12
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	93 cf       	rjmp	.-218    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1090:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    1092:	8c e0       	ldi	r24, 0x0C	; 12
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	30 cf       	rjmp	.-416    	; 0xef8 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1098:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    109a:	8d e0       	ldi	r24, 0x0D	; 13
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	8b cf       	rjmp	.-234    	; 0xfb6 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10a0:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    10a2:	8d e0       	ldi	r24, 0x0D	; 13
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	28 cf       	rjmp	.-432    	; 0xef8 <estimate_distance+0x3ce>

000010a8 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    tx_clock += tx_increment;
    10ca:	20 91 65 01 	lds	r18, 0x0165
    10ce:	30 91 66 01 	lds	r19, 0x0166
    10d2:	80 91 63 01 	lds	r24, 0x0163
    10d6:	90 91 64 01 	lds	r25, 0x0164
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	90 93 66 01 	sts	0x0166, r25
    10e2:	80 93 65 01 	sts	0x0165, r24
    tx_increment = 0xFF;
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	90 93 64 01 	sts	0x0164, r25
    10ee:	80 93 63 01 	sts	0x0163, r24
    OCR0A = tx_increment;
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    10f6:	80 91 41 01 	lds	r24, 0x0141
    10fa:	90 91 42 01 	lds	r25, 0x0142
    10fe:	a0 91 43 01 	lds	r26, 0x0143
    1102:	b0 91 44 01 	lds	r27, 0x0144
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	a1 1d       	adc	r26, r1
    110a:	b1 1d       	adc	r27, r1
    110c:	80 93 41 01 	sts	0x0141, r24
    1110:	90 93 42 01 	sts	0x0142, r25
    1114:	a0 93 43 01 	sts	0x0143, r26
    1118:	b0 93 44 01 	sts	0x0144, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    111c:	80 91 45 01 	lds	r24, 0x0145
    1120:	81 11       	cpse	r24, r1
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <__vector_14+0x9a>
    1124:	80 91 74 01 	lds	r24, 0x0174
    1128:	90 91 75 01 	lds	r25, 0x0175
    112c:	20 91 65 01 	lds	r18, 0x0165
    1130:	30 91 66 01 	lds	r19, 0x0166
    1134:	82 17       	cp	r24, r18
    1136:	93 07       	cpc	r25, r19
    1138:	20 f4       	brcc	.+8      	; 0x1142 <__vector_14+0x9a>
    113a:	80 91 13 01 	lds	r24, 0x0113
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	89 f0       	breq	.+34     	; 0x1164 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1164:	e0 91 03 01 	lds	r30, 0x0103
    1168:	f0 91 04 01 	lds	r31, 0x0104
    116c:	09 95       	icall
        if (msg) {
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	41 f3       	breq	.-48     	; 0x1142 <__vector_14+0x9a>
            if (message_send(msg)) {
    1172:	0e 94 3c 0b 	call	0x1678	; 0x1678 <message_send>
    1176:	81 11       	cpse	r24, r1
    1178:	09 c0       	rjmp	.+18     	; 0x118c <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    117a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <rand>
    117e:	99 27       	eor	r25, r25
    1180:	90 93 64 01 	sts	0x0164, r25
    1184:	80 93 63 01 	sts	0x0163, r24
                OCR0A = tx_increment;
    1188:	87 bd       	out	0x27, r24	; 39
    118a:	db cf       	rjmp	.-74     	; 0x1142 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    118c:	e0 91 01 01 	lds	r30, 0x0101
    1190:	f0 91 02 01 	lds	r31, 0x0102
    1194:	09 95       	icall
                tx_clock = 0;
    1196:	10 92 66 01 	sts	0x0166, r1
    119a:	10 92 65 01 	sts	0x0165, r1
    119e:	d1 cf       	rjmp	.-94     	; 0x1142 <__vector_14+0x9a>

000011a0 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    11a0:	80 ff       	sbrs	r24, 0
    11a2:	11 c0       	rjmp	.+34     	; 0x11c6 <set_color+0x26>
        DDRD |= (1<<5);
    11a4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    11a6:	81 ff       	sbrs	r24, 1
    11a8:	11 c0       	rjmp	.+34     	; 0x11cc <set_color+0x2c>
        DDRD |= (1<<4);
    11aa:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    11ac:	82 ff       	sbrs	r24, 2
    11ae:	11 c0       	rjmp	.+34     	; 0x11d2 <set_color+0x32>
        DDRC |= (1<<3);
    11b0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    11b2:	83 ff       	sbrs	r24, 3
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <set_color+0x38>
        DDRC |= (1<<2);
    11b6:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    11b8:	84 ff       	sbrs	r24, 4
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <set_color+0x3e>
        DDRC |= (1<<5);
    11bc:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    11be:	85 fd       	sbrc	r24, 5
    11c0:	11 c0       	rjmp	.+34     	; 0x11e4 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11c2:	3c 98       	cbi	0x07, 4	; 7
    11c4:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    11c6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    11c8:	81 fd       	sbrc	r24, 1
    11ca:	ef cf       	rjmp	.-34     	; 0x11aa <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    11cc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    11ce:	82 fd       	sbrc	r24, 2
    11d0:	ef cf       	rjmp	.-34     	; 0x11b0 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    11d2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    11d4:	83 fd       	sbrc	r24, 3
    11d6:	ef cf       	rjmp	.-34     	; 0x11b6 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11d8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    11da:	84 fd       	sbrc	r24, 4
    11dc:	ef cf       	rjmp	.-34     	; 0x11bc <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11de:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    11e0:	85 ff       	sbrs	r24, 5
    11e2:	ef cf       	rjmp	.-34     	; 0x11c2 <set_color+0x22>
        DDRC |= (1<<4);
    11e4:	3c 9a       	sbi	0x07, 4	; 7
    11e6:	08 95       	ret

000011e8 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    rx_timer_off();
    11f6:	10 92 81 00 	sts	0x0081, r1
    11fa:	10 92 85 00 	sts	0x0085, r1
    11fe:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	80 93 1e 01 	sts	0x011E, r24
    rx_leadingbyte = 1;
    1208:	80 93 62 01 	sts	0x0162, r24
    rx_busy = 0;
    120c:	10 92 45 01 	sts	0x0145, r1
    adc_trigger_high_gain();
    1210:	10 92 7c 00 	sts	0x007C, r1
    1214:	93 ea       	ldi	r25, 0xA3	; 163
    1216:	90 93 7a 00 	sts	0x007A, r25
    121a:	80 93 7b 00 	sts	0x007B, r24
}
    121e:	9f 91       	pop	r25
    1220:	8f 91       	pop	r24
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1252:	20 91 84 00 	lds	r18, 0x0084
    1256:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    125a:	41 e0       	ldi	r20, 0x01	; 1
    125c:	40 93 45 01 	sts	0x0145, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1260:	80 91 1e 01 	lds	r24, 0x011E
    1264:	88 23       	and	r24, r24
    1266:	a9 f1       	breq	.+106    	; 0x12d2 <__vector_23+0xa6>
        rx_timer_on();
    1268:	10 92 85 00 	sts	0x0085, r1
    126c:	10 92 84 00 	sts	0x0084, r1
    1270:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1274:	10 92 76 01 	sts	0x0176, r1
        rx_leadingbit = 0;
    1278:	10 92 1e 01 	sts	0x011E, r1
        if (rx_leadingbyte) {
    127c:	80 91 62 01 	lds	r24, 0x0162
    1280:	88 23       	and	r24, r24
    1282:	a1 f0       	breq	.+40     	; 0x12ac <__vector_23+0x80>
            adc_finish_conversion();
    1284:	80 91 7a 00 	lds	r24, 0x007A
    1288:	86 fd       	sbrc	r24, 6
    128a:	fc cf       	rjmp	.-8      	; 0x1284 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    128c:	80 91 78 00 	lds	r24, 0x0078
    1290:	90 91 79 00 	lds	r25, 0x0079
    1294:	90 93 40 01 	sts	0x0140, r25
    1298:	80 93 3f 01 	sts	0x013F, r24
            adc_trigger_low_gain();
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 7c 00 	sts	0x007C, r24
    12a2:	93 ea       	ldi	r25, 0xA3	; 163
    12a4:	90 93 7a 00 	sts	0x007A, r25
    12a8:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    12d2:	c9 01       	movw	r24, r18
    12d4:	87 58       	subi	r24, 0x87	; 135
    12d6:	91 09       	sbc	r25, r1
    12d8:	84 37       	cpi	r24, 0x74	; 116
    12da:	99 40       	sbci	r25, 0x09	; 9
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <__vector_23+0xb4>
    12de:	52 c0       	rjmp	.+164    	; 0x1384 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    12e0:	26 58       	subi	r18, 0x86	; 134
    12e2:	31 09       	sbc	r19, r1
    12e4:	a4 ef       	ldi	r26, 0xF4	; 244
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__umulhisi3>
    12ec:	aa 27       	eor	r26, r26
    12ee:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    12f0:	88 30       	cpi	r24, 0x08	; 8
    12f2:	91 05       	cpc	r25, r1
    12f4:	a1 05       	cpc	r26, r1
    12f6:	b1 05       	cpc	r27, r1
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <__vector_23+0xd0>
    12fa:	7b c0       	rjmp	.+246    	; 0x13f2 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    12fc:	40 93 1e 01 	sts	0x011E, r20
                if (rx_leadingbyte) {
    1300:	80 91 62 01 	lds	r24, 0x0162
    1304:	81 11       	cpse	r24, r1
    1306:	52 c0       	rjmp	.+164    	; 0x13ac <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1308:	80 91 3c 01 	lds	r24, 0x013C
    130c:	e8 2f       	mov	r30, r24
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	e8 59       	subi	r30, 0x98	; 152
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	90 91 76 01 	lds	r25, 0x0176
    1318:	90 83       	st	Z, r25
                    rx_byteindex++;
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	80 93 3c 01 	sts	0x013C, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1320:	8c 30       	cpi	r24, 0x0C	; 12
    1322:	21 f6       	brne	.-120    	; 0x12ac <__vector_23+0x80>
                        rx_timer_off();
    1324:	10 92 81 00 	sts	0x0081, r1
    1328:	10 92 85 00 	sts	0x0085, r1
    132c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1330:	40 93 62 01 	sts	0x0162, r20
                        rx_busy = 0;
    1334:	10 92 45 01 	sts	0x0145, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1338:	c0 91 72 01 	lds	r28, 0x0172
    133c:	d0 91 73 01 	lds	r29, 0x0173
    1340:	88 e6       	ldi	r24, 0x68	; 104
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	0e 94 20 0b 	call	0x1640	; 0x1640 <message_crc>
    1348:	c8 17       	cp	r28, r24
    134a:	d9 07       	cpc	r29, r25
    134c:	09 f0       	breq	.+2      	; 0x1350 <__vector_23+0x124>
    134e:	ae cf       	rjmp	.-164    	; 0x12ac <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1350:	80 91 71 01 	lds	r24, 0x0171
    1354:	87 ff       	sbrs	r24, 7
    1356:	61 c0       	rjmp	.+194    	; 0x141a <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1358:	98 e7       	ldi	r25, 0x78	; 120
    135a:	98 0f       	add	r25, r24
    135c:	93 30       	cpi	r25, 0x03	; 3
    135e:	30 f0       	brcs	.+12     	; 0x136c <__vector_23+0x140>
        motors_off();
    1360:	53 98       	cbi	0x0a, 3	; 10
    1362:	23 98       	cbi	0x04, 3	; 4
    1364:	10 92 b4 00 	sts	0x00B4, r1
    1368:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	fc 01       	movw	r30, r24
    1370:	e0 58       	subi	r30, 0x80	; 128
    1372:	f1 09       	sbc	r31, r1
    1374:	eb 30       	cpi	r30, 0x0B	; 11
    1376:	f1 05       	cpc	r31, r1
    1378:	08 f0       	brcs	.+2      	; 0x137c <__vector_23+0x150>
    137a:	98 cf       	rjmp	.-208    	; 0x12ac <__vector_23+0x80>
    137c:	e5 5c       	subi	r30, 0xC5	; 197
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1384:	10 92 81 00 	sts	0x0081, r1
    1388:	10 92 85 00 	sts	0x0085, r1
    138c:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1390:	40 93 1e 01 	sts	0x011E, r20
            rx_leadingbyte = 1;
    1394:	40 93 62 01 	sts	0x0162, r20
            rx_busy = 0;
    1398:	10 92 45 01 	sts	0x0145, r1
            adc_trigger_high_gain();
    139c:	10 92 7c 00 	sts	0x007C, r1
    13a0:	83 ea       	ldi	r24, 0xA3	; 163
    13a2:	80 93 7a 00 	sts	0x007A, r24
    13a6:	40 93 7b 00 	sts	0x007B, r20
    13aa:	80 cf       	rjmp	.-256    	; 0x12ac <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    13ac:	80 91 7a 00 	lds	r24, 0x007A
    13b0:	86 fd       	sbrc	r24, 6
    13b2:	fc cf       	rjmp	.-8      	; 0x13ac <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    13b4:	80 91 78 00 	lds	r24, 0x0078
    13b8:	90 91 79 00 	lds	r25, 0x0079
    13bc:	90 93 3e 01 	sts	0x013E, r25
    13c0:	80 93 3d 01 	sts	0x013D, r24
                    adc_trigger_high_gain();
    13c4:	10 92 7c 00 	sts	0x007C, r1
    13c8:	83 ea       	ldi	r24, 0xA3	; 163
    13ca:	80 93 7a 00 	sts	0x007A, r24
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    13d4:	90 91 76 01 	lds	r25, 0x0176
    13d8:	99 23       	and	r25, r25
    13da:	d1 f0       	breq	.+52     	; 0x1410 <__vector_23+0x1e4>
                        rx_timer_off();
    13dc:	10 92 81 00 	sts	0x0081, r1
    13e0:	10 92 85 00 	sts	0x0085, r1
    13e4:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    13e8:	80 93 62 01 	sts	0x0162, r24
                        rx_busy = 0;
    13ec:	10 92 45 01 	sts	0x0145, r1
    13f0:	5d cf       	rjmp	.-326    	; 0x12ac <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	f9 01       	movw	r30, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <__vector_23+0x1d2>
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <__vector_23+0x1ce>
    1402:	cf 01       	movw	r24, r30
    1404:	90 91 76 01 	lds	r25, 0x0176
    1408:	89 2b       	or	r24, r25
    140a:	80 93 76 01 	sts	0x0176, r24
    140e:	4e cf       	rjmp	.-356    	; 0x12ac <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1410:	10 92 62 01 	sts	0x0162, r1
                        rx_byteindex = 0;
    1414:	10 92 3c 01 	sts	0x013C, r1
    1418:	49 cf       	rjmp	.-366    	; 0x12ac <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    141a:	e0 91 05 01 	lds	r30, 0x0105
    141e:	f0 91 06 01 	lds	r31, 0x0106
    1422:	6d e3       	ldi	r22, 0x3D	; 61
    1424:	71 e0       	ldi	r23, 0x01	; 1
    1426:	88 e6       	ldi	r24, 0x68	; 104
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	09 95       	icall
    142c:	3f cf       	rjmp	.-386    	; 0x12ac <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    142e:	80 91 68 01 	lds	r24, 0x0168
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	09 f4       	brne	.+2      	; 0x1438 <__vector_23+0x20c>
    1436:	dd c0       	rjmp	.+442    	; 0x15f2 <__vector_23+0x3c6>
    1438:	08 f4       	brcc	.+2      	; 0x143c <__vector_23+0x210>
    143a:	ba c0       	rjmp	.+372    	; 0x15b0 <__vector_23+0x384>
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	09 f4       	brne	.+2      	; 0x1442 <__vector_23+0x216>
    1440:	c6 c0       	rjmp	.+396    	; 0x15ce <__vector_23+0x3a2>
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	09 f0       	breq	.+2      	; 0x1448 <__vector_23+0x21c>
    1446:	b1 c0       	rjmp	.+354    	; 0x15aa <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1448:	80 91 11 01 	lds	r24, 0x0111
    144c:	90 91 6e 01 	lds	r25, 0x016E
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	09 f4       	brne	.+2      	; 0x1456 <__vector_23+0x22a>
    1454:	e3 c0       	rjmp	.+454    	; 0x161c <__vector_23+0x3f0>
    1456:	80 91 6d 01 	lds	r24, 0x016D
                        prev_motion = MOVE_STOP;
    145a:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_STRAIGHT;
    145e:	23 e0       	ldi	r18, 0x03	; 3
    1460:	20 93 11 01 	sts	0x0111, r18
                        kilo_straight_left = calibmsg->straight_left;
    1464:	80 93 79 01 	sts	0x0179, r24
                        kilo_straight_right = calibmsg->straight_right;
    1468:	90 93 7a 01 	sts	0x017A, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    146c:	80 91 13 01 	lds	r24, 0x0113
    1470:	86 30       	cpi	r24, 0x06	; 6
    1472:	09 f4       	brne	.+2      	; 0x1476 <__vector_23+0x24a>
    1474:	1b cf       	rjmp	.-458    	; 0x12ac <__vector_23+0x80>
                motors_on();
    1476:	53 9a       	sbi	0x0a, 3	; 10
    1478:	23 9a       	sbi	0x04, 3	; 4
    147a:	10 92 b4 00 	sts	0x00B4, r1
    147e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	80 93 13 01 	sts	0x0113, r24
    1488:	11 cf       	rjmp	.-478    	; 0x12ac <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    148a:	80 91 13 01 	lds	r24, 0x0113
    148e:	86 30       	cpi	r24, 0x06	; 6
    1490:	99 f0       	breq	.+38     	; 0x14b8 <__vector_23+0x28c>
                motors_on();
    1492:	53 9a       	sbi	0x0a, 3	; 10
    1494:	23 9a       	sbi	0x04, 3	; 4
    1496:	10 92 b4 00 	sts	0x00B4, r1
    149a:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    149e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    14a0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    14a2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    14a4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    14a6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    14a8:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    14aa:	10 92 11 01 	sts	0x0111, r1
    14ae:	10 92 12 01 	sts	0x0112, r1
                kilo_state = MOVING;
    14b2:	86 e0       	ldi	r24, 0x06	; 6
    14b4:	80 93 13 01 	sts	0x0113, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9c 01       	movw	r18, r24
    14be:	00 90 68 01 	lds	r0, 0x0168
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <__vector_23+0x29c>
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <__vector_23+0x298>
    14cc:	80 91 77 01 	lds	r24, 0x0177
    14d0:	90 91 78 01 	lds	r25, 0x0178
    14d4:	82 23       	and	r24, r18
    14d6:	93 23       	and	r25, r19
    14d8:	89 2b       	or	r24, r25
    14da:	09 f0       	breq	.+2      	; 0x14de <__vector_23+0x2b2>
    14dc:	86 c0       	rjmp	.+268    	; 0x15ea <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    14de:	10 92 11 01 	sts	0x0111, r1
    14e2:	e4 ce       	rjmp	.-568    	; 0x12ac <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 13 01 	sts	0x0113, r24
    14ea:	e0 ce       	rjmp	.-576    	; 0x12ac <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    14ec:	e0 e0       	ldi	r30, 0x00	; 0
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    14f2:	80 91 6e 00 	lds	r24, 0x006E
    14f6:	8d 7f       	andi	r24, 0xFD	; 253
    14f8:	80 93 6e 00 	sts	0x006E, r24
    14fc:	16 bc       	out	0x26, r1	; 38
            bootload();
    14fe:	e0 e0       	ldi	r30, 0x00	; 0
    1500:	f0 e7       	ldi	r31, 0x70	; 112
    1502:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1504:	10 92 13 01 	sts	0x0113, r1
    1508:	d1 ce       	rjmp	.-606    	; 0x12ac <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	80 93 13 01 	sts	0x0113, r24
    1510:	cd ce       	rjmp	.-614    	; 0x12ac <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1512:	85 e0       	ldi	r24, 0x05	; 5
    1514:	80 93 13 01 	sts	0x0113, r24
    1518:	c9 ce       	rjmp	.-622    	; 0x12ac <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    151a:	80 91 13 01 	lds	r24, 0x0113
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	09 f4       	brne	.+2      	; 0x1524 <__vector_23+0x2f8>
    1522:	c4 ce       	rjmp	.-632    	; 0x12ac <__vector_23+0x80>
    1524:	80 91 13 01 	lds	r24, 0x0113
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	09 f4       	brne	.+2      	; 0x152e <__vector_23+0x302>
    152c:	bf ce       	rjmp	.-642    	; 0x12ac <__vector_23+0x80>
                motors_on();
    152e:	53 9a       	sbi	0x0a, 3	; 10
    1530:	23 9a       	sbi	0x04, 3	; 4
    1532:	10 92 b4 00 	sts	0x00B4, r1
    1536:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	80 93 13 01 	sts	0x0113, r24
    1540:	b5 ce       	rjmp	.-662    	; 0x12ac <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1542:	80 91 13 01 	lds	r24, 0x0113
    1546:	86 30       	cpi	r24, 0x06	; 6
    1548:	09 f0       	breq	.+2      	; 0x154c <__vector_23+0x320>
    154a:	b0 ce       	rjmp	.-672    	; 0x12ac <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    154c:	60 91 77 01 	lds	r22, 0x0177
    1550:	80 eb       	ldi	r24, 0xB0	; 176
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1558:	60 91 78 01 	lds	r22, 0x0178
    155c:	81 eb       	ldi	r24, 0xB1	; 177
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1564:	60 91 7b 01 	lds	r22, 0x017B
    1568:	85 e0       	ldi	r24, 0x05	; 5
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1570:	60 91 67 01 	lds	r22, 0x0167
    1574:	89 e0       	ldi	r24, 0x09	; 9
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    157c:	60 91 79 01 	lds	r22, 0x0179
    1580:	8c e0       	ldi	r24, 0x0C	; 12
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1588:	60 91 7a 01 	lds	r22, 0x017A
    158c:	84 e1       	ldi	r24, 0x14	; 20
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <eeprom_write_byte>
                        motors_off();
    1594:	53 98       	cbi	0x0a, 3	; 10
    1596:	23 98       	cbi	0x04, 3	; 4
    1598:	10 92 b4 00 	sts	0x00B4, r1
    159c:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 13 01 	sts	0x0113, r24
    15a6:	80 91 68 01 	lds	r24, 0x0168
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    15aa:	81 11       	cpse	r24, r1
    15ac:	5f cf       	rjmp	.-322    	; 0x146c <__vector_23+0x240>
    15ae:	7e ce       	rjmp	.-772    	; 0x12ac <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    15b0:	88 23       	and	r24, r24
    15b2:	39 f2       	breq	.-114    	; 0x1542 <__vector_23+0x316>
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	c9 f7       	brne	.-14     	; 0x15aa <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    15b8:	80 91 69 01 	lds	r24, 0x0169
    15bc:	90 91 6a 01 	lds	r25, 0x016A
    15c0:	90 93 78 01 	sts	0x0178, r25
    15c4:	80 93 77 01 	sts	0x0177, r24
                    cur_motion = MOVE_STOP;
    15c8:	10 92 11 01 	sts	0x0111, r1
    15cc:	4f cf       	rjmp	.-354    	; 0x146c <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    15ce:	80 91 11 01 	lds	r24, 0x0111
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	71 f1       	breq	.+92     	; 0x1632 <__vector_23+0x406>
    15d6:	80 91 6c 01 	lds	r24, 0x016C
                        prev_motion = MOVE_STOP;
    15da:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_RIGHT;
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_right = calibmsg->turn_right;
    15e4:	80 93 67 01 	sts	0x0167, r24
    15e8:	41 cf       	rjmp	.-382    	; 0x146c <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 11 01 	sts	0x0111, r24
    15f0:	5d ce       	rjmp	.-838    	; 0x12ac <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    15f2:	80 91 11 01 	lds	r24, 0x0111
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	51 f0       	breq	.+20     	; 0x160e <__vector_23+0x3e2>
    15fa:	80 91 6b 01 	lds	r24, 0x016B
                        prev_motion = MOVE_STOP;
    15fe:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_LEFT;
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_left = calibmsg->turn_left;
    1608:	80 93 7b 01 	sts	0x017B, r24
    160c:	2f cf       	rjmp	.-418    	; 0x146c <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    160e:	80 91 6b 01 	lds	r24, 0x016B
    1612:	90 91 7b 01 	lds	r25, 0x017B
    1616:	89 13       	cpse	r24, r25
    1618:	f2 cf       	rjmp	.-28     	; 0x15fe <__vector_23+0x3d2>
    161a:	28 cf       	rjmp	.-432    	; 0x146c <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    161c:	80 91 7a 01 	lds	r24, 0x017A
    1620:	98 13       	cpse	r25, r24
    1622:	19 cf       	rjmp	.-462    	; 0x1456 <__vector_23+0x22a>
    1624:	80 91 6d 01 	lds	r24, 0x016D
    1628:	20 91 79 01 	lds	r18, 0x0179
    162c:	82 13       	cpse	r24, r18
    162e:	15 cf       	rjmp	.-470    	; 0x145a <__vector_23+0x22e>
    1630:	1d cf       	rjmp	.-454    	; 0x146c <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1632:	80 91 6c 01 	lds	r24, 0x016C
    1636:	90 91 67 01 	lds	r25, 0x0167
    163a:	89 13       	cpse	r24, r25
    163c:	ce cf       	rjmp	.-100    	; 0x15da <__vector_23+0x3ae>
    163e:	16 cf       	rjmp	.-468    	; 0x146c <__vector_23+0x240>

00001640 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1640:	fc 01       	movw	r30, r24
    1642:	ac 01       	movw	r20, r24
    1644:	46 5f       	subi	r20, 0xF6	; 246
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    164c:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    164e:	82 27       	eor	r24, r18
    1650:	08 2e       	mov	r0, r24
    1652:	82 95       	swap	r24
    1654:	80 7f       	andi	r24, 0xF0	; 240
    1656:	80 25       	eor	r24, r0
    1658:	09 2e       	mov	r0, r25
    165a:	98 2f       	mov	r25, r24
    165c:	82 95       	swap	r24
    165e:	8f 70       	andi	r24, 0x0F	; 15
    1660:	08 26       	eor	r0, r24
    1662:	86 95       	lsr	r24
    1664:	98 27       	eor	r25, r24
    1666:	89 27       	eor	r24, r25
    1668:	88 0f       	add	r24, r24
    166a:	88 0f       	add	r24, r24
    166c:	88 0f       	add	r24, r24
    166e:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1670:	e4 17       	cp	r30, r20
    1672:	f5 07       	cpc	r31, r21
    1674:	59 f7       	brne	.-42     	; 0x164c <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1676:	08 95       	ret

00001678 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1678:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    167a:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    167c:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    167e:	20 91 3b 01 	lds	r18, 0x013B
    or tmpreg1, ddrreg
    1682:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1684:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1686:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1688:	30 91 3b 01 	lds	r19, 0x013B
    168c:	20 30       	cpi	r18, 0x00	; 0
    168e:	29 f0       	breq	.+10     	; 0x169a <message_send+0x22>
    1690:	00 00       	nop
    1692:	25 b1       	in	r18, 0x05	; 5
    1694:	23 2b       	or	r18, r19
    1696:	25 b9       	out	0x05, r18	; 5
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <message_send+0x2a>
    169a:	00 00       	nop
    169c:	00 00       	nop
    169e:	00 00       	nop
    16a0:	00 c0       	rjmp	.+0      	; 0x16a2 <message_send+0x2a>
    16a2:	00 00       	nop
    16a4:	00 00       	nop
    16a6:	00 00       	nop
    16a8:	30 95       	com	r19
    16aa:	25 b1       	in	r18, 0x05	; 5
    16ac:	23 23       	and	r18, r19
    16ae:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    16b0:	2e ea       	ldi	r18, 0xAE	; 174
    16b2:	2a 95       	dec	r18
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    16b6:	2b ee       	ldi	r18, 0xEB	; 235

000016b8 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    16b8:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    16ba:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    16bc:	0a c0       	rjmp	.+20     	; 0x16d2 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    16be:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    16c0:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    16c4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    16c6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    16c8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    16ca:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    16cc:	0f be       	out	0x3f, r0	; 63
    return 0
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	08 95       	ret

000016d2 <nocollision>:
nocollision:
    nop
    16d2:	00 00       	nop
    dec tmpreg1
    16d4:	2a 95       	dec	r18
    brne checkcollision
    16d6:	81 f7       	brne	.-32     	; 0x16b8 <checkcollision>

    ldi tmpreg1, 0x01
    16d8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    16da:	30 91 3b 01 	lds	r19, 0x013B
    16de:	20 30       	cpi	r18, 0x00	; 0
    16e0:	29 f0       	breq	.+10     	; 0x16ec <nocollision+0x1a>
    16e2:	00 00       	nop
    16e4:	25 b1       	in	r18, 0x05	; 5
    16e6:	23 2b       	or	r18, r19
    16e8:	25 b9       	out	0x05, r18	; 5
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <nocollision+0x22>
    16ec:	00 00       	nop
    16ee:	00 00       	nop
    16f0:	00 00       	nop
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <nocollision+0x22>
    16f4:	00 00       	nop
    16f6:	00 00       	nop
    16f8:	00 00       	nop
    16fa:	30 95       	com	r19
    16fc:	25 b1       	in	r18, 0x05	; 5
    16fe:	23 23       	and	r18, r19
    1700:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1702:	00 00       	nop
    1704:	24 e5       	ldi	r18, 0x54	; 84
    1706:	2a 95       	dec	r18
    1708:	f1 f7       	brne	.-4      	; 0x1706 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    170a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    170c:	8c e0       	ldi	r24, 0x0C	; 12

0000170e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    170e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1710:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1712:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1714:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1716:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1718:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    171a:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    171c:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    171e:	50 e0       	ldi	r21, 0x00	; 0

00001720 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1720:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1722:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1724:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1726:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1728:	30 91 3b 01 	lds	r19, 0x013B
    172c:	20 30       	cpi	r18, 0x00	; 0
    172e:	29 f0       	breq	.+10     	; 0x173a <sendbit+0x1a>
    1730:	00 00       	nop
    1732:	25 b1       	in	r18, 0x05	; 5
    1734:	23 2b       	or	r18, r19
    1736:	25 b9       	out	0x05, r18	; 5
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <sendbit+0x22>
    173a:	00 00       	nop
    173c:	00 00       	nop
    173e:	00 00       	nop
    1740:	00 c0       	rjmp	.+0      	; 0x1742 <sendbit+0x22>
    1742:	00 00       	nop
    1744:	00 00       	nop
    1746:	00 00       	nop
    1748:	30 95       	com	r19
    174a:	25 b1       	in	r18, 0x05	; 5
    174c:	23 23       	and	r18, r19
    174e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1750:	00 00       	nop
    1752:	21 e5       	ldi	r18, 0x51	; 81
    1754:	2a 95       	dec	r18
    1756:	f1 f7       	brne	.-4      	; 0x1754 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1758:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    175a:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    175c:	9a 95       	dec	r25
    brne sendbit
    175e:	01 f7       	brne	.-64     	; 0x1720 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1760:	8a 95       	dec	r24
    brne sendbyte
    1762:	a9 f6       	brne	.-86     	; 0x170e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1764:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1766:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1768:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    176a:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    176c:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    1770:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1772:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1774:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1776:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1778:	0f be       	out	0x3f, r0	; 63
    return 1
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	08 95       	ret

0000177e <main>:
  */
}

int main()
{
  kilo_init();
    177e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <kilo_init>
  kilo_start(setup, loop);
    1782:	6d eb       	ldi	r22, 0xBD	; 189
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	81 e7       	ldi	r24, 0x71	; 113
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 4c 03 	call	0x698	; 0x698 <kilo_start>
    
  return 0;
}
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	08 95       	ret

00001794 <__divmodhi4>:
    1794:	97 fb       	bst	r25, 7
    1796:	07 2e       	mov	r0, r23
    1798:	16 f4       	brtc	.+4      	; 0x179e <__divmodhi4+0xa>
    179a:	00 94       	com	r0
    179c:	07 d0       	rcall	.+14     	; 0x17ac <__divmodhi4_neg1>
    179e:	77 fd       	sbrc	r23, 7
    17a0:	09 d0       	rcall	.+18     	; 0x17b4 <__divmodhi4_neg2>
    17a2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__udivmodhi4>
    17a6:	07 fc       	sbrc	r0, 7
    17a8:	05 d0       	rcall	.+10     	; 0x17b4 <__divmodhi4_neg2>
    17aa:	3e f4       	brtc	.+14     	; 0x17ba <__divmodhi4_exit>

000017ac <__divmodhi4_neg1>:
    17ac:	90 95       	com	r25
    17ae:	81 95       	neg	r24
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	08 95       	ret

000017b4 <__divmodhi4_neg2>:
    17b4:	70 95       	com	r23
    17b6:	61 95       	neg	r22
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255

000017ba <__divmodhi4_exit>:
    17ba:	08 95       	ret

000017bc <__tablejump2__>:
    17bc:	ee 0f       	add	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	05 90       	lpm	r0, Z+
    17c2:	f4 91       	lpm	r31, Z
    17c4:	e0 2d       	mov	r30, r0
    17c6:	09 94       	ijmp

000017c8 <__umulhisi3>:
    17c8:	a2 9f       	mul	r26, r18
    17ca:	b0 01       	movw	r22, r0
    17cc:	b3 9f       	mul	r27, r19
    17ce:	c0 01       	movw	r24, r0
    17d0:	a3 9f       	mul	r26, r19
    17d2:	70 0d       	add	r23, r0
    17d4:	81 1d       	adc	r24, r1
    17d6:	11 24       	eor	r1, r1
    17d8:	91 1d       	adc	r25, r1
    17da:	b2 9f       	mul	r27, r18
    17dc:	70 0d       	add	r23, r0
    17de:	81 1d       	adc	r24, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	91 1d       	adc	r25, r1
    17e4:	08 95       	ret

000017e6 <__udivmodhi4>:
    17e6:	aa 1b       	sub	r26, r26
    17e8:	bb 1b       	sub	r27, r27
    17ea:	51 e1       	ldi	r21, 0x11	; 17
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <__udivmodhi4_ep>

000017ee <__udivmodhi4_loop>:
    17ee:	aa 1f       	adc	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	a6 17       	cp	r26, r22
    17f4:	b7 07       	cpc	r27, r23
    17f6:	10 f0       	brcs	.+4      	; 0x17fc <__udivmodhi4_ep>
    17f8:	a6 1b       	sub	r26, r22
    17fa:	b7 0b       	sbc	r27, r23

000017fc <__udivmodhi4_ep>:
    17fc:	88 1f       	adc	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	5a 95       	dec	r21
    1802:	a9 f7       	brne	.-22     	; 0x17ee <__udivmodhi4_loop>
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	08 95       	ret

0000180e <__subsf3>:
    180e:	50 58       	subi	r21, 0x80	; 128

00001810 <__addsf3>:
    1810:	bb 27       	eor	r27, r27
    1812:	aa 27       	eor	r26, r26
    1814:	0e 94 1f 0c 	call	0x183e	; 0x183e <__addsf3x>
    1818:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_round>
    181c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fp_pscA>
    1820:	38 f0       	brcs	.+14     	; 0x1830 <__addsf3+0x20>
    1822:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__fp_pscB>
    1826:	20 f0       	brcs	.+8      	; 0x1830 <__addsf3+0x20>
    1828:	39 f4       	brne	.+14     	; 0x1838 <__addsf3+0x28>
    182a:	9f 3f       	cpi	r25, 0xFF	; 255
    182c:	19 f4       	brne	.+6      	; 0x1834 <__addsf3+0x24>
    182e:	26 f4       	brtc	.+8      	; 0x1838 <__addsf3+0x28>
    1830:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__fp_nan>
    1834:	0e f4       	brtc	.+2      	; 0x1838 <__addsf3+0x28>
    1836:	e0 95       	com	r30
    1838:	e7 fb       	bst	r30, 7
    183a:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_inf>

0000183e <__addsf3x>:
    183e:	e9 2f       	mov	r30, r25
    1840:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fp_split3>
    1844:	58 f3       	brcs	.-42     	; 0x181c <__addsf3+0xc>
    1846:	ba 17       	cp	r27, r26
    1848:	62 07       	cpc	r22, r18
    184a:	73 07       	cpc	r23, r19
    184c:	84 07       	cpc	r24, r20
    184e:	95 07       	cpc	r25, r21
    1850:	20 f0       	brcs	.+8      	; 0x185a <__addsf3x+0x1c>
    1852:	79 f4       	brne	.+30     	; 0x1872 <__addsf3x+0x34>
    1854:	a6 f5       	brtc	.+104    	; 0x18be <__addsf3x+0x80>
    1856:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__fp_zero>
    185a:	0e f4       	brtc	.+2      	; 0x185e <__addsf3x+0x20>
    185c:	e0 95       	com	r30
    185e:	0b 2e       	mov	r0, r27
    1860:	ba 2f       	mov	r27, r26
    1862:	a0 2d       	mov	r26, r0
    1864:	0b 01       	movw	r0, r22
    1866:	b9 01       	movw	r22, r18
    1868:	90 01       	movw	r18, r0
    186a:	0c 01       	movw	r0, r24
    186c:	ca 01       	movw	r24, r20
    186e:	a0 01       	movw	r20, r0
    1870:	11 24       	eor	r1, r1
    1872:	ff 27       	eor	r31, r31
    1874:	59 1b       	sub	r21, r25
    1876:	99 f0       	breq	.+38     	; 0x189e <__addsf3x+0x60>
    1878:	59 3f       	cpi	r21, 0xF9	; 249
    187a:	50 f4       	brcc	.+20     	; 0x1890 <__addsf3x+0x52>
    187c:	50 3e       	cpi	r21, 0xE0	; 224
    187e:	68 f1       	brcs	.+90     	; 0x18da <__addsf3x+0x9c>
    1880:	1a 16       	cp	r1, r26
    1882:	f0 40       	sbci	r31, 0x00	; 0
    1884:	a2 2f       	mov	r26, r18
    1886:	23 2f       	mov	r18, r19
    1888:	34 2f       	mov	r19, r20
    188a:	44 27       	eor	r20, r20
    188c:	58 5f       	subi	r21, 0xF8	; 248
    188e:	f3 cf       	rjmp	.-26     	; 0x1876 <__addsf3x+0x38>
    1890:	46 95       	lsr	r20
    1892:	37 95       	ror	r19
    1894:	27 95       	ror	r18
    1896:	a7 95       	ror	r26
    1898:	f0 40       	sbci	r31, 0x00	; 0
    189a:	53 95       	inc	r21
    189c:	c9 f7       	brne	.-14     	; 0x1890 <__addsf3x+0x52>
    189e:	7e f4       	brtc	.+30     	; 0x18be <__addsf3x+0x80>
    18a0:	1f 16       	cp	r1, r31
    18a2:	ba 0b       	sbc	r27, r26
    18a4:	62 0b       	sbc	r22, r18
    18a6:	73 0b       	sbc	r23, r19
    18a8:	84 0b       	sbc	r24, r20
    18aa:	ba f0       	brmi	.+46     	; 0x18da <__addsf3x+0x9c>
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	a1 f0       	breq	.+40     	; 0x18d8 <__addsf3x+0x9a>
    18b0:	ff 0f       	add	r31, r31
    18b2:	bb 1f       	adc	r27, r27
    18b4:	66 1f       	adc	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	c2 f7       	brpl	.-16     	; 0x18ac <__addsf3x+0x6e>
    18bc:	0e c0       	rjmp	.+28     	; 0x18da <__addsf3x+0x9c>
    18be:	ba 0f       	add	r27, r26
    18c0:	62 1f       	adc	r22, r18
    18c2:	73 1f       	adc	r23, r19
    18c4:	84 1f       	adc	r24, r20
    18c6:	48 f4       	brcc	.+18     	; 0x18da <__addsf3x+0x9c>
    18c8:	87 95       	ror	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	b7 95       	ror	r27
    18d0:	f7 95       	ror	r31
    18d2:	9e 3f       	cpi	r25, 0xFE	; 254
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <__addsf3x+0x9a>
    18d6:	b0 cf       	rjmp	.-160    	; 0x1838 <__addsf3+0x28>
    18d8:	93 95       	inc	r25
    18da:	88 0f       	add	r24, r24
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <__addsf3x+0xa2>
    18de:	99 27       	eor	r25, r25
    18e0:	ee 0f       	add	r30, r30
    18e2:	97 95       	ror	r25
    18e4:	87 95       	ror	r24
    18e6:	08 95       	ret

000018e8 <__divsf3>:
    18e8:	0e 94 88 0c 	call	0x1910	; 0x1910 <__divsf3x>
    18ec:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_round>
    18f0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__fp_pscB>
    18f4:	58 f0       	brcs	.+22     	; 0x190c <__divsf3+0x24>
    18f6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fp_pscA>
    18fa:	40 f0       	brcs	.+16     	; 0x190c <__divsf3+0x24>
    18fc:	29 f4       	brne	.+10     	; 0x1908 <__divsf3+0x20>
    18fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1900:	29 f0       	breq	.+10     	; 0x190c <__divsf3+0x24>
    1902:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_inf>
    1906:	51 11       	cpse	r21, r1
    1908:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__fp_szero>
    190c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__fp_nan>

00001910 <__divsf3x>:
    1910:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fp_split3>
    1914:	68 f3       	brcs	.-38     	; 0x18f0 <__divsf3+0x8>

00001916 <__divsf3_pse>:
    1916:	99 23       	and	r25, r25
    1918:	b1 f3       	breq	.-20     	; 0x1906 <__divsf3+0x1e>
    191a:	55 23       	and	r21, r21
    191c:	91 f3       	breq	.-28     	; 0x1902 <__divsf3+0x1a>
    191e:	95 1b       	sub	r25, r21
    1920:	55 0b       	sbc	r21, r21
    1922:	bb 27       	eor	r27, r27
    1924:	aa 27       	eor	r26, r26
    1926:	62 17       	cp	r22, r18
    1928:	73 07       	cpc	r23, r19
    192a:	84 07       	cpc	r24, r20
    192c:	38 f0       	brcs	.+14     	; 0x193c <__divsf3_pse+0x26>
    192e:	9f 5f       	subi	r25, 0xFF	; 255
    1930:	5f 4f       	sbci	r21, 0xFF	; 255
    1932:	22 0f       	add	r18, r18
    1934:	33 1f       	adc	r19, r19
    1936:	44 1f       	adc	r20, r20
    1938:	aa 1f       	adc	r26, r26
    193a:	a9 f3       	breq	.-22     	; 0x1926 <__divsf3_pse+0x10>
    193c:	35 d0       	rcall	.+106    	; 0x19a8 <__divsf3_pse+0x92>
    193e:	0e 2e       	mov	r0, r30
    1940:	3a f0       	brmi	.+14     	; 0x1950 <__divsf3_pse+0x3a>
    1942:	e0 e8       	ldi	r30, 0x80	; 128
    1944:	32 d0       	rcall	.+100    	; 0x19aa <__divsf3_pse+0x94>
    1946:	91 50       	subi	r25, 0x01	; 1
    1948:	50 40       	sbci	r21, 0x00	; 0
    194a:	e6 95       	lsr	r30
    194c:	00 1c       	adc	r0, r0
    194e:	ca f7       	brpl	.-14     	; 0x1942 <__divsf3_pse+0x2c>
    1950:	2b d0       	rcall	.+86     	; 0x19a8 <__divsf3_pse+0x92>
    1952:	fe 2f       	mov	r31, r30
    1954:	29 d0       	rcall	.+82     	; 0x19a8 <__divsf3_pse+0x92>
    1956:	66 0f       	add	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	88 1f       	adc	r24, r24
    195c:	bb 1f       	adc	r27, r27
    195e:	26 17       	cp	r18, r22
    1960:	37 07       	cpc	r19, r23
    1962:	48 07       	cpc	r20, r24
    1964:	ab 07       	cpc	r26, r27
    1966:	b0 e8       	ldi	r27, 0x80	; 128
    1968:	09 f0       	breq	.+2      	; 0x196c <__divsf3_pse+0x56>
    196a:	bb 0b       	sbc	r27, r27
    196c:	80 2d       	mov	r24, r0
    196e:	bf 01       	movw	r22, r30
    1970:	ff 27       	eor	r31, r31
    1972:	93 58       	subi	r25, 0x83	; 131
    1974:	5f 4f       	sbci	r21, 0xFF	; 255
    1976:	3a f0       	brmi	.+14     	; 0x1986 <__divsf3_pse+0x70>
    1978:	9e 3f       	cpi	r25, 0xFE	; 254
    197a:	51 05       	cpc	r21, r1
    197c:	78 f0       	brcs	.+30     	; 0x199c <__divsf3_pse+0x86>
    197e:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_inf>
    1982:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__fp_szero>
    1986:	5f 3f       	cpi	r21, 0xFF	; 255
    1988:	e4 f3       	brlt	.-8      	; 0x1982 <__divsf3_pse+0x6c>
    198a:	98 3e       	cpi	r25, 0xE8	; 232
    198c:	d4 f3       	brlt	.-12     	; 0x1982 <__divsf3_pse+0x6c>
    198e:	86 95       	lsr	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	b7 95       	ror	r27
    1996:	f7 95       	ror	r31
    1998:	9f 5f       	subi	r25, 0xFF	; 255
    199a:	c9 f7       	brne	.-14     	; 0x198e <__divsf3_pse+0x78>
    199c:	88 0f       	add	r24, r24
    199e:	91 1d       	adc	r25, r1
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	97 f9       	bld	r25, 7
    19a6:	08 95       	ret
    19a8:	e1 e0       	ldi	r30, 0x01	; 1
    19aa:	66 0f       	add	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	bb 1f       	adc	r27, r27
    19b2:	62 17       	cp	r22, r18
    19b4:	73 07       	cpc	r23, r19
    19b6:	84 07       	cpc	r24, r20
    19b8:	ba 07       	cpc	r27, r26
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__divsf3_pse+0xae>
    19bc:	62 1b       	sub	r22, r18
    19be:	73 0b       	sbc	r23, r19
    19c0:	84 0b       	sbc	r24, r20
    19c2:	ba 0b       	sbc	r27, r26
    19c4:	ee 1f       	adc	r30, r30
    19c6:	88 f7       	brcc	.-30     	; 0x19aa <__divsf3_pse+0x94>
    19c8:	e0 95       	com	r30
    19ca:	08 95       	ret

000019cc <__fixsfsi>:
    19cc:	0e 94 ed 0c 	call	0x19da	; 0x19da <__fixunssfsi>
    19d0:	68 94       	set
    19d2:	b1 11       	cpse	r27, r1
    19d4:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__fp_szero>
    19d8:	08 95       	ret

000019da <__fixunssfsi>:
    19da:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__fp_splitA>
    19de:	88 f0       	brcs	.+34     	; 0x1a02 <__fixunssfsi+0x28>
    19e0:	9f 57       	subi	r25, 0x7F	; 127
    19e2:	98 f0       	brcs	.+38     	; 0x1a0a <__fixunssfsi+0x30>
    19e4:	b9 2f       	mov	r27, r25
    19e6:	99 27       	eor	r25, r25
    19e8:	b7 51       	subi	r27, 0x17	; 23
    19ea:	b0 f0       	brcs	.+44     	; 0x1a18 <__fixunssfsi+0x3e>
    19ec:	e1 f0       	breq	.+56     	; 0x1a26 <__fixunssfsi+0x4c>
    19ee:	66 0f       	add	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	1a f0       	brmi	.+6      	; 0x19fe <__fixunssfsi+0x24>
    19f8:	ba 95       	dec	r27
    19fa:	c9 f7       	brne	.-14     	; 0x19ee <__fixunssfsi+0x14>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <__fixunssfsi+0x4c>
    19fe:	b1 30       	cpi	r27, 0x01	; 1
    1a00:	91 f0       	breq	.+36     	; 0x1a26 <__fixunssfsi+0x4c>
    1a02:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__fp_zero>
    1a06:	b1 e0       	ldi	r27, 0x01	; 1
    1a08:	08 95       	ret
    1a0a:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__fp_zero>
    1a0e:	67 2f       	mov	r22, r23
    1a10:	78 2f       	mov	r23, r24
    1a12:	88 27       	eor	r24, r24
    1a14:	b8 5f       	subi	r27, 0xF8	; 248
    1a16:	39 f0       	breq	.+14     	; 0x1a26 <__fixunssfsi+0x4c>
    1a18:	b9 3f       	cpi	r27, 0xF9	; 249
    1a1a:	cc f3       	brlt	.-14     	; 0x1a0e <__fixunssfsi+0x34>
    1a1c:	86 95       	lsr	r24
    1a1e:	77 95       	ror	r23
    1a20:	67 95       	ror	r22
    1a22:	b3 95       	inc	r27
    1a24:	d9 f7       	brne	.-10     	; 0x1a1c <__fixunssfsi+0x42>
    1a26:	3e f4       	brtc	.+14     	; 0x1a36 <__fixunssfsi+0x5c>
    1a28:	90 95       	com	r25
    1a2a:	80 95       	com	r24
    1a2c:	70 95       	com	r23
    1a2e:	61 95       	neg	r22
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	08 95       	ret

00001a38 <__floatunsisf>:
    1a38:	e8 94       	clt
    1a3a:	09 c0       	rjmp	.+18     	; 0x1a4e <__floatsisf+0x12>

00001a3c <__floatsisf>:
    1a3c:	97 fb       	bst	r25, 7
    1a3e:	3e f4       	brtc	.+14     	; 0x1a4e <__floatsisf+0x12>
    1a40:	90 95       	com	r25
    1a42:	80 95       	com	r24
    1a44:	70 95       	com	r23
    1a46:	61 95       	neg	r22
    1a48:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	99 23       	and	r25, r25
    1a50:	a9 f0       	breq	.+42     	; 0x1a7c <__floatsisf+0x40>
    1a52:	f9 2f       	mov	r31, r25
    1a54:	96 e9       	ldi	r25, 0x96	; 150
    1a56:	bb 27       	eor	r27, r27
    1a58:	93 95       	inc	r25
    1a5a:	f6 95       	lsr	r31
    1a5c:	87 95       	ror	r24
    1a5e:	77 95       	ror	r23
    1a60:	67 95       	ror	r22
    1a62:	b7 95       	ror	r27
    1a64:	f1 11       	cpse	r31, r1
    1a66:	f8 cf       	rjmp	.-16     	; 0x1a58 <__floatsisf+0x1c>
    1a68:	fa f4       	brpl	.+62     	; 0x1aa8 <__floatsisf+0x6c>
    1a6a:	bb 0f       	add	r27, r27
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <__floatsisf+0x36>
    1a6e:	60 ff       	sbrs	r22, 0
    1a70:	1b c0       	rjmp	.+54     	; 0x1aa8 <__floatsisf+0x6c>
    1a72:	6f 5f       	subi	r22, 0xFF	; 255
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	8f 4f       	sbci	r24, 0xFF	; 255
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	16 c0       	rjmp	.+44     	; 0x1aa8 <__floatsisf+0x6c>
    1a7c:	88 23       	and	r24, r24
    1a7e:	11 f0       	breq	.+4      	; 0x1a84 <__floatsisf+0x48>
    1a80:	96 e9       	ldi	r25, 0x96	; 150
    1a82:	11 c0       	rjmp	.+34     	; 0x1aa6 <__floatsisf+0x6a>
    1a84:	77 23       	and	r23, r23
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <__floatsisf+0x54>
    1a88:	9e e8       	ldi	r25, 0x8E	; 142
    1a8a:	87 2f       	mov	r24, r23
    1a8c:	76 2f       	mov	r23, r22
    1a8e:	05 c0       	rjmp	.+10     	; 0x1a9a <__floatsisf+0x5e>
    1a90:	66 23       	and	r22, r22
    1a92:	71 f0       	breq	.+28     	; 0x1ab0 <__floatsisf+0x74>
    1a94:	96 e8       	ldi	r25, 0x86	; 134
    1a96:	86 2f       	mov	r24, r22
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	2a f0       	brmi	.+10     	; 0x1aa8 <__floatsisf+0x6c>
    1a9e:	9a 95       	dec	r25
    1aa0:	66 0f       	add	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	88 1f       	adc	r24, r24
    1aa6:	da f7       	brpl	.-10     	; 0x1a9e <__floatsisf+0x62>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	96 95       	lsr	r25
    1aac:	87 95       	ror	r24
    1aae:	97 f9       	bld	r25, 7
    1ab0:	08 95       	ret

00001ab2 <__fp_inf>:
    1ab2:	97 f9       	bld	r25, 7
    1ab4:	9f 67       	ori	r25, 0x7F	; 127
    1ab6:	80 e8       	ldi	r24, 0x80	; 128
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	08 95       	ret

00001abe <__fp_nan>:
    1abe:	9f ef       	ldi	r25, 0xFF	; 255
    1ac0:	80 ec       	ldi	r24, 0xC0	; 192
    1ac2:	08 95       	ret

00001ac4 <__fp_pscA>:
    1ac4:	00 24       	eor	r0, r0
    1ac6:	0a 94       	dec	r0
    1ac8:	16 16       	cp	r1, r22
    1aca:	17 06       	cpc	r1, r23
    1acc:	18 06       	cpc	r1, r24
    1ace:	09 06       	cpc	r0, r25
    1ad0:	08 95       	ret

00001ad2 <__fp_pscB>:
    1ad2:	00 24       	eor	r0, r0
    1ad4:	0a 94       	dec	r0
    1ad6:	12 16       	cp	r1, r18
    1ad8:	13 06       	cpc	r1, r19
    1ada:	14 06       	cpc	r1, r20
    1adc:	05 06       	cpc	r0, r21
    1ade:	08 95       	ret

00001ae0 <__fp_round>:
    1ae0:	09 2e       	mov	r0, r25
    1ae2:	03 94       	inc	r0
    1ae4:	00 0c       	add	r0, r0
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <__fp_round+0xc>
    1ae8:	88 23       	and	r24, r24
    1aea:	52 f0       	brmi	.+20     	; 0x1b00 <__fp_round+0x20>
    1aec:	bb 0f       	add	r27, r27
    1aee:	40 f4       	brcc	.+16     	; 0x1b00 <__fp_round+0x20>
    1af0:	bf 2b       	or	r27, r31
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <__fp_round+0x18>
    1af4:	60 ff       	sbrs	r22, 0
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <__fp_round+0x20>
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	8f 4f       	sbci	r24, 0xFF	; 255
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	08 95       	ret

00001b02 <__fp_split3>:
    1b02:	57 fd       	sbrc	r21, 7
    1b04:	90 58       	subi	r25, 0x80	; 128
    1b06:	44 0f       	add	r20, r20
    1b08:	55 1f       	adc	r21, r21
    1b0a:	59 f0       	breq	.+22     	; 0x1b22 <__fp_splitA+0x10>
    1b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0e:	71 f0       	breq	.+28     	; 0x1b2c <__fp_splitA+0x1a>
    1b10:	47 95       	ror	r20

00001b12 <__fp_splitA>:
    1b12:	88 0f       	add	r24, r24
    1b14:	97 fb       	bst	r25, 7
    1b16:	99 1f       	adc	r25, r25
    1b18:	61 f0       	breq	.+24     	; 0x1b32 <__fp_splitA+0x20>
    1b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b1c:	79 f0       	breq	.+30     	; 0x1b3c <__fp_splitA+0x2a>
    1b1e:	87 95       	ror	r24
    1b20:	08 95       	ret
    1b22:	12 16       	cp	r1, r18
    1b24:	13 06       	cpc	r1, r19
    1b26:	14 06       	cpc	r1, r20
    1b28:	55 1f       	adc	r21, r21
    1b2a:	f2 cf       	rjmp	.-28     	; 0x1b10 <__fp_split3+0xe>
    1b2c:	46 95       	lsr	r20
    1b2e:	f1 df       	rcall	.-30     	; 0x1b12 <__fp_splitA>
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <__fp_splitA+0x30>
    1b32:	16 16       	cp	r1, r22
    1b34:	17 06       	cpc	r1, r23
    1b36:	18 06       	cpc	r1, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	f1 cf       	rjmp	.-30     	; 0x1b1e <__fp_splitA+0xc>
    1b3c:	86 95       	lsr	r24
    1b3e:	71 05       	cpc	r23, r1
    1b40:	61 05       	cpc	r22, r1
    1b42:	08 94       	sec
    1b44:	08 95       	ret

00001b46 <__fp_zero>:
    1b46:	e8 94       	clt

00001b48 <__fp_szero>:
    1b48:	bb 27       	eor	r27, r27
    1b4a:	66 27       	eor	r22, r22
    1b4c:	77 27       	eor	r23, r23
    1b4e:	cb 01       	movw	r24, r22
    1b50:	97 f9       	bld	r25, 7
    1b52:	08 95       	ret

00001b54 <__mulsf3>:
    1b54:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__mulsf3x>
    1b58:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__fp_round>
    1b5c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fp_pscA>
    1b60:	38 f0       	brcs	.+14     	; 0x1b70 <__mulsf3+0x1c>
    1b62:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__fp_pscB>
    1b66:	20 f0       	brcs	.+8      	; 0x1b70 <__mulsf3+0x1c>
    1b68:	95 23       	and	r25, r21
    1b6a:	11 f0       	breq	.+4      	; 0x1b70 <__mulsf3+0x1c>
    1b6c:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_inf>
    1b70:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__fp_nan>
    1b74:	11 24       	eor	r1, r1
    1b76:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__fp_szero>

00001b7a <__mulsf3x>:
    1b7a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__fp_split3>
    1b7e:	70 f3       	brcs	.-36     	; 0x1b5c <__mulsf3+0x8>

00001b80 <__mulsf3_pse>:
    1b80:	95 9f       	mul	r25, r21
    1b82:	c1 f3       	breq	.-16     	; 0x1b74 <__mulsf3+0x20>
    1b84:	95 0f       	add	r25, r21
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	55 1f       	adc	r21, r21
    1b8a:	62 9f       	mul	r22, r18
    1b8c:	f0 01       	movw	r30, r0
    1b8e:	72 9f       	mul	r23, r18
    1b90:	bb 27       	eor	r27, r27
    1b92:	f0 0d       	add	r31, r0
    1b94:	b1 1d       	adc	r27, r1
    1b96:	63 9f       	mul	r22, r19
    1b98:	aa 27       	eor	r26, r26
    1b9a:	f0 0d       	add	r31, r0
    1b9c:	b1 1d       	adc	r27, r1
    1b9e:	aa 1f       	adc	r26, r26
    1ba0:	64 9f       	mul	r22, r20
    1ba2:	66 27       	eor	r22, r22
    1ba4:	b0 0d       	add	r27, r0
    1ba6:	a1 1d       	adc	r26, r1
    1ba8:	66 1f       	adc	r22, r22
    1baa:	82 9f       	mul	r24, r18
    1bac:	22 27       	eor	r18, r18
    1bae:	b0 0d       	add	r27, r0
    1bb0:	a1 1d       	adc	r26, r1
    1bb2:	62 1f       	adc	r22, r18
    1bb4:	73 9f       	mul	r23, r19
    1bb6:	b0 0d       	add	r27, r0
    1bb8:	a1 1d       	adc	r26, r1
    1bba:	62 1f       	adc	r22, r18
    1bbc:	83 9f       	mul	r24, r19
    1bbe:	a0 0d       	add	r26, r0
    1bc0:	61 1d       	adc	r22, r1
    1bc2:	22 1f       	adc	r18, r18
    1bc4:	74 9f       	mul	r23, r20
    1bc6:	33 27       	eor	r19, r19
    1bc8:	a0 0d       	add	r26, r0
    1bca:	61 1d       	adc	r22, r1
    1bcc:	23 1f       	adc	r18, r19
    1bce:	84 9f       	mul	r24, r20
    1bd0:	60 0d       	add	r22, r0
    1bd2:	21 1d       	adc	r18, r1
    1bd4:	82 2f       	mov	r24, r18
    1bd6:	76 2f       	mov	r23, r22
    1bd8:	6a 2f       	mov	r22, r26
    1bda:	11 24       	eor	r1, r1
    1bdc:	9f 57       	subi	r25, 0x7F	; 127
    1bde:	50 40       	sbci	r21, 0x00	; 0
    1be0:	9a f0       	brmi	.+38     	; 0x1c08 <__mulsf3_pse+0x88>
    1be2:	f1 f0       	breq	.+60     	; 0x1c20 <__mulsf3_pse+0xa0>
    1be4:	88 23       	and	r24, r24
    1be6:	4a f0       	brmi	.+18     	; 0x1bfa <__mulsf3_pse+0x7a>
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	bb 1f       	adc	r27, r27
    1bee:	66 1f       	adc	r22, r22
    1bf0:	77 1f       	adc	r23, r23
    1bf2:	88 1f       	adc	r24, r24
    1bf4:	91 50       	subi	r25, 0x01	; 1
    1bf6:	50 40       	sbci	r21, 0x00	; 0
    1bf8:	a9 f7       	brne	.-22     	; 0x1be4 <__mulsf3_pse+0x64>
    1bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	80 f0       	brcs	.+32     	; 0x1c20 <__mulsf3_pse+0xa0>
    1c00:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_inf>
    1c04:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__fp_szero>
    1c08:	5f 3f       	cpi	r21, 0xFF	; 255
    1c0a:	e4 f3       	brlt	.-8      	; 0x1c04 <__mulsf3_pse+0x84>
    1c0c:	98 3e       	cpi	r25, 0xE8	; 232
    1c0e:	d4 f3       	brlt	.-12     	; 0x1c04 <__mulsf3_pse+0x84>
    1c10:	86 95       	lsr	r24
    1c12:	77 95       	ror	r23
    1c14:	67 95       	ror	r22
    1c16:	b7 95       	ror	r27
    1c18:	f7 95       	ror	r31
    1c1a:	e7 95       	ror	r30
    1c1c:	9f 5f       	subi	r25, 0xFF	; 255
    1c1e:	c1 f7       	brne	.-16     	; 0x1c10 <__mulsf3_pse+0x90>
    1c20:	fe 2b       	or	r31, r30
    1c22:	88 0f       	add	r24, r24
    1c24:	91 1d       	adc	r25, r1
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	97 f9       	bld	r25, 7
    1c2c:	08 95       	ret

00001c2e <do_rand>:
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	ec 01       	movw	r28, r24
    1c44:	68 81       	ld	r22, Y
    1c46:	79 81       	ldd	r23, Y+1	; 0x01
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	61 15       	cp	r22, r1
    1c4e:	71 05       	cpc	r23, r1
    1c50:	81 05       	cpc	r24, r1
    1c52:	91 05       	cpc	r25, r1
    1c54:	21 f4       	brne	.+8      	; 0x1c5e <do_rand+0x30>
    1c56:	64 e2       	ldi	r22, 0x24	; 36
    1c58:	79 ed       	ldi	r23, 0xD9	; 217
    1c5a:	8b e5       	ldi	r24, 0x5B	; 91
    1c5c:	97 e0       	ldi	r25, 0x07	; 7
    1c5e:	2d e1       	ldi	r18, 0x1D	; 29
    1c60:	33 ef       	ldi	r19, 0xF3	; 243
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__divmodsi4>
    1c6a:	49 01       	movw	r8, r18
    1c6c:	5a 01       	movw	r10, r20
    1c6e:	9b 01       	movw	r18, r22
    1c70:	ac 01       	movw	r20, r24
    1c72:	a7 ea       	ldi	r26, 0xA7	; 167
    1c74:	b1 e4       	ldi	r27, 0x41	; 65
    1c76:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__muluhisi3>
    1c7a:	6b 01       	movw	r12, r22
    1c7c:	7c 01       	movw	r14, r24
    1c7e:	ac ee       	ldi	r26, 0xEC	; 236
    1c80:	b4 ef       	ldi	r27, 0xF4	; 244
    1c82:	a5 01       	movw	r20, r10
    1c84:	94 01       	movw	r18, r8
    1c86:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__mulohisi3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8c 0d       	add	r24, r12
    1c90:	9d 1d       	adc	r25, r13
    1c92:	ae 1d       	adc	r26, r14
    1c94:	bf 1d       	adc	r27, r15
    1c96:	b7 ff       	sbrs	r27, 7
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <do_rand+0x72>
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	a1 09       	sbc	r26, r1
    1c9e:	b0 48       	sbci	r27, 0x80	; 128
    1ca0:	88 83       	st	Y, r24
    1ca2:	99 83       	std	Y+1, r25	; 0x01
    1ca4:	aa 83       	std	Y+2, r26	; 0x02
    1ca6:	bb 83       	std	Y+3, r27	; 0x03
    1ca8:	9f 77       	andi	r25, 0x7F	; 127
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	af 90       	pop	r10
    1cba:	9f 90       	pop	r9
    1cbc:	8f 90       	pop	r8
    1cbe:	08 95       	ret

00001cc0 <rand_r>:
    1cc0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <do_rand>
    1cc4:	08 95       	ret

00001cc6 <rand>:
    1cc6:	87 e0       	ldi	r24, 0x07	; 7
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
    1cca:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <do_rand>
    1cce:	08 95       	ret

00001cd0 <srand>:
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	80 93 07 01 	sts	0x0107, r24
    1cd8:	90 93 08 01 	sts	0x0108, r25
    1cdc:	a0 93 09 01 	sts	0x0109, r26
    1ce0:	b0 93 0a 01 	sts	0x010A, r27
    1ce4:	08 95       	ret

00001ce6 <eeprom_read_byte>:
    1ce6:	f9 99       	sbic	0x1f, 1	; 31
    1ce8:	fe cf       	rjmp	.-4      	; 0x1ce6 <eeprom_read_byte>
    1cea:	92 bd       	out	0x22, r25	; 34
    1cec:	81 bd       	out	0x21, r24	; 33
    1cee:	f8 9a       	sbi	0x1f, 0	; 31
    1cf0:	99 27       	eor	r25, r25
    1cf2:	80 b5       	in	r24, 0x20	; 32
    1cf4:	08 95       	ret

00001cf6 <eeprom_write_byte>:
    1cf6:	26 2f       	mov	r18, r22

00001cf8 <eeprom_write_r18>:
    1cf8:	f9 99       	sbic	0x1f, 1	; 31
    1cfa:	fe cf       	rjmp	.-4      	; 0x1cf8 <eeprom_write_r18>
    1cfc:	1f ba       	out	0x1f, r1	; 31
    1cfe:	92 bd       	out	0x22, r25	; 34
    1d00:	81 bd       	out	0x21, r24	; 33
    1d02:	20 bd       	out	0x20, r18	; 32
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	fa 9a       	sbi	0x1f, 2	; 31
    1d0a:	f9 9a       	sbi	0x1f, 1	; 31
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	08 95       	ret

00001d12 <__divmodsi4>:
    1d12:	05 2e       	mov	r0, r21
    1d14:	97 fb       	bst	r25, 7
    1d16:	1e f4       	brtc	.+6      	; 0x1d1e <__divmodsi4+0xc>
    1d18:	00 94       	com	r0
    1d1a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__negsi2>
    1d1e:	57 fd       	sbrc	r21, 7
    1d20:	07 d0       	rcall	.+14     	; 0x1d30 <__divmodsi4_neg2>
    1d22:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__udivmodsi4>
    1d26:	07 fc       	sbrc	r0, 7
    1d28:	03 d0       	rcall	.+6      	; 0x1d30 <__divmodsi4_neg2>
    1d2a:	4e f4       	brtc	.+18     	; 0x1d3e <__divmodsi4_exit>
    1d2c:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__negsi2>

00001d30 <__divmodsi4_neg2>:
    1d30:	50 95       	com	r21
    1d32:	40 95       	com	r20
    1d34:	30 95       	com	r19
    1d36:	21 95       	neg	r18
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d3c:	5f 4f       	sbci	r21, 0xFF	; 255

00001d3e <__divmodsi4_exit>:
    1d3e:	08 95       	ret

00001d40 <__negsi2>:
    1d40:	90 95       	com	r25
    1d42:	80 95       	com	r24
    1d44:	70 95       	com	r23
    1d46:	61 95       	neg	r22
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	08 95       	ret

00001d50 <__muluhisi3>:
    1d50:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__umulhisi3>
    1d54:	a5 9f       	mul	r26, r21
    1d56:	90 0d       	add	r25, r0
    1d58:	b4 9f       	mul	r27, r20
    1d5a:	90 0d       	add	r25, r0
    1d5c:	a4 9f       	mul	r26, r20
    1d5e:	80 0d       	add	r24, r0
    1d60:	91 1d       	adc	r25, r1
    1d62:	11 24       	eor	r1, r1
    1d64:	08 95       	ret

00001d66 <__mulshisi3>:
    1d66:	b7 ff       	sbrs	r27, 7
    1d68:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__muluhisi3>

00001d6c <__mulohisi3>:
    1d6c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__muluhisi3>
    1d70:	82 1b       	sub	r24, r18
    1d72:	93 0b       	sbc	r25, r19
    1d74:	08 95       	ret

00001d76 <__udivmodsi4>:
    1d76:	a1 e2       	ldi	r26, 0x21	; 33
    1d78:	1a 2e       	mov	r1, r26
    1d7a:	aa 1b       	sub	r26, r26
    1d7c:	bb 1b       	sub	r27, r27
    1d7e:	fd 01       	movw	r30, r26
    1d80:	0d c0       	rjmp	.+26     	; 0x1d9c <__udivmodsi4_ep>

00001d82 <__udivmodsi4_loop>:
    1d82:	aa 1f       	adc	r26, r26
    1d84:	bb 1f       	adc	r27, r27
    1d86:	ee 1f       	adc	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	a2 17       	cp	r26, r18
    1d8c:	b3 07       	cpc	r27, r19
    1d8e:	e4 07       	cpc	r30, r20
    1d90:	f5 07       	cpc	r31, r21
    1d92:	20 f0       	brcs	.+8      	; 0x1d9c <__udivmodsi4_ep>
    1d94:	a2 1b       	sub	r26, r18
    1d96:	b3 0b       	sbc	r27, r19
    1d98:	e4 0b       	sbc	r30, r20
    1d9a:	f5 0b       	sbc	r31, r21

00001d9c <__udivmodsi4_ep>:
    1d9c:	66 1f       	adc	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	88 1f       	adc	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	1a 94       	dec	r1
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <__udivmodsi4_loop>
    1da8:	60 95       	com	r22
    1daa:	70 95       	com	r23
    1dac:	80 95       	com	r24
    1dae:	90 95       	com	r25
    1db0:	9b 01       	movw	r18, r22
    1db2:	ac 01       	movw	r20, r24
    1db4:	bd 01       	movw	r22, r26
    1db6:	cf 01       	movw	r24, r30
    1db8:	08 95       	ret

00001dba <_exit>:
    1dba:	f8 94       	cli

00001dbc <__stop_program>:
    1dbc:	ff cf       	rjmp	.-2      	; 0x1dbc <__stop_program>
