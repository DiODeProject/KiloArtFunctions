
build/test.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	4f 03       	fmul	r20, r23
      6a:	cb 03       	fmulsu	r20, r19
      6c:	23 03       	mulsu	r18, r19
      6e:	1a 03       	fmul	r17, r18
      70:	20 03       	mulsu	r18, r16
      72:	ad 03       	fmulsu	r18, r21
      74:	a2 03       	fmuls	r18, r18
      76:	2d 0a       	sbc	r2, r29
      78:	0a 09       	sbc	r16, r10
      7a:	0a 09       	sbc	r16, r10
      7c:	2a 0a       	sbc	r2, r26
      7e:	36 0a       	sbc	r3, r22
      80:	26 0a       	sbc	r2, r22
      82:	3d 0a       	sbc	r3, r29
      84:	39 0a       	sbc	r3, r25
      86:	41 0a       	sbc	r4, r17
      88:	f9 09       	sbc	r31, r9
      8a:	cb 09       	sbc	r28, r11

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 e2       	ldi	r30, 0x26	; 38
      b8:	fd e1       	ldi	r31, 0x1D	; 29
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a8 37       	cpi	r26, 0x78	; 120
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <main>
      da:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
  delay(150);
}

void setup()
{
  last_state_update = kilo_ticks;
      e2:	80 91 3d 01 	lds	r24, 0x013D
      e6:	90 91 3e 01 	lds	r25, 0x013E
      ea:	a0 91 3f 01 	lds	r26, 0x013F
      ee:	b0 91 40 01 	lds	r27, 0x0140
      f2:	80 93 16 01 	sts	0x0116, r24
      f6:	90 93 17 01 	sts	0x0117, r25
      fa:	a0 93 18 01 	sts	0x0118, r26
      fe:	b0 93 19 01 	sts	0x0119, r27
     102:	08 95       	ret

00000104 <loop>:
    }
}

void flash_led(){
    
        set_color(RGB(0, 0, 1));
     104:	80 e1       	ldi	r24, 0x10	; 16
     106:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     10a:	84 e6       	ldi	r24, 0x64	; 100
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 0));
     112:	84 e0       	ldi	r24, 0x04	; 4
     114:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     118:	84 e6       	ldi	r24, 0x64	; 100
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 1));
     120:	84 e1       	ldi	r24, 0x14	; 20
     122:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     126:	84 e6       	ldi	r24, 0x64	; 100
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 0));
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     134:	84 e6       	ldi	r24, 0x64	; 100
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 1));
     13c:	81 e1       	ldi	r24, 0x11	; 17
     13e:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     142:	84 e6       	ldi	r24, 0x64	; 100
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 0));
     14a:	85 e0       	ldi	r24, 0x05	; 5
     14c:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     150:	84 e6       	ldi	r24, 0x64	; 100
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 1));
     158:	85 e1       	ldi	r24, 0x15	; 21
     15a:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     15e:	84 e6       	ldi	r24, 0x64	; 100
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
    }
}

void flash_led(){
    
        set_color(RGB(0, 0, 1));
     166:	80 e1       	ldi	r24, 0x10	; 16
     168:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     16c:	84 e6       	ldi	r24, 0x64	; 100
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 0));
     174:	84 e0       	ldi	r24, 0x04	; 4
     176:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     17a:	84 e6       	ldi	r24, 0x64	; 100
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 1));
     182:	84 e1       	ldi	r24, 0x14	; 20
     184:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     188:	84 e6       	ldi	r24, 0x64	; 100
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 0));
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     196:	84 e6       	ldi	r24, 0x64	; 100
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 1));
     19e:	81 e1       	ldi	r24, 0x11	; 17
     1a0:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     1a4:	84 e6       	ldi	r24, 0x64	; 100
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 0));
     1ac:	85 e0       	ldi	r24, 0x05	; 5
     1ae:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     1b2:	84 e6       	ldi	r24, 0x64	; 100
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 1));
     1ba:	85 e1       	ldi	r24, 0x15	; 21
     1bc:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     1c0:	84 e6       	ldi	r24, 0x64	; 100
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
    }
}

void flash_led(){
    
        set_color(RGB(0, 0, 1));
     1c8:	80 e1       	ldi	r24, 0x10	; 16
     1ca:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     1ce:	84 e6       	ldi	r24, 0x64	; 100
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 0));
     1d6:	84 e0       	ldi	r24, 0x04	; 4
     1d8:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     1dc:	84 e6       	ldi	r24, 0x64	; 100
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 1));
     1e4:	84 e1       	ldi	r24, 0x14	; 20
     1e6:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     1ea:	84 e6       	ldi	r24, 0x64	; 100
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 0));
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     1f8:	84 e6       	ldi	r24, 0x64	; 100
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 1));
     200:	81 e1       	ldi	r24, 0x11	; 17
     202:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     206:	84 e6       	ldi	r24, 0x64	; 100
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 0));
     20e:	85 e0       	ldi	r24, 0x05	; 5
     210:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     214:	84 e6       	ldi	r24, 0x64	; 100
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 1));
     21c:	85 e1       	ldi	r24, 0x15	; 21
     21e:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     222:	84 e6       	ldi	r24, 0x64	; 100
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
}

//advance functions
void laughing(){
  spinup_motors();
     22a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
  delay(30);
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
  set_motors(0,0);
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
  delay(150);
     23e:	86 e9       	ldi	r24, 0x96	; 150
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        delay(FLASH_DELAY);
}

//advance functions
void laughing(){
  spinup_motors();
     246:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
  delay(30);
     24a:	8e e1       	ldi	r24, 0x1E	; 30
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
  set_motors(0,0);
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
  delay(150);
     25a:	86 e9       	ldi	r24, 0x96	; 150
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        delay(FLASH_DELAY);
}

//advance functions
void laughing(){
  spinup_motors();
     262:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
  delay(30);
     266:	8e e1       	ldi	r24, 0x1E	; 30
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
  set_motors(0,0);
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
  delay(150);
     276:	86 e9       	ldi	r24, 0x96	; 150
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        delay(FLASH_DELAY);
}

//advance functions
void laughing(){
  spinup_motors();
     27e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
  delay(30);
     282:	8e e1       	ldi	r24, 0x1E	; 30
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
  set_motors(0,0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
  delay(150);
     292:	86 e9       	ldi	r24, 0x96	; 150
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        delay(FLASH_DELAY);
}

//advance functions
void laughing(){
  spinup_motors();
     29a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
  delay(30);
     29e:	8e e1       	ldi	r24, 0x1E	; 30
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
  set_motors(0,0);
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
  delay(150);
     2ae:	86 e9       	ldi	r24, 0x96	; 150
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        delay(FLASH_DELAY);
}

//advance functions
void laughing(){
  spinup_motors();
     2b6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
  delay(30);
     2ba:	8e e1       	ldi	r24, 0x1E	; 30
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
  set_motors(0,0);
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
  delay(150);
     2ca:	86 e9       	ldi	r24, 0x96	; 150
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <delay>

000002d2 <set_motion>:
// We need an unsigned 32-bit integer to store clock ticks;
// a regular int would overflow.
uint32_t last_state_update;

void set_motion(int new_motion)
{
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2d6:	20 91 0e 01 	lds	r18, 0x010E
     2da:	30 91 0f 01 	lds	r19, 0x010F
     2de:	28 17       	cp	r18, r24
     2e0:	39 07       	cpc	r19, r25
     2e2:	79 f0       	breq	.+30     	; 0x302 <set_motion+0x30>
    {
        current_motion = new_motion;
     2e4:	90 93 0f 01 	sts	0x010F, r25
     2e8:	80 93 0e 01 	sts	0x010E, r24
        
        if (current_motion == STOP)
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	91 f1       	breq	.+100    	; 0x354 <set_motion+0x82>
     2f0:	ec 01       	movw	r28, r24
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	91 05       	cpc	r25, r1
     2f6:	a1 f1       	breq	.+104    	; 0x360 <set_motion+0x8e>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     2f8:	82 30       	cpi	r24, 0x02	; 2
     2fa:	91 05       	cpc	r25, r1
     2fc:	29 f0       	breq	.+10     	; 0x308 <set_motion+0x36>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     2fe:	03 97       	sbiw	r24, 0x03	; 3
     300:	b9 f0       	breq	.+46     	; 0x330 <set_motion+0x5e>
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     308:	80 91 0c 01 	lds	r24, 0x010C
     30c:	90 91 0d 01 	lds	r25, 0x010D
     310:	89 2b       	or	r24, r25
     312:	11 f4       	brne	.+4      	; 0x318 <set_motion+0x46>
                spinup_motors();
     314:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	80 91 77 01 	lds	r24, 0x0177
     31e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
            both_spined = 0;
     322:	10 92 0d 01 	sts	0x010D, r1
     326:	10 92 0c 01 	sts	0x010C, r1
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     330:	80 91 0c 01 	lds	r24, 0x010C
     334:	90 91 0d 01 	lds	r25, 0x010D
     338:	89 2b       	or	r24, r25
     33a:	f9 f0       	breq	.+62     	; 0x37a <set_motion+0xa8>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     33c:	60 91 63 01 	lds	r22, 0x0163
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
            both_spined = 0;
     346:	10 92 0d 01 	sts	0x010D, r1
     34a:	10 92 0c 01 	sts	0x010C, r1
        }
    }
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
                spinup_motors();
            set_motors(0, kilo_turn_right);
            both_spined = 0;
        }
    }
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     35c:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     360:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     364:	60 91 76 01 	lds	r22, 0x0176
     368:	80 91 75 01 	lds	r24, 0x0175
     36c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
            both_spined = 1;
     370:	d0 93 0d 01 	sts	0x010D, r29
     374:	c0 93 0c 01 	sts	0x010C, r28
     378:	c4 cf       	rjmp	.-120    	; 0x302 <set_motion+0x30>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     37a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
     37e:	de cf       	rjmp	.-68     	; 0x33c <set_motion+0x6a>

00000380 <flash_led>:
    }
}

void flash_led(){
    
        set_color(RGB(0, 0, 1));
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     386:	84 e6       	ldi	r24, 0x64	; 100
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 0));
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     394:	84 e6       	ldi	r24, 0x64	; 100
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(0, 1, 1));
     39c:	84 e1       	ldi	r24, 0x14	; 20
     39e:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     3a2:	84 e6       	ldi	r24, 0x64	; 100
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 0));
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     3b0:	84 e6       	ldi	r24, 0x64	; 100
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 0, 1));
     3b8:	81 e1       	ldi	r24, 0x11	; 17
     3ba:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     3be:	84 e6       	ldi	r24, 0x64	; 100
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 0));
     3c6:	85 e0       	ldi	r24, 0x05	; 5
     3c8:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     3cc:	84 e6       	ldi	r24, 0x64	; 100
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
        set_color(RGB(1, 1, 1));
     3d4:	85 e1       	ldi	r24, 0x15	; 21
     3d6:	0e 94 84 08 	call	0x1108	; 0x1108 <set_color>
        delay(FLASH_DELAY);
     3da:	84 e6       	ldi	r24, 0x64	; 100
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <delay>

000003e2 <laughing>:
}

//advance functions
void laughing(){
  spinup_motors();
     3e2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <spinup_motors>
  delay(30);
     3e6:	8e e1       	ldi	r24, 0x1E	; 30
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 58 04 	call	0x8b0	; 0x8b0 <delay>
  set_motors(0,0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_motors>
  delay(150);
     3f6:	86 e9       	ldi	r24, 0x96	; 150
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <delay>

000003fe <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     3fe:	08 95       	ret

00000400 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	08 95       	ret

00000406 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     406:	08 95       	ret

00000408 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
    cli();
     416:	f8 94       	cli

    ports_off();
     418:	14 b8       	out	0x04, r1	; 4
     41a:	17 b8       	out	0x07, r1	; 7
     41c:	1a b8       	out	0x0a, r1	; 10
     41e:	15 b8       	out	0x05, r1	; 5
     420:	18 b8       	out	0x08, r1	; 8
     422:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     424:	52 9a       	sbi	0x0a, 2	; 10
     426:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     428:	14 bc       	out	0x24, r1	; 36
     42a:	85 e0       	ldi	r24, 0x05	; 5
     42c:	85 bd       	out	0x25, r24	; 37
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	87 bd       	out	0x27, r24	; 39
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     438:	10 92 80 00 	sts	0x0080, r1
     43c:	10 92 81 00 	sts	0x0081, r1
     440:	2f e8       	ldi	r18, 0x8F	; 143
     442:	3b e0       	ldi	r19, 0x0B	; 11
     444:	30 93 89 00 	sts	0x0089, r19
     448:	20 93 88 00 	sts	0x0088, r18
     44c:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     450:	53 98       	cbi	0x0a, 3	; 10
     452:	23 98       	cbi	0x04, 3	; 4
     454:	91 ea       	ldi	r25, 0xA1	; 161
     456:	90 93 b0 00 	sts	0x00B0, r25
     45a:	80 93 b1 00 	sts	0x00B1, r24
     45e:	10 92 b4 00 	sts	0x00B4, r1
     462:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     466:	8b e0       	ldi	r24, 0x0B	; 11
     468:	80 bf       	out	0x30, r24	; 48
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	80 93 7c 00 	sts	0x007C, r24
     476:	83 e8       	ldi	r24, 0x83	; 131
     478:	80 93 7a 00 	sts	0x007A, r24
     47c:	80 91 7a 00 	lds	r24, 0x007A
     480:	80 64       	ori	r24, 0x40	; 64
     482:	80 93 7a 00 	sts	0x007A, r24
     486:	80 91 7a 00 	lds	r24, 0x007A
     48a:	86 fd       	sbrc	r24, 6
     48c:	fc cf       	rjmp	.-8      	; 0x486 <kilo_init+0x7e>
    adc_trigger_high_gain();
     48e:	10 92 7c 00 	sts	0x007C, r1
     492:	83 ea       	ldi	r24, 0xA3	; 163
     494:	80 93 7a 00 	sts	0x007A, r24
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
    if (osccal != 0xFF)
     4a6:	8f 3f       	cpi	r24, 0xFF	; 255
     4a8:	11 f0       	breq	.+4      	; 0x4ae <kilo_init+0xa6>
        OSCCAL = osccal;
     4aa:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     4ae:	10 92 41 01 	sts	0x0141, r1
    rx_leadingbit = 1;
     4b2:	c1 e0       	ldi	r28, 0x01	; 1
     4b4:	c0 93 1a 01 	sts	0x011A, r28
    rx_leadingbyte = 1;
     4b8:	c0 93 5e 01 	sts	0x015E, r28
    rx_byteindex = 0;
     4bc:	10 92 38 01 	sts	0x0138, r1
    rx_bytevalue = 0;
     4c0:	10 92 72 01 	sts	0x0172, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     4c4:	80 e9       	ldi	r24, 0x90	; 144
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     4cc:	80 93 37 01 	sts	0x0137, r24
    if (tx_mask & ~TX_MASK_MAX)
     4d0:	80 91 37 01 	lds	r24, 0x0137
     4d4:	88 73       	andi	r24, 0x38	; 56
     4d6:	11 f0       	breq	.+4      	; 0x4dc <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     4d8:	c0 93 37 01 	sts	0x0137, r28
    tx_clock = 0;
     4dc:	10 92 62 01 	sts	0x0162, r1
     4e0:	10 92 61 01 	sts	0x0161, r1
    tx_increment = 255;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	90 93 60 01 	sts	0x0160, r25
     4ec:	80 93 5f 01 	sts	0x015F, r24
    kilo_ticks = 0;
     4f0:	10 92 3d 01 	sts	0x013D, r1
     4f4:	10 92 3e 01 	sts	0x013E, r1
     4f8:	10 92 3f 01 	sts	0x013F, r1
     4fc:	10 92 40 01 	sts	0x0140, r1
    kilo_state = IDLE;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 13 01 	sts	0x0113, r24
    kilo_tx_period = 3906;
     506:	82 e4       	ldi	r24, 0x42	; 66
     508:	9f e0       	ldi	r25, 0x0F	; 15
     50a:	90 93 71 01 	sts	0x0171, r25
     50e:	80 93 70 01 	sts	0x0170, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     512:	80 eb       	ldi	r24, 0xB0	; 176
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     51a:	c8 2f       	mov	r28, r24
     51c:	81 eb       	ldi	r24, 0xB1	; 177
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     524:	2c 2f       	mov	r18, r28
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	38 2b       	or	r19, r24
     52a:	30 93 74 01 	sts	0x0174, r19
     52e:	20 93 73 01 	sts	0x0173, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     53a:	80 93 77 01 	sts	0x0177, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     53e:	89 e0       	ldi	r24, 0x09	; 9
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     546:	80 93 63 01 	sts	0x0163, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     54a:	8c e0       	ldi	r24, 0x0C	; 12
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     552:	80 93 75 01 	sts	0x0175, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     556:	84 e1       	ldi	r24, 0x14	; 20
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     55e:	80 93 76 01 	sts	0x0176, r24
     562:	52 e4       	ldi	r21, 0x42	; 66
     564:	e5 2e       	mov	r14, r21
     566:	51 e0       	ldi	r21, 0x01	; 1
     568:	f5 2e       	mov	r15, r21
     56a:	0b e1       	ldi	r16, 0x1B	; 27
     56c:	11 e0       	ldi	r17, 0x01	; 1
     56e:	c0 e2       	ldi	r28, 0x20	; 32
     570:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     572:	ce 01       	movw	r24, r28
     574:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     578:	d8 2e       	mov	r13, r24
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     582:	2d 2d       	mov	r18, r13
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	32 2f       	mov	r19, r18
     588:	22 27       	eor	r18, r18
     58a:	28 2b       	or	r18, r24
     58c:	f7 01       	movw	r30, r14
     58e:	21 93       	st	Z+, r18
     590:	31 93       	st	Z+, r19
     592:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     594:	ce 01       	movw	r24, r28
     596:	c0 96       	adiw	r24, 0x30	; 48
     598:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     59c:	d8 2e       	mov	r13, r24
     59e:	ce 01       	movw	r24, r28
     5a0:	c1 96       	adiw	r24, 0x31	; 49
     5a2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eeprom_read_byte>
     5a6:	2d 2d       	mov	r18, r13
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	32 2f       	mov	r19, r18
     5ac:	22 27       	eor	r18, r18
     5ae:	28 2b       	or	r18, r24
     5b0:	f8 01       	movw	r30, r16
     5b2:	21 93       	st	Z+, r18
     5b4:	31 93       	st	Z+, r19
     5b6:	8f 01       	movw	r16, r30
     5b8:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5ba:	cc 33       	cpi	r28, 0x3C	; 60
     5bc:	d1 05       	cpc	r29, r1
     5be:	c9 f6       	brne	.-78     	; 0x572 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     5c0:	78 94       	sei
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	08 95       	ret

000005d2 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5d2:	1f 92       	push	r1
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	0f 92       	push	r0
     5da:	11 24       	eor	r1, r1
     5dc:	8f 93       	push	r24
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	a8 95       	wdr
     5e4:	80 91 60 00 	lds	r24, 0x0060
     5e8:	88 61       	ori	r24, 0x18	; 24
     5ea:	80 93 60 00 	sts	0x0060, r24
     5ee:	10 92 60 00 	sts	0x0060, r1
     5f2:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5f4:	8f 91       	pop	r24
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     600:	3c 01       	movw	r6, r24
     602:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     604:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     606:	99 24       	eor	r9, r9
     608:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     60a:	84 e0       	ldi	r24, 0x04	; 4
     60c:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     60e:	96 e0       	ldi	r25, 0x06	; 6
     610:	a9 2e       	mov	r10, r25
     612:	23 e8       	ldi	r18, 0x83	; 131
     614:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     616:	38 e1       	ldi	r19, 0x18	; 24
     618:	d3 2e       	mov	r13, r19
     61a:	49 e2       	ldi	r20, 0x29	; 41
     61c:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     61e:	90 91 13 01 	lds	r25, 0x0113
     622:	e9 2f       	mov	r30, r25
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	e7 30       	cpi	r30, 0x07	; 7
     628:	f1 05       	cpc	r31, r1
     62a:	c8 f7       	brcc	.-14     	; 0x61e <kilo_start+0x1e>
     62c:	ec 5c       	subi	r30, 0xCC	; 204
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
     630:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     634:	11 23       	and	r17, r17
     636:	09 f4       	brne	.+2      	; 0x63a <kilo_start+0x3a>
     638:	fc c0       	rjmp	.+504    	; 0x832 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     63a:	c0 92 13 01 	sts	0x0113, r12
     63e:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     640:	fe 01       	movw	r30, r28
     642:	09 95       	icall
                break;
     644:	ec cf       	rjmp	.-40     	; 0x61e <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     646:	80 91 41 01 	lds	r24, 0x0141
     64a:	81 11       	cpse	r24, r1
     64c:	eb c0       	rjmp	.+470    	; 0x824 <kilo_start+0x224>
        cli();                                    // disable interrupts
     64e:	f8 94       	cli
        adc_setup_conversion(6);
     650:	a0 92 7c 00 	sts	0x007C, r10
     654:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     658:	80 91 7a 00 	lds	r24, 0x007A
     65c:	80 64       	ori	r24, 0x40	; 64
     65e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     662:	90 91 7a 00 	lds	r25, 0x007A
     666:	96 fd       	sbrc	r25, 6
     668:	fc cf       	rjmp	.-8      	; 0x662 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     66a:	80 91 78 00 	lds	r24, 0x0078
     66e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     672:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     674:	8b 3a       	cpi	r24, 0xAB	; 171
     676:	e2 e0       	ldi	r30, 0x02	; 2
     678:	9e 07       	cpc	r25, r30
     67a:	0c f0       	brlt	.+2      	; 0x67e <kilo_start+0x7e>
     67c:	ed c0       	rjmp	.+474    	; 0x858 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     67e:	89 38       	cpi	r24, 0x89	; 137
     680:	f2 e0       	ldi	r31, 0x02	; 2
     682:	9f 07       	cpc	r25, r31
     684:	0c f0       	brlt	.+2      	; 0x688 <kilo_start+0x88>
     686:	ef c0       	rjmp	.+478    	; 0x866 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     688:	87 36       	cpi	r24, 0x67	; 103
     68a:	92 40       	sbci	r25, 0x02	; 2
     68c:	0c f4       	brge	.+2      	; 0x690 <kilo_start+0x90>
     68e:	ca c0       	rjmp	.+404    	; 0x824 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     690:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     692:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     694:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     696:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     698:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     69a:	3c 98       	cbi	0x07, 4	; 7
     69c:	c0 cf       	rjmp	.-128    	; 0x61e <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     69e:	f8 94       	cli
                acomp_off();
     6a0:	80 b7       	in	r24, 0x30	; 48
     6a2:	87 7f       	andi	r24, 0xF7	; 247
     6a4:	80 bf       	out	0x30, r24	; 48
                adc_off();
     6a6:	80 91 7a 00 	lds	r24, 0x007A
     6aa:	8f 77       	andi	r24, 0x7F	; 127
     6ac:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     6b0:	14 b8       	out	0x04, r1	; 4
     6b2:	17 b8       	out	0x07, r1	; 7
     6b4:	1a b8       	out	0x0a, r1	; 10
     6b6:	15 b8       	out	0x05, r1	; 5
     6b8:	18 b8       	out	0x08, r1	; 8
     6ba:	1b b8       	out	0x0b, r1	; 11
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	a8 95       	wdr
     6c2:	d0 92 60 00 	sts	0x0060, r13
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     6cc:	80 91 60 00 	lds	r24, 0x0060
     6d0:	80 64       	ori	r24, 0x40	; 64
     6d2:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     6d6:	93 b7       	in	r25, 0x33	; 51
     6d8:	91 7f       	andi	r25, 0xF1	; 241
     6da:	94 60       	ori	r25, 0x04	; 4
     6dc:	93 bf       	out	0x33, r25	; 51
                cli();
     6de:	f8 94       	cli
                sleep_enable();
     6e0:	83 b7       	in	r24, 0x33	; 51
     6e2:	81 60       	ori	r24, 0x01	; 1
     6e4:	83 bf       	out	0x33, r24	; 51
                sei();
     6e6:	78 94       	sei
                sleep_cpu();
     6e8:	88 95       	sleep
                sleep_disable();
     6ea:	83 b7       	in	r24, 0x33	; 51
     6ec:	8e 7f       	andi	r24, 0xFE	; 254
     6ee:	83 bf       	out	0x33, r24	; 51
                sei();
     6f0:	78 94       	sei
                rx_busy = 0;
     6f2:	10 92 41 01 	sts	0x0141, r1
                ports_on();
     6f6:	52 9a       	sbi	0x0a, 2	; 10
     6f8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     6fa:	80 91 7a 00 	lds	r24, 0x007A
     6fe:	80 68       	ori	r24, 0x80	; 128
     700:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     704:	87 e5       	ldi	r24, 0x57	; 87
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <kilo_start+0x108>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <kilo_start+0x10e>
     70e:	00 00       	nop
                _delay_us(300);
                acomp_on();
     710:	80 b7       	in	r24, 0x30	; 48
     712:	88 61       	ori	r24, 0x18	; 24
     714:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     716:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     718:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     71a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     71c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     71e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     720:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     722:	ef e1       	ldi	r30, 0x1F	; 31
     724:	fe e4       	ldi	r31, 0x4E	; 78
     726:	31 97       	sbiw	r30, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <kilo_start+0x126>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <kilo_start+0x12c>
     72c:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     72e:	80 91 41 01 	lds	r24, 0x0141
     732:	81 11       	cpse	r24, r1
     734:	81 c0       	rjmp	.+258    	; 0x838 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     736:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     738:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     73a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     73c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     73e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     740:	3c 98       	cbi	0x07, 4	; 7
     742:	6d cf       	rjmp	.-294    	; 0x61e <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     744:	80 91 11 01 	lds	r24, 0x0111
     748:	81 11       	cpse	r24, r1
     74a:	41 c0       	rjmp	.+130    	; 0x7ce <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     74c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     750:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     754:	10 92 12 01 	sts	0x0112, r1
     758:	62 cf       	rjmp	.-316    	; 0x61e <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     75a:	48 99       	sbic	0x09, 0	; 9
     75c:	ec cf       	rjmp	.-40     	; 0x736 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     75e:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     760:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     762:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     764:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     766:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     768:	3c 98       	cbi	0x07, 4	; 7
     76a:	8f ec       	ldi	r24, 0xCF	; 207
     76c:	97 e0       	ldi	r25, 0x07	; 7
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <kilo_start+0x16e>
     772:	00 c0       	rjmp	.+0      	; 0x774 <kilo_start+0x174>
     774:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     776:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     778:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     77a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     77c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     77e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     780:	3c 98       	cbi	0x07, 4	; 7
     782:	9f ef       	ldi	r25, 0xFF	; 255
     784:	e1 ee       	ldi	r30, 0xE1	; 225
     786:	f4 e0       	ldi	r31, 0x04	; 4
     788:	91 50       	subi	r25, 0x01	; 1
     78a:	e0 40       	sbci	r30, 0x00	; 0
     78c:	f0 40       	sbci	r31, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <kilo_start+0x188>
     790:	00 c0       	rjmp	.+0      	; 0x792 <kilo_start+0x192>
     792:	00 00       	nop
     794:	44 cf       	rjmp	.-376    	; 0x61e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     796:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     798:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     79a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     79c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     79e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7a0:	3c 98       	cbi	0x07, 4	; 7
     7a2:	ef ec       	ldi	r30, 0xCF	; 207
     7a4:	f7 e0       	ldi	r31, 0x07	; 7
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <kilo_start+0x1a6>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <kilo_start+0x1ac>
     7ac:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7ae:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7b0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7b2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7b4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7b6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7b8:	3c 98       	cbi	0x07, 4	; 7
     7ba:	ff ef       	ldi	r31, 0xFF	; 255
     7bc:	21 ee       	ldi	r18, 0xE1	; 225
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	f1 50       	subi	r31, 0x01	; 1
     7c2:	20 40       	sbci	r18, 0x00	; 0
     7c4:	80 40       	sbci	r24, 0x00	; 0
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <kilo_start+0x1c0>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <kilo_start+0x1ca>
     7ca:	00 00       	nop
     7cc:	28 cf       	rjmp	.-432    	; 0x61e <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     7ce:	90 91 11 01 	lds	r25, 0x0111
     7d2:	80 91 12 01 	lds	r24, 0x0112
     7d6:	98 17       	cp	r25, r24
     7d8:	09 f4       	brne	.+2      	; 0x7dc <kilo_start+0x1dc>
     7da:	21 cf       	rjmp	.-446    	; 0x61e <kilo_start+0x1e>
                        prev_motion = cur_motion;
     7dc:	80 91 11 01 	lds	r24, 0x0111
     7e0:	80 93 12 01 	sts	0x0112, r24
                        if (cur_motion == MOVE_LEFT) {
     7e4:	80 91 11 01 	lds	r24, 0x0111
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <kilo_start+0x1ee>
     7ec:	50 c0       	rjmp	.+160    	; 0x88e <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7ee:	80 91 11 01 	lds	r24, 0x0111
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7f2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     7f6:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	d9 f1       	breq	.+118    	; 0x874 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7fe:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     802:	90 92 b4 00 	sts	0x00B4, r9
     806:	8f e2       	ldi	r24, 0x2F	; 47
     808:	95 e7       	ldi	r25, 0x75	; 117
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <kilo_start+0x20a>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <kilo_start+0x210>
     810:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     812:	80 91 76 01 	lds	r24, 0x0176
     816:	90 91 75 01 	lds	r25, 0x0175
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     81a:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     81e:	80 93 b4 00 	sts	0x00B4, r24
     822:	fd ce       	rjmp	.-518    	; 0x61e <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     824:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     826:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     828:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     82a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     82c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     82e:	3c 98       	cbi	0x07, 4	; 7
     830:	f6 ce       	rjmp	.-532    	; 0x61e <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     832:	f3 01       	movw	r30, r6
     834:	09 95       	icall
     836:	01 cf       	rjmp	.-510    	; 0x63a <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     838:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     83a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     83c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     83e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     840:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     842:	3c 98       	cbi	0x07, 4	; 7
     844:	ff ef       	ldi	r31, 0xFF	; 255
     846:	20 e7       	ldi	r18, 0x70	; 112
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	f1 50       	subi	r31, 0x01	; 1
     84c:	20 40       	sbci	r18, 0x00	; 0
     84e:	80 40       	sbci	r24, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <kilo_start+0x24a>
     852:	00 c0       	rjmp	.+0      	; 0x854 <kilo_start+0x254>
     854:	00 00       	nop
     856:	6f cf       	rjmp	.-290    	; 0x736 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     858:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     85a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     85c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     85e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     860:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     862:	3c 98       	cbi	0x07, 4	; 7
     864:	dc ce       	rjmp	.-584    	; 0x61e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     866:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     868:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     86a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     86c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     86e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     870:	3c 9a       	sbi	0x07, 4	; 7
     872:	d5 ce       	rjmp	.-598    	; 0x61e <kilo_start+0x1e>
     874:	ef e2       	ldi	r30, 0x2F	; 47
     876:	f5 e7       	ldi	r31, 0x75	; 117
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <kilo_start+0x278>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <kilo_start+0x27e>
     87e:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     880:	80 91 63 01 	lds	r24, 0x0163
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     884:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     888:	80 93 b4 00 	sts	0x00B4, r24
     88c:	c8 ce       	rjmp	.-624    	; 0x61e <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     88e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     892:	10 92 b4 00 	sts	0x00B4, r1
     896:	8f e2       	ldi	r24, 0x2F	; 47
     898:	95 e7       	ldi	r25, 0x75	; 117
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <kilo_start+0x29a>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <kilo_start+0x2a0>
     8a0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     8a2:	80 91 77 01 	lds	r24, 0x0177
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8a6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8aa:	10 92 b4 00 	sts	0x00B4, r1
     8ae:	b7 ce       	rjmp	.-658    	; 0x61e <kilo_start+0x1e>

000008b0 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <delay+0x10>
     8b2:	ef ec       	ldi	r30, 0xCF	; 207
     8b4:	f7 e0       	ldi	r31, 0x07	; 7
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <delay+0x6>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <delay+0xc>
     8bc:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     8be:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	b9 f7       	brne	.-18     	; 0x8b2 <delay+0x2>
     8c4:	08 95       	ret

000008c6 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8c6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8ca:	60 93 b4 00 	sts	0x00B4, r22
     8ce:	08 95       	ret

000008d0 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8d6:	80 93 b4 00 	sts	0x00B4, r24
     8da:	8f e0       	ldi	r24, 0x0F	; 15
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	ef ec       	ldi	r30, 0xCF	; 207
     8e0:	f7 e0       	ldi	r31, 0x07	; 7
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <spinup_motors+0x12>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <spinup_motors+0x18>
     8e8:	00 00       	nop
     8ea:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8ec:	c1 f7       	brne	.-16     	; 0x8de <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     8ee:	08 95       	ret

000008f0 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     8f0:	80 91 41 01 	lds	r24, 0x0141
     8f4:	81 11       	cpse	r24, r1
     8f6:	1e c0       	rjmp	.+60     	; 0x934 <__stack+0x35>
        cli();
     8f8:	f8 94       	cli
        adc_setup_conversion(7);
     8fa:	87 e0       	ldi	r24, 0x07	; 7
     8fc:	80 93 7c 00 	sts	0x007C, r24
     900:	83 e8       	ldi	r24, 0x83	; 131
     902:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     906:	80 91 7a 00 	lds	r24, 0x007A
     90a:	80 64       	ori	r24, 0x40	; 64
     90c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     910:	80 91 7a 00 	lds	r24, 0x007A
     914:	86 fd       	sbrc	r24, 6
     916:	fc cf       	rjmp	.-8      	; 0x910 <__stack+0x11>
        light = ADCW;                             // store AD result
     918:	80 91 78 00 	lds	r24, 0x0078
     91c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     920:	10 92 7c 00 	sts	0x007C, r1
     924:	23 ea       	ldi	r18, 0xA3	; 163
     926:	20 93 7a 00 	sts	0x007A, r18
     92a:	21 e0       	ldi	r18, 0x01	; 1
     92c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     930:	78 94       	sei
     932:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     938:	08 95       	ret

0000093a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     93a:	80 91 41 01 	lds	r24, 0x0141
     93e:	81 11       	cpse	r24, r1
     940:	1e c0       	rjmp	.+60     	; 0x97e <get_temperature+0x44>
        cli();
     942:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     944:	88 ec       	ldi	r24, 0xC8	; 200
     946:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     94a:	87 e8       	ldi	r24, 0x87	; 135
     94c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     950:	80 91 7a 00 	lds	r24, 0x007A
     954:	80 64       	ori	r24, 0x40	; 64
     956:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     95a:	80 91 7a 00 	lds	r24, 0x007A
     95e:	86 fd       	sbrc	r24, 6
     960:	fc cf       	rjmp	.-8      	; 0x95a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     962:	80 91 78 00 	lds	r24, 0x0078
     966:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     96a:	10 92 7c 00 	sts	0x007C, r1
     96e:	23 ea       	ldi	r18, 0xA3	; 163
     970:	20 93 7a 00 	sts	0x007A, r18
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     97a:	78 94       	sei
     97c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     982:	08 95       	ret

00000984 <rand_hard>:

uint8_t rand_hard() {
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     990:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     992:	03 ea       	ldi	r16, 0xA3	; 163
     994:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     996:	d6 e0       	ldi	r29, 0x06	; 6
     998:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     99a:	a1 e0       	ldi	r26, 0x01	; 1
     99c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     99e:	60 e8       	ldi	r22, 0x80	; 128
     9a0:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     9a2:	f8 94       	cli
            adc_setup_conversion(6);
     9a4:	d0 93 7c 00 	sts	0x007C, r29
     9a8:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     9ac:	90 91 7a 00 	lds	r25, 0x007A
     9b0:	90 64       	ori	r25, 0x40	; 64
     9b2:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9b6:	90 91 7a 00 	lds	r25, 0x007A
     9ba:	96 fd       	sbrc	r25, 6
     9bc:	fc cf       	rjmp	.-8      	; 0x9b6 <rand_hard+0x32>
            a = ADCW&0x1;
     9be:	20 91 78 00 	lds	r18, 0x0078
     9c2:	30 91 79 00 	lds	r19, 0x0079
     9c6:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     9c8:	90 91 7a 00 	lds	r25, 0x007A
     9cc:	90 64       	ori	r25, 0x40	; 64
     9ce:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9d2:	90 91 7a 00 	lds	r25, 0x007A
     9d6:	96 fd       	sbrc	r25, 6
     9d8:	fc cf       	rjmp	.-8      	; 0x9d2 <rand_hard+0x4e>
            b = ADCW&0x1;
     9da:	40 91 78 00 	lds	r20, 0x0078
     9de:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     9e2:	10 92 7c 00 	sts	0x007C, r1
     9e6:	00 93 7a 00 	sts	0x007A, r16
     9ea:	10 93 7b 00 	sts	0x007B, r17
            sei();
     9ee:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     9f0:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     9f2:	24 13       	cpse	r18, r20
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <rand_hard+0x78>
     9f6:	61 50       	subi	r22, 0x01	; 1
     9f8:	71 09       	sbc	r23, r1
     9fa:	99 f6       	brne	.-90     	; 0x9a2 <rand_hard+0x1e>
        if (a)
     9fc:	22 23       	and	r18, r18
     9fe:	39 f0       	breq	.+14     	; 0xa0e <rand_hard+0x8a>
            num |= (1<<i);
     a00:	9d 01       	movw	r18, r26
     a02:	0e 2e       	mov	r0, r30
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <rand_hard+0x84>
     a06:	22 0f       	add	r18, r18
     a08:	0a 94       	dec	r0
     a0a:	ea f7       	brpl	.-6      	; 0xa06 <rand_hard+0x82>
     a0c:	82 2b       	or	r24, r18
     a0e:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     a10:	e8 30       	cpi	r30, 0x08	; 8
     a12:	f1 05       	cpc	r31, r1
     a14:	09 f0       	breq	.+2      	; 0xa18 <rand_hard+0x94>
     a16:	c3 cf       	rjmp	.-122    	; 0x99e <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a22:	80 91 00 01 	lds	r24, 0x0100
     a26:	98 2f       	mov	r25, r24
     a28:	99 0f       	add	r25, r25
     a2a:	99 0f       	add	r25, r25
     a2c:	99 0f       	add	r25, r25
     a2e:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a30:	90 91 10 01 	lds	r25, 0x0110
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	29 0f       	add	r18, r25
     a38:	20 93 10 01 	sts	0x0110, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     a3c:	28 2f       	mov	r18, r24
     a3e:	22 95       	swap	r18
     a40:	26 95       	lsr	r18
     a42:	27 70       	andi	r18, 0x07	; 7
     a44:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     a46:	96 95       	lsr	r25
     a48:	96 95       	lsr	r25
     a4a:	89 27       	eor	r24, r25
     a4c:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     a50:	08 95       	ret

00000a52 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a52:	80 93 00 01 	sts	0x0100, r24
     a56:	08 95       	ret

00000a58 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a58:	80 91 41 01 	lds	r24, 0x0141
     a5c:	81 11       	cpse	r24, r1
     a5e:	16 c0       	rjmp	.+44     	; 0xa8c <get_voltage+0x34>
        cli();                                    // disable interrupts
     a60:	f8 94       	cli
        adc_setup_conversion(6);
     a62:	86 e0       	ldi	r24, 0x06	; 6
     a64:	80 93 7c 00 	sts	0x007C, r24
     a68:	83 e8       	ldi	r24, 0x83	; 131
     a6a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a6e:	80 91 7a 00 	lds	r24, 0x007A
     a72:	80 64       	ori	r24, 0x40	; 64
     a74:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a78:	80 91 7a 00 	lds	r24, 0x007A
     a7c:	86 fd       	sbrc	r24, 6
     a7e:	fc cf       	rjmp	.-8      	; 0xa78 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a80:	80 91 78 00 	lds	r24, 0x0078
     a84:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a88:	78 94       	sei
     a8a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a90:	08 95       	ret

00000a92 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a92:	2f 92       	push	r2
     a94:	3f 92       	push	r3
     a96:	4f 92       	push	r4
     a98:	5f 92       	push	r5
     a9a:	6f 92       	push	r6
     a9c:	7f 92       	push	r7
     a9e:	8f 92       	push	r8
     aa0:	9f 92       	push	r9
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <estimate_distance+0x26>
     ab8:	00 d0       	rcall	.+0      	; 0xaba <estimate_distance+0x28>
     aba:	00 d0       	rcall	.+0      	; 0xabc <estimate_distance+0x2a>
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     ac2:	dc 01       	movw	r26, r24
     ac4:	12 96       	adiw	r26, 0x02	; 2
     ac6:	0d 90       	ld	r0, X+
     ac8:	bc 91       	ld	r27, X
     aca:	a0 2d       	mov	r26, r0
     acc:	be 83       	std	Y+6, r27	; 0x06
     ace:	ad 83       	std	Y+5, r26	; 0x05
     ad0:	a4 38       	cpi	r26, 0x84	; 132
     ad2:	e3 e0       	ldi	r30, 0x03	; 3
     ad4:	be 07       	cpc	r27, r30
     ad6:	0c f0       	brlt	.+2      	; 0xada <estimate_distance+0x48>
     ad8:	c9 c0       	rjmp	.+402    	; 0xc6c <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     ada:	80 91 1b 01 	lds	r24, 0x011B
     ade:	90 91 1c 01 	lds	r25, 0x011C
     ae2:	8a 17       	cp	r24, r26
     ae4:	9b 07       	cpc	r25, r27
     ae6:	08 f4       	brcc	.+2      	; 0xaea <estimate_distance+0x58>
     ae8:	37 c1       	rjmp	.+622    	; 0xd58 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     aea:	00 91 1d 01 	lds	r16, 0x011D
     aee:	10 91 1e 01 	lds	r17, 0x011E
     af2:	0a 17       	cp	r16, r26
     af4:	1b 07       	cpc	r17, r27
     af6:	08 f4       	brcc	.+2      	; 0xafa <estimate_distance+0x68>
     af8:	2f c2       	rjmp	.+1118   	; 0xf58 <estimate_distance+0x4c6>
     afa:	00 91 1f 01 	lds	r16, 0x011F
     afe:	10 91 20 01 	lds	r17, 0x0120
     b02:	0a 17       	cp	r16, r26
     b04:	1b 07       	cpc	r17, r27
     b06:	08 f4       	brcc	.+2      	; 0xb0a <estimate_distance+0x78>
     b08:	2f c2       	rjmp	.+1118   	; 0xf68 <estimate_distance+0x4d6>
     b0a:	00 91 21 01 	lds	r16, 0x0121
     b0e:	10 91 22 01 	lds	r17, 0x0122
     b12:	0a 17       	cp	r16, r26
     b14:	1b 07       	cpc	r17, r27
     b16:	08 f4       	brcc	.+2      	; 0xb1a <estimate_distance+0x88>
     b18:	2f c2       	rjmp	.+1118   	; 0xf78 <estimate_distance+0x4e6>
     b1a:	00 91 23 01 	lds	r16, 0x0123
     b1e:	10 91 24 01 	lds	r17, 0x0124
     b22:	0a 17       	cp	r16, r26
     b24:	1b 07       	cpc	r17, r27
     b26:	08 f4       	brcc	.+2      	; 0xb2a <estimate_distance+0x98>
     b28:	2f c2       	rjmp	.+1118   	; 0xf88 <estimate_distance+0x4f6>
     b2a:	00 91 25 01 	lds	r16, 0x0125
     b2e:	10 91 26 01 	lds	r17, 0x0126
     b32:	0a 17       	cp	r16, r26
     b34:	1b 07       	cpc	r17, r27
     b36:	08 f4       	brcc	.+2      	; 0xb3a <estimate_distance+0xa8>
     b38:	ef c1       	rjmp	.+990    	; 0xf18 <estimate_distance+0x486>
     b3a:	00 91 27 01 	lds	r16, 0x0127
     b3e:	10 91 28 01 	lds	r17, 0x0128
     b42:	0a 17       	cp	r16, r26
     b44:	1b 07       	cpc	r17, r27
     b46:	08 f4       	brcc	.+2      	; 0xb4a <estimate_distance+0xb8>
     b48:	27 c2       	rjmp	.+1102   	; 0xf98 <estimate_distance+0x506>
     b4a:	00 91 29 01 	lds	r16, 0x0129
     b4e:	10 91 2a 01 	lds	r17, 0x012A
     b52:	0a 17       	cp	r16, r26
     b54:	1b 07       	cpc	r17, r27
     b56:	08 f4       	brcc	.+2      	; 0xb5a <estimate_distance+0xc8>
     b58:	27 c2       	rjmp	.+1102   	; 0xfa8 <estimate_distance+0x516>
     b5a:	00 91 2b 01 	lds	r16, 0x012B
     b5e:	10 91 2c 01 	lds	r17, 0x012C
     b62:	0a 17       	cp	r16, r26
     b64:	1b 07       	cpc	r17, r27
     b66:	08 f4       	brcc	.+2      	; 0xb6a <estimate_distance+0xd8>
     b68:	27 c2       	rjmp	.+1102   	; 0xfb8 <estimate_distance+0x526>
     b6a:	00 91 2d 01 	lds	r16, 0x012D
     b6e:	10 91 2e 01 	lds	r17, 0x012E
     b72:	0a 17       	cp	r16, r26
     b74:	1b 07       	cpc	r17, r27
     b76:	08 f4       	brcc	.+2      	; 0xb7a <estimate_distance+0xe8>
     b78:	27 c2       	rjmp	.+1102   	; 0xfc8 <estimate_distance+0x536>
     b7a:	00 91 2f 01 	lds	r16, 0x012F
     b7e:	10 91 30 01 	lds	r17, 0x0130
     b82:	0a 17       	cp	r16, r26
     b84:	1b 07       	cpc	r17, r27
     b86:	08 f4       	brcc	.+2      	; 0xb8a <estimate_distance+0xf8>
     b88:	27 c2       	rjmp	.+1102   	; 0xfd8 <estimate_distance+0x546>
     b8a:	00 91 31 01 	lds	r16, 0x0131
     b8e:	10 91 32 01 	lds	r17, 0x0132
     b92:	0a 17       	cp	r16, r26
     b94:	1b 07       	cpc	r17, r27
     b96:	08 f4       	brcc	.+2      	; 0xb9a <estimate_distance+0x108>
     b98:	23 c2       	rjmp	.+1094   	; 0xfe0 <estimate_distance+0x54e>
     b9a:	00 91 33 01 	lds	r16, 0x0133
     b9e:	10 91 34 01 	lds	r17, 0x0134
     ba2:	0a 17       	cp	r16, r26
     ba4:	1b 07       	cpc	r17, r27
     ba6:	08 f4       	brcc	.+2      	; 0xbaa <estimate_distance+0x118>
     ba8:	23 c2       	rjmp	.+1094   	; 0xff0 <estimate_distance+0x55e>
     baa:	00 91 35 01 	lds	r16, 0x0135
     bae:	10 91 36 01 	lds	r17, 0x0136
     bb2:	0a 17       	cp	r16, r26
     bb4:	1b 07       	cpc	r17, r27
     bb6:	08 f4       	brcc	.+2      	; 0xbba <estimate_distance+0x128>
     bb8:	23 c2       	rjmp	.+1094   	; 0x1000 <estimate_distance+0x56e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 ed       	ldi	r26, 0xD0	; 208
     bc0:	b0 e4       	ldi	r27, 0x40	; 64
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	9a 83       	std	Y+2, r25	; 0x02
     bc6:	ab 83       	std	Y+3, r26	; 0x03
     bc8:	bc 83       	std	Y+4, r27	; 0x04
     bca:	4c e0       	ldi	r20, 0x0C	; 12
     bcc:	e4 2e       	mov	r14, r20
     bce:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bd0:	f7 01       	movw	r30, r14
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	e5 5e       	subi	r30, 0xE5	; 229
     bd8:	fe 4f       	sbci	r31, 0xFE	; 254
     bda:	80 81       	ld	r24, Z
     bdc:	91 81       	ldd	r25, Z+1	; 0x01
     bde:	b8 01       	movw	r22, r16
     be0:	68 1b       	sub	r22, r24
     be2:	79 0b       	sbc	r23, r25
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
     bf0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__addsf3>
     bf4:	6b 01       	movw	r12, r22
     bf6:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     bf8:	ad 81       	ldd	r26, Y+5	; 0x05
     bfa:	be 81       	ldd	r27, Y+6	; 0x06
     bfc:	bd 01       	movw	r22, r26
     bfe:	bb 0f       	add	r27, r27
     c00:	88 0b       	sbc	r24, r24
     c02:	99 0b       	sbc	r25, r25
     c04:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__floatsisf>
     c08:	4b 01       	movw	r8, r22
     c0a:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     c0c:	b8 01       	movw	r22, r16
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     c16:	2b 01       	movw	r4, r22
     c18:	3c 01       	movw	r6, r24
     c1a:	29 81       	ldd	r18, Y+1	; 0x01
     c1c:	3a 81       	ldd	r19, Y+2	; 0x02
     c1e:	4b 81       	ldd	r20, Y+3	; 0x03
     c20:	5c 81       	ldd	r21, Y+4	; 0x04
     c22:	c7 01       	movw	r24, r14
     c24:	b6 01       	movw	r22, r12
     c26:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     c2a:	9b 01       	movw	r18, r22
     c2c:	ac 01       	movw	r20, r24
     c2e:	c3 01       	movw	r24, r6
     c30:	b2 01       	movw	r22, r4
     c32:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__subsf3>
     c36:	9b 01       	movw	r18, r22
     c38:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c3a:	c5 01       	movw	r24, r10
     c3c:	b4 01       	movw	r22, r8
     c3e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__subsf3>
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e2       	ldi	r20, 0x20	; 32
     c48:	51 e4       	ldi	r21, 0x41	; 65
     c4a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
            b=((int)((int)b/(int)slope));
     c4e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fixsfsi>
     c52:	8b 01       	movw	r16, r22
     c54:	c7 01       	movw	r24, r14
     c56:	b6 01       	movw	r22, r12
     c58:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fixsfsi>
     c5c:	ab 01       	movw	r20, r22
     c5e:	bc 01       	movw	r22, r24
     c60:	c8 01       	movw	r24, r16
     c62:	ba 01       	movw	r22, r20
     c64:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__divmodhi4>
            dist_high=b;
     c68:	16 2f       	mov	r17, r22
     c6a:	77 c0       	rjmp	.+238    	; 0xd5a <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c6c:	dc 01       	movw	r26, r24
     c6e:	cd 90       	ld	r12, X+
     c70:	dc 90       	ld	r13, X
     c72:	80 91 42 01 	lds	r24, 0x0142
     c76:	90 91 43 01 	lds	r25, 0x0143
     c7a:	8c 15       	cp	r24, r12
     c7c:	9d 05       	cpc	r25, r13
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <estimate_distance+0x1f0>
     c80:	8c c0       	rjmp	.+280    	; 0xd9a <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c82:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c84:	e0 90 44 01 	lds	r14, 0x0144
     c88:	f0 90 45 01 	lds	r15, 0x0145
     c8c:	ec 14       	cp	r14, r12
     c8e:	fd 04       	cpc	r15, r13
     c90:	08 f4       	brcc	.+2      	; 0xc94 <estimate_distance+0x202>
     c92:	5e c1       	rjmp	.+700    	; 0xf50 <estimate_distance+0x4be>
     c94:	e0 90 46 01 	lds	r14, 0x0146
     c98:	f0 90 47 01 	lds	r15, 0x0147
     c9c:	ec 14       	cp	r14, r12
     c9e:	fd 04       	cpc	r15, r13
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <estimate_distance+0x212>
     ca2:	5e c1       	rjmp	.+700    	; 0xf60 <estimate_distance+0x4ce>
     ca4:	e0 90 48 01 	lds	r14, 0x0148
     ca8:	f0 90 49 01 	lds	r15, 0x0149
     cac:	ec 14       	cp	r14, r12
     cae:	fd 04       	cpc	r15, r13
     cb0:	08 f4       	brcc	.+2      	; 0xcb4 <estimate_distance+0x222>
     cb2:	5e c1       	rjmp	.+700    	; 0xf70 <estimate_distance+0x4de>
     cb4:	e0 90 4a 01 	lds	r14, 0x014A
     cb8:	f0 90 4b 01 	lds	r15, 0x014B
     cbc:	ec 14       	cp	r14, r12
     cbe:	fd 04       	cpc	r15, r13
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <estimate_distance+0x232>
     cc2:	5e c1       	rjmp	.+700    	; 0xf80 <estimate_distance+0x4ee>
     cc4:	e0 90 4c 01 	lds	r14, 0x014C
     cc8:	f0 90 4d 01 	lds	r15, 0x014D
     ccc:	ec 14       	cp	r14, r12
     cce:	fd 04       	cpc	r15, r13
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <estimate_distance+0x242>
     cd2:	c3 c0       	rjmp	.+390    	; 0xe5a <estimate_distance+0x3c8>
     cd4:	e0 90 4e 01 	lds	r14, 0x014E
     cd8:	f0 90 4f 01 	lds	r15, 0x014F
     cdc:	ec 14       	cp	r14, r12
     cde:	fd 04       	cpc	r15, r13
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <estimate_distance+0x252>
     ce2:	56 c1       	rjmp	.+684    	; 0xf90 <estimate_distance+0x4fe>
     ce4:	e0 90 50 01 	lds	r14, 0x0150
     ce8:	f0 90 51 01 	lds	r15, 0x0151
     cec:	ec 14       	cp	r14, r12
     cee:	fd 04       	cpc	r15, r13
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <estimate_distance+0x262>
     cf2:	56 c1       	rjmp	.+684    	; 0xfa0 <estimate_distance+0x50e>
     cf4:	e0 90 52 01 	lds	r14, 0x0152
     cf8:	f0 90 53 01 	lds	r15, 0x0153
     cfc:	ec 14       	cp	r14, r12
     cfe:	fd 04       	cpc	r15, r13
     d00:	08 f4       	brcc	.+2      	; 0xd04 <estimate_distance+0x272>
     d02:	56 c1       	rjmp	.+684    	; 0xfb0 <estimate_distance+0x51e>
     d04:	e0 90 54 01 	lds	r14, 0x0154
     d08:	f0 90 55 01 	lds	r15, 0x0155
     d0c:	ec 14       	cp	r14, r12
     d0e:	fd 04       	cpc	r15, r13
     d10:	08 f4       	brcc	.+2      	; 0xd14 <estimate_distance+0x282>
     d12:	56 c1       	rjmp	.+684    	; 0xfc0 <estimate_distance+0x52e>
     d14:	e0 90 56 01 	lds	r14, 0x0156
     d18:	f0 90 57 01 	lds	r15, 0x0157
     d1c:	ec 14       	cp	r14, r12
     d1e:	fd 04       	cpc	r15, r13
     d20:	08 f4       	brcc	.+2      	; 0xd24 <estimate_distance+0x292>
     d22:	56 c1       	rjmp	.+684    	; 0xfd0 <estimate_distance+0x53e>
     d24:	e0 90 58 01 	lds	r14, 0x0158
     d28:	f0 90 59 01 	lds	r15, 0x0159
     d2c:	ec 14       	cp	r14, r12
     d2e:	fd 04       	cpc	r15, r13
     d30:	08 f4       	brcc	.+2      	; 0xd34 <estimate_distance+0x2a2>
     d32:	5a c1       	rjmp	.+692    	; 0xfe8 <estimate_distance+0x556>
     d34:	e0 90 5a 01 	lds	r14, 0x015A
     d38:	f0 90 5b 01 	lds	r15, 0x015B
     d3c:	ec 14       	cp	r14, r12
     d3e:	fd 04       	cpc	r15, r13
     d40:	08 f4       	brcc	.+2      	; 0xd44 <estimate_distance+0x2b2>
     d42:	5a c1       	rjmp	.+692    	; 0xff8 <estimate_distance+0x566>
     d44:	e0 90 5c 01 	lds	r14, 0x015C
     d48:	f0 90 5d 01 	lds	r15, 0x015D
     d4c:	ec 14       	cp	r14, r12
     d4e:	fd 04       	cpc	r15, r13
     d50:	08 f4       	brcc	.+2      	; 0xd54 <estimate_distance+0x2c2>
     d52:	5a c1       	rjmp	.+692    	; 0x1008 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d54:	0a e5       	ldi	r16, 0x5A	; 90
     d56:	31 c0       	rjmp	.+98     	; 0xdba <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     d58:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     d5a:	ed 81       	ldd	r30, Y+5	; 0x05
     d5c:	fe 81       	ldd	r31, Y+6	; 0x06
     d5e:	ed 3b       	cpi	r30, 0xBD	; 189
     d60:	f2 40       	sbci	r31, 0x02	; 2
     d62:	fc f4       	brge	.+62     	; 0xda2 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     d64:	81 e2       	ldi	r24, 0x21	; 33
     d66:	81 0f       	add	r24, r17
    }
}
     d68:	26 96       	adiw	r28, 0x06	; 6
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	bf 90       	pop	r11
     d86:	af 90       	pop	r10
     d88:	9f 90       	pop	r9
     d8a:	8f 90       	pop	r8
     d8c:	7f 90       	pop	r7
     d8e:	6f 90       	pop	r6
     d90:	5f 90       	pop	r5
     d92:	4f 90       	pop	r4
     d94:	3f 90       	pop	r3
     d96:	2f 90       	pop	r2
     d98:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     d9a:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     d9c:	81 e2       	ldi	r24, 0x21	; 33
     d9e:	80 0f       	add	r24, r16
     da0:	e3 cf       	rjmp	.-58     	; 0xd68 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     da2:	d1 01       	movw	r26, r2
     da4:	cd 90       	ld	r12, X+
     da6:	dc 90       	ld	r13, X
     da8:	80 91 42 01 	lds	r24, 0x0142
     dac:	90 91 43 01 	lds	r25, 0x0143
     db0:	8c 15       	cp	r24, r12
     db2:	9d 05       	cpc	r25, r13
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <estimate_distance+0x326>
     db6:	66 cf       	rjmp	.-308    	; 0xc84 <estimate_distance+0x1f2>
            dist_low=0;
     db8:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     dba:	1f 3f       	cpi	r17, 0xFF	; 255
     dbc:	79 f3       	breq	.-34     	; 0xd9c <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     dbe:	ed 81       	ldd	r30, Y+5	; 0x05
     dc0:	fe 81       	ldd	r31, Y+6	; 0x06
     dc2:	bf 01       	movw	r22, r30
     dc4:	ff 0f       	add	r31, r31
     dc6:	88 0b       	sbc	r24, r24
     dc8:	99 0b       	sbc	r25, r25
     dca:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__floatsisf>
     dce:	6b 01       	movw	r12, r22
     dd0:	7c 01       	movw	r14, r24
     dd2:	61 2f       	mov	r22, r17
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     dde:	4b 01       	movw	r8, r22
     de0:	5c 01       	movw	r10, r24
     de2:	a7 01       	movw	r20, r14
     de4:	96 01       	movw	r18, r12
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	81 e6       	ldi	r24, 0x61	; 97
     dec:	94 e4       	ldi	r25, 0x44	; 68
     dee:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__subsf3>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	c5 01       	movw	r24, r10
     df8:	b4 01       	movw	r22, r8
     dfa:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     dfe:	4b 01       	movw	r8, r22
     e00:	5c 01       	movw	r10, r24
     e02:	60 2f       	mov	r22, r16
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     e0e:	2b 01       	movw	r4, r22
     e10:	3c 01       	movw	r6, r24
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4f e2       	ldi	r20, 0x2F	; 47
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	c7 01       	movw	r24, r14
     e1c:	b6 01       	movw	r22, r12
     e1e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__subsf3>
     e22:	9b 01       	movw	r18, r22
     e24:	ac 01       	movw	r20, r24
     e26:	c3 01       	movw	r24, r6
     e28:	b2 01       	movw	r22, r4
     e2a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     e2e:	9b 01       	movw	r18, r22
     e30:	ac 01       	movw	r20, r24
     e32:	c5 01       	movw	r24, r10
     e34:	b4 01       	movw	r22, r8
     e36:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__addsf3>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	48 e4       	ldi	r20, 0x48	; 72
     e40:	53 e4       	ldi	r21, 0x43	; 67
     e42:	0e 94 28 0c 	call	0x1850	; 0x1850 <__divsf3>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	44 e0       	ldi	r20, 0x04	; 4
     e4c:	52 e4       	ldi	r21, 0x42	; 66
     e4e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__addsf3>
     e52:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fixunssfsi>
     e56:	86 2f       	mov	r24, r22
     e58:	87 cf       	rjmp	.-242    	; 0xd68 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e5a:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     e5c:	85 e0       	ldi	r24, 0x05	; 5
     e5e:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	fc 01       	movw	r30, r24
     e66:	e0 5c       	subi	r30, 0xC0	; 192
     e68:	fe 4f       	sbci	r31, 0xFE	; 254
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	b7 01       	movw	r22, r14
     e70:	68 1b       	sub	r22, r24
     e72:	79 0b       	sbc	r23, r25
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__addsf3>
     e84:	4b 01       	movw	r8, r22
     e86:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e88:	b6 01       	movw	r22, r12
     e8a:	dd 0c       	add	r13, r13
     e8c:	88 0b       	sbc	r24, r24
     e8e:	99 0b       	sbc	r25, r25
     e90:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__floatsisf>
     e94:	2b 01       	movw	r4, r22
     e96:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e98:	b7 01       	movw	r22, r14
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     ea2:	6b 01       	movw	r12, r22
     ea4:	7c 01       	movw	r14, r24
     ea6:	60 2f       	mov	r22, r16
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	5f e3       	ldi	r21, 0x3F	; 63
     eba:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	a9 01       	movw	r20, r18
     ec4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__addsf3>
     ec8:	a5 01       	movw	r20, r10
     eca:	94 01       	movw	r18, r8
     ecc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__subsf3>
     edc:	9b 01       	movw	r18, r22
     ede:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ee0:	c3 01       	movw	r24, r6
     ee2:	b2 01       	movw	r22, r4
     ee4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__subsf3>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e2       	ldi	r20, 0x20	; 32
     eee:	51 e4       	ldi	r21, 0x41	; 65
     ef0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
                b=((int)((int)b/(int)slope));
     ef4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fixsfsi>
     ef8:	7b 01       	movw	r14, r22
     efa:	c5 01       	movw	r24, r10
     efc:	b4 01       	movw	r22, r8
     efe:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__fixsfsi>
     f02:	ab 01       	movw	r20, r22
     f04:	bc 01       	movw	r22, r24
     f06:	c7 01       	movw	r24, r14
     f08:	ba 01       	movw	r22, r20
     f0a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__divmodhi4>
                dist_low=b;
     f0e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     f10:	6f 3f       	cpi	r22, 0xFF	; 255
     f12:	09 f0       	breq	.+2      	; 0xf16 <estimate_distance+0x484>
     f14:	52 cf       	rjmp	.-348    	; 0xdba <estimate_distance+0x328>
     f16:	26 cf       	rjmp	.-436    	; 0xd64 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f18:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	7c 01       	movw	r14, r24
     f20:	f1 e0       	ldi	r31, 0x01	; 1
     f22:	ef 1a       	sub	r14, r31
     f24:	f1 08       	sbc	r15, r1
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__floatunsisf>
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	5f e3       	ldi	r21, 0x3F	; 63
     f38:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	a9 01       	movw	r20, r18
     f42:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__addsf3>
     f46:	69 83       	std	Y+1, r22	; 0x01
     f48:	7a 83       	std	Y+2, r23	; 0x02
     f4a:	8b 83       	std	Y+3, r24	; 0x03
     f4c:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     f4e:	40 ce       	rjmp	.-896    	; 0xbd0 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f50:	01 e0       	ldi	r16, 0x01	; 1
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	84 cf       	rjmp	.-248    	; 0xe60 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	df cf       	rjmp	.-66     	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f60:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	7c cf       	rjmp	.-264    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f68:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	d7 cf       	rjmp	.-82     	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f70:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	74 cf       	rjmp	.-280    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f78:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	cf cf       	rjmp	.-98     	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f80:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     f82:	84 e0       	ldi	r24, 0x04	; 4
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	6c cf       	rjmp	.-296    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f88:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f8a:	84 e0       	ldi	r24, 0x04	; 4
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	c7 cf       	rjmp	.-114    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f90:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     f92:	86 e0       	ldi	r24, 0x06	; 6
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	64 cf       	rjmp	.-312    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f98:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f9a:	86 e0       	ldi	r24, 0x06	; 6
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	bf cf       	rjmp	.-130    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fa0:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     fa2:	87 e0       	ldi	r24, 0x07	; 7
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	5c cf       	rjmp	.-328    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fa8:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     faa:	87 e0       	ldi	r24, 0x07	; 7
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	b7 cf       	rjmp	.-146    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fb0:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	54 cf       	rjmp	.-344    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fb8:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     fba:	88 e0       	ldi	r24, 0x08	; 8
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	af cf       	rjmp	.-162    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fc0:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     fc2:	89 e0       	ldi	r24, 0x09	; 9
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	4c cf       	rjmp	.-360    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fc8:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     fca:	89 e0       	ldi	r24, 0x09	; 9
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a7 cf       	rjmp	.-178    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fd0:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     fd2:	8a e0       	ldi	r24, 0x0A	; 10
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	44 cf       	rjmp	.-376    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fd8:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     fda:	8a e0       	ldi	r24, 0x0A	; 10
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9f cf       	rjmp	.-194    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fe0:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     fe2:	8b e0       	ldi	r24, 0x0B	; 11
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9b cf       	rjmp	.-202    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fe8:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     fea:	8b e0       	ldi	r24, 0x0B	; 11
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	38 cf       	rjmp	.-400    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ff0:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     ff2:	8c e0       	ldi	r24, 0x0C	; 12
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	93 cf       	rjmp	.-218    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ff8:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     ffa:	8c e0       	ldi	r24, 0x0C	; 12
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	30 cf       	rjmp	.-416    	; 0xe60 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1000:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1002:	8d e0       	ldi	r24, 0x0D	; 13
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	8b cf       	rjmp	.-234    	; 0xf1e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1008:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    100a:	8d e0       	ldi	r24, 0x0D	; 13
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	28 cf       	rjmp	.-432    	; 0xe60 <estimate_distance+0x3ce>

00001010 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    tx_clock += tx_increment;
    1032:	20 91 61 01 	lds	r18, 0x0161
    1036:	30 91 62 01 	lds	r19, 0x0162
    103a:	80 91 5f 01 	lds	r24, 0x015F
    103e:	90 91 60 01 	lds	r25, 0x0160
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	90 93 62 01 	sts	0x0162, r25
    104a:	80 93 61 01 	sts	0x0161, r24
    tx_increment = 0xFF;
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	90 93 60 01 	sts	0x0160, r25
    1056:	80 93 5f 01 	sts	0x015F, r24
    OCR0A = tx_increment;
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    105e:	80 91 3d 01 	lds	r24, 0x013D
    1062:	90 91 3e 01 	lds	r25, 0x013E
    1066:	a0 91 3f 01 	lds	r26, 0x013F
    106a:	b0 91 40 01 	lds	r27, 0x0140
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	a1 1d       	adc	r26, r1
    1072:	b1 1d       	adc	r27, r1
    1074:	80 93 3d 01 	sts	0x013D, r24
    1078:	90 93 3e 01 	sts	0x013E, r25
    107c:	a0 93 3f 01 	sts	0x013F, r26
    1080:	b0 93 40 01 	sts	0x0140, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1084:	80 91 41 01 	lds	r24, 0x0141
    1088:	81 11       	cpse	r24, r1
    108a:	0f c0       	rjmp	.+30     	; 0x10aa <__vector_14+0x9a>
    108c:	80 91 70 01 	lds	r24, 0x0170
    1090:	90 91 71 01 	lds	r25, 0x0171
    1094:	20 91 61 01 	lds	r18, 0x0161
    1098:	30 91 62 01 	lds	r19, 0x0162
    109c:	82 17       	cp	r24, r18
    109e:	93 07       	cpc	r25, r19
    10a0:	20 f4       	brcc	.+8      	; 0x10aa <__vector_14+0x9a>
    10a2:	80 91 13 01 	lds	r24, 0x0113
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	89 f0       	breq	.+34     	; 0x10cc <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    10cc:	e0 91 03 01 	lds	r30, 0x0103
    10d0:	f0 91 04 01 	lds	r31, 0x0104
    10d4:	09 95       	icall
        if (msg) {
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	41 f3       	breq	.-48     	; 0x10aa <__vector_14+0x9a>
            if (message_send(msg)) {
    10da:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <message_send>
    10de:	81 11       	cpse	r24, r1
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    10e2:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <rand>
    10e6:	99 27       	eor	r25, r25
    10e8:	90 93 60 01 	sts	0x0160, r25
    10ec:	80 93 5f 01 	sts	0x015F, r24
                OCR0A = tx_increment;
    10f0:	87 bd       	out	0x27, r24	; 39
    10f2:	db cf       	rjmp	.-74     	; 0x10aa <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    10f4:	e0 91 01 01 	lds	r30, 0x0101
    10f8:	f0 91 02 01 	lds	r31, 0x0102
    10fc:	09 95       	icall
                tx_clock = 0;
    10fe:	10 92 62 01 	sts	0x0162, r1
    1102:	10 92 61 01 	sts	0x0161, r1
    1106:	d1 cf       	rjmp	.-94     	; 0x10aa <__vector_14+0x9a>

00001108 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1108:	80 ff       	sbrs	r24, 0
    110a:	11 c0       	rjmp	.+34     	; 0x112e <set_color+0x26>
        DDRD |= (1<<5);
    110c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    110e:	81 ff       	sbrs	r24, 1
    1110:	11 c0       	rjmp	.+34     	; 0x1134 <set_color+0x2c>
        DDRD |= (1<<4);
    1112:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1114:	82 ff       	sbrs	r24, 2
    1116:	11 c0       	rjmp	.+34     	; 0x113a <set_color+0x32>
        DDRC |= (1<<3);
    1118:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    111a:	83 ff       	sbrs	r24, 3
    111c:	11 c0       	rjmp	.+34     	; 0x1140 <set_color+0x38>
        DDRC |= (1<<2);
    111e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1120:	84 ff       	sbrs	r24, 4
    1122:	11 c0       	rjmp	.+34     	; 0x1146 <set_color+0x3e>
        DDRC |= (1<<5);
    1124:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1126:	85 fd       	sbrc	r24, 5
    1128:	11 c0       	rjmp	.+34     	; 0x114c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    112a:	3c 98       	cbi	0x07, 4	; 7
    112c:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    112e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1130:	81 fd       	sbrc	r24, 1
    1132:	ef cf       	rjmp	.-34     	; 0x1112 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1134:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1136:	82 fd       	sbrc	r24, 2
    1138:	ef cf       	rjmp	.-34     	; 0x1118 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    113a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    113c:	83 fd       	sbrc	r24, 3
    113e:	ef cf       	rjmp	.-34     	; 0x111e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1140:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1142:	84 fd       	sbrc	r24, 4
    1144:	ef cf       	rjmp	.-34     	; 0x1124 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1146:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1148:	85 ff       	sbrs	r24, 5
    114a:	ef cf       	rjmp	.-34     	; 0x112a <set_color+0x22>
        DDRC |= (1<<4);
    114c:	3c 9a       	sbi	0x07, 4	; 7
    114e:	08 95       	ret

00001150 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1150:	1f 92       	push	r1
    1152:	0f 92       	push	r0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	0f 92       	push	r0
    1158:	11 24       	eor	r1, r1
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    rx_timer_off();
    115e:	10 92 81 00 	sts	0x0081, r1
    1162:	10 92 85 00 	sts	0x0085, r1
    1166:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 1a 01 	sts	0x011A, r24
    rx_leadingbyte = 1;
    1170:	80 93 5e 01 	sts	0x015E, r24
    rx_busy = 0;
    1174:	10 92 41 01 	sts	0x0141, r1
    adc_trigger_high_gain();
    1178:	10 92 7c 00 	sts	0x007C, r1
    117c:	93 ea       	ldi	r25, 0xA3	; 163
    117e:	90 93 7a 00 	sts	0x007A, r25
    1182:	80 93 7b 00 	sts	0x007B, r24
}
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    11ba:	20 91 84 00 	lds	r18, 0x0084
    11be:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	40 93 41 01 	sts	0x0141, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    11c8:	80 91 1a 01 	lds	r24, 0x011A
    11cc:	88 23       	and	r24, r24
    11ce:	a9 f1       	breq	.+106    	; 0x123a <__vector_23+0xa6>
        rx_timer_on();
    11d0:	10 92 85 00 	sts	0x0085, r1
    11d4:	10 92 84 00 	sts	0x0084, r1
    11d8:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    11dc:	10 92 72 01 	sts	0x0172, r1
        rx_leadingbit = 0;
    11e0:	10 92 1a 01 	sts	0x011A, r1
        if (rx_leadingbyte) {
    11e4:	80 91 5e 01 	lds	r24, 0x015E
    11e8:	88 23       	and	r24, r24
    11ea:	a1 f0       	breq	.+40     	; 0x1214 <__vector_23+0x80>
            adc_finish_conversion();
    11ec:	80 91 7a 00 	lds	r24, 0x007A
    11f0:	86 fd       	sbrc	r24, 6
    11f2:	fc cf       	rjmp	.-8      	; 0x11ec <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    11f4:	80 91 78 00 	lds	r24, 0x0078
    11f8:	90 91 79 00 	lds	r25, 0x0079
    11fc:	90 93 3c 01 	sts	0x013C, r25
    1200:	80 93 3b 01 	sts	0x013B, r24
            adc_trigger_low_gain();
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 7c 00 	sts	0x007C, r24
    120a:	93 ea       	ldi	r25, 0xA3	; 163
    120c:	90 93 7a 00 	sts	0x007A, r25
    1210:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    123a:	c9 01       	movw	r24, r18
    123c:	87 58       	subi	r24, 0x87	; 135
    123e:	91 09       	sbc	r25, r1
    1240:	84 37       	cpi	r24, 0x74	; 116
    1242:	99 40       	sbci	r25, 0x09	; 9
    1244:	08 f0       	brcs	.+2      	; 0x1248 <__vector_23+0xb4>
    1246:	52 c0       	rjmp	.+164    	; 0x12ec <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1248:	26 58       	subi	r18, 0x86	; 134
    124a:	31 09       	sbc	r19, r1
    124c:	a4 ef       	ldi	r26, 0xF4	; 244
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	0e 94 98 0b 	call	0x1730	; 0x1730 <__umulhisi3>
    1254:	aa 27       	eor	r26, r26
    1256:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1258:	88 30       	cpi	r24, 0x08	; 8
    125a:	91 05       	cpc	r25, r1
    125c:	a1 05       	cpc	r26, r1
    125e:	b1 05       	cpc	r27, r1
    1260:	08 f4       	brcc	.+2      	; 0x1264 <__vector_23+0xd0>
    1262:	7b c0       	rjmp	.+246    	; 0x135a <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1264:	40 93 1a 01 	sts	0x011A, r20
                if (rx_leadingbyte) {
    1268:	80 91 5e 01 	lds	r24, 0x015E
    126c:	81 11       	cpse	r24, r1
    126e:	52 c0       	rjmp	.+164    	; 0x1314 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1270:	80 91 38 01 	lds	r24, 0x0138
    1274:	e8 2f       	mov	r30, r24
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	ec 59       	subi	r30, 0x9C	; 156
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	90 91 72 01 	lds	r25, 0x0172
    1280:	90 83       	st	Z, r25
                    rx_byteindex++;
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	80 93 38 01 	sts	0x0138, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1288:	8c 30       	cpi	r24, 0x0C	; 12
    128a:	21 f6       	brne	.-120    	; 0x1214 <__vector_23+0x80>
                        rx_timer_off();
    128c:	10 92 81 00 	sts	0x0081, r1
    1290:	10 92 85 00 	sts	0x0085, r1
    1294:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1298:	40 93 5e 01 	sts	0x015E, r20
                        rx_busy = 0;
    129c:	10 92 41 01 	sts	0x0141, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    12a0:	c0 91 6e 01 	lds	r28, 0x016E
    12a4:	d0 91 6f 01 	lds	r29, 0x016F
    12a8:	84 e6       	ldi	r24, 0x64	; 100
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <message_crc>
    12b0:	c8 17       	cp	r28, r24
    12b2:	d9 07       	cpc	r29, r25
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <__vector_23+0x124>
    12b6:	ae cf       	rjmp	.-164    	; 0x1214 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    12b8:	80 91 6d 01 	lds	r24, 0x016D
    12bc:	87 ff       	sbrs	r24, 7
    12be:	61 c0       	rjmp	.+194    	; 0x1382 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12c0:	98 e7       	ldi	r25, 0x78	; 120
    12c2:	98 0f       	add	r25, r24
    12c4:	93 30       	cpi	r25, 0x03	; 3
    12c6:	30 f0       	brcs	.+12     	; 0x12d4 <__vector_23+0x140>
        motors_off();
    12c8:	53 98       	cbi	0x0a, 3	; 10
    12ca:	23 98       	cbi	0x04, 3	; 4
    12cc:	10 92 b4 00 	sts	0x00B4, r1
    12d0:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	fc 01       	movw	r30, r24
    12d8:	e0 58       	subi	r30, 0x80	; 128
    12da:	f1 09       	sbc	r31, r1
    12dc:	eb 30       	cpi	r30, 0x0B	; 11
    12de:	f1 05       	cpc	r31, r1
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__vector_23+0x150>
    12e2:	98 cf       	rjmp	.-208    	; 0x1214 <__vector_23+0x80>
    12e4:	e5 5c       	subi	r30, 0xC5	; 197
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    12ec:	10 92 81 00 	sts	0x0081, r1
    12f0:	10 92 85 00 	sts	0x0085, r1
    12f4:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    12f8:	40 93 1a 01 	sts	0x011A, r20
            rx_leadingbyte = 1;
    12fc:	40 93 5e 01 	sts	0x015E, r20
            rx_busy = 0;
    1300:	10 92 41 01 	sts	0x0141, r1
            adc_trigger_high_gain();
    1304:	10 92 7c 00 	sts	0x007C, r1
    1308:	83 ea       	ldi	r24, 0xA3	; 163
    130a:	80 93 7a 00 	sts	0x007A, r24
    130e:	40 93 7b 00 	sts	0x007B, r20
    1312:	80 cf       	rjmp	.-256    	; 0x1214 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1314:	80 91 7a 00 	lds	r24, 0x007A
    1318:	86 fd       	sbrc	r24, 6
    131a:	fc cf       	rjmp	.-8      	; 0x1314 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    131c:	80 91 78 00 	lds	r24, 0x0078
    1320:	90 91 79 00 	lds	r25, 0x0079
    1324:	90 93 3a 01 	sts	0x013A, r25
    1328:	80 93 39 01 	sts	0x0139, r24
                    adc_trigger_high_gain();
    132c:	10 92 7c 00 	sts	0x007C, r1
    1330:	83 ea       	ldi	r24, 0xA3	; 163
    1332:	80 93 7a 00 	sts	0x007A, r24
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    133c:	90 91 72 01 	lds	r25, 0x0172
    1340:	99 23       	and	r25, r25
    1342:	d1 f0       	breq	.+52     	; 0x1378 <__vector_23+0x1e4>
                        rx_timer_off();
    1344:	10 92 81 00 	sts	0x0081, r1
    1348:	10 92 85 00 	sts	0x0085, r1
    134c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1350:	80 93 5e 01 	sts	0x015E, r24
                        rx_busy = 0;
    1354:	10 92 41 01 	sts	0x0141, r1
    1358:	5d cf       	rjmp	.-326    	; 0x1214 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	f9 01       	movw	r30, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <__vector_23+0x1d2>
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	8a 95       	dec	r24
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <__vector_23+0x1ce>
    136a:	cf 01       	movw	r24, r30
    136c:	90 91 72 01 	lds	r25, 0x0172
    1370:	89 2b       	or	r24, r25
    1372:	80 93 72 01 	sts	0x0172, r24
    1376:	4e cf       	rjmp	.-356    	; 0x1214 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1378:	10 92 5e 01 	sts	0x015E, r1
                        rx_byteindex = 0;
    137c:	10 92 38 01 	sts	0x0138, r1
    1380:	49 cf       	rjmp	.-366    	; 0x1214 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1382:	e0 91 05 01 	lds	r30, 0x0105
    1386:	f0 91 06 01 	lds	r31, 0x0106
    138a:	69 e3       	ldi	r22, 0x39	; 57
    138c:	71 e0       	ldi	r23, 0x01	; 1
    138e:	84 e6       	ldi	r24, 0x64	; 100
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	09 95       	icall
    1394:	3f cf       	rjmp	.-386    	; 0x1214 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1396:	80 91 64 01 	lds	r24, 0x0164
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	09 f4       	brne	.+2      	; 0x13a0 <__vector_23+0x20c>
    139e:	dd c0       	rjmp	.+442    	; 0x155a <__vector_23+0x3c6>
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <__vector_23+0x210>
    13a2:	ba c0       	rjmp	.+372    	; 0x1518 <__vector_23+0x384>
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	09 f4       	brne	.+2      	; 0x13aa <__vector_23+0x216>
    13a8:	c6 c0       	rjmp	.+396    	; 0x1536 <__vector_23+0x3a2>
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <__vector_23+0x21c>
    13ae:	b1 c0       	rjmp	.+354    	; 0x1512 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13b0:	80 91 11 01 	lds	r24, 0x0111
    13b4:	90 91 6a 01 	lds	r25, 0x016A
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	09 f4       	brne	.+2      	; 0x13be <__vector_23+0x22a>
    13bc:	e3 c0       	rjmp	.+454    	; 0x1584 <__vector_23+0x3f0>
    13be:	80 91 69 01 	lds	r24, 0x0169
                        prev_motion = MOVE_STOP;
    13c2:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_STRAIGHT;
    13c6:	23 e0       	ldi	r18, 0x03	; 3
    13c8:	20 93 11 01 	sts	0x0111, r18
                        kilo_straight_left = calibmsg->straight_left;
    13cc:	80 93 75 01 	sts	0x0175, r24
                        kilo_straight_right = calibmsg->straight_right;
    13d0:	90 93 76 01 	sts	0x0176, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13d4:	80 91 13 01 	lds	r24, 0x0113
    13d8:	86 30       	cpi	r24, 0x06	; 6
    13da:	09 f4       	brne	.+2      	; 0x13de <__vector_23+0x24a>
    13dc:	1b cf       	rjmp	.-458    	; 0x1214 <__vector_23+0x80>
                motors_on();
    13de:	53 9a       	sbi	0x0a, 3	; 10
    13e0:	23 9a       	sbi	0x04, 3	; 4
    13e2:	10 92 b4 00 	sts	0x00B4, r1
    13e6:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	80 93 13 01 	sts	0x0113, r24
    13f0:	11 cf       	rjmp	.-478    	; 0x1214 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    13f2:	80 91 13 01 	lds	r24, 0x0113
    13f6:	86 30       	cpi	r24, 0x06	; 6
    13f8:	99 f0       	breq	.+38     	; 0x1420 <__vector_23+0x28c>
                motors_on();
    13fa:	53 9a       	sbi	0x0a, 3	; 10
    13fc:	23 9a       	sbi	0x04, 3	; 4
    13fe:	10 92 b4 00 	sts	0x00B4, r1
    1402:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1406:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1408:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    140a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    140c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    140e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1410:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1412:	10 92 11 01 	sts	0x0111, r1
    1416:	10 92 12 01 	sts	0x0112, r1
                kilo_state = MOVING;
    141a:	86 e0       	ldi	r24, 0x06	; 6
    141c:	80 93 13 01 	sts	0x0113, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9c 01       	movw	r18, r24
    1426:	00 90 64 01 	lds	r0, 0x0164
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <__vector_23+0x29c>
    142c:	22 0f       	add	r18, r18
    142e:	33 1f       	adc	r19, r19
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <__vector_23+0x298>
    1434:	80 91 73 01 	lds	r24, 0x0173
    1438:	90 91 74 01 	lds	r25, 0x0174
    143c:	82 23       	and	r24, r18
    143e:	93 23       	and	r25, r19
    1440:	89 2b       	or	r24, r25
    1442:	09 f0       	breq	.+2      	; 0x1446 <__vector_23+0x2b2>
    1444:	86 c0       	rjmp	.+268    	; 0x1552 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1446:	10 92 11 01 	sts	0x0111, r1
    144a:	e4 ce       	rjmp	.-568    	; 0x1214 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	80 93 13 01 	sts	0x0113, r24
    1452:	e0 ce       	rjmp	.-576    	; 0x1214 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1454:	e0 e0       	ldi	r30, 0x00	; 0
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    145a:	80 91 6e 00 	lds	r24, 0x006E
    145e:	8d 7f       	andi	r24, 0xFD	; 253
    1460:	80 93 6e 00 	sts	0x006E, r24
    1464:	16 bc       	out	0x26, r1	; 38
            bootload();
    1466:	e0 e0       	ldi	r30, 0x00	; 0
    1468:	f0 e7       	ldi	r31, 0x70	; 112
    146a:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    146c:	10 92 13 01 	sts	0x0113, r1
    1470:	d1 ce       	rjmp	.-606    	; 0x1214 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	80 93 13 01 	sts	0x0113, r24
    1478:	cd ce       	rjmp	.-614    	; 0x1214 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    147a:	85 e0       	ldi	r24, 0x05	; 5
    147c:	80 93 13 01 	sts	0x0113, r24
    1480:	c9 ce       	rjmp	.-622    	; 0x1214 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1482:	80 91 13 01 	lds	r24, 0x0113
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	09 f4       	brne	.+2      	; 0x148c <__vector_23+0x2f8>
    148a:	c4 ce       	rjmp	.-632    	; 0x1214 <__vector_23+0x80>
    148c:	80 91 13 01 	lds	r24, 0x0113
    1490:	84 30       	cpi	r24, 0x04	; 4
    1492:	09 f4       	brne	.+2      	; 0x1496 <__vector_23+0x302>
    1494:	bf ce       	rjmp	.-642    	; 0x1214 <__vector_23+0x80>
                motors_on();
    1496:	53 9a       	sbi	0x0a, 3	; 10
    1498:	23 9a       	sbi	0x04, 3	; 4
    149a:	10 92 b4 00 	sts	0x00B4, r1
    149e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	80 93 13 01 	sts	0x0113, r24
    14a8:	b5 ce       	rjmp	.-662    	; 0x1214 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    14aa:	80 91 13 01 	lds	r24, 0x0113
    14ae:	86 30       	cpi	r24, 0x06	; 6
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <__vector_23+0x320>
    14b2:	b0 ce       	rjmp	.-672    	; 0x1214 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    14b4:	60 91 73 01 	lds	r22, 0x0173
    14b8:	80 eb       	ldi	r24, 0xB0	; 176
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    14c0:	60 91 74 01 	lds	r22, 0x0174
    14c4:	81 eb       	ldi	r24, 0xB1	; 177
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    14cc:	60 91 77 01 	lds	r22, 0x0177
    14d0:	85 e0       	ldi	r24, 0x05	; 5
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    14d8:	60 91 63 01 	lds	r22, 0x0163
    14dc:	89 e0       	ldi	r24, 0x09	; 9
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    14e4:	60 91 75 01 	lds	r22, 0x0175
    14e8:	8c e0       	ldi	r24, 0x0C	; 12
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    14f0:	60 91 76 01 	lds	r22, 0x0176
    14f4:	84 e1       	ldi	r24, 0x14	; 20
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <eeprom_write_byte>
                        motors_off();
    14fc:	53 98       	cbi	0x0a, 3	; 10
    14fe:	23 98       	cbi	0x04, 3	; 4
    1500:	10 92 b4 00 	sts	0x00B4, r1
    1504:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 93 13 01 	sts	0x0113, r24
    150e:	80 91 64 01 	lds	r24, 0x0164
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1512:	81 11       	cpse	r24, r1
    1514:	5f cf       	rjmp	.-322    	; 0x13d4 <__vector_23+0x240>
    1516:	7e ce       	rjmp	.-772    	; 0x1214 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1518:	88 23       	and	r24, r24
    151a:	39 f2       	breq	.-114    	; 0x14aa <__vector_23+0x316>
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1520:	80 91 65 01 	lds	r24, 0x0165
    1524:	90 91 66 01 	lds	r25, 0x0166
    1528:	90 93 74 01 	sts	0x0174, r25
    152c:	80 93 73 01 	sts	0x0173, r24
                    cur_motion = MOVE_STOP;
    1530:	10 92 11 01 	sts	0x0111, r1
    1534:	4f cf       	rjmp	.-354    	; 0x13d4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1536:	80 91 11 01 	lds	r24, 0x0111
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	71 f1       	breq	.+92     	; 0x159a <__vector_23+0x406>
    153e:	80 91 68 01 	lds	r24, 0x0168
                        prev_motion = MOVE_STOP;
    1542:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_RIGHT;
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_right = calibmsg->turn_right;
    154c:	80 93 63 01 	sts	0x0163, r24
    1550:	41 cf       	rjmp	.-382    	; 0x13d4 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 11 01 	sts	0x0111, r24
    1558:	5d ce       	rjmp	.-838    	; 0x1214 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    155a:	80 91 11 01 	lds	r24, 0x0111
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	51 f0       	breq	.+20     	; 0x1576 <__vector_23+0x3e2>
    1562:	80 91 67 01 	lds	r24, 0x0167
                        prev_motion = MOVE_STOP;
    1566:	10 92 12 01 	sts	0x0112, r1
                        cur_motion = MOVE_LEFT;
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	90 93 11 01 	sts	0x0111, r25
                        kilo_turn_left = calibmsg->turn_left;
    1570:	80 93 77 01 	sts	0x0177, r24
    1574:	2f cf       	rjmp	.-418    	; 0x13d4 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1576:	80 91 67 01 	lds	r24, 0x0167
    157a:	90 91 77 01 	lds	r25, 0x0177
    157e:	89 13       	cpse	r24, r25
    1580:	f2 cf       	rjmp	.-28     	; 0x1566 <__vector_23+0x3d2>
    1582:	28 cf       	rjmp	.-432    	; 0x13d4 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1584:	80 91 76 01 	lds	r24, 0x0176
    1588:	98 13       	cpse	r25, r24
    158a:	19 cf       	rjmp	.-462    	; 0x13be <__vector_23+0x22a>
    158c:	80 91 69 01 	lds	r24, 0x0169
    1590:	20 91 75 01 	lds	r18, 0x0175
    1594:	82 13       	cpse	r24, r18
    1596:	15 cf       	rjmp	.-470    	; 0x13c2 <__vector_23+0x22e>
    1598:	1d cf       	rjmp	.-454    	; 0x13d4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    159a:	80 91 68 01 	lds	r24, 0x0168
    159e:	90 91 63 01 	lds	r25, 0x0163
    15a2:	89 13       	cpse	r24, r25
    15a4:	ce cf       	rjmp	.-100    	; 0x1542 <__vector_23+0x3ae>
    15a6:	16 cf       	rjmp	.-468    	; 0x13d4 <__vector_23+0x240>

000015a8 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    15a8:	fc 01       	movw	r30, r24
    15aa:	ac 01       	movw	r20, r24
    15ac:	46 5f       	subi	r20, 0xF6	; 246
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    15b4:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    15b6:	82 27       	eor	r24, r18
    15b8:	08 2e       	mov	r0, r24
    15ba:	82 95       	swap	r24
    15bc:	80 7f       	andi	r24, 0xF0	; 240
    15be:	80 25       	eor	r24, r0
    15c0:	09 2e       	mov	r0, r25
    15c2:	98 2f       	mov	r25, r24
    15c4:	82 95       	swap	r24
    15c6:	8f 70       	andi	r24, 0x0F	; 15
    15c8:	08 26       	eor	r0, r24
    15ca:	86 95       	lsr	r24
    15cc:	98 27       	eor	r25, r24
    15ce:	89 27       	eor	r24, r25
    15d0:	88 0f       	add	r24, r24
    15d2:	88 0f       	add	r24, r24
    15d4:	88 0f       	add	r24, r24
    15d6:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    15d8:	e4 17       	cp	r30, r20
    15da:	f5 07       	cpc	r31, r21
    15dc:	59 f7       	brne	.-42     	; 0x15b4 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    15de:	08 95       	ret

000015e0 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    15e0:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    15e2:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    15e4:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    15e6:	20 91 37 01 	lds	r18, 0x0137
    or tmpreg1, ddrreg
    15ea:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    15ec:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    15ee:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    15f0:	30 91 37 01 	lds	r19, 0x0137
    15f4:	20 30       	cpi	r18, 0x00	; 0
    15f6:	29 f0       	breq	.+10     	; 0x1602 <message_send+0x22>
    15f8:	00 00       	nop
    15fa:	25 b1       	in	r18, 0x05	; 5
    15fc:	23 2b       	or	r18, r19
    15fe:	25 b9       	out	0x05, r18	; 5
    1600:	04 c0       	rjmp	.+8      	; 0x160a <message_send+0x2a>
    1602:	00 00       	nop
    1604:	00 00       	nop
    1606:	00 00       	nop
    1608:	00 c0       	rjmp	.+0      	; 0x160a <message_send+0x2a>
    160a:	00 00       	nop
    160c:	00 00       	nop
    160e:	00 00       	nop
    1610:	30 95       	com	r19
    1612:	25 b1       	in	r18, 0x05	; 5
    1614:	23 23       	and	r18, r19
    1616:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1618:	2e ea       	ldi	r18, 0xAE	; 174
    161a:	2a 95       	dec	r18
    161c:	f1 f7       	brne	.-4      	; 0x161a <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    161e:	2b ee       	ldi	r18, 0xEB	; 235

00001620 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1620:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1622:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1624:	0a c0       	rjmp	.+20     	; 0x163a <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1626:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1628:	30 91 37 01 	lds	r19, 0x0137
    com tmpreg2
    162c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    162e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1630:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1632:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1634:	0f be       	out	0x3f, r0	; 63
    return 0
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	08 95       	ret

0000163a <nocollision>:
nocollision:
    nop
    163a:	00 00       	nop
    dec tmpreg1
    163c:	2a 95       	dec	r18
    brne checkcollision
    163e:	81 f7       	brne	.-32     	; 0x1620 <checkcollision>

    ldi tmpreg1, 0x01
    1640:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1642:	30 91 37 01 	lds	r19, 0x0137
    1646:	20 30       	cpi	r18, 0x00	; 0
    1648:	29 f0       	breq	.+10     	; 0x1654 <nocollision+0x1a>
    164a:	00 00       	nop
    164c:	25 b1       	in	r18, 0x05	; 5
    164e:	23 2b       	or	r18, r19
    1650:	25 b9       	out	0x05, r18	; 5
    1652:	04 c0       	rjmp	.+8      	; 0x165c <nocollision+0x22>
    1654:	00 00       	nop
    1656:	00 00       	nop
    1658:	00 00       	nop
    165a:	00 c0       	rjmp	.+0      	; 0x165c <nocollision+0x22>
    165c:	00 00       	nop
    165e:	00 00       	nop
    1660:	00 00       	nop
    1662:	30 95       	com	r19
    1664:	25 b1       	in	r18, 0x05	; 5
    1666:	23 23       	and	r18, r19
    1668:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    166a:	00 00       	nop
    166c:	24 e5       	ldi	r18, 0x54	; 84
    166e:	2a 95       	dec	r18
    1670:	f1 f7       	brne	.-4      	; 0x166e <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1672:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1674:	8c e0       	ldi	r24, 0x0C	; 12

00001676 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1676:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1678:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    167a:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    167c:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    167e:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1680:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1682:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1684:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1686:	50 e0       	ldi	r21, 0x00	; 0

00001688 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1688:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    168a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    168c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    168e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1690:	30 91 37 01 	lds	r19, 0x0137
    1694:	20 30       	cpi	r18, 0x00	; 0
    1696:	29 f0       	breq	.+10     	; 0x16a2 <sendbit+0x1a>
    1698:	00 00       	nop
    169a:	25 b1       	in	r18, 0x05	; 5
    169c:	23 2b       	or	r18, r19
    169e:	25 b9       	out	0x05, r18	; 5
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <sendbit+0x22>
    16a2:	00 00       	nop
    16a4:	00 00       	nop
    16a6:	00 00       	nop
    16a8:	00 c0       	rjmp	.+0      	; 0x16aa <sendbit+0x22>
    16aa:	00 00       	nop
    16ac:	00 00       	nop
    16ae:	00 00       	nop
    16b0:	30 95       	com	r19
    16b2:	25 b1       	in	r18, 0x05	; 5
    16b4:	23 23       	and	r18, r19
    16b6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    16b8:	00 00       	nop
    16ba:	21 e5       	ldi	r18, 0x51	; 81
    16bc:	2a 95       	dec	r18
    16be:	f1 f7       	brne	.-4      	; 0x16bc <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    16c0:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    16c2:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    16c4:	9a 95       	dec	r25
    brne sendbit
    16c6:	01 f7       	brne	.-64     	; 0x1688 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    16c8:	8a 95       	dec	r24
    brne sendbyte
    16ca:	a9 f6       	brne	.-86     	; 0x1676 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    16cc:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    16ce:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    16d0:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    16d2:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    16d4:	30 91 37 01 	lds	r19, 0x0137
    com tmpreg2
    16d8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    16da:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    16dc:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    16de:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    16e0:	0f be       	out	0x3f, r0	; 63
    return 1
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	08 95       	ret

000016e6 <main>:

}

int main()
{
  kilo_init();
    16e6:	0e 94 04 02 	call	0x408	; 0x408 <kilo_init>
  kilo_start(setup, loop);
    16ea:	62 e8       	ldi	r22, 0x82	; 130
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	81 e7       	ldi	r24, 0x71	; 113
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 00 03 	call	0x600	; 0x600 <kilo_start>
    
  return 0;
}
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	08 95       	ret

000016fc <__divmodhi4>:
    16fc:	97 fb       	bst	r25, 7
    16fe:	07 2e       	mov	r0, r23
    1700:	16 f4       	brtc	.+4      	; 0x1706 <__divmodhi4+0xa>
    1702:	00 94       	com	r0
    1704:	07 d0       	rcall	.+14     	; 0x1714 <__divmodhi4_neg1>
    1706:	77 fd       	sbrc	r23, 7
    1708:	09 d0       	rcall	.+18     	; 0x171c <__divmodhi4_neg2>
    170a:	0e 94 a7 0b 	call	0x174e	; 0x174e <__udivmodhi4>
    170e:	07 fc       	sbrc	r0, 7
    1710:	05 d0       	rcall	.+10     	; 0x171c <__divmodhi4_neg2>
    1712:	3e f4       	brtc	.+14     	; 0x1722 <__divmodhi4_exit>

00001714 <__divmodhi4_neg1>:
    1714:	90 95       	com	r25
    1716:	81 95       	neg	r24
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	08 95       	ret

0000171c <__divmodhi4_neg2>:
    171c:	70 95       	com	r23
    171e:	61 95       	neg	r22
    1720:	7f 4f       	sbci	r23, 0xFF	; 255

00001722 <__divmodhi4_exit>:
    1722:	08 95       	ret

00001724 <__tablejump2__>:
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	05 90       	lpm	r0, Z+
    172a:	f4 91       	lpm	r31, Z
    172c:	e0 2d       	mov	r30, r0
    172e:	09 94       	ijmp

00001730 <__umulhisi3>:
    1730:	a2 9f       	mul	r26, r18
    1732:	b0 01       	movw	r22, r0
    1734:	b3 9f       	mul	r27, r19
    1736:	c0 01       	movw	r24, r0
    1738:	a3 9f       	mul	r26, r19
    173a:	70 0d       	add	r23, r0
    173c:	81 1d       	adc	r24, r1
    173e:	11 24       	eor	r1, r1
    1740:	91 1d       	adc	r25, r1
    1742:	b2 9f       	mul	r27, r18
    1744:	70 0d       	add	r23, r0
    1746:	81 1d       	adc	r24, r1
    1748:	11 24       	eor	r1, r1
    174a:	91 1d       	adc	r25, r1
    174c:	08 95       	ret

0000174e <__udivmodhi4>:
    174e:	aa 1b       	sub	r26, r26
    1750:	bb 1b       	sub	r27, r27
    1752:	51 e1       	ldi	r21, 0x11	; 17
    1754:	07 c0       	rjmp	.+14     	; 0x1764 <__udivmodhi4_ep>

00001756 <__udivmodhi4_loop>:
    1756:	aa 1f       	adc	r26, r26
    1758:	bb 1f       	adc	r27, r27
    175a:	a6 17       	cp	r26, r22
    175c:	b7 07       	cpc	r27, r23
    175e:	10 f0       	brcs	.+4      	; 0x1764 <__udivmodhi4_ep>
    1760:	a6 1b       	sub	r26, r22
    1762:	b7 0b       	sbc	r27, r23

00001764 <__udivmodhi4_ep>:
    1764:	88 1f       	adc	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	5a 95       	dec	r21
    176a:	a9 f7       	brne	.-22     	; 0x1756 <__udivmodhi4_loop>
    176c:	80 95       	com	r24
    176e:	90 95       	com	r25
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	08 95       	ret

00001776 <__subsf3>:
    1776:	50 58       	subi	r21, 0x80	; 128

00001778 <__addsf3>:
    1778:	bb 27       	eor	r27, r27
    177a:	aa 27       	eor	r26, r26
    177c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__addsf3x>
    1780:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_round>
    1784:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fp_pscA>
    1788:	38 f0       	brcs	.+14     	; 0x1798 <__addsf3+0x20>
    178a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fp_pscB>
    178e:	20 f0       	brcs	.+8      	; 0x1798 <__addsf3+0x20>
    1790:	39 f4       	brne	.+14     	; 0x17a0 <__addsf3+0x28>
    1792:	9f 3f       	cpi	r25, 0xFF	; 255
    1794:	19 f4       	brne	.+6      	; 0x179c <__addsf3+0x24>
    1796:	26 f4       	brtc	.+8      	; 0x17a0 <__addsf3+0x28>
    1798:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__fp_nan>
    179c:	0e f4       	brtc	.+2      	; 0x17a0 <__addsf3+0x28>
    179e:	e0 95       	com	r30
    17a0:	e7 fb       	bst	r30, 7
    17a2:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_inf>

000017a6 <__addsf3x>:
    17a6:	e9 2f       	mov	r30, r25
    17a8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_split3>
    17ac:	58 f3       	brcs	.-42     	; 0x1784 <__addsf3+0xc>
    17ae:	ba 17       	cp	r27, r26
    17b0:	62 07       	cpc	r22, r18
    17b2:	73 07       	cpc	r23, r19
    17b4:	84 07       	cpc	r24, r20
    17b6:	95 07       	cpc	r25, r21
    17b8:	20 f0       	brcs	.+8      	; 0x17c2 <__addsf3x+0x1c>
    17ba:	79 f4       	brne	.+30     	; 0x17da <__addsf3x+0x34>
    17bc:	a6 f5       	brtc	.+104    	; 0x1826 <__addsf3x+0x80>
    17be:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_zero>
    17c2:	0e f4       	brtc	.+2      	; 0x17c6 <__addsf3x+0x20>
    17c4:	e0 95       	com	r30
    17c6:	0b 2e       	mov	r0, r27
    17c8:	ba 2f       	mov	r27, r26
    17ca:	a0 2d       	mov	r26, r0
    17cc:	0b 01       	movw	r0, r22
    17ce:	b9 01       	movw	r22, r18
    17d0:	90 01       	movw	r18, r0
    17d2:	0c 01       	movw	r0, r24
    17d4:	ca 01       	movw	r24, r20
    17d6:	a0 01       	movw	r20, r0
    17d8:	11 24       	eor	r1, r1
    17da:	ff 27       	eor	r31, r31
    17dc:	59 1b       	sub	r21, r25
    17de:	99 f0       	breq	.+38     	; 0x1806 <__addsf3x+0x60>
    17e0:	59 3f       	cpi	r21, 0xF9	; 249
    17e2:	50 f4       	brcc	.+20     	; 0x17f8 <__addsf3x+0x52>
    17e4:	50 3e       	cpi	r21, 0xE0	; 224
    17e6:	68 f1       	brcs	.+90     	; 0x1842 <__addsf3x+0x9c>
    17e8:	1a 16       	cp	r1, r26
    17ea:	f0 40       	sbci	r31, 0x00	; 0
    17ec:	a2 2f       	mov	r26, r18
    17ee:	23 2f       	mov	r18, r19
    17f0:	34 2f       	mov	r19, r20
    17f2:	44 27       	eor	r20, r20
    17f4:	58 5f       	subi	r21, 0xF8	; 248
    17f6:	f3 cf       	rjmp	.-26     	; 0x17de <__addsf3x+0x38>
    17f8:	46 95       	lsr	r20
    17fa:	37 95       	ror	r19
    17fc:	27 95       	ror	r18
    17fe:	a7 95       	ror	r26
    1800:	f0 40       	sbci	r31, 0x00	; 0
    1802:	53 95       	inc	r21
    1804:	c9 f7       	brne	.-14     	; 0x17f8 <__addsf3x+0x52>
    1806:	7e f4       	brtc	.+30     	; 0x1826 <__addsf3x+0x80>
    1808:	1f 16       	cp	r1, r31
    180a:	ba 0b       	sbc	r27, r26
    180c:	62 0b       	sbc	r22, r18
    180e:	73 0b       	sbc	r23, r19
    1810:	84 0b       	sbc	r24, r20
    1812:	ba f0       	brmi	.+46     	; 0x1842 <__addsf3x+0x9c>
    1814:	91 50       	subi	r25, 0x01	; 1
    1816:	a1 f0       	breq	.+40     	; 0x1840 <__addsf3x+0x9a>
    1818:	ff 0f       	add	r31, r31
    181a:	bb 1f       	adc	r27, r27
    181c:	66 1f       	adc	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	88 1f       	adc	r24, r24
    1822:	c2 f7       	brpl	.-16     	; 0x1814 <__addsf3x+0x6e>
    1824:	0e c0       	rjmp	.+28     	; 0x1842 <__addsf3x+0x9c>
    1826:	ba 0f       	add	r27, r26
    1828:	62 1f       	adc	r22, r18
    182a:	73 1f       	adc	r23, r19
    182c:	84 1f       	adc	r24, r20
    182e:	48 f4       	brcc	.+18     	; 0x1842 <__addsf3x+0x9c>
    1830:	87 95       	ror	r24
    1832:	77 95       	ror	r23
    1834:	67 95       	ror	r22
    1836:	b7 95       	ror	r27
    1838:	f7 95       	ror	r31
    183a:	9e 3f       	cpi	r25, 0xFE	; 254
    183c:	08 f0       	brcs	.+2      	; 0x1840 <__addsf3x+0x9a>
    183e:	b0 cf       	rjmp	.-160    	; 0x17a0 <__addsf3+0x28>
    1840:	93 95       	inc	r25
    1842:	88 0f       	add	r24, r24
    1844:	08 f0       	brcs	.+2      	; 0x1848 <__addsf3x+0xa2>
    1846:	99 27       	eor	r25, r25
    1848:	ee 0f       	add	r30, r30
    184a:	97 95       	ror	r25
    184c:	87 95       	ror	r24
    184e:	08 95       	ret

00001850 <__divsf3>:
    1850:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divsf3x>
    1854:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_round>
    1858:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fp_pscB>
    185c:	58 f0       	brcs	.+22     	; 0x1874 <__divsf3+0x24>
    185e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fp_pscA>
    1862:	40 f0       	brcs	.+16     	; 0x1874 <__divsf3+0x24>
    1864:	29 f4       	brne	.+10     	; 0x1870 <__divsf3+0x20>
    1866:	5f 3f       	cpi	r21, 0xFF	; 255
    1868:	29 f0       	breq	.+10     	; 0x1874 <__divsf3+0x24>
    186a:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_inf>
    186e:	51 11       	cpse	r21, r1
    1870:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__fp_szero>
    1874:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__fp_nan>

00001878 <__divsf3x>:
    1878:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_split3>
    187c:	68 f3       	brcs	.-38     	; 0x1858 <__divsf3+0x8>

0000187e <__divsf3_pse>:
    187e:	99 23       	and	r25, r25
    1880:	b1 f3       	breq	.-20     	; 0x186e <__divsf3+0x1e>
    1882:	55 23       	and	r21, r21
    1884:	91 f3       	breq	.-28     	; 0x186a <__divsf3+0x1a>
    1886:	95 1b       	sub	r25, r21
    1888:	55 0b       	sbc	r21, r21
    188a:	bb 27       	eor	r27, r27
    188c:	aa 27       	eor	r26, r26
    188e:	62 17       	cp	r22, r18
    1890:	73 07       	cpc	r23, r19
    1892:	84 07       	cpc	r24, r20
    1894:	38 f0       	brcs	.+14     	; 0x18a4 <__divsf3_pse+0x26>
    1896:	9f 5f       	subi	r25, 0xFF	; 255
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	22 0f       	add	r18, r18
    189c:	33 1f       	adc	r19, r19
    189e:	44 1f       	adc	r20, r20
    18a0:	aa 1f       	adc	r26, r26
    18a2:	a9 f3       	breq	.-22     	; 0x188e <__divsf3_pse+0x10>
    18a4:	35 d0       	rcall	.+106    	; 0x1910 <__divsf3_pse+0x92>
    18a6:	0e 2e       	mov	r0, r30
    18a8:	3a f0       	brmi	.+14     	; 0x18b8 <__divsf3_pse+0x3a>
    18aa:	e0 e8       	ldi	r30, 0x80	; 128
    18ac:	32 d0       	rcall	.+100    	; 0x1912 <__divsf3_pse+0x94>
    18ae:	91 50       	subi	r25, 0x01	; 1
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	e6 95       	lsr	r30
    18b4:	00 1c       	adc	r0, r0
    18b6:	ca f7       	brpl	.-14     	; 0x18aa <__divsf3_pse+0x2c>
    18b8:	2b d0       	rcall	.+86     	; 0x1910 <__divsf3_pse+0x92>
    18ba:	fe 2f       	mov	r31, r30
    18bc:	29 d0       	rcall	.+82     	; 0x1910 <__divsf3_pse+0x92>
    18be:	66 0f       	add	r22, r22
    18c0:	77 1f       	adc	r23, r23
    18c2:	88 1f       	adc	r24, r24
    18c4:	bb 1f       	adc	r27, r27
    18c6:	26 17       	cp	r18, r22
    18c8:	37 07       	cpc	r19, r23
    18ca:	48 07       	cpc	r20, r24
    18cc:	ab 07       	cpc	r26, r27
    18ce:	b0 e8       	ldi	r27, 0x80	; 128
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <__divsf3_pse+0x56>
    18d2:	bb 0b       	sbc	r27, r27
    18d4:	80 2d       	mov	r24, r0
    18d6:	bf 01       	movw	r22, r30
    18d8:	ff 27       	eor	r31, r31
    18da:	93 58       	subi	r25, 0x83	; 131
    18dc:	5f 4f       	sbci	r21, 0xFF	; 255
    18de:	3a f0       	brmi	.+14     	; 0x18ee <__divsf3_pse+0x70>
    18e0:	9e 3f       	cpi	r25, 0xFE	; 254
    18e2:	51 05       	cpc	r21, r1
    18e4:	78 f0       	brcs	.+30     	; 0x1904 <__divsf3_pse+0x86>
    18e6:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_inf>
    18ea:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__fp_szero>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	e4 f3       	brlt	.-8      	; 0x18ea <__divsf3_pse+0x6c>
    18f2:	98 3e       	cpi	r25, 0xE8	; 232
    18f4:	d4 f3       	brlt	.-12     	; 0x18ea <__divsf3_pse+0x6c>
    18f6:	86 95       	lsr	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b7 95       	ror	r27
    18fe:	f7 95       	ror	r31
    1900:	9f 5f       	subi	r25, 0xFF	; 255
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__divsf3_pse+0x78>
    1904:	88 0f       	add	r24, r24
    1906:	91 1d       	adc	r25, r1
    1908:	96 95       	lsr	r25
    190a:	87 95       	ror	r24
    190c:	97 f9       	bld	r25, 7
    190e:	08 95       	ret
    1910:	e1 e0       	ldi	r30, 0x01	; 1
    1912:	66 0f       	add	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	bb 1f       	adc	r27, r27
    191a:	62 17       	cp	r22, r18
    191c:	73 07       	cpc	r23, r19
    191e:	84 07       	cpc	r24, r20
    1920:	ba 07       	cpc	r27, r26
    1922:	20 f0       	brcs	.+8      	; 0x192c <__divsf3_pse+0xae>
    1924:	62 1b       	sub	r22, r18
    1926:	73 0b       	sbc	r23, r19
    1928:	84 0b       	sbc	r24, r20
    192a:	ba 0b       	sbc	r27, r26
    192c:	ee 1f       	adc	r30, r30
    192e:	88 f7       	brcc	.-30     	; 0x1912 <__divsf3_pse+0x94>
    1930:	e0 95       	com	r30
    1932:	08 95       	ret

00001934 <__fixsfsi>:
    1934:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fixunssfsi>
    1938:	68 94       	set
    193a:	b1 11       	cpse	r27, r1
    193c:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__fp_szero>
    1940:	08 95       	ret

00001942 <__fixunssfsi>:
    1942:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__fp_splitA>
    1946:	88 f0       	brcs	.+34     	; 0x196a <__fixunssfsi+0x28>
    1948:	9f 57       	subi	r25, 0x7F	; 127
    194a:	98 f0       	brcs	.+38     	; 0x1972 <__fixunssfsi+0x30>
    194c:	b9 2f       	mov	r27, r25
    194e:	99 27       	eor	r25, r25
    1950:	b7 51       	subi	r27, 0x17	; 23
    1952:	b0 f0       	brcs	.+44     	; 0x1980 <__fixunssfsi+0x3e>
    1954:	e1 f0       	breq	.+56     	; 0x198e <__fixunssfsi+0x4c>
    1956:	66 0f       	add	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	88 1f       	adc	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	1a f0       	brmi	.+6      	; 0x1966 <__fixunssfsi+0x24>
    1960:	ba 95       	dec	r27
    1962:	c9 f7       	brne	.-14     	; 0x1956 <__fixunssfsi+0x14>
    1964:	14 c0       	rjmp	.+40     	; 0x198e <__fixunssfsi+0x4c>
    1966:	b1 30       	cpi	r27, 0x01	; 1
    1968:	91 f0       	breq	.+36     	; 0x198e <__fixunssfsi+0x4c>
    196a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_zero>
    196e:	b1 e0       	ldi	r27, 0x01	; 1
    1970:	08 95       	ret
    1972:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_zero>
    1976:	67 2f       	mov	r22, r23
    1978:	78 2f       	mov	r23, r24
    197a:	88 27       	eor	r24, r24
    197c:	b8 5f       	subi	r27, 0xF8	; 248
    197e:	39 f0       	breq	.+14     	; 0x198e <__fixunssfsi+0x4c>
    1980:	b9 3f       	cpi	r27, 0xF9	; 249
    1982:	cc f3       	brlt	.-14     	; 0x1976 <__fixunssfsi+0x34>
    1984:	86 95       	lsr	r24
    1986:	77 95       	ror	r23
    1988:	67 95       	ror	r22
    198a:	b3 95       	inc	r27
    198c:	d9 f7       	brne	.-10     	; 0x1984 <__fixunssfsi+0x42>
    198e:	3e f4       	brtc	.+14     	; 0x199e <__fixunssfsi+0x5c>
    1990:	90 95       	com	r25
    1992:	80 95       	com	r24
    1994:	70 95       	com	r23
    1996:	61 95       	neg	r22
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	08 95       	ret

000019a0 <__floatunsisf>:
    19a0:	e8 94       	clt
    19a2:	09 c0       	rjmp	.+18     	; 0x19b6 <__floatsisf+0x12>

000019a4 <__floatsisf>:
    19a4:	97 fb       	bst	r25, 7
    19a6:	3e f4       	brtc	.+14     	; 0x19b6 <__floatsisf+0x12>
    19a8:	90 95       	com	r25
    19aa:	80 95       	com	r24
    19ac:	70 95       	com	r23
    19ae:	61 95       	neg	r22
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255
    19b2:	8f 4f       	sbci	r24, 0xFF	; 255
    19b4:	9f 4f       	sbci	r25, 0xFF	; 255
    19b6:	99 23       	and	r25, r25
    19b8:	a9 f0       	breq	.+42     	; 0x19e4 <__floatsisf+0x40>
    19ba:	f9 2f       	mov	r31, r25
    19bc:	96 e9       	ldi	r25, 0x96	; 150
    19be:	bb 27       	eor	r27, r27
    19c0:	93 95       	inc	r25
    19c2:	f6 95       	lsr	r31
    19c4:	87 95       	ror	r24
    19c6:	77 95       	ror	r23
    19c8:	67 95       	ror	r22
    19ca:	b7 95       	ror	r27
    19cc:	f1 11       	cpse	r31, r1
    19ce:	f8 cf       	rjmp	.-16     	; 0x19c0 <__floatsisf+0x1c>
    19d0:	fa f4       	brpl	.+62     	; 0x1a10 <__floatsisf+0x6c>
    19d2:	bb 0f       	add	r27, r27
    19d4:	11 f4       	brne	.+4      	; 0x19da <__floatsisf+0x36>
    19d6:	60 ff       	sbrs	r22, 0
    19d8:	1b c0       	rjmp	.+54     	; 0x1a10 <__floatsisf+0x6c>
    19da:	6f 5f       	subi	r22, 0xFF	; 255
    19dc:	7f 4f       	sbci	r23, 0xFF	; 255
    19de:	8f 4f       	sbci	r24, 0xFF	; 255
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	16 c0       	rjmp	.+44     	; 0x1a10 <__floatsisf+0x6c>
    19e4:	88 23       	and	r24, r24
    19e6:	11 f0       	breq	.+4      	; 0x19ec <__floatsisf+0x48>
    19e8:	96 e9       	ldi	r25, 0x96	; 150
    19ea:	11 c0       	rjmp	.+34     	; 0x1a0e <__floatsisf+0x6a>
    19ec:	77 23       	and	r23, r23
    19ee:	21 f0       	breq	.+8      	; 0x19f8 <__floatsisf+0x54>
    19f0:	9e e8       	ldi	r25, 0x8E	; 142
    19f2:	87 2f       	mov	r24, r23
    19f4:	76 2f       	mov	r23, r22
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <__floatsisf+0x5e>
    19f8:	66 23       	and	r22, r22
    19fa:	71 f0       	breq	.+28     	; 0x1a18 <__floatsisf+0x74>
    19fc:	96 e8       	ldi	r25, 0x86	; 134
    19fe:	86 2f       	mov	r24, r22
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	2a f0       	brmi	.+10     	; 0x1a10 <__floatsisf+0x6c>
    1a06:	9a 95       	dec	r25
    1a08:	66 0f       	add	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	da f7       	brpl	.-10     	; 0x1a06 <__floatsisf+0x62>
    1a10:	88 0f       	add	r24, r24
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	97 f9       	bld	r25, 7
    1a18:	08 95       	ret

00001a1a <__fp_inf>:
    1a1a:	97 f9       	bld	r25, 7
    1a1c:	9f 67       	ori	r25, 0x7F	; 127
    1a1e:	80 e8       	ldi	r24, 0x80	; 128
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	08 95       	ret

00001a26 <__fp_nan>:
    1a26:	9f ef       	ldi	r25, 0xFF	; 255
    1a28:	80 ec       	ldi	r24, 0xC0	; 192
    1a2a:	08 95       	ret

00001a2c <__fp_pscA>:
    1a2c:	00 24       	eor	r0, r0
    1a2e:	0a 94       	dec	r0
    1a30:	16 16       	cp	r1, r22
    1a32:	17 06       	cpc	r1, r23
    1a34:	18 06       	cpc	r1, r24
    1a36:	09 06       	cpc	r0, r25
    1a38:	08 95       	ret

00001a3a <__fp_pscB>:
    1a3a:	00 24       	eor	r0, r0
    1a3c:	0a 94       	dec	r0
    1a3e:	12 16       	cp	r1, r18
    1a40:	13 06       	cpc	r1, r19
    1a42:	14 06       	cpc	r1, r20
    1a44:	05 06       	cpc	r0, r21
    1a46:	08 95       	ret

00001a48 <__fp_round>:
    1a48:	09 2e       	mov	r0, r25
    1a4a:	03 94       	inc	r0
    1a4c:	00 0c       	add	r0, r0
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <__fp_round+0xc>
    1a50:	88 23       	and	r24, r24
    1a52:	52 f0       	brmi	.+20     	; 0x1a68 <__fp_round+0x20>
    1a54:	bb 0f       	add	r27, r27
    1a56:	40 f4       	brcc	.+16     	; 0x1a68 <__fp_round+0x20>
    1a58:	bf 2b       	or	r27, r31
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <__fp_round+0x18>
    1a5c:	60 ff       	sbrs	r22, 0
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <__fp_round+0x20>
    1a60:	6f 5f       	subi	r22, 0xFF	; 255
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	8f 4f       	sbci	r24, 0xFF	; 255
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	08 95       	ret

00001a6a <__fp_split3>:
    1a6a:	57 fd       	sbrc	r21, 7
    1a6c:	90 58       	subi	r25, 0x80	; 128
    1a6e:	44 0f       	add	r20, r20
    1a70:	55 1f       	adc	r21, r21
    1a72:	59 f0       	breq	.+22     	; 0x1a8a <__fp_splitA+0x10>
    1a74:	5f 3f       	cpi	r21, 0xFF	; 255
    1a76:	71 f0       	breq	.+28     	; 0x1a94 <__fp_splitA+0x1a>
    1a78:	47 95       	ror	r20

00001a7a <__fp_splitA>:
    1a7a:	88 0f       	add	r24, r24
    1a7c:	97 fb       	bst	r25, 7
    1a7e:	99 1f       	adc	r25, r25
    1a80:	61 f0       	breq	.+24     	; 0x1a9a <__fp_splitA+0x20>
    1a82:	9f 3f       	cpi	r25, 0xFF	; 255
    1a84:	79 f0       	breq	.+30     	; 0x1aa4 <__fp_splitA+0x2a>
    1a86:	87 95       	ror	r24
    1a88:	08 95       	ret
    1a8a:	12 16       	cp	r1, r18
    1a8c:	13 06       	cpc	r1, r19
    1a8e:	14 06       	cpc	r1, r20
    1a90:	55 1f       	adc	r21, r21
    1a92:	f2 cf       	rjmp	.-28     	; 0x1a78 <__fp_split3+0xe>
    1a94:	46 95       	lsr	r20
    1a96:	f1 df       	rcall	.-30     	; 0x1a7a <__fp_splitA>
    1a98:	08 c0       	rjmp	.+16     	; 0x1aaa <__fp_splitA+0x30>
    1a9a:	16 16       	cp	r1, r22
    1a9c:	17 06       	cpc	r1, r23
    1a9e:	18 06       	cpc	r1, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	f1 cf       	rjmp	.-30     	; 0x1a86 <__fp_splitA+0xc>
    1aa4:	86 95       	lsr	r24
    1aa6:	71 05       	cpc	r23, r1
    1aa8:	61 05       	cpc	r22, r1
    1aaa:	08 94       	sec
    1aac:	08 95       	ret

00001aae <__fp_zero>:
    1aae:	e8 94       	clt

00001ab0 <__fp_szero>:
    1ab0:	bb 27       	eor	r27, r27
    1ab2:	66 27       	eor	r22, r22
    1ab4:	77 27       	eor	r23, r23
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	97 f9       	bld	r25, 7
    1aba:	08 95       	ret

00001abc <__mulsf3>:
    1abc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__mulsf3x>
    1ac0:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_round>
    1ac4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fp_pscA>
    1ac8:	38 f0       	brcs	.+14     	; 0x1ad8 <__mulsf3+0x1c>
    1aca:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fp_pscB>
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <__mulsf3+0x1c>
    1ad0:	95 23       	and	r25, r21
    1ad2:	11 f0       	breq	.+4      	; 0x1ad8 <__mulsf3+0x1c>
    1ad4:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_inf>
    1ad8:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__fp_nan>
    1adc:	11 24       	eor	r1, r1
    1ade:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__fp_szero>

00001ae2 <__mulsf3x>:
    1ae2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fp_split3>
    1ae6:	70 f3       	brcs	.-36     	; 0x1ac4 <__mulsf3+0x8>

00001ae8 <__mulsf3_pse>:
    1ae8:	95 9f       	mul	r25, r21
    1aea:	c1 f3       	breq	.-16     	; 0x1adc <__mulsf3+0x20>
    1aec:	95 0f       	add	r25, r21
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	55 1f       	adc	r21, r21
    1af2:	62 9f       	mul	r22, r18
    1af4:	f0 01       	movw	r30, r0
    1af6:	72 9f       	mul	r23, r18
    1af8:	bb 27       	eor	r27, r27
    1afa:	f0 0d       	add	r31, r0
    1afc:	b1 1d       	adc	r27, r1
    1afe:	63 9f       	mul	r22, r19
    1b00:	aa 27       	eor	r26, r26
    1b02:	f0 0d       	add	r31, r0
    1b04:	b1 1d       	adc	r27, r1
    1b06:	aa 1f       	adc	r26, r26
    1b08:	64 9f       	mul	r22, r20
    1b0a:	66 27       	eor	r22, r22
    1b0c:	b0 0d       	add	r27, r0
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	66 1f       	adc	r22, r22
    1b12:	82 9f       	mul	r24, r18
    1b14:	22 27       	eor	r18, r18
    1b16:	b0 0d       	add	r27, r0
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	62 1f       	adc	r22, r18
    1b1c:	73 9f       	mul	r23, r19
    1b1e:	b0 0d       	add	r27, r0
    1b20:	a1 1d       	adc	r26, r1
    1b22:	62 1f       	adc	r22, r18
    1b24:	83 9f       	mul	r24, r19
    1b26:	a0 0d       	add	r26, r0
    1b28:	61 1d       	adc	r22, r1
    1b2a:	22 1f       	adc	r18, r18
    1b2c:	74 9f       	mul	r23, r20
    1b2e:	33 27       	eor	r19, r19
    1b30:	a0 0d       	add	r26, r0
    1b32:	61 1d       	adc	r22, r1
    1b34:	23 1f       	adc	r18, r19
    1b36:	84 9f       	mul	r24, r20
    1b38:	60 0d       	add	r22, r0
    1b3a:	21 1d       	adc	r18, r1
    1b3c:	82 2f       	mov	r24, r18
    1b3e:	76 2f       	mov	r23, r22
    1b40:	6a 2f       	mov	r22, r26
    1b42:	11 24       	eor	r1, r1
    1b44:	9f 57       	subi	r25, 0x7F	; 127
    1b46:	50 40       	sbci	r21, 0x00	; 0
    1b48:	9a f0       	brmi	.+38     	; 0x1b70 <__mulsf3_pse+0x88>
    1b4a:	f1 f0       	breq	.+60     	; 0x1b88 <__mulsf3_pse+0xa0>
    1b4c:	88 23       	and	r24, r24
    1b4e:	4a f0       	brmi	.+18     	; 0x1b62 <__mulsf3_pse+0x7a>
    1b50:	ee 0f       	add	r30, r30
    1b52:	ff 1f       	adc	r31, r31
    1b54:	bb 1f       	adc	r27, r27
    1b56:	66 1f       	adc	r22, r22
    1b58:	77 1f       	adc	r23, r23
    1b5a:	88 1f       	adc	r24, r24
    1b5c:	91 50       	subi	r25, 0x01	; 1
    1b5e:	50 40       	sbci	r21, 0x00	; 0
    1b60:	a9 f7       	brne	.-22     	; 0x1b4c <__mulsf3_pse+0x64>
    1b62:	9e 3f       	cpi	r25, 0xFE	; 254
    1b64:	51 05       	cpc	r21, r1
    1b66:	80 f0       	brcs	.+32     	; 0x1b88 <__mulsf3_pse+0xa0>
    1b68:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_inf>
    1b6c:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__fp_szero>
    1b70:	5f 3f       	cpi	r21, 0xFF	; 255
    1b72:	e4 f3       	brlt	.-8      	; 0x1b6c <__mulsf3_pse+0x84>
    1b74:	98 3e       	cpi	r25, 0xE8	; 232
    1b76:	d4 f3       	brlt	.-12     	; 0x1b6c <__mulsf3_pse+0x84>
    1b78:	86 95       	lsr	r24
    1b7a:	77 95       	ror	r23
    1b7c:	67 95       	ror	r22
    1b7e:	b7 95       	ror	r27
    1b80:	f7 95       	ror	r31
    1b82:	e7 95       	ror	r30
    1b84:	9f 5f       	subi	r25, 0xFF	; 255
    1b86:	c1 f7       	brne	.-16     	; 0x1b78 <__mulsf3_pse+0x90>
    1b88:	fe 2b       	or	r31, r30
    1b8a:	88 0f       	add	r24, r24
    1b8c:	91 1d       	adc	r25, r1
    1b8e:	96 95       	lsr	r25
    1b90:	87 95       	ror	r24
    1b92:	97 f9       	bld	r25, 7
    1b94:	08 95       	ret

00001b96 <do_rand>:
    1b96:	8f 92       	push	r8
    1b98:	9f 92       	push	r9
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	ec 01       	movw	r28, r24
    1bac:	68 81       	ld	r22, Y
    1bae:	79 81       	ldd	r23, Y+1	; 0x01
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	61 15       	cp	r22, r1
    1bb6:	71 05       	cpc	r23, r1
    1bb8:	81 05       	cpc	r24, r1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	21 f4       	brne	.+8      	; 0x1bc6 <do_rand+0x30>
    1bbe:	64 e2       	ldi	r22, 0x24	; 36
    1bc0:	79 ed       	ldi	r23, 0xD9	; 217
    1bc2:	8b e5       	ldi	r24, 0x5B	; 91
    1bc4:	97 e0       	ldi	r25, 0x07	; 7
    1bc6:	2d e1       	ldi	r18, 0x1D	; 29
    1bc8:	33 ef       	ldi	r19, 0xF3	; 243
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__divmodsi4>
    1bd2:	49 01       	movw	r8, r18
    1bd4:	5a 01       	movw	r10, r20
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	a7 ea       	ldi	r26, 0xA7	; 167
    1bdc:	b1 e4       	ldi	r27, 0x41	; 65
    1bde:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__muluhisi3>
    1be2:	6b 01       	movw	r12, r22
    1be4:	7c 01       	movw	r14, r24
    1be6:	ac ee       	ldi	r26, 0xEC	; 236
    1be8:	b4 ef       	ldi	r27, 0xF4	; 244
    1bea:	a5 01       	movw	r20, r10
    1bec:	94 01       	movw	r18, r8
    1bee:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulohisi3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8c 0d       	add	r24, r12
    1bf8:	9d 1d       	adc	r25, r13
    1bfa:	ae 1d       	adc	r26, r14
    1bfc:	bf 1d       	adc	r27, r15
    1bfe:	b7 ff       	sbrs	r27, 7
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <do_rand+0x72>
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	a1 09       	sbc	r26, r1
    1c06:	b0 48       	sbci	r27, 0x80	; 128
    1c08:	88 83       	st	Y, r24
    1c0a:	99 83       	std	Y+1, r25	; 0x01
    1c0c:	aa 83       	std	Y+2, r26	; 0x02
    1c0e:	bb 83       	std	Y+3, r27	; 0x03
    1c10:	9f 77       	andi	r25, 0x7F	; 127
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	df 90       	pop	r13
    1c1c:	cf 90       	pop	r12
    1c1e:	bf 90       	pop	r11
    1c20:	af 90       	pop	r10
    1c22:	9f 90       	pop	r9
    1c24:	8f 90       	pop	r8
    1c26:	08 95       	ret

00001c28 <rand_r>:
    1c28:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <do_rand>
    1c2c:	08 95       	ret

00001c2e <rand>:
    1c2e:	87 e0       	ldi	r24, 0x07	; 7
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <do_rand>
    1c36:	08 95       	ret

00001c38 <srand>:
    1c38:	a0 e0       	ldi	r26, 0x00	; 0
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	80 93 07 01 	sts	0x0107, r24
    1c40:	90 93 08 01 	sts	0x0108, r25
    1c44:	a0 93 09 01 	sts	0x0109, r26
    1c48:	b0 93 0a 01 	sts	0x010A, r27
    1c4c:	08 95       	ret

00001c4e <eeprom_read_byte>:
    1c4e:	f9 99       	sbic	0x1f, 1	; 31
    1c50:	fe cf       	rjmp	.-4      	; 0x1c4e <eeprom_read_byte>
    1c52:	92 bd       	out	0x22, r25	; 34
    1c54:	81 bd       	out	0x21, r24	; 33
    1c56:	f8 9a       	sbi	0x1f, 0	; 31
    1c58:	99 27       	eor	r25, r25
    1c5a:	80 b5       	in	r24, 0x20	; 32
    1c5c:	08 95       	ret

00001c5e <eeprom_write_byte>:
    1c5e:	26 2f       	mov	r18, r22

00001c60 <eeprom_write_r18>:
    1c60:	f9 99       	sbic	0x1f, 1	; 31
    1c62:	fe cf       	rjmp	.-4      	; 0x1c60 <eeprom_write_r18>
    1c64:	1f ba       	out	0x1f, r1	; 31
    1c66:	92 bd       	out	0x22, r25	; 34
    1c68:	81 bd       	out	0x21, r24	; 33
    1c6a:	20 bd       	out	0x20, r18	; 32
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	fa 9a       	sbi	0x1f, 2	; 31
    1c72:	f9 9a       	sbi	0x1f, 1	; 31
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	08 95       	ret

00001c7a <__divmodsi4>:
    1c7a:	05 2e       	mov	r0, r21
    1c7c:	97 fb       	bst	r25, 7
    1c7e:	1e f4       	brtc	.+6      	; 0x1c86 <__divmodsi4+0xc>
    1c80:	00 94       	com	r0
    1c82:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__negsi2>
    1c86:	57 fd       	sbrc	r21, 7
    1c88:	07 d0       	rcall	.+14     	; 0x1c98 <__divmodsi4_neg2>
    1c8a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
    1c8e:	07 fc       	sbrc	r0, 7
    1c90:	03 d0       	rcall	.+6      	; 0x1c98 <__divmodsi4_neg2>
    1c92:	4e f4       	brtc	.+18     	; 0x1ca6 <__divmodsi4_exit>
    1c94:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__negsi2>

00001c98 <__divmodsi4_neg2>:
    1c98:	50 95       	com	r21
    1c9a:	40 95       	com	r20
    1c9c:	30 95       	com	r19
    1c9e:	21 95       	neg	r18
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ca4:	5f 4f       	sbci	r21, 0xFF	; 255

00001ca6 <__divmodsi4_exit>:
    1ca6:	08 95       	ret

00001ca8 <__negsi2>:
    1ca8:	90 95       	com	r25
    1caa:	80 95       	com	r24
    1cac:	70 95       	com	r23
    1cae:	61 95       	neg	r22
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	08 95       	ret

00001cb8 <__muluhisi3>:
    1cb8:	0e 94 98 0b 	call	0x1730	; 0x1730 <__umulhisi3>
    1cbc:	a5 9f       	mul	r26, r21
    1cbe:	90 0d       	add	r25, r0
    1cc0:	b4 9f       	mul	r27, r20
    1cc2:	90 0d       	add	r25, r0
    1cc4:	a4 9f       	mul	r26, r20
    1cc6:	80 0d       	add	r24, r0
    1cc8:	91 1d       	adc	r25, r1
    1cca:	11 24       	eor	r1, r1
    1ccc:	08 95       	ret

00001cce <__mulshisi3>:
    1cce:	b7 ff       	sbrs	r27, 7
    1cd0:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__muluhisi3>

00001cd4 <__mulohisi3>:
    1cd4:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__muluhisi3>
    1cd8:	82 1b       	sub	r24, r18
    1cda:	93 0b       	sbc	r25, r19
    1cdc:	08 95       	ret

00001cde <__udivmodsi4>:
    1cde:	a1 e2       	ldi	r26, 0x21	; 33
    1ce0:	1a 2e       	mov	r1, r26
    1ce2:	aa 1b       	sub	r26, r26
    1ce4:	bb 1b       	sub	r27, r27
    1ce6:	fd 01       	movw	r30, r26
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <__udivmodsi4_ep>

00001cea <__udivmodsi4_loop>:
    1cea:	aa 1f       	adc	r26, r26
    1cec:	bb 1f       	adc	r27, r27
    1cee:	ee 1f       	adc	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	a2 17       	cp	r26, r18
    1cf4:	b3 07       	cpc	r27, r19
    1cf6:	e4 07       	cpc	r30, r20
    1cf8:	f5 07       	cpc	r31, r21
    1cfa:	20 f0       	brcs	.+8      	; 0x1d04 <__udivmodsi4_ep>
    1cfc:	a2 1b       	sub	r26, r18
    1cfe:	b3 0b       	sbc	r27, r19
    1d00:	e4 0b       	sbc	r30, r20
    1d02:	f5 0b       	sbc	r31, r21

00001d04 <__udivmodsi4_ep>:
    1d04:	66 1f       	adc	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	1a 94       	dec	r1
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <__udivmodsi4_loop>
    1d10:	60 95       	com	r22
    1d12:	70 95       	com	r23
    1d14:	80 95       	com	r24
    1d16:	90 95       	com	r25
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	bd 01       	movw	r22, r26
    1d1e:	cf 01       	movw	r24, r30
    1d20:	08 95       	ret

00001d22 <_exit>:
    1d22:	f8 94       	cli

00001d24 <__stop_program>:
    1d24:	ff cf       	rjmp	.-2      	; 0x1d24 <__stop_program>
