
build/gathering.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	c7 03       	fmuls	r20, r23
      6a:	43 04       	cpc	r4, r3
      6c:	9b 03       	fmulsu	r17, r19
      6e:	92 03       	fmuls	r17, r18
      70:	98 03       	fmulsu	r17, r16
      72:	25 04       	cpc	r2, r5
      74:	1a 04       	cpc	r1, r10
      76:	a5 0a       	sbc	r10, r21
      78:	82 09       	sbc	r24, r2
      7a:	82 09       	sbc	r24, r2
      7c:	a2 0a       	sbc	r10, r18
      7e:	ae 0a       	sbc	r10, r30
      80:	9e 0a       	sbc	r9, r30
      82:	b5 0a       	sbc	r11, r21
      84:	b1 0a       	sbc	r11, r17
      86:	b9 0a       	sbc	r11, r25
      88:	71 0a       	sbc	r7, r17
      8a:	43 0a       	sbc	r4, r19

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e3       	ldi	r30, 0x3A	; 58
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a0 31       	cpi	r26, 0x10	; 16
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a0 e1       	ldi	r26, 0x10	; 16
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 39       	cpi	r26, 0x90	; 144
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <main>
      da:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:

}

void setup()
{
  last_state_update = kilo_ticks;
      e2:	80 91 55 01 	lds	r24, 0x0155
      e6:	90 91 56 01 	lds	r25, 0x0156
      ea:	a0 91 57 01 	lds	r26, 0x0157
      ee:	b0 91 58 01 	lds	r27, 0x0158
      f2:	80 93 2e 01 	sts	0x012E, r24
      f6:	90 93 2f 01 	sts	0x012F, r25
      fa:	a0 93 30 01 	sts	0x0130, r26
      fe:	b0 93 31 01 	sts	0x0131, r27
  role = kilo_uid;
     102:	80 91 8b 01 	lds	r24, 0x018B
     106:	90 91 8c 01 	lds	r25, 0x018C
     10a:	90 93 11 01 	sts	0x0111, r25
     10e:	80 93 10 01 	sts	0x0110, r24
     112:	08 95       	ret

00000114 <message_tx>:
}
//internal functions
message_t *message_tx()
{
    return &message;
}
     114:	80 e2       	ldi	r24, 0x20	; 32
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	08 95       	ret

0000011a <message_tx_success>:

void message_tx_success()
{
    // Set flag on message transmission.
    message_sent = 1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	90 93 17 01 	sts	0x0117, r25
     122:	80 93 16 01 	sts	0x0116, r24
     126:	08 95       	ret

00000128 <message_rx>:
}

void message_rx(message_t *m, distance_measurement_t *d)
{
    if (message_recieved == 0){
     128:	80 91 14 01 	lds	r24, 0x0114
     12c:	90 91 15 01 	lds	r25, 0x0115
     130:	89 2b       	or	r24, r25
     132:	09 f0       	breq	.+2      	; 0x136 <message_rx+0xe>
     134:	08 95       	ret
     136:	cb 01       	movw	r24, r22
        message_recieved = 1;
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	30 93 15 01 	sts	0x0115, r19
     140:	20 93 14 01 	sts	0x0114, r18
        current_distance = estimate_distance(d);
     144:	0e 94 c1 05 	call	0xb82	; 0xb82 <estimate_distance>
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	90 93 03 01 	sts	0x0103, r25
     14e:	80 93 02 01 	sts	0x0102, r24
     152:	08 95       	ret

00000154 <loop>:
  last_state_update = kilo_ticks;
  role = kilo_uid;
}

void loop()
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
	if(current_minidistance > current_distance){
     158:	80 91 02 01 	lds	r24, 0x0102
     15c:	90 91 03 01 	lds	r25, 0x0103
     160:	20 91 00 01 	lds	r18, 0x0100
     164:	30 91 01 01 	lds	r19, 0x0101
     168:	82 17       	cp	r24, r18
     16a:	93 07       	cpc	r25, r19
     16c:	24 f4       	brge	.+8      	; 0x176 <loop+0x22>
		current_minidistance = current_distance;
     16e:	90 93 01 01 	sts	0x0101, r25
     172:	80 93 00 01 	sts	0x0100, r24
	}
	if(kilo_ticks > last_state_update + 16){
     176:	40 91 55 01 	lds	r20, 0x0155
     17a:	50 91 56 01 	lds	r21, 0x0156
     17e:	60 91 57 01 	lds	r22, 0x0157
     182:	70 91 58 01 	lds	r23, 0x0158
     186:	80 91 2e 01 	lds	r24, 0x012E
     18a:	90 91 2f 01 	lds	r25, 0x012F
     18e:	a0 91 30 01 	lds	r26, 0x0130
     192:	b0 91 31 01 	lds	r27, 0x0131
     196:	40 96       	adiw	r24, 0x10	; 16
     198:	a1 1d       	adc	r26, r1
     19a:	b1 1d       	adc	r27, r1
     19c:	84 17       	cp	r24, r20
     19e:	95 07       	cpc	r25, r21
     1a0:	a6 07       	cpc	r26, r22
     1a2:	b7 07       	cpc	r27, r23
     1a4:	00 f5       	brcc	.+64     	; 0x1e6 <loop+0x92>

		  if(role == TELLER){
     1a6:	80 91 10 01 	lds	r24, 0x0110
     1aa:	90 91 11 01 	lds	r25, 0x0111
     1ae:	8a 32       	cpi	r24, 0x2A	; 42
     1b0:	91 05       	cpc	r25, r1
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <loop+0x62>
     1b4:	7d c0       	rjmp	.+250    	; 0x2b0 <loop+0x15c>
			// It's important that the CRC is computed after the data has been set;
			// otherwise it would be wrong.
			message.crc = message_crc(&message);
		  }

		if(role == LISTENER){
     1b6:	89 2b       	or	r24, r25
     1b8:	c9 f0       	breq	.+50     	; 0x1ec <loop+0x98>
			}else{
					set_color(RGB(1,1,0));
					set_motion(FORWARD);
			}
		}
		last_state_update = kilo_ticks;
     1ba:	80 91 55 01 	lds	r24, 0x0155
     1be:	90 91 56 01 	lds	r25, 0x0156
     1c2:	a0 91 57 01 	lds	r26, 0x0157
     1c6:	b0 91 58 01 	lds	r27, 0x0158
     1ca:	80 93 2e 01 	sts	0x012E, r24
     1ce:	90 93 2f 01 	sts	0x012F, r25
     1d2:	a0 93 30 01 	sts	0x0130, r26
     1d6:	b0 93 31 01 	sts	0x0131, r27
		current_minidistance = 255;
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	90 93 01 01 	sts	0x0101, r25
     1e2:	80 93 00 01 	sts	0x0100, r24
	}
}
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret
			// otherwise it would be wrong.
			message.crc = message_crc(&message);
		  }

		if(role == LISTENER){
			if(message_recieved == 1){
     1ec:	c0 91 14 01 	lds	r28, 0x0114
     1f0:	d0 91 15 01 	lds	r29, 0x0115
     1f4:	c1 30       	cpi	r28, 0x01	; 1
     1f6:	d1 05       	cpc	r29, r1
     1f8:	21 f1       	breq	.+72     	; 0x242 <loop+0xee>
					set_color(RGB(1,1,0));
					set_motion(FORWARD);
				}
				pre_distance = current_distance;
			}else{
					set_color(RGB(1,1,0));
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     200:	80 91 1a 01 	lds	r24, 0x011A
     204:	90 91 1b 01 	lds	r25, 0x011B
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	b9 f2       	breq	.-82     	; 0x1ba <loop+0x66>
    {
        current_motion = new_motion;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 1b 01 	sts	0x011B, r25
     214:	80 93 1a 01 	sts	0x011A, r24
            both_spined = 0;

        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
     218:	80 91 18 01 	lds	r24, 0x0118
     21c:	90 91 19 01 	lds	r25, 0x0119
     220:	89 2b       	or	r24, r25
     222:	11 f4       	brne	.+4      	; 0x228 <loop+0xd4>
                spinup_motors();
     224:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     228:	60 91 8e 01 	lds	r22, 0x018E
     22c:	80 91 8d 01 	lds	r24, 0x018D
     230:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 1;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	90 93 19 01 	sts	0x0119, r25
     23c:	80 93 18 01 	sts	0x0118, r24
     240:	bc cf       	rjmp	.-136    	; 0x1ba <loop+0x66>
			message.crc = message_crc(&message);
		  }

		if(role == LISTENER){
			if(message_recieved == 1){
				message_recieved = 0;
     242:	10 92 15 01 	sts	0x0115, r1
     246:	10 92 14 01 	sts	0x0114, r1
				if(current_minidistance > pre_distance){
     24a:	80 91 00 01 	lds	r24, 0x0100
     24e:	90 91 01 01 	lds	r25, 0x0101
     252:	20 91 12 01 	lds	r18, 0x0112
     256:	30 91 13 01 	lds	r19, 0x0113
     25a:	28 17       	cp	r18, r24
     25c:	39 07       	cpc	r19, r25
     25e:	0c f4       	brge	.+2      	; 0x262 <loop+0x10e>
     260:	71 c0       	rjmp	.+226    	; 0x344 <loop+0x1f0>
					set_color(RGB(1,1,1));
					set_motion(FORWARD);
				}else if (current_minidistance < 50){
     262:	c2 97       	sbiw	r24, 0x32	; 50
     264:	0c f0       	brlt	.+2      	; 0x268 <loop+0x114>
     266:	4b c0       	rjmp	.+150    	; 0x2fe <loop+0x1aa>
					set_color(RGB(0,0,0));
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     26e:	80 91 1a 01 	lds	r24, 0x011A
     272:	90 91 1b 01 	lds	r25, 0x011B
     276:	89 2b       	or	r24, r25
     278:	61 f0       	breq	.+24     	; 0x292 <loop+0x13e>
    {
        current_motion = new_motion;
     27a:	10 92 1b 01 	sts	0x011B, r1
     27e:	10 92 1a 01 	sts	0x011A, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 0;
     28a:	10 92 19 01 	sts	0x0119, r1
     28e:	10 92 18 01 	sts	0x0118, r1
					set_color(RGB(1,1,1));
					set_motion(FORWARD);
				}else if (current_minidistance < 50){
					set_color(RGB(0,0,0));
					set_motion(STOP);
					role = TELLER;
     292:	8a e2       	ldi	r24, 0x2A	; 42
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	90 93 11 01 	sts	0x0111, r25
     29a:	80 93 10 01 	sts	0x0110, r24
				}else{
					set_color(RGB(1,1,0));
					set_motion(FORWARD);
				}
				pre_distance = current_distance;
     29e:	80 91 02 01 	lds	r24, 0x0102
     2a2:	90 91 03 01 	lds	r25, 0x0103
     2a6:	90 93 13 01 	sts	0x0113, r25
     2aa:	80 93 12 01 	sts	0x0112, r24
     2ae:	85 cf       	rjmp	.-246    	; 0x1ba <loop+0x66>
	}
	if(kilo_ticks > last_state_update + 16){

		  if(role == TELLER){

			set_color(RGB(0,0,0));
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2b6:	80 91 1a 01 	lds	r24, 0x011A
     2ba:	90 91 1b 01 	lds	r25, 0x011B
     2be:	89 2b       	or	r24, r25
     2c0:	61 f0       	breq	.+24     	; 0x2da <loop+0x186>
    {
        current_motion = new_motion;
     2c2:	10 92 1b 01 	sts	0x011B, r1
     2c6:	10 92 1a 01 	sts	0x011A, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 0;
     2d2:	10 92 19 01 	sts	0x0119, r1
     2d6:	10 92 18 01 	sts	0x0118, r1
		  if(role == TELLER){

			set_color(RGB(0,0,0));
			set_motion(STOP);
			// The type is always NORMAL.
			message.type = NORMAL;
     2da:	10 92 29 01 	sts	0x0129, r1
			// Some dummy data as an example.
			message.data[0] = TELLER;
     2de:	8a e2       	ldi	r24, 0x2A	; 42
     2e0:	80 93 20 01 	sts	0x0120, r24
			// It's important that the CRC is computed after the data has been set;
			// otherwise it would be wrong.
			message.crc = message_crc(&message);
     2e4:	80 e2       	ldi	r24, 0x20	; 32
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <message_crc>
     2ec:	90 93 2b 01 	sts	0x012B, r25
     2f0:	80 93 2a 01 	sts	0x012A, r24
     2f4:	80 91 10 01 	lds	r24, 0x0110
     2f8:	90 91 11 01 	lds	r25, 0x0111
     2fc:	5c cf       	rjmp	.-328    	; 0x1b6 <loop+0x62>
				}else if (current_minidistance < 50){
					set_color(RGB(0,0,0));
					set_motion(STOP);
					role = TELLER;
				}else{
					set_color(RGB(1,1,0));
     2fe:	85 e0       	ldi	r24, 0x05	; 5
     300:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     304:	80 91 1a 01 	lds	r24, 0x011A
     308:	90 91 1b 01 	lds	r25, 0x011B
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	39 f2       	breq	.-114    	; 0x29e <loop+0x14a>
    {
        current_motion = new_motion;
     310:	d0 93 1b 01 	sts	0x011B, r29
     314:	c0 93 1a 01 	sts	0x011A, r28
            both_spined = 0;

        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
     318:	80 91 18 01 	lds	r24, 0x0118
     31c:	90 91 19 01 	lds	r25, 0x0119
     320:	89 2b       	or	r24, r25
     322:	69 f0       	breq	.+26     	; 0x33e <loop+0x1ea>
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     324:	60 91 8e 01 	lds	r22, 0x018E
     328:	80 91 8d 01 	lds	r24, 0x018D
     32c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 19 01 	sts	0x0119, r25
     338:	80 93 18 01 	sts	0x0118, r24
     33c:	b0 cf       	rjmp	.-160    	; 0x29e <loop+0x14a>

        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
                spinup_motors();
     33e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
     342:	f0 cf       	rjmp	.-32     	; 0x324 <loop+0x1d0>

		if(role == LISTENER){
			if(message_recieved == 1){
				message_recieved = 0;
				if(current_minidistance > pre_distance){
					set_color(RGB(1,1,1));
     344:	85 e1       	ldi	r24, 0x15	; 21
     346:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     34a:	80 91 1a 01 	lds	r24, 0x011A
     34e:	90 91 1b 01 	lds	r25, 0x011B
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	e9 f6       	brne	.-70     	; 0x310 <loop+0x1bc>
     356:	a3 cf       	rjmp	.-186    	; 0x29e <loop+0x14a>

00000358 <set_motion>:
     358:	20 91 1a 01 	lds	r18, 0x011A
     35c:	30 91 1b 01 	lds	r19, 0x011B
     360:	28 17       	cp	r18, r24
     362:	39 07       	cpc	r19, r25
     364:	71 f0       	breq	.+28     	; 0x382 <set_motion+0x2a>
    {
        current_motion = new_motion;
     366:	90 93 1b 01 	sts	0x011B, r25
     36a:	80 93 1a 01 	sts	0x011A, r24
        
        if (current_motion == STOP)
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	71 f1       	breq	.+92     	; 0x3ce <set_motion+0x76>
        {
            set_motors(0, 0);
            both_spined = 0;

        }
        else if (current_motion == FORWARD)
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	91 05       	cpc	r25, r1
     376:	31 f0       	breq	.+12     	; 0x384 <set_motion+0x2c>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	91 05       	cpc	r25, r1
     37c:	89 f1       	breq	.+98     	; 0x3e0 <set_motion+0x88>
            if(both_spined == 0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
     37e:	03 97       	sbiw	r24, 0x03	; 3
     380:	b1 f0       	breq	.+44     	; 0x3ae <set_motion+0x56>
     382:	08 95       	ret
            both_spined = 0;

        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
     384:	80 91 18 01 	lds	r24, 0x0118
     388:	90 91 19 01 	lds	r25, 0x0119
     38c:	89 2b       	or	r24, r25
     38e:	11 f4       	brne	.+4      	; 0x394 <set_motion+0x3c>
                spinup_motors();
     390:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     394:	60 91 8e 01 	lds	r22, 0x018E
     398:	80 91 8d 01 	lds	r24, 0x018D
     39c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 19 01 	sts	0x0119, r25
     3a8:	80 93 18 01 	sts	0x0118, r24
     3ac:	08 95       	ret
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     3ae:	80 91 18 01 	lds	r24, 0x0118
     3b2:	90 91 19 01 	lds	r25, 0x0119
     3b6:	89 2b       	or	r24, r25
     3b8:	29 f1       	breq	.+74     	; 0x404 <set_motion+0xac>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     3ba:	60 91 7b 01 	lds	r22, 0x017B
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 0;
     3c4:	10 92 19 01 	sts	0x0119, r1
     3c8:	10 92 18 01 	sts	0x0118, r1
     3cc:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 0;
     3d6:	10 92 19 01 	sts	0x0119, r1
     3da:	10 92 18 01 	sts	0x0118, r1
     3de:	08 95       	ret
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     3e0:	80 91 18 01 	lds	r24, 0x0118
     3e4:	90 91 19 01 	lds	r25, 0x0119
     3e8:	89 2b       	or	r24, r25
     3ea:	11 f4       	brne	.+4      	; 0x3f0 <set_motion+0x98>
                spinup_motors();
     3ec:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	80 91 8f 01 	lds	r24, 0x018F
     3f6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 0;
     3fa:	10 92 19 01 	sts	0x0119, r1
     3fe:	10 92 18 01 	sts	0x0118, r1
     402:	08 95       	ret
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     404:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
     408:	d8 cf       	rjmp	.-80     	; 0x3ba <set_motion+0x62>

0000040a <random_move>:
    }
}

void random_move(){

	int random_number = rand_hard();
     40a:	0e 94 3a 05 	call	0xa74	; 0xa74 <rand_hard>
    int random_direction = (random_number % 4);
     40e:	83 70       	andi	r24, 0x03	; 3

    if(random_direction==0||random_direction==1){
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	18 f1       	brcs	.+70     	; 0x45a <random_move+0x50>
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
     414:	82 30       	cpi	r24, 0x02	; 2
     416:	09 f4       	brne	.+2      	; 0x41a <random_move+0x10>
     418:	42 c0       	rjmp	.+132    	; 0x49e <random_move+0x94>
    	set_color(RGB(1, 0, 0));
		set_motion(LEFT);
    }
    else if(random_direction==3){
    	set_color(RGB(0, 0, 1));
     41a:	80 e1       	ldi	r24, 0x10	; 16
     41c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     420:	80 91 1a 01 	lds	r24, 0x011A
     424:	90 91 1b 01 	lds	r25, 0x011B
     428:	03 97       	sbiw	r24, 0x03	; 3
     42a:	b1 f0       	breq	.+44     	; 0x458 <random_move+0x4e>
    {
        current_motion = new_motion;
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 1b 01 	sts	0x011B, r25
     434:	80 93 1a 01 	sts	0x011A, r24
            set_motors(kilo_turn_left, 0);
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
     438:	80 91 18 01 	lds	r24, 0x0118
     43c:	90 91 19 01 	lds	r25, 0x0119
     440:	89 2b       	or	r24, r25
     442:	09 f4       	brne	.+2      	; 0x446 <random_move+0x3c>
     444:	51 c0       	rjmp	.+162    	; 0x4e8 <random_move+0xde>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     446:	60 91 7b 01 	lds	r22, 0x017B
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 0;
     450:	10 92 19 01 	sts	0x0119, r1
     454:	10 92 18 01 	sts	0x0118, r1
     458:	08 95       	ret

	int random_number = rand_hard();
    int random_direction = (random_number % 4);

    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     460:	80 91 1a 01 	lds	r24, 0x011A
     464:	90 91 1b 01 	lds	r25, 0x011B
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	b1 f3       	breq	.-20     	; 0x458 <random_move+0x4e>
    {
        current_motion = new_motion;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	90 93 1b 01 	sts	0x011B, r25
     474:	80 93 1a 01 	sts	0x011A, r24
            both_spined = 0;

        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
     478:	80 91 18 01 	lds	r24, 0x0118
     47c:	90 91 19 01 	lds	r25, 0x0119
     480:	89 2b       	or	r24, r25
     482:	61 f1       	breq	.+88     	; 0x4dc <random_move+0xd2>
                spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     484:	60 91 8e 01 	lds	r22, 0x018E
     488:	80 91 8d 01 	lds	r24, 0x018D
     48c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 1;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 19 01 	sts	0x0119, r25
     498:	80 93 18 01 	sts	0x0118, r24
     49c:	08 95       	ret
    if(random_direction==0||random_direction==1){
    	set_color(RGB(0, 1, 0));
		set_motion(FORWARD);
    }
    else if(random_direction==2){
    	set_color(RGB(1, 0, 0));
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <set_color>
int role = 0;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     4a4:	80 91 1a 01 	lds	r24, 0x011A
     4a8:	90 91 1b 01 	lds	r25, 0x011B
     4ac:	02 97       	sbiw	r24, 0x02	; 2
     4ae:	a1 f2       	breq	.-88     	; 0x458 <random_move+0x4e>
    {
        current_motion = new_motion;
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	90 93 1b 01 	sts	0x011B, r25
     4b8:	80 93 1a 01 	sts	0x011A, r24
            set_motors(kilo_straight_left, kilo_straight_right);
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
     4bc:	80 91 18 01 	lds	r24, 0x0118
     4c0:	90 91 19 01 	lds	r25, 0x0119
     4c4:	89 2b       	or	r24, r25
     4c6:	69 f0       	breq	.+26     	; 0x4e2 <random_move+0xd8>
                spinup_motors();
            set_motors(kilo_turn_left, 0);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	80 91 8f 01 	lds	r24, 0x018F
     4ce:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_motors>
            both_spined = 0;
     4d2:	10 92 19 01 	sts	0x0119, r1
     4d6:	10 92 18 01 	sts	0x0118, r1
     4da:	08 95       	ret

        }
        else if (current_motion == FORWARD)
        {
            if(both_spined == 0)
                spinup_motors();
     4dc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
     4e0:	d1 cf       	rjmp	.-94     	; 0x484 <random_move+0x7a>
            both_spined = 1;
        }
        else if (current_motion == LEFT)
        {
            if(both_spined == 0)
                spinup_motors();
     4e2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
     4e6:	f0 cf       	rjmp	.-32     	; 0x4c8 <random_move+0xbe>
            both_spined = 0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined == 0)
                spinup_motors();
     4e8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <spinup_motors>
     4ec:	ac cf       	rjmp	.-168    	; 0x446 <random_move+0x3c>

000004ee <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     4ee:	08 95       	ret

000004f0 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	08 95       	ret

000004f6 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     4f6:	08 95       	ret

000004f8 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
    cli();
     506:	f8 94       	cli

    ports_off();
     508:	14 b8       	out	0x04, r1	; 4
     50a:	17 b8       	out	0x07, r1	; 7
     50c:	1a b8       	out	0x0a, r1	; 10
     50e:	15 b8       	out	0x05, r1	; 5
     510:	18 b8       	out	0x08, r1	; 8
     512:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     514:	52 9a       	sbi	0x0a, 2	; 10
     516:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     518:	14 bc       	out	0x24, r1	; 36
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	85 bd       	out	0x25, r24	; 37
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	87 bd       	out	0x27, r24	; 39
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     528:	10 92 80 00 	sts	0x0080, r1
     52c:	10 92 81 00 	sts	0x0081, r1
     530:	2f e8       	ldi	r18, 0x8F	; 143
     532:	3b e0       	ldi	r19, 0x0B	; 11
     534:	30 93 89 00 	sts	0x0089, r19
     538:	20 93 88 00 	sts	0x0088, r18
     53c:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     540:	53 98       	cbi	0x0a, 3	; 10
     542:	23 98       	cbi	0x04, 3	; 4
     544:	91 ea       	ldi	r25, 0xA1	; 161
     546:	90 93 b0 00 	sts	0x00B0, r25
     54a:	80 93 b1 00 	sts	0x00B1, r24
     54e:	10 92 b4 00 	sts	0x00B4, r1
     552:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     556:	8b e0       	ldi	r24, 0x0B	; 11
     558:	80 bf       	out	0x30, r24	; 48
     55a:	83 e0       	ldi	r24, 0x03	; 3
     55c:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     560:	86 e0       	ldi	r24, 0x06	; 6
     562:	80 93 7c 00 	sts	0x007C, r24
     566:	83 e8       	ldi	r24, 0x83	; 131
     568:	80 93 7a 00 	sts	0x007A, r24
     56c:	80 91 7a 00 	lds	r24, 0x007A
     570:	80 64       	ori	r24, 0x40	; 64
     572:	80 93 7a 00 	sts	0x007A, r24
     576:	80 91 7a 00 	lds	r24, 0x007A
     57a:	86 fd       	sbrc	r24, 6
     57c:	fc cf       	rjmp	.-8      	; 0x576 <kilo_init+0x7e>
    adc_trigger_high_gain();
     57e:	10 92 7c 00 	sts	0x007C, r1
     582:	83 ea       	ldi	r24, 0xA3	; 163
     584:	80 93 7a 00 	sts	0x007A, r24
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
    if (osccal != 0xFF)
     596:	8f 3f       	cpi	r24, 0xFF	; 255
     598:	11 f0       	breq	.+4      	; 0x59e <kilo_init+0xa6>
        OSCCAL = osccal;
     59a:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     59e:	10 92 59 01 	sts	0x0159, r1
    rx_leadingbit = 1;
     5a2:	c1 e0       	ldi	r28, 0x01	; 1
     5a4:	c0 93 32 01 	sts	0x0132, r28
    rx_leadingbyte = 1;
     5a8:	c0 93 76 01 	sts	0x0176, r28
    rx_byteindex = 0;
     5ac:	10 92 50 01 	sts	0x0150, r1
    rx_bytevalue = 0;
     5b0:	10 92 8a 01 	sts	0x018A, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     5b4:	80 e9       	ldi	r24, 0x90	; 144
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     5bc:	80 93 4f 01 	sts	0x014F, r24
    if (tx_mask & ~TX_MASK_MAX)
     5c0:	80 91 4f 01 	lds	r24, 0x014F
     5c4:	88 73       	andi	r24, 0x38	; 56
     5c6:	11 f0       	breq	.+4      	; 0x5cc <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     5c8:	c0 93 4f 01 	sts	0x014F, r28
    tx_clock = 0;
     5cc:	10 92 7a 01 	sts	0x017A, r1
     5d0:	10 92 79 01 	sts	0x0179, r1
    tx_increment = 255;
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 78 01 	sts	0x0178, r25
     5dc:	80 93 77 01 	sts	0x0177, r24
    kilo_ticks = 0;
     5e0:	10 92 55 01 	sts	0x0155, r1
     5e4:	10 92 56 01 	sts	0x0156, r1
     5e8:	10 92 57 01 	sts	0x0157, r1
     5ec:	10 92 58 01 	sts	0x0158, r1
    kilo_state = IDLE;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 1f 01 	sts	0x011F, r24
    kilo_tx_period = 3906;
     5f6:	82 e4       	ldi	r24, 0x42	; 66
     5f8:	9f e0       	ldi	r25, 0x0F	; 15
     5fa:	90 93 89 01 	sts	0x0189, r25
     5fe:	80 93 88 01 	sts	0x0188, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     602:	80 eb       	ldi	r24, 0xB0	; 176
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     60a:	c8 2f       	mov	r28, r24
     60c:	81 eb       	ldi	r24, 0xB1	; 177
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     614:	2c 2f       	mov	r18, r28
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	38 2b       	or	r19, r24
     61a:	30 93 8c 01 	sts	0x018C, r19
     61e:	20 93 8b 01 	sts	0x018B, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     622:	85 e0       	ldi	r24, 0x05	; 5
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     62a:	80 93 8f 01 	sts	0x018F, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     62e:	89 e0       	ldi	r24, 0x09	; 9
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     636:	80 93 7b 01 	sts	0x017B, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     63a:	8c e0       	ldi	r24, 0x0C	; 12
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     642:	80 93 8d 01 	sts	0x018D, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     646:	84 e1       	ldi	r24, 0x14	; 20
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     64e:	80 93 8e 01 	sts	0x018E, r24
     652:	5a e5       	ldi	r21, 0x5A	; 90
     654:	e5 2e       	mov	r14, r21
     656:	51 e0       	ldi	r21, 0x01	; 1
     658:	f5 2e       	mov	r15, r21
     65a:	03 e3       	ldi	r16, 0x33	; 51
     65c:	11 e0       	ldi	r17, 0x01	; 1
     65e:	c0 e2       	ldi	r28, 0x20	; 32
     660:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     662:	ce 01       	movw	r24, r28
     664:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     668:	d8 2e       	mov	r13, r24
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     672:	2d 2d       	mov	r18, r13
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	32 2f       	mov	r19, r18
     678:	22 27       	eor	r18, r18
     67a:	28 2b       	or	r18, r24
     67c:	f7 01       	movw	r30, r14
     67e:	21 93       	st	Z+, r18
     680:	31 93       	st	Z+, r19
     682:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     684:	ce 01       	movw	r24, r28
     686:	c0 96       	adiw	r24, 0x30	; 48
     688:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     68c:	d8 2e       	mov	r13, r24
     68e:	ce 01       	movw	r24, r28
     690:	c1 96       	adiw	r24, 0x31	; 49
     692:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <eeprom_read_byte>
     696:	2d 2d       	mov	r18, r13
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	32 2f       	mov	r19, r18
     69c:	22 27       	eor	r18, r18
     69e:	28 2b       	or	r18, r24
     6a0:	f8 01       	movw	r30, r16
     6a2:	21 93       	st	Z+, r18
     6a4:	31 93       	st	Z+, r19
     6a6:	8f 01       	movw	r16, r30
     6a8:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     6aa:	cc 33       	cpi	r28, 0x3C	; 60
     6ac:	d1 05       	cpc	r29, r1
     6ae:	c9 f6       	brne	.-78     	; 0x662 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     6b0:	78 94       	sei
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	08 95       	ret

000006c2 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     6c2:	1f 92       	push	r1
     6c4:	0f 92       	push	r0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
     6cc:	8f 93       	push	r24
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	a8 95       	wdr
     6d4:	80 91 60 00 	lds	r24, 0x0060
     6d8:	88 61       	ori	r24, 0x18	; 24
     6da:	80 93 60 00 	sts	0x0060, r24
     6de:	10 92 60 00 	sts	0x0060, r1
     6e2:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     6e4:	8f 91       	pop	r24
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     6f0:	3c 01       	movw	r6, r24
     6f2:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     6f4:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     6f6:	99 24       	eor	r9, r9
     6f8:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     6fe:	96 e0       	ldi	r25, 0x06	; 6
     700:	a9 2e       	mov	r10, r25
     702:	23 e8       	ldi	r18, 0x83	; 131
     704:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     706:	38 e1       	ldi	r19, 0x18	; 24
     708:	d3 2e       	mov	r13, r19
     70a:	49 e2       	ldi	r20, 0x29	; 41
     70c:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     70e:	90 91 1f 01 	lds	r25, 0x011F
     712:	e9 2f       	mov	r30, r25
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	e7 30       	cpi	r30, 0x07	; 7
     718:	f1 05       	cpc	r31, r1
     71a:	c8 f7       	brcc	.-14     	; 0x70e <kilo_start+0x1e>
     71c:	ec 5c       	subi	r30, 0xCC	; 204
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     724:	11 23       	and	r17, r17
     726:	09 f4       	brne	.+2      	; 0x72a <kilo_start+0x3a>
     728:	fc c0       	rjmp	.+504    	; 0x922 <__stack+0x23>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     72a:	c0 92 1f 01 	sts	0x011F, r12
     72e:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     730:	fe 01       	movw	r30, r28
     732:	09 95       	icall
                break;
     734:	ec cf       	rjmp	.-40     	; 0x70e <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     736:	80 91 59 01 	lds	r24, 0x0159
     73a:	81 11       	cpse	r24, r1
     73c:	eb c0       	rjmp	.+470    	; 0x914 <__stack+0x15>
        cli();                                    // disable interrupts
     73e:	f8 94       	cli
        adc_setup_conversion(6);
     740:	a0 92 7c 00 	sts	0x007C, r10
     744:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     748:	80 91 7a 00 	lds	r24, 0x007A
     74c:	80 64       	ori	r24, 0x40	; 64
     74e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     752:	90 91 7a 00 	lds	r25, 0x007A
     756:	96 fd       	sbrc	r25, 6
     758:	fc cf       	rjmp	.-8      	; 0x752 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     75a:	80 91 78 00 	lds	r24, 0x0078
     75e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     762:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     764:	8b 3a       	cpi	r24, 0xAB	; 171
     766:	e2 e0       	ldi	r30, 0x02	; 2
     768:	9e 07       	cpc	r25, r30
     76a:	0c f0       	brlt	.+2      	; 0x76e <kilo_start+0x7e>
     76c:	ed c0       	rjmp	.+474    	; 0x948 <__stack+0x49>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     76e:	89 38       	cpi	r24, 0x89	; 137
     770:	f2 e0       	ldi	r31, 0x02	; 2
     772:	9f 07       	cpc	r25, r31
     774:	0c f0       	brlt	.+2      	; 0x778 <kilo_start+0x88>
     776:	ef c0       	rjmp	.+478    	; 0x956 <__stack+0x57>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     778:	87 36       	cpi	r24, 0x67	; 103
     77a:	92 40       	sbci	r25, 0x02	; 2
     77c:	0c f4       	brge	.+2      	; 0x780 <kilo_start+0x90>
     77e:	ca c0       	rjmp	.+404    	; 0x914 <__stack+0x15>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     780:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     782:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     784:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     786:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     788:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     78a:	3c 98       	cbi	0x07, 4	; 7
     78c:	c0 cf       	rjmp	.-128    	; 0x70e <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     78e:	f8 94       	cli
                acomp_off();
     790:	80 b7       	in	r24, 0x30	; 48
     792:	87 7f       	andi	r24, 0xF7	; 247
     794:	80 bf       	out	0x30, r24	; 48
                adc_off();
     796:	80 91 7a 00 	lds	r24, 0x007A
     79a:	8f 77       	andi	r24, 0x7F	; 127
     79c:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     7a0:	14 b8       	out	0x04, r1	; 4
     7a2:	17 b8       	out	0x07, r1	; 7
     7a4:	1a b8       	out	0x0a, r1	; 10
     7a6:	15 b8       	out	0x05, r1	; 5
     7a8:	18 b8       	out	0x08, r1	; 8
     7aa:	1b b8       	out	0x0b, r1	; 11
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	a8 95       	wdr
     7b2:	d0 92 60 00 	sts	0x0060, r13
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     7bc:	80 91 60 00 	lds	r24, 0x0060
     7c0:	80 64       	ori	r24, 0x40	; 64
     7c2:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     7c6:	93 b7       	in	r25, 0x33	; 51
     7c8:	91 7f       	andi	r25, 0xF1	; 241
     7ca:	94 60       	ori	r25, 0x04	; 4
     7cc:	93 bf       	out	0x33, r25	; 51
                cli();
     7ce:	f8 94       	cli
                sleep_enable();
     7d0:	83 b7       	in	r24, 0x33	; 51
     7d2:	81 60       	ori	r24, 0x01	; 1
     7d4:	83 bf       	out	0x33, r24	; 51
                sei();
     7d6:	78 94       	sei
                sleep_cpu();
     7d8:	88 95       	sleep
                sleep_disable();
     7da:	83 b7       	in	r24, 0x33	; 51
     7dc:	8e 7f       	andi	r24, 0xFE	; 254
     7de:	83 bf       	out	0x33, r24	; 51
                sei();
     7e0:	78 94       	sei
                rx_busy = 0;
     7e2:	10 92 59 01 	sts	0x0159, r1
                ports_on();
     7e6:	52 9a       	sbi	0x0a, 2	; 10
     7e8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     7ea:	80 91 7a 00 	lds	r24, 0x007A
     7ee:	80 68       	ori	r24, 0x80	; 128
     7f0:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f4:	87 e5       	ldi	r24, 0x57	; 87
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <kilo_start+0x108>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <kilo_start+0x10e>
     7fe:	00 00       	nop
                _delay_us(300);
                acomp_on();
     800:	80 b7       	in	r24, 0x30	; 48
     802:	88 61       	ori	r24, 0x18	; 24
     804:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     806:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     808:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     80a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     80c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     80e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     810:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     812:	ef e1       	ldi	r30, 0x1F	; 31
     814:	fe e4       	ldi	r31, 0x4E	; 78
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <kilo_start+0x126>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <kilo_start+0x12c>
     81c:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     81e:	80 91 59 01 	lds	r24, 0x0159
     822:	81 11       	cpse	r24, r1
     824:	81 c0       	rjmp	.+258    	; 0x928 <__stack+0x29>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     826:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     828:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     82a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     82c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     82e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     830:	3c 98       	cbi	0x07, 4	; 7
     832:	6d cf       	rjmp	.-294    	; 0x70e <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     834:	80 91 1d 01 	lds	r24, 0x011D
     838:	81 11       	cpse	r24, r1
     83a:	41 c0       	rjmp	.+130    	; 0x8be <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     83c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     840:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     844:	10 92 1e 01 	sts	0x011E, r1
     848:	62 cf       	rjmp	.-316    	; 0x70e <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     84a:	48 99       	sbic	0x09, 0	; 9
     84c:	ec cf       	rjmp	.-40     	; 0x826 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     84e:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     850:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     852:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     854:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     856:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     858:	3c 98       	cbi	0x07, 4	; 7
     85a:	8f ec       	ldi	r24, 0xCF	; 207
     85c:	97 e0       	ldi	r25, 0x07	; 7
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <kilo_start+0x16e>
     862:	00 c0       	rjmp	.+0      	; 0x864 <kilo_start+0x174>
     864:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     866:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     868:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     86a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     86c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     86e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     870:	3c 98       	cbi	0x07, 4	; 7
     872:	9f ef       	ldi	r25, 0xFF	; 255
     874:	e1 ee       	ldi	r30, 0xE1	; 225
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	91 50       	subi	r25, 0x01	; 1
     87a:	e0 40       	sbci	r30, 0x00	; 0
     87c:	f0 40       	sbci	r31, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <kilo_start+0x188>
     880:	00 c0       	rjmp	.+0      	; 0x882 <kilo_start+0x192>
     882:	00 00       	nop
     884:	44 cf       	rjmp	.-376    	; 0x70e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     886:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     888:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     88a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     88c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     88e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     890:	3c 98       	cbi	0x07, 4	; 7
     892:	ef ec       	ldi	r30, 0xCF	; 207
     894:	f7 e0       	ldi	r31, 0x07	; 7
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <kilo_start+0x1a6>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <kilo_start+0x1ac>
     89c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     89e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8a0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8a2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8a4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8a6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8a8:	3c 98       	cbi	0x07, 4	; 7
     8aa:	ff ef       	ldi	r31, 0xFF	; 255
     8ac:	21 ee       	ldi	r18, 0xE1	; 225
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	f1 50       	subi	r31, 0x01	; 1
     8b2:	20 40       	sbci	r18, 0x00	; 0
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <kilo_start+0x1c0>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <kilo_start+0x1ca>
     8ba:	00 00       	nop
     8bc:	28 cf       	rjmp	.-432    	; 0x70e <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     8be:	90 91 1d 01 	lds	r25, 0x011D
     8c2:	80 91 1e 01 	lds	r24, 0x011E
     8c6:	98 17       	cp	r25, r24
     8c8:	09 f4       	brne	.+2      	; 0x8cc <kilo_start+0x1dc>
     8ca:	21 cf       	rjmp	.-446    	; 0x70e <kilo_start+0x1e>
                        prev_motion = cur_motion;
     8cc:	80 91 1d 01 	lds	r24, 0x011D
     8d0:	80 93 1e 01 	sts	0x011E, r24
                        if (cur_motion == MOVE_LEFT) {
     8d4:	80 91 1d 01 	lds	r24, 0x011D
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	09 f4       	brne	.+2      	; 0x8de <kilo_start+0x1ee>
     8dc:	50 c0       	rjmp	.+160    	; 0x97e <__stack+0x7f>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     8de:	80 91 1d 01 	lds	r24, 0x011D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8e2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     8e6:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	d9 f1       	breq	.+118    	; 0x964 <__stack+0x65>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8ee:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     8f2:	90 92 b4 00 	sts	0x00B4, r9
     8f6:	8f e2       	ldi	r24, 0x2F	; 47
     8f8:	95 e7       	ldi	r25, 0x75	; 117
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <kilo_start+0x20a>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0x1>
     900:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     902:	80 91 8e 01 	lds	r24, 0x018E
     906:	90 91 8d 01 	lds	r25, 0x018D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     90a:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     90e:	80 93 b4 00 	sts	0x00B4, r24
     912:	fd ce       	rjmp	.-518    	; 0x70e <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     914:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     916:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     918:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     91a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     91c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     91e:	3c 98       	cbi	0x07, 4	; 7
     920:	f6 ce       	rjmp	.-532    	; 0x70e <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     922:	f3 01       	movw	r30, r6
     924:	09 95       	icall
     926:	01 cf       	rjmp	.-510    	; 0x72a <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     928:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     92a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     92c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     92e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     930:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     932:	3c 98       	cbi	0x07, 4	; 7
     934:	ff ef       	ldi	r31, 0xFF	; 255
     936:	20 e7       	ldi	r18, 0x70	; 112
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	f1 50       	subi	r31, 0x01	; 1
     93c:	20 40       	sbci	r18, 0x00	; 0
     93e:	80 40       	sbci	r24, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <__stack+0x3b>
     942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0x45>
     944:	00 00       	nop
     946:	6f cf       	rjmp	.-290    	; 0x826 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     948:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     94a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     94c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     94e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     950:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     952:	3c 98       	cbi	0x07, 4	; 7
     954:	dc ce       	rjmp	.-584    	; 0x70e <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     956:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     958:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     95a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     95c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     95e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     960:	3c 9a       	sbi	0x07, 4	; 7
     962:	d5 ce       	rjmp	.-598    	; 0x70e <kilo_start+0x1e>
     964:	ef e2       	ldi	r30, 0x2F	; 47
     966:	f5 e7       	ldi	r31, 0x75	; 117
     968:	31 97       	sbiw	r30, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <__stack+0x69>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <__stack+0x6f>
     96e:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     970:	80 91 7b 01 	lds	r24, 0x017B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     974:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     978:	80 93 b4 00 	sts	0x00B4, r24
     97c:	c8 ce       	rjmp	.-624    	; 0x70e <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     97e:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     982:	10 92 b4 00 	sts	0x00B4, r1
     986:	8f e2       	ldi	r24, 0x2F	; 47
     988:	95 e7       	ldi	r25, 0x75	; 117
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <__stack+0x8b>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <__stack+0x91>
     990:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     992:	80 91 8f 01 	lds	r24, 0x018F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     996:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     99a:	10 92 b4 00 	sts	0x00B4, r1
     99e:	b7 ce       	rjmp	.-658    	; 0x70e <kilo_start+0x1e>

000009a0 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <delay+0x10>
     9a2:	ef ec       	ldi	r30, 0xCF	; 207
     9a4:	f7 e0       	ldi	r31, 0x07	; 7
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <delay+0x6>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <delay+0xc>
     9ac:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     9ae:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	b9 f7       	brne	.-18     	; 0x9a2 <delay+0x2>
     9b4:	08 95       	ret

000009b6 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9b6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     9ba:	60 93 b4 00 	sts	0x00B4, r22
     9be:	08 95       	ret

000009c0 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     9c6:	80 93 b4 00 	sts	0x00B4, r24
     9ca:	8f e0       	ldi	r24, 0x0F	; 15
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	ef ec       	ldi	r30, 0xCF	; 207
     9d0:	f7 e0       	ldi	r31, 0x07	; 7
     9d2:	31 97       	sbiw	r30, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <spinup_motors+0x12>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <spinup_motors+0x18>
     9d8:	00 00       	nop
     9da:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     9dc:	c1 f7       	brne	.-16     	; 0x9ce <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     9de:	08 95       	ret

000009e0 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     9e0:	80 91 59 01 	lds	r24, 0x0159
     9e4:	81 11       	cpse	r24, r1
     9e6:	1e c0       	rjmp	.+60     	; 0xa24 <get_ambientlight+0x44>
        cli();
     9e8:	f8 94       	cli
        adc_setup_conversion(7);
     9ea:	87 e0       	ldi	r24, 0x07	; 7
     9ec:	80 93 7c 00 	sts	0x007C, r24
     9f0:	83 e8       	ldi	r24, 0x83	; 131
     9f2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     9f6:	80 91 7a 00 	lds	r24, 0x007A
     9fa:	80 64       	ori	r24, 0x40	; 64
     9fc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a00:	80 91 7a 00 	lds	r24, 0x007A
     a04:	86 fd       	sbrc	r24, 6
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     a08:	80 91 78 00 	lds	r24, 0x0078
     a0c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     a10:	10 92 7c 00 	sts	0x007C, r1
     a14:	23 ea       	ldi	r18, 0xA3	; 163
     a16:	20 93 7a 00 	sts	0x007A, r18
     a1a:	21 e0       	ldi	r18, 0x01	; 1
     a1c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     a20:	78 94       	sei
     a22:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     a28:	08 95       	ret

00000a2a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     a2a:	80 91 59 01 	lds	r24, 0x0159
     a2e:	81 11       	cpse	r24, r1
     a30:	1e c0       	rjmp	.+60     	; 0xa6e <get_temperature+0x44>
        cli();
     a32:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     a34:	88 ec       	ldi	r24, 0xC8	; 200
     a36:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     a3a:	87 e8       	ldi	r24, 0x87	; 135
     a3c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     a40:	80 91 7a 00 	lds	r24, 0x007A
     a44:	80 64       	ori	r24, 0x40	; 64
     a46:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a4a:	80 91 7a 00 	lds	r24, 0x007A
     a4e:	86 fd       	sbrc	r24, 6
     a50:	fc cf       	rjmp	.-8      	; 0xa4a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     a52:	80 91 78 00 	lds	r24, 0x0078
     a56:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     a5a:	10 92 7c 00 	sts	0x007C, r1
     a5e:	23 ea       	ldi	r18, 0xA3	; 163
     a60:	20 93 7a 00 	sts	0x007A, r18
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     a6a:	78 94       	sei
     a6c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     a72:	08 95       	ret

00000a74 <rand_hard>:

uint8_t rand_hard() {
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	e0 e0       	ldi	r30, 0x00	; 0
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     a80:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     a82:	03 ea       	ldi	r16, 0xA3	; 163
     a84:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     a86:	d6 e0       	ldi	r29, 0x06	; 6
     a88:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     a8a:	a1 e0       	ldi	r26, 0x01	; 1
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     a8e:	60 e8       	ldi	r22, 0x80	; 128
     a90:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     a92:	f8 94       	cli
            adc_setup_conversion(6);
     a94:	d0 93 7c 00 	sts	0x007C, r29
     a98:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     a9c:	90 91 7a 00 	lds	r25, 0x007A
     aa0:	90 64       	ori	r25, 0x40	; 64
     aa2:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     aa6:	90 91 7a 00 	lds	r25, 0x007A
     aaa:	96 fd       	sbrc	r25, 6
     aac:	fc cf       	rjmp	.-8      	; 0xaa6 <rand_hard+0x32>
            a = ADCW&0x1;
     aae:	20 91 78 00 	lds	r18, 0x0078
     ab2:	30 91 79 00 	lds	r19, 0x0079
     ab6:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     ab8:	90 91 7a 00 	lds	r25, 0x007A
     abc:	90 64       	ori	r25, 0x40	; 64
     abe:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     ac2:	90 91 7a 00 	lds	r25, 0x007A
     ac6:	96 fd       	sbrc	r25, 6
     ac8:	fc cf       	rjmp	.-8      	; 0xac2 <rand_hard+0x4e>
            b = ADCW&0x1;
     aca:	40 91 78 00 	lds	r20, 0x0078
     ace:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     ad2:	10 92 7c 00 	sts	0x007C, r1
     ad6:	00 93 7a 00 	sts	0x007A, r16
     ada:	10 93 7b 00 	sts	0x007B, r17
            sei();
     ade:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     ae0:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     ae2:	24 13       	cpse	r18, r20
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <rand_hard+0x78>
     ae6:	61 50       	subi	r22, 0x01	; 1
     ae8:	71 09       	sbc	r23, r1
     aea:	99 f6       	brne	.-90     	; 0xa92 <rand_hard+0x1e>
        if (a)
     aec:	22 23       	and	r18, r18
     aee:	39 f0       	breq	.+14     	; 0xafe <rand_hard+0x8a>
            num |= (1<<i);
     af0:	9d 01       	movw	r18, r26
     af2:	0e 2e       	mov	r0, r30
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <rand_hard+0x84>
     af6:	22 0f       	add	r18, r18
     af8:	0a 94       	dec	r0
     afa:	ea f7       	brpl	.-6      	; 0xaf6 <rand_hard+0x82>
     afc:	82 2b       	or	r24, r18
     afe:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     b00:	e8 30       	cpi	r30, 0x08	; 8
     b02:	f1 05       	cpc	r31, r1
     b04:	09 f0       	breq	.+2      	; 0xb08 <rand_hard+0x94>
     b06:	c3 cf       	rjmp	.-122    	; 0xa8e <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     b12:	80 91 04 01 	lds	r24, 0x0104
     b16:	98 2f       	mov	r25, r24
     b18:	99 0f       	add	r25, r25
     b1a:	99 0f       	add	r25, r25
     b1c:	99 0f       	add	r25, r25
     b1e:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     b20:	90 91 1c 01 	lds	r25, 0x011C
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	29 0f       	add	r18, r25
     b28:	20 93 1c 01 	sts	0x011C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     b2c:	28 2f       	mov	r18, r24
     b2e:	22 95       	swap	r18
     b30:	26 95       	lsr	r18
     b32:	27 70       	andi	r18, 0x07	; 7
     b34:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     b36:	96 95       	lsr	r25
     b38:	96 95       	lsr	r25
     b3a:	89 27       	eor	r24, r25
     b3c:	80 93 04 01 	sts	0x0104, r24
    return seed;
}
     b40:	08 95       	ret

00000b42 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     b42:	80 93 04 01 	sts	0x0104, r24
     b46:	08 95       	ret

00000b48 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     b48:	80 91 59 01 	lds	r24, 0x0159
     b4c:	81 11       	cpse	r24, r1
     b4e:	16 c0       	rjmp	.+44     	; 0xb7c <get_voltage+0x34>
        cli();                                    // disable interrupts
     b50:	f8 94       	cli
        adc_setup_conversion(6);
     b52:	86 e0       	ldi	r24, 0x06	; 6
     b54:	80 93 7c 00 	sts	0x007C, r24
     b58:	83 e8       	ldi	r24, 0x83	; 131
     b5a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     b5e:	80 91 7a 00 	lds	r24, 0x007A
     b62:	80 64       	ori	r24, 0x40	; 64
     b64:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     b68:	80 91 7a 00 	lds	r24, 0x007A
     b6c:	86 fd       	sbrc	r24, 6
     b6e:	fc cf       	rjmp	.-8      	; 0xb68 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     b70:	80 91 78 00 	lds	r24, 0x0078
     b74:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     b78:	78 94       	sei
     b7a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     b80:	08 95       	ret

00000b82 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     b82:	2f 92       	push	r2
     b84:	3f 92       	push	r3
     b86:	4f 92       	push	r4
     b88:	5f 92       	push	r5
     b8a:	6f 92       	push	r6
     b8c:	7f 92       	push	r7
     b8e:	8f 92       	push	r8
     b90:	9f 92       	push	r9
     b92:	af 92       	push	r10
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <estimate_distance+0x26>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <estimate_distance+0x28>
     baa:	00 d0       	rcall	.+0      	; 0xbac <estimate_distance+0x2a>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     bb2:	dc 01       	movw	r26, r24
     bb4:	12 96       	adiw	r26, 0x02	; 2
     bb6:	0d 90       	ld	r0, X+
     bb8:	bc 91       	ld	r27, X
     bba:	a0 2d       	mov	r26, r0
     bbc:	be 83       	std	Y+6, r27	; 0x06
     bbe:	ad 83       	std	Y+5, r26	; 0x05
     bc0:	a4 38       	cpi	r26, 0x84	; 132
     bc2:	e3 e0       	ldi	r30, 0x03	; 3
     bc4:	be 07       	cpc	r27, r30
     bc6:	0c f0       	brlt	.+2      	; 0xbca <estimate_distance+0x48>
     bc8:	c9 c0       	rjmp	.+402    	; 0xd5c <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     bca:	80 91 33 01 	lds	r24, 0x0133
     bce:	90 91 34 01 	lds	r25, 0x0134
     bd2:	8a 17       	cp	r24, r26
     bd4:	9b 07       	cpc	r25, r27
     bd6:	08 f4       	brcc	.+2      	; 0xbda <estimate_distance+0x58>
     bd8:	37 c1       	rjmp	.+622    	; 0xe48 <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     bda:	00 91 35 01 	lds	r16, 0x0135
     bde:	10 91 36 01 	lds	r17, 0x0136
     be2:	0a 17       	cp	r16, r26
     be4:	1b 07       	cpc	r17, r27
     be6:	08 f4       	brcc	.+2      	; 0xbea <estimate_distance+0x68>
     be8:	2f c2       	rjmp	.+1118   	; 0x1048 <estimate_distance+0x4c6>
     bea:	00 91 37 01 	lds	r16, 0x0137
     bee:	10 91 38 01 	lds	r17, 0x0138
     bf2:	0a 17       	cp	r16, r26
     bf4:	1b 07       	cpc	r17, r27
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <estimate_distance+0x78>
     bf8:	2f c2       	rjmp	.+1118   	; 0x1058 <estimate_distance+0x4d6>
     bfa:	00 91 39 01 	lds	r16, 0x0139
     bfe:	10 91 3a 01 	lds	r17, 0x013A
     c02:	0a 17       	cp	r16, r26
     c04:	1b 07       	cpc	r17, r27
     c06:	08 f4       	brcc	.+2      	; 0xc0a <estimate_distance+0x88>
     c08:	2f c2       	rjmp	.+1118   	; 0x1068 <estimate_distance+0x4e6>
     c0a:	00 91 3b 01 	lds	r16, 0x013B
     c0e:	10 91 3c 01 	lds	r17, 0x013C
     c12:	0a 17       	cp	r16, r26
     c14:	1b 07       	cpc	r17, r27
     c16:	08 f4       	brcc	.+2      	; 0xc1a <estimate_distance+0x98>
     c18:	2f c2       	rjmp	.+1118   	; 0x1078 <estimate_distance+0x4f6>
     c1a:	00 91 3d 01 	lds	r16, 0x013D
     c1e:	10 91 3e 01 	lds	r17, 0x013E
     c22:	0a 17       	cp	r16, r26
     c24:	1b 07       	cpc	r17, r27
     c26:	08 f4       	brcc	.+2      	; 0xc2a <estimate_distance+0xa8>
     c28:	ef c1       	rjmp	.+990    	; 0x1008 <estimate_distance+0x486>
     c2a:	00 91 3f 01 	lds	r16, 0x013F
     c2e:	10 91 40 01 	lds	r17, 0x0140
     c32:	0a 17       	cp	r16, r26
     c34:	1b 07       	cpc	r17, r27
     c36:	08 f4       	brcc	.+2      	; 0xc3a <estimate_distance+0xb8>
     c38:	27 c2       	rjmp	.+1102   	; 0x1088 <estimate_distance+0x506>
     c3a:	00 91 41 01 	lds	r16, 0x0141
     c3e:	10 91 42 01 	lds	r17, 0x0142
     c42:	0a 17       	cp	r16, r26
     c44:	1b 07       	cpc	r17, r27
     c46:	08 f4       	brcc	.+2      	; 0xc4a <estimate_distance+0xc8>
     c48:	27 c2       	rjmp	.+1102   	; 0x1098 <estimate_distance+0x516>
     c4a:	00 91 43 01 	lds	r16, 0x0143
     c4e:	10 91 44 01 	lds	r17, 0x0144
     c52:	0a 17       	cp	r16, r26
     c54:	1b 07       	cpc	r17, r27
     c56:	08 f4       	brcc	.+2      	; 0xc5a <estimate_distance+0xd8>
     c58:	27 c2       	rjmp	.+1102   	; 0x10a8 <estimate_distance+0x526>
     c5a:	00 91 45 01 	lds	r16, 0x0145
     c5e:	10 91 46 01 	lds	r17, 0x0146
     c62:	0a 17       	cp	r16, r26
     c64:	1b 07       	cpc	r17, r27
     c66:	08 f4       	brcc	.+2      	; 0xc6a <estimate_distance+0xe8>
     c68:	27 c2       	rjmp	.+1102   	; 0x10b8 <estimate_distance+0x536>
     c6a:	00 91 47 01 	lds	r16, 0x0147
     c6e:	10 91 48 01 	lds	r17, 0x0148
     c72:	0a 17       	cp	r16, r26
     c74:	1b 07       	cpc	r17, r27
     c76:	08 f4       	brcc	.+2      	; 0xc7a <estimate_distance+0xf8>
     c78:	27 c2       	rjmp	.+1102   	; 0x10c8 <estimate_distance+0x546>
     c7a:	00 91 49 01 	lds	r16, 0x0149
     c7e:	10 91 4a 01 	lds	r17, 0x014A
     c82:	0a 17       	cp	r16, r26
     c84:	1b 07       	cpc	r17, r27
     c86:	08 f4       	brcc	.+2      	; 0xc8a <estimate_distance+0x108>
     c88:	23 c2       	rjmp	.+1094   	; 0x10d0 <estimate_distance+0x54e>
     c8a:	00 91 4b 01 	lds	r16, 0x014B
     c8e:	10 91 4c 01 	lds	r17, 0x014C
     c92:	0a 17       	cp	r16, r26
     c94:	1b 07       	cpc	r17, r27
     c96:	08 f4       	brcc	.+2      	; 0xc9a <estimate_distance+0x118>
     c98:	23 c2       	rjmp	.+1094   	; 0x10e0 <estimate_distance+0x55e>
     c9a:	00 91 4d 01 	lds	r16, 0x014D
     c9e:	10 91 4e 01 	lds	r17, 0x014E
     ca2:	0a 17       	cp	r16, r26
     ca4:	1b 07       	cpc	r17, r27
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <estimate_distance+0x128>
     ca8:	23 c2       	rjmp	.+1094   	; 0x10f0 <estimate_distance+0x56e>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	a0 ed       	ldi	r26, 0xD0	; 208
     cb0:	b0 e4       	ldi	r27, 0x40	; 64
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	ab 83       	std	Y+3, r26	; 0x03
     cb8:	bc 83       	std	Y+4, r27	; 0x04
     cba:	4c e0       	ldi	r20, 0x0C	; 12
     cbc:	e4 2e       	mov	r14, r20
     cbe:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     cc0:	f7 01       	movw	r30, r14
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ed 5c       	subi	r30, 0xCD	; 205
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	b8 01       	movw	r22, r16
     cd0:	68 1b       	sub	r22, r24
     cd2:	79 0b       	sbc	r23, r25
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     cdc:	9b 01       	movw	r18, r22
     cde:	ac 01       	movw	r20, r24
     ce0:	0e 94 46 0c 	call	0x188c	; 0x188c <__addsf3>
     ce4:	6b 01       	movw	r12, r22
     ce6:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     ce8:	ad 81       	ldd	r26, Y+5	; 0x05
     cea:	be 81       	ldd	r27, Y+6	; 0x06
     cec:	bd 01       	movw	r22, r26
     cee:	bb 0f       	add	r27, r27
     cf0:	88 0b       	sbc	r24, r24
     cf2:	99 0b       	sbc	r25, r25
     cf4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     cf8:	4b 01       	movw	r8, r22
     cfa:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     cfc:	b8 01       	movw	r22, r16
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     d06:	2b 01       	movw	r4, r22
     d08:	3c 01       	movw	r6, r24
     d0a:	29 81       	ldd	r18, Y+1	; 0x01
     d0c:	3a 81       	ldd	r19, Y+2	; 0x02
     d0e:	4b 81       	ldd	r20, Y+3	; 0x03
     d10:	5c 81       	ldd	r21, Y+4	; 0x04
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	c3 01       	movw	r24, r6
     d20:	b2 01       	movw	r22, r4
     d22:	0e 94 45 0c 	call	0x188a	; 0x188a <__subsf3>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     d2a:	c5 01       	movw	r24, r10
     d2c:	b4 01       	movw	r22, r8
     d2e:	0e 94 45 0c 	call	0x188a	; 0x188a <__subsf3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e2       	ldi	r20, 0x20	; 32
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
            b=((int)((int)b/(int)slope));
     d3e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fixsfsi>
     d42:	8b 01       	movw	r16, r22
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fixsfsi>
     d4c:	ab 01       	movw	r20, r22
     d4e:	bc 01       	movw	r22, r24
     d50:	c8 01       	movw	r24, r16
     d52:	ba 01       	movw	r22, r20
     d54:	0e 94 08 0c 	call	0x1810	; 0x1810 <__divmodhi4>
            dist_high=b;
     d58:	16 2f       	mov	r17, r22
     d5a:	77 c0       	rjmp	.+238    	; 0xe4a <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d5c:	dc 01       	movw	r26, r24
     d5e:	cd 90       	ld	r12, X+
     d60:	dc 90       	ld	r13, X
     d62:	80 91 5a 01 	lds	r24, 0x015A
     d66:	90 91 5b 01 	lds	r25, 0x015B
     d6a:	8c 15       	cp	r24, r12
     d6c:	9d 05       	cpc	r25, r13
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <estimate_distance+0x1f0>
     d70:	8c c0       	rjmp	.+280    	; 0xe8a <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     d72:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d74:	e0 90 5c 01 	lds	r14, 0x015C
     d78:	f0 90 5d 01 	lds	r15, 0x015D
     d7c:	ec 14       	cp	r14, r12
     d7e:	fd 04       	cpc	r15, r13
     d80:	08 f4       	brcc	.+2      	; 0xd84 <estimate_distance+0x202>
     d82:	5e c1       	rjmp	.+700    	; 0x1040 <estimate_distance+0x4be>
     d84:	e0 90 5e 01 	lds	r14, 0x015E
     d88:	f0 90 5f 01 	lds	r15, 0x015F
     d8c:	ec 14       	cp	r14, r12
     d8e:	fd 04       	cpc	r15, r13
     d90:	08 f4       	brcc	.+2      	; 0xd94 <estimate_distance+0x212>
     d92:	5e c1       	rjmp	.+700    	; 0x1050 <estimate_distance+0x4ce>
     d94:	e0 90 60 01 	lds	r14, 0x0160
     d98:	f0 90 61 01 	lds	r15, 0x0161
     d9c:	ec 14       	cp	r14, r12
     d9e:	fd 04       	cpc	r15, r13
     da0:	08 f4       	brcc	.+2      	; 0xda4 <estimate_distance+0x222>
     da2:	5e c1       	rjmp	.+700    	; 0x1060 <estimate_distance+0x4de>
     da4:	e0 90 62 01 	lds	r14, 0x0162
     da8:	f0 90 63 01 	lds	r15, 0x0163
     dac:	ec 14       	cp	r14, r12
     dae:	fd 04       	cpc	r15, r13
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <estimate_distance+0x232>
     db2:	5e c1       	rjmp	.+700    	; 0x1070 <estimate_distance+0x4ee>
     db4:	e0 90 64 01 	lds	r14, 0x0164
     db8:	f0 90 65 01 	lds	r15, 0x0165
     dbc:	ec 14       	cp	r14, r12
     dbe:	fd 04       	cpc	r15, r13
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <estimate_distance+0x242>
     dc2:	c3 c0       	rjmp	.+390    	; 0xf4a <estimate_distance+0x3c8>
     dc4:	e0 90 66 01 	lds	r14, 0x0166
     dc8:	f0 90 67 01 	lds	r15, 0x0167
     dcc:	ec 14       	cp	r14, r12
     dce:	fd 04       	cpc	r15, r13
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <estimate_distance+0x252>
     dd2:	56 c1       	rjmp	.+684    	; 0x1080 <estimate_distance+0x4fe>
     dd4:	e0 90 68 01 	lds	r14, 0x0168
     dd8:	f0 90 69 01 	lds	r15, 0x0169
     ddc:	ec 14       	cp	r14, r12
     dde:	fd 04       	cpc	r15, r13
     de0:	08 f4       	brcc	.+2      	; 0xde4 <estimate_distance+0x262>
     de2:	56 c1       	rjmp	.+684    	; 0x1090 <estimate_distance+0x50e>
     de4:	e0 90 6a 01 	lds	r14, 0x016A
     de8:	f0 90 6b 01 	lds	r15, 0x016B
     dec:	ec 14       	cp	r14, r12
     dee:	fd 04       	cpc	r15, r13
     df0:	08 f4       	brcc	.+2      	; 0xdf4 <estimate_distance+0x272>
     df2:	56 c1       	rjmp	.+684    	; 0x10a0 <estimate_distance+0x51e>
     df4:	e0 90 6c 01 	lds	r14, 0x016C
     df8:	f0 90 6d 01 	lds	r15, 0x016D
     dfc:	ec 14       	cp	r14, r12
     dfe:	fd 04       	cpc	r15, r13
     e00:	08 f4       	brcc	.+2      	; 0xe04 <estimate_distance+0x282>
     e02:	56 c1       	rjmp	.+684    	; 0x10b0 <estimate_distance+0x52e>
     e04:	e0 90 6e 01 	lds	r14, 0x016E
     e08:	f0 90 6f 01 	lds	r15, 0x016F
     e0c:	ec 14       	cp	r14, r12
     e0e:	fd 04       	cpc	r15, r13
     e10:	08 f4       	brcc	.+2      	; 0xe14 <estimate_distance+0x292>
     e12:	56 c1       	rjmp	.+684    	; 0x10c0 <estimate_distance+0x53e>
     e14:	e0 90 70 01 	lds	r14, 0x0170
     e18:	f0 90 71 01 	lds	r15, 0x0171
     e1c:	ec 14       	cp	r14, r12
     e1e:	fd 04       	cpc	r15, r13
     e20:	08 f4       	brcc	.+2      	; 0xe24 <estimate_distance+0x2a2>
     e22:	5a c1       	rjmp	.+692    	; 0x10d8 <estimate_distance+0x556>
     e24:	e0 90 72 01 	lds	r14, 0x0172
     e28:	f0 90 73 01 	lds	r15, 0x0173
     e2c:	ec 14       	cp	r14, r12
     e2e:	fd 04       	cpc	r15, r13
     e30:	08 f4       	brcc	.+2      	; 0xe34 <estimate_distance+0x2b2>
     e32:	5a c1       	rjmp	.+692    	; 0x10e8 <estimate_distance+0x566>
     e34:	e0 90 74 01 	lds	r14, 0x0174
     e38:	f0 90 75 01 	lds	r15, 0x0175
     e3c:	ec 14       	cp	r14, r12
     e3e:	fd 04       	cpc	r15, r13
     e40:	08 f4       	brcc	.+2      	; 0xe44 <estimate_distance+0x2c2>
     e42:	5a c1       	rjmp	.+692    	; 0x10f8 <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     e44:	0a e5       	ldi	r16, 0x5A	; 90
     e46:	31 c0       	rjmp	.+98     	; 0xeaa <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     e48:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     e4a:	ed 81       	ldd	r30, Y+5	; 0x05
     e4c:	fe 81       	ldd	r31, Y+6	; 0x06
     e4e:	ed 3b       	cpi	r30, 0xBD	; 189
     e50:	f2 40       	sbci	r31, 0x02	; 2
     e52:	fc f4       	brge	.+62     	; 0xe92 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     e54:	81 e2       	ldi	r24, 0x21	; 33
     e56:	81 0f       	add	r24, r17
    }
}
     e58:	26 96       	adiw	r28, 0x06	; 6
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	3f 90       	pop	r3
     e86:	2f 90       	pop	r2
     e88:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     e8a:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     e8c:	81 e2       	ldi	r24, 0x21	; 33
     e8e:	80 0f       	add	r24, r16
     e90:	e3 cf       	rjmp	.-58     	; 0xe58 <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     e92:	d1 01       	movw	r26, r2
     e94:	cd 90       	ld	r12, X+
     e96:	dc 90       	ld	r13, X
     e98:	80 91 5a 01 	lds	r24, 0x015A
     e9c:	90 91 5b 01 	lds	r25, 0x015B
     ea0:	8c 15       	cp	r24, r12
     ea2:	9d 05       	cpc	r25, r13
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <estimate_distance+0x326>
     ea6:	66 cf       	rjmp	.-308    	; 0xd74 <estimate_distance+0x1f2>
            dist_low=0;
     ea8:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     eaa:	1f 3f       	cpi	r17, 0xFF	; 255
     eac:	79 f3       	breq	.-34     	; 0xe8c <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     eae:	ed 81       	ldd	r30, Y+5	; 0x05
     eb0:	fe 81       	ldd	r31, Y+6	; 0x06
     eb2:	bf 01       	movw	r22, r30
     eb4:	ff 0f       	add	r31, r31
     eb6:	88 0b       	sbc	r24, r24
     eb8:	99 0b       	sbc	r25, r25
     eba:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
     ec2:	61 2f       	mov	r22, r17
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     ece:	4b 01       	movw	r8, r22
     ed0:	5c 01       	movw	r10, r24
     ed2:	a7 01       	movw	r20, r14
     ed4:	96 01       	movw	r18, r12
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	81 e6       	ldi	r24, 0x61	; 97
     edc:	94 e4       	ldi	r25, 0x44	; 68
     ede:	0e 94 45 0c 	call	0x188a	; 0x188a <__subsf3>
     ee2:	9b 01       	movw	r18, r22
     ee4:	ac 01       	movw	r20, r24
     ee6:	c5 01       	movw	r24, r10
     ee8:	b4 01       	movw	r22, r8
     eea:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     eee:	4b 01       	movw	r8, r22
     ef0:	5c 01       	movw	r10, r24
     ef2:	60 2f       	mov	r22, r16
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     efe:	2b 01       	movw	r4, r22
     f00:	3c 01       	movw	r6, r24
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	4f e2       	ldi	r20, 0x2F	; 47
     f08:	54 e4       	ldi	r21, 0x44	; 68
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	0e 94 45 0c 	call	0x188a	; 0x188a <__subsf3>
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	c3 01       	movw	r24, r6
     f18:	b2 01       	movw	r22, r4
     f1a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	c5 01       	movw	r24, r10
     f24:	b4 01       	movw	r22, r8
     f26:	0e 94 46 0c 	call	0x188c	; 0x188c <__addsf3>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	48 e4       	ldi	r20, 0x48	; 72
     f30:	53 e4       	ldi	r21, 0x43	; 67
     f32:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__divsf3>
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	44 e0       	ldi	r20, 0x04	; 4
     f3c:	52 e4       	ldi	r21, 0x42	; 66
     f3e:	0e 94 46 0c 	call	0x188c	; 0x188c <__addsf3>
     f42:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__fixunssfsi>
     f46:	86 2f       	mov	r24, r22
     f48:	87 cf       	rjmp	.-242    	; 0xe58 <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f4a:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	fc 01       	movw	r30, r24
     f56:	e8 5a       	subi	r30, 0xA8	; 168
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	b7 01       	movw	r22, r14
     f60:	68 1b       	sub	r22, r24
     f62:	79 0b       	sbc	r23, r25
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     f6c:	9b 01       	movw	r18, r22
     f6e:	ac 01       	movw	r20, r24
     f70:	0e 94 46 0c 	call	0x188c	; 0x188c <__addsf3>
     f74:	4b 01       	movw	r8, r22
     f76:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     f78:	b6 01       	movw	r22, r12
     f7a:	dd 0c       	add	r13, r13
     f7c:	88 0b       	sbc	r24, r24
     f7e:	99 0b       	sbc	r25, r25
     f80:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__floatsisf>
     f84:	2b 01       	movw	r4, r22
     f86:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     f88:	b7 01       	movw	r22, r14
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     f92:	6b 01       	movw	r12, r22
     f94:	7c 01       	movw	r14, r24
     f96:	60 2f       	mov	r22, r16
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	5f e3       	ldi	r21, 0x3F	; 63
     faa:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	a9 01       	movw	r20, r18
     fb4:	0e 94 46 0c 	call	0x188c	; 0x188c <__addsf3>
     fb8:	a5 01       	movw	r20, r10
     fba:	94 01       	movw	r18, r8
     fbc:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
     fc0:	9b 01       	movw	r18, r22
     fc2:	ac 01       	movw	r20, r24
     fc4:	c7 01       	movw	r24, r14
     fc6:	b6 01       	movw	r22, r12
     fc8:	0e 94 45 0c 	call	0x188a	; 0x188a <__subsf3>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     fd0:	c3 01       	movw	r24, r6
     fd2:	b2 01       	movw	r22, r4
     fd4:	0e 94 45 0c 	call	0x188a	; 0x188a <__subsf3>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
                b=((int)((int)b/(int)slope));
     fe4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fixsfsi>
     fe8:	7b 01       	movw	r14, r22
     fea:	c5 01       	movw	r24, r10
     fec:	b4 01       	movw	r22, r8
     fee:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fixsfsi>
     ff2:	ab 01       	movw	r20, r22
     ff4:	bc 01       	movw	r22, r24
     ff6:	c7 01       	movw	r24, r14
     ff8:	ba 01       	movw	r22, r20
     ffa:	0e 94 08 0c 	call	0x1810	; 0x1810 <__divmodhi4>
                dist_low=b;
     ffe:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
    1000:	6f 3f       	cpi	r22, 0xFF	; 255
    1002:	09 f0       	breq	.+2      	; 0x1006 <estimate_distance+0x484>
    1004:	52 cf       	rjmp	.-348    	; 0xeaa <estimate_distance+0x328>
    1006:	26 cf       	rjmp	.-436    	; 0xe54 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1008:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    100a:	85 e0       	ldi	r24, 0x05	; 5
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	7c 01       	movw	r14, r24
    1010:	f1 e0       	ldi	r31, 0x01	; 1
    1012:	ef 1a       	sub	r14, r31
    1014:	f1 08       	sbc	r15, r1
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__floatunsisf>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__mulsf3>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	0e 94 46 0c 	call	0x188c	; 0x188c <__addsf3>
    1036:	69 83       	std	Y+1, r22	; 0x01
    1038:	7a 83       	std	Y+2, r23	; 0x02
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
    103e:	40 ce       	rjmp	.-896    	; 0xcc0 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1040:	01 e0       	ldi	r16, 0x01	; 1
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	84 cf       	rjmp	.-248    	; 0xf50 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	df cf       	rjmp	.-66     	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1050:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	7c cf       	rjmp	.-264    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1058:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	d7 cf       	rjmp	.-82     	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1060:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	74 cf       	rjmp	.-280    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1068:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	cf cf       	rjmp	.-98     	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1070:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
    1072:	84 e0       	ldi	r24, 0x04	; 4
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	6c cf       	rjmp	.-296    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1078:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    107a:	84 e0       	ldi	r24, 0x04	; 4
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	c7 cf       	rjmp	.-114    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1080:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
    1082:	86 e0       	ldi	r24, 0x06	; 6
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	64 cf       	rjmp	.-312    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1088:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    108a:	86 e0       	ldi	r24, 0x06	; 6
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	bf cf       	rjmp	.-130    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1090:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
    1092:	87 e0       	ldi	r24, 0x07	; 7
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	5c cf       	rjmp	.-328    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1098:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    109a:	87 e0       	ldi	r24, 0x07	; 7
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	b7 cf       	rjmp	.-146    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10a0:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
    10a2:	88 e0       	ldi	r24, 0x08	; 8
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	54 cf       	rjmp	.-344    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10a8:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    10aa:	88 e0       	ldi	r24, 0x08	; 8
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	af cf       	rjmp	.-162    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10b0:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    10b2:	89 e0       	ldi	r24, 0x09	; 9
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	4c cf       	rjmp	.-360    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10b8:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    10ba:	89 e0       	ldi	r24, 0x09	; 9
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a7 cf       	rjmp	.-178    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10c0:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    10c2:	8a e0       	ldi	r24, 0x0A	; 10
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	44 cf       	rjmp	.-376    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10c8:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    10ca:	8a e0       	ldi	r24, 0x0A	; 10
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9f cf       	rjmp	.-194    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10d0:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    10d2:	8b e0       	ldi	r24, 0x0B	; 11
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9b cf       	rjmp	.-202    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10d8:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    10da:	8b e0       	ldi	r24, 0x0B	; 11
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	38 cf       	rjmp	.-400    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10e0:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    10e2:	8c e0       	ldi	r24, 0x0C	; 12
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	93 cf       	rjmp	.-218    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10e8:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    10ea:	8c e0       	ldi	r24, 0x0C	; 12
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	30 cf       	rjmp	.-416    	; 0xf50 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    10f0:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    10f2:	8d e0       	ldi	r24, 0x0D	; 13
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	8b cf       	rjmp	.-234    	; 0x100e <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    10f8:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	28 cf       	rjmp	.-432    	; 0xf50 <estimate_distance+0x3ce>

00001100 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
    tx_clock += tx_increment;
    1122:	20 91 79 01 	lds	r18, 0x0179
    1126:	30 91 7a 01 	lds	r19, 0x017A
    112a:	80 91 77 01 	lds	r24, 0x0177
    112e:	90 91 78 01 	lds	r25, 0x0178
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	90 93 7a 01 	sts	0x017A, r25
    113a:	80 93 79 01 	sts	0x0179, r24
    tx_increment = 0xFF;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	90 93 78 01 	sts	0x0178, r25
    1146:	80 93 77 01 	sts	0x0177, r24
    OCR0A = tx_increment;
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    114e:	80 91 55 01 	lds	r24, 0x0155
    1152:	90 91 56 01 	lds	r25, 0x0156
    1156:	a0 91 57 01 	lds	r26, 0x0157
    115a:	b0 91 58 01 	lds	r27, 0x0158
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	a1 1d       	adc	r26, r1
    1162:	b1 1d       	adc	r27, r1
    1164:	80 93 55 01 	sts	0x0155, r24
    1168:	90 93 56 01 	sts	0x0156, r25
    116c:	a0 93 57 01 	sts	0x0157, r26
    1170:	b0 93 58 01 	sts	0x0158, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1174:	80 91 59 01 	lds	r24, 0x0159
    1178:	81 11       	cpse	r24, r1
    117a:	0f c0       	rjmp	.+30     	; 0x119a <__vector_14+0x9a>
    117c:	80 91 88 01 	lds	r24, 0x0188
    1180:	90 91 89 01 	lds	r25, 0x0189
    1184:	20 91 79 01 	lds	r18, 0x0179
    1188:	30 91 7a 01 	lds	r19, 0x017A
    118c:	82 17       	cp	r24, r18
    118e:	93 07       	cpc	r25, r19
    1190:	20 f4       	brcc	.+8      	; 0x119a <__vector_14+0x9a>
    1192:	80 91 1f 01 	lds	r24, 0x011F
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	89 f0       	breq	.+34     	; 0x11bc <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    11bc:	e0 91 07 01 	lds	r30, 0x0107
    11c0:	f0 91 08 01 	lds	r31, 0x0108
    11c4:	09 95       	icall
        if (msg) {
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	41 f3       	breq	.-48     	; 0x119a <__vector_14+0x9a>
            if (message_send(msg)) {
    11ca:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <message_send>
    11ce:	81 11       	cpse	r24, r1
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    11d2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <rand>
    11d6:	99 27       	eor	r25, r25
    11d8:	90 93 78 01 	sts	0x0178, r25
    11dc:	80 93 77 01 	sts	0x0177, r24
                OCR0A = tx_increment;
    11e0:	87 bd       	out	0x27, r24	; 39
    11e2:	db cf       	rjmp	.-74     	; 0x119a <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    11e4:	e0 91 05 01 	lds	r30, 0x0105
    11e8:	f0 91 06 01 	lds	r31, 0x0106
    11ec:	09 95       	icall
                tx_clock = 0;
    11ee:	10 92 7a 01 	sts	0x017A, r1
    11f2:	10 92 79 01 	sts	0x0179, r1
    11f6:	d1 cf       	rjmp	.-94     	; 0x119a <__vector_14+0x9a>

000011f8 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    11f8:	80 ff       	sbrs	r24, 0
    11fa:	11 c0       	rjmp	.+34     	; 0x121e <set_color+0x26>
        DDRD |= (1<<5);
    11fc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    11fe:	81 ff       	sbrs	r24, 1
    1200:	11 c0       	rjmp	.+34     	; 0x1224 <set_color+0x2c>
        DDRD |= (1<<4);
    1202:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1204:	82 ff       	sbrs	r24, 2
    1206:	11 c0       	rjmp	.+34     	; 0x122a <set_color+0x32>
        DDRC |= (1<<3);
    1208:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    120a:	83 ff       	sbrs	r24, 3
    120c:	11 c0       	rjmp	.+34     	; 0x1230 <set_color+0x38>
        DDRC |= (1<<2);
    120e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1210:	84 ff       	sbrs	r24, 4
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <set_color+0x3e>
        DDRC |= (1<<5);
    1214:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1216:	85 fd       	sbrc	r24, 5
    1218:	11 c0       	rjmp	.+34     	; 0x123c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    121a:	3c 98       	cbi	0x07, 4	; 7
    121c:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    121e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1220:	81 fd       	sbrc	r24, 1
    1222:	ef cf       	rjmp	.-34     	; 0x1202 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1224:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1226:	82 fd       	sbrc	r24, 2
    1228:	ef cf       	rjmp	.-34     	; 0x1208 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    122a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    122c:	83 fd       	sbrc	r24, 3
    122e:	ef cf       	rjmp	.-34     	; 0x120e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1230:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1232:	84 fd       	sbrc	r24, 4
    1234:	ef cf       	rjmp	.-34     	; 0x1214 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1236:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1238:	85 ff       	sbrs	r24, 5
    123a:	ef cf       	rjmp	.-34     	; 0x121a <set_color+0x22>
        DDRC |= (1<<4);
    123c:	3c 9a       	sbi	0x07, 4	; 7
    123e:	08 95       	ret

00001240 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    rx_timer_off();
    124e:	10 92 81 00 	sts	0x0081, r1
    1252:	10 92 85 00 	sts	0x0085, r1
    1256:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 32 01 	sts	0x0132, r24
    rx_leadingbyte = 1;
    1260:	80 93 76 01 	sts	0x0176, r24
    rx_busy = 0;
    1264:	10 92 59 01 	sts	0x0159, r1
    adc_trigger_high_gain();
    1268:	10 92 7c 00 	sts	0x007C, r1
    126c:	93 ea       	ldi	r25, 0xA3	; 163
    126e:	90 93 7a 00 	sts	0x007A, r25
    1272:	80 93 7b 00 	sts	0x007B, r24
}
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    12aa:	20 91 84 00 	lds	r18, 0x0084
    12ae:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	40 93 59 01 	sts	0x0159, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    12b8:	80 91 32 01 	lds	r24, 0x0132
    12bc:	88 23       	and	r24, r24
    12be:	a9 f1       	breq	.+106    	; 0x132a <__vector_23+0xa6>
        rx_timer_on();
    12c0:	10 92 85 00 	sts	0x0085, r1
    12c4:	10 92 84 00 	sts	0x0084, r1
    12c8:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    12cc:	10 92 8a 01 	sts	0x018A, r1
        rx_leadingbit = 0;
    12d0:	10 92 32 01 	sts	0x0132, r1
        if (rx_leadingbyte) {
    12d4:	80 91 76 01 	lds	r24, 0x0176
    12d8:	88 23       	and	r24, r24
    12da:	a1 f0       	breq	.+40     	; 0x1304 <__vector_23+0x80>
            adc_finish_conversion();
    12dc:	80 91 7a 00 	lds	r24, 0x007A
    12e0:	86 fd       	sbrc	r24, 6
    12e2:	fc cf       	rjmp	.-8      	; 0x12dc <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    12e4:	80 91 78 00 	lds	r24, 0x0078
    12e8:	90 91 79 00 	lds	r25, 0x0079
    12ec:	90 93 54 01 	sts	0x0154, r25
    12f0:	80 93 53 01 	sts	0x0153, r24
            adc_trigger_low_gain();
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 7c 00 	sts	0x007C, r24
    12fa:	93 ea       	ldi	r25, 0xA3	; 163
    12fc:	90 93 7a 00 	sts	0x007A, r25
    1300:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	bf 91       	pop	r27
    130e:	af 91       	pop	r26
    1310:	9f 91       	pop	r25
    1312:	8f 91       	pop	r24
    1314:	7f 91       	pop	r23
    1316:	6f 91       	pop	r22
    1318:	5f 91       	pop	r21
    131a:	4f 91       	pop	r20
    131c:	3f 91       	pop	r19
    131e:	2f 91       	pop	r18
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    132a:	c9 01       	movw	r24, r18
    132c:	87 58       	subi	r24, 0x87	; 135
    132e:	91 09       	sbc	r25, r1
    1330:	84 37       	cpi	r24, 0x74	; 116
    1332:	99 40       	sbci	r25, 0x09	; 9
    1334:	08 f0       	brcs	.+2      	; 0x1338 <__vector_23+0xb4>
    1336:	52 c0       	rjmp	.+164    	; 0x13dc <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1338:	26 58       	subi	r18, 0x86	; 134
    133a:	31 09       	sbc	r19, r1
    133c:	a4 ef       	ldi	r26, 0xF4	; 244
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	0e 94 22 0c 	call	0x1844	; 0x1844 <__umulhisi3>
    1344:	aa 27       	eor	r26, r26
    1346:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1348:	88 30       	cpi	r24, 0x08	; 8
    134a:	91 05       	cpc	r25, r1
    134c:	a1 05       	cpc	r26, r1
    134e:	b1 05       	cpc	r27, r1
    1350:	08 f4       	brcc	.+2      	; 0x1354 <__vector_23+0xd0>
    1352:	7b c0       	rjmp	.+246    	; 0x144a <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1354:	40 93 32 01 	sts	0x0132, r20
                if (rx_leadingbyte) {
    1358:	80 91 76 01 	lds	r24, 0x0176
    135c:	81 11       	cpse	r24, r1
    135e:	52 c0       	rjmp	.+164    	; 0x1404 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1360:	80 91 50 01 	lds	r24, 0x0150
    1364:	e8 2f       	mov	r30, r24
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	e4 58       	subi	r30, 0x84	; 132
    136a:	fe 4f       	sbci	r31, 0xFE	; 254
    136c:	90 91 8a 01 	lds	r25, 0x018A
    1370:	90 83       	st	Z, r25
                    rx_byteindex++;
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	80 93 50 01 	sts	0x0150, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1378:	8c 30       	cpi	r24, 0x0C	; 12
    137a:	21 f6       	brne	.-120    	; 0x1304 <__vector_23+0x80>
                        rx_timer_off();
    137c:	10 92 81 00 	sts	0x0081, r1
    1380:	10 92 85 00 	sts	0x0085, r1
    1384:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1388:	40 93 76 01 	sts	0x0176, r20
                        rx_busy = 0;
    138c:	10 92 59 01 	sts	0x0159, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1390:	c0 91 86 01 	lds	r28, 0x0186
    1394:	d0 91 87 01 	lds	r29, 0x0187
    1398:	8c e7       	ldi	r24, 0x7C	; 124
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <message_crc>
    13a0:	c8 17       	cp	r28, r24
    13a2:	d9 07       	cpc	r29, r25
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <__vector_23+0x124>
    13a6:	ae cf       	rjmp	.-164    	; 0x1304 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    13a8:	80 91 85 01 	lds	r24, 0x0185
    13ac:	87 ff       	sbrs	r24, 7
    13ae:	61 c0       	rjmp	.+194    	; 0x1472 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    13b0:	98 e7       	ldi	r25, 0x78	; 120
    13b2:	98 0f       	add	r25, r24
    13b4:	93 30       	cpi	r25, 0x03	; 3
    13b6:	30 f0       	brcs	.+12     	; 0x13c4 <__vector_23+0x140>
        motors_off();
    13b8:	53 98       	cbi	0x0a, 3	; 10
    13ba:	23 98       	cbi	0x04, 3	; 4
    13bc:	10 92 b4 00 	sts	0x00B4, r1
    13c0:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	fc 01       	movw	r30, r24
    13c8:	e0 58       	subi	r30, 0x80	; 128
    13ca:	f1 09       	sbc	r31, r1
    13cc:	eb 30       	cpi	r30, 0x0B	; 11
    13ce:	f1 05       	cpc	r31, r1
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__vector_23+0x150>
    13d2:	98 cf       	rjmp	.-208    	; 0x1304 <__vector_23+0x80>
    13d4:	e5 5c       	subi	r30, 0xC5	; 197
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    13dc:	10 92 81 00 	sts	0x0081, r1
    13e0:	10 92 85 00 	sts	0x0085, r1
    13e4:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    13e8:	40 93 32 01 	sts	0x0132, r20
            rx_leadingbyte = 1;
    13ec:	40 93 76 01 	sts	0x0176, r20
            rx_busy = 0;
    13f0:	10 92 59 01 	sts	0x0159, r1
            adc_trigger_high_gain();
    13f4:	10 92 7c 00 	sts	0x007C, r1
    13f8:	83 ea       	ldi	r24, 0xA3	; 163
    13fa:	80 93 7a 00 	sts	0x007A, r24
    13fe:	40 93 7b 00 	sts	0x007B, r20
    1402:	80 cf       	rjmp	.-256    	; 0x1304 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1404:	80 91 7a 00 	lds	r24, 0x007A
    1408:	86 fd       	sbrc	r24, 6
    140a:	fc cf       	rjmp	.-8      	; 0x1404 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    140c:	80 91 78 00 	lds	r24, 0x0078
    1410:	90 91 79 00 	lds	r25, 0x0079
    1414:	90 93 52 01 	sts	0x0152, r25
    1418:	80 93 51 01 	sts	0x0151, r24
                    adc_trigger_high_gain();
    141c:	10 92 7c 00 	sts	0x007C, r1
    1420:	83 ea       	ldi	r24, 0xA3	; 163
    1422:	80 93 7a 00 	sts	0x007A, r24
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    142c:	90 91 8a 01 	lds	r25, 0x018A
    1430:	99 23       	and	r25, r25
    1432:	d1 f0       	breq	.+52     	; 0x1468 <__vector_23+0x1e4>
                        rx_timer_off();
    1434:	10 92 81 00 	sts	0x0081, r1
    1438:	10 92 85 00 	sts	0x0085, r1
    143c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1440:	80 93 76 01 	sts	0x0176, r24
                        rx_busy = 0;
    1444:	10 92 59 01 	sts	0x0159, r1
    1448:	5d cf       	rjmp	.-326    	; 0x1304 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	f9 01       	movw	r30, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <__vector_23+0x1d2>
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <__vector_23+0x1ce>
    145a:	cf 01       	movw	r24, r30
    145c:	90 91 8a 01 	lds	r25, 0x018A
    1460:	89 2b       	or	r24, r25
    1462:	80 93 8a 01 	sts	0x018A, r24
    1466:	4e cf       	rjmp	.-356    	; 0x1304 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1468:	10 92 76 01 	sts	0x0176, r1
                        rx_byteindex = 0;
    146c:	10 92 50 01 	sts	0x0150, r1
    1470:	49 cf       	rjmp	.-366    	; 0x1304 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1472:	e0 91 09 01 	lds	r30, 0x0109
    1476:	f0 91 0a 01 	lds	r31, 0x010A
    147a:	61 e5       	ldi	r22, 0x51	; 81
    147c:	71 e0       	ldi	r23, 0x01	; 1
    147e:	8c e7       	ldi	r24, 0x7C	; 124
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	09 95       	icall
    1484:	3f cf       	rjmp	.-386    	; 0x1304 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1486:	80 91 7c 01 	lds	r24, 0x017C
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	09 f4       	brne	.+2      	; 0x1490 <__vector_23+0x20c>
    148e:	dd c0       	rjmp	.+442    	; 0x164a <__vector_23+0x3c6>
    1490:	08 f4       	brcc	.+2      	; 0x1494 <__vector_23+0x210>
    1492:	ba c0       	rjmp	.+372    	; 0x1608 <__vector_23+0x384>
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	09 f4       	brne	.+2      	; 0x149a <__vector_23+0x216>
    1498:	c6 c0       	rjmp	.+396    	; 0x1626 <__vector_23+0x3a2>
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_23+0x21c>
    149e:	b1 c0       	rjmp	.+354    	; 0x1602 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    14a0:	80 91 1d 01 	lds	r24, 0x011D
    14a4:	90 91 82 01 	lds	r25, 0x0182
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	09 f4       	brne	.+2      	; 0x14ae <__vector_23+0x22a>
    14ac:	e3 c0       	rjmp	.+454    	; 0x1674 <__vector_23+0x3f0>
    14ae:	80 91 81 01 	lds	r24, 0x0181
                        prev_motion = MOVE_STOP;
    14b2:	10 92 1e 01 	sts	0x011E, r1
                        cur_motion = MOVE_STRAIGHT;
    14b6:	23 e0       	ldi	r18, 0x03	; 3
    14b8:	20 93 1d 01 	sts	0x011D, r18
                        kilo_straight_left = calibmsg->straight_left;
    14bc:	80 93 8d 01 	sts	0x018D, r24
                        kilo_straight_right = calibmsg->straight_right;
    14c0:	90 93 8e 01 	sts	0x018E, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    14c4:	80 91 1f 01 	lds	r24, 0x011F
    14c8:	86 30       	cpi	r24, 0x06	; 6
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__vector_23+0x24a>
    14cc:	1b cf       	rjmp	.-458    	; 0x1304 <__vector_23+0x80>
                motors_on();
    14ce:	53 9a       	sbi	0x0a, 3	; 10
    14d0:	23 9a       	sbi	0x04, 3	; 4
    14d2:	10 92 b4 00 	sts	0x00B4, r1
    14d6:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    14da:	86 e0       	ldi	r24, 0x06	; 6
    14dc:	80 93 1f 01 	sts	0x011F, r24
    14e0:	11 cf       	rjmp	.-478    	; 0x1304 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    14e2:	80 91 1f 01 	lds	r24, 0x011F
    14e6:	86 30       	cpi	r24, 0x06	; 6
    14e8:	99 f0       	breq	.+38     	; 0x1510 <__vector_23+0x28c>
                motors_on();
    14ea:	53 9a       	sbi	0x0a, 3	; 10
    14ec:	23 9a       	sbi	0x04, 3	; 4
    14ee:	10 92 b4 00 	sts	0x00B4, r1
    14f2:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    14f6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    14f8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    14fa:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    14fc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    14fe:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1500:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1502:	10 92 1d 01 	sts	0x011D, r1
    1506:	10 92 1e 01 	sts	0x011E, r1
                kilo_state = MOVING;
    150a:	86 e0       	ldi	r24, 0x06	; 6
    150c:	80 93 1f 01 	sts	0x011F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 01       	movw	r18, r24
    1516:	00 90 7c 01 	lds	r0, 0x017C
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <__vector_23+0x29c>
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <__vector_23+0x298>
    1524:	80 91 8b 01 	lds	r24, 0x018B
    1528:	90 91 8c 01 	lds	r25, 0x018C
    152c:	82 23       	and	r24, r18
    152e:	93 23       	and	r25, r19
    1530:	89 2b       	or	r24, r25
    1532:	09 f0       	breq	.+2      	; 0x1536 <__vector_23+0x2b2>
    1534:	86 c0       	rjmp	.+268    	; 0x1642 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1536:	10 92 1d 01 	sts	0x011D, r1
    153a:	e4 ce       	rjmp	.-568    	; 0x1304 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	80 93 1f 01 	sts	0x011F, r24
    1542:	e0 ce       	rjmp	.-576    	; 0x1304 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1544:	e0 e0       	ldi	r30, 0x00	; 0
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    154a:	80 91 6e 00 	lds	r24, 0x006E
    154e:	8d 7f       	andi	r24, 0xFD	; 253
    1550:	80 93 6e 00 	sts	0x006E, r24
    1554:	16 bc       	out	0x26, r1	; 38
            bootload();
    1556:	e0 e0       	ldi	r30, 0x00	; 0
    1558:	f0 e7       	ldi	r31, 0x70	; 112
    155a:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    155c:	10 92 1f 01 	sts	0x011F, r1
    1560:	d1 ce       	rjmp	.-606    	; 0x1304 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	80 93 1f 01 	sts	0x011F, r24
    1568:	cd ce       	rjmp	.-614    	; 0x1304 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    156a:	85 e0       	ldi	r24, 0x05	; 5
    156c:	80 93 1f 01 	sts	0x011F, r24
    1570:	c9 ce       	rjmp	.-622    	; 0x1304 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1572:	80 91 1f 01 	lds	r24, 0x011F
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	09 f4       	brne	.+2      	; 0x157c <__vector_23+0x2f8>
    157a:	c4 ce       	rjmp	.-632    	; 0x1304 <__vector_23+0x80>
    157c:	80 91 1f 01 	lds	r24, 0x011F
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	09 f4       	brne	.+2      	; 0x1586 <__vector_23+0x302>
    1584:	bf ce       	rjmp	.-642    	; 0x1304 <__vector_23+0x80>
                motors_on();
    1586:	53 9a       	sbi	0x0a, 3	; 10
    1588:	23 9a       	sbi	0x04, 3	; 4
    158a:	10 92 b4 00 	sts	0x00B4, r1
    158e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	80 93 1f 01 	sts	0x011F, r24
    1598:	b5 ce       	rjmp	.-662    	; 0x1304 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    159a:	80 91 1f 01 	lds	r24, 0x011F
    159e:	86 30       	cpi	r24, 0x06	; 6
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <__vector_23+0x320>
    15a2:	b0 ce       	rjmp	.-672    	; 0x1304 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    15a4:	60 91 8b 01 	lds	r22, 0x018B
    15a8:	80 eb       	ldi	r24, 0xB0	; 176
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    15b0:	60 91 8c 01 	lds	r22, 0x018C
    15b4:	81 eb       	ldi	r24, 0xB1	; 177
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    15bc:	60 91 8f 01 	lds	r22, 0x018F
    15c0:	85 e0       	ldi	r24, 0x05	; 5
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    15c8:	60 91 7b 01 	lds	r22, 0x017B
    15cc:	89 e0       	ldi	r24, 0x09	; 9
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    15d4:	60 91 8d 01 	lds	r22, 0x018D
    15d8:	8c e0       	ldi	r24, 0x0C	; 12
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    15e0:	60 91 8e 01 	lds	r22, 0x018E
    15e4:	84 e1       	ldi	r24, 0x14	; 20
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <eeprom_write_byte>
                        motors_off();
    15ec:	53 98       	cbi	0x0a, 3	; 10
    15ee:	23 98       	cbi	0x04, 3	; 4
    15f0:	10 92 b4 00 	sts	0x00B4, r1
    15f4:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 1f 01 	sts	0x011F, r24
    15fe:	80 91 7c 01 	lds	r24, 0x017C
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1602:	81 11       	cpse	r24, r1
    1604:	5f cf       	rjmp	.-322    	; 0x14c4 <__vector_23+0x240>
    1606:	7e ce       	rjmp	.-772    	; 0x1304 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1608:	88 23       	and	r24, r24
    160a:	39 f2       	breq	.-114    	; 0x159a <__vector_23+0x316>
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	c9 f7       	brne	.-14     	; 0x1602 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1610:	80 91 7d 01 	lds	r24, 0x017D
    1614:	90 91 7e 01 	lds	r25, 0x017E
    1618:	90 93 8c 01 	sts	0x018C, r25
    161c:	80 93 8b 01 	sts	0x018B, r24
                    cur_motion = MOVE_STOP;
    1620:	10 92 1d 01 	sts	0x011D, r1
    1624:	4f cf       	rjmp	.-354    	; 0x14c4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1626:	80 91 1d 01 	lds	r24, 0x011D
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	71 f1       	breq	.+92     	; 0x168a <__vector_23+0x406>
    162e:	80 91 80 01 	lds	r24, 0x0180
                        prev_motion = MOVE_STOP;
    1632:	10 92 1e 01 	sts	0x011E, r1
                        cur_motion = MOVE_RIGHT;
    1636:	92 e0       	ldi	r25, 0x02	; 2
    1638:	90 93 1d 01 	sts	0x011D, r25
                        kilo_turn_right = calibmsg->turn_right;
    163c:	80 93 7b 01 	sts	0x017B, r24
    1640:	41 cf       	rjmp	.-382    	; 0x14c4 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	80 93 1d 01 	sts	0x011D, r24
    1648:	5d ce       	rjmp	.-838    	; 0x1304 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    164a:	80 91 1d 01 	lds	r24, 0x011D
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	51 f0       	breq	.+20     	; 0x1666 <__vector_23+0x3e2>
    1652:	80 91 7f 01 	lds	r24, 0x017F
                        prev_motion = MOVE_STOP;
    1656:	10 92 1e 01 	sts	0x011E, r1
                        cur_motion = MOVE_LEFT;
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	90 93 1d 01 	sts	0x011D, r25
                        kilo_turn_left = calibmsg->turn_left;
    1660:	80 93 8f 01 	sts	0x018F, r24
    1664:	2f cf       	rjmp	.-418    	; 0x14c4 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1666:	80 91 7f 01 	lds	r24, 0x017F
    166a:	90 91 8f 01 	lds	r25, 0x018F
    166e:	89 13       	cpse	r24, r25
    1670:	f2 cf       	rjmp	.-28     	; 0x1656 <__vector_23+0x3d2>
    1672:	28 cf       	rjmp	.-432    	; 0x14c4 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1674:	80 91 8e 01 	lds	r24, 0x018E
    1678:	98 13       	cpse	r25, r24
    167a:	19 cf       	rjmp	.-462    	; 0x14ae <__vector_23+0x22a>
    167c:	80 91 81 01 	lds	r24, 0x0181
    1680:	20 91 8d 01 	lds	r18, 0x018D
    1684:	82 13       	cpse	r24, r18
    1686:	15 cf       	rjmp	.-470    	; 0x14b2 <__vector_23+0x22e>
    1688:	1d cf       	rjmp	.-454    	; 0x14c4 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    168a:	80 91 80 01 	lds	r24, 0x0180
    168e:	90 91 7b 01 	lds	r25, 0x017B
    1692:	89 13       	cpse	r24, r25
    1694:	ce cf       	rjmp	.-100    	; 0x1632 <__vector_23+0x3ae>
    1696:	16 cf       	rjmp	.-468    	; 0x14c4 <__vector_23+0x240>

00001698 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1698:	fc 01       	movw	r30, r24
    169a:	ac 01       	movw	r20, r24
    169c:	46 5f       	subi	r20, 0xF6	; 246
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    16a4:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    16a6:	82 27       	eor	r24, r18
    16a8:	08 2e       	mov	r0, r24
    16aa:	82 95       	swap	r24
    16ac:	80 7f       	andi	r24, 0xF0	; 240
    16ae:	80 25       	eor	r24, r0
    16b0:	09 2e       	mov	r0, r25
    16b2:	98 2f       	mov	r25, r24
    16b4:	82 95       	swap	r24
    16b6:	8f 70       	andi	r24, 0x0F	; 15
    16b8:	08 26       	eor	r0, r24
    16ba:	86 95       	lsr	r24
    16bc:	98 27       	eor	r25, r24
    16be:	89 27       	eor	r24, r25
    16c0:	88 0f       	add	r24, r24
    16c2:	88 0f       	add	r24, r24
    16c4:	88 0f       	add	r24, r24
    16c6:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    16c8:	e4 17       	cp	r30, r20
    16ca:	f5 07       	cpc	r31, r21
    16cc:	59 f7       	brne	.-42     	; 0x16a4 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    16ce:	08 95       	ret

000016d0 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    16d0:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    16d2:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    16d4:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    16d6:	20 91 4f 01 	lds	r18, 0x014F
    or tmpreg1, ddrreg
    16da:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    16dc:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    16de:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    16e0:	30 91 4f 01 	lds	r19, 0x014F
    16e4:	20 30       	cpi	r18, 0x00	; 0
    16e6:	29 f0       	breq	.+10     	; 0x16f2 <message_send+0x22>
    16e8:	00 00       	nop
    16ea:	25 b1       	in	r18, 0x05	; 5
    16ec:	23 2b       	or	r18, r19
    16ee:	25 b9       	out	0x05, r18	; 5
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <message_send+0x2a>
    16f2:	00 00       	nop
    16f4:	00 00       	nop
    16f6:	00 00       	nop
    16f8:	00 c0       	rjmp	.+0      	; 0x16fa <message_send+0x2a>
    16fa:	00 00       	nop
    16fc:	00 00       	nop
    16fe:	00 00       	nop
    1700:	30 95       	com	r19
    1702:	25 b1       	in	r18, 0x05	; 5
    1704:	23 23       	and	r18, r19
    1706:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1708:	2e ea       	ldi	r18, 0xAE	; 174
    170a:	2a 95       	dec	r18
    170c:	f1 f7       	brne	.-4      	; 0x170a <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    170e:	2b ee       	ldi	r18, 0xEB	; 235

00001710 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1710:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1712:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1714:	0a c0       	rjmp	.+20     	; 0x172a <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1716:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1718:	30 91 4f 01 	lds	r19, 0x014F
    com tmpreg2
    171c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    171e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1720:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1722:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1724:	0f be       	out	0x3f, r0	; 63
    return 0
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	08 95       	ret

0000172a <nocollision>:
nocollision:
    nop
    172a:	00 00       	nop
    dec tmpreg1
    172c:	2a 95       	dec	r18
    brne checkcollision
    172e:	81 f7       	brne	.-32     	; 0x1710 <checkcollision>

    ldi tmpreg1, 0x01
    1730:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1732:	30 91 4f 01 	lds	r19, 0x014F
    1736:	20 30       	cpi	r18, 0x00	; 0
    1738:	29 f0       	breq	.+10     	; 0x1744 <nocollision+0x1a>
    173a:	00 00       	nop
    173c:	25 b1       	in	r18, 0x05	; 5
    173e:	23 2b       	or	r18, r19
    1740:	25 b9       	out	0x05, r18	; 5
    1742:	04 c0       	rjmp	.+8      	; 0x174c <nocollision+0x22>
    1744:	00 00       	nop
    1746:	00 00       	nop
    1748:	00 00       	nop
    174a:	00 c0       	rjmp	.+0      	; 0x174c <nocollision+0x22>
    174c:	00 00       	nop
    174e:	00 00       	nop
    1750:	00 00       	nop
    1752:	30 95       	com	r19
    1754:	25 b1       	in	r18, 0x05	; 5
    1756:	23 23       	and	r18, r19
    1758:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    175a:	00 00       	nop
    175c:	24 e5       	ldi	r18, 0x54	; 84
    175e:	2a 95       	dec	r18
    1760:	f1 f7       	brne	.-4      	; 0x175e <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1762:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1764:	8c e0       	ldi	r24, 0x0C	; 12

00001766 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1766:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1768:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    176a:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    176c:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    176e:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1770:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1772:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1774:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1776:	50 e0       	ldi	r21, 0x00	; 0

00001778 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1778:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    177a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    177c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    177e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1780:	30 91 4f 01 	lds	r19, 0x014F
    1784:	20 30       	cpi	r18, 0x00	; 0
    1786:	29 f0       	breq	.+10     	; 0x1792 <sendbit+0x1a>
    1788:	00 00       	nop
    178a:	25 b1       	in	r18, 0x05	; 5
    178c:	23 2b       	or	r18, r19
    178e:	25 b9       	out	0x05, r18	; 5
    1790:	04 c0       	rjmp	.+8      	; 0x179a <sendbit+0x22>
    1792:	00 00       	nop
    1794:	00 00       	nop
    1796:	00 00       	nop
    1798:	00 c0       	rjmp	.+0      	; 0x179a <sendbit+0x22>
    179a:	00 00       	nop
    179c:	00 00       	nop
    179e:	00 00       	nop
    17a0:	30 95       	com	r19
    17a2:	25 b1       	in	r18, 0x05	; 5
    17a4:	23 23       	and	r18, r19
    17a6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    17a8:	00 00       	nop
    17aa:	21 e5       	ldi	r18, 0x51	; 81
    17ac:	2a 95       	dec	r18
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    17b0:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    17b2:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    17b4:	9a 95       	dec	r25
    brne sendbit
    17b6:	01 f7       	brne	.-64     	; 0x1778 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    17b8:	8a 95       	dec	r24
    brne sendbyte
    17ba:	a9 f6       	brne	.-86     	; 0x1766 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    17bc:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    17be:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    17c0:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    17c2:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    17c4:	30 91 4f 01 	lds	r19, 0x014F
    com tmpreg2
    17c8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    17ca:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    17cc:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    17ce:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    17d0:	0f be       	out	0x3f, r0	; 63
    return 1
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	08 95       	ret

000017d6 <main>:
}


int main(){

  kilo_init();
    17d6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <kilo_init>
  kilo_message_tx = message_tx;
    17da:	8a e8       	ldi	r24, 0x8A	; 138
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	90 93 08 01 	sts	0x0108, r25
    17e2:	80 93 07 01 	sts	0x0107, r24
  kilo_message_tx_success = message_tx_success;
    17e6:	8d e8       	ldi	r24, 0x8D	; 141
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	90 93 06 01 	sts	0x0106, r25
    17ee:	80 93 05 01 	sts	0x0105, r24
  kilo_message_rx = message_rx;
    17f2:	84 e9       	ldi	r24, 0x94	; 148
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	90 93 0a 01 	sts	0x010A, r25
    17fa:	80 93 09 01 	sts	0x0109, r24
  kilo_start(setup, loop);
    17fe:	6a ea       	ldi	r22, 0xAA	; 170
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	81 e7       	ldi	r24, 0x71	; 113
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 78 03 	call	0x6f0	; 0x6f0 <kilo_start>
    
  return 0;

}
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	08 95       	ret

00001810 <__divmodhi4>:
    1810:	97 fb       	bst	r25, 7
    1812:	07 2e       	mov	r0, r23
    1814:	16 f4       	brtc	.+4      	; 0x181a <__divmodhi4+0xa>
    1816:	00 94       	com	r0
    1818:	07 d0       	rcall	.+14     	; 0x1828 <__divmodhi4_neg1>
    181a:	77 fd       	sbrc	r23, 7
    181c:	09 d0       	rcall	.+18     	; 0x1830 <__divmodhi4_neg2>
    181e:	0e 94 31 0c 	call	0x1862	; 0x1862 <__udivmodhi4>
    1822:	07 fc       	sbrc	r0, 7
    1824:	05 d0       	rcall	.+10     	; 0x1830 <__divmodhi4_neg2>
    1826:	3e f4       	brtc	.+14     	; 0x1836 <__divmodhi4_exit>

00001828 <__divmodhi4_neg1>:
    1828:	90 95       	com	r25
    182a:	81 95       	neg	r24
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	08 95       	ret

00001830 <__divmodhi4_neg2>:
    1830:	70 95       	com	r23
    1832:	61 95       	neg	r22
    1834:	7f 4f       	sbci	r23, 0xFF	; 255

00001836 <__divmodhi4_exit>:
    1836:	08 95       	ret

00001838 <__tablejump2__>:
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	05 90       	lpm	r0, Z+
    183e:	f4 91       	lpm	r31, Z
    1840:	e0 2d       	mov	r30, r0
    1842:	09 94       	ijmp

00001844 <__umulhisi3>:
    1844:	a2 9f       	mul	r26, r18
    1846:	b0 01       	movw	r22, r0
    1848:	b3 9f       	mul	r27, r19
    184a:	c0 01       	movw	r24, r0
    184c:	a3 9f       	mul	r26, r19
    184e:	70 0d       	add	r23, r0
    1850:	81 1d       	adc	r24, r1
    1852:	11 24       	eor	r1, r1
    1854:	91 1d       	adc	r25, r1
    1856:	b2 9f       	mul	r27, r18
    1858:	70 0d       	add	r23, r0
    185a:	81 1d       	adc	r24, r1
    185c:	11 24       	eor	r1, r1
    185e:	91 1d       	adc	r25, r1
    1860:	08 95       	ret

00001862 <__udivmodhi4>:
    1862:	aa 1b       	sub	r26, r26
    1864:	bb 1b       	sub	r27, r27
    1866:	51 e1       	ldi	r21, 0x11	; 17
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <__udivmodhi4_ep>

0000186a <__udivmodhi4_loop>:
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	a6 17       	cp	r26, r22
    1870:	b7 07       	cpc	r27, r23
    1872:	10 f0       	brcs	.+4      	; 0x1878 <__udivmodhi4_ep>
    1874:	a6 1b       	sub	r26, r22
    1876:	b7 0b       	sbc	r27, r23

00001878 <__udivmodhi4_ep>:
    1878:	88 1f       	adc	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	5a 95       	dec	r21
    187e:	a9 f7       	brne	.-22     	; 0x186a <__udivmodhi4_loop>
    1880:	80 95       	com	r24
    1882:	90 95       	com	r25
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	08 95       	ret

0000188a <__subsf3>:
    188a:	50 58       	subi	r21, 0x80	; 128

0000188c <__addsf3>:
    188c:	bb 27       	eor	r27, r27
    188e:	aa 27       	eor	r26, r26
    1890:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__addsf3x>
    1894:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_round>
    1898:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fp_pscA>
    189c:	38 f0       	brcs	.+14     	; 0x18ac <__addsf3+0x20>
    189e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fp_pscB>
    18a2:	20 f0       	brcs	.+8      	; 0x18ac <__addsf3+0x20>
    18a4:	39 f4       	brne	.+14     	; 0x18b4 <__addsf3+0x28>
    18a6:	9f 3f       	cpi	r25, 0xFF	; 255
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <__addsf3+0x24>
    18aa:	26 f4       	brtc	.+8      	; 0x18b4 <__addsf3+0x28>
    18ac:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__fp_nan>
    18b0:	0e f4       	brtc	.+2      	; 0x18b4 <__addsf3+0x28>
    18b2:	e0 95       	com	r30
    18b4:	e7 fb       	bst	r30, 7
    18b6:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_inf>

000018ba <__addsf3x>:
    18ba:	e9 2f       	mov	r30, r25
    18bc:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_split3>
    18c0:	58 f3       	brcs	.-42     	; 0x1898 <__addsf3+0xc>
    18c2:	ba 17       	cp	r27, r26
    18c4:	62 07       	cpc	r22, r18
    18c6:	73 07       	cpc	r23, r19
    18c8:	84 07       	cpc	r24, r20
    18ca:	95 07       	cpc	r25, r21
    18cc:	20 f0       	brcs	.+8      	; 0x18d6 <__addsf3x+0x1c>
    18ce:	79 f4       	brne	.+30     	; 0x18ee <__addsf3x+0x34>
    18d0:	a6 f5       	brtc	.+104    	; 0x193a <__addsf3x+0x80>
    18d2:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_zero>
    18d6:	0e f4       	brtc	.+2      	; 0x18da <__addsf3x+0x20>
    18d8:	e0 95       	com	r30
    18da:	0b 2e       	mov	r0, r27
    18dc:	ba 2f       	mov	r27, r26
    18de:	a0 2d       	mov	r26, r0
    18e0:	0b 01       	movw	r0, r22
    18e2:	b9 01       	movw	r22, r18
    18e4:	90 01       	movw	r18, r0
    18e6:	0c 01       	movw	r0, r24
    18e8:	ca 01       	movw	r24, r20
    18ea:	a0 01       	movw	r20, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	ff 27       	eor	r31, r31
    18f0:	59 1b       	sub	r21, r25
    18f2:	99 f0       	breq	.+38     	; 0x191a <__addsf3x+0x60>
    18f4:	59 3f       	cpi	r21, 0xF9	; 249
    18f6:	50 f4       	brcc	.+20     	; 0x190c <__addsf3x+0x52>
    18f8:	50 3e       	cpi	r21, 0xE0	; 224
    18fa:	68 f1       	brcs	.+90     	; 0x1956 <__addsf3x+0x9c>
    18fc:	1a 16       	cp	r1, r26
    18fe:	f0 40       	sbci	r31, 0x00	; 0
    1900:	a2 2f       	mov	r26, r18
    1902:	23 2f       	mov	r18, r19
    1904:	34 2f       	mov	r19, r20
    1906:	44 27       	eor	r20, r20
    1908:	58 5f       	subi	r21, 0xF8	; 248
    190a:	f3 cf       	rjmp	.-26     	; 0x18f2 <__addsf3x+0x38>
    190c:	46 95       	lsr	r20
    190e:	37 95       	ror	r19
    1910:	27 95       	ror	r18
    1912:	a7 95       	ror	r26
    1914:	f0 40       	sbci	r31, 0x00	; 0
    1916:	53 95       	inc	r21
    1918:	c9 f7       	brne	.-14     	; 0x190c <__addsf3x+0x52>
    191a:	7e f4       	brtc	.+30     	; 0x193a <__addsf3x+0x80>
    191c:	1f 16       	cp	r1, r31
    191e:	ba 0b       	sbc	r27, r26
    1920:	62 0b       	sbc	r22, r18
    1922:	73 0b       	sbc	r23, r19
    1924:	84 0b       	sbc	r24, r20
    1926:	ba f0       	brmi	.+46     	; 0x1956 <__addsf3x+0x9c>
    1928:	91 50       	subi	r25, 0x01	; 1
    192a:	a1 f0       	breq	.+40     	; 0x1954 <__addsf3x+0x9a>
    192c:	ff 0f       	add	r31, r31
    192e:	bb 1f       	adc	r27, r27
    1930:	66 1f       	adc	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	c2 f7       	brpl	.-16     	; 0x1928 <__addsf3x+0x6e>
    1938:	0e c0       	rjmp	.+28     	; 0x1956 <__addsf3x+0x9c>
    193a:	ba 0f       	add	r27, r26
    193c:	62 1f       	adc	r22, r18
    193e:	73 1f       	adc	r23, r19
    1940:	84 1f       	adc	r24, r20
    1942:	48 f4       	brcc	.+18     	; 0x1956 <__addsf3x+0x9c>
    1944:	87 95       	ror	r24
    1946:	77 95       	ror	r23
    1948:	67 95       	ror	r22
    194a:	b7 95       	ror	r27
    194c:	f7 95       	ror	r31
    194e:	9e 3f       	cpi	r25, 0xFE	; 254
    1950:	08 f0       	brcs	.+2      	; 0x1954 <__addsf3x+0x9a>
    1952:	b0 cf       	rjmp	.-160    	; 0x18b4 <__addsf3+0x28>
    1954:	93 95       	inc	r25
    1956:	88 0f       	add	r24, r24
    1958:	08 f0       	brcs	.+2      	; 0x195c <__addsf3x+0xa2>
    195a:	99 27       	eor	r25, r25
    195c:	ee 0f       	add	r30, r30
    195e:	97 95       	ror	r25
    1960:	87 95       	ror	r24
    1962:	08 95       	ret

00001964 <__divsf3>:
    1964:	0e 94 c6 0c 	call	0x198c	; 0x198c <__divsf3x>
    1968:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_round>
    196c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fp_pscB>
    1970:	58 f0       	brcs	.+22     	; 0x1988 <__divsf3+0x24>
    1972:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fp_pscA>
    1976:	40 f0       	brcs	.+16     	; 0x1988 <__divsf3+0x24>
    1978:	29 f4       	brne	.+10     	; 0x1984 <__divsf3+0x20>
    197a:	5f 3f       	cpi	r21, 0xFF	; 255
    197c:	29 f0       	breq	.+10     	; 0x1988 <__divsf3+0x24>
    197e:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_inf>
    1982:	51 11       	cpse	r21, r1
    1984:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__fp_szero>
    1988:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__fp_nan>

0000198c <__divsf3x>:
    198c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_split3>
    1990:	68 f3       	brcs	.-38     	; 0x196c <__divsf3+0x8>

00001992 <__divsf3_pse>:
    1992:	99 23       	and	r25, r25
    1994:	b1 f3       	breq	.-20     	; 0x1982 <__divsf3+0x1e>
    1996:	55 23       	and	r21, r21
    1998:	91 f3       	breq	.-28     	; 0x197e <__divsf3+0x1a>
    199a:	95 1b       	sub	r25, r21
    199c:	55 0b       	sbc	r21, r21
    199e:	bb 27       	eor	r27, r27
    19a0:	aa 27       	eor	r26, r26
    19a2:	62 17       	cp	r22, r18
    19a4:	73 07       	cpc	r23, r19
    19a6:	84 07       	cpc	r24, r20
    19a8:	38 f0       	brcs	.+14     	; 0x19b8 <__divsf3_pse+0x26>
    19aa:	9f 5f       	subi	r25, 0xFF	; 255
    19ac:	5f 4f       	sbci	r21, 0xFF	; 255
    19ae:	22 0f       	add	r18, r18
    19b0:	33 1f       	adc	r19, r19
    19b2:	44 1f       	adc	r20, r20
    19b4:	aa 1f       	adc	r26, r26
    19b6:	a9 f3       	breq	.-22     	; 0x19a2 <__divsf3_pse+0x10>
    19b8:	35 d0       	rcall	.+106    	; 0x1a24 <__divsf3_pse+0x92>
    19ba:	0e 2e       	mov	r0, r30
    19bc:	3a f0       	brmi	.+14     	; 0x19cc <__divsf3_pse+0x3a>
    19be:	e0 e8       	ldi	r30, 0x80	; 128
    19c0:	32 d0       	rcall	.+100    	; 0x1a26 <__divsf3_pse+0x94>
    19c2:	91 50       	subi	r25, 0x01	; 1
    19c4:	50 40       	sbci	r21, 0x00	; 0
    19c6:	e6 95       	lsr	r30
    19c8:	00 1c       	adc	r0, r0
    19ca:	ca f7       	brpl	.-14     	; 0x19be <__divsf3_pse+0x2c>
    19cc:	2b d0       	rcall	.+86     	; 0x1a24 <__divsf3_pse+0x92>
    19ce:	fe 2f       	mov	r31, r30
    19d0:	29 d0       	rcall	.+82     	; 0x1a24 <__divsf3_pse+0x92>
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	bb 1f       	adc	r27, r27
    19da:	26 17       	cp	r18, r22
    19dc:	37 07       	cpc	r19, r23
    19de:	48 07       	cpc	r20, r24
    19e0:	ab 07       	cpc	r26, r27
    19e2:	b0 e8       	ldi	r27, 0x80	; 128
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <__divsf3_pse+0x56>
    19e6:	bb 0b       	sbc	r27, r27
    19e8:	80 2d       	mov	r24, r0
    19ea:	bf 01       	movw	r22, r30
    19ec:	ff 27       	eor	r31, r31
    19ee:	93 58       	subi	r25, 0x83	; 131
    19f0:	5f 4f       	sbci	r21, 0xFF	; 255
    19f2:	3a f0       	brmi	.+14     	; 0x1a02 <__divsf3_pse+0x70>
    19f4:	9e 3f       	cpi	r25, 0xFE	; 254
    19f6:	51 05       	cpc	r21, r1
    19f8:	78 f0       	brcs	.+30     	; 0x1a18 <__divsf3_pse+0x86>
    19fa:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_inf>
    19fe:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__fp_szero>
    1a02:	5f 3f       	cpi	r21, 0xFF	; 255
    1a04:	e4 f3       	brlt	.-8      	; 0x19fe <__divsf3_pse+0x6c>
    1a06:	98 3e       	cpi	r25, 0xE8	; 232
    1a08:	d4 f3       	brlt	.-12     	; 0x19fe <__divsf3_pse+0x6c>
    1a0a:	86 95       	lsr	r24
    1a0c:	77 95       	ror	r23
    1a0e:	67 95       	ror	r22
    1a10:	b7 95       	ror	r27
    1a12:	f7 95       	ror	r31
    1a14:	9f 5f       	subi	r25, 0xFF	; 255
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <__divsf3_pse+0x78>
    1a18:	88 0f       	add	r24, r24
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	96 95       	lsr	r25
    1a1e:	87 95       	ror	r24
    1a20:	97 f9       	bld	r25, 7
    1a22:	08 95       	ret
    1a24:	e1 e0       	ldi	r30, 0x01	; 1
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	62 17       	cp	r22, r18
    1a30:	73 07       	cpc	r23, r19
    1a32:	84 07       	cpc	r24, r20
    1a34:	ba 07       	cpc	r27, r26
    1a36:	20 f0       	brcs	.+8      	; 0x1a40 <__divsf3_pse+0xae>
    1a38:	62 1b       	sub	r22, r18
    1a3a:	73 0b       	sbc	r23, r19
    1a3c:	84 0b       	sbc	r24, r20
    1a3e:	ba 0b       	sbc	r27, r26
    1a40:	ee 1f       	adc	r30, r30
    1a42:	88 f7       	brcc	.-30     	; 0x1a26 <__divsf3_pse+0x94>
    1a44:	e0 95       	com	r30
    1a46:	08 95       	ret

00001a48 <__fixsfsi>:
    1a48:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__fixunssfsi>
    1a4c:	68 94       	set
    1a4e:	b1 11       	cpse	r27, r1
    1a50:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__fp_szero>
    1a54:	08 95       	ret

00001a56 <__fixunssfsi>:
    1a56:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__fp_splitA>
    1a5a:	88 f0       	brcs	.+34     	; 0x1a7e <__fixunssfsi+0x28>
    1a5c:	9f 57       	subi	r25, 0x7F	; 127
    1a5e:	98 f0       	brcs	.+38     	; 0x1a86 <__fixunssfsi+0x30>
    1a60:	b9 2f       	mov	r27, r25
    1a62:	99 27       	eor	r25, r25
    1a64:	b7 51       	subi	r27, 0x17	; 23
    1a66:	b0 f0       	brcs	.+44     	; 0x1a94 <__fixunssfsi+0x3e>
    1a68:	e1 f0       	breq	.+56     	; 0x1aa2 <__fixunssfsi+0x4c>
    1a6a:	66 0f       	add	r22, r22
    1a6c:	77 1f       	adc	r23, r23
    1a6e:	88 1f       	adc	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	1a f0       	brmi	.+6      	; 0x1a7a <__fixunssfsi+0x24>
    1a74:	ba 95       	dec	r27
    1a76:	c9 f7       	brne	.-14     	; 0x1a6a <__fixunssfsi+0x14>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <__fixunssfsi+0x4c>
    1a7a:	b1 30       	cpi	r27, 0x01	; 1
    1a7c:	91 f0       	breq	.+36     	; 0x1aa2 <__fixunssfsi+0x4c>
    1a7e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fp_zero>
    1a82:	b1 e0       	ldi	r27, 0x01	; 1
    1a84:	08 95       	ret
    1a86:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_zero>
    1a8a:	67 2f       	mov	r22, r23
    1a8c:	78 2f       	mov	r23, r24
    1a8e:	88 27       	eor	r24, r24
    1a90:	b8 5f       	subi	r27, 0xF8	; 248
    1a92:	39 f0       	breq	.+14     	; 0x1aa2 <__fixunssfsi+0x4c>
    1a94:	b9 3f       	cpi	r27, 0xF9	; 249
    1a96:	cc f3       	brlt	.-14     	; 0x1a8a <__fixunssfsi+0x34>
    1a98:	86 95       	lsr	r24
    1a9a:	77 95       	ror	r23
    1a9c:	67 95       	ror	r22
    1a9e:	b3 95       	inc	r27
    1aa0:	d9 f7       	brne	.-10     	; 0x1a98 <__fixunssfsi+0x42>
    1aa2:	3e f4       	brtc	.+14     	; 0x1ab2 <__fixunssfsi+0x5c>
    1aa4:	90 95       	com	r25
    1aa6:	80 95       	com	r24
    1aa8:	70 95       	com	r23
    1aaa:	61 95       	neg	r22
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	08 95       	ret

00001ab4 <__floatunsisf>:
    1ab4:	e8 94       	clt
    1ab6:	09 c0       	rjmp	.+18     	; 0x1aca <__floatsisf+0x12>

00001ab8 <__floatsisf>:
    1ab8:	97 fb       	bst	r25, 7
    1aba:	3e f4       	brtc	.+14     	; 0x1aca <__floatsisf+0x12>
    1abc:	90 95       	com	r25
    1abe:	80 95       	com	r24
    1ac0:	70 95       	com	r23
    1ac2:	61 95       	neg	r22
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	99 23       	and	r25, r25
    1acc:	a9 f0       	breq	.+42     	; 0x1af8 <__floatsisf+0x40>
    1ace:	f9 2f       	mov	r31, r25
    1ad0:	96 e9       	ldi	r25, 0x96	; 150
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	93 95       	inc	r25
    1ad6:	f6 95       	lsr	r31
    1ad8:	87 95       	ror	r24
    1ada:	77 95       	ror	r23
    1adc:	67 95       	ror	r22
    1ade:	b7 95       	ror	r27
    1ae0:	f1 11       	cpse	r31, r1
    1ae2:	f8 cf       	rjmp	.-16     	; 0x1ad4 <__floatsisf+0x1c>
    1ae4:	fa f4       	brpl	.+62     	; 0x1b24 <__floatsisf+0x6c>
    1ae6:	bb 0f       	add	r27, r27
    1ae8:	11 f4       	brne	.+4      	; 0x1aee <__floatsisf+0x36>
    1aea:	60 ff       	sbrs	r22, 0
    1aec:	1b c0       	rjmp	.+54     	; 0x1b24 <__floatsisf+0x6c>
    1aee:	6f 5f       	subi	r22, 0xFF	; 255
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	8f 4f       	sbci	r24, 0xFF	; 255
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	16 c0       	rjmp	.+44     	; 0x1b24 <__floatsisf+0x6c>
    1af8:	88 23       	and	r24, r24
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <__floatsisf+0x48>
    1afc:	96 e9       	ldi	r25, 0x96	; 150
    1afe:	11 c0       	rjmp	.+34     	; 0x1b22 <__floatsisf+0x6a>
    1b00:	77 23       	and	r23, r23
    1b02:	21 f0       	breq	.+8      	; 0x1b0c <__floatsisf+0x54>
    1b04:	9e e8       	ldi	r25, 0x8E	; 142
    1b06:	87 2f       	mov	r24, r23
    1b08:	76 2f       	mov	r23, r22
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <__floatsisf+0x5e>
    1b0c:	66 23       	and	r22, r22
    1b0e:	71 f0       	breq	.+28     	; 0x1b2c <__floatsisf+0x74>
    1b10:	96 e8       	ldi	r25, 0x86	; 134
    1b12:	86 2f       	mov	r24, r22
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	2a f0       	brmi	.+10     	; 0x1b24 <__floatsisf+0x6c>
    1b1a:	9a 95       	dec	r25
    1b1c:	66 0f       	add	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	88 1f       	adc	r24, r24
    1b22:	da f7       	brpl	.-10     	; 0x1b1a <__floatsisf+0x62>
    1b24:	88 0f       	add	r24, r24
    1b26:	96 95       	lsr	r25
    1b28:	87 95       	ror	r24
    1b2a:	97 f9       	bld	r25, 7
    1b2c:	08 95       	ret

00001b2e <__fp_inf>:
    1b2e:	97 f9       	bld	r25, 7
    1b30:	9f 67       	ori	r25, 0x7F	; 127
    1b32:	80 e8       	ldi	r24, 0x80	; 128
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	08 95       	ret

00001b3a <__fp_nan>:
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	80 ec       	ldi	r24, 0xC0	; 192
    1b3e:	08 95       	ret

00001b40 <__fp_pscA>:
    1b40:	00 24       	eor	r0, r0
    1b42:	0a 94       	dec	r0
    1b44:	16 16       	cp	r1, r22
    1b46:	17 06       	cpc	r1, r23
    1b48:	18 06       	cpc	r1, r24
    1b4a:	09 06       	cpc	r0, r25
    1b4c:	08 95       	ret

00001b4e <__fp_pscB>:
    1b4e:	00 24       	eor	r0, r0
    1b50:	0a 94       	dec	r0
    1b52:	12 16       	cp	r1, r18
    1b54:	13 06       	cpc	r1, r19
    1b56:	14 06       	cpc	r1, r20
    1b58:	05 06       	cpc	r0, r21
    1b5a:	08 95       	ret

00001b5c <__fp_round>:
    1b5c:	09 2e       	mov	r0, r25
    1b5e:	03 94       	inc	r0
    1b60:	00 0c       	add	r0, r0
    1b62:	11 f4       	brne	.+4      	; 0x1b68 <__fp_round+0xc>
    1b64:	88 23       	and	r24, r24
    1b66:	52 f0       	brmi	.+20     	; 0x1b7c <__fp_round+0x20>
    1b68:	bb 0f       	add	r27, r27
    1b6a:	40 f4       	brcc	.+16     	; 0x1b7c <__fp_round+0x20>
    1b6c:	bf 2b       	or	r27, r31
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <__fp_round+0x18>
    1b70:	60 ff       	sbrs	r22, 0
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <__fp_round+0x20>
    1b74:	6f 5f       	subi	r22, 0xFF	; 255
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	08 95       	ret

00001b7e <__fp_split3>:
    1b7e:	57 fd       	sbrc	r21, 7
    1b80:	90 58       	subi	r25, 0x80	; 128
    1b82:	44 0f       	add	r20, r20
    1b84:	55 1f       	adc	r21, r21
    1b86:	59 f0       	breq	.+22     	; 0x1b9e <__fp_splitA+0x10>
    1b88:	5f 3f       	cpi	r21, 0xFF	; 255
    1b8a:	71 f0       	breq	.+28     	; 0x1ba8 <__fp_splitA+0x1a>
    1b8c:	47 95       	ror	r20

00001b8e <__fp_splitA>:
    1b8e:	88 0f       	add	r24, r24
    1b90:	97 fb       	bst	r25, 7
    1b92:	99 1f       	adc	r25, r25
    1b94:	61 f0       	breq	.+24     	; 0x1bae <__fp_splitA+0x20>
    1b96:	9f 3f       	cpi	r25, 0xFF	; 255
    1b98:	79 f0       	breq	.+30     	; 0x1bb8 <__fp_splitA+0x2a>
    1b9a:	87 95       	ror	r24
    1b9c:	08 95       	ret
    1b9e:	12 16       	cp	r1, r18
    1ba0:	13 06       	cpc	r1, r19
    1ba2:	14 06       	cpc	r1, r20
    1ba4:	55 1f       	adc	r21, r21
    1ba6:	f2 cf       	rjmp	.-28     	; 0x1b8c <__fp_split3+0xe>
    1ba8:	46 95       	lsr	r20
    1baa:	f1 df       	rcall	.-30     	; 0x1b8e <__fp_splitA>
    1bac:	08 c0       	rjmp	.+16     	; 0x1bbe <__fp_splitA+0x30>
    1bae:	16 16       	cp	r1, r22
    1bb0:	17 06       	cpc	r1, r23
    1bb2:	18 06       	cpc	r1, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	f1 cf       	rjmp	.-30     	; 0x1b9a <__fp_splitA+0xc>
    1bb8:	86 95       	lsr	r24
    1bba:	71 05       	cpc	r23, r1
    1bbc:	61 05       	cpc	r22, r1
    1bbe:	08 94       	sec
    1bc0:	08 95       	ret

00001bc2 <__fp_zero>:
    1bc2:	e8 94       	clt

00001bc4 <__fp_szero>:
    1bc4:	bb 27       	eor	r27, r27
    1bc6:	66 27       	eor	r22, r22
    1bc8:	77 27       	eor	r23, r23
    1bca:	cb 01       	movw	r24, r22
    1bcc:	97 f9       	bld	r25, 7
    1bce:	08 95       	ret

00001bd0 <__mulsf3>:
    1bd0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__mulsf3x>
    1bd4:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_round>
    1bd8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fp_pscA>
    1bdc:	38 f0       	brcs	.+14     	; 0x1bec <__mulsf3+0x1c>
    1bde:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fp_pscB>
    1be2:	20 f0       	brcs	.+8      	; 0x1bec <__mulsf3+0x1c>
    1be4:	95 23       	and	r25, r21
    1be6:	11 f0       	breq	.+4      	; 0x1bec <__mulsf3+0x1c>
    1be8:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_inf>
    1bec:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__fp_nan>
    1bf0:	11 24       	eor	r1, r1
    1bf2:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__fp_szero>

00001bf6 <__mulsf3x>:
    1bf6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_split3>
    1bfa:	70 f3       	brcs	.-36     	; 0x1bd8 <__mulsf3+0x8>

00001bfc <__mulsf3_pse>:
    1bfc:	95 9f       	mul	r25, r21
    1bfe:	c1 f3       	breq	.-16     	; 0x1bf0 <__mulsf3+0x20>
    1c00:	95 0f       	add	r25, r21
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	55 1f       	adc	r21, r21
    1c06:	62 9f       	mul	r22, r18
    1c08:	f0 01       	movw	r30, r0
    1c0a:	72 9f       	mul	r23, r18
    1c0c:	bb 27       	eor	r27, r27
    1c0e:	f0 0d       	add	r31, r0
    1c10:	b1 1d       	adc	r27, r1
    1c12:	63 9f       	mul	r22, r19
    1c14:	aa 27       	eor	r26, r26
    1c16:	f0 0d       	add	r31, r0
    1c18:	b1 1d       	adc	r27, r1
    1c1a:	aa 1f       	adc	r26, r26
    1c1c:	64 9f       	mul	r22, r20
    1c1e:	66 27       	eor	r22, r22
    1c20:	b0 0d       	add	r27, r0
    1c22:	a1 1d       	adc	r26, r1
    1c24:	66 1f       	adc	r22, r22
    1c26:	82 9f       	mul	r24, r18
    1c28:	22 27       	eor	r18, r18
    1c2a:	b0 0d       	add	r27, r0
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	62 1f       	adc	r22, r18
    1c30:	73 9f       	mul	r23, r19
    1c32:	b0 0d       	add	r27, r0
    1c34:	a1 1d       	adc	r26, r1
    1c36:	62 1f       	adc	r22, r18
    1c38:	83 9f       	mul	r24, r19
    1c3a:	a0 0d       	add	r26, r0
    1c3c:	61 1d       	adc	r22, r1
    1c3e:	22 1f       	adc	r18, r18
    1c40:	74 9f       	mul	r23, r20
    1c42:	33 27       	eor	r19, r19
    1c44:	a0 0d       	add	r26, r0
    1c46:	61 1d       	adc	r22, r1
    1c48:	23 1f       	adc	r18, r19
    1c4a:	84 9f       	mul	r24, r20
    1c4c:	60 0d       	add	r22, r0
    1c4e:	21 1d       	adc	r18, r1
    1c50:	82 2f       	mov	r24, r18
    1c52:	76 2f       	mov	r23, r22
    1c54:	6a 2f       	mov	r22, r26
    1c56:	11 24       	eor	r1, r1
    1c58:	9f 57       	subi	r25, 0x7F	; 127
    1c5a:	50 40       	sbci	r21, 0x00	; 0
    1c5c:	9a f0       	brmi	.+38     	; 0x1c84 <__mulsf3_pse+0x88>
    1c5e:	f1 f0       	breq	.+60     	; 0x1c9c <__mulsf3_pse+0xa0>
    1c60:	88 23       	and	r24, r24
    1c62:	4a f0       	brmi	.+18     	; 0x1c76 <__mulsf3_pse+0x7a>
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	66 1f       	adc	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	88 1f       	adc	r24, r24
    1c70:	91 50       	subi	r25, 0x01	; 1
    1c72:	50 40       	sbci	r21, 0x00	; 0
    1c74:	a9 f7       	brne	.-22     	; 0x1c60 <__mulsf3_pse+0x64>
    1c76:	9e 3f       	cpi	r25, 0xFE	; 254
    1c78:	51 05       	cpc	r21, r1
    1c7a:	80 f0       	brcs	.+32     	; 0x1c9c <__mulsf3_pse+0xa0>
    1c7c:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_inf>
    1c80:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__fp_szero>
    1c84:	5f 3f       	cpi	r21, 0xFF	; 255
    1c86:	e4 f3       	brlt	.-8      	; 0x1c80 <__mulsf3_pse+0x84>
    1c88:	98 3e       	cpi	r25, 0xE8	; 232
    1c8a:	d4 f3       	brlt	.-12     	; 0x1c80 <__mulsf3_pse+0x84>
    1c8c:	86 95       	lsr	r24
    1c8e:	77 95       	ror	r23
    1c90:	67 95       	ror	r22
    1c92:	b7 95       	ror	r27
    1c94:	f7 95       	ror	r31
    1c96:	e7 95       	ror	r30
    1c98:	9f 5f       	subi	r25, 0xFF	; 255
    1c9a:	c1 f7       	brne	.-16     	; 0x1c8c <__mulsf3_pse+0x90>
    1c9c:	fe 2b       	or	r31, r30
    1c9e:	88 0f       	add	r24, r24
    1ca0:	91 1d       	adc	r25, r1
    1ca2:	96 95       	lsr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	97 f9       	bld	r25, 7
    1ca8:	08 95       	ret

00001caa <do_rand>:
    1caa:	8f 92       	push	r8
    1cac:	9f 92       	push	r9
    1cae:	af 92       	push	r10
    1cb0:	bf 92       	push	r11
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	ec 01       	movw	r28, r24
    1cc0:	68 81       	ld	r22, Y
    1cc2:	79 81       	ldd	r23, Y+1	; 0x01
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	61 15       	cp	r22, r1
    1cca:	71 05       	cpc	r23, r1
    1ccc:	81 05       	cpc	r24, r1
    1cce:	91 05       	cpc	r25, r1
    1cd0:	21 f4       	brne	.+8      	; 0x1cda <do_rand+0x30>
    1cd2:	64 e2       	ldi	r22, 0x24	; 36
    1cd4:	79 ed       	ldi	r23, 0xD9	; 217
    1cd6:	8b e5       	ldi	r24, 0x5B	; 91
    1cd8:	97 e0       	ldi	r25, 0x07	; 7
    1cda:	2d e1       	ldi	r18, 0x1D	; 29
    1cdc:	33 ef       	ldi	r19, 0xF3	; 243
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__divmodsi4>
    1ce6:	49 01       	movw	r8, r18
    1ce8:	5a 01       	movw	r10, r20
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	a7 ea       	ldi	r26, 0xA7	; 167
    1cf0:	b1 e4       	ldi	r27, 0x41	; 65
    1cf2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__muluhisi3>
    1cf6:	6b 01       	movw	r12, r22
    1cf8:	7c 01       	movw	r14, r24
    1cfa:	ac ee       	ldi	r26, 0xEC	; 236
    1cfc:	b4 ef       	ldi	r27, 0xF4	; 244
    1cfe:	a5 01       	movw	r20, r10
    1d00:	94 01       	movw	r18, r8
    1d02:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulohisi3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	8c 0d       	add	r24, r12
    1d0c:	9d 1d       	adc	r25, r13
    1d0e:	ae 1d       	adc	r26, r14
    1d10:	bf 1d       	adc	r27, r15
    1d12:	b7 ff       	sbrs	r27, 7
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <do_rand+0x72>
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	a1 09       	sbc	r26, r1
    1d1a:	b0 48       	sbci	r27, 0x80	; 128
    1d1c:	88 83       	st	Y, r24
    1d1e:	99 83       	std	Y+1, r25	; 0x01
    1d20:	aa 83       	std	Y+2, r26	; 0x02
    1d22:	bb 83       	std	Y+3, r27	; 0x03
    1d24:	9f 77       	andi	r25, 0x7F	; 127
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	df 90       	pop	r13
    1d30:	cf 90       	pop	r12
    1d32:	bf 90       	pop	r11
    1d34:	af 90       	pop	r10
    1d36:	9f 90       	pop	r9
    1d38:	8f 90       	pop	r8
    1d3a:	08 95       	ret

00001d3c <rand_r>:
    1d3c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <do_rand>
    1d40:	08 95       	ret

00001d42 <rand>:
    1d42:	8b e0       	ldi	r24, 0x0B	; 11
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	0e 94 55 0e 	call	0x1caa	; 0x1caa <do_rand>
    1d4a:	08 95       	ret

00001d4c <srand>:
    1d4c:	a0 e0       	ldi	r26, 0x00	; 0
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	80 93 0b 01 	sts	0x010B, r24
    1d54:	90 93 0c 01 	sts	0x010C, r25
    1d58:	a0 93 0d 01 	sts	0x010D, r26
    1d5c:	b0 93 0e 01 	sts	0x010E, r27
    1d60:	08 95       	ret

00001d62 <eeprom_read_byte>:
    1d62:	f9 99       	sbic	0x1f, 1	; 31
    1d64:	fe cf       	rjmp	.-4      	; 0x1d62 <eeprom_read_byte>
    1d66:	92 bd       	out	0x22, r25	; 34
    1d68:	81 bd       	out	0x21, r24	; 33
    1d6a:	f8 9a       	sbi	0x1f, 0	; 31
    1d6c:	99 27       	eor	r25, r25
    1d6e:	80 b5       	in	r24, 0x20	; 32
    1d70:	08 95       	ret

00001d72 <eeprom_write_byte>:
    1d72:	26 2f       	mov	r18, r22

00001d74 <eeprom_write_r18>:
    1d74:	f9 99       	sbic	0x1f, 1	; 31
    1d76:	fe cf       	rjmp	.-4      	; 0x1d74 <eeprom_write_r18>
    1d78:	1f ba       	out	0x1f, r1	; 31
    1d7a:	92 bd       	out	0x22, r25	; 34
    1d7c:	81 bd       	out	0x21, r24	; 33
    1d7e:	20 bd       	out	0x20, r18	; 32
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	fa 9a       	sbi	0x1f, 2	; 31
    1d86:	f9 9a       	sbi	0x1f, 1	; 31
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	08 95       	ret

00001d8e <__divmodsi4>:
    1d8e:	05 2e       	mov	r0, r21
    1d90:	97 fb       	bst	r25, 7
    1d92:	1e f4       	brtc	.+6      	; 0x1d9a <__divmodsi4+0xc>
    1d94:	00 94       	com	r0
    1d96:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__negsi2>
    1d9a:	57 fd       	sbrc	r21, 7
    1d9c:	07 d0       	rcall	.+14     	; 0x1dac <__divmodsi4_neg2>
    1d9e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
    1da2:	07 fc       	sbrc	r0, 7
    1da4:	03 d0       	rcall	.+6      	; 0x1dac <__divmodsi4_neg2>
    1da6:	4e f4       	brtc	.+18     	; 0x1dba <__divmodsi4_exit>
    1da8:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__negsi2>

00001dac <__divmodsi4_neg2>:
    1dac:	50 95       	com	r21
    1dae:	40 95       	com	r20
    1db0:	30 95       	com	r19
    1db2:	21 95       	neg	r18
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	4f 4f       	sbci	r20, 0xFF	; 255
    1db8:	5f 4f       	sbci	r21, 0xFF	; 255

00001dba <__divmodsi4_exit>:
    1dba:	08 95       	ret

00001dbc <__negsi2>:
    1dbc:	90 95       	com	r25
    1dbe:	80 95       	com	r24
    1dc0:	70 95       	com	r23
    1dc2:	61 95       	neg	r22
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	08 95       	ret

00001dcc <__muluhisi3>:
    1dcc:	0e 94 22 0c 	call	0x1844	; 0x1844 <__umulhisi3>
    1dd0:	a5 9f       	mul	r26, r21
    1dd2:	90 0d       	add	r25, r0
    1dd4:	b4 9f       	mul	r27, r20
    1dd6:	90 0d       	add	r25, r0
    1dd8:	a4 9f       	mul	r26, r20
    1dda:	80 0d       	add	r24, r0
    1ddc:	91 1d       	adc	r25, r1
    1dde:	11 24       	eor	r1, r1
    1de0:	08 95       	ret

00001de2 <__mulshisi3>:
    1de2:	b7 ff       	sbrs	r27, 7
    1de4:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__muluhisi3>

00001de8 <__mulohisi3>:
    1de8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__muluhisi3>
    1dec:	82 1b       	sub	r24, r18
    1dee:	93 0b       	sbc	r25, r19
    1df0:	08 95       	ret

00001df2 <__udivmodsi4>:
    1df2:	a1 e2       	ldi	r26, 0x21	; 33
    1df4:	1a 2e       	mov	r1, r26
    1df6:	aa 1b       	sub	r26, r26
    1df8:	bb 1b       	sub	r27, r27
    1dfa:	fd 01       	movw	r30, r26
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <__udivmodsi4_ep>

00001dfe <__udivmodsi4_loop>:
    1dfe:	aa 1f       	adc	r26, r26
    1e00:	bb 1f       	adc	r27, r27
    1e02:	ee 1f       	adc	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	a2 17       	cp	r26, r18
    1e08:	b3 07       	cpc	r27, r19
    1e0a:	e4 07       	cpc	r30, r20
    1e0c:	f5 07       	cpc	r31, r21
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <__udivmodsi4_ep>
    1e10:	a2 1b       	sub	r26, r18
    1e12:	b3 0b       	sbc	r27, r19
    1e14:	e4 0b       	sbc	r30, r20
    1e16:	f5 0b       	sbc	r31, r21

00001e18 <__udivmodsi4_ep>:
    1e18:	66 1f       	adc	r22, r22
    1e1a:	77 1f       	adc	r23, r23
    1e1c:	88 1f       	adc	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	1a 94       	dec	r1
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <__udivmodsi4_loop>
    1e24:	60 95       	com	r22
    1e26:	70 95       	com	r23
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
    1e30:	bd 01       	movw	r22, r26
    1e32:	cf 01       	movw	r24, r30
    1e34:	08 95       	ret

00001e36 <_exit>:
    1e36:	f8 94       	cli

00001e38 <__stop_program>:
    1e38:	ff cf       	rjmp	.-2      	; 0x1e38 <__stop_program>
