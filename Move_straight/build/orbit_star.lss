
build/orbit_star.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	f0 01       	movw	r30, r0
      6a:	6c 02       	muls	r22, r28
      6c:	c4 01       	movw	r24, r8
      6e:	bb 01       	movw	r22, r22
      70:	c1 01       	movw	r24, r2
      72:	4e 02       	muls	r20, r30
      74:	43 02       	muls	r20, r19
      76:	ce 08       	sbc	r12, r14
      78:	ab 07       	cpc	r26, r27
      7a:	ab 07       	cpc	r26, r27
      7c:	cb 08       	sbc	r12, r11
      7e:	d7 08       	sbc	r13, r7
      80:	c7 08       	sbc	r12, r7
      82:	de 08       	sbc	r13, r14
      84:	da 08       	sbc	r13, r10
      86:	e2 08       	sbc	r14, r2
      88:	9a 08       	sbc	r9, r10
      8a:	6c 08       	sbc	r6, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e8       	ldi	r30, 0x80	; 128
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 37       	cpi	r26, 0x7C	; 124
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 14 0a 	call	0x1428	; 0x1428 <main>
      da:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	82 e1       	ldi	r24, 0x12	; 18
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:

void message_tx_success()
{
    // Set flag on message transmission.
    message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0d 01 	sts	0x010D, r25
      f0:	80 93 0c 01 	sts	0x010C, r24
      f4:	08 95       	ret

000000f6 <setup>:
message_t message;
// Flag to keep track of message transmission.
int message_sent = 0;

void setup()
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
    // Initialize message:
    // The type is always NORMAL.
    message.type = NORMAL;
      fa:	c2 e1       	ldi	r28, 0x12	; 18
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
    // Some dummy data as an example.
    message.data[0] = kilo_uid;
     100:	80 91 77 01 	lds	r24, 0x0177
     104:	88 83       	st	Y, r24
    // It's important that the CRC is computed after the data has been set;
    // otherwise it would be wrong.
    message.crc = message_crc(&message);
     106:	ce 01       	movw	r24, r28
     108:	0e 94 75 09 	call	0x12ea	; 0x12ea <message_crc>
     10c:	9b 87       	std	Y+11, r25	; 0x0b
     10e:	8a 87       	std	Y+10, r24	; 0x0a
}
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <loop>:

void loop()
{
    // Blink LED magenta whenever a message is sent.
    if (message_sent == 1)
     116:	80 91 0c 01 	lds	r24, 0x010C
     11a:	90 91 0d 01 	lds	r25, 0x010D
     11e:	01 97       	sbiw	r24, 0x01	; 1
     120:	09 f0       	breq	.+2      	; 0x124 <loop+0xe>
     122:	08 95       	ret
    {
        // Reset flag so LED is only blinked once per message.
        message_sent = 0;
     124:	10 92 0d 01 	sts	0x010D, r1
     128:	10 92 0c 01 	sts	0x010C, r1
        
        set_color(RGB(1, 0, 1));
     12c:	81 e1       	ldi	r24, 0x11	; 17
     12e:	0e 94 25 07 	call	0xe4a	; 0xe4a <set_color>
        delay(100);
     132:	84 e6       	ldi	r24, 0x64	; 100
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <delay>
        set_color(RGB(0, 0, 0));
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <set_color>

00000140 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     140:	08 95       	ret

00000142 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	08 95       	ret

00000148 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     148:	08 95       	ret

0000014a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
    cli();
     158:	f8 94       	cli

    ports_off();
     15a:	14 b8       	out	0x04, r1	; 4
     15c:	17 b8       	out	0x07, r1	; 7
     15e:	1a b8       	out	0x0a, r1	; 10
     160:	15 b8       	out	0x05, r1	; 5
     162:	18 b8       	out	0x08, r1	; 8
     164:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     166:	52 9a       	sbi	0x0a, 2	; 10
     168:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     16a:	14 bc       	out	0x24, r1	; 36
     16c:	85 e0       	ldi	r24, 0x05	; 5
     16e:	85 bd       	out	0x25, r24	; 37
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	87 bd       	out	0x27, r24	; 39
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     17a:	10 92 80 00 	sts	0x0080, r1
     17e:	10 92 81 00 	sts	0x0081, r1
     182:	2f e8       	ldi	r18, 0x8F	; 143
     184:	3b e0       	ldi	r19, 0x0B	; 11
     186:	30 93 89 00 	sts	0x0089, r19
     18a:	20 93 88 00 	sts	0x0088, r18
     18e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     192:	53 98       	cbi	0x0a, 3	; 10
     194:	23 98       	cbi	0x04, 3	; 4
     196:	91 ea       	ldi	r25, 0xA1	; 161
     198:	90 93 b0 00 	sts	0x00B0, r25
     19c:	80 93 b1 00 	sts	0x00B1, r24
     1a0:	10 92 b4 00 	sts	0x00B4, r1
     1a4:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     1a8:	8b e0       	ldi	r24, 0x0B	; 11
     1aa:	80 bf       	out	0x30, r24	; 48
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     1b2:	86 e0       	ldi	r24, 0x06	; 6
     1b4:	80 93 7c 00 	sts	0x007C, r24
     1b8:	83 e8       	ldi	r24, 0x83	; 131
     1ba:	80 93 7a 00 	sts	0x007A, r24
     1be:	80 91 7a 00 	lds	r24, 0x007A
     1c2:	80 64       	ori	r24, 0x40	; 64
     1c4:	80 93 7a 00 	sts	0x007A, r24
     1c8:	80 91 7a 00 	lds	r24, 0x007A
     1cc:	86 fd       	sbrc	r24, 6
     1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1d0:	10 92 7c 00 	sts	0x007C, r1
     1d4:	83 ea       	ldi	r24, 0xA3	; 163
     1d6:	80 93 7a 00 	sts	0x007A, r24
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
    if (osccal != 0xFF)
     1e8:	8f 3f       	cpi	r24, 0xFF	; 255
     1ea:	11 f0       	breq	.+4      	; 0x1f0 <kilo_init+0xa6>
        OSCCAL = osccal;
     1ec:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1f0:	10 92 45 01 	sts	0x0145, r1
    rx_leadingbit = 1;
     1f4:	c1 e0       	ldi	r28, 0x01	; 1
     1f6:	c0 93 1e 01 	sts	0x011E, r28
    rx_leadingbyte = 1;
     1fa:	c0 93 62 01 	sts	0x0162, r28
    rx_byteindex = 0;
     1fe:	10 92 3c 01 	sts	0x013C, r1
    rx_bytevalue = 0;
     202:	10 92 76 01 	sts	0x0176, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     206:	80 e9       	ldi	r24, 0x90	; 144
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     20e:	80 93 3b 01 	sts	0x013B, r24
    if (tx_mask & ~TX_MASK_MAX)
     212:	80 91 3b 01 	lds	r24, 0x013B
     216:	88 73       	andi	r24, 0x38	; 56
     218:	11 f0       	breq	.+4      	; 0x21e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     21a:	c0 93 3b 01 	sts	0x013B, r28
    tx_clock = 0;
     21e:	10 92 66 01 	sts	0x0166, r1
     222:	10 92 65 01 	sts	0x0165, r1
    tx_increment = 255;
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 93 64 01 	sts	0x0164, r25
     22e:	80 93 63 01 	sts	0x0163, r24
    kilo_ticks = 0;
     232:	10 92 41 01 	sts	0x0141, r1
     236:	10 92 42 01 	sts	0x0142, r1
     23a:	10 92 43 01 	sts	0x0143, r1
     23e:	10 92 44 01 	sts	0x0144, r1
    kilo_state = IDLE;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 11 01 	sts	0x0111, r24
    kilo_tx_period = 3906;
     248:	82 e4       	ldi	r24, 0x42	; 66
     24a:	9f e0       	ldi	r25, 0x0F	; 15
     24c:	90 93 75 01 	sts	0x0175, r25
     250:	80 93 74 01 	sts	0x0174, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     254:	80 eb       	ldi	r24, 0xB0	; 176
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     25c:	c8 2f       	mov	r28, r24
     25e:	81 eb       	ldi	r24, 0xB1	; 177
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     266:	2c 2f       	mov	r18, r28
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	38 2b       	or	r19, r24
     26c:	30 93 78 01 	sts	0x0178, r19
     270:	20 93 77 01 	sts	0x0177, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     274:	85 e0       	ldi	r24, 0x05	; 5
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     27c:	80 93 7b 01 	sts	0x017B, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     280:	89 e0       	ldi	r24, 0x09	; 9
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     288:	80 93 67 01 	sts	0x0167, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     28c:	8c e0       	ldi	r24, 0x0C	; 12
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     294:	80 93 79 01 	sts	0x0179, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     298:	84 e1       	ldi	r24, 0x14	; 20
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     2a0:	80 93 7a 01 	sts	0x017A, r24
     2a4:	56 e4       	ldi	r21, 0x46	; 70
     2a6:	e5 2e       	mov	r14, r21
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	f5 2e       	mov	r15, r21
     2ac:	0f e1       	ldi	r16, 0x1F	; 31
     2ae:	11 e0       	ldi	r17, 0x01	; 1
     2b0:	c0 e2       	ldi	r28, 0x20	; 32
     2b2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2b4:	ce 01       	movw	r24, r28
     2b6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     2ba:	d8 2e       	mov	r13, r24
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     2c4:	2d 2d       	mov	r18, r13
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	32 2f       	mov	r19, r18
     2ca:	22 27       	eor	r18, r18
     2cc:	28 2b       	or	r18, r24
     2ce:	f7 01       	movw	r30, r14
     2d0:	21 93       	st	Z+, r18
     2d2:	31 93       	st	Z+, r19
     2d4:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2d6:	ce 01       	movw	r24, r28
     2d8:	c0 96       	adiw	r24, 0x30	; 48
     2da:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     2de:	d8 2e       	mov	r13, r24
     2e0:	ce 01       	movw	r24, r28
     2e2:	c1 96       	adiw	r24, 0x31	; 49
     2e4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
     2e8:	2d 2d       	mov	r18, r13
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	32 2f       	mov	r19, r18
     2ee:	22 27       	eor	r18, r18
     2f0:	28 2b       	or	r18, r24
     2f2:	f8 01       	movw	r30, r16
     2f4:	21 93       	st	Z+, r18
     2f6:	31 93       	st	Z+, r19
     2f8:	8f 01       	movw	r16, r30
     2fa:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2fc:	cc 33       	cpi	r28, 0x3C	; 60
     2fe:	d1 05       	cpc	r29, r1
     300:	c9 f6       	brne	.-78     	; 0x2b4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     302:	78 94       	sei
}
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	08 95       	ret

00000314 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     314:	1f 92       	push	r1
     316:	0f 92       	push	r0
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	0f 92       	push	r0
     31c:	11 24       	eor	r1, r1
     31e:	8f 93       	push	r24
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	a8 95       	wdr
     326:	80 91 60 00 	lds	r24, 0x0060
     32a:	88 61       	ori	r24, 0x18	; 24
     32c:	80 93 60 00 	sts	0x0060, r24
     330:	10 92 60 00 	sts	0x0060, r1
     334:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     336:	8f 91       	pop	r24
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     342:	3c 01       	movw	r6, r24
     344:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     346:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     348:	99 24       	eor	r9, r9
     34a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     350:	96 e0       	ldi	r25, 0x06	; 6
     352:	a9 2e       	mov	r10, r25
     354:	23 e8       	ldi	r18, 0x83	; 131
     356:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     358:	38 e1       	ldi	r19, 0x18	; 24
     35a:	d3 2e       	mov	r13, r19
     35c:	49 e2       	ldi	r20, 0x29	; 41
     35e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     360:	90 91 11 01 	lds	r25, 0x0111
     364:	e9 2f       	mov	r30, r25
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	e7 30       	cpi	r30, 0x07	; 7
     36a:	f1 05       	cpc	r31, r1
     36c:	c8 f7       	brcc	.-14     	; 0x360 <kilo_start+0x1e>
     36e:	ec 5c       	subi	r30, 0xCC	; 204
     370:	ff 4f       	sbci	r31, 0xFF	; 255
     372:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     376:	11 23       	and	r17, r17
     378:	09 f4       	brne	.+2      	; 0x37c <kilo_start+0x3a>
     37a:	fc c0       	rjmp	.+504    	; 0x574 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     37c:	c0 92 11 01 	sts	0x0111, r12
     380:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     382:	fe 01       	movw	r30, r28
     384:	09 95       	icall
                break;
     386:	ec cf       	rjmp	.-40     	; 0x360 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     388:	80 91 45 01 	lds	r24, 0x0145
     38c:	81 11       	cpse	r24, r1
     38e:	eb c0       	rjmp	.+470    	; 0x566 <kilo_start+0x224>
        cli();                                    // disable interrupts
     390:	f8 94       	cli
        adc_setup_conversion(6);
     392:	a0 92 7c 00 	sts	0x007C, r10
     396:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     39a:	80 91 7a 00 	lds	r24, 0x007A
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3a4:	90 91 7a 00 	lds	r25, 0x007A
     3a8:	96 fd       	sbrc	r25, 6
     3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     3ac:	80 91 78 00 	lds	r24, 0x0078
     3b0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3b4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3b6:	8b 3a       	cpi	r24, 0xAB	; 171
     3b8:	e2 e0       	ldi	r30, 0x02	; 2
     3ba:	9e 07       	cpc	r25, r30
     3bc:	0c f0       	brlt	.+2      	; 0x3c0 <kilo_start+0x7e>
     3be:	ed c0       	rjmp	.+474    	; 0x59a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3c0:	89 38       	cpi	r24, 0x89	; 137
     3c2:	f2 e0       	ldi	r31, 0x02	; 2
     3c4:	9f 07       	cpc	r25, r31
     3c6:	0c f0       	brlt	.+2      	; 0x3ca <kilo_start+0x88>
     3c8:	ef c0       	rjmp	.+478    	; 0x5a8 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3ca:	87 36       	cpi	r24, 0x67	; 103
     3cc:	92 40       	sbci	r25, 0x02	; 2
     3ce:	0c f4       	brge	.+2      	; 0x3d2 <kilo_start+0x90>
     3d0:	ca c0       	rjmp	.+404    	; 0x566 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3d2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3d4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3d6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3d8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3da:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3dc:	3c 98       	cbi	0x07, 4	; 7
     3de:	c0 cf       	rjmp	.-128    	; 0x360 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3e0:	f8 94       	cli
                acomp_off();
     3e2:	80 b7       	in	r24, 0x30	; 48
     3e4:	87 7f       	andi	r24, 0xF7	; 247
     3e6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3e8:	80 91 7a 00 	lds	r24, 0x007A
     3ec:	8f 77       	andi	r24, 0x7F	; 127
     3ee:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3f2:	14 b8       	out	0x04, r1	; 4
     3f4:	17 b8       	out	0x07, r1	; 7
     3f6:	1a b8       	out	0x0a, r1	; 10
     3f8:	15 b8       	out	0x05, r1	; 5
     3fa:	18 b8       	out	0x08, r1	; 8
     3fc:	1b b8       	out	0x0b, r1	; 11
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	a8 95       	wdr
     404:	d0 92 60 00 	sts	0x0060, r13
     408:	0f be       	out	0x3f, r0	; 63
     40a:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     40e:	80 91 60 00 	lds	r24, 0x0060
     412:	80 64       	ori	r24, 0x40	; 64
     414:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     418:	93 b7       	in	r25, 0x33	; 51
     41a:	91 7f       	andi	r25, 0xF1	; 241
     41c:	94 60       	ori	r25, 0x04	; 4
     41e:	93 bf       	out	0x33, r25	; 51
                cli();
     420:	f8 94       	cli
                sleep_enable();
     422:	83 b7       	in	r24, 0x33	; 51
     424:	81 60       	ori	r24, 0x01	; 1
     426:	83 bf       	out	0x33, r24	; 51
                sei();
     428:	78 94       	sei
                sleep_cpu();
     42a:	88 95       	sleep
                sleep_disable();
     42c:	83 b7       	in	r24, 0x33	; 51
     42e:	8e 7f       	andi	r24, 0xFE	; 254
     430:	83 bf       	out	0x33, r24	; 51
                sei();
     432:	78 94       	sei
                rx_busy = 0;
     434:	10 92 45 01 	sts	0x0145, r1
                ports_on();
     438:	52 9a       	sbi	0x0a, 2	; 10
     43a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     43c:	80 91 7a 00 	lds	r24, 0x007A
     440:	80 68       	ori	r24, 0x80	; 128
     442:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     446:	87 e5       	ldi	r24, 0x57	; 87
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <kilo_start+0x108>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <kilo_start+0x10e>
     450:	00 00       	nop
                _delay_us(300);
                acomp_on();
     452:	80 b7       	in	r24, 0x30	; 48
     454:	88 61       	ori	r24, 0x18	; 24
     456:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     458:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     45a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     45c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     45e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     460:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     462:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	ef e1       	ldi	r30, 0x1F	; 31
     466:	fe e4       	ldi	r31, 0x4E	; 78
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <kilo_start+0x126>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <kilo_start+0x12c>
     46e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     470:	80 91 45 01 	lds	r24, 0x0145
     474:	81 11       	cpse	r24, r1
     476:	81 c0       	rjmp	.+258    	; 0x57a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     478:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     47a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     47c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     47e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     480:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     482:	3c 98       	cbi	0x07, 4	; 7
     484:	6d cf       	rjmp	.-294    	; 0x360 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     486:	80 91 0f 01 	lds	r24, 0x010F
     48a:	81 11       	cpse	r24, r1
     48c:	41 c0       	rjmp	.+130    	; 0x510 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     48e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     492:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     496:	10 92 10 01 	sts	0x0110, r1
     49a:	62 cf       	rjmp	.-316    	; 0x360 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     49c:	48 99       	sbic	0x09, 0	; 9
     49e:	ec cf       	rjmp	.-40     	; 0x478 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4a0:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4a2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4a4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4a6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4a8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4aa:	3c 98       	cbi	0x07, 4	; 7
     4ac:	8f ec       	ldi	r24, 0xCF	; 207
     4ae:	97 e0       	ldi	r25, 0x07	; 7
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <kilo_start+0x16e>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <kilo_start+0x174>
     4b6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4b8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4c2:	3c 98       	cbi	0x07, 4	; 7
     4c4:	9f ef       	ldi	r25, 0xFF	; 255
     4c6:	e1 ee       	ldi	r30, 0xE1	; 225
     4c8:	f4 e0       	ldi	r31, 0x04	; 4
     4ca:	91 50       	subi	r25, 0x01	; 1
     4cc:	e0 40       	sbci	r30, 0x00	; 0
     4ce:	f0 40       	sbci	r31, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <kilo_start+0x188>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <kilo_start+0x192>
     4d4:	00 00       	nop
     4d6:	44 cf       	rjmp	.-376    	; 0x360 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4d8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4da:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4dc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4de:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4e0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4e2:	3c 98       	cbi	0x07, 4	; 7
     4e4:	ef ec       	ldi	r30, 0xCF	; 207
     4e6:	f7 e0       	ldi	r31, 0x07	; 7
     4e8:	31 97       	sbiw	r30, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <kilo_start+0x1a6>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <kilo_start+0x1ac>
     4ee:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4f0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4f2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4f4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4f6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4f8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4fa:	3c 98       	cbi	0x07, 4	; 7
     4fc:	ff ef       	ldi	r31, 0xFF	; 255
     4fe:	21 ee       	ldi	r18, 0xE1	; 225
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	f1 50       	subi	r31, 0x01	; 1
     504:	20 40       	sbci	r18, 0x00	; 0
     506:	80 40       	sbci	r24, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <kilo_start+0x1c0>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <kilo_start+0x1ca>
     50c:	00 00       	nop
     50e:	28 cf       	rjmp	.-432    	; 0x360 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     510:	90 91 0f 01 	lds	r25, 0x010F
     514:	80 91 10 01 	lds	r24, 0x0110
     518:	98 17       	cp	r25, r24
     51a:	09 f4       	brne	.+2      	; 0x51e <kilo_start+0x1dc>
     51c:	21 cf       	rjmp	.-446    	; 0x360 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     51e:	80 91 0f 01 	lds	r24, 0x010F
     522:	80 93 10 01 	sts	0x0110, r24
                        if (cur_motion == MOVE_LEFT) {
     526:	80 91 0f 01 	lds	r24, 0x010F
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	09 f4       	brne	.+2      	; 0x530 <kilo_start+0x1ee>
     52e:	50 c0       	rjmp	.+160    	; 0x5d0 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     530:	80 91 0f 01 	lds	r24, 0x010F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     534:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     538:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     53c:	82 30       	cpi	r24, 0x02	; 2
     53e:	d9 f1       	breq	.+118    	; 0x5b6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     540:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     544:	90 92 b4 00 	sts	0x00B4, r9
     548:	8f e2       	ldi	r24, 0x2F	; 47
     54a:	95 e7       	ldi	r25, 0x75	; 117
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <kilo_start+0x20a>
     550:	00 c0       	rjmp	.+0      	; 0x552 <kilo_start+0x210>
     552:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     554:	80 91 7a 01 	lds	r24, 0x017A
     558:	90 91 79 01 	lds	r25, 0x0179
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     55c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     560:	80 93 b4 00 	sts	0x00B4, r24
     564:	fd ce       	rjmp	.-518    	; 0x360 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     566:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     568:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     56a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     56c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     56e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     570:	3c 98       	cbi	0x07, 4	; 7
     572:	f6 ce       	rjmp	.-532    	; 0x360 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     574:	f3 01       	movw	r30, r6
     576:	09 95       	icall
     578:	01 cf       	rjmp	.-510    	; 0x37c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     57a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     57c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     57e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     580:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     582:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     584:	3c 98       	cbi	0x07, 4	; 7
     586:	ff ef       	ldi	r31, 0xFF	; 255
     588:	20 e7       	ldi	r18, 0x70	; 112
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	f1 50       	subi	r31, 0x01	; 1
     58e:	20 40       	sbci	r18, 0x00	; 0
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <kilo_start+0x24a>
     594:	00 c0       	rjmp	.+0      	; 0x596 <kilo_start+0x254>
     596:	00 00       	nop
     598:	6f cf       	rjmp	.-290    	; 0x478 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     59a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     59c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     59e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     5a0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5a4:	3c 98       	cbi	0x07, 4	; 7
     5a6:	dc ce       	rjmp	.-584    	; 0x360 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5aa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5ac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5ae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5b0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5b2:	3c 9a       	sbi	0x07, 4	; 7
     5b4:	d5 ce       	rjmp	.-598    	; 0x360 <kilo_start+0x1e>
     5b6:	ef e2       	ldi	r30, 0x2F	; 47
     5b8:	f5 e7       	ldi	r31, 0x75	; 117
     5ba:	31 97       	sbiw	r30, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <kilo_start+0x278>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <kilo_start+0x27e>
     5c0:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5c2:	80 91 67 01 	lds	r24, 0x0167
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5ca:	80 93 b4 00 	sts	0x00B4, r24
     5ce:	c8 ce       	rjmp	.-624    	; 0x360 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d0:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5d4:	10 92 b4 00 	sts	0x00B4, r1
     5d8:	8f e2       	ldi	r24, 0x2F	; 47
     5da:	95 e7       	ldi	r25, 0x75	; 117
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <kilo_start+0x29a>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <kilo_start+0x2a0>
     5e2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5e4:	80 91 7b 01 	lds	r24, 0x017B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5ec:	10 92 b4 00 	sts	0x00B4, r1
     5f0:	b7 ce       	rjmp	.-658    	; 0x360 <kilo_start+0x1e>

000005f2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <delay+0x10>
     5f4:	ef ec       	ldi	r30, 0xCF	; 207
     5f6:	f7 e0       	ldi	r31, 0x07	; 7
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <delay+0x6>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <delay+0xc>
     5fe:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     600:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     602:	00 97       	sbiw	r24, 0x00	; 0
     604:	b9 f7       	brne	.-18     	; 0x5f4 <delay+0x2>
     606:	08 95       	ret

00000608 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     608:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     60c:	60 93 b4 00 	sts	0x00B4, r22
     610:	08 95       	ret

00000612 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     618:	80 93 b4 00 	sts	0x00B4, r24
     61c:	8f e0       	ldi	r24, 0x0F	; 15
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	ef ec       	ldi	r30, 0xCF	; 207
     622:	f7 e0       	ldi	r31, 0x07	; 7
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <spinup_motors+0x12>
     628:	00 c0       	rjmp	.+0      	; 0x62a <spinup_motors+0x18>
     62a:	00 00       	nop
     62c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     62e:	c1 f7       	brne	.-16     	; 0x620 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     630:	08 95       	ret

00000632 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     632:	80 91 45 01 	lds	r24, 0x0145
     636:	81 11       	cpse	r24, r1
     638:	1e c0       	rjmp	.+60     	; 0x676 <get_ambientlight+0x44>
        cli();
     63a:	f8 94       	cli
        adc_setup_conversion(7);
     63c:	87 e0       	ldi	r24, 0x07	; 7
     63e:	80 93 7c 00 	sts	0x007C, r24
     642:	83 e8       	ldi	r24, 0x83	; 131
     644:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     648:	80 91 7a 00 	lds	r24, 0x007A
     64c:	80 64       	ori	r24, 0x40	; 64
     64e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     652:	80 91 7a 00 	lds	r24, 0x007A
     656:	86 fd       	sbrc	r24, 6
     658:	fc cf       	rjmp	.-8      	; 0x652 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     65a:	80 91 78 00 	lds	r24, 0x0078
     65e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     662:	10 92 7c 00 	sts	0x007C, r1
     666:	23 ea       	ldi	r18, 0xA3	; 163
     668:	20 93 7a 00 	sts	0x007A, r18
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     672:	78 94       	sei
     674:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     67a:	08 95       	ret

0000067c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     67c:	80 91 45 01 	lds	r24, 0x0145
     680:	81 11       	cpse	r24, r1
     682:	1e c0       	rjmp	.+60     	; 0x6c0 <get_temperature+0x44>
        cli();
     684:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     686:	88 ec       	ldi	r24, 0xC8	; 200
     688:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     692:	80 91 7a 00 	lds	r24, 0x007A
     696:	80 64       	ori	r24, 0x40	; 64
     698:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     69c:	80 91 7a 00 	lds	r24, 0x007A
     6a0:	86 fd       	sbrc	r24, 6
     6a2:	fc cf       	rjmp	.-8      	; 0x69c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6a4:	80 91 78 00 	lds	r24, 0x0078
     6a8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6ac:	10 92 7c 00 	sts	0x007C, r1
     6b0:	23 ea       	ldi	r18, 0xA3	; 163
     6b2:	20 93 7a 00 	sts	0x007A, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6bc:	78 94       	sei
     6be:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6c4:	08 95       	ret

000006c6 <rand_hard>:

uint8_t rand_hard() {
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	e0 e0       	ldi	r30, 0x00	; 0
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6d4:	03 ea       	ldi	r16, 0xA3	; 163
     6d6:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6d8:	d6 e0       	ldi	r29, 0x06	; 6
     6da:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6dc:	a1 e0       	ldi	r26, 0x01	; 1
     6de:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6e0:	60 e8       	ldi	r22, 0x80	; 128
     6e2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6e4:	f8 94       	cli
            adc_setup_conversion(6);
     6e6:	d0 93 7c 00 	sts	0x007C, r29
     6ea:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6ee:	90 91 7a 00 	lds	r25, 0x007A
     6f2:	90 64       	ori	r25, 0x40	; 64
     6f4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6f8:	90 91 7a 00 	lds	r25, 0x007A
     6fc:	96 fd       	sbrc	r25, 6
     6fe:	fc cf       	rjmp	.-8      	; 0x6f8 <rand_hard+0x32>
            a = ADCW&0x1;
     700:	20 91 78 00 	lds	r18, 0x0078
     704:	30 91 79 00 	lds	r19, 0x0079
     708:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     70a:	90 91 7a 00 	lds	r25, 0x007A
     70e:	90 64       	ori	r25, 0x40	; 64
     710:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     714:	90 91 7a 00 	lds	r25, 0x007A
     718:	96 fd       	sbrc	r25, 6
     71a:	fc cf       	rjmp	.-8      	; 0x714 <rand_hard+0x4e>
            b = ADCW&0x1;
     71c:	40 91 78 00 	lds	r20, 0x0078
     720:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     724:	10 92 7c 00 	sts	0x007C, r1
     728:	00 93 7a 00 	sts	0x007A, r16
     72c:	10 93 7b 00 	sts	0x007B, r17
            sei();
     730:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     732:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     734:	24 13       	cpse	r18, r20
     736:	03 c0       	rjmp	.+6      	; 0x73e <rand_hard+0x78>
     738:	61 50       	subi	r22, 0x01	; 1
     73a:	71 09       	sbc	r23, r1
     73c:	99 f6       	brne	.-90     	; 0x6e4 <rand_hard+0x1e>
        if (a)
     73e:	22 23       	and	r18, r18
     740:	39 f0       	breq	.+14     	; 0x750 <rand_hard+0x8a>
            num |= (1<<i);
     742:	9d 01       	movw	r18, r26
     744:	0e 2e       	mov	r0, r30
     746:	01 c0       	rjmp	.+2      	; 0x74a <rand_hard+0x84>
     748:	22 0f       	add	r18, r18
     74a:	0a 94       	dec	r0
     74c:	ea f7       	brpl	.-6      	; 0x748 <rand_hard+0x82>
     74e:	82 2b       	or	r24, r18
     750:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     752:	e8 30       	cpi	r30, 0x08	; 8
     754:	f1 05       	cpc	r31, r1
     756:	09 f0       	breq	.+2      	; 0x75a <rand_hard+0x94>
     758:	c3 cf       	rjmp	.-122    	; 0x6e0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	08 95       	ret

00000764 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     764:	80 91 00 01 	lds	r24, 0x0100
     768:	98 2f       	mov	r25, r24
     76a:	99 0f       	add	r25, r25
     76c:	99 0f       	add	r25, r25
     76e:	99 0f       	add	r25, r25
     770:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     772:	90 91 0e 01 	lds	r25, 0x010E
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	29 0f       	add	r18, r25
     77a:	20 93 0e 01 	sts	0x010E, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     77e:	28 2f       	mov	r18, r24
     780:	22 95       	swap	r18
     782:	26 95       	lsr	r18
     784:	27 70       	andi	r18, 0x07	; 7
     786:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     788:	96 95       	lsr	r25
     78a:	96 95       	lsr	r25
     78c:	89 27       	eor	r24, r25
     78e:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     792:	08 95       	ret

00000794 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     794:	80 93 00 01 	sts	0x0100, r24
     798:	08 95       	ret

0000079a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     79a:	80 91 45 01 	lds	r24, 0x0145
     79e:	81 11       	cpse	r24, r1
     7a0:	16 c0       	rjmp	.+44     	; 0x7ce <get_voltage+0x34>
        cli();                                    // disable interrupts
     7a2:	f8 94       	cli
        adc_setup_conversion(6);
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	80 93 7c 00 	sts	0x007C, r24
     7aa:	83 e8       	ldi	r24, 0x83	; 131
     7ac:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     7b0:	80 91 7a 00 	lds	r24, 0x007A
     7b4:	80 64       	ori	r24, 0x40	; 64
     7b6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     7ba:	80 91 7a 00 	lds	r24, 0x007A
     7be:	86 fd       	sbrc	r24, 6
     7c0:	fc cf       	rjmp	.-8      	; 0x7ba <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7c2:	80 91 78 00 	lds	r24, 0x0078
     7c6:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7ca:	78 94       	sei
     7cc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7d2:	08 95       	ret

000007d4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7d4:	2f 92       	push	r2
     7d6:	3f 92       	push	r3
     7d8:	4f 92       	push	r4
     7da:	5f 92       	push	r5
     7dc:	6f 92       	push	r6
     7de:	7f 92       	push	r7
     7e0:	8f 92       	push	r8
     7e2:	9f 92       	push	r9
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <estimate_distance+0x26>
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <estimate_distance+0x28>
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <estimate_distance+0x2a>
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     804:	dc 01       	movw	r26, r24
     806:	12 96       	adiw	r26, 0x02	; 2
     808:	0d 90       	ld	r0, X+
     80a:	bc 91       	ld	r27, X
     80c:	a0 2d       	mov	r26, r0
     80e:	be 83       	std	Y+6, r27	; 0x06
     810:	ad 83       	std	Y+5, r26	; 0x05
     812:	a4 38       	cpi	r26, 0x84	; 132
     814:	e3 e0       	ldi	r30, 0x03	; 3
     816:	be 07       	cpc	r27, r30
     818:	0c f0       	brlt	.+2      	; 0x81c <estimate_distance+0x48>
     81a:	c9 c0       	rjmp	.+402    	; 0x9ae <__stack+0xaf>
        if (dist->high_gain > kilo_irhigh[0]) {
     81c:	80 91 1f 01 	lds	r24, 0x011F
     820:	90 91 20 01 	lds	r25, 0x0120
     824:	8a 17       	cp	r24, r26
     826:	9b 07       	cpc	r25, r27
     828:	08 f4       	brcc	.+2      	; 0x82c <estimate_distance+0x58>
     82a:	37 c1       	rjmp	.+622    	; 0xa9a <__stack+0x19b>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     82c:	00 91 21 01 	lds	r16, 0x0121
     830:	10 91 22 01 	lds	r17, 0x0122
     834:	0a 17       	cp	r16, r26
     836:	1b 07       	cpc	r17, r27
     838:	08 f4       	brcc	.+2      	; 0x83c <estimate_distance+0x68>
     83a:	2f c2       	rjmp	.+1118   	; 0xc9a <__stack+0x39b>
     83c:	00 91 23 01 	lds	r16, 0x0123
     840:	10 91 24 01 	lds	r17, 0x0124
     844:	0a 17       	cp	r16, r26
     846:	1b 07       	cpc	r17, r27
     848:	08 f4       	brcc	.+2      	; 0x84c <estimate_distance+0x78>
     84a:	2f c2       	rjmp	.+1118   	; 0xcaa <__stack+0x3ab>
     84c:	00 91 25 01 	lds	r16, 0x0125
     850:	10 91 26 01 	lds	r17, 0x0126
     854:	0a 17       	cp	r16, r26
     856:	1b 07       	cpc	r17, r27
     858:	08 f4       	brcc	.+2      	; 0x85c <estimate_distance+0x88>
     85a:	2f c2       	rjmp	.+1118   	; 0xcba <__stack+0x3bb>
     85c:	00 91 27 01 	lds	r16, 0x0127
     860:	10 91 28 01 	lds	r17, 0x0128
     864:	0a 17       	cp	r16, r26
     866:	1b 07       	cpc	r17, r27
     868:	08 f4       	brcc	.+2      	; 0x86c <estimate_distance+0x98>
     86a:	2f c2       	rjmp	.+1118   	; 0xcca <__stack+0x3cb>
     86c:	00 91 29 01 	lds	r16, 0x0129
     870:	10 91 2a 01 	lds	r17, 0x012A
     874:	0a 17       	cp	r16, r26
     876:	1b 07       	cpc	r17, r27
     878:	08 f4       	brcc	.+2      	; 0x87c <estimate_distance+0xa8>
     87a:	ef c1       	rjmp	.+990    	; 0xc5a <__stack+0x35b>
     87c:	00 91 2b 01 	lds	r16, 0x012B
     880:	10 91 2c 01 	lds	r17, 0x012C
     884:	0a 17       	cp	r16, r26
     886:	1b 07       	cpc	r17, r27
     888:	08 f4       	brcc	.+2      	; 0x88c <estimate_distance+0xb8>
     88a:	27 c2       	rjmp	.+1102   	; 0xcda <__stack+0x3db>
     88c:	00 91 2d 01 	lds	r16, 0x012D
     890:	10 91 2e 01 	lds	r17, 0x012E
     894:	0a 17       	cp	r16, r26
     896:	1b 07       	cpc	r17, r27
     898:	08 f4       	brcc	.+2      	; 0x89c <estimate_distance+0xc8>
     89a:	27 c2       	rjmp	.+1102   	; 0xcea <__stack+0x3eb>
     89c:	00 91 2f 01 	lds	r16, 0x012F
     8a0:	10 91 30 01 	lds	r17, 0x0130
     8a4:	0a 17       	cp	r16, r26
     8a6:	1b 07       	cpc	r17, r27
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <estimate_distance+0xd8>
     8aa:	27 c2       	rjmp	.+1102   	; 0xcfa <__stack+0x3fb>
     8ac:	00 91 31 01 	lds	r16, 0x0131
     8b0:	10 91 32 01 	lds	r17, 0x0132
     8b4:	0a 17       	cp	r16, r26
     8b6:	1b 07       	cpc	r17, r27
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <estimate_distance+0xe8>
     8ba:	27 c2       	rjmp	.+1102   	; 0xd0a <__stack+0x40b>
     8bc:	00 91 33 01 	lds	r16, 0x0133
     8c0:	10 91 34 01 	lds	r17, 0x0134
     8c4:	0a 17       	cp	r16, r26
     8c6:	1b 07       	cpc	r17, r27
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <estimate_distance+0xf8>
     8ca:	27 c2       	rjmp	.+1102   	; 0xd1a <__stack+0x41b>
     8cc:	00 91 35 01 	lds	r16, 0x0135
     8d0:	10 91 36 01 	lds	r17, 0x0136
     8d4:	0a 17       	cp	r16, r26
     8d6:	1b 07       	cpc	r17, r27
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <estimate_distance+0x108>
     8da:	23 c2       	rjmp	.+1094   	; 0xd22 <__stack+0x423>
     8dc:	00 91 37 01 	lds	r16, 0x0137
     8e0:	10 91 38 01 	lds	r17, 0x0138
     8e4:	0a 17       	cp	r16, r26
     8e6:	1b 07       	cpc	r17, r27
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <estimate_distance+0x118>
     8ea:	23 c2       	rjmp	.+1094   	; 0xd32 <__stack+0x433>
     8ec:	00 91 39 01 	lds	r16, 0x0139
     8f0:	10 91 3a 01 	lds	r17, 0x013A
     8f4:	0a 17       	cp	r16, r26
     8f6:	1b 07       	cpc	r17, r27
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <estimate_distance+0x128>
     8fa:	23 c2       	rjmp	.+1094   	; 0xd42 <__stack+0x443>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 ed       	ldi	r26, 0xD0	; 208
     902:	b0 e4       	ldi	r27, 0x40	; 64
     904:	89 83       	std	Y+1, r24	; 0x01
     906:	9a 83       	std	Y+2, r25	; 0x02
     908:	ab 83       	std	Y+3, r26	; 0x03
     90a:	bc 83       	std	Y+4, r27	; 0x04
     90c:	4c e0       	ldi	r20, 0x0C	; 12
     90e:	e4 2e       	mov	r14, r20
     910:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     912:	f7 01       	movw	r30, r14
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e1 5e       	subi	r30, 0xE1	; 225
     91a:	fe 4f       	sbci	r31, 0xFE	; 254
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	b8 01       	movw	r22, r16
     922:	68 1b       	sub	r22, r24
     924:	79 0b       	sbc	r23, r25
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     936:	6b 01       	movw	r12, r22
     938:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     93a:	ad 81       	ldd	r26, Y+5	; 0x05
     93c:	be 81       	ldd	r27, Y+6	; 0x06
     93e:	bd 01       	movw	r22, r26
     940:	bb 0f       	add	r27, r27
     942:	88 0b       	sbc	r24, r24
     944:	99 0b       	sbc	r25, r25
     946:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatsisf>
     94a:	4b 01       	movw	r8, r22
     94c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     94e:	b8 01       	movw	r22, r16
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     958:	2b 01       	movw	r4, r22
     95a:	3c 01       	movw	r6, r24
     95c:	29 81       	ldd	r18, Y+1	; 0x01
     95e:	3a 81       	ldd	r19, Y+2	; 0x02
     960:	4b 81       	ldd	r20, Y+3	; 0x03
     962:	5c 81       	ldd	r21, Y+4	; 0x04
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	c3 01       	movw	r24, r6
     972:	b2 01       	movw	r22, r4
     974:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__subsf3>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     97c:	c5 01       	movw	r24, r10
     97e:	b4 01       	movw	r22, r8
     980:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__subsf3>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e2       	ldi	r20, 0x20	; 32
     98a:	51 e4       	ldi	r21, 0x41	; 65
     98c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
            b=((int)((int)b/(int)slope));
     990:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
     994:	8b 01       	movw	r16, r22
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
     99a:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
     99e:	ab 01       	movw	r20, r22
     9a0:	bc 01       	movw	r22, r24
     9a2:	c8 01       	movw	r24, r16
     9a4:	ba 01       	movw	r22, r20
     9a6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divmodhi4>
            dist_high=b;
     9aa:	16 2f       	mov	r17, r22
     9ac:	77 c0       	rjmp	.+238    	; 0xa9c <__stack+0x19d>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9ae:	dc 01       	movw	r26, r24
     9b0:	cd 90       	ld	r12, X+
     9b2:	dc 90       	ld	r13, X
     9b4:	80 91 46 01 	lds	r24, 0x0146
     9b8:	90 91 47 01 	lds	r25, 0x0147
     9bc:	8c 15       	cp	r24, r12
     9be:	9d 05       	cpc	r25, r13
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	8c c0       	rjmp	.+280    	; 0xadc <__stack+0x1dd>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9c4:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9c6:	e0 90 48 01 	lds	r14, 0x0148
     9ca:	f0 90 49 01 	lds	r15, 0x0149
     9ce:	ec 14       	cp	r14, r12
     9d0:	fd 04       	cpc	r15, r13
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	5e c1       	rjmp	.+700    	; 0xc92 <__stack+0x393>
     9d6:	e0 90 4a 01 	lds	r14, 0x014A
     9da:	f0 90 4b 01 	lds	r15, 0x014B
     9de:	ec 14       	cp	r14, r12
     9e0:	fd 04       	cpc	r15, r13
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	5e c1       	rjmp	.+700    	; 0xca2 <__stack+0x3a3>
     9e6:	e0 90 4c 01 	lds	r14, 0x014C
     9ea:	f0 90 4d 01 	lds	r15, 0x014D
     9ee:	ec 14       	cp	r14, r12
     9f0:	fd 04       	cpc	r15, r13
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	5e c1       	rjmp	.+700    	; 0xcb2 <__stack+0x3b3>
     9f6:	e0 90 4e 01 	lds	r14, 0x014E
     9fa:	f0 90 4f 01 	lds	r15, 0x014F
     9fe:	ec 14       	cp	r14, r12
     a00:	fd 04       	cpc	r15, r13
     a02:	08 f4       	brcc	.+2      	; 0xa06 <__stack+0x107>
     a04:	5e c1       	rjmp	.+700    	; 0xcc2 <__stack+0x3c3>
     a06:	e0 90 50 01 	lds	r14, 0x0150
     a0a:	f0 90 51 01 	lds	r15, 0x0151
     a0e:	ec 14       	cp	r14, r12
     a10:	fd 04       	cpc	r15, r13
     a12:	08 f4       	brcc	.+2      	; 0xa16 <__stack+0x117>
     a14:	c3 c0       	rjmp	.+390    	; 0xb9c <__stack+0x29d>
     a16:	e0 90 52 01 	lds	r14, 0x0152
     a1a:	f0 90 53 01 	lds	r15, 0x0153
     a1e:	ec 14       	cp	r14, r12
     a20:	fd 04       	cpc	r15, r13
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x127>
     a24:	56 c1       	rjmp	.+684    	; 0xcd2 <__stack+0x3d3>
     a26:	e0 90 54 01 	lds	r14, 0x0154
     a2a:	f0 90 55 01 	lds	r15, 0x0155
     a2e:	ec 14       	cp	r14, r12
     a30:	fd 04       	cpc	r15, r13
     a32:	08 f4       	brcc	.+2      	; 0xa36 <__stack+0x137>
     a34:	56 c1       	rjmp	.+684    	; 0xce2 <__stack+0x3e3>
     a36:	e0 90 56 01 	lds	r14, 0x0156
     a3a:	f0 90 57 01 	lds	r15, 0x0157
     a3e:	ec 14       	cp	r14, r12
     a40:	fd 04       	cpc	r15, r13
     a42:	08 f4       	brcc	.+2      	; 0xa46 <__stack+0x147>
     a44:	56 c1       	rjmp	.+684    	; 0xcf2 <__stack+0x3f3>
     a46:	e0 90 58 01 	lds	r14, 0x0158
     a4a:	f0 90 59 01 	lds	r15, 0x0159
     a4e:	ec 14       	cp	r14, r12
     a50:	fd 04       	cpc	r15, r13
     a52:	08 f4       	brcc	.+2      	; 0xa56 <__stack+0x157>
     a54:	56 c1       	rjmp	.+684    	; 0xd02 <__stack+0x403>
     a56:	e0 90 5a 01 	lds	r14, 0x015A
     a5a:	f0 90 5b 01 	lds	r15, 0x015B
     a5e:	ec 14       	cp	r14, r12
     a60:	fd 04       	cpc	r15, r13
     a62:	08 f4       	brcc	.+2      	; 0xa66 <__stack+0x167>
     a64:	56 c1       	rjmp	.+684    	; 0xd12 <__stack+0x413>
     a66:	e0 90 5c 01 	lds	r14, 0x015C
     a6a:	f0 90 5d 01 	lds	r15, 0x015D
     a6e:	ec 14       	cp	r14, r12
     a70:	fd 04       	cpc	r15, r13
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__stack+0x177>
     a74:	5a c1       	rjmp	.+692    	; 0xd2a <__stack+0x42b>
     a76:	e0 90 5e 01 	lds	r14, 0x015E
     a7a:	f0 90 5f 01 	lds	r15, 0x015F
     a7e:	ec 14       	cp	r14, r12
     a80:	fd 04       	cpc	r15, r13
     a82:	08 f4       	brcc	.+2      	; 0xa86 <__stack+0x187>
     a84:	5a c1       	rjmp	.+692    	; 0xd3a <__stack+0x43b>
     a86:	e0 90 60 01 	lds	r14, 0x0160
     a8a:	f0 90 61 01 	lds	r15, 0x0161
     a8e:	ec 14       	cp	r14, r12
     a90:	fd 04       	cpc	r15, r13
     a92:	08 f4       	brcc	.+2      	; 0xa96 <__stack+0x197>
     a94:	5a c1       	rjmp	.+692    	; 0xd4a <__stack+0x44b>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a96:	0a e5       	ldi	r16, 0x5A	; 90
     a98:	31 c0       	rjmp	.+98     	; 0xafc <__stack+0x1fd>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a9a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a9c:	ed 81       	ldd	r30, Y+5	; 0x05
     a9e:	fe 81       	ldd	r31, Y+6	; 0x06
     aa0:	ed 3b       	cpi	r30, 0xBD	; 189
     aa2:	f2 40       	sbci	r31, 0x02	; 2
     aa4:	fc f4       	brge	.+62     	; 0xae4 <__stack+0x1e5>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     aa6:	81 e2       	ldi	r24, 0x21	; 33
     aa8:	81 0f       	add	r24, r17
    }
}
     aaa:	26 96       	adiw	r28, 0x06	; 6
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	7f 90       	pop	r7
     ad0:	6f 90       	pop	r6
     ad2:	5f 90       	pop	r5
     ad4:	4f 90       	pop	r4
     ad6:	3f 90       	pop	r3
     ad8:	2f 90       	pop	r2
     ada:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     adc:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     ade:	81 e2       	ldi	r24, 0x21	; 33
     ae0:	80 0f       	add	r24, r16
     ae2:	e3 cf       	rjmp	.-58     	; 0xaaa <__stack+0x1ab>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ae4:	d1 01       	movw	r26, r2
     ae6:	cd 90       	ld	r12, X+
     ae8:	dc 90       	ld	r13, X
     aea:	80 91 46 01 	lds	r24, 0x0146
     aee:	90 91 47 01 	lds	r25, 0x0147
     af2:	8c 15       	cp	r24, r12
     af4:	9d 05       	cpc	r25, r13
     af6:	08 f0       	brcs	.+2      	; 0xafa <__stack+0x1fb>
     af8:	66 cf       	rjmp	.-308    	; 0x9c6 <__stack+0xc7>
            dist_low=0;
     afa:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     afc:	1f 3f       	cpi	r17, 0xFF	; 255
     afe:	79 f3       	breq	.-34     	; 0xade <__stack+0x1df>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b00:	ed 81       	ldd	r30, Y+5	; 0x05
     b02:	fe 81       	ldd	r31, Y+6	; 0x06
     b04:	bf 01       	movw	r22, r30
     b06:	ff 0f       	add	r31, r31
     b08:	88 0b       	sbc	r24, r24
     b0a:	99 0b       	sbc	r25, r25
     b0c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatsisf>
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
     b14:	61 2f       	mov	r22, r17
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     b20:	4b 01       	movw	r8, r22
     b22:	5c 01       	movw	r10, r24
     b24:	a7 01       	movw	r20, r14
     b26:	96 01       	movw	r18, r12
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	81 e6       	ldi	r24, 0x61	; 97
     b2e:	94 e4       	ldi	r25, 0x44	; 68
     b30:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__subsf3>
     b34:	9b 01       	movw	r18, r22
     b36:	ac 01       	movw	r20, r24
     b38:	c5 01       	movw	r24, r10
     b3a:	b4 01       	movw	r22, r8
     b3c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
     b40:	4b 01       	movw	r8, r22
     b42:	5c 01       	movw	r10, r24
     b44:	60 2f       	mov	r22, r16
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     b50:	2b 01       	movw	r4, r22
     b52:	3c 01       	movw	r6, r24
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	4f e2       	ldi	r20, 0x2F	; 47
     b5a:	54 e4       	ldi	r21, 0x44	; 68
     b5c:	c7 01       	movw	r24, r14
     b5e:	b6 01       	movw	r22, r12
     b60:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__subsf3>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	c3 01       	movw	r24, r6
     b6a:	b2 01       	movw	r22, r4
     b6c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
     b70:	9b 01       	movw	r18, r22
     b72:	ac 01       	movw	r20, r24
     b74:	c5 01       	movw	r24, r10
     b76:	b4 01       	movw	r22, r8
     b78:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	48 e4       	ldi	r20, 0x48	; 72
     b82:	53 e4       	ldi	r21, 0x43	; 67
     b84:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__divsf3>
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	44 e0       	ldi	r20, 0x04	; 4
     b8e:	52 e4       	ldi	r21, 0x42	; 66
     b90:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     b94:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
     b98:	86 2f       	mov	r24, r22
     b9a:	87 cf       	rjmp	.-242    	; 0xaaa <__stack+0x1ab>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b9c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     b9e:	85 e0       	ldi	r24, 0x05	; 5
     ba0:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	fc 01       	movw	r30, r24
     ba8:	ec 5b       	subi	r30, 0xBC	; 188
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	b7 01       	movw	r22, r14
     bb2:	68 1b       	sub	r22, r24
     bb4:	79 0b       	sbc	r23, r25
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     bc6:	4b 01       	movw	r8, r22
     bc8:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bca:	b6 01       	movw	r22, r12
     bcc:	dd 0c       	add	r13, r13
     bce:	88 0b       	sbc	r24, r24
     bd0:	99 0b       	sbc	r25, r25
     bd2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatsisf>
     bd6:	2b 01       	movw	r4, r22
     bd8:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bda:	b7 01       	movw	r22, r14
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     be4:	6b 01       	movw	r12, r22
     be6:	7c 01       	movw	r14, r24
     be8:	60 2f       	mov	r22, r16
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	5f e3       	ldi	r21, 0x3F	; 63
     bfc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	a9 01       	movw	r20, r18
     c06:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     c0a:	a5 01       	movw	r20, r10
     c0c:	94 01       	movw	r18, r8
     c0e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__subsf3>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c22:	c3 01       	movw	r24, r6
     c24:	b2 01       	movw	r22, r4
     c26:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__subsf3>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c36:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
     c3a:	7b 01       	movw	r14, r22
     c3c:	c5 01       	movw	r24, r10
     c3e:	b4 01       	movw	r22, r8
     c40:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixsfsi>
     c44:	ab 01       	movw	r20, r22
     c46:	bc 01       	movw	r22, r24
     c48:	c7 01       	movw	r24, r14
     c4a:	ba 01       	movw	r22, r20
     c4c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divmodhi4>
                dist_low=b;
     c50:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c52:	6f 3f       	cpi	r22, 0xFF	; 255
     c54:	09 f0       	breq	.+2      	; 0xc58 <__stack+0x359>
     c56:	52 cf       	rjmp	.-348    	; 0xafc <__stack+0x1fd>
     c58:	26 cf       	rjmp	.-436    	; 0xaa6 <__stack+0x1a7>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c5a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c5c:	85 e0       	ldi	r24, 0x05	; 5
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	7c 01       	movw	r14, r24
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	ef 1a       	sub	r14, r31
     c66:	f1 08       	sbc	r15, r1
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__floatunsisf>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	a9 01       	movw	r20, r18
     c84:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__addsf3>
     c88:	69 83       	std	Y+1, r22	; 0x01
     c8a:	7a 83       	std	Y+2, r23	; 0x02
     c8c:	8b 83       	std	Y+3, r24	; 0x03
     c8e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     c90:	40 ce       	rjmp	.-896    	; 0x912 <__stack+0x13>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c92:	01 e0       	ldi	r16, 0x01	; 1
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	84 cf       	rjmp	.-248    	; 0xba2 <__stack+0x2a3>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	df cf       	rjmp	.-66     	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca2:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	7c cf       	rjmp	.-264    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     caa:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	d7 cf       	rjmp	.-82     	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb2:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	74 cf       	rjmp	.-280    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cba:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	cf cf       	rjmp	.-98     	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc2:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	6c cf       	rjmp	.-296    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cca:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	c7 cf       	rjmp	.-114    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd2:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     cd4:	86 e0       	ldi	r24, 0x06	; 6
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	64 cf       	rjmp	.-312    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cda:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cdc:	86 e0       	ldi	r24, 0x06	; 6
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	bf cf       	rjmp	.-130    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce2:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ce4:	87 e0       	ldi	r24, 0x07	; 7
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	5c cf       	rjmp	.-328    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cea:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cec:	87 e0       	ldi	r24, 0x07	; 7
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	b7 cf       	rjmp	.-146    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf2:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     cf4:	88 e0       	ldi	r24, 0x08	; 8
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	54 cf       	rjmp	.-344    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cfa:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	af cf       	rjmp	.-162    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d02:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d04:	89 e0       	ldi	r24, 0x09	; 9
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	4c cf       	rjmp	.-360    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0a:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d0c:	89 e0       	ldi	r24, 0x09	; 9
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a7 cf       	rjmp	.-178    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d12:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d14:	8a e0       	ldi	r24, 0x0A	; 10
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	44 cf       	rjmp	.-376    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9f cf       	rjmp	.-194    	; 0xc60 <__stack+0x361>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d22:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d24:	8b e0       	ldi	r24, 0x0B	; 11
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9b cf       	rjmp	.-202    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d2a:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d2c:	8b e0       	ldi	r24, 0x0B	; 11
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	38 cf       	rjmp	.-400    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d32:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d34:	8c e0       	ldi	r24, 0x0C	; 12
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	93 cf       	rjmp	.-218    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d3a:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     d3c:	8c e0       	ldi	r24, 0x0C	; 12
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	30 cf       	rjmp	.-416    	; 0xba2 <__stack+0x2a3>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d42:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d44:	8d e0       	ldi	r24, 0x0D	; 13
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	8b cf       	rjmp	.-234    	; 0xc60 <__stack+0x361>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d4a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d4c:	8d e0       	ldi	r24, 0x0D	; 13
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	28 cf       	rjmp	.-432    	; 0xba2 <__stack+0x2a3>

00000d52 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
    tx_clock += tx_increment;
     d74:	20 91 65 01 	lds	r18, 0x0165
     d78:	30 91 66 01 	lds	r19, 0x0166
     d7c:	80 91 63 01 	lds	r24, 0x0163
     d80:	90 91 64 01 	lds	r25, 0x0164
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	90 93 66 01 	sts	0x0166, r25
     d8c:	80 93 65 01 	sts	0x0165, r24
    tx_increment = 0xFF;
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	90 93 64 01 	sts	0x0164, r25
     d98:	80 93 63 01 	sts	0x0163, r24
    OCR0A = tx_increment;
     d9c:	8f ef       	ldi	r24, 0xFF	; 255
     d9e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     da0:	80 91 41 01 	lds	r24, 0x0141
     da4:	90 91 42 01 	lds	r25, 0x0142
     da8:	a0 91 43 01 	lds	r26, 0x0143
     dac:	b0 91 44 01 	lds	r27, 0x0144
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	a1 1d       	adc	r26, r1
     db4:	b1 1d       	adc	r27, r1
     db6:	80 93 41 01 	sts	0x0141, r24
     dba:	90 93 42 01 	sts	0x0142, r25
     dbe:	a0 93 43 01 	sts	0x0143, r26
     dc2:	b0 93 44 01 	sts	0x0144, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     dc6:	80 91 45 01 	lds	r24, 0x0145
     dca:	81 11       	cpse	r24, r1
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <__vector_14+0x9a>
     dce:	80 91 74 01 	lds	r24, 0x0174
     dd2:	90 91 75 01 	lds	r25, 0x0175
     dd6:	20 91 65 01 	lds	r18, 0x0165
     dda:	30 91 66 01 	lds	r19, 0x0166
     dde:	82 17       	cp	r24, r18
     de0:	93 07       	cpc	r25, r19
     de2:	20 f4       	brcc	.+8      	; 0xdec <__vector_14+0x9a>
     de4:	80 91 11 01 	lds	r24, 0x0111
     de8:	84 30       	cpi	r24, 0x04	; 4
     dea:	89 f0       	breq	.+34     	; 0xe0e <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e0e:	e0 91 03 01 	lds	r30, 0x0103
     e12:	f0 91 04 01 	lds	r31, 0x0104
     e16:	09 95       	icall
        if (msg) {
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	41 f3       	breq	.-48     	; 0xdec <__vector_14+0x9a>
            if (message_send(msg)) {
     e1c:	0e 94 91 09 	call	0x1322	; 0x1322 <message_send>
     e20:	81 11       	cpse	r24, r1
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e24:	0e 94 c4 0c 	call	0x1988	; 0x1988 <rand>
     e28:	99 27       	eor	r25, r25
     e2a:	90 93 64 01 	sts	0x0164, r25
     e2e:	80 93 63 01 	sts	0x0163, r24
                OCR0A = tx_increment;
     e32:	87 bd       	out	0x27, r24	; 39
     e34:	db cf       	rjmp	.-74     	; 0xdec <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e36:	e0 91 01 01 	lds	r30, 0x0101
     e3a:	f0 91 02 01 	lds	r31, 0x0102
     e3e:	09 95       	icall
                tx_clock = 0;
     e40:	10 92 66 01 	sts	0x0166, r1
     e44:	10 92 65 01 	sts	0x0165, r1
     e48:	d1 cf       	rjmp	.-94     	; 0xdec <__vector_14+0x9a>

00000e4a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e4a:	80 ff       	sbrs	r24, 0
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <set_color+0x26>
        DDRD |= (1<<5);
     e4e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e50:	81 ff       	sbrs	r24, 1
     e52:	11 c0       	rjmp	.+34     	; 0xe76 <set_color+0x2c>
        DDRD |= (1<<4);
     e54:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e56:	82 ff       	sbrs	r24, 2
     e58:	11 c0       	rjmp	.+34     	; 0xe7c <set_color+0x32>
        DDRC |= (1<<3);
     e5a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e5c:	83 ff       	sbrs	r24, 3
     e5e:	11 c0       	rjmp	.+34     	; 0xe82 <set_color+0x38>
        DDRC |= (1<<2);
     e60:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e62:	84 ff       	sbrs	r24, 4
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <set_color+0x3e>
        DDRC |= (1<<5);
     e66:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e68:	85 fd       	sbrc	r24, 5
     e6a:	11 c0       	rjmp	.+34     	; 0xe8e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e6c:	3c 98       	cbi	0x07, 4	; 7
     e6e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e70:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e72:	81 fd       	sbrc	r24, 1
     e74:	ef cf       	rjmp	.-34     	; 0xe54 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e76:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e78:	82 fd       	sbrc	r24, 2
     e7a:	ef cf       	rjmp	.-34     	; 0xe5a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e7c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e7e:	83 fd       	sbrc	r24, 3
     e80:	ef cf       	rjmp	.-34     	; 0xe60 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e82:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e84:	84 fd       	sbrc	r24, 4
     e86:	ef cf       	rjmp	.-34     	; 0xe66 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e88:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e8a:	85 ff       	sbrs	r24, 5
     e8c:	ef cf       	rjmp	.-34     	; 0xe6c <set_color+0x22>
        DDRC |= (1<<4);
     e8e:	3c 9a       	sbi	0x07, 4	; 7
     e90:	08 95       	ret

00000e92 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
    rx_timer_off();
     ea0:	10 92 81 00 	sts	0x0081, r1
     ea4:	10 92 85 00 	sts	0x0085, r1
     ea8:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 1e 01 	sts	0x011E, r24
    rx_leadingbyte = 1;
     eb2:	80 93 62 01 	sts	0x0162, r24
    rx_busy = 0;
     eb6:	10 92 45 01 	sts	0x0145, r1
    adc_trigger_high_gain();
     eba:	10 92 7c 00 	sts	0x007C, r1
     ebe:	93 ea       	ldi	r25, 0xA3	; 163
     ec0:	90 93 7a 00 	sts	0x007A, r25
     ec4:	80 93 7b 00 	sts	0x007B, r24
}
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     efc:	20 91 84 00 	lds	r18, 0x0084
     f00:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	40 93 45 01 	sts	0x0145, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f0a:	80 91 1e 01 	lds	r24, 0x011E
     f0e:	88 23       	and	r24, r24
     f10:	a9 f1       	breq	.+106    	; 0xf7c <__vector_23+0xa6>
        rx_timer_on();
     f12:	10 92 85 00 	sts	0x0085, r1
     f16:	10 92 84 00 	sts	0x0084, r1
     f1a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f1e:	10 92 76 01 	sts	0x0176, r1
        rx_leadingbit = 0;
     f22:	10 92 1e 01 	sts	0x011E, r1
        if (rx_leadingbyte) {
     f26:	80 91 62 01 	lds	r24, 0x0162
     f2a:	88 23       	and	r24, r24
     f2c:	a1 f0       	breq	.+40     	; 0xf56 <__vector_23+0x80>
            adc_finish_conversion();
     f2e:	80 91 7a 00 	lds	r24, 0x007A
     f32:	86 fd       	sbrc	r24, 6
     f34:	fc cf       	rjmp	.-8      	; 0xf2e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f36:	80 91 78 00 	lds	r24, 0x0078
     f3a:	90 91 79 00 	lds	r25, 0x0079
     f3e:	90 93 40 01 	sts	0x0140, r25
     f42:	80 93 3f 01 	sts	0x013F, r24
            adc_trigger_low_gain();
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 7c 00 	sts	0x007C, r24
     f4c:	93 ea       	ldi	r25, 0xA3	; 163
     f4e:	90 93 7a 00 	sts	0x007A, r25
     f52:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f7c:	c9 01       	movw	r24, r18
     f7e:	87 58       	subi	r24, 0x87	; 135
     f80:	91 09       	sbc	r25, r1
     f82:	84 37       	cpi	r24, 0x74	; 116
     f84:	99 40       	sbci	r25, 0x09	; 9
     f86:	08 f0       	brcs	.+2      	; 0xf8a <__vector_23+0xb4>
     f88:	52 c0       	rjmp	.+164    	; 0x102e <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f8a:	26 58       	subi	r18, 0x86	; 134
     f8c:	31 09       	sbc	r19, r1
     f8e:	a4 ef       	ldi	r26, 0xF4	; 244
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	0e 94 45 0a 	call	0x148a	; 0x148a <__umulhisi3>
     f96:	aa 27       	eor	r26, r26
     f98:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f9a:	88 30       	cpi	r24, 0x08	; 8
     f9c:	91 05       	cpc	r25, r1
     f9e:	a1 05       	cpc	r26, r1
     fa0:	b1 05       	cpc	r27, r1
     fa2:	08 f4       	brcc	.+2      	; 0xfa6 <__vector_23+0xd0>
     fa4:	7b c0       	rjmp	.+246    	; 0x109c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     fa6:	40 93 1e 01 	sts	0x011E, r20
                if (rx_leadingbyte) {
     faa:	80 91 62 01 	lds	r24, 0x0162
     fae:	81 11       	cpse	r24, r1
     fb0:	52 c0       	rjmp	.+164    	; 0x1056 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     fb2:	80 91 3c 01 	lds	r24, 0x013C
     fb6:	e8 2f       	mov	r30, r24
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	e8 59       	subi	r30, 0x98	; 152
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	90 91 76 01 	lds	r25, 0x0176
     fc2:	90 83       	st	Z, r25
                    rx_byteindex++;
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	80 93 3c 01 	sts	0x013C, r24
                    if (rx_byteindex == sizeof(message_t)) {
     fca:	8c 30       	cpi	r24, 0x0C	; 12
     fcc:	21 f6       	brne	.-120    	; 0xf56 <__vector_23+0x80>
                        rx_timer_off();
     fce:	10 92 81 00 	sts	0x0081, r1
     fd2:	10 92 85 00 	sts	0x0085, r1
     fd6:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     fda:	40 93 62 01 	sts	0x0162, r20
                        rx_busy = 0;
     fde:	10 92 45 01 	sts	0x0145, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     fe2:	c0 91 72 01 	lds	r28, 0x0172
     fe6:	d0 91 73 01 	lds	r29, 0x0173
     fea:	88 e6       	ldi	r24, 0x68	; 104
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 75 09 	call	0x12ea	; 0x12ea <message_crc>
     ff2:	c8 17       	cp	r28, r24
     ff4:	d9 07       	cpc	r29, r25
     ff6:	09 f0       	breq	.+2      	; 0xffa <__vector_23+0x124>
     ff8:	ae cf       	rjmp	.-164    	; 0xf56 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     ffa:	80 91 71 01 	lds	r24, 0x0171
     ffe:	87 ff       	sbrs	r24, 7
    1000:	61 c0       	rjmp	.+194    	; 0x10c4 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1002:	98 e7       	ldi	r25, 0x78	; 120
    1004:	98 0f       	add	r25, r24
    1006:	93 30       	cpi	r25, 0x03	; 3
    1008:	30 f0       	brcs	.+12     	; 0x1016 <__vector_23+0x140>
        motors_off();
    100a:	53 98       	cbi	0x0a, 3	; 10
    100c:	23 98       	cbi	0x04, 3	; 4
    100e:	10 92 b4 00 	sts	0x00B4, r1
    1012:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	e0 58       	subi	r30, 0x80	; 128
    101c:	f1 09       	sbc	r31, r1
    101e:	eb 30       	cpi	r30, 0x0B	; 11
    1020:	f1 05       	cpc	r31, r1
    1022:	08 f0       	brcs	.+2      	; 0x1026 <__vector_23+0x150>
    1024:	98 cf       	rjmp	.-208    	; 0xf56 <__vector_23+0x80>
    1026:	e5 5c       	subi	r30, 0xC5	; 197
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    102e:	10 92 81 00 	sts	0x0081, r1
    1032:	10 92 85 00 	sts	0x0085, r1
    1036:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    103a:	40 93 1e 01 	sts	0x011E, r20
            rx_leadingbyte = 1;
    103e:	40 93 62 01 	sts	0x0162, r20
            rx_busy = 0;
    1042:	10 92 45 01 	sts	0x0145, r1
            adc_trigger_high_gain();
    1046:	10 92 7c 00 	sts	0x007C, r1
    104a:	83 ea       	ldi	r24, 0xA3	; 163
    104c:	80 93 7a 00 	sts	0x007A, r24
    1050:	40 93 7b 00 	sts	0x007B, r20
    1054:	80 cf       	rjmp	.-256    	; 0xf56 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1056:	80 91 7a 00 	lds	r24, 0x007A
    105a:	86 fd       	sbrc	r24, 6
    105c:	fc cf       	rjmp	.-8      	; 0x1056 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    105e:	80 91 78 00 	lds	r24, 0x0078
    1062:	90 91 79 00 	lds	r25, 0x0079
    1066:	90 93 3e 01 	sts	0x013E, r25
    106a:	80 93 3d 01 	sts	0x013D, r24
                    adc_trigger_high_gain();
    106e:	10 92 7c 00 	sts	0x007C, r1
    1072:	83 ea       	ldi	r24, 0xA3	; 163
    1074:	80 93 7a 00 	sts	0x007A, r24
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    107e:	90 91 76 01 	lds	r25, 0x0176
    1082:	99 23       	and	r25, r25
    1084:	d1 f0       	breq	.+52     	; 0x10ba <__vector_23+0x1e4>
                        rx_timer_off();
    1086:	10 92 81 00 	sts	0x0081, r1
    108a:	10 92 85 00 	sts	0x0085, r1
    108e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1092:	80 93 62 01 	sts	0x0162, r24
                        rx_busy = 0;
    1096:	10 92 45 01 	sts	0x0145, r1
    109a:	5d cf       	rjmp	.-326    	; 0xf56 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    109c:	21 e0       	ldi	r18, 0x01	; 1
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	f9 01       	movw	r30, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <__vector_23+0x1d2>
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <__vector_23+0x1ce>
    10ac:	cf 01       	movw	r24, r30
    10ae:	90 91 76 01 	lds	r25, 0x0176
    10b2:	89 2b       	or	r24, r25
    10b4:	80 93 76 01 	sts	0x0176, r24
    10b8:	4e cf       	rjmp	.-356    	; 0xf56 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10ba:	10 92 62 01 	sts	0x0162, r1
                        rx_byteindex = 0;
    10be:	10 92 3c 01 	sts	0x013C, r1
    10c2:	49 cf       	rjmp	.-366    	; 0xf56 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10c4:	e0 91 05 01 	lds	r30, 0x0105
    10c8:	f0 91 06 01 	lds	r31, 0x0106
    10cc:	6d e3       	ldi	r22, 0x3D	; 61
    10ce:	71 e0       	ldi	r23, 0x01	; 1
    10d0:	88 e6       	ldi	r24, 0x68	; 104
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	09 95       	icall
    10d6:	3f cf       	rjmp	.-386    	; 0xf56 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10d8:	80 91 68 01 	lds	r24, 0x0168
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	09 f4       	brne	.+2      	; 0x10e2 <__vector_23+0x20c>
    10e0:	dd c0       	rjmp	.+442    	; 0x129c <__vector_23+0x3c6>
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <__vector_23+0x210>
    10e4:	ba c0       	rjmp	.+372    	; 0x125a <__vector_23+0x384>
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	09 f4       	brne	.+2      	; 0x10ec <__vector_23+0x216>
    10ea:	c6 c0       	rjmp	.+396    	; 0x1278 <__vector_23+0x3a2>
    10ec:	84 30       	cpi	r24, 0x04	; 4
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <__vector_23+0x21c>
    10f0:	b1 c0       	rjmp	.+354    	; 0x1254 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10f2:	80 91 0f 01 	lds	r24, 0x010F
    10f6:	90 91 6e 01 	lds	r25, 0x016E
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	09 f4       	brne	.+2      	; 0x1100 <__vector_23+0x22a>
    10fe:	e3 c0       	rjmp	.+454    	; 0x12c6 <__vector_23+0x3f0>
    1100:	80 91 6d 01 	lds	r24, 0x016D
                        prev_motion = MOVE_STOP;
    1104:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_STRAIGHT;
    1108:	23 e0       	ldi	r18, 0x03	; 3
    110a:	20 93 0f 01 	sts	0x010F, r18
                        kilo_straight_left = calibmsg->straight_left;
    110e:	80 93 79 01 	sts	0x0179, r24
                        kilo_straight_right = calibmsg->straight_right;
    1112:	90 93 7a 01 	sts	0x017A, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1116:	80 91 11 01 	lds	r24, 0x0111
    111a:	86 30       	cpi	r24, 0x06	; 6
    111c:	09 f4       	brne	.+2      	; 0x1120 <__vector_23+0x24a>
    111e:	1b cf       	rjmp	.-458    	; 0xf56 <__vector_23+0x80>
                motors_on();
    1120:	53 9a       	sbi	0x0a, 3	; 10
    1122:	23 9a       	sbi	0x04, 3	; 4
    1124:	10 92 b4 00 	sts	0x00B4, r1
    1128:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    112c:	86 e0       	ldi	r24, 0x06	; 6
    112e:	80 93 11 01 	sts	0x0111, r24
    1132:	11 cf       	rjmp	.-478    	; 0xf56 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1134:	80 91 11 01 	lds	r24, 0x0111
    1138:	86 30       	cpi	r24, 0x06	; 6
    113a:	99 f0       	breq	.+38     	; 0x1162 <__vector_23+0x28c>
                motors_on();
    113c:	53 9a       	sbi	0x0a, 3	; 10
    113e:	23 9a       	sbi	0x04, 3	; 4
    1140:	10 92 b4 00 	sts	0x00B4, r1
    1144:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1148:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    114a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    114c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    114e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1150:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1152:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1154:	10 92 0f 01 	sts	0x010F, r1
    1158:	10 92 10 01 	sts	0x0110, r1
                kilo_state = MOVING;
    115c:	86 e0       	ldi	r24, 0x06	; 6
    115e:	80 93 11 01 	sts	0x0111, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 01       	movw	r18, r24
    1168:	00 90 68 01 	lds	r0, 0x0168
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <__vector_23+0x29c>
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <__vector_23+0x298>
    1176:	80 91 77 01 	lds	r24, 0x0177
    117a:	90 91 78 01 	lds	r25, 0x0178
    117e:	82 23       	and	r24, r18
    1180:	93 23       	and	r25, r19
    1182:	89 2b       	or	r24, r25
    1184:	09 f0       	breq	.+2      	; 0x1188 <__vector_23+0x2b2>
    1186:	86 c0       	rjmp	.+268    	; 0x1294 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1188:	10 92 0f 01 	sts	0x010F, r1
    118c:	e4 ce       	rjmp	.-568    	; 0xf56 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 11 01 	sts	0x0111, r24
    1194:	e0 ce       	rjmp	.-576    	; 0xf56 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1196:	e0 e0       	ldi	r30, 0x00	; 0
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    119c:	80 91 6e 00 	lds	r24, 0x006E
    11a0:	8d 7f       	andi	r24, 0xFD	; 253
    11a2:	80 93 6e 00 	sts	0x006E, r24
    11a6:	16 bc       	out	0x26, r1	; 38
            bootload();
    11a8:	e0 e0       	ldi	r30, 0x00	; 0
    11aa:	f0 e7       	ldi	r31, 0x70	; 112
    11ac:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11ae:	10 92 11 01 	sts	0x0111, r1
    11b2:	d1 ce       	rjmp	.-606    	; 0xf56 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	80 93 11 01 	sts	0x0111, r24
    11ba:	cd ce       	rjmp	.-614    	; 0xf56 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11bc:	85 e0       	ldi	r24, 0x05	; 5
    11be:	80 93 11 01 	sts	0x0111, r24
    11c2:	c9 ce       	rjmp	.-622    	; 0xf56 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11c4:	80 91 11 01 	lds	r24, 0x0111
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	09 f4       	brne	.+2      	; 0x11ce <__vector_23+0x2f8>
    11cc:	c4 ce       	rjmp	.-632    	; 0xf56 <__vector_23+0x80>
    11ce:	80 91 11 01 	lds	r24, 0x0111
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <__vector_23+0x302>
    11d6:	bf ce       	rjmp	.-642    	; 0xf56 <__vector_23+0x80>
                motors_on();
    11d8:	53 9a       	sbi	0x0a, 3	; 10
    11da:	23 9a       	sbi	0x04, 3	; 4
    11dc:	10 92 b4 00 	sts	0x00B4, r1
    11e0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	80 93 11 01 	sts	0x0111, r24
    11ea:	b5 ce       	rjmp	.-662    	; 0xf56 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11ec:	80 91 11 01 	lds	r24, 0x0111
    11f0:	86 30       	cpi	r24, 0x06	; 6
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__vector_23+0x320>
    11f4:	b0 ce       	rjmp	.-672    	; 0xf56 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11f6:	60 91 77 01 	lds	r22, 0x0177
    11fa:	80 eb       	ldi	r24, 0xB0	; 176
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1202:	60 91 78 01 	lds	r22, 0x0178
    1206:	81 eb       	ldi	r24, 0xB1	; 177
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    120e:	60 91 7b 01 	lds	r22, 0x017B
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    121a:	60 91 67 01 	lds	r22, 0x0167
    121e:	89 e0       	ldi	r24, 0x09	; 9
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1226:	60 91 79 01 	lds	r22, 0x0179
    122a:	8c e0       	ldi	r24, 0x0C	; 12
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1232:	60 91 7a 01 	lds	r22, 0x017A
    1236:	84 e1       	ldi	r24, 0x14	; 20
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_write_byte>
                        motors_off();
    123e:	53 98       	cbi	0x0a, 3	; 10
    1240:	23 98       	cbi	0x04, 3	; 4
    1242:	10 92 b4 00 	sts	0x00B4, r1
    1246:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 11 01 	sts	0x0111, r24
    1250:	80 91 68 01 	lds	r24, 0x0168
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1254:	81 11       	cpse	r24, r1
    1256:	5f cf       	rjmp	.-322    	; 0x1116 <__vector_23+0x240>
    1258:	7e ce       	rjmp	.-772    	; 0xf56 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    125a:	88 23       	and	r24, r24
    125c:	39 f2       	breq	.-114    	; 0x11ec <__vector_23+0x316>
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1262:	80 91 69 01 	lds	r24, 0x0169
    1266:	90 91 6a 01 	lds	r25, 0x016A
    126a:	90 93 78 01 	sts	0x0178, r25
    126e:	80 93 77 01 	sts	0x0177, r24
                    cur_motion = MOVE_STOP;
    1272:	10 92 0f 01 	sts	0x010F, r1
    1276:	4f cf       	rjmp	.-354    	; 0x1116 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1278:	80 91 0f 01 	lds	r24, 0x010F
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	71 f1       	breq	.+92     	; 0x12dc <__vector_23+0x406>
    1280:	80 91 6c 01 	lds	r24, 0x016C
                        prev_motion = MOVE_STOP;
    1284:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_RIGHT;
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_right = calibmsg->turn_right;
    128e:	80 93 67 01 	sts	0x0167, r24
    1292:	41 cf       	rjmp	.-382    	; 0x1116 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 0f 01 	sts	0x010F, r24
    129a:	5d ce       	rjmp	.-838    	; 0xf56 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    129c:	80 91 0f 01 	lds	r24, 0x010F
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	51 f0       	breq	.+20     	; 0x12b8 <__vector_23+0x3e2>
    12a4:	80 91 6b 01 	lds	r24, 0x016B
                        prev_motion = MOVE_STOP;
    12a8:	10 92 10 01 	sts	0x0110, r1
                        cur_motion = MOVE_LEFT;
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	90 93 0f 01 	sts	0x010F, r25
                        kilo_turn_left = calibmsg->turn_left;
    12b2:	80 93 7b 01 	sts	0x017B, r24
    12b6:	2f cf       	rjmp	.-418    	; 0x1116 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12b8:	80 91 6b 01 	lds	r24, 0x016B
    12bc:	90 91 7b 01 	lds	r25, 0x017B
    12c0:	89 13       	cpse	r24, r25
    12c2:	f2 cf       	rjmp	.-28     	; 0x12a8 <__vector_23+0x3d2>
    12c4:	28 cf       	rjmp	.-432    	; 0x1116 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12c6:	80 91 7a 01 	lds	r24, 0x017A
    12ca:	98 13       	cpse	r25, r24
    12cc:	19 cf       	rjmp	.-462    	; 0x1100 <__vector_23+0x22a>
    12ce:	80 91 6d 01 	lds	r24, 0x016D
    12d2:	20 91 79 01 	lds	r18, 0x0179
    12d6:	82 13       	cpse	r24, r18
    12d8:	15 cf       	rjmp	.-470    	; 0x1104 <__vector_23+0x22e>
    12da:	1d cf       	rjmp	.-454    	; 0x1116 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12dc:	80 91 6c 01 	lds	r24, 0x016C
    12e0:	90 91 67 01 	lds	r25, 0x0167
    12e4:	89 13       	cpse	r24, r25
    12e6:	ce cf       	rjmp	.-100    	; 0x1284 <__vector_23+0x3ae>
    12e8:	16 cf       	rjmp	.-468    	; 0x1116 <__vector_23+0x240>

000012ea <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12ea:	fc 01       	movw	r30, r24
    12ec:	ac 01       	movw	r20, r24
    12ee:	46 5f       	subi	r20, 0xF6	; 246
    12f0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12f6:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12f8:	82 27       	eor	r24, r18
    12fa:	08 2e       	mov	r0, r24
    12fc:	82 95       	swap	r24
    12fe:	80 7f       	andi	r24, 0xF0	; 240
    1300:	80 25       	eor	r24, r0
    1302:	09 2e       	mov	r0, r25
    1304:	98 2f       	mov	r25, r24
    1306:	82 95       	swap	r24
    1308:	8f 70       	andi	r24, 0x0F	; 15
    130a:	08 26       	eor	r0, r24
    130c:	86 95       	lsr	r24
    130e:	98 27       	eor	r25, r24
    1310:	89 27       	eor	r24, r25
    1312:	88 0f       	add	r24, r24
    1314:	88 0f       	add	r24, r24
    1316:	88 0f       	add	r24, r24
    1318:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    131a:	e4 17       	cp	r30, r20
    131c:	f5 07       	cpc	r31, r21
    131e:	59 f7       	brne	.-42     	; 0x12f6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1320:	08 95       	ret

00001322 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1322:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1324:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1326:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1328:	20 91 3b 01 	lds	r18, 0x013B
    or tmpreg1, ddrreg
    132c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    132e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1330:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1332:	30 91 3b 01 	lds	r19, 0x013B
    1336:	20 30       	cpi	r18, 0x00	; 0
    1338:	29 f0       	breq	.+10     	; 0x1344 <message_send+0x22>
    133a:	00 00       	nop
    133c:	25 b1       	in	r18, 0x05	; 5
    133e:	23 2b       	or	r18, r19
    1340:	25 b9       	out	0x05, r18	; 5
    1342:	04 c0       	rjmp	.+8      	; 0x134c <message_send+0x2a>
    1344:	00 00       	nop
    1346:	00 00       	nop
    1348:	00 00       	nop
    134a:	00 c0       	rjmp	.+0      	; 0x134c <message_send+0x2a>
    134c:	00 00       	nop
    134e:	00 00       	nop
    1350:	00 00       	nop
    1352:	30 95       	com	r19
    1354:	25 b1       	in	r18, 0x05	; 5
    1356:	23 23       	and	r18, r19
    1358:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    135a:	2e ea       	ldi	r18, 0xAE	; 174
    135c:	2a 95       	dec	r18
    135e:	f1 f7       	brne	.-4      	; 0x135c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1360:	2b ee       	ldi	r18, 0xEB	; 235

00001362 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1362:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1364:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1366:	0a c0       	rjmp	.+20     	; 0x137c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1368:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    136a:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    136e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1370:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1372:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1374:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1376:	0f be       	out	0x3f, r0	; 63
    return 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	08 95       	ret

0000137c <nocollision>:
nocollision:
    nop
    137c:	00 00       	nop
    dec tmpreg1
    137e:	2a 95       	dec	r18
    brne checkcollision
    1380:	81 f7       	brne	.-32     	; 0x1362 <checkcollision>

    ldi tmpreg1, 0x01
    1382:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1384:	30 91 3b 01 	lds	r19, 0x013B
    1388:	20 30       	cpi	r18, 0x00	; 0
    138a:	29 f0       	breq	.+10     	; 0x1396 <nocollision+0x1a>
    138c:	00 00       	nop
    138e:	25 b1       	in	r18, 0x05	; 5
    1390:	23 2b       	or	r18, r19
    1392:	25 b9       	out	0x05, r18	; 5
    1394:	04 c0       	rjmp	.+8      	; 0x139e <nocollision+0x22>
    1396:	00 00       	nop
    1398:	00 00       	nop
    139a:	00 00       	nop
    139c:	00 c0       	rjmp	.+0      	; 0x139e <nocollision+0x22>
    139e:	00 00       	nop
    13a0:	00 00       	nop
    13a2:	00 00       	nop
    13a4:	30 95       	com	r19
    13a6:	25 b1       	in	r18, 0x05	; 5
    13a8:	23 23       	and	r18, r19
    13aa:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    13ac:	00 00       	nop
    13ae:	24 e5       	ldi	r18, 0x54	; 84
    13b0:	2a 95       	dec	r18
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13b4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13b6:	8c e0       	ldi	r24, 0x0C	; 12

000013b8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13b8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13bc:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13be:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    13c0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    13c2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13c4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13c8:	50 e0       	ldi	r21, 0x00	; 0

000013ca <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13ca:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13cc:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13ce:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13d0:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13d2:	30 91 3b 01 	lds	r19, 0x013B
    13d6:	20 30       	cpi	r18, 0x00	; 0
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <sendbit+0x1a>
    13da:	00 00       	nop
    13dc:	25 b1       	in	r18, 0x05	; 5
    13de:	23 2b       	or	r18, r19
    13e0:	25 b9       	out	0x05, r18	; 5
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <sendbit+0x22>
    13e4:	00 00       	nop
    13e6:	00 00       	nop
    13e8:	00 00       	nop
    13ea:	00 c0       	rjmp	.+0      	; 0x13ec <sendbit+0x22>
    13ec:	00 00       	nop
    13ee:	00 00       	nop
    13f0:	00 00       	nop
    13f2:	30 95       	com	r19
    13f4:	25 b1       	in	r18, 0x05	; 5
    13f6:	23 23       	and	r18, r19
    13f8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    13fa:	00 00       	nop
    13fc:	21 e5       	ldi	r18, 0x51	; 81
    13fe:	2a 95       	dec	r18
    1400:	f1 f7       	brne	.-4      	; 0x13fe <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1402:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1404:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1406:	9a 95       	dec	r25
    brne sendbit
    1408:	01 f7       	brne	.-64     	; 0x13ca <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    140a:	8a 95       	dec	r24
    brne sendbyte
    140c:	a9 f6       	brne	.-86     	; 0x13b8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    140e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1410:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1412:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1414:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1416:	30 91 3b 01 	lds	r19, 0x013B
    com tmpreg2
    141a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    141c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    141e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1420:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1422:	0f be       	out	0x3f, r0	; 63
    return 1
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	08 95       	ret

00001428 <main>:
    message_sent = 1;
}

int main()
{
    kilo_init();
    1428:	0e 94 a5 00 	call	0x14a	; 0x14a <kilo_init>
    // Register the message_tx callback function.
    kilo_message_tx = message_tx;
    142c:	81 e7       	ldi	r24, 0x71	; 113
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 04 01 	sts	0x0104, r25
    1434:	80 93 03 01 	sts	0x0103, r24
    // Register the message_tx_success callback function.
    kilo_message_tx_success = message_tx_success;
    1438:	84 e7       	ldi	r24, 0x74	; 116
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	90 93 02 01 	sts	0x0102, r25
    1440:	80 93 01 01 	sts	0x0101, r24
    kilo_start(setup, loop);
    1444:	6b e8       	ldi	r22, 0x8B	; 139
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	8b e7       	ldi	r24, 0x7B	; 123
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 a1 01 	call	0x342	; 0x342 <kilo_start>
    
    return 0;
}
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	08 95       	ret

00001456 <__divmodhi4>:
    1456:	97 fb       	bst	r25, 7
    1458:	07 2e       	mov	r0, r23
    145a:	16 f4       	brtc	.+4      	; 0x1460 <__divmodhi4+0xa>
    145c:	00 94       	com	r0
    145e:	07 d0       	rcall	.+14     	; 0x146e <__divmodhi4_neg1>
    1460:	77 fd       	sbrc	r23, 7
    1462:	09 d0       	rcall	.+18     	; 0x1476 <__divmodhi4_neg2>
    1464:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__udivmodhi4>
    1468:	07 fc       	sbrc	r0, 7
    146a:	05 d0       	rcall	.+10     	; 0x1476 <__divmodhi4_neg2>
    146c:	3e f4       	brtc	.+14     	; 0x147c <__divmodhi4_exit>

0000146e <__divmodhi4_neg1>:
    146e:	90 95       	com	r25
    1470:	81 95       	neg	r24
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	08 95       	ret

00001476 <__divmodhi4_neg2>:
    1476:	70 95       	com	r23
    1478:	61 95       	neg	r22
    147a:	7f 4f       	sbci	r23, 0xFF	; 255

0000147c <__divmodhi4_exit>:
    147c:	08 95       	ret

0000147e <__tablejump2__>:
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	05 90       	lpm	r0, Z+
    1484:	f4 91       	lpm	r31, Z
    1486:	e0 2d       	mov	r30, r0
    1488:	09 94       	ijmp

0000148a <__umulhisi3>:
    148a:	a2 9f       	mul	r26, r18
    148c:	b0 01       	movw	r22, r0
    148e:	b3 9f       	mul	r27, r19
    1490:	c0 01       	movw	r24, r0
    1492:	a3 9f       	mul	r26, r19
    1494:	70 0d       	add	r23, r0
    1496:	81 1d       	adc	r24, r1
    1498:	11 24       	eor	r1, r1
    149a:	91 1d       	adc	r25, r1
    149c:	b2 9f       	mul	r27, r18
    149e:	70 0d       	add	r23, r0
    14a0:	81 1d       	adc	r24, r1
    14a2:	11 24       	eor	r1, r1
    14a4:	91 1d       	adc	r25, r1
    14a6:	08 95       	ret

000014a8 <__udivmodhi4>:
    14a8:	aa 1b       	sub	r26, r26
    14aa:	bb 1b       	sub	r27, r27
    14ac:	51 e1       	ldi	r21, 0x11	; 17
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <__udivmodhi4_ep>

000014b0 <__udivmodhi4_loop>:
    14b0:	aa 1f       	adc	r26, r26
    14b2:	bb 1f       	adc	r27, r27
    14b4:	a6 17       	cp	r26, r22
    14b6:	b7 07       	cpc	r27, r23
    14b8:	10 f0       	brcs	.+4      	; 0x14be <__udivmodhi4_ep>
    14ba:	a6 1b       	sub	r26, r22
    14bc:	b7 0b       	sbc	r27, r23

000014be <__udivmodhi4_ep>:
    14be:	88 1f       	adc	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	5a 95       	dec	r21
    14c4:	a9 f7       	brne	.-22     	; 0x14b0 <__udivmodhi4_loop>
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	08 95       	ret

000014d0 <__subsf3>:
    14d0:	50 58       	subi	r21, 0x80	; 128

000014d2 <__addsf3>:
    14d2:	bb 27       	eor	r27, r27
    14d4:	aa 27       	eor	r26, r26
    14d6:	0e 94 80 0a 	call	0x1500	; 0x1500 <__addsf3x>
    14da:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_round>
    14de:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__fp_pscA>
    14e2:	38 f0       	brcs	.+14     	; 0x14f2 <__addsf3+0x20>
    14e4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_pscB>
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__addsf3+0x20>
    14ea:	39 f4       	brne	.+14     	; 0x14fa <__addsf3+0x28>
    14ec:	9f 3f       	cpi	r25, 0xFF	; 255
    14ee:	19 f4       	brne	.+6      	; 0x14f6 <__addsf3+0x24>
    14f0:	26 f4       	brtc	.+8      	; 0x14fa <__addsf3+0x28>
    14f2:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_nan>
    14f6:	0e f4       	brtc	.+2      	; 0x14fa <__addsf3+0x28>
    14f8:	e0 95       	com	r30
    14fa:	e7 fb       	bst	r30, 7
    14fc:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_inf>

00001500 <__addsf3x>:
    1500:	e9 2f       	mov	r30, r25
    1502:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_split3>
    1506:	58 f3       	brcs	.-42     	; 0x14de <__addsf3+0xc>
    1508:	ba 17       	cp	r27, r26
    150a:	62 07       	cpc	r22, r18
    150c:	73 07       	cpc	r23, r19
    150e:	84 07       	cpc	r24, r20
    1510:	95 07       	cpc	r25, r21
    1512:	20 f0       	brcs	.+8      	; 0x151c <__addsf3x+0x1c>
    1514:	79 f4       	brne	.+30     	; 0x1534 <__addsf3x+0x34>
    1516:	a6 f5       	brtc	.+104    	; 0x1580 <__addsf3x+0x80>
    1518:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_zero>
    151c:	0e f4       	brtc	.+2      	; 0x1520 <__addsf3x+0x20>
    151e:	e0 95       	com	r30
    1520:	0b 2e       	mov	r0, r27
    1522:	ba 2f       	mov	r27, r26
    1524:	a0 2d       	mov	r26, r0
    1526:	0b 01       	movw	r0, r22
    1528:	b9 01       	movw	r22, r18
    152a:	90 01       	movw	r18, r0
    152c:	0c 01       	movw	r0, r24
    152e:	ca 01       	movw	r24, r20
    1530:	a0 01       	movw	r20, r0
    1532:	11 24       	eor	r1, r1
    1534:	ff 27       	eor	r31, r31
    1536:	59 1b       	sub	r21, r25
    1538:	99 f0       	breq	.+38     	; 0x1560 <__addsf3x+0x60>
    153a:	59 3f       	cpi	r21, 0xF9	; 249
    153c:	50 f4       	brcc	.+20     	; 0x1552 <__addsf3x+0x52>
    153e:	50 3e       	cpi	r21, 0xE0	; 224
    1540:	68 f1       	brcs	.+90     	; 0x159c <__addsf3x+0x9c>
    1542:	1a 16       	cp	r1, r26
    1544:	f0 40       	sbci	r31, 0x00	; 0
    1546:	a2 2f       	mov	r26, r18
    1548:	23 2f       	mov	r18, r19
    154a:	34 2f       	mov	r19, r20
    154c:	44 27       	eor	r20, r20
    154e:	58 5f       	subi	r21, 0xF8	; 248
    1550:	f3 cf       	rjmp	.-26     	; 0x1538 <__addsf3x+0x38>
    1552:	46 95       	lsr	r20
    1554:	37 95       	ror	r19
    1556:	27 95       	ror	r18
    1558:	a7 95       	ror	r26
    155a:	f0 40       	sbci	r31, 0x00	; 0
    155c:	53 95       	inc	r21
    155e:	c9 f7       	brne	.-14     	; 0x1552 <__addsf3x+0x52>
    1560:	7e f4       	brtc	.+30     	; 0x1580 <__addsf3x+0x80>
    1562:	1f 16       	cp	r1, r31
    1564:	ba 0b       	sbc	r27, r26
    1566:	62 0b       	sbc	r22, r18
    1568:	73 0b       	sbc	r23, r19
    156a:	84 0b       	sbc	r24, r20
    156c:	ba f0       	brmi	.+46     	; 0x159c <__addsf3x+0x9c>
    156e:	91 50       	subi	r25, 0x01	; 1
    1570:	a1 f0       	breq	.+40     	; 0x159a <__addsf3x+0x9a>
    1572:	ff 0f       	add	r31, r31
    1574:	bb 1f       	adc	r27, r27
    1576:	66 1f       	adc	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	c2 f7       	brpl	.-16     	; 0x156e <__addsf3x+0x6e>
    157e:	0e c0       	rjmp	.+28     	; 0x159c <__addsf3x+0x9c>
    1580:	ba 0f       	add	r27, r26
    1582:	62 1f       	adc	r22, r18
    1584:	73 1f       	adc	r23, r19
    1586:	84 1f       	adc	r24, r20
    1588:	48 f4       	brcc	.+18     	; 0x159c <__addsf3x+0x9c>
    158a:	87 95       	ror	r24
    158c:	77 95       	ror	r23
    158e:	67 95       	ror	r22
    1590:	b7 95       	ror	r27
    1592:	f7 95       	ror	r31
    1594:	9e 3f       	cpi	r25, 0xFE	; 254
    1596:	08 f0       	brcs	.+2      	; 0x159a <__addsf3x+0x9a>
    1598:	b0 cf       	rjmp	.-160    	; 0x14fa <__addsf3+0x28>
    159a:	93 95       	inc	r25
    159c:	88 0f       	add	r24, r24
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <__addsf3x+0xa2>
    15a0:	99 27       	eor	r25, r25
    15a2:	ee 0f       	add	r30, r30
    15a4:	97 95       	ror	r25
    15a6:	87 95       	ror	r24
    15a8:	08 95       	ret

000015aa <__divsf3>:
    15aa:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__divsf3x>
    15ae:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_round>
    15b2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_pscB>
    15b6:	58 f0       	brcs	.+22     	; 0x15ce <__divsf3+0x24>
    15b8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__fp_pscA>
    15bc:	40 f0       	brcs	.+16     	; 0x15ce <__divsf3+0x24>
    15be:	29 f4       	brne	.+10     	; 0x15ca <__divsf3+0x20>
    15c0:	5f 3f       	cpi	r21, 0xFF	; 255
    15c2:	29 f0       	breq	.+10     	; 0x15ce <__divsf3+0x24>
    15c4:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_inf>
    15c8:	51 11       	cpse	r21, r1
    15ca:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_szero>
    15ce:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_nan>

000015d2 <__divsf3x>:
    15d2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_split3>
    15d6:	68 f3       	brcs	.-38     	; 0x15b2 <__divsf3+0x8>

000015d8 <__divsf3_pse>:
    15d8:	99 23       	and	r25, r25
    15da:	b1 f3       	breq	.-20     	; 0x15c8 <__divsf3+0x1e>
    15dc:	55 23       	and	r21, r21
    15de:	91 f3       	breq	.-28     	; 0x15c4 <__divsf3+0x1a>
    15e0:	95 1b       	sub	r25, r21
    15e2:	55 0b       	sbc	r21, r21
    15e4:	bb 27       	eor	r27, r27
    15e6:	aa 27       	eor	r26, r26
    15e8:	62 17       	cp	r22, r18
    15ea:	73 07       	cpc	r23, r19
    15ec:	84 07       	cpc	r24, r20
    15ee:	38 f0       	brcs	.+14     	; 0x15fe <__divsf3_pse+0x26>
    15f0:	9f 5f       	subi	r25, 0xFF	; 255
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255
    15f4:	22 0f       	add	r18, r18
    15f6:	33 1f       	adc	r19, r19
    15f8:	44 1f       	adc	r20, r20
    15fa:	aa 1f       	adc	r26, r26
    15fc:	a9 f3       	breq	.-22     	; 0x15e8 <__divsf3_pse+0x10>
    15fe:	35 d0       	rcall	.+106    	; 0x166a <__divsf3_pse+0x92>
    1600:	0e 2e       	mov	r0, r30
    1602:	3a f0       	brmi	.+14     	; 0x1612 <__divsf3_pse+0x3a>
    1604:	e0 e8       	ldi	r30, 0x80	; 128
    1606:	32 d0       	rcall	.+100    	; 0x166c <__divsf3_pse+0x94>
    1608:	91 50       	subi	r25, 0x01	; 1
    160a:	50 40       	sbci	r21, 0x00	; 0
    160c:	e6 95       	lsr	r30
    160e:	00 1c       	adc	r0, r0
    1610:	ca f7       	brpl	.-14     	; 0x1604 <__divsf3_pse+0x2c>
    1612:	2b d0       	rcall	.+86     	; 0x166a <__divsf3_pse+0x92>
    1614:	fe 2f       	mov	r31, r30
    1616:	29 d0       	rcall	.+82     	; 0x166a <__divsf3_pse+0x92>
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	bb 1f       	adc	r27, r27
    1620:	26 17       	cp	r18, r22
    1622:	37 07       	cpc	r19, r23
    1624:	48 07       	cpc	r20, r24
    1626:	ab 07       	cpc	r26, r27
    1628:	b0 e8       	ldi	r27, 0x80	; 128
    162a:	09 f0       	breq	.+2      	; 0x162e <__divsf3_pse+0x56>
    162c:	bb 0b       	sbc	r27, r27
    162e:	80 2d       	mov	r24, r0
    1630:	bf 01       	movw	r22, r30
    1632:	ff 27       	eor	r31, r31
    1634:	93 58       	subi	r25, 0x83	; 131
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	3a f0       	brmi	.+14     	; 0x1648 <__divsf3_pse+0x70>
    163a:	9e 3f       	cpi	r25, 0xFE	; 254
    163c:	51 05       	cpc	r21, r1
    163e:	78 f0       	brcs	.+30     	; 0x165e <__divsf3_pse+0x86>
    1640:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_inf>
    1644:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_szero>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	e4 f3       	brlt	.-8      	; 0x1644 <__divsf3_pse+0x6c>
    164c:	98 3e       	cpi	r25, 0xE8	; 232
    164e:	d4 f3       	brlt	.-12     	; 0x1644 <__divsf3_pse+0x6c>
    1650:	86 95       	lsr	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	9f 5f       	subi	r25, 0xFF	; 255
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__divsf3_pse+0x78>
    165e:	88 0f       	add	r24, r24
    1660:	91 1d       	adc	r25, r1
    1662:	96 95       	lsr	r25
    1664:	87 95       	ror	r24
    1666:	97 f9       	bld	r25, 7
    1668:	08 95       	ret
    166a:	e1 e0       	ldi	r30, 0x01	; 1
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	bb 1f       	adc	r27, r27
    1674:	62 17       	cp	r22, r18
    1676:	73 07       	cpc	r23, r19
    1678:	84 07       	cpc	r24, r20
    167a:	ba 07       	cpc	r27, r26
    167c:	20 f0       	brcs	.+8      	; 0x1686 <__divsf3_pse+0xae>
    167e:	62 1b       	sub	r22, r18
    1680:	73 0b       	sbc	r23, r19
    1682:	84 0b       	sbc	r24, r20
    1684:	ba 0b       	sbc	r27, r26
    1686:	ee 1f       	adc	r30, r30
    1688:	88 f7       	brcc	.-30     	; 0x166c <__divsf3_pse+0x94>
    168a:	e0 95       	com	r30
    168c:	08 95       	ret

0000168e <__fixsfsi>:
    168e:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fixunssfsi>
    1692:	68 94       	set
    1694:	b1 11       	cpse	r27, r1
    1696:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_szero>
    169a:	08 95       	ret

0000169c <__fixunssfsi>:
    169c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_splitA>
    16a0:	88 f0       	brcs	.+34     	; 0x16c4 <__fixunssfsi+0x28>
    16a2:	9f 57       	subi	r25, 0x7F	; 127
    16a4:	98 f0       	brcs	.+38     	; 0x16cc <__fixunssfsi+0x30>
    16a6:	b9 2f       	mov	r27, r25
    16a8:	99 27       	eor	r25, r25
    16aa:	b7 51       	subi	r27, 0x17	; 23
    16ac:	b0 f0       	brcs	.+44     	; 0x16da <__fixunssfsi+0x3e>
    16ae:	e1 f0       	breq	.+56     	; 0x16e8 <__fixunssfsi+0x4c>
    16b0:	66 0f       	add	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	1a f0       	brmi	.+6      	; 0x16c0 <__fixunssfsi+0x24>
    16ba:	ba 95       	dec	r27
    16bc:	c9 f7       	brne	.-14     	; 0x16b0 <__fixunssfsi+0x14>
    16be:	14 c0       	rjmp	.+40     	; 0x16e8 <__fixunssfsi+0x4c>
    16c0:	b1 30       	cpi	r27, 0x01	; 1
    16c2:	91 f0       	breq	.+36     	; 0x16e8 <__fixunssfsi+0x4c>
    16c4:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fp_zero>
    16c8:	b1 e0       	ldi	r27, 0x01	; 1
    16ca:	08 95       	ret
    16cc:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_zero>
    16d0:	67 2f       	mov	r22, r23
    16d2:	78 2f       	mov	r23, r24
    16d4:	88 27       	eor	r24, r24
    16d6:	b8 5f       	subi	r27, 0xF8	; 248
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <__fixunssfsi+0x4c>
    16da:	b9 3f       	cpi	r27, 0xF9	; 249
    16dc:	cc f3       	brlt	.-14     	; 0x16d0 <__fixunssfsi+0x34>
    16de:	86 95       	lsr	r24
    16e0:	77 95       	ror	r23
    16e2:	67 95       	ror	r22
    16e4:	b3 95       	inc	r27
    16e6:	d9 f7       	brne	.-10     	; 0x16de <__fixunssfsi+0x42>
    16e8:	3e f4       	brtc	.+14     	; 0x16f8 <__fixunssfsi+0x5c>
    16ea:	90 95       	com	r25
    16ec:	80 95       	com	r24
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	08 95       	ret

000016fa <__floatunsisf>:
    16fa:	e8 94       	clt
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <__floatsisf+0x12>

000016fe <__floatsisf>:
    16fe:	97 fb       	bst	r25, 7
    1700:	3e f4       	brtc	.+14     	; 0x1710 <__floatsisf+0x12>
    1702:	90 95       	com	r25
    1704:	80 95       	com	r24
    1706:	70 95       	com	r23
    1708:	61 95       	neg	r22
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	99 23       	and	r25, r25
    1712:	a9 f0       	breq	.+42     	; 0x173e <__floatsisf+0x40>
    1714:	f9 2f       	mov	r31, r25
    1716:	96 e9       	ldi	r25, 0x96	; 150
    1718:	bb 27       	eor	r27, r27
    171a:	93 95       	inc	r25
    171c:	f6 95       	lsr	r31
    171e:	87 95       	ror	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	b7 95       	ror	r27
    1726:	f1 11       	cpse	r31, r1
    1728:	f8 cf       	rjmp	.-16     	; 0x171a <__floatsisf+0x1c>
    172a:	fa f4       	brpl	.+62     	; 0x176a <__floatsisf+0x6c>
    172c:	bb 0f       	add	r27, r27
    172e:	11 f4       	brne	.+4      	; 0x1734 <__floatsisf+0x36>
    1730:	60 ff       	sbrs	r22, 0
    1732:	1b c0       	rjmp	.+54     	; 0x176a <__floatsisf+0x6c>
    1734:	6f 5f       	subi	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	16 c0       	rjmp	.+44     	; 0x176a <__floatsisf+0x6c>
    173e:	88 23       	and	r24, r24
    1740:	11 f0       	breq	.+4      	; 0x1746 <__floatsisf+0x48>
    1742:	96 e9       	ldi	r25, 0x96	; 150
    1744:	11 c0       	rjmp	.+34     	; 0x1768 <__floatsisf+0x6a>
    1746:	77 23       	and	r23, r23
    1748:	21 f0       	breq	.+8      	; 0x1752 <__floatsisf+0x54>
    174a:	9e e8       	ldi	r25, 0x8E	; 142
    174c:	87 2f       	mov	r24, r23
    174e:	76 2f       	mov	r23, r22
    1750:	05 c0       	rjmp	.+10     	; 0x175c <__floatsisf+0x5e>
    1752:	66 23       	and	r22, r22
    1754:	71 f0       	breq	.+28     	; 0x1772 <__floatsisf+0x74>
    1756:	96 e8       	ldi	r25, 0x86	; 134
    1758:	86 2f       	mov	r24, r22
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	2a f0       	brmi	.+10     	; 0x176a <__floatsisf+0x6c>
    1760:	9a 95       	dec	r25
    1762:	66 0f       	add	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	da f7       	brpl	.-10     	; 0x1760 <__floatsisf+0x62>
    176a:	88 0f       	add	r24, r24
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	97 f9       	bld	r25, 7
    1772:	08 95       	ret

00001774 <__fp_inf>:
    1774:	97 f9       	bld	r25, 7
    1776:	9f 67       	ori	r25, 0x7F	; 127
    1778:	80 e8       	ldi	r24, 0x80	; 128
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	08 95       	ret

00001780 <__fp_nan>:
    1780:	9f ef       	ldi	r25, 0xFF	; 255
    1782:	80 ec       	ldi	r24, 0xC0	; 192
    1784:	08 95       	ret

00001786 <__fp_pscA>:
    1786:	00 24       	eor	r0, r0
    1788:	0a 94       	dec	r0
    178a:	16 16       	cp	r1, r22
    178c:	17 06       	cpc	r1, r23
    178e:	18 06       	cpc	r1, r24
    1790:	09 06       	cpc	r0, r25
    1792:	08 95       	ret

00001794 <__fp_pscB>:
    1794:	00 24       	eor	r0, r0
    1796:	0a 94       	dec	r0
    1798:	12 16       	cp	r1, r18
    179a:	13 06       	cpc	r1, r19
    179c:	14 06       	cpc	r1, r20
    179e:	05 06       	cpc	r0, r21
    17a0:	08 95       	ret

000017a2 <__fp_round>:
    17a2:	09 2e       	mov	r0, r25
    17a4:	03 94       	inc	r0
    17a6:	00 0c       	add	r0, r0
    17a8:	11 f4       	brne	.+4      	; 0x17ae <__fp_round+0xc>
    17aa:	88 23       	and	r24, r24
    17ac:	52 f0       	brmi	.+20     	; 0x17c2 <__fp_round+0x20>
    17ae:	bb 0f       	add	r27, r27
    17b0:	40 f4       	brcc	.+16     	; 0x17c2 <__fp_round+0x20>
    17b2:	bf 2b       	or	r27, r31
    17b4:	11 f4       	brne	.+4      	; 0x17ba <__fp_round+0x18>
    17b6:	60 ff       	sbrs	r22, 0
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <__fp_round+0x20>
    17ba:	6f 5f       	subi	r22, 0xFF	; 255
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	8f 4f       	sbci	r24, 0xFF	; 255
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	08 95       	ret

000017c4 <__fp_split3>:
    17c4:	57 fd       	sbrc	r21, 7
    17c6:	90 58       	subi	r25, 0x80	; 128
    17c8:	44 0f       	add	r20, r20
    17ca:	55 1f       	adc	r21, r21
    17cc:	59 f0       	breq	.+22     	; 0x17e4 <__fp_splitA+0x10>
    17ce:	5f 3f       	cpi	r21, 0xFF	; 255
    17d0:	71 f0       	breq	.+28     	; 0x17ee <__fp_splitA+0x1a>
    17d2:	47 95       	ror	r20

000017d4 <__fp_splitA>:
    17d4:	88 0f       	add	r24, r24
    17d6:	97 fb       	bst	r25, 7
    17d8:	99 1f       	adc	r25, r25
    17da:	61 f0       	breq	.+24     	; 0x17f4 <__fp_splitA+0x20>
    17dc:	9f 3f       	cpi	r25, 0xFF	; 255
    17de:	79 f0       	breq	.+30     	; 0x17fe <__fp_splitA+0x2a>
    17e0:	87 95       	ror	r24
    17e2:	08 95       	ret
    17e4:	12 16       	cp	r1, r18
    17e6:	13 06       	cpc	r1, r19
    17e8:	14 06       	cpc	r1, r20
    17ea:	55 1f       	adc	r21, r21
    17ec:	f2 cf       	rjmp	.-28     	; 0x17d2 <__fp_split3+0xe>
    17ee:	46 95       	lsr	r20
    17f0:	f1 df       	rcall	.-30     	; 0x17d4 <__fp_splitA>
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <__fp_splitA+0x30>
    17f4:	16 16       	cp	r1, r22
    17f6:	17 06       	cpc	r1, r23
    17f8:	18 06       	cpc	r1, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	f1 cf       	rjmp	.-30     	; 0x17e0 <__fp_splitA+0xc>
    17fe:	86 95       	lsr	r24
    1800:	71 05       	cpc	r23, r1
    1802:	61 05       	cpc	r22, r1
    1804:	08 94       	sec
    1806:	08 95       	ret

00001808 <__fp_zero>:
    1808:	e8 94       	clt

0000180a <__fp_szero>:
    180a:	bb 27       	eor	r27, r27
    180c:	66 27       	eor	r22, r22
    180e:	77 27       	eor	r23, r23
    1810:	cb 01       	movw	r24, r22
    1812:	97 f9       	bld	r25, 7
    1814:	08 95       	ret

00001816 <__mulsf3>:
    1816:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3x>
    181a:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_round>
    181e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__fp_pscA>
    1822:	38 f0       	brcs	.+14     	; 0x1832 <__mulsf3+0x1c>
    1824:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_pscB>
    1828:	20 f0       	brcs	.+8      	; 0x1832 <__mulsf3+0x1c>
    182a:	95 23       	and	r25, r21
    182c:	11 f0       	breq	.+4      	; 0x1832 <__mulsf3+0x1c>
    182e:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_inf>
    1832:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_nan>
    1836:	11 24       	eor	r1, r1
    1838:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_szero>

0000183c <__mulsf3x>:
    183c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__fp_split3>
    1840:	70 f3       	brcs	.-36     	; 0x181e <__mulsf3+0x8>

00001842 <__mulsf3_pse>:
    1842:	95 9f       	mul	r25, r21
    1844:	c1 f3       	breq	.-16     	; 0x1836 <__mulsf3+0x20>
    1846:	95 0f       	add	r25, r21
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	55 1f       	adc	r21, r21
    184c:	62 9f       	mul	r22, r18
    184e:	f0 01       	movw	r30, r0
    1850:	72 9f       	mul	r23, r18
    1852:	bb 27       	eor	r27, r27
    1854:	f0 0d       	add	r31, r0
    1856:	b1 1d       	adc	r27, r1
    1858:	63 9f       	mul	r22, r19
    185a:	aa 27       	eor	r26, r26
    185c:	f0 0d       	add	r31, r0
    185e:	b1 1d       	adc	r27, r1
    1860:	aa 1f       	adc	r26, r26
    1862:	64 9f       	mul	r22, r20
    1864:	66 27       	eor	r22, r22
    1866:	b0 0d       	add	r27, r0
    1868:	a1 1d       	adc	r26, r1
    186a:	66 1f       	adc	r22, r22
    186c:	82 9f       	mul	r24, r18
    186e:	22 27       	eor	r18, r18
    1870:	b0 0d       	add	r27, r0
    1872:	a1 1d       	adc	r26, r1
    1874:	62 1f       	adc	r22, r18
    1876:	73 9f       	mul	r23, r19
    1878:	b0 0d       	add	r27, r0
    187a:	a1 1d       	adc	r26, r1
    187c:	62 1f       	adc	r22, r18
    187e:	83 9f       	mul	r24, r19
    1880:	a0 0d       	add	r26, r0
    1882:	61 1d       	adc	r22, r1
    1884:	22 1f       	adc	r18, r18
    1886:	74 9f       	mul	r23, r20
    1888:	33 27       	eor	r19, r19
    188a:	a0 0d       	add	r26, r0
    188c:	61 1d       	adc	r22, r1
    188e:	23 1f       	adc	r18, r19
    1890:	84 9f       	mul	r24, r20
    1892:	60 0d       	add	r22, r0
    1894:	21 1d       	adc	r18, r1
    1896:	82 2f       	mov	r24, r18
    1898:	76 2f       	mov	r23, r22
    189a:	6a 2f       	mov	r22, r26
    189c:	11 24       	eor	r1, r1
    189e:	9f 57       	subi	r25, 0x7F	; 127
    18a0:	50 40       	sbci	r21, 0x00	; 0
    18a2:	9a f0       	brmi	.+38     	; 0x18ca <__mulsf3_pse+0x88>
    18a4:	f1 f0       	breq	.+60     	; 0x18e2 <__mulsf3_pse+0xa0>
    18a6:	88 23       	and	r24, r24
    18a8:	4a f0       	brmi	.+18     	; 0x18bc <__mulsf3_pse+0x7a>
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	bb 1f       	adc	r27, r27
    18b0:	66 1f       	adc	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	88 1f       	adc	r24, r24
    18b6:	91 50       	subi	r25, 0x01	; 1
    18b8:	50 40       	sbci	r21, 0x00	; 0
    18ba:	a9 f7       	brne	.-22     	; 0x18a6 <__mulsf3_pse+0x64>
    18bc:	9e 3f       	cpi	r25, 0xFE	; 254
    18be:	51 05       	cpc	r21, r1
    18c0:	80 f0       	brcs	.+32     	; 0x18e2 <__mulsf3_pse+0xa0>
    18c2:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_inf>
    18c6:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__fp_szero>
    18ca:	5f 3f       	cpi	r21, 0xFF	; 255
    18cc:	e4 f3       	brlt	.-8      	; 0x18c6 <__mulsf3_pse+0x84>
    18ce:	98 3e       	cpi	r25, 0xE8	; 232
    18d0:	d4 f3       	brlt	.-12     	; 0x18c6 <__mulsf3_pse+0x84>
    18d2:	86 95       	lsr	r24
    18d4:	77 95       	ror	r23
    18d6:	67 95       	ror	r22
    18d8:	b7 95       	ror	r27
    18da:	f7 95       	ror	r31
    18dc:	e7 95       	ror	r30
    18de:	9f 5f       	subi	r25, 0xFF	; 255
    18e0:	c1 f7       	brne	.-16     	; 0x18d2 <__mulsf3_pse+0x90>
    18e2:	fe 2b       	or	r31, r30
    18e4:	88 0f       	add	r24, r24
    18e6:	91 1d       	adc	r25, r1
    18e8:	96 95       	lsr	r25
    18ea:	87 95       	ror	r24
    18ec:	97 f9       	bld	r25, 7
    18ee:	08 95       	ret

000018f0 <do_rand>:
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
    1906:	68 81       	ld	r22, Y
    1908:	79 81       	ldd	r23, Y+1	; 0x01
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	9b 81       	ldd	r25, Y+3	; 0x03
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	81 05       	cpc	r24, r1
    1914:	91 05       	cpc	r25, r1
    1916:	21 f4       	brne	.+8      	; 0x1920 <do_rand+0x30>
    1918:	64 e2       	ldi	r22, 0x24	; 36
    191a:	79 ed       	ldi	r23, 0xD9	; 217
    191c:	8b e5       	ldi	r24, 0x5B	; 91
    191e:	97 e0       	ldi	r25, 0x07	; 7
    1920:	2d e1       	ldi	r18, 0x1D	; 29
    1922:	33 ef       	ldi	r19, 0xF3	; 243
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divmodsi4>
    192c:	49 01       	movw	r8, r18
    192e:	5a 01       	movw	r10, r20
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	a7 ea       	ldi	r26, 0xA7	; 167
    1936:	b1 e4       	ldi	r27, 0x41	; 65
    1938:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__muluhisi3>
    193c:	6b 01       	movw	r12, r22
    193e:	7c 01       	movw	r14, r24
    1940:	ac ee       	ldi	r26, 0xEC	; 236
    1942:	b4 ef       	ldi	r27, 0xF4	; 244
    1944:	a5 01       	movw	r20, r10
    1946:	94 01       	movw	r18, r8
    1948:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulohisi3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8c 0d       	add	r24, r12
    1952:	9d 1d       	adc	r25, r13
    1954:	ae 1d       	adc	r26, r14
    1956:	bf 1d       	adc	r27, r15
    1958:	b7 ff       	sbrs	r27, 7
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <do_rand+0x72>
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	a1 09       	sbc	r26, r1
    1960:	b0 48       	sbci	r27, 0x80	; 128
    1962:	88 83       	st	Y, r24
    1964:	99 83       	std	Y+1, r25	; 0x01
    1966:	aa 83       	std	Y+2, r26	; 0x02
    1968:	bb 83       	std	Y+3, r27	; 0x03
    196a:	9f 77       	andi	r25, 0x7F	; 127
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	9f 90       	pop	r9
    197e:	8f 90       	pop	r8
    1980:	08 95       	ret

00001982 <rand_r>:
    1982:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <do_rand>
    1986:	08 95       	ret

00001988 <rand>:
    1988:	87 e0       	ldi	r24, 0x07	; 7
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <do_rand>
    1990:	08 95       	ret

00001992 <srand>:
    1992:	a0 e0       	ldi	r26, 0x00	; 0
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	80 93 07 01 	sts	0x0107, r24
    199a:	90 93 08 01 	sts	0x0108, r25
    199e:	a0 93 09 01 	sts	0x0109, r26
    19a2:	b0 93 0a 01 	sts	0x010A, r27
    19a6:	08 95       	ret

000019a8 <eeprom_read_byte>:
    19a8:	f9 99       	sbic	0x1f, 1	; 31
    19aa:	fe cf       	rjmp	.-4      	; 0x19a8 <eeprom_read_byte>
    19ac:	92 bd       	out	0x22, r25	; 34
    19ae:	81 bd       	out	0x21, r24	; 33
    19b0:	f8 9a       	sbi	0x1f, 0	; 31
    19b2:	99 27       	eor	r25, r25
    19b4:	80 b5       	in	r24, 0x20	; 32
    19b6:	08 95       	ret

000019b8 <eeprom_write_byte>:
    19b8:	26 2f       	mov	r18, r22

000019ba <eeprom_write_r18>:
    19ba:	f9 99       	sbic	0x1f, 1	; 31
    19bc:	fe cf       	rjmp	.-4      	; 0x19ba <eeprom_write_r18>
    19be:	1f ba       	out	0x1f, r1	; 31
    19c0:	92 bd       	out	0x22, r25	; 34
    19c2:	81 bd       	out	0x21, r24	; 33
    19c4:	20 bd       	out	0x20, r18	; 32
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	fa 9a       	sbi	0x1f, 2	; 31
    19cc:	f9 9a       	sbi	0x1f, 1	; 31
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	08 95       	ret

000019d4 <__divmodsi4>:
    19d4:	05 2e       	mov	r0, r21
    19d6:	97 fb       	bst	r25, 7
    19d8:	1e f4       	brtc	.+6      	; 0x19e0 <__divmodsi4+0xc>
    19da:	00 94       	com	r0
    19dc:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__negsi2>
    19e0:	57 fd       	sbrc	r21, 7
    19e2:	07 d0       	rcall	.+14     	; 0x19f2 <__divmodsi4_neg2>
    19e4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__udivmodsi4>
    19e8:	07 fc       	sbrc	r0, 7
    19ea:	03 d0       	rcall	.+6      	; 0x19f2 <__divmodsi4_neg2>
    19ec:	4e f4       	brtc	.+18     	; 0x1a00 <__divmodsi4_exit>
    19ee:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__negsi2>

000019f2 <__divmodsi4_neg2>:
    19f2:	50 95       	com	r21
    19f4:	40 95       	com	r20
    19f6:	30 95       	com	r19
    19f8:	21 95       	neg	r18
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	4f 4f       	sbci	r20, 0xFF	; 255
    19fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001a00 <__divmodsi4_exit>:
    1a00:	08 95       	ret

00001a02 <__negsi2>:
    1a02:	90 95       	com	r25
    1a04:	80 95       	com	r24
    1a06:	70 95       	com	r23
    1a08:	61 95       	neg	r22
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	08 95       	ret

00001a12 <__muluhisi3>:
    1a12:	0e 94 45 0a 	call	0x148a	; 0x148a <__umulhisi3>
    1a16:	a5 9f       	mul	r26, r21
    1a18:	90 0d       	add	r25, r0
    1a1a:	b4 9f       	mul	r27, r20
    1a1c:	90 0d       	add	r25, r0
    1a1e:	a4 9f       	mul	r26, r20
    1a20:	80 0d       	add	r24, r0
    1a22:	91 1d       	adc	r25, r1
    1a24:	11 24       	eor	r1, r1
    1a26:	08 95       	ret

00001a28 <__mulshisi3>:
    1a28:	b7 ff       	sbrs	r27, 7
    1a2a:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__muluhisi3>

00001a2e <__mulohisi3>:
    1a2e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__muluhisi3>
    1a32:	82 1b       	sub	r24, r18
    1a34:	93 0b       	sbc	r25, r19
    1a36:	08 95       	ret

00001a38 <__udivmodsi4>:
    1a38:	a1 e2       	ldi	r26, 0x21	; 33
    1a3a:	1a 2e       	mov	r1, r26
    1a3c:	aa 1b       	sub	r26, r26
    1a3e:	bb 1b       	sub	r27, r27
    1a40:	fd 01       	movw	r30, r26
    1a42:	0d c0       	rjmp	.+26     	; 0x1a5e <__udivmodsi4_ep>

00001a44 <__udivmodsi4_loop>:
    1a44:	aa 1f       	adc	r26, r26
    1a46:	bb 1f       	adc	r27, r27
    1a48:	ee 1f       	adc	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	a2 17       	cp	r26, r18
    1a4e:	b3 07       	cpc	r27, r19
    1a50:	e4 07       	cpc	r30, r20
    1a52:	f5 07       	cpc	r31, r21
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <__udivmodsi4_ep>
    1a56:	a2 1b       	sub	r26, r18
    1a58:	b3 0b       	sbc	r27, r19
    1a5a:	e4 0b       	sbc	r30, r20
    1a5c:	f5 0b       	sbc	r31, r21

00001a5e <__udivmodsi4_ep>:
    1a5e:	66 1f       	adc	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	1a 94       	dec	r1
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <__udivmodsi4_loop>
    1a6a:	60 95       	com	r22
    1a6c:	70 95       	com	r23
    1a6e:	80 95       	com	r24
    1a70:	90 95       	com	r25
    1a72:	9b 01       	movw	r18, r22
    1a74:	ac 01       	movw	r20, r24
    1a76:	bd 01       	movw	r22, r26
    1a78:	cf 01       	movw	r24, r30
    1a7a:	08 95       	ret

00001a7c <_exit>:
    1a7c:	f8 94       	cli

00001a7e <__stop_program>:
    1a7e:	ff cf       	rjmp	.-2      	; 0x1a7e <__stop_program>
