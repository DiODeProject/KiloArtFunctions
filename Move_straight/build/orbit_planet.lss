
build/orbit_planet.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	70 03       	mulsu	r23, r16
      6a:	ec 03       	fmulsu	r22, r20
      6c:	44 03       	mulsu	r20, r20
      6e:	3b 03       	fmul	r19, r19
      70:	41 03       	mulsu	r20, r17
      72:	ce 03       	fmulsu	r20, r22
      74:	c3 03       	fmuls	r20, r19
      76:	4e 0a       	sbc	r4, r30
      78:	2b 09       	sbc	r18, r11
      7a:	2b 09       	sbc	r18, r11
      7c:	4b 0a       	sbc	r4, r27
      7e:	57 0a       	sbc	r5, r23
      80:	47 0a       	sbc	r4, r23
      82:	5e 0a       	sbc	r5, r30
      84:	5a 0a       	sbc	r5, r26
      86:	62 0a       	sbc	r6, r18
      88:	1a 0a       	sbc	r1, r26
      8a:	ec 09       	sbc	r30, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e7       	ldi	r30, 0x74	; 116
      b8:	fd e1       	ldi	r31, 0x1D	; 29
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 30       	cpi	r26, 0x0E	; 14
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e0       	ldi	r26, 0x0E	; 14
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 38       	cpi	r26, 0x84	; 132
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 94 0b 	call	0x1728	; 0x1728 <main>
      da:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
    }
    set_motors(kilo_straight_left+left,kilo_straight_right+right);
}

void setup()
{
      e2:	08 95       	ret

000000e4 <message_rx>:
    }
}

void message_rx(message_t *m, distance_measurement_t *d)
{
    if (new_message == 0){
      e4:	20 91 0e 01 	lds	r18, 0x010E
      e8:	30 91 0f 01 	lds	r19, 0x010F
      ec:	23 2b       	or	r18, r19
      ee:	99 f4       	brne	.+38     	; 0x116 <message_rx+0x32>
      f0:	fc 01       	movw	r30, r24
        new_message = 1;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 0f 01 	sts	0x010F, r25
      fa:	80 93 0e 01 	sts	0x010E, r24
        received_id = m->data[0];
      fe:	20 81       	ld	r18, Z
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	30 93 01 01 	sts	0x0101, r19
     106:	20 93 00 01 	sts	0x0100, r18
        if(received_id==ONEID){
     10a:	21 15       	cp	r18, r1
     10c:	31 05       	cpc	r19, r1
     10e:	21 f0       	breq	.+8      	; 0x118 <message_rx+0x34>
            distance1 = estimate_distance(d);
            last_dist1_update = kilo_ticks;
        }
        else if(received_id==ANOTHERID){
     110:	21 30       	cpi	r18, 0x01	; 1
     112:	31 05       	cpc	r19, r1
     114:	d1 f0       	breq	.+52     	; 0x14a <message_rx+0x66>
     116:	08 95       	ret
{
    if (new_message == 0){
        new_message = 1;
        received_id = m->data[0];
        if(received_id==ONEID){
            distance1 = estimate_distance(d);
     118:	cb 01       	movw	r24, r22
     11a:	0e 94 6a 05 	call	0xad4	; 0xad4 <estimate_distance>
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 1f 01 	sts	0x011F, r25
     124:	80 93 1e 01 	sts	0x011E, r24
            last_dist1_update = kilo_ticks;
     128:	80 91 49 01 	lds	r24, 0x0149
     12c:	90 91 4a 01 	lds	r25, 0x014A
     130:	a0 91 4b 01 	lds	r26, 0x014B
     134:	b0 91 4c 01 	lds	r27, 0x014C
     138:	80 93 1a 01 	sts	0x011A, r24
     13c:	90 93 1b 01 	sts	0x011B, r25
     140:	a0 93 1c 01 	sts	0x011C, r26
     144:	b0 93 1d 01 	sts	0x011D, r27
     148:	08 95       	ret
        }
        else if(received_id==ANOTHERID){
            distance2 = estimate_distance(d);
     14a:	cb 01       	movw	r24, r22
     14c:	0e 94 6a 05 	call	0xad4	; 0xad4 <estimate_distance>
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	90 93 21 01 	sts	0x0121, r25
     156:	80 93 20 01 	sts	0x0120, r24
            last_dist2_update = kilo_ticks;
     15a:	80 91 49 01 	lds	r24, 0x0149
     15e:	90 91 4a 01 	lds	r25, 0x014A
     162:	a0 91 4b 01 	lds	r26, 0x014B
     166:	b0 91 4c 01 	lds	r27, 0x014C
     16a:	80 93 22 01 	sts	0x0122, r24
     16e:	90 93 23 01 	sts	0x0123, r25
     172:	a0 93 24 01 	sts	0x0124, r26
     176:	b0 93 25 01 	sts	0x0125, r27
     17a:	08 95       	ret

0000017c <loop>:
void setup()
{
}

void loop()
{
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
    // Update the motion whenever a message is received.
    if (new_message == 1)
     184:	c0 91 0e 01 	lds	r28, 0x010E
     188:	d0 91 0f 01 	lds	r29, 0x010F
     18c:	c1 30       	cpi	r28, 0x01	; 1
     18e:	d1 05       	cpc	r29, r1
     190:	e9 f1       	breq	.+122    	; 0x20c <loop+0x90>
                set_motion(RIGHT);
            }
        }*/
    }

    if(kilo_ticks > last_dist1_update + 16){
     192:	40 91 49 01 	lds	r20, 0x0149
     196:	50 91 4a 01 	lds	r21, 0x014A
     19a:	60 91 4b 01 	lds	r22, 0x014B
     19e:	70 91 4c 01 	lds	r23, 0x014C
     1a2:	80 91 1a 01 	lds	r24, 0x011A
     1a6:	90 91 1b 01 	lds	r25, 0x011B
     1aa:	a0 91 1c 01 	lds	r26, 0x011C
     1ae:	b0 91 1d 01 	lds	r27, 0x011D
     1b2:	40 96       	adiw	r24, 0x10	; 16
     1b4:	a1 1d       	adc	r26, r1
     1b6:	b1 1d       	adc	r27, r1
     1b8:	84 17       	cp	r24, r20
     1ba:	95 07       	cpc	r25, r21
     1bc:	a6 07       	cpc	r26, r22
     1be:	b7 07       	cpc	r27, r23
     1c0:	20 f4       	brcc	.+8      	; 0x1ca <loop+0x4e>
        distance1 = 0;
     1c2:	10 92 1f 01 	sts	0x011F, r1
     1c6:	10 92 1e 01 	sts	0x011E, r1
    }
    if(kilo_ticks > last_dist2_update + 16){
     1ca:	40 91 49 01 	lds	r20, 0x0149
     1ce:	50 91 4a 01 	lds	r21, 0x014A
     1d2:	60 91 4b 01 	lds	r22, 0x014B
     1d6:	70 91 4c 01 	lds	r23, 0x014C
     1da:	80 91 22 01 	lds	r24, 0x0122
     1de:	90 91 23 01 	lds	r25, 0x0123
     1e2:	a0 91 24 01 	lds	r26, 0x0124
     1e6:	b0 91 25 01 	lds	r27, 0x0125
     1ea:	40 96       	adiw	r24, 0x10	; 16
     1ec:	a1 1d       	adc	r26, r1
     1ee:	b1 1d       	adc	r27, r1
     1f0:	84 17       	cp	r24, r20
     1f2:	95 07       	cpc	r25, r21
     1f4:	a6 07       	cpc	r26, r22
     1f6:	b7 07       	cpc	r27, r23
     1f8:	20 f4       	brcc	.+8      	; 0x202 <loop+0x86>
        distance2 = 0;
     1fa:	10 92 21 01 	sts	0x0121, r1
     1fe:	10 92 20 01 	sts	0x0120, r1
    }
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	08 95       	ret
void loop()
{
    // Update the motion whenever a message is received.
    if (new_message == 1)
    {
        new_message = 0;
     20c:	10 92 0f 01 	sts	0x010F, r1
     210:	10 92 0e 01 	sts	0x010E, r1

        if(distance1==0 || distance2==0){
     214:	80 91 1e 01 	lds	r24, 0x011E
     218:	90 91 1f 01 	lds	r25, 0x011F
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	61 f1       	breq	.+88     	; 0x278 <loop+0xfc>
     220:	20 91 20 01 	lds	r18, 0x0120
     224:	30 91 21 01 	lds	r19, 0x0121
     228:	21 15       	cp	r18, r1
     22a:	31 05       	cpc	r19, r1
     22c:	29 f1       	breq	.+74     	; 0x278 <loop+0xfc>
                set_color(RGB(0, 0, 0));
                set_motion(STOP);
        }
        else{
            diff_dist = distance1-distance2;
     22e:	ac 01       	movw	r20, r24
     230:	42 1b       	sub	r20, r18
     232:	53 0b       	sbc	r21, r19
     234:	50 93 19 01 	sts	0x0119, r21
     238:	40 93 18 01 	sts	0x0118, r20
            
            if(diff_dist <= 10){
     23c:	4b 30       	cpi	r20, 0x0B	; 11
     23e:	51 05       	cpc	r21, r1
     240:	74 f5       	brge	.+92     	; 0x29e <loop+0x122>
                if(diff_dist >= 0){
     242:	57 fd       	sbrc	r21, 7
     244:	72 c0       	rjmp	.+228    	; 0x32a <loop+0x1ae>
                    set_color(RGB(1, 0, 0));
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 a5 08 	call	0x114a	; 0x114a <set_color>
                    straight_adjust(diff_dist,0);
     24c:	10 91 18 01 	lds	r17, 0x0118
        }
    }
}

void straight_adjust(int left, int right){
    if (both_spined==0){
     250:	80 91 12 01 	lds	r24, 0x0112
     254:	90 91 13 01 	lds	r25, 0x0113
     258:	89 2b       	or	r24, r25
     25a:	31 f4       	brne	.+12     	; 0x268 <loop+0xec>
        spinup_motors();
     25c:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
        both_spined = 1;
     260:	d0 93 13 01 	sts	0x0113, r29
     264:	c0 93 12 01 	sts	0x0112, r28
    }
    set_motors(kilo_straight_left+left,kilo_straight_right+right);
     268:	80 91 81 01 	lds	r24, 0x0181
     26c:	60 91 82 01 	lds	r22, 0x0182
     270:	81 0f       	add	r24, r17
     272:	0e 94 84 04 	call	0x908	; 0x908 <set_motors>
     276:	8d cf       	rjmp	.-230    	; 0x192 <loop+0x16>
    if (new_message == 1)
    {
        new_message = 0;

        if(distance1==0 || distance2==0){
                set_color(RGB(0, 0, 0));
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	0e 94 a5 08 	call	0x114a	; 0x114a <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     27e:	80 91 10 01 	lds	r24, 0x0110
     282:	90 91 11 01 	lds	r25, 0x0111
     286:	89 2b       	or	r24, r25
     288:	09 f4       	brne	.+2      	; 0x28c <loop+0x110>
     28a:	83 cf       	rjmp	.-250    	; 0x192 <loop+0x16>
    {
        current_motion = new_motion;
     28c:	10 92 11 01 	sts	0x0111, r1
     290:	10 92 10 01 	sts	0x0110, r1
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 84 04 	call	0x908	; 0x908 <set_motors>
     29c:	7a cf       	rjmp	.-268    	; 0x192 <loop+0x16>

                }

            }
            else{
                if (distance1 < distance2)
     29e:	82 17       	cp	r24, r18
     2a0:	93 07       	cpc	r25, r19
     2a2:	0c f5       	brge	.+66     	; 0x2e6 <loop+0x16a>
                {
                    set_color(RGB(1, 1, 0));
     2a4:	85 e0       	ldi	r24, 0x05	; 5
     2a6:	0e 94 a5 08 	call	0x114a	; 0x114a <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2aa:	80 91 10 01 	lds	r24, 0x0110
     2ae:	90 91 11 01 	lds	r25, 0x0111
     2b2:	03 97       	sbiw	r24, 0x03	; 3
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <loop+0x13c>
     2b6:	6d cf       	rjmp	.-294    	; 0x192 <loop+0x16>
    {
        current_motion = new_motion;
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	90 93 11 01 	sts	0x0111, r25
     2c0:	80 93 10 01 	sts	0x0110, r24
            set_motors(kilo_turn_left, 0);
            both_spined=0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined==0)
     2c4:	80 91 12 01 	lds	r24, 0x0112
     2c8:	90 91 13 01 	lds	r25, 0x0113
     2cc:	89 2b       	or	r24, r25
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <loop+0x156>
     2d0:	4a c0       	rjmp	.+148    	; 0x366 <loop+0x1ea>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     2d2:	60 91 6f 01 	lds	r22, 0x016F
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	0e 94 84 04 	call	0x908	; 0x908 <set_motors>
            both_spined=0;
     2dc:	10 92 13 01 	sts	0x0113, r1
     2e0:	10 92 12 01 	sts	0x0112, r1
     2e4:	56 cf       	rjmp	.-340    	; 0x192 <loop+0x16>
                    set_color(RGB(1, 1, 0));
                    set_motion(RIGHT);
                }
                else
                {
                    set_color(RGB(0, 1, 1));
     2e6:	84 e1       	ldi	r24, 0x14	; 20
     2e8:	0e 94 a5 08 	call	0x114a	; 0x114a <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     2ec:	80 91 10 01 	lds	r24, 0x0110
     2f0:	90 91 11 01 	lds	r25, 0x0111
     2f4:	02 97       	sbiw	r24, 0x02	; 2
     2f6:	09 f4       	brne	.+2      	; 0x2fa <loop+0x17e>
     2f8:	4c cf       	rjmp	.-360    	; 0x192 <loop+0x16>
    {
        current_motion = new_motion;
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 11 01 	sts	0x0111, r25
     302:	80 93 10 01 	sts	0x0110, r24
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            if(both_spined==0)
     306:	80 91 12 01 	lds	r24, 0x0112
     30a:	90 91 13 01 	lds	r25, 0x0113
     30e:	89 2b       	or	r24, r25
     310:	11 f4       	brne	.+4      	; 0x316 <loop+0x19a>
                spinup_motors();
     312:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	80 91 83 01 	lds	r24, 0x0183
     31c:	0e 94 84 04 	call	0x908	; 0x908 <set_motors>
            both_spined=0;
     320:	10 92 13 01 	sts	0x0113, r1
     324:	10 92 12 01 	sts	0x0112, r1
     328:	34 cf       	rjmp	.-408    	; 0x192 <loop+0x16>
                if(diff_dist >= 0){
                    set_color(RGB(1, 0, 0));
                    straight_adjust(diff_dist,0);
                }
                else{
                    set_color(RGB(0, 0, 1));
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	0e 94 a5 08 	call	0x114a	; 0x114a <set_color>
                    straight_adjust(0,-diff_dist);
     330:	00 91 18 01 	lds	r16, 0x0118
     334:	10 91 19 01 	lds	r17, 0x0119
     338:	11 95       	neg	r17
     33a:	01 95       	neg	r16
     33c:	11 09       	sbc	r17, r1
        }
    }
}

void straight_adjust(int left, int right){
    if (both_spined==0){
     33e:	80 91 12 01 	lds	r24, 0x0112
     342:	90 91 13 01 	lds	r25, 0x0113
     346:	89 2b       	or	r24, r25
     348:	31 f4       	brne	.+12     	; 0x356 <loop+0x1da>
        spinup_motors();
     34a:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
        both_spined = 1;
     34e:	d0 93 13 01 	sts	0x0113, r29
     352:	c0 93 12 01 	sts	0x0112, r28
    }
    set_motors(kilo_straight_left+left,kilo_straight_right+right);
     356:	60 91 82 01 	lds	r22, 0x0182
     35a:	60 0f       	add	r22, r16
     35c:	80 91 81 01 	lds	r24, 0x0181
     360:	0e 94 84 04 	call	0x908	; 0x908 <set_motors>
     364:	16 cf       	rjmp	.-468    	; 0x192 <loop+0x16>
            both_spined=0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined==0)
                spinup_motors();
     366:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
     36a:	b3 cf       	rjmp	.-154    	; 0x2d2 <loop+0x156>

0000036c <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     36c:	20 91 10 01 	lds	r18, 0x0110
     370:	30 91 11 01 	lds	r19, 0x0111
     374:	28 17       	cp	r18, r24
     376:	39 07       	cpc	r19, r25
     378:	71 f0       	breq	.+28     	; 0x396 <set_motion+0x2a>
    {
        current_motion = new_motion;
     37a:	90 93 11 01 	sts	0x0111, r25
     37e:	80 93 10 01 	sts	0x0110, r24
        
        if (current_motion == STOP)
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	59 f1       	breq	.+86     	; 0x3dc <set_motion+0x70>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	91 05       	cpc	r25, r1
     38a:	61 f1       	breq	.+88     	; 0x3e4 <set_motion+0x78>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     38c:	82 30       	cpi	r24, 0x02	; 2
     38e:	91 05       	cpc	r25, r1
     390:	19 f0       	breq	.+6      	; 0x398 <set_motion+0x2c>
            if(both_spined==0)
                spinup_motors();
            set_motors(kilo_turn_left, 0);
            both_spined=0;
        }
        else if (current_motion == RIGHT)
     392:	03 97       	sbiw	r24, 0x03	; 3
     394:	99 f0       	breq	.+38     	; 0x3bc <set_motion+0x50>
     396:	08 95       	ret
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            if(both_spined==0)
     398:	80 91 12 01 	lds	r24, 0x0112
     39c:	90 91 13 01 	lds	r25, 0x0113
     3a0:	89 2b       	or	r24, r25
     3a2:	11 f4       	brne	.+4      	; 0x3a8 <set_motion+0x3c>
                spinup_motors();
     3a4:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	80 91 83 01 	lds	r24, 0x0183
     3ae:	0e 94 84 04 	call	0x908	; 0x908 <set_motors>
            both_spined=0;
     3b2:	10 92 13 01 	sts	0x0113, r1
     3b6:	10 92 12 01 	sts	0x0112, r1
     3ba:	08 95       	ret
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined==0)
     3bc:	80 91 12 01 	lds	r24, 0x0112
     3c0:	90 91 13 01 	lds	r25, 0x0113
     3c4:	89 2b       	or	r24, r25
     3c6:	b1 f0       	breq	.+44     	; 0x3f4 <set_motion+0x88>
                spinup_motors();
            set_motors(0, kilo_turn_right);
     3c8:	60 91 6f 01 	lds	r22, 0x016F
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 84 04 	call	0x908	; 0x908 <set_motors>
            both_spined=0;
     3d2:	10 92 13 01 	sts	0x0113, r1
     3d6:	10 92 12 01 	sts	0x0112, r1
     3da:	08 95       	ret
    {
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {
            set_motors(0, 0);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0c 94 84 04 	jmp	0x908	; 0x908 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     3e4:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     3e8:	60 91 82 01 	lds	r22, 0x0182
     3ec:	80 91 81 01 	lds	r24, 0x0181
     3f0:	0c 94 84 04 	jmp	0x908	; 0x908 <set_motors>
            both_spined=0;
        }
        else if (current_motion == RIGHT)
        {
            if(both_spined==0)
                spinup_motors();
     3f4:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
     3f8:	e7 cf       	rjmp	.-50     	; 0x3c8 <set_motion+0x5c>

000003fa <straight_adjust>:
            both_spined=0;
        }
    }
}

void straight_adjust(int left, int right){
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <straight_adjust+0x6>
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
    if (both_spined==0){
     404:	20 91 12 01 	lds	r18, 0x0112
     408:	30 91 13 01 	lds	r19, 0x0113
     40c:	23 2b       	or	r18, r19
     40e:	61 f4       	brne	.+24     	; 0x428 <straight_adjust+0x2e>
        spinup_motors();
     410:	6a 83       	std	Y+2, r22	; 0x02
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	0e 94 89 04 	call	0x912	; 0x912 <spinup_motors>
        both_spined = 1;
     418:	21 e0       	ldi	r18, 0x01	; 1
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	30 93 13 01 	sts	0x0113, r19
     420:	20 93 12 01 	sts	0x0112, r18
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	6a 81       	ldd	r22, Y+2	; 0x02
    }
    set_motors(kilo_straight_left+left,kilo_straight_right+right);
     428:	90 91 82 01 	lds	r25, 0x0182
     42c:	69 0f       	add	r22, r25
     42e:	90 91 81 01 	lds	r25, 0x0181
     432:	89 0f       	add	r24, r25
}
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
void straight_adjust(int left, int right){
    if (both_spined==0){
        spinup_motors();
        both_spined = 1;
    }
    set_motors(kilo_straight_left+left,kilo_straight_right+right);
     43c:	0c 94 84 04 	jmp	0x908	; 0x908 <set_motors>

00000440 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     440:	08 95       	ret

00000442 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	08 95       	ret

00000448 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     448:	08 95       	ret

0000044a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
    cli();
     458:	f8 94       	cli

    ports_off();
     45a:	14 b8       	out	0x04, r1	; 4
     45c:	17 b8       	out	0x07, r1	; 7
     45e:	1a b8       	out	0x0a, r1	; 10
     460:	15 b8       	out	0x05, r1	; 5
     462:	18 b8       	out	0x08, r1	; 8
     464:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     466:	52 9a       	sbi	0x0a, 2	; 10
     468:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     46a:	14 bc       	out	0x24, r1	; 36
     46c:	85 e0       	ldi	r24, 0x05	; 5
     46e:	85 bd       	out	0x25, r24	; 37
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	87 bd       	out	0x27, r24	; 39
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     47a:	10 92 80 00 	sts	0x0080, r1
     47e:	10 92 81 00 	sts	0x0081, r1
     482:	2f e8       	ldi	r18, 0x8F	; 143
     484:	3b e0       	ldi	r19, 0x0B	; 11
     486:	30 93 89 00 	sts	0x0089, r19
     48a:	20 93 88 00 	sts	0x0088, r18
     48e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     492:	53 98       	cbi	0x0a, 3	; 10
     494:	23 98       	cbi	0x04, 3	; 4
     496:	91 ea       	ldi	r25, 0xA1	; 161
     498:	90 93 b0 00 	sts	0x00B0, r25
     49c:	80 93 b1 00 	sts	0x00B1, r24
     4a0:	10 92 b4 00 	sts	0x00B4, r1
     4a4:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     4a8:	8b e0       	ldi	r24, 0x0B	; 11
     4aa:	80 bf       	out	0x30, r24	; 48
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	80 93 7c 00 	sts	0x007C, r24
     4b8:	83 e8       	ldi	r24, 0x83	; 131
     4ba:	80 93 7a 00 	sts	0x007A, r24
     4be:	80 91 7a 00 	lds	r24, 0x007A
     4c2:	80 64       	ori	r24, 0x40	; 64
     4c4:	80 93 7a 00 	sts	0x007A, r24
     4c8:	80 91 7a 00 	lds	r24, 0x007A
     4cc:	86 fd       	sbrc	r24, 6
     4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <kilo_init+0x7e>
    adc_trigger_high_gain();
     4d0:	10 92 7c 00 	sts	0x007C, r1
     4d4:	83 ea       	ldi	r24, 0xA3	; 163
     4d6:	80 93 7a 00 	sts	0x007A, r24
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
    if (osccal != 0xFF)
     4e8:	8f 3f       	cpi	r24, 0xFF	; 255
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <kilo_init+0xa6>
        OSCCAL = osccal;
     4ec:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     4f0:	10 92 4d 01 	sts	0x014D, r1
    rx_leadingbit = 1;
     4f4:	c1 e0       	ldi	r28, 0x01	; 1
     4f6:	c0 93 26 01 	sts	0x0126, r28
    rx_leadingbyte = 1;
     4fa:	c0 93 6a 01 	sts	0x016A, r28
    rx_byteindex = 0;
     4fe:	10 92 44 01 	sts	0x0144, r1
    rx_bytevalue = 0;
     502:	10 92 7e 01 	sts	0x017E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     506:	80 e9       	ldi	r24, 0x90	; 144
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     50e:	80 93 43 01 	sts	0x0143, r24
    if (tx_mask & ~TX_MASK_MAX)
     512:	80 91 43 01 	lds	r24, 0x0143
     516:	88 73       	andi	r24, 0x38	; 56
     518:	11 f0       	breq	.+4      	; 0x51e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     51a:	c0 93 43 01 	sts	0x0143, r28
    tx_clock = 0;
     51e:	10 92 6e 01 	sts	0x016E, r1
     522:	10 92 6d 01 	sts	0x016D, r1
    tx_increment = 255;
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 6c 01 	sts	0x016C, r25
     52e:	80 93 6b 01 	sts	0x016B, r24
    kilo_ticks = 0;
     532:	10 92 49 01 	sts	0x0149, r1
     536:	10 92 4a 01 	sts	0x014A, r1
     53a:	10 92 4b 01 	sts	0x014B, r1
     53e:	10 92 4c 01 	sts	0x014C, r1
    kilo_state = IDLE;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 17 01 	sts	0x0117, r24
    kilo_tx_period = 3906;
     548:	82 e4       	ldi	r24, 0x42	; 66
     54a:	9f e0       	ldi	r25, 0x0F	; 15
     54c:	90 93 7d 01 	sts	0x017D, r25
     550:	80 93 7c 01 	sts	0x017C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     554:	80 eb       	ldi	r24, 0xB0	; 176
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     55c:	c8 2f       	mov	r28, r24
     55e:	81 eb       	ldi	r24, 0xB1	; 177
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     566:	2c 2f       	mov	r18, r28
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	38 2b       	or	r19, r24
     56c:	30 93 80 01 	sts	0x0180, r19
     570:	20 93 7f 01 	sts	0x017F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     57c:	80 93 83 01 	sts	0x0183, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     580:	89 e0       	ldi	r24, 0x09	; 9
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     588:	80 93 6f 01 	sts	0x016F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     58c:	8c e0       	ldi	r24, 0x0C	; 12
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     594:	80 93 81 01 	sts	0x0181, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     598:	84 e1       	ldi	r24, 0x14	; 20
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     5a0:	80 93 82 01 	sts	0x0182, r24
     5a4:	5e e4       	ldi	r21, 0x4E	; 78
     5a6:	e5 2e       	mov	r14, r21
     5a8:	51 e0       	ldi	r21, 0x01	; 1
     5aa:	f5 2e       	mov	r15, r21
     5ac:	07 e2       	ldi	r16, 0x27	; 39
     5ae:	11 e0       	ldi	r17, 0x01	; 1
     5b0:	c0 e2       	ldi	r28, 0x20	; 32
     5b2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     5b4:	ce 01       	movw	r24, r28
     5b6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     5ba:	d8 2e       	mov	r13, r24
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     5c4:	2d 2d       	mov	r18, r13
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	32 2f       	mov	r19, r18
     5ca:	22 27       	eor	r18, r18
     5cc:	28 2b       	or	r18, r24
     5ce:	f7 01       	movw	r30, r14
     5d0:	21 93       	st	Z+, r18
     5d2:	31 93       	st	Z+, r19
     5d4:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     5d6:	ce 01       	movw	r24, r28
     5d8:	c0 96       	adiw	r24, 0x30	; 48
     5da:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     5de:	d8 2e       	mov	r13, r24
     5e0:	ce 01       	movw	r24, r28
     5e2:	c1 96       	adiw	r24, 0x31	; 49
     5e4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <eeprom_read_byte>
     5e8:	2d 2d       	mov	r18, r13
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	32 2f       	mov	r19, r18
     5ee:	22 27       	eor	r18, r18
     5f0:	28 2b       	or	r18, r24
     5f2:	f8 01       	movw	r30, r16
     5f4:	21 93       	st	Z+, r18
     5f6:	31 93       	st	Z+, r19
     5f8:	8f 01       	movw	r16, r30
     5fa:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5fc:	cc 33       	cpi	r28, 0x3C	; 60
     5fe:	d1 05       	cpc	r29, r1
     600:	c9 f6       	brne	.-78     	; 0x5b4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     602:	78 94       	sei
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	08 95       	ret

00000614 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	8f 93       	push	r24
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	a8 95       	wdr
     626:	80 91 60 00 	lds	r24, 0x0060
     62a:	88 61       	ori	r24, 0x18	; 24
     62c:	80 93 60 00 	sts	0x0060, r24
     630:	10 92 60 00 	sts	0x0060, r1
     634:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     636:	8f 91       	pop	r24
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     642:	3c 01       	movw	r6, r24
     644:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     646:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     648:	99 24       	eor	r9, r9
     64a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     64c:	84 e0       	ldi	r24, 0x04	; 4
     64e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     650:	96 e0       	ldi	r25, 0x06	; 6
     652:	a9 2e       	mov	r10, r25
     654:	23 e8       	ldi	r18, 0x83	; 131
     656:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     658:	38 e1       	ldi	r19, 0x18	; 24
     65a:	d3 2e       	mov	r13, r19
     65c:	49 e2       	ldi	r20, 0x29	; 41
     65e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     660:	90 91 17 01 	lds	r25, 0x0117
     664:	e9 2f       	mov	r30, r25
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	e7 30       	cpi	r30, 0x07	; 7
     66a:	f1 05       	cpc	r31, r1
     66c:	c8 f7       	brcc	.-14     	; 0x660 <kilo_start+0x1e>
     66e:	ec 5c       	subi	r30, 0xCC	; 204
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     676:	11 23       	and	r17, r17
     678:	09 f4       	brne	.+2      	; 0x67c <kilo_start+0x3a>
     67a:	fc c0       	rjmp	.+504    	; 0x874 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     67c:	c0 92 17 01 	sts	0x0117, r12
     680:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     682:	fe 01       	movw	r30, r28
     684:	09 95       	icall
                break;
     686:	ec cf       	rjmp	.-40     	; 0x660 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     688:	80 91 4d 01 	lds	r24, 0x014D
     68c:	81 11       	cpse	r24, r1
     68e:	eb c0       	rjmp	.+470    	; 0x866 <kilo_start+0x224>
        cli();                                    // disable interrupts
     690:	f8 94       	cli
        adc_setup_conversion(6);
     692:	a0 92 7c 00 	sts	0x007C, r10
     696:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     69a:	80 91 7a 00 	lds	r24, 0x007A
     69e:	80 64       	ori	r24, 0x40	; 64
     6a0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6a4:	90 91 7a 00 	lds	r25, 0x007A
     6a8:	96 fd       	sbrc	r25, 6
     6aa:	fc cf       	rjmp	.-8      	; 0x6a4 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     6ac:	80 91 78 00 	lds	r24, 0x0078
     6b0:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     6b4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     6b6:	8b 3a       	cpi	r24, 0xAB	; 171
     6b8:	e2 e0       	ldi	r30, 0x02	; 2
     6ba:	9e 07       	cpc	r25, r30
     6bc:	0c f0       	brlt	.+2      	; 0x6c0 <kilo_start+0x7e>
     6be:	ed c0       	rjmp	.+474    	; 0x89a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     6c0:	89 38       	cpi	r24, 0x89	; 137
     6c2:	f2 e0       	ldi	r31, 0x02	; 2
     6c4:	9f 07       	cpc	r25, r31
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <kilo_start+0x88>
     6c8:	ef c0       	rjmp	.+478    	; 0x8a8 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     6ca:	87 36       	cpi	r24, 0x67	; 103
     6cc:	92 40       	sbci	r25, 0x02	; 2
     6ce:	0c f4       	brge	.+2      	; 0x6d2 <kilo_start+0x90>
     6d0:	ca c0       	rjmp	.+404    	; 0x866 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6d2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6d4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6d6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6d8:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6da:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6dc:	3c 98       	cbi	0x07, 4	; 7
     6de:	c0 cf       	rjmp	.-128    	; 0x660 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     6e0:	f8 94       	cli
                acomp_off();
     6e2:	80 b7       	in	r24, 0x30	; 48
     6e4:	87 7f       	andi	r24, 0xF7	; 247
     6e6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     6e8:	80 91 7a 00 	lds	r24, 0x007A
     6ec:	8f 77       	andi	r24, 0x7F	; 127
     6ee:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     6f2:	14 b8       	out	0x04, r1	; 4
     6f4:	17 b8       	out	0x07, r1	; 7
     6f6:	1a b8       	out	0x0a, r1	; 10
     6f8:	15 b8       	out	0x05, r1	; 5
     6fa:	18 b8       	out	0x08, r1	; 8
     6fc:	1b b8       	out	0x0b, r1	; 11
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	a8 95       	wdr
     704:	d0 92 60 00 	sts	0x0060, r13
     708:	0f be       	out	0x3f, r0	; 63
     70a:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     70e:	80 91 60 00 	lds	r24, 0x0060
     712:	80 64       	ori	r24, 0x40	; 64
     714:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     718:	93 b7       	in	r25, 0x33	; 51
     71a:	91 7f       	andi	r25, 0xF1	; 241
     71c:	94 60       	ori	r25, 0x04	; 4
     71e:	93 bf       	out	0x33, r25	; 51
                cli();
     720:	f8 94       	cli
                sleep_enable();
     722:	83 b7       	in	r24, 0x33	; 51
     724:	81 60       	ori	r24, 0x01	; 1
     726:	83 bf       	out	0x33, r24	; 51
                sei();
     728:	78 94       	sei
                sleep_cpu();
     72a:	88 95       	sleep
                sleep_disable();
     72c:	83 b7       	in	r24, 0x33	; 51
     72e:	8e 7f       	andi	r24, 0xFE	; 254
     730:	83 bf       	out	0x33, r24	; 51
                sei();
     732:	78 94       	sei
                rx_busy = 0;
     734:	10 92 4d 01 	sts	0x014D, r1
                ports_on();
     738:	52 9a       	sbi	0x0a, 2	; 10
     73a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     73c:	80 91 7a 00 	lds	r24, 0x007A
     740:	80 68       	ori	r24, 0x80	; 128
     742:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     746:	87 e5       	ldi	r24, 0x57	; 87
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <kilo_start+0x108>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <kilo_start+0x10e>
     750:	00 00       	nop
                _delay_us(300);
                acomp_on();
     752:	80 b7       	in	r24, 0x30	; 48
     754:	88 61       	ori	r24, 0x18	; 24
     756:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     758:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     75a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     75c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     75e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     760:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     762:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     764:	ef e1       	ldi	r30, 0x1F	; 31
     766:	fe e4       	ldi	r31, 0x4E	; 78
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <kilo_start+0x126>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <kilo_start+0x12c>
     76e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     770:	80 91 4d 01 	lds	r24, 0x014D
     774:	81 11       	cpse	r24, r1
     776:	81 c0       	rjmp	.+258    	; 0x87a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     778:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     77a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     77c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     77e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     780:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     782:	3c 98       	cbi	0x07, 4	; 7
     784:	6d cf       	rjmp	.-294    	; 0x660 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     786:	80 91 15 01 	lds	r24, 0x0115
     78a:	81 11       	cpse	r24, r1
     78c:	41 c0       	rjmp	.+130    	; 0x810 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     78e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     792:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     796:	10 92 16 01 	sts	0x0116, r1
     79a:	62 cf       	rjmp	.-316    	; 0x660 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     79c:	48 99       	sbic	0x09, 0	; 9
     79e:	ec cf       	rjmp	.-40     	; 0x778 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7a0:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7a2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7a4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7a6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7a8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7aa:	3c 98       	cbi	0x07, 4	; 7
     7ac:	8f ec       	ldi	r24, 0xCF	; 207
     7ae:	97 e0       	ldi	r25, 0x07	; 7
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <kilo_start+0x16e>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <kilo_start+0x174>
     7b6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7b8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7c2:	3c 98       	cbi	0x07, 4	; 7
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	e1 ee       	ldi	r30, 0xE1	; 225
     7c8:	f4 e0       	ldi	r31, 0x04	; 4
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	e0 40       	sbci	r30, 0x00	; 0
     7ce:	f0 40       	sbci	r31, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <kilo_start+0x188>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <kilo_start+0x192>
     7d4:	00 00       	nop
     7d6:	44 cf       	rjmp	.-376    	; 0x660 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7d8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7da:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     7dc:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     7de:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7e0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7e2:	3c 98       	cbi	0x07, 4	; 7
     7e4:	ef ec       	ldi	r30, 0xCF	; 207
     7e6:	f7 e0       	ldi	r31, 0x07	; 7
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <kilo_start+0x1a6>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <kilo_start+0x1ac>
     7ee:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7f0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7f2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7f4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7f6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7f8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7fa:	3c 98       	cbi	0x07, 4	; 7
     7fc:	ff ef       	ldi	r31, 0xFF	; 255
     7fe:	21 ee       	ldi	r18, 0xE1	; 225
     800:	84 e0       	ldi	r24, 0x04	; 4
     802:	f1 50       	subi	r31, 0x01	; 1
     804:	20 40       	sbci	r18, 0x00	; 0
     806:	80 40       	sbci	r24, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <kilo_start+0x1c0>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <kilo_start+0x1ca>
     80c:	00 00       	nop
     80e:	28 cf       	rjmp	.-432    	; 0x660 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     810:	90 91 15 01 	lds	r25, 0x0115
     814:	80 91 16 01 	lds	r24, 0x0116
     818:	98 17       	cp	r25, r24
     81a:	09 f4       	brne	.+2      	; 0x81e <kilo_start+0x1dc>
     81c:	21 cf       	rjmp	.-446    	; 0x660 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     81e:	80 91 15 01 	lds	r24, 0x0115
     822:	80 93 16 01 	sts	0x0116, r24
                        if (cur_motion == MOVE_LEFT) {
     826:	80 91 15 01 	lds	r24, 0x0115
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	09 f4       	brne	.+2      	; 0x830 <kilo_start+0x1ee>
     82e:	50 c0       	rjmp	.+160    	; 0x8d0 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     830:	80 91 15 01 	lds	r24, 0x0115
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     834:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     838:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	d9 f1       	breq	.+118    	; 0x8b6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     840:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     844:	90 92 b4 00 	sts	0x00B4, r9
     848:	8f e2       	ldi	r24, 0x2F	; 47
     84a:	95 e7       	ldi	r25, 0x75	; 117
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <kilo_start+0x20a>
     850:	00 c0       	rjmp	.+0      	; 0x852 <kilo_start+0x210>
     852:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     854:	80 91 82 01 	lds	r24, 0x0182
     858:	90 91 81 01 	lds	r25, 0x0181
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     85c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     860:	80 93 b4 00 	sts	0x00B4, r24
     864:	fd ce       	rjmp	.-518    	; 0x660 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     866:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     868:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     86a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     86c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     86e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     870:	3c 98       	cbi	0x07, 4	; 7
     872:	f6 ce       	rjmp	.-532    	; 0x660 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     874:	f3 01       	movw	r30, r6
     876:	09 95       	icall
     878:	01 cf       	rjmp	.-510    	; 0x67c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     87a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     87c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     87e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     880:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     882:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     884:	3c 98       	cbi	0x07, 4	; 7
     886:	ff ef       	ldi	r31, 0xFF	; 255
     888:	20 e7       	ldi	r18, 0x70	; 112
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	f1 50       	subi	r31, 0x01	; 1
     88e:	20 40       	sbci	r18, 0x00	; 0
     890:	80 40       	sbci	r24, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <kilo_start+0x24a>
     894:	00 c0       	rjmp	.+0      	; 0x896 <kilo_start+0x254>
     896:	00 00       	nop
     898:	6f cf       	rjmp	.-290    	; 0x778 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     89a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     89c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     89e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     8a0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     8a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     8a4:	3c 98       	cbi	0x07, 4	; 7
     8a6:	dc ce       	rjmp	.-584    	; 0x660 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     8a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     8aa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     8ac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     8ae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     8b0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     8b2:	3c 9a       	sbi	0x07, 4	; 7
     8b4:	d5 ce       	rjmp	.-598    	; 0x660 <kilo_start+0x1e>
     8b6:	ef e2       	ldi	r30, 0x2F	; 47
     8b8:	f5 e7       	ldi	r31, 0x75	; 117
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <kilo_start+0x278>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <kilo_start+0x27e>
     8c0:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     8c2:	80 91 6f 01 	lds	r24, 0x016F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8c6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     8ca:	80 93 b4 00 	sts	0x00B4, r24
     8ce:	c8 ce       	rjmp	.-624    	; 0x660 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8d0:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     8d4:	10 92 b4 00 	sts	0x00B4, r1
     8d8:	8f e2       	ldi	r24, 0x2F	; 47
     8da:	95 e7       	ldi	r25, 0x75	; 117
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <kilo_start+0x29a>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <kilo_start+0x2a0>
     8e2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     8e4:	80 91 83 01 	lds	r24, 0x0183
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8e8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     8ec:	10 92 b4 00 	sts	0x00B4, r1
     8f0:	b7 ce       	rjmp	.-658    	; 0x660 <kilo_start+0x1e>

000008f2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <__stack+0x3>
     8f4:	ef ec       	ldi	r30, 0xCF	; 207
     8f6:	f7 e0       	ldi	r31, 0x07	; 7
     8f8:	31 97       	sbiw	r30, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <delay+0x6>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <delay+0xc>
     8fe:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     900:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	b9 f7       	brne	.-18     	; 0x8f4 <delay+0x2>
     906:	08 95       	ret

00000908 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     908:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     90c:	60 93 b4 00 	sts	0x00B4, r22
     910:	08 95       	ret

00000912 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     918:	80 93 b4 00 	sts	0x00B4, r24
     91c:	8f e0       	ldi	r24, 0x0F	; 15
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	ef ec       	ldi	r30, 0xCF	; 207
     922:	f7 e0       	ldi	r31, 0x07	; 7
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <spinup_motors+0x12>
     928:	00 c0       	rjmp	.+0      	; 0x92a <spinup_motors+0x18>
     92a:	00 00       	nop
     92c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     92e:	c1 f7       	brne	.-16     	; 0x920 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     930:	08 95       	ret

00000932 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     932:	80 91 4d 01 	lds	r24, 0x014D
     936:	81 11       	cpse	r24, r1
     938:	1e c0       	rjmp	.+60     	; 0x976 <get_ambientlight+0x44>
        cli();
     93a:	f8 94       	cli
        adc_setup_conversion(7);
     93c:	87 e0       	ldi	r24, 0x07	; 7
     93e:	80 93 7c 00 	sts	0x007C, r24
     942:	83 e8       	ldi	r24, 0x83	; 131
     944:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     948:	80 91 7a 00 	lds	r24, 0x007A
     94c:	80 64       	ori	r24, 0x40	; 64
     94e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     952:	80 91 7a 00 	lds	r24, 0x007A
     956:	86 fd       	sbrc	r24, 6
     958:	fc cf       	rjmp	.-8      	; 0x952 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     95a:	80 91 78 00 	lds	r24, 0x0078
     95e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     962:	10 92 7c 00 	sts	0x007C, r1
     966:	23 ea       	ldi	r18, 0xA3	; 163
     968:	20 93 7a 00 	sts	0x007A, r18
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     972:	78 94       	sei
     974:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     97a:	08 95       	ret

0000097c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     97c:	80 91 4d 01 	lds	r24, 0x014D
     980:	81 11       	cpse	r24, r1
     982:	1e c0       	rjmp	.+60     	; 0x9c0 <get_temperature+0x44>
        cli();
     984:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     986:	88 ec       	ldi	r24, 0xC8	; 200
     988:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     98c:	87 e8       	ldi	r24, 0x87	; 135
     98e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     992:	80 91 7a 00 	lds	r24, 0x007A
     996:	80 64       	ori	r24, 0x40	; 64
     998:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     99c:	80 91 7a 00 	lds	r24, 0x007A
     9a0:	86 fd       	sbrc	r24, 6
     9a2:	fc cf       	rjmp	.-8      	; 0x99c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     9a4:	80 91 78 00 	lds	r24, 0x0078
     9a8:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     9ac:	10 92 7c 00 	sts	0x007C, r1
     9b0:	23 ea       	ldi	r18, 0xA3	; 163
     9b2:	20 93 7a 00 	sts	0x007A, r18
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     9bc:	78 94       	sei
     9be:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     9c4:	08 95       	ret

000009c6 <rand_hard>:

uint8_t rand_hard() {
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	e0 e0       	ldi	r30, 0x00	; 0
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     9d4:	03 ea       	ldi	r16, 0xA3	; 163
     9d6:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     9d8:	d6 e0       	ldi	r29, 0x06	; 6
     9da:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     9dc:	a1 e0       	ldi	r26, 0x01	; 1
     9de:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     9e0:	60 e8       	ldi	r22, 0x80	; 128
     9e2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     9e4:	f8 94       	cli
            adc_setup_conversion(6);
     9e6:	d0 93 7c 00 	sts	0x007C, r29
     9ea:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     9ee:	90 91 7a 00 	lds	r25, 0x007A
     9f2:	90 64       	ori	r25, 0x40	; 64
     9f4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     9f8:	90 91 7a 00 	lds	r25, 0x007A
     9fc:	96 fd       	sbrc	r25, 6
     9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <rand_hard+0x32>
            a = ADCW&0x1;
     a00:	20 91 78 00 	lds	r18, 0x0078
     a04:	30 91 79 00 	lds	r19, 0x0079
     a08:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     a0a:	90 91 7a 00 	lds	r25, 0x007A
     a0e:	90 64       	ori	r25, 0x40	; 64
     a10:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     a14:	90 91 7a 00 	lds	r25, 0x007A
     a18:	96 fd       	sbrc	r25, 6
     a1a:	fc cf       	rjmp	.-8      	; 0xa14 <rand_hard+0x4e>
            b = ADCW&0x1;
     a1c:	40 91 78 00 	lds	r20, 0x0078
     a20:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     a24:	10 92 7c 00 	sts	0x007C, r1
     a28:	00 93 7a 00 	sts	0x007A, r16
     a2c:	10 93 7b 00 	sts	0x007B, r17
            sei();
     a30:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     a32:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     a34:	24 13       	cpse	r18, r20
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <rand_hard+0x78>
     a38:	61 50       	subi	r22, 0x01	; 1
     a3a:	71 09       	sbc	r23, r1
     a3c:	99 f6       	brne	.-90     	; 0x9e4 <rand_hard+0x1e>
        if (a)
     a3e:	22 23       	and	r18, r18
     a40:	39 f0       	breq	.+14     	; 0xa50 <rand_hard+0x8a>
            num |= (1<<i);
     a42:	9d 01       	movw	r18, r26
     a44:	0e 2e       	mov	r0, r30
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <rand_hard+0x84>
     a48:	22 0f       	add	r18, r18
     a4a:	0a 94       	dec	r0
     a4c:	ea f7       	brpl	.-6      	; 0xa48 <rand_hard+0x82>
     a4e:	82 2b       	or	r24, r18
     a50:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     a52:	e8 30       	cpi	r30, 0x08	; 8
     a54:	f1 05       	cpc	r31, r1
     a56:	09 f0       	breq	.+2      	; 0xa5a <rand_hard+0x94>
     a58:	c3 cf       	rjmp	.-122    	; 0x9e0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a64:	80 91 02 01 	lds	r24, 0x0102
     a68:	98 2f       	mov	r25, r24
     a6a:	99 0f       	add	r25, r25
     a6c:	99 0f       	add	r25, r25
     a6e:	99 0f       	add	r25, r25
     a70:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a72:	90 91 14 01 	lds	r25, 0x0114
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	29 0f       	add	r18, r25
     a7a:	20 93 14 01 	sts	0x0114, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     a7e:	28 2f       	mov	r18, r24
     a80:	22 95       	swap	r18
     a82:	26 95       	lsr	r18
     a84:	27 70       	andi	r18, 0x07	; 7
     a86:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     a88:	96 95       	lsr	r25
     a8a:	96 95       	lsr	r25
     a8c:	89 27       	eor	r24, r25
     a8e:	80 93 02 01 	sts	0x0102, r24
    return seed;
}
     a92:	08 95       	ret

00000a94 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a94:	80 93 02 01 	sts	0x0102, r24
     a98:	08 95       	ret

00000a9a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a9a:	80 91 4d 01 	lds	r24, 0x014D
     a9e:	81 11       	cpse	r24, r1
     aa0:	16 c0       	rjmp	.+44     	; 0xace <get_voltage+0x34>
        cli();                                    // disable interrupts
     aa2:	f8 94       	cli
        adc_setup_conversion(6);
     aa4:	86 e0       	ldi	r24, 0x06	; 6
     aa6:	80 93 7c 00 	sts	0x007C, r24
     aaa:	83 e8       	ldi	r24, 0x83	; 131
     aac:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     ab0:	80 91 7a 00 	lds	r24, 0x007A
     ab4:	80 64       	ori	r24, 0x40	; 64
     ab6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     aba:	80 91 7a 00 	lds	r24, 0x007A
     abe:	86 fd       	sbrc	r24, 6
     ac0:	fc cf       	rjmp	.-8      	; 0xaba <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     ac2:	80 91 78 00 	lds	r24, 0x0078
     ac6:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     aca:	78 94       	sei
     acc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     ad2:	08 95       	ret

00000ad4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     ad4:	2f 92       	push	r2
     ad6:	3f 92       	push	r3
     ad8:	4f 92       	push	r4
     ada:	5f 92       	push	r5
     adc:	6f 92       	push	r6
     ade:	7f 92       	push	r7
     ae0:	8f 92       	push	r8
     ae2:	9f 92       	push	r9
     ae4:	af 92       	push	r10
     ae6:	bf 92       	push	r11
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	00 d0       	rcall	.+0      	; 0xafa <estimate_distance+0x26>
     afa:	00 d0       	rcall	.+0      	; 0xafc <estimate_distance+0x28>
     afc:	00 d0       	rcall	.+0      	; 0xafe <estimate_distance+0x2a>
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     b04:	dc 01       	movw	r26, r24
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	0d 90       	ld	r0, X+
     b0a:	bc 91       	ld	r27, X
     b0c:	a0 2d       	mov	r26, r0
     b0e:	be 83       	std	Y+6, r27	; 0x06
     b10:	ad 83       	std	Y+5, r26	; 0x05
     b12:	a4 38       	cpi	r26, 0x84	; 132
     b14:	e3 e0       	ldi	r30, 0x03	; 3
     b16:	be 07       	cpc	r27, r30
     b18:	0c f0       	brlt	.+2      	; 0xb1c <estimate_distance+0x48>
     b1a:	c9 c0       	rjmp	.+402    	; 0xcae <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
     b1c:	80 91 27 01 	lds	r24, 0x0127
     b20:	90 91 28 01 	lds	r25, 0x0128
     b24:	8a 17       	cp	r24, r26
     b26:	9b 07       	cpc	r25, r27
     b28:	08 f4       	brcc	.+2      	; 0xb2c <estimate_distance+0x58>
     b2a:	37 c1       	rjmp	.+622    	; 0xd9a <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     b2c:	00 91 29 01 	lds	r16, 0x0129
     b30:	10 91 2a 01 	lds	r17, 0x012A
     b34:	0a 17       	cp	r16, r26
     b36:	1b 07       	cpc	r17, r27
     b38:	08 f4       	brcc	.+2      	; 0xb3c <estimate_distance+0x68>
     b3a:	2f c2       	rjmp	.+1118   	; 0xf9a <estimate_distance+0x4c6>
     b3c:	00 91 2b 01 	lds	r16, 0x012B
     b40:	10 91 2c 01 	lds	r17, 0x012C
     b44:	0a 17       	cp	r16, r26
     b46:	1b 07       	cpc	r17, r27
     b48:	08 f4       	brcc	.+2      	; 0xb4c <estimate_distance+0x78>
     b4a:	2f c2       	rjmp	.+1118   	; 0xfaa <estimate_distance+0x4d6>
     b4c:	00 91 2d 01 	lds	r16, 0x012D
     b50:	10 91 2e 01 	lds	r17, 0x012E
     b54:	0a 17       	cp	r16, r26
     b56:	1b 07       	cpc	r17, r27
     b58:	08 f4       	brcc	.+2      	; 0xb5c <estimate_distance+0x88>
     b5a:	2f c2       	rjmp	.+1118   	; 0xfba <estimate_distance+0x4e6>
     b5c:	00 91 2f 01 	lds	r16, 0x012F
     b60:	10 91 30 01 	lds	r17, 0x0130
     b64:	0a 17       	cp	r16, r26
     b66:	1b 07       	cpc	r17, r27
     b68:	08 f4       	brcc	.+2      	; 0xb6c <estimate_distance+0x98>
     b6a:	2f c2       	rjmp	.+1118   	; 0xfca <estimate_distance+0x4f6>
     b6c:	00 91 31 01 	lds	r16, 0x0131
     b70:	10 91 32 01 	lds	r17, 0x0132
     b74:	0a 17       	cp	r16, r26
     b76:	1b 07       	cpc	r17, r27
     b78:	08 f4       	brcc	.+2      	; 0xb7c <estimate_distance+0xa8>
     b7a:	ef c1       	rjmp	.+990    	; 0xf5a <estimate_distance+0x486>
     b7c:	00 91 33 01 	lds	r16, 0x0133
     b80:	10 91 34 01 	lds	r17, 0x0134
     b84:	0a 17       	cp	r16, r26
     b86:	1b 07       	cpc	r17, r27
     b88:	08 f4       	brcc	.+2      	; 0xb8c <estimate_distance+0xb8>
     b8a:	27 c2       	rjmp	.+1102   	; 0xfda <estimate_distance+0x506>
     b8c:	00 91 35 01 	lds	r16, 0x0135
     b90:	10 91 36 01 	lds	r17, 0x0136
     b94:	0a 17       	cp	r16, r26
     b96:	1b 07       	cpc	r17, r27
     b98:	08 f4       	brcc	.+2      	; 0xb9c <estimate_distance+0xc8>
     b9a:	27 c2       	rjmp	.+1102   	; 0xfea <estimate_distance+0x516>
     b9c:	00 91 37 01 	lds	r16, 0x0137
     ba0:	10 91 38 01 	lds	r17, 0x0138
     ba4:	0a 17       	cp	r16, r26
     ba6:	1b 07       	cpc	r17, r27
     ba8:	08 f4       	brcc	.+2      	; 0xbac <estimate_distance+0xd8>
     baa:	27 c2       	rjmp	.+1102   	; 0xffa <estimate_distance+0x526>
     bac:	00 91 39 01 	lds	r16, 0x0139
     bb0:	10 91 3a 01 	lds	r17, 0x013A
     bb4:	0a 17       	cp	r16, r26
     bb6:	1b 07       	cpc	r17, r27
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <estimate_distance+0xe8>
     bba:	27 c2       	rjmp	.+1102   	; 0x100a <estimate_distance+0x536>
     bbc:	00 91 3b 01 	lds	r16, 0x013B
     bc0:	10 91 3c 01 	lds	r17, 0x013C
     bc4:	0a 17       	cp	r16, r26
     bc6:	1b 07       	cpc	r17, r27
     bc8:	08 f4       	brcc	.+2      	; 0xbcc <estimate_distance+0xf8>
     bca:	27 c2       	rjmp	.+1102   	; 0x101a <estimate_distance+0x546>
     bcc:	00 91 3d 01 	lds	r16, 0x013D
     bd0:	10 91 3e 01 	lds	r17, 0x013E
     bd4:	0a 17       	cp	r16, r26
     bd6:	1b 07       	cpc	r17, r27
     bd8:	08 f4       	brcc	.+2      	; 0xbdc <estimate_distance+0x108>
     bda:	23 c2       	rjmp	.+1094   	; 0x1022 <estimate_distance+0x54e>
     bdc:	00 91 3f 01 	lds	r16, 0x013F
     be0:	10 91 40 01 	lds	r17, 0x0140
     be4:	0a 17       	cp	r16, r26
     be6:	1b 07       	cpc	r17, r27
     be8:	08 f4       	brcc	.+2      	; 0xbec <estimate_distance+0x118>
     bea:	23 c2       	rjmp	.+1094   	; 0x1032 <estimate_distance+0x55e>
     bec:	00 91 41 01 	lds	r16, 0x0141
     bf0:	10 91 42 01 	lds	r17, 0x0142
     bf4:	0a 17       	cp	r16, r26
     bf6:	1b 07       	cpc	r17, r27
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <estimate_distance+0x128>
     bfa:	23 c2       	rjmp	.+1094   	; 0x1042 <estimate_distance+0x56e>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a0 ed       	ldi	r26, 0xD0	; 208
     c02:	b0 e4       	ldi	r27, 0x40	; 64
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	ab 83       	std	Y+3, r26	; 0x03
     c0a:	bc 83       	std	Y+4, r27	; 0x04
     c0c:	4c e0       	ldi	r20, 0x0C	; 12
     c0e:	e4 2e       	mov	r14, r20
     c10:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     c12:	f7 01       	movw	r30, r14
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	e9 5d       	subi	r30, 0xD9	; 217
     c1a:	fe 4f       	sbci	r31, 0xFE	; 254
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	b8 01       	movw	r22, r16
     c22:	68 1b       	sub	r22, r24
     c24:	79 0b       	sbc	r23, r25
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__addsf3>
     c36:	6b 01       	movw	r12, r22
     c38:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c3a:	ad 81       	ldd	r26, Y+5	; 0x05
     c3c:	be 81       	ldd	r27, Y+6	; 0x06
     c3e:	bd 01       	movw	r22, r26
     c40:	bb 0f       	add	r27, r27
     c42:	88 0b       	sbc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__floatsisf>
     c4a:	4b 01       	movw	r8, r22
     c4c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     c4e:	b8 01       	movw	r22, r16
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     c58:	2b 01       	movw	r4, r22
     c5a:	3c 01       	movw	r6, r24
     c5c:	29 81       	ldd	r18, Y+1	; 0x01
     c5e:	3a 81       	ldd	r19, Y+2	; 0x02
     c60:	4b 81       	ldd	r20, Y+3	; 0x03
     c62:	5c 81       	ldd	r21, Y+4	; 0x04
     c64:	c7 01       	movw	r24, r14
     c66:	b6 01       	movw	r22, r12
     c68:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	c3 01       	movw	r24, r6
     c72:	b2 01       	movw	r22, r4
     c74:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__subsf3>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c7c:	c5 01       	movw	r24, r10
     c7e:	b4 01       	movw	r22, r8
     c80:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__subsf3>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e2       	ldi	r20, 0x20	; 32
     c8a:	51 e4       	ldi	r21, 0x41	; 65
     c8c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
            b=((int)((int)b/(int)slope));
     c90:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fixsfsi>
     c94:	8b 01       	movw	r16, r22
     c96:	c7 01       	movw	r24, r14
     c98:	b6 01       	movw	r22, r12
     c9a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fixsfsi>
     c9e:	ab 01       	movw	r20, r22
     ca0:	bc 01       	movw	r22, r24
     ca2:	c8 01       	movw	r24, r16
     ca4:	ba 01       	movw	r22, r20
     ca6:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
            dist_high=b;
     caa:	16 2f       	mov	r17, r22
     cac:	77 c0       	rjmp	.+238    	; 0xd9c <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     cae:	dc 01       	movw	r26, r24
     cb0:	cd 90       	ld	r12, X+
     cb2:	dc 90       	ld	r13, X
     cb4:	80 91 4e 01 	lds	r24, 0x014E
     cb8:	90 91 4f 01 	lds	r25, 0x014F
     cbc:	8c 15       	cp	r24, r12
     cbe:	9d 05       	cpc	r25, r13
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <estimate_distance+0x1f0>
     cc2:	8c c0       	rjmp	.+280    	; 0xddc <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     cc4:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     cc6:	e0 90 50 01 	lds	r14, 0x0150
     cca:	f0 90 51 01 	lds	r15, 0x0151
     cce:	ec 14       	cp	r14, r12
     cd0:	fd 04       	cpc	r15, r13
     cd2:	08 f4       	brcc	.+2      	; 0xcd6 <estimate_distance+0x202>
     cd4:	5e c1       	rjmp	.+700    	; 0xf92 <estimate_distance+0x4be>
     cd6:	e0 90 52 01 	lds	r14, 0x0152
     cda:	f0 90 53 01 	lds	r15, 0x0153
     cde:	ec 14       	cp	r14, r12
     ce0:	fd 04       	cpc	r15, r13
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <estimate_distance+0x212>
     ce4:	5e c1       	rjmp	.+700    	; 0xfa2 <estimate_distance+0x4ce>
     ce6:	e0 90 54 01 	lds	r14, 0x0154
     cea:	f0 90 55 01 	lds	r15, 0x0155
     cee:	ec 14       	cp	r14, r12
     cf0:	fd 04       	cpc	r15, r13
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <estimate_distance+0x222>
     cf4:	5e c1       	rjmp	.+700    	; 0xfb2 <estimate_distance+0x4de>
     cf6:	e0 90 56 01 	lds	r14, 0x0156
     cfa:	f0 90 57 01 	lds	r15, 0x0157
     cfe:	ec 14       	cp	r14, r12
     d00:	fd 04       	cpc	r15, r13
     d02:	08 f4       	brcc	.+2      	; 0xd06 <estimate_distance+0x232>
     d04:	5e c1       	rjmp	.+700    	; 0xfc2 <estimate_distance+0x4ee>
     d06:	e0 90 58 01 	lds	r14, 0x0158
     d0a:	f0 90 59 01 	lds	r15, 0x0159
     d0e:	ec 14       	cp	r14, r12
     d10:	fd 04       	cpc	r15, r13
     d12:	08 f4       	brcc	.+2      	; 0xd16 <estimate_distance+0x242>
     d14:	c3 c0       	rjmp	.+390    	; 0xe9c <estimate_distance+0x3c8>
     d16:	e0 90 5a 01 	lds	r14, 0x015A
     d1a:	f0 90 5b 01 	lds	r15, 0x015B
     d1e:	ec 14       	cp	r14, r12
     d20:	fd 04       	cpc	r15, r13
     d22:	08 f4       	brcc	.+2      	; 0xd26 <estimate_distance+0x252>
     d24:	56 c1       	rjmp	.+684    	; 0xfd2 <estimate_distance+0x4fe>
     d26:	e0 90 5c 01 	lds	r14, 0x015C
     d2a:	f0 90 5d 01 	lds	r15, 0x015D
     d2e:	ec 14       	cp	r14, r12
     d30:	fd 04       	cpc	r15, r13
     d32:	08 f4       	brcc	.+2      	; 0xd36 <estimate_distance+0x262>
     d34:	56 c1       	rjmp	.+684    	; 0xfe2 <estimate_distance+0x50e>
     d36:	e0 90 5e 01 	lds	r14, 0x015E
     d3a:	f0 90 5f 01 	lds	r15, 0x015F
     d3e:	ec 14       	cp	r14, r12
     d40:	fd 04       	cpc	r15, r13
     d42:	08 f4       	brcc	.+2      	; 0xd46 <estimate_distance+0x272>
     d44:	56 c1       	rjmp	.+684    	; 0xff2 <estimate_distance+0x51e>
     d46:	e0 90 60 01 	lds	r14, 0x0160
     d4a:	f0 90 61 01 	lds	r15, 0x0161
     d4e:	ec 14       	cp	r14, r12
     d50:	fd 04       	cpc	r15, r13
     d52:	08 f4       	brcc	.+2      	; 0xd56 <estimate_distance+0x282>
     d54:	56 c1       	rjmp	.+684    	; 0x1002 <estimate_distance+0x52e>
     d56:	e0 90 62 01 	lds	r14, 0x0162
     d5a:	f0 90 63 01 	lds	r15, 0x0163
     d5e:	ec 14       	cp	r14, r12
     d60:	fd 04       	cpc	r15, r13
     d62:	08 f4       	brcc	.+2      	; 0xd66 <estimate_distance+0x292>
     d64:	56 c1       	rjmp	.+684    	; 0x1012 <estimate_distance+0x53e>
     d66:	e0 90 64 01 	lds	r14, 0x0164
     d6a:	f0 90 65 01 	lds	r15, 0x0165
     d6e:	ec 14       	cp	r14, r12
     d70:	fd 04       	cpc	r15, r13
     d72:	08 f4       	brcc	.+2      	; 0xd76 <estimate_distance+0x2a2>
     d74:	5a c1       	rjmp	.+692    	; 0x102a <estimate_distance+0x556>
     d76:	e0 90 66 01 	lds	r14, 0x0166
     d7a:	f0 90 67 01 	lds	r15, 0x0167
     d7e:	ec 14       	cp	r14, r12
     d80:	fd 04       	cpc	r15, r13
     d82:	08 f4       	brcc	.+2      	; 0xd86 <estimate_distance+0x2b2>
     d84:	5a c1       	rjmp	.+692    	; 0x103a <estimate_distance+0x566>
     d86:	e0 90 68 01 	lds	r14, 0x0168
     d8a:	f0 90 69 01 	lds	r15, 0x0169
     d8e:	ec 14       	cp	r14, r12
     d90:	fd 04       	cpc	r15, r13
     d92:	08 f4       	brcc	.+2      	; 0xd96 <estimate_distance+0x2c2>
     d94:	5a c1       	rjmp	.+692    	; 0x104a <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d96:	0a e5       	ldi	r16, 0x5A	; 90
     d98:	31 c0       	rjmp	.+98     	; 0xdfc <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     d9a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     d9c:	ed 81       	ldd	r30, Y+5	; 0x05
     d9e:	fe 81       	ldd	r31, Y+6	; 0x06
     da0:	ed 3b       	cpi	r30, 0xBD	; 189
     da2:	f2 40       	sbci	r31, 0x02	; 2
     da4:	fc f4       	brge	.+62     	; 0xde4 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     da6:	81 e2       	ldi	r24, 0x21	; 33
     da8:	81 0f       	add	r24, r17
    }
}
     daa:	26 96       	adiw	r28, 0x06	; 6
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	bf 90       	pop	r11
     dc8:	af 90       	pop	r10
     dca:	9f 90       	pop	r9
     dcc:	8f 90       	pop	r8
     dce:	7f 90       	pop	r7
     dd0:	6f 90       	pop	r6
     dd2:	5f 90       	pop	r5
     dd4:	4f 90       	pop	r4
     dd6:	3f 90       	pop	r3
     dd8:	2f 90       	pop	r2
     dda:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     ddc:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     dde:	81 e2       	ldi	r24, 0x21	; 33
     de0:	80 0f       	add	r24, r16
     de2:	e3 cf       	rjmp	.-58     	; 0xdaa <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     de4:	d1 01       	movw	r26, r2
     de6:	cd 90       	ld	r12, X+
     de8:	dc 90       	ld	r13, X
     dea:	80 91 4e 01 	lds	r24, 0x014E
     dee:	90 91 4f 01 	lds	r25, 0x014F
     df2:	8c 15       	cp	r24, r12
     df4:	9d 05       	cpc	r25, r13
     df6:	08 f0       	brcs	.+2      	; 0xdfa <estimate_distance+0x326>
     df8:	66 cf       	rjmp	.-308    	; 0xcc6 <estimate_distance+0x1f2>
            dist_low=0;
     dfa:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     dfc:	1f 3f       	cpi	r17, 0xFF	; 255
     dfe:	79 f3       	breq	.-34     	; 0xdde <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     e00:	ed 81       	ldd	r30, Y+5	; 0x05
     e02:	fe 81       	ldd	r31, Y+6	; 0x06
     e04:	bf 01       	movw	r22, r30
     e06:	ff 0f       	add	r31, r31
     e08:	88 0b       	sbc	r24, r24
     e0a:	99 0b       	sbc	r25, r25
     e0c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__floatsisf>
     e10:	6b 01       	movw	r12, r22
     e12:	7c 01       	movw	r14, r24
     e14:	61 2f       	mov	r22, r17
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     e20:	4b 01       	movw	r8, r22
     e22:	5c 01       	movw	r10, r24
     e24:	a7 01       	movw	r20, r14
     e26:	96 01       	movw	r18, r12
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e6       	ldi	r24, 0x61	; 97
     e2e:	94 e4       	ldi	r25, 0x44	; 68
     e30:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__subsf3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c5 01       	movw	r24, r10
     e3a:	b4 01       	movw	r22, r8
     e3c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     e40:	4b 01       	movw	r8, r22
     e42:	5c 01       	movw	r10, r24
     e44:	60 2f       	mov	r22, r16
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     e50:	2b 01       	movw	r4, r22
     e52:	3c 01       	movw	r6, r24
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	4f e2       	ldi	r20, 0x2F	; 47
     e5a:	54 e4       	ldi	r21, 0x44	; 68
     e5c:	c7 01       	movw	r24, r14
     e5e:	b6 01       	movw	r22, r12
     e60:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__subsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c3 01       	movw	r24, r6
     e6a:	b2 01       	movw	r22, r4
     e6c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	c5 01       	movw	r24, r10
     e76:	b4 01       	movw	r22, r8
     e78:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__addsf3>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	48 e4       	ldi	r20, 0x48	; 72
     e82:	53 e4       	ldi	r21, 0x43	; 67
     e84:	0e 94 4f 0c 	call	0x189e	; 0x189e <__divsf3>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	44 e0       	ldi	r20, 0x04	; 4
     e8e:	52 e4       	ldi	r21, 0x42	; 66
     e90:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__addsf3>
     e94:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__fixunssfsi>
     e98:	86 2f       	mov	r24, r22
     e9a:	87 cf       	rjmp	.-242    	; 0xdaa <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e9c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     e9e:	85 e0       	ldi	r24, 0x05	; 5
     ea0:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	fc 01       	movw	r30, r24
     ea8:	e4 5b       	subi	r30, 0xB4	; 180
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	b7 01       	movw	r22, r14
     eb2:	68 1b       	sub	r22, r24
     eb4:	79 0b       	sbc	r23, r25
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
     ec2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__addsf3>
     ec6:	4b 01       	movw	r8, r22
     ec8:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     eca:	b6 01       	movw	r22, r12
     ecc:	dd 0c       	add	r13, r13
     ece:	88 0b       	sbc	r24, r24
     ed0:	99 0b       	sbc	r25, r25
     ed2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__floatsisf>
     ed6:	2b 01       	movw	r4, r22
     ed8:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     eda:	b7 01       	movw	r22, r14
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     ee4:	6b 01       	movw	r12, r22
     ee6:	7c 01       	movw	r14, r24
     ee8:	60 2f       	mov	r22, r16
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	a9 01       	movw	r20, r18
     f06:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__addsf3>
     f0a:	a5 01       	movw	r20, r10
     f0c:	94 01       	movw	r18, r8
     f0e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	c7 01       	movw	r24, r14
     f18:	b6 01       	movw	r22, r12
     f1a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__subsf3>
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     f22:	c3 01       	movw	r24, r6
     f24:	b2 01       	movw	r22, r4
     f26:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__subsf3>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
                b=((int)((int)b/(int)slope));
     f36:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fixsfsi>
     f3a:	7b 01       	movw	r14, r22
     f3c:	c5 01       	movw	r24, r10
     f3e:	b4 01       	movw	r22, r8
     f40:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__fixsfsi>
     f44:	ab 01       	movw	r20, r22
     f46:	bc 01       	movw	r22, r24
     f48:	c7 01       	movw	r24, r14
     f4a:	ba 01       	movw	r22, r20
     f4c:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
                dist_low=b;
     f50:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     f52:	6f 3f       	cpi	r22, 0xFF	; 255
     f54:	09 f0       	breq	.+2      	; 0xf58 <estimate_distance+0x484>
     f56:	52 cf       	rjmp	.-348    	; 0xdfc <estimate_distance+0x328>
     f58:	26 cf       	rjmp	.-436    	; 0xda6 <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f5a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     f5c:	85 e0       	ldi	r24, 0x05	; 5
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	7c 01       	movw	r14, r24
     f62:	f1 e0       	ldi	r31, 0x01	; 1
     f64:	ef 1a       	sub	r14, r31
     f66:	f1 08       	sbc	r15, r1
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__floatunsisf>
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	a9 01       	movw	r20, r18
     f84:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__addsf3>
     f88:	69 83       	std	Y+1, r22	; 0x01
     f8a:	7a 83       	std	Y+2, r23	; 0x02
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     f90:	40 ce       	rjmp	.-896    	; 0xc12 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f92:	01 e0       	ldi	r16, 0x01	; 1
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	84 cf       	rjmp	.-248    	; 0xea2 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	df cf       	rjmp	.-66     	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fa2:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	7c cf       	rjmp	.-264    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     faa:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	d7 cf       	rjmp	.-82     	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fb2:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	74 cf       	rjmp	.-280    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fba:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	cf cf       	rjmp	.-98     	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fc2:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	6c cf       	rjmp	.-296    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fca:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	c7 cf       	rjmp	.-114    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fd2:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     fd4:	86 e0       	ldi	r24, 0x06	; 6
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	64 cf       	rjmp	.-312    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fda:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     fdc:	86 e0       	ldi	r24, 0x06	; 6
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	bf cf       	rjmp	.-130    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fe2:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     fe4:	87 e0       	ldi	r24, 0x07	; 7
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	5c cf       	rjmp	.-328    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fea:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     fec:	87 e0       	ldi	r24, 0x07	; 7
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	b7 cf       	rjmp	.-146    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ff2:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     ff4:	88 e0       	ldi	r24, 0x08	; 8
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	54 cf       	rjmp	.-344    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ffa:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     ffc:	88 e0       	ldi	r24, 0x08	; 8
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	af cf       	rjmp	.-162    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1002:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    1004:	89 e0       	ldi	r24, 0x09	; 9
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	4c cf       	rjmp	.-360    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    100a:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    100c:	89 e0       	ldi	r24, 0x09	; 9
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a7 cf       	rjmp	.-178    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1012:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	44 cf       	rjmp	.-376    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    101a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    101c:	8a e0       	ldi	r24, 0x0A	; 10
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9f cf       	rjmp	.-194    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1022:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1024:	8b e0       	ldi	r24, 0x0B	; 11
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9b cf       	rjmp	.-202    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    102a:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    102c:	8b e0       	ldi	r24, 0x0B	; 11
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	38 cf       	rjmp	.-400    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1032:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1034:	8c e0       	ldi	r24, 0x0C	; 12
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	93 cf       	rjmp	.-218    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    103a:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    103c:	8c e0       	ldi	r24, 0x0C	; 12
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	30 cf       	rjmp	.-416    	; 0xea2 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1042:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1044:	8d e0       	ldi	r24, 0x0D	; 13
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	8b cf       	rjmp	.-234    	; 0xf60 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    104a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    104c:	8d e0       	ldi	r24, 0x0D	; 13
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	28 cf       	rjmp	.-432    	; 0xea2 <estimate_distance+0x3ce>

00001052 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
    tx_clock += tx_increment;
    1074:	20 91 6d 01 	lds	r18, 0x016D
    1078:	30 91 6e 01 	lds	r19, 0x016E
    107c:	80 91 6b 01 	lds	r24, 0x016B
    1080:	90 91 6c 01 	lds	r25, 0x016C
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	90 93 6e 01 	sts	0x016E, r25
    108c:	80 93 6d 01 	sts	0x016D, r24
    tx_increment = 0xFF;
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 6c 01 	sts	0x016C, r25
    1098:	80 93 6b 01 	sts	0x016B, r24
    OCR0A = tx_increment;
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    10a0:	80 91 49 01 	lds	r24, 0x0149
    10a4:	90 91 4a 01 	lds	r25, 0x014A
    10a8:	a0 91 4b 01 	lds	r26, 0x014B
    10ac:	b0 91 4c 01 	lds	r27, 0x014C
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	a1 1d       	adc	r26, r1
    10b4:	b1 1d       	adc	r27, r1
    10b6:	80 93 49 01 	sts	0x0149, r24
    10ba:	90 93 4a 01 	sts	0x014A, r25
    10be:	a0 93 4b 01 	sts	0x014B, r26
    10c2:	b0 93 4c 01 	sts	0x014C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    10c6:	80 91 4d 01 	lds	r24, 0x014D
    10ca:	81 11       	cpse	r24, r1
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <__vector_14+0x9a>
    10ce:	80 91 7c 01 	lds	r24, 0x017C
    10d2:	90 91 7d 01 	lds	r25, 0x017D
    10d6:	20 91 6d 01 	lds	r18, 0x016D
    10da:	30 91 6e 01 	lds	r19, 0x016E
    10de:	82 17       	cp	r24, r18
    10e0:	93 07       	cpc	r25, r19
    10e2:	20 f4       	brcc	.+8      	; 0x10ec <__vector_14+0x9a>
    10e4:	80 91 17 01 	lds	r24, 0x0117
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	89 f0       	breq	.+34     	; 0x110e <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    110e:	e0 91 05 01 	lds	r30, 0x0105
    1112:	f0 91 06 01 	lds	r31, 0x0106
    1116:	09 95       	icall
        if (msg) {
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	41 f3       	breq	.-48     	; 0x10ec <__vector_14+0x9a>
            if (message_send(msg)) {
    111c:	0e 94 11 0b 	call	0x1622	; 0x1622 <message_send>
    1120:	81 11       	cpse	r24, r1
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1124:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <rand>
    1128:	99 27       	eor	r25, r25
    112a:	90 93 6c 01 	sts	0x016C, r25
    112e:	80 93 6b 01 	sts	0x016B, r24
                OCR0A = tx_increment;
    1132:	87 bd       	out	0x27, r24	; 39
    1134:	db cf       	rjmp	.-74     	; 0x10ec <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1136:	e0 91 03 01 	lds	r30, 0x0103
    113a:	f0 91 04 01 	lds	r31, 0x0104
    113e:	09 95       	icall
                tx_clock = 0;
    1140:	10 92 6e 01 	sts	0x016E, r1
    1144:	10 92 6d 01 	sts	0x016D, r1
    1148:	d1 cf       	rjmp	.-94     	; 0x10ec <__vector_14+0x9a>

0000114a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    114a:	80 ff       	sbrs	r24, 0
    114c:	11 c0       	rjmp	.+34     	; 0x1170 <set_color+0x26>
        DDRD |= (1<<5);
    114e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1150:	81 ff       	sbrs	r24, 1
    1152:	11 c0       	rjmp	.+34     	; 0x1176 <set_color+0x2c>
        DDRD |= (1<<4);
    1154:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1156:	82 ff       	sbrs	r24, 2
    1158:	11 c0       	rjmp	.+34     	; 0x117c <set_color+0x32>
        DDRC |= (1<<3);
    115a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    115c:	83 ff       	sbrs	r24, 3
    115e:	11 c0       	rjmp	.+34     	; 0x1182 <set_color+0x38>
        DDRC |= (1<<2);
    1160:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1162:	84 ff       	sbrs	r24, 4
    1164:	11 c0       	rjmp	.+34     	; 0x1188 <set_color+0x3e>
        DDRC |= (1<<5);
    1166:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1168:	85 fd       	sbrc	r24, 5
    116a:	11 c0       	rjmp	.+34     	; 0x118e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    116c:	3c 98       	cbi	0x07, 4	; 7
    116e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1170:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1172:	81 fd       	sbrc	r24, 1
    1174:	ef cf       	rjmp	.-34     	; 0x1154 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1176:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1178:	82 fd       	sbrc	r24, 2
    117a:	ef cf       	rjmp	.-34     	; 0x115a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    117c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    117e:	83 fd       	sbrc	r24, 3
    1180:	ef cf       	rjmp	.-34     	; 0x1160 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1182:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1184:	84 fd       	sbrc	r24, 4
    1186:	ef cf       	rjmp	.-34     	; 0x1166 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1188:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    118a:	85 ff       	sbrs	r24, 5
    118c:	ef cf       	rjmp	.-34     	; 0x116c <set_color+0x22>
        DDRC |= (1<<4);
    118e:	3c 9a       	sbi	0x07, 4	; 7
    1190:	08 95       	ret

00001192 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    rx_timer_off();
    11a0:	10 92 81 00 	sts	0x0081, r1
    11a4:	10 92 85 00 	sts	0x0085, r1
    11a8:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 26 01 	sts	0x0126, r24
    rx_leadingbyte = 1;
    11b2:	80 93 6a 01 	sts	0x016A, r24
    rx_busy = 0;
    11b6:	10 92 4d 01 	sts	0x014D, r1
    adc_trigger_high_gain();
    11ba:	10 92 7c 00 	sts	0x007C, r1
    11be:	93 ea       	ldi	r25, 0xA3	; 163
    11c0:	90 93 7a 00 	sts	0x007A, r25
    11c4:	80 93 7b 00 	sts	0x007B, r24
}
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	0f 90       	pop	r0
    11d2:	1f 90       	pop	r1
    11d4:	18 95       	reti

000011d6 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	4f 93       	push	r20
    11e6:	5f 93       	push	r21
    11e8:	6f 93       	push	r22
    11ea:	7f 93       	push	r23
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    11fc:	20 91 84 00 	lds	r18, 0x0084
    1200:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	40 93 4d 01 	sts	0x014D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    120a:	80 91 26 01 	lds	r24, 0x0126
    120e:	88 23       	and	r24, r24
    1210:	a9 f1       	breq	.+106    	; 0x127c <__vector_23+0xa6>
        rx_timer_on();
    1212:	10 92 85 00 	sts	0x0085, r1
    1216:	10 92 84 00 	sts	0x0084, r1
    121a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    121e:	10 92 7e 01 	sts	0x017E, r1
        rx_leadingbit = 0;
    1222:	10 92 26 01 	sts	0x0126, r1
        if (rx_leadingbyte) {
    1226:	80 91 6a 01 	lds	r24, 0x016A
    122a:	88 23       	and	r24, r24
    122c:	a1 f0       	breq	.+40     	; 0x1256 <__vector_23+0x80>
            adc_finish_conversion();
    122e:	80 91 7a 00 	lds	r24, 0x007A
    1232:	86 fd       	sbrc	r24, 6
    1234:	fc cf       	rjmp	.-8      	; 0x122e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1236:	80 91 78 00 	lds	r24, 0x0078
    123a:	90 91 79 00 	lds	r25, 0x0079
    123e:	90 93 48 01 	sts	0x0148, r25
    1242:	80 93 47 01 	sts	0x0147, r24
            adc_trigger_low_gain();
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 7c 00 	sts	0x007C, r24
    124c:	93 ea       	ldi	r25, 0xA3	; 163
    124e:	90 93 7a 00 	sts	0x007A, r25
    1252:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    127c:	c9 01       	movw	r24, r18
    127e:	87 58       	subi	r24, 0x87	; 135
    1280:	91 09       	sbc	r25, r1
    1282:	84 37       	cpi	r24, 0x74	; 116
    1284:	99 40       	sbci	r25, 0x09	; 9
    1286:	08 f0       	brcs	.+2      	; 0x128a <__vector_23+0xb4>
    1288:	52 c0       	rjmp	.+164    	; 0x132e <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    128a:	26 58       	subi	r18, 0x86	; 134
    128c:	31 09       	sbc	r19, r1
    128e:	a4 ef       	ldi	r26, 0xF4	; 244
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	0e 94 bf 0b 	call	0x177e	; 0x177e <__umulhisi3>
    1296:	aa 27       	eor	r26, r26
    1298:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    129a:	88 30       	cpi	r24, 0x08	; 8
    129c:	91 05       	cpc	r25, r1
    129e:	a1 05       	cpc	r26, r1
    12a0:	b1 05       	cpc	r27, r1
    12a2:	08 f4       	brcc	.+2      	; 0x12a6 <__vector_23+0xd0>
    12a4:	7b c0       	rjmp	.+246    	; 0x139c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    12a6:	40 93 26 01 	sts	0x0126, r20
                if (rx_leadingbyte) {
    12aa:	80 91 6a 01 	lds	r24, 0x016A
    12ae:	81 11       	cpse	r24, r1
    12b0:	52 c0       	rjmp	.+164    	; 0x1356 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    12b2:	80 91 44 01 	lds	r24, 0x0144
    12b6:	e8 2f       	mov	r30, r24
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	e0 59       	subi	r30, 0x90	; 144
    12bc:	fe 4f       	sbci	r31, 0xFE	; 254
    12be:	90 91 7e 01 	lds	r25, 0x017E
    12c2:	90 83       	st	Z, r25
                    rx_byteindex++;
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	80 93 44 01 	sts	0x0144, r24
                    if (rx_byteindex == sizeof(message_t)) {
    12ca:	8c 30       	cpi	r24, 0x0C	; 12
    12cc:	21 f6       	brne	.-120    	; 0x1256 <__vector_23+0x80>
                        rx_timer_off();
    12ce:	10 92 81 00 	sts	0x0081, r1
    12d2:	10 92 85 00 	sts	0x0085, r1
    12d6:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    12da:	40 93 6a 01 	sts	0x016A, r20
                        rx_busy = 0;
    12de:	10 92 4d 01 	sts	0x014D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    12e2:	c0 91 7a 01 	lds	r28, 0x017A
    12e6:	d0 91 7b 01 	lds	r29, 0x017B
    12ea:	80 e7       	ldi	r24, 0x70	; 112
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <message_crc>
    12f2:	c8 17       	cp	r28, r24
    12f4:	d9 07       	cpc	r29, r25
    12f6:	09 f0       	breq	.+2      	; 0x12fa <__vector_23+0x124>
    12f8:	ae cf       	rjmp	.-164    	; 0x1256 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    12fa:	80 91 79 01 	lds	r24, 0x0179
    12fe:	87 ff       	sbrs	r24, 7
    1300:	61 c0       	rjmp	.+194    	; 0x13c4 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1302:	98 e7       	ldi	r25, 0x78	; 120
    1304:	98 0f       	add	r25, r24
    1306:	93 30       	cpi	r25, 0x03	; 3
    1308:	30 f0       	brcs	.+12     	; 0x1316 <__vector_23+0x140>
        motors_off();
    130a:	53 98       	cbi	0x0a, 3	; 10
    130c:	23 98       	cbi	0x04, 3	; 4
    130e:	10 92 b4 00 	sts	0x00B4, r1
    1312:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	fc 01       	movw	r30, r24
    131a:	e0 58       	subi	r30, 0x80	; 128
    131c:	f1 09       	sbc	r31, r1
    131e:	eb 30       	cpi	r30, 0x0B	; 11
    1320:	f1 05       	cpc	r31, r1
    1322:	08 f0       	brcs	.+2      	; 0x1326 <__vector_23+0x150>
    1324:	98 cf       	rjmp	.-208    	; 0x1256 <__vector_23+0x80>
    1326:	e5 5c       	subi	r30, 0xC5	; 197
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    132e:	10 92 81 00 	sts	0x0081, r1
    1332:	10 92 85 00 	sts	0x0085, r1
    1336:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    133a:	40 93 26 01 	sts	0x0126, r20
            rx_leadingbyte = 1;
    133e:	40 93 6a 01 	sts	0x016A, r20
            rx_busy = 0;
    1342:	10 92 4d 01 	sts	0x014D, r1
            adc_trigger_high_gain();
    1346:	10 92 7c 00 	sts	0x007C, r1
    134a:	83 ea       	ldi	r24, 0xA3	; 163
    134c:	80 93 7a 00 	sts	0x007A, r24
    1350:	40 93 7b 00 	sts	0x007B, r20
    1354:	80 cf       	rjmp	.-256    	; 0x1256 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1356:	80 91 7a 00 	lds	r24, 0x007A
    135a:	86 fd       	sbrc	r24, 6
    135c:	fc cf       	rjmp	.-8      	; 0x1356 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    135e:	80 91 78 00 	lds	r24, 0x0078
    1362:	90 91 79 00 	lds	r25, 0x0079
    1366:	90 93 46 01 	sts	0x0146, r25
    136a:	80 93 45 01 	sts	0x0145, r24
                    adc_trigger_high_gain();
    136e:	10 92 7c 00 	sts	0x007C, r1
    1372:	83 ea       	ldi	r24, 0xA3	; 163
    1374:	80 93 7a 00 	sts	0x007A, r24
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    137e:	90 91 7e 01 	lds	r25, 0x017E
    1382:	99 23       	and	r25, r25
    1384:	d1 f0       	breq	.+52     	; 0x13ba <__vector_23+0x1e4>
                        rx_timer_off();
    1386:	10 92 81 00 	sts	0x0081, r1
    138a:	10 92 85 00 	sts	0x0085, r1
    138e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1392:	80 93 6a 01 	sts	0x016A, r24
                        rx_busy = 0;
    1396:	10 92 4d 01 	sts	0x014D, r1
    139a:	5d cf       	rjmp	.-326    	; 0x1256 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    139c:	21 e0       	ldi	r18, 0x01	; 1
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	f9 01       	movw	r30, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <__vector_23+0x1d2>
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <__vector_23+0x1ce>
    13ac:	cf 01       	movw	r24, r30
    13ae:	90 91 7e 01 	lds	r25, 0x017E
    13b2:	89 2b       	or	r24, r25
    13b4:	80 93 7e 01 	sts	0x017E, r24
    13b8:	4e cf       	rjmp	.-356    	; 0x1256 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    13ba:	10 92 6a 01 	sts	0x016A, r1
                        rx_byteindex = 0;
    13be:	10 92 44 01 	sts	0x0144, r1
    13c2:	49 cf       	rjmp	.-366    	; 0x1256 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    13c4:	e0 91 07 01 	lds	r30, 0x0107
    13c8:	f0 91 08 01 	lds	r31, 0x0108
    13cc:	65 e4       	ldi	r22, 0x45	; 69
    13ce:	71 e0       	ldi	r23, 0x01	; 1
    13d0:	80 e7       	ldi	r24, 0x70	; 112
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	09 95       	icall
    13d6:	3f cf       	rjmp	.-386    	; 0x1256 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13d8:	80 91 70 01 	lds	r24, 0x0170
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	09 f4       	brne	.+2      	; 0x13e2 <__vector_23+0x20c>
    13e0:	dd c0       	rjmp	.+442    	; 0x159c <__vector_23+0x3c6>
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <__vector_23+0x210>
    13e4:	ba c0       	rjmp	.+372    	; 0x155a <__vector_23+0x384>
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	09 f4       	brne	.+2      	; 0x13ec <__vector_23+0x216>
    13ea:	c6 c0       	rjmp	.+396    	; 0x1578 <__vector_23+0x3a2>
    13ec:	84 30       	cpi	r24, 0x04	; 4
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <__vector_23+0x21c>
    13f0:	b1 c0       	rjmp	.+354    	; 0x1554 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13f2:	80 91 15 01 	lds	r24, 0x0115
    13f6:	90 91 76 01 	lds	r25, 0x0176
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	09 f4       	brne	.+2      	; 0x1400 <__vector_23+0x22a>
    13fe:	e3 c0       	rjmp	.+454    	; 0x15c6 <__vector_23+0x3f0>
    1400:	80 91 75 01 	lds	r24, 0x0175
                        prev_motion = MOVE_STOP;
    1404:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_STRAIGHT;
    1408:	23 e0       	ldi	r18, 0x03	; 3
    140a:	20 93 15 01 	sts	0x0115, r18
                        kilo_straight_left = calibmsg->straight_left;
    140e:	80 93 81 01 	sts	0x0181, r24
                        kilo_straight_right = calibmsg->straight_right;
    1412:	90 93 82 01 	sts	0x0182, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1416:	80 91 17 01 	lds	r24, 0x0117
    141a:	86 30       	cpi	r24, 0x06	; 6
    141c:	09 f4       	brne	.+2      	; 0x1420 <__vector_23+0x24a>
    141e:	1b cf       	rjmp	.-458    	; 0x1256 <__vector_23+0x80>
                motors_on();
    1420:	53 9a       	sbi	0x0a, 3	; 10
    1422:	23 9a       	sbi	0x04, 3	; 4
    1424:	10 92 b4 00 	sts	0x00B4, r1
    1428:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    142c:	86 e0       	ldi	r24, 0x06	; 6
    142e:	80 93 17 01 	sts	0x0117, r24
    1432:	11 cf       	rjmp	.-478    	; 0x1256 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1434:	80 91 17 01 	lds	r24, 0x0117
    1438:	86 30       	cpi	r24, 0x06	; 6
    143a:	99 f0       	breq	.+38     	; 0x1462 <__vector_23+0x28c>
                motors_on();
    143c:	53 9a       	sbi	0x0a, 3	; 10
    143e:	23 9a       	sbi	0x04, 3	; 4
    1440:	10 92 b4 00 	sts	0x00B4, r1
    1444:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1448:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    144a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    144c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    144e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1450:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1452:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1454:	10 92 15 01 	sts	0x0115, r1
    1458:	10 92 16 01 	sts	0x0116, r1
                kilo_state = MOVING;
    145c:	86 e0       	ldi	r24, 0x06	; 6
    145e:	80 93 17 01 	sts	0x0117, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9c 01       	movw	r18, r24
    1468:	00 90 70 01 	lds	r0, 0x0170
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <__vector_23+0x29c>
    146e:	22 0f       	add	r18, r18
    1470:	33 1f       	adc	r19, r19
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <__vector_23+0x298>
    1476:	80 91 7f 01 	lds	r24, 0x017F
    147a:	90 91 80 01 	lds	r25, 0x0180
    147e:	82 23       	and	r24, r18
    1480:	93 23       	and	r25, r19
    1482:	89 2b       	or	r24, r25
    1484:	09 f0       	breq	.+2      	; 0x1488 <__vector_23+0x2b2>
    1486:	86 c0       	rjmp	.+268    	; 0x1594 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1488:	10 92 15 01 	sts	0x0115, r1
    148c:	e4 ce       	rjmp	.-568    	; 0x1256 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	80 93 17 01 	sts	0x0117, r24
    1494:	e0 ce       	rjmp	.-576    	; 0x1256 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1496:	e0 e0       	ldi	r30, 0x00	; 0
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    149c:	80 91 6e 00 	lds	r24, 0x006E
    14a0:	8d 7f       	andi	r24, 0xFD	; 253
    14a2:	80 93 6e 00 	sts	0x006E, r24
    14a6:	16 bc       	out	0x26, r1	; 38
            bootload();
    14a8:	e0 e0       	ldi	r30, 0x00	; 0
    14aa:	f0 e7       	ldi	r31, 0x70	; 112
    14ac:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    14ae:	10 92 17 01 	sts	0x0117, r1
    14b2:	d1 ce       	rjmp	.-606    	; 0x1256 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	80 93 17 01 	sts	0x0117, r24
    14ba:	cd ce       	rjmp	.-614    	; 0x1256 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	80 93 17 01 	sts	0x0117, r24
    14c2:	c9 ce       	rjmp	.-622    	; 0x1256 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    14c4:	80 91 17 01 	lds	r24, 0x0117
    14c8:	83 30       	cpi	r24, 0x03	; 3
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__vector_23+0x2f8>
    14cc:	c4 ce       	rjmp	.-632    	; 0x1256 <__vector_23+0x80>
    14ce:	80 91 17 01 	lds	r24, 0x0117
    14d2:	84 30       	cpi	r24, 0x04	; 4
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <__vector_23+0x302>
    14d6:	bf ce       	rjmp	.-642    	; 0x1256 <__vector_23+0x80>
                motors_on();
    14d8:	53 9a       	sbi	0x0a, 3	; 10
    14da:	23 9a       	sbi	0x04, 3	; 4
    14dc:	10 92 b4 00 	sts	0x00B4, r1
    14e0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	80 93 17 01 	sts	0x0117, r24
    14ea:	b5 ce       	rjmp	.-662    	; 0x1256 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    14ec:	80 91 17 01 	lds	r24, 0x0117
    14f0:	86 30       	cpi	r24, 0x06	; 6
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <__vector_23+0x320>
    14f4:	b0 ce       	rjmp	.-672    	; 0x1256 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    14f6:	60 91 7f 01 	lds	r22, 0x017F
    14fa:	80 eb       	ldi	r24, 0xB0	; 176
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 56 0e 	call	0x1cac	; 0x1cac <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1502:	60 91 80 01 	lds	r22, 0x0180
    1506:	81 eb       	ldi	r24, 0xB1	; 177
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    150e:	60 91 83 01 	lds	r22, 0x0183
    1512:	85 e0       	ldi	r24, 0x05	; 5
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 56 0e 	call	0x1cac	; 0x1cac <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    151a:	60 91 6f 01 	lds	r22, 0x016F
    151e:	89 e0       	ldi	r24, 0x09	; 9
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 56 0e 	call	0x1cac	; 0x1cac <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1526:	60 91 81 01 	lds	r22, 0x0181
    152a:	8c e0       	ldi	r24, 0x0C	; 12
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1532:	60 91 82 01 	lds	r22, 0x0182
    1536:	84 e1       	ldi	r24, 0x14	; 20
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <eeprom_write_byte>
                        motors_off();
    153e:	53 98       	cbi	0x0a, 3	; 10
    1540:	23 98       	cbi	0x04, 3	; 4
    1542:	10 92 b4 00 	sts	0x00B4, r1
    1546:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 17 01 	sts	0x0117, r24
    1550:	80 91 70 01 	lds	r24, 0x0170
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1554:	81 11       	cpse	r24, r1
    1556:	5f cf       	rjmp	.-322    	; 0x1416 <__vector_23+0x240>
    1558:	7e ce       	rjmp	.-772    	; 0x1256 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    155a:	88 23       	and	r24, r24
    155c:	39 f2       	breq	.-114    	; 0x14ec <__vector_23+0x316>
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	c9 f7       	brne	.-14     	; 0x1554 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1562:	80 91 71 01 	lds	r24, 0x0171
    1566:	90 91 72 01 	lds	r25, 0x0172
    156a:	90 93 80 01 	sts	0x0180, r25
    156e:	80 93 7f 01 	sts	0x017F, r24
                    cur_motion = MOVE_STOP;
    1572:	10 92 15 01 	sts	0x0115, r1
    1576:	4f cf       	rjmp	.-354    	; 0x1416 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1578:	80 91 15 01 	lds	r24, 0x0115
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	71 f1       	breq	.+92     	; 0x15dc <__vector_23+0x406>
    1580:	80 91 74 01 	lds	r24, 0x0174
                        prev_motion = MOVE_STOP;
    1584:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_RIGHT;
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_right = calibmsg->turn_right;
    158e:	80 93 6f 01 	sts	0x016F, r24
    1592:	41 cf       	rjmp	.-382    	; 0x1416 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 15 01 	sts	0x0115, r24
    159a:	5d ce       	rjmp	.-838    	; 0x1256 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    159c:	80 91 15 01 	lds	r24, 0x0115
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	51 f0       	breq	.+20     	; 0x15b8 <__vector_23+0x3e2>
    15a4:	80 91 73 01 	lds	r24, 0x0173
                        prev_motion = MOVE_STOP;
    15a8:	10 92 16 01 	sts	0x0116, r1
                        cur_motion = MOVE_LEFT;
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	90 93 15 01 	sts	0x0115, r25
                        kilo_turn_left = calibmsg->turn_left;
    15b2:	80 93 83 01 	sts	0x0183, r24
    15b6:	2f cf       	rjmp	.-418    	; 0x1416 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    15b8:	80 91 73 01 	lds	r24, 0x0173
    15bc:	90 91 83 01 	lds	r25, 0x0183
    15c0:	89 13       	cpse	r24, r25
    15c2:	f2 cf       	rjmp	.-28     	; 0x15a8 <__vector_23+0x3d2>
    15c4:	28 cf       	rjmp	.-432    	; 0x1416 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    15c6:	80 91 82 01 	lds	r24, 0x0182
    15ca:	98 13       	cpse	r25, r24
    15cc:	19 cf       	rjmp	.-462    	; 0x1400 <__vector_23+0x22a>
    15ce:	80 91 75 01 	lds	r24, 0x0175
    15d2:	20 91 81 01 	lds	r18, 0x0181
    15d6:	82 13       	cpse	r24, r18
    15d8:	15 cf       	rjmp	.-470    	; 0x1404 <__vector_23+0x22e>
    15da:	1d cf       	rjmp	.-454    	; 0x1416 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    15dc:	80 91 74 01 	lds	r24, 0x0174
    15e0:	90 91 6f 01 	lds	r25, 0x016F
    15e4:	89 13       	cpse	r24, r25
    15e6:	ce cf       	rjmp	.-100    	; 0x1584 <__vector_23+0x3ae>
    15e8:	16 cf       	rjmp	.-468    	; 0x1416 <__vector_23+0x240>

000015ea <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    15ea:	fc 01       	movw	r30, r24
    15ec:	ac 01       	movw	r20, r24
    15ee:	46 5f       	subi	r20, 0xF6	; 246
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    15f6:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    15f8:	82 27       	eor	r24, r18
    15fa:	08 2e       	mov	r0, r24
    15fc:	82 95       	swap	r24
    15fe:	80 7f       	andi	r24, 0xF0	; 240
    1600:	80 25       	eor	r24, r0
    1602:	09 2e       	mov	r0, r25
    1604:	98 2f       	mov	r25, r24
    1606:	82 95       	swap	r24
    1608:	8f 70       	andi	r24, 0x0F	; 15
    160a:	08 26       	eor	r0, r24
    160c:	86 95       	lsr	r24
    160e:	98 27       	eor	r25, r24
    1610:	89 27       	eor	r24, r25
    1612:	88 0f       	add	r24, r24
    1614:	88 0f       	add	r24, r24
    1616:	88 0f       	add	r24, r24
    1618:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    161a:	e4 17       	cp	r30, r20
    161c:	f5 07       	cpc	r31, r21
    161e:	59 f7       	brne	.-42     	; 0x15f6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1620:	08 95       	ret

00001622 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1622:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1624:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1626:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1628:	20 91 43 01 	lds	r18, 0x0143
    or tmpreg1, ddrreg
    162c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    162e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1630:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1632:	30 91 43 01 	lds	r19, 0x0143
    1636:	20 30       	cpi	r18, 0x00	; 0
    1638:	29 f0       	breq	.+10     	; 0x1644 <message_send+0x22>
    163a:	00 00       	nop
    163c:	25 b1       	in	r18, 0x05	; 5
    163e:	23 2b       	or	r18, r19
    1640:	25 b9       	out	0x05, r18	; 5
    1642:	04 c0       	rjmp	.+8      	; 0x164c <message_send+0x2a>
    1644:	00 00       	nop
    1646:	00 00       	nop
    1648:	00 00       	nop
    164a:	00 c0       	rjmp	.+0      	; 0x164c <message_send+0x2a>
    164c:	00 00       	nop
    164e:	00 00       	nop
    1650:	00 00       	nop
    1652:	30 95       	com	r19
    1654:	25 b1       	in	r18, 0x05	; 5
    1656:	23 23       	and	r18, r19
    1658:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    165a:	2e ea       	ldi	r18, 0xAE	; 174
    165c:	2a 95       	dec	r18
    165e:	f1 f7       	brne	.-4      	; 0x165c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1660:	2b ee       	ldi	r18, 0xEB	; 235

00001662 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1662:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1664:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1666:	0a c0       	rjmp	.+20     	; 0x167c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1668:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    166a:	30 91 43 01 	lds	r19, 0x0143
    com tmpreg2
    166e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1670:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1672:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1674:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1676:	0f be       	out	0x3f, r0	; 63
    return 0
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	08 95       	ret

0000167c <nocollision>:
nocollision:
    nop
    167c:	00 00       	nop
    dec tmpreg1
    167e:	2a 95       	dec	r18
    brne checkcollision
    1680:	81 f7       	brne	.-32     	; 0x1662 <checkcollision>

    ldi tmpreg1, 0x01
    1682:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1684:	30 91 43 01 	lds	r19, 0x0143
    1688:	20 30       	cpi	r18, 0x00	; 0
    168a:	29 f0       	breq	.+10     	; 0x1696 <nocollision+0x1a>
    168c:	00 00       	nop
    168e:	25 b1       	in	r18, 0x05	; 5
    1690:	23 2b       	or	r18, r19
    1692:	25 b9       	out	0x05, r18	; 5
    1694:	04 c0       	rjmp	.+8      	; 0x169e <nocollision+0x22>
    1696:	00 00       	nop
    1698:	00 00       	nop
    169a:	00 00       	nop
    169c:	00 c0       	rjmp	.+0      	; 0x169e <nocollision+0x22>
    169e:	00 00       	nop
    16a0:	00 00       	nop
    16a2:	00 00       	nop
    16a4:	30 95       	com	r19
    16a6:	25 b1       	in	r18, 0x05	; 5
    16a8:	23 23       	and	r18, r19
    16aa:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    16ac:	00 00       	nop
    16ae:	24 e5       	ldi	r18, 0x54	; 84
    16b0:	2a 95       	dec	r18
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    16b4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    16b6:	8c e0       	ldi	r24, 0x0C	; 12

000016b8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    16b8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    16bc:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    16be:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    16c0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    16c2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    16c4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    16c8:	50 e0       	ldi	r21, 0x00	; 0

000016ca <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    16ca:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    16cc:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    16ce:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    16d0:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    16d2:	30 91 43 01 	lds	r19, 0x0143
    16d6:	20 30       	cpi	r18, 0x00	; 0
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <sendbit+0x1a>
    16da:	00 00       	nop
    16dc:	25 b1       	in	r18, 0x05	; 5
    16de:	23 2b       	or	r18, r19
    16e0:	25 b9       	out	0x05, r18	; 5
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <sendbit+0x22>
    16e4:	00 00       	nop
    16e6:	00 00       	nop
    16e8:	00 00       	nop
    16ea:	00 c0       	rjmp	.+0      	; 0x16ec <sendbit+0x22>
    16ec:	00 00       	nop
    16ee:	00 00       	nop
    16f0:	00 00       	nop
    16f2:	30 95       	com	r19
    16f4:	25 b1       	in	r18, 0x05	; 5
    16f6:	23 23       	and	r18, r19
    16f8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    16fa:	00 00       	nop
    16fc:	21 e5       	ldi	r18, 0x51	; 81
    16fe:	2a 95       	dec	r18
    1700:	f1 f7       	brne	.-4      	; 0x16fe <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1702:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1704:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1706:	9a 95       	dec	r25
    brne sendbit
    1708:	01 f7       	brne	.-64     	; 0x16ca <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    170a:	8a 95       	dec	r24
    brne sendbyte
    170c:	a9 f6       	brne	.-86     	; 0x16b8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    170e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1710:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1712:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1714:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1716:	30 91 43 01 	lds	r19, 0x0143
    com tmpreg2
    171a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    171c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    171e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1720:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1722:	0f be       	out	0x3f, r0	; 63
    return 1
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	08 95       	ret

00001728 <main>:
    }
}

int main()
{
    kilo_init();
    1728:	0e 94 25 02 	call	0x44a	; 0x44a <kilo_init>
    kilo_message_rx = message_rx;
    172c:	82 e7       	ldi	r24, 0x72	; 114
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	90 93 08 01 	sts	0x0108, r25
    1734:	80 93 07 01 	sts	0x0107, r24
    kilo_start(setup, loop);
    1738:	6e eb       	ldi	r22, 0xBE	; 190
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	81 e7       	ldi	r24, 0x71	; 113
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 21 03 	call	0x642	; 0x642 <kilo_start>
    
    return 0;
}
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	08 95       	ret

0000174a <__divmodhi4>:
    174a:	97 fb       	bst	r25, 7
    174c:	07 2e       	mov	r0, r23
    174e:	16 f4       	brtc	.+4      	; 0x1754 <__divmodhi4+0xa>
    1750:	00 94       	com	r0
    1752:	07 d0       	rcall	.+14     	; 0x1762 <__divmodhi4_neg1>
    1754:	77 fd       	sbrc	r23, 7
    1756:	09 d0       	rcall	.+18     	; 0x176a <__divmodhi4_neg2>
    1758:	0e 94 ce 0b 	call	0x179c	; 0x179c <__udivmodhi4>
    175c:	07 fc       	sbrc	r0, 7
    175e:	05 d0       	rcall	.+10     	; 0x176a <__divmodhi4_neg2>
    1760:	3e f4       	brtc	.+14     	; 0x1770 <__divmodhi4_exit>

00001762 <__divmodhi4_neg1>:
    1762:	90 95       	com	r25
    1764:	81 95       	neg	r24
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	08 95       	ret

0000176a <__divmodhi4_neg2>:
    176a:	70 95       	com	r23
    176c:	61 95       	neg	r22
    176e:	7f 4f       	sbci	r23, 0xFF	; 255

00001770 <__divmodhi4_exit>:
    1770:	08 95       	ret

00001772 <__tablejump2__>:
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	05 90       	lpm	r0, Z+
    1778:	f4 91       	lpm	r31, Z
    177a:	e0 2d       	mov	r30, r0
    177c:	09 94       	ijmp

0000177e <__umulhisi3>:
    177e:	a2 9f       	mul	r26, r18
    1780:	b0 01       	movw	r22, r0
    1782:	b3 9f       	mul	r27, r19
    1784:	c0 01       	movw	r24, r0
    1786:	a3 9f       	mul	r26, r19
    1788:	70 0d       	add	r23, r0
    178a:	81 1d       	adc	r24, r1
    178c:	11 24       	eor	r1, r1
    178e:	91 1d       	adc	r25, r1
    1790:	b2 9f       	mul	r27, r18
    1792:	70 0d       	add	r23, r0
    1794:	81 1d       	adc	r24, r1
    1796:	11 24       	eor	r1, r1
    1798:	91 1d       	adc	r25, r1
    179a:	08 95       	ret

0000179c <__udivmodhi4>:
    179c:	aa 1b       	sub	r26, r26
    179e:	bb 1b       	sub	r27, r27
    17a0:	51 e1       	ldi	r21, 0x11	; 17
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <__udivmodhi4_ep>

000017a4 <__udivmodhi4_loop>:
    17a4:	aa 1f       	adc	r26, r26
    17a6:	bb 1f       	adc	r27, r27
    17a8:	a6 17       	cp	r26, r22
    17aa:	b7 07       	cpc	r27, r23
    17ac:	10 f0       	brcs	.+4      	; 0x17b2 <__udivmodhi4_ep>
    17ae:	a6 1b       	sub	r26, r22
    17b0:	b7 0b       	sbc	r27, r23

000017b2 <__udivmodhi4_ep>:
    17b2:	88 1f       	adc	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	5a 95       	dec	r21
    17b8:	a9 f7       	brne	.-22     	; 0x17a4 <__udivmodhi4_loop>
    17ba:	80 95       	com	r24
    17bc:	90 95       	com	r25
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	08 95       	ret

000017c4 <__subsf3>:
    17c4:	50 58       	subi	r21, 0x80	; 128

000017c6 <__addsf3>:
    17c6:	bb 27       	eor	r27, r27
    17c8:	aa 27       	eor	r26, r26
    17ca:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__addsf3x>
    17ce:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_round>
    17d2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__fp_pscA>
    17d6:	38 f0       	brcs	.+14     	; 0x17e6 <__addsf3+0x20>
    17d8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__fp_pscB>
    17dc:	20 f0       	brcs	.+8      	; 0x17e6 <__addsf3+0x20>
    17de:	39 f4       	brne	.+14     	; 0x17ee <__addsf3+0x28>
    17e0:	9f 3f       	cpi	r25, 0xFF	; 255
    17e2:	19 f4       	brne	.+6      	; 0x17ea <__addsf3+0x24>
    17e4:	26 f4       	brtc	.+8      	; 0x17ee <__addsf3+0x28>
    17e6:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__fp_nan>
    17ea:	0e f4       	brtc	.+2      	; 0x17ee <__addsf3+0x28>
    17ec:	e0 95       	com	r30
    17ee:	e7 fb       	bst	r30, 7
    17f0:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__fp_inf>

000017f4 <__addsf3x>:
    17f4:	e9 2f       	mov	r30, r25
    17f6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__fp_split3>
    17fa:	58 f3       	brcs	.-42     	; 0x17d2 <__addsf3+0xc>
    17fc:	ba 17       	cp	r27, r26
    17fe:	62 07       	cpc	r22, r18
    1800:	73 07       	cpc	r23, r19
    1802:	84 07       	cpc	r24, r20
    1804:	95 07       	cpc	r25, r21
    1806:	20 f0       	brcs	.+8      	; 0x1810 <__addsf3x+0x1c>
    1808:	79 f4       	brne	.+30     	; 0x1828 <__addsf3x+0x34>
    180a:	a6 f5       	brtc	.+104    	; 0x1874 <__addsf3x+0x80>
    180c:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_zero>
    1810:	0e f4       	brtc	.+2      	; 0x1814 <__addsf3x+0x20>
    1812:	e0 95       	com	r30
    1814:	0b 2e       	mov	r0, r27
    1816:	ba 2f       	mov	r27, r26
    1818:	a0 2d       	mov	r26, r0
    181a:	0b 01       	movw	r0, r22
    181c:	b9 01       	movw	r22, r18
    181e:	90 01       	movw	r18, r0
    1820:	0c 01       	movw	r0, r24
    1822:	ca 01       	movw	r24, r20
    1824:	a0 01       	movw	r20, r0
    1826:	11 24       	eor	r1, r1
    1828:	ff 27       	eor	r31, r31
    182a:	59 1b       	sub	r21, r25
    182c:	99 f0       	breq	.+38     	; 0x1854 <__addsf3x+0x60>
    182e:	59 3f       	cpi	r21, 0xF9	; 249
    1830:	50 f4       	brcc	.+20     	; 0x1846 <__addsf3x+0x52>
    1832:	50 3e       	cpi	r21, 0xE0	; 224
    1834:	68 f1       	brcs	.+90     	; 0x1890 <__addsf3x+0x9c>
    1836:	1a 16       	cp	r1, r26
    1838:	f0 40       	sbci	r31, 0x00	; 0
    183a:	a2 2f       	mov	r26, r18
    183c:	23 2f       	mov	r18, r19
    183e:	34 2f       	mov	r19, r20
    1840:	44 27       	eor	r20, r20
    1842:	58 5f       	subi	r21, 0xF8	; 248
    1844:	f3 cf       	rjmp	.-26     	; 0x182c <__addsf3x+0x38>
    1846:	46 95       	lsr	r20
    1848:	37 95       	ror	r19
    184a:	27 95       	ror	r18
    184c:	a7 95       	ror	r26
    184e:	f0 40       	sbci	r31, 0x00	; 0
    1850:	53 95       	inc	r21
    1852:	c9 f7       	brne	.-14     	; 0x1846 <__addsf3x+0x52>
    1854:	7e f4       	brtc	.+30     	; 0x1874 <__addsf3x+0x80>
    1856:	1f 16       	cp	r1, r31
    1858:	ba 0b       	sbc	r27, r26
    185a:	62 0b       	sbc	r22, r18
    185c:	73 0b       	sbc	r23, r19
    185e:	84 0b       	sbc	r24, r20
    1860:	ba f0       	brmi	.+46     	; 0x1890 <__addsf3x+0x9c>
    1862:	91 50       	subi	r25, 0x01	; 1
    1864:	a1 f0       	breq	.+40     	; 0x188e <__addsf3x+0x9a>
    1866:	ff 0f       	add	r31, r31
    1868:	bb 1f       	adc	r27, r27
    186a:	66 1f       	adc	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	c2 f7       	brpl	.-16     	; 0x1862 <__addsf3x+0x6e>
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <__addsf3x+0x9c>
    1874:	ba 0f       	add	r27, r26
    1876:	62 1f       	adc	r22, r18
    1878:	73 1f       	adc	r23, r19
    187a:	84 1f       	adc	r24, r20
    187c:	48 f4       	brcc	.+18     	; 0x1890 <__addsf3x+0x9c>
    187e:	87 95       	ror	r24
    1880:	77 95       	ror	r23
    1882:	67 95       	ror	r22
    1884:	b7 95       	ror	r27
    1886:	f7 95       	ror	r31
    1888:	9e 3f       	cpi	r25, 0xFE	; 254
    188a:	08 f0       	brcs	.+2      	; 0x188e <__addsf3x+0x9a>
    188c:	b0 cf       	rjmp	.-160    	; 0x17ee <__addsf3+0x28>
    188e:	93 95       	inc	r25
    1890:	88 0f       	add	r24, r24
    1892:	08 f0       	brcs	.+2      	; 0x1896 <__addsf3x+0xa2>
    1894:	99 27       	eor	r25, r25
    1896:	ee 0f       	add	r30, r30
    1898:	97 95       	ror	r25
    189a:	87 95       	ror	r24
    189c:	08 95       	ret

0000189e <__divsf3>:
    189e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__divsf3x>
    18a2:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_round>
    18a6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__fp_pscB>
    18aa:	58 f0       	brcs	.+22     	; 0x18c2 <__divsf3+0x24>
    18ac:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__fp_pscA>
    18b0:	40 f0       	brcs	.+16     	; 0x18c2 <__divsf3+0x24>
    18b2:	29 f4       	brne	.+10     	; 0x18be <__divsf3+0x20>
    18b4:	5f 3f       	cpi	r21, 0xFF	; 255
    18b6:	29 f0       	breq	.+10     	; 0x18c2 <__divsf3+0x24>
    18b8:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__fp_inf>
    18bc:	51 11       	cpse	r21, r1
    18be:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__fp_szero>
    18c2:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__fp_nan>

000018c6 <__divsf3x>:
    18c6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__fp_split3>
    18ca:	68 f3       	brcs	.-38     	; 0x18a6 <__divsf3+0x8>

000018cc <__divsf3_pse>:
    18cc:	99 23       	and	r25, r25
    18ce:	b1 f3       	breq	.-20     	; 0x18bc <__divsf3+0x1e>
    18d0:	55 23       	and	r21, r21
    18d2:	91 f3       	breq	.-28     	; 0x18b8 <__divsf3+0x1a>
    18d4:	95 1b       	sub	r25, r21
    18d6:	55 0b       	sbc	r21, r21
    18d8:	bb 27       	eor	r27, r27
    18da:	aa 27       	eor	r26, r26
    18dc:	62 17       	cp	r22, r18
    18de:	73 07       	cpc	r23, r19
    18e0:	84 07       	cpc	r24, r20
    18e2:	38 f0       	brcs	.+14     	; 0x18f2 <__divsf3_pse+0x26>
    18e4:	9f 5f       	subi	r25, 0xFF	; 255
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	44 1f       	adc	r20, r20
    18ee:	aa 1f       	adc	r26, r26
    18f0:	a9 f3       	breq	.-22     	; 0x18dc <__divsf3_pse+0x10>
    18f2:	35 d0       	rcall	.+106    	; 0x195e <__divsf3_pse+0x92>
    18f4:	0e 2e       	mov	r0, r30
    18f6:	3a f0       	brmi	.+14     	; 0x1906 <__divsf3_pse+0x3a>
    18f8:	e0 e8       	ldi	r30, 0x80	; 128
    18fa:	32 d0       	rcall	.+100    	; 0x1960 <__divsf3_pse+0x94>
    18fc:	91 50       	subi	r25, 0x01	; 1
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	e6 95       	lsr	r30
    1902:	00 1c       	adc	r0, r0
    1904:	ca f7       	brpl	.-14     	; 0x18f8 <__divsf3_pse+0x2c>
    1906:	2b d0       	rcall	.+86     	; 0x195e <__divsf3_pse+0x92>
    1908:	fe 2f       	mov	r31, r30
    190a:	29 d0       	rcall	.+82     	; 0x195e <__divsf3_pse+0x92>
    190c:	66 0f       	add	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	bb 1f       	adc	r27, r27
    1914:	26 17       	cp	r18, r22
    1916:	37 07       	cpc	r19, r23
    1918:	48 07       	cpc	r20, r24
    191a:	ab 07       	cpc	r26, r27
    191c:	b0 e8       	ldi	r27, 0x80	; 128
    191e:	09 f0       	breq	.+2      	; 0x1922 <__divsf3_pse+0x56>
    1920:	bb 0b       	sbc	r27, r27
    1922:	80 2d       	mov	r24, r0
    1924:	bf 01       	movw	r22, r30
    1926:	ff 27       	eor	r31, r31
    1928:	93 58       	subi	r25, 0x83	; 131
    192a:	5f 4f       	sbci	r21, 0xFF	; 255
    192c:	3a f0       	brmi	.+14     	; 0x193c <__divsf3_pse+0x70>
    192e:	9e 3f       	cpi	r25, 0xFE	; 254
    1930:	51 05       	cpc	r21, r1
    1932:	78 f0       	brcs	.+30     	; 0x1952 <__divsf3_pse+0x86>
    1934:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__fp_inf>
    1938:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__fp_szero>
    193c:	5f 3f       	cpi	r21, 0xFF	; 255
    193e:	e4 f3       	brlt	.-8      	; 0x1938 <__divsf3_pse+0x6c>
    1940:	98 3e       	cpi	r25, 0xE8	; 232
    1942:	d4 f3       	brlt	.-12     	; 0x1938 <__divsf3_pse+0x6c>
    1944:	86 95       	lsr	r24
    1946:	77 95       	ror	r23
    1948:	67 95       	ror	r22
    194a:	b7 95       	ror	r27
    194c:	f7 95       	ror	r31
    194e:	9f 5f       	subi	r25, 0xFF	; 255
    1950:	c9 f7       	brne	.-14     	; 0x1944 <__divsf3_pse+0x78>
    1952:	88 0f       	add	r24, r24
    1954:	91 1d       	adc	r25, r1
    1956:	96 95       	lsr	r25
    1958:	87 95       	ror	r24
    195a:	97 f9       	bld	r25, 7
    195c:	08 95       	ret
    195e:	e1 e0       	ldi	r30, 0x01	; 1
    1960:	66 0f       	add	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	bb 1f       	adc	r27, r27
    1968:	62 17       	cp	r22, r18
    196a:	73 07       	cpc	r23, r19
    196c:	84 07       	cpc	r24, r20
    196e:	ba 07       	cpc	r27, r26
    1970:	20 f0       	brcs	.+8      	; 0x197a <__divsf3_pse+0xae>
    1972:	62 1b       	sub	r22, r18
    1974:	73 0b       	sbc	r23, r19
    1976:	84 0b       	sbc	r24, r20
    1978:	ba 0b       	sbc	r27, r26
    197a:	ee 1f       	adc	r30, r30
    197c:	88 f7       	brcc	.-30     	; 0x1960 <__divsf3_pse+0x94>
    197e:	e0 95       	com	r30
    1980:	08 95       	ret

00001982 <__fixsfsi>:
    1982:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__fixunssfsi>
    1986:	68 94       	set
    1988:	b1 11       	cpse	r27, r1
    198a:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__fp_szero>
    198e:	08 95       	ret

00001990 <__fixunssfsi>:
    1990:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__fp_splitA>
    1994:	88 f0       	brcs	.+34     	; 0x19b8 <__fixunssfsi+0x28>
    1996:	9f 57       	subi	r25, 0x7F	; 127
    1998:	98 f0       	brcs	.+38     	; 0x19c0 <__fixunssfsi+0x30>
    199a:	b9 2f       	mov	r27, r25
    199c:	99 27       	eor	r25, r25
    199e:	b7 51       	subi	r27, 0x17	; 23
    19a0:	b0 f0       	brcs	.+44     	; 0x19ce <__fixunssfsi+0x3e>
    19a2:	e1 f0       	breq	.+56     	; 0x19dc <__fixunssfsi+0x4c>
    19a4:	66 0f       	add	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	1a f0       	brmi	.+6      	; 0x19b4 <__fixunssfsi+0x24>
    19ae:	ba 95       	dec	r27
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <__fixunssfsi+0x14>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <__fixunssfsi+0x4c>
    19b4:	b1 30       	cpi	r27, 0x01	; 1
    19b6:	91 f0       	breq	.+36     	; 0x19dc <__fixunssfsi+0x4c>
    19b8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_zero>
    19bc:	b1 e0       	ldi	r27, 0x01	; 1
    19be:	08 95       	ret
    19c0:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_zero>
    19c4:	67 2f       	mov	r22, r23
    19c6:	78 2f       	mov	r23, r24
    19c8:	88 27       	eor	r24, r24
    19ca:	b8 5f       	subi	r27, 0xF8	; 248
    19cc:	39 f0       	breq	.+14     	; 0x19dc <__fixunssfsi+0x4c>
    19ce:	b9 3f       	cpi	r27, 0xF9	; 249
    19d0:	cc f3       	brlt	.-14     	; 0x19c4 <__fixunssfsi+0x34>
    19d2:	86 95       	lsr	r24
    19d4:	77 95       	ror	r23
    19d6:	67 95       	ror	r22
    19d8:	b3 95       	inc	r27
    19da:	d9 f7       	brne	.-10     	; 0x19d2 <__fixunssfsi+0x42>
    19dc:	3e f4       	brtc	.+14     	; 0x19ec <__fixunssfsi+0x5c>
    19de:	90 95       	com	r25
    19e0:	80 95       	com	r24
    19e2:	70 95       	com	r23
    19e4:	61 95       	neg	r22
    19e6:	7f 4f       	sbci	r23, 0xFF	; 255
    19e8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	08 95       	ret

000019ee <__floatunsisf>:
    19ee:	e8 94       	clt
    19f0:	09 c0       	rjmp	.+18     	; 0x1a04 <__floatsisf+0x12>

000019f2 <__floatsisf>:
    19f2:	97 fb       	bst	r25, 7
    19f4:	3e f4       	brtc	.+14     	; 0x1a04 <__floatsisf+0x12>
    19f6:	90 95       	com	r25
    19f8:	80 95       	com	r24
    19fa:	70 95       	com	r23
    19fc:	61 95       	neg	r22
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	8f 4f       	sbci	r24, 0xFF	; 255
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	99 23       	and	r25, r25
    1a06:	a9 f0       	breq	.+42     	; 0x1a32 <__floatsisf+0x40>
    1a08:	f9 2f       	mov	r31, r25
    1a0a:	96 e9       	ldi	r25, 0x96	; 150
    1a0c:	bb 27       	eor	r27, r27
    1a0e:	93 95       	inc	r25
    1a10:	f6 95       	lsr	r31
    1a12:	87 95       	ror	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b7 95       	ror	r27
    1a1a:	f1 11       	cpse	r31, r1
    1a1c:	f8 cf       	rjmp	.-16     	; 0x1a0e <__floatsisf+0x1c>
    1a1e:	fa f4       	brpl	.+62     	; 0x1a5e <__floatsisf+0x6c>
    1a20:	bb 0f       	add	r27, r27
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <__floatsisf+0x36>
    1a24:	60 ff       	sbrs	r22, 0
    1a26:	1b c0       	rjmp	.+54     	; 0x1a5e <__floatsisf+0x6c>
    1a28:	6f 5f       	subi	r22, 0xFF	; 255
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	16 c0       	rjmp	.+44     	; 0x1a5e <__floatsisf+0x6c>
    1a32:	88 23       	and	r24, r24
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <__floatsisf+0x48>
    1a36:	96 e9       	ldi	r25, 0x96	; 150
    1a38:	11 c0       	rjmp	.+34     	; 0x1a5c <__floatsisf+0x6a>
    1a3a:	77 23       	and	r23, r23
    1a3c:	21 f0       	breq	.+8      	; 0x1a46 <__floatsisf+0x54>
    1a3e:	9e e8       	ldi	r25, 0x8E	; 142
    1a40:	87 2f       	mov	r24, r23
    1a42:	76 2f       	mov	r23, r22
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <__floatsisf+0x5e>
    1a46:	66 23       	and	r22, r22
    1a48:	71 f0       	breq	.+28     	; 0x1a66 <__floatsisf+0x74>
    1a4a:	96 e8       	ldi	r25, 0x86	; 134
    1a4c:	86 2f       	mov	r24, r22
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	2a f0       	brmi	.+10     	; 0x1a5e <__floatsisf+0x6c>
    1a54:	9a 95       	dec	r25
    1a56:	66 0f       	add	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	da f7       	brpl	.-10     	; 0x1a54 <__floatsisf+0x62>
    1a5e:	88 0f       	add	r24, r24
    1a60:	96 95       	lsr	r25
    1a62:	87 95       	ror	r24
    1a64:	97 f9       	bld	r25, 7
    1a66:	08 95       	ret

00001a68 <__fp_inf>:
    1a68:	97 f9       	bld	r25, 7
    1a6a:	9f 67       	ori	r25, 0x7F	; 127
    1a6c:	80 e8       	ldi	r24, 0x80	; 128
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	08 95       	ret

00001a74 <__fp_nan>:
    1a74:	9f ef       	ldi	r25, 0xFF	; 255
    1a76:	80 ec       	ldi	r24, 0xC0	; 192
    1a78:	08 95       	ret

00001a7a <__fp_pscA>:
    1a7a:	00 24       	eor	r0, r0
    1a7c:	0a 94       	dec	r0
    1a7e:	16 16       	cp	r1, r22
    1a80:	17 06       	cpc	r1, r23
    1a82:	18 06       	cpc	r1, r24
    1a84:	09 06       	cpc	r0, r25
    1a86:	08 95       	ret

00001a88 <__fp_pscB>:
    1a88:	00 24       	eor	r0, r0
    1a8a:	0a 94       	dec	r0
    1a8c:	12 16       	cp	r1, r18
    1a8e:	13 06       	cpc	r1, r19
    1a90:	14 06       	cpc	r1, r20
    1a92:	05 06       	cpc	r0, r21
    1a94:	08 95       	ret

00001a96 <__fp_round>:
    1a96:	09 2e       	mov	r0, r25
    1a98:	03 94       	inc	r0
    1a9a:	00 0c       	add	r0, r0
    1a9c:	11 f4       	brne	.+4      	; 0x1aa2 <__fp_round+0xc>
    1a9e:	88 23       	and	r24, r24
    1aa0:	52 f0       	brmi	.+20     	; 0x1ab6 <__fp_round+0x20>
    1aa2:	bb 0f       	add	r27, r27
    1aa4:	40 f4       	brcc	.+16     	; 0x1ab6 <__fp_round+0x20>
    1aa6:	bf 2b       	or	r27, r31
    1aa8:	11 f4       	brne	.+4      	; 0x1aae <__fp_round+0x18>
    1aaa:	60 ff       	sbrs	r22, 0
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <__fp_round+0x20>
    1aae:	6f 5f       	subi	r22, 0xFF	; 255
    1ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	08 95       	ret

00001ab8 <__fp_split3>:
    1ab8:	57 fd       	sbrc	r21, 7
    1aba:	90 58       	subi	r25, 0x80	; 128
    1abc:	44 0f       	add	r20, r20
    1abe:	55 1f       	adc	r21, r21
    1ac0:	59 f0       	breq	.+22     	; 0x1ad8 <__fp_splitA+0x10>
    1ac2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <__fp_splitA+0x1a>
    1ac6:	47 95       	ror	r20

00001ac8 <__fp_splitA>:
    1ac8:	88 0f       	add	r24, r24
    1aca:	97 fb       	bst	r25, 7
    1acc:	99 1f       	adc	r25, r25
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <__fp_splitA+0x20>
    1ad0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad2:	79 f0       	breq	.+30     	; 0x1af2 <__fp_splitA+0x2a>
    1ad4:	87 95       	ror	r24
    1ad6:	08 95       	ret
    1ad8:	12 16       	cp	r1, r18
    1ada:	13 06       	cpc	r1, r19
    1adc:	14 06       	cpc	r1, r20
    1ade:	55 1f       	adc	r21, r21
    1ae0:	f2 cf       	rjmp	.-28     	; 0x1ac6 <__fp_split3+0xe>
    1ae2:	46 95       	lsr	r20
    1ae4:	f1 df       	rcall	.-30     	; 0x1ac8 <__fp_splitA>
    1ae6:	08 c0       	rjmp	.+16     	; 0x1af8 <__fp_splitA+0x30>
    1ae8:	16 16       	cp	r1, r22
    1aea:	17 06       	cpc	r1, r23
    1aec:	18 06       	cpc	r1, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	f1 cf       	rjmp	.-30     	; 0x1ad4 <__fp_splitA+0xc>
    1af2:	86 95       	lsr	r24
    1af4:	71 05       	cpc	r23, r1
    1af6:	61 05       	cpc	r22, r1
    1af8:	08 94       	sec
    1afa:	08 95       	ret

00001afc <__fp_zero>:
    1afc:	e8 94       	clt

00001afe <__fp_szero>:
    1afe:	bb 27       	eor	r27, r27
    1b00:	66 27       	eor	r22, r22
    1b02:	77 27       	eor	r23, r23
    1b04:	cb 01       	movw	r24, r22
    1b06:	97 f9       	bld	r25, 7
    1b08:	08 95       	ret

00001b0a <__mulsf3>:
    1b0a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3x>
    1b0e:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_round>
    1b12:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__fp_pscA>
    1b16:	38 f0       	brcs	.+14     	; 0x1b26 <__mulsf3+0x1c>
    1b18:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__fp_pscB>
    1b1c:	20 f0       	brcs	.+8      	; 0x1b26 <__mulsf3+0x1c>
    1b1e:	95 23       	and	r25, r21
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <__mulsf3+0x1c>
    1b22:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__fp_inf>
    1b26:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__fp_nan>
    1b2a:	11 24       	eor	r1, r1
    1b2c:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__fp_szero>

00001b30 <__mulsf3x>:
    1b30:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__fp_split3>
    1b34:	70 f3       	brcs	.-36     	; 0x1b12 <__mulsf3+0x8>

00001b36 <__mulsf3_pse>:
    1b36:	95 9f       	mul	r25, r21
    1b38:	c1 f3       	breq	.-16     	; 0x1b2a <__mulsf3+0x20>
    1b3a:	95 0f       	add	r25, r21
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	55 1f       	adc	r21, r21
    1b40:	62 9f       	mul	r22, r18
    1b42:	f0 01       	movw	r30, r0
    1b44:	72 9f       	mul	r23, r18
    1b46:	bb 27       	eor	r27, r27
    1b48:	f0 0d       	add	r31, r0
    1b4a:	b1 1d       	adc	r27, r1
    1b4c:	63 9f       	mul	r22, r19
    1b4e:	aa 27       	eor	r26, r26
    1b50:	f0 0d       	add	r31, r0
    1b52:	b1 1d       	adc	r27, r1
    1b54:	aa 1f       	adc	r26, r26
    1b56:	64 9f       	mul	r22, r20
    1b58:	66 27       	eor	r22, r22
    1b5a:	b0 0d       	add	r27, r0
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	66 1f       	adc	r22, r22
    1b60:	82 9f       	mul	r24, r18
    1b62:	22 27       	eor	r18, r18
    1b64:	b0 0d       	add	r27, r0
    1b66:	a1 1d       	adc	r26, r1
    1b68:	62 1f       	adc	r22, r18
    1b6a:	73 9f       	mul	r23, r19
    1b6c:	b0 0d       	add	r27, r0
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	62 1f       	adc	r22, r18
    1b72:	83 9f       	mul	r24, r19
    1b74:	a0 0d       	add	r26, r0
    1b76:	61 1d       	adc	r22, r1
    1b78:	22 1f       	adc	r18, r18
    1b7a:	74 9f       	mul	r23, r20
    1b7c:	33 27       	eor	r19, r19
    1b7e:	a0 0d       	add	r26, r0
    1b80:	61 1d       	adc	r22, r1
    1b82:	23 1f       	adc	r18, r19
    1b84:	84 9f       	mul	r24, r20
    1b86:	60 0d       	add	r22, r0
    1b88:	21 1d       	adc	r18, r1
    1b8a:	82 2f       	mov	r24, r18
    1b8c:	76 2f       	mov	r23, r22
    1b8e:	6a 2f       	mov	r22, r26
    1b90:	11 24       	eor	r1, r1
    1b92:	9f 57       	subi	r25, 0x7F	; 127
    1b94:	50 40       	sbci	r21, 0x00	; 0
    1b96:	9a f0       	brmi	.+38     	; 0x1bbe <__mulsf3_pse+0x88>
    1b98:	f1 f0       	breq	.+60     	; 0x1bd6 <__mulsf3_pse+0xa0>
    1b9a:	88 23       	and	r24, r24
    1b9c:	4a f0       	brmi	.+18     	; 0x1bb0 <__mulsf3_pse+0x7a>
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	bb 1f       	adc	r27, r27
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	91 50       	subi	r25, 0x01	; 1
    1bac:	50 40       	sbci	r21, 0x00	; 0
    1bae:	a9 f7       	brne	.-22     	; 0x1b9a <__mulsf3_pse+0x64>
    1bb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	80 f0       	brcs	.+32     	; 0x1bd6 <__mulsf3_pse+0xa0>
    1bb6:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__fp_inf>
    1bba:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__fp_szero>
    1bbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc0:	e4 f3       	brlt	.-8      	; 0x1bba <__mulsf3_pse+0x84>
    1bc2:	98 3e       	cpi	r25, 0xE8	; 232
    1bc4:	d4 f3       	brlt	.-12     	; 0x1bba <__mulsf3_pse+0x84>
    1bc6:	86 95       	lsr	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	b7 95       	ror	r27
    1bce:	f7 95       	ror	r31
    1bd0:	e7 95       	ror	r30
    1bd2:	9f 5f       	subi	r25, 0xFF	; 255
    1bd4:	c1 f7       	brne	.-16     	; 0x1bc6 <__mulsf3_pse+0x90>
    1bd6:	fe 2b       	or	r31, r30
    1bd8:	88 0f       	add	r24, r24
    1bda:	91 1d       	adc	r25, r1
    1bdc:	96 95       	lsr	r25
    1bde:	87 95       	ror	r24
    1be0:	97 f9       	bld	r25, 7
    1be2:	08 95       	ret

00001be4 <do_rand>:
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	ec 01       	movw	r28, r24
    1bfa:	68 81       	ld	r22, Y
    1bfc:	79 81       	ldd	r23, Y+1	; 0x01
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	61 15       	cp	r22, r1
    1c04:	71 05       	cpc	r23, r1
    1c06:	81 05       	cpc	r24, r1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	21 f4       	brne	.+8      	; 0x1c14 <do_rand+0x30>
    1c0c:	64 e2       	ldi	r22, 0x24	; 36
    1c0e:	79 ed       	ldi	r23, 0xD9	; 217
    1c10:	8b e5       	ldi	r24, 0x5B	; 91
    1c12:	97 e0       	ldi	r25, 0x07	; 7
    1c14:	2d e1       	ldi	r18, 0x1D	; 29
    1c16:	33 ef       	ldi	r19, 0xF3	; 243
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
    1c20:	49 01       	movw	r8, r18
    1c22:	5a 01       	movw	r10, r20
    1c24:	9b 01       	movw	r18, r22
    1c26:	ac 01       	movw	r20, r24
    1c28:	a7 ea       	ldi	r26, 0xA7	; 167
    1c2a:	b1 e4       	ldi	r27, 0x41	; 65
    1c2c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__muluhisi3>
    1c30:	6b 01       	movw	r12, r22
    1c32:	7c 01       	movw	r14, r24
    1c34:	ac ee       	ldi	r26, 0xEC	; 236
    1c36:	b4 ef       	ldi	r27, 0xF4	; 244
    1c38:	a5 01       	movw	r20, r10
    1c3a:	94 01       	movw	r18, r8
    1c3c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__mulohisi3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8c 0d       	add	r24, r12
    1c46:	9d 1d       	adc	r25, r13
    1c48:	ae 1d       	adc	r26, r14
    1c4a:	bf 1d       	adc	r27, r15
    1c4c:	b7 ff       	sbrs	r27, 7
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <do_rand+0x72>
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	a1 09       	sbc	r26, r1
    1c54:	b0 48       	sbci	r27, 0x80	; 128
    1c56:	88 83       	st	Y, r24
    1c58:	99 83       	std	Y+1, r25	; 0x01
    1c5a:	aa 83       	std	Y+2, r26	; 0x02
    1c5c:	bb 83       	std	Y+3, r27	; 0x03
    1c5e:	9f 77       	andi	r25, 0x7F	; 127
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	9f 90       	pop	r9
    1c72:	8f 90       	pop	r8
    1c74:	08 95       	ret

00001c76 <rand_r>:
    1c76:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <do_rand>
    1c7a:	08 95       	ret

00001c7c <rand>:
    1c7c:	89 e0       	ldi	r24, 0x09	; 9
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <do_rand>
    1c84:	08 95       	ret

00001c86 <srand>:
    1c86:	a0 e0       	ldi	r26, 0x00	; 0
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	80 93 09 01 	sts	0x0109, r24
    1c8e:	90 93 0a 01 	sts	0x010A, r25
    1c92:	a0 93 0b 01 	sts	0x010B, r26
    1c96:	b0 93 0c 01 	sts	0x010C, r27
    1c9a:	08 95       	ret

00001c9c <eeprom_read_byte>:
    1c9c:	f9 99       	sbic	0x1f, 1	; 31
    1c9e:	fe cf       	rjmp	.-4      	; 0x1c9c <eeprom_read_byte>
    1ca0:	92 bd       	out	0x22, r25	; 34
    1ca2:	81 bd       	out	0x21, r24	; 33
    1ca4:	f8 9a       	sbi	0x1f, 0	; 31
    1ca6:	99 27       	eor	r25, r25
    1ca8:	80 b5       	in	r24, 0x20	; 32
    1caa:	08 95       	ret

00001cac <eeprom_write_byte>:
    1cac:	26 2f       	mov	r18, r22

00001cae <eeprom_write_r18>:
    1cae:	f9 99       	sbic	0x1f, 1	; 31
    1cb0:	fe cf       	rjmp	.-4      	; 0x1cae <eeprom_write_r18>
    1cb2:	1f ba       	out	0x1f, r1	; 31
    1cb4:	92 bd       	out	0x22, r25	; 34
    1cb6:	81 bd       	out	0x21, r24	; 33
    1cb8:	20 bd       	out	0x20, r18	; 32
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	fa 9a       	sbi	0x1f, 2	; 31
    1cc0:	f9 9a       	sbi	0x1f, 1	; 31
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	08 95       	ret

00001cc8 <__divmodsi4>:
    1cc8:	05 2e       	mov	r0, r21
    1cca:	97 fb       	bst	r25, 7
    1ccc:	1e f4       	brtc	.+6      	; 0x1cd4 <__divmodsi4+0xc>
    1cce:	00 94       	com	r0
    1cd0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__negsi2>
    1cd4:	57 fd       	sbrc	r21, 7
    1cd6:	07 d0       	rcall	.+14     	; 0x1ce6 <__divmodsi4_neg2>
    1cd8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__udivmodsi4>
    1cdc:	07 fc       	sbrc	r0, 7
    1cde:	03 d0       	rcall	.+6      	; 0x1ce6 <__divmodsi4_neg2>
    1ce0:	4e f4       	brtc	.+18     	; 0x1cf4 <__divmodsi4_exit>
    1ce2:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__negsi2>

00001ce6 <__divmodsi4_neg2>:
    1ce6:	50 95       	com	r21
    1ce8:	40 95       	com	r20
    1cea:	30 95       	com	r19
    1cec:	21 95       	neg	r18
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	4f 4f       	sbci	r20, 0xFF	; 255
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255

00001cf4 <__divmodsi4_exit>:
    1cf4:	08 95       	ret

00001cf6 <__negsi2>:
    1cf6:	90 95       	com	r25
    1cf8:	80 95       	com	r24
    1cfa:	70 95       	com	r23
    1cfc:	61 95       	neg	r22
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	8f 4f       	sbci	r24, 0xFF	; 255
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	08 95       	ret

00001d06 <__muluhisi3>:
    1d06:	0e 94 bf 0b 	call	0x177e	; 0x177e <__umulhisi3>
    1d0a:	a5 9f       	mul	r26, r21
    1d0c:	90 0d       	add	r25, r0
    1d0e:	b4 9f       	mul	r27, r20
    1d10:	90 0d       	add	r25, r0
    1d12:	a4 9f       	mul	r26, r20
    1d14:	80 0d       	add	r24, r0
    1d16:	91 1d       	adc	r25, r1
    1d18:	11 24       	eor	r1, r1
    1d1a:	08 95       	ret

00001d1c <__mulshisi3>:
    1d1c:	b7 ff       	sbrs	r27, 7
    1d1e:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__muluhisi3>

00001d22 <__mulohisi3>:
    1d22:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__muluhisi3>
    1d26:	82 1b       	sub	r24, r18
    1d28:	93 0b       	sbc	r25, r19
    1d2a:	08 95       	ret

00001d2c <__udivmodsi4>:
    1d2c:	a1 e2       	ldi	r26, 0x21	; 33
    1d2e:	1a 2e       	mov	r1, r26
    1d30:	aa 1b       	sub	r26, r26
    1d32:	bb 1b       	sub	r27, r27
    1d34:	fd 01       	movw	r30, r26
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <__udivmodsi4_ep>

00001d38 <__udivmodsi4_loop>:
    1d38:	aa 1f       	adc	r26, r26
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	ee 1f       	adc	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	a2 17       	cp	r26, r18
    1d42:	b3 07       	cpc	r27, r19
    1d44:	e4 07       	cpc	r30, r20
    1d46:	f5 07       	cpc	r31, r21
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <__udivmodsi4_ep>
    1d4a:	a2 1b       	sub	r26, r18
    1d4c:	b3 0b       	sbc	r27, r19
    1d4e:	e4 0b       	sbc	r30, r20
    1d50:	f5 0b       	sbc	r31, r21

00001d52 <__udivmodsi4_ep>:
    1d52:	66 1f       	adc	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	1a 94       	dec	r1
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <__udivmodsi4_loop>
    1d5e:	60 95       	com	r22
    1d60:	70 95       	com	r23
    1d62:	80 95       	com	r24
    1d64:	90 95       	com	r25
    1d66:	9b 01       	movw	r18, r22
    1d68:	ac 01       	movw	r20, r24
    1d6a:	bd 01       	movw	r22, r26
    1d6c:	cf 01       	movw	r24, r30
    1d6e:	08 95       	ret

00001d70 <_exit>:
    1d70:	f8 94       	cli

00001d72 <__stop_program>:
    1d72:	ff cf       	rjmp	.-2      	; 0x1d72 <__stop_program>
