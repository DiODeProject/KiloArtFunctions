
build/cradle.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	22 02       	muls	r18, r18
      6a:	9e 02       	muls	r25, r30
      6c:	f6 01       	movw	r30, r12
      6e:	ed 01       	movw	r28, r26
      70:	f3 01       	movw	r30, r6
      72:	80 02       	muls	r24, r16
      74:	75 02       	muls	r23, r21
      76:	00 09       	sbc	r16, r0
      78:	dd 07       	cpc	r29, r29
      7a:	dd 07       	cpc	r29, r29
      7c:	fd 08       	sbc	r15, r13
      7e:	09 09       	sbc	r16, r9
      80:	f9 08       	sbc	r15, r9
      82:	10 09       	sbc	r17, r0
      84:	0c 09       	sbc	r16, r12
      86:	14 09       	sbc	r17, r4
      88:	cc 08       	sbc	r12, r12
      8a:	9e 08       	sbc	r9, r14

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec ec       	ldi	r30, 0xCC	; 204
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 37       	cpi	r26, 0x74	; 116
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 46 0a 	call	0x148c	; 0x148c <main>
      da:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
int state;
uint32_t last_state;

void setup(){

state = LEFT;
      e2:	10 92 15 01 	sts	0x0115, r1
      e6:	10 92 14 01 	sts	0x0114, r1
last_state = kilo_ticks;
      ea:	80 91 39 01 	lds	r24, 0x0139
      ee:	90 91 3a 01 	lds	r25, 0x013A
      f2:	a0 91 3b 01 	lds	r26, 0x013B
      f6:	b0 91 3c 01 	lds	r27, 0x013C
      fa:	80 93 10 01 	sts	0x0110, r24
      fe:	90 93 11 01 	sts	0x0111, r25
     102:	a0 93 12 01 	sts	0x0112, r26
     106:	b0 93 13 01 	sts	0x0113, r27
     10a:	08 95       	ret

0000010c <loop>:

}

void loop(){

	if(kilo_ticks > (last_state + 64)){
     10c:	40 91 39 01 	lds	r20, 0x0139
     110:	50 91 3a 01 	lds	r21, 0x013A
     114:	60 91 3b 01 	lds	r22, 0x013B
     118:	70 91 3c 01 	lds	r23, 0x013C
     11c:	80 91 10 01 	lds	r24, 0x0110
     120:	90 91 11 01 	lds	r25, 0x0111
     124:	a0 91 12 01 	lds	r26, 0x0112
     128:	b0 91 13 01 	lds	r27, 0x0113
     12c:	80 5c       	subi	r24, 0xC0	; 192
     12e:	9f 4f       	sbci	r25, 0xFF	; 255
     130:	af 4f       	sbci	r26, 0xFF	; 255
     132:	bf 4f       	sbci	r27, 0xFF	; 255
     134:	84 17       	cp	r24, r20
     136:	95 07       	cpc	r25, r21
     138:	a6 07       	cpc	r26, r22
     13a:	b7 07       	cpc	r27, r23
     13c:	c0 f4       	brcc	.+48     	; 0x16e <loop+0x62>
		last_state = kilo_ticks;
     13e:	80 91 39 01 	lds	r24, 0x0139
     142:	90 91 3a 01 	lds	r25, 0x013A
     146:	a0 91 3b 01 	lds	r26, 0x013B
     14a:	b0 91 3c 01 	lds	r27, 0x013C
     14e:	80 93 10 01 	sts	0x0110, r24
     152:	90 93 11 01 	sts	0x0111, r25
     156:	a0 93 12 01 	sts	0x0112, r26
     15a:	b0 93 13 01 	sts	0x0113, r27
		if(state == LEFT){
     15e:	80 91 14 01 	lds	r24, 0x0114
     162:	90 91 15 01 	lds	r25, 0x0115
     166:	00 97       	sbiw	r24, 0x00	; 0
     168:	19 f0       	breq	.+6      	; 0x170 <loop+0x64>
			spinup_motors();
			set_motors(kilo_turn_left,0);
			state = RIGHT;
		}
		else if(state == RIGHT){
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	79 f0       	breq	.+30     	; 0x18c <loop+0x80>
     16e:	08 95       	ret
void loop(){

	if(kilo_ticks > (last_state + 64)){
		last_state = kilo_ticks;
		if(state == LEFT){
			spinup_motors();
     170:	0e 94 3b 03 	call	0x676	; 0x676 <spinup_motors>
			set_motors(kilo_turn_left,0);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	80 91 73 01 	lds	r24, 0x0173
     17a:	0e 94 36 03 	call	0x66c	; 0x66c <set_motors>
			state = RIGHT;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	90 93 15 01 	sts	0x0115, r25
     186:	80 93 14 01 	sts	0x0114, r24
     18a:	08 95       	ret
		}
		else if(state == RIGHT){
			spinup_motors();
     18c:	0e 94 3b 03 	call	0x676	; 0x676 <spinup_motors>
			set_motors(0,kilo_turn_right);
     190:	60 91 5f 01 	lds	r22, 0x015F
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 36 03 	call	0x66c	; 0x66c <set_motors>
			state = LEFT;
     19a:	10 92 15 01 	sts	0x0115, r1
     19e:	10 92 14 01 	sts	0x0114, r1
     1a2:	08 95       	ret

000001a4 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1a4:	08 95       	ret

000001a6 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	08 95       	ret

000001ac <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1ac:	08 95       	ret

000001ae <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
    cli();
     1bc:	f8 94       	cli

    ports_off();
     1be:	14 b8       	out	0x04, r1	; 4
     1c0:	17 b8       	out	0x07, r1	; 7
     1c2:	1a b8       	out	0x0a, r1	; 10
     1c4:	15 b8       	out	0x05, r1	; 5
     1c6:	18 b8       	out	0x08, r1	; 8
     1c8:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1ca:	52 9a       	sbi	0x0a, 2	; 10
     1cc:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1ce:	14 bc       	out	0x24, r1	; 36
     1d0:	85 e0       	ldi	r24, 0x05	; 5
     1d2:	85 bd       	out	0x25, r24	; 37
     1d4:	8f ef       	ldi	r24, 0xFF	; 255
     1d6:	87 bd       	out	0x27, r24	; 39
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     1de:	10 92 80 00 	sts	0x0080, r1
     1e2:	10 92 81 00 	sts	0x0081, r1
     1e6:	2f e8       	ldi	r18, 0x8F	; 143
     1e8:	3b e0       	ldi	r19, 0x0B	; 11
     1ea:	30 93 89 00 	sts	0x0089, r19
     1ee:	20 93 88 00 	sts	0x0088, r18
     1f2:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     1f6:	53 98       	cbi	0x0a, 3	; 10
     1f8:	23 98       	cbi	0x04, 3	; 4
     1fa:	91 ea       	ldi	r25, 0xA1	; 161
     1fc:	90 93 b0 00 	sts	0x00B0, r25
     200:	80 93 b1 00 	sts	0x00B1, r24
     204:	10 92 b4 00 	sts	0x00B4, r1
     208:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     20c:	8b e0       	ldi	r24, 0x0B	; 11
     20e:	80 bf       	out	0x30, r24	; 48
     210:	83 e0       	ldi	r24, 0x03	; 3
     212:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     216:	86 e0       	ldi	r24, 0x06	; 6
     218:	80 93 7c 00 	sts	0x007C, r24
     21c:	83 e8       	ldi	r24, 0x83	; 131
     21e:	80 93 7a 00 	sts	0x007A, r24
     222:	80 91 7a 00 	lds	r24, 0x007A
     226:	80 64       	ori	r24, 0x40	; 64
     228:	80 93 7a 00 	sts	0x007A, r24
     22c:	80 91 7a 00 	lds	r24, 0x007A
     230:	86 fd       	sbrc	r24, 6
     232:	fc cf       	rjmp	.-8      	; 0x22c <kilo_init+0x7e>
    adc_trigger_high_gain();
     234:	10 92 7c 00 	sts	0x007C, r1
     238:	83 ea       	ldi	r24, 0xA3	; 163
     23a:	80 93 7a 00 	sts	0x007A, r24
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
    if (osccal != 0xFF)
     24c:	8f 3f       	cpi	r24, 0xFF	; 255
     24e:	11 f0       	breq	.+4      	; 0x254 <kilo_init+0xa6>
        OSCCAL = osccal;
     250:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     254:	10 92 3d 01 	sts	0x013D, r1
    rx_leadingbit = 1;
     258:	c1 e0       	ldi	r28, 0x01	; 1
     25a:	c0 93 16 01 	sts	0x0116, r28
    rx_leadingbyte = 1;
     25e:	c0 93 5a 01 	sts	0x015A, r28
    rx_byteindex = 0;
     262:	10 92 34 01 	sts	0x0134, r1
    rx_bytevalue = 0;
     266:	10 92 6e 01 	sts	0x016E, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     26a:	80 e9       	ldi	r24, 0x90	; 144
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     272:	80 93 33 01 	sts	0x0133, r24
    if (tx_mask & ~TX_MASK_MAX)
     276:	80 91 33 01 	lds	r24, 0x0133
     27a:	88 73       	andi	r24, 0x38	; 56
     27c:	11 f0       	breq	.+4      	; 0x282 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     27e:	c0 93 33 01 	sts	0x0133, r28
    tx_clock = 0;
     282:	10 92 5e 01 	sts	0x015E, r1
     286:	10 92 5d 01 	sts	0x015D, r1
    tx_increment = 255;
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 5c 01 	sts	0x015C, r25
     292:	80 93 5b 01 	sts	0x015B, r24
    kilo_ticks = 0;
     296:	10 92 39 01 	sts	0x0139, r1
     29a:	10 92 3a 01 	sts	0x013A, r1
     29e:	10 92 3b 01 	sts	0x013B, r1
     2a2:	10 92 3c 01 	sts	0x013C, r1
    kilo_state = IDLE;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     2ac:	82 e4       	ldi	r24, 0x42	; 66
     2ae:	9f e0       	ldi	r25, 0x0F	; 15
     2b0:	90 93 6d 01 	sts	0x016D, r25
     2b4:	80 93 6c 01 	sts	0x016C, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2b8:	80 eb       	ldi	r24, 0xB0	; 176
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     2c0:	c8 2f       	mov	r28, r24
     2c2:	81 eb       	ldi	r24, 0xB1	; 177
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     2ca:	2c 2f       	mov	r18, r28
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	38 2b       	or	r19, r24
     2d0:	30 93 70 01 	sts	0x0170, r19
     2d4:	20 93 6f 01 	sts	0x016F, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     2e0:	80 93 73 01 	sts	0x0173, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     2e4:	89 e0       	ldi	r24, 0x09	; 9
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     2ec:	80 93 5f 01 	sts	0x015F, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     2f0:	8c e0       	ldi	r24, 0x0C	; 12
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     2f8:	80 93 71 01 	sts	0x0171, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2fc:	84 e1       	ldi	r24, 0x14	; 20
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     304:	80 93 72 01 	sts	0x0172, r24
     308:	5e e3       	ldi	r21, 0x3E	; 62
     30a:	e5 2e       	mov	r14, r21
     30c:	51 e0       	ldi	r21, 0x01	; 1
     30e:	f5 2e       	mov	r15, r21
     310:	07 e1       	ldi	r16, 0x17	; 23
     312:	11 e0       	ldi	r17, 0x01	; 1
     314:	c0 e2       	ldi	r28, 0x20	; 32
     316:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     318:	ce 01       	movw	r24, r28
     31a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     31e:	d8 2e       	mov	r13, r24
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     328:	2d 2d       	mov	r18, r13
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	32 2f       	mov	r19, r18
     32e:	22 27       	eor	r18, r18
     330:	28 2b       	or	r18, r24
     332:	f7 01       	movw	r30, r14
     334:	21 93       	st	Z+, r18
     336:	31 93       	st	Z+, r19
     338:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     33a:	ce 01       	movw	r24, r28
     33c:	c0 96       	adiw	r24, 0x30	; 48
     33e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     342:	d8 2e       	mov	r13, r24
     344:	ce 01       	movw	r24, r28
     346:	c1 96       	adiw	r24, 0x31	; 49
     348:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <eeprom_read_byte>
     34c:	2d 2d       	mov	r18, r13
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	32 2f       	mov	r19, r18
     352:	22 27       	eor	r18, r18
     354:	28 2b       	or	r18, r24
     356:	f8 01       	movw	r30, r16
     358:	21 93       	st	Z+, r18
     35a:	31 93       	st	Z+, r19
     35c:	8f 01       	movw	r16, r30
     35e:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     360:	cc 33       	cpi	r28, 0x3C	; 60
     362:	d1 05       	cpc	r29, r1
     364:	c9 f6       	brne	.-78     	; 0x318 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     366:	78 94       	sei
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	df 90       	pop	r13
     376:	08 95       	ret

00000378 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	8f 93       	push	r24
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	a8 95       	wdr
     38a:	80 91 60 00 	lds	r24, 0x0060
     38e:	88 61       	ori	r24, 0x18	; 24
     390:	80 93 60 00 	sts	0x0060, r24
     394:	10 92 60 00 	sts	0x0060, r1
     398:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     39a:	8f 91       	pop	r24
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     3a6:	3c 01       	movw	r6, r24
     3a8:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     3aa:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     3ac:	99 24       	eor	r9, r9
     3ae:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3b0:	84 e0       	ldi	r24, 0x04	; 4
     3b2:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	a9 2e       	mov	r10, r25
     3b8:	23 e8       	ldi	r18, 0x83	; 131
     3ba:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     3bc:	38 e1       	ldi	r19, 0x18	; 24
     3be:	d3 2e       	mov	r13, r19
     3c0:	49 e2       	ldi	r20, 0x29	; 41
     3c2:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     3c4:	90 91 0f 01 	lds	r25, 0x010F
     3c8:	e9 2f       	mov	r30, r25
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	e7 30       	cpi	r30, 0x07	; 7
     3ce:	f1 05       	cpc	r31, r1
     3d0:	c8 f7       	brcc	.-14     	; 0x3c4 <kilo_start+0x1e>
     3d2:	ec 5c       	subi	r30, 0xCC	; 204
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     3da:	11 23       	and	r17, r17
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <kilo_start+0x3a>
     3de:	fc c0       	rjmp	.+504    	; 0x5d8 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     3e0:	c0 92 0f 01 	sts	0x010F, r12
     3e4:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     3e6:	fe 01       	movw	r30, r28
     3e8:	09 95       	icall
                break;
     3ea:	ec cf       	rjmp	.-40     	; 0x3c4 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     3ec:	80 91 3d 01 	lds	r24, 0x013D
     3f0:	81 11       	cpse	r24, r1
     3f2:	eb c0       	rjmp	.+470    	; 0x5ca <kilo_start+0x224>
        cli();                                    // disable interrupts
     3f4:	f8 94       	cli
        adc_setup_conversion(6);
     3f6:	a0 92 7c 00 	sts	0x007C, r10
     3fa:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     3fe:	80 91 7a 00 	lds	r24, 0x007A
     402:	80 64       	ori	r24, 0x40	; 64
     404:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     408:	90 91 7a 00 	lds	r25, 0x007A
     40c:	96 fd       	sbrc	r25, 6
     40e:	fc cf       	rjmp	.-8      	; 0x408 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     410:	80 91 78 00 	lds	r24, 0x0078
     414:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     418:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     41a:	8b 3a       	cpi	r24, 0xAB	; 171
     41c:	e2 e0       	ldi	r30, 0x02	; 2
     41e:	9e 07       	cpc	r25, r30
     420:	0c f0       	brlt	.+2      	; 0x424 <kilo_start+0x7e>
     422:	ed c0       	rjmp	.+474    	; 0x5fe <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     424:	89 38       	cpi	r24, 0x89	; 137
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	9f 07       	cpc	r25, r31
     42a:	0c f0       	brlt	.+2      	; 0x42e <kilo_start+0x88>
     42c:	ef c0       	rjmp	.+478    	; 0x60c <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     42e:	87 36       	cpi	r24, 0x67	; 103
     430:	92 40       	sbci	r25, 0x02	; 2
     432:	0c f4       	brge	.+2      	; 0x436 <kilo_start+0x90>
     434:	ca c0       	rjmp	.+404    	; 0x5ca <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     436:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     438:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     43a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     43c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     43e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     440:	3c 98       	cbi	0x07, 4	; 7
     442:	c0 cf       	rjmp	.-128    	; 0x3c4 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     444:	f8 94       	cli
                acomp_off();
     446:	80 b7       	in	r24, 0x30	; 48
     448:	87 7f       	andi	r24, 0xF7	; 247
     44a:	80 bf       	out	0x30, r24	; 48
                adc_off();
     44c:	80 91 7a 00 	lds	r24, 0x007A
     450:	8f 77       	andi	r24, 0x7F	; 127
     452:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     456:	14 b8       	out	0x04, r1	; 4
     458:	17 b8       	out	0x07, r1	; 7
     45a:	1a b8       	out	0x0a, r1	; 10
     45c:	15 b8       	out	0x05, r1	; 5
     45e:	18 b8       	out	0x08, r1	; 8
     460:	1b b8       	out	0x0b, r1	; 11
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	a8 95       	wdr
     468:	d0 92 60 00 	sts	0x0060, r13
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     472:	80 91 60 00 	lds	r24, 0x0060
     476:	80 64       	ori	r24, 0x40	; 64
     478:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     47c:	93 b7       	in	r25, 0x33	; 51
     47e:	91 7f       	andi	r25, 0xF1	; 241
     480:	94 60       	ori	r25, 0x04	; 4
     482:	93 bf       	out	0x33, r25	; 51
                cli();
     484:	f8 94       	cli
                sleep_enable();
     486:	83 b7       	in	r24, 0x33	; 51
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	83 bf       	out	0x33, r24	; 51
                sei();
     48c:	78 94       	sei
                sleep_cpu();
     48e:	88 95       	sleep
                sleep_disable();
     490:	83 b7       	in	r24, 0x33	; 51
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	83 bf       	out	0x33, r24	; 51
                sei();
     496:	78 94       	sei
                rx_busy = 0;
     498:	10 92 3d 01 	sts	0x013D, r1
                ports_on();
     49c:	52 9a       	sbi	0x0a, 2	; 10
     49e:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     4a0:	80 91 7a 00 	lds	r24, 0x007A
     4a4:	80 68       	ori	r24, 0x80	; 128
     4a6:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4aa:	87 e5       	ldi	r24, 0x57	; 87
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <kilo_start+0x108>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <kilo_start+0x10e>
     4b4:	00 00       	nop
                _delay_us(300);
                acomp_on();
     4b6:	80 b7       	in	r24, 0x30	; 48
     4b8:	88 61       	ori	r24, 0x18	; 24
     4ba:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4bc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     4be:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     4c0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     4c2:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     4c4:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     4c6:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c8:	ef e1       	ldi	r30, 0x1F	; 31
     4ca:	fe e4       	ldi	r31, 0x4E	; 78
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <kilo_start+0x126>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <kilo_start+0x12c>
     4d2:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     4d4:	80 91 3d 01 	lds	r24, 0x013D
     4d8:	81 11       	cpse	r24, r1
     4da:	81 c0       	rjmp	.+258    	; 0x5de <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4dc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4de:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4e4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4e6:	3c 98       	cbi	0x07, 4	; 7
     4e8:	6d cf       	rjmp	.-294    	; 0x3c4 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     4ea:	80 91 0d 01 	lds	r24, 0x010D
     4ee:	81 11       	cpse	r24, r1
     4f0:	41 c0       	rjmp	.+130    	; 0x574 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4f2:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4f6:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     4fa:	10 92 0e 01 	sts	0x010E, r1
     4fe:	62 cf       	rjmp	.-316    	; 0x3c4 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     500:	48 99       	sbic	0x09, 0	; 9
     502:	ec cf       	rjmp	.-40     	; 0x4dc <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     504:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     506:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     508:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     50a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     50c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     50e:	3c 98       	cbi	0x07, 4	; 7
     510:	8f ec       	ldi	r24, 0xCF	; 207
     512:	97 e0       	ldi	r25, 0x07	; 7
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <kilo_start+0x16e>
     518:	00 c0       	rjmp	.+0      	; 0x51a <kilo_start+0x174>
     51a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     51c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     51e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     520:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     522:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     524:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     526:	3c 98       	cbi	0x07, 4	; 7
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	e1 ee       	ldi	r30, 0xE1	; 225
     52c:	f4 e0       	ldi	r31, 0x04	; 4
     52e:	91 50       	subi	r25, 0x01	; 1
     530:	e0 40       	sbci	r30, 0x00	; 0
     532:	f0 40       	sbci	r31, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <kilo_start+0x188>
     536:	00 c0       	rjmp	.+0      	; 0x538 <kilo_start+0x192>
     538:	00 00       	nop
     53a:	44 cf       	rjmp	.-376    	; 0x3c4 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     53c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     53e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     540:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     542:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     544:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     546:	3c 98       	cbi	0x07, 4	; 7
     548:	ef ec       	ldi	r30, 0xCF	; 207
     54a:	f7 e0       	ldi	r31, 0x07	; 7
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <kilo_start+0x1a6>
     550:	00 c0       	rjmp	.+0      	; 0x552 <kilo_start+0x1ac>
     552:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     554:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     556:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     558:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     55a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     55c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     55e:	3c 98       	cbi	0x07, 4	; 7
     560:	ff ef       	ldi	r31, 0xFF	; 255
     562:	21 ee       	ldi	r18, 0xE1	; 225
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	f1 50       	subi	r31, 0x01	; 1
     568:	20 40       	sbci	r18, 0x00	; 0
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <kilo_start+0x1c0>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <kilo_start+0x1ca>
     570:	00 00       	nop
     572:	28 cf       	rjmp	.-432    	; 0x3c4 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     574:	90 91 0d 01 	lds	r25, 0x010D
     578:	80 91 0e 01 	lds	r24, 0x010E
     57c:	98 17       	cp	r25, r24
     57e:	09 f4       	brne	.+2      	; 0x582 <kilo_start+0x1dc>
     580:	21 cf       	rjmp	.-446    	; 0x3c4 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     582:	80 91 0d 01 	lds	r24, 0x010D
     586:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     58a:	80 91 0d 01 	lds	r24, 0x010D
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	09 f4       	brne	.+2      	; 0x594 <kilo_start+0x1ee>
     592:	50 c0       	rjmp	.+160    	; 0x634 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     594:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     598:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     59c:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	d9 f1       	breq	.+118    	; 0x61a <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5a4:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     5a8:	90 92 b4 00 	sts	0x00B4, r9
     5ac:	8f e2       	ldi	r24, 0x2F	; 47
     5ae:	95 e7       	ldi	r25, 0x75	; 117
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <kilo_start+0x20a>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <kilo_start+0x210>
     5b6:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     5b8:	80 91 72 01 	lds	r24, 0x0172
     5bc:	90 91 71 01 	lds	r25, 0x0171
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c0:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     5c4:	80 93 b4 00 	sts	0x00B4, r24
     5c8:	fd ce       	rjmp	.-518    	; 0x3c4 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5ca:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5cc:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5ce:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5d0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5d2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5d4:	3c 98       	cbi	0x07, 4	; 7
     5d6:	f6 ce       	rjmp	.-532    	; 0x3c4 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     5d8:	f3 01       	movw	r30, r6
     5da:	09 95       	icall
     5dc:	01 cf       	rjmp	.-510    	; 0x3e0 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     5de:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     5e0:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5e2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5e4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5e6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5e8:	3c 98       	cbi	0x07, 4	; 7
     5ea:	ff ef       	ldi	r31, 0xFF	; 255
     5ec:	20 e7       	ldi	r18, 0x70	; 112
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	f1 50       	subi	r31, 0x01	; 1
     5f2:	20 40       	sbci	r18, 0x00	; 0
     5f4:	80 40       	sbci	r24, 0x00	; 0
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <kilo_start+0x24a>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <kilo_start+0x254>
     5fa:	00 00       	nop
     5fc:	6f cf       	rjmp	.-290    	; 0x4dc <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5fe:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     600:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     602:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     604:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     606:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     608:	3c 98       	cbi	0x07, 4	; 7
     60a:	dc ce       	rjmp	.-584    	; 0x3c4 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     60c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     60e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     610:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     612:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     614:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     616:	3c 9a       	sbi	0x07, 4	; 7
     618:	d5 ce       	rjmp	.-598    	; 0x3c4 <kilo_start+0x1e>
     61a:	ef e2       	ldi	r30, 0x2F	; 47
     61c:	f5 e7       	ldi	r31, 0x75	; 117
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <kilo_start+0x278>
     622:	00 c0       	rjmp	.+0      	; 0x624 <kilo_start+0x27e>
     624:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     626:	80 91 5f 01 	lds	r24, 0x015F
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     62a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     62e:	80 93 b4 00 	sts	0x00B4, r24
     632:	c8 ce       	rjmp	.-624    	; 0x3c4 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     634:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     638:	10 92 b4 00 	sts	0x00B4, r1
     63c:	8f e2       	ldi	r24, 0x2F	; 47
     63e:	95 e7       	ldi	r25, 0x75	; 117
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <kilo_start+0x29a>
     644:	00 c0       	rjmp	.+0      	; 0x646 <kilo_start+0x2a0>
     646:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     648:	80 91 73 01 	lds	r24, 0x0173
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     64c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     650:	10 92 b4 00 	sts	0x00B4, r1
     654:	b7 ce       	rjmp	.-658    	; 0x3c4 <kilo_start+0x1e>

00000656 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     656:	07 c0       	rjmp	.+14     	; 0x666 <delay+0x10>
     658:	ef ec       	ldi	r30, 0xCF	; 207
     65a:	f7 e0       	ldi	r31, 0x07	; 7
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <delay+0x6>
     660:	00 c0       	rjmp	.+0      	; 0x662 <delay+0xc>
     662:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     664:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	b9 f7       	brne	.-18     	; 0x658 <delay+0x2>
     66a:	08 95       	ret

0000066c <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     66c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     670:	60 93 b4 00 	sts	0x00B4, r22
     674:	08 95       	ret

00000676 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     67c:	80 93 b4 00 	sts	0x00B4, r24
     680:	8f e0       	ldi	r24, 0x0F	; 15
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	ef ec       	ldi	r30, 0xCF	; 207
     686:	f7 e0       	ldi	r31, 0x07	; 7
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <spinup_motors+0x12>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <spinup_motors+0x18>
     68e:	00 00       	nop
     690:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     692:	c1 f7       	brne	.-16     	; 0x684 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     694:	08 95       	ret

00000696 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     696:	80 91 3d 01 	lds	r24, 0x013D
     69a:	81 11       	cpse	r24, r1
     69c:	1e c0       	rjmp	.+60     	; 0x6da <get_ambientlight+0x44>
        cli();
     69e:	f8 94       	cli
        adc_setup_conversion(7);
     6a0:	87 e0       	ldi	r24, 0x07	; 7
     6a2:	80 93 7c 00 	sts	0x007C, r24
     6a6:	83 e8       	ldi	r24, 0x83	; 131
     6a8:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6ac:	80 91 7a 00 	lds	r24, 0x007A
     6b0:	80 64       	ori	r24, 0x40	; 64
     6b2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     6b6:	80 91 7a 00 	lds	r24, 0x007A
     6ba:	86 fd       	sbrc	r24, 6
     6bc:	fc cf       	rjmp	.-8      	; 0x6b6 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     6be:	80 91 78 00 	lds	r24, 0x0078
     6c2:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6c6:	10 92 7c 00 	sts	0x007C, r1
     6ca:	23 ea       	ldi	r18, 0xA3	; 163
     6cc:	20 93 7a 00 	sts	0x007A, r18
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     6d6:	78 94       	sei
     6d8:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     6de:	08 95       	ret

000006e0 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     6e0:	80 91 3d 01 	lds	r24, 0x013D
     6e4:	81 11       	cpse	r24, r1
     6e6:	1e c0       	rjmp	.+60     	; 0x724 <get_temperature+0x44>
        cli();
     6e8:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     6ea:	88 ec       	ldi	r24, 0xC8	; 200
     6ec:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     6f0:	87 e8       	ldi	r24, 0x87	; 135
     6f2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     6f6:	80 91 7a 00 	lds	r24, 0x007A
     6fa:	80 64       	ori	r24, 0x40	; 64
     6fc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     700:	80 91 7a 00 	lds	r24, 0x007A
     704:	86 fd       	sbrc	r24, 6
     706:	fc cf       	rjmp	.-8      	; 0x700 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     708:	80 91 78 00 	lds	r24, 0x0078
     70c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     710:	10 92 7c 00 	sts	0x007C, r1
     714:	23 ea       	ldi	r18, 0xA3	; 163
     716:	20 93 7a 00 	sts	0x007A, r18
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     720:	78 94       	sei
     722:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     728:	08 95       	ret

0000072a <rand_hard>:

uint8_t rand_hard() {
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	e0 e0       	ldi	r30, 0x00	; 0
     734:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     736:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     738:	03 ea       	ldi	r16, 0xA3	; 163
     73a:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     73c:	d6 e0       	ldi	r29, 0x06	; 6
     73e:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     740:	a1 e0       	ldi	r26, 0x01	; 1
     742:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     744:	60 e8       	ldi	r22, 0x80	; 128
     746:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     748:	f8 94       	cli
            adc_setup_conversion(6);
     74a:	d0 93 7c 00 	sts	0x007C, r29
     74e:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     752:	90 91 7a 00 	lds	r25, 0x007A
     756:	90 64       	ori	r25, 0x40	; 64
     758:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     75c:	90 91 7a 00 	lds	r25, 0x007A
     760:	96 fd       	sbrc	r25, 6
     762:	fc cf       	rjmp	.-8      	; 0x75c <rand_hard+0x32>
            a = ADCW&0x1;
     764:	20 91 78 00 	lds	r18, 0x0078
     768:	30 91 79 00 	lds	r19, 0x0079
     76c:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     76e:	90 91 7a 00 	lds	r25, 0x007A
     772:	90 64       	ori	r25, 0x40	; 64
     774:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     778:	90 91 7a 00 	lds	r25, 0x007A
     77c:	96 fd       	sbrc	r25, 6
     77e:	fc cf       	rjmp	.-8      	; 0x778 <rand_hard+0x4e>
            b = ADCW&0x1;
     780:	40 91 78 00 	lds	r20, 0x0078
     784:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     788:	10 92 7c 00 	sts	0x007C, r1
     78c:	00 93 7a 00 	sts	0x007A, r16
     790:	10 93 7b 00 	sts	0x007B, r17
            sei();
     794:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     796:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     798:	24 13       	cpse	r18, r20
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <rand_hard+0x78>
     79c:	61 50       	subi	r22, 0x01	; 1
     79e:	71 09       	sbc	r23, r1
     7a0:	99 f6       	brne	.-90     	; 0x748 <rand_hard+0x1e>
        if (a)
     7a2:	22 23       	and	r18, r18
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <rand_hard+0x8a>
            num |= (1<<i);
     7a6:	9d 01       	movw	r18, r26
     7a8:	0e 2e       	mov	r0, r30
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <rand_hard+0x84>
     7ac:	22 0f       	add	r18, r18
     7ae:	0a 94       	dec	r0
     7b0:	ea f7       	brpl	.-6      	; 0x7ac <rand_hard+0x82>
     7b2:	82 2b       	or	r24, r18
     7b4:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     7b6:	e8 30       	cpi	r30, 0x08	; 8
     7b8:	f1 05       	cpc	r31, r1
     7ba:	09 f0       	breq	.+2      	; 0x7be <rand_hard+0x94>
     7bc:	c3 cf       	rjmp	.-122    	; 0x744 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     7c8:	80 91 00 01 	lds	r24, 0x0100
     7cc:	98 2f       	mov	r25, r24
     7ce:	99 0f       	add	r25, r25
     7d0:	99 0f       	add	r25, r25
     7d2:	99 0f       	add	r25, r25
     7d4:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     7d6:	90 91 0c 01 	lds	r25, 0x010C
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	29 0f       	add	r18, r25
     7de:	20 93 0c 01 	sts	0x010C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     7e2:	28 2f       	mov	r18, r24
     7e4:	22 95       	swap	r18
     7e6:	26 95       	lsr	r18
     7e8:	27 70       	andi	r18, 0x07	; 7
     7ea:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     7ec:	96 95       	lsr	r25
     7ee:	96 95       	lsr	r25
     7f0:	89 27       	eor	r24, r25
     7f2:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     7f6:	08 95       	ret

000007f8 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     7f8:	80 93 00 01 	sts	0x0100, r24
     7fc:	08 95       	ret

000007fe <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     7fe:	80 91 3d 01 	lds	r24, 0x013D
     802:	81 11       	cpse	r24, r1
     804:	16 c0       	rjmp	.+44     	; 0x832 <get_voltage+0x34>
        cli();                                    // disable interrupts
     806:	f8 94       	cli
        adc_setup_conversion(6);
     808:	86 e0       	ldi	r24, 0x06	; 6
     80a:	80 93 7c 00 	sts	0x007C, r24
     80e:	83 e8       	ldi	r24, 0x83	; 131
     810:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     814:	80 91 7a 00 	lds	r24, 0x007A
     818:	80 64       	ori	r24, 0x40	; 64
     81a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     81e:	80 91 7a 00 	lds	r24, 0x007A
     822:	86 fd       	sbrc	r24, 6
     824:	fc cf       	rjmp	.-8      	; 0x81e <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     826:	80 91 78 00 	lds	r24, 0x0078
     82a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     82e:	78 94       	sei
     830:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     832:	8f ef       	ldi	r24, 0xFF	; 255
     834:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     836:	08 95       	ret

00000838 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     838:	2f 92       	push	r2
     83a:	3f 92       	push	r3
     83c:	4f 92       	push	r4
     83e:	5f 92       	push	r5
     840:	6f 92       	push	r6
     842:	7f 92       	push	r7
     844:	8f 92       	push	r8
     846:	9f 92       	push	r9
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	00 d0       	rcall	.+0      	; 0x85e <estimate_distance+0x26>
     85e:	00 d0       	rcall	.+0      	; 0x860 <estimate_distance+0x28>
     860:	00 d0       	rcall	.+0      	; 0x862 <estimate_distance+0x2a>
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     868:	dc 01       	movw	r26, r24
     86a:	12 96       	adiw	r26, 0x02	; 2
     86c:	0d 90       	ld	r0, X+
     86e:	bc 91       	ld	r27, X
     870:	a0 2d       	mov	r26, r0
     872:	be 83       	std	Y+6, r27	; 0x06
     874:	ad 83       	std	Y+5, r26	; 0x05
     876:	a4 38       	cpi	r26, 0x84	; 132
     878:	e3 e0       	ldi	r30, 0x03	; 3
     87a:	be 07       	cpc	r27, r30
     87c:	0c f0       	brlt	.+2      	; 0x880 <estimate_distance+0x48>
     87e:	c9 c0       	rjmp	.+402    	; 0xa12 <__stack+0x113>
        if (dist->high_gain > kilo_irhigh[0]) {
     880:	80 91 17 01 	lds	r24, 0x0117
     884:	90 91 18 01 	lds	r25, 0x0118
     888:	8a 17       	cp	r24, r26
     88a:	9b 07       	cpc	r25, r27
     88c:	08 f4       	brcc	.+2      	; 0x890 <estimate_distance+0x58>
     88e:	37 c1       	rjmp	.+622    	; 0xafe <__stack+0x1ff>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     890:	00 91 19 01 	lds	r16, 0x0119
     894:	10 91 1a 01 	lds	r17, 0x011A
     898:	0a 17       	cp	r16, r26
     89a:	1b 07       	cpc	r17, r27
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <estimate_distance+0x68>
     89e:	2f c2       	rjmp	.+1118   	; 0xcfe <__stack+0x3ff>
     8a0:	00 91 1b 01 	lds	r16, 0x011B
     8a4:	10 91 1c 01 	lds	r17, 0x011C
     8a8:	0a 17       	cp	r16, r26
     8aa:	1b 07       	cpc	r17, r27
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <estimate_distance+0x78>
     8ae:	2f c2       	rjmp	.+1118   	; 0xd0e <__stack+0x40f>
     8b0:	00 91 1d 01 	lds	r16, 0x011D
     8b4:	10 91 1e 01 	lds	r17, 0x011E
     8b8:	0a 17       	cp	r16, r26
     8ba:	1b 07       	cpc	r17, r27
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <estimate_distance+0x88>
     8be:	2f c2       	rjmp	.+1118   	; 0xd1e <__stack+0x41f>
     8c0:	00 91 1f 01 	lds	r16, 0x011F
     8c4:	10 91 20 01 	lds	r17, 0x0120
     8c8:	0a 17       	cp	r16, r26
     8ca:	1b 07       	cpc	r17, r27
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <estimate_distance+0x98>
     8ce:	2f c2       	rjmp	.+1118   	; 0xd2e <__stack+0x42f>
     8d0:	00 91 21 01 	lds	r16, 0x0121
     8d4:	10 91 22 01 	lds	r17, 0x0122
     8d8:	0a 17       	cp	r16, r26
     8da:	1b 07       	cpc	r17, r27
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <estimate_distance+0xa8>
     8de:	ef c1       	rjmp	.+990    	; 0xcbe <__stack+0x3bf>
     8e0:	00 91 23 01 	lds	r16, 0x0123
     8e4:	10 91 24 01 	lds	r17, 0x0124
     8e8:	0a 17       	cp	r16, r26
     8ea:	1b 07       	cpc	r17, r27
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <estimate_distance+0xb8>
     8ee:	27 c2       	rjmp	.+1102   	; 0xd3e <__stack+0x43f>
     8f0:	00 91 25 01 	lds	r16, 0x0125
     8f4:	10 91 26 01 	lds	r17, 0x0126
     8f8:	0a 17       	cp	r16, r26
     8fa:	1b 07       	cpc	r17, r27
     8fc:	08 f4       	brcc	.+2      	; 0x900 <__stack+0x1>
     8fe:	27 c2       	rjmp	.+1102   	; 0xd4e <__stack+0x44f>
     900:	00 91 27 01 	lds	r16, 0x0127
     904:	10 91 28 01 	lds	r17, 0x0128
     908:	0a 17       	cp	r16, r26
     90a:	1b 07       	cpc	r17, r27
     90c:	08 f4       	brcc	.+2      	; 0x910 <__stack+0x11>
     90e:	27 c2       	rjmp	.+1102   	; 0xd5e <__stack+0x45f>
     910:	00 91 29 01 	lds	r16, 0x0129
     914:	10 91 2a 01 	lds	r17, 0x012A
     918:	0a 17       	cp	r16, r26
     91a:	1b 07       	cpc	r17, r27
     91c:	08 f4       	brcc	.+2      	; 0x920 <__stack+0x21>
     91e:	27 c2       	rjmp	.+1102   	; 0xd6e <__stack+0x46f>
     920:	00 91 2b 01 	lds	r16, 0x012B
     924:	10 91 2c 01 	lds	r17, 0x012C
     928:	0a 17       	cp	r16, r26
     92a:	1b 07       	cpc	r17, r27
     92c:	08 f4       	brcc	.+2      	; 0x930 <__stack+0x31>
     92e:	27 c2       	rjmp	.+1102   	; 0xd7e <__stack+0x47f>
     930:	00 91 2d 01 	lds	r16, 0x012D
     934:	10 91 2e 01 	lds	r17, 0x012E
     938:	0a 17       	cp	r16, r26
     93a:	1b 07       	cpc	r17, r27
     93c:	08 f4       	brcc	.+2      	; 0x940 <__stack+0x41>
     93e:	23 c2       	rjmp	.+1094   	; 0xd86 <__stack+0x487>
     940:	00 91 2f 01 	lds	r16, 0x012F
     944:	10 91 30 01 	lds	r17, 0x0130
     948:	0a 17       	cp	r16, r26
     94a:	1b 07       	cpc	r17, r27
     94c:	08 f4       	brcc	.+2      	; 0x950 <__stack+0x51>
     94e:	23 c2       	rjmp	.+1094   	; 0xd96 <__stack+0x497>
     950:	00 91 31 01 	lds	r16, 0x0131
     954:	10 91 32 01 	lds	r17, 0x0132
     958:	0a 17       	cp	r16, r26
     95a:	1b 07       	cpc	r17, r27
     95c:	08 f4       	brcc	.+2      	; 0x960 <__stack+0x61>
     95e:	23 c2       	rjmp	.+1094   	; 0xda6 <__stack+0x4a7>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 ed       	ldi	r26, 0xD0	; 208
     966:	b0 e4       	ldi	r27, 0x40	; 64
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	9a 83       	std	Y+2, r25	; 0x02
     96c:	ab 83       	std	Y+3, r26	; 0x03
     96e:	bc 83       	std	Y+4, r27	; 0x04
     970:	4c e0       	ldi	r20, 0x0C	; 12
     972:	e4 2e       	mov	r14, r20
     974:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     976:	f7 01       	movw	r30, r14
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	e9 5e       	subi	r30, 0xE9	; 233
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	b8 01       	movw	r22, r16
     986:	68 1b       	sub	r22, r24
     988:	79 0b       	sbc	r23, r25
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	0e 94 8f 0a 	call	0x151e	; 0x151e <__addsf3>
     99a:	6b 01       	movw	r12, r22
     99c:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     99e:	ad 81       	ldd	r26, Y+5	; 0x05
     9a0:	be 81       	ldd	r27, Y+6	; 0x06
     9a2:	bd 01       	movw	r22, r26
     9a4:	bb 0f       	add	r27, r27
     9a6:	88 0b       	sbc	r24, r24
     9a8:	99 0b       	sbc	r25, r25
     9aa:	0e 94 a5 0b 	call	0x174a	; 0x174a <__floatsisf>
     9ae:	4b 01       	movw	r8, r22
     9b0:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     9b2:	b8 01       	movw	r22, r16
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     9bc:	2b 01       	movw	r4, r22
     9be:	3c 01       	movw	r6, r24
     9c0:	29 81       	ldd	r18, Y+1	; 0x01
     9c2:	3a 81       	ldd	r19, Y+2	; 0x02
     9c4:	4b 81       	ldd	r20, Y+3	; 0x03
     9c6:	5c 81       	ldd	r21, Y+4	; 0x04
     9c8:	c7 01       	movw	r24, r14
     9ca:	b6 01       	movw	r22, r12
     9cc:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24
     9d4:	c3 01       	movw	r24, r6
     9d6:	b2 01       	movw	r22, r4
     9d8:	0e 94 8e 0a 	call	0x151c	; 0x151c <__subsf3>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9e0:	c5 01       	movw	r24, r10
     9e2:	b4 01       	movw	r22, r8
     9e4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__subsf3>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e2       	ldi	r20, 0x20	; 32
     9ee:	51 e4       	ldi	r21, 0x41	; 65
     9f0:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
            b=((int)((int)b/(int)slope));
     9f4:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fixsfsi>
     9f8:	8b 01       	movw	r16, r22
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fixsfsi>
     a02:	ab 01       	movw	r20, r22
     a04:	bc 01       	movw	r22, r24
     a06:	c8 01       	movw	r24, r16
     a08:	ba 01       	movw	r22, r20
     a0a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
            dist_high=b;
     a0e:	16 2f       	mov	r17, r22
     a10:	77 c0       	rjmp	.+238    	; 0xb00 <__stack+0x201>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a12:	dc 01       	movw	r26, r24
     a14:	cd 90       	ld	r12, X+
     a16:	dc 90       	ld	r13, X
     a18:	80 91 3e 01 	lds	r24, 0x013E
     a1c:	90 91 3f 01 	lds	r25, 0x013F
     a20:	8c 15       	cp	r24, r12
     a22:	9d 05       	cpc	r25, r13
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x129>
     a26:	8c c0       	rjmp	.+280    	; 0xb40 <__stack+0x241>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a28:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a2a:	e0 90 40 01 	lds	r14, 0x0140
     a2e:	f0 90 41 01 	lds	r15, 0x0141
     a32:	ec 14       	cp	r14, r12
     a34:	fd 04       	cpc	r15, r13
     a36:	08 f4       	brcc	.+2      	; 0xa3a <__stack+0x13b>
     a38:	5e c1       	rjmp	.+700    	; 0xcf6 <__stack+0x3f7>
     a3a:	e0 90 42 01 	lds	r14, 0x0142
     a3e:	f0 90 43 01 	lds	r15, 0x0143
     a42:	ec 14       	cp	r14, r12
     a44:	fd 04       	cpc	r15, r13
     a46:	08 f4       	brcc	.+2      	; 0xa4a <__stack+0x14b>
     a48:	5e c1       	rjmp	.+700    	; 0xd06 <__stack+0x407>
     a4a:	e0 90 44 01 	lds	r14, 0x0144
     a4e:	f0 90 45 01 	lds	r15, 0x0145
     a52:	ec 14       	cp	r14, r12
     a54:	fd 04       	cpc	r15, r13
     a56:	08 f4       	brcc	.+2      	; 0xa5a <__stack+0x15b>
     a58:	5e c1       	rjmp	.+700    	; 0xd16 <__stack+0x417>
     a5a:	e0 90 46 01 	lds	r14, 0x0146
     a5e:	f0 90 47 01 	lds	r15, 0x0147
     a62:	ec 14       	cp	r14, r12
     a64:	fd 04       	cpc	r15, r13
     a66:	08 f4       	brcc	.+2      	; 0xa6a <__stack+0x16b>
     a68:	5e c1       	rjmp	.+700    	; 0xd26 <__stack+0x427>
     a6a:	e0 90 48 01 	lds	r14, 0x0148
     a6e:	f0 90 49 01 	lds	r15, 0x0149
     a72:	ec 14       	cp	r14, r12
     a74:	fd 04       	cpc	r15, r13
     a76:	08 f4       	brcc	.+2      	; 0xa7a <__stack+0x17b>
     a78:	c3 c0       	rjmp	.+390    	; 0xc00 <__stack+0x301>
     a7a:	e0 90 4a 01 	lds	r14, 0x014A
     a7e:	f0 90 4b 01 	lds	r15, 0x014B
     a82:	ec 14       	cp	r14, r12
     a84:	fd 04       	cpc	r15, r13
     a86:	08 f4       	brcc	.+2      	; 0xa8a <__stack+0x18b>
     a88:	56 c1       	rjmp	.+684    	; 0xd36 <__stack+0x437>
     a8a:	e0 90 4c 01 	lds	r14, 0x014C
     a8e:	f0 90 4d 01 	lds	r15, 0x014D
     a92:	ec 14       	cp	r14, r12
     a94:	fd 04       	cpc	r15, r13
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__stack+0x19b>
     a98:	56 c1       	rjmp	.+684    	; 0xd46 <__stack+0x447>
     a9a:	e0 90 4e 01 	lds	r14, 0x014E
     a9e:	f0 90 4f 01 	lds	r15, 0x014F
     aa2:	ec 14       	cp	r14, r12
     aa4:	fd 04       	cpc	r15, r13
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	56 c1       	rjmp	.+684    	; 0xd56 <__stack+0x457>
     aaa:	e0 90 50 01 	lds	r14, 0x0150
     aae:	f0 90 51 01 	lds	r15, 0x0151
     ab2:	ec 14       	cp	r14, r12
     ab4:	fd 04       	cpc	r15, r13
     ab6:	08 f4       	brcc	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	56 c1       	rjmp	.+684    	; 0xd66 <__stack+0x467>
     aba:	e0 90 52 01 	lds	r14, 0x0152
     abe:	f0 90 53 01 	lds	r15, 0x0153
     ac2:	ec 14       	cp	r14, r12
     ac4:	fd 04       	cpc	r15, r13
     ac6:	08 f4       	brcc	.+2      	; 0xaca <__stack+0x1cb>
     ac8:	56 c1       	rjmp	.+684    	; 0xd76 <__stack+0x477>
     aca:	e0 90 54 01 	lds	r14, 0x0154
     ace:	f0 90 55 01 	lds	r15, 0x0155
     ad2:	ec 14       	cp	r14, r12
     ad4:	fd 04       	cpc	r15, r13
     ad6:	08 f4       	brcc	.+2      	; 0xada <__stack+0x1db>
     ad8:	5a c1       	rjmp	.+692    	; 0xd8e <__stack+0x48f>
     ada:	e0 90 56 01 	lds	r14, 0x0156
     ade:	f0 90 57 01 	lds	r15, 0x0157
     ae2:	ec 14       	cp	r14, r12
     ae4:	fd 04       	cpc	r15, r13
     ae6:	08 f4       	brcc	.+2      	; 0xaea <__stack+0x1eb>
     ae8:	5a c1       	rjmp	.+692    	; 0xd9e <__stack+0x49f>
     aea:	e0 90 58 01 	lds	r14, 0x0158
     aee:	f0 90 59 01 	lds	r15, 0x0159
     af2:	ec 14       	cp	r14, r12
     af4:	fd 04       	cpc	r15, r13
     af6:	08 f4       	brcc	.+2      	; 0xafa <__stack+0x1fb>
     af8:	5a c1       	rjmp	.+692    	; 0xdae <__stack+0x4af>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     afa:	0a e5       	ldi	r16, 0x5A	; 90
     afc:	31 c0       	rjmp	.+98     	; 0xb60 <__stack+0x261>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     afe:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b00:	ed 81       	ldd	r30, Y+5	; 0x05
     b02:	fe 81       	ldd	r31, Y+6	; 0x06
     b04:	ed 3b       	cpi	r30, 0xBD	; 189
     b06:	f2 40       	sbci	r31, 0x02	; 2
     b08:	fc f4       	brge	.+62     	; 0xb48 <__stack+0x249>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b0a:	81 e2       	ldi	r24, 0x21	; 33
     b0c:	81 0f       	add	r24, r17
    }
}
     b0e:	26 96       	adiw	r28, 0x06	; 6
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	8f 90       	pop	r8
     b32:	7f 90       	pop	r7
     b34:	6f 90       	pop	r6
     b36:	5f 90       	pop	r5
     b38:	4f 90       	pop	r4
     b3a:	3f 90       	pop	r3
     b3c:	2f 90       	pop	r2
     b3e:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b40:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b42:	81 e2       	ldi	r24, 0x21	; 33
     b44:	80 0f       	add	r24, r16
     b46:	e3 cf       	rjmp	.-58     	; 0xb0e <__stack+0x20f>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b48:	d1 01       	movw	r26, r2
     b4a:	cd 90       	ld	r12, X+
     b4c:	dc 90       	ld	r13, X
     b4e:	80 91 3e 01 	lds	r24, 0x013E
     b52:	90 91 3f 01 	lds	r25, 0x013F
     b56:	8c 15       	cp	r24, r12
     b58:	9d 05       	cpc	r25, r13
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <__stack+0x25f>
     b5c:	66 cf       	rjmp	.-308    	; 0xa2a <__stack+0x12b>
            dist_low=0;
     b5e:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b60:	1f 3f       	cpi	r17, 0xFF	; 255
     b62:	79 f3       	breq	.-34     	; 0xb42 <__stack+0x243>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     b64:	ed 81       	ldd	r30, Y+5	; 0x05
     b66:	fe 81       	ldd	r31, Y+6	; 0x06
     b68:	bf 01       	movw	r22, r30
     b6a:	ff 0f       	add	r31, r31
     b6c:	88 0b       	sbc	r24, r24
     b6e:	99 0b       	sbc	r25, r25
     b70:	0e 94 a5 0b 	call	0x174a	; 0x174a <__floatsisf>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
     b78:	61 2f       	mov	r22, r17
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     b84:	4b 01       	movw	r8, r22
     b86:	5c 01       	movw	r10, r24
     b88:	a7 01       	movw	r20, r14
     b8a:	96 01       	movw	r18, r12
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	81 e6       	ldi	r24, 0x61	; 97
     b92:	94 e4       	ldi	r25, 0x44	; 68
     b94:	0e 94 8e 0a 	call	0x151c	; 0x151c <__subsf3>
     b98:	9b 01       	movw	r18, r22
     b9a:	ac 01       	movw	r20, r24
     b9c:	c5 01       	movw	r24, r10
     b9e:	b4 01       	movw	r22, r8
     ba0:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
     ba4:	4b 01       	movw	r8, r22
     ba6:	5c 01       	movw	r10, r24
     ba8:	60 2f       	mov	r22, r16
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     bb4:	2b 01       	movw	r4, r22
     bb6:	3c 01       	movw	r6, r24
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4f e2       	ldi	r20, 0x2F	; 47
     bbe:	54 e4       	ldi	r21, 0x44	; 68
     bc0:	c7 01       	movw	r24, r14
     bc2:	b6 01       	movw	r22, r12
     bc4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__subsf3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	c3 01       	movw	r24, r6
     bce:	b2 01       	movw	r22, r4
     bd0:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	0e 94 8f 0a 	call	0x151e	; 0x151e <__addsf3>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	48 e4       	ldi	r20, 0x48	; 72
     be6:	53 e4       	ldi	r21, 0x43	; 67
     be8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__divsf3>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	44 e0       	ldi	r20, 0x04	; 4
     bf2:	52 e4       	ldi	r21, 0x42	; 66
     bf4:	0e 94 8f 0a 	call	0x151e	; 0x151e <__addsf3>
     bf8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fixunssfsi>
     bfc:	86 2f       	mov	r24, r22
     bfe:	87 cf       	rjmp	.-242    	; 0xb0e <__stack+0x20f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c00:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c02:	85 e0       	ldi	r24, 0x05	; 5
     c04:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	fc 01       	movw	r30, r24
     c0c:	e4 5c       	subi	r30, 0xC4	; 196
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	b7 01       	movw	r22, r14
     c16:	68 1b       	sub	r22, r24
     c18:	79 0b       	sbc	r23, r25
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	0e 94 8f 0a 	call	0x151e	; 0x151e <__addsf3>
     c2a:	4b 01       	movw	r8, r22
     c2c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c2e:	b6 01       	movw	r22, r12
     c30:	dd 0c       	add	r13, r13
     c32:	88 0b       	sbc	r24, r24
     c34:	99 0b       	sbc	r25, r25
     c36:	0e 94 a5 0b 	call	0x174a	; 0x174a <__floatsisf>
     c3a:	2b 01       	movw	r4, r22
     c3c:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c3e:	b7 01       	movw	r22, r14
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     c48:	6b 01       	movw	r12, r22
     c4a:	7c 01       	movw	r14, r24
     c4c:	60 2f       	mov	r22, r16
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	a9 01       	movw	r20, r18
     c6a:	0e 94 8f 0a 	call	0x151e	; 0x151e <__addsf3>
     c6e:	a5 01       	movw	r20, r10
     c70:	94 01       	movw	r18, r8
     c72:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
     c76:	9b 01       	movw	r18, r22
     c78:	ac 01       	movw	r20, r24
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	0e 94 8e 0a 	call	0x151c	; 0x151c <__subsf3>
     c82:	9b 01       	movw	r18, r22
     c84:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c86:	c3 01       	movw	r24, r6
     c88:	b2 01       	movw	r22, r4
     c8a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__subsf3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e2       	ldi	r20, 0x20	; 32
     c94:	51 e4       	ldi	r21, 0x41	; 65
     c96:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
                b=((int)((int)b/(int)slope));
     c9a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fixsfsi>
     c9e:	7b 01       	movw	r14, r22
     ca0:	c5 01       	movw	r24, r10
     ca2:	b4 01       	movw	r22, r8
     ca4:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fixsfsi>
     ca8:	ab 01       	movw	r20, r22
     caa:	bc 01       	movw	r22, r24
     cac:	c7 01       	movw	r24, r14
     cae:	ba 01       	movw	r22, r20
     cb0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
                dist_low=b;
     cb4:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     cb6:	6f 3f       	cpi	r22, 0xFF	; 255
     cb8:	09 f0       	breq	.+2      	; 0xcbc <__stack+0x3bd>
     cba:	52 cf       	rjmp	.-348    	; 0xb60 <__stack+0x261>
     cbc:	26 cf       	rjmp	.-436    	; 0xb0a <__stack+0x20b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cbe:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     cc0:	85 e0       	ldi	r24, 0x05	; 5
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	7c 01       	movw	r14, r24
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	ef 1a       	sub	r14, r31
     cca:	f1 08       	sbc	r15, r1
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__floatunsisf>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	5f e3       	ldi	r21, 0x3F	; 63
     cde:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	a9 01       	movw	r20, r18
     ce8:	0e 94 8f 0a 	call	0x151e	; 0x151e <__addsf3>
     cec:	69 83       	std	Y+1, r22	; 0x01
     cee:	7a 83       	std	Y+2, r23	; 0x02
     cf0:	8b 83       	std	Y+3, r24	; 0x03
     cf2:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     cf4:	40 ce       	rjmp	.-896    	; 0x976 <__stack+0x77>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     cf6:	01 e0       	ldi	r16, 0x01	; 1
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	84 cf       	rjmp	.-248    	; 0xc06 <__stack+0x307>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	df cf       	rjmp	.-66     	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d06:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	7c cf       	rjmp	.-264    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0e:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	d7 cf       	rjmp	.-82     	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d16:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	74 cf       	rjmp	.-280    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1e:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	cf cf       	rjmp	.-98     	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d26:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	6c cf       	rjmp	.-296    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d2e:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d30:	84 e0       	ldi	r24, 0x04	; 4
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	c7 cf       	rjmp	.-114    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d36:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d38:	86 e0       	ldi	r24, 0x06	; 6
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	64 cf       	rjmp	.-312    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d3e:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d40:	86 e0       	ldi	r24, 0x06	; 6
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	bf cf       	rjmp	.-130    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d46:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     d48:	87 e0       	ldi	r24, 0x07	; 7
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	5c cf       	rjmp	.-328    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d4e:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	b7 cf       	rjmp	.-146    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d56:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     d58:	88 e0       	ldi	r24, 0x08	; 8
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	54 cf       	rjmp	.-344    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d5e:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     d60:	88 e0       	ldi	r24, 0x08	; 8
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	af cf       	rjmp	.-162    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d66:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     d68:	89 e0       	ldi	r24, 0x09	; 9
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	4c cf       	rjmp	.-360    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d6e:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d70:	89 e0       	ldi	r24, 0x09	; 9
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a7 cf       	rjmp	.-178    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d76:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     d78:	8a e0       	ldi	r24, 0x0A	; 10
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	44 cf       	rjmp	.-376    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d7e:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	9f cf       	rjmp	.-194    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d86:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d88:	8b e0       	ldi	r24, 0x0B	; 11
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9b cf       	rjmp	.-202    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d8e:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     d90:	8b e0       	ldi	r24, 0x0B	; 11
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	38 cf       	rjmp	.-400    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d96:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d98:	8c e0       	ldi	r24, 0x0C	; 12
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	93 cf       	rjmp	.-218    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d9e:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     da0:	8c e0       	ldi	r24, 0x0C	; 12
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	30 cf       	rjmp	.-416    	; 0xc06 <__stack+0x307>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     da6:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     da8:	8d e0       	ldi	r24, 0x0D	; 13
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	8b cf       	rjmp	.-234    	; 0xcc4 <__stack+0x3c5>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dae:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     db0:	8d e0       	ldi	r24, 0x0D	; 13
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	28 cf       	rjmp	.-432    	; 0xc06 <__stack+0x307>

00000db6 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
    tx_clock += tx_increment;
     dd8:	20 91 5d 01 	lds	r18, 0x015D
     ddc:	30 91 5e 01 	lds	r19, 0x015E
     de0:	80 91 5b 01 	lds	r24, 0x015B
     de4:	90 91 5c 01 	lds	r25, 0x015C
     de8:	82 0f       	add	r24, r18
     dea:	93 1f       	adc	r25, r19
     dec:	90 93 5e 01 	sts	0x015E, r25
     df0:	80 93 5d 01 	sts	0x015D, r24
    tx_increment = 0xFF;
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 5c 01 	sts	0x015C, r25
     dfc:	80 93 5b 01 	sts	0x015B, r24
    OCR0A = tx_increment;
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e04:	80 91 39 01 	lds	r24, 0x0139
     e08:	90 91 3a 01 	lds	r25, 0x013A
     e0c:	a0 91 3b 01 	lds	r26, 0x013B
     e10:	b0 91 3c 01 	lds	r27, 0x013C
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	a1 1d       	adc	r26, r1
     e18:	b1 1d       	adc	r27, r1
     e1a:	80 93 39 01 	sts	0x0139, r24
     e1e:	90 93 3a 01 	sts	0x013A, r25
     e22:	a0 93 3b 01 	sts	0x013B, r26
     e26:	b0 93 3c 01 	sts	0x013C, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e2a:	80 91 3d 01 	lds	r24, 0x013D
     e2e:	81 11       	cpse	r24, r1
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <__vector_14+0x9a>
     e32:	80 91 6c 01 	lds	r24, 0x016C
     e36:	90 91 6d 01 	lds	r25, 0x016D
     e3a:	20 91 5d 01 	lds	r18, 0x015D
     e3e:	30 91 5e 01 	lds	r19, 0x015E
     e42:	82 17       	cp	r24, r18
     e44:	93 07       	cpc	r25, r19
     e46:	20 f4       	brcc	.+8      	; 0xe50 <__vector_14+0x9a>
     e48:	80 91 0f 01 	lds	r24, 0x010F
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	89 f0       	breq	.+34     	; 0xe72 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e72:	e0 91 03 01 	lds	r30, 0x0103
     e76:	f0 91 04 01 	lds	r31, 0x0104
     e7a:	09 95       	icall
        if (msg) {
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	41 f3       	breq	.-48     	; 0xe50 <__vector_14+0x9a>
            if (message_send(msg)) {
     e80:	0e 94 c3 09 	call	0x1386	; 0x1386 <message_send>
     e84:	81 11       	cpse	r24, r1
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e88:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <rand>
     e8c:	99 27       	eor	r25, r25
     e8e:	90 93 5c 01 	sts	0x015C, r25
     e92:	80 93 5b 01 	sts	0x015B, r24
                OCR0A = tx_increment;
     e96:	87 bd       	out	0x27, r24	; 39
     e98:	db cf       	rjmp	.-74     	; 0xe50 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e9a:	e0 91 01 01 	lds	r30, 0x0101
     e9e:	f0 91 02 01 	lds	r31, 0x0102
     ea2:	09 95       	icall
                tx_clock = 0;
     ea4:	10 92 5e 01 	sts	0x015E, r1
     ea8:	10 92 5d 01 	sts	0x015D, r1
     eac:	d1 cf       	rjmp	.-94     	; 0xe50 <__vector_14+0x9a>

00000eae <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     eae:	80 ff       	sbrs	r24, 0
     eb0:	11 c0       	rjmp	.+34     	; 0xed4 <set_color+0x26>
        DDRD |= (1<<5);
     eb2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     eb4:	81 ff       	sbrs	r24, 1
     eb6:	11 c0       	rjmp	.+34     	; 0xeda <set_color+0x2c>
        DDRD |= (1<<4);
     eb8:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     eba:	82 ff       	sbrs	r24, 2
     ebc:	11 c0       	rjmp	.+34     	; 0xee0 <set_color+0x32>
        DDRC |= (1<<3);
     ebe:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     ec0:	83 ff       	sbrs	r24, 3
     ec2:	11 c0       	rjmp	.+34     	; 0xee6 <set_color+0x38>
        DDRC |= (1<<2);
     ec4:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     ec6:	84 ff       	sbrs	r24, 4
     ec8:	11 c0       	rjmp	.+34     	; 0xeec <set_color+0x3e>
        DDRC |= (1<<5);
     eca:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     ecc:	85 fd       	sbrc	r24, 5
     ece:	11 c0       	rjmp	.+34     	; 0xef2 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ed0:	3c 98       	cbi	0x07, 4	; 7
     ed2:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     ed4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     ed6:	81 fd       	sbrc	r24, 1
     ed8:	ef cf       	rjmp	.-34     	; 0xeb8 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     eda:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     edc:	82 fd       	sbrc	r24, 2
     ede:	ef cf       	rjmp	.-34     	; 0xebe <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     ee0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     ee2:	83 fd       	sbrc	r24, 3
     ee4:	ef cf       	rjmp	.-34     	; 0xec4 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ee6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     ee8:	84 fd       	sbrc	r24, 4
     eea:	ef cf       	rjmp	.-34     	; 0xeca <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     eec:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     eee:	85 ff       	sbrs	r24, 5
     ef0:	ef cf       	rjmp	.-34     	; 0xed0 <set_color+0x22>
        DDRC |= (1<<4);
     ef2:	3c 9a       	sbi	0x07, 4	; 7
     ef4:	08 95       	ret

00000ef6 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     ef6:	1f 92       	push	r1
     ef8:	0f 92       	push	r0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	0f 92       	push	r0
     efe:	11 24       	eor	r1, r1
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
    rx_timer_off();
     f04:	10 92 81 00 	sts	0x0081, r1
     f08:	10 92 85 00 	sts	0x0085, r1
     f0c:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 16 01 	sts	0x0116, r24
    rx_leadingbyte = 1;
     f16:	80 93 5a 01 	sts	0x015A, r24
    rx_busy = 0;
     f1a:	10 92 3d 01 	sts	0x013D, r1
    adc_trigger_high_gain();
     f1e:	10 92 7c 00 	sts	0x007C, r1
     f22:	93 ea       	ldi	r25, 0xA3	; 163
     f24:	90 93 7a 00 	sts	0x007A, r25
     f28:	80 93 7b 00 	sts	0x007B, r24
}
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ef 93       	push	r30
     f5e:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f60:	20 91 84 00 	lds	r18, 0x0084
     f64:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	40 93 3d 01 	sts	0x013D, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f6e:	80 91 16 01 	lds	r24, 0x0116
     f72:	88 23       	and	r24, r24
     f74:	a9 f1       	breq	.+106    	; 0xfe0 <__vector_23+0xa6>
        rx_timer_on();
     f76:	10 92 85 00 	sts	0x0085, r1
     f7a:	10 92 84 00 	sts	0x0084, r1
     f7e:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     f82:	10 92 6e 01 	sts	0x016E, r1
        rx_leadingbit = 0;
     f86:	10 92 16 01 	sts	0x0116, r1
        if (rx_leadingbyte) {
     f8a:	80 91 5a 01 	lds	r24, 0x015A
     f8e:	88 23       	and	r24, r24
     f90:	a1 f0       	breq	.+40     	; 0xfba <__vector_23+0x80>
            adc_finish_conversion();
     f92:	80 91 7a 00 	lds	r24, 0x007A
     f96:	86 fd       	sbrc	r24, 6
     f98:	fc cf       	rjmp	.-8      	; 0xf92 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f9a:	80 91 78 00 	lds	r24, 0x0078
     f9e:	90 91 79 00 	lds	r25, 0x0079
     fa2:	90 93 38 01 	sts	0x0138, r25
     fa6:	80 93 37 01 	sts	0x0137, r24
            adc_trigger_low_gain();
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 7c 00 	sts	0x007C, r24
     fb0:	93 ea       	ldi	r25, 0xA3	; 163
     fb2:	90 93 7a 00 	sts	0x007A, r25
     fb6:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	bf 91       	pop	r27
     fc4:	af 91       	pop	r26
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	7f 91       	pop	r23
     fcc:	6f 91       	pop	r22
     fce:	5f 91       	pop	r21
     fd0:	4f 91       	pop	r20
     fd2:	3f 91       	pop	r19
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     fe0:	c9 01       	movw	r24, r18
     fe2:	87 58       	subi	r24, 0x87	; 135
     fe4:	91 09       	sbc	r25, r1
     fe6:	84 37       	cpi	r24, 0x74	; 116
     fe8:	99 40       	sbci	r25, 0x09	; 9
     fea:	08 f0       	brcs	.+2      	; 0xfee <__vector_23+0xb4>
     fec:	52 c0       	rjmp	.+164    	; 0x1092 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     fee:	26 58       	subi	r18, 0x86	; 134
     ff0:	31 09       	sbc	r19, r1
     ff2:	a4 ef       	ldi	r26, 0xF4	; 244
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__umulhisi3>
     ffa:	aa 27       	eor	r26, r26
     ffc:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     ffe:	88 30       	cpi	r24, 0x08	; 8
    1000:	91 05       	cpc	r25, r1
    1002:	a1 05       	cpc	r26, r1
    1004:	b1 05       	cpc	r27, r1
    1006:	08 f4       	brcc	.+2      	; 0x100a <__vector_23+0xd0>
    1008:	7b c0       	rjmp	.+246    	; 0x1100 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    100a:	40 93 16 01 	sts	0x0116, r20
                if (rx_leadingbyte) {
    100e:	80 91 5a 01 	lds	r24, 0x015A
    1012:	81 11       	cpse	r24, r1
    1014:	52 c0       	rjmp	.+164    	; 0x10ba <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1016:	80 91 34 01 	lds	r24, 0x0134
    101a:	e8 2f       	mov	r30, r24
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	e0 5a       	subi	r30, 0xA0	; 160
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	90 91 6e 01 	lds	r25, 0x016E
    1026:	90 83       	st	Z, r25
                    rx_byteindex++;
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	80 93 34 01 	sts	0x0134, r24
                    if (rx_byteindex == sizeof(message_t)) {
    102e:	8c 30       	cpi	r24, 0x0C	; 12
    1030:	21 f6       	brne	.-120    	; 0xfba <__vector_23+0x80>
                        rx_timer_off();
    1032:	10 92 81 00 	sts	0x0081, r1
    1036:	10 92 85 00 	sts	0x0085, r1
    103a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    103e:	40 93 5a 01 	sts	0x015A, r20
                        rx_busy = 0;
    1042:	10 92 3d 01 	sts	0x013D, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1046:	c0 91 6a 01 	lds	r28, 0x016A
    104a:	d0 91 6b 01 	lds	r29, 0x016B
    104e:	80 e6       	ldi	r24, 0x60	; 96
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	0e 94 a7 09 	call	0x134e	; 0x134e <message_crc>
    1056:	c8 17       	cp	r28, r24
    1058:	d9 07       	cpc	r29, r25
    105a:	09 f0       	breq	.+2      	; 0x105e <__vector_23+0x124>
    105c:	ae cf       	rjmp	.-164    	; 0xfba <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    105e:	80 91 69 01 	lds	r24, 0x0169
    1062:	87 ff       	sbrs	r24, 7
    1064:	61 c0       	rjmp	.+194    	; 0x1128 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1066:	98 e7       	ldi	r25, 0x78	; 120
    1068:	98 0f       	add	r25, r24
    106a:	93 30       	cpi	r25, 0x03	; 3
    106c:	30 f0       	brcs	.+12     	; 0x107a <__vector_23+0x140>
        motors_off();
    106e:	53 98       	cbi	0x0a, 3	; 10
    1070:	23 98       	cbi	0x04, 3	; 4
    1072:	10 92 b4 00 	sts	0x00B4, r1
    1076:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	fc 01       	movw	r30, r24
    107e:	e0 58       	subi	r30, 0x80	; 128
    1080:	f1 09       	sbc	r31, r1
    1082:	eb 30       	cpi	r30, 0x0B	; 11
    1084:	f1 05       	cpc	r31, r1
    1086:	08 f0       	brcs	.+2      	; 0x108a <__vector_23+0x150>
    1088:	98 cf       	rjmp	.-208    	; 0xfba <__vector_23+0x80>
    108a:	e5 5c       	subi	r30, 0xC5	; 197
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1092:	10 92 81 00 	sts	0x0081, r1
    1096:	10 92 85 00 	sts	0x0085, r1
    109a:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    109e:	40 93 16 01 	sts	0x0116, r20
            rx_leadingbyte = 1;
    10a2:	40 93 5a 01 	sts	0x015A, r20
            rx_busy = 0;
    10a6:	10 92 3d 01 	sts	0x013D, r1
            adc_trigger_high_gain();
    10aa:	10 92 7c 00 	sts	0x007C, r1
    10ae:	83 ea       	ldi	r24, 0xA3	; 163
    10b0:	80 93 7a 00 	sts	0x007A, r24
    10b4:	40 93 7b 00 	sts	0x007B, r20
    10b8:	80 cf       	rjmp	.-256    	; 0xfba <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    10ba:	80 91 7a 00 	lds	r24, 0x007A
    10be:	86 fd       	sbrc	r24, 6
    10c0:	fc cf       	rjmp	.-8      	; 0x10ba <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    10c2:	80 91 78 00 	lds	r24, 0x0078
    10c6:	90 91 79 00 	lds	r25, 0x0079
    10ca:	90 93 36 01 	sts	0x0136, r25
    10ce:	80 93 35 01 	sts	0x0135, r24
                    adc_trigger_high_gain();
    10d2:	10 92 7c 00 	sts	0x007C, r1
    10d6:	83 ea       	ldi	r24, 0xA3	; 163
    10d8:	80 93 7a 00 	sts	0x007A, r24
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    10e2:	90 91 6e 01 	lds	r25, 0x016E
    10e6:	99 23       	and	r25, r25
    10e8:	d1 f0       	breq	.+52     	; 0x111e <__vector_23+0x1e4>
                        rx_timer_off();
    10ea:	10 92 81 00 	sts	0x0081, r1
    10ee:	10 92 85 00 	sts	0x0085, r1
    10f2:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    10f6:	80 93 5a 01 	sts	0x015A, r24
                        rx_busy = 0;
    10fa:	10 92 3d 01 	sts	0x013D, r1
    10fe:	5d cf       	rjmp	.-326    	; 0xfba <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	f9 01       	movw	r30, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <__vector_23+0x1d2>
    1108:	ee 0f       	add	r30, r30
    110a:	ff 1f       	adc	r31, r31
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <__vector_23+0x1ce>
    1110:	cf 01       	movw	r24, r30
    1112:	90 91 6e 01 	lds	r25, 0x016E
    1116:	89 2b       	or	r24, r25
    1118:	80 93 6e 01 	sts	0x016E, r24
    111c:	4e cf       	rjmp	.-356    	; 0xfba <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    111e:	10 92 5a 01 	sts	0x015A, r1
                        rx_byteindex = 0;
    1122:	10 92 34 01 	sts	0x0134, r1
    1126:	49 cf       	rjmp	.-366    	; 0xfba <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1128:	e0 91 05 01 	lds	r30, 0x0105
    112c:	f0 91 06 01 	lds	r31, 0x0106
    1130:	65 e3       	ldi	r22, 0x35	; 53
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	80 e6       	ldi	r24, 0x60	; 96
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	09 95       	icall
    113a:	3f cf       	rjmp	.-386    	; 0xfba <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    113c:	80 91 60 01 	lds	r24, 0x0160
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	09 f4       	brne	.+2      	; 0x1146 <__vector_23+0x20c>
    1144:	dd c0       	rjmp	.+442    	; 0x1300 <__vector_23+0x3c6>
    1146:	08 f4       	brcc	.+2      	; 0x114a <__vector_23+0x210>
    1148:	ba c0       	rjmp	.+372    	; 0x12be <__vector_23+0x384>
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	09 f4       	brne	.+2      	; 0x1150 <__vector_23+0x216>
    114e:	c6 c0       	rjmp	.+396    	; 0x12dc <__vector_23+0x3a2>
    1150:	84 30       	cpi	r24, 0x04	; 4
    1152:	09 f0       	breq	.+2      	; 0x1156 <__vector_23+0x21c>
    1154:	b1 c0       	rjmp	.+354    	; 0x12b8 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1156:	80 91 0d 01 	lds	r24, 0x010D
    115a:	90 91 66 01 	lds	r25, 0x0166
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	09 f4       	brne	.+2      	; 0x1164 <__vector_23+0x22a>
    1162:	e3 c0       	rjmp	.+454    	; 0x132a <__vector_23+0x3f0>
    1164:	80 91 65 01 	lds	r24, 0x0165
                        prev_motion = MOVE_STOP;
    1168:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    116c:	23 e0       	ldi	r18, 0x03	; 3
    116e:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    1172:	80 93 71 01 	sts	0x0171, r24
                        kilo_straight_right = calibmsg->straight_right;
    1176:	90 93 72 01 	sts	0x0172, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    117a:	80 91 0f 01 	lds	r24, 0x010F
    117e:	86 30       	cpi	r24, 0x06	; 6
    1180:	09 f4       	brne	.+2      	; 0x1184 <__vector_23+0x24a>
    1182:	1b cf       	rjmp	.-458    	; 0xfba <__vector_23+0x80>
                motors_on();
    1184:	53 9a       	sbi	0x0a, 3	; 10
    1186:	23 9a       	sbi	0x04, 3	; 4
    1188:	10 92 b4 00 	sts	0x00B4, r1
    118c:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	80 93 0f 01 	sts	0x010F, r24
    1196:	11 cf       	rjmp	.-478    	; 0xfba <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1198:	80 91 0f 01 	lds	r24, 0x010F
    119c:	86 30       	cpi	r24, 0x06	; 6
    119e:	99 f0       	breq	.+38     	; 0x11c6 <__vector_23+0x28c>
                motors_on();
    11a0:	53 9a       	sbi	0x0a, 3	; 10
    11a2:	23 9a       	sbi	0x04, 3	; 4
    11a4:	10 92 b4 00 	sts	0x00B4, r1
    11a8:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    11ac:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    11ae:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    11b0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    11b2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    11b4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11b6:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    11b8:	10 92 0d 01 	sts	0x010D, r1
    11bc:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9c 01       	movw	r18, r24
    11cc:	00 90 60 01 	lds	r0, 0x0160
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <__vector_23+0x29c>
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <__vector_23+0x298>
    11da:	80 91 6f 01 	lds	r24, 0x016F
    11de:	90 91 70 01 	lds	r25, 0x0170
    11e2:	82 23       	and	r24, r18
    11e4:	93 23       	and	r25, r19
    11e6:	89 2b       	or	r24, r25
    11e8:	09 f0       	breq	.+2      	; 0x11ec <__vector_23+0x2b2>
    11ea:	86 c0       	rjmp	.+268    	; 0x12f8 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    11ec:	10 92 0d 01 	sts	0x010D, r1
    11f0:	e4 ce       	rjmp	.-568    	; 0xfba <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 0f 01 	sts	0x010F, r24
    11f8:	e0 ce       	rjmp	.-576    	; 0xfba <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    11fa:	e0 e0       	ldi	r30, 0x00	; 0
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1200:	80 91 6e 00 	lds	r24, 0x006E
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	80 93 6e 00 	sts	0x006E, r24
    120a:	16 bc       	out	0x26, r1	; 38
            bootload();
    120c:	e0 e0       	ldi	r30, 0x00	; 0
    120e:	f0 e7       	ldi	r31, 0x70	; 112
    1210:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1212:	10 92 0f 01 	sts	0x010F, r1
    1216:	d1 ce       	rjmp	.-606    	; 0xfba <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	80 93 0f 01 	sts	0x010F, r24
    121e:	cd ce       	rjmp	.-614    	; 0xfba <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1220:	85 e0       	ldi	r24, 0x05	; 5
    1222:	80 93 0f 01 	sts	0x010F, r24
    1226:	c9 ce       	rjmp	.-622    	; 0xfba <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1228:	80 91 0f 01 	lds	r24, 0x010F
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	09 f4       	brne	.+2      	; 0x1232 <__vector_23+0x2f8>
    1230:	c4 ce       	rjmp	.-632    	; 0xfba <__vector_23+0x80>
    1232:	80 91 0f 01 	lds	r24, 0x010F
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	09 f4       	brne	.+2      	; 0x123c <__vector_23+0x302>
    123a:	bf ce       	rjmp	.-642    	; 0xfba <__vector_23+0x80>
                motors_on();
    123c:	53 9a       	sbi	0x0a, 3	; 10
    123e:	23 9a       	sbi	0x04, 3	; 4
    1240:	10 92 b4 00 	sts	0x00B4, r1
    1244:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	80 93 0f 01 	sts	0x010F, r24
    124e:	b5 ce       	rjmp	.-662    	; 0xfba <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1250:	80 91 0f 01 	lds	r24, 0x010F
    1254:	86 30       	cpi	r24, 0x06	; 6
    1256:	09 f0       	breq	.+2      	; 0x125a <__vector_23+0x320>
    1258:	b0 ce       	rjmp	.-672    	; 0xfba <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    125a:	60 91 6f 01 	lds	r22, 0x016F
    125e:	80 eb       	ldi	r24, 0xB0	; 176
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1266:	60 91 70 01 	lds	r22, 0x0170
    126a:	81 eb       	ldi	r24, 0xB1	; 177
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1272:	60 91 73 01 	lds	r22, 0x0173
    1276:	85 e0       	ldi	r24, 0x05	; 5
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    127e:	60 91 5f 01 	lds	r22, 0x015F
    1282:	89 e0       	ldi	r24, 0x09	; 9
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    128a:	60 91 71 01 	lds	r22, 0x0171
    128e:	8c e0       	ldi	r24, 0x0C	; 12
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1296:	60 91 72 01 	lds	r22, 0x0172
    129a:	84 e1       	ldi	r24, 0x14	; 20
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <eeprom_write_byte>
                        motors_off();
    12a2:	53 98       	cbi	0x0a, 3	; 10
    12a4:	23 98       	cbi	0x04, 3	; 4
    12a6:	10 92 b4 00 	sts	0x00B4, r1
    12aa:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	80 93 0f 01 	sts	0x010F, r24
    12b4:	80 91 60 01 	lds	r24, 0x0160
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    12b8:	81 11       	cpse	r24, r1
    12ba:	5f cf       	rjmp	.-322    	; 0x117a <__vector_23+0x240>
    12bc:	7e ce       	rjmp	.-772    	; 0xfba <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12be:	88 23       	and	r24, r24
    12c0:	39 f2       	breq	.-114    	; 0x1250 <__vector_23+0x316>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	c9 f7       	brne	.-14     	; 0x12b8 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    12c6:	80 91 61 01 	lds	r24, 0x0161
    12ca:	90 91 62 01 	lds	r25, 0x0162
    12ce:	90 93 70 01 	sts	0x0170, r25
    12d2:	80 93 6f 01 	sts	0x016F, r24
                    cur_motion = MOVE_STOP;
    12d6:	10 92 0d 01 	sts	0x010D, r1
    12da:	4f cf       	rjmp	.-354    	; 0x117a <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12dc:	80 91 0d 01 	lds	r24, 0x010D
    12e0:	82 30       	cpi	r24, 0x02	; 2
    12e2:	71 f1       	breq	.+92     	; 0x1340 <__vector_23+0x406>
    12e4:	80 91 64 01 	lds	r24, 0x0164
                        prev_motion = MOVE_STOP;
    12e8:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    12f2:	80 93 5f 01 	sts	0x015F, r24
    12f6:	41 cf       	rjmp	.-382    	; 0x117a <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 0d 01 	sts	0x010D, r24
    12fe:	5d ce       	rjmp	.-838    	; 0xfba <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1300:	80 91 0d 01 	lds	r24, 0x010D
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	51 f0       	breq	.+20     	; 0x131c <__vector_23+0x3e2>
    1308:	80 91 63 01 	lds	r24, 0x0163
                        prev_motion = MOVE_STOP;
    130c:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    1316:	80 93 73 01 	sts	0x0173, r24
    131a:	2f cf       	rjmp	.-418    	; 0x117a <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    131c:	80 91 63 01 	lds	r24, 0x0163
    1320:	90 91 73 01 	lds	r25, 0x0173
    1324:	89 13       	cpse	r24, r25
    1326:	f2 cf       	rjmp	.-28     	; 0x130c <__vector_23+0x3d2>
    1328:	28 cf       	rjmp	.-432    	; 0x117a <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    132a:	80 91 72 01 	lds	r24, 0x0172
    132e:	98 13       	cpse	r25, r24
    1330:	19 cf       	rjmp	.-462    	; 0x1164 <__vector_23+0x22a>
    1332:	80 91 65 01 	lds	r24, 0x0165
    1336:	20 91 71 01 	lds	r18, 0x0171
    133a:	82 13       	cpse	r24, r18
    133c:	15 cf       	rjmp	.-470    	; 0x1168 <__vector_23+0x22e>
    133e:	1d cf       	rjmp	.-454    	; 0x117a <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1340:	80 91 64 01 	lds	r24, 0x0164
    1344:	90 91 5f 01 	lds	r25, 0x015F
    1348:	89 13       	cpse	r24, r25
    134a:	ce cf       	rjmp	.-100    	; 0x12e8 <__vector_23+0x3ae>
    134c:	16 cf       	rjmp	.-468    	; 0x117a <__vector_23+0x240>

0000134e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    134e:	fc 01       	movw	r30, r24
    1350:	ac 01       	movw	r20, r24
    1352:	46 5f       	subi	r20, 0xF6	; 246
    1354:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    135a:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    135c:	82 27       	eor	r24, r18
    135e:	08 2e       	mov	r0, r24
    1360:	82 95       	swap	r24
    1362:	80 7f       	andi	r24, 0xF0	; 240
    1364:	80 25       	eor	r24, r0
    1366:	09 2e       	mov	r0, r25
    1368:	98 2f       	mov	r25, r24
    136a:	82 95       	swap	r24
    136c:	8f 70       	andi	r24, 0x0F	; 15
    136e:	08 26       	eor	r0, r24
    1370:	86 95       	lsr	r24
    1372:	98 27       	eor	r25, r24
    1374:	89 27       	eor	r24, r25
    1376:	88 0f       	add	r24, r24
    1378:	88 0f       	add	r24, r24
    137a:	88 0f       	add	r24, r24
    137c:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    137e:	e4 17       	cp	r30, r20
    1380:	f5 07       	cpc	r31, r21
    1382:	59 f7       	brne	.-42     	; 0x135a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1384:	08 95       	ret

00001386 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1386:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1388:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    138a:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    138c:	20 91 33 01 	lds	r18, 0x0133
    or tmpreg1, ddrreg
    1390:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1392:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1394:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1396:	30 91 33 01 	lds	r19, 0x0133
    139a:	20 30       	cpi	r18, 0x00	; 0
    139c:	29 f0       	breq	.+10     	; 0x13a8 <message_send+0x22>
    139e:	00 00       	nop
    13a0:	25 b1       	in	r18, 0x05	; 5
    13a2:	23 2b       	or	r18, r19
    13a4:	25 b9       	out	0x05, r18	; 5
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <message_send+0x2a>
    13a8:	00 00       	nop
    13aa:	00 00       	nop
    13ac:	00 00       	nop
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <message_send+0x2a>
    13b0:	00 00       	nop
    13b2:	00 00       	nop
    13b4:	00 00       	nop
    13b6:	30 95       	com	r19
    13b8:	25 b1       	in	r18, 0x05	; 5
    13ba:	23 23       	and	r18, r19
    13bc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    13be:	2e ea       	ldi	r18, 0xAE	; 174
    13c0:	2a 95       	dec	r18
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    13c4:	2b ee       	ldi	r18, 0xEB	; 235

000013c6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    13c6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    13c8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    13ca:	0a c0       	rjmp	.+20     	; 0x13e0 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13cc:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13ce:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    13d2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13d4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    13d6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13d8:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13da:	0f be       	out	0x3f, r0	; 63
    return 0
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	08 95       	ret

000013e0 <nocollision>:
nocollision:
    nop
    13e0:	00 00       	nop
    dec tmpreg1
    13e2:	2a 95       	dec	r18
    brne checkcollision
    13e4:	81 f7       	brne	.-32     	; 0x13c6 <checkcollision>

    ldi tmpreg1, 0x01
    13e6:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13e8:	30 91 33 01 	lds	r19, 0x0133
    13ec:	20 30       	cpi	r18, 0x00	; 0
    13ee:	29 f0       	breq	.+10     	; 0x13fa <nocollision+0x1a>
    13f0:	00 00       	nop
    13f2:	25 b1       	in	r18, 0x05	; 5
    13f4:	23 2b       	or	r18, r19
    13f6:	25 b9       	out	0x05, r18	; 5
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <nocollision+0x22>
    13fa:	00 00       	nop
    13fc:	00 00       	nop
    13fe:	00 00       	nop
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <nocollision+0x22>
    1402:	00 00       	nop
    1404:	00 00       	nop
    1406:	00 00       	nop
    1408:	30 95       	com	r19
    140a:	25 b1       	in	r18, 0x05	; 5
    140c:	23 23       	and	r18, r19
    140e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1410:	00 00       	nop
    1412:	24 e5       	ldi	r18, 0x54	; 84
    1414:	2a 95       	dec	r18
    1416:	f1 f7       	brne	.-4      	; 0x1414 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1418:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    141a:	8c e0       	ldi	r24, 0x0C	; 12

0000141c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    141c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    141e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1420:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1422:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1424:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1426:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1428:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    142a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    142c:	50 e0       	ldi	r21, 0x00	; 0

0000142e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    142e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1430:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1432:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1434:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1436:	30 91 33 01 	lds	r19, 0x0133
    143a:	20 30       	cpi	r18, 0x00	; 0
    143c:	29 f0       	breq	.+10     	; 0x1448 <sendbit+0x1a>
    143e:	00 00       	nop
    1440:	25 b1       	in	r18, 0x05	; 5
    1442:	23 2b       	or	r18, r19
    1444:	25 b9       	out	0x05, r18	; 5
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <sendbit+0x22>
    1448:	00 00       	nop
    144a:	00 00       	nop
    144c:	00 00       	nop
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <sendbit+0x22>
    1450:	00 00       	nop
    1452:	00 00       	nop
    1454:	00 00       	nop
    1456:	30 95       	com	r19
    1458:	25 b1       	in	r18, 0x05	; 5
    145a:	23 23       	and	r18, r19
    145c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    145e:	00 00       	nop
    1460:	21 e5       	ldi	r18, 0x51	; 81
    1462:	2a 95       	dec	r18
    1464:	f1 f7       	brne	.-4      	; 0x1462 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1466:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1468:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    146a:	9a 95       	dec	r25
    brne sendbit
    146c:	01 f7       	brne	.-64     	; 0x142e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    146e:	8a 95       	dec	r24
    brne sendbyte
    1470:	a9 f6       	brne	.-86     	; 0x141c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1472:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1474:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1476:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1478:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    147a:	30 91 33 01 	lds	r19, 0x0133
    com tmpreg2
    147e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1480:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1482:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1484:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1486:	0f be       	out	0x3f, r0	; 63
    return 1
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	08 95       	ret

0000148c <main>:

}

int main(){

kilo_init();
    148c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <kilo_init>
kilo_start(setup,loop);
    1490:	66 e8       	ldi	r22, 0x86	; 134
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	81 e7       	ldi	r24, 0x71	; 113
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <kilo_start>

return 0;
}
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	08 95       	ret

000014a2 <__divmodhi4>:
    14a2:	97 fb       	bst	r25, 7
    14a4:	07 2e       	mov	r0, r23
    14a6:	16 f4       	brtc	.+4      	; 0x14ac <__divmodhi4+0xa>
    14a8:	00 94       	com	r0
    14aa:	07 d0       	rcall	.+14     	; 0x14ba <__divmodhi4_neg1>
    14ac:	77 fd       	sbrc	r23, 7
    14ae:	09 d0       	rcall	.+18     	; 0x14c2 <__divmodhi4_neg2>
    14b0:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__udivmodhi4>
    14b4:	07 fc       	sbrc	r0, 7
    14b6:	05 d0       	rcall	.+10     	; 0x14c2 <__divmodhi4_neg2>
    14b8:	3e f4       	brtc	.+14     	; 0x14c8 <__divmodhi4_exit>

000014ba <__divmodhi4_neg1>:
    14ba:	90 95       	com	r25
    14bc:	81 95       	neg	r24
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <__divmodhi4_neg2>:
    14c2:	70 95       	com	r23
    14c4:	61 95       	neg	r22
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255

000014c8 <__divmodhi4_exit>:
    14c8:	08 95       	ret

000014ca <__tablejump2__>:
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	05 90       	lpm	r0, Z+
    14d0:	f4 91       	lpm	r31, Z
    14d2:	e0 2d       	mov	r30, r0
    14d4:	09 94       	ijmp

000014d6 <__umulhisi3>:
    14d6:	a2 9f       	mul	r26, r18
    14d8:	b0 01       	movw	r22, r0
    14da:	b3 9f       	mul	r27, r19
    14dc:	c0 01       	movw	r24, r0
    14de:	a3 9f       	mul	r26, r19
    14e0:	70 0d       	add	r23, r0
    14e2:	81 1d       	adc	r24, r1
    14e4:	11 24       	eor	r1, r1
    14e6:	91 1d       	adc	r25, r1
    14e8:	b2 9f       	mul	r27, r18
    14ea:	70 0d       	add	r23, r0
    14ec:	81 1d       	adc	r24, r1
    14ee:	11 24       	eor	r1, r1
    14f0:	91 1d       	adc	r25, r1
    14f2:	08 95       	ret

000014f4 <__udivmodhi4>:
    14f4:	aa 1b       	sub	r26, r26
    14f6:	bb 1b       	sub	r27, r27
    14f8:	51 e1       	ldi	r21, 0x11	; 17
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <__udivmodhi4_ep>

000014fc <__udivmodhi4_loop>:
    14fc:	aa 1f       	adc	r26, r26
    14fe:	bb 1f       	adc	r27, r27
    1500:	a6 17       	cp	r26, r22
    1502:	b7 07       	cpc	r27, r23
    1504:	10 f0       	brcs	.+4      	; 0x150a <__udivmodhi4_ep>
    1506:	a6 1b       	sub	r26, r22
    1508:	b7 0b       	sbc	r27, r23

0000150a <__udivmodhi4_ep>:
    150a:	88 1f       	adc	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	5a 95       	dec	r21
    1510:	a9 f7       	brne	.-22     	; 0x14fc <__udivmodhi4_loop>
    1512:	80 95       	com	r24
    1514:	90 95       	com	r25
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	08 95       	ret

0000151c <__subsf3>:
    151c:	50 58       	subi	r21, 0x80	; 128

0000151e <__addsf3>:
    151e:	bb 27       	eor	r27, r27
    1520:	aa 27       	eor	r26, r26
    1522:	0e 94 a6 0a 	call	0x154c	; 0x154c <__addsf3x>
    1526:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_round>
    152a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_pscA>
    152e:	38 f0       	brcs	.+14     	; 0x153e <__addsf3+0x20>
    1530:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_pscB>
    1534:	20 f0       	brcs	.+8      	; 0x153e <__addsf3+0x20>
    1536:	39 f4       	brne	.+14     	; 0x1546 <__addsf3+0x28>
    1538:	9f 3f       	cpi	r25, 0xFF	; 255
    153a:	19 f4       	brne	.+6      	; 0x1542 <__addsf3+0x24>
    153c:	26 f4       	brtc	.+8      	; 0x1546 <__addsf3+0x28>
    153e:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__fp_nan>
    1542:	0e f4       	brtc	.+2      	; 0x1546 <__addsf3+0x28>
    1544:	e0 95       	com	r30
    1546:	e7 fb       	bst	r30, 7
    1548:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_inf>

0000154c <__addsf3x>:
    154c:	e9 2f       	mov	r30, r25
    154e:	0e 94 08 0c 	call	0x1810	; 0x1810 <__fp_split3>
    1552:	58 f3       	brcs	.-42     	; 0x152a <__addsf3+0xc>
    1554:	ba 17       	cp	r27, r26
    1556:	62 07       	cpc	r22, r18
    1558:	73 07       	cpc	r23, r19
    155a:	84 07       	cpc	r24, r20
    155c:	95 07       	cpc	r25, r21
    155e:	20 f0       	brcs	.+8      	; 0x1568 <__addsf3x+0x1c>
    1560:	79 f4       	brne	.+30     	; 0x1580 <__addsf3x+0x34>
    1562:	a6 f5       	brtc	.+104    	; 0x15cc <__addsf3x+0x80>
    1564:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_zero>
    1568:	0e f4       	brtc	.+2      	; 0x156c <__addsf3x+0x20>
    156a:	e0 95       	com	r30
    156c:	0b 2e       	mov	r0, r27
    156e:	ba 2f       	mov	r27, r26
    1570:	a0 2d       	mov	r26, r0
    1572:	0b 01       	movw	r0, r22
    1574:	b9 01       	movw	r22, r18
    1576:	90 01       	movw	r18, r0
    1578:	0c 01       	movw	r0, r24
    157a:	ca 01       	movw	r24, r20
    157c:	a0 01       	movw	r20, r0
    157e:	11 24       	eor	r1, r1
    1580:	ff 27       	eor	r31, r31
    1582:	59 1b       	sub	r21, r25
    1584:	99 f0       	breq	.+38     	; 0x15ac <__addsf3x+0x60>
    1586:	59 3f       	cpi	r21, 0xF9	; 249
    1588:	50 f4       	brcc	.+20     	; 0x159e <__addsf3x+0x52>
    158a:	50 3e       	cpi	r21, 0xE0	; 224
    158c:	68 f1       	brcs	.+90     	; 0x15e8 <__addsf3x+0x9c>
    158e:	1a 16       	cp	r1, r26
    1590:	f0 40       	sbci	r31, 0x00	; 0
    1592:	a2 2f       	mov	r26, r18
    1594:	23 2f       	mov	r18, r19
    1596:	34 2f       	mov	r19, r20
    1598:	44 27       	eor	r20, r20
    159a:	58 5f       	subi	r21, 0xF8	; 248
    159c:	f3 cf       	rjmp	.-26     	; 0x1584 <__addsf3x+0x38>
    159e:	46 95       	lsr	r20
    15a0:	37 95       	ror	r19
    15a2:	27 95       	ror	r18
    15a4:	a7 95       	ror	r26
    15a6:	f0 40       	sbci	r31, 0x00	; 0
    15a8:	53 95       	inc	r21
    15aa:	c9 f7       	brne	.-14     	; 0x159e <__addsf3x+0x52>
    15ac:	7e f4       	brtc	.+30     	; 0x15cc <__addsf3x+0x80>
    15ae:	1f 16       	cp	r1, r31
    15b0:	ba 0b       	sbc	r27, r26
    15b2:	62 0b       	sbc	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	84 0b       	sbc	r24, r20
    15b8:	ba f0       	brmi	.+46     	; 0x15e8 <__addsf3x+0x9c>
    15ba:	91 50       	subi	r25, 0x01	; 1
    15bc:	a1 f0       	breq	.+40     	; 0x15e6 <__addsf3x+0x9a>
    15be:	ff 0f       	add	r31, r31
    15c0:	bb 1f       	adc	r27, r27
    15c2:	66 1f       	adc	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	c2 f7       	brpl	.-16     	; 0x15ba <__addsf3x+0x6e>
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <__addsf3x+0x9c>
    15cc:	ba 0f       	add	r27, r26
    15ce:	62 1f       	adc	r22, r18
    15d0:	73 1f       	adc	r23, r19
    15d2:	84 1f       	adc	r24, r20
    15d4:	48 f4       	brcc	.+18     	; 0x15e8 <__addsf3x+0x9c>
    15d6:	87 95       	ror	r24
    15d8:	77 95       	ror	r23
    15da:	67 95       	ror	r22
    15dc:	b7 95       	ror	r27
    15de:	f7 95       	ror	r31
    15e0:	9e 3f       	cpi	r25, 0xFE	; 254
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <__addsf3x+0x9a>
    15e4:	b0 cf       	rjmp	.-160    	; 0x1546 <__addsf3+0x28>
    15e6:	93 95       	inc	r25
    15e8:	88 0f       	add	r24, r24
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <__addsf3x+0xa2>
    15ec:	99 27       	eor	r25, r25
    15ee:	ee 0f       	add	r30, r30
    15f0:	97 95       	ror	r25
    15f2:	87 95       	ror	r24
    15f4:	08 95       	ret

000015f6 <__divsf3>:
    15f6:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divsf3x>
    15fa:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_round>
    15fe:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_pscB>
    1602:	58 f0       	brcs	.+22     	; 0x161a <__divsf3+0x24>
    1604:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_pscA>
    1608:	40 f0       	brcs	.+16     	; 0x161a <__divsf3+0x24>
    160a:	29 f4       	brne	.+10     	; 0x1616 <__divsf3+0x20>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	29 f0       	breq	.+10     	; 0x161a <__divsf3+0x24>
    1610:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_inf>
    1614:	51 11       	cpse	r21, r1
    1616:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_szero>
    161a:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__fp_nan>

0000161e <__divsf3x>:
    161e:	0e 94 08 0c 	call	0x1810	; 0x1810 <__fp_split3>
    1622:	68 f3       	brcs	.-38     	; 0x15fe <__divsf3+0x8>

00001624 <__divsf3_pse>:
    1624:	99 23       	and	r25, r25
    1626:	b1 f3       	breq	.-20     	; 0x1614 <__divsf3+0x1e>
    1628:	55 23       	and	r21, r21
    162a:	91 f3       	breq	.-28     	; 0x1610 <__divsf3+0x1a>
    162c:	95 1b       	sub	r25, r21
    162e:	55 0b       	sbc	r21, r21
    1630:	bb 27       	eor	r27, r27
    1632:	aa 27       	eor	r26, r26
    1634:	62 17       	cp	r22, r18
    1636:	73 07       	cpc	r23, r19
    1638:	84 07       	cpc	r24, r20
    163a:	38 f0       	brcs	.+14     	; 0x164a <__divsf3_pse+0x26>
    163c:	9f 5f       	subi	r25, 0xFF	; 255
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
    1640:	22 0f       	add	r18, r18
    1642:	33 1f       	adc	r19, r19
    1644:	44 1f       	adc	r20, r20
    1646:	aa 1f       	adc	r26, r26
    1648:	a9 f3       	breq	.-22     	; 0x1634 <__divsf3_pse+0x10>
    164a:	35 d0       	rcall	.+106    	; 0x16b6 <__divsf3_pse+0x92>
    164c:	0e 2e       	mov	r0, r30
    164e:	3a f0       	brmi	.+14     	; 0x165e <__divsf3_pse+0x3a>
    1650:	e0 e8       	ldi	r30, 0x80	; 128
    1652:	32 d0       	rcall	.+100    	; 0x16b8 <__divsf3_pse+0x94>
    1654:	91 50       	subi	r25, 0x01	; 1
    1656:	50 40       	sbci	r21, 0x00	; 0
    1658:	e6 95       	lsr	r30
    165a:	00 1c       	adc	r0, r0
    165c:	ca f7       	brpl	.-14     	; 0x1650 <__divsf3_pse+0x2c>
    165e:	2b d0       	rcall	.+86     	; 0x16b6 <__divsf3_pse+0x92>
    1660:	fe 2f       	mov	r31, r30
    1662:	29 d0       	rcall	.+82     	; 0x16b6 <__divsf3_pse+0x92>
    1664:	66 0f       	add	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	88 1f       	adc	r24, r24
    166a:	bb 1f       	adc	r27, r27
    166c:	26 17       	cp	r18, r22
    166e:	37 07       	cpc	r19, r23
    1670:	48 07       	cpc	r20, r24
    1672:	ab 07       	cpc	r26, r27
    1674:	b0 e8       	ldi	r27, 0x80	; 128
    1676:	09 f0       	breq	.+2      	; 0x167a <__divsf3_pse+0x56>
    1678:	bb 0b       	sbc	r27, r27
    167a:	80 2d       	mov	r24, r0
    167c:	bf 01       	movw	r22, r30
    167e:	ff 27       	eor	r31, r31
    1680:	93 58       	subi	r25, 0x83	; 131
    1682:	5f 4f       	sbci	r21, 0xFF	; 255
    1684:	3a f0       	brmi	.+14     	; 0x1694 <__divsf3_pse+0x70>
    1686:	9e 3f       	cpi	r25, 0xFE	; 254
    1688:	51 05       	cpc	r21, r1
    168a:	78 f0       	brcs	.+30     	; 0x16aa <__divsf3_pse+0x86>
    168c:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_inf>
    1690:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_szero>
    1694:	5f 3f       	cpi	r21, 0xFF	; 255
    1696:	e4 f3       	brlt	.-8      	; 0x1690 <__divsf3_pse+0x6c>
    1698:	98 3e       	cpi	r25, 0xE8	; 232
    169a:	d4 f3       	brlt	.-12     	; 0x1690 <__divsf3_pse+0x6c>
    169c:	86 95       	lsr	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	b7 95       	ror	r27
    16a4:	f7 95       	ror	r31
    16a6:	9f 5f       	subi	r25, 0xFF	; 255
    16a8:	c9 f7       	brne	.-14     	; 0x169c <__divsf3_pse+0x78>
    16aa:	88 0f       	add	r24, r24
    16ac:	91 1d       	adc	r25, r1
    16ae:	96 95       	lsr	r25
    16b0:	87 95       	ror	r24
    16b2:	97 f9       	bld	r25, 7
    16b4:	08 95       	ret
    16b6:	e1 e0       	ldi	r30, 0x01	; 1
    16b8:	66 0f       	add	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	88 1f       	adc	r24, r24
    16be:	bb 1f       	adc	r27, r27
    16c0:	62 17       	cp	r22, r18
    16c2:	73 07       	cpc	r23, r19
    16c4:	84 07       	cpc	r24, r20
    16c6:	ba 07       	cpc	r27, r26
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <__divsf3_pse+0xae>
    16ca:	62 1b       	sub	r22, r18
    16cc:	73 0b       	sbc	r23, r19
    16ce:	84 0b       	sbc	r24, r20
    16d0:	ba 0b       	sbc	r27, r26
    16d2:	ee 1f       	adc	r30, r30
    16d4:	88 f7       	brcc	.-30     	; 0x16b8 <__divsf3_pse+0x94>
    16d6:	e0 95       	com	r30
    16d8:	08 95       	ret

000016da <__fixsfsi>:
    16da:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fixunssfsi>
    16de:	68 94       	set
    16e0:	b1 11       	cpse	r27, r1
    16e2:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_szero>
    16e6:	08 95       	ret

000016e8 <__fixunssfsi>:
    16e8:	0e 94 10 0c 	call	0x1820	; 0x1820 <__fp_splitA>
    16ec:	88 f0       	brcs	.+34     	; 0x1710 <__fixunssfsi+0x28>
    16ee:	9f 57       	subi	r25, 0x7F	; 127
    16f0:	98 f0       	brcs	.+38     	; 0x1718 <__fixunssfsi+0x30>
    16f2:	b9 2f       	mov	r27, r25
    16f4:	99 27       	eor	r25, r25
    16f6:	b7 51       	subi	r27, 0x17	; 23
    16f8:	b0 f0       	brcs	.+44     	; 0x1726 <__fixunssfsi+0x3e>
    16fa:	e1 f0       	breq	.+56     	; 0x1734 <__fixunssfsi+0x4c>
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	1a f0       	brmi	.+6      	; 0x170c <__fixunssfsi+0x24>
    1706:	ba 95       	dec	r27
    1708:	c9 f7       	brne	.-14     	; 0x16fc <__fixunssfsi+0x14>
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <__fixunssfsi+0x4c>
    170c:	b1 30       	cpi	r27, 0x01	; 1
    170e:	91 f0       	breq	.+36     	; 0x1734 <__fixunssfsi+0x4c>
    1710:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__fp_zero>
    1714:	b1 e0       	ldi	r27, 0x01	; 1
    1716:	08 95       	ret
    1718:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_zero>
    171c:	67 2f       	mov	r22, r23
    171e:	78 2f       	mov	r23, r24
    1720:	88 27       	eor	r24, r24
    1722:	b8 5f       	subi	r27, 0xF8	; 248
    1724:	39 f0       	breq	.+14     	; 0x1734 <__fixunssfsi+0x4c>
    1726:	b9 3f       	cpi	r27, 0xF9	; 249
    1728:	cc f3       	brlt	.-14     	; 0x171c <__fixunssfsi+0x34>
    172a:	86 95       	lsr	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b3 95       	inc	r27
    1732:	d9 f7       	brne	.-10     	; 0x172a <__fixunssfsi+0x42>
    1734:	3e f4       	brtc	.+14     	; 0x1744 <__fixunssfsi+0x5c>
    1736:	90 95       	com	r25
    1738:	80 95       	com	r24
    173a:	70 95       	com	r23
    173c:	61 95       	neg	r22
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	8f 4f       	sbci	r24, 0xFF	; 255
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	08 95       	ret

00001746 <__floatunsisf>:
    1746:	e8 94       	clt
    1748:	09 c0       	rjmp	.+18     	; 0x175c <__floatsisf+0x12>

0000174a <__floatsisf>:
    174a:	97 fb       	bst	r25, 7
    174c:	3e f4       	brtc	.+14     	; 0x175c <__floatsisf+0x12>
    174e:	90 95       	com	r25
    1750:	80 95       	com	r24
    1752:	70 95       	com	r23
    1754:	61 95       	neg	r22
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	8f 4f       	sbci	r24, 0xFF	; 255
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	99 23       	and	r25, r25
    175e:	a9 f0       	breq	.+42     	; 0x178a <__floatsisf+0x40>
    1760:	f9 2f       	mov	r31, r25
    1762:	96 e9       	ldi	r25, 0x96	; 150
    1764:	bb 27       	eor	r27, r27
    1766:	93 95       	inc	r25
    1768:	f6 95       	lsr	r31
    176a:	87 95       	ror	r24
    176c:	77 95       	ror	r23
    176e:	67 95       	ror	r22
    1770:	b7 95       	ror	r27
    1772:	f1 11       	cpse	r31, r1
    1774:	f8 cf       	rjmp	.-16     	; 0x1766 <__floatsisf+0x1c>
    1776:	fa f4       	brpl	.+62     	; 0x17b6 <__floatsisf+0x6c>
    1778:	bb 0f       	add	r27, r27
    177a:	11 f4       	brne	.+4      	; 0x1780 <__floatsisf+0x36>
    177c:	60 ff       	sbrs	r22, 0
    177e:	1b c0       	rjmp	.+54     	; 0x17b6 <__floatsisf+0x6c>
    1780:	6f 5f       	subi	r22, 0xFF	; 255
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	8f 4f       	sbci	r24, 0xFF	; 255
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	16 c0       	rjmp	.+44     	; 0x17b6 <__floatsisf+0x6c>
    178a:	88 23       	and	r24, r24
    178c:	11 f0       	breq	.+4      	; 0x1792 <__floatsisf+0x48>
    178e:	96 e9       	ldi	r25, 0x96	; 150
    1790:	11 c0       	rjmp	.+34     	; 0x17b4 <__floatsisf+0x6a>
    1792:	77 23       	and	r23, r23
    1794:	21 f0       	breq	.+8      	; 0x179e <__floatsisf+0x54>
    1796:	9e e8       	ldi	r25, 0x8E	; 142
    1798:	87 2f       	mov	r24, r23
    179a:	76 2f       	mov	r23, r22
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <__floatsisf+0x5e>
    179e:	66 23       	and	r22, r22
    17a0:	71 f0       	breq	.+28     	; 0x17be <__floatsisf+0x74>
    17a2:	96 e8       	ldi	r25, 0x86	; 134
    17a4:	86 2f       	mov	r24, r22
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	2a f0       	brmi	.+10     	; 0x17b6 <__floatsisf+0x6c>
    17ac:	9a 95       	dec	r25
    17ae:	66 0f       	add	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	88 1f       	adc	r24, r24
    17b4:	da f7       	brpl	.-10     	; 0x17ac <__floatsisf+0x62>
    17b6:	88 0f       	add	r24, r24
    17b8:	96 95       	lsr	r25
    17ba:	87 95       	ror	r24
    17bc:	97 f9       	bld	r25, 7
    17be:	08 95       	ret

000017c0 <__fp_inf>:
    17c0:	97 f9       	bld	r25, 7
    17c2:	9f 67       	ori	r25, 0x7F	; 127
    17c4:	80 e8       	ldi	r24, 0x80	; 128
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	08 95       	ret

000017cc <__fp_nan>:
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	80 ec       	ldi	r24, 0xC0	; 192
    17d0:	08 95       	ret

000017d2 <__fp_pscA>:
    17d2:	00 24       	eor	r0, r0
    17d4:	0a 94       	dec	r0
    17d6:	16 16       	cp	r1, r22
    17d8:	17 06       	cpc	r1, r23
    17da:	18 06       	cpc	r1, r24
    17dc:	09 06       	cpc	r0, r25
    17de:	08 95       	ret

000017e0 <__fp_pscB>:
    17e0:	00 24       	eor	r0, r0
    17e2:	0a 94       	dec	r0
    17e4:	12 16       	cp	r1, r18
    17e6:	13 06       	cpc	r1, r19
    17e8:	14 06       	cpc	r1, r20
    17ea:	05 06       	cpc	r0, r21
    17ec:	08 95       	ret

000017ee <__fp_round>:
    17ee:	09 2e       	mov	r0, r25
    17f0:	03 94       	inc	r0
    17f2:	00 0c       	add	r0, r0
    17f4:	11 f4       	brne	.+4      	; 0x17fa <__fp_round+0xc>
    17f6:	88 23       	and	r24, r24
    17f8:	52 f0       	brmi	.+20     	; 0x180e <__fp_round+0x20>
    17fa:	bb 0f       	add	r27, r27
    17fc:	40 f4       	brcc	.+16     	; 0x180e <__fp_round+0x20>
    17fe:	bf 2b       	or	r27, r31
    1800:	11 f4       	brne	.+4      	; 0x1806 <__fp_round+0x18>
    1802:	60 ff       	sbrs	r22, 0
    1804:	04 c0       	rjmp	.+8      	; 0x180e <__fp_round+0x20>
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	8f 4f       	sbci	r24, 0xFF	; 255
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	08 95       	ret

00001810 <__fp_split3>:
    1810:	57 fd       	sbrc	r21, 7
    1812:	90 58       	subi	r25, 0x80	; 128
    1814:	44 0f       	add	r20, r20
    1816:	55 1f       	adc	r21, r21
    1818:	59 f0       	breq	.+22     	; 0x1830 <__fp_splitA+0x10>
    181a:	5f 3f       	cpi	r21, 0xFF	; 255
    181c:	71 f0       	breq	.+28     	; 0x183a <__fp_splitA+0x1a>
    181e:	47 95       	ror	r20

00001820 <__fp_splitA>:
    1820:	88 0f       	add	r24, r24
    1822:	97 fb       	bst	r25, 7
    1824:	99 1f       	adc	r25, r25
    1826:	61 f0       	breq	.+24     	; 0x1840 <__fp_splitA+0x20>
    1828:	9f 3f       	cpi	r25, 0xFF	; 255
    182a:	79 f0       	breq	.+30     	; 0x184a <__fp_splitA+0x2a>
    182c:	87 95       	ror	r24
    182e:	08 95       	ret
    1830:	12 16       	cp	r1, r18
    1832:	13 06       	cpc	r1, r19
    1834:	14 06       	cpc	r1, r20
    1836:	55 1f       	adc	r21, r21
    1838:	f2 cf       	rjmp	.-28     	; 0x181e <__fp_split3+0xe>
    183a:	46 95       	lsr	r20
    183c:	f1 df       	rcall	.-30     	; 0x1820 <__fp_splitA>
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <__fp_splitA+0x30>
    1840:	16 16       	cp	r1, r22
    1842:	17 06       	cpc	r1, r23
    1844:	18 06       	cpc	r1, r24
    1846:	99 1f       	adc	r25, r25
    1848:	f1 cf       	rjmp	.-30     	; 0x182c <__fp_splitA+0xc>
    184a:	86 95       	lsr	r24
    184c:	71 05       	cpc	r23, r1
    184e:	61 05       	cpc	r22, r1
    1850:	08 94       	sec
    1852:	08 95       	ret

00001854 <__fp_zero>:
    1854:	e8 94       	clt

00001856 <__fp_szero>:
    1856:	bb 27       	eor	r27, r27
    1858:	66 27       	eor	r22, r22
    185a:	77 27       	eor	r23, r23
    185c:	cb 01       	movw	r24, r22
    185e:	97 f9       	bld	r25, 7
    1860:	08 95       	ret

00001862 <__mulsf3>:
    1862:	0e 94 44 0c 	call	0x1888	; 0x1888 <__mulsf3x>
    1866:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_round>
    186a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_pscA>
    186e:	38 f0       	brcs	.+14     	; 0x187e <__mulsf3+0x1c>
    1870:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_pscB>
    1874:	20 f0       	brcs	.+8      	; 0x187e <__mulsf3+0x1c>
    1876:	95 23       	and	r25, r21
    1878:	11 f0       	breq	.+4      	; 0x187e <__mulsf3+0x1c>
    187a:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_inf>
    187e:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__fp_nan>
    1882:	11 24       	eor	r1, r1
    1884:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_szero>

00001888 <__mulsf3x>:
    1888:	0e 94 08 0c 	call	0x1810	; 0x1810 <__fp_split3>
    188c:	70 f3       	brcs	.-36     	; 0x186a <__mulsf3+0x8>

0000188e <__mulsf3_pse>:
    188e:	95 9f       	mul	r25, r21
    1890:	c1 f3       	breq	.-16     	; 0x1882 <__mulsf3+0x20>
    1892:	95 0f       	add	r25, r21
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	55 1f       	adc	r21, r21
    1898:	62 9f       	mul	r22, r18
    189a:	f0 01       	movw	r30, r0
    189c:	72 9f       	mul	r23, r18
    189e:	bb 27       	eor	r27, r27
    18a0:	f0 0d       	add	r31, r0
    18a2:	b1 1d       	adc	r27, r1
    18a4:	63 9f       	mul	r22, r19
    18a6:	aa 27       	eor	r26, r26
    18a8:	f0 0d       	add	r31, r0
    18aa:	b1 1d       	adc	r27, r1
    18ac:	aa 1f       	adc	r26, r26
    18ae:	64 9f       	mul	r22, r20
    18b0:	66 27       	eor	r22, r22
    18b2:	b0 0d       	add	r27, r0
    18b4:	a1 1d       	adc	r26, r1
    18b6:	66 1f       	adc	r22, r22
    18b8:	82 9f       	mul	r24, r18
    18ba:	22 27       	eor	r18, r18
    18bc:	b0 0d       	add	r27, r0
    18be:	a1 1d       	adc	r26, r1
    18c0:	62 1f       	adc	r22, r18
    18c2:	73 9f       	mul	r23, r19
    18c4:	b0 0d       	add	r27, r0
    18c6:	a1 1d       	adc	r26, r1
    18c8:	62 1f       	adc	r22, r18
    18ca:	83 9f       	mul	r24, r19
    18cc:	a0 0d       	add	r26, r0
    18ce:	61 1d       	adc	r22, r1
    18d0:	22 1f       	adc	r18, r18
    18d2:	74 9f       	mul	r23, r20
    18d4:	33 27       	eor	r19, r19
    18d6:	a0 0d       	add	r26, r0
    18d8:	61 1d       	adc	r22, r1
    18da:	23 1f       	adc	r18, r19
    18dc:	84 9f       	mul	r24, r20
    18de:	60 0d       	add	r22, r0
    18e0:	21 1d       	adc	r18, r1
    18e2:	82 2f       	mov	r24, r18
    18e4:	76 2f       	mov	r23, r22
    18e6:	6a 2f       	mov	r22, r26
    18e8:	11 24       	eor	r1, r1
    18ea:	9f 57       	subi	r25, 0x7F	; 127
    18ec:	50 40       	sbci	r21, 0x00	; 0
    18ee:	9a f0       	brmi	.+38     	; 0x1916 <__mulsf3_pse+0x88>
    18f0:	f1 f0       	breq	.+60     	; 0x192e <__mulsf3_pse+0xa0>
    18f2:	88 23       	and	r24, r24
    18f4:	4a f0       	brmi	.+18     	; 0x1908 <__mulsf3_pse+0x7a>
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	bb 1f       	adc	r27, r27
    18fc:	66 1f       	adc	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	91 50       	subi	r25, 0x01	; 1
    1904:	50 40       	sbci	r21, 0x00	; 0
    1906:	a9 f7       	brne	.-22     	; 0x18f2 <__mulsf3_pse+0x64>
    1908:	9e 3f       	cpi	r25, 0xFE	; 254
    190a:	51 05       	cpc	r21, r1
    190c:	80 f0       	brcs	.+32     	; 0x192e <__mulsf3_pse+0xa0>
    190e:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__fp_inf>
    1912:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_szero>
    1916:	5f 3f       	cpi	r21, 0xFF	; 255
    1918:	e4 f3       	brlt	.-8      	; 0x1912 <__mulsf3_pse+0x84>
    191a:	98 3e       	cpi	r25, 0xE8	; 232
    191c:	d4 f3       	brlt	.-12     	; 0x1912 <__mulsf3_pse+0x84>
    191e:	86 95       	lsr	r24
    1920:	77 95       	ror	r23
    1922:	67 95       	ror	r22
    1924:	b7 95       	ror	r27
    1926:	f7 95       	ror	r31
    1928:	e7 95       	ror	r30
    192a:	9f 5f       	subi	r25, 0xFF	; 255
    192c:	c1 f7       	brne	.-16     	; 0x191e <__mulsf3_pse+0x90>
    192e:	fe 2b       	or	r31, r30
    1930:	88 0f       	add	r24, r24
    1932:	91 1d       	adc	r25, r1
    1934:	96 95       	lsr	r25
    1936:	87 95       	ror	r24
    1938:	97 f9       	bld	r25, 7
    193a:	08 95       	ret

0000193c <do_rand>:
    193c:	8f 92       	push	r8
    193e:	9f 92       	push	r9
    1940:	af 92       	push	r10
    1942:	bf 92       	push	r11
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
    1952:	68 81       	ld	r22, Y
    1954:	79 81       	ldd	r23, Y+1	; 0x01
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	61 15       	cp	r22, r1
    195c:	71 05       	cpc	r23, r1
    195e:	81 05       	cpc	r24, r1
    1960:	91 05       	cpc	r25, r1
    1962:	21 f4       	brne	.+8      	; 0x196c <do_rand+0x30>
    1964:	64 e2       	ldi	r22, 0x24	; 36
    1966:	79 ed       	ldi	r23, 0xD9	; 217
    1968:	8b e5       	ldi	r24, 0x5B	; 91
    196a:	97 e0       	ldi	r25, 0x07	; 7
    196c:	2d e1       	ldi	r18, 0x1D	; 29
    196e:	33 ef       	ldi	r19, 0xF3	; 243
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divmodsi4>
    1978:	49 01       	movw	r8, r18
    197a:	5a 01       	movw	r10, r20
    197c:	9b 01       	movw	r18, r22
    197e:	ac 01       	movw	r20, r24
    1980:	a7 ea       	ldi	r26, 0xA7	; 167
    1982:	b1 e4       	ldi	r27, 0x41	; 65
    1984:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__muluhisi3>
    1988:	6b 01       	movw	r12, r22
    198a:	7c 01       	movw	r14, r24
    198c:	ac ee       	ldi	r26, 0xEC	; 236
    198e:	b4 ef       	ldi	r27, 0xF4	; 244
    1990:	a5 01       	movw	r20, r10
    1992:	94 01       	movw	r18, r8
    1994:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__mulohisi3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8c 0d       	add	r24, r12
    199e:	9d 1d       	adc	r25, r13
    19a0:	ae 1d       	adc	r26, r14
    19a2:	bf 1d       	adc	r27, r15
    19a4:	b7 ff       	sbrs	r27, 7
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <do_rand+0x72>
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	a1 09       	sbc	r26, r1
    19ac:	b0 48       	sbci	r27, 0x80	; 128
    19ae:	88 83       	st	Y, r24
    19b0:	99 83       	std	Y+1, r25	; 0x01
    19b2:	aa 83       	std	Y+2, r26	; 0x02
    19b4:	bb 83       	std	Y+3, r27	; 0x03
    19b6:	9f 77       	andi	r25, 0x7F	; 127
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	8f 90       	pop	r8
    19cc:	08 95       	ret

000019ce <rand_r>:
    19ce:	0e 94 9e 0c 	call	0x193c	; 0x193c <do_rand>
    19d2:	08 95       	ret

000019d4 <rand>:
    19d4:	87 e0       	ldi	r24, 0x07	; 7
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	0e 94 9e 0c 	call	0x193c	; 0x193c <do_rand>
    19dc:	08 95       	ret

000019de <srand>:
    19de:	a0 e0       	ldi	r26, 0x00	; 0
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	80 93 07 01 	sts	0x0107, r24
    19e6:	90 93 08 01 	sts	0x0108, r25
    19ea:	a0 93 09 01 	sts	0x0109, r26
    19ee:	b0 93 0a 01 	sts	0x010A, r27
    19f2:	08 95       	ret

000019f4 <eeprom_read_byte>:
    19f4:	f9 99       	sbic	0x1f, 1	; 31
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <eeprom_read_byte>
    19f8:	92 bd       	out	0x22, r25	; 34
    19fa:	81 bd       	out	0x21, r24	; 33
    19fc:	f8 9a       	sbi	0x1f, 0	; 31
    19fe:	99 27       	eor	r25, r25
    1a00:	80 b5       	in	r24, 0x20	; 32
    1a02:	08 95       	ret

00001a04 <eeprom_write_byte>:
    1a04:	26 2f       	mov	r18, r22

00001a06 <eeprom_write_r18>:
    1a06:	f9 99       	sbic	0x1f, 1	; 31
    1a08:	fe cf       	rjmp	.-4      	; 0x1a06 <eeprom_write_r18>
    1a0a:	1f ba       	out	0x1f, r1	; 31
    1a0c:	92 bd       	out	0x22, r25	; 34
    1a0e:	81 bd       	out	0x21, r24	; 33
    1a10:	20 bd       	out	0x20, r18	; 32
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	fa 9a       	sbi	0x1f, 2	; 31
    1a18:	f9 9a       	sbi	0x1f, 1	; 31
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	08 95       	ret

00001a20 <__divmodsi4>:
    1a20:	05 2e       	mov	r0, r21
    1a22:	97 fb       	bst	r25, 7
    1a24:	1e f4       	brtc	.+6      	; 0x1a2c <__divmodsi4+0xc>
    1a26:	00 94       	com	r0
    1a28:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__negsi2>
    1a2c:	57 fd       	sbrc	r21, 7
    1a2e:	07 d0       	rcall	.+14     	; 0x1a3e <__divmodsi4_neg2>
    1a30:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodsi4>
    1a34:	07 fc       	sbrc	r0, 7
    1a36:	03 d0       	rcall	.+6      	; 0x1a3e <__divmodsi4_neg2>
    1a38:	4e f4       	brtc	.+18     	; 0x1a4c <__divmodsi4_exit>
    1a3a:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__negsi2>

00001a3e <__divmodsi4_neg2>:
    1a3e:	50 95       	com	r21
    1a40:	40 95       	com	r20
    1a42:	30 95       	com	r19
    1a44:	21 95       	neg	r18
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	4f 4f       	sbci	r20, 0xFF	; 255
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255

00001a4c <__divmodsi4_exit>:
    1a4c:	08 95       	ret

00001a4e <__negsi2>:
    1a4e:	90 95       	com	r25
    1a50:	80 95       	com	r24
    1a52:	70 95       	com	r23
    1a54:	61 95       	neg	r22
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	08 95       	ret

00001a5e <__muluhisi3>:
    1a5e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__umulhisi3>
    1a62:	a5 9f       	mul	r26, r21
    1a64:	90 0d       	add	r25, r0
    1a66:	b4 9f       	mul	r27, r20
    1a68:	90 0d       	add	r25, r0
    1a6a:	a4 9f       	mul	r26, r20
    1a6c:	80 0d       	add	r24, r0
    1a6e:	91 1d       	adc	r25, r1
    1a70:	11 24       	eor	r1, r1
    1a72:	08 95       	ret

00001a74 <__mulshisi3>:
    1a74:	b7 ff       	sbrs	r27, 7
    1a76:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__muluhisi3>

00001a7a <__mulohisi3>:
    1a7a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__muluhisi3>
    1a7e:	82 1b       	sub	r24, r18
    1a80:	93 0b       	sbc	r25, r19
    1a82:	08 95       	ret

00001a84 <__udivmodsi4>:
    1a84:	a1 e2       	ldi	r26, 0x21	; 33
    1a86:	1a 2e       	mov	r1, r26
    1a88:	aa 1b       	sub	r26, r26
    1a8a:	bb 1b       	sub	r27, r27
    1a8c:	fd 01       	movw	r30, r26
    1a8e:	0d c0       	rjmp	.+26     	; 0x1aaa <__udivmodsi4_ep>

00001a90 <__udivmodsi4_loop>:
    1a90:	aa 1f       	adc	r26, r26
    1a92:	bb 1f       	adc	r27, r27
    1a94:	ee 1f       	adc	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	a2 17       	cp	r26, r18
    1a9a:	b3 07       	cpc	r27, r19
    1a9c:	e4 07       	cpc	r30, r20
    1a9e:	f5 07       	cpc	r31, r21
    1aa0:	20 f0       	brcs	.+8      	; 0x1aaa <__udivmodsi4_ep>
    1aa2:	a2 1b       	sub	r26, r18
    1aa4:	b3 0b       	sbc	r27, r19
    1aa6:	e4 0b       	sbc	r30, r20
    1aa8:	f5 0b       	sbc	r31, r21

00001aaa <__udivmodsi4_ep>:
    1aaa:	66 1f       	adc	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	1a 94       	dec	r1
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <__udivmodsi4_loop>
    1ab6:	60 95       	com	r22
    1ab8:	70 95       	com	r23
    1aba:	80 95       	com	r24
    1abc:	90 95       	com	r25
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	bd 01       	movw	r22, r26
    1ac4:	cf 01       	movw	r24, r30
    1ac6:	08 95       	ret

00001ac8 <_exit>:
    1ac8:	f8 94       	cli

00001aca <__stop_program>:
    1aca:	ff cf       	rjmp	.-2      	; 0x1aca <__stop_program>
